// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Emr
{
    /// <summary>
    /// Provides an Elastic MapReduce Cluster, a web service that makes it easy to
    /// process large amounts of data efficiently. See [Amazon Elastic MapReduce Documentation](https://aws.amazon.com/documentation/elastic-mapreduce/)
    /// for more information.
    /// 
    /// To configure [Instance Groups](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-instance-group-configuration.html#emr-plan-instance-groups) for [task nodes](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-master-core-task-nodes.html#emr-plan-task), see the `aws.emr.InstanceGroup` resource.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var cluster = new Aws.Emr.Cluster("cluster", new Aws.Emr.ClusterArgs
    ///         {
    ///             ReleaseLabel = "emr-4.6.0",
    ///             Applications = 
    ///             {
    ///                 "Spark",
    ///             },
    ///             AdditionalInfo = @"{
    ///   ""instanceAwsClientConfiguration"": {
    ///     ""proxyPort"": 8099,
    ///     ""proxyHost"": ""myproxy.example.com""
    ///   }
    /// }
    /// ",
    ///             TerminationProtection = false,
    ///             KeepJobFlowAliveWhenNoSteps = true,
    ///             Ec2Attributes = new Aws.Emr.Inputs.ClusterEc2AttributesArgs
    ///             {
    ///                 SubnetId = aws_subnet.Main.Id,
    ///                 EmrManagedMasterSecurityGroup = aws_security_group.Sg.Id,
    ///                 EmrManagedSlaveSecurityGroup = aws_security_group.Sg.Id,
    ///                 InstanceProfile = aws_iam_instance_profile.Emr_profile.Arn,
    ///             },
    ///             MasterInstanceGroup = new Aws.Emr.Inputs.ClusterMasterInstanceGroupArgs
    ///             {
    ///                 InstanceType = "m4.large",
    ///             },
    ///             CoreInstanceGroup = new Aws.Emr.Inputs.ClusterCoreInstanceGroupArgs
    ///             {
    ///                 InstanceType = "c4.large",
    ///                 InstanceCount = 1,
    ///                 EbsConfigs = 
    ///                 {
    ///                     new Aws.Emr.Inputs.ClusterCoreInstanceGroupEbsConfigArgs
    ///                     {
    ///                         Size = 40,
    ///                         Type = "gp2",
    ///                         VolumesPerInstance = 1,
    ///                     },
    ///                 },
    ///                 BidPrice = "0.30",
    ///                 AutoscalingPolicy = @"{
    /// ""Constraints"": {
    ///   ""MinCapacity"": 1,
    ///   ""MaxCapacity"": 2
    /// },
    /// ""Rules"": [
    ///   {
    ///     ""Name"": ""ScaleOutMemoryPercentage"",
    ///     ""Description"": ""Scale out if YARNMemoryAvailablePercentage is less than 15"",
    ///     ""Action"": {
    ///       ""SimpleScalingPolicyConfiguration"": {
    ///         ""AdjustmentType"": ""CHANGE_IN_CAPACITY"",
    ///         ""ScalingAdjustment"": 1,
    ///         ""CoolDown"": 300
    ///       }
    ///     },
    ///     ""Trigger"": {
    ///       ""CloudWatchAlarmDefinition"": {
    ///         ""ComparisonOperator"": ""LESS_THAN"",
    ///         ""EvaluationPeriods"": 1,
    ///         ""MetricName"": ""YARNMemoryAvailablePercentage"",
    ///         ""Namespace"": ""AWS/ElasticMapReduce"",
    ///         ""Period"": 300,
    ///         ""Statistic"": ""AVERAGE"",
    ///         ""Threshold"": 15.0,
    ///         ""Unit"": ""PERCENT""
    ///       }
    ///     }
    ///   }
    /// ]
    /// }
    /// ",
    ///             },
    ///             EbsRootVolumeSize = 100,
    ///             Tags = 
    ///             {
    ///                 { "role", "rolename" },
    ///                 { "env", "env" },
    ///             },
    ///             BootstrapActions = 
    ///             {
    ///                 new Aws.Emr.Inputs.ClusterBootstrapActionArgs
    ///                 {
    ///                     Path = "s3://elasticmapreduce/bootstrap-actions/run-if",
    ///                     Name = "runif",
    ///                     Args = 
    ///                     {
    ///                         "instance.isMaster=true",
    ///                         "echo running on master node",
    ///                     },
    ///                 },
    ///             },
    ///             ConfigurationsJson = @"  [
    ///     {
    ///       ""Classification"": ""hadoop-env"",
    ///       ""Configurations"": [
    ///         {
    ///           ""Classification"": ""export"",
    ///           ""Properties"": {
    ///             ""JAVA_HOME"": ""/usr/lib/jvm/java-1.8.0""
    ///           }
    ///         }
    ///       ],
    ///       ""Properties"": {}
    ///     },
    ///     {
    ///       ""Classification"": ""spark-env"",
    ///       ""Configurations"": [
    ///         {
    ///           ""Classification"": ""export"",
    ///           ""Properties"": {
    ///             ""JAVA_HOME"": ""/usr/lib/jvm/java-1.8.0""
    ///           }
    ///         }
    ///       ],
    ///       ""Properties"": {}
    ///     }
    ///   ]
    /// ",
    ///             ServiceRole = aws_iam_role.Iam_emr_service_role.Arn,
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// The `aws.emr.Cluster` resource typically requires two IAM roles, one for the EMR Cluster
    /// to use as a service, and another to place on your Cluster Instances to interact
    /// with AWS from those instances. The suggested role policy template for the EMR service is `AmazonElasticMapReduceRole`,
    /// and `AmazonElasticMapReduceforEC2Role` for the EC2 profile. See the [Getting
    /// Started](https://docs.aws.amazon.com/ElasticMapReduce/latest/ManagementGuide/emr-gs-launch-sample-cluster.html)
    /// guide for more information on these IAM roles. There is also a fully-bootable
    /// example this provider configuration at the bottom of this page.
    /// ## Instance Fleet
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var example = new Aws.Emr.Cluster("example", new Aws.Emr.ClusterArgs
    ///         {
    ///             MasterInstanceFleet = new Aws.Emr.Inputs.ClusterMasterInstanceFleetArgs
    ///             {
    ///                 InstanceTypeConfigs = 
    ///                 {
    ///                     new Aws.Emr.Inputs.ClusterMasterInstanceFleetInstanceTypeConfigArgs
    ///                     {
    ///                         InstanceType = "m4.xlarge",
    ///                     },
    ///                 },
    ///                 TargetOnDemandCapacity = 1,
    ///             },
    ///             CoreInstanceFleet = new Aws.Emr.Inputs.ClusterCoreInstanceFleetArgs
    ///             {
    ///                 InstanceTypeConfigs = 
    ///                 {
    ///                     new Aws.Emr.Inputs.ClusterCoreInstanceFleetInstanceTypeConfigArgs
    ///                     {
    ///                         BidPriceAsPercentageOfOnDemandPrice = 80,
    ///                         EbsConfigs = 
    ///                         {
    ///                             new Aws.Emr.Inputs.ClusterCoreInstanceFleetInstanceTypeConfigEbsConfigArgs
    ///                             {
    ///                                 Size = 100,
    ///                                 Type = "gp2",
    ///                                 VolumesPerInstance = 1,
    ///                             },
    ///                         },
    ///                         InstanceType = "m3.xlarge",
    ///                         WeightedCapacity = 1,
    ///                     },
    ///                     new Aws.Emr.Inputs.ClusterCoreInstanceFleetInstanceTypeConfigArgs
    ///                     {
    ///                         BidPriceAsPercentageOfOnDemandPrice = 100,
    ///                         EbsConfigs = 
    ///                         {
    ///                             new Aws.Emr.Inputs.ClusterCoreInstanceFleetInstanceTypeConfigEbsConfigArgs
    ///                             {
    ///                                 Size = 100,
    ///                                 Type = "gp2",
    ///                                 VolumesPerInstance = 1,
    ///                             },
    ///                         },
    ///                         InstanceType = "m4.xlarge",
    ///                         WeightedCapacity = 1,
    ///                     },
    ///                     new Aws.Emr.Inputs.ClusterCoreInstanceFleetInstanceTypeConfigArgs
    ///                     {
    ///                         BidPriceAsPercentageOfOnDemandPrice = 100,
    ///                         EbsConfigs = 
    ///                         {
    ///                             new Aws.Emr.Inputs.ClusterCoreInstanceFleetInstanceTypeConfigEbsConfigArgs
    ///                             {
    ///                                 Size = 100,
    ///                                 Type = "gp2",
    ///                                 VolumesPerInstance = 1,
    ///                             },
    ///                         },
    ///                         InstanceType = "m4.2xlarge",
    ///                         WeightedCapacity = 2,
    ///                     },
    ///                 },
    ///                 LaunchSpecifications = new Aws.Emr.Inputs.ClusterCoreInstanceFleetLaunchSpecificationsArgs
    ///                 {
    ///                     SpotSpecifications = 
    ///                     {
    ///                         new Aws.Emr.Inputs.ClusterCoreInstanceFleetLaunchSpecificationsSpotSpecificationArgs
    ///                         {
    ///                             AllocationStrategy = "capacity-optimized",
    ///                             BlockDurationMinutes = 0,
    ///                             TimeoutAction = "SWITCH_TO_ON_DEMAND",
    ///                             TimeoutDurationMinutes = 10,
    ///                         },
    ///                     },
    ///                 },
    ///                 Name = "core fleet",
    ///                 TargetOnDemandCapacity = 2,
    ///                 TargetSpotCapacity = 2,
    ///             },
    ///         });
    ///         var task = new Aws.Emr.InstanceFleet("task", new Aws.Emr.InstanceFleetArgs
    ///         {
    ///             ClusterId = example.Id,
    ///             InstanceTypeConfigs = 
    ///             {
    ///                 new Aws.Emr.Inputs.InstanceFleetInstanceTypeConfigArgs
    ///                 {
    ///                     BidPriceAsPercentageOfOnDemandPrice = 100,
    ///                     EbsConfigs = 
    ///                     {
    ///                         new Aws.Emr.Inputs.InstanceFleetInstanceTypeConfigEbsConfigArgs
    ///                         {
    ///                             Size = 100,
    ///                             Type = "gp2",
    ///                             VolumesPerInstance = 1,
    ///                         },
    ///                     },
    ///                     InstanceType = "m4.xlarge",
    ///                     WeightedCapacity = 1,
    ///                 },
    ///                 new Aws.Emr.Inputs.InstanceFleetInstanceTypeConfigArgs
    ///                 {
    ///                     BidPriceAsPercentageOfOnDemandPrice = 100,
    ///                     EbsConfigs = 
    ///                     {
    ///                         new Aws.Emr.Inputs.InstanceFleetInstanceTypeConfigEbsConfigArgs
    ///                         {
    ///                             Size = 100,
    ///                             Type = "gp2",
    ///                             VolumesPerInstance = 1,
    ///                         },
    ///                     },
    ///                     InstanceType = "m4.2xlarge",
    ///                     WeightedCapacity = 2,
    ///                 },
    ///             },
    ///             LaunchSpecifications = new Aws.Emr.Inputs.InstanceFleetLaunchSpecificationsArgs
    ///             {
    ///                 SpotSpecifications = 
    ///                 {
    ///                     new Aws.Emr.Inputs.InstanceFleetLaunchSpecificationsSpotSpecificationArgs
    ///                     {
    ///                         AllocationStrategy = "capacity-optimized",
    ///                         BlockDurationMinutes = 0,
    ///                         TimeoutAction = "TERMINATE_CLUSTER",
    ///                         TimeoutDurationMinutes = 10,
    ///                     },
    ///                 },
    ///             },
    ///             TargetOnDemandCapacity = 1,
    ///             TargetSpotCapacity = 1,
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ### Enable Debug Logging
    /// 
    /// [Debug logging in EMR](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-plan-debugging.html)
    /// is implemented as a step. It is highly recommended to utilize [`ignoreChanges`](https://www.pulumi.com/docs/intro/concepts/programming-model/#ignorechanges) if other
    /// steps are being managed outside of this provider.
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         // ... other configuration ...
    ///         var example = new Aws.Emr.Cluster("example", new Aws.Emr.ClusterArgs
    ///         {
    ///             Steps = 
    ///             {
    ///                 new Aws.Emr.Inputs.ClusterStepArgs
    ///                 {
    ///                     ActionOnFailure = "TERMINATE_CLUSTER",
    ///                     Name = "Setup Hadoop Debugging",
    ///                     HadoopJarStep = new Aws.Emr.Inputs.ClusterStepHadoopJarStepArgs
    ///                     {
    ///                         Jar = "command-runner.jar",
    ///                         Args = 
    ///                         {
    ///                             "state-pusher-script",
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ### Multiple Node Master Instance Group
    /// 
    /// Available in EMR version 5.23.0 and later, an EMR Cluster can be launched with three master nodes for high availability. Additional information about this functionality and its requirements can be found in the [EMR Management Guide](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-plan-ha.html).
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         // This configuration is for illustrative purposes and highlights
    ///         // only relevant configurations for working with this functionality.
    ///         // Map public IP on launch must be enabled for public (Internet accessible) subnets
    ///         // ... other configuration ...
    ///         var exampleSubnet = new Aws.Ec2.Subnet("exampleSubnet", new Aws.Ec2.SubnetArgs
    ///         {
    ///             MapPublicIpOnLaunch = true,
    ///         });
    ///         // ... other configuration ...
    ///         var exampleCluster = new Aws.Emr.Cluster("exampleCluster", new Aws.Emr.ClusterArgs
    ///         {
    ///             ReleaseLabel = "emr-5.24.1",
    ///             TerminationProtection = true,
    ///             Ec2Attributes = new Aws.Emr.Inputs.ClusterEc2AttributesArgs
    ///             {
    ///                 SubnetId = exampleSubnet.Id,
    ///             },
    ///             MasterInstanceGroup = new Aws.Emr.Inputs.ClusterMasterInstanceGroupArgs
    ///             {
    ///                 InstanceCount = 3,
    ///             },
    ///             CoreInstanceGroup = ,
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Example bootable config
    /// 
    /// **NOTE:** This configuration demonstrates a minimal configuration needed to
    /// boot an example EMR Cluster. It is not meant to display best practices. Please
    /// use at your own risk.
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var mainVpc = new Aws.Ec2.Vpc("mainVpc", new Aws.Ec2.VpcArgs
    ///         {
    ///             CidrBlock = "168.31.0.0/16",
    ///             EnableDnsHostnames = true,
    ///             Tags = 
    ///             {
    ///                 { "name", "emr_test" },
    ///             },
    ///         });
    ///         var mainSubnet = new Aws.Ec2.Subnet("mainSubnet", new Aws.Ec2.SubnetArgs
    ///         {
    ///             VpcId = mainVpc.Id,
    ///             CidrBlock = "168.31.0.0/20",
    ///             Tags = 
    ///             {
    ///                 { "name", "emr_test" },
    ///             },
    ///         });
    ///         // IAM role for EMR Service
    ///         var iamEmrServiceRole = new Aws.Iam.Role("iamEmrServiceRole", new Aws.Iam.RoleArgs
    ///         {
    ///             AssumeRolePolicy = @"{
    ///   ""Version"": ""2008-10-17"",
    ///   ""Statement"": [
    ///     {
    ///       ""Sid"": """",
    ///       ""Effect"": ""Allow"",
    ///       ""Principal"": {
    ///         ""Service"": ""elasticmapreduce.amazonaws.com""
    ///       },
    ///       ""Action"": ""sts:AssumeRole""
    ///     }
    ///   ]
    /// }
    /// ",
    ///         });
    ///         // IAM Role for EC2 Instance Profile
    ///         var iamEmrProfileRole = new Aws.Iam.Role("iamEmrProfileRole", new Aws.Iam.RoleArgs
    ///         {
    ///             AssumeRolePolicy = @"{
    ///   ""Version"": ""2008-10-17"",
    ///   ""Statement"": [
    ///     {
    ///       ""Sid"": """",
    ///       ""Effect"": ""Allow"",
    ///       ""Principal"": {
    ///         ""Service"": ""ec2.amazonaws.com""
    ///       },
    ///       ""Action"": ""sts:AssumeRole""
    ///     }
    ///   ]
    /// }
    /// ",
    ///         });
    ///         var emrProfile = new Aws.Iam.InstanceProfile("emrProfile", new Aws.Iam.InstanceProfileArgs
    ///         {
    ///             Role = iamEmrProfileRole.Name,
    ///         });
    ///         var cluster = new Aws.Emr.Cluster("cluster", new Aws.Emr.ClusterArgs
    ///         {
    ///             ReleaseLabel = "emr-4.6.0",
    ///             Applications = 
    ///             {
    ///                 "Spark",
    ///             },
    ///             Ec2Attributes = new Aws.Emr.Inputs.ClusterEc2AttributesArgs
    ///             {
    ///                 SubnetId = mainSubnet.Id,
    ///                 EmrManagedMasterSecurityGroup = aws_security_group.Allow_all.Id,
    ///                 EmrManagedSlaveSecurityGroup = aws_security_group.Allow_all.Id,
    ///                 InstanceProfile = emrProfile.Arn,
    ///             },
    ///             MasterInstanceGroup = new Aws.Emr.Inputs.ClusterMasterInstanceGroupArgs
    ///             {
    ///                 InstanceType = "m5.xlarge",
    ///             },
    ///             CoreInstanceGroup = new Aws.Emr.Inputs.ClusterCoreInstanceGroupArgs
    ///             {
    ///                 InstanceCount = 1,
    ///                 InstanceType = "m5.xlarge",
    ///             },
    ///             Tags = 
    ///             {
    ///                 { "role", "rolename" },
    ///                 { "dns_zone", "env_zone" },
    ///                 { "env", "env" },
    ///                 { "name", "name-env" },
    ///             },
    ///             BootstrapActions = 
    ///             {
    ///                 new Aws.Emr.Inputs.ClusterBootstrapActionArgs
    ///                 {
    ///                     Path = "s3://elasticmapreduce/bootstrap-actions/run-if",
    ///                     Name = "runif",
    ///                     Args = 
    ///                     {
    ///                         "instance.isMaster=true",
    ///                         "echo running on master node",
    ///                     },
    ///                 },
    ///             },
    ///             ConfigurationsJson = @"  [
    ///     {
    ///       ""Classification"": ""hadoop-env"",
    ///       ""Configurations"": [
    ///         {
    ///           ""Classification"": ""export"",
    ///           ""Properties"": {
    ///             ""JAVA_HOME"": ""/usr/lib/jvm/java-1.8.0""
    ///           }
    ///         }
    ///       ],
    ///       ""Properties"": {}
    ///     },
    ///     {
    ///       ""Classification"": ""spark-env"",
    ///       ""Configurations"": [
    ///         {
    ///           ""Classification"": ""export"",
    ///           ""Properties"": {
    ///             ""JAVA_HOME"": ""/usr/lib/jvm/java-1.8.0""
    ///           }
    ///         }
    ///       ],
    ///       ""Properties"": {}
    ///     }
    ///   ]
    /// ",
    ///             ServiceRole = iamEmrServiceRole.Arn,
    ///         });
    ///         var allowAccess = new Aws.Ec2.SecurityGroup("allowAccess", new Aws.Ec2.SecurityGroupArgs
    ///         {
    ///             Description = "Allow inbound traffic",
    ///             VpcId = mainVpc.Id,
    ///             Ingress = 
    ///             {
    ///                 new Aws.Ec2.Inputs.SecurityGroupIngressArgs
    ///                 {
    ///                     FromPort = 0,
    ///                     ToPort = 0,
    ///                     Protocol = "-1",
    ///                     CidrBlocks = mainVpc.CidrBlock,
    ///                 },
    ///             },
    ///             Egress = 
    ///             {
    ///                 new Aws.Ec2.Inputs.SecurityGroupEgressArgs
    ///                 {
    ///                     FromPort = 0,
    ///                     ToPort = 0,
    ///                     Protocol = "-1",
    ///                     CidrBlocks = 
    ///                     {
    ///                         "0.0.0.0/0",
    ///                     },
    ///                 },
    ///             },
    ///             Tags = 
    ///             {
    ///                 { "name", "emr_test" },
    ///             },
    ///         }, new CustomResourceOptions
    ///         {
    ///             DependsOn = 
    ///             {
    ///                 mainSubnet,
    ///             },
    ///         });
    ///         var gw = new Aws.Ec2.InternetGateway("gw", new Aws.Ec2.InternetGatewayArgs
    ///         {
    ///             VpcId = mainVpc.Id,
    ///         });
    ///         var routeTable = new Aws.Ec2.RouteTable("routeTable", new Aws.Ec2.RouteTableArgs
    ///         {
    ///             VpcId = mainVpc.Id,
    ///             Routes = 
    ///             {
    ///                 new Aws.Ec2.Inputs.RouteTableRouteArgs
    ///                 {
    ///                     CidrBlock = "0.0.0.0/0",
    ///                     GatewayId = gw.Id,
    ///                 },
    ///             },
    ///         });
    ///         var mainRouteTableAssociation = new Aws.Ec2.MainRouteTableAssociation("mainRouteTableAssociation", new Aws.Ec2.MainRouteTableAssociationArgs
    ///         {
    ///             VpcId = mainVpc.Id,
    ///             RouteTableId = routeTable.Id,
    ///         });
    ///         //##
    ///         var iamEmrServicePolicy = new Aws.Iam.RolePolicy("iamEmrServicePolicy", new Aws.Iam.RolePolicyArgs
    ///         {
    ///             Role = iamEmrServiceRole.Id,
    ///             Policy = @"{
    ///     ""Version"": ""2012-10-17"",
    ///     ""Statement"": [{
    ///         ""Effect"": ""Allow"",
    ///         ""Resource"": ""*"",
    ///         ""Action"": [
    ///             ""ec2:AuthorizeSecurityGroupEgress"",
    ///             ""ec2:AuthorizeSecurityGroupIngress"",
    ///             ""ec2:CancelSpotInstanceRequests"",
    ///             ""ec2:CreateNetworkInterface"",
    ///             ""ec2:CreateSecurityGroup"",
    ///             ""ec2:CreateTags"",
    ///             ""ec2:DeleteNetworkInterface"",
    ///             ""ec2:DeleteSecurityGroup"",
    ///             ""ec2:DeleteTags"",
    ///             ""ec2:DescribeAvailabilityZones"",
    ///             ""ec2:DescribeAccountAttributes"",
    ///             ""ec2:DescribeDhcpOptions"",
    ///             ""ec2:DescribeInstanceStatus"",
    ///             ""ec2:DescribeInstances"",
    ///             ""ec2:DescribeKeyPairs"",
    ///             ""ec2:DescribeNetworkAcls"",
    ///             ""ec2:DescribeNetworkInterfaces"",
    ///             ""ec2:DescribePrefixLists"",
    ///             ""ec2:DescribeRouteTables"",
    ///             ""ec2:DescribeSecurityGroups"",
    ///             ""ec2:DescribeSpotInstanceRequests"",
    ///             ""ec2:DescribeSpotPriceHistory"",
    ///             ""ec2:DescribeSubnets"",
    ///             ""ec2:DescribeVpcAttribute"",
    ///             ""ec2:DescribeVpcEndpoints"",
    ///             ""ec2:DescribeVpcEndpointServices"",
    ///             ""ec2:DescribeVpcs"",
    ///             ""ec2:DetachNetworkInterface"",
    ///             ""ec2:ModifyImageAttribute"",
    ///             ""ec2:ModifyInstanceAttribute"",
    ///             ""ec2:RequestSpotInstances"",
    ///             ""ec2:RevokeSecurityGroupEgress"",
    ///             ""ec2:RunInstances"",
    ///             ""ec2:TerminateInstances"",
    ///             ""ec2:DeleteVolume"",
    ///             ""ec2:DescribeVolumeStatus"",
    ///             ""ec2:DescribeVolumes"",
    ///             ""ec2:DetachVolume"",
    ///             ""iam:GetRole"",
    ///             ""iam:GetRolePolicy"",
    ///             ""iam:ListInstanceProfiles"",
    ///             ""iam:ListRolePolicies"",
    ///             ""iam:PassRole"",
    ///             ""s3:CreateBucket"",
    ///             ""s3:Get*"",
    ///             ""s3:List*"",
    ///             ""sdb:BatchPutAttributes"",
    ///             ""sdb:Select"",
    ///             ""sqs:CreateQueue"",
    ///             ""sqs:Delete*"",
    ///             ""sqs:GetQueue*"",
    ///             ""sqs:PurgeQueue"",
    ///             ""sqs:ReceiveMessage""
    ///         ]
    ///     }]
    /// }
    /// ",
    ///         });
    ///         var iamEmrProfilePolicy = new Aws.Iam.RolePolicy("iamEmrProfilePolicy", new Aws.Iam.RolePolicyArgs
    ///         {
    ///             Role = iamEmrProfileRole.Id,
    ///             Policy = @"{
    ///     ""Version"": ""2012-10-17"",
    ///     ""Statement"": [{
    ///         ""Effect"": ""Allow"",
    ///         ""Resource"": ""*"",
    ///         ""Action"": [
    ///             ""cloudwatch:*"",
    ///             ""dynamodb:*"",
    ///             ""ec2:Describe*"",
    ///             ""elasticmapreduce:Describe*"",
    ///             ""elasticmapreduce:ListBootstrapActions"",
    ///             ""elasticmapreduce:ListClusters"",
    ///             ""elasticmapreduce:ListInstanceGroups"",
    ///             ""elasticmapreduce:ListInstances"",
    ///             ""elasticmapreduce:ListSteps"",
    ///             ""kinesis:CreateStream"",
    ///             ""kinesis:DeleteStream"",
    ///             ""kinesis:DescribeStream"",
    ///             ""kinesis:GetRecords"",
    ///             ""kinesis:GetShardIterator"",
    ///             ""kinesis:MergeShards"",
    ///             ""kinesis:PutRecord"",
    ///             ""kinesis:SplitShard"",
    ///             ""rds:Describe*"",
    ///             ""s3:*"",
    ///             ""sdb:*"",
    ///             ""sns:*"",
    ///             ""sqs:*""
    ///         ]
    ///     }]
    /// }
    /// ",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// EMR clusters can be imported using the `id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import aws:emr/cluster:Cluster cluster j-123456ABCDEF
    /// ```
    /// 
    ///  Since the API does not return the actual values for Kerberos configurations, environments with those this provider configurations will need to use the [`ignoreChanges`](https://www.pulumi.com/docs/intro/concepts/programming-model/#ignorechanges) available to all this provider resources to prevent perpetual differences, e.g. hcl resource "aws_emr_cluster" "example" {
    /// 
    /// # ... other configuration ...
    /// 
    ///  lifecycle {
    /// 
    ///  ignore_changes = [kerberos_attributes]
    /// 
    ///  } }
    /// </summary>
    public partial class Cluster : Pulumi.CustomResource
    {
        /// <summary>
        /// A JSON string for selecting additional features such as adding proxy information. Note: Currently there is no API to retrieve the value of this argument after EMR cluster creation from provider, therefore this provider cannot detect drift from the actual EMR cluster if its value is changed outside this provider.
        /// </summary>
        [Output("additionalInfo")]
        public Output<string?> AdditionalInfo { get; private set; } = null!;

        /// <summary>
        /// A list of applications for the cluster. Valid values are: `Flink`, `Hadoop`, `Hive`, `Mahout`, `Pig`, `Spark`, and `JupyterHub` (as of EMR 5.14.0). Case insensitive
        /// </summary>
        [Output("applications")]
        public Output<ImmutableArray<string>> Applications { get; private set; } = null!;

        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// An IAM role for automatic scaling policies. The IAM role provides permissions that the automatic scaling feature requires to launch and terminate EC2 instances in an instance group.
        /// </summary>
        [Output("autoscalingRole")]
        public Output<string?> AutoscalingRole { get; private set; } = null!;

        /// <summary>
        /// Ordered list of bootstrap actions that will be run before Hadoop is started on the cluster nodes. Defined below.
        /// </summary>
        [Output("bootstrapActions")]
        public Output<ImmutableArray<Outputs.ClusterBootstrapAction>> BootstrapActions { get; private set; } = null!;

        [Output("clusterState")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// A configuration classification that applies when provisioning cluster instances, which can include configurations for applications and software that run on the cluster. List of `configuration` blocks.
        /// </summary>
        [Output("configurations")]
        public Output<string?> Configurations { get; private set; } = null!;

        /// <summary>
        /// A JSON string for supplying list of configurations for the EMR cluster.
        /// </summary>
        [Output("configurationsJson")]
        public Output<string?> ConfigurationsJson { get; private set; } = null!;

        /// <summary>
        /// Configuration block to use an [Instance Fleet](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-instance-fleet.html) for the core node type. Cannot be specified if any `core_instance_group` configuration blocks are set. Detailed below.
        /// </summary>
        [Output("coreInstanceFleet")]
        public Output<Outputs.ClusterCoreInstanceFleet> CoreInstanceFleet { get; private set; } = null!;

        /// <summary>
        /// Configuration block to use an [Instance Group](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-instance-group-configuration.html#emr-plan-instance-groups) for the [core node type](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-master-core-task-nodes.html#emr-plan-core).
        /// </summary>
        [Output("coreInstanceGroup")]
        public Output<Outputs.ClusterCoreInstanceGroup> CoreInstanceGroup { get; private set; } = null!;

        /// <summary>
        /// A custom Amazon Linux AMI for the cluster (instead of an EMR-owned AMI). Available in Amazon EMR version 5.7.0 and later.
        /// </summary>
        [Output("customAmiId")]
        public Output<string?> CustomAmiId { get; private set; } = null!;

        /// <summary>
        /// Size in GiB of the EBS root device volume of the Linux AMI that is used for each EC2 instance. Available in Amazon EMR version 4.x and later.
        /// </summary>
        [Output("ebsRootVolumeSize")]
        public Output<int?> EbsRootVolumeSize { get; private set; } = null!;

        /// <summary>
        /// Attributes for the EC2 instances running the job flow. Defined below
        /// </summary>
        [Output("ec2Attributes")]
        public Output<Outputs.ClusterEc2Attributes?> Ec2Attributes { get; private set; } = null!;

        /// <summary>
        /// Switch on/off run cluster with no steps or when all steps are complete (default is on)
        /// </summary>
        [Output("keepJobFlowAliveWhenNoSteps")]
        public Output<bool> KeepJobFlowAliveWhenNoSteps { get; private set; } = null!;

        /// <summary>
        /// Kerberos configuration for the cluster. Defined below
        /// </summary>
        [Output("kerberosAttributes")]
        public Output<Outputs.ClusterKerberosAttributes?> KerberosAttributes { get; private set; } = null!;

        /// <summary>
        /// S3 bucket to write the log files of the job flow. If a value is not provided, logs are not created
        /// </summary>
        [Output("logUri")]
        public Output<string?> LogUri { get; private set; } = null!;

        /// <summary>
        /// Configuration block to use an [Instance Fleet](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-instance-fleet.html) for the master node type. Cannot be specified if any `master_instance_group` configuration blocks are set. Detailed below.
        /// </summary>
        [Output("masterInstanceFleet")]
        public Output<Outputs.ClusterMasterInstanceFleet> MasterInstanceFleet { get; private set; } = null!;

        /// <summary>
        /// Configuration block to use an [Instance Group](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-instance-group-configuration.html#emr-plan-instance-groups) for the [master node type](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-master-core-task-nodes.html#emr-plan-master).
        /// </summary>
        [Output("masterInstanceGroup")]
        public Output<Outputs.ClusterMasterInstanceGroup> MasterInstanceGroup { get; private set; } = null!;

        /// <summary>
        /// The public DNS name of the master EC2 instance.
        /// * `core_instance_group.0.id` - Core node type Instance Group ID, if using Instance Group for this node type.
        /// </summary>
        [Output("masterPublicDns")]
        public Output<string> MasterPublicDns { get; private set; } = null!;

        /// <summary>
        /// Friendly name given to the instance fleet.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The release label for the Amazon EMR release
        /// </summary>
        [Output("releaseLabel")]
        public Output<string> ReleaseLabel { get; private set; } = null!;

        /// <summary>
        /// The way that individual Amazon EC2 instances terminate when an automatic scale-in activity occurs or an `instance group` is resized.
        /// </summary>
        [Output("scaleDownBehavior")]
        public Output<string> ScaleDownBehavior { get; private set; } = null!;

        /// <summary>
        /// The security configuration name to attach to the EMR cluster. Only valid for EMR clusters with `release_label` 4.8.0 or greater
        /// </summary>
        [Output("securityConfiguration")]
        public Output<string?> SecurityConfiguration { get; private set; } = null!;

        /// <summary>
        /// IAM role that will be assumed by the Amazon EMR service to access AWS resources
        /// </summary>
        [Output("serviceRole")]
        public Output<string> ServiceRole { get; private set; } = null!;

        /// <summary>
        /// The number of steps that can be executed concurrently. You can specify a maximum of 256 steps. Only valid for EMR clusters with `release_label` 5.28.0 or greater. (default is 1)
        /// </summary>
        [Output("stepConcurrencyLevel")]
        public Output<int?> StepConcurrencyLevel { get; private set; } = null!;

        /// <summary>
        /// List of steps to run when creating the cluster. Defined below. It is highly recommended to utilize [`ignoreChanges`](https://www.pulumi.com/docs/intro/concepts/programming-model/#ignorechanges) if other steps are being managed outside of this provider.
        /// </summary>
        [Output("steps")]
        public Output<ImmutableArray<Outputs.ClusterStep>> Steps { get; private set; } = null!;

        /// <summary>
        /// list of tags to apply to the EMR Cluster
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Switch on/off termination protection (default is `false`, except when using multiple master nodes). Before attempting to destroy the resource when termination protection is enabled, this configuration must be applied with its value set to `false`.
        /// </summary>
        [Output("terminationProtection")]
        public Output<bool> TerminationProtection { get; private set; } = null!;

        /// <summary>
        /// Whether the job flow is visible to all IAM users of the AWS account associated with the job flow. Default `true`
        /// </summary>
        [Output("visibleToAllUsers")]
        public Output<bool?> VisibleToAllUsers { get; private set; } = null!;


        /// <summary>
        /// Create a Cluster resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Cluster(string name, ClusterArgs args, CustomResourceOptions? options = null)
            : base("aws:emr/cluster:Cluster", name, args ?? new ClusterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Cluster(string name, Input<string> id, ClusterState? state = null, CustomResourceOptions? options = null)
            : base("aws:emr/cluster:Cluster", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Cluster resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Cluster Get(string name, Input<string> id, ClusterState? state = null, CustomResourceOptions? options = null)
        {
            return new Cluster(name, id, state, options);
        }
    }

    public sealed class ClusterArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// A JSON string for selecting additional features such as adding proxy information. Note: Currently there is no API to retrieve the value of this argument after EMR cluster creation from provider, therefore this provider cannot detect drift from the actual EMR cluster if its value is changed outside this provider.
        /// </summary>
        [Input("additionalInfo")]
        public Input<string>? AdditionalInfo { get; set; }

        [Input("applications")]
        private InputList<string>? _applications;

        /// <summary>
        /// A list of applications for the cluster. Valid values are: `Flink`, `Hadoop`, `Hive`, `Mahout`, `Pig`, `Spark`, and `JupyterHub` (as of EMR 5.14.0). Case insensitive
        /// </summary>
        public InputList<string> Applications
        {
            get => _applications ?? (_applications = new InputList<string>());
            set => _applications = value;
        }

        /// <summary>
        /// An IAM role for automatic scaling policies. The IAM role provides permissions that the automatic scaling feature requires to launch and terminate EC2 instances in an instance group.
        /// </summary>
        [Input("autoscalingRole")]
        public Input<string>? AutoscalingRole { get; set; }

        [Input("bootstrapActions")]
        private InputList<Inputs.ClusterBootstrapActionArgs>? _bootstrapActions;

        /// <summary>
        /// Ordered list of bootstrap actions that will be run before Hadoop is started on the cluster nodes. Defined below.
        /// </summary>
        public InputList<Inputs.ClusterBootstrapActionArgs> BootstrapActions
        {
            get => _bootstrapActions ?? (_bootstrapActions = new InputList<Inputs.ClusterBootstrapActionArgs>());
            set => _bootstrapActions = value;
        }

        /// <summary>
        /// A configuration classification that applies when provisioning cluster instances, which can include configurations for applications and software that run on the cluster. List of `configuration` blocks.
        /// </summary>
        [Input("configurations")]
        public Input<string>? Configurations { get; set; }

        /// <summary>
        /// A JSON string for supplying list of configurations for the EMR cluster.
        /// </summary>
        [Input("configurationsJson")]
        public Input<string>? ConfigurationsJson { get; set; }

        /// <summary>
        /// Configuration block to use an [Instance Fleet](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-instance-fleet.html) for the core node type. Cannot be specified if any `core_instance_group` configuration blocks are set. Detailed below.
        /// </summary>
        [Input("coreInstanceFleet")]
        public Input<Inputs.ClusterCoreInstanceFleetArgs>? CoreInstanceFleet { get; set; }

        /// <summary>
        /// Configuration block to use an [Instance Group](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-instance-group-configuration.html#emr-plan-instance-groups) for the [core node type](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-master-core-task-nodes.html#emr-plan-core).
        /// </summary>
        [Input("coreInstanceGroup")]
        public Input<Inputs.ClusterCoreInstanceGroupArgs>? CoreInstanceGroup { get; set; }

        /// <summary>
        /// A custom Amazon Linux AMI for the cluster (instead of an EMR-owned AMI). Available in Amazon EMR version 5.7.0 and later.
        /// </summary>
        [Input("customAmiId")]
        public Input<string>? CustomAmiId { get; set; }

        /// <summary>
        /// Size in GiB of the EBS root device volume of the Linux AMI that is used for each EC2 instance. Available in Amazon EMR version 4.x and later.
        /// </summary>
        [Input("ebsRootVolumeSize")]
        public Input<int>? EbsRootVolumeSize { get; set; }

        /// <summary>
        /// Attributes for the EC2 instances running the job flow. Defined below
        /// </summary>
        [Input("ec2Attributes")]
        public Input<Inputs.ClusterEc2AttributesArgs>? Ec2Attributes { get; set; }

        /// <summary>
        /// Switch on/off run cluster with no steps or when all steps are complete (default is on)
        /// </summary>
        [Input("keepJobFlowAliveWhenNoSteps")]
        public Input<bool>? KeepJobFlowAliveWhenNoSteps { get; set; }

        /// <summary>
        /// Kerberos configuration for the cluster. Defined below
        /// </summary>
        [Input("kerberosAttributes")]
        public Input<Inputs.ClusterKerberosAttributesArgs>? KerberosAttributes { get; set; }

        /// <summary>
        /// S3 bucket to write the log files of the job flow. If a value is not provided, logs are not created
        /// </summary>
        [Input("logUri")]
        public Input<string>? LogUri { get; set; }

        /// <summary>
        /// Configuration block to use an [Instance Fleet](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-instance-fleet.html) for the master node type. Cannot be specified if any `master_instance_group` configuration blocks are set. Detailed below.
        /// </summary>
        [Input("masterInstanceFleet")]
        public Input<Inputs.ClusterMasterInstanceFleetArgs>? MasterInstanceFleet { get; set; }

        /// <summary>
        /// Configuration block to use an [Instance Group](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-instance-group-configuration.html#emr-plan-instance-groups) for the [master node type](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-master-core-task-nodes.html#emr-plan-master).
        /// </summary>
        [Input("masterInstanceGroup")]
        public Input<Inputs.ClusterMasterInstanceGroupArgs>? MasterInstanceGroup { get; set; }

        /// <summary>
        /// Friendly name given to the instance fleet.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The release label for the Amazon EMR release
        /// </summary>
        [Input("releaseLabel", required: true)]
        public Input<string> ReleaseLabel { get; set; } = null!;

        /// <summary>
        /// The way that individual Amazon EC2 instances terminate when an automatic scale-in activity occurs or an `instance group` is resized.
        /// </summary>
        [Input("scaleDownBehavior")]
        public Input<string>? ScaleDownBehavior { get; set; }

        /// <summary>
        /// The security configuration name to attach to the EMR cluster. Only valid for EMR clusters with `release_label` 4.8.0 or greater
        /// </summary>
        [Input("securityConfiguration")]
        public Input<string>? SecurityConfiguration { get; set; }

        /// <summary>
        /// IAM role that will be assumed by the Amazon EMR service to access AWS resources
        /// </summary>
        [Input("serviceRole", required: true)]
        public Input<string> ServiceRole { get; set; } = null!;

        /// <summary>
        /// The number of steps that can be executed concurrently. You can specify a maximum of 256 steps. Only valid for EMR clusters with `release_label` 5.28.0 or greater. (default is 1)
        /// </summary>
        [Input("stepConcurrencyLevel")]
        public Input<int>? StepConcurrencyLevel { get; set; }

        [Input("steps")]
        private InputList<Inputs.ClusterStepArgs>? _steps;

        /// <summary>
        /// List of steps to run when creating the cluster. Defined below. It is highly recommended to utilize [`ignoreChanges`](https://www.pulumi.com/docs/intro/concepts/programming-model/#ignorechanges) if other steps are being managed outside of this provider.
        /// </summary>
        public InputList<Inputs.ClusterStepArgs> Steps
        {
            get => _steps ?? (_steps = new InputList<Inputs.ClusterStepArgs>());
            set => _steps = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// list of tags to apply to the EMR Cluster
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Switch on/off termination protection (default is `false`, except when using multiple master nodes). Before attempting to destroy the resource when termination protection is enabled, this configuration must be applied with its value set to `false`.
        /// </summary>
        [Input("terminationProtection")]
        public Input<bool>? TerminationProtection { get; set; }

        /// <summary>
        /// Whether the job flow is visible to all IAM users of the AWS account associated with the job flow. Default `true`
        /// </summary>
        [Input("visibleToAllUsers")]
        public Input<bool>? VisibleToAllUsers { get; set; }

        public ClusterArgs()
        {
        }
    }

    public sealed class ClusterState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// A JSON string for selecting additional features such as adding proxy information. Note: Currently there is no API to retrieve the value of this argument after EMR cluster creation from provider, therefore this provider cannot detect drift from the actual EMR cluster if its value is changed outside this provider.
        /// </summary>
        [Input("additionalInfo")]
        public Input<string>? AdditionalInfo { get; set; }

        [Input("applications")]
        private InputList<string>? _applications;

        /// <summary>
        /// A list of applications for the cluster. Valid values are: `Flink`, `Hadoop`, `Hive`, `Mahout`, `Pig`, `Spark`, and `JupyterHub` (as of EMR 5.14.0). Case insensitive
        /// </summary>
        public InputList<string> Applications
        {
            get => _applications ?? (_applications = new InputList<string>());
            set => _applications = value;
        }

        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// An IAM role for automatic scaling policies. The IAM role provides permissions that the automatic scaling feature requires to launch and terminate EC2 instances in an instance group.
        /// </summary>
        [Input("autoscalingRole")]
        public Input<string>? AutoscalingRole { get; set; }

        [Input("bootstrapActions")]
        private InputList<Inputs.ClusterBootstrapActionGetArgs>? _bootstrapActions;

        /// <summary>
        /// Ordered list of bootstrap actions that will be run before Hadoop is started on the cluster nodes. Defined below.
        /// </summary>
        public InputList<Inputs.ClusterBootstrapActionGetArgs> BootstrapActions
        {
            get => _bootstrapActions ?? (_bootstrapActions = new InputList<Inputs.ClusterBootstrapActionGetArgs>());
            set => _bootstrapActions = value;
        }

        [Input("clusterState")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// A configuration classification that applies when provisioning cluster instances, which can include configurations for applications and software that run on the cluster. List of `configuration` blocks.
        /// </summary>
        [Input("configurations")]
        public Input<string>? Configurations { get; set; }

        /// <summary>
        /// A JSON string for supplying list of configurations for the EMR cluster.
        /// </summary>
        [Input("configurationsJson")]
        public Input<string>? ConfigurationsJson { get; set; }

        /// <summary>
        /// Configuration block to use an [Instance Fleet](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-instance-fleet.html) for the core node type. Cannot be specified if any `core_instance_group` configuration blocks are set. Detailed below.
        /// </summary>
        [Input("coreInstanceFleet")]
        public Input<Inputs.ClusterCoreInstanceFleetGetArgs>? CoreInstanceFleet { get; set; }

        /// <summary>
        /// Configuration block to use an [Instance Group](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-instance-group-configuration.html#emr-plan-instance-groups) for the [core node type](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-master-core-task-nodes.html#emr-plan-core).
        /// </summary>
        [Input("coreInstanceGroup")]
        public Input<Inputs.ClusterCoreInstanceGroupGetArgs>? CoreInstanceGroup { get; set; }

        /// <summary>
        /// A custom Amazon Linux AMI for the cluster (instead of an EMR-owned AMI). Available in Amazon EMR version 5.7.0 and later.
        /// </summary>
        [Input("customAmiId")]
        public Input<string>? CustomAmiId { get; set; }

        /// <summary>
        /// Size in GiB of the EBS root device volume of the Linux AMI that is used for each EC2 instance. Available in Amazon EMR version 4.x and later.
        /// </summary>
        [Input("ebsRootVolumeSize")]
        public Input<int>? EbsRootVolumeSize { get; set; }

        /// <summary>
        /// Attributes for the EC2 instances running the job flow. Defined below
        /// </summary>
        [Input("ec2Attributes")]
        public Input<Inputs.ClusterEc2AttributesGetArgs>? Ec2Attributes { get; set; }

        /// <summary>
        /// Switch on/off run cluster with no steps or when all steps are complete (default is on)
        /// </summary>
        [Input("keepJobFlowAliveWhenNoSteps")]
        public Input<bool>? KeepJobFlowAliveWhenNoSteps { get; set; }

        /// <summary>
        /// Kerberos configuration for the cluster. Defined below
        /// </summary>
        [Input("kerberosAttributes")]
        public Input<Inputs.ClusterKerberosAttributesGetArgs>? KerberosAttributes { get; set; }

        /// <summary>
        /// S3 bucket to write the log files of the job flow. If a value is not provided, logs are not created
        /// </summary>
        [Input("logUri")]
        public Input<string>? LogUri { get; set; }

        /// <summary>
        /// Configuration block to use an [Instance Fleet](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-instance-fleet.html) for the master node type. Cannot be specified if any `master_instance_group` configuration blocks are set. Detailed below.
        /// </summary>
        [Input("masterInstanceFleet")]
        public Input<Inputs.ClusterMasterInstanceFleetGetArgs>? MasterInstanceFleet { get; set; }

        /// <summary>
        /// Configuration block to use an [Instance Group](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-instance-group-configuration.html#emr-plan-instance-groups) for the [master node type](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-master-core-task-nodes.html#emr-plan-master).
        /// </summary>
        [Input("masterInstanceGroup")]
        public Input<Inputs.ClusterMasterInstanceGroupGetArgs>? MasterInstanceGroup { get; set; }

        /// <summary>
        /// The public DNS name of the master EC2 instance.
        /// * `core_instance_group.0.id` - Core node type Instance Group ID, if using Instance Group for this node type.
        /// </summary>
        [Input("masterPublicDns")]
        public Input<string>? MasterPublicDns { get; set; }

        /// <summary>
        /// Friendly name given to the instance fleet.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The release label for the Amazon EMR release
        /// </summary>
        [Input("releaseLabel")]
        public Input<string>? ReleaseLabel { get; set; }

        /// <summary>
        /// The way that individual Amazon EC2 instances terminate when an automatic scale-in activity occurs or an `instance group` is resized.
        /// </summary>
        [Input("scaleDownBehavior")]
        public Input<string>? ScaleDownBehavior { get; set; }

        /// <summary>
        /// The security configuration name to attach to the EMR cluster. Only valid for EMR clusters with `release_label` 4.8.0 or greater
        /// </summary>
        [Input("securityConfiguration")]
        public Input<string>? SecurityConfiguration { get; set; }

        /// <summary>
        /// IAM role that will be assumed by the Amazon EMR service to access AWS resources
        /// </summary>
        [Input("serviceRole")]
        public Input<string>? ServiceRole { get; set; }

        /// <summary>
        /// The number of steps that can be executed concurrently. You can specify a maximum of 256 steps. Only valid for EMR clusters with `release_label` 5.28.0 or greater. (default is 1)
        /// </summary>
        [Input("stepConcurrencyLevel")]
        public Input<int>? StepConcurrencyLevel { get; set; }

        [Input("steps")]
        private InputList<Inputs.ClusterStepGetArgs>? _steps;

        /// <summary>
        /// List of steps to run when creating the cluster. Defined below. It is highly recommended to utilize [`ignoreChanges`](https://www.pulumi.com/docs/intro/concepts/programming-model/#ignorechanges) if other steps are being managed outside of this provider.
        /// </summary>
        public InputList<Inputs.ClusterStepGetArgs> Steps
        {
            get => _steps ?? (_steps = new InputList<Inputs.ClusterStepGetArgs>());
            set => _steps = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// list of tags to apply to the EMR Cluster
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Switch on/off termination protection (default is `false`, except when using multiple master nodes). Before attempting to destroy the resource when termination protection is enabled, this configuration must be applied with its value set to `false`.
        /// </summary>
        [Input("terminationProtection")]
        public Input<bool>? TerminationProtection { get; set; }

        /// <summary>
        /// Whether the job flow is visible to all IAM users of the AWS account associated with the job flow. Default `true`
        /// </summary>
        [Input("visibleToAllUsers")]
        public Input<bool>? VisibleToAllUsers { get; set; }

        public ClusterState()
        {
        }
    }
}
