// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Emr
{
    /// <summary>
    /// Provides a Managed Scaling policy for EMR Cluster. With Amazon EMR versions 5.30.0 and later (except for Amazon EMR 6.0.0), you can enable EMR managed scaling to automatically increase or decrease the number of instances or units in your cluster based on workload. See [Using EMR Managed Scaling in Amazon EMR](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-managed-scaling.html) for more information.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var sample = new Aws.Emr.Cluster("sample", new Aws.Emr.ClusterArgs
    ///         {
    ///             ReleaseLabel = "emr-5.30.0",
    ///             MasterInstanceGroup = new Aws.Emr.Inputs.ClusterMasterInstanceGroupArgs
    ///             {
    ///                 InstanceType = "m4.large",
    ///             },
    ///             CoreInstanceGroup = new Aws.Emr.Inputs.ClusterCoreInstanceGroupArgs
    ///             {
    ///                 InstanceType = "c4.large",
    ///             },
    ///         });
    ///         // skip ...
    ///         var samplepolicy = new Aws.Emr.ManagedScalingPolicy("samplepolicy", new Aws.Emr.ManagedScalingPolicyArgs
    ///         {
    ///             ClusterId = sample.Id,
    ///             ComputeLimits = 
    ///             {
    ///                 new Aws.Emr.Inputs.ManagedScalingPolicyComputeLimitArgs
    ///                 {
    ///                     UnitType = "Instances",
    ///                     MinimumCapacityUnits = 2,
    ///                     MaximumCapacityUnits = 10,
    ///                     MaximumOndemandCapacityUnits = 2,
    ///                     MaximumCoreCapacityUnits = 10,
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// EMR Managed Scaling Policies can be imported via the EMR Cluster identifier, e.g. console
    /// 
    /// ```sh
    ///  $ pulumi import aws:emr/managedScalingPolicy:ManagedScalingPolicy example j-123456ABCDEF
    /// ```
    /// </summary>
    public partial class ManagedScalingPolicy : Pulumi.CustomResource
    {
        /// <summary>
        /// The id of the EMR cluster
        /// </summary>
        [Output("clusterId")]
        public Output<string> ClusterId { get; private set; } = null!;

        /// <summary>
        /// Configuration block with compute limit settings. Described below.
        /// </summary>
        [Output("computeLimits")]
        public Output<ImmutableArray<Outputs.ManagedScalingPolicyComputeLimit>> ComputeLimits { get; private set; } = null!;


        /// <summary>
        /// Create a ManagedScalingPolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ManagedScalingPolicy(string name, ManagedScalingPolicyArgs args, CustomResourceOptions? options = null)
            : base("aws:emr/managedScalingPolicy:ManagedScalingPolicy", name, args ?? new ManagedScalingPolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ManagedScalingPolicy(string name, Input<string> id, ManagedScalingPolicyState? state = null, CustomResourceOptions? options = null)
            : base("aws:emr/managedScalingPolicy:ManagedScalingPolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ManagedScalingPolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ManagedScalingPolicy Get(string name, Input<string> id, ManagedScalingPolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new ManagedScalingPolicy(name, id, state, options);
        }
    }

    public sealed class ManagedScalingPolicyArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The id of the EMR cluster
        /// </summary>
        [Input("clusterId", required: true)]
        public Input<string> ClusterId { get; set; } = null!;

        [Input("computeLimits", required: true)]
        private InputList<Inputs.ManagedScalingPolicyComputeLimitArgs>? _computeLimits;

        /// <summary>
        /// Configuration block with compute limit settings. Described below.
        /// </summary>
        public InputList<Inputs.ManagedScalingPolicyComputeLimitArgs> ComputeLimits
        {
            get => _computeLimits ?? (_computeLimits = new InputList<Inputs.ManagedScalingPolicyComputeLimitArgs>());
            set => _computeLimits = value;
        }

        public ManagedScalingPolicyArgs()
        {
        }
    }

    public sealed class ManagedScalingPolicyState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The id of the EMR cluster
        /// </summary>
        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        [Input("computeLimits")]
        private InputList<Inputs.ManagedScalingPolicyComputeLimitGetArgs>? _computeLimits;

        /// <summary>
        /// Configuration block with compute limit settings. Described below.
        /// </summary>
        public InputList<Inputs.ManagedScalingPolicyComputeLimitGetArgs> ComputeLimits
        {
            get => _computeLimits ?? (_computeLimits = new InputList<Inputs.ManagedScalingPolicyComputeLimitGetArgs>());
            set => _computeLimits = value;
        }

        public ManagedScalingPolicyState()
        {
        }
    }
}
