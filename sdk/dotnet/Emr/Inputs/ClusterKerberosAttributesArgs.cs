// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Emr.Inputs
{

    public sealed class ClusterKerberosAttributesArgs : global::Pulumi.ResourceArgs
    {
        [Input("adDomainJoinPassword")]
        private Input<string>? _adDomainJoinPassword;

        /// <summary>
        /// Active Directory password for `ad_domain_join_user`. This provider cannot perform drift detection of this configuration.
        /// </summary>
        public Input<string>? AdDomainJoinPassword
        {
            get => _adDomainJoinPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _adDomainJoinPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Required only when establishing a cross-realm trust with an Active Directory domain. A user with sufficient privileges to join resources to the domain. This provider cannot perform drift detection of this configuration.
        /// </summary>
        [Input("adDomainJoinUser")]
        public Input<string>? AdDomainJoinUser { get; set; }

        [Input("crossRealmTrustPrincipalPassword")]
        private Input<string>? _crossRealmTrustPrincipalPassword;

        /// <summary>
        /// Required only when establishing a cross-realm trust with a KDC in a different realm. The cross-realm principal password, which must be identical across realms. This provider cannot perform drift detection of this configuration.
        /// </summary>
        public Input<string>? CrossRealmTrustPrincipalPassword
        {
            get => _crossRealmTrustPrincipalPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _crossRealmTrustPrincipalPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("kdcAdminPassword", required: true)]
        private Input<string>? _kdcAdminPassword;

        /// <summary>
        /// Password used within the cluster for the kadmin service on the cluster-dedicated KDC, which maintains Kerberos principals, password policies, and keytabs for the cluster. This provider cannot perform drift detection of this configuration.
        /// </summary>
        public Input<string>? KdcAdminPassword
        {
            get => _kdcAdminPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _kdcAdminPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Name of the Kerberos realm to which all nodes in a cluster belong. For example, `EC2.INTERNAL`
        /// </summary>
        [Input("realm", required: true)]
        public Input<string> Realm { get; set; } = null!;

        public ClusterKerberosAttributesArgs()
        {
        }
        public static new ClusterKerberosAttributesArgs Empty => new ClusterKerberosAttributesArgs();
    }
}
