// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.DataSync
{
    /// <summary>
    /// Manages a Microsoft Azure Blob Storage Location within AWS DataSync.
    /// 
    /// &gt; **NOTE:** The DataSync Agents must be available before creating this resource.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.DataSync.LocationAzureBlob("example", new()
    ///     {
    ///         AgentArns = new[]
    ///         {
    ///             aws_datasync_agent.Example.Arn,
    ///         },
    ///         AuthenticationType = "SAS",
    ///         ContainerUrl = "https://example.com/path",
    ///         SasConfiguration = new Aws.DataSync.Inputs.LocationAzureBlobSasConfigurationArgs
    ///         {
    ///             Token = "sp=r&amp;st=2023-12-20T14:54:52Z&amp;se=2023-12-20T22:54:52Z&amp;spr=https&amp;sv=2021-06-08&amp;sr=c&amp;sig=aBBKDWQvyuVcTPH9EBp%2FXTI9E%2F%2Fmq171%2BZU178wcwqU%3D",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// In TODO v1.5.0 and later, use an `import` block to import `aws_datasync_location_azure_blob` using the Amazon Resource Name (ARN). For exampleterraform import {
    /// 
    ///  to = aws_datasync_location_azure_blob.example
    /// 
    ///  id = "arn:aws:datasync:us-east-1:123456789012:location/loc-12345678901234567" } Using `TODO import`, import `aws_datasync_location_azure_blob` using the Amazon Resource Name (ARN). For exampleconsole % TODO import aws_datasync_location_azure_blob.example arn:aws:datasync:us-east-1:123456789012:location/loc-12345678901234567
    /// </summary>
    [AwsResourceType("aws:datasync/locationAzureBlob:LocationAzureBlob")]
    public partial class LocationAzureBlob : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The access tier that you want your objects or files transferred into. Valid values: `HOT`, `COOL` and `ARCHIVE`. Default: `HOT`.
        /// </summary>
        [Output("accessTier")]
        public Output<string?> AccessTier { get; private set; } = null!;

        /// <summary>
        /// A list of DataSync Agent ARNs with which this location will be associated.
        /// </summary>
        [Output("agentArns")]
        public Output<ImmutableArray<string>> AgentArns { get; private set; } = null!;

        /// <summary>
        /// Amazon Resource Name (ARN) of the DataSync Location.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// The authentication method DataSync uses to access your Azure Blob Storage. Valid values: `SAS`.
        /// </summary>
        [Output("authenticationType")]
        public Output<string> AuthenticationType { get; private set; } = null!;

        /// <summary>
        /// The type of blob that you want your objects or files to be when transferring them into Azure Blob Storage. Valid values: `BLOB`. Default: `BLOB`.
        /// </summary>
        [Output("blobType")]
        public Output<string?> BlobType { get; private set; } = null!;

        /// <summary>
        /// The URL of the Azure Blob Storage container involved in your transfer.
        /// </summary>
        [Output("containerUrl")]
        public Output<string> ContainerUrl { get; private set; } = null!;

        /// <summary>
        /// The SAS configuration that allows DataSync to access your Azure Blob Storage. See configuration below.
        /// </summary>
        [Output("sasConfiguration")]
        public Output<Outputs.LocationAzureBlobSasConfiguration?> SasConfiguration { get; private set; } = null!;

        /// <summary>
        /// Path segments if you want to limit your transfer to a virtual directory in the container.
        /// </summary>
        [Output("subdirectory")]
        public Output<string> Subdirectory { get; private set; } = null!;

        /// <summary>
        /// Key-value pairs of resource tags to assign to the DataSync Location. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;

        [Output("uri")]
        public Output<string> Uri { get; private set; } = null!;


        /// <summary>
        /// Create a LocationAzureBlob resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LocationAzureBlob(string name, LocationAzureBlobArgs args, CustomResourceOptions? options = null)
            : base("aws:datasync/locationAzureBlob:LocationAzureBlob", name, args ?? new LocationAzureBlobArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LocationAzureBlob(string name, Input<string> id, LocationAzureBlobState? state = null, CustomResourceOptions? options = null)
            : base("aws:datasync/locationAzureBlob:LocationAzureBlob", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LocationAzureBlob resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LocationAzureBlob Get(string name, Input<string> id, LocationAzureBlobState? state = null, CustomResourceOptions? options = null)
        {
            return new LocationAzureBlob(name, id, state, options);
        }
    }

    public sealed class LocationAzureBlobArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The access tier that you want your objects or files transferred into. Valid values: `HOT`, `COOL` and `ARCHIVE`. Default: `HOT`.
        /// </summary>
        [Input("accessTier")]
        public Input<string>? AccessTier { get; set; }

        [Input("agentArns", required: true)]
        private InputList<string>? _agentArns;

        /// <summary>
        /// A list of DataSync Agent ARNs with which this location will be associated.
        /// </summary>
        public InputList<string> AgentArns
        {
            get => _agentArns ?? (_agentArns = new InputList<string>());
            set => _agentArns = value;
        }

        /// <summary>
        /// The authentication method DataSync uses to access your Azure Blob Storage. Valid values: `SAS`.
        /// </summary>
        [Input("authenticationType", required: true)]
        public Input<string> AuthenticationType { get; set; } = null!;

        /// <summary>
        /// The type of blob that you want your objects or files to be when transferring them into Azure Blob Storage. Valid values: `BLOB`. Default: `BLOB`.
        /// </summary>
        [Input("blobType")]
        public Input<string>? BlobType { get; set; }

        /// <summary>
        /// The URL of the Azure Blob Storage container involved in your transfer.
        /// </summary>
        [Input("containerUrl", required: true)]
        public Input<string> ContainerUrl { get; set; } = null!;

        /// <summary>
        /// The SAS configuration that allows DataSync to access your Azure Blob Storage. See configuration below.
        /// </summary>
        [Input("sasConfiguration")]
        public Input<Inputs.LocationAzureBlobSasConfigurationArgs>? SasConfiguration { get; set; }

        /// <summary>
        /// Path segments if you want to limit your transfer to a virtual directory in the container.
        /// </summary>
        [Input("subdirectory")]
        public Input<string>? Subdirectory { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Key-value pairs of resource tags to assign to the DataSync Location. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public LocationAzureBlobArgs()
        {
        }
        public static new LocationAzureBlobArgs Empty => new LocationAzureBlobArgs();
    }

    public sealed class LocationAzureBlobState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The access tier that you want your objects or files transferred into. Valid values: `HOT`, `COOL` and `ARCHIVE`. Default: `HOT`.
        /// </summary>
        [Input("accessTier")]
        public Input<string>? AccessTier { get; set; }

        [Input("agentArns")]
        private InputList<string>? _agentArns;

        /// <summary>
        /// A list of DataSync Agent ARNs with which this location will be associated.
        /// </summary>
        public InputList<string> AgentArns
        {
            get => _agentArns ?? (_agentArns = new InputList<string>());
            set => _agentArns = value;
        }

        /// <summary>
        /// Amazon Resource Name (ARN) of the DataSync Location.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// The authentication method DataSync uses to access your Azure Blob Storage. Valid values: `SAS`.
        /// </summary>
        [Input("authenticationType")]
        public Input<string>? AuthenticationType { get; set; }

        /// <summary>
        /// The type of blob that you want your objects or files to be when transferring them into Azure Blob Storage. Valid values: `BLOB`. Default: `BLOB`.
        /// </summary>
        [Input("blobType")]
        public Input<string>? BlobType { get; set; }

        /// <summary>
        /// The URL of the Azure Blob Storage container involved in your transfer.
        /// </summary>
        [Input("containerUrl")]
        public Input<string>? ContainerUrl { get; set; }

        /// <summary>
        /// The SAS configuration that allows DataSync to access your Azure Blob Storage. See configuration below.
        /// </summary>
        [Input("sasConfiguration")]
        public Input<Inputs.LocationAzureBlobSasConfigurationGetArgs>? SasConfiguration { get; set; }

        /// <summary>
        /// Path segments if you want to limit your transfer to a virtual directory in the container.
        /// </summary>
        [Input("subdirectory")]
        public Input<string>? Subdirectory { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Key-value pairs of resource tags to assign to the DataSync Location. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        [Input("uri")]
        public Input<string>? Uri { get; set; }

        public LocationAzureBlobState()
        {
        }
        public static new LocationAzureBlobState Empty => new LocationAzureBlobState();
    }
}
