// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.DataSync
{
    /// <summary>
    /// Manages an AWS DataSync EFS Location.
    /// 
    /// &gt; **NOTE:** The EFS File System must have a mounted EFS Mount Target before creating this resource.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var example = new Aws.DataSync.EfsLocation("example", new Aws.DataSync.EfsLocationArgs
    ///         {
    ///             EfsFileSystemArn = aws_efs_mount_target.Example.File_system_arn,
    ///             Ec2Config = new Aws.DataSync.Inputs.EfsLocationEc2ConfigArgs
    ///             {
    ///                 SecurityGroupArns = 
    ///                 {
    ///                     aws_security_group.Example.Arn,
    ///                 },
    ///                 SubnetArn = aws_subnet.Example.Arn,
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// `aws_datasync_location_efs` can be imported by using the DataSync Task Amazon Resource Name (ARN), e.g.
    /// 
    /// ```sh
    ///  $ pulumi import aws:datasync/efsLocation:EfsLocation example arn:aws:datasync:us-east-1:123456789012:location/loc-12345678901234567
    /// ```
    /// </summary>
    public partial class EfsLocation : Pulumi.CustomResource
    {
        /// <summary>
        /// Amazon Resource Name (ARN) of the DataSync Location.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// Configuration block containing EC2 configurations for connecting to the EFS File System.
        /// </summary>
        [Output("ec2Config")]
        public Output<Outputs.EfsLocationEc2Config> Ec2Config { get; private set; } = null!;

        /// <summary>
        /// Amazon Resource Name (ARN) of EFS File System.
        /// </summary>
        [Output("efsFileSystemArn")]
        public Output<string> EfsFileSystemArn { get; private set; } = null!;

        /// <summary>
        /// Subdirectory to perform actions as source or destination. Default `/`.
        /// </summary>
        [Output("subdirectory")]
        public Output<string?> Subdirectory { get; private set; } = null!;

        /// <summary>
        /// Key-value pairs of resource tags to assign to the DataSync Location.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        [Output("uri")]
        public Output<string> Uri { get; private set; } = null!;


        /// <summary>
        /// Create a EfsLocation resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public EfsLocation(string name, EfsLocationArgs args, CustomResourceOptions? options = null)
            : base("aws:datasync/efsLocation:EfsLocation", name, args ?? new EfsLocationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private EfsLocation(string name, Input<string> id, EfsLocationState? state = null, CustomResourceOptions? options = null)
            : base("aws:datasync/efsLocation:EfsLocation", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing EfsLocation resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static EfsLocation Get(string name, Input<string> id, EfsLocationState? state = null, CustomResourceOptions? options = null)
        {
            return new EfsLocation(name, id, state, options);
        }
    }

    public sealed class EfsLocationArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Configuration block containing EC2 configurations for connecting to the EFS File System.
        /// </summary>
        [Input("ec2Config", required: true)]
        public Input<Inputs.EfsLocationEc2ConfigArgs> Ec2Config { get; set; } = null!;

        /// <summary>
        /// Amazon Resource Name (ARN) of EFS File System.
        /// </summary>
        [Input("efsFileSystemArn", required: true)]
        public Input<string> EfsFileSystemArn { get; set; } = null!;

        /// <summary>
        /// Subdirectory to perform actions as source or destination. Default `/`.
        /// </summary>
        [Input("subdirectory")]
        public Input<string>? Subdirectory { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Key-value pairs of resource tags to assign to the DataSync Location.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public EfsLocationArgs()
        {
        }
    }

    public sealed class EfsLocationState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Amazon Resource Name (ARN) of the DataSync Location.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// Configuration block containing EC2 configurations for connecting to the EFS File System.
        /// </summary>
        [Input("ec2Config")]
        public Input<Inputs.EfsLocationEc2ConfigGetArgs>? Ec2Config { get; set; }

        /// <summary>
        /// Amazon Resource Name (ARN) of EFS File System.
        /// </summary>
        [Input("efsFileSystemArn")]
        public Input<string>? EfsFileSystemArn { get; set; }

        /// <summary>
        /// Subdirectory to perform actions as source or destination. Default `/`.
        /// </summary>
        [Input("subdirectory")]
        public Input<string>? Subdirectory { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Key-value pairs of resource tags to assign to the DataSync Location.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("uri")]
        public Input<string>? Uri { get; set; }

        public EfsLocationState()
        {
        }
    }
}
