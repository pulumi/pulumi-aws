// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.OpsWorks
{
    [AwsResourceType("aws:opsworks/application:Application")]
    public partial class Application : global::Pulumi.CustomResource
    {
        [Output("appSources")]
        public Output<ImmutableArray<Outputs.ApplicationAppSource>> AppSources { get; private set; } = null!;

        [Output("autoBundleOnDeploy")]
        public Output<string?> AutoBundleOnDeploy { get; private set; } = null!;

        [Output("awsFlowRubySettings")]
        public Output<string?> AwsFlowRubySettings { get; private set; } = null!;

        [Output("dataSourceArn")]
        public Output<string?> DataSourceArn { get; private set; } = null!;

        [Output("dataSourceDatabaseName")]
        public Output<string?> DataSourceDatabaseName { get; private set; } = null!;

        [Output("dataSourceType")]
        public Output<string?> DataSourceType { get; private set; } = null!;

        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("documentRoot")]
        public Output<string?> DocumentRoot { get; private set; } = null!;

        [Output("domains")]
        public Output<ImmutableArray<string>> Domains { get; private set; } = null!;

        [Output("enableSsl")]
        public Output<bool?> EnableSsl { get; private set; } = null!;

        [Output("environments")]
        public Output<ImmutableArray<Outputs.ApplicationEnvironment>> Environments { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("railsEnv")]
        public Output<string?> RailsEnv { get; private set; } = null!;

        [Output("shortName")]
        public Output<string> ShortName { get; private set; } = null!;

        [Output("sslConfigurations")]
        public Output<ImmutableArray<Outputs.ApplicationSslConfiguration>> SslConfigurations { get; private set; } = null!;

        [Output("stackId")]
        public Output<string> StackId { get; private set; } = null!;

        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a Application resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Application(string name, ApplicationArgs args, CustomResourceOptions? options = null)
            : base("aws:opsworks/application:Application", name, args ?? new ApplicationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Application(string name, Input<string> id, ApplicationState? state = null, CustomResourceOptions? options = null)
            : base("aws:opsworks/application:Application", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Application resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Application Get(string name, Input<string> id, ApplicationState? state = null, CustomResourceOptions? options = null)
        {
            return new Application(name, id, state, options);
        }
    }

    public sealed class ApplicationArgs : global::Pulumi.ResourceArgs
    {
        [Input("appSources")]
        private InputList<Inputs.ApplicationAppSourceArgs>? _appSources;
        public InputList<Inputs.ApplicationAppSourceArgs> AppSources
        {
            get => _appSources ?? (_appSources = new InputList<Inputs.ApplicationAppSourceArgs>());
            set => _appSources = value;
        }

        [Input("autoBundleOnDeploy")]
        public Input<string>? AutoBundleOnDeploy { get; set; }

        [Input("awsFlowRubySettings")]
        public Input<string>? AwsFlowRubySettings { get; set; }

        [Input("dataSourceArn")]
        public Input<string>? DataSourceArn { get; set; }

        [Input("dataSourceDatabaseName")]
        public Input<string>? DataSourceDatabaseName { get; set; }

        [Input("dataSourceType")]
        public Input<string>? DataSourceType { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("documentRoot")]
        public Input<string>? DocumentRoot { get; set; }

        [Input("domains")]
        private InputList<string>? _domains;
        public InputList<string> Domains
        {
            get => _domains ?? (_domains = new InputList<string>());
            set => _domains = value;
        }

        [Input("enableSsl")]
        public Input<bool>? EnableSsl { get; set; }

        [Input("environments")]
        private InputList<Inputs.ApplicationEnvironmentArgs>? _environments;
        public InputList<Inputs.ApplicationEnvironmentArgs> Environments
        {
            get => _environments ?? (_environments = new InputList<Inputs.ApplicationEnvironmentArgs>());
            set => _environments = value;
        }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("railsEnv")]
        public Input<string>? RailsEnv { get; set; }

        [Input("shortName")]
        public Input<string>? ShortName { get; set; }

        [Input("sslConfigurations")]
        private InputList<Inputs.ApplicationSslConfigurationArgs>? _sslConfigurations;
        public InputList<Inputs.ApplicationSslConfigurationArgs> SslConfigurations
        {
            get => _sslConfigurations ?? (_sslConfigurations = new InputList<Inputs.ApplicationSslConfigurationArgs>());
            set => _sslConfigurations = value;
        }

        [Input("stackId", required: true)]
        public Input<string> StackId { get; set; } = null!;

        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public ApplicationArgs()
        {
        }
        public static new ApplicationArgs Empty => new ApplicationArgs();
    }

    public sealed class ApplicationState : global::Pulumi.ResourceArgs
    {
        [Input("appSources")]
        private InputList<Inputs.ApplicationAppSourceGetArgs>? _appSources;
        public InputList<Inputs.ApplicationAppSourceGetArgs> AppSources
        {
            get => _appSources ?? (_appSources = new InputList<Inputs.ApplicationAppSourceGetArgs>());
            set => _appSources = value;
        }

        [Input("autoBundleOnDeploy")]
        public Input<string>? AutoBundleOnDeploy { get; set; }

        [Input("awsFlowRubySettings")]
        public Input<string>? AwsFlowRubySettings { get; set; }

        [Input("dataSourceArn")]
        public Input<string>? DataSourceArn { get; set; }

        [Input("dataSourceDatabaseName")]
        public Input<string>? DataSourceDatabaseName { get; set; }

        [Input("dataSourceType")]
        public Input<string>? DataSourceType { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("documentRoot")]
        public Input<string>? DocumentRoot { get; set; }

        [Input("domains")]
        private InputList<string>? _domains;
        public InputList<string> Domains
        {
            get => _domains ?? (_domains = new InputList<string>());
            set => _domains = value;
        }

        [Input("enableSsl")]
        public Input<bool>? EnableSsl { get; set; }

        [Input("environments")]
        private InputList<Inputs.ApplicationEnvironmentGetArgs>? _environments;
        public InputList<Inputs.ApplicationEnvironmentGetArgs> Environments
        {
            get => _environments ?? (_environments = new InputList<Inputs.ApplicationEnvironmentGetArgs>());
            set => _environments = value;
        }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("railsEnv")]
        public Input<string>? RailsEnv { get; set; }

        [Input("shortName")]
        public Input<string>? ShortName { get; set; }

        [Input("sslConfigurations")]
        private InputList<Inputs.ApplicationSslConfigurationGetArgs>? _sslConfigurations;
        public InputList<Inputs.ApplicationSslConfigurationGetArgs> SslConfigurations
        {
            get => _sslConfigurations ?? (_sslConfigurations = new InputList<Inputs.ApplicationSslConfigurationGetArgs>());
            set => _sslConfigurations = value;
        }

        [Input("stackId")]
        public Input<string>? StackId { get; set; }

        [Input("type")]
        public Input<string>? Type { get; set; }

        public ApplicationState()
        {
        }
        public static new ApplicationState Empty => new ApplicationState();
    }
}
