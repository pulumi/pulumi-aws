// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Chatbot
{
    /// <summary>
    /// Resource for managing an AWS Chatbot Slack Channel Configuration.
    /// 
    /// ## Example Usage
    /// 
    /// ### Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var test = new Aws.Chatbot.SlackChannelConfiguration("test", new()
    ///     {
    ///         ConfigurationName = "min-slaka-kanal",
    ///         IamRoleArn = testAwsIamRole.Arn,
    ///         SlackChannelId = "C07EZ1ABC23",
    ///         SlackTeamId = "T07EA123LEP",
    ///         Tags = 
    ///         {
    ///             { "Name", "min-slaka-kanal" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import Chatbot Slack Channel Configuration using the `chat_configuration_arn`. For example:
    /// 
    /// ```sh
    /// $ pulumi import aws:chatbot/slackChannelConfiguration:SlackChannelConfiguration example arn:aws:chatbot::123456789012:chat-configuration/slack-channel/min-slaka-kanal
    /// ```
    /// </summary>
    [AwsResourceType("aws:chatbot/slackChannelConfiguration:SlackChannelConfiguration")]
    public partial class SlackChannelConfiguration : global::Pulumi.CustomResource
    {
        /// <summary>
        /// ARN of the Slack channel configuration.
        /// </summary>
        [Output("chatConfigurationArn")]
        public Output<string> ChatConfigurationArn { get; private set; } = null!;

        /// <summary>
        /// Name of the Slack channel configuration.
        /// </summary>
        [Output("configurationName")]
        public Output<string> ConfigurationName { get; private set; } = null!;

        /// <summary>
        /// List of IAM policy ARNs that are applied as channel guardrails. The AWS managed `AdministratorAccess` policy is applied by default if this is not set.
        /// </summary>
        [Output("guardrailPolicyArns")]
        public Output<ImmutableArray<string>> GuardrailPolicyArns { get; private set; } = null!;

        /// <summary>
        /// User-defined role that AWS Chatbot assumes. This is not the service-linked role.
        /// </summary>
        [Output("iamRoleArn")]
        public Output<string> IamRoleArn { get; private set; } = null!;

        /// <summary>
        /// Logging levels include `ERROR`, `INFO`, or `NONE`.
        /// </summary>
        [Output("loggingLevel")]
        public Output<string> LoggingLevel { get; private set; } = null!;

        /// <summary>
        /// ID of the Slack channel. For example, `C07EZ1ABC23`.
        /// </summary>
        [Output("slackChannelId")]
        public Output<string> SlackChannelId { get; private set; } = null!;

        /// <summary>
        /// Name of the Slack channel.
        /// </summary>
        [Output("slackChannelName")]
        public Output<string> SlackChannelName { get; private set; } = null!;

        /// <summary>
        /// ID of the Slack workspace authorized with AWS Chatbot. For example, `T07EA123LEP`.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Output("slackTeamId")]
        public Output<string> SlackTeamId { get; private set; } = null!;

        /// <summary>
        /// Name of the Slack team.
        /// </summary>
        [Output("slackTeamName")]
        public Output<string> SlackTeamName { get; private set; } = null!;

        /// <summary>
        /// ARNs of the SNS topics that deliver notifications to AWS Chatbot.
        /// </summary>
        [Output("snsTopicArns")]
        public Output<ImmutableArray<string>> SnsTopicArns { get; private set; } = null!;

        /// <summary>
        /// Map of tags assigned to the resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;

        [Output("timeouts")]
        public Output<Outputs.SlackChannelConfigurationTimeouts?> Timeouts { get; private set; } = null!;

        /// <summary>
        /// Enables use of a user role requirement in your chat configuration.
        /// </summary>
        [Output("userAuthorizationRequired")]
        public Output<bool> UserAuthorizationRequired { get; private set; } = null!;


        /// <summary>
        /// Create a SlackChannelConfiguration resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SlackChannelConfiguration(string name, SlackChannelConfigurationArgs args, CustomResourceOptions? options = null)
            : base("aws:chatbot/slackChannelConfiguration:SlackChannelConfiguration", name, args ?? new SlackChannelConfigurationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SlackChannelConfiguration(string name, Input<string> id, SlackChannelConfigurationState? state = null, CustomResourceOptions? options = null)
            : base("aws:chatbot/slackChannelConfiguration:SlackChannelConfiguration", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SlackChannelConfiguration resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SlackChannelConfiguration Get(string name, Input<string> id, SlackChannelConfigurationState? state = null, CustomResourceOptions? options = null)
        {
            return new SlackChannelConfiguration(name, id, state, options);
        }
    }

    public sealed class SlackChannelConfigurationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the Slack channel configuration.
        /// </summary>
        [Input("configurationName", required: true)]
        public Input<string> ConfigurationName { get; set; } = null!;

        [Input("guardrailPolicyArns")]
        private InputList<string>? _guardrailPolicyArns;

        /// <summary>
        /// List of IAM policy ARNs that are applied as channel guardrails. The AWS managed `AdministratorAccess` policy is applied by default if this is not set.
        /// </summary>
        public InputList<string> GuardrailPolicyArns
        {
            get => _guardrailPolicyArns ?? (_guardrailPolicyArns = new InputList<string>());
            set => _guardrailPolicyArns = value;
        }

        /// <summary>
        /// User-defined role that AWS Chatbot assumes. This is not the service-linked role.
        /// </summary>
        [Input("iamRoleArn", required: true)]
        public Input<string> IamRoleArn { get; set; } = null!;

        /// <summary>
        /// Logging levels include `ERROR`, `INFO`, or `NONE`.
        /// </summary>
        [Input("loggingLevel")]
        public Input<string>? LoggingLevel { get; set; }

        /// <summary>
        /// ID of the Slack channel. For example, `C07EZ1ABC23`.
        /// </summary>
        [Input("slackChannelId", required: true)]
        public Input<string> SlackChannelId { get; set; } = null!;

        /// <summary>
        /// ID of the Slack workspace authorized with AWS Chatbot. For example, `T07EA123LEP`.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("slackTeamId", required: true)]
        public Input<string> SlackTeamId { get; set; } = null!;

        [Input("snsTopicArns")]
        private InputList<string>? _snsTopicArns;

        /// <summary>
        /// ARNs of the SNS topics that deliver notifications to AWS Chatbot.
        /// </summary>
        public InputList<string> SnsTopicArns
        {
            get => _snsTopicArns ?? (_snsTopicArns = new InputList<string>());
            set => _snsTopicArns = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Map of tags assigned to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("timeouts")]
        public Input<Inputs.SlackChannelConfigurationTimeoutsArgs>? Timeouts { get; set; }

        /// <summary>
        /// Enables use of a user role requirement in your chat configuration.
        /// </summary>
        [Input("userAuthorizationRequired")]
        public Input<bool>? UserAuthorizationRequired { get; set; }

        public SlackChannelConfigurationArgs()
        {
        }
        public static new SlackChannelConfigurationArgs Empty => new SlackChannelConfigurationArgs();
    }

    public sealed class SlackChannelConfigurationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ARN of the Slack channel configuration.
        /// </summary>
        [Input("chatConfigurationArn")]
        public Input<string>? ChatConfigurationArn { get; set; }

        /// <summary>
        /// Name of the Slack channel configuration.
        /// </summary>
        [Input("configurationName")]
        public Input<string>? ConfigurationName { get; set; }

        [Input("guardrailPolicyArns")]
        private InputList<string>? _guardrailPolicyArns;

        /// <summary>
        /// List of IAM policy ARNs that are applied as channel guardrails. The AWS managed `AdministratorAccess` policy is applied by default if this is not set.
        /// </summary>
        public InputList<string> GuardrailPolicyArns
        {
            get => _guardrailPolicyArns ?? (_guardrailPolicyArns = new InputList<string>());
            set => _guardrailPolicyArns = value;
        }

        /// <summary>
        /// User-defined role that AWS Chatbot assumes. This is not the service-linked role.
        /// </summary>
        [Input("iamRoleArn")]
        public Input<string>? IamRoleArn { get; set; }

        /// <summary>
        /// Logging levels include `ERROR`, `INFO`, or `NONE`.
        /// </summary>
        [Input("loggingLevel")]
        public Input<string>? LoggingLevel { get; set; }

        /// <summary>
        /// ID of the Slack channel. For example, `C07EZ1ABC23`.
        /// </summary>
        [Input("slackChannelId")]
        public Input<string>? SlackChannelId { get; set; }

        /// <summary>
        /// Name of the Slack channel.
        /// </summary>
        [Input("slackChannelName")]
        public Input<string>? SlackChannelName { get; set; }

        /// <summary>
        /// ID of the Slack workspace authorized with AWS Chatbot. For example, `T07EA123LEP`.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("slackTeamId")]
        public Input<string>? SlackTeamId { get; set; }

        /// <summary>
        /// Name of the Slack team.
        /// </summary>
        [Input("slackTeamName")]
        public Input<string>? SlackTeamName { get; set; }

        [Input("snsTopicArns")]
        private InputList<string>? _snsTopicArns;

        /// <summary>
        /// ARNs of the SNS topics that deliver notifications to AWS Chatbot.
        /// </summary>
        public InputList<string> SnsTopicArns
        {
            get => _snsTopicArns ?? (_snsTopicArns = new InputList<string>());
            set => _snsTopicArns = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Map of tags assigned to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;

        /// <summary>
        /// Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Obsolete(@"Please use `tags` instead.")]
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        [Input("timeouts")]
        public Input<Inputs.SlackChannelConfigurationTimeoutsGetArgs>? Timeouts { get; set; }

        /// <summary>
        /// Enables use of a user role requirement in your chat configuration.
        /// </summary>
        [Input("userAuthorizationRequired")]
        public Input<bool>? UserAuthorizationRequired { get; set; }

        public SlackChannelConfigurationState()
        {
        }
        public static new SlackChannelConfigurationState Empty => new SlackChannelConfigurationState();
    }
}
