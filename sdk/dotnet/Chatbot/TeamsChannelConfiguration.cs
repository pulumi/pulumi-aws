// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Chatbot
{
    /// <summary>
    /// Resource for managing an AWS Chatbot Microsoft Teams Channel Configuration.
    /// 
    /// &gt; **NOTE:** We provide this resource on a best-effort basis. If you are able to test it and find it useful, we welcome your input at GitHub.
    /// 
    /// ## Example Usage
    /// 
    /// ### Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var test = new Aws.Chatbot.TeamsChannelConfiguration("test", new()
    ///     {
    ///         ChannelId = "C07EZ1ABC23",
    ///         ConfigurationName = "mitt-lags-kanal",
    ///         IamRoleArn = testAwsIamRole.Arn,
    ///         TeamId = "74361522-da01-538d-aa2e-ac7918c6bb92",
    ///         TenantId = "1234",
    ///         Tags = 
    ///         {
    ///             { "Name", "mitt-lags-kanal" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import Chatbot Microsoft Teams Channel Configuration using the `team_id`. For example:
    /// 
    /// ```sh
    /// $ pulumi import aws:chatbot/teamsChannelConfiguration:TeamsChannelConfiguration example 5f4f15d2-b958-522a-8333-124aa8bf0925
    /// ```
    /// </summary>
    [AwsResourceType("aws:chatbot/teamsChannelConfiguration:TeamsChannelConfiguration")]
    public partial class TeamsChannelConfiguration : global::Pulumi.CustomResource
    {
        /// <summary>
        /// ID of the Microsoft Teams channel.
        /// </summary>
        [Output("channelId")]
        public Output<string> ChannelId { get; private set; } = null!;

        /// <summary>
        /// Name of the Microsoft Teams channel.
        /// </summary>
        [Output("channelName")]
        public Output<string> ChannelName { get; private set; } = null!;

        /// <summary>
        /// ARN of the Microsoft Teams channel configuration.
        /// </summary>
        [Output("chatConfigurationArn")]
        public Output<string> ChatConfigurationArn { get; private set; } = null!;

        /// <summary>
        /// Name of the Microsoft Teams channel configuration.
        /// </summary>
        [Output("configurationName")]
        public Output<string> ConfigurationName { get; private set; } = null!;

        /// <summary>
        /// List of IAM policy ARNs that are applied as channel guardrails. The AWS managed `AdministratorAccess` policy is applied by default if this is not set.
        /// </summary>
        [Output("guardrailPolicyArns")]
        public Output<ImmutableArray<string>> GuardrailPolicyArns { get; private set; } = null!;

        /// <summary>
        /// ARN of the IAM role that defines the permissions for AWS Chatbot. This is a user-defined role that AWS Chatbot will assume. This is not the service-linked role.
        /// </summary>
        [Output("iamRoleArn")]
        public Output<string> IamRoleArn { get; private set; } = null!;

        /// <summary>
        /// Logging levels include `ERROR`, `INFO`, or `NONE`.
        /// </summary>
        [Output("loggingLevel")]
        public Output<string> LoggingLevel { get; private set; } = null!;

        /// <summary>
        /// ARNs of the SNS topics that deliver notifications to AWS Chatbot.
        /// </summary>
        [Output("snsTopicArns")]
        public Output<ImmutableArray<string>> SnsTopicArns { get; private set; } = null!;

        /// <summary>
        /// Map of tags assigned to the resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;

        /// <summary>
        /// ID of the Microsoft Team authorized with AWS Chatbot. To get the team ID, you must perform the initial authorization flow with Microsoft Teams in the AWS Chatbot console. Then you can copy and paste the team ID from the console.
        /// </summary>
        [Output("teamId")]
        public Output<string> TeamId { get; private set; } = null!;

        /// <summary>
        /// Name of the Microsoft Teams team.
        /// </summary>
        [Output("teamName")]
        public Output<string> TeamName { get; private set; } = null!;

        /// <summary>
        /// ID of the Microsoft Teams tenant.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Output("tenantId")]
        public Output<string> TenantId { get; private set; } = null!;

        [Output("timeouts")]
        public Output<Outputs.TeamsChannelConfigurationTimeouts?> Timeouts { get; private set; } = null!;

        /// <summary>
        /// Enables use of a user role requirement in your chat configuration.
        /// </summary>
        [Output("userAuthorizationRequired")]
        public Output<bool> UserAuthorizationRequired { get; private set; } = null!;


        /// <summary>
        /// Create a TeamsChannelConfiguration resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public TeamsChannelConfiguration(string name, TeamsChannelConfigurationArgs args, CustomResourceOptions? options = null)
            : base("aws:chatbot/teamsChannelConfiguration:TeamsChannelConfiguration", name, args ?? new TeamsChannelConfigurationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private TeamsChannelConfiguration(string name, Input<string> id, TeamsChannelConfigurationState? state = null, CustomResourceOptions? options = null)
            : base("aws:chatbot/teamsChannelConfiguration:TeamsChannelConfiguration", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing TeamsChannelConfiguration resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static TeamsChannelConfiguration Get(string name, Input<string> id, TeamsChannelConfigurationState? state = null, CustomResourceOptions? options = null)
        {
            return new TeamsChannelConfiguration(name, id, state, options);
        }
    }

    public sealed class TeamsChannelConfigurationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ID of the Microsoft Teams channel.
        /// </summary>
        [Input("channelId", required: true)]
        public Input<string> ChannelId { get; set; } = null!;

        /// <summary>
        /// Name of the Microsoft Teams channel.
        /// </summary>
        [Input("channelName")]
        public Input<string>? ChannelName { get; set; }

        /// <summary>
        /// Name of the Microsoft Teams channel configuration.
        /// </summary>
        [Input("configurationName", required: true)]
        public Input<string> ConfigurationName { get; set; } = null!;

        [Input("guardrailPolicyArns")]
        private InputList<string>? _guardrailPolicyArns;

        /// <summary>
        /// List of IAM policy ARNs that are applied as channel guardrails. The AWS managed `AdministratorAccess` policy is applied by default if this is not set.
        /// </summary>
        public InputList<string> GuardrailPolicyArns
        {
            get => _guardrailPolicyArns ?? (_guardrailPolicyArns = new InputList<string>());
            set => _guardrailPolicyArns = value;
        }

        /// <summary>
        /// ARN of the IAM role that defines the permissions for AWS Chatbot. This is a user-defined role that AWS Chatbot will assume. This is not the service-linked role.
        /// </summary>
        [Input("iamRoleArn", required: true)]
        public Input<string> IamRoleArn { get; set; } = null!;

        /// <summary>
        /// Logging levels include `ERROR`, `INFO`, or `NONE`.
        /// </summary>
        [Input("loggingLevel")]
        public Input<string>? LoggingLevel { get; set; }

        [Input("snsTopicArns")]
        private InputList<string>? _snsTopicArns;

        /// <summary>
        /// ARNs of the SNS topics that deliver notifications to AWS Chatbot.
        /// </summary>
        public InputList<string> SnsTopicArns
        {
            get => _snsTopicArns ?? (_snsTopicArns = new InputList<string>());
            set => _snsTopicArns = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Map of tags assigned to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// ID of the Microsoft Team authorized with AWS Chatbot. To get the team ID, you must perform the initial authorization flow with Microsoft Teams in the AWS Chatbot console. Then you can copy and paste the team ID from the console.
        /// </summary>
        [Input("teamId", required: true)]
        public Input<string> TeamId { get; set; } = null!;

        /// <summary>
        /// Name of the Microsoft Teams team.
        /// </summary>
        [Input("teamName")]
        public Input<string>? TeamName { get; set; }

        /// <summary>
        /// ID of the Microsoft Teams tenant.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("tenantId", required: true)]
        public Input<string> TenantId { get; set; } = null!;

        [Input("timeouts")]
        public Input<Inputs.TeamsChannelConfigurationTimeoutsArgs>? Timeouts { get; set; }

        /// <summary>
        /// Enables use of a user role requirement in your chat configuration.
        /// </summary>
        [Input("userAuthorizationRequired")]
        public Input<bool>? UserAuthorizationRequired { get; set; }

        public TeamsChannelConfigurationArgs()
        {
        }
        public static new TeamsChannelConfigurationArgs Empty => new TeamsChannelConfigurationArgs();
    }

    public sealed class TeamsChannelConfigurationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ID of the Microsoft Teams channel.
        /// </summary>
        [Input("channelId")]
        public Input<string>? ChannelId { get; set; }

        /// <summary>
        /// Name of the Microsoft Teams channel.
        /// </summary>
        [Input("channelName")]
        public Input<string>? ChannelName { get; set; }

        /// <summary>
        /// ARN of the Microsoft Teams channel configuration.
        /// </summary>
        [Input("chatConfigurationArn")]
        public Input<string>? ChatConfigurationArn { get; set; }

        /// <summary>
        /// Name of the Microsoft Teams channel configuration.
        /// </summary>
        [Input("configurationName")]
        public Input<string>? ConfigurationName { get; set; }

        [Input("guardrailPolicyArns")]
        private InputList<string>? _guardrailPolicyArns;

        /// <summary>
        /// List of IAM policy ARNs that are applied as channel guardrails. The AWS managed `AdministratorAccess` policy is applied by default if this is not set.
        /// </summary>
        public InputList<string> GuardrailPolicyArns
        {
            get => _guardrailPolicyArns ?? (_guardrailPolicyArns = new InputList<string>());
            set => _guardrailPolicyArns = value;
        }

        /// <summary>
        /// ARN of the IAM role that defines the permissions for AWS Chatbot. This is a user-defined role that AWS Chatbot will assume. This is not the service-linked role.
        /// </summary>
        [Input("iamRoleArn")]
        public Input<string>? IamRoleArn { get; set; }

        /// <summary>
        /// Logging levels include `ERROR`, `INFO`, or `NONE`.
        /// </summary>
        [Input("loggingLevel")]
        public Input<string>? LoggingLevel { get; set; }

        [Input("snsTopicArns")]
        private InputList<string>? _snsTopicArns;

        /// <summary>
        /// ARNs of the SNS topics that deliver notifications to AWS Chatbot.
        /// </summary>
        public InputList<string> SnsTopicArns
        {
            get => _snsTopicArns ?? (_snsTopicArns = new InputList<string>());
            set => _snsTopicArns = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Map of tags assigned to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;

        /// <summary>
        /// Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Obsolete(@"Please use `tags` instead.")]
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        /// <summary>
        /// ID of the Microsoft Team authorized with AWS Chatbot. To get the team ID, you must perform the initial authorization flow with Microsoft Teams in the AWS Chatbot console. Then you can copy and paste the team ID from the console.
        /// </summary>
        [Input("teamId")]
        public Input<string>? TeamId { get; set; }

        /// <summary>
        /// Name of the Microsoft Teams team.
        /// </summary>
        [Input("teamName")]
        public Input<string>? TeamName { get; set; }

        /// <summary>
        /// ID of the Microsoft Teams tenant.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("tenantId")]
        public Input<string>? TenantId { get; set; }

        [Input("timeouts")]
        public Input<Inputs.TeamsChannelConfigurationTimeoutsGetArgs>? Timeouts { get; set; }

        /// <summary>
        /// Enables use of a user role requirement in your chat configuration.
        /// </summary>
        [Input("userAuthorizationRequired")]
        public Input<bool>? UserAuthorizationRequired { get; set; }

        public TeamsChannelConfigurationState()
        {
        }
        public static new TeamsChannelConfigurationState Empty => new TeamsChannelConfigurationState();
    }
}
