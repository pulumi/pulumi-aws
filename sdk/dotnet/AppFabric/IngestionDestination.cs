// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.AppFabric
{
    /// <summary>
    /// Resource for managing an AWS AppFabric Ingestion Destination.
    /// 
    /// ## Example Usage
    /// 
    /// ### Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.AppFabric.IngestionDestination("example", new()
    ///     {
    ///         AppBundleArn = exampleAwsAppfabricAppBundle.Arn,
    ///         IngestionArn = exampleAwsAppfabricIngestion.Arn,
    ///         ProcessingConfiguration = new Aws.AppFabric.Inputs.IngestionDestinationProcessingConfigurationArgs
    ///         {
    ///             AuditLog = new Aws.AppFabric.Inputs.IngestionDestinationProcessingConfigurationAuditLogArgs
    ///             {
    ///                 Format = "json",
    ///                 Schema = "raw",
    ///             },
    ///         },
    ///         DestinationConfiguration = new Aws.AppFabric.Inputs.IngestionDestinationDestinationConfigurationArgs
    ///         {
    ///             AuditLog = new Aws.AppFabric.Inputs.IngestionDestinationDestinationConfigurationAuditLogArgs
    ///             {
    ///                 Destination = new Aws.AppFabric.Inputs.IngestionDestinationDestinationConfigurationAuditLogDestinationArgs
    ///                 {
    ///                     S3Bucket = new Aws.AppFabric.Inputs.IngestionDestinationDestinationConfigurationAuditLogDestinationS3BucketArgs
    ///                     {
    ///                         BucketName = exampleAwsS3Bucket.Bucket,
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [AwsResourceType("aws:appfabric/ingestionDestination:IngestionDestination")]
    public partial class IngestionDestination : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) of the app bundle to use for the request.
        /// </summary>
        [Output("appBundleArn")]
        public Output<string> AppBundleArn { get; private set; } = null!;

        /// <summary>
        /// ARN of the Ingestion Destination.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// Contains information about the destination of ingested data.
        /// </summary>
        [Output("destinationConfiguration")]
        public Output<Outputs.IngestionDestinationDestinationConfiguration?> DestinationConfiguration { get; private set; } = null!;

        /// <summary>
        /// The Amazon Resource Name (ARN) of the ingestion to use for the request.
        /// </summary>
        [Output("ingestionArn")]
        public Output<string> IngestionArn { get; private set; } = null!;

        /// <summary>
        /// Contains information about how ingested data is processed.
        /// </summary>
        [Output("processingConfiguration")]
        public Output<Outputs.IngestionDestinationProcessingConfiguration?> ProcessingConfiguration { get; private set; } = null!;

        /// <summary>
        /// Map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;

        [Output("timeouts")]
        public Output<Outputs.IngestionDestinationTimeouts?> Timeouts { get; private set; } = null!;


        /// <summary>
        /// Create a IngestionDestination resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public IngestionDestination(string name, IngestionDestinationArgs args, CustomResourceOptions? options = null)
            : base("aws:appfabric/ingestionDestination:IngestionDestination", name, args ?? new IngestionDestinationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private IngestionDestination(string name, Input<string> id, IngestionDestinationState? state = null, CustomResourceOptions? options = null)
            : base("aws:appfabric/ingestionDestination:IngestionDestination", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing IngestionDestination resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static IngestionDestination Get(string name, Input<string> id, IngestionDestinationState? state = null, CustomResourceOptions? options = null)
        {
            return new IngestionDestination(name, id, state, options);
        }
    }

    public sealed class IngestionDestinationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) of the app bundle to use for the request.
        /// </summary>
        [Input("appBundleArn", required: true)]
        public Input<string> AppBundleArn { get; set; } = null!;

        /// <summary>
        /// Contains information about the destination of ingested data.
        /// </summary>
        [Input("destinationConfiguration")]
        public Input<Inputs.IngestionDestinationDestinationConfigurationArgs>? DestinationConfiguration { get; set; }

        /// <summary>
        /// The Amazon Resource Name (ARN) of the ingestion to use for the request.
        /// </summary>
        [Input("ingestionArn", required: true)]
        public Input<string> IngestionArn { get; set; } = null!;

        /// <summary>
        /// Contains information about how ingested data is processed.
        /// </summary>
        [Input("processingConfiguration")]
        public Input<Inputs.IngestionDestinationProcessingConfigurationArgs>? ProcessingConfiguration { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("timeouts")]
        public Input<Inputs.IngestionDestinationTimeoutsArgs>? Timeouts { get; set; }

        public IngestionDestinationArgs()
        {
        }
        public static new IngestionDestinationArgs Empty => new IngestionDestinationArgs();
    }

    public sealed class IngestionDestinationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) of the app bundle to use for the request.
        /// </summary>
        [Input("appBundleArn")]
        public Input<string>? AppBundleArn { get; set; }

        /// <summary>
        /// ARN of the Ingestion Destination.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// Contains information about the destination of ingested data.
        /// </summary>
        [Input("destinationConfiguration")]
        public Input<Inputs.IngestionDestinationDestinationConfigurationGetArgs>? DestinationConfiguration { get; set; }

        /// <summary>
        /// The Amazon Resource Name (ARN) of the ingestion to use for the request.
        /// </summary>
        [Input("ingestionArn")]
        public Input<string>? IngestionArn { get; set; }

        /// <summary>
        /// Contains information about how ingested data is processed.
        /// </summary>
        [Input("processingConfiguration")]
        public Input<Inputs.IngestionDestinationProcessingConfigurationGetArgs>? ProcessingConfiguration { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;

        /// <summary>
        /// Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Obsolete(@"Please use `tags` instead.")]
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        [Input("timeouts")]
        public Input<Inputs.IngestionDestinationTimeoutsGetArgs>? Timeouts { get; set; }

        public IngestionDestinationState()
        {
        }
        public static new IngestionDestinationState Empty => new IngestionDestinationState();
    }
}
