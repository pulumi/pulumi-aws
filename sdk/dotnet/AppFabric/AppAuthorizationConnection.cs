// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.AppFabric
{
    /// <summary>
    /// Resource for managing an AWS AppFabric App Authorization Connection.
    /// 
    /// ## Example Usage
    /// 
    /// ### Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.AppFabric.AppAuthorizationConnection("example", new()
    ///     {
    ///         AppAuthorizationArn = test.Arn,
    ///         AppBundleArn = arn,
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [AwsResourceType("aws:appfabric/appAuthorizationConnection:AppAuthorizationConnection")]
    public partial class AppAuthorizationConnection : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The name of the application.
        /// </summary>
        [Output("app")]
        public Output<string> App { get; private set; } = null!;

        /// <summary>
        /// The Amazon Resource Name (ARN) or Universal Unique Identifier (UUID) of the app authorization to use for the request.
        /// </summary>
        [Output("appAuthorizationArn")]
        public Output<string> AppAuthorizationArn { get; private set; } = null!;

        /// <summary>
        /// The Amazon Resource Name (ARN) of the app bundle to use for the request.
        /// </summary>
        [Output("appBundleArn")]
        public Output<string> AppBundleArn { get; private set; } = null!;

        /// <summary>
        /// Contains OAuth2 authorization information.This is required if the app authorization for the request is configured with an OAuth2 (oauth2) authorization type.
        /// </summary>
        [Output("authRequest")]
        public Output<Outputs.AppAuthorizationConnectionAuthRequest?> AuthRequest { get; private set; } = null!;

        /// <summary>
        /// Contains information about an application tenant, such as the application display name and identifier.
        /// </summary>
        [Output("tenants")]
        public Output<ImmutableArray<Outputs.AppAuthorizationConnectionTenant>> Tenants { get; private set; } = null!;

        [Output("timeouts")]
        public Output<Outputs.AppAuthorizationConnectionTimeouts?> Timeouts { get; private set; } = null!;


        /// <summary>
        /// Create a AppAuthorizationConnection resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AppAuthorizationConnection(string name, AppAuthorizationConnectionArgs args, CustomResourceOptions? options = null)
            : base("aws:appfabric/appAuthorizationConnection:AppAuthorizationConnection", name, args ?? new AppAuthorizationConnectionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AppAuthorizationConnection(string name, Input<string> id, AppAuthorizationConnectionState? state = null, CustomResourceOptions? options = null)
            : base("aws:appfabric/appAuthorizationConnection:AppAuthorizationConnection", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AppAuthorizationConnection resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AppAuthorizationConnection Get(string name, Input<string> id, AppAuthorizationConnectionState? state = null, CustomResourceOptions? options = null)
        {
            return new AppAuthorizationConnection(name, id, state, options);
        }
    }

    public sealed class AppAuthorizationConnectionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) or Universal Unique Identifier (UUID) of the app authorization to use for the request.
        /// </summary>
        [Input("appAuthorizationArn", required: true)]
        public Input<string> AppAuthorizationArn { get; set; } = null!;

        /// <summary>
        /// The Amazon Resource Name (ARN) of the app bundle to use for the request.
        /// </summary>
        [Input("appBundleArn", required: true)]
        public Input<string> AppBundleArn { get; set; } = null!;

        /// <summary>
        /// Contains OAuth2 authorization information.This is required if the app authorization for the request is configured with an OAuth2 (oauth2) authorization type.
        /// </summary>
        [Input("authRequest")]
        public Input<Inputs.AppAuthorizationConnectionAuthRequestArgs>? AuthRequest { get; set; }

        [Input("timeouts")]
        public Input<Inputs.AppAuthorizationConnectionTimeoutsArgs>? Timeouts { get; set; }

        public AppAuthorizationConnectionArgs()
        {
        }
        public static new AppAuthorizationConnectionArgs Empty => new AppAuthorizationConnectionArgs();
    }

    public sealed class AppAuthorizationConnectionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the application.
        /// </summary>
        [Input("app")]
        public Input<string>? App { get; set; }

        /// <summary>
        /// The Amazon Resource Name (ARN) or Universal Unique Identifier (UUID) of the app authorization to use for the request.
        /// </summary>
        [Input("appAuthorizationArn")]
        public Input<string>? AppAuthorizationArn { get; set; }

        /// <summary>
        /// The Amazon Resource Name (ARN) of the app bundle to use for the request.
        /// </summary>
        [Input("appBundleArn")]
        public Input<string>? AppBundleArn { get; set; }

        /// <summary>
        /// Contains OAuth2 authorization information.This is required if the app authorization for the request is configured with an OAuth2 (oauth2) authorization type.
        /// </summary>
        [Input("authRequest")]
        public Input<Inputs.AppAuthorizationConnectionAuthRequestGetArgs>? AuthRequest { get; set; }

        [Input("tenants")]
        private InputList<Inputs.AppAuthorizationConnectionTenantGetArgs>? _tenants;

        /// <summary>
        /// Contains information about an application tenant, such as the application display name and identifier.
        /// </summary>
        public InputList<Inputs.AppAuthorizationConnectionTenantGetArgs> Tenants
        {
            get => _tenants ?? (_tenants = new InputList<Inputs.AppAuthorizationConnectionTenantGetArgs>());
            set => _tenants = value;
        }

        [Input("timeouts")]
        public Input<Inputs.AppAuthorizationConnectionTimeoutsGetArgs>? Timeouts { get; set; }

        public AppAuthorizationConnectionState()
        {
        }
        public static new AppAuthorizationConnectionState Empty => new AppAuthorizationConnectionState();
    }
}
