// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.AppFabric
{
    /// <summary>
    /// Resource for managing an AWS AppFabric Ingestion.
    /// 
    /// ## Example Usage
    /// 
    /// ### Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.AppFabric.Ingestion("example", new()
    ///     {
    ///         App = "OKTA",
    ///         AppBundleArn = exampleAwsAppfabricAppBundle.Arn,
    ///         TenantId = "example.okta.com",
    ///         IngestionType = "auditLog",
    ///         Tags = 
    ///         {
    ///             { "Environment", "test" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import AppFabric Ingestion using the `app_bundle_identifier` and `arn` separated by `,`. For example:
    /// 
    /// ```sh
    /// $ pulumi import aws:appfabric/ingestion:Ingestion example arn:aws:appfabric:[region]:[account]:appbundle/a9b91477-8831-43c0-970c-xxxxxxxxxx,arn:aws:appfabric:[region]:[account]:appbundle/a9b91477-8831-43c0-970c-xxxxxxxxxx/ingestion/32251416-710b-4425-96ca-xxxxxxxxxx
    /// ```
    /// </summary>
    [AwsResourceType("aws:appfabric/ingestion:Ingestion")]
    public partial class Ingestion : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Name of the application.
        /// Refer to the AWS Documentation for the [list of valid values](https://docs.aws.amazon.com/appfabric/latest/api/API_CreateIngestion.html#appfabric-CreateIngestion-request-app)
        /// </summary>
        [Output("app")]
        public Output<string> App { get; private set; } = null!;

        /// <summary>
        /// Amazon Resource Name (ARN) of the app bundle to use for the request.
        /// </summary>
        [Output("appBundleArn")]
        public Output<string> AppBundleArn { get; private set; } = null!;

        /// <summary>
        /// ARN of the Ingestion.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// Ingestion type. Valid values are `auditLog`.
        /// </summary>
        [Output("ingestionType")]
        public Output<string> IngestionType { get; private set; } = null!;

        /// <summary>
        /// Map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;

        /// <summary>
        /// ID of the application tenant.
        /// </summary>
        [Output("tenantId")]
        public Output<string> TenantId { get; private set; } = null!;


        /// <summary>
        /// Create a Ingestion resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Ingestion(string name, IngestionArgs args, CustomResourceOptions? options = null)
            : base("aws:appfabric/ingestion:Ingestion", name, args ?? new IngestionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Ingestion(string name, Input<string> id, IngestionState? state = null, CustomResourceOptions? options = null)
            : base("aws:appfabric/ingestion:Ingestion", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Ingestion resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Ingestion Get(string name, Input<string> id, IngestionState? state = null, CustomResourceOptions? options = null)
        {
            return new Ingestion(name, id, state, options);
        }
    }

    public sealed class IngestionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the application.
        /// Refer to the AWS Documentation for the [list of valid values](https://docs.aws.amazon.com/appfabric/latest/api/API_CreateIngestion.html#appfabric-CreateIngestion-request-app)
        /// </summary>
        [Input("app", required: true)]
        public Input<string> App { get; set; } = null!;

        /// <summary>
        /// Amazon Resource Name (ARN) of the app bundle to use for the request.
        /// </summary>
        [Input("appBundleArn", required: true)]
        public Input<string> AppBundleArn { get; set; } = null!;

        /// <summary>
        /// Ingestion type. Valid values are `auditLog`.
        /// </summary>
        [Input("ingestionType", required: true)]
        public Input<string> IngestionType { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// ID of the application tenant.
        /// </summary>
        [Input("tenantId", required: true)]
        public Input<string> TenantId { get; set; } = null!;

        public IngestionArgs()
        {
        }
        public static new IngestionArgs Empty => new IngestionArgs();
    }

    public sealed class IngestionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the application.
        /// Refer to the AWS Documentation for the [list of valid values](https://docs.aws.amazon.com/appfabric/latest/api/API_CreateIngestion.html#appfabric-CreateIngestion-request-app)
        /// </summary>
        [Input("app")]
        public Input<string>? App { get; set; }

        /// <summary>
        /// Amazon Resource Name (ARN) of the app bundle to use for the request.
        /// </summary>
        [Input("appBundleArn")]
        public Input<string>? AppBundleArn { get; set; }

        /// <summary>
        /// ARN of the Ingestion.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// Ingestion type. Valid values are `auditLog`.
        /// </summary>
        [Input("ingestionType")]
        public Input<string>? IngestionType { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;

        /// <summary>
        /// Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Obsolete(@"Please use `tags` instead.")]
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        /// <summary>
        /// ID of the application tenant.
        /// </summary>
        [Input("tenantId")]
        public Input<string>? TenantId { get; set; }

        public IngestionState()
        {
        }
        public static new IngestionState Empty => new IngestionState();
    }
}
