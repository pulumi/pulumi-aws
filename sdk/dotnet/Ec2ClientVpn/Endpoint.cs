// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ec2ClientVpn
{
    [AwsResourceType("aws:ec2clientvpn/endpoint:Endpoint")]
    public partial class Endpoint : global::Pulumi.CustomResource
    {
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        [Output("authenticationOptions")]
        public Output<ImmutableArray<Outputs.EndpointAuthenticationOption>> AuthenticationOptions { get; private set; } = null!;

        [Output("clientCidrBlock")]
        public Output<string> ClientCidrBlock { get; private set; } = null!;

        [Output("clientConnectOptions")]
        public Output<Outputs.EndpointClientConnectOptions> ClientConnectOptions { get; private set; } = null!;

        [Output("clientLoginBannerOptions")]
        public Output<Outputs.EndpointClientLoginBannerOptions> ClientLoginBannerOptions { get; private set; } = null!;

        [Output("connectionLogOptions")]
        public Output<Outputs.EndpointConnectionLogOptions> ConnectionLogOptions { get; private set; } = null!;

        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("dnsName")]
        public Output<string> DnsName { get; private set; } = null!;

        [Output("dnsServers")]
        public Output<ImmutableArray<string>> DnsServers { get; private set; } = null!;

        [Output("securityGroupIds")]
        public Output<ImmutableArray<string>> SecurityGroupIds { get; private set; } = null!;

        [Output("selfServicePortal")]
        public Output<string?> SelfServicePortal { get; private set; } = null!;

        [Output("serverCertificateArn")]
        public Output<string> ServerCertificateArn { get; private set; } = null!;

        [Output("sessionTimeoutHours")]
        public Output<int?> SessionTimeoutHours { get; private set; } = null!;

        [Output("splitTunnel")]
        public Output<bool?> SplitTunnel { get; private set; } = null!;

        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;

        [Output("transportProtocol")]
        public Output<string?> TransportProtocol { get; private set; } = null!;

        [Output("vpcId")]
        public Output<string> VpcId { get; private set; } = null!;

        [Output("vpnPort")]
        public Output<int?> VpnPort { get; private set; } = null!;


        /// <summary>
        /// Create a Endpoint resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Endpoint(string name, EndpointArgs args, CustomResourceOptions? options = null)
            : base("aws:ec2clientvpn/endpoint:Endpoint", name, args ?? new EndpointArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Endpoint(string name, Input<string> id, EndpointState? state = null, CustomResourceOptions? options = null)
            : base("aws:ec2clientvpn/endpoint:Endpoint", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Endpoint resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Endpoint Get(string name, Input<string> id, EndpointState? state = null, CustomResourceOptions? options = null)
        {
            return new Endpoint(name, id, state, options);
        }
    }

    public sealed class EndpointArgs : global::Pulumi.ResourceArgs
    {
        [Input("authenticationOptions", required: true)]
        private InputList<Inputs.EndpointAuthenticationOptionArgs>? _authenticationOptions;
        public InputList<Inputs.EndpointAuthenticationOptionArgs> AuthenticationOptions
        {
            get => _authenticationOptions ?? (_authenticationOptions = new InputList<Inputs.EndpointAuthenticationOptionArgs>());
            set => _authenticationOptions = value;
        }

        [Input("clientCidrBlock", required: true)]
        public Input<string> ClientCidrBlock { get; set; } = null!;

        [Input("clientConnectOptions")]
        public Input<Inputs.EndpointClientConnectOptionsArgs>? ClientConnectOptions { get; set; }

        [Input("clientLoginBannerOptions")]
        public Input<Inputs.EndpointClientLoginBannerOptionsArgs>? ClientLoginBannerOptions { get; set; }

        [Input("connectionLogOptions", required: true)]
        public Input<Inputs.EndpointConnectionLogOptionsArgs> ConnectionLogOptions { get; set; } = null!;

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("dnsServers")]
        private InputList<string>? _dnsServers;
        public InputList<string> DnsServers
        {
            get => _dnsServers ?? (_dnsServers = new InputList<string>());
            set => _dnsServers = value;
        }

        [Input("securityGroupIds")]
        private InputList<string>? _securityGroupIds;
        public InputList<string> SecurityGroupIds
        {
            get => _securityGroupIds ?? (_securityGroupIds = new InputList<string>());
            set => _securityGroupIds = value;
        }

        [Input("selfServicePortal")]
        public Input<string>? SelfServicePortal { get; set; }

        [Input("serverCertificateArn", required: true)]
        public Input<string> ServerCertificateArn { get; set; } = null!;

        [Input("sessionTimeoutHours")]
        public Input<int>? SessionTimeoutHours { get; set; }

        [Input("splitTunnel")]
        public Input<bool>? SplitTunnel { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("transportProtocol")]
        public Input<string>? TransportProtocol { get; set; }

        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        [Input("vpnPort")]
        public Input<int>? VpnPort { get; set; }

        public EndpointArgs()
        {
        }
        public static new EndpointArgs Empty => new EndpointArgs();
    }

    public sealed class EndpointState : global::Pulumi.ResourceArgs
    {
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        [Input("authenticationOptions")]
        private InputList<Inputs.EndpointAuthenticationOptionGetArgs>? _authenticationOptions;
        public InputList<Inputs.EndpointAuthenticationOptionGetArgs> AuthenticationOptions
        {
            get => _authenticationOptions ?? (_authenticationOptions = new InputList<Inputs.EndpointAuthenticationOptionGetArgs>());
            set => _authenticationOptions = value;
        }

        [Input("clientCidrBlock")]
        public Input<string>? ClientCidrBlock { get; set; }

        [Input("clientConnectOptions")]
        public Input<Inputs.EndpointClientConnectOptionsGetArgs>? ClientConnectOptions { get; set; }

        [Input("clientLoginBannerOptions")]
        public Input<Inputs.EndpointClientLoginBannerOptionsGetArgs>? ClientLoginBannerOptions { get; set; }

        [Input("connectionLogOptions")]
        public Input<Inputs.EndpointConnectionLogOptionsGetArgs>? ConnectionLogOptions { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("dnsName")]
        public Input<string>? DnsName { get; set; }

        [Input("dnsServers")]
        private InputList<string>? _dnsServers;
        public InputList<string> DnsServers
        {
            get => _dnsServers ?? (_dnsServers = new InputList<string>());
            set => _dnsServers = value;
        }

        [Input("securityGroupIds")]
        private InputList<string>? _securityGroupIds;
        public InputList<string> SecurityGroupIds
        {
            get => _securityGroupIds ?? (_securityGroupIds = new InputList<string>());
            set => _securityGroupIds = value;
        }

        [Input("selfServicePortal")]
        public Input<string>? SelfServicePortal { get; set; }

        [Input("serverCertificateArn")]
        public Input<string>? ServerCertificateArn { get; set; }

        [Input("sessionTimeoutHours")]
        public Input<int>? SessionTimeoutHours { get; set; }

        [Input("splitTunnel")]
        public Input<bool>? SplitTunnel { get; set; }

        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        [Input("transportProtocol")]
        public Input<string>? TransportProtocol { get; set; }

        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        [Input("vpnPort")]
        public Input<int>? VpnPort { get; set; }

        public EndpointState()
        {
        }
        public static new EndpointState Empty => new EndpointState();
    }
}
