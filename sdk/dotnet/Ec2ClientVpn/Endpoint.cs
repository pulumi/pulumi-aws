// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ec2ClientVpn
{
    /// <summary>
    /// Provides an AWS Client VPN endpoint for OpenVPN clients. For more information on usage, please see the
    /// [AWS Client VPN Administrator's Guide](https://docs.aws.amazon.com/vpn/latest/clientvpn-admin/what-is.html).
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.Ec2ClientVpn.Endpoint("example", new()
    ///     {
    ///         Description = "clientvpn-example",
    ///         ServerCertificateArn = cert.Arn,
    ///         ClientCidrBlock = "10.0.0.0/16",
    ///         AuthenticationOptions = new[]
    ///         {
    ///             new Aws.Ec2ClientVpn.Inputs.EndpointAuthenticationOptionArgs
    ///             {
    ///                 Type = "certificate-authentication",
    ///                 RootCertificateChainArn = rootCert.Arn,
    ///             },
    ///         },
    ///         ConnectionLogOptions = new Aws.Ec2ClientVpn.Inputs.EndpointConnectionLogOptionsArgs
    ///         {
    ///             Enabled = true,
    ///             CloudwatchLogGroup = lg.Name,
    ///             CloudwatchLogStream = ls.Name,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import AWS Client VPN endpoints using the `id` value found via `aws ec2 describe-client-vpn-endpoints`. For example:
    /// 
    /// ```sh
    /// $ pulumi import aws:ec2clientvpn/endpoint:Endpoint example cvpn-endpoint-0ac3a1abbccddd666
    /// ```
    /// </summary>
    [AwsResourceType("aws:ec2clientvpn/endpoint:Endpoint")]
    public partial class Endpoint : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ARN of the Client VPN endpoint.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// Information about the authentication method to be used to authenticate clients.
        /// </summary>
        [Output("authenticationOptions")]
        public Output<ImmutableArray<Outputs.EndpointAuthenticationOption>> AuthenticationOptions { get; private set; } = null!;

        /// <summary>
        /// The IPv4 address range, in CIDR notation, from which to assign client IP addresses. The address range cannot overlap with the local CIDR of the VPC in which the associated subnet is located, or the routes that you add manually. The address range cannot be changed after the Client VPN endpoint has been created. The CIDR block should be /22 or greater. When `TrafficIpAddressType` is set to `Ipv6`, it must not be specified. Otherwise, it is required.
        /// </summary>
        [Output("clientCidrBlock")]
        public Output<string?> ClientCidrBlock { get; private set; } = null!;

        /// <summary>
        /// The options for managing connection authorization for new client connections.
        /// </summary>
        [Output("clientConnectOptions")]
        public Output<Outputs.EndpointClientConnectOptions> ClientConnectOptions { get; private set; } = null!;

        /// <summary>
        /// Options for enabling a customizable text banner that will be displayed on AWS provided clients when a VPN session is established.
        /// </summary>
        [Output("clientLoginBannerOptions")]
        public Output<Outputs.EndpointClientLoginBannerOptions> ClientLoginBannerOptions { get; private set; } = null!;

        /// <summary>
        /// Options for enforce administrator defined routes on devices connected through the VPN.
        /// </summary>
        [Output("clientRouteEnforcementOptions")]
        public Output<Outputs.EndpointClientRouteEnforcementOptions> ClientRouteEnforcementOptions { get; private set; } = null!;

        /// <summary>
        /// Information about the client connection logging options.
        /// </summary>
        [Output("connectionLogOptions")]
        public Output<Outputs.EndpointConnectionLogOptions> ConnectionLogOptions { get; private set; } = null!;

        /// <summary>
        /// A brief description of the Client VPN endpoint.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Indicates whether the client VPN session is disconnected after the maximum `SessionTimeoutHours` is reached. If `True`, users are prompted to reconnect client VPN. If `False`, client VPN attempts to reconnect automatically. The default value is `False`.
        /// </summary>
        [Output("disconnectOnSessionTimeout")]
        public Output<bool> DisconnectOnSessionTimeout { get; private set; } = null!;

        /// <summary>
        /// The DNS name to be used by clients when establishing their VPN session.
        /// </summary>
        [Output("dnsName")]
        public Output<string> DnsName { get; private set; } = null!;

        /// <summary>
        /// Information about the DNS servers to be used for DNS resolution. A Client VPN endpoint can have up to two DNS servers. If no DNS server is specified, the DNS address of the connecting device is used.
        /// </summary>
        [Output("dnsServers")]
        public Output<ImmutableArray<string>> DnsServers { get; private set; } = null!;

        /// <summary>
        /// IP address type for the Client VPN endpoint. Valid values are `Ipv4`, `Ipv6`, or `dual-stack`. Defaults to `Ipv4`.
        /// </summary>
        [Output("endpointIpAddressType")]
        public Output<string> EndpointIpAddressType { get; private set; } = null!;

        /// <summary>
        /// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// The IDs of one or more security groups to apply to the target network. You must also specify the ID of the VPC that contains the security groups.
        /// </summary>
        [Output("securityGroupIds")]
        public Output<ImmutableArray<string>> SecurityGroupIds { get; private set; } = null!;

        /// <summary>
        /// Specify whether to enable the self-service portal for the Client VPN endpoint. Values can be `Enabled` or `Disabled`. Default value is `Disabled`.
        /// </summary>
        [Output("selfServicePortal")]
        public Output<string?> SelfServicePortal { get; private set; } = null!;

        /// <summary>
        /// The URL of the self-service portal.
        /// </summary>
        [Output("selfServicePortalUrl")]
        public Output<string> SelfServicePortalUrl { get; private set; } = null!;

        /// <summary>
        /// The ARN of the ACM server certificate.
        /// </summary>
        [Output("serverCertificateArn")]
        public Output<string> ServerCertificateArn { get; private set; } = null!;

        /// <summary>
        /// The maximum session duration is a trigger by which end-users are required to re-authenticate prior to establishing a VPN session. Default value is `24` - Valid values: `8 | 10 | 12 | 24`
        /// </summary>
        [Output("sessionTimeoutHours")]
        public Output<int?> SessionTimeoutHours { get; private set; } = null!;

        /// <summary>
        /// Indicates whether split-tunnel is enabled on VPN endpoint. Default value is `False`.
        /// </summary>
        [Output("splitTunnel")]
        public Output<bool?> SplitTunnel { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags to assign to the resource. If configured with a provider `DefaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `DefaultTags` configuration block.
        /// </summary>
        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;

        /// <summary>
        /// IP address type for traffic within the Client VPN tunnel. Valid values are `Ipv4`, `Ipv6`, or `dual-stack`. Defaults to `Ipv4`. When it is set to `Ipv6`, `ClientCidrBlock` must not be specified.
        /// </summary>
        [Output("trafficIpAddressType")]
        public Output<string> TrafficIpAddressType { get; private set; } = null!;

        /// <summary>
        /// The transport protocol to be used by the VPN session. Default value is `Udp`.
        /// </summary>
        [Output("transportProtocol")]
        public Output<string?> TransportProtocol { get; private set; } = null!;

        /// <summary>
        /// The ID of the VPC to associate with the Client VPN endpoint. If no security group IDs are specified in the request, the default security group for the VPC is applied.
        /// </summary>
        [Output("vpcId")]
        public Output<string> VpcId { get; private set; } = null!;

        /// <summary>
        /// The port number for the Client VPN endpoint. Valid values are `443` and `1194`. Default value is `443`.
        /// </summary>
        [Output("vpnPort")]
        public Output<int?> VpnPort { get; private set; } = null!;


        /// <summary>
        /// Create a Endpoint resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Endpoint(string name, EndpointArgs args, CustomResourceOptions? options = null)
            : base("aws:ec2clientvpn/endpoint:Endpoint", name, args ?? new EndpointArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Endpoint(string name, Input<string> id, EndpointState? state = null, CustomResourceOptions? options = null)
            : base("aws:ec2clientvpn/endpoint:Endpoint", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Endpoint resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Endpoint Get(string name, Input<string> id, EndpointState? state = null, CustomResourceOptions? options = null)
        {
            return new Endpoint(name, id, state, options);
        }
    }

    public sealed class EndpointArgs : global::Pulumi.ResourceArgs
    {
        [Input("authenticationOptions", required: true)]
        private InputList<Inputs.EndpointAuthenticationOptionArgs>? _authenticationOptions;

        /// <summary>
        /// Information about the authentication method to be used to authenticate clients.
        /// </summary>
        public InputList<Inputs.EndpointAuthenticationOptionArgs> AuthenticationOptions
        {
            get => _authenticationOptions ?? (_authenticationOptions = new InputList<Inputs.EndpointAuthenticationOptionArgs>());
            set => _authenticationOptions = value;
        }

        /// <summary>
        /// The IPv4 address range, in CIDR notation, from which to assign client IP addresses. The address range cannot overlap with the local CIDR of the VPC in which the associated subnet is located, or the routes that you add manually. The address range cannot be changed after the Client VPN endpoint has been created. The CIDR block should be /22 or greater. When `TrafficIpAddressType` is set to `Ipv6`, it must not be specified. Otherwise, it is required.
        /// </summary>
        [Input("clientCidrBlock")]
        public Input<string>? ClientCidrBlock { get; set; }

        /// <summary>
        /// The options for managing connection authorization for new client connections.
        /// </summary>
        [Input("clientConnectOptions")]
        public Input<Inputs.EndpointClientConnectOptionsArgs>? ClientConnectOptions { get; set; }

        /// <summary>
        /// Options for enabling a customizable text banner that will be displayed on AWS provided clients when a VPN session is established.
        /// </summary>
        [Input("clientLoginBannerOptions")]
        public Input<Inputs.EndpointClientLoginBannerOptionsArgs>? ClientLoginBannerOptions { get; set; }

        /// <summary>
        /// Options for enforce administrator defined routes on devices connected through the VPN.
        /// </summary>
        [Input("clientRouteEnforcementOptions")]
        public Input<Inputs.EndpointClientRouteEnforcementOptionsArgs>? ClientRouteEnforcementOptions { get; set; }

        /// <summary>
        /// Information about the client connection logging options.
        /// </summary>
        [Input("connectionLogOptions", required: true)]
        public Input<Inputs.EndpointConnectionLogOptionsArgs> ConnectionLogOptions { get; set; } = null!;

        /// <summary>
        /// A brief description of the Client VPN endpoint.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Indicates whether the client VPN session is disconnected after the maximum `SessionTimeoutHours` is reached. If `True`, users are prompted to reconnect client VPN. If `False`, client VPN attempts to reconnect automatically. The default value is `False`.
        /// </summary>
        [Input("disconnectOnSessionTimeout")]
        public Input<bool>? DisconnectOnSessionTimeout { get; set; }

        [Input("dnsServers")]
        private InputList<string>? _dnsServers;

        /// <summary>
        /// Information about the DNS servers to be used for DNS resolution. A Client VPN endpoint can have up to two DNS servers. If no DNS server is specified, the DNS address of the connecting device is used.
        /// </summary>
        public InputList<string> DnsServers
        {
            get => _dnsServers ?? (_dnsServers = new InputList<string>());
            set => _dnsServers = value;
        }

        /// <summary>
        /// IP address type for the Client VPN endpoint. Valid values are `Ipv4`, `Ipv6`, or `dual-stack`. Defaults to `Ipv4`.
        /// </summary>
        [Input("endpointIpAddressType")]
        public Input<string>? EndpointIpAddressType { get; set; }

        /// <summary>
        /// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("securityGroupIds")]
        private InputList<string>? _securityGroupIds;

        /// <summary>
        /// The IDs of one or more security groups to apply to the target network. You must also specify the ID of the VPC that contains the security groups.
        /// </summary>
        public InputList<string> SecurityGroupIds
        {
            get => _securityGroupIds ?? (_securityGroupIds = new InputList<string>());
            set => _securityGroupIds = value;
        }

        /// <summary>
        /// Specify whether to enable the self-service portal for the Client VPN endpoint. Values can be `Enabled` or `Disabled`. Default value is `Disabled`.
        /// </summary>
        [Input("selfServicePortal")]
        public Input<string>? SelfServicePortal { get; set; }

        /// <summary>
        /// The ARN of the ACM server certificate.
        /// </summary>
        [Input("serverCertificateArn", required: true)]
        public Input<string> ServerCertificateArn { get; set; } = null!;

        /// <summary>
        /// The maximum session duration is a trigger by which end-users are required to re-authenticate prior to establishing a VPN session. Default value is `24` - Valid values: `8 | 10 | 12 | 24`
        /// </summary>
        [Input("sessionTimeoutHours")]
        public Input<int>? SessionTimeoutHours { get; set; }

        /// <summary>
        /// Indicates whether split-tunnel is enabled on VPN endpoint. Default value is `False`.
        /// </summary>
        [Input("splitTunnel")]
        public Input<bool>? SplitTunnel { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource. If configured with a provider `DefaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// IP address type for traffic within the Client VPN tunnel. Valid values are `Ipv4`, `Ipv6`, or `dual-stack`. Defaults to `Ipv4`. When it is set to `Ipv6`, `ClientCidrBlock` must not be specified.
        /// </summary>
        [Input("trafficIpAddressType")]
        public Input<string>? TrafficIpAddressType { get; set; }

        /// <summary>
        /// The transport protocol to be used by the VPN session. Default value is `Udp`.
        /// </summary>
        [Input("transportProtocol")]
        public Input<string>? TransportProtocol { get; set; }

        /// <summary>
        /// The ID of the VPC to associate with the Client VPN endpoint. If no security group IDs are specified in the request, the default security group for the VPC is applied.
        /// </summary>
        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        /// <summary>
        /// The port number for the Client VPN endpoint. Valid values are `443` and `1194`. Default value is `443`.
        /// </summary>
        [Input("vpnPort")]
        public Input<int>? VpnPort { get; set; }

        public EndpointArgs()
        {
        }
        public static new EndpointArgs Empty => new EndpointArgs();
    }

    public sealed class EndpointState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ARN of the Client VPN endpoint.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        [Input("authenticationOptions")]
        private InputList<Inputs.EndpointAuthenticationOptionGetArgs>? _authenticationOptions;

        /// <summary>
        /// Information about the authentication method to be used to authenticate clients.
        /// </summary>
        public InputList<Inputs.EndpointAuthenticationOptionGetArgs> AuthenticationOptions
        {
            get => _authenticationOptions ?? (_authenticationOptions = new InputList<Inputs.EndpointAuthenticationOptionGetArgs>());
            set => _authenticationOptions = value;
        }

        /// <summary>
        /// The IPv4 address range, in CIDR notation, from which to assign client IP addresses. The address range cannot overlap with the local CIDR of the VPC in which the associated subnet is located, or the routes that you add manually. The address range cannot be changed after the Client VPN endpoint has been created. The CIDR block should be /22 or greater. When `TrafficIpAddressType` is set to `Ipv6`, it must not be specified. Otherwise, it is required.
        /// </summary>
        [Input("clientCidrBlock")]
        public Input<string>? ClientCidrBlock { get; set; }

        /// <summary>
        /// The options for managing connection authorization for new client connections.
        /// </summary>
        [Input("clientConnectOptions")]
        public Input<Inputs.EndpointClientConnectOptionsGetArgs>? ClientConnectOptions { get; set; }

        /// <summary>
        /// Options for enabling a customizable text banner that will be displayed on AWS provided clients when a VPN session is established.
        /// </summary>
        [Input("clientLoginBannerOptions")]
        public Input<Inputs.EndpointClientLoginBannerOptionsGetArgs>? ClientLoginBannerOptions { get; set; }

        /// <summary>
        /// Options for enforce administrator defined routes on devices connected through the VPN.
        /// </summary>
        [Input("clientRouteEnforcementOptions")]
        public Input<Inputs.EndpointClientRouteEnforcementOptionsGetArgs>? ClientRouteEnforcementOptions { get; set; }

        /// <summary>
        /// Information about the client connection logging options.
        /// </summary>
        [Input("connectionLogOptions")]
        public Input<Inputs.EndpointConnectionLogOptionsGetArgs>? ConnectionLogOptions { get; set; }

        /// <summary>
        /// A brief description of the Client VPN endpoint.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Indicates whether the client VPN session is disconnected after the maximum `SessionTimeoutHours` is reached. If `True`, users are prompted to reconnect client VPN. If `False`, client VPN attempts to reconnect automatically. The default value is `False`.
        /// </summary>
        [Input("disconnectOnSessionTimeout")]
        public Input<bool>? DisconnectOnSessionTimeout { get; set; }

        /// <summary>
        /// The DNS name to be used by clients when establishing their VPN session.
        /// </summary>
        [Input("dnsName")]
        public Input<string>? DnsName { get; set; }

        [Input("dnsServers")]
        private InputList<string>? _dnsServers;

        /// <summary>
        /// Information about the DNS servers to be used for DNS resolution. A Client VPN endpoint can have up to two DNS servers. If no DNS server is specified, the DNS address of the connecting device is used.
        /// </summary>
        public InputList<string> DnsServers
        {
            get => _dnsServers ?? (_dnsServers = new InputList<string>());
            set => _dnsServers = value;
        }

        /// <summary>
        /// IP address type for the Client VPN endpoint. Valid values are `Ipv4`, `Ipv6`, or `dual-stack`. Defaults to `Ipv4`.
        /// </summary>
        [Input("endpointIpAddressType")]
        public Input<string>? EndpointIpAddressType { get; set; }

        /// <summary>
        /// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("securityGroupIds")]
        private InputList<string>? _securityGroupIds;

        /// <summary>
        /// The IDs of one or more security groups to apply to the target network. You must also specify the ID of the VPC that contains the security groups.
        /// </summary>
        public InputList<string> SecurityGroupIds
        {
            get => _securityGroupIds ?? (_securityGroupIds = new InputList<string>());
            set => _securityGroupIds = value;
        }

        /// <summary>
        /// Specify whether to enable the self-service portal for the Client VPN endpoint. Values can be `Enabled` or `Disabled`. Default value is `Disabled`.
        /// </summary>
        [Input("selfServicePortal")]
        public Input<string>? SelfServicePortal { get; set; }

        /// <summary>
        /// The URL of the self-service portal.
        /// </summary>
        [Input("selfServicePortalUrl")]
        public Input<string>? SelfServicePortalUrl { get; set; }

        /// <summary>
        /// The ARN of the ACM server certificate.
        /// </summary>
        [Input("serverCertificateArn")]
        public Input<string>? ServerCertificateArn { get; set; }

        /// <summary>
        /// The maximum session duration is a trigger by which end-users are required to re-authenticate prior to establishing a VPN session. Default value is `24` - Valid values: `8 | 10 | 12 | 24`
        /// </summary>
        [Input("sessionTimeoutHours")]
        public Input<int>? SessionTimeoutHours { get; set; }

        /// <summary>
        /// Indicates whether split-tunnel is enabled on VPN endpoint. Default value is `False`.
        /// </summary>
        [Input("splitTunnel")]
        public Input<bool>? SplitTunnel { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource. If configured with a provider `DefaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `DefaultTags` configuration block.
        /// </summary>
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        /// <summary>
        /// IP address type for traffic within the Client VPN tunnel. Valid values are `Ipv4`, `Ipv6`, or `dual-stack`. Defaults to `Ipv4`. When it is set to `Ipv6`, `ClientCidrBlock` must not be specified.
        /// </summary>
        [Input("trafficIpAddressType")]
        public Input<string>? TrafficIpAddressType { get; set; }

        /// <summary>
        /// The transport protocol to be used by the VPN session. Default value is `Udp`.
        /// </summary>
        [Input("transportProtocol")]
        public Input<string>? TransportProtocol { get; set; }

        /// <summary>
        /// The ID of the VPC to associate with the Client VPN endpoint. If no security group IDs are specified in the request, the default security group for the VPC is applied.
        /// </summary>
        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        /// <summary>
        /// The port number for the Client VPN endpoint. Valid values are `443` and `1194`. Default value is `443`.
        /// </summary>
        [Input("vpnPort")]
        public Input<int>? VpnPort { get; set; }

        public EndpointState()
        {
        }
        public static new EndpointState Empty => new EndpointState();
    }
}
