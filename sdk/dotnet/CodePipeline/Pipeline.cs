// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.CodePipeline
{
    /// <summary>
    /// Provides a CodePipeline.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.CodeStarConnections.Connection("example", new()
    ///     {
    ///         ProviderType = "GitHub",
    ///     });
    /// 
    ///     var codepipelineBucket = new Aws.S3.BucketV2("codepipelineBucket");
    /// 
    ///     var assumeRole = Aws.Iam.GetPolicyDocument.Invoke(new()
    ///     {
    ///         Statements = new[]
    ///         {
    ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
    ///             {
    ///                 Effect = "Allow",
    ///                 Principals = new[]
    ///                 {
    ///                     new Aws.Iam.Inputs.GetPolicyDocumentStatementPrincipalInputArgs
    ///                     {
    ///                         Type = "Service",
    ///                         Identifiers = new[]
    ///                         {
    ///                             "codepipeline.amazonaws.com",
    ///                         },
    ///                     },
    ///                 },
    ///                 Actions = new[]
    ///                 {
    ///                     "sts:AssumeRole",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var codepipelineRole = new Aws.Iam.Role("codepipelineRole", new()
    ///     {
    ///         AssumeRolePolicy = assumeRole.Apply(getPolicyDocumentResult =&gt; getPolicyDocumentResult.Json),
    ///     });
    /// 
    ///     var s3kmskey = Aws.Kms.GetAlias.Invoke(new()
    ///     {
    ///         Name = "alias/myKmsKey",
    ///     });
    /// 
    ///     var codepipeline = new Aws.CodePipeline.Pipeline("codepipeline", new()
    ///     {
    ///         RoleArn = codepipelineRole.Arn,
    ///         ArtifactStores = new[]
    ///         {
    ///             new Aws.CodePipeline.Inputs.PipelineArtifactStoreArgs
    ///             {
    ///                 Location = codepipelineBucket.Bucket,
    ///                 Type = "S3",
    ///                 EncryptionKey = new Aws.CodePipeline.Inputs.PipelineArtifactStoreEncryptionKeyArgs
    ///                 {
    ///                     Id = s3kmskey.Apply(getAliasResult =&gt; getAliasResult.Arn),
    ///                     Type = "KMS",
    ///                 },
    ///             },
    ///         },
    ///         Stages = new[]
    ///         {
    ///             new Aws.CodePipeline.Inputs.PipelineStageArgs
    ///             {
    ///                 Name = "Source",
    ///                 Actions = new[]
    ///                 {
    ///                     new Aws.CodePipeline.Inputs.PipelineStageActionArgs
    ///                     {
    ///                         Name = "Source",
    ///                         Category = "Source",
    ///                         Owner = "AWS",
    ///                         Provider = "CodeStarSourceConnection",
    ///                         Version = "1",
    ///                         OutputArtifacts = new[]
    ///                         {
    ///                             "source_output",
    ///                         },
    ///                         Configuration = 
    ///                         {
    ///                             { "ConnectionArn", example.Arn },
    ///                             { "FullRepositoryId", "my-organization/example" },
    ///                             { "BranchName", "main" },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///             new Aws.CodePipeline.Inputs.PipelineStageArgs
    ///             {
    ///                 Name = "Build",
    ///                 Actions = new[]
    ///                 {
    ///                     new Aws.CodePipeline.Inputs.PipelineStageActionArgs
    ///                     {
    ///                         Name = "Build",
    ///                         Category = "Build",
    ///                         Owner = "AWS",
    ///                         Provider = "CodeBuild",
    ///                         InputArtifacts = new[]
    ///                         {
    ///                             "source_output",
    ///                         },
    ///                         OutputArtifacts = new[]
    ///                         {
    ///                             "build_output",
    ///                         },
    ///                         Version = "1",
    ///                         Configuration = 
    ///                         {
    ///                             { "ProjectName", "test" },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///             new Aws.CodePipeline.Inputs.PipelineStageArgs
    ///             {
    ///                 Name = "Deploy",
    ///                 Actions = new[]
    ///                 {
    ///                     new Aws.CodePipeline.Inputs.PipelineStageActionArgs
    ///                     {
    ///                         Name = "Deploy",
    ///                         Category = "Deploy",
    ///                         Owner = "AWS",
    ///                         Provider = "CloudFormation",
    ///                         InputArtifacts = new[]
    ///                         {
    ///                             "build_output",
    ///                         },
    ///                         Version = "1",
    ///                         Configuration = 
    ///                         {
    ///                             { "ActionMode", "REPLACE_ON_FAILURE" },
    ///                             { "Capabilities", "CAPABILITY_AUTO_EXPAND,CAPABILITY_IAM" },
    ///                             { "OutputFileName", "CreateStackOutput.json" },
    ///                             { "StackName", "MyStack" },
    ///                             { "TemplatePath", "build_output::sam-templated.yaml" },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var codepipelineBucketAcl = new Aws.S3.BucketAclV2("codepipelineBucketAcl", new()
    ///     {
    ///         Bucket = codepipelineBucket.Id,
    ///         Acl = "private",
    ///     });
    /// 
    ///     var codepipelinePolicyPolicyDocument = Aws.Iam.GetPolicyDocument.Invoke(new()
    ///     {
    ///         Statements = new[]
    ///         {
    ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
    ///             {
    ///                 Effect = "Allow",
    ///                 Actions = new[]
    ///                 {
    ///                     "s3:GetObject",
    ///                     "s3:GetObjectVersion",
    ///                     "s3:GetBucketVersioning",
    ///                     "s3:PutObjectAcl",
    ///                     "s3:PutObject",
    ///                 },
    ///                 Resources = new[]
    ///                 {
    ///                     codepipelineBucket.Arn,
    ///                     $"{codepipelineBucket.Arn}/*",
    ///                 },
    ///             },
    ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
    ///             {
    ///                 Effect = "Allow",
    ///                 Actions = new[]
    ///                 {
    ///                     "codestar-connections:UseConnection",
    ///                 },
    ///                 Resources = new[]
    ///                 {
    ///                     example.Arn,
    ///                 },
    ///             },
    ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
    ///             {
    ///                 Effect = "Allow",
    ///                 Actions = new[]
    ///                 {
    ///                     "codebuild:BatchGetBuilds",
    ///                     "codebuild:StartBuild",
    ///                 },
    ///                 Resources = new[]
    ///                 {
    ///                     "*",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var codepipelinePolicyRolePolicy = new Aws.Iam.RolePolicy("codepipelinePolicyRolePolicy", new()
    ///     {
    ///         Role = codepipelineRole.Id,
    ///         Policy = codepipelinePolicyPolicyDocument.Apply(getPolicyDocumentResult =&gt; getPolicyDocumentResult.Json),
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// terraform import {
    /// 
    ///  to = aws_codepipeline.foo
    /// 
    ///  id = "example" } Using `pulumi import`, import CodePipelines using the name. For exampleconsole % pulumi import aws_codepipeline.foo example
    /// </summary>
    [AwsResourceType("aws:codepipeline/pipeline:Pipeline")]
    public partial class Pipeline : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The codepipeline ARN.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// One or more artifact_store blocks. Artifact stores are documented below.
        /// </summary>
        [Output("artifactStores")]
        public Output<ImmutableArray<Outputs.PipelineArtifactStore>> ArtifactStores { get; private set; } = null!;

        /// <summary>
        /// The name of the pipeline.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A service role Amazon Resource Name (ARN) that grants AWS CodePipeline permission to make calls to AWS services on your behalf.
        /// </summary>
        [Output("roleArn")]
        public Output<string> RoleArn { get; private set; } = null!;

        /// <summary>
        /// A stage block. Stages are documented below.
        /// </summary>
        [Output("stages")]
        public Output<ImmutableArray<Outputs.PipelineStage>> Stages { get; private set; } = null!;

        /// <summary>
        /// A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;


        /// <summary>
        /// Create a Pipeline resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Pipeline(string name, PipelineArgs args, CustomResourceOptions? options = null)
            : base("aws:codepipeline/pipeline:Pipeline", name, args ?? new PipelineArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Pipeline(string name, Input<string> id, PipelineState? state = null, CustomResourceOptions? options = null)
            : base("aws:codepipeline/pipeline:Pipeline", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Pipeline resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Pipeline Get(string name, Input<string> id, PipelineState? state = null, CustomResourceOptions? options = null)
        {
            return new Pipeline(name, id, state, options);
        }
    }

    public sealed class PipelineArgs : global::Pulumi.ResourceArgs
    {
        [Input("artifactStores", required: true)]
        private InputList<Inputs.PipelineArtifactStoreArgs>? _artifactStores;

        /// <summary>
        /// One or more artifact_store blocks. Artifact stores are documented below.
        /// </summary>
        public InputList<Inputs.PipelineArtifactStoreArgs> ArtifactStores
        {
            get => _artifactStores ?? (_artifactStores = new InputList<Inputs.PipelineArtifactStoreArgs>());
            set => _artifactStores = value;
        }

        /// <summary>
        /// The name of the pipeline.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A service role Amazon Resource Name (ARN) that grants AWS CodePipeline permission to make calls to AWS services on your behalf.
        /// </summary>
        [Input("roleArn", required: true)]
        public Input<string> RoleArn { get; set; } = null!;

        [Input("stages", required: true)]
        private InputList<Inputs.PipelineStageArgs>? _stages;

        /// <summary>
        /// A stage block. Stages are documented below.
        /// </summary>
        public InputList<Inputs.PipelineStageArgs> Stages
        {
            get => _stages ?? (_stages = new InputList<Inputs.PipelineStageArgs>());
            set => _stages = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public PipelineArgs()
        {
        }
        public static new PipelineArgs Empty => new PipelineArgs();
    }

    public sealed class PipelineState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The codepipeline ARN.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        [Input("artifactStores")]
        private InputList<Inputs.PipelineArtifactStoreGetArgs>? _artifactStores;

        /// <summary>
        /// One or more artifact_store blocks. Artifact stores are documented below.
        /// </summary>
        public InputList<Inputs.PipelineArtifactStoreGetArgs> ArtifactStores
        {
            get => _artifactStores ?? (_artifactStores = new InputList<Inputs.PipelineArtifactStoreGetArgs>());
            set => _artifactStores = value;
        }

        /// <summary>
        /// The name of the pipeline.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A service role Amazon Resource Name (ARN) that grants AWS CodePipeline permission to make calls to AWS services on your behalf.
        /// </summary>
        [Input("roleArn")]
        public Input<string>? RoleArn { get; set; }

        [Input("stages")]
        private InputList<Inputs.PipelineStageGetArgs>? _stages;

        /// <summary>
        /// A stage block. Stages are documented below.
        /// </summary>
        public InputList<Inputs.PipelineStageGetArgs> Stages
        {
            get => _stages ?? (_stages = new InputList<Inputs.PipelineStageGetArgs>());
            set => _stages = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        public PipelineState()
        {
        }
        public static new PipelineState Empty => new PipelineState();
    }
}
