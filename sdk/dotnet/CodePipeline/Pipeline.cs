// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.CodePipeline
{
    /// <summary>
    /// Provides a CodePipeline.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var codepipelineBucket = new Aws.S3.Bucket("codepipelineBucket", new Aws.S3.BucketArgs
    ///         {
    ///             Acl = "private",
    ///         });
    ///         var codepipelineRole = new Aws.Iam.Role("codepipelineRole", new Aws.Iam.RoleArgs
    ///         {
    ///             AssumeRolePolicy = @"{
    ///   ""Version"": ""2012-10-17"",
    ///   ""Statement"": [
    ///     {
    ///       ""Effect"": ""Allow"",
    ///       ""Principal"": {
    ///         ""Service"": ""codepipeline.amazonaws.com""
    ///       },
    ///       ""Action"": ""sts:AssumeRole""
    ///     }
    ///   ]
    /// }
    /// ",
    ///         });
    ///         var s3kmskey = Output.Create(Aws.Kms.GetAlias.InvokeAsync(new Aws.Kms.GetAliasArgs
    ///         {
    ///             Name = "alias/myKmsKey",
    ///         }));
    ///         var codepipeline = new Aws.CodePipeline.Pipeline("codepipeline", new Aws.CodePipeline.PipelineArgs
    ///         {
    ///             RoleArn = codepipelineRole.Arn,
    ///             ArtifactStore = new Aws.CodePipeline.Inputs.PipelineArtifactStoreArgs
    ///             {
    ///                 Location = codepipelineBucket.BucketName,
    ///                 Type = "S3",
    ///                 EncryptionKey = new Aws.CodePipeline.Inputs.PipelineArtifactStoreEncryptionKeyArgs
    ///                 {
    ///                     Id = s3kmskey.Apply(s3kmskey =&gt; s3kmskey.Arn),
    ///                     Type = "KMS",
    ///                 },
    ///             },
    ///             Stages = 
    ///             {
    ///                 new Aws.CodePipeline.Inputs.PipelineStageArgs
    ///                 {
    ///                     Name = "Source",
    ///                     Actions = 
    ///                     {
    ///                         new Aws.CodePipeline.Inputs.PipelineStageActionArgs
    ///                         {
    ///                             Name = "Source",
    ///                             Category = "Source",
    ///                             Owner = "ThirdParty",
    ///                             Provider = "GitHub",
    ///                             Version = "1",
    ///                             OutputArtifacts = 
    ///                             {
    ///                                 "source_output",
    ///                             },
    ///                             Configuration = 
    ///                             {
    ///                                 { "Owner", "my-organization" },
    ///                                 { "Repo", "test" },
    ///                                 { "Branch", "master" },
    ///                                 { "OAuthToken", @var.Github_token },
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///                 new Aws.CodePipeline.Inputs.PipelineStageArgs
    ///                 {
    ///                     Name = "Build",
    ///                     Actions = 
    ///                     {
    ///                         new Aws.CodePipeline.Inputs.PipelineStageActionArgs
    ///                         {
    ///                             Name = "Build",
    ///                             Category = "Build",
    ///                             Owner = "AWS",
    ///                             Provider = "CodeBuild",
    ///                             InputArtifacts = 
    ///                             {
    ///                                 "source_output",
    ///                             },
    ///                             OutputArtifacts = 
    ///                             {
    ///                                 "build_output",
    ///                             },
    ///                             Version = "1",
    ///                             Configuration = 
    ///                             {
    ///                                 { "ProjectName", "test" },
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///                 new Aws.CodePipeline.Inputs.PipelineStageArgs
    ///                 {
    ///                     Name = "Deploy",
    ///                     Actions = 
    ///                     {
    ///                         new Aws.CodePipeline.Inputs.PipelineStageActionArgs
    ///                         {
    ///                             Name = "Deploy",
    ///                             Category = "Deploy",
    ///                             Owner = "AWS",
    ///                             Provider = "CloudFormation",
    ///                             InputArtifacts = 
    ///                             {
    ///                                 "build_output",
    ///                             },
    ///                             Version = "1",
    ///                             Configuration = 
    ///                             {
    ///                                 { "ActionMode", "REPLACE_ON_FAILURE" },
    ///                                 { "Capabilities", "CAPABILITY_AUTO_EXPAND,CAPABILITY_IAM" },
    ///                                 { "OutputFileName", "CreateStackOutput.json" },
    ///                                 { "StackName", "MyStack" },
    ///                                 { "TemplatePath", "build_output::sam-templated.yaml" },
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         });
    ///         var codepipelinePolicy = new Aws.Iam.RolePolicy("codepipelinePolicy", new Aws.Iam.RolePolicyArgs
    ///         {
    ///             Role = codepipelineRole.Id,
    ///             Policy = Output.Tuple(codepipelineBucket.Arn, codepipelineBucket.Arn).Apply(values =&gt;
    ///             {
    ///                 var codepipelineBucketArn = values.Item1;
    ///                 var codepipelineBucketArn1 = values.Item2;
    ///                 return @$"{{
    ///   ""Version"": ""2012-10-17"",
    ///   ""Statement"": [
    ///     {{
    ///       ""Effect"":""Allow"",
    ///       ""Action"": [
    ///         ""s3:GetObject"",
    ///         ""s3:GetObjectVersion"",
    ///         ""s3:GetBucketVersioning"",
    ///         ""s3:PutObject""
    ///       ],
    ///       ""Resource"": [
    ///         ""{codepipelineBucketArn}"",
    ///         ""{codepipelineBucketArn1}/*""
    ///       ]
    ///     }},
    ///     {{
    ///       ""Effect"": ""Allow"",
    ///       ""Action"": [
    ///         ""codebuild:BatchGetBuilds"",
    ///         ""codebuild:StartBuild""
    ///       ],
    ///       ""Resource"": ""*""
    ///     }}
    ///   ]
    /// }}
    /// ";
    ///             }),
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// CodePipelines can be imported using the name, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import aws:codepipeline/pipeline:Pipeline foo example
    /// ```
    /// </summary>
    public partial class Pipeline : Pulumi.CustomResource
    {
        /// <summary>
        /// The codepipeline ARN.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// One or more artifact_store blocks. Artifact stores are documented below.
        /// </summary>
        [Output("artifactStore")]
        public Output<Outputs.PipelineArtifactStore> ArtifactStore { get; private set; } = null!;

        /// <summary>
        /// The name of the pipeline.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A service role Amazon Resource Name (ARN) that grants AWS CodePipeline permission to make calls to AWS services on your behalf.
        /// </summary>
        [Output("roleArn")]
        public Output<string> RoleArn { get; private set; } = null!;

        /// <summary>
        /// A stage block. Stages are documented below.
        /// </summary>
        [Output("stages")]
        public Output<ImmutableArray<Outputs.PipelineStage>> Stages { get; private set; } = null!;

        /// <summary>
        /// A map of tags to assign to the resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a Pipeline resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Pipeline(string name, PipelineArgs args, CustomResourceOptions? options = null)
            : base("aws:codepipeline/pipeline:Pipeline", name, args ?? new PipelineArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Pipeline(string name, Input<string> id, PipelineState? state = null, CustomResourceOptions? options = null)
            : base("aws:codepipeline/pipeline:Pipeline", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Pipeline resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Pipeline Get(string name, Input<string> id, PipelineState? state = null, CustomResourceOptions? options = null)
        {
            return new Pipeline(name, id, state, options);
        }
    }

    public sealed class PipelineArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// One or more artifact_store blocks. Artifact stores are documented below.
        /// </summary>
        [Input("artifactStore", required: true)]
        public Input<Inputs.PipelineArtifactStoreArgs> ArtifactStore { get; set; } = null!;

        /// <summary>
        /// The name of the pipeline.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A service role Amazon Resource Name (ARN) that grants AWS CodePipeline permission to make calls to AWS services on your behalf.
        /// </summary>
        [Input("roleArn", required: true)]
        public Input<string> RoleArn { get; set; } = null!;

        [Input("stages", required: true)]
        private InputList<Inputs.PipelineStageArgs>? _stages;

        /// <summary>
        /// A stage block. Stages are documented below.
        /// </summary>
        public InputList<Inputs.PipelineStageArgs> Stages
        {
            get => _stages ?? (_stages = new InputList<Inputs.PipelineStageArgs>());
            set => _stages = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A map of tags to assign to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public PipelineArgs()
        {
        }
    }

    public sealed class PipelineState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The codepipeline ARN.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// One or more artifact_store blocks. Artifact stores are documented below.
        /// </summary>
        [Input("artifactStore")]
        public Input<Inputs.PipelineArtifactStoreGetArgs>? ArtifactStore { get; set; }

        /// <summary>
        /// The name of the pipeline.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A service role Amazon Resource Name (ARN) that grants AWS CodePipeline permission to make calls to AWS services on your behalf.
        /// </summary>
        [Input("roleArn")]
        public Input<string>? RoleArn { get; set; }

        [Input("stages")]
        private InputList<Inputs.PipelineStageGetArgs>? _stages;

        /// <summary>
        /// A stage block. Stages are documented below.
        /// </summary>
        public InputList<Inputs.PipelineStageGetArgs> Stages
        {
            get => _stages ?? (_stages = new InputList<Inputs.PipelineStageGetArgs>());
            set => _stages = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A map of tags to assign to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public PipelineState()
        {
        }
    }
}
