// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.StorageGateway
{
    [AwsResourceType("aws:storagegateway/fileSystemAssociation:FileSystemAssociation")]
    public partial class FileSystemAssociation : global::Pulumi.CustomResource
    {
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        [Output("auditDestinationArn")]
        public Output<string?> AuditDestinationArn { get; private set; } = null!;

        [Output("cacheAttributes")]
        public Output<Outputs.FileSystemAssociationCacheAttributes?> CacheAttributes { get; private set; } = null!;

        [Output("gatewayArn")]
        public Output<string> GatewayArn { get; private set; } = null!;

        [Output("locationArn")]
        public Output<string> LocationArn { get; private set; } = null!;

        [Output("password")]
        public Output<string> Password { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;

        [Output("username")]
        public Output<string> Username { get; private set; } = null!;


        /// <summary>
        /// Create a FileSystemAssociation resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public FileSystemAssociation(string name, FileSystemAssociationArgs args, CustomResourceOptions? options = null)
            : base("aws:storagegateway/fileSystemAssociation:FileSystemAssociation", name, args ?? new FileSystemAssociationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private FileSystemAssociation(string name, Input<string> id, FileSystemAssociationState? state = null, CustomResourceOptions? options = null)
            : base("aws:storagegateway/fileSystemAssociation:FileSystemAssociation", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "password",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing FileSystemAssociation resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static FileSystemAssociation Get(string name, Input<string> id, FileSystemAssociationState? state = null, CustomResourceOptions? options = null)
        {
            return new FileSystemAssociation(name, id, state, options);
        }
    }

    public sealed class FileSystemAssociationArgs : global::Pulumi.ResourceArgs
    {
        [Input("auditDestinationArn")]
        public Input<string>? AuditDestinationArn { get; set; }

        [Input("cacheAttributes")]
        public Input<Inputs.FileSystemAssociationCacheAttributesArgs>? CacheAttributes { get; set; }

        [Input("gatewayArn", required: true)]
        public Input<string> GatewayArn { get; set; } = null!;

        [Input("locationArn", required: true)]
        public Input<string> LocationArn { get; set; } = null!;

        [Input("password", required: true)]
        private Input<string>? _password;
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("username", required: true)]
        public Input<string> Username { get; set; } = null!;

        public FileSystemAssociationArgs()
        {
        }
        public static new FileSystemAssociationArgs Empty => new FileSystemAssociationArgs();
    }

    public sealed class FileSystemAssociationState : global::Pulumi.ResourceArgs
    {
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        [Input("auditDestinationArn")]
        public Input<string>? AuditDestinationArn { get; set; }

        [Input("cacheAttributes")]
        public Input<Inputs.FileSystemAssociationCacheAttributesGetArgs>? CacheAttributes { get; set; }

        [Input("gatewayArn")]
        public Input<string>? GatewayArn { get; set; }

        [Input("locationArn")]
        public Input<string>? LocationArn { get; set; }

        [Input("password")]
        private Input<string>? _password;
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        [Input("username")]
        public Input<string>? Username { get; set; }

        public FileSystemAssociationState()
        {
        }
        public static new FileSystemAssociationState Empty => new FileSystemAssociationState();
    }
}
