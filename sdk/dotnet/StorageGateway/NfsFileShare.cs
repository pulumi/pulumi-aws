// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.StorageGateway
{
    [AwsResourceType("aws:storagegateway/nfsFileShare:NfsFileShare")]
    public partial class NfsFileShare : global::Pulumi.CustomResource
    {
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        [Output("auditDestinationArn")]
        public Output<string?> AuditDestinationArn { get; private set; } = null!;

        [Output("bucketRegion")]
        public Output<string?> BucketRegion { get; private set; } = null!;

        [Output("cacheAttributes")]
        public Output<Outputs.NfsFileShareCacheAttributes?> CacheAttributes { get; private set; } = null!;

        [Output("clientLists")]
        public Output<ImmutableArray<string>> ClientLists { get; private set; } = null!;

        [Output("defaultStorageClass")]
        public Output<string?> DefaultStorageClass { get; private set; } = null!;

        [Output("fileShareName")]
        public Output<string> FileShareName { get; private set; } = null!;

        [Output("fileshareId")]
        public Output<string> FileshareId { get; private set; } = null!;

        [Output("gatewayArn")]
        public Output<string> GatewayArn { get; private set; } = null!;

        [Output("guessMimeTypeEnabled")]
        public Output<bool?> GuessMimeTypeEnabled { get; private set; } = null!;

        [Output("kmsEncrypted")]
        public Output<bool?> KmsEncrypted { get; private set; } = null!;

        [Output("kmsKeyArn")]
        public Output<string?> KmsKeyArn { get; private set; } = null!;

        [Output("locationArn")]
        public Output<string> LocationArn { get; private set; } = null!;

        [Output("nfsFileShareDefaults")]
        public Output<Outputs.NfsFileShareNfsFileShareDefaults?> NfsFileShareDefaults { get; private set; } = null!;

        [Output("notificationPolicy")]
        public Output<string?> NotificationPolicy { get; private set; } = null!;

        [Output("objectAcl")]
        public Output<string?> ObjectAcl { get; private set; } = null!;

        [Output("path")]
        public Output<string> Path { get; private set; } = null!;

        [Output("readOnly")]
        public Output<bool?> ReadOnly { get; private set; } = null!;

        [Output("requesterPays")]
        public Output<bool?> RequesterPays { get; private set; } = null!;

        [Output("roleArn")]
        public Output<string> RoleArn { get; private set; } = null!;

        [Output("squash")]
        public Output<string?> Squash { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;

        [Output("vpcEndpointDnsName")]
        public Output<string?> VpcEndpointDnsName { get; private set; } = null!;


        /// <summary>
        /// Create a NfsFileShare resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NfsFileShare(string name, NfsFileShareArgs args, CustomResourceOptions? options = null)
            : base("aws:storagegateway/nfsFileShare:NfsFileShare", name, args ?? new NfsFileShareArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NfsFileShare(string name, Input<string> id, NfsFileShareState? state = null, CustomResourceOptions? options = null)
            : base("aws:storagegateway/nfsFileShare:NfsFileShare", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NfsFileShare resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NfsFileShare Get(string name, Input<string> id, NfsFileShareState? state = null, CustomResourceOptions? options = null)
        {
            return new NfsFileShare(name, id, state, options);
        }
    }

    public sealed class NfsFileShareArgs : global::Pulumi.ResourceArgs
    {
        [Input("auditDestinationArn")]
        public Input<string>? AuditDestinationArn { get; set; }

        [Input("bucketRegion")]
        public Input<string>? BucketRegion { get; set; }

        [Input("cacheAttributes")]
        public Input<Inputs.NfsFileShareCacheAttributesArgs>? CacheAttributes { get; set; }

        [Input("clientLists", required: true)]
        private InputList<string>? _clientLists;
        public InputList<string> ClientLists
        {
            get => _clientLists ?? (_clientLists = new InputList<string>());
            set => _clientLists = value;
        }

        [Input("defaultStorageClass")]
        public Input<string>? DefaultStorageClass { get; set; }

        [Input("fileShareName")]
        public Input<string>? FileShareName { get; set; }

        [Input("gatewayArn", required: true)]
        public Input<string> GatewayArn { get; set; } = null!;

        [Input("guessMimeTypeEnabled")]
        public Input<bool>? GuessMimeTypeEnabled { get; set; }

        [Input("kmsEncrypted")]
        public Input<bool>? KmsEncrypted { get; set; }

        [Input("kmsKeyArn")]
        public Input<string>? KmsKeyArn { get; set; }

        [Input("locationArn", required: true)]
        public Input<string> LocationArn { get; set; } = null!;

        [Input("nfsFileShareDefaults")]
        public Input<Inputs.NfsFileShareNfsFileShareDefaultsArgs>? NfsFileShareDefaults { get; set; }

        [Input("notificationPolicy")]
        public Input<string>? NotificationPolicy { get; set; }

        [Input("objectAcl")]
        public Input<string>? ObjectAcl { get; set; }

        [Input("readOnly")]
        public Input<bool>? ReadOnly { get; set; }

        [Input("requesterPays")]
        public Input<bool>? RequesterPays { get; set; }

        [Input("roleArn", required: true)]
        public Input<string> RoleArn { get; set; } = null!;

        [Input("squash")]
        public Input<string>? Squash { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("vpcEndpointDnsName")]
        public Input<string>? VpcEndpointDnsName { get; set; }

        public NfsFileShareArgs()
        {
        }
        public static new NfsFileShareArgs Empty => new NfsFileShareArgs();
    }

    public sealed class NfsFileShareState : global::Pulumi.ResourceArgs
    {
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        [Input("auditDestinationArn")]
        public Input<string>? AuditDestinationArn { get; set; }

        [Input("bucketRegion")]
        public Input<string>? BucketRegion { get; set; }

        [Input("cacheAttributes")]
        public Input<Inputs.NfsFileShareCacheAttributesGetArgs>? CacheAttributes { get; set; }

        [Input("clientLists")]
        private InputList<string>? _clientLists;
        public InputList<string> ClientLists
        {
            get => _clientLists ?? (_clientLists = new InputList<string>());
            set => _clientLists = value;
        }

        [Input("defaultStorageClass")]
        public Input<string>? DefaultStorageClass { get; set; }

        [Input("fileShareName")]
        public Input<string>? FileShareName { get; set; }

        [Input("fileshareId")]
        public Input<string>? FileshareId { get; set; }

        [Input("gatewayArn")]
        public Input<string>? GatewayArn { get; set; }

        [Input("guessMimeTypeEnabled")]
        public Input<bool>? GuessMimeTypeEnabled { get; set; }

        [Input("kmsEncrypted")]
        public Input<bool>? KmsEncrypted { get; set; }

        [Input("kmsKeyArn")]
        public Input<string>? KmsKeyArn { get; set; }

        [Input("locationArn")]
        public Input<string>? LocationArn { get; set; }

        [Input("nfsFileShareDefaults")]
        public Input<Inputs.NfsFileShareNfsFileShareDefaultsGetArgs>? NfsFileShareDefaults { get; set; }

        [Input("notificationPolicy")]
        public Input<string>? NotificationPolicy { get; set; }

        [Input("objectAcl")]
        public Input<string>? ObjectAcl { get; set; }

        [Input("path")]
        public Input<string>? Path { get; set; }

        [Input("readOnly")]
        public Input<bool>? ReadOnly { get; set; }

        [Input("requesterPays")]
        public Input<bool>? RequesterPays { get; set; }

        [Input("roleArn")]
        public Input<string>? RoleArn { get; set; }

        [Input("squash")]
        public Input<string>? Squash { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        [Input("vpcEndpointDnsName")]
        public Input<string>? VpcEndpointDnsName { get; set; }

        public NfsFileShareState()
        {
        }
        public static new NfsFileShareState Empty => new NfsFileShareState();
    }
}
