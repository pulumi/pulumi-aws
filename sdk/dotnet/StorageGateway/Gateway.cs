// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.StorageGateway
{
    [AwsResourceType("aws:storagegateway/gateway:Gateway")]
    public partial class Gateway : global::Pulumi.CustomResource
    {
        [Output("activationKey")]
        public Output<string> ActivationKey { get; private set; } = null!;

        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        [Output("averageDownloadRateLimitInBitsPerSec")]
        public Output<int?> AverageDownloadRateLimitInBitsPerSec { get; private set; } = null!;

        [Output("averageUploadRateLimitInBitsPerSec")]
        public Output<int?> AverageUploadRateLimitInBitsPerSec { get; private set; } = null!;

        [Output("cloudwatchLogGroupArn")]
        public Output<string?> CloudwatchLogGroupArn { get; private set; } = null!;

        [Output("ec2InstanceId")]
        public Output<string> Ec2InstanceId { get; private set; } = null!;

        [Output("endpointType")]
        public Output<string> EndpointType { get; private set; } = null!;

        [Output("gatewayId")]
        public Output<string> GatewayId { get; private set; } = null!;

        [Output("gatewayIpAddress")]
        public Output<string> GatewayIpAddress { get; private set; } = null!;

        [Output("gatewayName")]
        public Output<string> GatewayName { get; private set; } = null!;

        [Output("gatewayNetworkInterfaces")]
        public Output<ImmutableArray<Outputs.GatewayGatewayNetworkInterface>> GatewayNetworkInterfaces { get; private set; } = null!;

        [Output("gatewayTimezone")]
        public Output<string> GatewayTimezone { get; private set; } = null!;

        [Output("gatewayType")]
        public Output<string?> GatewayType { get; private set; } = null!;

        [Output("gatewayVpcEndpoint")]
        public Output<string?> GatewayVpcEndpoint { get; private set; } = null!;

        [Output("hostEnvironment")]
        public Output<string> HostEnvironment { get; private set; } = null!;

        [Output("maintenanceStartTime")]
        public Output<Outputs.GatewayMaintenanceStartTime> MaintenanceStartTime { get; private set; } = null!;

        [Output("mediumChangerType")]
        public Output<string?> MediumChangerType { get; private set; } = null!;

        [Output("smbActiveDirectorySettings")]
        public Output<Outputs.GatewaySmbActiveDirectorySettings?> SmbActiveDirectorySettings { get; private set; } = null!;

        [Output("smbFileShareVisibility")]
        public Output<bool?> SmbFileShareVisibility { get; private set; } = null!;

        [Output("smbGuestPassword")]
        public Output<string?> SmbGuestPassword { get; private set; } = null!;

        [Output("smbSecurityStrategy")]
        public Output<string> SmbSecurityStrategy { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;

        [Output("tapeDriveType")]
        public Output<string?> TapeDriveType { get; private set; } = null!;


        /// <summary>
        /// Create a Gateway resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Gateway(string name, GatewayArgs args, CustomResourceOptions? options = null)
            : base("aws:storagegateway/gateway:Gateway", name, args ?? new GatewayArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Gateway(string name, Input<string> id, GatewayState? state = null, CustomResourceOptions? options = null)
            : base("aws:storagegateway/gateway:Gateway", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "smbGuestPassword",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Gateway resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Gateway Get(string name, Input<string> id, GatewayState? state = null, CustomResourceOptions? options = null)
        {
            return new Gateway(name, id, state, options);
        }
    }

    public sealed class GatewayArgs : global::Pulumi.ResourceArgs
    {
        [Input("activationKey")]
        public Input<string>? ActivationKey { get; set; }

        [Input("averageDownloadRateLimitInBitsPerSec")]
        public Input<int>? AverageDownloadRateLimitInBitsPerSec { get; set; }

        [Input("averageUploadRateLimitInBitsPerSec")]
        public Input<int>? AverageUploadRateLimitInBitsPerSec { get; set; }

        [Input("cloudwatchLogGroupArn")]
        public Input<string>? CloudwatchLogGroupArn { get; set; }

        [Input("gatewayIpAddress")]
        public Input<string>? GatewayIpAddress { get; set; }

        [Input("gatewayName", required: true)]
        public Input<string> GatewayName { get; set; } = null!;

        [Input("gatewayTimezone", required: true)]
        public Input<string> GatewayTimezone { get; set; } = null!;

        [Input("gatewayType")]
        public Input<string>? GatewayType { get; set; }

        [Input("gatewayVpcEndpoint")]
        public Input<string>? GatewayVpcEndpoint { get; set; }

        [Input("maintenanceStartTime")]
        public Input<Inputs.GatewayMaintenanceStartTimeArgs>? MaintenanceStartTime { get; set; }

        [Input("mediumChangerType")]
        public Input<string>? MediumChangerType { get; set; }

        [Input("smbActiveDirectorySettings")]
        public Input<Inputs.GatewaySmbActiveDirectorySettingsArgs>? SmbActiveDirectorySettings { get; set; }

        [Input("smbFileShareVisibility")]
        public Input<bool>? SmbFileShareVisibility { get; set; }

        [Input("smbGuestPassword")]
        private Input<string>? _smbGuestPassword;
        public Input<string>? SmbGuestPassword
        {
            get => _smbGuestPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _smbGuestPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("smbSecurityStrategy")]
        public Input<string>? SmbSecurityStrategy { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tapeDriveType")]
        public Input<string>? TapeDriveType { get; set; }

        public GatewayArgs()
        {
        }
        public static new GatewayArgs Empty => new GatewayArgs();
    }

    public sealed class GatewayState : global::Pulumi.ResourceArgs
    {
        [Input("activationKey")]
        public Input<string>? ActivationKey { get; set; }

        [Input("arn")]
        public Input<string>? Arn { get; set; }

        [Input("averageDownloadRateLimitInBitsPerSec")]
        public Input<int>? AverageDownloadRateLimitInBitsPerSec { get; set; }

        [Input("averageUploadRateLimitInBitsPerSec")]
        public Input<int>? AverageUploadRateLimitInBitsPerSec { get; set; }

        [Input("cloudwatchLogGroupArn")]
        public Input<string>? CloudwatchLogGroupArn { get; set; }

        [Input("ec2InstanceId")]
        public Input<string>? Ec2InstanceId { get; set; }

        [Input("endpointType")]
        public Input<string>? EndpointType { get; set; }

        [Input("gatewayId")]
        public Input<string>? GatewayId { get; set; }

        [Input("gatewayIpAddress")]
        public Input<string>? GatewayIpAddress { get; set; }

        [Input("gatewayName")]
        public Input<string>? GatewayName { get; set; }

        [Input("gatewayNetworkInterfaces")]
        private InputList<Inputs.GatewayGatewayNetworkInterfaceGetArgs>? _gatewayNetworkInterfaces;
        public InputList<Inputs.GatewayGatewayNetworkInterfaceGetArgs> GatewayNetworkInterfaces
        {
            get => _gatewayNetworkInterfaces ?? (_gatewayNetworkInterfaces = new InputList<Inputs.GatewayGatewayNetworkInterfaceGetArgs>());
            set => _gatewayNetworkInterfaces = value;
        }

        [Input("gatewayTimezone")]
        public Input<string>? GatewayTimezone { get; set; }

        [Input("gatewayType")]
        public Input<string>? GatewayType { get; set; }

        [Input("gatewayVpcEndpoint")]
        public Input<string>? GatewayVpcEndpoint { get; set; }

        [Input("hostEnvironment")]
        public Input<string>? HostEnvironment { get; set; }

        [Input("maintenanceStartTime")]
        public Input<Inputs.GatewayMaintenanceStartTimeGetArgs>? MaintenanceStartTime { get; set; }

        [Input("mediumChangerType")]
        public Input<string>? MediumChangerType { get; set; }

        [Input("smbActiveDirectorySettings")]
        public Input<Inputs.GatewaySmbActiveDirectorySettingsGetArgs>? SmbActiveDirectorySettings { get; set; }

        [Input("smbFileShareVisibility")]
        public Input<bool>? SmbFileShareVisibility { get; set; }

        [Input("smbGuestPassword")]
        private Input<string>? _smbGuestPassword;
        public Input<string>? SmbGuestPassword
        {
            get => _smbGuestPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _smbGuestPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("smbSecurityStrategy")]
        public Input<string>? SmbSecurityStrategy { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        [Input("tapeDriveType")]
        public Input<string>? TapeDriveType { get; set; }

        public GatewayState()
        {
        }
        public static new GatewayState Empty => new GatewayState();
    }
}
