// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Amp
{
    /// <summary>
    /// Manages an Amazon Managed Service for Prometheus (AMP) Query Logging Configuration.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.Amp.Workspace("example", new()
    ///     {
    ///         Alias = "example",
    ///     });
    /// 
    ///     var exampleLogGroup = new Aws.CloudWatch.LogGroup("example", new()
    ///     {
    ///         Name = "/aws/prometheus/query-logs/example",
    ///     });
    /// 
    ///     var exampleQueryLoggingConfiguration = new Aws.Amp.QueryLoggingConfiguration("example", new()
    ///     {
    ///         WorkspaceId = example.Id,
    ///         Destinations = new[]
    ///         {
    ///             new Aws.Amp.Inputs.QueryLoggingConfigurationDestinationArgs
    ///             {
    ///                 CloudwatchLogs = new Aws.Amp.Inputs.QueryLoggingConfigurationDestinationCloudwatchLogsArgs
    ///                 {
    ///                     LogGroupArn = exampleLogGroup.Arn.Apply(arn =&gt; $"{arn}:*"),
    ///                 },
    ///                 Filters = new Aws.Amp.Inputs.QueryLoggingConfigurationDestinationFiltersArgs
    ///                 {
    ///                     QspThreshold = 1000,
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [AwsResourceType("aws:amp/queryLoggingConfiguration:QueryLoggingConfiguration")]
    public partial class QueryLoggingConfiguration : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Configuration block for the logging destinations. See `Destinations`.
        /// </summary>
        [Output("destinations")]
        public Output<ImmutableArray<Outputs.QueryLoggingConfigurationDestination>> Destinations { get; private set; } = null!;

        /// <summary>
        /// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        [Output("timeouts")]
        public Output<Outputs.QueryLoggingConfigurationTimeouts?> Timeouts { get; private set; } = null!;

        /// <summary>
        /// The ID of the AMP workspace for which to configure query logging.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Output("workspaceId")]
        public Output<string> WorkspaceId { get; private set; } = null!;


        /// <summary>
        /// Create a QueryLoggingConfiguration resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public QueryLoggingConfiguration(string name, QueryLoggingConfigurationArgs args, CustomResourceOptions? options = null)
            : base("aws:amp/queryLoggingConfiguration:QueryLoggingConfiguration", name, args ?? new QueryLoggingConfigurationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private QueryLoggingConfiguration(string name, Input<string> id, QueryLoggingConfigurationState? state = null, CustomResourceOptions? options = null)
            : base("aws:amp/queryLoggingConfiguration:QueryLoggingConfiguration", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing QueryLoggingConfiguration resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static QueryLoggingConfiguration Get(string name, Input<string> id, QueryLoggingConfigurationState? state = null, CustomResourceOptions? options = null)
        {
            return new QueryLoggingConfiguration(name, id, state, options);
        }
    }

    public sealed class QueryLoggingConfigurationArgs : global::Pulumi.ResourceArgs
    {
        [Input("destinations")]
        private InputList<Inputs.QueryLoggingConfigurationDestinationArgs>? _destinations;

        /// <summary>
        /// Configuration block for the logging destinations. See `Destinations`.
        /// </summary>
        public InputList<Inputs.QueryLoggingConfigurationDestinationArgs> Destinations
        {
            get => _destinations ?? (_destinations = new InputList<Inputs.QueryLoggingConfigurationDestinationArgs>());
            set => _destinations = value;
        }

        /// <summary>
        /// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("timeouts")]
        public Input<Inputs.QueryLoggingConfigurationTimeoutsArgs>? Timeouts { get; set; }

        /// <summary>
        /// The ID of the AMP workspace for which to configure query logging.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("workspaceId", required: true)]
        public Input<string> WorkspaceId { get; set; } = null!;

        public QueryLoggingConfigurationArgs()
        {
        }
        public static new QueryLoggingConfigurationArgs Empty => new QueryLoggingConfigurationArgs();
    }

    public sealed class QueryLoggingConfigurationState : global::Pulumi.ResourceArgs
    {
        [Input("destinations")]
        private InputList<Inputs.QueryLoggingConfigurationDestinationGetArgs>? _destinations;

        /// <summary>
        /// Configuration block for the logging destinations. See `Destinations`.
        /// </summary>
        public InputList<Inputs.QueryLoggingConfigurationDestinationGetArgs> Destinations
        {
            get => _destinations ?? (_destinations = new InputList<Inputs.QueryLoggingConfigurationDestinationGetArgs>());
            set => _destinations = value;
        }

        /// <summary>
        /// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("timeouts")]
        public Input<Inputs.QueryLoggingConfigurationTimeoutsGetArgs>? Timeouts { get; set; }

        /// <summary>
        /// The ID of the AMP workspace for which to configure query logging.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("workspaceId")]
        public Input<string>? WorkspaceId { get; set; }

        public QueryLoggingConfigurationState()
        {
        }
        public static new QueryLoggingConfigurationState Empty => new QueryLoggingConfigurationState();
    }
}
