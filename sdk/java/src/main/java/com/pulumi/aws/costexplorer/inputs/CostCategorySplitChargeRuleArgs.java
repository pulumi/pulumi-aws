// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.costexplorer.inputs;

import com.pulumi.aws.costexplorer.inputs.CostCategorySplitChargeRuleParameterArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CostCategorySplitChargeRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final CostCategorySplitChargeRuleArgs Empty = new CostCategorySplitChargeRuleArgs();

    @Import(name="method", required=true)
    private Output<String> method;

    public Output<String> method() {
        return this.method;
    }

    @Import(name="parameters")
    private @Nullable Output<List<CostCategorySplitChargeRuleParameterArgs>> parameters;

    public Optional<Output<List<CostCategorySplitChargeRuleParameterArgs>>> parameters() {
        return Optional.ofNullable(this.parameters);
    }

    @Import(name="source", required=true)
    private Output<String> source;

    public Output<String> source() {
        return this.source;
    }

    @Import(name="targets", required=true)
    private Output<List<String>> targets;

    public Output<List<String>> targets() {
        return this.targets;
    }

    private CostCategorySplitChargeRuleArgs() {}

    private CostCategorySplitChargeRuleArgs(CostCategorySplitChargeRuleArgs $) {
        this.method = $.method;
        this.parameters = $.parameters;
        this.source = $.source;
        this.targets = $.targets;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CostCategorySplitChargeRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CostCategorySplitChargeRuleArgs $;

        public Builder() {
            $ = new CostCategorySplitChargeRuleArgs();
        }

        public Builder(CostCategorySplitChargeRuleArgs defaults) {
            $ = new CostCategorySplitChargeRuleArgs(Objects.requireNonNull(defaults));
        }

        public Builder method(Output<String> method) {
            $.method = method;
            return this;
        }

        public Builder method(String method) {
            return method(Output.of(method));
        }

        public Builder parameters(@Nullable Output<List<CostCategorySplitChargeRuleParameterArgs>> parameters) {
            $.parameters = parameters;
            return this;
        }

        public Builder parameters(List<CostCategorySplitChargeRuleParameterArgs> parameters) {
            return parameters(Output.of(parameters));
        }

        public Builder parameters(CostCategorySplitChargeRuleParameterArgs... parameters) {
            return parameters(List.of(parameters));
        }

        public Builder source(Output<String> source) {
            $.source = source;
            return this;
        }

        public Builder source(String source) {
            return source(Output.of(source));
        }

        public Builder targets(Output<List<String>> targets) {
            $.targets = targets;
            return this;
        }

        public Builder targets(List<String> targets) {
            return targets(Output.of(targets));
        }

        public Builder targets(String... targets) {
            return targets(List.of(targets));
        }

        public CostCategorySplitChargeRuleArgs build() {
            $.method = Objects.requireNonNull($.method, "expected parameter 'method' to be non-null");
            $.source = Objects.requireNonNull($.source, "expected parameter 'source' to be non-null");
            $.targets = Objects.requireNonNull($.targets, "expected parameter 'targets' to be non-null");
            return $;
        }
    }

}
