// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.networkmanager.inputs;

import com.pulumi.aws.networkmanager.inputs.GetCoreNetworkPolicyDocumentAttachmentPolicyArgs;
import com.pulumi.aws.networkmanager.inputs.GetCoreNetworkPolicyDocumentCoreNetworkConfigurationArgs;
import com.pulumi.aws.networkmanager.inputs.GetCoreNetworkPolicyDocumentSegmentActionArgs;
import com.pulumi.aws.networkmanager.inputs.GetCoreNetworkPolicyDocumentSegmentArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetCoreNetworkPolicyDocumentArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetCoreNetworkPolicyDocumentArgs Empty = new GetCoreNetworkPolicyDocumentArgs();

    /**
     * In a core network, all attachments use the block argument `attachment_policies` section to map an attachment to a segment. Instead of manually associating a segment to each attachment, attachments use tags, and then the tags are used to associate the attachment to the specified segment. Detailed below.
     * 
     */
    @Import(name="attachmentPolicies")
    private @Nullable Output<List<GetCoreNetworkPolicyDocumentAttachmentPolicyArgs>> attachmentPolicies;

    /**
     * @return In a core network, all attachments use the block argument `attachment_policies` section to map an attachment to a segment. Instead of manually associating a segment to each attachment, attachments use tags, and then the tags are used to associate the attachment to the specified segment. Detailed below.
     * 
     */
    public Optional<Output<List<GetCoreNetworkPolicyDocumentAttachmentPolicyArgs>>> attachmentPolicies() {
        return Optional.ofNullable(this.attachmentPolicies);
    }

    /**
     * The core network configuration section defines the Regions where a core network should operate. For AWS Regions that are defined in the policy, the core network creates a Core Network Edge where you can connect attachments. After it&#39;s created, each Core Network Edge is peered with every other defined Region and is configured with consistent segment and routing across all Regions. Regions cannot be removed until the associated attachments are deleted. Detailed below.
     * 
     */
    @Import(name="coreNetworkConfigurations", required=true)
    private Output<List<GetCoreNetworkPolicyDocumentCoreNetworkConfigurationArgs>> coreNetworkConfigurations;

    /**
     * @return The core network configuration section defines the Regions where a core network should operate. For AWS Regions that are defined in the policy, the core network creates a Core Network Edge where you can connect attachments. After it&#39;s created, each Core Network Edge is peered with every other defined Region and is configured with consistent segment and routing across all Regions. Regions cannot be removed until the associated attachments are deleted. Detailed below.
     * 
     */
    public Output<List<GetCoreNetworkPolicyDocumentCoreNetworkConfigurationArgs>> coreNetworkConfigurations() {
        return this.coreNetworkConfigurations;
    }

    /**
     * A block argument, `segment_actions` define how routing works between segments. By default, attachments can only communicate with other attachments in the same segment. Detailed below.
     * 
     */
    @Import(name="segmentActions")
    private @Nullable Output<List<GetCoreNetworkPolicyDocumentSegmentActionArgs>> segmentActions;

    /**
     * @return A block argument, `segment_actions` define how routing works between segments. By default, attachments can only communicate with other attachments in the same segment. Detailed below.
     * 
     */
    public Optional<Output<List<GetCoreNetworkPolicyDocumentSegmentActionArgs>>> segmentActions() {
        return Optional.ofNullable(this.segmentActions);
    }

    /**
     * Block argument that defines the different segments in the network. Here you can provide descriptions, change defaults, and provide explicit Regional operational and route filters. The names defined for each segment are used in the `segment_actions` and `attachment_policies` section. Each segment is created, and operates, as a completely separated routing domain. By default, attachments can only communicate with other attachments in the same segment. Detailed below.
     * 
     */
    @Import(name="segments", required=true)
    private Output<List<GetCoreNetworkPolicyDocumentSegmentArgs>> segments;

    /**
     * @return Block argument that defines the different segments in the network. Here you can provide descriptions, change defaults, and provide explicit Regional operational and route filters. The names defined for each segment are used in the `segment_actions` and `attachment_policies` section. Each segment is created, and operates, as a completely separated routing domain. By default, attachments can only communicate with other attachments in the same segment. Detailed below.
     * 
     */
    public Output<List<GetCoreNetworkPolicyDocumentSegmentArgs>> segments() {
        return this.segments;
    }

    @Import(name="version")
    private @Nullable Output<String> version;

    public Optional<Output<String>> version() {
        return Optional.ofNullable(this.version);
    }

    private GetCoreNetworkPolicyDocumentArgs() {}

    private GetCoreNetworkPolicyDocumentArgs(GetCoreNetworkPolicyDocumentArgs $) {
        this.attachmentPolicies = $.attachmentPolicies;
        this.coreNetworkConfigurations = $.coreNetworkConfigurations;
        this.segmentActions = $.segmentActions;
        this.segments = $.segments;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetCoreNetworkPolicyDocumentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetCoreNetworkPolicyDocumentArgs $;

        public Builder() {
            $ = new GetCoreNetworkPolicyDocumentArgs();
        }

        public Builder(GetCoreNetworkPolicyDocumentArgs defaults) {
            $ = new GetCoreNetworkPolicyDocumentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param attachmentPolicies In a core network, all attachments use the block argument `attachment_policies` section to map an attachment to a segment. Instead of manually associating a segment to each attachment, attachments use tags, and then the tags are used to associate the attachment to the specified segment. Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder attachmentPolicies(@Nullable Output<List<GetCoreNetworkPolicyDocumentAttachmentPolicyArgs>> attachmentPolicies) {
            $.attachmentPolicies = attachmentPolicies;
            return this;
        }

        /**
         * @param attachmentPolicies In a core network, all attachments use the block argument `attachment_policies` section to map an attachment to a segment. Instead of manually associating a segment to each attachment, attachments use tags, and then the tags are used to associate the attachment to the specified segment. Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder attachmentPolicies(List<GetCoreNetworkPolicyDocumentAttachmentPolicyArgs> attachmentPolicies) {
            return attachmentPolicies(Output.of(attachmentPolicies));
        }

        /**
         * @param attachmentPolicies In a core network, all attachments use the block argument `attachment_policies` section to map an attachment to a segment. Instead of manually associating a segment to each attachment, attachments use tags, and then the tags are used to associate the attachment to the specified segment. Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder attachmentPolicies(GetCoreNetworkPolicyDocumentAttachmentPolicyArgs... attachmentPolicies) {
            return attachmentPolicies(List.of(attachmentPolicies));
        }

        /**
         * @param coreNetworkConfigurations The core network configuration section defines the Regions where a core network should operate. For AWS Regions that are defined in the policy, the core network creates a Core Network Edge where you can connect attachments. After it&#39;s created, each Core Network Edge is peered with every other defined Region and is configured with consistent segment and routing across all Regions. Regions cannot be removed until the associated attachments are deleted. Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder coreNetworkConfigurations(Output<List<GetCoreNetworkPolicyDocumentCoreNetworkConfigurationArgs>> coreNetworkConfigurations) {
            $.coreNetworkConfigurations = coreNetworkConfigurations;
            return this;
        }

        /**
         * @param coreNetworkConfigurations The core network configuration section defines the Regions where a core network should operate. For AWS Regions that are defined in the policy, the core network creates a Core Network Edge where you can connect attachments. After it&#39;s created, each Core Network Edge is peered with every other defined Region and is configured with consistent segment and routing across all Regions. Regions cannot be removed until the associated attachments are deleted. Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder coreNetworkConfigurations(List<GetCoreNetworkPolicyDocumentCoreNetworkConfigurationArgs> coreNetworkConfigurations) {
            return coreNetworkConfigurations(Output.of(coreNetworkConfigurations));
        }

        /**
         * @param coreNetworkConfigurations The core network configuration section defines the Regions where a core network should operate. For AWS Regions that are defined in the policy, the core network creates a Core Network Edge where you can connect attachments. After it&#39;s created, each Core Network Edge is peered with every other defined Region and is configured with consistent segment and routing across all Regions. Regions cannot be removed until the associated attachments are deleted. Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder coreNetworkConfigurations(GetCoreNetworkPolicyDocumentCoreNetworkConfigurationArgs... coreNetworkConfigurations) {
            return coreNetworkConfigurations(List.of(coreNetworkConfigurations));
        }

        /**
         * @param segmentActions A block argument, `segment_actions` define how routing works between segments. By default, attachments can only communicate with other attachments in the same segment. Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder segmentActions(@Nullable Output<List<GetCoreNetworkPolicyDocumentSegmentActionArgs>> segmentActions) {
            $.segmentActions = segmentActions;
            return this;
        }

        /**
         * @param segmentActions A block argument, `segment_actions` define how routing works between segments. By default, attachments can only communicate with other attachments in the same segment. Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder segmentActions(List<GetCoreNetworkPolicyDocumentSegmentActionArgs> segmentActions) {
            return segmentActions(Output.of(segmentActions));
        }

        /**
         * @param segmentActions A block argument, `segment_actions` define how routing works between segments. By default, attachments can only communicate with other attachments in the same segment. Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder segmentActions(GetCoreNetworkPolicyDocumentSegmentActionArgs... segmentActions) {
            return segmentActions(List.of(segmentActions));
        }

        /**
         * @param segments Block argument that defines the different segments in the network. Here you can provide descriptions, change defaults, and provide explicit Regional operational and route filters. The names defined for each segment are used in the `segment_actions` and `attachment_policies` section. Each segment is created, and operates, as a completely separated routing domain. By default, attachments can only communicate with other attachments in the same segment. Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder segments(Output<List<GetCoreNetworkPolicyDocumentSegmentArgs>> segments) {
            $.segments = segments;
            return this;
        }

        /**
         * @param segments Block argument that defines the different segments in the network. Here you can provide descriptions, change defaults, and provide explicit Regional operational and route filters. The names defined for each segment are used in the `segment_actions` and `attachment_policies` section. Each segment is created, and operates, as a completely separated routing domain. By default, attachments can only communicate with other attachments in the same segment. Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder segments(List<GetCoreNetworkPolicyDocumentSegmentArgs> segments) {
            return segments(Output.of(segments));
        }

        /**
         * @param segments Block argument that defines the different segments in the network. Here you can provide descriptions, change defaults, and provide explicit Regional operational and route filters. The names defined for each segment are used in the `segment_actions` and `attachment_policies` section. Each segment is created, and operates, as a completely separated routing domain. By default, attachments can only communicate with other attachments in the same segment. Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder segments(GetCoreNetworkPolicyDocumentSegmentArgs... segments) {
            return segments(List.of(segments));
        }

        public Builder version(@Nullable Output<String> version) {
            $.version = version;
            return this;
        }

        public Builder version(String version) {
            return version(Output.of(version));
        }

        public GetCoreNetworkPolicyDocumentArgs build() {
            $.coreNetworkConfigurations = Objects.requireNonNull($.coreNetworkConfigurations, "expected parameter 'coreNetworkConfigurations' to be non-null");
            $.segments = Objects.requireNonNull($.segments, "expected parameter 'segments' to be non-null");
            return $;
        }
    }

}
