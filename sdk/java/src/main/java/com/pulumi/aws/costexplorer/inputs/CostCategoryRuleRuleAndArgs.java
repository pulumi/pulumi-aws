// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.costexplorer.inputs;

import com.pulumi.aws.costexplorer.inputs.CostCategoryRuleRuleAndAndArgs;
import com.pulumi.aws.costexplorer.inputs.CostCategoryRuleRuleAndCostCategoryArgs;
import com.pulumi.aws.costexplorer.inputs.CostCategoryRuleRuleAndDimensionArgs;
import com.pulumi.aws.costexplorer.inputs.CostCategoryRuleRuleAndNotArgs;
import com.pulumi.aws.costexplorer.inputs.CostCategoryRuleRuleAndOrArgs;
import com.pulumi.aws.costexplorer.inputs.CostCategoryRuleRuleAndTagsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CostCategoryRuleRuleAndArgs extends com.pulumi.resources.ResourceArgs {

    public static final CostCategoryRuleRuleAndArgs Empty = new CostCategoryRuleRuleAndArgs();

    @Import(name="ands")
    private @Nullable Output<List<CostCategoryRuleRuleAndAndArgs>> ands;

    public Optional<Output<List<CostCategoryRuleRuleAndAndArgs>>> ands() {
        return Optional.ofNullable(this.ands);
    }

    @Import(name="costCategory")
    private @Nullable Output<CostCategoryRuleRuleAndCostCategoryArgs> costCategory;

    public Optional<Output<CostCategoryRuleRuleAndCostCategoryArgs>> costCategory() {
        return Optional.ofNullable(this.costCategory);
    }

    @Import(name="dimension")
    private @Nullable Output<CostCategoryRuleRuleAndDimensionArgs> dimension;

    public Optional<Output<CostCategoryRuleRuleAndDimensionArgs>> dimension() {
        return Optional.ofNullable(this.dimension);
    }

    @Import(name="not")
    private @Nullable Output<CostCategoryRuleRuleAndNotArgs> not;

    public Optional<Output<CostCategoryRuleRuleAndNotArgs>> not() {
        return Optional.ofNullable(this.not);
    }

    @Import(name="ors")
    private @Nullable Output<List<CostCategoryRuleRuleAndOrArgs>> ors;

    public Optional<Output<List<CostCategoryRuleRuleAndOrArgs>>> ors() {
        return Optional.ofNullable(this.ors);
    }

    /**
     * Key-value mapping of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<CostCategoryRuleRuleAndTagsArgs> tags;

    /**
     * @return Key-value mapping of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Optional<Output<CostCategoryRuleRuleAndTagsArgs>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private CostCategoryRuleRuleAndArgs() {}

    private CostCategoryRuleRuleAndArgs(CostCategoryRuleRuleAndArgs $) {
        this.ands = $.ands;
        this.costCategory = $.costCategory;
        this.dimension = $.dimension;
        this.not = $.not;
        this.ors = $.ors;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CostCategoryRuleRuleAndArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CostCategoryRuleRuleAndArgs $;

        public Builder() {
            $ = new CostCategoryRuleRuleAndArgs();
        }

        public Builder(CostCategoryRuleRuleAndArgs defaults) {
            $ = new CostCategoryRuleRuleAndArgs(Objects.requireNonNull(defaults));
        }

        public Builder ands(@Nullable Output<List<CostCategoryRuleRuleAndAndArgs>> ands) {
            $.ands = ands;
            return this;
        }

        public Builder ands(List<CostCategoryRuleRuleAndAndArgs> ands) {
            return ands(Output.of(ands));
        }

        public Builder ands(CostCategoryRuleRuleAndAndArgs... ands) {
            return ands(List.of(ands));
        }

        public Builder costCategory(@Nullable Output<CostCategoryRuleRuleAndCostCategoryArgs> costCategory) {
            $.costCategory = costCategory;
            return this;
        }

        public Builder costCategory(CostCategoryRuleRuleAndCostCategoryArgs costCategory) {
            return costCategory(Output.of(costCategory));
        }

        public Builder dimension(@Nullable Output<CostCategoryRuleRuleAndDimensionArgs> dimension) {
            $.dimension = dimension;
            return this;
        }

        public Builder dimension(CostCategoryRuleRuleAndDimensionArgs dimension) {
            return dimension(Output.of(dimension));
        }

        public Builder not(@Nullable Output<CostCategoryRuleRuleAndNotArgs> not) {
            $.not = not;
            return this;
        }

        public Builder not(CostCategoryRuleRuleAndNotArgs not) {
            return not(Output.of(not));
        }

        public Builder ors(@Nullable Output<List<CostCategoryRuleRuleAndOrArgs>> ors) {
            $.ors = ors;
            return this;
        }

        public Builder ors(List<CostCategoryRuleRuleAndOrArgs> ors) {
            return ors(Output.of(ors));
        }

        public Builder ors(CostCategoryRuleRuleAndOrArgs... ors) {
            return ors(List.of(ors));
        }

        /**
         * @param tags Key-value mapping of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<CostCategoryRuleRuleAndTagsArgs> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Key-value mapping of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(CostCategoryRuleRuleAndTagsArgs tags) {
            return tags(Output.of(tags));
        }

        public CostCategoryRuleRuleAndArgs build() {
            return $;
        }
    }

}
