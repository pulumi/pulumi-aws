// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.route53.outputs;

import com.pulumi.aws.route53.outputs.RecordsExclusiveResourceRecordSetAliasTarget;
import com.pulumi.aws.route53.outputs.RecordsExclusiveResourceRecordSetCidrRoutingConfig;
import com.pulumi.aws.route53.outputs.RecordsExclusiveResourceRecordSetGeolocation;
import com.pulumi.aws.route53.outputs.RecordsExclusiveResourceRecordSetGeoproximityLocation;
import com.pulumi.aws.route53.outputs.RecordsExclusiveResourceRecordSetResourceRecord;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class RecordsExclusiveResourceRecordSet {
    /**
     * @return Alias target block.
     * See `alias_target` below.
     * 
     */
    private @Nullable RecordsExclusiveResourceRecordSetAliasTarget aliasTarget;
    private @Nullable RecordsExclusiveResourceRecordSetCidrRoutingConfig cidrRoutingConfig;
    /**
     * @return Type of failover resource record.
     * Valid values are `PRIMARY` and `SECONDARY`.
     * See the [AWS documentation on DNS failover](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover.html) for additional details.
     * 
     */
    private @Nullable String failover;
    /**
     * @return Geolocation block to control how Amazon Route 53 responds to DNS queries based on the geographic origin of the query.
     * See `geolocation` below.
     * 
     */
    private @Nullable RecordsExclusiveResourceRecordSetGeolocation geolocation;
    /**
     * @return Geoproximity location block.
     * See `geoproximity_location` below.
     * 
     */
    private @Nullable RecordsExclusiveResourceRecordSetGeoproximityLocation geoproximityLocation;
    /**
     * @return Health check the record should be associated with.
     * 
     */
    private @Nullable String healthCheckId;
    private @Nullable Boolean multiValueAnswer;
    /**
     * @return Name of the record.
     * 
     */
    private String name;
    /**
     * @return AWS region of the resource this record set refers to.
     * Must be a valid AWS region name.
     * See the [AWS documentation](http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy.html#routing-policy-latency) on latency based routing for additional details.
     * 
     */
    private @Nullable String region;
    /**
     * @return Information about the resource records to act upon.
     * See `resource_records` below.
     * 
     */
    private @Nullable List<RecordsExclusiveResourceRecordSetResourceRecord> resourceRecords;
    /**
     * @return An identifier that differentiates among multiple resource record sets that have the same combination of name and type.
     * Required if using `cidr_routing_config`, `failover`, `geolocation`,`geoproximity_location`, `multivalue_answer`, `region`, or `weight`.
     * 
     */
    private @Nullable String setIdentifier;
    private @Nullable String trafficPolicyInstanceId;
    /**
     * @return Resource record cache time to live (TTL), in seconds.
     * 
     */
    private @Nullable Integer ttl;
    /**
     * @return Record type.
     * Valid values are `A`, `AAAA`, `CAA`, `CNAME`, `DS`, `MX`, `NAPTR`, `NS`, `PTR`, `SOA`, `SPF`, `SRV`, `TXT`, `TLSA`, `SSHFP`, `SVCB`, and `HTTPS`.
     * 
     * The following arguments are optional:
     * 
     * &gt; Exactly one of `resource_records` or `alias_target` must be specified.
     * 
     */
    private @Nullable String type;
    /**
     * @return Among resource record sets that have the same combination of DNS name and type, a value that determines the proportion of DNS queries that Amazon Route 53 responds to using the current resource record set.
     * 
     */
    private @Nullable Integer weight;

    private RecordsExclusiveResourceRecordSet() {}
    /**
     * @return Alias target block.
     * See `alias_target` below.
     * 
     */
    public Optional<RecordsExclusiveResourceRecordSetAliasTarget> aliasTarget() {
        return Optional.ofNullable(this.aliasTarget);
    }
    public Optional<RecordsExclusiveResourceRecordSetCidrRoutingConfig> cidrRoutingConfig() {
        return Optional.ofNullable(this.cidrRoutingConfig);
    }
    /**
     * @return Type of failover resource record.
     * Valid values are `PRIMARY` and `SECONDARY`.
     * See the [AWS documentation on DNS failover](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover.html) for additional details.
     * 
     */
    public Optional<String> failover() {
        return Optional.ofNullable(this.failover);
    }
    /**
     * @return Geolocation block to control how Amazon Route 53 responds to DNS queries based on the geographic origin of the query.
     * See `geolocation` below.
     * 
     */
    public Optional<RecordsExclusiveResourceRecordSetGeolocation> geolocation() {
        return Optional.ofNullable(this.geolocation);
    }
    /**
     * @return Geoproximity location block.
     * See `geoproximity_location` below.
     * 
     */
    public Optional<RecordsExclusiveResourceRecordSetGeoproximityLocation> geoproximityLocation() {
        return Optional.ofNullable(this.geoproximityLocation);
    }
    /**
     * @return Health check the record should be associated with.
     * 
     */
    public Optional<String> healthCheckId() {
        return Optional.ofNullable(this.healthCheckId);
    }
    public Optional<Boolean> multiValueAnswer() {
        return Optional.ofNullable(this.multiValueAnswer);
    }
    /**
     * @return Name of the record.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return AWS region of the resource this record set refers to.
     * Must be a valid AWS region name.
     * See the [AWS documentation](http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy.html#routing-policy-latency) on latency based routing for additional details.
     * 
     */
    public Optional<String> region() {
        return Optional.ofNullable(this.region);
    }
    /**
     * @return Information about the resource records to act upon.
     * See `resource_records` below.
     * 
     */
    public List<RecordsExclusiveResourceRecordSetResourceRecord> resourceRecords() {
        return this.resourceRecords == null ? List.of() : this.resourceRecords;
    }
    /**
     * @return An identifier that differentiates among multiple resource record sets that have the same combination of name and type.
     * Required if using `cidr_routing_config`, `failover`, `geolocation`,`geoproximity_location`, `multivalue_answer`, `region`, or `weight`.
     * 
     */
    public Optional<String> setIdentifier() {
        return Optional.ofNullable(this.setIdentifier);
    }
    public Optional<String> trafficPolicyInstanceId() {
        return Optional.ofNullable(this.trafficPolicyInstanceId);
    }
    /**
     * @return Resource record cache time to live (TTL), in seconds.
     * 
     */
    public Optional<Integer> ttl() {
        return Optional.ofNullable(this.ttl);
    }
    /**
     * @return Record type.
     * Valid values are `A`, `AAAA`, `CAA`, `CNAME`, `DS`, `MX`, `NAPTR`, `NS`, `PTR`, `SOA`, `SPF`, `SRV`, `TXT`, `TLSA`, `SSHFP`, `SVCB`, and `HTTPS`.
     * 
     * The following arguments are optional:
     * 
     * &gt; Exactly one of `resource_records` or `alias_target` must be specified.
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }
    /**
     * @return Among resource record sets that have the same combination of DNS name and type, a value that determines the proportion of DNS queries that Amazon Route 53 responds to using the current resource record set.
     * 
     */
    public Optional<Integer> weight() {
        return Optional.ofNullable(this.weight);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RecordsExclusiveResourceRecordSet defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable RecordsExclusiveResourceRecordSetAliasTarget aliasTarget;
        private @Nullable RecordsExclusiveResourceRecordSetCidrRoutingConfig cidrRoutingConfig;
        private @Nullable String failover;
        private @Nullable RecordsExclusiveResourceRecordSetGeolocation geolocation;
        private @Nullable RecordsExclusiveResourceRecordSetGeoproximityLocation geoproximityLocation;
        private @Nullable String healthCheckId;
        private @Nullable Boolean multiValueAnswer;
        private String name;
        private @Nullable String region;
        private @Nullable List<RecordsExclusiveResourceRecordSetResourceRecord> resourceRecords;
        private @Nullable String setIdentifier;
        private @Nullable String trafficPolicyInstanceId;
        private @Nullable Integer ttl;
        private @Nullable String type;
        private @Nullable Integer weight;
        public Builder() {}
        public Builder(RecordsExclusiveResourceRecordSet defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aliasTarget = defaults.aliasTarget;
    	      this.cidrRoutingConfig = defaults.cidrRoutingConfig;
    	      this.failover = defaults.failover;
    	      this.geolocation = defaults.geolocation;
    	      this.geoproximityLocation = defaults.geoproximityLocation;
    	      this.healthCheckId = defaults.healthCheckId;
    	      this.multiValueAnswer = defaults.multiValueAnswer;
    	      this.name = defaults.name;
    	      this.region = defaults.region;
    	      this.resourceRecords = defaults.resourceRecords;
    	      this.setIdentifier = defaults.setIdentifier;
    	      this.trafficPolicyInstanceId = defaults.trafficPolicyInstanceId;
    	      this.ttl = defaults.ttl;
    	      this.type = defaults.type;
    	      this.weight = defaults.weight;
        }

        @CustomType.Setter
        public Builder aliasTarget(@Nullable RecordsExclusiveResourceRecordSetAliasTarget aliasTarget) {

            this.aliasTarget = aliasTarget;
            return this;
        }
        @CustomType.Setter
        public Builder cidrRoutingConfig(@Nullable RecordsExclusiveResourceRecordSetCidrRoutingConfig cidrRoutingConfig) {

            this.cidrRoutingConfig = cidrRoutingConfig;
            return this;
        }
        @CustomType.Setter
        public Builder failover(@Nullable String failover) {

            this.failover = failover;
            return this;
        }
        @CustomType.Setter
        public Builder geolocation(@Nullable RecordsExclusiveResourceRecordSetGeolocation geolocation) {

            this.geolocation = geolocation;
            return this;
        }
        @CustomType.Setter
        public Builder geoproximityLocation(@Nullable RecordsExclusiveResourceRecordSetGeoproximityLocation geoproximityLocation) {

            this.geoproximityLocation = geoproximityLocation;
            return this;
        }
        @CustomType.Setter
        public Builder healthCheckId(@Nullable String healthCheckId) {

            this.healthCheckId = healthCheckId;
            return this;
        }
        @CustomType.Setter
        public Builder multiValueAnswer(@Nullable Boolean multiValueAnswer) {

            this.multiValueAnswer = multiValueAnswer;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("RecordsExclusiveResourceRecordSet", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder region(@Nullable String region) {

            this.region = region;
            return this;
        }
        @CustomType.Setter
        public Builder resourceRecords(@Nullable List<RecordsExclusiveResourceRecordSetResourceRecord> resourceRecords) {

            this.resourceRecords = resourceRecords;
            return this;
        }
        public Builder resourceRecords(RecordsExclusiveResourceRecordSetResourceRecord... resourceRecords) {
            return resourceRecords(List.of(resourceRecords));
        }
        @CustomType.Setter
        public Builder setIdentifier(@Nullable String setIdentifier) {

            this.setIdentifier = setIdentifier;
            return this;
        }
        @CustomType.Setter
        public Builder trafficPolicyInstanceId(@Nullable String trafficPolicyInstanceId) {

            this.trafficPolicyInstanceId = trafficPolicyInstanceId;
            return this;
        }
        @CustomType.Setter
        public Builder ttl(@Nullable Integer ttl) {

            this.ttl = ttl;
            return this;
        }
        @CustomType.Setter
        public Builder type(@Nullable String type) {

            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder weight(@Nullable Integer weight) {

            this.weight = weight;
            return this;
        }
        public RecordsExclusiveResourceRecordSet build() {
            final var _resultValue = new RecordsExclusiveResourceRecordSet();
            _resultValue.aliasTarget = aliasTarget;
            _resultValue.cidrRoutingConfig = cidrRoutingConfig;
            _resultValue.failover = failover;
            _resultValue.geolocation = geolocation;
            _resultValue.geoproximityLocation = geoproximityLocation;
            _resultValue.healthCheckId = healthCheckId;
            _resultValue.multiValueAnswer = multiValueAnswer;
            _resultValue.name = name;
            _resultValue.region = region;
            _resultValue.resourceRecords = resourceRecords;
            _resultValue.setIdentifier = setIdentifier;
            _resultValue.trafficPolicyInstanceId = trafficPolicyInstanceId;
            _resultValue.ttl = ttl;
            _resultValue.type = type;
            _resultValue.weight = weight;
            return _resultValue;
        }
    }
}
