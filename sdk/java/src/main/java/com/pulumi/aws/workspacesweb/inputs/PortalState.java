// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.workspacesweb.inputs;

import com.pulumi.aws.workspacesweb.inputs.PortalTimeoutsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PortalState extends com.pulumi.resources.ResourceArgs {

    public static final PortalState Empty = new PortalState();

    /**
     * Additional encryption context for the customer managed key. Forces replacement if changed.
     * 
     */
    @Import(name="additionalEncryptionContext")
    private @Nullable Output<Map<String,String>> additionalEncryptionContext;

    /**
     * @return Additional encryption context for the customer managed key. Forces replacement if changed.
     * 
     */
    public Optional<Output<Map<String,String>>> additionalEncryptionContext() {
        return Optional.ofNullable(this.additionalEncryptionContext);
    }

    /**
     * Authentication type for the portal. Valid values: `Standard`, `IAM_Identity_Center`.
     * 
     */
    @Import(name="authenticationType")
    private @Nullable Output<String> authenticationType;

    /**
     * @return Authentication type for the portal. Valid values: `Standard`, `IAM_Identity_Center`.
     * 
     */
    public Optional<Output<String>> authenticationType() {
        return Optional.ofNullable(this.authenticationType);
    }

    /**
     * ARN of the browser settings to use for the portal.
     * 
     */
    @Import(name="browserSettingsArn")
    private @Nullable Output<String> browserSettingsArn;

    /**
     * @return ARN of the browser settings to use for the portal.
     * 
     */
    public Optional<Output<String>> browserSettingsArn() {
        return Optional.ofNullable(this.browserSettingsArn);
    }

    /**
     * Browser type of the portal.
     * 
     */
    @Import(name="browserType")
    private @Nullable Output<String> browserType;

    /**
     * @return Browser type of the portal.
     * 
     */
    public Optional<Output<String>> browserType() {
        return Optional.ofNullable(this.browserType);
    }

    /**
     * Creation date of the portal.
     * 
     */
    @Import(name="creationDate")
    private @Nullable Output<String> creationDate;

    /**
     * @return Creation date of the portal.
     * 
     */
    public Optional<Output<String>> creationDate() {
        return Optional.ofNullable(this.creationDate);
    }

    /**
     * ARN of the customer managed key. Forces replacement if changed.
     * 
     */
    @Import(name="customerManagedKey")
    private @Nullable Output<String> customerManagedKey;

    /**
     * @return ARN of the customer managed key. Forces replacement if changed.
     * 
     */
    public Optional<Output<String>> customerManagedKey() {
        return Optional.ofNullable(this.customerManagedKey);
    }

    /**
     * ARN of the data protection settings associated with the portal.
     * 
     */
    @Import(name="dataProtectionSettingsArn")
    private @Nullable Output<String> dataProtectionSettingsArn;

    /**
     * @return ARN of the data protection settings associated with the portal.
     * 
     */
    public Optional<Output<String>> dataProtectionSettingsArn() {
        return Optional.ofNullable(this.dataProtectionSettingsArn);
    }

    /**
     * Display name of the portal.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return Display name of the portal.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * Instance type for the portal. Valid values: `standard.regular`, `standard.large`.
     * 
     */
    @Import(name="instanceType")
    private @Nullable Output<String> instanceType;

    /**
     * @return Instance type for the portal. Valid values: `standard.regular`, `standard.large`.
     * 
     */
    public Optional<Output<String>> instanceType() {
        return Optional.ofNullable(this.instanceType);
    }

    /**
     * ARN of the IP access settings associated with the portal.
     * 
     */
    @Import(name="ipAccessSettingsArn")
    private @Nullable Output<String> ipAccessSettingsArn;

    /**
     * @return ARN of the IP access settings associated with the portal.
     * 
     */
    public Optional<Output<String>> ipAccessSettingsArn() {
        return Optional.ofNullable(this.ipAccessSettingsArn);
    }

    /**
     * Maximum number of concurrent sessions for the portal.
     * 
     */
    @Import(name="maxConcurrentSessions")
    private @Nullable Output<Integer> maxConcurrentSessions;

    /**
     * @return Maximum number of concurrent sessions for the portal.
     * 
     */
    public Optional<Output<Integer>> maxConcurrentSessions() {
        return Optional.ofNullable(this.maxConcurrentSessions);
    }

    /**
     * ARN of the network settings associated with the portal.
     * 
     */
    @Import(name="networkSettingsArn")
    private @Nullable Output<String> networkSettingsArn;

    /**
     * @return ARN of the network settings associated with the portal.
     * 
     */
    public Optional<Output<String>> networkSettingsArn() {
        return Optional.ofNullable(this.networkSettingsArn);
    }

    /**
     * ARN of the portal.
     * 
     */
    @Import(name="portalArn")
    private @Nullable Output<String> portalArn;

    /**
     * @return ARN of the portal.
     * 
     */
    public Optional<Output<String>> portalArn() {
        return Optional.ofNullable(this.portalArn);
    }

    /**
     * Endpoint URL of the portal.
     * 
     */
    @Import(name="portalEndpoint")
    private @Nullable Output<String> portalEndpoint;

    /**
     * @return Endpoint URL of the portal.
     * 
     */
    public Optional<Output<String>> portalEndpoint() {
        return Optional.ofNullable(this.portalEndpoint);
    }

    /**
     * Status of the portal.
     * 
     */
    @Import(name="portalStatus")
    private @Nullable Output<String> portalStatus;

    /**
     * @return Status of the portal.
     * 
     */
    public Optional<Output<String>> portalStatus() {
        return Optional.ofNullable(this.portalStatus);
    }

    /**
     * Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * Renderer type of the portal.
     * 
     */
    @Import(name="rendererType")
    private @Nullable Output<String> rendererType;

    /**
     * @return Renderer type of the portal.
     * 
     */
    public Optional<Output<String>> rendererType() {
        return Optional.ofNullable(this.rendererType);
    }

    /**
     * ARN of the session logger associated with the portal.
     * 
     */
    @Import(name="sessionLoggerArn")
    private @Nullable Output<String> sessionLoggerArn;

    /**
     * @return ARN of the session logger associated with the portal.
     * 
     */
    public Optional<Output<String>> sessionLoggerArn() {
        return Optional.ofNullable(this.sessionLoggerArn);
    }

    /**
     * Reason for the current status of the portal.
     * 
     */
    @Import(name="statusReason")
    private @Nullable Output<String> statusReason;

    /**
     * @return Reason for the current status of the portal.
     * 
     */
    public Optional<Output<String>> statusReason() {
        return Optional.ofNullable(this.statusReason);
    }

    /**
     * Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     * 
     */
    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    /**
     * @return Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     * 
     */
    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    @Import(name="timeouts")
    private @Nullable Output<PortalTimeoutsArgs> timeouts;

    public Optional<Output<PortalTimeoutsArgs>> timeouts() {
        return Optional.ofNullable(this.timeouts);
    }

    /**
     * ARN of the trust store associated with the portal.
     * 
     */
    @Import(name="trustStoreArn")
    private @Nullable Output<String> trustStoreArn;

    /**
     * @return ARN of the trust store associated with the portal.
     * 
     */
    public Optional<Output<String>> trustStoreArn() {
        return Optional.ofNullable(this.trustStoreArn);
    }

    /**
     * ARN of the user access logging settings associated with the portal.
     * 
     */
    @Import(name="userAccessLoggingSettingsArn")
    private @Nullable Output<String> userAccessLoggingSettingsArn;

    /**
     * @return ARN of the user access logging settings associated with the portal.
     * 
     */
    public Optional<Output<String>> userAccessLoggingSettingsArn() {
        return Optional.ofNullable(this.userAccessLoggingSettingsArn);
    }

    /**
     * ARN of the user settings associated with the portal.
     * 
     */
    @Import(name="userSettingsArn")
    private @Nullable Output<String> userSettingsArn;

    /**
     * @return ARN of the user settings associated with the portal.
     * 
     */
    public Optional<Output<String>> userSettingsArn() {
        return Optional.ofNullable(this.userSettingsArn);
    }

    private PortalState() {}

    private PortalState(PortalState $) {
        this.additionalEncryptionContext = $.additionalEncryptionContext;
        this.authenticationType = $.authenticationType;
        this.browserSettingsArn = $.browserSettingsArn;
        this.browserType = $.browserType;
        this.creationDate = $.creationDate;
        this.customerManagedKey = $.customerManagedKey;
        this.dataProtectionSettingsArn = $.dataProtectionSettingsArn;
        this.displayName = $.displayName;
        this.instanceType = $.instanceType;
        this.ipAccessSettingsArn = $.ipAccessSettingsArn;
        this.maxConcurrentSessions = $.maxConcurrentSessions;
        this.networkSettingsArn = $.networkSettingsArn;
        this.portalArn = $.portalArn;
        this.portalEndpoint = $.portalEndpoint;
        this.portalStatus = $.portalStatus;
        this.region = $.region;
        this.rendererType = $.rendererType;
        this.sessionLoggerArn = $.sessionLoggerArn;
        this.statusReason = $.statusReason;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
        this.timeouts = $.timeouts;
        this.trustStoreArn = $.trustStoreArn;
        this.userAccessLoggingSettingsArn = $.userAccessLoggingSettingsArn;
        this.userSettingsArn = $.userSettingsArn;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PortalState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PortalState $;

        public Builder() {
            $ = new PortalState();
        }

        public Builder(PortalState defaults) {
            $ = new PortalState(Objects.requireNonNull(defaults));
        }

        /**
         * @param additionalEncryptionContext Additional encryption context for the customer managed key. Forces replacement if changed.
         * 
         * @return builder
         * 
         */
        public Builder additionalEncryptionContext(@Nullable Output<Map<String,String>> additionalEncryptionContext) {
            $.additionalEncryptionContext = additionalEncryptionContext;
            return this;
        }

        /**
         * @param additionalEncryptionContext Additional encryption context for the customer managed key. Forces replacement if changed.
         * 
         * @return builder
         * 
         */
        public Builder additionalEncryptionContext(Map<String,String> additionalEncryptionContext) {
            return additionalEncryptionContext(Output.of(additionalEncryptionContext));
        }

        /**
         * @param authenticationType Authentication type for the portal. Valid values: `Standard`, `IAM_Identity_Center`.
         * 
         * @return builder
         * 
         */
        public Builder authenticationType(@Nullable Output<String> authenticationType) {
            $.authenticationType = authenticationType;
            return this;
        }

        /**
         * @param authenticationType Authentication type for the portal. Valid values: `Standard`, `IAM_Identity_Center`.
         * 
         * @return builder
         * 
         */
        public Builder authenticationType(String authenticationType) {
            return authenticationType(Output.of(authenticationType));
        }

        /**
         * @param browserSettingsArn ARN of the browser settings to use for the portal.
         * 
         * @return builder
         * 
         */
        public Builder browserSettingsArn(@Nullable Output<String> browserSettingsArn) {
            $.browserSettingsArn = browserSettingsArn;
            return this;
        }

        /**
         * @param browserSettingsArn ARN of the browser settings to use for the portal.
         * 
         * @return builder
         * 
         */
        public Builder browserSettingsArn(String browserSettingsArn) {
            return browserSettingsArn(Output.of(browserSettingsArn));
        }

        /**
         * @param browserType Browser type of the portal.
         * 
         * @return builder
         * 
         */
        public Builder browserType(@Nullable Output<String> browserType) {
            $.browserType = browserType;
            return this;
        }

        /**
         * @param browserType Browser type of the portal.
         * 
         * @return builder
         * 
         */
        public Builder browserType(String browserType) {
            return browserType(Output.of(browserType));
        }

        /**
         * @param creationDate Creation date of the portal.
         * 
         * @return builder
         * 
         */
        public Builder creationDate(@Nullable Output<String> creationDate) {
            $.creationDate = creationDate;
            return this;
        }

        /**
         * @param creationDate Creation date of the portal.
         * 
         * @return builder
         * 
         */
        public Builder creationDate(String creationDate) {
            return creationDate(Output.of(creationDate));
        }

        /**
         * @param customerManagedKey ARN of the customer managed key. Forces replacement if changed.
         * 
         * @return builder
         * 
         */
        public Builder customerManagedKey(@Nullable Output<String> customerManagedKey) {
            $.customerManagedKey = customerManagedKey;
            return this;
        }

        /**
         * @param customerManagedKey ARN of the customer managed key. Forces replacement if changed.
         * 
         * @return builder
         * 
         */
        public Builder customerManagedKey(String customerManagedKey) {
            return customerManagedKey(Output.of(customerManagedKey));
        }

        /**
         * @param dataProtectionSettingsArn ARN of the data protection settings associated with the portal.
         * 
         * @return builder
         * 
         */
        public Builder dataProtectionSettingsArn(@Nullable Output<String> dataProtectionSettingsArn) {
            $.dataProtectionSettingsArn = dataProtectionSettingsArn;
            return this;
        }

        /**
         * @param dataProtectionSettingsArn ARN of the data protection settings associated with the portal.
         * 
         * @return builder
         * 
         */
        public Builder dataProtectionSettingsArn(String dataProtectionSettingsArn) {
            return dataProtectionSettingsArn(Output.of(dataProtectionSettingsArn));
        }

        /**
         * @param displayName Display name of the portal.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName Display name of the portal.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param instanceType Instance type for the portal. Valid values: `standard.regular`, `standard.large`.
         * 
         * @return builder
         * 
         */
        public Builder instanceType(@Nullable Output<String> instanceType) {
            $.instanceType = instanceType;
            return this;
        }

        /**
         * @param instanceType Instance type for the portal. Valid values: `standard.regular`, `standard.large`.
         * 
         * @return builder
         * 
         */
        public Builder instanceType(String instanceType) {
            return instanceType(Output.of(instanceType));
        }

        /**
         * @param ipAccessSettingsArn ARN of the IP access settings associated with the portal.
         * 
         * @return builder
         * 
         */
        public Builder ipAccessSettingsArn(@Nullable Output<String> ipAccessSettingsArn) {
            $.ipAccessSettingsArn = ipAccessSettingsArn;
            return this;
        }

        /**
         * @param ipAccessSettingsArn ARN of the IP access settings associated with the portal.
         * 
         * @return builder
         * 
         */
        public Builder ipAccessSettingsArn(String ipAccessSettingsArn) {
            return ipAccessSettingsArn(Output.of(ipAccessSettingsArn));
        }

        /**
         * @param maxConcurrentSessions Maximum number of concurrent sessions for the portal.
         * 
         * @return builder
         * 
         */
        public Builder maxConcurrentSessions(@Nullable Output<Integer> maxConcurrentSessions) {
            $.maxConcurrentSessions = maxConcurrentSessions;
            return this;
        }

        /**
         * @param maxConcurrentSessions Maximum number of concurrent sessions for the portal.
         * 
         * @return builder
         * 
         */
        public Builder maxConcurrentSessions(Integer maxConcurrentSessions) {
            return maxConcurrentSessions(Output.of(maxConcurrentSessions));
        }

        /**
         * @param networkSettingsArn ARN of the network settings associated with the portal.
         * 
         * @return builder
         * 
         */
        public Builder networkSettingsArn(@Nullable Output<String> networkSettingsArn) {
            $.networkSettingsArn = networkSettingsArn;
            return this;
        }

        /**
         * @param networkSettingsArn ARN of the network settings associated with the portal.
         * 
         * @return builder
         * 
         */
        public Builder networkSettingsArn(String networkSettingsArn) {
            return networkSettingsArn(Output.of(networkSettingsArn));
        }

        /**
         * @param portalArn ARN of the portal.
         * 
         * @return builder
         * 
         */
        public Builder portalArn(@Nullable Output<String> portalArn) {
            $.portalArn = portalArn;
            return this;
        }

        /**
         * @param portalArn ARN of the portal.
         * 
         * @return builder
         * 
         */
        public Builder portalArn(String portalArn) {
            return portalArn(Output.of(portalArn));
        }

        /**
         * @param portalEndpoint Endpoint URL of the portal.
         * 
         * @return builder
         * 
         */
        public Builder portalEndpoint(@Nullable Output<String> portalEndpoint) {
            $.portalEndpoint = portalEndpoint;
            return this;
        }

        /**
         * @param portalEndpoint Endpoint URL of the portal.
         * 
         * @return builder
         * 
         */
        public Builder portalEndpoint(String portalEndpoint) {
            return portalEndpoint(Output.of(portalEndpoint));
        }

        /**
         * @param portalStatus Status of the portal.
         * 
         * @return builder
         * 
         */
        public Builder portalStatus(@Nullable Output<String> portalStatus) {
            $.portalStatus = portalStatus;
            return this;
        }

        /**
         * @param portalStatus Status of the portal.
         * 
         * @return builder
         * 
         */
        public Builder portalStatus(String portalStatus) {
            return portalStatus(Output.of(portalStatus));
        }

        /**
         * @param region Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param rendererType Renderer type of the portal.
         * 
         * @return builder
         * 
         */
        public Builder rendererType(@Nullable Output<String> rendererType) {
            $.rendererType = rendererType;
            return this;
        }

        /**
         * @param rendererType Renderer type of the portal.
         * 
         * @return builder
         * 
         */
        public Builder rendererType(String rendererType) {
            return rendererType(Output.of(rendererType));
        }

        /**
         * @param sessionLoggerArn ARN of the session logger associated with the portal.
         * 
         * @return builder
         * 
         */
        public Builder sessionLoggerArn(@Nullable Output<String> sessionLoggerArn) {
            $.sessionLoggerArn = sessionLoggerArn;
            return this;
        }

        /**
         * @param sessionLoggerArn ARN of the session logger associated with the portal.
         * 
         * @return builder
         * 
         */
        public Builder sessionLoggerArn(String sessionLoggerArn) {
            return sessionLoggerArn(Output.of(sessionLoggerArn));
        }

        /**
         * @param statusReason Reason for the current status of the portal.
         * 
         * @return builder
         * 
         */
        public Builder statusReason(@Nullable Output<String> statusReason) {
            $.statusReason = statusReason;
            return this;
        }

        /**
         * @param statusReason Reason for the current status of the portal.
         * 
         * @return builder
         * 
         */
        public Builder statusReason(String statusReason) {
            return statusReason(Output.of(statusReason));
        }

        /**
         * @param tags Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tagsAll Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
         * 
         * @return builder
         * 
         */
        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        /**
         * @param tagsAll Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
         * 
         * @return builder
         * 
         */
        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        public Builder timeouts(@Nullable Output<PortalTimeoutsArgs> timeouts) {
            $.timeouts = timeouts;
            return this;
        }

        public Builder timeouts(PortalTimeoutsArgs timeouts) {
            return timeouts(Output.of(timeouts));
        }

        /**
         * @param trustStoreArn ARN of the trust store associated with the portal.
         * 
         * @return builder
         * 
         */
        public Builder trustStoreArn(@Nullable Output<String> trustStoreArn) {
            $.trustStoreArn = trustStoreArn;
            return this;
        }

        /**
         * @param trustStoreArn ARN of the trust store associated with the portal.
         * 
         * @return builder
         * 
         */
        public Builder trustStoreArn(String trustStoreArn) {
            return trustStoreArn(Output.of(trustStoreArn));
        }

        /**
         * @param userAccessLoggingSettingsArn ARN of the user access logging settings associated with the portal.
         * 
         * @return builder
         * 
         */
        public Builder userAccessLoggingSettingsArn(@Nullable Output<String> userAccessLoggingSettingsArn) {
            $.userAccessLoggingSettingsArn = userAccessLoggingSettingsArn;
            return this;
        }

        /**
         * @param userAccessLoggingSettingsArn ARN of the user access logging settings associated with the portal.
         * 
         * @return builder
         * 
         */
        public Builder userAccessLoggingSettingsArn(String userAccessLoggingSettingsArn) {
            return userAccessLoggingSettingsArn(Output.of(userAccessLoggingSettingsArn));
        }

        /**
         * @param userSettingsArn ARN of the user settings associated with the portal.
         * 
         * @return builder
         * 
         */
        public Builder userSettingsArn(@Nullable Output<String> userSettingsArn) {
            $.userSettingsArn = userSettingsArn;
            return this;
        }

        /**
         * @param userSettingsArn ARN of the user settings associated with the portal.
         * 
         * @return builder
         * 
         */
        public Builder userSettingsArn(String userSettingsArn) {
            return userSettingsArn(Output.of(userSettingsArn));
        }

        public PortalState build() {
            return $;
        }
    }

}
