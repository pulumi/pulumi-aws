// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ecr.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetRepositoryCreationTemplateArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetRepositoryCreationTemplateArgs Empty = new GetRepositoryCreationTemplateArgs();

    /**
     * The repository name prefix that the template matches against.
     * 
     */
    @Import(name="prefix", required=true)
    private Output<String> prefix;

    /**
     * @return The repository name prefix that the template matches against.
     * 
     */
    public Output<String> prefix() {
        return this.prefix;
    }

    /**
     * A map of tags to assign to any created repositories.
     * 
     */
    @Import(name="resourceTags")
    private @Nullable Output<Map<String,String>> resourceTags;

    /**
     * @return A map of tags to assign to any created repositories.
     * 
     */
    public Optional<Output<Map<String,String>>> resourceTags() {
        return Optional.ofNullable(this.resourceTags);
    }

    private GetRepositoryCreationTemplateArgs() {}

    private GetRepositoryCreationTemplateArgs(GetRepositoryCreationTemplateArgs $) {
        this.prefix = $.prefix;
        this.resourceTags = $.resourceTags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetRepositoryCreationTemplateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetRepositoryCreationTemplateArgs $;

        public Builder() {
            $ = new GetRepositoryCreationTemplateArgs();
        }

        public Builder(GetRepositoryCreationTemplateArgs defaults) {
            $ = new GetRepositoryCreationTemplateArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param prefix The repository name prefix that the template matches against.
         * 
         * @return builder
         * 
         */
        public Builder prefix(Output<String> prefix) {
            $.prefix = prefix;
            return this;
        }

        /**
         * @param prefix The repository name prefix that the template matches against.
         * 
         * @return builder
         * 
         */
        public Builder prefix(String prefix) {
            return prefix(Output.of(prefix));
        }

        /**
         * @param resourceTags A map of tags to assign to any created repositories.
         * 
         * @return builder
         * 
         */
        public Builder resourceTags(@Nullable Output<Map<String,String>> resourceTags) {
            $.resourceTags = resourceTags;
            return this;
        }

        /**
         * @param resourceTags A map of tags to assign to any created repositories.
         * 
         * @return builder
         * 
         */
        public Builder resourceTags(Map<String,String> resourceTags) {
            return resourceTags(Output.of(resourceTags));
        }

        public GetRepositoryCreationTemplateArgs build() {
            if ($.prefix == null) {
                throw new MissingRequiredPropertyException("GetRepositoryCreationTemplateArgs", "prefix");
            }
            return $;
        }
    }

}
