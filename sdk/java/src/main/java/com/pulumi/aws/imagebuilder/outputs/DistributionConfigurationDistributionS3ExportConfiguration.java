// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.imagebuilder.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DistributionConfigurationDistributionS3ExportConfiguration {
    /**
     * @return The disk image format of the exported image (`RAW`, `VHD`, or `VMDK`)
     * 
     */
    private String diskImageFormat;
    /**
     * @return The name of the IAM role to use for exporting.
     * 
     */
    private String roleName;
    /**
     * @return The name of the S3 bucket to store the exported image in. The bucket needs to exist before the export configuration is created.
     * 
     */
    private String s3Bucket;
    /**
     * @return The prefix for the exported image.
     * 
     */
    private @Nullable String s3Prefix;

    private DistributionConfigurationDistributionS3ExportConfiguration() {}
    /**
     * @return The disk image format of the exported image (`RAW`, `VHD`, or `VMDK`)
     * 
     */
    public String diskImageFormat() {
        return this.diskImageFormat;
    }
    /**
     * @return The name of the IAM role to use for exporting.
     * 
     */
    public String roleName() {
        return this.roleName;
    }
    /**
     * @return The name of the S3 bucket to store the exported image in. The bucket needs to exist before the export configuration is created.
     * 
     */
    public String s3Bucket() {
        return this.s3Bucket;
    }
    /**
     * @return The prefix for the exported image.
     * 
     */
    public Optional<String> s3Prefix() {
        return Optional.ofNullable(this.s3Prefix);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DistributionConfigurationDistributionS3ExportConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String diskImageFormat;
        private String roleName;
        private String s3Bucket;
        private @Nullable String s3Prefix;
        public Builder() {}
        public Builder(DistributionConfigurationDistributionS3ExportConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.diskImageFormat = defaults.diskImageFormat;
    	      this.roleName = defaults.roleName;
    	      this.s3Bucket = defaults.s3Bucket;
    	      this.s3Prefix = defaults.s3Prefix;
        }

        @CustomType.Setter
        public Builder diskImageFormat(String diskImageFormat) {
            if (diskImageFormat == null) {
              throw new MissingRequiredPropertyException("DistributionConfigurationDistributionS3ExportConfiguration", "diskImageFormat");
            }
            this.diskImageFormat = diskImageFormat;
            return this;
        }
        @CustomType.Setter
        public Builder roleName(String roleName) {
            if (roleName == null) {
              throw new MissingRequiredPropertyException("DistributionConfigurationDistributionS3ExportConfiguration", "roleName");
            }
            this.roleName = roleName;
            return this;
        }
        @CustomType.Setter
        public Builder s3Bucket(String s3Bucket) {
            if (s3Bucket == null) {
              throw new MissingRequiredPropertyException("DistributionConfigurationDistributionS3ExportConfiguration", "s3Bucket");
            }
            this.s3Bucket = s3Bucket;
            return this;
        }
        @CustomType.Setter
        public Builder s3Prefix(@Nullable String s3Prefix) {

            this.s3Prefix = s3Prefix;
            return this;
        }
        public DistributionConfigurationDistributionS3ExportConfiguration build() {
            final var _resultValue = new DistributionConfigurationDistributionS3ExportConfiguration();
            _resultValue.diskImageFormat = diskImageFormat;
            _resultValue.roleName = roleName;
            _resultValue.s3Bucket = s3Bucket;
            _resultValue.s3Prefix = s3Prefix;
            return _resultValue;
        }
    }
}
