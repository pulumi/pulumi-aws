// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.cognito;

import com.pulumi.aws.cognito.inputs.IdentityPoolRoleAttachmentRoleMappingArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IdentityPoolRoleAttachmentArgs extends com.pulumi.resources.ResourceArgs {

    public static final IdentityPoolRoleAttachmentArgs Empty = new IdentityPoolRoleAttachmentArgs();

    /**
     * An identity pool ID in the format `REGION_GUID`.
     * 
     */
    @Import(name="identityPoolId", required=true)
    private Output<String> identityPoolId;

    /**
     * @return An identity pool ID in the format `REGION_GUID`.
     * 
     */
    public Output<String> identityPoolId() {
        return this.identityPoolId;
    }

    /**
     * A List of Role Mapping.
     * 
     */
    @Import(name="roleMappings")
    private @Nullable Output<List<IdentityPoolRoleAttachmentRoleMappingArgs>> roleMappings;

    /**
     * @return A List of Role Mapping.
     * 
     */
    public Optional<Output<List<IdentityPoolRoleAttachmentRoleMappingArgs>>> roleMappings() {
        return Optional.ofNullable(this.roleMappings);
    }

    /**
     * The map of roles associated with this pool. For a given role, the key will be either &#34;authenticated&#34; or &#34;unauthenticated&#34; and the value will be the Role ARN.
     * 
     */
    @Import(name="roles", required=true)
    private Output<Map<String,String>> roles;

    /**
     * @return The map of roles associated with this pool. For a given role, the key will be either &#34;authenticated&#34; or &#34;unauthenticated&#34; and the value will be the Role ARN.
     * 
     */
    public Output<Map<String,String>> roles() {
        return this.roles;
    }

    private IdentityPoolRoleAttachmentArgs() {}

    private IdentityPoolRoleAttachmentArgs(IdentityPoolRoleAttachmentArgs $) {
        this.identityPoolId = $.identityPoolId;
        this.roleMappings = $.roleMappings;
        this.roles = $.roles;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IdentityPoolRoleAttachmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IdentityPoolRoleAttachmentArgs $;

        public Builder() {
            $ = new IdentityPoolRoleAttachmentArgs();
        }

        public Builder(IdentityPoolRoleAttachmentArgs defaults) {
            $ = new IdentityPoolRoleAttachmentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param identityPoolId An identity pool ID in the format `REGION_GUID`.
         * 
         * @return builder
         * 
         */
        public Builder identityPoolId(Output<String> identityPoolId) {
            $.identityPoolId = identityPoolId;
            return this;
        }

        /**
         * @param identityPoolId An identity pool ID in the format `REGION_GUID`.
         * 
         * @return builder
         * 
         */
        public Builder identityPoolId(String identityPoolId) {
            return identityPoolId(Output.of(identityPoolId));
        }

        /**
         * @param roleMappings A List of Role Mapping.
         * 
         * @return builder
         * 
         */
        public Builder roleMappings(@Nullable Output<List<IdentityPoolRoleAttachmentRoleMappingArgs>> roleMappings) {
            $.roleMappings = roleMappings;
            return this;
        }

        /**
         * @param roleMappings A List of Role Mapping.
         * 
         * @return builder
         * 
         */
        public Builder roleMappings(List<IdentityPoolRoleAttachmentRoleMappingArgs> roleMappings) {
            return roleMappings(Output.of(roleMappings));
        }

        /**
         * @param roleMappings A List of Role Mapping.
         * 
         * @return builder
         * 
         */
        public Builder roleMappings(IdentityPoolRoleAttachmentRoleMappingArgs... roleMappings) {
            return roleMappings(List.of(roleMappings));
        }

        /**
         * @param roles The map of roles associated with this pool. For a given role, the key will be either &#34;authenticated&#34; or &#34;unauthenticated&#34; and the value will be the Role ARN.
         * 
         * @return builder
         * 
         */
        public Builder roles(Output<Map<String,String>> roles) {
            $.roles = roles;
            return this;
        }

        /**
         * @param roles The map of roles associated with this pool. For a given role, the key will be either &#34;authenticated&#34; or &#34;unauthenticated&#34; and the value will be the Role ARN.
         * 
         * @return builder
         * 
         */
        public Builder roles(Map<String,String> roles) {
            return roles(Output.of(roles));
        }

        public IdentityPoolRoleAttachmentArgs build() {
            if ($.identityPoolId == null) {
                throw new MissingRequiredPropertyException("IdentityPoolRoleAttachmentArgs", "identityPoolId");
            }
            if ($.roles == null) {
                throw new MissingRequiredPropertyException("IdentityPoolRoleAttachmentArgs", "roles");
            }
            return $;
        }
    }

}
