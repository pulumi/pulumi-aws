// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.batch;

import com.pulumi.aws.Utilities;
import com.pulumi.aws.batch.JobDefinitionArgs;
import com.pulumi.aws.batch.inputs.JobDefinitionState;
import com.pulumi.aws.batch.outputs.JobDefinitionEksProperties;
import com.pulumi.aws.batch.outputs.JobDefinitionRetryStrategy;
import com.pulumi.aws.batch.outputs.JobDefinitionTimeout;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provides a Batch Job Definition resource.
 * 
 * ## Example Usage
 * 
 * ### Job definition of type container
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.aws.batch.JobDefinition;
 * import com.pulumi.aws.batch.JobDefinitionArgs;
 * import static com.pulumi.codegen.internal.Serialization.*;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var test = new JobDefinition("test", JobDefinitionArgs.builder()
 *             .name("my_test_batch_job_definition")
 *             .type("container")
 *             .containerProperties(serializeJson(
 *                 jsonObject(
 *                     jsonProperty("command", jsonArray(
 *                         "ls", 
 *                         "-la"
 *                     )),
 *                     jsonProperty("image", "busybox"),
 *                     jsonProperty("resourceRequirements", jsonArray(
 *                         jsonObject(
 *                             jsonProperty("type", "VCPU"),
 *                             jsonProperty("value", "0.25")
 *                         ), 
 *                         jsonObject(
 *                             jsonProperty("type", "MEMORY"),
 *                             jsonProperty("value", "512")
 *                         )
 *                     )),
 *                     jsonProperty("volumes", jsonArray(jsonObject(
 *                         jsonProperty("host", jsonObject(
 *                             jsonProperty("sourcePath", "/tmp")
 *                         )),
 *                         jsonProperty("name", "tmp")
 *                     ))),
 *                     jsonProperty("environment", jsonArray(jsonObject(
 *                         jsonProperty("name", "VARNAME"),
 *                         jsonProperty("value", "VARVAL")
 *                     ))),
 *                     jsonProperty("mountPoints", jsonArray(jsonObject(
 *                         jsonProperty("sourceVolume", "tmp"),
 *                         jsonProperty("containerPath", "/tmp"),
 *                         jsonProperty("readOnly", false)
 *                     ))),
 *                     jsonProperty("ulimits", jsonArray(jsonObject(
 *                         jsonProperty("hardLimit", 1024),
 *                         jsonProperty("name", "nofile"),
 *                         jsonProperty("softLimit", 1024)
 *                     )))
 *                 )))
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ### Job definition of type multinode
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.aws.batch.JobDefinition;
 * import com.pulumi.aws.batch.JobDefinitionArgs;
 * import static com.pulumi.codegen.internal.Serialization.*;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var test = new JobDefinition("test", JobDefinitionArgs.builder()
 *             .name("tf_test_batch_job_definition_multinode")
 *             .type("multinode")
 *             .nodeProperties(serializeJson(
 *                 jsonObject(
 *                     jsonProperty("mainNode", 0),
 *                     jsonProperty("nodeRangeProperties", jsonArray(
 *                         jsonObject(
 *                             jsonProperty("container", jsonObject(
 *                                 jsonProperty("command", jsonArray(
 *                                     "ls", 
 *                                     "-la"
 *                                 )),
 *                                 jsonProperty("image", "busybox"),
 *                                 jsonProperty("memory", 128),
 *                                 jsonProperty("vcpus", 1)
 *                             )),
 *                             jsonProperty("targetNodes", "0:")
 *                         ), 
 *                         jsonObject(
 *                             jsonProperty("container", jsonObject(
 *                                 jsonProperty("command", jsonArray(
 *                                     "echo", 
 *                                     "test"
 *                                 )),
 *                                 jsonProperty("image", "busybox"),
 *                                 jsonProperty("memory", 128),
 *                                 jsonProperty("vcpus", 1)
 *                             )),
 *                             jsonProperty("targetNodes", "1:")
 *                         )
 *                     )),
 *                     jsonProperty("numNodes", 2)
 *                 )))
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ### Job Definition of type EKS
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ### Fargate Platform Capability
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.aws.iam.IamFunctions;
 * import com.pulumi.aws.iam.inputs.GetPolicyDocumentArgs;
 * import com.pulumi.aws.iam.Role;
 * import com.pulumi.aws.iam.RoleArgs;
 * import com.pulumi.aws.iam.RolePolicyAttachment;
 * import com.pulumi.aws.iam.RolePolicyAttachmentArgs;
 * import com.pulumi.aws.batch.JobDefinition;
 * import com.pulumi.aws.batch.JobDefinitionArgs;
 * import static com.pulumi.codegen.internal.Serialization.*;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var assumeRolePolicy = IamFunctions.getPolicyDocument(GetPolicyDocumentArgs.builder()
 *             .statements(GetPolicyDocumentStatementArgs.builder()
 *                 .actions("sts:AssumeRole")
 *                 .principals(GetPolicyDocumentStatementPrincipalArgs.builder()
 *                     .type("Service")
 *                     .identifiers("ecs-tasks.amazonaws.com")
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *         var ecsTaskExecutionRole = new Role("ecsTaskExecutionRole", RoleArgs.builder()
 *             .name("my_test_batch_exec_role")
 *             .assumeRolePolicy(assumeRolePolicy.json())
 *             .build());
 * 
 *         var ecsTaskExecutionRolePolicy = new RolePolicyAttachment("ecsTaskExecutionRolePolicy", RolePolicyAttachmentArgs.builder()
 *             .role(ecsTaskExecutionRole.name())
 *             .policyArn("arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy")
 *             .build());
 * 
 *         var test = new JobDefinition("test", JobDefinitionArgs.builder()
 *             .name("my_test_batch_job_definition")
 *             .type("container")
 *             .platformCapabilities("FARGATE")
 *             .containerProperties(ecsTaskExecutionRole.arn().applyValue(_arn -> serializeJson(
 *                 jsonObject(
 *                     jsonProperty("command", jsonArray(
 *                         "echo", 
 *                         "test"
 *                     )),
 *                     jsonProperty("image", "busybox"),
 *                     jsonProperty("jobRoleArn", "arn:aws:iam::123456789012:role/AWSBatchS3ReadOnly"),
 *                     jsonProperty("fargatePlatformConfiguration", jsonObject(
 *                         jsonProperty("platformVersion", "LATEST")
 *                     )),
 *                     jsonProperty("resourceRequirements", jsonArray(
 *                         jsonObject(
 *                             jsonProperty("type", "VCPU"),
 *                             jsonProperty("value", "0.25")
 *                         ), 
 *                         jsonObject(
 *                             jsonProperty("type", "MEMORY"),
 *                             jsonProperty("value", "512")
 *                         )
 *                     )),
 *                     jsonProperty("executionRoleArn", _arn)
 *                 ))))
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ### Job definition of type container using `ecs_properties`
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.aws.batch.JobDefinition;
 * import com.pulumi.aws.batch.JobDefinitionArgs;
 * import static com.pulumi.codegen.internal.Serialization.*;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var test = new JobDefinition("test", JobDefinitionArgs.builder()
 *             .name("my_test_batch_job_definition")
 *             .type("container")
 *             .platformCapabilities("FARGATE")
 *             .ecsProperties(serializeJson(
 *                 jsonObject(
 *                     jsonProperty("taskProperties", jsonArray(jsonObject(
 *                         jsonProperty("executionRoleArn", ecsTaskExecutionRole.arn()),
 *                         jsonProperty("containers", jsonArray(
 *                             jsonObject(
 *                                 jsonProperty("image", "public.ecr.aws/amazonlinux/amazonlinux:1"),
 *                                 jsonProperty("command", jsonArray(
 *                                     "sleep", 
 *                                     "60"
 *                                 )),
 *                                 jsonProperty("dependsOn", jsonArray(jsonObject(
 *                                     jsonProperty("containerName", "container_b"),
 *                                     jsonProperty("condition", "COMPLETE")
 *                                 ))),
 *                                 jsonProperty("secrets", jsonArray(jsonObject(
 *                                     jsonProperty("name", "TEST"),
 *                                     jsonProperty("valueFrom", "DUMMY")
 *                                 ))),
 *                                 jsonProperty("environment", jsonArray(jsonObject(
 *                                     jsonProperty("name", "test"),
 *                                     jsonProperty("value", "Environment Variable")
 *                                 ))),
 *                                 jsonProperty("essential", true),
 *                                 jsonProperty("logConfiguration", jsonObject(
 *                                     jsonProperty("logDriver", "awslogs"),
 *                                     jsonProperty("options", jsonObject(
 *                                         jsonProperty("awslogs-group", "tf_test_batch_job"),
 *                                         jsonProperty("awslogs-region", "us-west-2"),
 *                                         jsonProperty("awslogs-stream-prefix", "ecs")
 *                                     ))
 *                                 )),
 *                                 jsonProperty("name", "container_a"),
 *                                 jsonProperty("privileged", false),
 *                                 jsonProperty("readonlyRootFilesystem", false),
 *                                 jsonProperty("resourceRequirements", jsonArray(
 *                                     jsonObject(
 *                                         jsonProperty("value", "1.0"),
 *                                         jsonProperty("type", "VCPU")
 *                                     ), 
 *                                     jsonObject(
 *                                         jsonProperty("value", "2048"),
 *                                         jsonProperty("type", "MEMORY")
 *                                     )
 *                                 ))
 *                             ), 
 *                             jsonObject(
 *                                 jsonProperty("image", "public.ecr.aws/amazonlinux/amazonlinux:1"),
 *                                 jsonProperty("command", jsonArray(
 *                                     "sleep", 
 *                                     "360"
 *                                 )),
 *                                 jsonProperty("name", "container_b"),
 *                                 jsonProperty("essential", false),
 *                                 jsonProperty("resourceRequirements", jsonArray(
 *                                     jsonObject(
 *                                         jsonProperty("value", "1.0"),
 *                                         jsonProperty("type", "VCPU")
 *                                     ), 
 *                                     jsonObject(
 *                                         jsonProperty("value", "2048"),
 *                                         jsonProperty("type", "MEMORY")
 *                                     )
 *                                 ))
 *                             )
 *                         ))
 *                     )))
 *                 )))
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Using `pulumi import`, import Batch Job Definition using the `arn`. For example:
 * 
 * ```sh
 * $ pulumi import aws:batch/jobDefinition:JobDefinition test arn:aws:batch:us-east-1:123456789012:job-definition/sample
 * ```
 * 
 */
@ResourceType(type="aws:batch/jobDefinition:JobDefinition")
public class JobDefinition extends com.pulumi.resources.CustomResource {
    /**
     * ARN of the job definition, includes revision (`:#`).
     * 
     */
    @Export(name="arn", refs={String.class}, tree="[0]")
    private Output<String> arn;

    /**
     * @return ARN of the job definition, includes revision (`:#`).
     * 
     */
    public Output<String> arn() {
        return this.arn;
    }
    /**
     * ARN without the revision number.
     * 
     */
    @Export(name="arnPrefix", refs={String.class}, tree="[0]")
    private Output<String> arnPrefix;

    /**
     * @return ARN without the revision number.
     * 
     */
    public Output<String> arnPrefix() {
        return this.arnPrefix;
    }
    /**
     * Valid [container properties](http://docs.aws.amazon.com/batch/latest/APIReference/API_RegisterJobDefinition.html) provided as a single valid JSON document. This parameter is only valid if the `type` parameter is `container`.
     * 
     */
    @Export(name="containerProperties", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> containerProperties;

    /**
     * @return Valid [container properties](http://docs.aws.amazon.com/batch/latest/APIReference/API_RegisterJobDefinition.html) provided as a single valid JSON document. This parameter is only valid if the `type` parameter is `container`.
     * 
     */
    public Output<Optional<String>> containerProperties() {
        return Codegen.optional(this.containerProperties);
    }
    /**
     * When updating a job definition a new revision is created. This parameter determines if the previous version is `deregistered` (`INACTIVE`) or left  `ACTIVE`. Defaults to `true`.
     * 
     */
    @Export(name="deregisterOnNewRevision", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> deregisterOnNewRevision;

    /**
     * @return When updating a job definition a new revision is created. This parameter determines if the previous version is `deregistered` (`INACTIVE`) or left  `ACTIVE`. Defaults to `true`.
     * 
     */
    public Output<Optional<Boolean>> deregisterOnNewRevision() {
        return Codegen.optional(this.deregisterOnNewRevision);
    }
    /**
     * Valid [ECS properties](http://docs.aws.amazon.com/batch/latest/APIReference/API_RegisterJobDefinition.html) provided as a single valid JSON document. This parameter is only valid if the `type` parameter is `container`.
     * 
     */
    @Export(name="ecsProperties", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ecsProperties;

    /**
     * @return Valid [ECS properties](http://docs.aws.amazon.com/batch/latest/APIReference/API_RegisterJobDefinition.html) provided as a single valid JSON document. This parameter is only valid if the `type` parameter is `container`.
     * 
     */
    public Output<Optional<String>> ecsProperties() {
        return Codegen.optional(this.ecsProperties);
    }
    /**
     * Valid eks properties. This parameter is only valid if the `type` parameter is `container`.
     * 
     */
    @Export(name="eksProperties", refs={JobDefinitionEksProperties.class}, tree="[0]")
    private Output</* @Nullable */ JobDefinitionEksProperties> eksProperties;

    /**
     * @return Valid eks properties. This parameter is only valid if the `type` parameter is `container`.
     * 
     */
    public Output<Optional<JobDefinitionEksProperties>> eksProperties() {
        return Codegen.optional(this.eksProperties);
    }
    /**
     * Name of the job definition.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of the job definition.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Valid [node properties](http://docs.aws.amazon.com/batch/latest/APIReference/API_RegisterJobDefinition.html) provided as a single valid JSON document. This parameter is required if the `type` parameter is `multinode`.
     * 
     */
    @Export(name="nodeProperties", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> nodeProperties;

    /**
     * @return Valid [node properties](http://docs.aws.amazon.com/batch/latest/APIReference/API_RegisterJobDefinition.html) provided as a single valid JSON document. This parameter is required if the `type` parameter is `multinode`.
     * 
     */
    public Output<Optional<String>> nodeProperties() {
        return Codegen.optional(this.nodeProperties);
    }
    /**
     * Parameter substitution placeholders to set in the job definition.
     * 
     */
    @Export(name="parameters", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> parameters;

    /**
     * @return Parameter substitution placeholders to set in the job definition.
     * 
     */
    public Output<Optional<Map<String,String>>> parameters() {
        return Codegen.optional(this.parameters);
    }
    /**
     * Platform capabilities required by the job definition. If no value is specified, it defaults to `EC2`. To run the job on Fargate resources, specify `FARGATE`.
     * 
     */
    @Export(name="platformCapabilities", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> platformCapabilities;

    /**
     * @return Platform capabilities required by the job definition. If no value is specified, it defaults to `EC2`. To run the job on Fargate resources, specify `FARGATE`.
     * 
     */
    public Output<Optional<List<String>>> platformCapabilities() {
        return Codegen.optional(this.platformCapabilities);
    }
    /**
     * Whether to propagate the tags from the job definition to the corresponding Amazon ECS task. Default is `false`.
     * 
     */
    @Export(name="propagateTags", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> propagateTags;

    /**
     * @return Whether to propagate the tags from the job definition to the corresponding Amazon ECS task. Default is `false`.
     * 
     */
    public Output<Optional<Boolean>> propagateTags() {
        return Codegen.optional(this.propagateTags);
    }
    /**
     * Retry strategy to use for failed jobs that are submitted with this job definition. Maximum number of `retry_strategy` is `1`.  Defined below.
     * 
     */
    @Export(name="retryStrategy", refs={JobDefinitionRetryStrategy.class}, tree="[0]")
    private Output</* @Nullable */ JobDefinitionRetryStrategy> retryStrategy;

    /**
     * @return Retry strategy to use for failed jobs that are submitted with this job definition. Maximum number of `retry_strategy` is `1`.  Defined below.
     * 
     */
    public Output<Optional<JobDefinitionRetryStrategy>> retryStrategy() {
        return Codegen.optional(this.retryStrategy);
    }
    /**
     * Revision of the job definition.
     * 
     */
    @Export(name="revision", refs={Integer.class}, tree="[0]")
    private Output<Integer> revision;

    /**
     * @return Revision of the job definition.
     * 
     */
    public Output<Integer> revision() {
        return this.revision;
    }
    /**
     * Scheduling priority of the job definition. This only affects jobs in job queues with a fair share policy. Jobs with a higher scheduling priority are scheduled before jobs with a lower scheduling priority. Allowed values `0` through `9999`.
     * 
     */
    @Export(name="schedulingPriority", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> schedulingPriority;

    /**
     * @return Scheduling priority of the job definition. This only affects jobs in job queues with a fair share policy. Jobs with a higher scheduling priority are scheduled before jobs with a lower scheduling priority. Allowed values `0` through `9999`.
     * 
     */
    public Output<Optional<Integer>> schedulingPriority() {
        return Codegen.optional(this.schedulingPriority);
    }
    /**
     * Key-value map of resource tags. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Export(name="tags", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return Key-value map of resource tags. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Output<Optional<Map<String,String>>> tags() {
        return Codegen.optional(this.tags);
    }
    /**
     * Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @Export(name="tagsAll", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> tagsAll;

    /**
     * @return Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     */
    public Output<Map<String,String>> tagsAll() {
        return this.tagsAll;
    }
    /**
     * Timeout for jobs so that if a job runs longer, AWS Batch terminates the job. Maximum number of `timeout` is `1`. Defined below.
     * 
     */
    @Export(name="timeout", refs={JobDefinitionTimeout.class}, tree="[0]")
    private Output</* @Nullable */ JobDefinitionTimeout> timeout;

    /**
     * @return Timeout for jobs so that if a job runs longer, AWS Batch terminates the job. Maximum number of `timeout` is `1`. Defined below.
     * 
     */
    public Output<Optional<JobDefinitionTimeout>> timeout() {
        return Codegen.optional(this.timeout);
    }
    /**
     * Type of job definition. Must be `container` or `multinode`.
     * 
     * The following arguments are optional:
     * 
     */
    @Export(name="type", refs={String.class}, tree="[0]")
    private Output<String> type;

    /**
     * @return Type of job definition. Must be `container` or `multinode`.
     * 
     * The following arguments are optional:
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public JobDefinition(java.lang.String name) {
        this(name, JobDefinitionArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public JobDefinition(java.lang.String name, JobDefinitionArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public JobDefinition(java.lang.String name, JobDefinitionArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("aws:batch/jobDefinition:JobDefinition", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private JobDefinition(java.lang.String name, Output<java.lang.String> id, @Nullable JobDefinitionState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("aws:batch/jobDefinition:JobDefinition", name, state, makeResourceOptions(options, id), false);
    }

    private static JobDefinitionArgs makeArgs(JobDefinitionArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? JobDefinitionArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static JobDefinition get(java.lang.String name, Output<java.lang.String> id, @Nullable JobDefinitionState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new JobDefinition(name, id, state, options);
    }
}
