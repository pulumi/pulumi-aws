// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.inputs;

import com.pulumi.aws.quicksight.inputs.VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VisualsPivotTableVisualConditionalFormattingArgs extends com.pulumi.resources.ResourceArgs {

    public static final VisualsPivotTableVisualConditionalFormattingArgs Empty = new VisualsPivotTableVisualConditionalFormattingArgs();

    @Import(name="conditionalFormattingOptions")
    private @Nullable Output<List<VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionArgs>> conditionalFormattingOptions;

    public Optional<Output<List<VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionArgs>>> conditionalFormattingOptions() {
        return Optional.ofNullable(this.conditionalFormattingOptions);
    }

    private VisualsPivotTableVisualConditionalFormattingArgs() {}

    private VisualsPivotTableVisualConditionalFormattingArgs(VisualsPivotTableVisualConditionalFormattingArgs $) {
        this.conditionalFormattingOptions = $.conditionalFormattingOptions;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VisualsPivotTableVisualConditionalFormattingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VisualsPivotTableVisualConditionalFormattingArgs $;

        public Builder() {
            $ = new VisualsPivotTableVisualConditionalFormattingArgs();
        }

        public Builder(VisualsPivotTableVisualConditionalFormattingArgs defaults) {
            $ = new VisualsPivotTableVisualConditionalFormattingArgs(Objects.requireNonNull(defaults));
        }

        public Builder conditionalFormattingOptions(@Nullable Output<List<VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionArgs>> conditionalFormattingOptions) {
            $.conditionalFormattingOptions = conditionalFormattingOptions;
            return this;
        }

        public Builder conditionalFormattingOptions(List<VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionArgs> conditionalFormattingOptions) {
            return conditionalFormattingOptions(Output.of(conditionalFormattingOptions));
        }

        public Builder conditionalFormattingOptions(VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionArgs... conditionalFormattingOptions) {
            return conditionalFormattingOptions(List.of(conditionalFormattingOptions));
        }

        public VisualsPivotTableVisualConditionalFormattingArgs build() {
            return $;
        }
    }

}
