// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.directconnect.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetLocationResult {
    /**
     * @return The available MAC Security (MACsec) port speeds for the location.
     * 
     */
    private List<String> availableMacsecPortSpeeds;
    /**
     * @return The available port speeds for the location.
     * 
     */
    private List<String> availablePortSpeeds;
    /**
     * @return Names of the service providers for the location.
     * 
     */
    private List<String> availableProviders;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String locationCode;
    /**
     * @return Name of the location. This includes the name of the colocation partner and the physical site of the building.
     * 
     */
    private String locationName;

    private GetLocationResult() {}
    /**
     * @return The available MAC Security (MACsec) port speeds for the location.
     * 
     */
    public List<String> availableMacsecPortSpeeds() {
        return this.availableMacsecPortSpeeds;
    }
    /**
     * @return The available port speeds for the location.
     * 
     */
    public List<String> availablePortSpeeds() {
        return this.availablePortSpeeds;
    }
    /**
     * @return Names of the service providers for the location.
     * 
     */
    public List<String> availableProviders() {
        return this.availableProviders;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String locationCode() {
        return this.locationCode;
    }
    /**
     * @return Name of the location. This includes the name of the colocation partner and the physical site of the building.
     * 
     */
    public String locationName() {
        return this.locationName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetLocationResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> availableMacsecPortSpeeds;
        private List<String> availablePortSpeeds;
        private List<String> availableProviders;
        private String id;
        private String locationCode;
        private String locationName;
        public Builder() {}
        public Builder(GetLocationResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.availableMacsecPortSpeeds = defaults.availableMacsecPortSpeeds;
    	      this.availablePortSpeeds = defaults.availablePortSpeeds;
    	      this.availableProviders = defaults.availableProviders;
    	      this.id = defaults.id;
    	      this.locationCode = defaults.locationCode;
    	      this.locationName = defaults.locationName;
        }

        @CustomType.Setter
        public Builder availableMacsecPortSpeeds(List<String> availableMacsecPortSpeeds) {
            if (availableMacsecPortSpeeds == null) {
              throw new MissingRequiredPropertyException("GetLocationResult", "availableMacsecPortSpeeds");
            }
            this.availableMacsecPortSpeeds = availableMacsecPortSpeeds;
            return this;
        }
        public Builder availableMacsecPortSpeeds(String... availableMacsecPortSpeeds) {
            return availableMacsecPortSpeeds(List.of(availableMacsecPortSpeeds));
        }
        @CustomType.Setter
        public Builder availablePortSpeeds(List<String> availablePortSpeeds) {
            if (availablePortSpeeds == null) {
              throw new MissingRequiredPropertyException("GetLocationResult", "availablePortSpeeds");
            }
            this.availablePortSpeeds = availablePortSpeeds;
            return this;
        }
        public Builder availablePortSpeeds(String... availablePortSpeeds) {
            return availablePortSpeeds(List.of(availablePortSpeeds));
        }
        @CustomType.Setter
        public Builder availableProviders(List<String> availableProviders) {
            if (availableProviders == null) {
              throw new MissingRequiredPropertyException("GetLocationResult", "availableProviders");
            }
            this.availableProviders = availableProviders;
            return this;
        }
        public Builder availableProviders(String... availableProviders) {
            return availableProviders(List.of(availableProviders));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetLocationResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder locationCode(String locationCode) {
            if (locationCode == null) {
              throw new MissingRequiredPropertyException("GetLocationResult", "locationCode");
            }
            this.locationCode = locationCode;
            return this;
        }
        @CustomType.Setter
        public Builder locationName(String locationName) {
            if (locationName == null) {
              throw new MissingRequiredPropertyException("GetLocationResult", "locationName");
            }
            this.locationName = locationName;
            return this;
        }
        public GetLocationResult build() {
            final var _resultValue = new GetLocationResult();
            _resultValue.availableMacsecPortSpeeds = availableMacsecPortSpeeds;
            _resultValue.availablePortSpeeds = availablePortSpeeds;
            _resultValue.availableProviders = availableProviders;
            _resultValue.id = id;
            _resultValue.locationCode = locationCode;
            _resultValue.locationName = locationName;
            return _resultValue;
        }
    }
}
