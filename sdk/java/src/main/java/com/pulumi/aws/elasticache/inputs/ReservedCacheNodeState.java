// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.elasticache.inputs;

import com.pulumi.aws.elasticache.inputs.ReservedCacheNodeRecurringChargeArgs;
import com.pulumi.aws.elasticache.inputs.ReservedCacheNodeTimeoutsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ReservedCacheNodeState extends com.pulumi.resources.ResourceArgs {

    public static final ReservedCacheNodeState Empty = new ReservedCacheNodeState();

    /**
     * ARN for the reserved cache node.
     * 
     */
    @Import(name="arn")
    private @Nullable Output<String> arn;

    /**
     * @return ARN for the reserved cache node.
     * 
     */
    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    @Import(name="cacheNodeCount")
    private @Nullable Output<Double> cacheNodeCount;

    public Optional<Output<Double>> cacheNodeCount() {
        return Optional.ofNullable(this.cacheNodeCount);
    }

    /**
     * Node type for the reserved cache nodes.
     * 
     */
    @Import(name="cacheNodeType")
    private @Nullable Output<String> cacheNodeType;

    /**
     * @return Node type for the reserved cache nodes.
     * 
     */
    public Optional<Output<String>> cacheNodeType() {
        return Optional.ofNullable(this.cacheNodeType);
    }

    /**
     * Duration of the reservation as an RFC3339 duration.
     * 
     */
    @Import(name="duration")
    private @Nullable Output<String> duration;

    /**
     * @return Duration of the reservation as an RFC3339 duration.
     * 
     */
    public Optional<Output<String>> duration() {
        return Optional.ofNullable(this.duration);
    }

    /**
     * Fixed price charged for this reserved cache node.
     * 
     */
    @Import(name="fixedPrice")
    private @Nullable Output<Double> fixedPrice;

    /**
     * @return Fixed price charged for this reserved cache node.
     * 
     */
    public Optional<Output<Double>> fixedPrice() {
        return Optional.ofNullable(this.fixedPrice);
    }

    /**
     * Offering type of this reserved cache node.
     * 
     */
    @Import(name="offeringType")
    private @Nullable Output<String> offeringType;

    /**
     * @return Offering type of this reserved cache node.
     * 
     */
    public Optional<Output<String>> offeringType() {
        return Optional.ofNullable(this.offeringType);
    }

    /**
     * Engine type for the reserved cache node.
     * 
     */
    @Import(name="productDescription")
    private @Nullable Output<String> productDescription;

    /**
     * @return Engine type for the reserved cache node.
     * 
     */
    public Optional<Output<String>> productDescription() {
        return Optional.ofNullable(this.productDescription);
    }

    /**
     * Recurring price charged to run this reserved cache node.
     * 
     */
    @Import(name="recurringCharges")
    private @Nullable Output<List<ReservedCacheNodeRecurringChargeArgs>> recurringCharges;

    /**
     * @return Recurring price charged to run this reserved cache node.
     * 
     */
    public Optional<Output<List<ReservedCacheNodeRecurringChargeArgs>>> recurringCharges() {
        return Optional.ofNullable(this.recurringCharges);
    }

    /**
     * ID of the reserved cache node offering to purchase.
     * To determine an `reserved_cache_nodes_offering_id`, see the `aws.elasticache.getReservedCacheNodeOffering` data source.
     * 
     * The following arguments are optional:
     * 
     */
    @Import(name="reservedCacheNodesOfferingId")
    private @Nullable Output<String> reservedCacheNodesOfferingId;

    /**
     * @return ID of the reserved cache node offering to purchase.
     * To determine an `reserved_cache_nodes_offering_id`, see the `aws.elasticache.getReservedCacheNodeOffering` data source.
     * 
     * The following arguments are optional:
     * 
     */
    public Optional<Output<String>> reservedCacheNodesOfferingId() {
        return Optional.ofNullable(this.reservedCacheNodesOfferingId);
    }

    /**
     * Time the reservation started.
     * 
     */
    @Import(name="startTime")
    private @Nullable Output<String> startTime;

    /**
     * @return Time the reservation started.
     * 
     */
    public Optional<Output<String>> startTime() {
        return Optional.ofNullable(this.startTime);
    }

    /**
     * State of the reserved cache node.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return State of the reserved cache node.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * Map of tags to assign to the reservation. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Map of tags to assign to the reservation. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    /**
     * @return Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    @Import(name="timeouts")
    private @Nullable Output<ReservedCacheNodeTimeoutsArgs> timeouts;

    public Optional<Output<ReservedCacheNodeTimeoutsArgs>> timeouts() {
        return Optional.ofNullable(this.timeouts);
    }

    /**
     * Hourly price charged for this reserved cache node.
     * 
     */
    @Import(name="usagePrice")
    private @Nullable Output<Double> usagePrice;

    /**
     * @return Hourly price charged for this reserved cache node.
     * 
     */
    public Optional<Output<Double>> usagePrice() {
        return Optional.ofNullable(this.usagePrice);
    }

    private ReservedCacheNodeState() {}

    private ReservedCacheNodeState(ReservedCacheNodeState $) {
        this.arn = $.arn;
        this.cacheNodeCount = $.cacheNodeCount;
        this.cacheNodeType = $.cacheNodeType;
        this.duration = $.duration;
        this.fixedPrice = $.fixedPrice;
        this.offeringType = $.offeringType;
        this.productDescription = $.productDescription;
        this.recurringCharges = $.recurringCharges;
        this.reservedCacheNodesOfferingId = $.reservedCacheNodesOfferingId;
        this.startTime = $.startTime;
        this.state = $.state;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
        this.timeouts = $.timeouts;
        this.usagePrice = $.usagePrice;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ReservedCacheNodeState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ReservedCacheNodeState $;

        public Builder() {
            $ = new ReservedCacheNodeState();
        }

        public Builder(ReservedCacheNodeState defaults) {
            $ = new ReservedCacheNodeState(Objects.requireNonNull(defaults));
        }

        /**
         * @param arn ARN for the reserved cache node.
         * 
         * @return builder
         * 
         */
        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        /**
         * @param arn ARN for the reserved cache node.
         * 
         * @return builder
         * 
         */
        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        public Builder cacheNodeCount(@Nullable Output<Double> cacheNodeCount) {
            $.cacheNodeCount = cacheNodeCount;
            return this;
        }

        public Builder cacheNodeCount(Double cacheNodeCount) {
            return cacheNodeCount(Output.of(cacheNodeCount));
        }

        /**
         * @param cacheNodeType Node type for the reserved cache nodes.
         * 
         * @return builder
         * 
         */
        public Builder cacheNodeType(@Nullable Output<String> cacheNodeType) {
            $.cacheNodeType = cacheNodeType;
            return this;
        }

        /**
         * @param cacheNodeType Node type for the reserved cache nodes.
         * 
         * @return builder
         * 
         */
        public Builder cacheNodeType(String cacheNodeType) {
            return cacheNodeType(Output.of(cacheNodeType));
        }

        /**
         * @param duration Duration of the reservation as an RFC3339 duration.
         * 
         * @return builder
         * 
         */
        public Builder duration(@Nullable Output<String> duration) {
            $.duration = duration;
            return this;
        }

        /**
         * @param duration Duration of the reservation as an RFC3339 duration.
         * 
         * @return builder
         * 
         */
        public Builder duration(String duration) {
            return duration(Output.of(duration));
        }

        /**
         * @param fixedPrice Fixed price charged for this reserved cache node.
         * 
         * @return builder
         * 
         */
        public Builder fixedPrice(@Nullable Output<Double> fixedPrice) {
            $.fixedPrice = fixedPrice;
            return this;
        }

        /**
         * @param fixedPrice Fixed price charged for this reserved cache node.
         * 
         * @return builder
         * 
         */
        public Builder fixedPrice(Double fixedPrice) {
            return fixedPrice(Output.of(fixedPrice));
        }

        /**
         * @param offeringType Offering type of this reserved cache node.
         * 
         * @return builder
         * 
         */
        public Builder offeringType(@Nullable Output<String> offeringType) {
            $.offeringType = offeringType;
            return this;
        }

        /**
         * @param offeringType Offering type of this reserved cache node.
         * 
         * @return builder
         * 
         */
        public Builder offeringType(String offeringType) {
            return offeringType(Output.of(offeringType));
        }

        /**
         * @param productDescription Engine type for the reserved cache node.
         * 
         * @return builder
         * 
         */
        public Builder productDescription(@Nullable Output<String> productDescription) {
            $.productDescription = productDescription;
            return this;
        }

        /**
         * @param productDescription Engine type for the reserved cache node.
         * 
         * @return builder
         * 
         */
        public Builder productDescription(String productDescription) {
            return productDescription(Output.of(productDescription));
        }

        /**
         * @param recurringCharges Recurring price charged to run this reserved cache node.
         * 
         * @return builder
         * 
         */
        public Builder recurringCharges(@Nullable Output<List<ReservedCacheNodeRecurringChargeArgs>> recurringCharges) {
            $.recurringCharges = recurringCharges;
            return this;
        }

        /**
         * @param recurringCharges Recurring price charged to run this reserved cache node.
         * 
         * @return builder
         * 
         */
        public Builder recurringCharges(List<ReservedCacheNodeRecurringChargeArgs> recurringCharges) {
            return recurringCharges(Output.of(recurringCharges));
        }

        /**
         * @param recurringCharges Recurring price charged to run this reserved cache node.
         * 
         * @return builder
         * 
         */
        public Builder recurringCharges(ReservedCacheNodeRecurringChargeArgs... recurringCharges) {
            return recurringCharges(List.of(recurringCharges));
        }

        /**
         * @param reservedCacheNodesOfferingId ID of the reserved cache node offering to purchase.
         * To determine an `reserved_cache_nodes_offering_id`, see the `aws.elasticache.getReservedCacheNodeOffering` data source.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder reservedCacheNodesOfferingId(@Nullable Output<String> reservedCacheNodesOfferingId) {
            $.reservedCacheNodesOfferingId = reservedCacheNodesOfferingId;
            return this;
        }

        /**
         * @param reservedCacheNodesOfferingId ID of the reserved cache node offering to purchase.
         * To determine an `reserved_cache_nodes_offering_id`, see the `aws.elasticache.getReservedCacheNodeOffering` data source.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder reservedCacheNodesOfferingId(String reservedCacheNodesOfferingId) {
            return reservedCacheNodesOfferingId(Output.of(reservedCacheNodesOfferingId));
        }

        /**
         * @param startTime Time the reservation started.
         * 
         * @return builder
         * 
         */
        public Builder startTime(@Nullable Output<String> startTime) {
            $.startTime = startTime;
            return this;
        }

        /**
         * @param startTime Time the reservation started.
         * 
         * @return builder
         * 
         */
        public Builder startTime(String startTime) {
            return startTime(Output.of(startTime));
        }

        /**
         * @param state State of the reserved cache node.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state State of the reserved cache node.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param tags Map of tags to assign to the reservation. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Map of tags to assign to the reservation. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tagsAll Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
         * 
         * @return builder
         * 
         * @deprecated
         * Please use `tags` instead.
         * 
         */
        @Deprecated /* Please use `tags` instead. */
        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        /**
         * @param tagsAll Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
         * 
         * @return builder
         * 
         * @deprecated
         * Please use `tags` instead.
         * 
         */
        @Deprecated /* Please use `tags` instead. */
        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        public Builder timeouts(@Nullable Output<ReservedCacheNodeTimeoutsArgs> timeouts) {
            $.timeouts = timeouts;
            return this;
        }

        public Builder timeouts(ReservedCacheNodeTimeoutsArgs timeouts) {
            return timeouts(Output.of(timeouts));
        }

        /**
         * @param usagePrice Hourly price charged for this reserved cache node.
         * 
         * @return builder
         * 
         */
        public Builder usagePrice(@Nullable Output<Double> usagePrice) {
            $.usagePrice = usagePrice;
            return this;
        }

        /**
         * @param usagePrice Hourly price charged for this reserved cache node.
         * 
         * @return builder
         * 
         */
        public Builder usagePrice(Double usagePrice) {
            return usagePrice(Output.of(usagePrice));
        }

        public ReservedCacheNodeState build() {
            return $;
        }
    }

}
