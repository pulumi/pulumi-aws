// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.servicediscovery.inputs;

import com.pulumi.aws.servicediscovery.inputs.ServiceDnsConfigDnsRecordArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceDnsConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceDnsConfigArgs Empty = new ServiceDnsConfigArgs();

    /**
     * An array that contains one DnsRecord object for each resource record set.
     * 
     */
    @Import(name="dnsRecords", required=true)
    private Output<List<ServiceDnsConfigDnsRecordArgs>> dnsRecords;

    /**
     * @return An array that contains one DnsRecord object for each resource record set.
     * 
     */
    public Output<List<ServiceDnsConfigDnsRecordArgs>> dnsRecords() {
        return this.dnsRecords;
    }

    /**
     * The ID of the namespace to use for DNS configuration.
     * 
     */
    @Import(name="namespaceId", required=true)
    private Output<String> namespaceId;

    /**
     * @return The ID of the namespace to use for DNS configuration.
     * 
     */
    public Output<String> namespaceId() {
        return this.namespaceId;
    }

    /**
     * The routing policy that you want to apply to all records that Route 53 creates when you register an instance and specify the service. Valid Values: MULTIVALUE, WEIGHTED
     * 
     */
    @Import(name="routingPolicy")
    private @Nullable Output<String> routingPolicy;

    /**
     * @return The routing policy that you want to apply to all records that Route 53 creates when you register an instance and specify the service. Valid Values: MULTIVALUE, WEIGHTED
     * 
     */
    public Optional<Output<String>> routingPolicy() {
        return Optional.ofNullable(this.routingPolicy);
    }

    private ServiceDnsConfigArgs() {}

    private ServiceDnsConfigArgs(ServiceDnsConfigArgs $) {
        this.dnsRecords = $.dnsRecords;
        this.namespaceId = $.namespaceId;
        this.routingPolicy = $.routingPolicy;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceDnsConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceDnsConfigArgs $;

        public Builder() {
            $ = new ServiceDnsConfigArgs();
        }

        public Builder(ServiceDnsConfigArgs defaults) {
            $ = new ServiceDnsConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dnsRecords An array that contains one DnsRecord object for each resource record set.
         * 
         * @return builder
         * 
         */
        public Builder dnsRecords(Output<List<ServiceDnsConfigDnsRecordArgs>> dnsRecords) {
            $.dnsRecords = dnsRecords;
            return this;
        }

        /**
         * @param dnsRecords An array that contains one DnsRecord object for each resource record set.
         * 
         * @return builder
         * 
         */
        public Builder dnsRecords(List<ServiceDnsConfigDnsRecordArgs> dnsRecords) {
            return dnsRecords(Output.of(dnsRecords));
        }

        /**
         * @param dnsRecords An array that contains one DnsRecord object for each resource record set.
         * 
         * @return builder
         * 
         */
        public Builder dnsRecords(ServiceDnsConfigDnsRecordArgs... dnsRecords) {
            return dnsRecords(List.of(dnsRecords));
        }

        /**
         * @param namespaceId The ID of the namespace to use for DNS configuration.
         * 
         * @return builder
         * 
         */
        public Builder namespaceId(Output<String> namespaceId) {
            $.namespaceId = namespaceId;
            return this;
        }

        /**
         * @param namespaceId The ID of the namespace to use for DNS configuration.
         * 
         * @return builder
         * 
         */
        public Builder namespaceId(String namespaceId) {
            return namespaceId(Output.of(namespaceId));
        }

        /**
         * @param routingPolicy The routing policy that you want to apply to all records that Route 53 creates when you register an instance and specify the service. Valid Values: MULTIVALUE, WEIGHTED
         * 
         * @return builder
         * 
         */
        public Builder routingPolicy(@Nullable Output<String> routingPolicy) {
            $.routingPolicy = routingPolicy;
            return this;
        }

        /**
         * @param routingPolicy The routing policy that you want to apply to all records that Route 53 creates when you register an instance and specify the service. Valid Values: MULTIVALUE, WEIGHTED
         * 
         * @return builder
         * 
         */
        public Builder routingPolicy(String routingPolicy) {
            return routingPolicy(Output.of(routingPolicy));
        }

        public ServiceDnsConfigArgs build() {
            $.dnsRecords = Objects.requireNonNull($.dnsRecords, "expected parameter 'dnsRecords' to be non-null");
            $.namespaceId = Objects.requireNonNull($.namespaceId, "expected parameter 'namespaceId' to be non-null");
            return $;
        }
    }

}
