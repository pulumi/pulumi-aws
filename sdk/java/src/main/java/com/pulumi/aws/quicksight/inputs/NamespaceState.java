// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.inputs;

import com.pulumi.aws.quicksight.inputs.NamespaceTimeoutsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NamespaceState extends com.pulumi.resources.ResourceArgs {

    public static final NamespaceState Empty = new NamespaceState();

    /**
     * ARN of the Namespace.
     * 
     */
    @Import(name="arn")
    private @Nullable Output<String> arn;

    /**
     * @return ARN of the Namespace.
     * 
     */
    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    /**
     * AWS account ID.
     * 
     */
    @Import(name="awsAccountId")
    private @Nullable Output<String> awsAccountId;

    /**
     * @return AWS account ID.
     * 
     */
    public Optional<Output<String>> awsAccountId() {
        return Optional.ofNullable(this.awsAccountId);
    }

    /**
     * Namespace AWS Region.
     * 
     */
    @Import(name="capacityRegion")
    private @Nullable Output<String> capacityRegion;

    /**
     * @return Namespace AWS Region.
     * 
     */
    public Optional<Output<String>> capacityRegion() {
        return Optional.ofNullable(this.capacityRegion);
    }

    /**
     * Creation status of the namespace.
     * 
     */
    @Import(name="creationStatus")
    private @Nullable Output<String> creationStatus;

    /**
     * @return Creation status of the namespace.
     * 
     */
    public Optional<Output<String>> creationStatus() {
        return Optional.ofNullable(this.creationStatus);
    }

    /**
     * User identity directory type. Defaults to `QUICKSIGHT`, the only current valid value.
     * 
     */
    @Import(name="identityStore")
    private @Nullable Output<String> identityStore;

    /**
     * @return User identity directory type. Defaults to `QUICKSIGHT`, the only current valid value.
     * 
     */
    public Optional<Output<String>> identityStore() {
        return Optional.ofNullable(this.identityStore);
    }

    /**
     * Name of the namespace.
     * 
     * The following arguments are optional:
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return Name of the namespace.
     * 
     * The following arguments are optional:
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    /**
     * @return A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    @Import(name="timeouts")
    private @Nullable Output<NamespaceTimeoutsArgs> timeouts;

    public Optional<Output<NamespaceTimeoutsArgs>> timeouts() {
        return Optional.ofNullable(this.timeouts);
    }

    private NamespaceState() {}

    private NamespaceState(NamespaceState $) {
        this.arn = $.arn;
        this.awsAccountId = $.awsAccountId;
        this.capacityRegion = $.capacityRegion;
        this.creationStatus = $.creationStatus;
        this.identityStore = $.identityStore;
        this.namespace = $.namespace;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
        this.timeouts = $.timeouts;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NamespaceState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NamespaceState $;

        public Builder() {
            $ = new NamespaceState();
        }

        public Builder(NamespaceState defaults) {
            $ = new NamespaceState(Objects.requireNonNull(defaults));
        }

        /**
         * @param arn ARN of the Namespace.
         * 
         * @return builder
         * 
         */
        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        /**
         * @param arn ARN of the Namespace.
         * 
         * @return builder
         * 
         */
        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        /**
         * @param awsAccountId AWS account ID.
         * 
         * @return builder
         * 
         */
        public Builder awsAccountId(@Nullable Output<String> awsAccountId) {
            $.awsAccountId = awsAccountId;
            return this;
        }

        /**
         * @param awsAccountId AWS account ID.
         * 
         * @return builder
         * 
         */
        public Builder awsAccountId(String awsAccountId) {
            return awsAccountId(Output.of(awsAccountId));
        }

        /**
         * @param capacityRegion Namespace AWS Region.
         * 
         * @return builder
         * 
         */
        public Builder capacityRegion(@Nullable Output<String> capacityRegion) {
            $.capacityRegion = capacityRegion;
            return this;
        }

        /**
         * @param capacityRegion Namespace AWS Region.
         * 
         * @return builder
         * 
         */
        public Builder capacityRegion(String capacityRegion) {
            return capacityRegion(Output.of(capacityRegion));
        }

        /**
         * @param creationStatus Creation status of the namespace.
         * 
         * @return builder
         * 
         */
        public Builder creationStatus(@Nullable Output<String> creationStatus) {
            $.creationStatus = creationStatus;
            return this;
        }

        /**
         * @param creationStatus Creation status of the namespace.
         * 
         * @return builder
         * 
         */
        public Builder creationStatus(String creationStatus) {
            return creationStatus(Output.of(creationStatus));
        }

        /**
         * @param identityStore User identity directory type. Defaults to `QUICKSIGHT`, the only current valid value.
         * 
         * @return builder
         * 
         */
        public Builder identityStore(@Nullable Output<String> identityStore) {
            $.identityStore = identityStore;
            return this;
        }

        /**
         * @param identityStore User identity directory type. Defaults to `QUICKSIGHT`, the only current valid value.
         * 
         * @return builder
         * 
         */
        public Builder identityStore(String identityStore) {
            return identityStore(Output.of(identityStore));
        }

        /**
         * @param namespace Name of the namespace.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace Name of the namespace.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param tags Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tagsAll A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
         * 
         * @return builder
         * 
         * @deprecated
         * Please use `tags` instead.
         * 
         */
        @Deprecated /* Please use `tags` instead. */
        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        /**
         * @param tagsAll A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
         * 
         * @return builder
         * 
         * @deprecated
         * Please use `tags` instead.
         * 
         */
        @Deprecated /* Please use `tags` instead. */
        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        public Builder timeouts(@Nullable Output<NamespaceTimeoutsArgs> timeouts) {
            $.timeouts = timeouts;
            return this;
        }

        public Builder timeouts(NamespaceTimeoutsArgs timeouts) {
            return timeouts(Output.of(timeouts));
        }

        public NamespaceState build() {
            return $;
        }
    }

}
