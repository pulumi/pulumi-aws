// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.cloudwatch.inputs;

import com.pulumi.aws.cloudwatch.inputs.GetLogDataProtectionPolicyDocumentStatement;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetLogDataProtectionPolicyDocumentPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetLogDataProtectionPolicyDocumentPlainArgs Empty = new GetLogDataProtectionPolicyDocumentPlainArgs();

    @Import(name="description")
    private @Nullable String description;

    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The name of the data protection policy document.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return The name of the data protection policy document.
     * 
     */
    public String name() {
        return this.name;
    }

    /**
     * Configures the data protection policy.
     * 
     * &gt; There must be exactly two statements: the first with an `audit` operation, and the second with a `deidentify` operation.
     * 
     * The following arguments are optional:
     * 
     */
    @Import(name="statements", required=true)
    private List<GetLogDataProtectionPolicyDocumentStatement> statements;

    /**
     * @return Configures the data protection policy.
     * 
     * &gt; There must be exactly two statements: the first with an `audit` operation, and the second with a `deidentify` operation.
     * 
     * The following arguments are optional:
     * 
     */
    public List<GetLogDataProtectionPolicyDocumentStatement> statements() {
        return this.statements;
    }

    @Import(name="version")
    private @Nullable String version;

    public Optional<String> version() {
        return Optional.ofNullable(this.version);
    }

    private GetLogDataProtectionPolicyDocumentPlainArgs() {}

    private GetLogDataProtectionPolicyDocumentPlainArgs(GetLogDataProtectionPolicyDocumentPlainArgs $) {
        this.description = $.description;
        this.name = $.name;
        this.statements = $.statements;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetLogDataProtectionPolicyDocumentPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetLogDataProtectionPolicyDocumentPlainArgs $;

        public Builder() {
            $ = new GetLogDataProtectionPolicyDocumentPlainArgs();
        }

        public Builder(GetLogDataProtectionPolicyDocumentPlainArgs defaults) {
            $ = new GetLogDataProtectionPolicyDocumentPlainArgs(Objects.requireNonNull(defaults));
        }

        public Builder description(@Nullable String description) {
            $.description = description;
            return this;
        }

        /**
         * @param name The name of the data protection policy document.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        /**
         * @param statements Configures the data protection policy.
         * 
         * &gt; There must be exactly two statements: the first with an `audit` operation, and the second with a `deidentify` operation.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder statements(List<GetLogDataProtectionPolicyDocumentStatement> statements) {
            $.statements = statements;
            return this;
        }

        /**
         * @param statements Configures the data protection policy.
         * 
         * &gt; There must be exactly two statements: the first with an `audit` operation, and the second with a `deidentify` operation.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder statements(GetLogDataProtectionPolicyDocumentStatement... statements) {
            return statements(List.of(statements));
        }

        public Builder version(@Nullable String version) {
            $.version = version;
            return this;
        }

        public GetLogDataProtectionPolicyDocumentPlainArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("GetLogDataProtectionPolicyDocumentPlainArgs", "name");
            }
            if ($.statements == null) {
                throw new MissingRequiredPropertyException("GetLogDataProtectionPolicyDocumentPlainArgs", "statements");
            }
            return $;
        }
    }

}
