// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.inputs;

import com.pulumi.aws.quicksight.inputs.ColumnArgs;
import com.pulumi.aws.quicksight.inputs.FiltersTimeRangeFilterExcludePeriodConfigurationArgs;
import com.pulumi.aws.quicksight.inputs.FiltersTimeRangeFilterRangeMaximumValueArgs;
import com.pulumi.aws.quicksight.inputs.FiltersTimeRangeFilterRangeMinimumValueArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FiltersTimeRangeFilterArgs extends com.pulumi.resources.ResourceArgs {

    public static final FiltersTimeRangeFilterArgs Empty = new FiltersTimeRangeFilterArgs();

    @Import(name="column", required=true)
    private Output<ColumnArgs> column;

    public Output<ColumnArgs> column() {
        return this.column;
    }

    @Import(name="excludePeriodConfiguration")
    private @Nullable Output<FiltersTimeRangeFilterExcludePeriodConfigurationArgs> excludePeriodConfiguration;

    public Optional<Output<FiltersTimeRangeFilterExcludePeriodConfigurationArgs>> excludePeriodConfiguration() {
        return Optional.ofNullable(this.excludePeriodConfiguration);
    }

    @Import(name="filterId", required=true)
    private Output<String> filterId;

    public Output<String> filterId() {
        return this.filterId;
    }

    @Import(name="includeMaximum")
    private @Nullable Output<Boolean> includeMaximum;

    public Optional<Output<Boolean>> includeMaximum() {
        return Optional.ofNullable(this.includeMaximum);
    }

    @Import(name="includeMinimum")
    private @Nullable Output<Boolean> includeMinimum;

    public Optional<Output<Boolean>> includeMinimum() {
        return Optional.ofNullable(this.includeMinimum);
    }

    @Import(name="nullOption", required=true)
    private Output<String> nullOption;

    public Output<String> nullOption() {
        return this.nullOption;
    }

    @Import(name="rangeMaximumValue")
    private @Nullable Output<FiltersTimeRangeFilterRangeMaximumValueArgs> rangeMaximumValue;

    public Optional<Output<FiltersTimeRangeFilterRangeMaximumValueArgs>> rangeMaximumValue() {
        return Optional.ofNullable(this.rangeMaximumValue);
    }

    @Import(name="rangeMinimumValue")
    private @Nullable Output<FiltersTimeRangeFilterRangeMinimumValueArgs> rangeMinimumValue;

    public Optional<Output<FiltersTimeRangeFilterRangeMinimumValueArgs>> rangeMinimumValue() {
        return Optional.ofNullable(this.rangeMinimumValue);
    }

    @Import(name="timeGranularity", required=true)
    private Output<String> timeGranularity;

    public Output<String> timeGranularity() {
        return this.timeGranularity;
    }

    private FiltersTimeRangeFilterArgs() {}

    private FiltersTimeRangeFilterArgs(FiltersTimeRangeFilterArgs $) {
        this.column = $.column;
        this.excludePeriodConfiguration = $.excludePeriodConfiguration;
        this.filterId = $.filterId;
        this.includeMaximum = $.includeMaximum;
        this.includeMinimum = $.includeMinimum;
        this.nullOption = $.nullOption;
        this.rangeMaximumValue = $.rangeMaximumValue;
        this.rangeMinimumValue = $.rangeMinimumValue;
        this.timeGranularity = $.timeGranularity;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FiltersTimeRangeFilterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FiltersTimeRangeFilterArgs $;

        public Builder() {
            $ = new FiltersTimeRangeFilterArgs();
        }

        public Builder(FiltersTimeRangeFilterArgs defaults) {
            $ = new FiltersTimeRangeFilterArgs(Objects.requireNonNull(defaults));
        }

        public Builder column(Output<ColumnArgs> column) {
            $.column = column;
            return this;
        }

        public Builder column(ColumnArgs column) {
            return column(Output.of(column));
        }

        public Builder excludePeriodConfiguration(@Nullable Output<FiltersTimeRangeFilterExcludePeriodConfigurationArgs> excludePeriodConfiguration) {
            $.excludePeriodConfiguration = excludePeriodConfiguration;
            return this;
        }

        public Builder excludePeriodConfiguration(FiltersTimeRangeFilterExcludePeriodConfigurationArgs excludePeriodConfiguration) {
            return excludePeriodConfiguration(Output.of(excludePeriodConfiguration));
        }

        public Builder filterId(Output<String> filterId) {
            $.filterId = filterId;
            return this;
        }

        public Builder filterId(String filterId) {
            return filterId(Output.of(filterId));
        }

        public Builder includeMaximum(@Nullable Output<Boolean> includeMaximum) {
            $.includeMaximum = includeMaximum;
            return this;
        }

        public Builder includeMaximum(Boolean includeMaximum) {
            return includeMaximum(Output.of(includeMaximum));
        }

        public Builder includeMinimum(@Nullable Output<Boolean> includeMinimum) {
            $.includeMinimum = includeMinimum;
            return this;
        }

        public Builder includeMinimum(Boolean includeMinimum) {
            return includeMinimum(Output.of(includeMinimum));
        }

        public Builder nullOption(Output<String> nullOption) {
            $.nullOption = nullOption;
            return this;
        }

        public Builder nullOption(String nullOption) {
            return nullOption(Output.of(nullOption));
        }

        public Builder rangeMaximumValue(@Nullable Output<FiltersTimeRangeFilterRangeMaximumValueArgs> rangeMaximumValue) {
            $.rangeMaximumValue = rangeMaximumValue;
            return this;
        }

        public Builder rangeMaximumValue(FiltersTimeRangeFilterRangeMaximumValueArgs rangeMaximumValue) {
            return rangeMaximumValue(Output.of(rangeMaximumValue));
        }

        public Builder rangeMinimumValue(@Nullable Output<FiltersTimeRangeFilterRangeMinimumValueArgs> rangeMinimumValue) {
            $.rangeMinimumValue = rangeMinimumValue;
            return this;
        }

        public Builder rangeMinimumValue(FiltersTimeRangeFilterRangeMinimumValueArgs rangeMinimumValue) {
            return rangeMinimumValue(Output.of(rangeMinimumValue));
        }

        public Builder timeGranularity(Output<String> timeGranularity) {
            $.timeGranularity = timeGranularity;
            return this;
        }

        public Builder timeGranularity(String timeGranularity) {
            return timeGranularity(Output.of(timeGranularity));
        }

        public FiltersTimeRangeFilterArgs build() {
            if ($.column == null) {
                throw new MissingRequiredPropertyException("FiltersTimeRangeFilterArgs", "column");
            }
            if ($.filterId == null) {
                throw new MissingRequiredPropertyException("FiltersTimeRangeFilterArgs", "filterId");
            }
            if ($.nullOption == null) {
                throw new MissingRequiredPropertyException("FiltersTimeRangeFilterArgs", "nullOption");
            }
            if ($.timeGranularity == null) {
                throw new MissingRequiredPropertyException("FiltersTimeRangeFilterArgs", "timeGranularity");
            }
            return $;
        }
    }

}
