// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class TemplateDefinitionFilterGroupScopeConfigurationSelectedSheetsSheetVisualScopingConfiguration {
    private String scope;
    private String sheetId;
    private @Nullable List<String> visualIds;

    private TemplateDefinitionFilterGroupScopeConfigurationSelectedSheetsSheetVisualScopingConfiguration() {}
    public String scope() {
        return this.scope;
    }
    public String sheetId() {
        return this.sheetId;
    }
    public List<String> visualIds() {
        return this.visualIds == null ? List.of() : this.visualIds;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TemplateDefinitionFilterGroupScopeConfigurationSelectedSheetsSheetVisualScopingConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String scope;
        private String sheetId;
        private @Nullable List<String> visualIds;
        public Builder() {}
        public Builder(TemplateDefinitionFilterGroupScopeConfigurationSelectedSheetsSheetVisualScopingConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.scope = defaults.scope;
    	      this.sheetId = defaults.sheetId;
    	      this.visualIds = defaults.visualIds;
        }

        @CustomType.Setter
        public Builder scope(String scope) {
            if (scope == null) {
              throw new MissingRequiredPropertyException("TemplateDefinitionFilterGroupScopeConfigurationSelectedSheetsSheetVisualScopingConfiguration", "scope");
            }
            this.scope = scope;
            return this;
        }
        @CustomType.Setter
        public Builder sheetId(String sheetId) {
            if (sheetId == null) {
              throw new MissingRequiredPropertyException("TemplateDefinitionFilterGroupScopeConfigurationSelectedSheetsSheetVisualScopingConfiguration", "sheetId");
            }
            this.sheetId = sheetId;
            return this;
        }
        @CustomType.Setter
        public Builder visualIds(@Nullable List<String> visualIds) {

            this.visualIds = visualIds;
            return this;
        }
        public Builder visualIds(String... visualIds) {
            return visualIds(List.of(visualIds));
        }
        public TemplateDefinitionFilterGroupScopeConfigurationSelectedSheetsSheetVisualScopingConfiguration build() {
            final var _resultValue = new TemplateDefinitionFilterGroupScopeConfigurationSelectedSheetsSheetVisualScopingConfiguration();
            _resultValue.scope = scope;
            _resultValue.sheetId = sheetId;
            _resultValue.visualIds = visualIds;
            return _resultValue;
        }
    }
}
