// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.inputs;

import com.pulumi.aws.quicksight.inputs.AggregationFunctionArgs;
import com.pulumi.aws.quicksight.inputs.ColumnArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ColumnSortArgs extends com.pulumi.resources.ResourceArgs {

    public static final ColumnSortArgs Empty = new ColumnSortArgs();

    @Import(name="aggregationFunction")
    private @Nullable Output<AggregationFunctionArgs> aggregationFunction;

    public Optional<Output<AggregationFunctionArgs>> aggregationFunction() {
        return Optional.ofNullable(this.aggregationFunction);
    }

    @Import(name="direction", required=true)
    private Output<String> direction;

    public Output<String> direction() {
        return this.direction;
    }

    @Import(name="sortBy", required=true)
    private Output<ColumnArgs> sortBy;

    public Output<ColumnArgs> sortBy() {
        return this.sortBy;
    }

    private ColumnSortArgs() {}

    private ColumnSortArgs(ColumnSortArgs $) {
        this.aggregationFunction = $.aggregationFunction;
        this.direction = $.direction;
        this.sortBy = $.sortBy;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ColumnSortArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ColumnSortArgs $;

        public Builder() {
            $ = new ColumnSortArgs();
        }

        public Builder(ColumnSortArgs defaults) {
            $ = new ColumnSortArgs(Objects.requireNonNull(defaults));
        }

        public Builder aggregationFunction(@Nullable Output<AggregationFunctionArgs> aggregationFunction) {
            $.aggregationFunction = aggregationFunction;
            return this;
        }

        public Builder aggregationFunction(AggregationFunctionArgs aggregationFunction) {
            return aggregationFunction(Output.of(aggregationFunction));
        }

        public Builder direction(Output<String> direction) {
            $.direction = direction;
            return this;
        }

        public Builder direction(String direction) {
            return direction(Output.of(direction));
        }

        public Builder sortBy(Output<ColumnArgs> sortBy) {
            $.sortBy = sortBy;
            return this;
        }

        public Builder sortBy(ColumnArgs sortBy) {
            return sortBy(Output.of(sortBy));
        }

        public ColumnSortArgs build() {
            if ($.direction == null) {
                throw new MissingRequiredPropertyException("ColumnSortArgs", "direction");
            }
            if ($.sortBy == null) {
                throw new MissingRequiredPropertyException("ColumnSortArgs", "sortBy");
            }
            return $;
        }
    }

}
