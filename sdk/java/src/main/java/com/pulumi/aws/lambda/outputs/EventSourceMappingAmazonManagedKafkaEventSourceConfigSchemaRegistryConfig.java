// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.lambda.outputs;

import com.pulumi.aws.lambda.outputs.EventSourceMappingAmazonManagedKafkaEventSourceConfigSchemaRegistryConfigAccessConfig;
import com.pulumi.aws.lambda.outputs.EventSourceMappingAmazonManagedKafkaEventSourceConfigSchemaRegistryConfigSchemaValidationConfig;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class EventSourceMappingAmazonManagedKafkaEventSourceConfigSchemaRegistryConfig {
    /**
     * @return Configuration block for authentication Lambda uses to access the schema registry.
     * 
     */
    private @Nullable List<EventSourceMappingAmazonManagedKafkaEventSourceConfigSchemaRegistryConfigAccessConfig> accessConfigs;
    /**
     * @return Record format that Lambda delivers to the function after schema validation. Valid values: `JSON`, `SOURCE`.
     * 
     */
    private @Nullable String eventRecordFormat;
    /**
     * @return URI of the schema registry. For AWS Glue schema registries, use the ARN of the registry. For Confluent schema registries, use the registry URL.
     * 
     */
    private @Nullable String schemaRegistryUri;
    /**
     * @return Repeatable block that defines schema validation settings. These specify the message attributes that Lambda should validate and filter using the schema registry.
     * 
     */
    private @Nullable List<EventSourceMappingAmazonManagedKafkaEventSourceConfigSchemaRegistryConfigSchemaValidationConfig> schemaValidationConfigs;

    private EventSourceMappingAmazonManagedKafkaEventSourceConfigSchemaRegistryConfig() {}
    /**
     * @return Configuration block for authentication Lambda uses to access the schema registry.
     * 
     */
    public List<EventSourceMappingAmazonManagedKafkaEventSourceConfigSchemaRegistryConfigAccessConfig> accessConfigs() {
        return this.accessConfigs == null ? List.of() : this.accessConfigs;
    }
    /**
     * @return Record format that Lambda delivers to the function after schema validation. Valid values: `JSON`, `SOURCE`.
     * 
     */
    public Optional<String> eventRecordFormat() {
        return Optional.ofNullable(this.eventRecordFormat);
    }
    /**
     * @return URI of the schema registry. For AWS Glue schema registries, use the ARN of the registry. For Confluent schema registries, use the registry URL.
     * 
     */
    public Optional<String> schemaRegistryUri() {
        return Optional.ofNullable(this.schemaRegistryUri);
    }
    /**
     * @return Repeatable block that defines schema validation settings. These specify the message attributes that Lambda should validate and filter using the schema registry.
     * 
     */
    public List<EventSourceMappingAmazonManagedKafkaEventSourceConfigSchemaRegistryConfigSchemaValidationConfig> schemaValidationConfigs() {
        return this.schemaValidationConfigs == null ? List.of() : this.schemaValidationConfigs;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EventSourceMappingAmazonManagedKafkaEventSourceConfigSchemaRegistryConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<EventSourceMappingAmazonManagedKafkaEventSourceConfigSchemaRegistryConfigAccessConfig> accessConfigs;
        private @Nullable String eventRecordFormat;
        private @Nullable String schemaRegistryUri;
        private @Nullable List<EventSourceMappingAmazonManagedKafkaEventSourceConfigSchemaRegistryConfigSchemaValidationConfig> schemaValidationConfigs;
        public Builder() {}
        public Builder(EventSourceMappingAmazonManagedKafkaEventSourceConfigSchemaRegistryConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessConfigs = defaults.accessConfigs;
    	      this.eventRecordFormat = defaults.eventRecordFormat;
    	      this.schemaRegistryUri = defaults.schemaRegistryUri;
    	      this.schemaValidationConfigs = defaults.schemaValidationConfigs;
        }

        @CustomType.Setter
        public Builder accessConfigs(@Nullable List<EventSourceMappingAmazonManagedKafkaEventSourceConfigSchemaRegistryConfigAccessConfig> accessConfigs) {

            this.accessConfigs = accessConfigs;
            return this;
        }
        public Builder accessConfigs(EventSourceMappingAmazonManagedKafkaEventSourceConfigSchemaRegistryConfigAccessConfig... accessConfigs) {
            return accessConfigs(List.of(accessConfigs));
        }
        @CustomType.Setter
        public Builder eventRecordFormat(@Nullable String eventRecordFormat) {

            this.eventRecordFormat = eventRecordFormat;
            return this;
        }
        @CustomType.Setter
        public Builder schemaRegistryUri(@Nullable String schemaRegistryUri) {

            this.schemaRegistryUri = schemaRegistryUri;
            return this;
        }
        @CustomType.Setter
        public Builder schemaValidationConfigs(@Nullable List<EventSourceMappingAmazonManagedKafkaEventSourceConfigSchemaRegistryConfigSchemaValidationConfig> schemaValidationConfigs) {

            this.schemaValidationConfigs = schemaValidationConfigs;
            return this;
        }
        public Builder schemaValidationConfigs(EventSourceMappingAmazonManagedKafkaEventSourceConfigSchemaRegistryConfigSchemaValidationConfig... schemaValidationConfigs) {
            return schemaValidationConfigs(List.of(schemaValidationConfigs));
        }
        public EventSourceMappingAmazonManagedKafkaEventSourceConfigSchemaRegistryConfig build() {
            final var _resultValue = new EventSourceMappingAmazonManagedKafkaEventSourceConfigSchemaRegistryConfig();
            _resultValue.accessConfigs = accessConfigs;
            _resultValue.eventRecordFormat = eventRecordFormat;
            _resultValue.schemaRegistryUri = schemaRegistryUri;
            _resultValue.schemaValidationConfigs = schemaValidationConfigs;
            return _resultValue;
        }
    }
}
