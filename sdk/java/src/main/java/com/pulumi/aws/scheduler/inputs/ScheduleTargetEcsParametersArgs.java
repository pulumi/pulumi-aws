// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.scheduler.inputs;

import com.pulumi.aws.scheduler.inputs.ScheduleTargetEcsParametersCapacityProviderStrategyArgs;
import com.pulumi.aws.scheduler.inputs.ScheduleTargetEcsParametersNetworkConfigurationArgs;
import com.pulumi.aws.scheduler.inputs.ScheduleTargetEcsParametersPlacementConstraintArgs;
import com.pulumi.aws.scheduler.inputs.ScheduleTargetEcsParametersPlacementStrategyArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ScheduleTargetEcsParametersArgs extends com.pulumi.resources.ResourceArgs {

    public static final ScheduleTargetEcsParametersArgs Empty = new ScheduleTargetEcsParametersArgs();

    /**
     * Up to `6` capacity provider strategies to use for the task. Detailed below.
     * 
     */
    @Import(name="capacityProviderStrategies")
    private @Nullable Output<List<ScheduleTargetEcsParametersCapacityProviderStrategyArgs>> capacityProviderStrategies;

    /**
     * @return Up to `6` capacity provider strategies to use for the task. Detailed below.
     * 
     */
    public Optional<Output<List<ScheduleTargetEcsParametersCapacityProviderStrategyArgs>>> capacityProviderStrategies() {
        return Optional.ofNullable(this.capacityProviderStrategies);
    }

    /**
     * Specifies whether to enable Amazon ECS managed tags for the task. For more information, see [Tagging Your Amazon ECS Resources](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-using-tags.html) in the Amazon ECS Developer Guide.
     * 
     */
    @Import(name="enableEcsManagedTags")
    private @Nullable Output<Boolean> enableEcsManagedTags;

    /**
     * @return Specifies whether to enable Amazon ECS managed tags for the task. For more information, see [Tagging Your Amazon ECS Resources](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-using-tags.html) in the Amazon ECS Developer Guide.
     * 
     */
    public Optional<Output<Boolean>> enableEcsManagedTags() {
        return Optional.ofNullable(this.enableEcsManagedTags);
    }

    /**
     * Specifies whether to enable the execute command functionality for the containers in this task.
     * 
     */
    @Import(name="enableExecuteCommand")
    private @Nullable Output<Boolean> enableExecuteCommand;

    /**
     * @return Specifies whether to enable the execute command functionality for the containers in this task.
     * 
     */
    public Optional<Output<Boolean>> enableExecuteCommand() {
        return Optional.ofNullable(this.enableExecuteCommand);
    }

    /**
     * Specifies an ECS task group for the task. At most 255 characters.
     * 
     */
    @Import(name="group")
    private @Nullable Output<String> group;

    /**
     * @return Specifies an ECS task group for the task. At most 255 characters.
     * 
     */
    public Optional<Output<String>> group() {
        return Optional.ofNullable(this.group);
    }

    /**
     * Specifies the launch type on which your task is running. The launch type that you specify here must match one of the launch type (compatibilities) of the target task. One of: `EC2`, `FARGATE`, `EXTERNAL`.
     * 
     */
    @Import(name="launchType")
    private @Nullable Output<String> launchType;

    /**
     * @return Specifies the launch type on which your task is running. The launch type that you specify here must match one of the launch type (compatibilities) of the target task. One of: `EC2`, `FARGATE`, `EXTERNAL`.
     * 
     */
    public Optional<Output<String>> launchType() {
        return Optional.ofNullable(this.launchType);
    }

    /**
     * Configures the networking associated with the task. Detailed below.
     * 
     */
    @Import(name="networkConfiguration")
    private @Nullable Output<ScheduleTargetEcsParametersNetworkConfigurationArgs> networkConfiguration;

    /**
     * @return Configures the networking associated with the task. Detailed below.
     * 
     */
    public Optional<Output<ScheduleTargetEcsParametersNetworkConfigurationArgs>> networkConfiguration() {
        return Optional.ofNullable(this.networkConfiguration);
    }

    /**
     * A set of up to 10 placement constraints to use for the task. Detailed below.
     * 
     */
    @Import(name="placementConstraints")
    private @Nullable Output<List<ScheduleTargetEcsParametersPlacementConstraintArgs>> placementConstraints;

    /**
     * @return A set of up to 10 placement constraints to use for the task. Detailed below.
     * 
     */
    public Optional<Output<List<ScheduleTargetEcsParametersPlacementConstraintArgs>>> placementConstraints() {
        return Optional.ofNullable(this.placementConstraints);
    }

    /**
     * A set of up to 5 placement strategies. Detailed below.
     * 
     */
    @Import(name="placementStrategies")
    private @Nullable Output<List<ScheduleTargetEcsParametersPlacementStrategyArgs>> placementStrategies;

    /**
     * @return A set of up to 5 placement strategies. Detailed below.
     * 
     */
    public Optional<Output<List<ScheduleTargetEcsParametersPlacementStrategyArgs>>> placementStrategies() {
        return Optional.ofNullable(this.placementStrategies);
    }

    /**
     * Specifies the platform version for the task. Specify only the numeric portion of the platform version, such as `1.1.0`.
     * 
     */
    @Import(name="platformVersion")
    private @Nullable Output<String> platformVersion;

    /**
     * @return Specifies the platform version for the task. Specify only the numeric portion of the platform version, such as `1.1.0`.
     * 
     */
    public Optional<Output<String>> platformVersion() {
        return Optional.ofNullable(this.platformVersion);
    }

    /**
     * Specifies whether to propagate the tags from the task definition to the task. One of: `TASK_DEFINITION`.
     * 
     */
    @Import(name="propagateTags")
    private @Nullable Output<String> propagateTags;

    /**
     * @return Specifies whether to propagate the tags from the task definition to the task. One of: `TASK_DEFINITION`.
     * 
     */
    public Optional<Output<String>> propagateTags() {
        return Optional.ofNullable(this.propagateTags);
    }

    /**
     * Reference ID to use for the task.
     * 
     */
    @Import(name="referenceId")
    private @Nullable Output<String> referenceId;

    /**
     * @return Reference ID to use for the task.
     * 
     */
    public Optional<Output<String>> referenceId() {
        return Optional.ofNullable(this.referenceId);
    }

    /**
     * The metadata that you apply to the task. Each tag consists of a key and an optional value. For more information, see [`RunTask`](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_RunTask.html) in the Amazon ECS API Reference.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return The metadata that you apply to the task. Each tag consists of a key and an optional value. For more information, see [`RunTask`](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_RunTask.html) in the Amazon ECS API Reference.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The number of tasks to create. Ranges from `1` (default) to `10`.
     * 
     */
    @Import(name="taskCount")
    private @Nullable Output<Integer> taskCount;

    /**
     * @return The number of tasks to create. Ranges from `1` (default) to `10`.
     * 
     */
    public Optional<Output<Integer>> taskCount() {
        return Optional.ofNullable(this.taskCount);
    }

    /**
     * ARN of the task definition to use.
     * 
     * The following arguments are optional:
     * 
     */
    @Import(name="taskDefinitionArn", required=true)
    private Output<String> taskDefinitionArn;

    /**
     * @return ARN of the task definition to use.
     * 
     * The following arguments are optional:
     * 
     */
    public Output<String> taskDefinitionArn() {
        return this.taskDefinitionArn;
    }

    private ScheduleTargetEcsParametersArgs() {}

    private ScheduleTargetEcsParametersArgs(ScheduleTargetEcsParametersArgs $) {
        this.capacityProviderStrategies = $.capacityProviderStrategies;
        this.enableEcsManagedTags = $.enableEcsManagedTags;
        this.enableExecuteCommand = $.enableExecuteCommand;
        this.group = $.group;
        this.launchType = $.launchType;
        this.networkConfiguration = $.networkConfiguration;
        this.placementConstraints = $.placementConstraints;
        this.placementStrategies = $.placementStrategies;
        this.platformVersion = $.platformVersion;
        this.propagateTags = $.propagateTags;
        this.referenceId = $.referenceId;
        this.tags = $.tags;
        this.taskCount = $.taskCount;
        this.taskDefinitionArn = $.taskDefinitionArn;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ScheduleTargetEcsParametersArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ScheduleTargetEcsParametersArgs $;

        public Builder() {
            $ = new ScheduleTargetEcsParametersArgs();
        }

        public Builder(ScheduleTargetEcsParametersArgs defaults) {
            $ = new ScheduleTargetEcsParametersArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param capacityProviderStrategies Up to `6` capacity provider strategies to use for the task. Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder capacityProviderStrategies(@Nullable Output<List<ScheduleTargetEcsParametersCapacityProviderStrategyArgs>> capacityProviderStrategies) {
            $.capacityProviderStrategies = capacityProviderStrategies;
            return this;
        }

        /**
         * @param capacityProviderStrategies Up to `6` capacity provider strategies to use for the task. Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder capacityProviderStrategies(List<ScheduleTargetEcsParametersCapacityProviderStrategyArgs> capacityProviderStrategies) {
            return capacityProviderStrategies(Output.of(capacityProviderStrategies));
        }

        /**
         * @param capacityProviderStrategies Up to `6` capacity provider strategies to use for the task. Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder capacityProviderStrategies(ScheduleTargetEcsParametersCapacityProviderStrategyArgs... capacityProviderStrategies) {
            return capacityProviderStrategies(List.of(capacityProviderStrategies));
        }

        /**
         * @param enableEcsManagedTags Specifies whether to enable Amazon ECS managed tags for the task. For more information, see [Tagging Your Amazon ECS Resources](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-using-tags.html) in the Amazon ECS Developer Guide.
         * 
         * @return builder
         * 
         */
        public Builder enableEcsManagedTags(@Nullable Output<Boolean> enableEcsManagedTags) {
            $.enableEcsManagedTags = enableEcsManagedTags;
            return this;
        }

        /**
         * @param enableEcsManagedTags Specifies whether to enable Amazon ECS managed tags for the task. For more information, see [Tagging Your Amazon ECS Resources](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-using-tags.html) in the Amazon ECS Developer Guide.
         * 
         * @return builder
         * 
         */
        public Builder enableEcsManagedTags(Boolean enableEcsManagedTags) {
            return enableEcsManagedTags(Output.of(enableEcsManagedTags));
        }

        /**
         * @param enableExecuteCommand Specifies whether to enable the execute command functionality for the containers in this task.
         * 
         * @return builder
         * 
         */
        public Builder enableExecuteCommand(@Nullable Output<Boolean> enableExecuteCommand) {
            $.enableExecuteCommand = enableExecuteCommand;
            return this;
        }

        /**
         * @param enableExecuteCommand Specifies whether to enable the execute command functionality for the containers in this task.
         * 
         * @return builder
         * 
         */
        public Builder enableExecuteCommand(Boolean enableExecuteCommand) {
            return enableExecuteCommand(Output.of(enableExecuteCommand));
        }

        /**
         * @param group Specifies an ECS task group for the task. At most 255 characters.
         * 
         * @return builder
         * 
         */
        public Builder group(@Nullable Output<String> group) {
            $.group = group;
            return this;
        }

        /**
         * @param group Specifies an ECS task group for the task. At most 255 characters.
         * 
         * @return builder
         * 
         */
        public Builder group(String group) {
            return group(Output.of(group));
        }

        /**
         * @param launchType Specifies the launch type on which your task is running. The launch type that you specify here must match one of the launch type (compatibilities) of the target task. One of: `EC2`, `FARGATE`, `EXTERNAL`.
         * 
         * @return builder
         * 
         */
        public Builder launchType(@Nullable Output<String> launchType) {
            $.launchType = launchType;
            return this;
        }

        /**
         * @param launchType Specifies the launch type on which your task is running. The launch type that you specify here must match one of the launch type (compatibilities) of the target task. One of: `EC2`, `FARGATE`, `EXTERNAL`.
         * 
         * @return builder
         * 
         */
        public Builder launchType(String launchType) {
            return launchType(Output.of(launchType));
        }

        /**
         * @param networkConfiguration Configures the networking associated with the task. Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder networkConfiguration(@Nullable Output<ScheduleTargetEcsParametersNetworkConfigurationArgs> networkConfiguration) {
            $.networkConfiguration = networkConfiguration;
            return this;
        }

        /**
         * @param networkConfiguration Configures the networking associated with the task. Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder networkConfiguration(ScheduleTargetEcsParametersNetworkConfigurationArgs networkConfiguration) {
            return networkConfiguration(Output.of(networkConfiguration));
        }

        /**
         * @param placementConstraints A set of up to 10 placement constraints to use for the task. Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder placementConstraints(@Nullable Output<List<ScheduleTargetEcsParametersPlacementConstraintArgs>> placementConstraints) {
            $.placementConstraints = placementConstraints;
            return this;
        }

        /**
         * @param placementConstraints A set of up to 10 placement constraints to use for the task. Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder placementConstraints(List<ScheduleTargetEcsParametersPlacementConstraintArgs> placementConstraints) {
            return placementConstraints(Output.of(placementConstraints));
        }

        /**
         * @param placementConstraints A set of up to 10 placement constraints to use for the task. Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder placementConstraints(ScheduleTargetEcsParametersPlacementConstraintArgs... placementConstraints) {
            return placementConstraints(List.of(placementConstraints));
        }

        /**
         * @param placementStrategies A set of up to 5 placement strategies. Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder placementStrategies(@Nullable Output<List<ScheduleTargetEcsParametersPlacementStrategyArgs>> placementStrategies) {
            $.placementStrategies = placementStrategies;
            return this;
        }

        /**
         * @param placementStrategies A set of up to 5 placement strategies. Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder placementStrategies(List<ScheduleTargetEcsParametersPlacementStrategyArgs> placementStrategies) {
            return placementStrategies(Output.of(placementStrategies));
        }

        /**
         * @param placementStrategies A set of up to 5 placement strategies. Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder placementStrategies(ScheduleTargetEcsParametersPlacementStrategyArgs... placementStrategies) {
            return placementStrategies(List.of(placementStrategies));
        }

        /**
         * @param platformVersion Specifies the platform version for the task. Specify only the numeric portion of the platform version, such as `1.1.0`.
         * 
         * @return builder
         * 
         */
        public Builder platformVersion(@Nullable Output<String> platformVersion) {
            $.platformVersion = platformVersion;
            return this;
        }

        /**
         * @param platformVersion Specifies the platform version for the task. Specify only the numeric portion of the platform version, such as `1.1.0`.
         * 
         * @return builder
         * 
         */
        public Builder platformVersion(String platformVersion) {
            return platformVersion(Output.of(platformVersion));
        }

        /**
         * @param propagateTags Specifies whether to propagate the tags from the task definition to the task. One of: `TASK_DEFINITION`.
         * 
         * @return builder
         * 
         */
        public Builder propagateTags(@Nullable Output<String> propagateTags) {
            $.propagateTags = propagateTags;
            return this;
        }

        /**
         * @param propagateTags Specifies whether to propagate the tags from the task definition to the task. One of: `TASK_DEFINITION`.
         * 
         * @return builder
         * 
         */
        public Builder propagateTags(String propagateTags) {
            return propagateTags(Output.of(propagateTags));
        }

        /**
         * @param referenceId Reference ID to use for the task.
         * 
         * @return builder
         * 
         */
        public Builder referenceId(@Nullable Output<String> referenceId) {
            $.referenceId = referenceId;
            return this;
        }

        /**
         * @param referenceId Reference ID to use for the task.
         * 
         * @return builder
         * 
         */
        public Builder referenceId(String referenceId) {
            return referenceId(Output.of(referenceId));
        }

        /**
         * @param tags The metadata that you apply to the task. Each tag consists of a key and an optional value. For more information, see [`RunTask`](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_RunTask.html) in the Amazon ECS API Reference.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags The metadata that you apply to the task. Each tag consists of a key and an optional value. For more information, see [`RunTask`](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_RunTask.html) in the Amazon ECS API Reference.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param taskCount The number of tasks to create. Ranges from `1` (default) to `10`.
         * 
         * @return builder
         * 
         */
        public Builder taskCount(@Nullable Output<Integer> taskCount) {
            $.taskCount = taskCount;
            return this;
        }

        /**
         * @param taskCount The number of tasks to create. Ranges from `1` (default) to `10`.
         * 
         * @return builder
         * 
         */
        public Builder taskCount(Integer taskCount) {
            return taskCount(Output.of(taskCount));
        }

        /**
         * @param taskDefinitionArn ARN of the task definition to use.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder taskDefinitionArn(Output<String> taskDefinitionArn) {
            $.taskDefinitionArn = taskDefinitionArn;
            return this;
        }

        /**
         * @param taskDefinitionArn ARN of the task definition to use.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder taskDefinitionArn(String taskDefinitionArn) {
            return taskDefinitionArn(Output.of(taskDefinitionArn));
        }

        public ScheduleTargetEcsParametersArgs build() {
            if ($.taskDefinitionArn == null) {
                throw new MissingRequiredPropertyException("ScheduleTargetEcsParametersArgs", "taskDefinitionArn");
            }
            return $;
        }
    }

}
