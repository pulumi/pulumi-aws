// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.kinesisanalyticsv2.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ApplicationApplicationConfigurationFlinkApplicationConfigurationParallelismConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final ApplicationApplicationConfigurationFlinkApplicationConfigurationParallelismConfigurationArgs Empty = new ApplicationApplicationConfigurationFlinkApplicationConfigurationParallelismConfigurationArgs();

    @Import(name="autoScalingEnabled")
    private @Nullable Output<Boolean> autoScalingEnabled;

    public Optional<Output<Boolean>> autoScalingEnabled() {
        return Optional.ofNullable(this.autoScalingEnabled);
    }

    @Import(name="configurationType", required=true)
    private Output<String> configurationType;

    public Output<String> configurationType() {
        return this.configurationType;
    }

    @Import(name="parallelism")
    private @Nullable Output<Integer> parallelism;

    public Optional<Output<Integer>> parallelism() {
        return Optional.ofNullable(this.parallelism);
    }

    @Import(name="parallelismPerKpu")
    private @Nullable Output<Integer> parallelismPerKpu;

    public Optional<Output<Integer>> parallelismPerKpu() {
        return Optional.ofNullable(this.parallelismPerKpu);
    }

    private ApplicationApplicationConfigurationFlinkApplicationConfigurationParallelismConfigurationArgs() {}

    private ApplicationApplicationConfigurationFlinkApplicationConfigurationParallelismConfigurationArgs(ApplicationApplicationConfigurationFlinkApplicationConfigurationParallelismConfigurationArgs $) {
        this.autoScalingEnabled = $.autoScalingEnabled;
        this.configurationType = $.configurationType;
        this.parallelism = $.parallelism;
        this.parallelismPerKpu = $.parallelismPerKpu;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApplicationApplicationConfigurationFlinkApplicationConfigurationParallelismConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApplicationApplicationConfigurationFlinkApplicationConfigurationParallelismConfigurationArgs $;

        public Builder() {
            $ = new ApplicationApplicationConfigurationFlinkApplicationConfigurationParallelismConfigurationArgs();
        }

        public Builder(ApplicationApplicationConfigurationFlinkApplicationConfigurationParallelismConfigurationArgs defaults) {
            $ = new ApplicationApplicationConfigurationFlinkApplicationConfigurationParallelismConfigurationArgs(Objects.requireNonNull(defaults));
        }

        public Builder autoScalingEnabled(@Nullable Output<Boolean> autoScalingEnabled) {
            $.autoScalingEnabled = autoScalingEnabled;
            return this;
        }

        public Builder autoScalingEnabled(Boolean autoScalingEnabled) {
            return autoScalingEnabled(Output.of(autoScalingEnabled));
        }

        public Builder configurationType(Output<String> configurationType) {
            $.configurationType = configurationType;
            return this;
        }

        public Builder configurationType(String configurationType) {
            return configurationType(Output.of(configurationType));
        }

        public Builder parallelism(@Nullable Output<Integer> parallelism) {
            $.parallelism = parallelism;
            return this;
        }

        public Builder parallelism(Integer parallelism) {
            return parallelism(Output.of(parallelism));
        }

        public Builder parallelismPerKpu(@Nullable Output<Integer> parallelismPerKpu) {
            $.parallelismPerKpu = parallelismPerKpu;
            return this;
        }

        public Builder parallelismPerKpu(Integer parallelismPerKpu) {
            return parallelismPerKpu(Output.of(parallelismPerKpu));
        }

        public ApplicationApplicationConfigurationFlinkApplicationConfigurationParallelismConfigurationArgs build() {
            $.configurationType = Objects.requireNonNull($.configurationType, "expected parameter 'configurationType' to be non-null");
            return $;
        }
    }

}
