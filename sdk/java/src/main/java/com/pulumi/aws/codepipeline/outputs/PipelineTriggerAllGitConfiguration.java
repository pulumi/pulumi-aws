// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.codepipeline.outputs;

import com.pulumi.aws.codepipeline.outputs.PipelineTriggerAllGitConfigurationPullRequest;
import com.pulumi.aws.codepipeline.outputs.PipelineTriggerAllGitConfigurationPush;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class PipelineTriggerAllGitConfiguration {
    /**
     * @return The field where the repository event that will start the pipeline is specified as pull requests. A `pull_request` block is documented below.
     * 
     */
    private @Nullable List<PipelineTriggerAllGitConfigurationPullRequest> pullRequests;
    /**
     * @return The field where the repository event that will start the pipeline, such as pushing Git tags, is specified with details. A `push` block is documented below.
     * 
     */
    private @Nullable List<PipelineTriggerAllGitConfigurationPush> pushes;
    /**
     * @return The name of the pipeline source action where the trigger configuration, such as Git tags, is specified. The trigger configuration will start the pipeline upon the specified change only.
     * 
     */
    private @Nullable String sourceActionName;

    private PipelineTriggerAllGitConfiguration() {}
    /**
     * @return The field where the repository event that will start the pipeline is specified as pull requests. A `pull_request` block is documented below.
     * 
     */
    public List<PipelineTriggerAllGitConfigurationPullRequest> pullRequests() {
        return this.pullRequests == null ? List.of() : this.pullRequests;
    }
    /**
     * @return The field where the repository event that will start the pipeline, such as pushing Git tags, is specified with details. A `push` block is documented below.
     * 
     */
    public List<PipelineTriggerAllGitConfigurationPush> pushes() {
        return this.pushes == null ? List.of() : this.pushes;
    }
    /**
     * @return The name of the pipeline source action where the trigger configuration, such as Git tags, is specified. The trigger configuration will start the pipeline upon the specified change only.
     * 
     */
    public Optional<String> sourceActionName() {
        return Optional.ofNullable(this.sourceActionName);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PipelineTriggerAllGitConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<PipelineTriggerAllGitConfigurationPullRequest> pullRequests;
        private @Nullable List<PipelineTriggerAllGitConfigurationPush> pushes;
        private @Nullable String sourceActionName;
        public Builder() {}
        public Builder(PipelineTriggerAllGitConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.pullRequests = defaults.pullRequests;
    	      this.pushes = defaults.pushes;
    	      this.sourceActionName = defaults.sourceActionName;
        }

        @CustomType.Setter
        public Builder pullRequests(@Nullable List<PipelineTriggerAllGitConfigurationPullRequest> pullRequests) {

            this.pullRequests = pullRequests;
            return this;
        }
        public Builder pullRequests(PipelineTriggerAllGitConfigurationPullRequest... pullRequests) {
            return pullRequests(List.of(pullRequests));
        }
        @CustomType.Setter
        public Builder pushes(@Nullable List<PipelineTriggerAllGitConfigurationPush> pushes) {

            this.pushes = pushes;
            return this;
        }
        public Builder pushes(PipelineTriggerAllGitConfigurationPush... pushes) {
            return pushes(List.of(pushes));
        }
        @CustomType.Setter
        public Builder sourceActionName(@Nullable String sourceActionName) {

            this.sourceActionName = sourceActionName;
            return this;
        }
        public PipelineTriggerAllGitConfiguration build() {
            final var _resultValue = new PipelineTriggerAllGitConfiguration();
            _resultValue.pullRequests = pullRequests;
            _resultValue.pushes = pushes;
            _resultValue.sourceActionName = sourceActionName;
            return _resultValue;
        }
    }
}
