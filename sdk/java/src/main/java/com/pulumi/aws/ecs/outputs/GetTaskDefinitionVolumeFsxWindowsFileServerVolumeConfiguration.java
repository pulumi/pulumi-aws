// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ecs.outputs;

import com.pulumi.aws.ecs.outputs.GetTaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfig;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetTaskDefinitionVolumeFsxWindowsFileServerVolumeConfiguration {
    /**
     * @return Configuration block for authorization for the Amazon FSx for Windows File Server file system detailed below.
     * 
     */
    private List<GetTaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfig> authorizationConfigs;
    /**
     * @return The Amazon FSx for Windows File Server file system ID to use.
     * 
     */
    private String fileSystemId;
    /**
     * @return The directory within the Amazon FSx for Windows File Server file system to mount as the root directory inside the host.
     * 
     */
    private String rootDirectory;

    private GetTaskDefinitionVolumeFsxWindowsFileServerVolumeConfiguration() {}
    /**
     * @return Configuration block for authorization for the Amazon FSx for Windows File Server file system detailed below.
     * 
     */
    public List<GetTaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfig> authorizationConfigs() {
        return this.authorizationConfigs;
    }
    /**
     * @return The Amazon FSx for Windows File Server file system ID to use.
     * 
     */
    public String fileSystemId() {
        return this.fileSystemId;
    }
    /**
     * @return The directory within the Amazon FSx for Windows File Server file system to mount as the root directory inside the host.
     * 
     */
    public String rootDirectory() {
        return this.rootDirectory;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTaskDefinitionVolumeFsxWindowsFileServerVolumeConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetTaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfig> authorizationConfigs;
        private String fileSystemId;
        private String rootDirectory;
        public Builder() {}
        public Builder(GetTaskDefinitionVolumeFsxWindowsFileServerVolumeConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authorizationConfigs = defaults.authorizationConfigs;
    	      this.fileSystemId = defaults.fileSystemId;
    	      this.rootDirectory = defaults.rootDirectory;
        }

        @CustomType.Setter
        public Builder authorizationConfigs(List<GetTaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfig> authorizationConfigs) {
            if (authorizationConfigs == null) {
              throw new MissingRequiredPropertyException("GetTaskDefinitionVolumeFsxWindowsFileServerVolumeConfiguration", "authorizationConfigs");
            }
            this.authorizationConfigs = authorizationConfigs;
            return this;
        }
        public Builder authorizationConfigs(GetTaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfig... authorizationConfigs) {
            return authorizationConfigs(List.of(authorizationConfigs));
        }
        @CustomType.Setter
        public Builder fileSystemId(String fileSystemId) {
            if (fileSystemId == null) {
              throw new MissingRequiredPropertyException("GetTaskDefinitionVolumeFsxWindowsFileServerVolumeConfiguration", "fileSystemId");
            }
            this.fileSystemId = fileSystemId;
            return this;
        }
        @CustomType.Setter
        public Builder rootDirectory(String rootDirectory) {
            if (rootDirectory == null) {
              throw new MissingRequiredPropertyException("GetTaskDefinitionVolumeFsxWindowsFileServerVolumeConfiguration", "rootDirectory");
            }
            this.rootDirectory = rootDirectory;
            return this;
        }
        public GetTaskDefinitionVolumeFsxWindowsFileServerVolumeConfiguration build() {
            final var _resultValue = new GetTaskDefinitionVolumeFsxWindowsFileServerVolumeConfiguration();
            _resultValue.authorizationConfigs = authorizationConfigs;
            _resultValue.fileSystemId = fileSystemId;
            _resultValue.rootDirectory = rootDirectory;
            return _resultValue;
        }
    }
}
