// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.s3.outputs;

import com.pulumi.aws.s3.outputs.BucketReplicationConfigurationRuleDestination;
import com.pulumi.aws.s3.outputs.BucketReplicationConfigurationRuleFilter;
import com.pulumi.aws.s3.outputs.BucketReplicationConfigurationRuleSourceSelectionCriteria;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class BucketReplicationConfigurationRule {
    /**
     * @return Whether delete markers are replicated. The only valid value is `Enabled`. To disable, omit this argument. This argument is only valid with V2 replication configurations (i.e., when `filter` is used).
     * 
     */
    private @Nullable String deleteMarkerReplicationStatus;
    /**
     * @return Specifies the destination for the rule (documented below).
     * 
     */
    private List<BucketReplicationConfigurationRuleDestination> destinations;
    /**
     * @return Filter that identifies subset of objects to which the replication rule applies (documented below).
     * 
     */
    private @Nullable List<BucketReplicationConfigurationRuleFilter> filters;
    /**
     * @return Unique identifier for the rule. Must be less than or equal to 255 characters in length.
     * 
     */
    private @Nullable String id;
    /**
     * @return Object keyname prefix identifying one or more objects to which the rule applies. Must be less than or equal to 1024 characters in length.
     * 
     */
    private @Nullable String prefix;
    /**
     * @return Priority associated with the rule. Priority should only be set if `filter` is configured. If not provided, defaults to `0`. Priority must be unique between multiple rules.
     * 
     */
    private @Nullable Integer priority;
    /**
     * @return Specifies special object selection criteria (documented below).
     * 
     */
    private @Nullable List<BucketReplicationConfigurationRuleSourceSelectionCriteria> sourceSelectionCriterias;
    /**
     * @return Status of the rule. Either `Enabled` or `Disabled`. The rule is ignored if status is not Enabled.
     * 
     */
    private String status;

    private BucketReplicationConfigurationRule() {}
    /**
     * @return Whether delete markers are replicated. The only valid value is `Enabled`. To disable, omit this argument. This argument is only valid with V2 replication configurations (i.e., when `filter` is used).
     * 
     */
    public Optional<String> deleteMarkerReplicationStatus() {
        return Optional.ofNullable(this.deleteMarkerReplicationStatus);
    }
    /**
     * @return Specifies the destination for the rule (documented below).
     * 
     */
    public List<BucketReplicationConfigurationRuleDestination> destinations() {
        return this.destinations;
    }
    /**
     * @return Filter that identifies subset of objects to which the replication rule applies (documented below).
     * 
     */
    public List<BucketReplicationConfigurationRuleFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return Unique identifier for the rule. Must be less than or equal to 255 characters in length.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Object keyname prefix identifying one or more objects to which the rule applies. Must be less than or equal to 1024 characters in length.
     * 
     */
    public Optional<String> prefix() {
        return Optional.ofNullable(this.prefix);
    }
    /**
     * @return Priority associated with the rule. Priority should only be set if `filter` is configured. If not provided, defaults to `0`. Priority must be unique between multiple rules.
     * 
     */
    public Optional<Integer> priority() {
        return Optional.ofNullable(this.priority);
    }
    /**
     * @return Specifies special object selection criteria (documented below).
     * 
     */
    public List<BucketReplicationConfigurationRuleSourceSelectionCriteria> sourceSelectionCriterias() {
        return this.sourceSelectionCriterias == null ? List.of() : this.sourceSelectionCriterias;
    }
    /**
     * @return Status of the rule. Either `Enabled` or `Disabled`. The rule is ignored if status is not Enabled.
     * 
     */
    public String status() {
        return this.status;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BucketReplicationConfigurationRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String deleteMarkerReplicationStatus;
        private List<BucketReplicationConfigurationRuleDestination> destinations;
        private @Nullable List<BucketReplicationConfigurationRuleFilter> filters;
        private @Nullable String id;
        private @Nullable String prefix;
        private @Nullable Integer priority;
        private @Nullable List<BucketReplicationConfigurationRuleSourceSelectionCriteria> sourceSelectionCriterias;
        private String status;
        public Builder() {}
        public Builder(BucketReplicationConfigurationRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.deleteMarkerReplicationStatus = defaults.deleteMarkerReplicationStatus;
    	      this.destinations = defaults.destinations;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.prefix = defaults.prefix;
    	      this.priority = defaults.priority;
    	      this.sourceSelectionCriterias = defaults.sourceSelectionCriterias;
    	      this.status = defaults.status;
        }

        @CustomType.Setter
        public Builder deleteMarkerReplicationStatus(@Nullable String deleteMarkerReplicationStatus) {

            this.deleteMarkerReplicationStatus = deleteMarkerReplicationStatus;
            return this;
        }
        @CustomType.Setter
        public Builder destinations(List<BucketReplicationConfigurationRuleDestination> destinations) {
            if (destinations == null) {
              throw new MissingRequiredPropertyException("BucketReplicationConfigurationRule", "destinations");
            }
            this.destinations = destinations;
            return this;
        }
        public Builder destinations(BucketReplicationConfigurationRuleDestination... destinations) {
            return destinations(List.of(destinations));
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<BucketReplicationConfigurationRuleFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(BucketReplicationConfigurationRuleFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {

            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder prefix(@Nullable String prefix) {

            this.prefix = prefix;
            return this;
        }
        @CustomType.Setter
        public Builder priority(@Nullable Integer priority) {

            this.priority = priority;
            return this;
        }
        @CustomType.Setter
        public Builder sourceSelectionCriterias(@Nullable List<BucketReplicationConfigurationRuleSourceSelectionCriteria> sourceSelectionCriterias) {

            this.sourceSelectionCriterias = sourceSelectionCriterias;
            return this;
        }
        public Builder sourceSelectionCriterias(BucketReplicationConfigurationRuleSourceSelectionCriteria... sourceSelectionCriterias) {
            return sourceSelectionCriterias(List.of(sourceSelectionCriterias));
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("BucketReplicationConfigurationRule", "status");
            }
            this.status = status;
            return this;
        }
        public BucketReplicationConfigurationRule build() {
            final var _resultValue = new BucketReplicationConfigurationRule();
            _resultValue.deleteMarkerReplicationStatus = deleteMarkerReplicationStatus;
            _resultValue.destinations = destinations;
            _resultValue.filters = filters;
            _resultValue.id = id;
            _resultValue.prefix = prefix;
            _resultValue.priority = priority;
            _resultValue.sourceSelectionCriterias = sourceSelectionCriterias;
            _resultValue.status = status;
            return _resultValue;
        }
    }
}
