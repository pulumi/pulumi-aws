// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.inputs;

import com.pulumi.aws.quicksight.inputs.AccountSettingsTimeoutsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AccountSettingsState extends com.pulumi.resources.ResourceArgs {

    public static final AccountSettingsState Empty = new AccountSettingsState();

    /**
     * The ID for the AWS account that contains the settings.
     * 
     */
    @Import(name="awsAccountId")
    private @Nullable Output<String> awsAccountId;

    /**
     * @return The ID for the AWS account that contains the settings.
     * 
     */
    public Optional<Output<String>> awsAccountId() {
        return Optional.ofNullable(this.awsAccountId);
    }

    /**
     * The default namespace for this Amazon Web Services account. Currently, the default is `default`.
     * 
     */
    @Import(name="defaultNamespace")
    private @Nullable Output<String> defaultNamespace;

    /**
     * @return The default namespace for this Amazon Web Services account. Currently, the default is `default`.
     * 
     */
    public Optional<Output<String>> defaultNamespace() {
        return Optional.ofNullable(this.defaultNamespace);
    }

    /**
     * A boolean value that determines whether or not an Amazon QuickSight account can be deleted. If `true`, it does not allow the account to be deleted and results in an error message if a user tries to make a DeleteAccountSubscription request. If `false`, it will allow the account to be deleted.
     * 
     */
    @Import(name="terminationProtectionEnabled")
    private @Nullable Output<Boolean> terminationProtectionEnabled;

    /**
     * @return A boolean value that determines whether or not an Amazon QuickSight account can be deleted. If `true`, it does not allow the account to be deleted and results in an error message if a user tries to make a DeleteAccountSubscription request. If `false`, it will allow the account to be deleted.
     * 
     */
    public Optional<Output<Boolean>> terminationProtectionEnabled() {
        return Optional.ofNullable(this.terminationProtectionEnabled);
    }

    @Import(name="timeouts")
    private @Nullable Output<AccountSettingsTimeoutsArgs> timeouts;

    public Optional<Output<AccountSettingsTimeoutsArgs>> timeouts() {
        return Optional.ofNullable(this.timeouts);
    }

    private AccountSettingsState() {}

    private AccountSettingsState(AccountSettingsState $) {
        this.awsAccountId = $.awsAccountId;
        this.defaultNamespace = $.defaultNamespace;
        this.terminationProtectionEnabled = $.terminationProtectionEnabled;
        this.timeouts = $.timeouts;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AccountSettingsState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AccountSettingsState $;

        public Builder() {
            $ = new AccountSettingsState();
        }

        public Builder(AccountSettingsState defaults) {
            $ = new AccountSettingsState(Objects.requireNonNull(defaults));
        }

        /**
         * @param awsAccountId The ID for the AWS account that contains the settings.
         * 
         * @return builder
         * 
         */
        public Builder awsAccountId(@Nullable Output<String> awsAccountId) {
            $.awsAccountId = awsAccountId;
            return this;
        }

        /**
         * @param awsAccountId The ID for the AWS account that contains the settings.
         * 
         * @return builder
         * 
         */
        public Builder awsAccountId(String awsAccountId) {
            return awsAccountId(Output.of(awsAccountId));
        }

        /**
         * @param defaultNamespace The default namespace for this Amazon Web Services account. Currently, the default is `default`.
         * 
         * @return builder
         * 
         */
        public Builder defaultNamespace(@Nullable Output<String> defaultNamespace) {
            $.defaultNamespace = defaultNamespace;
            return this;
        }

        /**
         * @param defaultNamespace The default namespace for this Amazon Web Services account. Currently, the default is `default`.
         * 
         * @return builder
         * 
         */
        public Builder defaultNamespace(String defaultNamespace) {
            return defaultNamespace(Output.of(defaultNamespace));
        }

        /**
         * @param terminationProtectionEnabled A boolean value that determines whether or not an Amazon QuickSight account can be deleted. If `true`, it does not allow the account to be deleted and results in an error message if a user tries to make a DeleteAccountSubscription request. If `false`, it will allow the account to be deleted.
         * 
         * @return builder
         * 
         */
        public Builder terminationProtectionEnabled(@Nullable Output<Boolean> terminationProtectionEnabled) {
            $.terminationProtectionEnabled = terminationProtectionEnabled;
            return this;
        }

        /**
         * @param terminationProtectionEnabled A boolean value that determines whether or not an Amazon QuickSight account can be deleted. If `true`, it does not allow the account to be deleted and results in an error message if a user tries to make a DeleteAccountSubscription request. If `false`, it will allow the account to be deleted.
         * 
         * @return builder
         * 
         */
        public Builder terminationProtectionEnabled(Boolean terminationProtectionEnabled) {
            return terminationProtectionEnabled(Output.of(terminationProtectionEnabled));
        }

        public Builder timeouts(@Nullable Output<AccountSettingsTimeoutsArgs> timeouts) {
            $.timeouts = timeouts;
            return this;
        }

        public Builder timeouts(AccountSettingsTimeoutsArgs timeouts) {
            return timeouts(Output.of(timeouts));
        }

        public AccountSettingsState build() {
            return $;
        }
    }

}
