// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class DataSetLogicalTableMapDataTransformRenameColumnOperationArgs extends com.pulumi.resources.ResourceArgs {

    public static final DataSetLogicalTableMapDataTransformRenameColumnOperationArgs Empty = new DataSetLogicalTableMapDataTransformRenameColumnOperationArgs();

    /**
     * Column to be renamed.
     * 
     */
    @Import(name="columnName", required=true)
    private Output<String> columnName;

    /**
     * @return Column to be renamed.
     * 
     */
    public Output<String> columnName() {
        return this.columnName;
    }

    /**
     * New name for the column.
     * 
     */
    @Import(name="newColumnName", required=true)
    private Output<String> newColumnName;

    /**
     * @return New name for the column.
     * 
     */
    public Output<String> newColumnName() {
        return this.newColumnName;
    }

    private DataSetLogicalTableMapDataTransformRenameColumnOperationArgs() {}

    private DataSetLogicalTableMapDataTransformRenameColumnOperationArgs(DataSetLogicalTableMapDataTransformRenameColumnOperationArgs $) {
        this.columnName = $.columnName;
        this.newColumnName = $.newColumnName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DataSetLogicalTableMapDataTransformRenameColumnOperationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DataSetLogicalTableMapDataTransformRenameColumnOperationArgs $;

        public Builder() {
            $ = new DataSetLogicalTableMapDataTransformRenameColumnOperationArgs();
        }

        public Builder(DataSetLogicalTableMapDataTransformRenameColumnOperationArgs defaults) {
            $ = new DataSetLogicalTableMapDataTransformRenameColumnOperationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param columnName Column to be renamed.
         * 
         * @return builder
         * 
         */
        public Builder columnName(Output<String> columnName) {
            $.columnName = columnName;
            return this;
        }

        /**
         * @param columnName Column to be renamed.
         * 
         * @return builder
         * 
         */
        public Builder columnName(String columnName) {
            return columnName(Output.of(columnName));
        }

        /**
         * @param newColumnName New name for the column.
         * 
         * @return builder
         * 
         */
        public Builder newColumnName(Output<String> newColumnName) {
            $.newColumnName = newColumnName;
            return this;
        }

        /**
         * @param newColumnName New name for the column.
         * 
         * @return builder
         * 
         */
        public Builder newColumnName(String newColumnName) {
            return newColumnName(Output.of(newColumnName));
        }

        public DataSetLogicalTableMapDataTransformRenameColumnOperationArgs build() {
            if ($.columnName == null) {
                throw new MissingRequiredPropertyException("DataSetLogicalTableMapDataTransformRenameColumnOperationArgs", "columnName");
            }
            if ($.newColumnName == null) {
                throw new MissingRequiredPropertyException("DataSetLogicalTableMapDataTransformRenameColumnOperationArgs", "newColumnName");
            }
            return $;
        }
    }

}
