// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.glue.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SchemaState extends com.pulumi.resources.ResourceArgs {

    public static final SchemaState Empty = new SchemaState();

    @Import(name="arn")
    private @Nullable Output<String> arn;

    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    @Import(name="compatibility")
    private @Nullable Output<String> compatibility;

    public Optional<Output<String>> compatibility() {
        return Optional.ofNullable(this.compatibility);
    }

    @Import(name="dataFormat")
    private @Nullable Output<String> dataFormat;

    public Optional<Output<String>> dataFormat() {
        return Optional.ofNullable(this.dataFormat);
    }

    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="latestSchemaVersion")
    private @Nullable Output<Integer> latestSchemaVersion;

    public Optional<Output<Integer>> latestSchemaVersion() {
        return Optional.ofNullable(this.latestSchemaVersion);
    }

    @Import(name="nextSchemaVersion")
    private @Nullable Output<Integer> nextSchemaVersion;

    public Optional<Output<Integer>> nextSchemaVersion() {
        return Optional.ofNullable(this.nextSchemaVersion);
    }

    @Import(name="registryArn")
    private @Nullable Output<String> registryArn;

    public Optional<Output<String>> registryArn() {
        return Optional.ofNullable(this.registryArn);
    }

    @Import(name="registryName")
    private @Nullable Output<String> registryName;

    public Optional<Output<String>> registryName() {
        return Optional.ofNullable(this.registryName);
    }

    @Import(name="schemaCheckpoint")
    private @Nullable Output<Integer> schemaCheckpoint;

    public Optional<Output<Integer>> schemaCheckpoint() {
        return Optional.ofNullable(this.schemaCheckpoint);
    }

    @Import(name="schemaDefinition")
    private @Nullable Output<String> schemaDefinition;

    public Optional<Output<String>> schemaDefinition() {
        return Optional.ofNullable(this.schemaDefinition);
    }

    @Import(name="schemaName")
    private @Nullable Output<String> schemaName;

    public Optional<Output<String>> schemaName() {
        return Optional.ofNullable(this.schemaName);
    }

    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    private SchemaState() {}

    private SchemaState(SchemaState $) {
        this.arn = $.arn;
        this.compatibility = $.compatibility;
        this.dataFormat = $.dataFormat;
        this.description = $.description;
        this.latestSchemaVersion = $.latestSchemaVersion;
        this.nextSchemaVersion = $.nextSchemaVersion;
        this.registryArn = $.registryArn;
        this.registryName = $.registryName;
        this.schemaCheckpoint = $.schemaCheckpoint;
        this.schemaDefinition = $.schemaDefinition;
        this.schemaName = $.schemaName;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SchemaState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SchemaState $;

        public Builder() {
            $ = new SchemaState();
        }

        public Builder(SchemaState defaults) {
            $ = new SchemaState(Objects.requireNonNull(defaults));
        }

        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        public Builder compatibility(@Nullable Output<String> compatibility) {
            $.compatibility = compatibility;
            return this;
        }

        public Builder compatibility(String compatibility) {
            return compatibility(Output.of(compatibility));
        }

        public Builder dataFormat(@Nullable Output<String> dataFormat) {
            $.dataFormat = dataFormat;
            return this;
        }

        public Builder dataFormat(String dataFormat) {
            return dataFormat(Output.of(dataFormat));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder latestSchemaVersion(@Nullable Output<Integer> latestSchemaVersion) {
            $.latestSchemaVersion = latestSchemaVersion;
            return this;
        }

        public Builder latestSchemaVersion(Integer latestSchemaVersion) {
            return latestSchemaVersion(Output.of(latestSchemaVersion));
        }

        public Builder nextSchemaVersion(@Nullable Output<Integer> nextSchemaVersion) {
            $.nextSchemaVersion = nextSchemaVersion;
            return this;
        }

        public Builder nextSchemaVersion(Integer nextSchemaVersion) {
            return nextSchemaVersion(Output.of(nextSchemaVersion));
        }

        public Builder registryArn(@Nullable Output<String> registryArn) {
            $.registryArn = registryArn;
            return this;
        }

        public Builder registryArn(String registryArn) {
            return registryArn(Output.of(registryArn));
        }

        public Builder registryName(@Nullable Output<String> registryName) {
            $.registryName = registryName;
            return this;
        }

        public Builder registryName(String registryName) {
            return registryName(Output.of(registryName));
        }

        public Builder schemaCheckpoint(@Nullable Output<Integer> schemaCheckpoint) {
            $.schemaCheckpoint = schemaCheckpoint;
            return this;
        }

        public Builder schemaCheckpoint(Integer schemaCheckpoint) {
            return schemaCheckpoint(Output.of(schemaCheckpoint));
        }

        public Builder schemaDefinition(@Nullable Output<String> schemaDefinition) {
            $.schemaDefinition = schemaDefinition;
            return this;
        }

        public Builder schemaDefinition(String schemaDefinition) {
            return schemaDefinition(Output.of(schemaDefinition));
        }

        public Builder schemaName(@Nullable Output<String> schemaName) {
            $.schemaName = schemaName;
            return this;
        }

        public Builder schemaName(String schemaName) {
            return schemaName(Output.of(schemaName));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        public SchemaState build() {
            return $;
        }
    }

}
