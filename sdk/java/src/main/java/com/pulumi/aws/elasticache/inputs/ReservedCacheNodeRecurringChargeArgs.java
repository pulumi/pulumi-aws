// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.elasticache.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;


public final class ReservedCacheNodeRecurringChargeArgs extends com.pulumi.resources.ResourceArgs {

    public static final ReservedCacheNodeRecurringChargeArgs Empty = new ReservedCacheNodeRecurringChargeArgs();

    @Import(name="recurringChargeAmount", required=true)
    private Output<Double> recurringChargeAmount;

    public Output<Double> recurringChargeAmount() {
        return this.recurringChargeAmount;
    }

    @Import(name="recurringChargeFrequency", required=true)
    private Output<String> recurringChargeFrequency;

    public Output<String> recurringChargeFrequency() {
        return this.recurringChargeFrequency;
    }

    private ReservedCacheNodeRecurringChargeArgs() {}

    private ReservedCacheNodeRecurringChargeArgs(ReservedCacheNodeRecurringChargeArgs $) {
        this.recurringChargeAmount = $.recurringChargeAmount;
        this.recurringChargeFrequency = $.recurringChargeFrequency;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ReservedCacheNodeRecurringChargeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ReservedCacheNodeRecurringChargeArgs $;

        public Builder() {
            $ = new ReservedCacheNodeRecurringChargeArgs();
        }

        public Builder(ReservedCacheNodeRecurringChargeArgs defaults) {
            $ = new ReservedCacheNodeRecurringChargeArgs(Objects.requireNonNull(defaults));
        }

        public Builder recurringChargeAmount(Output<Double> recurringChargeAmount) {
            $.recurringChargeAmount = recurringChargeAmount;
            return this;
        }

        public Builder recurringChargeAmount(Double recurringChargeAmount) {
            return recurringChargeAmount(Output.of(recurringChargeAmount));
        }

        public Builder recurringChargeFrequency(Output<String> recurringChargeFrequency) {
            $.recurringChargeFrequency = recurringChargeFrequency;
            return this;
        }

        public Builder recurringChargeFrequency(String recurringChargeFrequency) {
            return recurringChargeFrequency(Output.of(recurringChargeFrequency));
        }

        public ReservedCacheNodeRecurringChargeArgs build() {
            if ($.recurringChargeAmount == null) {
                throw new MissingRequiredPropertyException("ReservedCacheNodeRecurringChargeArgs", "recurringChargeAmount");
            }
            if ($.recurringChargeFrequency == null) {
                throw new MissingRequiredPropertyException("ReservedCacheNodeRecurringChargeArgs", "recurringChargeFrequency");
            }
            return $;
        }
    }

}
