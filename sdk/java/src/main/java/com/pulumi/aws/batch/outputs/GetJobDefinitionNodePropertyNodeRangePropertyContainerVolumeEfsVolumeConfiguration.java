// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.batch.outputs;

import com.pulumi.aws.batch.outputs.GetJobDefinitionNodePropertyNodeRangePropertyContainerVolumeEfsVolumeConfigurationAuthorizationConfig;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetJobDefinitionNodePropertyNodeRangePropertyContainerVolumeEfsVolumeConfiguration {
    /**
     * @return The authorization configuration details for the Amazon EFS file system.
     * 
     */
    private List<GetJobDefinitionNodePropertyNodeRangePropertyContainerVolumeEfsVolumeConfigurationAuthorizationConfig> authorizationConfigs;
    /**
     * @return The Amazon EFS file system ID to use.
     * 
     */
    private String fileSystemId;
    /**
     * @return The directory within the Amazon EFS file system to mount as the root directory inside the host.
     * 
     */
    private String rootDirectory;
    /**
     * @return Determines whether to enable encryption for Amazon EFS data in transit between the Amazon ECS host and the Amazon EFS server
     * 
     */
    private String transitEncryption;
    /**
     * @return The port to use when sending encrypted data between the Amazon ECS host and the Amazon EFS server.
     * 
     */
    private Integer transitEncryptionPort;

    private GetJobDefinitionNodePropertyNodeRangePropertyContainerVolumeEfsVolumeConfiguration() {}
    /**
     * @return The authorization configuration details for the Amazon EFS file system.
     * 
     */
    public List<GetJobDefinitionNodePropertyNodeRangePropertyContainerVolumeEfsVolumeConfigurationAuthorizationConfig> authorizationConfigs() {
        return this.authorizationConfigs;
    }
    /**
     * @return The Amazon EFS file system ID to use.
     * 
     */
    public String fileSystemId() {
        return this.fileSystemId;
    }
    /**
     * @return The directory within the Amazon EFS file system to mount as the root directory inside the host.
     * 
     */
    public String rootDirectory() {
        return this.rootDirectory;
    }
    /**
     * @return Determines whether to enable encryption for Amazon EFS data in transit between the Amazon ECS host and the Amazon EFS server
     * 
     */
    public String transitEncryption() {
        return this.transitEncryption;
    }
    /**
     * @return The port to use when sending encrypted data between the Amazon ECS host and the Amazon EFS server.
     * 
     */
    public Integer transitEncryptionPort() {
        return this.transitEncryptionPort;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetJobDefinitionNodePropertyNodeRangePropertyContainerVolumeEfsVolumeConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetJobDefinitionNodePropertyNodeRangePropertyContainerVolumeEfsVolumeConfigurationAuthorizationConfig> authorizationConfigs;
        private String fileSystemId;
        private String rootDirectory;
        private String transitEncryption;
        private Integer transitEncryptionPort;
        public Builder() {}
        public Builder(GetJobDefinitionNodePropertyNodeRangePropertyContainerVolumeEfsVolumeConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authorizationConfigs = defaults.authorizationConfigs;
    	      this.fileSystemId = defaults.fileSystemId;
    	      this.rootDirectory = defaults.rootDirectory;
    	      this.transitEncryption = defaults.transitEncryption;
    	      this.transitEncryptionPort = defaults.transitEncryptionPort;
        }

        @CustomType.Setter
        public Builder authorizationConfigs(List<GetJobDefinitionNodePropertyNodeRangePropertyContainerVolumeEfsVolumeConfigurationAuthorizationConfig> authorizationConfigs) {
            if (authorizationConfigs == null) {
              throw new MissingRequiredPropertyException("GetJobDefinitionNodePropertyNodeRangePropertyContainerVolumeEfsVolumeConfiguration", "authorizationConfigs");
            }
            this.authorizationConfigs = authorizationConfigs;
            return this;
        }
        public Builder authorizationConfigs(GetJobDefinitionNodePropertyNodeRangePropertyContainerVolumeEfsVolumeConfigurationAuthorizationConfig... authorizationConfigs) {
            return authorizationConfigs(List.of(authorizationConfigs));
        }
        @CustomType.Setter
        public Builder fileSystemId(String fileSystemId) {
            if (fileSystemId == null) {
              throw new MissingRequiredPropertyException("GetJobDefinitionNodePropertyNodeRangePropertyContainerVolumeEfsVolumeConfiguration", "fileSystemId");
            }
            this.fileSystemId = fileSystemId;
            return this;
        }
        @CustomType.Setter
        public Builder rootDirectory(String rootDirectory) {
            if (rootDirectory == null) {
              throw new MissingRequiredPropertyException("GetJobDefinitionNodePropertyNodeRangePropertyContainerVolumeEfsVolumeConfiguration", "rootDirectory");
            }
            this.rootDirectory = rootDirectory;
            return this;
        }
        @CustomType.Setter
        public Builder transitEncryption(String transitEncryption) {
            if (transitEncryption == null) {
              throw new MissingRequiredPropertyException("GetJobDefinitionNodePropertyNodeRangePropertyContainerVolumeEfsVolumeConfiguration", "transitEncryption");
            }
            this.transitEncryption = transitEncryption;
            return this;
        }
        @CustomType.Setter
        public Builder transitEncryptionPort(Integer transitEncryptionPort) {
            if (transitEncryptionPort == null) {
              throw new MissingRequiredPropertyException("GetJobDefinitionNodePropertyNodeRangePropertyContainerVolumeEfsVolumeConfiguration", "transitEncryptionPort");
            }
            this.transitEncryptionPort = transitEncryptionPort;
            return this;
        }
        public GetJobDefinitionNodePropertyNodeRangePropertyContainerVolumeEfsVolumeConfiguration build() {
            final var _resultValue = new GetJobDefinitionNodePropertyNodeRangePropertyContainerVolumeEfsVolumeConfiguration();
            _resultValue.authorizationConfigs = authorizationConfigs;
            _resultValue.fileSystemId = fileSystemId;
            _resultValue.rootDirectory = rootDirectory;
            _resultValue.transitEncryption = transitEncryption;
            _resultValue.transitEncryptionPort = transitEncryptionPort;
            return _resultValue;
        }
    }
}
