// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.lightsail.inputs;

import com.pulumi.aws.lightsail.inputs.ContainerServicePrivateRegistryAccessArgs;
import com.pulumi.aws.lightsail.inputs.ContainerServicePublicDomainNamesArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ContainerServiceState extends com.pulumi.resources.ResourceArgs {

    public static final ContainerServiceState Empty = new ContainerServiceState();

    @Import(name="arn")
    private @Nullable Output<String> arn;

    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    @Import(name="availabilityZone")
    private @Nullable Output<String> availabilityZone;

    public Optional<Output<String>> availabilityZone() {
        return Optional.ofNullable(this.availabilityZone);
    }

    @Import(name="createdAt")
    private @Nullable Output<String> createdAt;

    public Optional<Output<String>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    @Import(name="isDisabled")
    private @Nullable Output<Boolean> isDisabled;

    public Optional<Output<Boolean>> isDisabled() {
        return Optional.ofNullable(this.isDisabled);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="power")
    private @Nullable Output<String> power;

    public Optional<Output<String>> power() {
        return Optional.ofNullable(this.power);
    }

    @Import(name="powerId")
    private @Nullable Output<String> powerId;

    public Optional<Output<String>> powerId() {
        return Optional.ofNullable(this.powerId);
    }

    @Import(name="principalArn")
    private @Nullable Output<String> principalArn;

    public Optional<Output<String>> principalArn() {
        return Optional.ofNullable(this.principalArn);
    }

    @Import(name="privateDomainName")
    private @Nullable Output<String> privateDomainName;

    public Optional<Output<String>> privateDomainName() {
        return Optional.ofNullable(this.privateDomainName);
    }

    @Import(name="privateRegistryAccess")
    private @Nullable Output<ContainerServicePrivateRegistryAccessArgs> privateRegistryAccess;

    public Optional<Output<ContainerServicePrivateRegistryAccessArgs>> privateRegistryAccess() {
        return Optional.ofNullable(this.privateRegistryAccess);
    }

    @Import(name="publicDomainNames")
    private @Nullable Output<ContainerServicePublicDomainNamesArgs> publicDomainNames;

    public Optional<Output<ContainerServicePublicDomainNamesArgs>> publicDomainNames() {
        return Optional.ofNullable(this.publicDomainNames);
    }

    @Import(name="resourceType")
    private @Nullable Output<String> resourceType;

    public Optional<Output<String>> resourceType() {
        return Optional.ofNullable(this.resourceType);
    }

    @Import(name="scale")
    private @Nullable Output<Integer> scale;

    public Optional<Output<Integer>> scale() {
        return Optional.ofNullable(this.scale);
    }

    @Import(name="state")
    private @Nullable Output<String> state;

    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    @Import(name="url")
    private @Nullable Output<String> url;

    public Optional<Output<String>> url() {
        return Optional.ofNullable(this.url);
    }

    private ContainerServiceState() {}

    private ContainerServiceState(ContainerServiceState $) {
        this.arn = $.arn;
        this.availabilityZone = $.availabilityZone;
        this.createdAt = $.createdAt;
        this.isDisabled = $.isDisabled;
        this.name = $.name;
        this.power = $.power;
        this.powerId = $.powerId;
        this.principalArn = $.principalArn;
        this.privateDomainName = $.privateDomainName;
        this.privateRegistryAccess = $.privateRegistryAccess;
        this.publicDomainNames = $.publicDomainNames;
        this.resourceType = $.resourceType;
        this.scale = $.scale;
        this.state = $.state;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
        this.url = $.url;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ContainerServiceState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ContainerServiceState $;

        public Builder() {
            $ = new ContainerServiceState();
        }

        public Builder(ContainerServiceState defaults) {
            $ = new ContainerServiceState(Objects.requireNonNull(defaults));
        }

        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        public Builder availabilityZone(@Nullable Output<String> availabilityZone) {
            $.availabilityZone = availabilityZone;
            return this;
        }

        public Builder availabilityZone(String availabilityZone) {
            return availabilityZone(Output.of(availabilityZone));
        }

        public Builder createdAt(@Nullable Output<String> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        public Builder createdAt(String createdAt) {
            return createdAt(Output.of(createdAt));
        }

        public Builder isDisabled(@Nullable Output<Boolean> isDisabled) {
            $.isDisabled = isDisabled;
            return this;
        }

        public Builder isDisabled(Boolean isDisabled) {
            return isDisabled(Output.of(isDisabled));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder power(@Nullable Output<String> power) {
            $.power = power;
            return this;
        }

        public Builder power(String power) {
            return power(Output.of(power));
        }

        public Builder powerId(@Nullable Output<String> powerId) {
            $.powerId = powerId;
            return this;
        }

        public Builder powerId(String powerId) {
            return powerId(Output.of(powerId));
        }

        public Builder principalArn(@Nullable Output<String> principalArn) {
            $.principalArn = principalArn;
            return this;
        }

        public Builder principalArn(String principalArn) {
            return principalArn(Output.of(principalArn));
        }

        public Builder privateDomainName(@Nullable Output<String> privateDomainName) {
            $.privateDomainName = privateDomainName;
            return this;
        }

        public Builder privateDomainName(String privateDomainName) {
            return privateDomainName(Output.of(privateDomainName));
        }

        public Builder privateRegistryAccess(@Nullable Output<ContainerServicePrivateRegistryAccessArgs> privateRegistryAccess) {
            $.privateRegistryAccess = privateRegistryAccess;
            return this;
        }

        public Builder privateRegistryAccess(ContainerServicePrivateRegistryAccessArgs privateRegistryAccess) {
            return privateRegistryAccess(Output.of(privateRegistryAccess));
        }

        public Builder publicDomainNames(@Nullable Output<ContainerServicePublicDomainNamesArgs> publicDomainNames) {
            $.publicDomainNames = publicDomainNames;
            return this;
        }

        public Builder publicDomainNames(ContainerServicePublicDomainNamesArgs publicDomainNames) {
            return publicDomainNames(Output.of(publicDomainNames));
        }

        public Builder resourceType(@Nullable Output<String> resourceType) {
            $.resourceType = resourceType;
            return this;
        }

        public Builder resourceType(String resourceType) {
            return resourceType(Output.of(resourceType));
        }

        public Builder scale(@Nullable Output<Integer> scale) {
            $.scale = scale;
            return this;
        }

        public Builder scale(Integer scale) {
            return scale(Output.of(scale));
        }

        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        public Builder state(String state) {
            return state(Output.of(state));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        public Builder url(@Nullable Output<String> url) {
            $.url = url;
            return this;
        }

        public Builder url(String url) {
            return url(Output.of(url));
        }

        public ContainerServiceState build() {
            return $;
        }
    }

}
