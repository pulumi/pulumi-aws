// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.opensearch.inputs;

import com.pulumi.aws.opensearch.inputs.OutboundConnectionConnectionPropertiesArgs;
import com.pulumi.aws.opensearch.inputs.OutboundConnectionLocalDomainInfoArgs;
import com.pulumi.aws.opensearch.inputs.OutboundConnectionRemoteDomainInfoArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OutboundConnectionState extends com.pulumi.resources.ResourceArgs {

    public static final OutboundConnectionState Empty = new OutboundConnectionState();

    /**
     * Accepts the connection.
     * 
     */
    @Import(name="acceptConnection")
    private @Nullable Output<Boolean> acceptConnection;

    /**
     * @return Accepts the connection.
     * 
     */
    public Optional<Output<Boolean>> acceptConnection() {
        return Optional.ofNullable(this.acceptConnection);
    }

    /**
     * Specifies the connection alias that will be used by the customer for this connection.
     * 
     */
    @Import(name="connectionAlias")
    private @Nullable Output<String> connectionAlias;

    /**
     * @return Specifies the connection alias that will be used by the customer for this connection.
     * 
     */
    public Optional<Output<String>> connectionAlias() {
        return Optional.ofNullable(this.connectionAlias);
    }

    /**
     * Specifies the connection mode. Accepted values are `DIRECT` or `VPC_ENDPOINT`.
     * 
     */
    @Import(name="connectionMode")
    private @Nullable Output<String> connectionMode;

    /**
     * @return Specifies the connection mode. Accepted values are `DIRECT` or `VPC_ENDPOINT`.
     * 
     */
    public Optional<Output<String>> connectionMode() {
        return Optional.ofNullable(this.connectionMode);
    }

    /**
     * Configuration block for the outbound connection.
     * 
     */
    @Import(name="connectionProperties")
    private @Nullable Output<OutboundConnectionConnectionPropertiesArgs> connectionProperties;

    /**
     * @return Configuration block for the outbound connection.
     * 
     */
    public Optional<Output<OutboundConnectionConnectionPropertiesArgs>> connectionProperties() {
        return Optional.ofNullable(this.connectionProperties);
    }

    /**
     * Status of the connection request.
     * 
     */
    @Import(name="connectionStatus")
    private @Nullable Output<String> connectionStatus;

    /**
     * @return Status of the connection request.
     * 
     */
    public Optional<Output<String>> connectionStatus() {
        return Optional.ofNullable(this.connectionStatus);
    }

    /**
     * Configuration block for the local Opensearch domain.
     * 
     */
    @Import(name="localDomainInfo")
    private @Nullable Output<OutboundConnectionLocalDomainInfoArgs> localDomainInfo;

    /**
     * @return Configuration block for the local Opensearch domain.
     * 
     */
    public Optional<Output<OutboundConnectionLocalDomainInfoArgs>> localDomainInfo() {
        return Optional.ofNullable(this.localDomainInfo);
    }

    /**
     * Configuration block for the remote Opensearch domain.
     * 
     */
    @Import(name="remoteDomainInfo")
    private @Nullable Output<OutboundConnectionRemoteDomainInfoArgs> remoteDomainInfo;

    /**
     * @return Configuration block for the remote Opensearch domain.
     * 
     */
    public Optional<Output<OutboundConnectionRemoteDomainInfoArgs>> remoteDomainInfo() {
        return Optional.ofNullable(this.remoteDomainInfo);
    }

    private OutboundConnectionState() {}

    private OutboundConnectionState(OutboundConnectionState $) {
        this.acceptConnection = $.acceptConnection;
        this.connectionAlias = $.connectionAlias;
        this.connectionMode = $.connectionMode;
        this.connectionProperties = $.connectionProperties;
        this.connectionStatus = $.connectionStatus;
        this.localDomainInfo = $.localDomainInfo;
        this.remoteDomainInfo = $.remoteDomainInfo;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OutboundConnectionState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OutboundConnectionState $;

        public Builder() {
            $ = new OutboundConnectionState();
        }

        public Builder(OutboundConnectionState defaults) {
            $ = new OutboundConnectionState(Objects.requireNonNull(defaults));
        }

        /**
         * @param acceptConnection Accepts the connection.
         * 
         * @return builder
         * 
         */
        public Builder acceptConnection(@Nullable Output<Boolean> acceptConnection) {
            $.acceptConnection = acceptConnection;
            return this;
        }

        /**
         * @param acceptConnection Accepts the connection.
         * 
         * @return builder
         * 
         */
        public Builder acceptConnection(Boolean acceptConnection) {
            return acceptConnection(Output.of(acceptConnection));
        }

        /**
         * @param connectionAlias Specifies the connection alias that will be used by the customer for this connection.
         * 
         * @return builder
         * 
         */
        public Builder connectionAlias(@Nullable Output<String> connectionAlias) {
            $.connectionAlias = connectionAlias;
            return this;
        }

        /**
         * @param connectionAlias Specifies the connection alias that will be used by the customer for this connection.
         * 
         * @return builder
         * 
         */
        public Builder connectionAlias(String connectionAlias) {
            return connectionAlias(Output.of(connectionAlias));
        }

        /**
         * @param connectionMode Specifies the connection mode. Accepted values are `DIRECT` or `VPC_ENDPOINT`.
         * 
         * @return builder
         * 
         */
        public Builder connectionMode(@Nullable Output<String> connectionMode) {
            $.connectionMode = connectionMode;
            return this;
        }

        /**
         * @param connectionMode Specifies the connection mode. Accepted values are `DIRECT` or `VPC_ENDPOINT`.
         * 
         * @return builder
         * 
         */
        public Builder connectionMode(String connectionMode) {
            return connectionMode(Output.of(connectionMode));
        }

        /**
         * @param connectionProperties Configuration block for the outbound connection.
         * 
         * @return builder
         * 
         */
        public Builder connectionProperties(@Nullable Output<OutboundConnectionConnectionPropertiesArgs> connectionProperties) {
            $.connectionProperties = connectionProperties;
            return this;
        }

        /**
         * @param connectionProperties Configuration block for the outbound connection.
         * 
         * @return builder
         * 
         */
        public Builder connectionProperties(OutboundConnectionConnectionPropertiesArgs connectionProperties) {
            return connectionProperties(Output.of(connectionProperties));
        }

        /**
         * @param connectionStatus Status of the connection request.
         * 
         * @return builder
         * 
         */
        public Builder connectionStatus(@Nullable Output<String> connectionStatus) {
            $.connectionStatus = connectionStatus;
            return this;
        }

        /**
         * @param connectionStatus Status of the connection request.
         * 
         * @return builder
         * 
         */
        public Builder connectionStatus(String connectionStatus) {
            return connectionStatus(Output.of(connectionStatus));
        }

        /**
         * @param localDomainInfo Configuration block for the local Opensearch domain.
         * 
         * @return builder
         * 
         */
        public Builder localDomainInfo(@Nullable Output<OutboundConnectionLocalDomainInfoArgs> localDomainInfo) {
            $.localDomainInfo = localDomainInfo;
            return this;
        }

        /**
         * @param localDomainInfo Configuration block for the local Opensearch domain.
         * 
         * @return builder
         * 
         */
        public Builder localDomainInfo(OutboundConnectionLocalDomainInfoArgs localDomainInfo) {
            return localDomainInfo(Output.of(localDomainInfo));
        }

        /**
         * @param remoteDomainInfo Configuration block for the remote Opensearch domain.
         * 
         * @return builder
         * 
         */
        public Builder remoteDomainInfo(@Nullable Output<OutboundConnectionRemoteDomainInfoArgs> remoteDomainInfo) {
            $.remoteDomainInfo = remoteDomainInfo;
            return this;
        }

        /**
         * @param remoteDomainInfo Configuration block for the remote Opensearch domain.
         * 
         * @return builder
         * 
         */
        public Builder remoteDomainInfo(OutboundConnectionRemoteDomainInfoArgs remoteDomainInfo) {
            return remoteDomainInfo(Output.of(remoteDomainInfo));
        }

        public OutboundConnectionState build() {
            return $;
        }
    }

}
