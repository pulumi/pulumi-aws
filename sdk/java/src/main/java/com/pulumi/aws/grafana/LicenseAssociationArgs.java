// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.grafana;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LicenseAssociationArgs extends com.pulumi.resources.ResourceArgs {

    public static final LicenseAssociationArgs Empty = new LicenseAssociationArgs();

    /**
     * A token from Grafana Labs that ties your AWS account with a Grafana Labs account.
     * 
     */
    @Import(name="grafanaToken")
    private @Nullable Output<String> grafanaToken;

    /**
     * @return A token from Grafana Labs that ties your AWS account with a Grafana Labs account.
     * 
     */
    public Optional<Output<String>> grafanaToken() {
        return Optional.ofNullable(this.grafanaToken);
    }

    /**
     * The type of license for the workspace license association. Valid values are `ENTERPRISE` and `ENTERPRISE_FREE_TRIAL`.
     * 
     */
    @Import(name="licenseType", required=true)
    private Output<String> licenseType;

    /**
     * @return The type of license for the workspace license association. Valid values are `ENTERPRISE` and `ENTERPRISE_FREE_TRIAL`.
     * 
     */
    public Output<String> licenseType() {
        return this.licenseType;
    }

    /**
     * The workspace id.
     * 
     */
    @Import(name="workspaceId", required=true)
    private Output<String> workspaceId;

    /**
     * @return The workspace id.
     * 
     */
    public Output<String> workspaceId() {
        return this.workspaceId;
    }

    private LicenseAssociationArgs() {}

    private LicenseAssociationArgs(LicenseAssociationArgs $) {
        this.grafanaToken = $.grafanaToken;
        this.licenseType = $.licenseType;
        this.workspaceId = $.workspaceId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LicenseAssociationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LicenseAssociationArgs $;

        public Builder() {
            $ = new LicenseAssociationArgs();
        }

        public Builder(LicenseAssociationArgs defaults) {
            $ = new LicenseAssociationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param grafanaToken A token from Grafana Labs that ties your AWS account with a Grafana Labs account.
         * 
         * @return builder
         * 
         */
        public Builder grafanaToken(@Nullable Output<String> grafanaToken) {
            $.grafanaToken = grafanaToken;
            return this;
        }

        /**
         * @param grafanaToken A token from Grafana Labs that ties your AWS account with a Grafana Labs account.
         * 
         * @return builder
         * 
         */
        public Builder grafanaToken(String grafanaToken) {
            return grafanaToken(Output.of(grafanaToken));
        }

        /**
         * @param licenseType The type of license for the workspace license association. Valid values are `ENTERPRISE` and `ENTERPRISE_FREE_TRIAL`.
         * 
         * @return builder
         * 
         */
        public Builder licenseType(Output<String> licenseType) {
            $.licenseType = licenseType;
            return this;
        }

        /**
         * @param licenseType The type of license for the workspace license association. Valid values are `ENTERPRISE` and `ENTERPRISE_FREE_TRIAL`.
         * 
         * @return builder
         * 
         */
        public Builder licenseType(String licenseType) {
            return licenseType(Output.of(licenseType));
        }

        /**
         * @param workspaceId The workspace id.
         * 
         * @return builder
         * 
         */
        public Builder workspaceId(Output<String> workspaceId) {
            $.workspaceId = workspaceId;
            return this;
        }

        /**
         * @param workspaceId The workspace id.
         * 
         * @return builder
         * 
         */
        public Builder workspaceId(String workspaceId) {
            return workspaceId(Output.of(workspaceId));
        }

        public LicenseAssociationArgs build() {
            if ($.licenseType == null) {
                throw new MissingRequiredPropertyException("LicenseAssociationArgs", "licenseType");
            }
            if ($.workspaceId == null) {
                throw new MissingRequiredPropertyException("LicenseAssociationArgs", "workspaceId");
            }
            return $;
        }
    }

}
