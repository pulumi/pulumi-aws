// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.backup;

import com.pulumi.aws.backup.inputs.LogicallyAirGappedVaultTimeoutsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LogicallyAirGappedVaultArgs extends com.pulumi.resources.ResourceArgs {

    public static final LogicallyAirGappedVaultArgs Empty = new LogicallyAirGappedVaultArgs();

    /**
     * Maximum retention period that the Logically Air Gapped Backup Vault retains recovery points.
     * 
     */
    @Import(name="maxRetentionDays", required=true)
    private Output<Integer> maxRetentionDays;

    /**
     * @return Maximum retention period that the Logically Air Gapped Backup Vault retains recovery points.
     * 
     */
    public Output<Integer> maxRetentionDays() {
        return this.maxRetentionDays;
    }

    /**
     * Minimum retention period that the Logically Air Gapped Backup Vault retains recovery points.
     * 
     */
    @Import(name="minRetentionDays", required=true)
    private Output<Integer> minRetentionDays;

    /**
     * @return Minimum retention period that the Logically Air Gapped Backup Vault retains recovery points.
     * 
     */
    public Output<Integer> minRetentionDays() {
        return this.minRetentionDays;
    }

    /**
     * Name of the Logically Air Gapped Backup Vault to create.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the Logically Air Gapped Backup Vault to create.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Metadata that you can assign to help organize the resources that you create. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Metadata that you can assign to help organize the resources that you create. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="timeouts")
    private @Nullable Output<LogicallyAirGappedVaultTimeoutsArgs> timeouts;

    public Optional<Output<LogicallyAirGappedVaultTimeoutsArgs>> timeouts() {
        return Optional.ofNullable(this.timeouts);
    }

    private LogicallyAirGappedVaultArgs() {}

    private LogicallyAirGappedVaultArgs(LogicallyAirGappedVaultArgs $) {
        this.maxRetentionDays = $.maxRetentionDays;
        this.minRetentionDays = $.minRetentionDays;
        this.name = $.name;
        this.tags = $.tags;
        this.timeouts = $.timeouts;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LogicallyAirGappedVaultArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LogicallyAirGappedVaultArgs $;

        public Builder() {
            $ = new LogicallyAirGappedVaultArgs();
        }

        public Builder(LogicallyAirGappedVaultArgs defaults) {
            $ = new LogicallyAirGappedVaultArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param maxRetentionDays Maximum retention period that the Logically Air Gapped Backup Vault retains recovery points.
         * 
         * @return builder
         * 
         */
        public Builder maxRetentionDays(Output<Integer> maxRetentionDays) {
            $.maxRetentionDays = maxRetentionDays;
            return this;
        }

        /**
         * @param maxRetentionDays Maximum retention period that the Logically Air Gapped Backup Vault retains recovery points.
         * 
         * @return builder
         * 
         */
        public Builder maxRetentionDays(Integer maxRetentionDays) {
            return maxRetentionDays(Output.of(maxRetentionDays));
        }

        /**
         * @param minRetentionDays Minimum retention period that the Logically Air Gapped Backup Vault retains recovery points.
         * 
         * @return builder
         * 
         */
        public Builder minRetentionDays(Output<Integer> minRetentionDays) {
            $.minRetentionDays = minRetentionDays;
            return this;
        }

        /**
         * @param minRetentionDays Minimum retention period that the Logically Air Gapped Backup Vault retains recovery points.
         * 
         * @return builder
         * 
         */
        public Builder minRetentionDays(Integer minRetentionDays) {
            return minRetentionDays(Output.of(minRetentionDays));
        }

        /**
         * @param name Name of the Logically Air Gapped Backup Vault to create.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the Logically Air Gapped Backup Vault to create.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param tags Metadata that you can assign to help organize the resources that you create. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Metadata that you can assign to help organize the resources that you create. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder timeouts(@Nullable Output<LogicallyAirGappedVaultTimeoutsArgs> timeouts) {
            $.timeouts = timeouts;
            return this;
        }

        public Builder timeouts(LogicallyAirGappedVaultTimeoutsArgs timeouts) {
            return timeouts(Output.of(timeouts));
        }

        public LogicallyAirGappedVaultArgs build() {
            if ($.maxRetentionDays == null) {
                throw new MissingRequiredPropertyException("LogicallyAirGappedVaultArgs", "maxRetentionDays");
            }
            if ($.minRetentionDays == null) {
                throw new MissingRequiredPropertyException("LogicallyAirGappedVaultArgs", "minRetentionDays");
            }
            return $;
        }
    }

}
