// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.lightsail.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ContainerServiceDeploymentVersionContainerArgs extends com.pulumi.resources.ResourceArgs {

    public static final ContainerServiceDeploymentVersionContainerArgs Empty = new ContainerServiceDeploymentVersionContainerArgs();

    @Import(name="commands")
    private @Nullable Output<List<String>> commands;

    public Optional<Output<List<String>>> commands() {
        return Optional.ofNullable(this.commands);
    }

    @Import(name="containerName", required=true)
    private Output<String> containerName;

    public Output<String> containerName() {
        return this.containerName;
    }

    @Import(name="environment")
    private @Nullable Output<Map<String,String>> environment;

    public Optional<Output<Map<String,String>>> environment() {
        return Optional.ofNullable(this.environment);
    }

    @Import(name="image", required=true)
    private Output<String> image;

    public Output<String> image() {
        return this.image;
    }

    @Import(name="ports")
    private @Nullable Output<Map<String,String>> ports;

    public Optional<Output<Map<String,String>>> ports() {
        return Optional.ofNullable(this.ports);
    }

    private ContainerServiceDeploymentVersionContainerArgs() {}

    private ContainerServiceDeploymentVersionContainerArgs(ContainerServiceDeploymentVersionContainerArgs $) {
        this.commands = $.commands;
        this.containerName = $.containerName;
        this.environment = $.environment;
        this.image = $.image;
        this.ports = $.ports;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ContainerServiceDeploymentVersionContainerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ContainerServiceDeploymentVersionContainerArgs $;

        public Builder() {
            $ = new ContainerServiceDeploymentVersionContainerArgs();
        }

        public Builder(ContainerServiceDeploymentVersionContainerArgs defaults) {
            $ = new ContainerServiceDeploymentVersionContainerArgs(Objects.requireNonNull(defaults));
        }

        public Builder commands(@Nullable Output<List<String>> commands) {
            $.commands = commands;
            return this;
        }

        public Builder commands(List<String> commands) {
            return commands(Output.of(commands));
        }

        public Builder commands(String... commands) {
            return commands(List.of(commands));
        }

        public Builder containerName(Output<String> containerName) {
            $.containerName = containerName;
            return this;
        }

        public Builder containerName(String containerName) {
            return containerName(Output.of(containerName));
        }

        public Builder environment(@Nullable Output<Map<String,String>> environment) {
            $.environment = environment;
            return this;
        }

        public Builder environment(Map<String,String> environment) {
            return environment(Output.of(environment));
        }

        public Builder image(Output<String> image) {
            $.image = image;
            return this;
        }

        public Builder image(String image) {
            return image(Output.of(image));
        }

        public Builder ports(@Nullable Output<Map<String,String>> ports) {
            $.ports = ports;
            return this;
        }

        public Builder ports(Map<String,String> ports) {
            return ports(Output.of(ports));
        }

        public ContainerServiceDeploymentVersionContainerArgs build() {
            $.containerName = Objects.requireNonNull($.containerName, "expected parameter 'containerName' to be non-null");
            $.image = Objects.requireNonNull($.image, "expected parameter 'image' to be non-null");
            return $;
        }
    }

}
