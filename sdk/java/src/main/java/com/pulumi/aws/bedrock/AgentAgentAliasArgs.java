// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.bedrock;

import com.pulumi.aws.bedrock.inputs.AgentAgentAliasRoutingConfigurationArgs;
import com.pulumi.aws.bedrock.inputs.AgentAgentAliasTimeoutsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AgentAgentAliasArgs extends com.pulumi.resources.ResourceArgs {

    public static final AgentAgentAliasArgs Empty = new AgentAgentAliasArgs();

    /**
     * Name of the alias.
     * 
     */
    @Import(name="agentAliasName", required=true)
    private Output<String> agentAliasName;

    /**
     * @return Name of the alias.
     * 
     */
    public Output<String> agentAliasName() {
        return this.agentAliasName;
    }

    /**
     * Identifier of the agent to create an alias for.
     * 
     * The following arguments are optional:
     * 
     */
    @Import(name="agentId", required=true)
    private Output<String> agentId;

    /**
     * @return Identifier of the agent to create an alias for.
     * 
     * The following arguments are optional:
     * 
     */
    public Output<String> agentId() {
        return this.agentId;
    }

    /**
     * Description of the alias.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the alias.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Details about the routing configuration of the alias. See `routing_configuration` Block for details.
     * 
     */
    @Import(name="routingConfigurations")
    private @Nullable Output<List<AgentAgentAliasRoutingConfigurationArgs>> routingConfigurations;

    /**
     * @return Details about the routing configuration of the alias. See `routing_configuration` Block for details.
     * 
     */
    public Optional<Output<List<AgentAgentAliasRoutingConfigurationArgs>>> routingConfigurations() {
        return Optional.ofNullable(this.routingConfigurations);
    }

    /**
     * Map of tags assigned to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Map of tags assigned to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="timeouts")
    private @Nullable Output<AgentAgentAliasTimeoutsArgs> timeouts;

    public Optional<Output<AgentAgentAliasTimeoutsArgs>> timeouts() {
        return Optional.ofNullable(this.timeouts);
    }

    private AgentAgentAliasArgs() {}

    private AgentAgentAliasArgs(AgentAgentAliasArgs $) {
        this.agentAliasName = $.agentAliasName;
        this.agentId = $.agentId;
        this.description = $.description;
        this.routingConfigurations = $.routingConfigurations;
        this.tags = $.tags;
        this.timeouts = $.timeouts;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AgentAgentAliasArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AgentAgentAliasArgs $;

        public Builder() {
            $ = new AgentAgentAliasArgs();
        }

        public Builder(AgentAgentAliasArgs defaults) {
            $ = new AgentAgentAliasArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param agentAliasName Name of the alias.
         * 
         * @return builder
         * 
         */
        public Builder agentAliasName(Output<String> agentAliasName) {
            $.agentAliasName = agentAliasName;
            return this;
        }

        /**
         * @param agentAliasName Name of the alias.
         * 
         * @return builder
         * 
         */
        public Builder agentAliasName(String agentAliasName) {
            return agentAliasName(Output.of(agentAliasName));
        }

        /**
         * @param agentId Identifier of the agent to create an alias for.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder agentId(Output<String> agentId) {
            $.agentId = agentId;
            return this;
        }

        /**
         * @param agentId Identifier of the agent to create an alias for.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder agentId(String agentId) {
            return agentId(Output.of(agentId));
        }

        /**
         * @param description Description of the alias.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the alias.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param routingConfigurations Details about the routing configuration of the alias. See `routing_configuration` Block for details.
         * 
         * @return builder
         * 
         */
        public Builder routingConfigurations(@Nullable Output<List<AgentAgentAliasRoutingConfigurationArgs>> routingConfigurations) {
            $.routingConfigurations = routingConfigurations;
            return this;
        }

        /**
         * @param routingConfigurations Details about the routing configuration of the alias. See `routing_configuration` Block for details.
         * 
         * @return builder
         * 
         */
        public Builder routingConfigurations(List<AgentAgentAliasRoutingConfigurationArgs> routingConfigurations) {
            return routingConfigurations(Output.of(routingConfigurations));
        }

        /**
         * @param routingConfigurations Details about the routing configuration of the alias. See `routing_configuration` Block for details.
         * 
         * @return builder
         * 
         */
        public Builder routingConfigurations(AgentAgentAliasRoutingConfigurationArgs... routingConfigurations) {
            return routingConfigurations(List.of(routingConfigurations));
        }

        /**
         * @param tags Map of tags assigned to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Map of tags assigned to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder timeouts(@Nullable Output<AgentAgentAliasTimeoutsArgs> timeouts) {
            $.timeouts = timeouts;
            return this;
        }

        public Builder timeouts(AgentAgentAliasTimeoutsArgs timeouts) {
            return timeouts(Output.of(timeouts));
        }

        public AgentAgentAliasArgs build() {
            if ($.agentAliasName == null) {
                throw new MissingRequiredPropertyException("AgentAgentAliasArgs", "agentAliasName");
            }
            if ($.agentId == null) {
                throw new MissingRequiredPropertyException("AgentAgentAliasArgs", "agentId");
            }
            return $;
        }
    }

}
