// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.dms.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetReplicationSubnetGroupResult {
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private @Nullable String id;
    private @Nullable String replicationSubnetGroupArn;
    /**
     * @return Description for the subnet group.
     * 
     */
    private @Nullable String replicationSubnetGroupDescription;
    private String replicationSubnetGroupId;
    private @Nullable String subnetGroupStatus;
    /**
     * @return List of at least 2 EC2 subnet IDs for the subnet group. The subnets must cover at least 2 availability zones.
     * 
     */
    private @Nullable List<String> subnetIds;
    private @Nullable Map<String,String> tags;
    /**
     * @return The ID of the VPC the subnet group is in.
     * 
     */
    private @Nullable String vpcId;

    private GetReplicationSubnetGroupResult() {}
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    public Optional<String> replicationSubnetGroupArn() {
        return Optional.ofNullable(this.replicationSubnetGroupArn);
    }
    /**
     * @return Description for the subnet group.
     * 
     */
    public Optional<String> replicationSubnetGroupDescription() {
        return Optional.ofNullable(this.replicationSubnetGroupDescription);
    }
    public String replicationSubnetGroupId() {
        return this.replicationSubnetGroupId;
    }
    public Optional<String> subnetGroupStatus() {
        return Optional.ofNullable(this.subnetGroupStatus);
    }
    /**
     * @return List of at least 2 EC2 subnet IDs for the subnet group. The subnets must cover at least 2 availability zones.
     * 
     */
    public List<String> subnetIds() {
        return this.subnetIds == null ? List.of() : this.subnetIds;
    }
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * @return The ID of the VPC the subnet group is in.
     * 
     */
    public Optional<String> vpcId() {
        return Optional.ofNullable(this.vpcId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetReplicationSubnetGroupResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String id;
        private @Nullable String replicationSubnetGroupArn;
        private @Nullable String replicationSubnetGroupDescription;
        private String replicationSubnetGroupId;
        private @Nullable String subnetGroupStatus;
        private @Nullable List<String> subnetIds;
        private @Nullable Map<String,String> tags;
        private @Nullable String vpcId;
        public Builder() {}
        public Builder(GetReplicationSubnetGroupResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.id = defaults.id;
    	      this.replicationSubnetGroupArn = defaults.replicationSubnetGroupArn;
    	      this.replicationSubnetGroupDescription = defaults.replicationSubnetGroupDescription;
    	      this.replicationSubnetGroupId = defaults.replicationSubnetGroupId;
    	      this.subnetGroupStatus = defaults.subnetGroupStatus;
    	      this.subnetIds = defaults.subnetIds;
    	      this.tags = defaults.tags;
    	      this.vpcId = defaults.vpcId;
        }

        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder replicationSubnetGroupArn(@Nullable String replicationSubnetGroupArn) {
            this.replicationSubnetGroupArn = replicationSubnetGroupArn;
            return this;
        }
        @CustomType.Setter
        public Builder replicationSubnetGroupDescription(@Nullable String replicationSubnetGroupDescription) {
            this.replicationSubnetGroupDescription = replicationSubnetGroupDescription;
            return this;
        }
        @CustomType.Setter
        public Builder replicationSubnetGroupId(String replicationSubnetGroupId) {
            this.replicationSubnetGroupId = Objects.requireNonNull(replicationSubnetGroupId);
            return this;
        }
        @CustomType.Setter
        public Builder subnetGroupStatus(@Nullable String subnetGroupStatus) {
            this.subnetGroupStatus = subnetGroupStatus;
            return this;
        }
        @CustomType.Setter
        public Builder subnetIds(@Nullable List<String> subnetIds) {
            this.subnetIds = subnetIds;
            return this;
        }
        public Builder subnetIds(String... subnetIds) {
            return subnetIds(List.of(subnetIds));
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder vpcId(@Nullable String vpcId) {
            this.vpcId = vpcId;
            return this;
        }
        public GetReplicationSubnetGroupResult build() {
            final var o = new GetReplicationSubnetGroupResult();
            o.id = id;
            o.replicationSubnetGroupArn = replicationSubnetGroupArn;
            o.replicationSubnetGroupDescription = replicationSubnetGroupDescription;
            o.replicationSubnetGroupId = replicationSubnetGroupId;
            o.subnetGroupStatus = subnetGroupStatus;
            o.subnetIds = subnetIds;
            o.tags = tags;
            o.vpcId = vpcId;
            return o;
        }
    }
}
