// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.glue.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TriggerEventBatchingConditionArgs extends com.pulumi.resources.ResourceArgs {

    public static final TriggerEventBatchingConditionArgs Empty = new TriggerEventBatchingConditionArgs();

    /**
     * Number of events that must be received from Amazon EventBridge before EventBridge  event trigger fires.
     * 
     */
    @Import(name="batchSize", required=true)
    private Output<Integer> batchSize;

    /**
     * @return Number of events that must be received from Amazon EventBridge before EventBridge  event trigger fires.
     * 
     */
    public Output<Integer> batchSize() {
        return this.batchSize;
    }

    /**
     * Window of time in seconds after which EventBridge event trigger fires. Window starts when first event is received. Default value is `900`.
     * 
     */
    @Import(name="batchWindow")
    private @Nullable Output<Integer> batchWindow;

    /**
     * @return Window of time in seconds after which EventBridge event trigger fires. Window starts when first event is received. Default value is `900`.
     * 
     */
    public Optional<Output<Integer>> batchWindow() {
        return Optional.ofNullable(this.batchWindow);
    }

    private TriggerEventBatchingConditionArgs() {}

    private TriggerEventBatchingConditionArgs(TriggerEventBatchingConditionArgs $) {
        this.batchSize = $.batchSize;
        this.batchWindow = $.batchWindow;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TriggerEventBatchingConditionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TriggerEventBatchingConditionArgs $;

        public Builder() {
            $ = new TriggerEventBatchingConditionArgs();
        }

        public Builder(TriggerEventBatchingConditionArgs defaults) {
            $ = new TriggerEventBatchingConditionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param batchSize Number of events that must be received from Amazon EventBridge before EventBridge  event trigger fires.
         * 
         * @return builder
         * 
         */
        public Builder batchSize(Output<Integer> batchSize) {
            $.batchSize = batchSize;
            return this;
        }

        /**
         * @param batchSize Number of events that must be received from Amazon EventBridge before EventBridge  event trigger fires.
         * 
         * @return builder
         * 
         */
        public Builder batchSize(Integer batchSize) {
            return batchSize(Output.of(batchSize));
        }

        /**
         * @param batchWindow Window of time in seconds after which EventBridge event trigger fires. Window starts when first event is received. Default value is `900`.
         * 
         * @return builder
         * 
         */
        public Builder batchWindow(@Nullable Output<Integer> batchWindow) {
            $.batchWindow = batchWindow;
            return this;
        }

        /**
         * @param batchWindow Window of time in seconds after which EventBridge event trigger fires. Window starts when first event is received. Default value is `900`.
         * 
         * @return builder
         * 
         */
        public Builder batchWindow(Integer batchWindow) {
            return batchWindow(Output.of(batchWindow));
        }

        public TriggerEventBatchingConditionArgs build() {
            $.batchSize = Objects.requireNonNull($.batchSize, "expected parameter 'batchSize' to be non-null");
            return $;
        }
    }

}
