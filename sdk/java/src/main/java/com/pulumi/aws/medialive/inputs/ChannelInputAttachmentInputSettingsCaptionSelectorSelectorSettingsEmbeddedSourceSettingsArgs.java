// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.medialive.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettingsArgs Empty = new ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettingsArgs();

    /**
     * If upconvert, 608 data is both passed through via the “608 compatibility bytes” fields of the 708 wrapper as well as translated into 708. 708 data present in the source content will be discarded.
     * 
     */
    @Import(name="convert608To708")
    private @Nullable Output<String> convert608To708;

    /**
     * @return If upconvert, 608 data is both passed through via the “608 compatibility bytes” fields of the 708 wrapper as well as translated into 708. 708 data present in the source content will be discarded.
     * 
     */
    public Optional<Output<String>> convert608To708() {
        return Optional.ofNullable(this.convert608To708);
    }

    /**
     * Set to “auto” to handle streams with intermittent and/or non-aligned SCTE-20 and Embedded captions.
     * 
     */
    @Import(name="scte20Detection")
    private @Nullable Output<String> scte20Detection;

    /**
     * @return Set to “auto” to handle streams with intermittent and/or non-aligned SCTE-20 and Embedded captions.
     * 
     */
    public Optional<Output<String>> scte20Detection() {
        return Optional.ofNullable(this.scte20Detection);
    }

    /**
     * Specifies the 608/708 channel number within the video track from which to extract captions. Unused for passthrough.
     * 
     */
    @Import(name="source608ChannelNumber")
    private @Nullable Output<Integer> source608ChannelNumber;

    /**
     * @return Specifies the 608/708 channel number within the video track from which to extract captions. Unused for passthrough.
     * 
     */
    public Optional<Output<Integer>> source608ChannelNumber() {
        return Optional.ofNullable(this.source608ChannelNumber);
    }

    private ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettingsArgs() {}

    private ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettingsArgs(ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettingsArgs $) {
        this.convert608To708 = $.convert608To708;
        this.scte20Detection = $.scte20Detection;
        this.source608ChannelNumber = $.source608ChannelNumber;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettingsArgs $;

        public Builder() {
            $ = new ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettingsArgs();
        }

        public Builder(ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettingsArgs defaults) {
            $ = new ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettingsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param convert608To708 If upconvert, 608 data is both passed through via the “608 compatibility bytes” fields of the 708 wrapper as well as translated into 708. 708 data present in the source content will be discarded.
         * 
         * @return builder
         * 
         */
        public Builder convert608To708(@Nullable Output<String> convert608To708) {
            $.convert608To708 = convert608To708;
            return this;
        }

        /**
         * @param convert608To708 If upconvert, 608 data is both passed through via the “608 compatibility bytes” fields of the 708 wrapper as well as translated into 708. 708 data present in the source content will be discarded.
         * 
         * @return builder
         * 
         */
        public Builder convert608To708(String convert608To708) {
            return convert608To708(Output.of(convert608To708));
        }

        /**
         * @param scte20Detection Set to “auto” to handle streams with intermittent and/or non-aligned SCTE-20 and Embedded captions.
         * 
         * @return builder
         * 
         */
        public Builder scte20Detection(@Nullable Output<String> scte20Detection) {
            $.scte20Detection = scte20Detection;
            return this;
        }

        /**
         * @param scte20Detection Set to “auto” to handle streams with intermittent and/or non-aligned SCTE-20 and Embedded captions.
         * 
         * @return builder
         * 
         */
        public Builder scte20Detection(String scte20Detection) {
            return scte20Detection(Output.of(scte20Detection));
        }

        /**
         * @param source608ChannelNumber Specifies the 608/708 channel number within the video track from which to extract captions. Unused for passthrough.
         * 
         * @return builder
         * 
         */
        public Builder source608ChannelNumber(@Nullable Output<Integer> source608ChannelNumber) {
            $.source608ChannelNumber = source608ChannelNumber;
            return this;
        }

        /**
         * @param source608ChannelNumber Specifies the 608/708 channel number within the video track from which to extract captions. Unused for passthrough.
         * 
         * @return builder
         * 
         */
        public Builder source608ChannelNumber(Integer source608ChannelNumber) {
            return source608ChannelNumber(Output.of(source608ChannelNumber));
        }

        public ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettingsArgs build() {
            return $;
        }
    }

}
