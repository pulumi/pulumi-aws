// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.amp;

import com.pulumi.aws.amp.inputs.WorkspaceConfigurationLimitsPerLabelSetArgs;
import com.pulumi.aws.amp.inputs.WorkspaceConfigurationTimeoutsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WorkspaceConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final WorkspaceConfigurationArgs Empty = new WorkspaceConfigurationArgs();

    /**
     * Configuration block for setting limits on metrics with specific label sets. Detailed below.
     * 
     */
    @Import(name="limitsPerLabelSets")
    private @Nullable Output<List<WorkspaceConfigurationLimitsPerLabelSetArgs>> limitsPerLabelSets;

    /**
     * @return Configuration block for setting limits on metrics with specific label sets. Detailed below.
     * 
     */
    public Optional<Output<List<WorkspaceConfigurationLimitsPerLabelSetArgs>>> limitsPerLabelSets() {
        return Optional.ofNullable(this.limitsPerLabelSets);
    }

    /**
     * Number of days to retain metric data in the workspace.
     * 
     */
    @Import(name="retentionPeriodInDays")
    private @Nullable Output<Integer> retentionPeriodInDays;

    /**
     * @return Number of days to retain metric data in the workspace.
     * 
     */
    public Optional<Output<Integer>> retentionPeriodInDays() {
        return Optional.ofNullable(this.retentionPeriodInDays);
    }

    @Import(name="timeouts")
    private @Nullable Output<WorkspaceConfigurationTimeoutsArgs> timeouts;

    public Optional<Output<WorkspaceConfigurationTimeoutsArgs>> timeouts() {
        return Optional.ofNullable(this.timeouts);
    }

    /**
     * ID of the workspace to configure.
     * 
     * The following arguments are optional:
     * 
     */
    @Import(name="workspaceId", required=true)
    private Output<String> workspaceId;

    /**
     * @return ID of the workspace to configure.
     * 
     * The following arguments are optional:
     * 
     */
    public Output<String> workspaceId() {
        return this.workspaceId;
    }

    private WorkspaceConfigurationArgs() {}

    private WorkspaceConfigurationArgs(WorkspaceConfigurationArgs $) {
        this.limitsPerLabelSets = $.limitsPerLabelSets;
        this.retentionPeriodInDays = $.retentionPeriodInDays;
        this.timeouts = $.timeouts;
        this.workspaceId = $.workspaceId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WorkspaceConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WorkspaceConfigurationArgs $;

        public Builder() {
            $ = new WorkspaceConfigurationArgs();
        }

        public Builder(WorkspaceConfigurationArgs defaults) {
            $ = new WorkspaceConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param limitsPerLabelSets Configuration block for setting limits on metrics with specific label sets. Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder limitsPerLabelSets(@Nullable Output<List<WorkspaceConfigurationLimitsPerLabelSetArgs>> limitsPerLabelSets) {
            $.limitsPerLabelSets = limitsPerLabelSets;
            return this;
        }

        /**
         * @param limitsPerLabelSets Configuration block for setting limits on metrics with specific label sets. Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder limitsPerLabelSets(List<WorkspaceConfigurationLimitsPerLabelSetArgs> limitsPerLabelSets) {
            return limitsPerLabelSets(Output.of(limitsPerLabelSets));
        }

        /**
         * @param limitsPerLabelSets Configuration block for setting limits on metrics with specific label sets. Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder limitsPerLabelSets(WorkspaceConfigurationLimitsPerLabelSetArgs... limitsPerLabelSets) {
            return limitsPerLabelSets(List.of(limitsPerLabelSets));
        }

        /**
         * @param retentionPeriodInDays Number of days to retain metric data in the workspace.
         * 
         * @return builder
         * 
         */
        public Builder retentionPeriodInDays(@Nullable Output<Integer> retentionPeriodInDays) {
            $.retentionPeriodInDays = retentionPeriodInDays;
            return this;
        }

        /**
         * @param retentionPeriodInDays Number of days to retain metric data in the workspace.
         * 
         * @return builder
         * 
         */
        public Builder retentionPeriodInDays(Integer retentionPeriodInDays) {
            return retentionPeriodInDays(Output.of(retentionPeriodInDays));
        }

        public Builder timeouts(@Nullable Output<WorkspaceConfigurationTimeoutsArgs> timeouts) {
            $.timeouts = timeouts;
            return this;
        }

        public Builder timeouts(WorkspaceConfigurationTimeoutsArgs timeouts) {
            return timeouts(Output.of(timeouts));
        }

        /**
         * @param workspaceId ID of the workspace to configure.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder workspaceId(Output<String> workspaceId) {
            $.workspaceId = workspaceId;
            return this;
        }

        /**
         * @param workspaceId ID of the workspace to configure.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder workspaceId(String workspaceId) {
            return workspaceId(Output.of(workspaceId));
        }

        public WorkspaceConfigurationArgs build() {
            if ($.workspaceId == null) {
                throw new MissingRequiredPropertyException("WorkspaceConfigurationArgs", "workspaceId");
            }
            return $;
        }
    }

}
