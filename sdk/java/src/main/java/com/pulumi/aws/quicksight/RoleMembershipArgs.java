// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RoleMembershipArgs extends com.pulumi.resources.ResourceArgs {

    public static final RoleMembershipArgs Empty = new RoleMembershipArgs();

    /**
     * AWS account ID. Defaults to the account of the caller identity if not configured.
     * 
     */
    @Import(name="awsAccountId")
    private @Nullable Output<String> awsAccountId;

    /**
     * @return AWS account ID. Defaults to the account of the caller identity if not configured.
     * 
     */
    public Optional<Output<String>> awsAccountId() {
        return Optional.ofNullable(this.awsAccountId);
    }

    /**
     * Name of the group to be added to the role.
     * 
     */
    @Import(name="memberName", required=true)
    private Output<String> memberName;

    /**
     * @return Name of the group to be added to the role.
     * 
     */
    public Output<String> memberName() {
        return this.memberName;
    }

    /**
     * Name of the namespace. Defaults to `default`.
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return Name of the namespace. Defaults to `default`.
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * Role to add the group to. Valid values are `ADMIN`, `AUTHOR`, `READER`, `ADMIN_PRO`, `AUTHOR_PRO`, and `READER_PRO`.
     * 
     * The following arguments are optional:
     * 
     */
    @Import(name="role", required=true)
    private Output<String> role;

    /**
     * @return Role to add the group to. Valid values are `ADMIN`, `AUTHOR`, `READER`, `ADMIN_PRO`, `AUTHOR_PRO`, and `READER_PRO`.
     * 
     * The following arguments are optional:
     * 
     */
    public Output<String> role() {
        return this.role;
    }

    private RoleMembershipArgs() {}

    private RoleMembershipArgs(RoleMembershipArgs $) {
        this.awsAccountId = $.awsAccountId;
        this.memberName = $.memberName;
        this.namespace = $.namespace;
        this.role = $.role;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RoleMembershipArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RoleMembershipArgs $;

        public Builder() {
            $ = new RoleMembershipArgs();
        }

        public Builder(RoleMembershipArgs defaults) {
            $ = new RoleMembershipArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param awsAccountId AWS account ID. Defaults to the account of the caller identity if not configured.
         * 
         * @return builder
         * 
         */
        public Builder awsAccountId(@Nullable Output<String> awsAccountId) {
            $.awsAccountId = awsAccountId;
            return this;
        }

        /**
         * @param awsAccountId AWS account ID. Defaults to the account of the caller identity if not configured.
         * 
         * @return builder
         * 
         */
        public Builder awsAccountId(String awsAccountId) {
            return awsAccountId(Output.of(awsAccountId));
        }

        /**
         * @param memberName Name of the group to be added to the role.
         * 
         * @return builder
         * 
         */
        public Builder memberName(Output<String> memberName) {
            $.memberName = memberName;
            return this;
        }

        /**
         * @param memberName Name of the group to be added to the role.
         * 
         * @return builder
         * 
         */
        public Builder memberName(String memberName) {
            return memberName(Output.of(memberName));
        }

        /**
         * @param namespace Name of the namespace. Defaults to `default`.
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace Name of the namespace. Defaults to `default`.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param role Role to add the group to. Valid values are `ADMIN`, `AUTHOR`, `READER`, `ADMIN_PRO`, `AUTHOR_PRO`, and `READER_PRO`.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder role(Output<String> role) {
            $.role = role;
            return this;
        }

        /**
         * @param role Role to add the group to. Valid values are `ADMIN`, `AUTHOR`, `READER`, `ADMIN_PRO`, `AUTHOR_PRO`, and `READER_PRO`.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder role(String role) {
            return role(Output.of(role));
        }

        public RoleMembershipArgs build() {
            if ($.memberName == null) {
                throw new MissingRequiredPropertyException("RoleMembershipArgs", "memberName");
            }
            if ($.role == null) {
                throw new MissingRequiredPropertyException("RoleMembershipArgs", "role");
            }
            return $;
        }
    }

}
