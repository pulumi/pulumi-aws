// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.medialive;

import com.pulumi.aws.medialive.inputs.InputSecurityGroupWhitelistRuleArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InputSecurityGroupArgs extends com.pulumi.resources.ResourceArgs {

    public static final InputSecurityGroupArgs Empty = new InputSecurityGroupArgs();

    /**
     * A map of tags to assign to the InputSecurityGroup. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A map of tags to assign to the InputSecurityGroup. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Whitelist rules. See Whitelist Rules for more details.
     * 
     * The following arguments are optional:
     * 
     */
    @Import(name="whitelistRules", required=true)
    private Output<List<InputSecurityGroupWhitelistRuleArgs>> whitelistRules;

    /**
     * @return Whitelist rules. See Whitelist Rules for more details.
     * 
     * The following arguments are optional:
     * 
     */
    public Output<List<InputSecurityGroupWhitelistRuleArgs>> whitelistRules() {
        return this.whitelistRules;
    }

    private InputSecurityGroupArgs() {}

    private InputSecurityGroupArgs(InputSecurityGroupArgs $) {
        this.tags = $.tags;
        this.whitelistRules = $.whitelistRules;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InputSecurityGroupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InputSecurityGroupArgs $;

        public Builder() {
            $ = new InputSecurityGroupArgs();
        }

        public Builder(InputSecurityGroupArgs defaults) {
            $ = new InputSecurityGroupArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param tags A map of tags to assign to the InputSecurityGroup. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A map of tags to assign to the InputSecurityGroup. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param whitelistRules Whitelist rules. See Whitelist Rules for more details.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder whitelistRules(Output<List<InputSecurityGroupWhitelistRuleArgs>> whitelistRules) {
            $.whitelistRules = whitelistRules;
            return this;
        }

        /**
         * @param whitelistRules Whitelist rules. See Whitelist Rules for more details.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder whitelistRules(List<InputSecurityGroupWhitelistRuleArgs> whitelistRules) {
            return whitelistRules(Output.of(whitelistRules));
        }

        /**
         * @param whitelistRules Whitelist rules. See Whitelist Rules for more details.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder whitelistRules(InputSecurityGroupWhitelistRuleArgs... whitelistRules) {
            return whitelistRules(List.of(whitelistRules));
        }

        public InputSecurityGroupArgs build() {
            $.whitelistRules = Objects.requireNonNull($.whitelistRules, "expected parameter 'whitelistRules' to be non-null");
            return $;
        }
    }

}
