// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.acmpca.outputs;

import com.pulumi.aws.acmpca.outputs.GetCertificateAuthorityRevocationConfiguration;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetCertificateAuthorityResult {
    private String arn;
    /**
     * @return Base64-encoded certificate authority (CA) certificate. Only available after the certificate authority certificate has been imported.
     * 
     */
    private @Nullable String certificate;
    /**
     * @return Base64-encoded certificate chain that includes any intermediate certificates and chains up to root on-premises certificate that you used to sign your private CA certificate. The chain does not include your private CA certificate. Only available after the certificate authority certificate has been imported.
     * 
     */
    private @Nullable String certificateChain;
    /**
     * @return The base64 PEM-encoded certificate signing request (CSR) for your private CA certificate.
     * 
     */
    private @Nullable String certificateSigningRequest;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private @Nullable String id;
    private @Nullable String keyStorageSecurityStandard;
    /**
     * @return Date and time after which the certificate authority is not valid. Only available after the certificate authority certificate has been imported.
     * 
     */
    private @Nullable String notAfter;
    /**
     * @return Date and time before which the certificate authority is not valid. Only available after the certificate authority certificate has been imported.
     * 
     */
    private @Nullable String notBefore;
    /**
     * @return Nested attribute containing revocation configuration.
     * * `revocation_configuration.0.crl_configuration` - Nested attribute containing configuration of the certificate revocation list (CRL), if any, maintained by the certificate authority.
     * * `revocation_configuration.0.crl_configuration.0.custom_cname` - Name inserted into the certificate CRL Distribution Points extension that enables the use of an alias for the CRL distribution point.
     * * `revocation_configuration.0.crl_configuration.0.enabled` - Boolean value that specifies whether certificate revocation lists (CRLs) are enabled.
     * * `revocation_configuration.0.crl_configuration.0.expiration_in_days` - Number of days until a certificate expires.
     * * `revocation_configuration.0.crl_configuration.0.s3_bucket_name` - Name of the S3 bucket that contains the CRL.
     * * `revocation_configuration.0.crl_configuration.0.s3_object_acl` - Whether the CRL is publicly readable or privately held in the CRL Amazon S3 bucket.
     * * `revocation_configuration.0.ocsp_configuration.0.enabled` - Boolean value that specifies whether a custom OCSP responder is enabled.
     * * `revocation_configuration.0.ocsp_configuration.0.ocsp_custom_cname` - A CNAME specifying a customized OCSP domain.
     * 
     */
    private @Nullable List<GetCertificateAuthorityRevocationConfiguration> revocationConfigurations;
    /**
     * @return Serial number of the certificate authority. Only available after the certificate authority certificate has been imported.
     * 
     */
    private @Nullable String serial;
    /**
     * @return Status of the certificate authority.
     * 
     */
    private @Nullable String status;
    /**
     * @return Key-value map of user-defined tags that are attached to the certificate authority.
     * 
     */
    private @Nullable Map<String,String> tags;
    /**
     * @return Type of the certificate authority.
     * 
     */
    private @Nullable String type;
    /**
     * @return Specifies whether the CA issues general-purpose certificates that typically require a revocation mechanism, or short-lived certificates that may optionally omit revocation because they expire quickly.
     * 
     */
    private @Nullable String usageMode;

    private GetCertificateAuthorityResult() {}
    public String arn() {
        return this.arn;
    }
    /**
     * @return Base64-encoded certificate authority (CA) certificate. Only available after the certificate authority certificate has been imported.
     * 
     */
    public Optional<String> certificate() {
        return Optional.ofNullable(this.certificate);
    }
    /**
     * @return Base64-encoded certificate chain that includes any intermediate certificates and chains up to root on-premises certificate that you used to sign your private CA certificate. The chain does not include your private CA certificate. Only available after the certificate authority certificate has been imported.
     * 
     */
    public Optional<String> certificateChain() {
        return Optional.ofNullable(this.certificateChain);
    }
    /**
     * @return The base64 PEM-encoded certificate signing request (CSR) for your private CA certificate.
     * 
     */
    public Optional<String> certificateSigningRequest() {
        return Optional.ofNullable(this.certificateSigningRequest);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    public Optional<String> keyStorageSecurityStandard() {
        return Optional.ofNullable(this.keyStorageSecurityStandard);
    }
    /**
     * @return Date and time after which the certificate authority is not valid. Only available after the certificate authority certificate has been imported.
     * 
     */
    public Optional<String> notAfter() {
        return Optional.ofNullable(this.notAfter);
    }
    /**
     * @return Date and time before which the certificate authority is not valid. Only available after the certificate authority certificate has been imported.
     * 
     */
    public Optional<String> notBefore() {
        return Optional.ofNullable(this.notBefore);
    }
    /**
     * @return Nested attribute containing revocation configuration.
     * * `revocation_configuration.0.crl_configuration` - Nested attribute containing configuration of the certificate revocation list (CRL), if any, maintained by the certificate authority.
     * * `revocation_configuration.0.crl_configuration.0.custom_cname` - Name inserted into the certificate CRL Distribution Points extension that enables the use of an alias for the CRL distribution point.
     * * `revocation_configuration.0.crl_configuration.0.enabled` - Boolean value that specifies whether certificate revocation lists (CRLs) are enabled.
     * * `revocation_configuration.0.crl_configuration.0.expiration_in_days` - Number of days until a certificate expires.
     * * `revocation_configuration.0.crl_configuration.0.s3_bucket_name` - Name of the S3 bucket that contains the CRL.
     * * `revocation_configuration.0.crl_configuration.0.s3_object_acl` - Whether the CRL is publicly readable or privately held in the CRL Amazon S3 bucket.
     * * `revocation_configuration.0.ocsp_configuration.0.enabled` - Boolean value that specifies whether a custom OCSP responder is enabled.
     * * `revocation_configuration.0.ocsp_configuration.0.ocsp_custom_cname` - A CNAME specifying a customized OCSP domain.
     * 
     */
    public List<GetCertificateAuthorityRevocationConfiguration> revocationConfigurations() {
        return this.revocationConfigurations == null ? List.of() : this.revocationConfigurations;
    }
    /**
     * @return Serial number of the certificate authority. Only available after the certificate authority certificate has been imported.
     * 
     */
    public Optional<String> serial() {
        return Optional.ofNullable(this.serial);
    }
    /**
     * @return Status of the certificate authority.
     * 
     */
    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }
    /**
     * @return Key-value map of user-defined tags that are attached to the certificate authority.
     * 
     */
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * @return Type of the certificate authority.
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }
    /**
     * @return Specifies whether the CA issues general-purpose certificates that typically require a revocation mechanism, or short-lived certificates that may optionally omit revocation because they expire quickly.
     * 
     */
    public Optional<String> usageMode() {
        return Optional.ofNullable(this.usageMode);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCertificateAuthorityResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String arn;
        private @Nullable String certificate;
        private @Nullable String certificateChain;
        private @Nullable String certificateSigningRequest;
        private @Nullable String id;
        private @Nullable String keyStorageSecurityStandard;
        private @Nullable String notAfter;
        private @Nullable String notBefore;
        private @Nullable List<GetCertificateAuthorityRevocationConfiguration> revocationConfigurations;
        private @Nullable String serial;
        private @Nullable String status;
        private @Nullable Map<String,String> tags;
        private @Nullable String type;
        private @Nullable String usageMode;
        public Builder() {}
        public Builder(GetCertificateAuthorityResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.certificate = defaults.certificate;
    	      this.certificateChain = defaults.certificateChain;
    	      this.certificateSigningRequest = defaults.certificateSigningRequest;
    	      this.id = defaults.id;
    	      this.keyStorageSecurityStandard = defaults.keyStorageSecurityStandard;
    	      this.notAfter = defaults.notAfter;
    	      this.notBefore = defaults.notBefore;
    	      this.revocationConfigurations = defaults.revocationConfigurations;
    	      this.serial = defaults.serial;
    	      this.status = defaults.status;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
    	      this.usageMode = defaults.usageMode;
        }

        @CustomType.Setter
        public Builder arn(String arn) {
            this.arn = Objects.requireNonNull(arn);
            return this;
        }
        @CustomType.Setter
        public Builder certificate(@Nullable String certificate) {
            this.certificate = certificate;
            return this;
        }
        @CustomType.Setter
        public Builder certificateChain(@Nullable String certificateChain) {
            this.certificateChain = certificateChain;
            return this;
        }
        @CustomType.Setter
        public Builder certificateSigningRequest(@Nullable String certificateSigningRequest) {
            this.certificateSigningRequest = certificateSigningRequest;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder keyStorageSecurityStandard(@Nullable String keyStorageSecurityStandard) {
            this.keyStorageSecurityStandard = keyStorageSecurityStandard;
            return this;
        }
        @CustomType.Setter
        public Builder notAfter(@Nullable String notAfter) {
            this.notAfter = notAfter;
            return this;
        }
        @CustomType.Setter
        public Builder notBefore(@Nullable String notBefore) {
            this.notBefore = notBefore;
            return this;
        }
        @CustomType.Setter
        public Builder revocationConfigurations(@Nullable List<GetCertificateAuthorityRevocationConfiguration> revocationConfigurations) {
            this.revocationConfigurations = revocationConfigurations;
            return this;
        }
        public Builder revocationConfigurations(GetCertificateAuthorityRevocationConfiguration... revocationConfigurations) {
            return revocationConfigurations(List.of(revocationConfigurations));
        }
        @CustomType.Setter
        public Builder serial(@Nullable String serial) {
            this.serial = serial;
            return this;
        }
        @CustomType.Setter
        public Builder status(@Nullable String status) {
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder type(@Nullable String type) {
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder usageMode(@Nullable String usageMode) {
            this.usageMode = usageMode;
            return this;
        }
        public GetCertificateAuthorityResult build() {
            final var o = new GetCertificateAuthorityResult();
            o.arn = arn;
            o.certificate = certificate;
            o.certificateChain = certificateChain;
            o.certificateSigningRequest = certificateSigningRequest;
            o.id = id;
            o.keyStorageSecurityStandard = keyStorageSecurityStandard;
            o.notAfter = notAfter;
            o.notBefore = notBefore;
            o.revocationConfigurations = revocationConfigurations;
            o.serial = serial;
            o.status = status;
            o.tags = tags;
            o.type = type;
            o.usageMode = usageMode;
            return o;
        }
    }
}
