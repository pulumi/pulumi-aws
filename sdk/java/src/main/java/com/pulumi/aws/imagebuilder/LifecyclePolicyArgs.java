// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.imagebuilder;

import com.pulumi.aws.imagebuilder.inputs.LifecyclePolicyPolicyDetailArgs;
import com.pulumi.aws.imagebuilder.inputs.LifecyclePolicyResourceSelectionArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LifecyclePolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final LifecyclePolicyArgs Empty = new LifecyclePolicyArgs();

    /**
     * description for the lifecycle policy.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return description for the lifecycle policy.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The Amazon Resource Name (ARN) for the IAM role you create that grants Image Builder access to run lifecycle actions. More information about this role can be found [`here`](https://docs.aws.amazon.com/imagebuilder/latest/userguide/image-lifecycle-prerequisites.html#image-lifecycle-prereq-role).
     * 
     */
    @Import(name="executionRole", required=true)
    private Output<String> executionRole;

    /**
     * @return The Amazon Resource Name (ARN) for the IAM role you create that grants Image Builder access to run lifecycle actions. More information about this role can be found [`here`](https://docs.aws.amazon.com/imagebuilder/latest/userguide/image-lifecycle-prerequisites.html#image-lifecycle-prereq-role).
     * 
     */
    public Output<String> executionRole() {
        return this.executionRole;
    }

    /**
     * The name of the lifecycle policy to create.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the lifecycle policy to create.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Configuration block with policy details. Detailed below.
     * 
     */
    @Import(name="policyDetails")
    private @Nullable Output<List<LifecyclePolicyPolicyDetailArgs>> policyDetails;

    /**
     * @return Configuration block with policy details. Detailed below.
     * 
     */
    public Optional<Output<List<LifecyclePolicyPolicyDetailArgs>>> policyDetails() {
        return Optional.ofNullable(this.policyDetails);
    }

    /**
     * Selection criteria for the resources that the lifecycle policy applies to. Detailed below.
     * 
     * The following arguments are optional:
     * 
     */
    @Import(name="resourceSelection")
    private @Nullable Output<LifecyclePolicyResourceSelectionArgs> resourceSelection;

    /**
     * @return Selection criteria for the resources that the lifecycle policy applies to. Detailed below.
     * 
     * The following arguments are optional:
     * 
     */
    public Optional<Output<LifecyclePolicyResourceSelectionArgs>> resourceSelection() {
        return Optional.ofNullable(this.resourceSelection);
    }

    /**
     * The type of Image Builder resource that the lifecycle policy applies to. Valid values: `AMI_IMAGE` or `CONTAINER_IMAGE`.
     * 
     */
    @Import(name="resourceType", required=true)
    private Output<String> resourceType;

    /**
     * @return The type of Image Builder resource that the lifecycle policy applies to. Valid values: `AMI_IMAGE` or `CONTAINER_IMAGE`.
     * 
     */
    public Output<String> resourceType() {
        return this.resourceType;
    }

    /**
     * The status of the lifecycle policy.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of the lifecycle policy.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Key-value map of resource tags for the Image Builder Lifecycle Policy. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Key-value map of resource tags for the Image Builder Lifecycle Policy. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private LifecyclePolicyArgs() {}

    private LifecyclePolicyArgs(LifecyclePolicyArgs $) {
        this.description = $.description;
        this.executionRole = $.executionRole;
        this.name = $.name;
        this.policyDetails = $.policyDetails;
        this.resourceSelection = $.resourceSelection;
        this.resourceType = $.resourceType;
        this.status = $.status;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LifecyclePolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LifecyclePolicyArgs $;

        public Builder() {
            $ = new LifecyclePolicyArgs();
        }

        public Builder(LifecyclePolicyArgs defaults) {
            $ = new LifecyclePolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description description for the lifecycle policy.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description description for the lifecycle policy.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param executionRole The Amazon Resource Name (ARN) for the IAM role you create that grants Image Builder access to run lifecycle actions. More information about this role can be found [`here`](https://docs.aws.amazon.com/imagebuilder/latest/userguide/image-lifecycle-prerequisites.html#image-lifecycle-prereq-role).
         * 
         * @return builder
         * 
         */
        public Builder executionRole(Output<String> executionRole) {
            $.executionRole = executionRole;
            return this;
        }

        /**
         * @param executionRole The Amazon Resource Name (ARN) for the IAM role you create that grants Image Builder access to run lifecycle actions. More information about this role can be found [`here`](https://docs.aws.amazon.com/imagebuilder/latest/userguide/image-lifecycle-prerequisites.html#image-lifecycle-prereq-role).
         * 
         * @return builder
         * 
         */
        public Builder executionRole(String executionRole) {
            return executionRole(Output.of(executionRole));
        }

        /**
         * @param name The name of the lifecycle policy to create.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the lifecycle policy to create.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param policyDetails Configuration block with policy details. Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder policyDetails(@Nullable Output<List<LifecyclePolicyPolicyDetailArgs>> policyDetails) {
            $.policyDetails = policyDetails;
            return this;
        }

        /**
         * @param policyDetails Configuration block with policy details. Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder policyDetails(List<LifecyclePolicyPolicyDetailArgs> policyDetails) {
            return policyDetails(Output.of(policyDetails));
        }

        /**
         * @param policyDetails Configuration block with policy details. Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder policyDetails(LifecyclePolicyPolicyDetailArgs... policyDetails) {
            return policyDetails(List.of(policyDetails));
        }

        /**
         * @param resourceSelection Selection criteria for the resources that the lifecycle policy applies to. Detailed below.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder resourceSelection(@Nullable Output<LifecyclePolicyResourceSelectionArgs> resourceSelection) {
            $.resourceSelection = resourceSelection;
            return this;
        }

        /**
         * @param resourceSelection Selection criteria for the resources that the lifecycle policy applies to. Detailed below.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder resourceSelection(LifecyclePolicyResourceSelectionArgs resourceSelection) {
            return resourceSelection(Output.of(resourceSelection));
        }

        /**
         * @param resourceType The type of Image Builder resource that the lifecycle policy applies to. Valid values: `AMI_IMAGE` or `CONTAINER_IMAGE`.
         * 
         * @return builder
         * 
         */
        public Builder resourceType(Output<String> resourceType) {
            $.resourceType = resourceType;
            return this;
        }

        /**
         * @param resourceType The type of Image Builder resource that the lifecycle policy applies to. Valid values: `AMI_IMAGE` or `CONTAINER_IMAGE`.
         * 
         * @return builder
         * 
         */
        public Builder resourceType(String resourceType) {
            return resourceType(Output.of(resourceType));
        }

        /**
         * @param status The status of the lifecycle policy.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of the lifecycle policy.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param tags Key-value map of resource tags for the Image Builder Lifecycle Policy. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Key-value map of resource tags for the Image Builder Lifecycle Policy. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public LifecyclePolicyArgs build() {
            if ($.executionRole == null) {
                throw new MissingRequiredPropertyException("LifecyclePolicyArgs", "executionRole");
            }
            if ($.resourceType == null) {
                throw new MissingRequiredPropertyException("LifecyclePolicyArgs", "resourceType");
            }
            return $;
        }
    }

}
