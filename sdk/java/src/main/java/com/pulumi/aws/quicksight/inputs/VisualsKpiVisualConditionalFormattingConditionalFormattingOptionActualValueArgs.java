// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.inputs;

import com.pulumi.aws.quicksight.inputs.ConditionalFormattingColorArgs;
import com.pulumi.aws.quicksight.inputs.ConditionalFormattingIconArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VisualsKpiVisualConditionalFormattingConditionalFormattingOptionActualValueArgs extends com.pulumi.resources.ResourceArgs {

    public static final VisualsKpiVisualConditionalFormattingConditionalFormattingOptionActualValueArgs Empty = new VisualsKpiVisualConditionalFormattingConditionalFormattingOptionActualValueArgs();

    @Import(name="icon")
    private @Nullable Output<ConditionalFormattingIconArgs> icon;

    public Optional<Output<ConditionalFormattingIconArgs>> icon() {
        return Optional.ofNullable(this.icon);
    }

    @Import(name="textColor", required=true)
    private Output<ConditionalFormattingColorArgs> textColor;

    public Output<ConditionalFormattingColorArgs> textColor() {
        return this.textColor;
    }

    private VisualsKpiVisualConditionalFormattingConditionalFormattingOptionActualValueArgs() {}

    private VisualsKpiVisualConditionalFormattingConditionalFormattingOptionActualValueArgs(VisualsKpiVisualConditionalFormattingConditionalFormattingOptionActualValueArgs $) {
        this.icon = $.icon;
        this.textColor = $.textColor;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VisualsKpiVisualConditionalFormattingConditionalFormattingOptionActualValueArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VisualsKpiVisualConditionalFormattingConditionalFormattingOptionActualValueArgs $;

        public Builder() {
            $ = new VisualsKpiVisualConditionalFormattingConditionalFormattingOptionActualValueArgs();
        }

        public Builder(VisualsKpiVisualConditionalFormattingConditionalFormattingOptionActualValueArgs defaults) {
            $ = new VisualsKpiVisualConditionalFormattingConditionalFormattingOptionActualValueArgs(Objects.requireNonNull(defaults));
        }

        public Builder icon(@Nullable Output<ConditionalFormattingIconArgs> icon) {
            $.icon = icon;
            return this;
        }

        public Builder icon(ConditionalFormattingIconArgs icon) {
            return icon(Output.of(icon));
        }

        public Builder textColor(Output<ConditionalFormattingColorArgs> textColor) {
            $.textColor = textColor;
            return this;
        }

        public Builder textColor(ConditionalFormattingColorArgs textColor) {
            return textColor(Output.of(textColor));
        }

        public VisualsKpiVisualConditionalFormattingConditionalFormattingOptionActualValueArgs build() {
            if ($.textColor == null) {
                throw new MissingRequiredPropertyException("VisualsKpiVisualConditionalFormattingConditionalFormattingOptionActualValueArgs", "textColor");
            }
            return $;
        }
    }

}
