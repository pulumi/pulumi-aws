// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.cognito.inputs;

import com.pulumi.aws.cognito.inputs.RiskConfigurationCompromisedCredentialsRiskConfigurationActionsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RiskConfigurationCompromisedCredentialsRiskConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final RiskConfigurationCompromisedCredentialsRiskConfigurationArgs Empty = new RiskConfigurationCompromisedCredentialsRiskConfigurationArgs();

    /**
     * The compromised credentials risk configuration actions. See details below.
     * 
     */
    @Import(name="actions", required=true)
    private Output<RiskConfigurationCompromisedCredentialsRiskConfigurationActionsArgs> actions;

    /**
     * @return The compromised credentials risk configuration actions. See details below.
     * 
     */
    public Output<RiskConfigurationCompromisedCredentialsRiskConfigurationActionsArgs> actions() {
        return this.actions;
    }

    /**
     * Perform the action for these events. The default is to perform all events if no event filter is specified. Valid values are `SIGN_IN`, `PASSWORD_CHANGE`, and `SIGN_UP`.
     * 
     */
    @Import(name="eventFilters")
    private @Nullable Output<List<String>> eventFilters;

    /**
     * @return Perform the action for these events. The default is to perform all events if no event filter is specified. Valid values are `SIGN_IN`, `PASSWORD_CHANGE`, and `SIGN_UP`.
     * 
     */
    public Optional<Output<List<String>>> eventFilters() {
        return Optional.ofNullable(this.eventFilters);
    }

    private RiskConfigurationCompromisedCredentialsRiskConfigurationArgs() {}

    private RiskConfigurationCompromisedCredentialsRiskConfigurationArgs(RiskConfigurationCompromisedCredentialsRiskConfigurationArgs $) {
        this.actions = $.actions;
        this.eventFilters = $.eventFilters;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RiskConfigurationCompromisedCredentialsRiskConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RiskConfigurationCompromisedCredentialsRiskConfigurationArgs $;

        public Builder() {
            $ = new RiskConfigurationCompromisedCredentialsRiskConfigurationArgs();
        }

        public Builder(RiskConfigurationCompromisedCredentialsRiskConfigurationArgs defaults) {
            $ = new RiskConfigurationCompromisedCredentialsRiskConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param actions The compromised credentials risk configuration actions. See details below.
         * 
         * @return builder
         * 
         */
        public Builder actions(Output<RiskConfigurationCompromisedCredentialsRiskConfigurationActionsArgs> actions) {
            $.actions = actions;
            return this;
        }

        /**
         * @param actions The compromised credentials risk configuration actions. See details below.
         * 
         * @return builder
         * 
         */
        public Builder actions(RiskConfigurationCompromisedCredentialsRiskConfigurationActionsArgs actions) {
            return actions(Output.of(actions));
        }

        /**
         * @param eventFilters Perform the action for these events. The default is to perform all events if no event filter is specified. Valid values are `SIGN_IN`, `PASSWORD_CHANGE`, and `SIGN_UP`.
         * 
         * @return builder
         * 
         */
        public Builder eventFilters(@Nullable Output<List<String>> eventFilters) {
            $.eventFilters = eventFilters;
            return this;
        }

        /**
         * @param eventFilters Perform the action for these events. The default is to perform all events if no event filter is specified. Valid values are `SIGN_IN`, `PASSWORD_CHANGE`, and `SIGN_UP`.
         * 
         * @return builder
         * 
         */
        public Builder eventFilters(List<String> eventFilters) {
            return eventFilters(Output.of(eventFilters));
        }

        /**
         * @param eventFilters Perform the action for these events. The default is to perform all events if no event filter is specified. Valid values are `SIGN_IN`, `PASSWORD_CHANGE`, and `SIGN_UP`.
         * 
         * @return builder
         * 
         */
        public Builder eventFilters(String... eventFilters) {
            return eventFilters(List.of(eventFilters));
        }

        public RiskConfigurationCompromisedCredentialsRiskConfigurationArgs build() {
            if ($.actions == null) {
                throw new MissingRequiredPropertyException("RiskConfigurationCompromisedCredentialsRiskConfigurationArgs", "actions");
            }
            return $;
        }
    }

}
