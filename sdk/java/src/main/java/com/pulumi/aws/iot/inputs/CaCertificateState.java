// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.iot.inputs;

import com.pulumi.aws.iot.inputs.CaCertificateRegistrationConfigArgs;
import com.pulumi.aws.iot.inputs.CaCertificateValidityArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CaCertificateState extends com.pulumi.resources.ResourceArgs {

    public static final CaCertificateState Empty = new CaCertificateState();

    /**
     * Boolean flag to indicate if the certificate should be active for device authentication.
     * 
     */
    @Import(name="active")
    private @Nullable Output<Boolean> active;

    /**
     * @return Boolean flag to indicate if the certificate should be active for device authentication.
     * 
     */
    public Optional<Output<Boolean>> active() {
        return Optional.ofNullable(this.active);
    }

    /**
     * Boolean flag to indicate if the certificate should be active for device regisration.
     * 
     */
    @Import(name="allowAutoRegistration")
    private @Nullable Output<Boolean> allowAutoRegistration;

    /**
     * @return Boolean flag to indicate if the certificate should be active for device regisration.
     * 
     */
    public Optional<Output<Boolean>> allowAutoRegistration() {
        return Optional.ofNullable(this.allowAutoRegistration);
    }

    /**
     * The ARN of the created CA certificate.
     * 
     */
    @Import(name="arn")
    private @Nullable Output<String> arn;

    /**
     * @return The ARN of the created CA certificate.
     * 
     */
    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    /**
     * PEM encoded CA certificate.
     * 
     */
    @Import(name="caCertificatePem")
    private @Nullable Output<String> caCertificatePem;

    /**
     * @return PEM encoded CA certificate.
     * 
     */
    public Optional<Output<String>> caCertificatePem() {
        return Optional.ofNullable(this.caCertificatePem);
    }

    /**
     * The certificate mode in which the CA will be registered. Valida values: `DEFAULT` and `SNI_ONLY`. Default: `DEFAULT`.
     * 
     */
    @Import(name="certificateMode")
    private @Nullable Output<String> certificateMode;

    /**
     * @return The certificate mode in which the CA will be registered. Valida values: `DEFAULT` and `SNI_ONLY`. Default: `DEFAULT`.
     * 
     */
    public Optional<Output<String>> certificateMode() {
        return Optional.ofNullable(this.certificateMode);
    }

    /**
     * The customer version of the CA certificate.
     * 
     */
    @Import(name="customerVersion")
    private @Nullable Output<Integer> customerVersion;

    /**
     * @return The customer version of the CA certificate.
     * 
     */
    public Optional<Output<Integer>> customerVersion() {
        return Optional.ofNullable(this.customerVersion);
    }

    /**
     * The generation ID of the CA certificate.
     * 
     */
    @Import(name="generationId")
    private @Nullable Output<String> generationId;

    /**
     * @return The generation ID of the CA certificate.
     * 
     */
    public Optional<Output<String>> generationId() {
        return Optional.ofNullable(this.generationId);
    }

    /**
     * Information about the registration configuration. See below.
     * 
     */
    @Import(name="registrationConfig")
    private @Nullable Output<CaCertificateRegistrationConfigArgs> registrationConfig;

    /**
     * @return Information about the registration configuration. See below.
     * 
     */
    public Optional<Output<CaCertificateRegistrationConfigArgs>> registrationConfig() {
        return Optional.ofNullable(this.registrationConfig);
    }

    /**
     * A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    /**
     * @return A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    /**
     * When the CA certificate is valid.
     * 
     */
    @Import(name="validities")
    private @Nullable Output<List<CaCertificateValidityArgs>> validities;

    /**
     * @return When the CA certificate is valid.
     * 
     */
    public Optional<Output<List<CaCertificateValidityArgs>>> validities() {
        return Optional.ofNullable(this.validities);
    }

    /**
     * PEM encoded verification certificate containing the common name of a registration code. Review
     * [CreateVerificationCSR](https://docs.aws.amazon.com/iot/latest/developerguide/register-CA-cert.html). Reuired if `certificate_mode` is `DEFAULT`.
     * 
     */
    @Import(name="verificationCertificatePem")
    private @Nullable Output<String> verificationCertificatePem;

    /**
     * @return PEM encoded verification certificate containing the common name of a registration code. Review
     * [CreateVerificationCSR](https://docs.aws.amazon.com/iot/latest/developerguide/register-CA-cert.html). Reuired if `certificate_mode` is `DEFAULT`.
     * 
     */
    public Optional<Output<String>> verificationCertificatePem() {
        return Optional.ofNullable(this.verificationCertificatePem);
    }

    private CaCertificateState() {}

    private CaCertificateState(CaCertificateState $) {
        this.active = $.active;
        this.allowAutoRegistration = $.allowAutoRegistration;
        this.arn = $.arn;
        this.caCertificatePem = $.caCertificatePem;
        this.certificateMode = $.certificateMode;
        this.customerVersion = $.customerVersion;
        this.generationId = $.generationId;
        this.registrationConfig = $.registrationConfig;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
        this.validities = $.validities;
        this.verificationCertificatePem = $.verificationCertificatePem;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CaCertificateState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CaCertificateState $;

        public Builder() {
            $ = new CaCertificateState();
        }

        public Builder(CaCertificateState defaults) {
            $ = new CaCertificateState(Objects.requireNonNull(defaults));
        }

        /**
         * @param active Boolean flag to indicate if the certificate should be active for device authentication.
         * 
         * @return builder
         * 
         */
        public Builder active(@Nullable Output<Boolean> active) {
            $.active = active;
            return this;
        }

        /**
         * @param active Boolean flag to indicate if the certificate should be active for device authentication.
         * 
         * @return builder
         * 
         */
        public Builder active(Boolean active) {
            return active(Output.of(active));
        }

        /**
         * @param allowAutoRegistration Boolean flag to indicate if the certificate should be active for device regisration.
         * 
         * @return builder
         * 
         */
        public Builder allowAutoRegistration(@Nullable Output<Boolean> allowAutoRegistration) {
            $.allowAutoRegistration = allowAutoRegistration;
            return this;
        }

        /**
         * @param allowAutoRegistration Boolean flag to indicate if the certificate should be active for device regisration.
         * 
         * @return builder
         * 
         */
        public Builder allowAutoRegistration(Boolean allowAutoRegistration) {
            return allowAutoRegistration(Output.of(allowAutoRegistration));
        }

        /**
         * @param arn The ARN of the created CA certificate.
         * 
         * @return builder
         * 
         */
        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        /**
         * @param arn The ARN of the created CA certificate.
         * 
         * @return builder
         * 
         */
        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        /**
         * @param caCertificatePem PEM encoded CA certificate.
         * 
         * @return builder
         * 
         */
        public Builder caCertificatePem(@Nullable Output<String> caCertificatePem) {
            $.caCertificatePem = caCertificatePem;
            return this;
        }

        /**
         * @param caCertificatePem PEM encoded CA certificate.
         * 
         * @return builder
         * 
         */
        public Builder caCertificatePem(String caCertificatePem) {
            return caCertificatePem(Output.of(caCertificatePem));
        }

        /**
         * @param certificateMode The certificate mode in which the CA will be registered. Valida values: `DEFAULT` and `SNI_ONLY`. Default: `DEFAULT`.
         * 
         * @return builder
         * 
         */
        public Builder certificateMode(@Nullable Output<String> certificateMode) {
            $.certificateMode = certificateMode;
            return this;
        }

        /**
         * @param certificateMode The certificate mode in which the CA will be registered. Valida values: `DEFAULT` and `SNI_ONLY`. Default: `DEFAULT`.
         * 
         * @return builder
         * 
         */
        public Builder certificateMode(String certificateMode) {
            return certificateMode(Output.of(certificateMode));
        }

        /**
         * @param customerVersion The customer version of the CA certificate.
         * 
         * @return builder
         * 
         */
        public Builder customerVersion(@Nullable Output<Integer> customerVersion) {
            $.customerVersion = customerVersion;
            return this;
        }

        /**
         * @param customerVersion The customer version of the CA certificate.
         * 
         * @return builder
         * 
         */
        public Builder customerVersion(Integer customerVersion) {
            return customerVersion(Output.of(customerVersion));
        }

        /**
         * @param generationId The generation ID of the CA certificate.
         * 
         * @return builder
         * 
         */
        public Builder generationId(@Nullable Output<String> generationId) {
            $.generationId = generationId;
            return this;
        }

        /**
         * @param generationId The generation ID of the CA certificate.
         * 
         * @return builder
         * 
         */
        public Builder generationId(String generationId) {
            return generationId(Output.of(generationId));
        }

        /**
         * @param registrationConfig Information about the registration configuration. See below.
         * 
         * @return builder
         * 
         */
        public Builder registrationConfig(@Nullable Output<CaCertificateRegistrationConfigArgs> registrationConfig) {
            $.registrationConfig = registrationConfig;
            return this;
        }

        /**
         * @param registrationConfig Information about the registration configuration. See below.
         * 
         * @return builder
         * 
         */
        public Builder registrationConfig(CaCertificateRegistrationConfigArgs registrationConfig) {
            return registrationConfig(Output.of(registrationConfig));
        }

        /**
         * @param tags A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tagsAll A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
         * 
         * @return builder
         * 
         * @deprecated
         * Please use `tags` instead.
         * 
         */
        @Deprecated /* Please use `tags` instead. */
        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        /**
         * @param tagsAll A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
         * 
         * @return builder
         * 
         * @deprecated
         * Please use `tags` instead.
         * 
         */
        @Deprecated /* Please use `tags` instead. */
        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        /**
         * @param validities When the CA certificate is valid.
         * 
         * @return builder
         * 
         */
        public Builder validities(@Nullable Output<List<CaCertificateValidityArgs>> validities) {
            $.validities = validities;
            return this;
        }

        /**
         * @param validities When the CA certificate is valid.
         * 
         * @return builder
         * 
         */
        public Builder validities(List<CaCertificateValidityArgs> validities) {
            return validities(Output.of(validities));
        }

        /**
         * @param validities When the CA certificate is valid.
         * 
         * @return builder
         * 
         */
        public Builder validities(CaCertificateValidityArgs... validities) {
            return validities(List.of(validities));
        }

        /**
         * @param verificationCertificatePem PEM encoded verification certificate containing the common name of a registration code. Review
         * [CreateVerificationCSR](https://docs.aws.amazon.com/iot/latest/developerguide/register-CA-cert.html). Reuired if `certificate_mode` is `DEFAULT`.
         * 
         * @return builder
         * 
         */
        public Builder verificationCertificatePem(@Nullable Output<String> verificationCertificatePem) {
            $.verificationCertificatePem = verificationCertificatePem;
            return this;
        }

        /**
         * @param verificationCertificatePem PEM encoded verification certificate containing the common name of a registration code. Review
         * [CreateVerificationCSR](https://docs.aws.amazon.com/iot/latest/developerguide/register-CA-cert.html). Reuired if `certificate_mode` is `DEFAULT`.
         * 
         * @return builder
         * 
         */
        public Builder verificationCertificatePem(String verificationCertificatePem) {
            return verificationCertificatePem(Output.of(verificationCertificatePem));
        }

        public CaCertificateState build() {
            return $;
        }
    }

}
