// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ecr.inputs;

import com.pulumi.aws.ecr.inputs.ReplicationConfigurationReplicationConfigurationRuleDestinationArgs;
import com.pulumi.aws.ecr.inputs.ReplicationConfigurationReplicationConfigurationRuleRepositoryFilterArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ReplicationConfigurationReplicationConfigurationRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final ReplicationConfigurationReplicationConfigurationRuleArgs Empty = new ReplicationConfigurationReplicationConfigurationRuleArgs();

    /**
     * the details of a replication destination. A maximum of 25 are allowed per `rule`. See Destination.
     * 
     */
    @Import(name="destinations", required=true)
    private Output<List<ReplicationConfigurationReplicationConfigurationRuleDestinationArgs>> destinations;

    /**
     * @return the details of a replication destination. A maximum of 25 are allowed per `rule`. See Destination.
     * 
     */
    public Output<List<ReplicationConfigurationReplicationConfigurationRuleDestinationArgs>> destinations() {
        return this.destinations;
    }

    /**
     * filters for a replication rule. See Repository Filter.
     * 
     */
    @Import(name="repositoryFilters")
    private @Nullable Output<List<ReplicationConfigurationReplicationConfigurationRuleRepositoryFilterArgs>> repositoryFilters;

    /**
     * @return filters for a replication rule. See Repository Filter.
     * 
     */
    public Optional<Output<List<ReplicationConfigurationReplicationConfigurationRuleRepositoryFilterArgs>>> repositoryFilters() {
        return Optional.ofNullable(this.repositoryFilters);
    }

    private ReplicationConfigurationReplicationConfigurationRuleArgs() {}

    private ReplicationConfigurationReplicationConfigurationRuleArgs(ReplicationConfigurationReplicationConfigurationRuleArgs $) {
        this.destinations = $.destinations;
        this.repositoryFilters = $.repositoryFilters;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ReplicationConfigurationReplicationConfigurationRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ReplicationConfigurationReplicationConfigurationRuleArgs $;

        public Builder() {
            $ = new ReplicationConfigurationReplicationConfigurationRuleArgs();
        }

        public Builder(ReplicationConfigurationReplicationConfigurationRuleArgs defaults) {
            $ = new ReplicationConfigurationReplicationConfigurationRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param destinations the details of a replication destination. A maximum of 25 are allowed per `rule`. See Destination.
         * 
         * @return builder
         * 
         */
        public Builder destinations(Output<List<ReplicationConfigurationReplicationConfigurationRuleDestinationArgs>> destinations) {
            $.destinations = destinations;
            return this;
        }

        /**
         * @param destinations the details of a replication destination. A maximum of 25 are allowed per `rule`. See Destination.
         * 
         * @return builder
         * 
         */
        public Builder destinations(List<ReplicationConfigurationReplicationConfigurationRuleDestinationArgs> destinations) {
            return destinations(Output.of(destinations));
        }

        /**
         * @param destinations the details of a replication destination. A maximum of 25 are allowed per `rule`. See Destination.
         * 
         * @return builder
         * 
         */
        public Builder destinations(ReplicationConfigurationReplicationConfigurationRuleDestinationArgs... destinations) {
            return destinations(List.of(destinations));
        }

        /**
         * @param repositoryFilters filters for a replication rule. See Repository Filter.
         * 
         * @return builder
         * 
         */
        public Builder repositoryFilters(@Nullable Output<List<ReplicationConfigurationReplicationConfigurationRuleRepositoryFilterArgs>> repositoryFilters) {
            $.repositoryFilters = repositoryFilters;
            return this;
        }

        /**
         * @param repositoryFilters filters for a replication rule. See Repository Filter.
         * 
         * @return builder
         * 
         */
        public Builder repositoryFilters(List<ReplicationConfigurationReplicationConfigurationRuleRepositoryFilterArgs> repositoryFilters) {
            return repositoryFilters(Output.of(repositoryFilters));
        }

        /**
         * @param repositoryFilters filters for a replication rule. See Repository Filter.
         * 
         * @return builder
         * 
         */
        public Builder repositoryFilters(ReplicationConfigurationReplicationConfigurationRuleRepositoryFilterArgs... repositoryFilters) {
            return repositoryFilters(List.of(repositoryFilters));
        }

        public ReplicationConfigurationReplicationConfigurationRuleArgs build() {
            $.destinations = Objects.requireNonNull($.destinations, "expected parameter 'destinations' to be non-null");
            return $;
        }
    }

}
