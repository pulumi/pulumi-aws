// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.verifiedpermissions;

import com.pulumi.aws.verifiedpermissions.inputs.IdentitySourceConfigurationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IdentitySourceArgs extends com.pulumi.resources.ResourceArgs {

    public static final IdentitySourceArgs Empty = new IdentitySourceArgs();

    /**
     * Specifies the details required to communicate with the identity provider (IdP) associated with this identity source. See Configuration below.
     * 
     */
    @Import(name="configuration")
    private @Nullable Output<IdentitySourceConfigurationArgs> configuration;

    /**
     * @return Specifies the details required to communicate with the identity provider (IdP) associated with this identity source. See Configuration below.
     * 
     */
    public Optional<Output<IdentitySourceConfigurationArgs>> configuration() {
        return Optional.ofNullable(this.configuration);
    }

    /**
     * Specifies the ID of the policy store in which you want to store this identity source.
     * 
     */
    @Import(name="policyStoreId", required=true)
    private Output<String> policyStoreId;

    /**
     * @return Specifies the ID of the policy store in which you want to store this identity source.
     * 
     */
    public Output<String> policyStoreId() {
        return this.policyStoreId;
    }

    /**
     * Specifies the namespace and data type of the principals generated for identities authenticated by the new identity source.
     * 
     */
    @Import(name="principalEntityType")
    private @Nullable Output<String> principalEntityType;

    /**
     * @return Specifies the namespace and data type of the principals generated for identities authenticated by the new identity source.
     * 
     */
    public Optional<Output<String>> principalEntityType() {
        return Optional.ofNullable(this.principalEntityType);
    }

    private IdentitySourceArgs() {}

    private IdentitySourceArgs(IdentitySourceArgs $) {
        this.configuration = $.configuration;
        this.policyStoreId = $.policyStoreId;
        this.principalEntityType = $.principalEntityType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IdentitySourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IdentitySourceArgs $;

        public Builder() {
            $ = new IdentitySourceArgs();
        }

        public Builder(IdentitySourceArgs defaults) {
            $ = new IdentitySourceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param configuration Specifies the details required to communicate with the identity provider (IdP) associated with this identity source. See Configuration below.
         * 
         * @return builder
         * 
         */
        public Builder configuration(@Nullable Output<IdentitySourceConfigurationArgs> configuration) {
            $.configuration = configuration;
            return this;
        }

        /**
         * @param configuration Specifies the details required to communicate with the identity provider (IdP) associated with this identity source. See Configuration below.
         * 
         * @return builder
         * 
         */
        public Builder configuration(IdentitySourceConfigurationArgs configuration) {
            return configuration(Output.of(configuration));
        }

        /**
         * @param policyStoreId Specifies the ID of the policy store in which you want to store this identity source.
         * 
         * @return builder
         * 
         */
        public Builder policyStoreId(Output<String> policyStoreId) {
            $.policyStoreId = policyStoreId;
            return this;
        }

        /**
         * @param policyStoreId Specifies the ID of the policy store in which you want to store this identity source.
         * 
         * @return builder
         * 
         */
        public Builder policyStoreId(String policyStoreId) {
            return policyStoreId(Output.of(policyStoreId));
        }

        /**
         * @param principalEntityType Specifies the namespace and data type of the principals generated for identities authenticated by the new identity source.
         * 
         * @return builder
         * 
         */
        public Builder principalEntityType(@Nullable Output<String> principalEntityType) {
            $.principalEntityType = principalEntityType;
            return this;
        }

        /**
         * @param principalEntityType Specifies the namespace and data type of the principals generated for identities authenticated by the new identity source.
         * 
         * @return builder
         * 
         */
        public Builder principalEntityType(String principalEntityType) {
            return principalEntityType(Output.of(principalEntityType));
        }

        public IdentitySourceArgs build() {
            if ($.policyStoreId == null) {
                throw new MissingRequiredPropertyException("IdentitySourceArgs", "policyStoreId");
            }
            return $;
        }
    }

}
