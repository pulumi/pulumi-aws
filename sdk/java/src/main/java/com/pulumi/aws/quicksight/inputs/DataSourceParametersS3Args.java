// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.inputs;

import com.pulumi.aws.quicksight.inputs.DataSourceParametersS3ManifestFileLocationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DataSourceParametersS3Args extends com.pulumi.resources.ResourceArgs {

    public static final DataSourceParametersS3Args Empty = new DataSourceParametersS3Args();

    /**
     * An object containing the S3 location of the S3 manifest file.
     * 
     */
    @Import(name="manifestFileLocation", required=true)
    private Output<DataSourceParametersS3ManifestFileLocationArgs> manifestFileLocation;

    /**
     * @return An object containing the S3 location of the S3 manifest file.
     * 
     */
    public Output<DataSourceParametersS3ManifestFileLocationArgs> manifestFileLocation() {
        return this.manifestFileLocation;
    }

    /**
     * Use the `role_arn` to override an account-wide role for a specific S3 data source. For example, say an account administrator has turned off all S3 access with an account-wide role. The administrator can then use `role_arn` to bypass the account-wide role and allow S3 access for the single S3 data source that is specified in the structure, even if the account-wide role forbidding S3 access is still active.
     * 
     */
    @Import(name="roleArn")
    private @Nullable Output<String> roleArn;

    /**
     * @return Use the `role_arn` to override an account-wide role for a specific S3 data source. For example, say an account administrator has turned off all S3 access with an account-wide role. The administrator can then use `role_arn` to bypass the account-wide role and allow S3 access for the single S3 data source that is specified in the structure, even if the account-wide role forbidding S3 access is still active.
     * 
     */
    public Optional<Output<String>> roleArn() {
        return Optional.ofNullable(this.roleArn);
    }

    private DataSourceParametersS3Args() {}

    private DataSourceParametersS3Args(DataSourceParametersS3Args $) {
        this.manifestFileLocation = $.manifestFileLocation;
        this.roleArn = $.roleArn;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DataSourceParametersS3Args defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DataSourceParametersS3Args $;

        public Builder() {
            $ = new DataSourceParametersS3Args();
        }

        public Builder(DataSourceParametersS3Args defaults) {
            $ = new DataSourceParametersS3Args(Objects.requireNonNull(defaults));
        }

        /**
         * @param manifestFileLocation An object containing the S3 location of the S3 manifest file.
         * 
         * @return builder
         * 
         */
        public Builder manifestFileLocation(Output<DataSourceParametersS3ManifestFileLocationArgs> manifestFileLocation) {
            $.manifestFileLocation = manifestFileLocation;
            return this;
        }

        /**
         * @param manifestFileLocation An object containing the S3 location of the S3 manifest file.
         * 
         * @return builder
         * 
         */
        public Builder manifestFileLocation(DataSourceParametersS3ManifestFileLocationArgs manifestFileLocation) {
            return manifestFileLocation(Output.of(manifestFileLocation));
        }

        /**
         * @param roleArn Use the `role_arn` to override an account-wide role for a specific S3 data source. For example, say an account administrator has turned off all S3 access with an account-wide role. The administrator can then use `role_arn` to bypass the account-wide role and allow S3 access for the single S3 data source that is specified in the structure, even if the account-wide role forbidding S3 access is still active.
         * 
         * @return builder
         * 
         */
        public Builder roleArn(@Nullable Output<String> roleArn) {
            $.roleArn = roleArn;
            return this;
        }

        /**
         * @param roleArn Use the `role_arn` to override an account-wide role for a specific S3 data source. For example, say an account administrator has turned off all S3 access with an account-wide role. The administrator can then use `role_arn` to bypass the account-wide role and allow S3 access for the single S3 data source that is specified in the structure, even if the account-wide role forbidding S3 access is still active.
         * 
         * @return builder
         * 
         */
        public Builder roleArn(String roleArn) {
            return roleArn(Output.of(roleArn));
        }

        public DataSourceParametersS3Args build() {
            if ($.manifestFileLocation == null) {
                throw new MissingRequiredPropertyException("DataSourceParametersS3Args", "manifestFileLocation");
            }
            return $;
        }
    }

}
