// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.auditmanager;

import com.pulumi.aws.auditmanager.inputs.ControlControlMappingSourceArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ControlArgs extends com.pulumi.resources.ResourceArgs {

    public static final ControlArgs Empty = new ControlArgs();

    /**
     * Recommended actions to carry out if the control isn&#39;t fulfilled.
     * 
     */
    @Import(name="actionPlanInstructions")
    private @Nullable Output<String> actionPlanInstructions;

    /**
     * @return Recommended actions to carry out if the control isn&#39;t fulfilled.
     * 
     */
    public Optional<Output<String>> actionPlanInstructions() {
        return Optional.ofNullable(this.actionPlanInstructions);
    }

    /**
     * Title of the action plan for remediating the control.
     * 
     */
    @Import(name="actionPlanTitle")
    private @Nullable Output<String> actionPlanTitle;

    /**
     * @return Title of the action plan for remediating the control.
     * 
     */
    public Optional<Output<String>> actionPlanTitle() {
        return Optional.ofNullable(this.actionPlanTitle);
    }

    /**
     * Data mapping sources. See `control_mapping_sources` below.
     * 
     * The following arguments are optional:
     * 
     */
    @Import(name="controlMappingSources")
    private @Nullable Output<List<ControlControlMappingSourceArgs>> controlMappingSources;

    /**
     * @return Data mapping sources. See `control_mapping_sources` below.
     * 
     * The following arguments are optional:
     * 
     */
    public Optional<Output<List<ControlControlMappingSourceArgs>>> controlMappingSources() {
        return Optional.ofNullable(this.controlMappingSources);
    }

    /**
     * Description of the control.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the control.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Name of the control.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the control.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * A map of tags to assign to the control. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A map of tags to assign to the control. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Steps to follow to determine if the control is satisfied.
     * 
     */
    @Import(name="testingInformation")
    private @Nullable Output<String> testingInformation;

    /**
     * @return Steps to follow to determine if the control is satisfied.
     * 
     */
    public Optional<Output<String>> testingInformation() {
        return Optional.ofNullable(this.testingInformation);
    }

    private ControlArgs() {}

    private ControlArgs(ControlArgs $) {
        this.actionPlanInstructions = $.actionPlanInstructions;
        this.actionPlanTitle = $.actionPlanTitle;
        this.controlMappingSources = $.controlMappingSources;
        this.description = $.description;
        this.name = $.name;
        this.tags = $.tags;
        this.testingInformation = $.testingInformation;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ControlArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ControlArgs $;

        public Builder() {
            $ = new ControlArgs();
        }

        public Builder(ControlArgs defaults) {
            $ = new ControlArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param actionPlanInstructions Recommended actions to carry out if the control isn&#39;t fulfilled.
         * 
         * @return builder
         * 
         */
        public Builder actionPlanInstructions(@Nullable Output<String> actionPlanInstructions) {
            $.actionPlanInstructions = actionPlanInstructions;
            return this;
        }

        /**
         * @param actionPlanInstructions Recommended actions to carry out if the control isn&#39;t fulfilled.
         * 
         * @return builder
         * 
         */
        public Builder actionPlanInstructions(String actionPlanInstructions) {
            return actionPlanInstructions(Output.of(actionPlanInstructions));
        }

        /**
         * @param actionPlanTitle Title of the action plan for remediating the control.
         * 
         * @return builder
         * 
         */
        public Builder actionPlanTitle(@Nullable Output<String> actionPlanTitle) {
            $.actionPlanTitle = actionPlanTitle;
            return this;
        }

        /**
         * @param actionPlanTitle Title of the action plan for remediating the control.
         * 
         * @return builder
         * 
         */
        public Builder actionPlanTitle(String actionPlanTitle) {
            return actionPlanTitle(Output.of(actionPlanTitle));
        }

        /**
         * @param controlMappingSources Data mapping sources. See `control_mapping_sources` below.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder controlMappingSources(@Nullable Output<List<ControlControlMappingSourceArgs>> controlMappingSources) {
            $.controlMappingSources = controlMappingSources;
            return this;
        }

        /**
         * @param controlMappingSources Data mapping sources. See `control_mapping_sources` below.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder controlMappingSources(List<ControlControlMappingSourceArgs> controlMappingSources) {
            return controlMappingSources(Output.of(controlMappingSources));
        }

        /**
         * @param controlMappingSources Data mapping sources. See `control_mapping_sources` below.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder controlMappingSources(ControlControlMappingSourceArgs... controlMappingSources) {
            return controlMappingSources(List.of(controlMappingSources));
        }

        /**
         * @param description Description of the control.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the control.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param name Name of the control.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the control.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param tags A map of tags to assign to the control. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A map of tags to assign to the control. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param testingInformation Steps to follow to determine if the control is satisfied.
         * 
         * @return builder
         * 
         */
        public Builder testingInformation(@Nullable Output<String> testingInformation) {
            $.testingInformation = testingInformation;
            return this;
        }

        /**
         * @param testingInformation Steps to follow to determine if the control is satisfied.
         * 
         * @return builder
         * 
         */
        public Builder testingInformation(String testingInformation) {
            return testingInformation(Output.of(testingInformation));
        }

        public ControlArgs build() {
            return $;
        }
    }

}
