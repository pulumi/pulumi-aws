// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.s3.inputs;

import com.pulumi.aws.s3.inputs.BucketLifecycleConfigurationRuleArgs;
import com.pulumi.aws.s3.inputs.BucketLifecycleConfigurationTimeoutsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BucketLifecycleConfigurationState extends com.pulumi.resources.ResourceArgs {

    public static final BucketLifecycleConfigurationState Empty = new BucketLifecycleConfigurationState();

    /**
     * Name of the source S3 bucket you want Amazon S3 to monitor.
     * 
     */
    @Import(name="bucket")
    private @Nullable Output<String> bucket;

    /**
     * @return Name of the source S3 bucket you want Amazon S3 to monitor.
     * 
     */
    public Optional<Output<String>> bucket() {
        return Optional.ofNullable(this.bucket);
    }

    /**
     * Account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP 403 (Access Denied) error.
     * 
     */
    @Import(name="expectedBucketOwner")
    private @Nullable Output<String> expectedBucketOwner;

    /**
     * @return Account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP 403 (Access Denied) error.
     * 
     */
    public Optional<Output<String>> expectedBucketOwner() {
        return Optional.ofNullable(this.expectedBucketOwner);
    }

    /**
     * List of configuration blocks describing the rules managing the replication. See below.
     * 
     */
    @Import(name="rules")
    private @Nullable Output<List<BucketLifecycleConfigurationRuleArgs>> rules;

    /**
     * @return List of configuration blocks describing the rules managing the replication. See below.
     * 
     */
    public Optional<Output<List<BucketLifecycleConfigurationRuleArgs>>> rules() {
        return Optional.ofNullable(this.rules);
    }

    @Import(name="timeouts")
    private @Nullable Output<BucketLifecycleConfigurationTimeoutsArgs> timeouts;

    public Optional<Output<BucketLifecycleConfigurationTimeoutsArgs>> timeouts() {
        return Optional.ofNullable(this.timeouts);
    }

    /**
     * The default minimum object size behavior applied to the lifecycle configuration. Valid values: `all_storage_classes_128K` (default), `varies_by_storage_class`. To customize the minimum object size for any transition you can add a `filter` that specifies a custom `object_size_greater_than` or `object_size_less_than` value. Custom filters always take precedence over the default transition behavior.
     * 
     */
    @Import(name="transitionDefaultMinimumObjectSize")
    private @Nullable Output<String> transitionDefaultMinimumObjectSize;

    /**
     * @return The default minimum object size behavior applied to the lifecycle configuration. Valid values: `all_storage_classes_128K` (default), `varies_by_storage_class`. To customize the minimum object size for any transition you can add a `filter` that specifies a custom `object_size_greater_than` or `object_size_less_than` value. Custom filters always take precedence over the default transition behavior.
     * 
     */
    public Optional<Output<String>> transitionDefaultMinimumObjectSize() {
        return Optional.ofNullable(this.transitionDefaultMinimumObjectSize);
    }

    private BucketLifecycleConfigurationState() {}

    private BucketLifecycleConfigurationState(BucketLifecycleConfigurationState $) {
        this.bucket = $.bucket;
        this.expectedBucketOwner = $.expectedBucketOwner;
        this.rules = $.rules;
        this.timeouts = $.timeouts;
        this.transitionDefaultMinimumObjectSize = $.transitionDefaultMinimumObjectSize;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BucketLifecycleConfigurationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BucketLifecycleConfigurationState $;

        public Builder() {
            $ = new BucketLifecycleConfigurationState();
        }

        public Builder(BucketLifecycleConfigurationState defaults) {
            $ = new BucketLifecycleConfigurationState(Objects.requireNonNull(defaults));
        }

        /**
         * @param bucket Name of the source S3 bucket you want Amazon S3 to monitor.
         * 
         * @return builder
         * 
         */
        public Builder bucket(@Nullable Output<String> bucket) {
            $.bucket = bucket;
            return this;
        }

        /**
         * @param bucket Name of the source S3 bucket you want Amazon S3 to monitor.
         * 
         * @return builder
         * 
         */
        public Builder bucket(String bucket) {
            return bucket(Output.of(bucket));
        }

        /**
         * @param expectedBucketOwner Account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP 403 (Access Denied) error.
         * 
         * @return builder
         * 
         */
        public Builder expectedBucketOwner(@Nullable Output<String> expectedBucketOwner) {
            $.expectedBucketOwner = expectedBucketOwner;
            return this;
        }

        /**
         * @param expectedBucketOwner Account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP 403 (Access Denied) error.
         * 
         * @return builder
         * 
         */
        public Builder expectedBucketOwner(String expectedBucketOwner) {
            return expectedBucketOwner(Output.of(expectedBucketOwner));
        }

        /**
         * @param rules List of configuration blocks describing the rules managing the replication. See below.
         * 
         * @return builder
         * 
         */
        public Builder rules(@Nullable Output<List<BucketLifecycleConfigurationRuleArgs>> rules) {
            $.rules = rules;
            return this;
        }

        /**
         * @param rules List of configuration blocks describing the rules managing the replication. See below.
         * 
         * @return builder
         * 
         */
        public Builder rules(List<BucketLifecycleConfigurationRuleArgs> rules) {
            return rules(Output.of(rules));
        }

        /**
         * @param rules List of configuration blocks describing the rules managing the replication. See below.
         * 
         * @return builder
         * 
         */
        public Builder rules(BucketLifecycleConfigurationRuleArgs... rules) {
            return rules(List.of(rules));
        }

        public Builder timeouts(@Nullable Output<BucketLifecycleConfigurationTimeoutsArgs> timeouts) {
            $.timeouts = timeouts;
            return this;
        }

        public Builder timeouts(BucketLifecycleConfigurationTimeoutsArgs timeouts) {
            return timeouts(Output.of(timeouts));
        }

        /**
         * @param transitionDefaultMinimumObjectSize The default minimum object size behavior applied to the lifecycle configuration. Valid values: `all_storage_classes_128K` (default), `varies_by_storage_class`. To customize the minimum object size for any transition you can add a `filter` that specifies a custom `object_size_greater_than` or `object_size_less_than` value. Custom filters always take precedence over the default transition behavior.
         * 
         * @return builder
         * 
         */
        public Builder transitionDefaultMinimumObjectSize(@Nullable Output<String> transitionDefaultMinimumObjectSize) {
            $.transitionDefaultMinimumObjectSize = transitionDefaultMinimumObjectSize;
            return this;
        }

        /**
         * @param transitionDefaultMinimumObjectSize The default minimum object size behavior applied to the lifecycle configuration. Valid values: `all_storage_classes_128K` (default), `varies_by_storage_class`. To customize the minimum object size for any transition you can add a `filter` that specifies a custom `object_size_greater_than` or `object_size_less_than` value. Custom filters always take precedence over the default transition behavior.
         * 
         * @return builder
         * 
         */
        public Builder transitionDefaultMinimumObjectSize(String transitionDefaultMinimumObjectSize) {
            return transitionDefaultMinimumObjectSize(Output.of(transitionDefaultMinimumObjectSize));
        }

        public BucketLifecycleConfigurationState build() {
            return $;
        }
    }

}
