// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.secretsmanager.outputs;

import com.pulumi.aws.secretsmanager.outputs.GetSecretRotationRotationRule;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetSecretRotationResult {
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return ARN of the secret.
     * 
     */
    private Boolean rotationEnabled;
    /**
     * @return Decrypted part of the protected secret information that was originally provided as a string.
     * 
     */
    private String rotationLambdaArn;
    /**
     * @return Decrypted part of the protected secret information that was originally provided as a binary. Base64 encoded.
     * 
     */
    private List<GetSecretRotationRotationRule> rotationRules;
    private String secretId;

    private GetSecretRotationResult() {}
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return ARN of the secret.
     * 
     */
    public Boolean rotationEnabled() {
        return this.rotationEnabled;
    }
    /**
     * @return Decrypted part of the protected secret information that was originally provided as a string.
     * 
     */
    public String rotationLambdaArn() {
        return this.rotationLambdaArn;
    }
    /**
     * @return Decrypted part of the protected secret information that was originally provided as a binary. Base64 encoded.
     * 
     */
    public List<GetSecretRotationRotationRule> rotationRules() {
        return this.rotationRules;
    }
    public String secretId() {
        return this.secretId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSecretRotationResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String id;
        private Boolean rotationEnabled;
        private String rotationLambdaArn;
        private List<GetSecretRotationRotationRule> rotationRules;
        private String secretId;
        public Builder() {}
        public Builder(GetSecretRotationResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.id = defaults.id;
    	      this.rotationEnabled = defaults.rotationEnabled;
    	      this.rotationLambdaArn = defaults.rotationLambdaArn;
    	      this.rotationRules = defaults.rotationRules;
    	      this.secretId = defaults.secretId;
        }

        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetSecretRotationResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder rotationEnabled(Boolean rotationEnabled) {
            if (rotationEnabled == null) {
              throw new MissingRequiredPropertyException("GetSecretRotationResult", "rotationEnabled");
            }
            this.rotationEnabled = rotationEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder rotationLambdaArn(String rotationLambdaArn) {
            if (rotationLambdaArn == null) {
              throw new MissingRequiredPropertyException("GetSecretRotationResult", "rotationLambdaArn");
            }
            this.rotationLambdaArn = rotationLambdaArn;
            return this;
        }
        @CustomType.Setter
        public Builder rotationRules(List<GetSecretRotationRotationRule> rotationRules) {
            if (rotationRules == null) {
              throw new MissingRequiredPropertyException("GetSecretRotationResult", "rotationRules");
            }
            this.rotationRules = rotationRules;
            return this;
        }
        public Builder rotationRules(GetSecretRotationRotationRule... rotationRules) {
            return rotationRules(List.of(rotationRules));
        }
        @CustomType.Setter
        public Builder secretId(String secretId) {
            if (secretId == null) {
              throw new MissingRequiredPropertyException("GetSecretRotationResult", "secretId");
            }
            this.secretId = secretId;
            return this;
        }
        public GetSecretRotationResult build() {
            final var _resultValue = new GetSecretRotationResult();
            _resultValue.id = id;
            _resultValue.rotationEnabled = rotationEnabled;
            _resultValue.rotationLambdaArn = rotationLambdaArn;
            _resultValue.rotationRules = rotationRules;
            _resultValue.secretId = secretId;
            return _resultValue;
        }
    }
}
