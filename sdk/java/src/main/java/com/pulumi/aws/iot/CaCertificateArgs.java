// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.iot;

import com.pulumi.aws.iot.inputs.CaCertificateRegistrationConfigArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CaCertificateArgs extends com.pulumi.resources.ResourceArgs {

    public static final CaCertificateArgs Empty = new CaCertificateArgs();

    /**
     * Boolean flag to indicate if the certificate should be active for device authentication.
     * 
     */
    @Import(name="active", required=true)
    private Output<Boolean> active;

    /**
     * @return Boolean flag to indicate if the certificate should be active for device authentication.
     * 
     */
    public Output<Boolean> active() {
        return this.active;
    }

    /**
     * Boolean flag to indicate if the certificate should be active for device regisration.
     * 
     */
    @Import(name="allowAutoRegistration", required=true)
    private Output<Boolean> allowAutoRegistration;

    /**
     * @return Boolean flag to indicate if the certificate should be active for device regisration.
     * 
     */
    public Output<Boolean> allowAutoRegistration() {
        return this.allowAutoRegistration;
    }

    /**
     * PEM encoded CA certificate.
     * 
     */
    @Import(name="caCertificatePem", required=true)
    private Output<String> caCertificatePem;

    /**
     * @return PEM encoded CA certificate.
     * 
     */
    public Output<String> caCertificatePem() {
        return this.caCertificatePem;
    }

    /**
     * The certificate mode in which the CA will be registered. Valida values: `DEFAULT` and `SNI_ONLY`. Default: `DEFAULT`.
     * 
     */
    @Import(name="certificateMode")
    private @Nullable Output<String> certificateMode;

    /**
     * @return The certificate mode in which the CA will be registered. Valida values: `DEFAULT` and `SNI_ONLY`. Default: `DEFAULT`.
     * 
     */
    public Optional<Output<String>> certificateMode() {
        return Optional.ofNullable(this.certificateMode);
    }

    /**
     * Information about the registration configuration. See below.
     * 
     */
    @Import(name="registrationConfig")
    private @Nullable Output<CaCertificateRegistrationConfigArgs> registrationConfig;

    /**
     * @return Information about the registration configuration. See below.
     * 
     */
    public Optional<Output<CaCertificateRegistrationConfigArgs>> registrationConfig() {
        return Optional.ofNullable(this.registrationConfig);
    }

    /**
     * A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * PEM encoded verification certificate containing the common name of a registration code. Review
     * [CreateVerificationCSR](https://docs.aws.amazon.com/iot/latest/developerguide/register-CA-cert.html). Reuired if `certificate_mode` is `DEFAULT`.
     * 
     */
    @Import(name="verificationCertificatePem")
    private @Nullable Output<String> verificationCertificatePem;

    /**
     * @return PEM encoded verification certificate containing the common name of a registration code. Review
     * [CreateVerificationCSR](https://docs.aws.amazon.com/iot/latest/developerguide/register-CA-cert.html). Reuired if `certificate_mode` is `DEFAULT`.
     * 
     */
    public Optional<Output<String>> verificationCertificatePem() {
        return Optional.ofNullable(this.verificationCertificatePem);
    }

    private CaCertificateArgs() {}

    private CaCertificateArgs(CaCertificateArgs $) {
        this.active = $.active;
        this.allowAutoRegistration = $.allowAutoRegistration;
        this.caCertificatePem = $.caCertificatePem;
        this.certificateMode = $.certificateMode;
        this.registrationConfig = $.registrationConfig;
        this.tags = $.tags;
        this.verificationCertificatePem = $.verificationCertificatePem;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CaCertificateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CaCertificateArgs $;

        public Builder() {
            $ = new CaCertificateArgs();
        }

        public Builder(CaCertificateArgs defaults) {
            $ = new CaCertificateArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param active Boolean flag to indicate if the certificate should be active for device authentication.
         * 
         * @return builder
         * 
         */
        public Builder active(Output<Boolean> active) {
            $.active = active;
            return this;
        }

        /**
         * @param active Boolean flag to indicate if the certificate should be active for device authentication.
         * 
         * @return builder
         * 
         */
        public Builder active(Boolean active) {
            return active(Output.of(active));
        }

        /**
         * @param allowAutoRegistration Boolean flag to indicate if the certificate should be active for device regisration.
         * 
         * @return builder
         * 
         */
        public Builder allowAutoRegistration(Output<Boolean> allowAutoRegistration) {
            $.allowAutoRegistration = allowAutoRegistration;
            return this;
        }

        /**
         * @param allowAutoRegistration Boolean flag to indicate if the certificate should be active for device regisration.
         * 
         * @return builder
         * 
         */
        public Builder allowAutoRegistration(Boolean allowAutoRegistration) {
            return allowAutoRegistration(Output.of(allowAutoRegistration));
        }

        /**
         * @param caCertificatePem PEM encoded CA certificate.
         * 
         * @return builder
         * 
         */
        public Builder caCertificatePem(Output<String> caCertificatePem) {
            $.caCertificatePem = caCertificatePem;
            return this;
        }

        /**
         * @param caCertificatePem PEM encoded CA certificate.
         * 
         * @return builder
         * 
         */
        public Builder caCertificatePem(String caCertificatePem) {
            return caCertificatePem(Output.of(caCertificatePem));
        }

        /**
         * @param certificateMode The certificate mode in which the CA will be registered. Valida values: `DEFAULT` and `SNI_ONLY`. Default: `DEFAULT`.
         * 
         * @return builder
         * 
         */
        public Builder certificateMode(@Nullable Output<String> certificateMode) {
            $.certificateMode = certificateMode;
            return this;
        }

        /**
         * @param certificateMode The certificate mode in which the CA will be registered. Valida values: `DEFAULT` and `SNI_ONLY`. Default: `DEFAULT`.
         * 
         * @return builder
         * 
         */
        public Builder certificateMode(String certificateMode) {
            return certificateMode(Output.of(certificateMode));
        }

        /**
         * @param registrationConfig Information about the registration configuration. See below.
         * 
         * @return builder
         * 
         */
        public Builder registrationConfig(@Nullable Output<CaCertificateRegistrationConfigArgs> registrationConfig) {
            $.registrationConfig = registrationConfig;
            return this;
        }

        /**
         * @param registrationConfig Information about the registration configuration. See below.
         * 
         * @return builder
         * 
         */
        public Builder registrationConfig(CaCertificateRegistrationConfigArgs registrationConfig) {
            return registrationConfig(Output.of(registrationConfig));
        }

        /**
         * @param tags A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param verificationCertificatePem PEM encoded verification certificate containing the common name of a registration code. Review
         * [CreateVerificationCSR](https://docs.aws.amazon.com/iot/latest/developerguide/register-CA-cert.html). Reuired if `certificate_mode` is `DEFAULT`.
         * 
         * @return builder
         * 
         */
        public Builder verificationCertificatePem(@Nullable Output<String> verificationCertificatePem) {
            $.verificationCertificatePem = verificationCertificatePem;
            return this;
        }

        /**
         * @param verificationCertificatePem PEM encoded verification certificate containing the common name of a registration code. Review
         * [CreateVerificationCSR](https://docs.aws.amazon.com/iot/latest/developerguide/register-CA-cert.html). Reuired if `certificate_mode` is `DEFAULT`.
         * 
         * @return builder
         * 
         */
        public Builder verificationCertificatePem(String verificationCertificatePem) {
            return verificationCertificatePem(Output.of(verificationCertificatePem));
        }

        public CaCertificateArgs build() {
            $.active = Objects.requireNonNull($.active, "expected parameter 'active' to be non-null");
            $.allowAutoRegistration = Objects.requireNonNull($.allowAutoRegistration, "expected parameter 'allowAutoRegistration' to be non-null");
            $.caCertificatePem = Objects.requireNonNull($.caCertificatePem, "expected parameter 'caCertificatePem' to be non-null");
            return $;
        }
    }

}
