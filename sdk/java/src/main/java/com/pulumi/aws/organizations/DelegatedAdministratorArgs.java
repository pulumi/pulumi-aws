// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.organizations;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class DelegatedAdministratorArgs extends com.pulumi.resources.ResourceArgs {

    public static final DelegatedAdministratorArgs Empty = new DelegatedAdministratorArgs();

    /**
     * The account ID number of the member account in the organization to register as a delegated administrator.
     * 
     */
    @Import(name="accountId", required=true)
    private Output<String> accountId;

    /**
     * @return The account ID number of the member account in the organization to register as a delegated administrator.
     * 
     */
    public Output<String> accountId() {
        return this.accountId;
    }

    /**
     * The service principal of the AWS service for which you want to make the member account a delegated administrator.
     * 
     */
    @Import(name="servicePrincipal", required=true)
    private Output<String> servicePrincipal;

    /**
     * @return The service principal of the AWS service for which you want to make the member account a delegated administrator.
     * 
     */
    public Output<String> servicePrincipal() {
        return this.servicePrincipal;
    }

    private DelegatedAdministratorArgs() {}

    private DelegatedAdministratorArgs(DelegatedAdministratorArgs $) {
        this.accountId = $.accountId;
        this.servicePrincipal = $.servicePrincipal;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DelegatedAdministratorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DelegatedAdministratorArgs $;

        public Builder() {
            $ = new DelegatedAdministratorArgs();
        }

        public Builder(DelegatedAdministratorArgs defaults) {
            $ = new DelegatedAdministratorArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId The account ID number of the member account in the organization to register as a delegated administrator.
         * 
         * @return builder
         * 
         */
        public Builder accountId(Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId The account ID number of the member account in the organization to register as a delegated administrator.
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param servicePrincipal The service principal of the AWS service for which you want to make the member account a delegated administrator.
         * 
         * @return builder
         * 
         */
        public Builder servicePrincipal(Output<String> servicePrincipal) {
            $.servicePrincipal = servicePrincipal;
            return this;
        }

        /**
         * @param servicePrincipal The service principal of the AWS service for which you want to make the member account a delegated administrator.
         * 
         * @return builder
         * 
         */
        public Builder servicePrincipal(String servicePrincipal) {
            return servicePrincipal(Output.of(servicePrincipal));
        }

        public DelegatedAdministratorArgs build() {
            if ($.accountId == null) {
                throw new MissingRequiredPropertyException("DelegatedAdministratorArgs", "accountId");
            }
            if ($.servicePrincipal == null) {
                throw new MissingRequiredPropertyException("DelegatedAdministratorArgs", "servicePrincipal");
            }
            return $;
        }
    }

}
