// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.costexplorer.outputs;

import com.pulumi.aws.costexplorer.outputs.CostCategoryRuleRuleNotAnd;
import com.pulumi.aws.costexplorer.outputs.CostCategoryRuleRuleNotCostCategory;
import com.pulumi.aws.costexplorer.outputs.CostCategoryRuleRuleNotDimension;
import com.pulumi.aws.costexplorer.outputs.CostCategoryRuleRuleNotNot;
import com.pulumi.aws.costexplorer.outputs.CostCategoryRuleRuleNotOr;
import com.pulumi.aws.costexplorer.outputs.CostCategoryRuleRuleNotTags;
import com.pulumi.core.annotations.CustomType;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class CostCategoryRuleRuleNot {
    /**
     * @return Return results that match both `Dimension` objects.
     * 
     */
    private @Nullable List<CostCategoryRuleRuleNotAnd> ands;
    /**
     * @return Configuration block for the filter that&#39;s based on `CostCategory` values. See below.
     * 
     */
    private @Nullable CostCategoryRuleRuleNotCostCategory costCategory;
    /**
     * @return Configuration block for the specific `Dimension` to use for `Expression`. See below.
     * 
     */
    private @Nullable CostCategoryRuleRuleNotDimension dimension;
    /**
     * @return Return results that match both `Dimension` object.
     * 
     */
    private @Nullable CostCategoryRuleRuleNotNot not;
    /**
     * @return Return results that match both `Dimension` object.
     * 
     */
    private @Nullable List<CostCategoryRuleRuleNotOr> ors;
    /**
     * @return Key-value mapping of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private @Nullable CostCategoryRuleRuleNotTags tags;

    private CostCategoryRuleRuleNot() {}
    /**
     * @return Return results that match both `Dimension` objects.
     * 
     */
    public List<CostCategoryRuleRuleNotAnd> ands() {
        return this.ands == null ? List.of() : this.ands;
    }
    /**
     * @return Configuration block for the filter that&#39;s based on `CostCategory` values. See below.
     * 
     */
    public Optional<CostCategoryRuleRuleNotCostCategory> costCategory() {
        return Optional.ofNullable(this.costCategory);
    }
    /**
     * @return Configuration block for the specific `Dimension` to use for `Expression`. See below.
     * 
     */
    public Optional<CostCategoryRuleRuleNotDimension> dimension() {
        return Optional.ofNullable(this.dimension);
    }
    /**
     * @return Return results that match both `Dimension` object.
     * 
     */
    public Optional<CostCategoryRuleRuleNotNot> not() {
        return Optional.ofNullable(this.not);
    }
    /**
     * @return Return results that match both `Dimension` object.
     * 
     */
    public List<CostCategoryRuleRuleNotOr> ors() {
        return this.ors == null ? List.of() : this.ors;
    }
    /**
     * @return Key-value mapping of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Optional<CostCategoryRuleRuleNotTags> tags() {
        return Optional.ofNullable(this.tags);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CostCategoryRuleRuleNot defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<CostCategoryRuleRuleNotAnd> ands;
        private @Nullable CostCategoryRuleRuleNotCostCategory costCategory;
        private @Nullable CostCategoryRuleRuleNotDimension dimension;
        private @Nullable CostCategoryRuleRuleNotNot not;
        private @Nullable List<CostCategoryRuleRuleNotOr> ors;
        private @Nullable CostCategoryRuleRuleNotTags tags;
        public Builder() {}
        public Builder(CostCategoryRuleRuleNot defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ands = defaults.ands;
    	      this.costCategory = defaults.costCategory;
    	      this.dimension = defaults.dimension;
    	      this.not = defaults.not;
    	      this.ors = defaults.ors;
    	      this.tags = defaults.tags;
        }

        @CustomType.Setter
        public Builder ands(@Nullable List<CostCategoryRuleRuleNotAnd> ands) {

            this.ands = ands;
            return this;
        }
        public Builder ands(CostCategoryRuleRuleNotAnd... ands) {
            return ands(List.of(ands));
        }
        @CustomType.Setter
        public Builder costCategory(@Nullable CostCategoryRuleRuleNotCostCategory costCategory) {

            this.costCategory = costCategory;
            return this;
        }
        @CustomType.Setter
        public Builder dimension(@Nullable CostCategoryRuleRuleNotDimension dimension) {

            this.dimension = dimension;
            return this;
        }
        @CustomType.Setter
        public Builder not(@Nullable CostCategoryRuleRuleNotNot not) {

            this.not = not;
            return this;
        }
        @CustomType.Setter
        public Builder ors(@Nullable List<CostCategoryRuleRuleNotOr> ors) {

            this.ors = ors;
            return this;
        }
        public Builder ors(CostCategoryRuleRuleNotOr... ors) {
            return ors(List.of(ors));
        }
        @CustomType.Setter
        public Builder tags(@Nullable CostCategoryRuleRuleNotTags tags) {

            this.tags = tags;
            return this;
        }
        public CostCategoryRuleRuleNot build() {
            final var _resultValue = new CostCategoryRuleRuleNot();
            _resultValue.ands = ands;
            _resultValue.costCategory = costCategory;
            _resultValue.dimension = dimension;
            _resultValue.not = not;
            _resultValue.ors = ors;
            _resultValue.tags = tags;
            return _resultValue;
        }
    }
}
