// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.kendra.inputs;

import com.pulumi.aws.kendra.inputs.DataSourceConfigurationWebCrawlerConfigurationAuthenticationConfigurationArgs;
import com.pulumi.aws.kendra.inputs.DataSourceConfigurationWebCrawlerConfigurationProxyConfigurationArgs;
import com.pulumi.aws.kendra.inputs.DataSourceConfigurationWebCrawlerConfigurationUrlsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DataSourceConfigurationWebCrawlerConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final DataSourceConfigurationWebCrawlerConfigurationArgs Empty = new DataSourceConfigurationWebCrawlerConfigurationArgs();

    @Import(name="authenticationConfiguration")
    private @Nullable Output<DataSourceConfigurationWebCrawlerConfigurationAuthenticationConfigurationArgs> authenticationConfiguration;

    public Optional<Output<DataSourceConfigurationWebCrawlerConfigurationAuthenticationConfigurationArgs>> authenticationConfiguration() {
        return Optional.ofNullable(this.authenticationConfiguration);
    }

    @Import(name="crawlDepth")
    private @Nullable Output<Integer> crawlDepth;

    public Optional<Output<Integer>> crawlDepth() {
        return Optional.ofNullable(this.crawlDepth);
    }

    @Import(name="maxContentSizePerPageInMegaBytes")
    private @Nullable Output<Double> maxContentSizePerPageInMegaBytes;

    public Optional<Output<Double>> maxContentSizePerPageInMegaBytes() {
        return Optional.ofNullable(this.maxContentSizePerPageInMegaBytes);
    }

    @Import(name="maxLinksPerPage")
    private @Nullable Output<Integer> maxLinksPerPage;

    public Optional<Output<Integer>> maxLinksPerPage() {
        return Optional.ofNullable(this.maxLinksPerPage);
    }

    @Import(name="maxUrlsPerMinuteCrawlRate")
    private @Nullable Output<Integer> maxUrlsPerMinuteCrawlRate;

    public Optional<Output<Integer>> maxUrlsPerMinuteCrawlRate() {
        return Optional.ofNullable(this.maxUrlsPerMinuteCrawlRate);
    }

    @Import(name="proxyConfiguration")
    private @Nullable Output<DataSourceConfigurationWebCrawlerConfigurationProxyConfigurationArgs> proxyConfiguration;

    public Optional<Output<DataSourceConfigurationWebCrawlerConfigurationProxyConfigurationArgs>> proxyConfiguration() {
        return Optional.ofNullable(this.proxyConfiguration);
    }

    @Import(name="urlExclusionPatterns")
    private @Nullable Output<List<String>> urlExclusionPatterns;

    public Optional<Output<List<String>>> urlExclusionPatterns() {
        return Optional.ofNullable(this.urlExclusionPatterns);
    }

    @Import(name="urlInclusionPatterns")
    private @Nullable Output<List<String>> urlInclusionPatterns;

    public Optional<Output<List<String>>> urlInclusionPatterns() {
        return Optional.ofNullable(this.urlInclusionPatterns);
    }

    @Import(name="urls", required=true)
    private Output<DataSourceConfigurationWebCrawlerConfigurationUrlsArgs> urls;

    public Output<DataSourceConfigurationWebCrawlerConfigurationUrlsArgs> urls() {
        return this.urls;
    }

    private DataSourceConfigurationWebCrawlerConfigurationArgs() {}

    private DataSourceConfigurationWebCrawlerConfigurationArgs(DataSourceConfigurationWebCrawlerConfigurationArgs $) {
        this.authenticationConfiguration = $.authenticationConfiguration;
        this.crawlDepth = $.crawlDepth;
        this.maxContentSizePerPageInMegaBytes = $.maxContentSizePerPageInMegaBytes;
        this.maxLinksPerPage = $.maxLinksPerPage;
        this.maxUrlsPerMinuteCrawlRate = $.maxUrlsPerMinuteCrawlRate;
        this.proxyConfiguration = $.proxyConfiguration;
        this.urlExclusionPatterns = $.urlExclusionPatterns;
        this.urlInclusionPatterns = $.urlInclusionPatterns;
        this.urls = $.urls;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DataSourceConfigurationWebCrawlerConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DataSourceConfigurationWebCrawlerConfigurationArgs $;

        public Builder() {
            $ = new DataSourceConfigurationWebCrawlerConfigurationArgs();
        }

        public Builder(DataSourceConfigurationWebCrawlerConfigurationArgs defaults) {
            $ = new DataSourceConfigurationWebCrawlerConfigurationArgs(Objects.requireNonNull(defaults));
        }

        public Builder authenticationConfiguration(@Nullable Output<DataSourceConfigurationWebCrawlerConfigurationAuthenticationConfigurationArgs> authenticationConfiguration) {
            $.authenticationConfiguration = authenticationConfiguration;
            return this;
        }

        public Builder authenticationConfiguration(DataSourceConfigurationWebCrawlerConfigurationAuthenticationConfigurationArgs authenticationConfiguration) {
            return authenticationConfiguration(Output.of(authenticationConfiguration));
        }

        public Builder crawlDepth(@Nullable Output<Integer> crawlDepth) {
            $.crawlDepth = crawlDepth;
            return this;
        }

        public Builder crawlDepth(Integer crawlDepth) {
            return crawlDepth(Output.of(crawlDepth));
        }

        public Builder maxContentSizePerPageInMegaBytes(@Nullable Output<Double> maxContentSizePerPageInMegaBytes) {
            $.maxContentSizePerPageInMegaBytes = maxContentSizePerPageInMegaBytes;
            return this;
        }

        public Builder maxContentSizePerPageInMegaBytes(Double maxContentSizePerPageInMegaBytes) {
            return maxContentSizePerPageInMegaBytes(Output.of(maxContentSizePerPageInMegaBytes));
        }

        public Builder maxLinksPerPage(@Nullable Output<Integer> maxLinksPerPage) {
            $.maxLinksPerPage = maxLinksPerPage;
            return this;
        }

        public Builder maxLinksPerPage(Integer maxLinksPerPage) {
            return maxLinksPerPage(Output.of(maxLinksPerPage));
        }

        public Builder maxUrlsPerMinuteCrawlRate(@Nullable Output<Integer> maxUrlsPerMinuteCrawlRate) {
            $.maxUrlsPerMinuteCrawlRate = maxUrlsPerMinuteCrawlRate;
            return this;
        }

        public Builder maxUrlsPerMinuteCrawlRate(Integer maxUrlsPerMinuteCrawlRate) {
            return maxUrlsPerMinuteCrawlRate(Output.of(maxUrlsPerMinuteCrawlRate));
        }

        public Builder proxyConfiguration(@Nullable Output<DataSourceConfigurationWebCrawlerConfigurationProxyConfigurationArgs> proxyConfiguration) {
            $.proxyConfiguration = proxyConfiguration;
            return this;
        }

        public Builder proxyConfiguration(DataSourceConfigurationWebCrawlerConfigurationProxyConfigurationArgs proxyConfiguration) {
            return proxyConfiguration(Output.of(proxyConfiguration));
        }

        public Builder urlExclusionPatterns(@Nullable Output<List<String>> urlExclusionPatterns) {
            $.urlExclusionPatterns = urlExclusionPatterns;
            return this;
        }

        public Builder urlExclusionPatterns(List<String> urlExclusionPatterns) {
            return urlExclusionPatterns(Output.of(urlExclusionPatterns));
        }

        public Builder urlExclusionPatterns(String... urlExclusionPatterns) {
            return urlExclusionPatterns(List.of(urlExclusionPatterns));
        }

        public Builder urlInclusionPatterns(@Nullable Output<List<String>> urlInclusionPatterns) {
            $.urlInclusionPatterns = urlInclusionPatterns;
            return this;
        }

        public Builder urlInclusionPatterns(List<String> urlInclusionPatterns) {
            return urlInclusionPatterns(Output.of(urlInclusionPatterns));
        }

        public Builder urlInclusionPatterns(String... urlInclusionPatterns) {
            return urlInclusionPatterns(List.of(urlInclusionPatterns));
        }

        public Builder urls(Output<DataSourceConfigurationWebCrawlerConfigurationUrlsArgs> urls) {
            $.urls = urls;
            return this;
        }

        public Builder urls(DataSourceConfigurationWebCrawlerConfigurationUrlsArgs urls) {
            return urls(Output.of(urls));
        }

        public DataSourceConfigurationWebCrawlerConfigurationArgs build() {
            $.urls = Objects.requireNonNull($.urls, "expected parameter 'urls' to be non-null");
            return $;
        }
    }

}
