// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.codebuild.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProjectSecondaryArtifactArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProjectSecondaryArtifactArgs Empty = new ProjectSecondaryArtifactArgs();

    @Import(name="artifactIdentifier", required=true)
    private Output<String> artifactIdentifier;

    public Output<String> artifactIdentifier() {
        return this.artifactIdentifier;
    }

    @Import(name="bucketOwnerAccess")
    private @Nullable Output<String> bucketOwnerAccess;

    public Optional<Output<String>> bucketOwnerAccess() {
        return Optional.ofNullable(this.bucketOwnerAccess);
    }

    @Import(name="encryptionDisabled")
    private @Nullable Output<Boolean> encryptionDisabled;

    public Optional<Output<Boolean>> encryptionDisabled() {
        return Optional.ofNullable(this.encryptionDisabled);
    }

    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="namespaceType")
    private @Nullable Output<String> namespaceType;

    public Optional<Output<String>> namespaceType() {
        return Optional.ofNullable(this.namespaceType);
    }

    @Import(name="overrideArtifactName")
    private @Nullable Output<Boolean> overrideArtifactName;

    public Optional<Output<Boolean>> overrideArtifactName() {
        return Optional.ofNullable(this.overrideArtifactName);
    }

    @Import(name="packaging")
    private @Nullable Output<String> packaging;

    public Optional<Output<String>> packaging() {
        return Optional.ofNullable(this.packaging);
    }

    @Import(name="path")
    private @Nullable Output<String> path;

    public Optional<Output<String>> path() {
        return Optional.ofNullable(this.path);
    }

    @Import(name="type", required=true)
    private Output<String> type;

    public Output<String> type() {
        return this.type;
    }

    private ProjectSecondaryArtifactArgs() {}

    private ProjectSecondaryArtifactArgs(ProjectSecondaryArtifactArgs $) {
        this.artifactIdentifier = $.artifactIdentifier;
        this.bucketOwnerAccess = $.bucketOwnerAccess;
        this.encryptionDisabled = $.encryptionDisabled;
        this.location = $.location;
        this.name = $.name;
        this.namespaceType = $.namespaceType;
        this.overrideArtifactName = $.overrideArtifactName;
        this.packaging = $.packaging;
        this.path = $.path;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectSecondaryArtifactArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectSecondaryArtifactArgs $;

        public Builder() {
            $ = new ProjectSecondaryArtifactArgs();
        }

        public Builder(ProjectSecondaryArtifactArgs defaults) {
            $ = new ProjectSecondaryArtifactArgs(Objects.requireNonNull(defaults));
        }

        public Builder artifactIdentifier(Output<String> artifactIdentifier) {
            $.artifactIdentifier = artifactIdentifier;
            return this;
        }

        public Builder artifactIdentifier(String artifactIdentifier) {
            return artifactIdentifier(Output.of(artifactIdentifier));
        }

        public Builder bucketOwnerAccess(@Nullable Output<String> bucketOwnerAccess) {
            $.bucketOwnerAccess = bucketOwnerAccess;
            return this;
        }

        public Builder bucketOwnerAccess(String bucketOwnerAccess) {
            return bucketOwnerAccess(Output.of(bucketOwnerAccess));
        }

        public Builder encryptionDisabled(@Nullable Output<Boolean> encryptionDisabled) {
            $.encryptionDisabled = encryptionDisabled;
            return this;
        }

        public Builder encryptionDisabled(Boolean encryptionDisabled) {
            return encryptionDisabled(Output.of(encryptionDisabled));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder namespaceType(@Nullable Output<String> namespaceType) {
            $.namespaceType = namespaceType;
            return this;
        }

        public Builder namespaceType(String namespaceType) {
            return namespaceType(Output.of(namespaceType));
        }

        public Builder overrideArtifactName(@Nullable Output<Boolean> overrideArtifactName) {
            $.overrideArtifactName = overrideArtifactName;
            return this;
        }

        public Builder overrideArtifactName(Boolean overrideArtifactName) {
            return overrideArtifactName(Output.of(overrideArtifactName));
        }

        public Builder packaging(@Nullable Output<String> packaging) {
            $.packaging = packaging;
            return this;
        }

        public Builder packaging(String packaging) {
            return packaging(Output.of(packaging));
        }

        public Builder path(@Nullable Output<String> path) {
            $.path = path;
            return this;
        }

        public Builder path(String path) {
            return path(Output.of(path));
        }

        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        public Builder type(String type) {
            return type(Output.of(type));
        }

        public ProjectSecondaryArtifactArgs build() {
            $.artifactIdentifier = Objects.requireNonNull($.artifactIdentifier, "expected parameter 'artifactIdentifier' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
