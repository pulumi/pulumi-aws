// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ssoadmin.inputs;

import com.pulumi.aws.ssoadmin.inputs.GetPrincipalApplicationAssignmentsApplicationAssignmentArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetPrincipalApplicationAssignmentsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetPrincipalApplicationAssignmentsArgs Empty = new GetPrincipalApplicationAssignmentsArgs();

    /**
     * List of principals assigned to the application. See the `application_assignments` attribute reference below.
     * 
     */
    @Import(name="applicationAssignments")
    private @Nullable Output<List<GetPrincipalApplicationAssignmentsApplicationAssignmentArgs>> applicationAssignments;

    /**
     * @return List of principals assigned to the application. See the `application_assignments` attribute reference below.
     * 
     */
    public Optional<Output<List<GetPrincipalApplicationAssignmentsApplicationAssignmentArgs>>> applicationAssignments() {
        return Optional.ofNullable(this.applicationAssignments);
    }

    /**
     * ARN of the instance of IAM Identity Center.
     * 
     */
    @Import(name="instanceArn", required=true)
    private Output<String> instanceArn;

    /**
     * @return ARN of the instance of IAM Identity Center.
     * 
     */
    public Output<String> instanceArn() {
        return this.instanceArn;
    }

    /**
     * An identifier for an object in IAM Identity Center, such as a user or group.
     * 
     */
    @Import(name="principalId", required=true)
    private Output<String> principalId;

    /**
     * @return An identifier for an object in IAM Identity Center, such as a user or group.
     * 
     */
    public Output<String> principalId() {
        return this.principalId;
    }

    /**
     * Entity type for which the assignment will be created. Valid values are `USER` or `GROUP`.
     * 
     */
    @Import(name="principalType", required=true)
    private Output<String> principalType;

    /**
     * @return Entity type for which the assignment will be created. Valid values are `USER` or `GROUP`.
     * 
     */
    public Output<String> principalType() {
        return this.principalType;
    }

    private GetPrincipalApplicationAssignmentsArgs() {}

    private GetPrincipalApplicationAssignmentsArgs(GetPrincipalApplicationAssignmentsArgs $) {
        this.applicationAssignments = $.applicationAssignments;
        this.instanceArn = $.instanceArn;
        this.principalId = $.principalId;
        this.principalType = $.principalType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetPrincipalApplicationAssignmentsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetPrincipalApplicationAssignmentsArgs $;

        public Builder() {
            $ = new GetPrincipalApplicationAssignmentsArgs();
        }

        public Builder(GetPrincipalApplicationAssignmentsArgs defaults) {
            $ = new GetPrincipalApplicationAssignmentsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param applicationAssignments List of principals assigned to the application. See the `application_assignments` attribute reference below.
         * 
         * @return builder
         * 
         */
        public Builder applicationAssignments(@Nullable Output<List<GetPrincipalApplicationAssignmentsApplicationAssignmentArgs>> applicationAssignments) {
            $.applicationAssignments = applicationAssignments;
            return this;
        }

        /**
         * @param applicationAssignments List of principals assigned to the application. See the `application_assignments` attribute reference below.
         * 
         * @return builder
         * 
         */
        public Builder applicationAssignments(List<GetPrincipalApplicationAssignmentsApplicationAssignmentArgs> applicationAssignments) {
            return applicationAssignments(Output.of(applicationAssignments));
        }

        /**
         * @param applicationAssignments List of principals assigned to the application. See the `application_assignments` attribute reference below.
         * 
         * @return builder
         * 
         */
        public Builder applicationAssignments(GetPrincipalApplicationAssignmentsApplicationAssignmentArgs... applicationAssignments) {
            return applicationAssignments(List.of(applicationAssignments));
        }

        /**
         * @param instanceArn ARN of the instance of IAM Identity Center.
         * 
         * @return builder
         * 
         */
        public Builder instanceArn(Output<String> instanceArn) {
            $.instanceArn = instanceArn;
            return this;
        }

        /**
         * @param instanceArn ARN of the instance of IAM Identity Center.
         * 
         * @return builder
         * 
         */
        public Builder instanceArn(String instanceArn) {
            return instanceArn(Output.of(instanceArn));
        }

        /**
         * @param principalId An identifier for an object in IAM Identity Center, such as a user or group.
         * 
         * @return builder
         * 
         */
        public Builder principalId(Output<String> principalId) {
            $.principalId = principalId;
            return this;
        }

        /**
         * @param principalId An identifier for an object in IAM Identity Center, such as a user or group.
         * 
         * @return builder
         * 
         */
        public Builder principalId(String principalId) {
            return principalId(Output.of(principalId));
        }

        /**
         * @param principalType Entity type for which the assignment will be created. Valid values are `USER` or `GROUP`.
         * 
         * @return builder
         * 
         */
        public Builder principalType(Output<String> principalType) {
            $.principalType = principalType;
            return this;
        }

        /**
         * @param principalType Entity type for which the assignment will be created. Valid values are `USER` or `GROUP`.
         * 
         * @return builder
         * 
         */
        public Builder principalType(String principalType) {
            return principalType(Output.of(principalType));
        }

        public GetPrincipalApplicationAssignmentsArgs build() {
            $.instanceArn = Objects.requireNonNull($.instanceArn, "expected parameter 'instanceArn' to be non-null");
            $.principalId = Objects.requireNonNull($.principalId, "expected parameter 'principalId' to be non-null");
            $.principalType = Objects.requireNonNull($.principalType, "expected parameter 'principalType' to be non-null");
            return $;
        }
    }

}
