// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.bedrock.inputs;

import com.pulumi.aws.bedrock.inputs.AgentPromptVariantTemplateConfigurationChatToolConfigurationToolArgs;
import com.pulumi.aws.bedrock.inputs.AgentPromptVariantTemplateConfigurationChatToolConfigurationToolChoiceArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AgentPromptVariantTemplateConfigurationChatToolConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final AgentPromptVariantTemplateConfigurationChatToolConfigurationArgs Empty = new AgentPromptVariantTemplateConfigurationChatToolConfigurationArgs();

    /**
     * Defines which tools the model should request when invoked. See Tool Choice for more information.
     * 
     */
    @Import(name="toolChoice")
    private @Nullable Output<AgentPromptVariantTemplateConfigurationChatToolConfigurationToolChoiceArgs> toolChoice;

    /**
     * @return Defines which tools the model should request when invoked. See Tool Choice for more information.
     * 
     */
    public Optional<Output<AgentPromptVariantTemplateConfigurationChatToolConfigurationToolChoiceArgs>> toolChoice() {
        return Optional.ofNullable(this.toolChoice);
    }

    /**
     * A list of tools to pass to a model. See Tool for more information.
     * 
     */
    @Import(name="tools")
    private @Nullable Output<List<AgentPromptVariantTemplateConfigurationChatToolConfigurationToolArgs>> tools;

    /**
     * @return A list of tools to pass to a model. See Tool for more information.
     * 
     */
    public Optional<Output<List<AgentPromptVariantTemplateConfigurationChatToolConfigurationToolArgs>>> tools() {
        return Optional.ofNullable(this.tools);
    }

    private AgentPromptVariantTemplateConfigurationChatToolConfigurationArgs() {}

    private AgentPromptVariantTemplateConfigurationChatToolConfigurationArgs(AgentPromptVariantTemplateConfigurationChatToolConfigurationArgs $) {
        this.toolChoice = $.toolChoice;
        this.tools = $.tools;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AgentPromptVariantTemplateConfigurationChatToolConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AgentPromptVariantTemplateConfigurationChatToolConfigurationArgs $;

        public Builder() {
            $ = new AgentPromptVariantTemplateConfigurationChatToolConfigurationArgs();
        }

        public Builder(AgentPromptVariantTemplateConfigurationChatToolConfigurationArgs defaults) {
            $ = new AgentPromptVariantTemplateConfigurationChatToolConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param toolChoice Defines which tools the model should request when invoked. See Tool Choice for more information.
         * 
         * @return builder
         * 
         */
        public Builder toolChoice(@Nullable Output<AgentPromptVariantTemplateConfigurationChatToolConfigurationToolChoiceArgs> toolChoice) {
            $.toolChoice = toolChoice;
            return this;
        }

        /**
         * @param toolChoice Defines which tools the model should request when invoked. See Tool Choice for more information.
         * 
         * @return builder
         * 
         */
        public Builder toolChoice(AgentPromptVariantTemplateConfigurationChatToolConfigurationToolChoiceArgs toolChoice) {
            return toolChoice(Output.of(toolChoice));
        }

        /**
         * @param tools A list of tools to pass to a model. See Tool for more information.
         * 
         * @return builder
         * 
         */
        public Builder tools(@Nullable Output<List<AgentPromptVariantTemplateConfigurationChatToolConfigurationToolArgs>> tools) {
            $.tools = tools;
            return this;
        }

        /**
         * @param tools A list of tools to pass to a model. See Tool for more information.
         * 
         * @return builder
         * 
         */
        public Builder tools(List<AgentPromptVariantTemplateConfigurationChatToolConfigurationToolArgs> tools) {
            return tools(Output.of(tools));
        }

        /**
         * @param tools A list of tools to pass to a model. See Tool for more information.
         * 
         * @return builder
         * 
         */
        public Builder tools(AgentPromptVariantTemplateConfigurationChatToolConfigurationToolArgs... tools) {
            return tools(List.of(tools));
        }

        public AgentPromptVariantTemplateConfigurationChatToolConfigurationArgs build() {
            return $;
        }
    }

}
