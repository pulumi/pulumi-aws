// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.cognito.outputs;

import com.pulumi.aws.cognito.outputs.LogDeliveryConfigurationLogConfigurationCloudWatchLogsConfiguration;
import com.pulumi.aws.cognito.outputs.LogDeliveryConfigurationLogConfigurationFirehoseConfiguration;
import com.pulumi.aws.cognito.outputs.LogDeliveryConfigurationLogConfigurationS3Configuration;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class LogDeliveryConfigurationLogConfiguration {
    /**
     * @return Configuration for CloudWatch Logs delivery. See CloudWatch Logs Configuration below.
     * 
     */
    private @Nullable LogDeliveryConfigurationLogConfigurationCloudWatchLogsConfiguration cloudWatchLogsConfiguration;
    /**
     * @return The event source to configure logging for. Valid values are `userNotification` and `userAuthEvents`.
     * 
     */
    private String eventSource;
    /**
     * @return Configuration for Kinesis Data Firehose delivery. See Firehose Configuration below.
     * 
     */
    private @Nullable LogDeliveryConfigurationLogConfigurationFirehoseConfiguration firehoseConfiguration;
    /**
     * @return The log level to set for the event source. Valid values are `ERROR` and `INFO`.
     * 
     */
    private String logLevel;
    /**
     * @return Configuration for S3 delivery. See S3 Configuration below.
     * 
     * &gt; **Note:** At least one destination configuration (`cloudWatchLogsConfiguration`, `firehoseConfiguration`, or `s3Configuration`) must be specified for each log configuration.
     * 
     */
    private @Nullable LogDeliveryConfigurationLogConfigurationS3Configuration s3Configuration;

    private LogDeliveryConfigurationLogConfiguration() {}
    /**
     * @return Configuration for CloudWatch Logs delivery. See CloudWatch Logs Configuration below.
     * 
     */
    public Optional<LogDeliveryConfigurationLogConfigurationCloudWatchLogsConfiguration> cloudWatchLogsConfiguration() {
        return Optional.ofNullable(this.cloudWatchLogsConfiguration);
    }
    /**
     * @return The event source to configure logging for. Valid values are `userNotification` and `userAuthEvents`.
     * 
     */
    public String eventSource() {
        return this.eventSource;
    }
    /**
     * @return Configuration for Kinesis Data Firehose delivery. See Firehose Configuration below.
     * 
     */
    public Optional<LogDeliveryConfigurationLogConfigurationFirehoseConfiguration> firehoseConfiguration() {
        return Optional.ofNullable(this.firehoseConfiguration);
    }
    /**
     * @return The log level to set for the event source. Valid values are `ERROR` and `INFO`.
     * 
     */
    public String logLevel() {
        return this.logLevel;
    }
    /**
     * @return Configuration for S3 delivery. See S3 Configuration below.
     * 
     * &gt; **Note:** At least one destination configuration (`cloudWatchLogsConfiguration`, `firehoseConfiguration`, or `s3Configuration`) must be specified for each log configuration.
     * 
     */
    public Optional<LogDeliveryConfigurationLogConfigurationS3Configuration> s3Configuration() {
        return Optional.ofNullable(this.s3Configuration);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LogDeliveryConfigurationLogConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable LogDeliveryConfigurationLogConfigurationCloudWatchLogsConfiguration cloudWatchLogsConfiguration;
        private String eventSource;
        private @Nullable LogDeliveryConfigurationLogConfigurationFirehoseConfiguration firehoseConfiguration;
        private String logLevel;
        private @Nullable LogDeliveryConfigurationLogConfigurationS3Configuration s3Configuration;
        public Builder() {}
        public Builder(LogDeliveryConfigurationLogConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cloudWatchLogsConfiguration = defaults.cloudWatchLogsConfiguration;
    	      this.eventSource = defaults.eventSource;
    	      this.firehoseConfiguration = defaults.firehoseConfiguration;
    	      this.logLevel = defaults.logLevel;
    	      this.s3Configuration = defaults.s3Configuration;
        }

        @CustomType.Setter
        public Builder cloudWatchLogsConfiguration(@Nullable LogDeliveryConfigurationLogConfigurationCloudWatchLogsConfiguration cloudWatchLogsConfiguration) {

            this.cloudWatchLogsConfiguration = cloudWatchLogsConfiguration;
            return this;
        }
        @CustomType.Setter
        public Builder eventSource(String eventSource) {
            if (eventSource == null) {
              throw new MissingRequiredPropertyException("LogDeliveryConfigurationLogConfiguration", "eventSource");
            }
            this.eventSource = eventSource;
            return this;
        }
        @CustomType.Setter
        public Builder firehoseConfiguration(@Nullable LogDeliveryConfigurationLogConfigurationFirehoseConfiguration firehoseConfiguration) {

            this.firehoseConfiguration = firehoseConfiguration;
            return this;
        }
        @CustomType.Setter
        public Builder logLevel(String logLevel) {
            if (logLevel == null) {
              throw new MissingRequiredPropertyException("LogDeliveryConfigurationLogConfiguration", "logLevel");
            }
            this.logLevel = logLevel;
            return this;
        }
        @CustomType.Setter
        public Builder s3Configuration(@Nullable LogDeliveryConfigurationLogConfigurationS3Configuration s3Configuration) {

            this.s3Configuration = s3Configuration;
            return this;
        }
        public LogDeliveryConfigurationLogConfiguration build() {
            final var _resultValue = new LogDeliveryConfigurationLogConfiguration();
            _resultValue.cloudWatchLogsConfiguration = cloudWatchLogsConfiguration;
            _resultValue.eventSource = eventSource;
            _resultValue.firehoseConfiguration = firehoseConfiguration;
            _resultValue.logLevel = logLevel;
            _resultValue.s3Configuration = s3Configuration;
            return _resultValue;
        }
    }
}
