// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.s3.outputs;

import com.pulumi.aws.s3.outputs.BucketLifecycleConfigurationRuleAbortIncompleteMultipartUpload;
import com.pulumi.aws.s3.outputs.BucketLifecycleConfigurationRuleExpiration;
import com.pulumi.aws.s3.outputs.BucketLifecycleConfigurationRuleFilter;
import com.pulumi.aws.s3.outputs.BucketLifecycleConfigurationRuleNoncurrentVersionExpiration;
import com.pulumi.aws.s3.outputs.BucketLifecycleConfigurationRuleNoncurrentVersionTransition;
import com.pulumi.aws.s3.outputs.BucketLifecycleConfigurationRuleTransition;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class BucketLifecycleConfigurationRule {
    /**
     * @return Configuration block that specifies the days since the initiation of an incomplete multipart upload that Amazon S3 will wait before permanently removing all parts of the upload. See below.
     * 
     */
    private @Nullable BucketLifecycleConfigurationRuleAbortIncompleteMultipartUpload abortIncompleteMultipartUpload;
    /**
     * @return Configuration block that specifies the expiration for the lifecycle of the object in the form of date, days and, whether the object has a delete marker. See below.
     * 
     */
    private @Nullable BucketLifecycleConfigurationRuleExpiration expiration;
    /**
     * @return Configuration block used to identify objects that a Lifecycle Rule applies to.
     * See below.
     * If not specified, the `rule` will default to using `prefix`.
     * One of `filter` or `prefix` should be specified.
     * 
     */
    private @Nullable BucketLifecycleConfigurationRuleFilter filter;
    /**
     * @return Unique identifier for the rule. The value cannot be longer than 255 characters.
     * 
     */
    private String id;
    /**
     * @return Configuration block that specifies when noncurrent object versions expire. See below.
     * 
     */
    private @Nullable BucketLifecycleConfigurationRuleNoncurrentVersionExpiration noncurrentVersionExpiration;
    /**
     * @return Set of configuration blocks that specify the transition rule for the lifecycle rule that describes when noncurrent objects transition to a specific storage class. See below.
     * 
     */
    private @Nullable List<BucketLifecycleConfigurationRuleNoncurrentVersionTransition> noncurrentVersionTransitions;
    /**
     * @return **DEPRECATED** Use `filter` instead.
     * This has been deprecated by Amazon S3.
     * Prefix identifying one or more objects to which the rule applies.
     * Defaults to an empty string (`&#34;&#34;`) if `filter` is not specified.
     * One of `prefix` or `filter` should be specified.
     * 
     * @deprecated
     * Specify a prefix using &#39;filter&#39; instead
     * 
     */
    @Deprecated /* Specify a prefix using 'filter' instead */
    private @Nullable String prefix;
    /**
     * @return Whether the rule is currently being applied. Valid values: `Enabled` or `Disabled`.
     * 
     */
    private String status;
    /**
     * @return Set of configuration blocks that specify when an Amazon S3 object transitions to a specified storage class. See below.
     * 
     */
    private @Nullable List<BucketLifecycleConfigurationRuleTransition> transitions;

    private BucketLifecycleConfigurationRule() {}
    /**
     * @return Configuration block that specifies the days since the initiation of an incomplete multipart upload that Amazon S3 will wait before permanently removing all parts of the upload. See below.
     * 
     */
    public Optional<BucketLifecycleConfigurationRuleAbortIncompleteMultipartUpload> abortIncompleteMultipartUpload() {
        return Optional.ofNullable(this.abortIncompleteMultipartUpload);
    }
    /**
     * @return Configuration block that specifies the expiration for the lifecycle of the object in the form of date, days and, whether the object has a delete marker. See below.
     * 
     */
    public Optional<BucketLifecycleConfigurationRuleExpiration> expiration() {
        return Optional.ofNullable(this.expiration);
    }
    /**
     * @return Configuration block used to identify objects that a Lifecycle Rule applies to.
     * See below.
     * If not specified, the `rule` will default to using `prefix`.
     * One of `filter` or `prefix` should be specified.
     * 
     */
    public Optional<BucketLifecycleConfigurationRuleFilter> filter() {
        return Optional.ofNullable(this.filter);
    }
    /**
     * @return Unique identifier for the rule. The value cannot be longer than 255 characters.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Configuration block that specifies when noncurrent object versions expire. See below.
     * 
     */
    public Optional<BucketLifecycleConfigurationRuleNoncurrentVersionExpiration> noncurrentVersionExpiration() {
        return Optional.ofNullable(this.noncurrentVersionExpiration);
    }
    /**
     * @return Set of configuration blocks that specify the transition rule for the lifecycle rule that describes when noncurrent objects transition to a specific storage class. See below.
     * 
     */
    public List<BucketLifecycleConfigurationRuleNoncurrentVersionTransition> noncurrentVersionTransitions() {
        return this.noncurrentVersionTransitions == null ? List.of() : this.noncurrentVersionTransitions;
    }
    /**
     * @return **DEPRECATED** Use `filter` instead.
     * This has been deprecated by Amazon S3.
     * Prefix identifying one or more objects to which the rule applies.
     * Defaults to an empty string (`&#34;&#34;`) if `filter` is not specified.
     * One of `prefix` or `filter` should be specified.
     * 
     * @deprecated
     * Specify a prefix using &#39;filter&#39; instead
     * 
     */
    @Deprecated /* Specify a prefix using 'filter' instead */
    public Optional<String> prefix() {
        return Optional.ofNullable(this.prefix);
    }
    /**
     * @return Whether the rule is currently being applied. Valid values: `Enabled` or `Disabled`.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return Set of configuration blocks that specify when an Amazon S3 object transitions to a specified storage class. See below.
     * 
     */
    public List<BucketLifecycleConfigurationRuleTransition> transitions() {
        return this.transitions == null ? List.of() : this.transitions;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BucketLifecycleConfigurationRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable BucketLifecycleConfigurationRuleAbortIncompleteMultipartUpload abortIncompleteMultipartUpload;
        private @Nullable BucketLifecycleConfigurationRuleExpiration expiration;
        private @Nullable BucketLifecycleConfigurationRuleFilter filter;
        private String id;
        private @Nullable BucketLifecycleConfigurationRuleNoncurrentVersionExpiration noncurrentVersionExpiration;
        private @Nullable List<BucketLifecycleConfigurationRuleNoncurrentVersionTransition> noncurrentVersionTransitions;
        private @Nullable String prefix;
        private String status;
        private @Nullable List<BucketLifecycleConfigurationRuleTransition> transitions;
        public Builder() {}
        public Builder(BucketLifecycleConfigurationRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.abortIncompleteMultipartUpload = defaults.abortIncompleteMultipartUpload;
    	      this.expiration = defaults.expiration;
    	      this.filter = defaults.filter;
    	      this.id = defaults.id;
    	      this.noncurrentVersionExpiration = defaults.noncurrentVersionExpiration;
    	      this.noncurrentVersionTransitions = defaults.noncurrentVersionTransitions;
    	      this.prefix = defaults.prefix;
    	      this.status = defaults.status;
    	      this.transitions = defaults.transitions;
        }

        @CustomType.Setter
        public Builder abortIncompleteMultipartUpload(@Nullable BucketLifecycleConfigurationRuleAbortIncompleteMultipartUpload abortIncompleteMultipartUpload) {

            this.abortIncompleteMultipartUpload = abortIncompleteMultipartUpload;
            return this;
        }
        @CustomType.Setter
        public Builder expiration(@Nullable BucketLifecycleConfigurationRuleExpiration expiration) {

            this.expiration = expiration;
            return this;
        }
        @CustomType.Setter
        public Builder filter(@Nullable BucketLifecycleConfigurationRuleFilter filter) {

            this.filter = filter;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("BucketLifecycleConfigurationRule", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder noncurrentVersionExpiration(@Nullable BucketLifecycleConfigurationRuleNoncurrentVersionExpiration noncurrentVersionExpiration) {

            this.noncurrentVersionExpiration = noncurrentVersionExpiration;
            return this;
        }
        @CustomType.Setter
        public Builder noncurrentVersionTransitions(@Nullable List<BucketLifecycleConfigurationRuleNoncurrentVersionTransition> noncurrentVersionTransitions) {

            this.noncurrentVersionTransitions = noncurrentVersionTransitions;
            return this;
        }
        public Builder noncurrentVersionTransitions(BucketLifecycleConfigurationRuleNoncurrentVersionTransition... noncurrentVersionTransitions) {
            return noncurrentVersionTransitions(List.of(noncurrentVersionTransitions));
        }
        @CustomType.Setter
        public Builder prefix(@Nullable String prefix) {

            this.prefix = prefix;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("BucketLifecycleConfigurationRule", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder transitions(@Nullable List<BucketLifecycleConfigurationRuleTransition> transitions) {

            this.transitions = transitions;
            return this;
        }
        public Builder transitions(BucketLifecycleConfigurationRuleTransition... transitions) {
            return transitions(List.of(transitions));
        }
        public BucketLifecycleConfigurationRule build() {
            final var _resultValue = new BucketLifecycleConfigurationRule();
            _resultValue.abortIncompleteMultipartUpload = abortIncompleteMultipartUpload;
            _resultValue.expiration = expiration;
            _resultValue.filter = filter;
            _resultValue.id = id;
            _resultValue.noncurrentVersionExpiration = noncurrentVersionExpiration;
            _resultValue.noncurrentVersionTransitions = noncurrentVersionTransitions;
            _resultValue.prefix = prefix;
            _resultValue.status = status;
            _resultValue.transitions = transitions;
            return _resultValue;
        }
    }
}
