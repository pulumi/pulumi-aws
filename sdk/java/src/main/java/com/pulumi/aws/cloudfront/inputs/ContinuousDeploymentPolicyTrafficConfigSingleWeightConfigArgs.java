// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.cloudfront.inputs;

import com.pulumi.aws.cloudfront.inputs.ContinuousDeploymentPolicyTrafficConfigSingleWeightConfigSessionStickinessConfigArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ContinuousDeploymentPolicyTrafficConfigSingleWeightConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ContinuousDeploymentPolicyTrafficConfigSingleWeightConfigArgs Empty = new ContinuousDeploymentPolicyTrafficConfigSingleWeightConfigArgs();

    /**
     * Session stickiness provides the ability to define multiple requests from a single viewer as a single session. This prevents the potentially inconsistent experience of sending some of a given user&#39;s requests to the staging distribution, while others are sent to the primary distribution. Define the session duration using TTL values. See `session_stickiness_config`.
     * 
     */
    @Import(name="sessionStickinessConfig")
    private @Nullable Output<ContinuousDeploymentPolicyTrafficConfigSingleWeightConfigSessionStickinessConfigArgs> sessionStickinessConfig;

    /**
     * @return Session stickiness provides the ability to define multiple requests from a single viewer as a single session. This prevents the potentially inconsistent experience of sending some of a given user&#39;s requests to the staging distribution, while others are sent to the primary distribution. Define the session duration using TTL values. See `session_stickiness_config`.
     * 
     */
    public Optional<Output<ContinuousDeploymentPolicyTrafficConfigSingleWeightConfigSessionStickinessConfigArgs>> sessionStickinessConfig() {
        return Optional.ofNullable(this.sessionStickinessConfig);
    }

    /**
     * The percentage of traffic to send to a staging distribution, expressed as a decimal number between `0` and `.15`.
     * 
     */
    @Import(name="weight", required=true)
    private Output<Double> weight;

    /**
     * @return The percentage of traffic to send to a staging distribution, expressed as a decimal number between `0` and `.15`.
     * 
     */
    public Output<Double> weight() {
        return this.weight;
    }

    private ContinuousDeploymentPolicyTrafficConfigSingleWeightConfigArgs() {}

    private ContinuousDeploymentPolicyTrafficConfigSingleWeightConfigArgs(ContinuousDeploymentPolicyTrafficConfigSingleWeightConfigArgs $) {
        this.sessionStickinessConfig = $.sessionStickinessConfig;
        this.weight = $.weight;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ContinuousDeploymentPolicyTrafficConfigSingleWeightConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ContinuousDeploymentPolicyTrafficConfigSingleWeightConfigArgs $;

        public Builder() {
            $ = new ContinuousDeploymentPolicyTrafficConfigSingleWeightConfigArgs();
        }

        public Builder(ContinuousDeploymentPolicyTrafficConfigSingleWeightConfigArgs defaults) {
            $ = new ContinuousDeploymentPolicyTrafficConfigSingleWeightConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param sessionStickinessConfig Session stickiness provides the ability to define multiple requests from a single viewer as a single session. This prevents the potentially inconsistent experience of sending some of a given user&#39;s requests to the staging distribution, while others are sent to the primary distribution. Define the session duration using TTL values. See `session_stickiness_config`.
         * 
         * @return builder
         * 
         */
        public Builder sessionStickinessConfig(@Nullable Output<ContinuousDeploymentPolicyTrafficConfigSingleWeightConfigSessionStickinessConfigArgs> sessionStickinessConfig) {
            $.sessionStickinessConfig = sessionStickinessConfig;
            return this;
        }

        /**
         * @param sessionStickinessConfig Session stickiness provides the ability to define multiple requests from a single viewer as a single session. This prevents the potentially inconsistent experience of sending some of a given user&#39;s requests to the staging distribution, while others are sent to the primary distribution. Define the session duration using TTL values. See `session_stickiness_config`.
         * 
         * @return builder
         * 
         */
        public Builder sessionStickinessConfig(ContinuousDeploymentPolicyTrafficConfigSingleWeightConfigSessionStickinessConfigArgs sessionStickinessConfig) {
            return sessionStickinessConfig(Output.of(sessionStickinessConfig));
        }

        /**
         * @param weight The percentage of traffic to send to a staging distribution, expressed as a decimal number between `0` and `.15`.
         * 
         * @return builder
         * 
         */
        public Builder weight(Output<Double> weight) {
            $.weight = weight;
            return this;
        }

        /**
         * @param weight The percentage of traffic to send to a staging distribution, expressed as a decimal number between `0` and `.15`.
         * 
         * @return builder
         * 
         */
        public Builder weight(Double weight) {
            return weight(Output.of(weight));
        }

        public ContinuousDeploymentPolicyTrafficConfigSingleWeightConfigArgs build() {
            $.weight = Objects.requireNonNull($.weight, "expected parameter 'weight' to be non-null");
            return $;
        }
    }

}
