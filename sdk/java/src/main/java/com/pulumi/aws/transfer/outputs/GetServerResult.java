// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.transfer.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetServerResult {
    /**
     * @return ARN of Transfer Server.
     * 
     */
    private String arn;
    /**
     * @return ARN of any certificate.
     * 
     */
    private String certificate;
    /**
     * @return The domain of the storage system that is used for file transfers.
     * 
     */
    private String domain;
    /**
     * @return Endpoint of the Transfer Server (e.g., `s-12345678.server.transfer.REGION.amazonaws.com`).
     * 
     */
    private String endpoint;
    /**
     * @return Type of endpoint that the server is connected to.
     * 
     */
    private String endpointType;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The mode of authentication enabled for this service. The default value is `SERVICE_MANAGED`, which allows you to store and access SFTP user credentials within the service. `API_GATEWAY` indicates that user authentication requires a call to an API Gateway endpoint URL provided by you to integrate an identity provider of your choice.
     * 
     */
    private String identityProviderType;
    /**
     * @return ARN of the IAM role used to authenticate the user account with an `identity_provider_type` of `API_GATEWAY`.
     * 
     */
    private String invocationRole;
    /**
     * @return ARN of an IAM role that allows the service to write your SFTP users’ activity to your Amazon CloudWatch logs for monitoring and auditing purposes.
     * 
     */
    private String loggingRole;
    /**
     * @return File transfer protocol or protocols over which your file transfer protocol client can connect to your server&#39;s endpoint.
     * 
     */
    private List<String> protocols;
    /**
     * @return The name of the security policy that is attached to the server.
     * 
     */
    private String securityPolicyName;
    private String serverId;
    /**
     * @return A set of ARNs of destinations that will receive structured logs from the transfer server such as CloudWatch Log Group ARNs.
     * 
     */
    private List<String> structuredLogDestinations;
    /**
     * @return URL of the service endpoint used to authenticate users with an `identity_provider_type` of `API_GATEWAY`.
     * 
     */
    private String url;

    private GetServerResult() {}
    /**
     * @return ARN of Transfer Server.
     * 
     */
    public String arn() {
        return this.arn;
    }
    /**
     * @return ARN of any certificate.
     * 
     */
    public String certificate() {
        return this.certificate;
    }
    /**
     * @return The domain of the storage system that is used for file transfers.
     * 
     */
    public String domain() {
        return this.domain;
    }
    /**
     * @return Endpoint of the Transfer Server (e.g., `s-12345678.server.transfer.REGION.amazonaws.com`).
     * 
     */
    public String endpoint() {
        return this.endpoint;
    }
    /**
     * @return Type of endpoint that the server is connected to.
     * 
     */
    public String endpointType() {
        return this.endpointType;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The mode of authentication enabled for this service. The default value is `SERVICE_MANAGED`, which allows you to store and access SFTP user credentials within the service. `API_GATEWAY` indicates that user authentication requires a call to an API Gateway endpoint URL provided by you to integrate an identity provider of your choice.
     * 
     */
    public String identityProviderType() {
        return this.identityProviderType;
    }
    /**
     * @return ARN of the IAM role used to authenticate the user account with an `identity_provider_type` of `API_GATEWAY`.
     * 
     */
    public String invocationRole() {
        return this.invocationRole;
    }
    /**
     * @return ARN of an IAM role that allows the service to write your SFTP users’ activity to your Amazon CloudWatch logs for monitoring and auditing purposes.
     * 
     */
    public String loggingRole() {
        return this.loggingRole;
    }
    /**
     * @return File transfer protocol or protocols over which your file transfer protocol client can connect to your server&#39;s endpoint.
     * 
     */
    public List<String> protocols() {
        return this.protocols;
    }
    /**
     * @return The name of the security policy that is attached to the server.
     * 
     */
    public String securityPolicyName() {
        return this.securityPolicyName;
    }
    public String serverId() {
        return this.serverId;
    }
    /**
     * @return A set of ARNs of destinations that will receive structured logs from the transfer server such as CloudWatch Log Group ARNs.
     * 
     */
    public List<String> structuredLogDestinations() {
        return this.structuredLogDestinations;
    }
    /**
     * @return URL of the service endpoint used to authenticate users with an `identity_provider_type` of `API_GATEWAY`.
     * 
     */
    public String url() {
        return this.url;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServerResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String arn;
        private String certificate;
        private String domain;
        private String endpoint;
        private String endpointType;
        private String id;
        private String identityProviderType;
        private String invocationRole;
        private String loggingRole;
        private List<String> protocols;
        private String securityPolicyName;
        private String serverId;
        private List<String> structuredLogDestinations;
        private String url;
        public Builder() {}
        public Builder(GetServerResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.certificate = defaults.certificate;
    	      this.domain = defaults.domain;
    	      this.endpoint = defaults.endpoint;
    	      this.endpointType = defaults.endpointType;
    	      this.id = defaults.id;
    	      this.identityProviderType = defaults.identityProviderType;
    	      this.invocationRole = defaults.invocationRole;
    	      this.loggingRole = defaults.loggingRole;
    	      this.protocols = defaults.protocols;
    	      this.securityPolicyName = defaults.securityPolicyName;
    	      this.serverId = defaults.serverId;
    	      this.structuredLogDestinations = defaults.structuredLogDestinations;
    	      this.url = defaults.url;
        }

        @CustomType.Setter
        public Builder arn(String arn) {
            if (arn == null) {
              throw new MissingRequiredPropertyException("GetServerResult", "arn");
            }
            this.arn = arn;
            return this;
        }
        @CustomType.Setter
        public Builder certificate(String certificate) {
            if (certificate == null) {
              throw new MissingRequiredPropertyException("GetServerResult", "certificate");
            }
            this.certificate = certificate;
            return this;
        }
        @CustomType.Setter
        public Builder domain(String domain) {
            if (domain == null) {
              throw new MissingRequiredPropertyException("GetServerResult", "domain");
            }
            this.domain = domain;
            return this;
        }
        @CustomType.Setter
        public Builder endpoint(String endpoint) {
            if (endpoint == null) {
              throw new MissingRequiredPropertyException("GetServerResult", "endpoint");
            }
            this.endpoint = endpoint;
            return this;
        }
        @CustomType.Setter
        public Builder endpointType(String endpointType) {
            if (endpointType == null) {
              throw new MissingRequiredPropertyException("GetServerResult", "endpointType");
            }
            this.endpointType = endpointType;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetServerResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder identityProviderType(String identityProviderType) {
            if (identityProviderType == null) {
              throw new MissingRequiredPropertyException("GetServerResult", "identityProviderType");
            }
            this.identityProviderType = identityProviderType;
            return this;
        }
        @CustomType.Setter
        public Builder invocationRole(String invocationRole) {
            if (invocationRole == null) {
              throw new MissingRequiredPropertyException("GetServerResult", "invocationRole");
            }
            this.invocationRole = invocationRole;
            return this;
        }
        @CustomType.Setter
        public Builder loggingRole(String loggingRole) {
            if (loggingRole == null) {
              throw new MissingRequiredPropertyException("GetServerResult", "loggingRole");
            }
            this.loggingRole = loggingRole;
            return this;
        }
        @CustomType.Setter
        public Builder protocols(List<String> protocols) {
            if (protocols == null) {
              throw new MissingRequiredPropertyException("GetServerResult", "protocols");
            }
            this.protocols = protocols;
            return this;
        }
        public Builder protocols(String... protocols) {
            return protocols(List.of(protocols));
        }
        @CustomType.Setter
        public Builder securityPolicyName(String securityPolicyName) {
            if (securityPolicyName == null) {
              throw new MissingRequiredPropertyException("GetServerResult", "securityPolicyName");
            }
            this.securityPolicyName = securityPolicyName;
            return this;
        }
        @CustomType.Setter
        public Builder serverId(String serverId) {
            if (serverId == null) {
              throw new MissingRequiredPropertyException("GetServerResult", "serverId");
            }
            this.serverId = serverId;
            return this;
        }
        @CustomType.Setter
        public Builder structuredLogDestinations(List<String> structuredLogDestinations) {
            if (structuredLogDestinations == null) {
              throw new MissingRequiredPropertyException("GetServerResult", "structuredLogDestinations");
            }
            this.structuredLogDestinations = structuredLogDestinations;
            return this;
        }
        public Builder structuredLogDestinations(String... structuredLogDestinations) {
            return structuredLogDestinations(List.of(structuredLogDestinations));
        }
        @CustomType.Setter
        public Builder url(String url) {
            if (url == null) {
              throw new MissingRequiredPropertyException("GetServerResult", "url");
            }
            this.url = url;
            return this;
        }
        public GetServerResult build() {
            final var _resultValue = new GetServerResult();
            _resultValue.arn = arn;
            _resultValue.certificate = certificate;
            _resultValue.domain = domain;
            _resultValue.endpoint = endpoint;
            _resultValue.endpointType = endpointType;
            _resultValue.id = id;
            _resultValue.identityProviderType = identityProviderType;
            _resultValue.invocationRole = invocationRole;
            _resultValue.loggingRole = loggingRole;
            _resultValue.protocols = protocols;
            _resultValue.securityPolicyName = securityPolicyName;
            _resultValue.serverId = serverId;
            _resultValue.structuredLogDestinations = structuredLogDestinations;
            _resultValue.url = url;
            return _resultValue;
        }
    }
}
