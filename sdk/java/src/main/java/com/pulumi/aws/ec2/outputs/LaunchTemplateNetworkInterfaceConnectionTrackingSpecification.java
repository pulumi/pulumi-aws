// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ec2.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class LaunchTemplateNetworkInterfaceConnectionTrackingSpecification {
    /**
     * @return Timeout (in seconds) for idle TCP connections in an established state. Min: 60 seconds. Max: 432000 seconds (5 days). Default: 432000 seconds. Recommended: Less than 432000 seconds.
     * 
     */
    private @Nullable Integer tcpEstablishedTimeout;
    /**
     * @return Timeout (in seconds) for idle UDP flows that have seen traffic only in a single direction or a single request-response transaction. Min: 30 seconds. Max: 60 seconds. Default: 30 seconds.
     * 
     */
    private @Nullable Integer udpStreamTimeout;
    /**
     * @return Timeout (in seconds) for idle UDP flows classified as streams which have seen more than one request-response transaction. Min: 60 seconds. Max: 180 seconds (3 minutes). Default: 180 seconds.
     * 
     */
    private @Nullable Integer udpTimeout;

    private LaunchTemplateNetworkInterfaceConnectionTrackingSpecification() {}
    /**
     * @return Timeout (in seconds) for idle TCP connections in an established state. Min: 60 seconds. Max: 432000 seconds (5 days). Default: 432000 seconds. Recommended: Less than 432000 seconds.
     * 
     */
    public Optional<Integer> tcpEstablishedTimeout() {
        return Optional.ofNullable(this.tcpEstablishedTimeout);
    }
    /**
     * @return Timeout (in seconds) for idle UDP flows that have seen traffic only in a single direction or a single request-response transaction. Min: 30 seconds. Max: 60 seconds. Default: 30 seconds.
     * 
     */
    public Optional<Integer> udpStreamTimeout() {
        return Optional.ofNullable(this.udpStreamTimeout);
    }
    /**
     * @return Timeout (in seconds) for idle UDP flows classified as streams which have seen more than one request-response transaction. Min: 60 seconds. Max: 180 seconds (3 minutes). Default: 180 seconds.
     * 
     */
    public Optional<Integer> udpTimeout() {
        return Optional.ofNullable(this.udpTimeout);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LaunchTemplateNetworkInterfaceConnectionTrackingSpecification defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer tcpEstablishedTimeout;
        private @Nullable Integer udpStreamTimeout;
        private @Nullable Integer udpTimeout;
        public Builder() {}
        public Builder(LaunchTemplateNetworkInterfaceConnectionTrackingSpecification defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.tcpEstablishedTimeout = defaults.tcpEstablishedTimeout;
    	      this.udpStreamTimeout = defaults.udpStreamTimeout;
    	      this.udpTimeout = defaults.udpTimeout;
        }

        @CustomType.Setter
        public Builder tcpEstablishedTimeout(@Nullable Integer tcpEstablishedTimeout) {

            this.tcpEstablishedTimeout = tcpEstablishedTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder udpStreamTimeout(@Nullable Integer udpStreamTimeout) {

            this.udpStreamTimeout = udpStreamTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder udpTimeout(@Nullable Integer udpTimeout) {

            this.udpTimeout = udpTimeout;
            return this;
        }
        public LaunchTemplateNetworkInterfaceConnectionTrackingSpecification build() {
            final var _resultValue = new LaunchTemplateNetworkInterfaceConnectionTrackingSpecification();
            _resultValue.tcpEstablishedTimeout = tcpEstablishedTimeout;
            _resultValue.udpStreamTimeout = udpStreamTimeout;
            _resultValue.udpTimeout = udpTimeout;
            return _resultValue;
        }
    }
}
