// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.paymentcryptography.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class KeyKeyAttributesKeyModesOfUse {
    /**
     * @return Whether an AWS Payment Cryptography key can be used to decrypt data.
     * 
     */
    private @Nullable Boolean decrypt;
    /**
     * @return Whether an AWS Payment Cryptography key can be used to derive new keys.
     * 
     */
    private @Nullable Boolean deriveKey;
    /**
     * @return Whether an AWS Payment Cryptography key can be used to encrypt data.
     * 
     */
    private @Nullable Boolean encrypt;
    /**
     * @return Whether an AWS Payment Cryptography key can be used to generate and verify other card and PIN verification keys.
     * 
     */
    private @Nullable Boolean generate;
    /**
     * @return Whether an AWS Payment Cryptography key has no special restrictions other than the restrictions implied by KeyUsage.
     * 
     */
    private @Nullable Boolean noRestrictions;
    /**
     * @return Whether an AWS Payment Cryptography key can be used for signing.
     * 
     */
    private @Nullable Boolean sign;
    /**
     * @return Whether an AWS Payment Cryptography key can be used to unwrap other keys.
     * 
     */
    private @Nullable Boolean unwrap;
    /**
     * @return Whether an AWS Payment Cryptography key can be used to verify signatures.
     * 
     */
    private @Nullable Boolean verify;
    /**
     * @return Whether an AWS Payment Cryptography key can be used to wrap other keys.
     * 
     */
    private @Nullable Boolean wrap;

    private KeyKeyAttributesKeyModesOfUse() {}
    /**
     * @return Whether an AWS Payment Cryptography key can be used to decrypt data.
     * 
     */
    public Optional<Boolean> decrypt() {
        return Optional.ofNullable(this.decrypt);
    }
    /**
     * @return Whether an AWS Payment Cryptography key can be used to derive new keys.
     * 
     */
    public Optional<Boolean> deriveKey() {
        return Optional.ofNullable(this.deriveKey);
    }
    /**
     * @return Whether an AWS Payment Cryptography key can be used to encrypt data.
     * 
     */
    public Optional<Boolean> encrypt() {
        return Optional.ofNullable(this.encrypt);
    }
    /**
     * @return Whether an AWS Payment Cryptography key can be used to generate and verify other card and PIN verification keys.
     * 
     */
    public Optional<Boolean> generate() {
        return Optional.ofNullable(this.generate);
    }
    /**
     * @return Whether an AWS Payment Cryptography key has no special restrictions other than the restrictions implied by KeyUsage.
     * 
     */
    public Optional<Boolean> noRestrictions() {
        return Optional.ofNullable(this.noRestrictions);
    }
    /**
     * @return Whether an AWS Payment Cryptography key can be used for signing.
     * 
     */
    public Optional<Boolean> sign() {
        return Optional.ofNullable(this.sign);
    }
    /**
     * @return Whether an AWS Payment Cryptography key can be used to unwrap other keys.
     * 
     */
    public Optional<Boolean> unwrap() {
        return Optional.ofNullable(this.unwrap);
    }
    /**
     * @return Whether an AWS Payment Cryptography key can be used to verify signatures.
     * 
     */
    public Optional<Boolean> verify() {
        return Optional.ofNullable(this.verify);
    }
    /**
     * @return Whether an AWS Payment Cryptography key can be used to wrap other keys.
     * 
     */
    public Optional<Boolean> wrap() {
        return Optional.ofNullable(this.wrap);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(KeyKeyAttributesKeyModesOfUse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean decrypt;
        private @Nullable Boolean deriveKey;
        private @Nullable Boolean encrypt;
        private @Nullable Boolean generate;
        private @Nullable Boolean noRestrictions;
        private @Nullable Boolean sign;
        private @Nullable Boolean unwrap;
        private @Nullable Boolean verify;
        private @Nullable Boolean wrap;
        public Builder() {}
        public Builder(KeyKeyAttributesKeyModesOfUse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.decrypt = defaults.decrypt;
    	      this.deriveKey = defaults.deriveKey;
    	      this.encrypt = defaults.encrypt;
    	      this.generate = defaults.generate;
    	      this.noRestrictions = defaults.noRestrictions;
    	      this.sign = defaults.sign;
    	      this.unwrap = defaults.unwrap;
    	      this.verify = defaults.verify;
    	      this.wrap = defaults.wrap;
        }

        @CustomType.Setter
        public Builder decrypt(@Nullable Boolean decrypt) {

            this.decrypt = decrypt;
            return this;
        }
        @CustomType.Setter
        public Builder deriveKey(@Nullable Boolean deriveKey) {

            this.deriveKey = deriveKey;
            return this;
        }
        @CustomType.Setter
        public Builder encrypt(@Nullable Boolean encrypt) {

            this.encrypt = encrypt;
            return this;
        }
        @CustomType.Setter
        public Builder generate(@Nullable Boolean generate) {

            this.generate = generate;
            return this;
        }
        @CustomType.Setter
        public Builder noRestrictions(@Nullable Boolean noRestrictions) {

            this.noRestrictions = noRestrictions;
            return this;
        }
        @CustomType.Setter
        public Builder sign(@Nullable Boolean sign) {

            this.sign = sign;
            return this;
        }
        @CustomType.Setter
        public Builder unwrap(@Nullable Boolean unwrap) {

            this.unwrap = unwrap;
            return this;
        }
        @CustomType.Setter
        public Builder verify(@Nullable Boolean verify) {

            this.verify = verify;
            return this;
        }
        @CustomType.Setter
        public Builder wrap(@Nullable Boolean wrap) {

            this.wrap = wrap;
            return this;
        }
        public KeyKeyAttributesKeyModesOfUse build() {
            final var _resultValue = new KeyKeyAttributesKeyModesOfUse();
            _resultValue.decrypt = decrypt;
            _resultValue.deriveKey = deriveKey;
            _resultValue.encrypt = encrypt;
            _resultValue.generate = generate;
            _resultValue.noRestrictions = noRestrictions;
            _resultValue.sign = sign;
            _resultValue.unwrap = unwrap;
            _resultValue.verify = verify;
            _resultValue.wrap = wrap;
            return _resultValue;
        }
    }
}
