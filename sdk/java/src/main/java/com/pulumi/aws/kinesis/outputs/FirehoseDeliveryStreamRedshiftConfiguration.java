// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.kinesis.outputs;

import com.pulumi.aws.kinesis.outputs.FirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptions;
import com.pulumi.aws.kinesis.outputs.FirehoseDeliveryStreamRedshiftConfigurationProcessingConfiguration;
import com.pulumi.aws.kinesis.outputs.FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfiguration;
import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class FirehoseDeliveryStreamRedshiftConfiguration {
    private @Nullable FirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptions cloudwatchLoggingOptions;
    private String clusterJdbcurl;
    private @Nullable String copyOptions;
    private @Nullable String dataTableColumns;
    private String dataTableName;
    private String password;
    private @Nullable FirehoseDeliveryStreamRedshiftConfigurationProcessingConfiguration processingConfiguration;
    private @Nullable Integer retryDuration;
    private String roleArn;
    private @Nullable FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfiguration s3BackupConfiguration;
    private @Nullable String s3BackupMode;
    private String username;

    private FirehoseDeliveryStreamRedshiftConfiguration() {}
    public Optional<FirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptions> cloudwatchLoggingOptions() {
        return Optional.ofNullable(this.cloudwatchLoggingOptions);
    }
    public String clusterJdbcurl() {
        return this.clusterJdbcurl;
    }
    public Optional<String> copyOptions() {
        return Optional.ofNullable(this.copyOptions);
    }
    public Optional<String> dataTableColumns() {
        return Optional.ofNullable(this.dataTableColumns);
    }
    public String dataTableName() {
        return this.dataTableName;
    }
    public String password() {
        return this.password;
    }
    public Optional<FirehoseDeliveryStreamRedshiftConfigurationProcessingConfiguration> processingConfiguration() {
        return Optional.ofNullable(this.processingConfiguration);
    }
    public Optional<Integer> retryDuration() {
        return Optional.ofNullable(this.retryDuration);
    }
    public String roleArn() {
        return this.roleArn;
    }
    public Optional<FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfiguration> s3BackupConfiguration() {
        return Optional.ofNullable(this.s3BackupConfiguration);
    }
    public Optional<String> s3BackupMode() {
        return Optional.ofNullable(this.s3BackupMode);
    }
    public String username() {
        return this.username;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FirehoseDeliveryStreamRedshiftConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable FirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptions cloudwatchLoggingOptions;
        private String clusterJdbcurl;
        private @Nullable String copyOptions;
        private @Nullable String dataTableColumns;
        private String dataTableName;
        private String password;
        private @Nullable FirehoseDeliveryStreamRedshiftConfigurationProcessingConfiguration processingConfiguration;
        private @Nullable Integer retryDuration;
        private String roleArn;
        private @Nullable FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfiguration s3BackupConfiguration;
        private @Nullable String s3BackupMode;
        private String username;
        public Builder() {}
        public Builder(FirehoseDeliveryStreamRedshiftConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cloudwatchLoggingOptions = defaults.cloudwatchLoggingOptions;
    	      this.clusterJdbcurl = defaults.clusterJdbcurl;
    	      this.copyOptions = defaults.copyOptions;
    	      this.dataTableColumns = defaults.dataTableColumns;
    	      this.dataTableName = defaults.dataTableName;
    	      this.password = defaults.password;
    	      this.processingConfiguration = defaults.processingConfiguration;
    	      this.retryDuration = defaults.retryDuration;
    	      this.roleArn = defaults.roleArn;
    	      this.s3BackupConfiguration = defaults.s3BackupConfiguration;
    	      this.s3BackupMode = defaults.s3BackupMode;
    	      this.username = defaults.username;
        }

        @CustomType.Setter
        public Builder cloudwatchLoggingOptions(@Nullable FirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptions cloudwatchLoggingOptions) {
            this.cloudwatchLoggingOptions = cloudwatchLoggingOptions;
            return this;
        }
        @CustomType.Setter
        public Builder clusterJdbcurl(String clusterJdbcurl) {
            this.clusterJdbcurl = Objects.requireNonNull(clusterJdbcurl);
            return this;
        }
        @CustomType.Setter
        public Builder copyOptions(@Nullable String copyOptions) {
            this.copyOptions = copyOptions;
            return this;
        }
        @CustomType.Setter
        public Builder dataTableColumns(@Nullable String dataTableColumns) {
            this.dataTableColumns = dataTableColumns;
            return this;
        }
        @CustomType.Setter
        public Builder dataTableName(String dataTableName) {
            this.dataTableName = Objects.requireNonNull(dataTableName);
            return this;
        }
        @CustomType.Setter
        public Builder password(String password) {
            this.password = Objects.requireNonNull(password);
            return this;
        }
        @CustomType.Setter
        public Builder processingConfiguration(@Nullable FirehoseDeliveryStreamRedshiftConfigurationProcessingConfiguration processingConfiguration) {
            this.processingConfiguration = processingConfiguration;
            return this;
        }
        @CustomType.Setter
        public Builder retryDuration(@Nullable Integer retryDuration) {
            this.retryDuration = retryDuration;
            return this;
        }
        @CustomType.Setter
        public Builder roleArn(String roleArn) {
            this.roleArn = Objects.requireNonNull(roleArn);
            return this;
        }
        @CustomType.Setter
        public Builder s3BackupConfiguration(@Nullable FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfiguration s3BackupConfiguration) {
            this.s3BackupConfiguration = s3BackupConfiguration;
            return this;
        }
        @CustomType.Setter
        public Builder s3BackupMode(@Nullable String s3BackupMode) {
            this.s3BackupMode = s3BackupMode;
            return this;
        }
        @CustomType.Setter
        public Builder username(String username) {
            this.username = Objects.requireNonNull(username);
            return this;
        }
        public FirehoseDeliveryStreamRedshiftConfiguration build() {
            final var o = new FirehoseDeliveryStreamRedshiftConfiguration();
            o.cloudwatchLoggingOptions = cloudwatchLoggingOptions;
            o.clusterJdbcurl = clusterJdbcurl;
            o.copyOptions = copyOptions;
            o.dataTableColumns = dataTableColumns;
            o.dataTableName = dataTableName;
            o.password = password;
            o.processingConfiguration = processingConfiguration;
            o.retryDuration = retryDuration;
            o.roleArn = roleArn;
            o.s3BackupConfiguration = s3BackupConfiguration;
            o.s3BackupMode = s3BackupMode;
            o.username = username;
            return o;
        }
    }
}
