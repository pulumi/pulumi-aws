// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.connect.inputs;

import com.pulumi.aws.connect.inputs.QuickConnectQuickConnectConfigPhoneConfigArgs;
import com.pulumi.aws.connect.inputs.QuickConnectQuickConnectConfigQueueConfigArgs;
import com.pulumi.aws.connect.inputs.QuickConnectQuickConnectConfigUserConfigArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class QuickConnectQuickConnectConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final QuickConnectQuickConnectConfigArgs Empty = new QuickConnectQuickConnectConfigArgs();

    /**
     * Specifies the phone configuration of the Quick Connect. This is required only if `quick_connect_type` is `PHONE_NUMBER`. The `phone_config` block is documented below.
     * 
     */
    @Import(name="phoneConfigs")
    private @Nullable Output<List<QuickConnectQuickConnectConfigPhoneConfigArgs>> phoneConfigs;

    /**
     * @return Specifies the phone configuration of the Quick Connect. This is required only if `quick_connect_type` is `PHONE_NUMBER`. The `phone_config` block is documented below.
     * 
     */
    public Optional<Output<List<QuickConnectQuickConnectConfigPhoneConfigArgs>>> phoneConfigs() {
        return Optional.ofNullable(this.phoneConfigs);
    }

    /**
     * Specifies the queue configuration of the Quick Connect. This is required only if `quick_connect_type` is `QUEUE`. The `queue_config` block is documented below.
     * 
     */
    @Import(name="queueConfigs")
    private @Nullable Output<List<QuickConnectQuickConnectConfigQueueConfigArgs>> queueConfigs;

    /**
     * @return Specifies the queue configuration of the Quick Connect. This is required only if `quick_connect_type` is `QUEUE`. The `queue_config` block is documented below.
     * 
     */
    public Optional<Output<List<QuickConnectQuickConnectConfigQueueConfigArgs>>> queueConfigs() {
        return Optional.ofNullable(this.queueConfigs);
    }

    /**
     * Specifies the configuration type of the quick connect. valid values are `PHONE_NUMBER`, `QUEUE`, `USER`.
     * 
     */
    @Import(name="quickConnectType", required=true)
    private Output<String> quickConnectType;

    /**
     * @return Specifies the configuration type of the quick connect. valid values are `PHONE_NUMBER`, `QUEUE`, `USER`.
     * 
     */
    public Output<String> quickConnectType() {
        return this.quickConnectType;
    }

    /**
     * Specifies the user configuration of the Quick Connect. This is required only if `quick_connect_type` is `USER`. The `user_config` block is documented below.
     * 
     */
    @Import(name="userConfigs")
    private @Nullable Output<List<QuickConnectQuickConnectConfigUserConfigArgs>> userConfigs;

    /**
     * @return Specifies the user configuration of the Quick Connect. This is required only if `quick_connect_type` is `USER`. The `user_config` block is documented below.
     * 
     */
    public Optional<Output<List<QuickConnectQuickConnectConfigUserConfigArgs>>> userConfigs() {
        return Optional.ofNullable(this.userConfigs);
    }

    private QuickConnectQuickConnectConfigArgs() {}

    private QuickConnectQuickConnectConfigArgs(QuickConnectQuickConnectConfigArgs $) {
        this.phoneConfigs = $.phoneConfigs;
        this.queueConfigs = $.queueConfigs;
        this.quickConnectType = $.quickConnectType;
        this.userConfigs = $.userConfigs;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(QuickConnectQuickConnectConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private QuickConnectQuickConnectConfigArgs $;

        public Builder() {
            $ = new QuickConnectQuickConnectConfigArgs();
        }

        public Builder(QuickConnectQuickConnectConfigArgs defaults) {
            $ = new QuickConnectQuickConnectConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param phoneConfigs Specifies the phone configuration of the Quick Connect. This is required only if `quick_connect_type` is `PHONE_NUMBER`. The `phone_config` block is documented below.
         * 
         * @return builder
         * 
         */
        public Builder phoneConfigs(@Nullable Output<List<QuickConnectQuickConnectConfigPhoneConfigArgs>> phoneConfigs) {
            $.phoneConfigs = phoneConfigs;
            return this;
        }

        /**
         * @param phoneConfigs Specifies the phone configuration of the Quick Connect. This is required only if `quick_connect_type` is `PHONE_NUMBER`. The `phone_config` block is documented below.
         * 
         * @return builder
         * 
         */
        public Builder phoneConfigs(List<QuickConnectQuickConnectConfigPhoneConfigArgs> phoneConfigs) {
            return phoneConfigs(Output.of(phoneConfigs));
        }

        /**
         * @param phoneConfigs Specifies the phone configuration of the Quick Connect. This is required only if `quick_connect_type` is `PHONE_NUMBER`. The `phone_config` block is documented below.
         * 
         * @return builder
         * 
         */
        public Builder phoneConfigs(QuickConnectQuickConnectConfigPhoneConfigArgs... phoneConfigs) {
            return phoneConfigs(List.of(phoneConfigs));
        }

        /**
         * @param queueConfigs Specifies the queue configuration of the Quick Connect. This is required only if `quick_connect_type` is `QUEUE`. The `queue_config` block is documented below.
         * 
         * @return builder
         * 
         */
        public Builder queueConfigs(@Nullable Output<List<QuickConnectQuickConnectConfigQueueConfigArgs>> queueConfigs) {
            $.queueConfigs = queueConfigs;
            return this;
        }

        /**
         * @param queueConfigs Specifies the queue configuration of the Quick Connect. This is required only if `quick_connect_type` is `QUEUE`. The `queue_config` block is documented below.
         * 
         * @return builder
         * 
         */
        public Builder queueConfigs(List<QuickConnectQuickConnectConfigQueueConfigArgs> queueConfigs) {
            return queueConfigs(Output.of(queueConfigs));
        }

        /**
         * @param queueConfigs Specifies the queue configuration of the Quick Connect. This is required only if `quick_connect_type` is `QUEUE`. The `queue_config` block is documented below.
         * 
         * @return builder
         * 
         */
        public Builder queueConfigs(QuickConnectQuickConnectConfigQueueConfigArgs... queueConfigs) {
            return queueConfigs(List.of(queueConfigs));
        }

        /**
         * @param quickConnectType Specifies the configuration type of the quick connect. valid values are `PHONE_NUMBER`, `QUEUE`, `USER`.
         * 
         * @return builder
         * 
         */
        public Builder quickConnectType(Output<String> quickConnectType) {
            $.quickConnectType = quickConnectType;
            return this;
        }

        /**
         * @param quickConnectType Specifies the configuration type of the quick connect. valid values are `PHONE_NUMBER`, `QUEUE`, `USER`.
         * 
         * @return builder
         * 
         */
        public Builder quickConnectType(String quickConnectType) {
            return quickConnectType(Output.of(quickConnectType));
        }

        /**
         * @param userConfigs Specifies the user configuration of the Quick Connect. This is required only if `quick_connect_type` is `USER`. The `user_config` block is documented below.
         * 
         * @return builder
         * 
         */
        public Builder userConfigs(@Nullable Output<List<QuickConnectQuickConnectConfigUserConfigArgs>> userConfigs) {
            $.userConfigs = userConfigs;
            return this;
        }

        /**
         * @param userConfigs Specifies the user configuration of the Quick Connect. This is required only if `quick_connect_type` is `USER`. The `user_config` block is documented below.
         * 
         * @return builder
         * 
         */
        public Builder userConfigs(List<QuickConnectQuickConnectConfigUserConfigArgs> userConfigs) {
            return userConfigs(Output.of(userConfigs));
        }

        /**
         * @param userConfigs Specifies the user configuration of the Quick Connect. This is required only if `quick_connect_type` is `USER`. The `user_config` block is documented below.
         * 
         * @return builder
         * 
         */
        public Builder userConfigs(QuickConnectQuickConnectConfigUserConfigArgs... userConfigs) {
            return userConfigs(List.of(userConfigs));
        }

        public QuickConnectQuickConnectConfigArgs build() {
            if ($.quickConnectType == null) {
                throw new MissingRequiredPropertyException("QuickConnectQuickConnectConfigArgs", "quickConnectType");
            }
            return $;
        }
    }

}
