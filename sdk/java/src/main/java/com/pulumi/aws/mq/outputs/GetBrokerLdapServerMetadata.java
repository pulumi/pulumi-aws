// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.mq.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetBrokerLdapServerMetadata {
    /**
     * @return List of a fully qualified domain name of the LDAP server and an optional failover server.
     * 
     */
    private List<String> hosts;
    /**
     * @return Fully qualified name of the directory to search for a user&#39;s groups.
     * 
     */
    private String roleBase;
    /**
     * @return LDAP attribute that identifies the group name attribute in the object returned from the group membership query.
     * 
     */
    private String roleName;
    /**
     * @return Search criteria for groups.
     * 
     */
    private String roleSearchMatching;
    /**
     * @return Whether the directory search scope is the entire sub-tree.
     * 
     */
    private Boolean roleSearchSubtree;
    /**
     * @return Service account password.
     * 
     */
    private String serviceAccountPassword;
    /**
     * @return Service account username.
     * 
     */
    private String serviceAccountUsername;
    /**
     * @return Fully qualified name of the directory where you want to search for users.
     * 
     */
    private String userBase;
    /**
     * @return Name of the LDAP attribute for the user group membership.
     * 
     */
    private String userRoleName;
    /**
     * @return Search criteria for users.
     * 
     */
    private String userSearchMatching;
    /**
     * @return Whether the directory search scope is the entire sub-tree.
     * 
     */
    private Boolean userSearchSubtree;

    private GetBrokerLdapServerMetadata() {}
    /**
     * @return List of a fully qualified domain name of the LDAP server and an optional failover server.
     * 
     */
    public List<String> hosts() {
        return this.hosts;
    }
    /**
     * @return Fully qualified name of the directory to search for a user&#39;s groups.
     * 
     */
    public String roleBase() {
        return this.roleBase;
    }
    /**
     * @return LDAP attribute that identifies the group name attribute in the object returned from the group membership query.
     * 
     */
    public String roleName() {
        return this.roleName;
    }
    /**
     * @return Search criteria for groups.
     * 
     */
    public String roleSearchMatching() {
        return this.roleSearchMatching;
    }
    /**
     * @return Whether the directory search scope is the entire sub-tree.
     * 
     */
    public Boolean roleSearchSubtree() {
        return this.roleSearchSubtree;
    }
    /**
     * @return Service account password.
     * 
     */
    public String serviceAccountPassword() {
        return this.serviceAccountPassword;
    }
    /**
     * @return Service account username.
     * 
     */
    public String serviceAccountUsername() {
        return this.serviceAccountUsername;
    }
    /**
     * @return Fully qualified name of the directory where you want to search for users.
     * 
     */
    public String userBase() {
        return this.userBase;
    }
    /**
     * @return Name of the LDAP attribute for the user group membership.
     * 
     */
    public String userRoleName() {
        return this.userRoleName;
    }
    /**
     * @return Search criteria for users.
     * 
     */
    public String userSearchMatching() {
        return this.userSearchMatching;
    }
    /**
     * @return Whether the directory search scope is the entire sub-tree.
     * 
     */
    public Boolean userSearchSubtree() {
        return this.userSearchSubtree;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBrokerLdapServerMetadata defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> hosts;
        private String roleBase;
        private String roleName;
        private String roleSearchMatching;
        private Boolean roleSearchSubtree;
        private String serviceAccountPassword;
        private String serviceAccountUsername;
        private String userBase;
        private String userRoleName;
        private String userSearchMatching;
        private Boolean userSearchSubtree;
        public Builder() {}
        public Builder(GetBrokerLdapServerMetadata defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.hosts = defaults.hosts;
    	      this.roleBase = defaults.roleBase;
    	      this.roleName = defaults.roleName;
    	      this.roleSearchMatching = defaults.roleSearchMatching;
    	      this.roleSearchSubtree = defaults.roleSearchSubtree;
    	      this.serviceAccountPassword = defaults.serviceAccountPassword;
    	      this.serviceAccountUsername = defaults.serviceAccountUsername;
    	      this.userBase = defaults.userBase;
    	      this.userRoleName = defaults.userRoleName;
    	      this.userSearchMatching = defaults.userSearchMatching;
    	      this.userSearchSubtree = defaults.userSearchSubtree;
        }

        @CustomType.Setter
        public Builder hosts(List<String> hosts) {
            if (hosts == null) {
              throw new MissingRequiredPropertyException("GetBrokerLdapServerMetadata", "hosts");
            }
            this.hosts = hosts;
            return this;
        }
        public Builder hosts(String... hosts) {
            return hosts(List.of(hosts));
        }
        @CustomType.Setter
        public Builder roleBase(String roleBase) {
            if (roleBase == null) {
              throw new MissingRequiredPropertyException("GetBrokerLdapServerMetadata", "roleBase");
            }
            this.roleBase = roleBase;
            return this;
        }
        @CustomType.Setter
        public Builder roleName(String roleName) {
            if (roleName == null) {
              throw new MissingRequiredPropertyException("GetBrokerLdapServerMetadata", "roleName");
            }
            this.roleName = roleName;
            return this;
        }
        @CustomType.Setter
        public Builder roleSearchMatching(String roleSearchMatching) {
            if (roleSearchMatching == null) {
              throw new MissingRequiredPropertyException("GetBrokerLdapServerMetadata", "roleSearchMatching");
            }
            this.roleSearchMatching = roleSearchMatching;
            return this;
        }
        @CustomType.Setter
        public Builder roleSearchSubtree(Boolean roleSearchSubtree) {
            if (roleSearchSubtree == null) {
              throw new MissingRequiredPropertyException("GetBrokerLdapServerMetadata", "roleSearchSubtree");
            }
            this.roleSearchSubtree = roleSearchSubtree;
            return this;
        }
        @CustomType.Setter
        public Builder serviceAccountPassword(String serviceAccountPassword) {
            if (serviceAccountPassword == null) {
              throw new MissingRequiredPropertyException("GetBrokerLdapServerMetadata", "serviceAccountPassword");
            }
            this.serviceAccountPassword = serviceAccountPassword;
            return this;
        }
        @CustomType.Setter
        public Builder serviceAccountUsername(String serviceAccountUsername) {
            if (serviceAccountUsername == null) {
              throw new MissingRequiredPropertyException("GetBrokerLdapServerMetadata", "serviceAccountUsername");
            }
            this.serviceAccountUsername = serviceAccountUsername;
            return this;
        }
        @CustomType.Setter
        public Builder userBase(String userBase) {
            if (userBase == null) {
              throw new MissingRequiredPropertyException("GetBrokerLdapServerMetadata", "userBase");
            }
            this.userBase = userBase;
            return this;
        }
        @CustomType.Setter
        public Builder userRoleName(String userRoleName) {
            if (userRoleName == null) {
              throw new MissingRequiredPropertyException("GetBrokerLdapServerMetadata", "userRoleName");
            }
            this.userRoleName = userRoleName;
            return this;
        }
        @CustomType.Setter
        public Builder userSearchMatching(String userSearchMatching) {
            if (userSearchMatching == null) {
              throw new MissingRequiredPropertyException("GetBrokerLdapServerMetadata", "userSearchMatching");
            }
            this.userSearchMatching = userSearchMatching;
            return this;
        }
        @CustomType.Setter
        public Builder userSearchSubtree(Boolean userSearchSubtree) {
            if (userSearchSubtree == null) {
              throw new MissingRequiredPropertyException("GetBrokerLdapServerMetadata", "userSearchSubtree");
            }
            this.userSearchSubtree = userSearchSubtree;
            return this;
        }
        public GetBrokerLdapServerMetadata build() {
            final var _resultValue = new GetBrokerLdapServerMetadata();
            _resultValue.hosts = hosts;
            _resultValue.roleBase = roleBase;
            _resultValue.roleName = roleName;
            _resultValue.roleSearchMatching = roleSearchMatching;
            _resultValue.roleSearchSubtree = roleSearchSubtree;
            _resultValue.serviceAccountPassword = serviceAccountPassword;
            _resultValue.serviceAccountUsername = serviceAccountUsername;
            _resultValue.userBase = userBase;
            _resultValue.userRoleName = userRoleName;
            _resultValue.userSearchMatching = userSearchMatching;
            _resultValue.userSearchSubtree = userSearchSubtree;
            return _resultValue;
        }
    }
}
