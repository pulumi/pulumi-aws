// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.outputs;

import com.pulumi.aws.quicksight.outputs.Column;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class TimeRangeFilter {
    private Column column;
    private String rangeMaximum;
    private String rangeMinimum;
    private String timeGranularity;

    private TimeRangeFilter() {}
    public Column column() {
        return this.column;
    }
    public String rangeMaximum() {
        return this.rangeMaximum;
    }
    public String rangeMinimum() {
        return this.rangeMinimum;
    }
    public String timeGranularity() {
        return this.timeGranularity;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TimeRangeFilter defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Column column;
        private String rangeMaximum;
        private String rangeMinimum;
        private String timeGranularity;
        public Builder() {}
        public Builder(TimeRangeFilter defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.column = defaults.column;
    	      this.rangeMaximum = defaults.rangeMaximum;
    	      this.rangeMinimum = defaults.rangeMinimum;
    	      this.timeGranularity = defaults.timeGranularity;
        }

        @CustomType.Setter
        public Builder column(Column column) {
            if (column == null) {
              throw new MissingRequiredPropertyException("TimeRangeFilter", "column");
            }
            this.column = column;
            return this;
        }
        @CustomType.Setter
        public Builder rangeMaximum(String rangeMaximum) {
            if (rangeMaximum == null) {
              throw new MissingRequiredPropertyException("TimeRangeFilter", "rangeMaximum");
            }
            this.rangeMaximum = rangeMaximum;
            return this;
        }
        @CustomType.Setter
        public Builder rangeMinimum(String rangeMinimum) {
            if (rangeMinimum == null) {
              throw new MissingRequiredPropertyException("TimeRangeFilter", "rangeMinimum");
            }
            this.rangeMinimum = rangeMinimum;
            return this;
        }
        @CustomType.Setter
        public Builder timeGranularity(String timeGranularity) {
            if (timeGranularity == null) {
              throw new MissingRequiredPropertyException("TimeRangeFilter", "timeGranularity");
            }
            this.timeGranularity = timeGranularity;
            return this;
        }
        public TimeRangeFilter build() {
            final var _resultValue = new TimeRangeFilter();
            _resultValue.column = column;
            _resultValue.rangeMaximum = rangeMaximum;
            _resultValue.rangeMinimum = rangeMinimum;
            _resultValue.timeGranularity = timeGranularity;
            return _resultValue;
        }
    }
}
