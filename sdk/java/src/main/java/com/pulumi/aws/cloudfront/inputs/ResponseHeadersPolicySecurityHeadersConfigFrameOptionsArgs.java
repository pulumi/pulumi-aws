// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.cloudfront.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;


public final class ResponseHeadersPolicySecurityHeadersConfigFrameOptionsArgs extends com.pulumi.resources.ResourceArgs {

    public static final ResponseHeadersPolicySecurityHeadersConfigFrameOptionsArgs Empty = new ResponseHeadersPolicySecurityHeadersConfigFrameOptionsArgs();

    /**
     * The value of the `X-Frame-Options` HTTP response header. Valid values: `DENY` | `SAMEORIGIN`
     * 
     */
    @Import(name="frameOption", required=true)
    private Output<String> frameOption;

    /**
     * @return The value of the `X-Frame-Options` HTTP response header. Valid values: `DENY` | `SAMEORIGIN`
     * 
     */
    public Output<String> frameOption() {
        return this.frameOption;
    }

    /**
     * Whether CloudFront overrides the `X-Frame-Options` HTTP response header received from the origin with the one specified in this response headers policy.
     * 
     */
    @Import(name="override", required=true)
    private Output<Boolean> override;

    /**
     * @return Whether CloudFront overrides the `X-Frame-Options` HTTP response header received from the origin with the one specified in this response headers policy.
     * 
     */
    public Output<Boolean> override() {
        return this.override;
    }

    private ResponseHeadersPolicySecurityHeadersConfigFrameOptionsArgs() {}

    private ResponseHeadersPolicySecurityHeadersConfigFrameOptionsArgs(ResponseHeadersPolicySecurityHeadersConfigFrameOptionsArgs $) {
        this.frameOption = $.frameOption;
        this.override = $.override;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ResponseHeadersPolicySecurityHeadersConfigFrameOptionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ResponseHeadersPolicySecurityHeadersConfigFrameOptionsArgs $;

        public Builder() {
            $ = new ResponseHeadersPolicySecurityHeadersConfigFrameOptionsArgs();
        }

        public Builder(ResponseHeadersPolicySecurityHeadersConfigFrameOptionsArgs defaults) {
            $ = new ResponseHeadersPolicySecurityHeadersConfigFrameOptionsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param frameOption The value of the `X-Frame-Options` HTTP response header. Valid values: `DENY` | `SAMEORIGIN`
         * 
         * @return builder
         * 
         */
        public Builder frameOption(Output<String> frameOption) {
            $.frameOption = frameOption;
            return this;
        }

        /**
         * @param frameOption The value of the `X-Frame-Options` HTTP response header. Valid values: `DENY` | `SAMEORIGIN`
         * 
         * @return builder
         * 
         */
        public Builder frameOption(String frameOption) {
            return frameOption(Output.of(frameOption));
        }

        /**
         * @param override Whether CloudFront overrides the `X-Frame-Options` HTTP response header received from the origin with the one specified in this response headers policy.
         * 
         * @return builder
         * 
         */
        public Builder override(Output<Boolean> override) {
            $.override = override;
            return this;
        }

        /**
         * @param override Whether CloudFront overrides the `X-Frame-Options` HTTP response header received from the origin with the one specified in this response headers policy.
         * 
         * @return builder
         * 
         */
        public Builder override(Boolean override) {
            return override(Output.of(override));
        }

        public ResponseHeadersPolicySecurityHeadersConfigFrameOptionsArgs build() {
            $.frameOption = Objects.requireNonNull($.frameOption, "expected parameter 'frameOption' to be non-null");
            $.override = Objects.requireNonNull($.override, "expected parameter 'override' to be non-null");
            return $;
        }
    }

}
