// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.eks;

import com.pulumi.aws.eks.inputs.AccessPolicyAssociationAccessScopeArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class AccessPolicyAssociationArgs extends com.pulumi.resources.ResourceArgs {

    public static final AccessPolicyAssociationArgs Empty = new AccessPolicyAssociationArgs();

    /**
     * The configuration block to determine the scope of the access. See `access_scope` Block below.
     * 
     */
    @Import(name="accessScope", required=true)
    private Output<AccessPolicyAssociationAccessScopeArgs> accessScope;

    /**
     * @return The configuration block to determine the scope of the access. See `access_scope` Block below.
     * 
     */
    public Output<AccessPolicyAssociationAccessScopeArgs> accessScope() {
        return this.accessScope;
    }

    /**
     * Name of the EKS Cluster.
     * 
     */
    @Import(name="clusterName", required=true)
    private Output<String> clusterName;

    /**
     * @return Name of the EKS Cluster.
     * 
     */
    public Output<String> clusterName() {
        return this.clusterName;
    }

    /**
     * The ARN of the access policy that you&#39;re associating.
     * 
     */
    @Import(name="policyArn", required=true)
    private Output<String> policyArn;

    /**
     * @return The ARN of the access policy that you&#39;re associating.
     * 
     */
    public Output<String> policyArn() {
        return this.policyArn;
    }

    /**
     * The IAM Principal ARN which requires Authentication access to the EKS cluster.
     * 
     */
    @Import(name="principalArn", required=true)
    private Output<String> principalArn;

    /**
     * @return The IAM Principal ARN which requires Authentication access to the EKS cluster.
     * 
     */
    public Output<String> principalArn() {
        return this.principalArn;
    }

    private AccessPolicyAssociationArgs() {}

    private AccessPolicyAssociationArgs(AccessPolicyAssociationArgs $) {
        this.accessScope = $.accessScope;
        this.clusterName = $.clusterName;
        this.policyArn = $.policyArn;
        this.principalArn = $.principalArn;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AccessPolicyAssociationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AccessPolicyAssociationArgs $;

        public Builder() {
            $ = new AccessPolicyAssociationArgs();
        }

        public Builder(AccessPolicyAssociationArgs defaults) {
            $ = new AccessPolicyAssociationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessScope The configuration block to determine the scope of the access. See `access_scope` Block below.
         * 
         * @return builder
         * 
         */
        public Builder accessScope(Output<AccessPolicyAssociationAccessScopeArgs> accessScope) {
            $.accessScope = accessScope;
            return this;
        }

        /**
         * @param accessScope The configuration block to determine the scope of the access. See `access_scope` Block below.
         * 
         * @return builder
         * 
         */
        public Builder accessScope(AccessPolicyAssociationAccessScopeArgs accessScope) {
            return accessScope(Output.of(accessScope));
        }

        /**
         * @param clusterName Name of the EKS Cluster.
         * 
         * @return builder
         * 
         */
        public Builder clusterName(Output<String> clusterName) {
            $.clusterName = clusterName;
            return this;
        }

        /**
         * @param clusterName Name of the EKS Cluster.
         * 
         * @return builder
         * 
         */
        public Builder clusterName(String clusterName) {
            return clusterName(Output.of(clusterName));
        }

        /**
         * @param policyArn The ARN of the access policy that you&#39;re associating.
         * 
         * @return builder
         * 
         */
        public Builder policyArn(Output<String> policyArn) {
            $.policyArn = policyArn;
            return this;
        }

        /**
         * @param policyArn The ARN of the access policy that you&#39;re associating.
         * 
         * @return builder
         * 
         */
        public Builder policyArn(String policyArn) {
            return policyArn(Output.of(policyArn));
        }

        /**
         * @param principalArn The IAM Principal ARN which requires Authentication access to the EKS cluster.
         * 
         * @return builder
         * 
         */
        public Builder principalArn(Output<String> principalArn) {
            $.principalArn = principalArn;
            return this;
        }

        /**
         * @param principalArn The IAM Principal ARN which requires Authentication access to the EKS cluster.
         * 
         * @return builder
         * 
         */
        public Builder principalArn(String principalArn) {
            return principalArn(Output.of(principalArn));
        }

        public AccessPolicyAssociationArgs build() {
            if ($.accessScope == null) {
                throw new MissingRequiredPropertyException("AccessPolicyAssociationArgs", "accessScope");
            }
            if ($.clusterName == null) {
                throw new MissingRequiredPropertyException("AccessPolicyAssociationArgs", "clusterName");
            }
            if ($.policyArn == null) {
                throw new MissingRequiredPropertyException("AccessPolicyAssociationArgs", "policyArn");
            }
            if ($.principalArn == null) {
                throw new MissingRequiredPropertyException("AccessPolicyAssociationArgs", "principalArn");
            }
            return $;
        }
    }

}
