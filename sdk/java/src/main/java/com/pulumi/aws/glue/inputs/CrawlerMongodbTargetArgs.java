// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.glue.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CrawlerMongodbTargetArgs extends com.pulumi.resources.ResourceArgs {

    public static final CrawlerMongodbTargetArgs Empty = new CrawlerMongodbTargetArgs();

    /**
     * The name of the connection to use to connect to the Amazon DocumentDB or MongoDB target.
     * 
     */
    @Import(name="connectionName", required=true)
    private Output<String> connectionName;

    /**
     * @return The name of the connection to use to connect to the Amazon DocumentDB or MongoDB target.
     * 
     */
    public Output<String> connectionName() {
        return this.connectionName;
    }

    /**
     * The path of the Amazon DocumentDB or MongoDB target (database/collection).
     * 
     */
    @Import(name="path", required=true)
    private Output<String> path;

    /**
     * @return The path of the Amazon DocumentDB or MongoDB target (database/collection).
     * 
     */
    public Output<String> path() {
        return this.path;
    }

    /**
     * Indicates whether to scan all the records, or to sample rows from the table. Scanning all the records can take a long time when the table is not a high throughput table. Default value is `true`.
     * 
     */
    @Import(name="scanAll")
    private @Nullable Output<Boolean> scanAll;

    /**
     * @return Indicates whether to scan all the records, or to sample rows from the table. Scanning all the records can take a long time when the table is not a high throughput table. Default value is `true`.
     * 
     */
    public Optional<Output<Boolean>> scanAll() {
        return Optional.ofNullable(this.scanAll);
    }

    private CrawlerMongodbTargetArgs() {}

    private CrawlerMongodbTargetArgs(CrawlerMongodbTargetArgs $) {
        this.connectionName = $.connectionName;
        this.path = $.path;
        this.scanAll = $.scanAll;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CrawlerMongodbTargetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CrawlerMongodbTargetArgs $;

        public Builder() {
            $ = new CrawlerMongodbTargetArgs();
        }

        public Builder(CrawlerMongodbTargetArgs defaults) {
            $ = new CrawlerMongodbTargetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param connectionName The name of the connection to use to connect to the Amazon DocumentDB or MongoDB target.
         * 
         * @return builder
         * 
         */
        public Builder connectionName(Output<String> connectionName) {
            $.connectionName = connectionName;
            return this;
        }

        /**
         * @param connectionName The name of the connection to use to connect to the Amazon DocumentDB or MongoDB target.
         * 
         * @return builder
         * 
         */
        public Builder connectionName(String connectionName) {
            return connectionName(Output.of(connectionName));
        }

        /**
         * @param path The path of the Amazon DocumentDB or MongoDB target (database/collection).
         * 
         * @return builder
         * 
         */
        public Builder path(Output<String> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path The path of the Amazon DocumentDB or MongoDB target (database/collection).
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            return path(Output.of(path));
        }

        /**
         * @param scanAll Indicates whether to scan all the records, or to sample rows from the table. Scanning all the records can take a long time when the table is not a high throughput table. Default value is `true`.
         * 
         * @return builder
         * 
         */
        public Builder scanAll(@Nullable Output<Boolean> scanAll) {
            $.scanAll = scanAll;
            return this;
        }

        /**
         * @param scanAll Indicates whether to scan all the records, or to sample rows from the table. Scanning all the records can take a long time when the table is not a high throughput table. Default value is `true`.
         * 
         * @return builder
         * 
         */
        public Builder scanAll(Boolean scanAll) {
            return scanAll(Output.of(scanAll));
        }

        public CrawlerMongodbTargetArgs build() {
            $.connectionName = Objects.requireNonNull($.connectionName, "expected parameter 'connectionName' to be non-null");
            $.path = Objects.requireNonNull($.path, "expected parameter 'path' to be non-null");
            return $;
        }
    }

}
