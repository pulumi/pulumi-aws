// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.medialive.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.util.Objects;

@CustomType
public final class ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangle {
    /**
     * @return See the description in left\_offset. For height, specify the entire height of the rectangle as a percentage of the underlying frame height. For example, &#34;80&#34; means the rectangle height is 80% of the underlying frame height. The top\_offset and rectangle\_height must add up to 100% or less. This field corresponds to tts:extent - Y in the TTML standard.
     * 
     */
    private Double height;
    /**
     * @return Applies only if you plan to convert these source captions to EBU-TT-D or TTML in an output. (Make sure to leave the default if you don’t have either of these formats in the output.) You can define a display rectangle for the captions that is smaller than the underlying video frame. You define the rectangle by specifying the position of the left edge, top edge, bottom edge, and right edge of the rectangle, all within the underlying video frame. The units for the measurements are percentages. If you specify a value for one of these fields, you must specify a value for all of them. For leftOffset, specify the position of the left edge of the rectangle, as a percentage of the underlying frame width, and relative to the left edge of the frame. For example, &#34;10&#34; means the measurement is 10% of the underlying frame width. The rectangle left edge starts at that position from the left edge of the frame. This field corresponds to tts:origin - X in the TTML standard.
     * 
     */
    private Double leftOffset;
    /**
     * @return See the description in left\_offset. For top\_offset, specify the position of the top edge of the rectangle, as a percentage of the underlying frame height, and relative to the top edge of the frame. For example, &#34;10&#34; means the measurement is 10% of the underlying frame height. The rectangle top edge starts at that position from the top edge of the frame. This field corresponds to tts:origin - Y in the TTML standard.
     * 
     */
    private Double topOffset;
    /**
     * @return See the description in left\_offset. For width, specify the entire width of the rectangle as a percentage of the underlying frame width. For example, &#34;80&#34; means the rectangle width is 80% of the underlying frame width. The left\_offset and rectangle\_width must add up to 100% or less. This field corresponds to tts:extent - X in the TTML standard.
     * 
     */
    private Double width;

    private ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangle() {}
    /**
     * @return See the description in left\_offset. For height, specify the entire height of the rectangle as a percentage of the underlying frame height. For example, &#34;80&#34; means the rectangle height is 80% of the underlying frame height. The top\_offset and rectangle\_height must add up to 100% or less. This field corresponds to tts:extent - Y in the TTML standard.
     * 
     */
    public Double height() {
        return this.height;
    }
    /**
     * @return Applies only if you plan to convert these source captions to EBU-TT-D or TTML in an output. (Make sure to leave the default if you don’t have either of these formats in the output.) You can define a display rectangle for the captions that is smaller than the underlying video frame. You define the rectangle by specifying the position of the left edge, top edge, bottom edge, and right edge of the rectangle, all within the underlying video frame. The units for the measurements are percentages. If you specify a value for one of these fields, you must specify a value for all of them. For leftOffset, specify the position of the left edge of the rectangle, as a percentage of the underlying frame width, and relative to the left edge of the frame. For example, &#34;10&#34; means the measurement is 10% of the underlying frame width. The rectangle left edge starts at that position from the left edge of the frame. This field corresponds to tts:origin - X in the TTML standard.
     * 
     */
    public Double leftOffset() {
        return this.leftOffset;
    }
    /**
     * @return See the description in left\_offset. For top\_offset, specify the position of the top edge of the rectangle, as a percentage of the underlying frame height, and relative to the top edge of the frame. For example, &#34;10&#34; means the measurement is 10% of the underlying frame height. The rectangle top edge starts at that position from the top edge of the frame. This field corresponds to tts:origin - Y in the TTML standard.
     * 
     */
    public Double topOffset() {
        return this.topOffset;
    }
    /**
     * @return See the description in left\_offset. For width, specify the entire width of the rectangle as a percentage of the underlying frame width. For example, &#34;80&#34; means the rectangle width is 80% of the underlying frame width. The left\_offset and rectangle\_width must add up to 100% or less. This field corresponds to tts:extent - X in the TTML standard.
     * 
     */
    public Double width() {
        return this.width;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangle defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Double height;
        private Double leftOffset;
        private Double topOffset;
        private Double width;
        public Builder() {}
        public Builder(ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangle defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.height = defaults.height;
    	      this.leftOffset = defaults.leftOffset;
    	      this.topOffset = defaults.topOffset;
    	      this.width = defaults.width;
        }

        @CustomType.Setter
        public Builder height(Double height) {
            this.height = Objects.requireNonNull(height);
            return this;
        }
        @CustomType.Setter
        public Builder leftOffset(Double leftOffset) {
            this.leftOffset = Objects.requireNonNull(leftOffset);
            return this;
        }
        @CustomType.Setter
        public Builder topOffset(Double topOffset) {
            this.topOffset = Objects.requireNonNull(topOffset);
            return this;
        }
        @CustomType.Setter
        public Builder width(Double width) {
            this.width = Objects.requireNonNull(width);
            return this;
        }
        public ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangle build() {
            final var _resultValue = new ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangle();
            _resultValue.height = height;
            _resultValue.leftOffset = leftOffset;
            _resultValue.topOffset = topOffset;
            _resultValue.width = width;
            return _resultValue;
        }
    }
}
