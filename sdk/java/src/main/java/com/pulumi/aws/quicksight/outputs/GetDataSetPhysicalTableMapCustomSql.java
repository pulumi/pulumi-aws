// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.outputs;

import com.pulumi.aws.quicksight.outputs.GetDataSetPhysicalTableMapCustomSqlColumn;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetDataSetPhysicalTableMapCustomSql {
    private List<GetDataSetPhysicalTableMapCustomSqlColumn> columns;
    private String dataSourceArn;
    private String name;
    private String sqlQuery;

    private GetDataSetPhysicalTableMapCustomSql() {}
    public List<GetDataSetPhysicalTableMapCustomSqlColumn> columns() {
        return this.columns;
    }
    public String dataSourceArn() {
        return this.dataSourceArn;
    }
    public String name() {
        return this.name;
    }
    public String sqlQuery() {
        return this.sqlQuery;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDataSetPhysicalTableMapCustomSql defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetDataSetPhysicalTableMapCustomSqlColumn> columns;
        private String dataSourceArn;
        private String name;
        private String sqlQuery;
        public Builder() {}
        public Builder(GetDataSetPhysicalTableMapCustomSql defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.columns = defaults.columns;
    	      this.dataSourceArn = defaults.dataSourceArn;
    	      this.name = defaults.name;
    	      this.sqlQuery = defaults.sqlQuery;
        }

        @CustomType.Setter
        public Builder columns(List<GetDataSetPhysicalTableMapCustomSqlColumn> columns) {
            if (columns == null) {
              throw new MissingRequiredPropertyException("GetDataSetPhysicalTableMapCustomSql", "columns");
            }
            this.columns = columns;
            return this;
        }
        public Builder columns(GetDataSetPhysicalTableMapCustomSqlColumn... columns) {
            return columns(List.of(columns));
        }
        @CustomType.Setter
        public Builder dataSourceArn(String dataSourceArn) {
            if (dataSourceArn == null) {
              throw new MissingRequiredPropertyException("GetDataSetPhysicalTableMapCustomSql", "dataSourceArn");
            }
            this.dataSourceArn = dataSourceArn;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetDataSetPhysicalTableMapCustomSql", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder sqlQuery(String sqlQuery) {
            if (sqlQuery == null) {
              throw new MissingRequiredPropertyException("GetDataSetPhysicalTableMapCustomSql", "sqlQuery");
            }
            this.sqlQuery = sqlQuery;
            return this;
        }
        public GetDataSetPhysicalTableMapCustomSql build() {
            final var _resultValue = new GetDataSetPhysicalTableMapCustomSql();
            _resultValue.columns = columns;
            _resultValue.dataSourceArn = dataSourceArn;
            _resultValue.name = name;
            _resultValue.sqlQuery = sqlQuery;
            return _resultValue;
        }
    }
}
