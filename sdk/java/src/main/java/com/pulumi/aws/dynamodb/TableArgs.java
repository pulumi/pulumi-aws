// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.dynamodb;

import com.pulumi.aws.dynamodb.inputs.TableAttributeArgs;
import com.pulumi.aws.dynamodb.inputs.TableGlobalSecondaryIndexArgs;
import com.pulumi.aws.dynamodb.inputs.TableLocalSecondaryIndexArgs;
import com.pulumi.aws.dynamodb.inputs.TablePointInTimeRecoveryArgs;
import com.pulumi.aws.dynamodb.inputs.TableReplicaArgs;
import com.pulumi.aws.dynamodb.inputs.TableServerSideEncryptionArgs;
import com.pulumi.aws.dynamodb.inputs.TableTtlArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TableArgs extends com.pulumi.resources.ResourceArgs {

    public static final TableArgs Empty = new TableArgs();

    @Import(name="attributes")
    private @Nullable Output<List<TableAttributeArgs>> attributes;

    public Optional<Output<List<TableAttributeArgs>>> attributes() {
        return Optional.ofNullable(this.attributes);
    }

    @Import(name="billingMode")
    private @Nullable Output<String> billingMode;

    public Optional<Output<String>> billingMode() {
        return Optional.ofNullable(this.billingMode);
    }

    @Import(name="globalSecondaryIndexes")
    private @Nullable Output<List<TableGlobalSecondaryIndexArgs>> globalSecondaryIndexes;

    public Optional<Output<List<TableGlobalSecondaryIndexArgs>>> globalSecondaryIndexes() {
        return Optional.ofNullable(this.globalSecondaryIndexes);
    }

    @Import(name="hashKey")
    private @Nullable Output<String> hashKey;

    public Optional<Output<String>> hashKey() {
        return Optional.ofNullable(this.hashKey);
    }

    @Import(name="localSecondaryIndexes")
    private @Nullable Output<List<TableLocalSecondaryIndexArgs>> localSecondaryIndexes;

    public Optional<Output<List<TableLocalSecondaryIndexArgs>>> localSecondaryIndexes() {
        return Optional.ofNullable(this.localSecondaryIndexes);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="pointInTimeRecovery")
    private @Nullable Output<TablePointInTimeRecoveryArgs> pointInTimeRecovery;

    public Optional<Output<TablePointInTimeRecoveryArgs>> pointInTimeRecovery() {
        return Optional.ofNullable(this.pointInTimeRecovery);
    }

    @Import(name="rangeKey")
    private @Nullable Output<String> rangeKey;

    public Optional<Output<String>> rangeKey() {
        return Optional.ofNullable(this.rangeKey);
    }

    @Import(name="readCapacity")
    private @Nullable Output<Integer> readCapacity;

    public Optional<Output<Integer>> readCapacity() {
        return Optional.ofNullable(this.readCapacity);
    }

    @Import(name="replicas")
    private @Nullable Output<List<TableReplicaArgs>> replicas;

    public Optional<Output<List<TableReplicaArgs>>> replicas() {
        return Optional.ofNullable(this.replicas);
    }

    @Import(name="restoreDateTime")
    private @Nullable Output<String> restoreDateTime;

    public Optional<Output<String>> restoreDateTime() {
        return Optional.ofNullable(this.restoreDateTime);
    }

    @Import(name="restoreSourceName")
    private @Nullable Output<String> restoreSourceName;

    public Optional<Output<String>> restoreSourceName() {
        return Optional.ofNullable(this.restoreSourceName);
    }

    @Import(name="restoreToLatestTime")
    private @Nullable Output<Boolean> restoreToLatestTime;

    public Optional<Output<Boolean>> restoreToLatestTime() {
        return Optional.ofNullable(this.restoreToLatestTime);
    }

    @Import(name="serverSideEncryption")
    private @Nullable Output<TableServerSideEncryptionArgs> serverSideEncryption;

    public Optional<Output<TableServerSideEncryptionArgs>> serverSideEncryption() {
        return Optional.ofNullable(this.serverSideEncryption);
    }

    @Import(name="streamEnabled")
    private @Nullable Output<Boolean> streamEnabled;

    public Optional<Output<Boolean>> streamEnabled() {
        return Optional.ofNullable(this.streamEnabled);
    }

    @Import(name="streamViewType")
    private @Nullable Output<String> streamViewType;

    public Optional<Output<String>> streamViewType() {
        return Optional.ofNullable(this.streamViewType);
    }

    @Import(name="tableClass")
    private @Nullable Output<String> tableClass;

    public Optional<Output<String>> tableClass() {
        return Optional.ofNullable(this.tableClass);
    }

    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="ttl")
    private @Nullable Output<TableTtlArgs> ttl;

    public Optional<Output<TableTtlArgs>> ttl() {
        return Optional.ofNullable(this.ttl);
    }

    @Import(name="writeCapacity")
    private @Nullable Output<Integer> writeCapacity;

    public Optional<Output<Integer>> writeCapacity() {
        return Optional.ofNullable(this.writeCapacity);
    }

    private TableArgs() {}

    private TableArgs(TableArgs $) {
        this.attributes = $.attributes;
        this.billingMode = $.billingMode;
        this.globalSecondaryIndexes = $.globalSecondaryIndexes;
        this.hashKey = $.hashKey;
        this.localSecondaryIndexes = $.localSecondaryIndexes;
        this.name = $.name;
        this.pointInTimeRecovery = $.pointInTimeRecovery;
        this.rangeKey = $.rangeKey;
        this.readCapacity = $.readCapacity;
        this.replicas = $.replicas;
        this.restoreDateTime = $.restoreDateTime;
        this.restoreSourceName = $.restoreSourceName;
        this.restoreToLatestTime = $.restoreToLatestTime;
        this.serverSideEncryption = $.serverSideEncryption;
        this.streamEnabled = $.streamEnabled;
        this.streamViewType = $.streamViewType;
        this.tableClass = $.tableClass;
        this.tags = $.tags;
        this.ttl = $.ttl;
        this.writeCapacity = $.writeCapacity;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TableArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TableArgs $;

        public Builder() {
            $ = new TableArgs();
        }

        public Builder(TableArgs defaults) {
            $ = new TableArgs(Objects.requireNonNull(defaults));
        }

        public Builder attributes(@Nullable Output<List<TableAttributeArgs>> attributes) {
            $.attributes = attributes;
            return this;
        }

        public Builder attributes(List<TableAttributeArgs> attributes) {
            return attributes(Output.of(attributes));
        }

        public Builder attributes(TableAttributeArgs... attributes) {
            return attributes(List.of(attributes));
        }

        public Builder billingMode(@Nullable Output<String> billingMode) {
            $.billingMode = billingMode;
            return this;
        }

        public Builder billingMode(String billingMode) {
            return billingMode(Output.of(billingMode));
        }

        public Builder globalSecondaryIndexes(@Nullable Output<List<TableGlobalSecondaryIndexArgs>> globalSecondaryIndexes) {
            $.globalSecondaryIndexes = globalSecondaryIndexes;
            return this;
        }

        public Builder globalSecondaryIndexes(List<TableGlobalSecondaryIndexArgs> globalSecondaryIndexes) {
            return globalSecondaryIndexes(Output.of(globalSecondaryIndexes));
        }

        public Builder globalSecondaryIndexes(TableGlobalSecondaryIndexArgs... globalSecondaryIndexes) {
            return globalSecondaryIndexes(List.of(globalSecondaryIndexes));
        }

        public Builder hashKey(@Nullable Output<String> hashKey) {
            $.hashKey = hashKey;
            return this;
        }

        public Builder hashKey(String hashKey) {
            return hashKey(Output.of(hashKey));
        }

        public Builder localSecondaryIndexes(@Nullable Output<List<TableLocalSecondaryIndexArgs>> localSecondaryIndexes) {
            $.localSecondaryIndexes = localSecondaryIndexes;
            return this;
        }

        public Builder localSecondaryIndexes(List<TableLocalSecondaryIndexArgs> localSecondaryIndexes) {
            return localSecondaryIndexes(Output.of(localSecondaryIndexes));
        }

        public Builder localSecondaryIndexes(TableLocalSecondaryIndexArgs... localSecondaryIndexes) {
            return localSecondaryIndexes(List.of(localSecondaryIndexes));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder pointInTimeRecovery(@Nullable Output<TablePointInTimeRecoveryArgs> pointInTimeRecovery) {
            $.pointInTimeRecovery = pointInTimeRecovery;
            return this;
        }

        public Builder pointInTimeRecovery(TablePointInTimeRecoveryArgs pointInTimeRecovery) {
            return pointInTimeRecovery(Output.of(pointInTimeRecovery));
        }

        public Builder rangeKey(@Nullable Output<String> rangeKey) {
            $.rangeKey = rangeKey;
            return this;
        }

        public Builder rangeKey(String rangeKey) {
            return rangeKey(Output.of(rangeKey));
        }

        public Builder readCapacity(@Nullable Output<Integer> readCapacity) {
            $.readCapacity = readCapacity;
            return this;
        }

        public Builder readCapacity(Integer readCapacity) {
            return readCapacity(Output.of(readCapacity));
        }

        public Builder replicas(@Nullable Output<List<TableReplicaArgs>> replicas) {
            $.replicas = replicas;
            return this;
        }

        public Builder replicas(List<TableReplicaArgs> replicas) {
            return replicas(Output.of(replicas));
        }

        public Builder replicas(TableReplicaArgs... replicas) {
            return replicas(List.of(replicas));
        }

        public Builder restoreDateTime(@Nullable Output<String> restoreDateTime) {
            $.restoreDateTime = restoreDateTime;
            return this;
        }

        public Builder restoreDateTime(String restoreDateTime) {
            return restoreDateTime(Output.of(restoreDateTime));
        }

        public Builder restoreSourceName(@Nullable Output<String> restoreSourceName) {
            $.restoreSourceName = restoreSourceName;
            return this;
        }

        public Builder restoreSourceName(String restoreSourceName) {
            return restoreSourceName(Output.of(restoreSourceName));
        }

        public Builder restoreToLatestTime(@Nullable Output<Boolean> restoreToLatestTime) {
            $.restoreToLatestTime = restoreToLatestTime;
            return this;
        }

        public Builder restoreToLatestTime(Boolean restoreToLatestTime) {
            return restoreToLatestTime(Output.of(restoreToLatestTime));
        }

        public Builder serverSideEncryption(@Nullable Output<TableServerSideEncryptionArgs> serverSideEncryption) {
            $.serverSideEncryption = serverSideEncryption;
            return this;
        }

        public Builder serverSideEncryption(TableServerSideEncryptionArgs serverSideEncryption) {
            return serverSideEncryption(Output.of(serverSideEncryption));
        }

        public Builder streamEnabled(@Nullable Output<Boolean> streamEnabled) {
            $.streamEnabled = streamEnabled;
            return this;
        }

        public Builder streamEnabled(Boolean streamEnabled) {
            return streamEnabled(Output.of(streamEnabled));
        }

        public Builder streamViewType(@Nullable Output<String> streamViewType) {
            $.streamViewType = streamViewType;
            return this;
        }

        public Builder streamViewType(String streamViewType) {
            return streamViewType(Output.of(streamViewType));
        }

        public Builder tableClass(@Nullable Output<String> tableClass) {
            $.tableClass = tableClass;
            return this;
        }

        public Builder tableClass(String tableClass) {
            return tableClass(Output.of(tableClass));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder ttl(@Nullable Output<TableTtlArgs> ttl) {
            $.ttl = ttl;
            return this;
        }

        public Builder ttl(TableTtlArgs ttl) {
            return ttl(Output.of(ttl));
        }

        public Builder writeCapacity(@Nullable Output<Integer> writeCapacity) {
            $.writeCapacity = writeCapacity;
            return this;
        }

        public Builder writeCapacity(Integer writeCapacity) {
            return writeCapacity(Output.of(writeCapacity));
        }

        public TableArgs build() {
            return $;
        }
    }

}
