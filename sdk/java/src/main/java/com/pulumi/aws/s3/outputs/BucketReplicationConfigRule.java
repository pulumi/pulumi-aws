// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.s3.outputs;

import com.pulumi.aws.s3.outputs.BucketReplicationConfigRuleDeleteMarkerReplication;
import com.pulumi.aws.s3.outputs.BucketReplicationConfigRuleDestination;
import com.pulumi.aws.s3.outputs.BucketReplicationConfigRuleExistingObjectReplication;
import com.pulumi.aws.s3.outputs.BucketReplicationConfigRuleFilter;
import com.pulumi.aws.s3.outputs.BucketReplicationConfigRuleSourceSelectionCriteria;
import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class BucketReplicationConfigRule {
    private @Nullable BucketReplicationConfigRuleDeleteMarkerReplication deleteMarkerReplication;
    private BucketReplicationConfigRuleDestination destination;
    private @Nullable BucketReplicationConfigRuleExistingObjectReplication existingObjectReplication;
    private @Nullable BucketReplicationConfigRuleFilter filter;
    private @Nullable String id;
    /**
     * @deprecated
     * Use filter instead
     * 
     */
    @Deprecated /* Use filter instead */
    private @Nullable String prefix;
    private @Nullable Integer priority;
    private @Nullable BucketReplicationConfigRuleSourceSelectionCriteria sourceSelectionCriteria;
    private String status;

    private BucketReplicationConfigRule() {}
    public Optional<BucketReplicationConfigRuleDeleteMarkerReplication> deleteMarkerReplication() {
        return Optional.ofNullable(this.deleteMarkerReplication);
    }
    public BucketReplicationConfigRuleDestination destination() {
        return this.destination;
    }
    public Optional<BucketReplicationConfigRuleExistingObjectReplication> existingObjectReplication() {
        return Optional.ofNullable(this.existingObjectReplication);
    }
    public Optional<BucketReplicationConfigRuleFilter> filter() {
        return Optional.ofNullable(this.filter);
    }
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @deprecated
     * Use filter instead
     * 
     */
    @Deprecated /* Use filter instead */
    public Optional<String> prefix() {
        return Optional.ofNullable(this.prefix);
    }
    public Optional<Integer> priority() {
        return Optional.ofNullable(this.priority);
    }
    public Optional<BucketReplicationConfigRuleSourceSelectionCriteria> sourceSelectionCriteria() {
        return Optional.ofNullable(this.sourceSelectionCriteria);
    }
    public String status() {
        return this.status;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BucketReplicationConfigRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable BucketReplicationConfigRuleDeleteMarkerReplication deleteMarkerReplication;
        private BucketReplicationConfigRuleDestination destination;
        private @Nullable BucketReplicationConfigRuleExistingObjectReplication existingObjectReplication;
        private @Nullable BucketReplicationConfigRuleFilter filter;
        private @Nullable String id;
        private @Nullable String prefix;
        private @Nullable Integer priority;
        private @Nullable BucketReplicationConfigRuleSourceSelectionCriteria sourceSelectionCriteria;
        private String status;
        public Builder() {}
        public Builder(BucketReplicationConfigRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.deleteMarkerReplication = defaults.deleteMarkerReplication;
    	      this.destination = defaults.destination;
    	      this.existingObjectReplication = defaults.existingObjectReplication;
    	      this.filter = defaults.filter;
    	      this.id = defaults.id;
    	      this.prefix = defaults.prefix;
    	      this.priority = defaults.priority;
    	      this.sourceSelectionCriteria = defaults.sourceSelectionCriteria;
    	      this.status = defaults.status;
        }

        @CustomType.Setter
        public Builder deleteMarkerReplication(@Nullable BucketReplicationConfigRuleDeleteMarkerReplication deleteMarkerReplication) {
            this.deleteMarkerReplication = deleteMarkerReplication;
            return this;
        }
        @CustomType.Setter
        public Builder destination(BucketReplicationConfigRuleDestination destination) {
            this.destination = Objects.requireNonNull(destination);
            return this;
        }
        @CustomType.Setter
        public Builder existingObjectReplication(@Nullable BucketReplicationConfigRuleExistingObjectReplication existingObjectReplication) {
            this.existingObjectReplication = existingObjectReplication;
            return this;
        }
        @CustomType.Setter
        public Builder filter(@Nullable BucketReplicationConfigRuleFilter filter) {
            this.filter = filter;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder prefix(@Nullable String prefix) {
            this.prefix = prefix;
            return this;
        }
        @CustomType.Setter
        public Builder priority(@Nullable Integer priority) {
            this.priority = priority;
            return this;
        }
        @CustomType.Setter
        public Builder sourceSelectionCriteria(@Nullable BucketReplicationConfigRuleSourceSelectionCriteria sourceSelectionCriteria) {
            this.sourceSelectionCriteria = sourceSelectionCriteria;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        public BucketReplicationConfigRule build() {
            final var o = new BucketReplicationConfigRule();
            o.deleteMarkerReplication = deleteMarkerReplication;
            o.destination = destination;
            o.existingObjectReplication = existingObjectReplication;
            o.filter = filter;
            o.id = id;
            o.prefix = prefix;
            o.priority = priority;
            o.sourceSelectionCriteria = sourceSelectionCriteria;
            o.status = status;
            return o;
        }
    }
}
