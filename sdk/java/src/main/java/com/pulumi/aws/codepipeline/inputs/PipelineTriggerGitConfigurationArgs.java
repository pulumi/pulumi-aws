// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.codepipeline.inputs;

import com.pulumi.aws.codepipeline.inputs.PipelineTriggerGitConfigurationPullRequestArgs;
import com.pulumi.aws.codepipeline.inputs.PipelineTriggerGitConfigurationPushArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PipelineTriggerGitConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final PipelineTriggerGitConfigurationArgs Empty = new PipelineTriggerGitConfigurationArgs();

    /**
     * The field where the repository event that will start the pipeline is specified as pull requests. A `pull_request` block is documented below.
     * 
     */
    @Import(name="pullRequests")
    private @Nullable Output<List<PipelineTriggerGitConfigurationPullRequestArgs>> pullRequests;

    /**
     * @return The field where the repository event that will start the pipeline is specified as pull requests. A `pull_request` block is documented below.
     * 
     */
    public Optional<Output<List<PipelineTriggerGitConfigurationPullRequestArgs>>> pullRequests() {
        return Optional.ofNullable(this.pullRequests);
    }

    /**
     * The field where the repository event that will start the pipeline, such as pushing Git tags, is specified with details. A `push` block is documented below.
     * 
     */
    @Import(name="pushes")
    private @Nullable Output<List<PipelineTriggerGitConfigurationPushArgs>> pushes;

    /**
     * @return The field where the repository event that will start the pipeline, such as pushing Git tags, is specified with details. A `push` block is documented below.
     * 
     */
    public Optional<Output<List<PipelineTriggerGitConfigurationPushArgs>>> pushes() {
        return Optional.ofNullable(this.pushes);
    }

    /**
     * The name of the pipeline source action where the trigger configuration.
     * 
     */
    @Import(name="sourceActionName", required=true)
    private Output<String> sourceActionName;

    /**
     * @return The name of the pipeline source action where the trigger configuration.
     * 
     */
    public Output<String> sourceActionName() {
        return this.sourceActionName;
    }

    private PipelineTriggerGitConfigurationArgs() {}

    private PipelineTriggerGitConfigurationArgs(PipelineTriggerGitConfigurationArgs $) {
        this.pullRequests = $.pullRequests;
        this.pushes = $.pushes;
        this.sourceActionName = $.sourceActionName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PipelineTriggerGitConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PipelineTriggerGitConfigurationArgs $;

        public Builder() {
            $ = new PipelineTriggerGitConfigurationArgs();
        }

        public Builder(PipelineTriggerGitConfigurationArgs defaults) {
            $ = new PipelineTriggerGitConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param pullRequests The field where the repository event that will start the pipeline is specified as pull requests. A `pull_request` block is documented below.
         * 
         * @return builder
         * 
         */
        public Builder pullRequests(@Nullable Output<List<PipelineTriggerGitConfigurationPullRequestArgs>> pullRequests) {
            $.pullRequests = pullRequests;
            return this;
        }

        /**
         * @param pullRequests The field where the repository event that will start the pipeline is specified as pull requests. A `pull_request` block is documented below.
         * 
         * @return builder
         * 
         */
        public Builder pullRequests(List<PipelineTriggerGitConfigurationPullRequestArgs> pullRequests) {
            return pullRequests(Output.of(pullRequests));
        }

        /**
         * @param pullRequests The field where the repository event that will start the pipeline is specified as pull requests. A `pull_request` block is documented below.
         * 
         * @return builder
         * 
         */
        public Builder pullRequests(PipelineTriggerGitConfigurationPullRequestArgs... pullRequests) {
            return pullRequests(List.of(pullRequests));
        }

        /**
         * @param pushes The field where the repository event that will start the pipeline, such as pushing Git tags, is specified with details. A `push` block is documented below.
         * 
         * @return builder
         * 
         */
        public Builder pushes(@Nullable Output<List<PipelineTriggerGitConfigurationPushArgs>> pushes) {
            $.pushes = pushes;
            return this;
        }

        /**
         * @param pushes The field where the repository event that will start the pipeline, such as pushing Git tags, is specified with details. A `push` block is documented below.
         * 
         * @return builder
         * 
         */
        public Builder pushes(List<PipelineTriggerGitConfigurationPushArgs> pushes) {
            return pushes(Output.of(pushes));
        }

        /**
         * @param pushes The field where the repository event that will start the pipeline, such as pushing Git tags, is specified with details. A `push` block is documented below.
         * 
         * @return builder
         * 
         */
        public Builder pushes(PipelineTriggerGitConfigurationPushArgs... pushes) {
            return pushes(List.of(pushes));
        }

        /**
         * @param sourceActionName The name of the pipeline source action where the trigger configuration.
         * 
         * @return builder
         * 
         */
        public Builder sourceActionName(Output<String> sourceActionName) {
            $.sourceActionName = sourceActionName;
            return this;
        }

        /**
         * @param sourceActionName The name of the pipeline source action where the trigger configuration.
         * 
         * @return builder
         * 
         */
        public Builder sourceActionName(String sourceActionName) {
            return sourceActionName(Output.of(sourceActionName));
        }

        public PipelineTriggerGitConfigurationArgs build() {
            if ($.sourceActionName == null) {
                throw new MissingRequiredPropertyException("PipelineTriggerGitConfigurationArgs", "sourceActionName");
            }
            return $;
        }
    }

}
