// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.autoscalingplans.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ScalingPlanScalingInstructionCustomizedLoadMetricSpecificationArgs extends com.pulumi.resources.ResourceArgs {

    public static final ScalingPlanScalingInstructionCustomizedLoadMetricSpecificationArgs Empty = new ScalingPlanScalingInstructionCustomizedLoadMetricSpecificationArgs();

    /**
     * Dimensions of the metric.
     * 
     */
    @Import(name="dimensions")
    private @Nullable Output<Map<String,String>> dimensions;

    /**
     * @return Dimensions of the metric.
     * 
     */
    public Optional<Output<Map<String,String>>> dimensions() {
        return Optional.ofNullable(this.dimensions);
    }

    /**
     * Name of the metric.
     * 
     */
    @Import(name="metricName", required=true)
    private Output<String> metricName;

    /**
     * @return Name of the metric.
     * 
     */
    public Output<String> metricName() {
        return this.metricName;
    }

    /**
     * Namespace of the metric.
     * 
     */
    @Import(name="namespace", required=true)
    private Output<String> namespace;

    /**
     * @return Namespace of the metric.
     * 
     */
    public Output<String> namespace() {
        return this.namespace;
    }

    /**
     * Statistic of the metric. Currently, the value must always be `Sum`.
     * 
     */
    @Import(name="statistic", required=true)
    private Output<String> statistic;

    /**
     * @return Statistic of the metric. Currently, the value must always be `Sum`.
     * 
     */
    public Output<String> statistic() {
        return this.statistic;
    }

    /**
     * Unit of the metric.
     * 
     */
    @Import(name="unit")
    private @Nullable Output<String> unit;

    /**
     * @return Unit of the metric.
     * 
     */
    public Optional<Output<String>> unit() {
        return Optional.ofNullable(this.unit);
    }

    private ScalingPlanScalingInstructionCustomizedLoadMetricSpecificationArgs() {}

    private ScalingPlanScalingInstructionCustomizedLoadMetricSpecificationArgs(ScalingPlanScalingInstructionCustomizedLoadMetricSpecificationArgs $) {
        this.dimensions = $.dimensions;
        this.metricName = $.metricName;
        this.namespace = $.namespace;
        this.statistic = $.statistic;
        this.unit = $.unit;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ScalingPlanScalingInstructionCustomizedLoadMetricSpecificationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ScalingPlanScalingInstructionCustomizedLoadMetricSpecificationArgs $;

        public Builder() {
            $ = new ScalingPlanScalingInstructionCustomizedLoadMetricSpecificationArgs();
        }

        public Builder(ScalingPlanScalingInstructionCustomizedLoadMetricSpecificationArgs defaults) {
            $ = new ScalingPlanScalingInstructionCustomizedLoadMetricSpecificationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dimensions Dimensions of the metric.
         * 
         * @return builder
         * 
         */
        public Builder dimensions(@Nullable Output<Map<String,String>> dimensions) {
            $.dimensions = dimensions;
            return this;
        }

        /**
         * @param dimensions Dimensions of the metric.
         * 
         * @return builder
         * 
         */
        public Builder dimensions(Map<String,String> dimensions) {
            return dimensions(Output.of(dimensions));
        }

        /**
         * @param metricName Name of the metric.
         * 
         * @return builder
         * 
         */
        public Builder metricName(Output<String> metricName) {
            $.metricName = metricName;
            return this;
        }

        /**
         * @param metricName Name of the metric.
         * 
         * @return builder
         * 
         */
        public Builder metricName(String metricName) {
            return metricName(Output.of(metricName));
        }

        /**
         * @param namespace Namespace of the metric.
         * 
         * @return builder
         * 
         */
        public Builder namespace(Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace Namespace of the metric.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param statistic Statistic of the metric. Currently, the value must always be `Sum`.
         * 
         * @return builder
         * 
         */
        public Builder statistic(Output<String> statistic) {
            $.statistic = statistic;
            return this;
        }

        /**
         * @param statistic Statistic of the metric. Currently, the value must always be `Sum`.
         * 
         * @return builder
         * 
         */
        public Builder statistic(String statistic) {
            return statistic(Output.of(statistic));
        }

        /**
         * @param unit Unit of the metric.
         * 
         * @return builder
         * 
         */
        public Builder unit(@Nullable Output<String> unit) {
            $.unit = unit;
            return this;
        }

        /**
         * @param unit Unit of the metric.
         * 
         * @return builder
         * 
         */
        public Builder unit(String unit) {
            return unit(Output.of(unit));
        }

        public ScalingPlanScalingInstructionCustomizedLoadMetricSpecificationArgs build() {
            $.metricName = Objects.requireNonNull($.metricName, "expected parameter 'metricName' to be non-null");
            $.namespace = Objects.requireNonNull($.namespace, "expected parameter 'namespace' to be non-null");
            $.statistic = Objects.requireNonNull($.statistic, "expected parameter 'statistic' to be non-null");
            return $;
        }
    }

}
