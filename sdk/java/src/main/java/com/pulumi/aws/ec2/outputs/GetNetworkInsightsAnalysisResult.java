// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ec2.outputs;

import com.pulumi.aws.ec2.outputs.GetNetworkInsightsAnalysisAlternatePathHint;
import com.pulumi.aws.ec2.outputs.GetNetworkInsightsAnalysisExplanation;
import com.pulumi.aws.ec2.outputs.GetNetworkInsightsAnalysisFilter;
import com.pulumi.aws.ec2.outputs.GetNetworkInsightsAnalysisForwardPathComponent;
import com.pulumi.aws.ec2.outputs.GetNetworkInsightsAnalysisReturnPathComponent;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class GetNetworkInsightsAnalysisResult {
    /**
     * @return Potential intermediate components of a feasible path.
     * 
     */
    private List<GetNetworkInsightsAnalysisAlternatePathHint> alternatePathHints;
    /**
     * @return ARN of the selected Network Insights Analysis.
     * 
     */
    private String arn;
    /**
     * @return Explanation codes for an unreachable path.
     * 
     */
    private List<GetNetworkInsightsAnalysisExplanation> explanations;
    /**
     * @return ARNs of the AWS resources that the path must traverse.
     * 
     */
    private List<String> filterInArns;
    private @Nullable List<GetNetworkInsightsAnalysisFilter> filters;
    /**
     * @return The components in the path from source to destination.
     * 
     */
    private List<GetNetworkInsightsAnalysisForwardPathComponent> forwardPathComponents;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String networkInsightsAnalysisId;
    /**
     * @return The ID of the path.
     * 
     */
    private String networkInsightsPathId;
    /**
     * @return Set to `true` if the destination was reachable.
     * 
     */
    private Boolean pathFound;
    /**
     * @return The components in the path from destination to source.
     * 
     */
    private List<GetNetworkInsightsAnalysisReturnPathComponent> returnPathComponents;
    /**
     * @return Date/time the analysis was started.
     * 
     */
    private String startDate;
    /**
     * @return Status of the analysis. `succeeded` means the analysis was completed, not that a path was found, for that see `path_found`.
     * 
     */
    private String status;
    /**
     * @return Message to provide more context when the `status` is `failed`.
     * 
     */
    private String statusMessage;
    private Map<String,String> tags;
    /**
     * @return Warning message.
     * 
     */
    private String warningMessage;

    private GetNetworkInsightsAnalysisResult() {}
    /**
     * @return Potential intermediate components of a feasible path.
     * 
     */
    public List<GetNetworkInsightsAnalysisAlternatePathHint> alternatePathHints() {
        return this.alternatePathHints;
    }
    /**
     * @return ARN of the selected Network Insights Analysis.
     * 
     */
    public String arn() {
        return this.arn;
    }
    /**
     * @return Explanation codes for an unreachable path.
     * 
     */
    public List<GetNetworkInsightsAnalysisExplanation> explanations() {
        return this.explanations;
    }
    /**
     * @return ARNs of the AWS resources that the path must traverse.
     * 
     */
    public List<String> filterInArns() {
        return this.filterInArns;
    }
    public List<GetNetworkInsightsAnalysisFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The components in the path from source to destination.
     * 
     */
    public List<GetNetworkInsightsAnalysisForwardPathComponent> forwardPathComponents() {
        return this.forwardPathComponents;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String networkInsightsAnalysisId() {
        return this.networkInsightsAnalysisId;
    }
    /**
     * @return The ID of the path.
     * 
     */
    public String networkInsightsPathId() {
        return this.networkInsightsPathId;
    }
    /**
     * @return Set to `true` if the destination was reachable.
     * 
     */
    public Boolean pathFound() {
        return this.pathFound;
    }
    /**
     * @return The components in the path from destination to source.
     * 
     */
    public List<GetNetworkInsightsAnalysisReturnPathComponent> returnPathComponents() {
        return this.returnPathComponents;
    }
    /**
     * @return Date/time the analysis was started.
     * 
     */
    public String startDate() {
        return this.startDate;
    }
    /**
     * @return Status of the analysis. `succeeded` means the analysis was completed, not that a path was found, for that see `path_found`.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return Message to provide more context when the `status` is `failed`.
     * 
     */
    public String statusMessage() {
        return this.statusMessage;
    }
    public Map<String,String> tags() {
        return this.tags;
    }
    /**
     * @return Warning message.
     * 
     */
    public String warningMessage() {
        return this.warningMessage;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNetworkInsightsAnalysisResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetNetworkInsightsAnalysisAlternatePathHint> alternatePathHints;
        private String arn;
        private List<GetNetworkInsightsAnalysisExplanation> explanations;
        private List<String> filterInArns;
        private @Nullable List<GetNetworkInsightsAnalysisFilter> filters;
        private List<GetNetworkInsightsAnalysisForwardPathComponent> forwardPathComponents;
        private String id;
        private String networkInsightsAnalysisId;
        private String networkInsightsPathId;
        private Boolean pathFound;
        private List<GetNetworkInsightsAnalysisReturnPathComponent> returnPathComponents;
        private String startDate;
        private String status;
        private String statusMessage;
        private Map<String,String> tags;
        private String warningMessage;
        public Builder() {}
        public Builder(GetNetworkInsightsAnalysisResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.alternatePathHints = defaults.alternatePathHints;
    	      this.arn = defaults.arn;
    	      this.explanations = defaults.explanations;
    	      this.filterInArns = defaults.filterInArns;
    	      this.filters = defaults.filters;
    	      this.forwardPathComponents = defaults.forwardPathComponents;
    	      this.id = defaults.id;
    	      this.networkInsightsAnalysisId = defaults.networkInsightsAnalysisId;
    	      this.networkInsightsPathId = defaults.networkInsightsPathId;
    	      this.pathFound = defaults.pathFound;
    	      this.returnPathComponents = defaults.returnPathComponents;
    	      this.startDate = defaults.startDate;
    	      this.status = defaults.status;
    	      this.statusMessage = defaults.statusMessage;
    	      this.tags = defaults.tags;
    	      this.warningMessage = defaults.warningMessage;
        }

        @CustomType.Setter
        public Builder alternatePathHints(List<GetNetworkInsightsAnalysisAlternatePathHint> alternatePathHints) {
            this.alternatePathHints = Objects.requireNonNull(alternatePathHints);
            return this;
        }
        public Builder alternatePathHints(GetNetworkInsightsAnalysisAlternatePathHint... alternatePathHints) {
            return alternatePathHints(List.of(alternatePathHints));
        }
        @CustomType.Setter
        public Builder arn(String arn) {
            this.arn = Objects.requireNonNull(arn);
            return this;
        }
        @CustomType.Setter
        public Builder explanations(List<GetNetworkInsightsAnalysisExplanation> explanations) {
            this.explanations = Objects.requireNonNull(explanations);
            return this;
        }
        public Builder explanations(GetNetworkInsightsAnalysisExplanation... explanations) {
            return explanations(List.of(explanations));
        }
        @CustomType.Setter
        public Builder filterInArns(List<String> filterInArns) {
            this.filterInArns = Objects.requireNonNull(filterInArns);
            return this;
        }
        public Builder filterInArns(String... filterInArns) {
            return filterInArns(List.of(filterInArns));
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetNetworkInsightsAnalysisFilter> filters) {
            this.filters = filters;
            return this;
        }
        public Builder filters(GetNetworkInsightsAnalysisFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder forwardPathComponents(List<GetNetworkInsightsAnalysisForwardPathComponent> forwardPathComponents) {
            this.forwardPathComponents = Objects.requireNonNull(forwardPathComponents);
            return this;
        }
        public Builder forwardPathComponents(GetNetworkInsightsAnalysisForwardPathComponent... forwardPathComponents) {
            return forwardPathComponents(List.of(forwardPathComponents));
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder networkInsightsAnalysisId(String networkInsightsAnalysisId) {
            this.networkInsightsAnalysisId = Objects.requireNonNull(networkInsightsAnalysisId);
            return this;
        }
        @CustomType.Setter
        public Builder networkInsightsPathId(String networkInsightsPathId) {
            this.networkInsightsPathId = Objects.requireNonNull(networkInsightsPathId);
            return this;
        }
        @CustomType.Setter
        public Builder pathFound(Boolean pathFound) {
            this.pathFound = Objects.requireNonNull(pathFound);
            return this;
        }
        @CustomType.Setter
        public Builder returnPathComponents(List<GetNetworkInsightsAnalysisReturnPathComponent> returnPathComponents) {
            this.returnPathComponents = Objects.requireNonNull(returnPathComponents);
            return this;
        }
        public Builder returnPathComponents(GetNetworkInsightsAnalysisReturnPathComponent... returnPathComponents) {
            return returnPathComponents(List.of(returnPathComponents));
        }
        @CustomType.Setter
        public Builder startDate(String startDate) {
            this.startDate = Objects.requireNonNull(startDate);
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        @CustomType.Setter
        public Builder statusMessage(String statusMessage) {
            this.statusMessage = Objects.requireNonNull(statusMessage);
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        @CustomType.Setter
        public Builder warningMessage(String warningMessage) {
            this.warningMessage = Objects.requireNonNull(warningMessage);
            return this;
        }
        public GetNetworkInsightsAnalysisResult build() {
            final var _resultValue = new GetNetworkInsightsAnalysisResult();
            _resultValue.alternatePathHints = alternatePathHints;
            _resultValue.arn = arn;
            _resultValue.explanations = explanations;
            _resultValue.filterInArns = filterInArns;
            _resultValue.filters = filters;
            _resultValue.forwardPathComponents = forwardPathComponents;
            _resultValue.id = id;
            _resultValue.networkInsightsAnalysisId = networkInsightsAnalysisId;
            _resultValue.networkInsightsPathId = networkInsightsPathId;
            _resultValue.pathFound = pathFound;
            _resultValue.returnPathComponents = returnPathComponents;
            _resultValue.startDate = startDate;
            _resultValue.status = status;
            _resultValue.statusMessage = statusMessage;
            _resultValue.tags = tags;
            _resultValue.warningMessage = warningMessage;
            return _resultValue;
        }
    }
}
