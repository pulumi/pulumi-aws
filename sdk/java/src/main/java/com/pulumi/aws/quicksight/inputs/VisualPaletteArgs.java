// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.inputs;

import com.pulumi.aws.quicksight.inputs.VisualPaletteColorMapArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VisualPaletteArgs extends com.pulumi.resources.ResourceArgs {

    public static final VisualPaletteArgs Empty = new VisualPaletteArgs();

    @Import(name="chartColor")
    private @Nullable Output<String> chartColor;

    public Optional<Output<String>> chartColor() {
        return Optional.ofNullable(this.chartColor);
    }

    @Import(name="colorMaps")
    private @Nullable Output<List<VisualPaletteColorMapArgs>> colorMaps;

    public Optional<Output<List<VisualPaletteColorMapArgs>>> colorMaps() {
        return Optional.ofNullable(this.colorMaps);
    }

    private VisualPaletteArgs() {}

    private VisualPaletteArgs(VisualPaletteArgs $) {
        this.chartColor = $.chartColor;
        this.colorMaps = $.colorMaps;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VisualPaletteArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VisualPaletteArgs $;

        public Builder() {
            $ = new VisualPaletteArgs();
        }

        public Builder(VisualPaletteArgs defaults) {
            $ = new VisualPaletteArgs(Objects.requireNonNull(defaults));
        }

        public Builder chartColor(@Nullable Output<String> chartColor) {
            $.chartColor = chartColor;
            return this;
        }

        public Builder chartColor(String chartColor) {
            return chartColor(Output.of(chartColor));
        }

        public Builder colorMaps(@Nullable Output<List<VisualPaletteColorMapArgs>> colorMaps) {
            $.colorMaps = colorMaps;
            return this;
        }

        public Builder colorMaps(List<VisualPaletteColorMapArgs> colorMaps) {
            return colorMaps(Output.of(colorMaps));
        }

        public Builder colorMaps(VisualPaletteColorMapArgs... colorMaps) {
            return colorMaps(List.of(colorMaps));
        }

        public VisualPaletteArgs build() {
            return $;
        }
    }

}
