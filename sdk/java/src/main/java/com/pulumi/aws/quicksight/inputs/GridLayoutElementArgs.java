// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GridLayoutElementArgs extends com.pulumi.resources.ResourceArgs {

    public static final GridLayoutElementArgs Empty = new GridLayoutElementArgs();

    @Import(name="columnIndex")
    private @Nullable Output<String> columnIndex;

    public Optional<Output<String>> columnIndex() {
        return Optional.ofNullable(this.columnIndex);
    }

    @Import(name="columnSpan", required=true)
    private Output<Integer> columnSpan;

    public Output<Integer> columnSpan() {
        return this.columnSpan;
    }

    @Import(name="elementId", required=true)
    private Output<String> elementId;

    public Output<String> elementId() {
        return this.elementId;
    }

    @Import(name="elementType", required=true)
    private Output<String> elementType;

    public Output<String> elementType() {
        return this.elementType;
    }

    @Import(name="rowIndex")
    private @Nullable Output<String> rowIndex;

    public Optional<Output<String>> rowIndex() {
        return Optional.ofNullable(this.rowIndex);
    }

    @Import(name="rowSpan", required=true)
    private Output<Integer> rowSpan;

    public Output<Integer> rowSpan() {
        return this.rowSpan;
    }

    private GridLayoutElementArgs() {}

    private GridLayoutElementArgs(GridLayoutElementArgs $) {
        this.columnIndex = $.columnIndex;
        this.columnSpan = $.columnSpan;
        this.elementId = $.elementId;
        this.elementType = $.elementType;
        this.rowIndex = $.rowIndex;
        this.rowSpan = $.rowSpan;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GridLayoutElementArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GridLayoutElementArgs $;

        public Builder() {
            $ = new GridLayoutElementArgs();
        }

        public Builder(GridLayoutElementArgs defaults) {
            $ = new GridLayoutElementArgs(Objects.requireNonNull(defaults));
        }

        public Builder columnIndex(@Nullable Output<String> columnIndex) {
            $.columnIndex = columnIndex;
            return this;
        }

        public Builder columnIndex(String columnIndex) {
            return columnIndex(Output.of(columnIndex));
        }

        public Builder columnSpan(Output<Integer> columnSpan) {
            $.columnSpan = columnSpan;
            return this;
        }

        public Builder columnSpan(Integer columnSpan) {
            return columnSpan(Output.of(columnSpan));
        }

        public Builder elementId(Output<String> elementId) {
            $.elementId = elementId;
            return this;
        }

        public Builder elementId(String elementId) {
            return elementId(Output.of(elementId));
        }

        public Builder elementType(Output<String> elementType) {
            $.elementType = elementType;
            return this;
        }

        public Builder elementType(String elementType) {
            return elementType(Output.of(elementType));
        }

        public Builder rowIndex(@Nullable Output<String> rowIndex) {
            $.rowIndex = rowIndex;
            return this;
        }

        public Builder rowIndex(String rowIndex) {
            return rowIndex(Output.of(rowIndex));
        }

        public Builder rowSpan(Output<Integer> rowSpan) {
            $.rowSpan = rowSpan;
            return this;
        }

        public Builder rowSpan(Integer rowSpan) {
            return rowSpan(Output.of(rowSpan));
        }

        public GridLayoutElementArgs build() {
            if ($.columnSpan == null) {
                throw new MissingRequiredPropertyException("GridLayoutElementArgs", "columnSpan");
            }
            if ($.elementId == null) {
                throw new MissingRequiredPropertyException("GridLayoutElementArgs", "elementId");
            }
            if ($.elementType == null) {
                throw new MissingRequiredPropertyException("GridLayoutElementArgs", "elementType");
            }
            if ($.rowSpan == null) {
                throw new MissingRequiredPropertyException("GridLayoutElementArgs", "rowSpan");
            }
            return $;
        }
    }

}
