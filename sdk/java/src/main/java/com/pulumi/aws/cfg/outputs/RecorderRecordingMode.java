// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.cfg.outputs;

import com.pulumi.aws.cfg.outputs.RecorderRecordingModeRecordingModeOverride;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class RecorderRecordingMode {
    /**
     * @return Default reecording frequency. `CONTINUOUS` or `DAILY`.
     * 
     */
    private @Nullable String recordingFrequency;
    /**
     * @return Recording mode overrides. Detailed below.
     * 
     */
    private @Nullable RecorderRecordingModeRecordingModeOverride recordingModeOverride;

    private RecorderRecordingMode() {}
    /**
     * @return Default reecording frequency. `CONTINUOUS` or `DAILY`.
     * 
     */
    public Optional<String> recordingFrequency() {
        return Optional.ofNullable(this.recordingFrequency);
    }
    /**
     * @return Recording mode overrides. Detailed below.
     * 
     */
    public Optional<RecorderRecordingModeRecordingModeOverride> recordingModeOverride() {
        return Optional.ofNullable(this.recordingModeOverride);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RecorderRecordingMode defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String recordingFrequency;
        private @Nullable RecorderRecordingModeRecordingModeOverride recordingModeOverride;
        public Builder() {}
        public Builder(RecorderRecordingMode defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.recordingFrequency = defaults.recordingFrequency;
    	      this.recordingModeOverride = defaults.recordingModeOverride;
        }

        @CustomType.Setter
        public Builder recordingFrequency(@Nullable String recordingFrequency) {

            this.recordingFrequency = recordingFrequency;
            return this;
        }
        @CustomType.Setter
        public Builder recordingModeOverride(@Nullable RecorderRecordingModeRecordingModeOverride recordingModeOverride) {

            this.recordingModeOverride = recordingModeOverride;
            return this;
        }
        public RecorderRecordingMode build() {
            final var _resultValue = new RecorderRecordingMode();
            _resultValue.recordingFrequency = recordingFrequency;
            _resultValue.recordingModeOverride = recordingModeOverride;
            return _resultValue;
        }
    }
}
