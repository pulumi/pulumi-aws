// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.alb.outputs;

import com.pulumi.aws.alb.outputs.ListenerRuleConditionHostHeader;
import com.pulumi.aws.alb.outputs.ListenerRuleConditionHttpHeader;
import com.pulumi.aws.alb.outputs.ListenerRuleConditionHttpRequestMethod;
import com.pulumi.aws.alb.outputs.ListenerRuleConditionPathPattern;
import com.pulumi.aws.alb.outputs.ListenerRuleConditionQueryString;
import com.pulumi.aws.alb.outputs.ListenerRuleConditionSourceIp;
import com.pulumi.core.annotations.CustomType;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ListenerRuleCondition {
    private @Nullable ListenerRuleConditionHostHeader hostHeader;
    private @Nullable ListenerRuleConditionHttpHeader httpHeader;
    private @Nullable ListenerRuleConditionHttpRequestMethod httpRequestMethod;
    private @Nullable ListenerRuleConditionPathPattern pathPattern;
    private @Nullable List<ListenerRuleConditionQueryString> queryStrings;
    private @Nullable ListenerRuleConditionSourceIp sourceIp;

    private ListenerRuleCondition() {}
    public Optional<ListenerRuleConditionHostHeader> hostHeader() {
        return Optional.ofNullable(this.hostHeader);
    }
    public Optional<ListenerRuleConditionHttpHeader> httpHeader() {
        return Optional.ofNullable(this.httpHeader);
    }
    public Optional<ListenerRuleConditionHttpRequestMethod> httpRequestMethod() {
        return Optional.ofNullable(this.httpRequestMethod);
    }
    public Optional<ListenerRuleConditionPathPattern> pathPattern() {
        return Optional.ofNullable(this.pathPattern);
    }
    public List<ListenerRuleConditionQueryString> queryStrings() {
        return this.queryStrings == null ? List.of() : this.queryStrings;
    }
    public Optional<ListenerRuleConditionSourceIp> sourceIp() {
        return Optional.ofNullable(this.sourceIp);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ListenerRuleCondition defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable ListenerRuleConditionHostHeader hostHeader;
        private @Nullable ListenerRuleConditionHttpHeader httpHeader;
        private @Nullable ListenerRuleConditionHttpRequestMethod httpRequestMethod;
        private @Nullable ListenerRuleConditionPathPattern pathPattern;
        private @Nullable List<ListenerRuleConditionQueryString> queryStrings;
        private @Nullable ListenerRuleConditionSourceIp sourceIp;
        public Builder() {}
        public Builder(ListenerRuleCondition defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.hostHeader = defaults.hostHeader;
    	      this.httpHeader = defaults.httpHeader;
    	      this.httpRequestMethod = defaults.httpRequestMethod;
    	      this.pathPattern = defaults.pathPattern;
    	      this.queryStrings = defaults.queryStrings;
    	      this.sourceIp = defaults.sourceIp;
        }

        @CustomType.Setter
        public Builder hostHeader(@Nullable ListenerRuleConditionHostHeader hostHeader) {
            this.hostHeader = hostHeader;
            return this;
        }
        @CustomType.Setter
        public Builder httpHeader(@Nullable ListenerRuleConditionHttpHeader httpHeader) {
            this.httpHeader = httpHeader;
            return this;
        }
        @CustomType.Setter
        public Builder httpRequestMethod(@Nullable ListenerRuleConditionHttpRequestMethod httpRequestMethod) {
            this.httpRequestMethod = httpRequestMethod;
            return this;
        }
        @CustomType.Setter
        public Builder pathPattern(@Nullable ListenerRuleConditionPathPattern pathPattern) {
            this.pathPattern = pathPattern;
            return this;
        }
        @CustomType.Setter
        public Builder queryStrings(@Nullable List<ListenerRuleConditionQueryString> queryStrings) {
            this.queryStrings = queryStrings;
            return this;
        }
        public Builder queryStrings(ListenerRuleConditionQueryString... queryStrings) {
            return queryStrings(List.of(queryStrings));
        }
        @CustomType.Setter
        public Builder sourceIp(@Nullable ListenerRuleConditionSourceIp sourceIp) {
            this.sourceIp = sourceIp;
            return this;
        }
        public ListenerRuleCondition build() {
            final var o = new ListenerRuleCondition();
            o.hostHeader = hostHeader;
            o.httpHeader = httpHeader;
            o.httpRequestMethod = httpRequestMethod;
            o.pathPattern = pathPattern;
            o.queryStrings = queryStrings;
            o.sourceIp = sourceIp;
            return o;
        }
    }
}
