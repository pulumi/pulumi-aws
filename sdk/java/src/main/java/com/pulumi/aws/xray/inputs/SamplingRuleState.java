// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.xray.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SamplingRuleState extends com.pulumi.resources.ResourceArgs {

    public static final SamplingRuleState Empty = new SamplingRuleState();

    @Import(name="arn")
    private @Nullable Output<String> arn;

    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    @Import(name="attributes")
    private @Nullable Output<Map<String,String>> attributes;

    public Optional<Output<Map<String,String>>> attributes() {
        return Optional.ofNullable(this.attributes);
    }

    @Import(name="fixedRate")
    private @Nullable Output<Double> fixedRate;

    public Optional<Output<Double>> fixedRate() {
        return Optional.ofNullable(this.fixedRate);
    }

    @Import(name="host")
    private @Nullable Output<String> host;

    public Optional<Output<String>> host() {
        return Optional.ofNullable(this.host);
    }

    @Import(name="httpMethod")
    private @Nullable Output<String> httpMethod;

    public Optional<Output<String>> httpMethod() {
        return Optional.ofNullable(this.httpMethod);
    }

    @Import(name="priority")
    private @Nullable Output<Integer> priority;

    public Optional<Output<Integer>> priority() {
        return Optional.ofNullable(this.priority);
    }

    @Import(name="reservoirSize")
    private @Nullable Output<Integer> reservoirSize;

    public Optional<Output<Integer>> reservoirSize() {
        return Optional.ofNullable(this.reservoirSize);
    }

    @Import(name="resourceArn")
    private @Nullable Output<String> resourceArn;

    public Optional<Output<String>> resourceArn() {
        return Optional.ofNullable(this.resourceArn);
    }

    @Import(name="ruleName")
    private @Nullable Output<String> ruleName;

    public Optional<Output<String>> ruleName() {
        return Optional.ofNullable(this.ruleName);
    }

    @Import(name="serviceName")
    private @Nullable Output<String> serviceName;

    public Optional<Output<String>> serviceName() {
        return Optional.ofNullable(this.serviceName);
    }

    @Import(name="serviceType")
    private @Nullable Output<String> serviceType;

    public Optional<Output<String>> serviceType() {
        return Optional.ofNullable(this.serviceType);
    }

    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    @Import(name="urlPath")
    private @Nullable Output<String> urlPath;

    public Optional<Output<String>> urlPath() {
        return Optional.ofNullable(this.urlPath);
    }

    @Import(name="version")
    private @Nullable Output<Integer> version;

    public Optional<Output<Integer>> version() {
        return Optional.ofNullable(this.version);
    }

    private SamplingRuleState() {}

    private SamplingRuleState(SamplingRuleState $) {
        this.arn = $.arn;
        this.attributes = $.attributes;
        this.fixedRate = $.fixedRate;
        this.host = $.host;
        this.httpMethod = $.httpMethod;
        this.priority = $.priority;
        this.reservoirSize = $.reservoirSize;
        this.resourceArn = $.resourceArn;
        this.ruleName = $.ruleName;
        this.serviceName = $.serviceName;
        this.serviceType = $.serviceType;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
        this.urlPath = $.urlPath;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SamplingRuleState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SamplingRuleState $;

        public Builder() {
            $ = new SamplingRuleState();
        }

        public Builder(SamplingRuleState defaults) {
            $ = new SamplingRuleState(Objects.requireNonNull(defaults));
        }

        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        public Builder attributes(@Nullable Output<Map<String,String>> attributes) {
            $.attributes = attributes;
            return this;
        }

        public Builder attributes(Map<String,String> attributes) {
            return attributes(Output.of(attributes));
        }

        public Builder fixedRate(@Nullable Output<Double> fixedRate) {
            $.fixedRate = fixedRate;
            return this;
        }

        public Builder fixedRate(Double fixedRate) {
            return fixedRate(Output.of(fixedRate));
        }

        public Builder host(@Nullable Output<String> host) {
            $.host = host;
            return this;
        }

        public Builder host(String host) {
            return host(Output.of(host));
        }

        public Builder httpMethod(@Nullable Output<String> httpMethod) {
            $.httpMethod = httpMethod;
            return this;
        }

        public Builder httpMethod(String httpMethod) {
            return httpMethod(Output.of(httpMethod));
        }

        public Builder priority(@Nullable Output<Integer> priority) {
            $.priority = priority;
            return this;
        }

        public Builder priority(Integer priority) {
            return priority(Output.of(priority));
        }

        public Builder reservoirSize(@Nullable Output<Integer> reservoirSize) {
            $.reservoirSize = reservoirSize;
            return this;
        }

        public Builder reservoirSize(Integer reservoirSize) {
            return reservoirSize(Output.of(reservoirSize));
        }

        public Builder resourceArn(@Nullable Output<String> resourceArn) {
            $.resourceArn = resourceArn;
            return this;
        }

        public Builder resourceArn(String resourceArn) {
            return resourceArn(Output.of(resourceArn));
        }

        public Builder ruleName(@Nullable Output<String> ruleName) {
            $.ruleName = ruleName;
            return this;
        }

        public Builder ruleName(String ruleName) {
            return ruleName(Output.of(ruleName));
        }

        public Builder serviceName(@Nullable Output<String> serviceName) {
            $.serviceName = serviceName;
            return this;
        }

        public Builder serviceName(String serviceName) {
            return serviceName(Output.of(serviceName));
        }

        public Builder serviceType(@Nullable Output<String> serviceType) {
            $.serviceType = serviceType;
            return this;
        }

        public Builder serviceType(String serviceType) {
            return serviceType(Output.of(serviceType));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        public Builder urlPath(@Nullable Output<String> urlPath) {
            $.urlPath = urlPath;
            return this;
        }

        public Builder urlPath(String urlPath) {
            return urlPath(Output.of(urlPath));
        }

        public Builder version(@Nullable Output<Integer> version) {
            $.version = version;
            return this;
        }

        public Builder version(Integer version) {
            return version(Output.of(version));
        }

        public SamplingRuleState build() {
            return $;
        }
    }

}
