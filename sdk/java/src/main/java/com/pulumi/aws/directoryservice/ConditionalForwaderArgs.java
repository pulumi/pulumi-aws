// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.directoryservice;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class ConditionalForwaderArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConditionalForwaderArgs Empty = new ConditionalForwaderArgs();

    @Import(name="directoryId", required=true)
    private Output<String> directoryId;

    public Output<String> directoryId() {
        return this.directoryId;
    }

    @Import(name="dnsIps", required=true)
    private Output<List<String>> dnsIps;

    public Output<List<String>> dnsIps() {
        return this.dnsIps;
    }

    @Import(name="remoteDomainName", required=true)
    private Output<String> remoteDomainName;

    public Output<String> remoteDomainName() {
        return this.remoteDomainName;
    }

    private ConditionalForwaderArgs() {}

    private ConditionalForwaderArgs(ConditionalForwaderArgs $) {
        this.directoryId = $.directoryId;
        this.dnsIps = $.dnsIps;
        this.remoteDomainName = $.remoteDomainName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConditionalForwaderArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConditionalForwaderArgs $;

        public Builder() {
            $ = new ConditionalForwaderArgs();
        }

        public Builder(ConditionalForwaderArgs defaults) {
            $ = new ConditionalForwaderArgs(Objects.requireNonNull(defaults));
        }

        public Builder directoryId(Output<String> directoryId) {
            $.directoryId = directoryId;
            return this;
        }

        public Builder directoryId(String directoryId) {
            return directoryId(Output.of(directoryId));
        }

        public Builder dnsIps(Output<List<String>> dnsIps) {
            $.dnsIps = dnsIps;
            return this;
        }

        public Builder dnsIps(List<String> dnsIps) {
            return dnsIps(Output.of(dnsIps));
        }

        public Builder dnsIps(String... dnsIps) {
            return dnsIps(List.of(dnsIps));
        }

        public Builder remoteDomainName(Output<String> remoteDomainName) {
            $.remoteDomainName = remoteDomainName;
            return this;
        }

        public Builder remoteDomainName(String remoteDomainName) {
            return remoteDomainName(Output.of(remoteDomainName));
        }

        public ConditionalForwaderArgs build() {
            $.directoryId = Objects.requireNonNull($.directoryId, "expected parameter 'directoryId' to be non-null");
            $.dnsIps = Objects.requireNonNull($.dnsIps, "expected parameter 'dnsIps' to be non-null");
            $.remoteDomainName = Objects.requireNonNull($.remoteDomainName, "expected parameter 'remoteDomainName' to be non-null");
            return $;
        }
    }

}
