// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.datazone.inputs;

import com.pulumi.aws.datazone.inputs.ProjectFailureReasonArgs;
import com.pulumi.aws.datazone.inputs.ProjectTimeoutsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProjectState extends com.pulumi.resources.ResourceArgs {

    public static final ProjectState Empty = new ProjectState();

    /**
     * Timestamp of when the project was made.
     * 
     */
    @Import(name="createdAt")
    private @Nullable Output<String> createdAt;

    /**
     * @return Timestamp of when the project was made.
     * 
     */
    public Optional<Output<String>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    /**
     * Creator of the project.
     * 
     */
    @Import(name="createdBy")
    private @Nullable Output<String> createdBy;

    /**
     * @return Creator of the project.
     * 
     */
    public Optional<Output<String>> createdBy() {
        return Optional.ofNullable(this.createdBy);
    }

    /**
     * Description of project.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of project.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Identifier of domain which the project is part of. Must follow the regex of `^dzd[-_][a-zA-Z0-9_-]{1,36}$`.
     * 
     */
    @Import(name="domainIdentifier")
    private @Nullable Output<String> domainIdentifier;

    /**
     * @return Identifier of domain which the project is part of. Must follow the regex of `^dzd[-_][a-zA-Z0-9_-]{1,36}$`.
     * 
     */
    public Optional<Output<String>> domainIdentifier() {
        return Optional.ofNullable(this.domainIdentifier);
    }

    /**
     * List of error messages if operation cannot be completed.
     * 
     */
    @Import(name="failureReasons")
    private @Nullable Output<List<ProjectFailureReasonArgs>> failureReasons;

    /**
     * @return List of error messages if operation cannot be completed.
     * 
     */
    public Optional<Output<List<ProjectFailureReasonArgs>>> failureReasons() {
        return Optional.ofNullable(this.failureReasons);
    }

    /**
     * List of glossary terms that can be used in the project. The list cannot be empty or include over 20 values. Each value must follow the regex of `[a-zA-Z0-9_-]{1,36}$`.
     * 
     */
    @Import(name="glossaryTerms")
    private @Nullable Output<List<String>> glossaryTerms;

    /**
     * @return List of glossary terms that can be used in the project. The list cannot be empty or include over 20 values. Each value must follow the regex of `[a-zA-Z0-9_-]{1,36}$`.
     * 
     */
    public Optional<Output<List<String>>> glossaryTerms() {
        return Optional.ofNullable(this.glossaryTerms);
    }

    /**
     * Timestamp of when the project was last updated.
     * 
     */
    @Import(name="lastUpdatedAt")
    private @Nullable Output<String> lastUpdatedAt;

    /**
     * @return Timestamp of when the project was last updated.
     * 
     */
    public Optional<Output<String>> lastUpdatedAt() {
        return Optional.ofNullable(this.lastUpdatedAt);
    }

    /**
     * Name of the project. Must follow the regex of `^[\w -]+$`. and have a length of at most 64.
     * 
     * The following arguments are optional:
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the project. Must follow the regex of `^[\w -]+$`. and have a length of at most 64.
     * 
     * The following arguments are optional:
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Enum that conveys state of project. Can be `ACTIVE`, `DELETING`, or `DELETE_FAILED`.
     * 
     */
    @Import(name="projectStatus")
    private @Nullable Output<String> projectStatus;

    /**
     * @return Enum that conveys state of project. Can be `ACTIVE`, `DELETING`, or `DELETE_FAILED`.
     * 
     */
    public Optional<Output<String>> projectStatus() {
        return Optional.ofNullable(this.projectStatus);
    }

    /**
     * Optional flag to delete all child entities within the project.
     * 
     */
    @Import(name="skipDeletionCheck")
    private @Nullable Output<Boolean> skipDeletionCheck;

    /**
     * @return Optional flag to delete all child entities within the project.
     * 
     */
    public Optional<Output<Boolean>> skipDeletionCheck() {
        return Optional.ofNullable(this.skipDeletionCheck);
    }

    @Import(name="timeouts")
    private @Nullable Output<ProjectTimeoutsArgs> timeouts;

    public Optional<Output<ProjectTimeoutsArgs>> timeouts() {
        return Optional.ofNullable(this.timeouts);
    }

    private ProjectState() {}

    private ProjectState(ProjectState $) {
        this.createdAt = $.createdAt;
        this.createdBy = $.createdBy;
        this.description = $.description;
        this.domainIdentifier = $.domainIdentifier;
        this.failureReasons = $.failureReasons;
        this.glossaryTerms = $.glossaryTerms;
        this.lastUpdatedAt = $.lastUpdatedAt;
        this.name = $.name;
        this.projectStatus = $.projectStatus;
        this.skipDeletionCheck = $.skipDeletionCheck;
        this.timeouts = $.timeouts;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectState $;

        public Builder() {
            $ = new ProjectState();
        }

        public Builder(ProjectState defaults) {
            $ = new ProjectState(Objects.requireNonNull(defaults));
        }

        /**
         * @param createdAt Timestamp of when the project was made.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(@Nullable Output<String> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        /**
         * @param createdAt Timestamp of when the project was made.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(String createdAt) {
            return createdAt(Output.of(createdAt));
        }

        /**
         * @param createdBy Creator of the project.
         * 
         * @return builder
         * 
         */
        public Builder createdBy(@Nullable Output<String> createdBy) {
            $.createdBy = createdBy;
            return this;
        }

        /**
         * @param createdBy Creator of the project.
         * 
         * @return builder
         * 
         */
        public Builder createdBy(String createdBy) {
            return createdBy(Output.of(createdBy));
        }

        /**
         * @param description Description of project.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of project.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param domainIdentifier Identifier of domain which the project is part of. Must follow the regex of `^dzd[-_][a-zA-Z0-9_-]{1,36}$`.
         * 
         * @return builder
         * 
         */
        public Builder domainIdentifier(@Nullable Output<String> domainIdentifier) {
            $.domainIdentifier = domainIdentifier;
            return this;
        }

        /**
         * @param domainIdentifier Identifier of domain which the project is part of. Must follow the regex of `^dzd[-_][a-zA-Z0-9_-]{1,36}$`.
         * 
         * @return builder
         * 
         */
        public Builder domainIdentifier(String domainIdentifier) {
            return domainIdentifier(Output.of(domainIdentifier));
        }

        /**
         * @param failureReasons List of error messages if operation cannot be completed.
         * 
         * @return builder
         * 
         */
        public Builder failureReasons(@Nullable Output<List<ProjectFailureReasonArgs>> failureReasons) {
            $.failureReasons = failureReasons;
            return this;
        }

        /**
         * @param failureReasons List of error messages if operation cannot be completed.
         * 
         * @return builder
         * 
         */
        public Builder failureReasons(List<ProjectFailureReasonArgs> failureReasons) {
            return failureReasons(Output.of(failureReasons));
        }

        /**
         * @param failureReasons List of error messages if operation cannot be completed.
         * 
         * @return builder
         * 
         */
        public Builder failureReasons(ProjectFailureReasonArgs... failureReasons) {
            return failureReasons(List.of(failureReasons));
        }

        /**
         * @param glossaryTerms List of glossary terms that can be used in the project. The list cannot be empty or include over 20 values. Each value must follow the regex of `[a-zA-Z0-9_-]{1,36}$`.
         * 
         * @return builder
         * 
         */
        public Builder glossaryTerms(@Nullable Output<List<String>> glossaryTerms) {
            $.glossaryTerms = glossaryTerms;
            return this;
        }

        /**
         * @param glossaryTerms List of glossary terms that can be used in the project. The list cannot be empty or include over 20 values. Each value must follow the regex of `[a-zA-Z0-9_-]{1,36}$`.
         * 
         * @return builder
         * 
         */
        public Builder glossaryTerms(List<String> glossaryTerms) {
            return glossaryTerms(Output.of(glossaryTerms));
        }

        /**
         * @param glossaryTerms List of glossary terms that can be used in the project. The list cannot be empty or include over 20 values. Each value must follow the regex of `[a-zA-Z0-9_-]{1,36}$`.
         * 
         * @return builder
         * 
         */
        public Builder glossaryTerms(String... glossaryTerms) {
            return glossaryTerms(List.of(glossaryTerms));
        }

        /**
         * @param lastUpdatedAt Timestamp of when the project was last updated.
         * 
         * @return builder
         * 
         */
        public Builder lastUpdatedAt(@Nullable Output<String> lastUpdatedAt) {
            $.lastUpdatedAt = lastUpdatedAt;
            return this;
        }

        /**
         * @param lastUpdatedAt Timestamp of when the project was last updated.
         * 
         * @return builder
         * 
         */
        public Builder lastUpdatedAt(String lastUpdatedAt) {
            return lastUpdatedAt(Output.of(lastUpdatedAt));
        }

        /**
         * @param name Name of the project. Must follow the regex of `^[\w -]+$`. and have a length of at most 64.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the project. Must follow the regex of `^[\w -]+$`. and have a length of at most 64.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param projectStatus Enum that conveys state of project. Can be `ACTIVE`, `DELETING`, or `DELETE_FAILED`.
         * 
         * @return builder
         * 
         */
        public Builder projectStatus(@Nullable Output<String> projectStatus) {
            $.projectStatus = projectStatus;
            return this;
        }

        /**
         * @param projectStatus Enum that conveys state of project. Can be `ACTIVE`, `DELETING`, or `DELETE_FAILED`.
         * 
         * @return builder
         * 
         */
        public Builder projectStatus(String projectStatus) {
            return projectStatus(Output.of(projectStatus));
        }

        /**
         * @param skipDeletionCheck Optional flag to delete all child entities within the project.
         * 
         * @return builder
         * 
         */
        public Builder skipDeletionCheck(@Nullable Output<Boolean> skipDeletionCheck) {
            $.skipDeletionCheck = skipDeletionCheck;
            return this;
        }

        /**
         * @param skipDeletionCheck Optional flag to delete all child entities within the project.
         * 
         * @return builder
         * 
         */
        public Builder skipDeletionCheck(Boolean skipDeletionCheck) {
            return skipDeletionCheck(Output.of(skipDeletionCheck));
        }

        public Builder timeouts(@Nullable Output<ProjectTimeoutsArgs> timeouts) {
            $.timeouts = timeouts;
            return this;
        }

        public Builder timeouts(ProjectTimeoutsArgs timeouts) {
            return timeouts(Output.of(timeouts));
        }

        public ProjectState build() {
            return $;
        }
    }

}
