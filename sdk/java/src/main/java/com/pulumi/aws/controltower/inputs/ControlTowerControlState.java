// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.controltower.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ControlTowerControlState extends com.pulumi.resources.ResourceArgs {

    public static final ControlTowerControlState Empty = new ControlTowerControlState();

    /**
     * The ARN of the control. Only Strongly recommended and Elective controls are permitted, with the exception of the Region deny guardrail.
     * 
     */
    @Import(name="controlIdentifier")
    private @Nullable Output<String> controlIdentifier;

    /**
     * @return The ARN of the control. Only Strongly recommended and Elective controls are permitted, with the exception of the Region deny guardrail.
     * 
     */
    public Optional<Output<String>> controlIdentifier() {
        return Optional.ofNullable(this.controlIdentifier);
    }

    /**
     * The ARN of the organizational unit.
     * 
     */
    @Import(name="targetIdentifier")
    private @Nullable Output<String> targetIdentifier;

    /**
     * @return The ARN of the organizational unit.
     * 
     */
    public Optional<Output<String>> targetIdentifier() {
        return Optional.ofNullable(this.targetIdentifier);
    }

    private ControlTowerControlState() {}

    private ControlTowerControlState(ControlTowerControlState $) {
        this.controlIdentifier = $.controlIdentifier;
        this.targetIdentifier = $.targetIdentifier;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ControlTowerControlState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ControlTowerControlState $;

        public Builder() {
            $ = new ControlTowerControlState();
        }

        public Builder(ControlTowerControlState defaults) {
            $ = new ControlTowerControlState(Objects.requireNonNull(defaults));
        }

        /**
         * @param controlIdentifier The ARN of the control. Only Strongly recommended and Elective controls are permitted, with the exception of the Region deny guardrail.
         * 
         * @return builder
         * 
         */
        public Builder controlIdentifier(@Nullable Output<String> controlIdentifier) {
            $.controlIdentifier = controlIdentifier;
            return this;
        }

        /**
         * @param controlIdentifier The ARN of the control. Only Strongly recommended and Elective controls are permitted, with the exception of the Region deny guardrail.
         * 
         * @return builder
         * 
         */
        public Builder controlIdentifier(String controlIdentifier) {
            return controlIdentifier(Output.of(controlIdentifier));
        }

        /**
         * @param targetIdentifier The ARN of the organizational unit.
         * 
         * @return builder
         * 
         */
        public Builder targetIdentifier(@Nullable Output<String> targetIdentifier) {
            $.targetIdentifier = targetIdentifier;
            return this;
        }

        /**
         * @param targetIdentifier The ARN of the organizational unit.
         * 
         * @return builder
         * 
         */
        public Builder targetIdentifier(String targetIdentifier) {
            return targetIdentifier(Output.of(targetIdentifier));
        }

        public ControlTowerControlState build() {
            return $;
        }
    }

}
