// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.scheduler.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ScheduleFlexibleTimeWindowArgs extends com.pulumi.resources.ResourceArgs {

    public static final ScheduleFlexibleTimeWindowArgs Empty = new ScheduleFlexibleTimeWindowArgs();

    /**
     * Maximum time window during which a schedule can be invoked. Ranges from `1` to `1440` minutes.
     * 
     */
    @Import(name="maximumWindowInMinutes")
    private @Nullable Output<Integer> maximumWindowInMinutes;

    /**
     * @return Maximum time window during which a schedule can be invoked. Ranges from `1` to `1440` minutes.
     * 
     */
    public Optional<Output<Integer>> maximumWindowInMinutes() {
        return Optional.ofNullable(this.maximumWindowInMinutes);
    }

    /**
     * Determines whether the schedule is invoked within a flexible time window. One of: `OFF`, `FLEXIBLE`.
     * 
     */
    @Import(name="mode", required=true)
    private Output<String> mode;

    /**
     * @return Determines whether the schedule is invoked within a flexible time window. One of: `OFF`, `FLEXIBLE`.
     * 
     */
    public Output<String> mode() {
        return this.mode;
    }

    private ScheduleFlexibleTimeWindowArgs() {}

    private ScheduleFlexibleTimeWindowArgs(ScheduleFlexibleTimeWindowArgs $) {
        this.maximumWindowInMinutes = $.maximumWindowInMinutes;
        this.mode = $.mode;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ScheduleFlexibleTimeWindowArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ScheduleFlexibleTimeWindowArgs $;

        public Builder() {
            $ = new ScheduleFlexibleTimeWindowArgs();
        }

        public Builder(ScheduleFlexibleTimeWindowArgs defaults) {
            $ = new ScheduleFlexibleTimeWindowArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param maximumWindowInMinutes Maximum time window during which a schedule can be invoked. Ranges from `1` to `1440` minutes.
         * 
         * @return builder
         * 
         */
        public Builder maximumWindowInMinutes(@Nullable Output<Integer> maximumWindowInMinutes) {
            $.maximumWindowInMinutes = maximumWindowInMinutes;
            return this;
        }

        /**
         * @param maximumWindowInMinutes Maximum time window during which a schedule can be invoked. Ranges from `1` to `1440` minutes.
         * 
         * @return builder
         * 
         */
        public Builder maximumWindowInMinutes(Integer maximumWindowInMinutes) {
            return maximumWindowInMinutes(Output.of(maximumWindowInMinutes));
        }

        /**
         * @param mode Determines whether the schedule is invoked within a flexible time window. One of: `OFF`, `FLEXIBLE`.
         * 
         * @return builder
         * 
         */
        public Builder mode(Output<String> mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param mode Determines whether the schedule is invoked within a flexible time window. One of: `OFF`, `FLEXIBLE`.
         * 
         * @return builder
         * 
         */
        public Builder mode(String mode) {
            return mode(Output.of(mode));
        }

        public ScheduleFlexibleTimeWindowArgs build() {
            if ($.mode == null) {
                throw new MissingRequiredPropertyException("ScheduleFlexibleTimeWindowArgs", "mode");
            }
            return $;
        }
    }

}
