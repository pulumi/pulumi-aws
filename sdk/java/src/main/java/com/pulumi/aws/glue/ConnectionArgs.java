// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.glue;

import com.pulumi.aws.glue.inputs.ConnectionPhysicalConnectionRequirementsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConnectionArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConnectionArgs Empty = new ConnectionArgs();

    @Import(name="catalogId")
    private @Nullable Output<String> catalogId;

    public Optional<Output<String>> catalogId() {
        return Optional.ofNullable(this.catalogId);
    }

    @Import(name="connectionProperties")
    private @Nullable Output<Map<String,String>> connectionProperties;

    public Optional<Output<Map<String,String>>> connectionProperties() {
        return Optional.ofNullable(this.connectionProperties);
    }

    @Import(name="connectionType")
    private @Nullable Output<String> connectionType;

    public Optional<Output<String>> connectionType() {
        return Optional.ofNullable(this.connectionType);
    }

    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="matchCriterias")
    private @Nullable Output<List<String>> matchCriterias;

    public Optional<Output<List<String>>> matchCriterias() {
        return Optional.ofNullable(this.matchCriterias);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="physicalConnectionRequirements")
    private @Nullable Output<ConnectionPhysicalConnectionRequirementsArgs> physicalConnectionRequirements;

    public Optional<Output<ConnectionPhysicalConnectionRequirementsArgs>> physicalConnectionRequirements() {
        return Optional.ofNullable(this.physicalConnectionRequirements);
    }

    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private ConnectionArgs() {}

    private ConnectionArgs(ConnectionArgs $) {
        this.catalogId = $.catalogId;
        this.connectionProperties = $.connectionProperties;
        this.connectionType = $.connectionType;
        this.description = $.description;
        this.matchCriterias = $.matchCriterias;
        this.name = $.name;
        this.physicalConnectionRequirements = $.physicalConnectionRequirements;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectionArgs $;

        public Builder() {
            $ = new ConnectionArgs();
        }

        public Builder(ConnectionArgs defaults) {
            $ = new ConnectionArgs(Objects.requireNonNull(defaults));
        }

        public Builder catalogId(@Nullable Output<String> catalogId) {
            $.catalogId = catalogId;
            return this;
        }

        public Builder catalogId(String catalogId) {
            return catalogId(Output.of(catalogId));
        }

        public Builder connectionProperties(@Nullable Output<Map<String,String>> connectionProperties) {
            $.connectionProperties = connectionProperties;
            return this;
        }

        public Builder connectionProperties(Map<String,String> connectionProperties) {
            return connectionProperties(Output.of(connectionProperties));
        }

        public Builder connectionType(@Nullable Output<String> connectionType) {
            $.connectionType = connectionType;
            return this;
        }

        public Builder connectionType(String connectionType) {
            return connectionType(Output.of(connectionType));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder matchCriterias(@Nullable Output<List<String>> matchCriterias) {
            $.matchCriterias = matchCriterias;
            return this;
        }

        public Builder matchCriterias(List<String> matchCriterias) {
            return matchCriterias(Output.of(matchCriterias));
        }

        public Builder matchCriterias(String... matchCriterias) {
            return matchCriterias(List.of(matchCriterias));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder physicalConnectionRequirements(@Nullable Output<ConnectionPhysicalConnectionRequirementsArgs> physicalConnectionRequirements) {
            $.physicalConnectionRequirements = physicalConnectionRequirements;
            return this;
        }

        public Builder physicalConnectionRequirements(ConnectionPhysicalConnectionRequirementsArgs physicalConnectionRequirements) {
            return physicalConnectionRequirements(Output.of(physicalConnectionRequirements));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public ConnectionArgs build() {
            return $;
        }
    }

}
