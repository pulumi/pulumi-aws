// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.lambda.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EventSourceMappingScalingConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final EventSourceMappingScalingConfigArgs Empty = new EventSourceMappingScalingConfigArgs();

    /**
     * Limits the number of concurrent instances that the Amazon SQS event source can invoke. Must be greater than or equal to `2`. See [Configuring maximum concurrency for Amazon SQS event sources](https://docs.aws.amazon.com/lambda/latest/dg/with-sqs.html#events-sqs-max-concurrency). You need to raise a [Service Quota Ticket](https://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html) to increase the concurrency beyond 1000.
     * 
     */
    @Import(name="maximumConcurrency")
    private @Nullable Output<Integer> maximumConcurrency;

    /**
     * @return Limits the number of concurrent instances that the Amazon SQS event source can invoke. Must be greater than or equal to `2`. See [Configuring maximum concurrency for Amazon SQS event sources](https://docs.aws.amazon.com/lambda/latest/dg/with-sqs.html#events-sqs-max-concurrency). You need to raise a [Service Quota Ticket](https://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html) to increase the concurrency beyond 1000.
     * 
     */
    public Optional<Output<Integer>> maximumConcurrency() {
        return Optional.ofNullable(this.maximumConcurrency);
    }

    private EventSourceMappingScalingConfigArgs() {}

    private EventSourceMappingScalingConfigArgs(EventSourceMappingScalingConfigArgs $) {
        this.maximumConcurrency = $.maximumConcurrency;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EventSourceMappingScalingConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EventSourceMappingScalingConfigArgs $;

        public Builder() {
            $ = new EventSourceMappingScalingConfigArgs();
        }

        public Builder(EventSourceMappingScalingConfigArgs defaults) {
            $ = new EventSourceMappingScalingConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param maximumConcurrency Limits the number of concurrent instances that the Amazon SQS event source can invoke. Must be greater than or equal to `2`. See [Configuring maximum concurrency for Amazon SQS event sources](https://docs.aws.amazon.com/lambda/latest/dg/with-sqs.html#events-sqs-max-concurrency). You need to raise a [Service Quota Ticket](https://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html) to increase the concurrency beyond 1000.
         * 
         * @return builder
         * 
         */
        public Builder maximumConcurrency(@Nullable Output<Integer> maximumConcurrency) {
            $.maximumConcurrency = maximumConcurrency;
            return this;
        }

        /**
         * @param maximumConcurrency Limits the number of concurrent instances that the Amazon SQS event source can invoke. Must be greater than or equal to `2`. See [Configuring maximum concurrency for Amazon SQS event sources](https://docs.aws.amazon.com/lambda/latest/dg/with-sqs.html#events-sqs-max-concurrency). You need to raise a [Service Quota Ticket](https://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html) to increase the concurrency beyond 1000.
         * 
         * @return builder
         * 
         */
        public Builder maximumConcurrency(Integer maximumConcurrency) {
            return maximumConcurrency(Output.of(maximumConcurrency));
        }

        public EventSourceMappingScalingConfigArgs build() {
            return $;
        }
    }

}
