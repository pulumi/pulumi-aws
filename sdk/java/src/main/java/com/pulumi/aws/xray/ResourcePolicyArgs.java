// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.xray;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ResourcePolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final ResourcePolicyArgs Empty = new ResourcePolicyArgs();

    /**
     * Flag to indicate whether to bypass the resource policy lockout safety check. Setting this value to true increases the risk that the policy becomes unmanageable. Do not set this value to true indiscriminately. Use this parameter only when you include a policy in the request and you intend to prevent the principal that is making the request from making a subsequent PutResourcePolicy request. The default value is `false`.
     * 
     */
    @Import(name="bypassPolicyLockoutCheck")
    private @Nullable Output<Boolean> bypassPolicyLockoutCheck;

    /**
     * @return Flag to indicate whether to bypass the resource policy lockout safety check. Setting this value to true increases the risk that the policy becomes unmanageable. Do not set this value to true indiscriminately. Use this parameter only when you include a policy in the request and you intend to prevent the principal that is making the request from making a subsequent PutResourcePolicy request. The default value is `false`.
     * 
     */
    public Optional<Output<Boolean>> bypassPolicyLockoutCheck() {
        return Optional.ofNullable(this.bypassPolicyLockoutCheck);
    }

    /**
     * JSON string of the resource policy or resource policy document, which can be up to 5kb in size.
     * 
     * The following arguments are optional:
     * 
     */
    @Import(name="policyDocument", required=true)
    private Output<String> policyDocument;

    /**
     * @return JSON string of the resource policy or resource policy document, which can be up to 5kb in size.
     * 
     * The following arguments are optional:
     * 
     */
    public Output<String> policyDocument() {
        return this.policyDocument;
    }

    /**
     * name of the resource policy. Must be unique within a specific Amazon Web Services account.
     * 
     */
    @Import(name="policyName", required=true)
    private Output<String> policyName;

    /**
     * @return name of the resource policy. Must be unique within a specific Amazon Web Services account.
     * 
     */
    public Output<String> policyName() {
        return this.policyName;
    }

    /**
     * Specifies a specific policy revision, to ensure an atomic create operation. By default the resource policy is created if it does not exist, or updated with an incremented revision id. The revision id is unique to each policy in the account. If the policy revision id does not match the latest revision id, the operation will fail with an InvalidPolicyRevisionIdException exception. You can also provide a PolicyRevisionId of 0. In this case, the operation will fail with an InvalidPolicyRevisionIdException exception if a resource policy with the same name already exists.
     * 
     */
    @Import(name="policyRevisionId")
    private @Nullable Output<String> policyRevisionId;

    /**
     * @return Specifies a specific policy revision, to ensure an atomic create operation. By default the resource policy is created if it does not exist, or updated with an incremented revision id. The revision id is unique to each policy in the account. If the policy revision id does not match the latest revision id, the operation will fail with an InvalidPolicyRevisionIdException exception. You can also provide a PolicyRevisionId of 0. In this case, the operation will fail with an InvalidPolicyRevisionIdException exception if a resource policy with the same name already exists.
     * 
     */
    public Optional<Output<String>> policyRevisionId() {
        return Optional.ofNullable(this.policyRevisionId);
    }

    private ResourcePolicyArgs() {}

    private ResourcePolicyArgs(ResourcePolicyArgs $) {
        this.bypassPolicyLockoutCheck = $.bypassPolicyLockoutCheck;
        this.policyDocument = $.policyDocument;
        this.policyName = $.policyName;
        this.policyRevisionId = $.policyRevisionId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ResourcePolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ResourcePolicyArgs $;

        public Builder() {
            $ = new ResourcePolicyArgs();
        }

        public Builder(ResourcePolicyArgs defaults) {
            $ = new ResourcePolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bypassPolicyLockoutCheck Flag to indicate whether to bypass the resource policy lockout safety check. Setting this value to true increases the risk that the policy becomes unmanageable. Do not set this value to true indiscriminately. Use this parameter only when you include a policy in the request and you intend to prevent the principal that is making the request from making a subsequent PutResourcePolicy request. The default value is `false`.
         * 
         * @return builder
         * 
         */
        public Builder bypassPolicyLockoutCheck(@Nullable Output<Boolean> bypassPolicyLockoutCheck) {
            $.bypassPolicyLockoutCheck = bypassPolicyLockoutCheck;
            return this;
        }

        /**
         * @param bypassPolicyLockoutCheck Flag to indicate whether to bypass the resource policy lockout safety check. Setting this value to true increases the risk that the policy becomes unmanageable. Do not set this value to true indiscriminately. Use this parameter only when you include a policy in the request and you intend to prevent the principal that is making the request from making a subsequent PutResourcePolicy request. The default value is `false`.
         * 
         * @return builder
         * 
         */
        public Builder bypassPolicyLockoutCheck(Boolean bypassPolicyLockoutCheck) {
            return bypassPolicyLockoutCheck(Output.of(bypassPolicyLockoutCheck));
        }

        /**
         * @param policyDocument JSON string of the resource policy or resource policy document, which can be up to 5kb in size.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder policyDocument(Output<String> policyDocument) {
            $.policyDocument = policyDocument;
            return this;
        }

        /**
         * @param policyDocument JSON string of the resource policy or resource policy document, which can be up to 5kb in size.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder policyDocument(String policyDocument) {
            return policyDocument(Output.of(policyDocument));
        }

        /**
         * @param policyName name of the resource policy. Must be unique within a specific Amazon Web Services account.
         * 
         * @return builder
         * 
         */
        public Builder policyName(Output<String> policyName) {
            $.policyName = policyName;
            return this;
        }

        /**
         * @param policyName name of the resource policy. Must be unique within a specific Amazon Web Services account.
         * 
         * @return builder
         * 
         */
        public Builder policyName(String policyName) {
            return policyName(Output.of(policyName));
        }

        /**
         * @param policyRevisionId Specifies a specific policy revision, to ensure an atomic create operation. By default the resource policy is created if it does not exist, or updated with an incremented revision id. The revision id is unique to each policy in the account. If the policy revision id does not match the latest revision id, the operation will fail with an InvalidPolicyRevisionIdException exception. You can also provide a PolicyRevisionId of 0. In this case, the operation will fail with an InvalidPolicyRevisionIdException exception if a resource policy with the same name already exists.
         * 
         * @return builder
         * 
         */
        public Builder policyRevisionId(@Nullable Output<String> policyRevisionId) {
            $.policyRevisionId = policyRevisionId;
            return this;
        }

        /**
         * @param policyRevisionId Specifies a specific policy revision, to ensure an atomic create operation. By default the resource policy is created if it does not exist, or updated with an incremented revision id. The revision id is unique to each policy in the account. If the policy revision id does not match the latest revision id, the operation will fail with an InvalidPolicyRevisionIdException exception. You can also provide a PolicyRevisionId of 0. In this case, the operation will fail with an InvalidPolicyRevisionIdException exception if a resource policy with the same name already exists.
         * 
         * @return builder
         * 
         */
        public Builder policyRevisionId(String policyRevisionId) {
            return policyRevisionId(Output.of(policyRevisionId));
        }

        public ResourcePolicyArgs build() {
            if ($.policyDocument == null) {
                throw new MissingRequiredPropertyException("ResourcePolicyArgs", "policyDocument");
            }
            if ($.policyName == null) {
                throw new MissingRequiredPropertyException("ResourcePolicyArgs", "policyName");
            }
            return $;
        }
    }

}
