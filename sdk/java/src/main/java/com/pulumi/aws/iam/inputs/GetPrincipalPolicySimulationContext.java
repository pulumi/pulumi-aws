// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.iam.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class GetPrincipalPolicySimulationContext extends com.pulumi.resources.InvokeArgs {

    public static final GetPrincipalPolicySimulationContext Empty = new GetPrincipalPolicySimulationContext();

    /**
     * The context _condition key_ to set.
     * 
     * If you have policies containing `Condition` elements or using dynamic interpolations then you will need to provide suitable values for each condition key your policies use. See [Actions, resources, and condition keys for AWS services](https://docs.aws.amazon.com/service-authorization/latest/reference/reference_policies_actions-resources-contextkeys.html) to find the various condition keys that are normally provided for real requests to each action of each AWS service.
     * 
     */
    @Import(name="key", required=true)
    private String key;

    /**
     * @return The context _condition key_ to set.
     * 
     * If you have policies containing `Condition` elements or using dynamic interpolations then you will need to provide suitable values for each condition key your policies use. See [Actions, resources, and condition keys for AWS services](https://docs.aws.amazon.com/service-authorization/latest/reference/reference_policies_actions-resources-contextkeys.html) to find the various condition keys that are normally provided for real requests to each action of each AWS service.
     * 
     */
    public String key() {
        return this.key;
    }

    /**
     * An IAM value type that determines how the policy simulator will interpret the strings given in `values`.
     * 
     * For more information, see the `ContextKeyType` field of [`iam.ContextEntry`](https://docs.aws.amazon.com/IAM/latest/APIReference/API_ContextEntry.html) in the underlying API.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    /**
     * @return An IAM value type that determines how the policy simulator will interpret the strings given in `values`.
     * 
     * For more information, see the `ContextKeyType` field of [`iam.ContextEntry`](https://docs.aws.amazon.com/IAM/latest/APIReference/API_ContextEntry.html) in the underlying API.
     * 
     */
    public String type() {
        return this.type;
    }

    /**
     * A set of one or more values for this context entry.
     * 
     */
    @Import(name="values", required=true)
    private List<String> values;

    /**
     * @return A set of one or more values for this context entry.
     * 
     */
    public List<String> values() {
        return this.values;
    }

    private GetPrincipalPolicySimulationContext() {}

    private GetPrincipalPolicySimulationContext(GetPrincipalPolicySimulationContext $) {
        this.key = $.key;
        this.type = $.type;
        this.values = $.values;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetPrincipalPolicySimulationContext defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetPrincipalPolicySimulationContext $;

        public Builder() {
            $ = new GetPrincipalPolicySimulationContext();
        }

        public Builder(GetPrincipalPolicySimulationContext defaults) {
            $ = new GetPrincipalPolicySimulationContext(Objects.requireNonNull(defaults));
        }

        /**
         * @param key The context _condition key_ to set.
         * 
         * If you have policies containing `Condition` elements or using dynamic interpolations then you will need to provide suitable values for each condition key your policies use. See [Actions, resources, and condition keys for AWS services](https://docs.aws.amazon.com/service-authorization/latest/reference/reference_policies_actions-resources-contextkeys.html) to find the various condition keys that are normally provided for real requests to each action of each AWS service.
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            $.key = key;
            return this;
        }

        /**
         * @param type An IAM value type that determines how the policy simulator will interpret the strings given in `values`.
         * 
         * For more information, see the `ContextKeyType` field of [`iam.ContextEntry`](https://docs.aws.amazon.com/IAM/latest/APIReference/API_ContextEntry.html) in the underlying API.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            $.type = type;
            return this;
        }

        /**
         * @param values A set of one or more values for this context entry.
         * 
         * @return builder
         * 
         */
        public Builder values(List<String> values) {
            $.values = values;
            return this;
        }

        /**
         * @param values A set of one or more values for this context entry.
         * 
         * @return builder
         * 
         */
        public Builder values(String... values) {
            return values(List.of(values));
        }

        public GetPrincipalPolicySimulationContext build() {
            $.key = Objects.requireNonNull($.key, "expected parameter 'key' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            $.values = Objects.requireNonNull($.values, "expected parameter 'values' to be non-null");
            return $;
        }
    }

}
