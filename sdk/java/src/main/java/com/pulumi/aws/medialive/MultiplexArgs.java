// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.medialive;

import com.pulumi.aws.medialive.inputs.MultiplexMultiplexSettingsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MultiplexArgs extends com.pulumi.resources.ResourceArgs {

    public static final MultiplexArgs Empty = new MultiplexArgs();

    /**
     * A list of availability zones. You must specify exactly two.
     * 
     */
    @Import(name="availabilityZones", required=true)
    private Output<List<String>> availabilityZones;

    /**
     * @return A list of availability zones. You must specify exactly two.
     * 
     */
    public Output<List<String>> availabilityZones() {
        return this.availabilityZones;
    }

    /**
     * Multiplex settings. See Multiplex Settings for more details.
     * 
     */
    @Import(name="multiplexSettings")
    private @Nullable Output<MultiplexMultiplexSettingsArgs> multiplexSettings;

    /**
     * @return Multiplex settings. See Multiplex Settings for more details.
     * 
     */
    public Optional<Output<MultiplexMultiplexSettingsArgs>> multiplexSettings() {
        return Optional.ofNullable(this.multiplexSettings);
    }

    /**
     * name of Multiplex.
     * 
     * The following arguments are optional:
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return name of Multiplex.
     * 
     * The following arguments are optional:
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Whether to start the Multiplex. Defaults to `false`.
     * 
     */
    @Import(name="startMultiplex")
    private @Nullable Output<Boolean> startMultiplex;

    /**
     * @return Whether to start the Multiplex. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> startMultiplex() {
        return Optional.ofNullable(this.startMultiplex);
    }

    /**
     * A map of tags to assign to the Multiplex. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A map of tags to assign to the Multiplex. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private MultiplexArgs() {}

    private MultiplexArgs(MultiplexArgs $) {
        this.availabilityZones = $.availabilityZones;
        this.multiplexSettings = $.multiplexSettings;
        this.name = $.name;
        this.startMultiplex = $.startMultiplex;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MultiplexArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MultiplexArgs $;

        public Builder() {
            $ = new MultiplexArgs();
        }

        public Builder(MultiplexArgs defaults) {
            $ = new MultiplexArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param availabilityZones A list of availability zones. You must specify exactly two.
         * 
         * @return builder
         * 
         */
        public Builder availabilityZones(Output<List<String>> availabilityZones) {
            $.availabilityZones = availabilityZones;
            return this;
        }

        /**
         * @param availabilityZones A list of availability zones. You must specify exactly two.
         * 
         * @return builder
         * 
         */
        public Builder availabilityZones(List<String> availabilityZones) {
            return availabilityZones(Output.of(availabilityZones));
        }

        /**
         * @param availabilityZones A list of availability zones. You must specify exactly two.
         * 
         * @return builder
         * 
         */
        public Builder availabilityZones(String... availabilityZones) {
            return availabilityZones(List.of(availabilityZones));
        }

        /**
         * @param multiplexSettings Multiplex settings. See Multiplex Settings for more details.
         * 
         * @return builder
         * 
         */
        public Builder multiplexSettings(@Nullable Output<MultiplexMultiplexSettingsArgs> multiplexSettings) {
            $.multiplexSettings = multiplexSettings;
            return this;
        }

        /**
         * @param multiplexSettings Multiplex settings. See Multiplex Settings for more details.
         * 
         * @return builder
         * 
         */
        public Builder multiplexSettings(MultiplexMultiplexSettingsArgs multiplexSettings) {
            return multiplexSettings(Output.of(multiplexSettings));
        }

        /**
         * @param name name of Multiplex.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name name of Multiplex.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param startMultiplex Whether to start the Multiplex. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder startMultiplex(@Nullable Output<Boolean> startMultiplex) {
            $.startMultiplex = startMultiplex;
            return this;
        }

        /**
         * @param startMultiplex Whether to start the Multiplex. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder startMultiplex(Boolean startMultiplex) {
            return startMultiplex(Output.of(startMultiplex));
        }

        /**
         * @param tags A map of tags to assign to the Multiplex. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A map of tags to assign to the Multiplex. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public MultiplexArgs build() {
            $.availabilityZones = Objects.requireNonNull($.availabilityZones, "expected parameter 'availabilityZones' to be non-null");
            return $;
        }
    }

}
