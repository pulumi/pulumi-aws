// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ssoadmin;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ApplicationAccessScopeArgs extends com.pulumi.resources.ResourceArgs {

    public static final ApplicationAccessScopeArgs Empty = new ApplicationAccessScopeArgs();

    /**
     * Specifies the ARN of the application with the access scope with the targets to add or update.
     * 
     */
    @Import(name="applicationArn", required=true)
    private Output<String> applicationArn;

    /**
     * @return Specifies the ARN of the application with the access scope with the targets to add or update.
     * 
     */
    public Output<String> applicationArn() {
        return this.applicationArn;
    }

    /**
     * Specifies an array list of ARNs that represent the authorized targets for this access scope.
     * 
     */
    @Import(name="authorizedTargets")
    private @Nullable Output<List<String>> authorizedTargets;

    /**
     * @return Specifies an array list of ARNs that represent the authorized targets for this access scope.
     * 
     */
    public Optional<Output<List<String>>> authorizedTargets() {
        return Optional.ofNullable(this.authorizedTargets);
    }

    /**
     * Specifies the name of the access scope to be associated with the specified targets.
     * 
     * The following arguments are optional:
     * 
     */
    @Import(name="scope", required=true)
    private Output<String> scope;

    /**
     * @return Specifies the name of the access scope to be associated with the specified targets.
     * 
     * The following arguments are optional:
     * 
     */
    public Output<String> scope() {
        return this.scope;
    }

    private ApplicationAccessScopeArgs() {}

    private ApplicationAccessScopeArgs(ApplicationAccessScopeArgs $) {
        this.applicationArn = $.applicationArn;
        this.authorizedTargets = $.authorizedTargets;
        this.scope = $.scope;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApplicationAccessScopeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApplicationAccessScopeArgs $;

        public Builder() {
            $ = new ApplicationAccessScopeArgs();
        }

        public Builder(ApplicationAccessScopeArgs defaults) {
            $ = new ApplicationAccessScopeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param applicationArn Specifies the ARN of the application with the access scope with the targets to add or update.
         * 
         * @return builder
         * 
         */
        public Builder applicationArn(Output<String> applicationArn) {
            $.applicationArn = applicationArn;
            return this;
        }

        /**
         * @param applicationArn Specifies the ARN of the application with the access scope with the targets to add or update.
         * 
         * @return builder
         * 
         */
        public Builder applicationArn(String applicationArn) {
            return applicationArn(Output.of(applicationArn));
        }

        /**
         * @param authorizedTargets Specifies an array list of ARNs that represent the authorized targets for this access scope.
         * 
         * @return builder
         * 
         */
        public Builder authorizedTargets(@Nullable Output<List<String>> authorizedTargets) {
            $.authorizedTargets = authorizedTargets;
            return this;
        }

        /**
         * @param authorizedTargets Specifies an array list of ARNs that represent the authorized targets for this access scope.
         * 
         * @return builder
         * 
         */
        public Builder authorizedTargets(List<String> authorizedTargets) {
            return authorizedTargets(Output.of(authorizedTargets));
        }

        /**
         * @param authorizedTargets Specifies an array list of ARNs that represent the authorized targets for this access scope.
         * 
         * @return builder
         * 
         */
        public Builder authorizedTargets(String... authorizedTargets) {
            return authorizedTargets(List.of(authorizedTargets));
        }

        /**
         * @param scope Specifies the name of the access scope to be associated with the specified targets.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder scope(Output<String> scope) {
            $.scope = scope;
            return this;
        }

        /**
         * @param scope Specifies the name of the access scope to be associated with the specified targets.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder scope(String scope) {
            return scope(Output.of(scope));
        }

        public ApplicationAccessScopeArgs build() {
            if ($.applicationArn == null) {
                throw new MissingRequiredPropertyException("ApplicationAccessScopeArgs", "applicationArn");
            }
            if ($.scope == null) {
                throw new MissingRequiredPropertyException("ApplicationAccessScopeArgs", "scope");
            }
            return $;
        }
    }

}
