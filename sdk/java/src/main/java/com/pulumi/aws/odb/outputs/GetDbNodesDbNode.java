// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.odb.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetDbNodesDbNode {
    /**
     * @return Additional information about the planned maintenance.
     * 
     */
    private String additionalDetails;
    private String arn;
    /**
     * @return The Oracle Cloud ID (OCID) of the backup IP address that&#39;s associated with the DB node.
     * 
     */
    private String backupIpId;
    private String backupVnic2Id;
    /**
     * @return The OCID of the backup VNIC for the DB node.
     * 
     */
    private String backupVnicId;
    /**
     * @return The number of CPU cores enabled on the DB node.
     * 
     */
    private Integer cpuCoreCount;
    /**
     * @return The date and time when the DB node was created.
     * 
     */
    private String createdAt;
    private Integer dbNodeStorageSize;
    /**
     * @return The unique identifier of the database server that&#39;s associated with the DB node.
     * 
     */
    private String dbServerId;
    /**
     * @return The OCID of the DB system.
     * 
     */
    private String dbSystemId;
    /**
     * @return The name of the fault domain where the DB node is located.
     * 
     */
    private String faultDomain;
    /**
     * @return The OCID of the host IP address that&#39;s associated with the DB node.
     * 
     */
    private String hostIpId;
    /**
     * @return The host name for the DB node.
     * 
     */
    private String hostname;
    private String id;
    /**
     * @return The type of maintenance the DB node is undergoing.
     * 
     */
    private String maintenanceType;
    private Integer memorySize;
    /**
     * @return The name of the OCI resource anchor for the DB node.
     * 
     */
    private String ociResourceAnchorName;
    /**
     * @return The OCID of the DB node.
     * 
     */
    private String ocid;
    private Integer softwareStorageSize;
    /**
     * @return The current status of the DB node.
     * 
     */
    private String status;
    /**
     * @return Additional information about the status of the DB node.
     * 
     */
    private String statusReason;
    /**
     * @return The end date and time of the maintenance window.
     * 
     */
    private String timeMaintenanceWindowEnd;
    /**
     * @return The start date and time of the maintenance window.
     * 
     */
    private String timeMaintenanceWindowStart;
    /**
     * @return The total number of CPU cores reserved on the DB node.
     * 
     */
    private Integer totalCpuCoreCount;
    private String vnic2Id;
    /**
     * @return The OCID of the VNIC.
     * 
     */
    private String vnicId;

    private GetDbNodesDbNode() {}
    /**
     * @return Additional information about the planned maintenance.
     * 
     */
    public String additionalDetails() {
        return this.additionalDetails;
    }
    public String arn() {
        return this.arn;
    }
    /**
     * @return The Oracle Cloud ID (OCID) of the backup IP address that&#39;s associated with the DB node.
     * 
     */
    public String backupIpId() {
        return this.backupIpId;
    }
    public String backupVnic2Id() {
        return this.backupVnic2Id;
    }
    /**
     * @return The OCID of the backup VNIC for the DB node.
     * 
     */
    public String backupVnicId() {
        return this.backupVnicId;
    }
    /**
     * @return The number of CPU cores enabled on the DB node.
     * 
     */
    public Integer cpuCoreCount() {
        return this.cpuCoreCount;
    }
    /**
     * @return The date and time when the DB node was created.
     * 
     */
    public String createdAt() {
        return this.createdAt;
    }
    public Integer dbNodeStorageSize() {
        return this.dbNodeStorageSize;
    }
    /**
     * @return The unique identifier of the database server that&#39;s associated with the DB node.
     * 
     */
    public String dbServerId() {
        return this.dbServerId;
    }
    /**
     * @return The OCID of the DB system.
     * 
     */
    public String dbSystemId() {
        return this.dbSystemId;
    }
    /**
     * @return The name of the fault domain where the DB node is located.
     * 
     */
    public String faultDomain() {
        return this.faultDomain;
    }
    /**
     * @return The OCID of the host IP address that&#39;s associated with the DB node.
     * 
     */
    public String hostIpId() {
        return this.hostIpId;
    }
    /**
     * @return The host name for the DB node.
     * 
     */
    public String hostname() {
        return this.hostname;
    }
    public String id() {
        return this.id;
    }
    /**
     * @return The type of maintenance the DB node is undergoing.
     * 
     */
    public String maintenanceType() {
        return this.maintenanceType;
    }
    public Integer memorySize() {
        return this.memorySize;
    }
    /**
     * @return The name of the OCI resource anchor for the DB node.
     * 
     */
    public String ociResourceAnchorName() {
        return this.ociResourceAnchorName;
    }
    /**
     * @return The OCID of the DB node.
     * 
     */
    public String ocid() {
        return this.ocid;
    }
    public Integer softwareStorageSize() {
        return this.softwareStorageSize;
    }
    /**
     * @return The current status of the DB node.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return Additional information about the status of the DB node.
     * 
     */
    public String statusReason() {
        return this.statusReason;
    }
    /**
     * @return The end date and time of the maintenance window.
     * 
     */
    public String timeMaintenanceWindowEnd() {
        return this.timeMaintenanceWindowEnd;
    }
    /**
     * @return The start date and time of the maintenance window.
     * 
     */
    public String timeMaintenanceWindowStart() {
        return this.timeMaintenanceWindowStart;
    }
    /**
     * @return The total number of CPU cores reserved on the DB node.
     * 
     */
    public Integer totalCpuCoreCount() {
        return this.totalCpuCoreCount;
    }
    public String vnic2Id() {
        return this.vnic2Id;
    }
    /**
     * @return The OCID of the VNIC.
     * 
     */
    public String vnicId() {
        return this.vnicId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDbNodesDbNode defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String additionalDetails;
        private String arn;
        private String backupIpId;
        private String backupVnic2Id;
        private String backupVnicId;
        private Integer cpuCoreCount;
        private String createdAt;
        private Integer dbNodeStorageSize;
        private String dbServerId;
        private String dbSystemId;
        private String faultDomain;
        private String hostIpId;
        private String hostname;
        private String id;
        private String maintenanceType;
        private Integer memorySize;
        private String ociResourceAnchorName;
        private String ocid;
        private Integer softwareStorageSize;
        private String status;
        private String statusReason;
        private String timeMaintenanceWindowEnd;
        private String timeMaintenanceWindowStart;
        private Integer totalCpuCoreCount;
        private String vnic2Id;
        private String vnicId;
        public Builder() {}
        public Builder(GetDbNodesDbNode defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.additionalDetails = defaults.additionalDetails;
    	      this.arn = defaults.arn;
    	      this.backupIpId = defaults.backupIpId;
    	      this.backupVnic2Id = defaults.backupVnic2Id;
    	      this.backupVnicId = defaults.backupVnicId;
    	      this.cpuCoreCount = defaults.cpuCoreCount;
    	      this.createdAt = defaults.createdAt;
    	      this.dbNodeStorageSize = defaults.dbNodeStorageSize;
    	      this.dbServerId = defaults.dbServerId;
    	      this.dbSystemId = defaults.dbSystemId;
    	      this.faultDomain = defaults.faultDomain;
    	      this.hostIpId = defaults.hostIpId;
    	      this.hostname = defaults.hostname;
    	      this.id = defaults.id;
    	      this.maintenanceType = defaults.maintenanceType;
    	      this.memorySize = defaults.memorySize;
    	      this.ociResourceAnchorName = defaults.ociResourceAnchorName;
    	      this.ocid = defaults.ocid;
    	      this.softwareStorageSize = defaults.softwareStorageSize;
    	      this.status = defaults.status;
    	      this.statusReason = defaults.statusReason;
    	      this.timeMaintenanceWindowEnd = defaults.timeMaintenanceWindowEnd;
    	      this.timeMaintenanceWindowStart = defaults.timeMaintenanceWindowStart;
    	      this.totalCpuCoreCount = defaults.totalCpuCoreCount;
    	      this.vnic2Id = defaults.vnic2Id;
    	      this.vnicId = defaults.vnicId;
        }

        @CustomType.Setter
        public Builder additionalDetails(String additionalDetails) {
            if (additionalDetails == null) {
              throw new MissingRequiredPropertyException("GetDbNodesDbNode", "additionalDetails");
            }
            this.additionalDetails = additionalDetails;
            return this;
        }
        @CustomType.Setter
        public Builder arn(String arn) {
            if (arn == null) {
              throw new MissingRequiredPropertyException("GetDbNodesDbNode", "arn");
            }
            this.arn = arn;
            return this;
        }
        @CustomType.Setter
        public Builder backupIpId(String backupIpId) {
            if (backupIpId == null) {
              throw new MissingRequiredPropertyException("GetDbNodesDbNode", "backupIpId");
            }
            this.backupIpId = backupIpId;
            return this;
        }
        @CustomType.Setter
        public Builder backupVnic2Id(String backupVnic2Id) {
            if (backupVnic2Id == null) {
              throw new MissingRequiredPropertyException("GetDbNodesDbNode", "backupVnic2Id");
            }
            this.backupVnic2Id = backupVnic2Id;
            return this;
        }
        @CustomType.Setter
        public Builder backupVnicId(String backupVnicId) {
            if (backupVnicId == null) {
              throw new MissingRequiredPropertyException("GetDbNodesDbNode", "backupVnicId");
            }
            this.backupVnicId = backupVnicId;
            return this;
        }
        @CustomType.Setter
        public Builder cpuCoreCount(Integer cpuCoreCount) {
            if (cpuCoreCount == null) {
              throw new MissingRequiredPropertyException("GetDbNodesDbNode", "cpuCoreCount");
            }
            this.cpuCoreCount = cpuCoreCount;
            return this;
        }
        @CustomType.Setter
        public Builder createdAt(String createdAt) {
            if (createdAt == null) {
              throw new MissingRequiredPropertyException("GetDbNodesDbNode", "createdAt");
            }
            this.createdAt = createdAt;
            return this;
        }
        @CustomType.Setter
        public Builder dbNodeStorageSize(Integer dbNodeStorageSize) {
            if (dbNodeStorageSize == null) {
              throw new MissingRequiredPropertyException("GetDbNodesDbNode", "dbNodeStorageSize");
            }
            this.dbNodeStorageSize = dbNodeStorageSize;
            return this;
        }
        @CustomType.Setter
        public Builder dbServerId(String dbServerId) {
            if (dbServerId == null) {
              throw new MissingRequiredPropertyException("GetDbNodesDbNode", "dbServerId");
            }
            this.dbServerId = dbServerId;
            return this;
        }
        @CustomType.Setter
        public Builder dbSystemId(String dbSystemId) {
            if (dbSystemId == null) {
              throw new MissingRequiredPropertyException("GetDbNodesDbNode", "dbSystemId");
            }
            this.dbSystemId = dbSystemId;
            return this;
        }
        @CustomType.Setter
        public Builder faultDomain(String faultDomain) {
            if (faultDomain == null) {
              throw new MissingRequiredPropertyException("GetDbNodesDbNode", "faultDomain");
            }
            this.faultDomain = faultDomain;
            return this;
        }
        @CustomType.Setter
        public Builder hostIpId(String hostIpId) {
            if (hostIpId == null) {
              throw new MissingRequiredPropertyException("GetDbNodesDbNode", "hostIpId");
            }
            this.hostIpId = hostIpId;
            return this;
        }
        @CustomType.Setter
        public Builder hostname(String hostname) {
            if (hostname == null) {
              throw new MissingRequiredPropertyException("GetDbNodesDbNode", "hostname");
            }
            this.hostname = hostname;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetDbNodesDbNode", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder maintenanceType(String maintenanceType) {
            if (maintenanceType == null) {
              throw new MissingRequiredPropertyException("GetDbNodesDbNode", "maintenanceType");
            }
            this.maintenanceType = maintenanceType;
            return this;
        }
        @CustomType.Setter
        public Builder memorySize(Integer memorySize) {
            if (memorySize == null) {
              throw new MissingRequiredPropertyException("GetDbNodesDbNode", "memorySize");
            }
            this.memorySize = memorySize;
            return this;
        }
        @CustomType.Setter
        public Builder ociResourceAnchorName(String ociResourceAnchorName) {
            if (ociResourceAnchorName == null) {
              throw new MissingRequiredPropertyException("GetDbNodesDbNode", "ociResourceAnchorName");
            }
            this.ociResourceAnchorName = ociResourceAnchorName;
            return this;
        }
        @CustomType.Setter
        public Builder ocid(String ocid) {
            if (ocid == null) {
              throw new MissingRequiredPropertyException("GetDbNodesDbNode", "ocid");
            }
            this.ocid = ocid;
            return this;
        }
        @CustomType.Setter
        public Builder softwareStorageSize(Integer softwareStorageSize) {
            if (softwareStorageSize == null) {
              throw new MissingRequiredPropertyException("GetDbNodesDbNode", "softwareStorageSize");
            }
            this.softwareStorageSize = softwareStorageSize;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetDbNodesDbNode", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder statusReason(String statusReason) {
            if (statusReason == null) {
              throw new MissingRequiredPropertyException("GetDbNodesDbNode", "statusReason");
            }
            this.statusReason = statusReason;
            return this;
        }
        @CustomType.Setter
        public Builder timeMaintenanceWindowEnd(String timeMaintenanceWindowEnd) {
            if (timeMaintenanceWindowEnd == null) {
              throw new MissingRequiredPropertyException("GetDbNodesDbNode", "timeMaintenanceWindowEnd");
            }
            this.timeMaintenanceWindowEnd = timeMaintenanceWindowEnd;
            return this;
        }
        @CustomType.Setter
        public Builder timeMaintenanceWindowStart(String timeMaintenanceWindowStart) {
            if (timeMaintenanceWindowStart == null) {
              throw new MissingRequiredPropertyException("GetDbNodesDbNode", "timeMaintenanceWindowStart");
            }
            this.timeMaintenanceWindowStart = timeMaintenanceWindowStart;
            return this;
        }
        @CustomType.Setter
        public Builder totalCpuCoreCount(Integer totalCpuCoreCount) {
            if (totalCpuCoreCount == null) {
              throw new MissingRequiredPropertyException("GetDbNodesDbNode", "totalCpuCoreCount");
            }
            this.totalCpuCoreCount = totalCpuCoreCount;
            return this;
        }
        @CustomType.Setter
        public Builder vnic2Id(String vnic2Id) {
            if (vnic2Id == null) {
              throw new MissingRequiredPropertyException("GetDbNodesDbNode", "vnic2Id");
            }
            this.vnic2Id = vnic2Id;
            return this;
        }
        @CustomType.Setter
        public Builder vnicId(String vnicId) {
            if (vnicId == null) {
              throw new MissingRequiredPropertyException("GetDbNodesDbNode", "vnicId");
            }
            this.vnicId = vnicId;
            return this;
        }
        public GetDbNodesDbNode build() {
            final var _resultValue = new GetDbNodesDbNode();
            _resultValue.additionalDetails = additionalDetails;
            _resultValue.arn = arn;
            _resultValue.backupIpId = backupIpId;
            _resultValue.backupVnic2Id = backupVnic2Id;
            _resultValue.backupVnicId = backupVnicId;
            _resultValue.cpuCoreCount = cpuCoreCount;
            _resultValue.createdAt = createdAt;
            _resultValue.dbNodeStorageSize = dbNodeStorageSize;
            _resultValue.dbServerId = dbServerId;
            _resultValue.dbSystemId = dbSystemId;
            _resultValue.faultDomain = faultDomain;
            _resultValue.hostIpId = hostIpId;
            _resultValue.hostname = hostname;
            _resultValue.id = id;
            _resultValue.maintenanceType = maintenanceType;
            _resultValue.memorySize = memorySize;
            _resultValue.ociResourceAnchorName = ociResourceAnchorName;
            _resultValue.ocid = ocid;
            _resultValue.softwareStorageSize = softwareStorageSize;
            _resultValue.status = status;
            _resultValue.statusReason = statusReason;
            _resultValue.timeMaintenanceWindowEnd = timeMaintenanceWindowEnd;
            _resultValue.timeMaintenanceWindowStart = timeMaintenanceWindowStart;
            _resultValue.totalCpuCoreCount = totalCpuCoreCount;
            _resultValue.vnic2Id = vnic2Id;
            _resultValue.vnicId = vnicId;
            return _resultValue;
        }
    }
}
