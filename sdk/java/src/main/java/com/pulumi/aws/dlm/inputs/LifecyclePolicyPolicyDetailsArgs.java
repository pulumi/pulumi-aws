// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.dlm.inputs;

import com.pulumi.aws.dlm.inputs.LifecyclePolicyPolicyDetailsActionArgs;
import com.pulumi.aws.dlm.inputs.LifecyclePolicyPolicyDetailsEventSourceArgs;
import com.pulumi.aws.dlm.inputs.LifecyclePolicyPolicyDetailsExclusionsArgs;
import com.pulumi.aws.dlm.inputs.LifecyclePolicyPolicyDetailsParametersArgs;
import com.pulumi.aws.dlm.inputs.LifecyclePolicyPolicyDetailsScheduleArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LifecyclePolicyPolicyDetailsArgs extends com.pulumi.resources.ResourceArgs {

    public static final LifecyclePolicyPolicyDetailsArgs Empty = new LifecyclePolicyPolicyDetailsArgs();

    /**
     * The actions to be performed when the event-based policy is triggered. You can specify only one action per policy. This parameter is required for event-based policies only. If you are creating a snapshot or AMI policy, omit this parameter. See the `action` configuration block.
     * 
     */
    @Import(name="action")
    private @Nullable Output<LifecyclePolicyPolicyDetailsActionArgs> action;

    /**
     * @return The actions to be performed when the event-based policy is triggered. You can specify only one action per policy. This parameter is required for event-based policies only. If you are creating a snapshot or AMI policy, omit this parameter. See the `action` configuration block.
     * 
     */
    public Optional<Output<LifecyclePolicyPolicyDetailsActionArgs>> action() {
        return Optional.ofNullable(this.action);
    }

    @Import(name="copyTags")
    private @Nullable Output<Boolean> copyTags;

    public Optional<Output<Boolean>> copyTags() {
        return Optional.ofNullable(this.copyTags);
    }

    /**
     * How often the policy should run and create snapshots or AMIs. valid values range from `1` to `7`. Default value is `1`.
     * 
     */
    @Import(name="createInterval")
    private @Nullable Output<Integer> createInterval;

    /**
     * @return How often the policy should run and create snapshots or AMIs. valid values range from `1` to `7`. Default value is `1`.
     * 
     */
    public Optional<Output<Integer>> createInterval() {
        return Optional.ofNullable(this.createInterval);
    }

    /**
     * The event that triggers the event-based policy. This parameter is required for event-based policies only. If you are creating a snapshot or AMI policy, omit this parameter. See the `event_source` configuration block.
     * 
     */
    @Import(name="eventSource")
    private @Nullable Output<LifecyclePolicyPolicyDetailsEventSourceArgs> eventSource;

    /**
     * @return The event that triggers the event-based policy. This parameter is required for event-based policies only. If you are creating a snapshot or AMI policy, omit this parameter. See the `event_source` configuration block.
     * 
     */
    public Optional<Output<LifecyclePolicyPolicyDetailsEventSourceArgs>> eventSource() {
        return Optional.ofNullable(this.eventSource);
    }

    /**
     * Specifies exclusion parameters for volumes or instances for which you do not want to create snapshots or AMIs.  See the `exclusions` configuration block.
     * 
     */
    @Import(name="exclusions")
    private @Nullable Output<LifecyclePolicyPolicyDetailsExclusionsArgs> exclusions;

    /**
     * @return Specifies exclusion parameters for volumes or instances for which you do not want to create snapshots or AMIs.  See the `exclusions` configuration block.
     * 
     */
    public Optional<Output<LifecyclePolicyPolicyDetailsExclusionsArgs>> exclusions() {
        return Optional.ofNullable(this.exclusions);
    }

    /**
     * snapshot or AMI retention behavior for the policy if the source volume or instance is deleted, or if the policy enters the error, disabled, or deleted state. Default value is `false`.
     * 
     */
    @Import(name="extendDeletion")
    private @Nullable Output<Boolean> extendDeletion;

    /**
     * @return snapshot or AMI retention behavior for the policy if the source volume or instance is deleted, or if the policy enters the error, disabled, or deleted state. Default value is `false`.
     * 
     */
    public Optional<Output<Boolean>> extendDeletion() {
        return Optional.ofNullable(this.extendDeletion);
    }

    @Import(name="parameters")
    private @Nullable Output<LifecyclePolicyPolicyDetailsParametersArgs> parameters;

    public Optional<Output<LifecyclePolicyPolicyDetailsParametersArgs>> parameters() {
        return Optional.ofNullable(this.parameters);
    }

    /**
     * Type of policy to create. `SIMPLIFIED` To create a default policy. `STANDARD` To create a custom policy.
     * 
     */
    @Import(name="policyLanguage")
    private @Nullable Output<String> policyLanguage;

    /**
     * @return Type of policy to create. `SIMPLIFIED` To create a default policy. `STANDARD` To create a custom policy.
     * 
     */
    public Optional<Output<String>> policyLanguage() {
        return Optional.ofNullable(this.policyLanguage);
    }

    /**
     * The valid target resource types and actions a policy can manage. Specify `EBS_SNAPSHOT_MANAGEMENT` to create a lifecycle policy that manages the lifecycle of Amazon EBS snapshots. Specify `IMAGE_MANAGEMENT` to create a lifecycle policy that manages the lifecycle of EBS-backed AMIs. Specify `EVENT_BASED_POLICY` to create an event-based policy that performs specific actions when a defined event occurs in your AWS account. Default value is `EBS_SNAPSHOT_MANAGEMENT`.
     * 
     */
    @Import(name="policyType")
    private @Nullable Output<String> policyType;

    /**
     * @return The valid target resource types and actions a policy can manage. Specify `EBS_SNAPSHOT_MANAGEMENT` to create a lifecycle policy that manages the lifecycle of Amazon EBS snapshots. Specify `IMAGE_MANAGEMENT` to create a lifecycle policy that manages the lifecycle of EBS-backed AMIs. Specify `EVENT_BASED_POLICY` to create an event-based policy that performs specific actions when a defined event occurs in your AWS account. Default value is `EBS_SNAPSHOT_MANAGEMENT`.
     * 
     */
    public Optional<Output<String>> policyType() {
        return Optional.ofNullable(this.policyType);
    }

    /**
     * The location of the resources to backup. If the source resources are located in an AWS Region, specify `CLOUD`. If the source resources are located on an Outpost in your account, specify `OUTPOST`. If the source resources are located in a Local Zone, specify `LOCAL_ZONE`. Valid values are `CLOUD`, `LOCAL_ZONE`, and `OUTPOST`.
     * 
     */
    @Import(name="resourceLocations")
    private @Nullable Output<String> resourceLocations;

    /**
     * @return The location of the resources to backup. If the source resources are located in an AWS Region, specify `CLOUD`. If the source resources are located on an Outpost in your account, specify `OUTPOST`. If the source resources are located in a Local Zone, specify `LOCAL_ZONE`. Valid values are `CLOUD`, `LOCAL_ZONE`, and `OUTPOST`.
     * 
     */
    public Optional<Output<String>> resourceLocations() {
        return Optional.ofNullable(this.resourceLocations);
    }

    /**
     * Type of default policy to create. Valid values are `VOLUME` and `INSTANCE`.
     * 
     */
    @Import(name="resourceType")
    private @Nullable Output<String> resourceType;

    /**
     * @return Type of default policy to create. Valid values are `VOLUME` and `INSTANCE`.
     * 
     */
    public Optional<Output<String>> resourceType() {
        return Optional.ofNullable(this.resourceType);
    }

    /**
     * A list of resource types that should be targeted by the lifecycle policy. Valid values are `VOLUME` and `INSTANCE`.
     * 
     */
    @Import(name="resourceTypes")
    private @Nullable Output<List<String>> resourceTypes;

    /**
     * @return A list of resource types that should be targeted by the lifecycle policy. Valid values are `VOLUME` and `INSTANCE`.
     * 
     */
    public Optional<Output<List<String>>> resourceTypes() {
        return Optional.ofNullable(this.resourceTypes);
    }

    /**
     * Specifies how long the policy should retain snapshots or AMIs before deleting them. valid values range from `2` to `14`. Default value is `7`.
     * 
     */
    @Import(name="retainInterval")
    private @Nullable Output<Integer> retainInterval;

    /**
     * @return Specifies how long the policy should retain snapshots or AMIs before deleting them. valid values range from `2` to `14`. Default value is `7`.
     * 
     */
    public Optional<Output<Integer>> retainInterval() {
        return Optional.ofNullable(this.retainInterval);
    }

    /**
     * See the `schedule` configuration block.
     * 
     */
    @Import(name="schedules")
    private @Nullable Output<List<LifecyclePolicyPolicyDetailsScheduleArgs>> schedules;

    /**
     * @return See the `schedule` configuration block.
     * 
     */
    public Optional<Output<List<LifecyclePolicyPolicyDetailsScheduleArgs>>> schedules() {
        return Optional.ofNullable(this.schedules);
    }

    /**
     * A map of tag keys and their values. Any resources that match the `resource_types` and are tagged with _any_ of these tags will be targeted. Required when `policy_type` is `EBS_SNAPSHOT_MANAGEMENT` or `IMAGE_MANAGEMENT`. Must not be specified when `policy_type` is `EVENT_BASED_POLICY`.
     * 
     * &gt; Note: You cannot have overlapping lifecycle policies that share the same `target_tags`. Pulumi is unable to detect this at plan time but it will fail during apply.
     * 
     */
    @Import(name="targetTags")
    private @Nullable Output<Map<String,String>> targetTags;

    /**
     * @return A map of tag keys and their values. Any resources that match the `resource_types` and are tagged with _any_ of these tags will be targeted. Required when `policy_type` is `EBS_SNAPSHOT_MANAGEMENT` or `IMAGE_MANAGEMENT`. Must not be specified when `policy_type` is `EVENT_BASED_POLICY`.
     * 
     * &gt; Note: You cannot have overlapping lifecycle policies that share the same `target_tags`. Pulumi is unable to detect this at plan time but it will fail during apply.
     * 
     */
    public Optional<Output<Map<String,String>>> targetTags() {
        return Optional.ofNullable(this.targetTags);
    }

    private LifecyclePolicyPolicyDetailsArgs() {}

    private LifecyclePolicyPolicyDetailsArgs(LifecyclePolicyPolicyDetailsArgs $) {
        this.action = $.action;
        this.copyTags = $.copyTags;
        this.createInterval = $.createInterval;
        this.eventSource = $.eventSource;
        this.exclusions = $.exclusions;
        this.extendDeletion = $.extendDeletion;
        this.parameters = $.parameters;
        this.policyLanguage = $.policyLanguage;
        this.policyType = $.policyType;
        this.resourceLocations = $.resourceLocations;
        this.resourceType = $.resourceType;
        this.resourceTypes = $.resourceTypes;
        this.retainInterval = $.retainInterval;
        this.schedules = $.schedules;
        this.targetTags = $.targetTags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LifecyclePolicyPolicyDetailsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LifecyclePolicyPolicyDetailsArgs $;

        public Builder() {
            $ = new LifecyclePolicyPolicyDetailsArgs();
        }

        public Builder(LifecyclePolicyPolicyDetailsArgs defaults) {
            $ = new LifecyclePolicyPolicyDetailsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param action The actions to be performed when the event-based policy is triggered. You can specify only one action per policy. This parameter is required for event-based policies only. If you are creating a snapshot or AMI policy, omit this parameter. See the `action` configuration block.
         * 
         * @return builder
         * 
         */
        public Builder action(@Nullable Output<LifecyclePolicyPolicyDetailsActionArgs> action) {
            $.action = action;
            return this;
        }

        /**
         * @param action The actions to be performed when the event-based policy is triggered. You can specify only one action per policy. This parameter is required for event-based policies only. If you are creating a snapshot or AMI policy, omit this parameter. See the `action` configuration block.
         * 
         * @return builder
         * 
         */
        public Builder action(LifecyclePolicyPolicyDetailsActionArgs action) {
            return action(Output.of(action));
        }

        public Builder copyTags(@Nullable Output<Boolean> copyTags) {
            $.copyTags = copyTags;
            return this;
        }

        public Builder copyTags(Boolean copyTags) {
            return copyTags(Output.of(copyTags));
        }

        /**
         * @param createInterval How often the policy should run and create snapshots or AMIs. valid values range from `1` to `7`. Default value is `1`.
         * 
         * @return builder
         * 
         */
        public Builder createInterval(@Nullable Output<Integer> createInterval) {
            $.createInterval = createInterval;
            return this;
        }

        /**
         * @param createInterval How often the policy should run and create snapshots or AMIs. valid values range from `1` to `7`. Default value is `1`.
         * 
         * @return builder
         * 
         */
        public Builder createInterval(Integer createInterval) {
            return createInterval(Output.of(createInterval));
        }

        /**
         * @param eventSource The event that triggers the event-based policy. This parameter is required for event-based policies only. If you are creating a snapshot or AMI policy, omit this parameter. See the `event_source` configuration block.
         * 
         * @return builder
         * 
         */
        public Builder eventSource(@Nullable Output<LifecyclePolicyPolicyDetailsEventSourceArgs> eventSource) {
            $.eventSource = eventSource;
            return this;
        }

        /**
         * @param eventSource The event that triggers the event-based policy. This parameter is required for event-based policies only. If you are creating a snapshot or AMI policy, omit this parameter. See the `event_source` configuration block.
         * 
         * @return builder
         * 
         */
        public Builder eventSource(LifecyclePolicyPolicyDetailsEventSourceArgs eventSource) {
            return eventSource(Output.of(eventSource));
        }

        /**
         * @param exclusions Specifies exclusion parameters for volumes or instances for which you do not want to create snapshots or AMIs.  See the `exclusions` configuration block.
         * 
         * @return builder
         * 
         */
        public Builder exclusions(@Nullable Output<LifecyclePolicyPolicyDetailsExclusionsArgs> exclusions) {
            $.exclusions = exclusions;
            return this;
        }

        /**
         * @param exclusions Specifies exclusion parameters for volumes or instances for which you do not want to create snapshots or AMIs.  See the `exclusions` configuration block.
         * 
         * @return builder
         * 
         */
        public Builder exclusions(LifecyclePolicyPolicyDetailsExclusionsArgs exclusions) {
            return exclusions(Output.of(exclusions));
        }

        /**
         * @param extendDeletion snapshot or AMI retention behavior for the policy if the source volume or instance is deleted, or if the policy enters the error, disabled, or deleted state. Default value is `false`.
         * 
         * @return builder
         * 
         */
        public Builder extendDeletion(@Nullable Output<Boolean> extendDeletion) {
            $.extendDeletion = extendDeletion;
            return this;
        }

        /**
         * @param extendDeletion snapshot or AMI retention behavior for the policy if the source volume or instance is deleted, or if the policy enters the error, disabled, or deleted state. Default value is `false`.
         * 
         * @return builder
         * 
         */
        public Builder extendDeletion(Boolean extendDeletion) {
            return extendDeletion(Output.of(extendDeletion));
        }

        public Builder parameters(@Nullable Output<LifecyclePolicyPolicyDetailsParametersArgs> parameters) {
            $.parameters = parameters;
            return this;
        }

        public Builder parameters(LifecyclePolicyPolicyDetailsParametersArgs parameters) {
            return parameters(Output.of(parameters));
        }

        /**
         * @param policyLanguage Type of policy to create. `SIMPLIFIED` To create a default policy. `STANDARD` To create a custom policy.
         * 
         * @return builder
         * 
         */
        public Builder policyLanguage(@Nullable Output<String> policyLanguage) {
            $.policyLanguage = policyLanguage;
            return this;
        }

        /**
         * @param policyLanguage Type of policy to create. `SIMPLIFIED` To create a default policy. `STANDARD` To create a custom policy.
         * 
         * @return builder
         * 
         */
        public Builder policyLanguage(String policyLanguage) {
            return policyLanguage(Output.of(policyLanguage));
        }

        /**
         * @param policyType The valid target resource types and actions a policy can manage. Specify `EBS_SNAPSHOT_MANAGEMENT` to create a lifecycle policy that manages the lifecycle of Amazon EBS snapshots. Specify `IMAGE_MANAGEMENT` to create a lifecycle policy that manages the lifecycle of EBS-backed AMIs. Specify `EVENT_BASED_POLICY` to create an event-based policy that performs specific actions when a defined event occurs in your AWS account. Default value is `EBS_SNAPSHOT_MANAGEMENT`.
         * 
         * @return builder
         * 
         */
        public Builder policyType(@Nullable Output<String> policyType) {
            $.policyType = policyType;
            return this;
        }

        /**
         * @param policyType The valid target resource types and actions a policy can manage. Specify `EBS_SNAPSHOT_MANAGEMENT` to create a lifecycle policy that manages the lifecycle of Amazon EBS snapshots. Specify `IMAGE_MANAGEMENT` to create a lifecycle policy that manages the lifecycle of EBS-backed AMIs. Specify `EVENT_BASED_POLICY` to create an event-based policy that performs specific actions when a defined event occurs in your AWS account. Default value is `EBS_SNAPSHOT_MANAGEMENT`.
         * 
         * @return builder
         * 
         */
        public Builder policyType(String policyType) {
            return policyType(Output.of(policyType));
        }

        /**
         * @param resourceLocations The location of the resources to backup. If the source resources are located in an AWS Region, specify `CLOUD`. If the source resources are located on an Outpost in your account, specify `OUTPOST`. If the source resources are located in a Local Zone, specify `LOCAL_ZONE`. Valid values are `CLOUD`, `LOCAL_ZONE`, and `OUTPOST`.
         * 
         * @return builder
         * 
         */
        public Builder resourceLocations(@Nullable Output<String> resourceLocations) {
            $.resourceLocations = resourceLocations;
            return this;
        }

        /**
         * @param resourceLocations The location of the resources to backup. If the source resources are located in an AWS Region, specify `CLOUD`. If the source resources are located on an Outpost in your account, specify `OUTPOST`. If the source resources are located in a Local Zone, specify `LOCAL_ZONE`. Valid values are `CLOUD`, `LOCAL_ZONE`, and `OUTPOST`.
         * 
         * @return builder
         * 
         */
        public Builder resourceLocations(String resourceLocations) {
            return resourceLocations(Output.of(resourceLocations));
        }

        /**
         * @param resourceType Type of default policy to create. Valid values are `VOLUME` and `INSTANCE`.
         * 
         * @return builder
         * 
         */
        public Builder resourceType(@Nullable Output<String> resourceType) {
            $.resourceType = resourceType;
            return this;
        }

        /**
         * @param resourceType Type of default policy to create. Valid values are `VOLUME` and `INSTANCE`.
         * 
         * @return builder
         * 
         */
        public Builder resourceType(String resourceType) {
            return resourceType(Output.of(resourceType));
        }

        /**
         * @param resourceTypes A list of resource types that should be targeted by the lifecycle policy. Valid values are `VOLUME` and `INSTANCE`.
         * 
         * @return builder
         * 
         */
        public Builder resourceTypes(@Nullable Output<List<String>> resourceTypes) {
            $.resourceTypes = resourceTypes;
            return this;
        }

        /**
         * @param resourceTypes A list of resource types that should be targeted by the lifecycle policy. Valid values are `VOLUME` and `INSTANCE`.
         * 
         * @return builder
         * 
         */
        public Builder resourceTypes(List<String> resourceTypes) {
            return resourceTypes(Output.of(resourceTypes));
        }

        /**
         * @param resourceTypes A list of resource types that should be targeted by the lifecycle policy. Valid values are `VOLUME` and `INSTANCE`.
         * 
         * @return builder
         * 
         */
        public Builder resourceTypes(String... resourceTypes) {
            return resourceTypes(List.of(resourceTypes));
        }

        /**
         * @param retainInterval Specifies how long the policy should retain snapshots or AMIs before deleting them. valid values range from `2` to `14`. Default value is `7`.
         * 
         * @return builder
         * 
         */
        public Builder retainInterval(@Nullable Output<Integer> retainInterval) {
            $.retainInterval = retainInterval;
            return this;
        }

        /**
         * @param retainInterval Specifies how long the policy should retain snapshots or AMIs before deleting them. valid values range from `2` to `14`. Default value is `7`.
         * 
         * @return builder
         * 
         */
        public Builder retainInterval(Integer retainInterval) {
            return retainInterval(Output.of(retainInterval));
        }

        /**
         * @param schedules See the `schedule` configuration block.
         * 
         * @return builder
         * 
         */
        public Builder schedules(@Nullable Output<List<LifecyclePolicyPolicyDetailsScheduleArgs>> schedules) {
            $.schedules = schedules;
            return this;
        }

        /**
         * @param schedules See the `schedule` configuration block.
         * 
         * @return builder
         * 
         */
        public Builder schedules(List<LifecyclePolicyPolicyDetailsScheduleArgs> schedules) {
            return schedules(Output.of(schedules));
        }

        /**
         * @param schedules See the `schedule` configuration block.
         * 
         * @return builder
         * 
         */
        public Builder schedules(LifecyclePolicyPolicyDetailsScheduleArgs... schedules) {
            return schedules(List.of(schedules));
        }

        /**
         * @param targetTags A map of tag keys and their values. Any resources that match the `resource_types` and are tagged with _any_ of these tags will be targeted. Required when `policy_type` is `EBS_SNAPSHOT_MANAGEMENT` or `IMAGE_MANAGEMENT`. Must not be specified when `policy_type` is `EVENT_BASED_POLICY`.
         * 
         * &gt; Note: You cannot have overlapping lifecycle policies that share the same `target_tags`. Pulumi is unable to detect this at plan time but it will fail during apply.
         * 
         * @return builder
         * 
         */
        public Builder targetTags(@Nullable Output<Map<String,String>> targetTags) {
            $.targetTags = targetTags;
            return this;
        }

        /**
         * @param targetTags A map of tag keys and their values. Any resources that match the `resource_types` and are tagged with _any_ of these tags will be targeted. Required when `policy_type` is `EBS_SNAPSHOT_MANAGEMENT` or `IMAGE_MANAGEMENT`. Must not be specified when `policy_type` is `EVENT_BASED_POLICY`.
         * 
         * &gt; Note: You cannot have overlapping lifecycle policies that share the same `target_tags`. Pulumi is unable to detect this at plan time but it will fail during apply.
         * 
         * @return builder
         * 
         */
        public Builder targetTags(Map<String,String> targetTags) {
            return targetTags(Output.of(targetTags));
        }

        public LifecyclePolicyPolicyDetailsArgs build() {
            return $;
        }
    }

}
