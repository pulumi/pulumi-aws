// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.directoryservice.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDirectoryRadiusSetting {
    /**
     * @return The protocol specified for your RADIUS endpoints.
     * 
     */
    private @Nullable String authenticationProtocol;
    /**
     * @return Display label.
     * 
     */
    private @Nullable String displayLabel;
    /**
     * @return Port that your RADIUS server is using for communications.
     * 
     */
    private @Nullable Integer radiusPort;
    /**
     * @return Maximum number of times that communication with the RADIUS server is attempted.
     * 
     */
    private @Nullable Integer radiusRetries;
    /**
     * @return Set of strings that contains the fully qualified domain name (FQDN) or IP addresses of the RADIUS server endpoints, or the FQDN or IP addresses of your RADIUS server load balancer.
     * 
     */
    private @Nullable List<String> radiusServers;
    /**
     * @return Amount of time, in seconds, to wait for the RADIUS server to respond.
     * 
     */
    private @Nullable Integer radiusTimeout;
    /**
     * @return Not currently used.
     * 
     */
    private @Nullable Boolean useSameUsername;

    private GetDirectoryRadiusSetting() {}
    /**
     * @return The protocol specified for your RADIUS endpoints.
     * 
     */
    public Optional<String> authenticationProtocol() {
        return Optional.ofNullable(this.authenticationProtocol);
    }
    /**
     * @return Display label.
     * 
     */
    public Optional<String> displayLabel() {
        return Optional.ofNullable(this.displayLabel);
    }
    /**
     * @return Port that your RADIUS server is using for communications.
     * 
     */
    public Optional<Integer> radiusPort() {
        return Optional.ofNullable(this.radiusPort);
    }
    /**
     * @return Maximum number of times that communication with the RADIUS server is attempted.
     * 
     */
    public Optional<Integer> radiusRetries() {
        return Optional.ofNullable(this.radiusRetries);
    }
    /**
     * @return Set of strings that contains the fully qualified domain name (FQDN) or IP addresses of the RADIUS server endpoints, or the FQDN or IP addresses of your RADIUS server load balancer.
     * 
     */
    public List<String> radiusServers() {
        return this.radiusServers == null ? List.of() : this.radiusServers;
    }
    /**
     * @return Amount of time, in seconds, to wait for the RADIUS server to respond.
     * 
     */
    public Optional<Integer> radiusTimeout() {
        return Optional.ofNullable(this.radiusTimeout);
    }
    /**
     * @return Not currently used.
     * 
     */
    public Optional<Boolean> useSameUsername() {
        return Optional.ofNullable(this.useSameUsername);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDirectoryRadiusSetting defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String authenticationProtocol;
        private @Nullable String displayLabel;
        private @Nullable Integer radiusPort;
        private @Nullable Integer radiusRetries;
        private @Nullable List<String> radiusServers;
        private @Nullable Integer radiusTimeout;
        private @Nullable Boolean useSameUsername;
        public Builder() {}
        public Builder(GetDirectoryRadiusSetting defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authenticationProtocol = defaults.authenticationProtocol;
    	      this.displayLabel = defaults.displayLabel;
    	      this.radiusPort = defaults.radiusPort;
    	      this.radiusRetries = defaults.radiusRetries;
    	      this.radiusServers = defaults.radiusServers;
    	      this.radiusTimeout = defaults.radiusTimeout;
    	      this.useSameUsername = defaults.useSameUsername;
        }

        @CustomType.Setter
        public Builder authenticationProtocol(@Nullable String authenticationProtocol) {
            this.authenticationProtocol = authenticationProtocol;
            return this;
        }
        @CustomType.Setter
        public Builder displayLabel(@Nullable String displayLabel) {
            this.displayLabel = displayLabel;
            return this;
        }
        @CustomType.Setter
        public Builder radiusPort(@Nullable Integer radiusPort) {
            this.radiusPort = radiusPort;
            return this;
        }
        @CustomType.Setter
        public Builder radiusRetries(@Nullable Integer radiusRetries) {
            this.radiusRetries = radiusRetries;
            return this;
        }
        @CustomType.Setter
        public Builder radiusServers(@Nullable List<String> radiusServers) {
            this.radiusServers = radiusServers;
            return this;
        }
        public Builder radiusServers(String... radiusServers) {
            return radiusServers(List.of(radiusServers));
        }
        @CustomType.Setter
        public Builder radiusTimeout(@Nullable Integer radiusTimeout) {
            this.radiusTimeout = radiusTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder useSameUsername(@Nullable Boolean useSameUsername) {
            this.useSameUsername = useSameUsername;
            return this;
        }
        public GetDirectoryRadiusSetting build() {
            final var o = new GetDirectoryRadiusSetting();
            o.authenticationProtocol = authenticationProtocol;
            o.displayLabel = displayLabel;
            o.radiusPort = radiusPort;
            o.radiusRetries = radiusRetries;
            o.radiusServers = radiusServers;
            o.radiusTimeout = radiusTimeout;
            o.useSameUsername = useSameUsername;
            return o;
        }
    }
}
