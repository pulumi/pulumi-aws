// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.bedrock.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class AgentcoreOauth2CredentialProviderOauth2ProviderConfigGithubOauth2ProviderConfigOauthDiscoveryAuthorizationServerMetadata {
    /**
     * @return OAuth2 authorization endpoint URL.
     * 
     */
    private String authorizationEndpoint;
    /**
     * @return OAuth2 authorization server issuer identifier.
     * 
     */
    private String issuer;
    /**
     * @return Set of OAuth2 response types supported by the authorization server.
     * 
     */
    private List<String> responseTypes;
    /**
     * @return OAuth2 token endpoint URL.
     * 
     */
    private String tokenEndpoint;

    private AgentcoreOauth2CredentialProviderOauth2ProviderConfigGithubOauth2ProviderConfigOauthDiscoveryAuthorizationServerMetadata() {}
    /**
     * @return OAuth2 authorization endpoint URL.
     * 
     */
    public String authorizationEndpoint() {
        return this.authorizationEndpoint;
    }
    /**
     * @return OAuth2 authorization server issuer identifier.
     * 
     */
    public String issuer() {
        return this.issuer;
    }
    /**
     * @return Set of OAuth2 response types supported by the authorization server.
     * 
     */
    public List<String> responseTypes() {
        return this.responseTypes;
    }
    /**
     * @return OAuth2 token endpoint URL.
     * 
     */
    public String tokenEndpoint() {
        return this.tokenEndpoint;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AgentcoreOauth2CredentialProviderOauth2ProviderConfigGithubOauth2ProviderConfigOauthDiscoveryAuthorizationServerMetadata defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String authorizationEndpoint;
        private String issuer;
        private List<String> responseTypes;
        private String tokenEndpoint;
        public Builder() {}
        public Builder(AgentcoreOauth2CredentialProviderOauth2ProviderConfigGithubOauth2ProviderConfigOauthDiscoveryAuthorizationServerMetadata defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authorizationEndpoint = defaults.authorizationEndpoint;
    	      this.issuer = defaults.issuer;
    	      this.responseTypes = defaults.responseTypes;
    	      this.tokenEndpoint = defaults.tokenEndpoint;
        }

        @CustomType.Setter
        public Builder authorizationEndpoint(String authorizationEndpoint) {
            if (authorizationEndpoint == null) {
              throw new MissingRequiredPropertyException("AgentcoreOauth2CredentialProviderOauth2ProviderConfigGithubOauth2ProviderConfigOauthDiscoveryAuthorizationServerMetadata", "authorizationEndpoint");
            }
            this.authorizationEndpoint = authorizationEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder issuer(String issuer) {
            if (issuer == null) {
              throw new MissingRequiredPropertyException("AgentcoreOauth2CredentialProviderOauth2ProviderConfigGithubOauth2ProviderConfigOauthDiscoveryAuthorizationServerMetadata", "issuer");
            }
            this.issuer = issuer;
            return this;
        }
        @CustomType.Setter
        public Builder responseTypes(List<String> responseTypes) {
            if (responseTypes == null) {
              throw new MissingRequiredPropertyException("AgentcoreOauth2CredentialProviderOauth2ProviderConfigGithubOauth2ProviderConfigOauthDiscoveryAuthorizationServerMetadata", "responseTypes");
            }
            this.responseTypes = responseTypes;
            return this;
        }
        public Builder responseTypes(String... responseTypes) {
            return responseTypes(List.of(responseTypes));
        }
        @CustomType.Setter
        public Builder tokenEndpoint(String tokenEndpoint) {
            if (tokenEndpoint == null) {
              throw new MissingRequiredPropertyException("AgentcoreOauth2CredentialProviderOauth2ProviderConfigGithubOauth2ProviderConfigOauthDiscoveryAuthorizationServerMetadata", "tokenEndpoint");
            }
            this.tokenEndpoint = tokenEndpoint;
            return this;
        }
        public AgentcoreOauth2CredentialProviderOauth2ProviderConfigGithubOauth2ProviderConfigOauthDiscoveryAuthorizationServerMetadata build() {
            final var _resultValue = new AgentcoreOauth2CredentialProviderOauth2ProviderConfigGithubOauth2ProviderConfigOauthDiscoveryAuthorizationServerMetadata();
            _resultValue.authorizationEndpoint = authorizationEndpoint;
            _resultValue.issuer = issuer;
            _resultValue.responseTypes = responseTypes;
            _resultValue.tokenEndpoint = tokenEndpoint;
            return _resultValue;
        }
    }
}
