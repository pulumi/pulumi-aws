// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SubtitleFormatTextArgs extends com.pulumi.resources.ResourceArgs {

    public static final SubtitleFormatTextArgs Empty = new SubtitleFormatTextArgs();

    @Import(name="plainText")
    private @Nullable Output<String> plainText;

    public Optional<Output<String>> plainText() {
        return Optional.ofNullable(this.plainText);
    }

    @Import(name="richText")
    private @Nullable Output<String> richText;

    public Optional<Output<String>> richText() {
        return Optional.ofNullable(this.richText);
    }

    private SubtitleFormatTextArgs() {}

    private SubtitleFormatTextArgs(SubtitleFormatTextArgs $) {
        this.plainText = $.plainText;
        this.richText = $.richText;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SubtitleFormatTextArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SubtitleFormatTextArgs $;

        public Builder() {
            $ = new SubtitleFormatTextArgs();
        }

        public Builder(SubtitleFormatTextArgs defaults) {
            $ = new SubtitleFormatTextArgs(Objects.requireNonNull(defaults));
        }

        public Builder plainText(@Nullable Output<String> plainText) {
            $.plainText = plainText;
            return this;
        }

        public Builder plainText(String plainText) {
            return plainText(Output.of(plainText));
        }

        public Builder richText(@Nullable Output<String> richText) {
            $.richText = richText;
            return this;
        }

        public Builder richText(String richText) {
            return richText(Output.of(richText));
        }

        public SubtitleFormatTextArgs build() {
            return $;
        }
    }

}
