// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.codepipeline.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class PipelineVariable {
    /**
     * @return The default value of a pipeline-level variable.
     * 
     */
    private @Nullable String defaultValue;
    /**
     * @return The description of a pipeline-level variable.
     * 
     * &gt; **Note:** The input artifact of an action must exactly match the output artifact declared in a preceding action, but the input artifact does not have to be the next action in strict sequence from the action that provided the output artifact. Actions in parallel can declare different output artifacts, which are in turn consumed by different following actions.
     * 
     */
    private @Nullable String description;
    /**
     * @return The name of a pipeline-level variable.
     * 
     */
    private String name;

    private PipelineVariable() {}
    /**
     * @return The default value of a pipeline-level variable.
     * 
     */
    public Optional<String> defaultValue() {
        return Optional.ofNullable(this.defaultValue);
    }
    /**
     * @return The description of a pipeline-level variable.
     * 
     * &gt; **Note:** The input artifact of an action must exactly match the output artifact declared in a preceding action, but the input artifact does not have to be the next action in strict sequence from the action that provided the output artifact. Actions in parallel can declare different output artifacts, which are in turn consumed by different following actions.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return The name of a pipeline-level variable.
     * 
     */
    public String name() {
        return this.name;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PipelineVariable defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String defaultValue;
        private @Nullable String description;
        private String name;
        public Builder() {}
        public Builder(PipelineVariable defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.defaultValue = defaults.defaultValue;
    	      this.description = defaults.description;
    	      this.name = defaults.name;
        }

        @CustomType.Setter
        public Builder defaultValue(@Nullable String defaultValue) {

            this.defaultValue = defaultValue;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {

            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("PipelineVariable", "name");
            }
            this.name = name;
            return this;
        }
        public PipelineVariable build() {
            final var _resultValue = new PipelineVariable();
            _resultValue.defaultValue = defaultValue;
            _resultValue.description = description;
            _resultValue.name = name;
            return _resultValue;
        }
    }
}
