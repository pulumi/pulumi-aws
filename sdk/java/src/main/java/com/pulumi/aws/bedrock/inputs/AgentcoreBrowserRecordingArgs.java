// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.bedrock.inputs;

import com.pulumi.aws.bedrock.inputs.AgentcoreBrowserRecordingS3LocationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AgentcoreBrowserRecordingArgs extends com.pulumi.resources.ResourceArgs {

    public static final AgentcoreBrowserRecordingArgs Empty = new AgentcoreBrowserRecordingArgs();

    /**
     * Whether to enable recording for browser sessions. Defaults to `false`.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Whether to enable recording for browser sessions. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * S3 location where browser session recordings are stored. See `s3Location` below.
     * 
     */
    @Import(name="s3Location")
    private @Nullable Output<AgentcoreBrowserRecordingS3LocationArgs> s3Location;

    /**
     * @return S3 location where browser session recordings are stored. See `s3Location` below.
     * 
     */
    public Optional<Output<AgentcoreBrowserRecordingS3LocationArgs>> s3Location() {
        return Optional.ofNullable(this.s3Location);
    }

    private AgentcoreBrowserRecordingArgs() {}

    private AgentcoreBrowserRecordingArgs(AgentcoreBrowserRecordingArgs $) {
        this.enabled = $.enabled;
        this.s3Location = $.s3Location;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AgentcoreBrowserRecordingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AgentcoreBrowserRecordingArgs $;

        public Builder() {
            $ = new AgentcoreBrowserRecordingArgs();
        }

        public Builder(AgentcoreBrowserRecordingArgs defaults) {
            $ = new AgentcoreBrowserRecordingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param enabled Whether to enable recording for browser sessions. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Whether to enable recording for browser sessions. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param s3Location S3 location where browser session recordings are stored. See `s3Location` below.
         * 
         * @return builder
         * 
         */
        public Builder s3Location(@Nullable Output<AgentcoreBrowserRecordingS3LocationArgs> s3Location) {
            $.s3Location = s3Location;
            return this;
        }

        /**
         * @param s3Location S3 location where browser session recordings are stored. See `s3Location` below.
         * 
         * @return builder
         * 
         */
        public Builder s3Location(AgentcoreBrowserRecordingS3LocationArgs s3Location) {
            return s3Location(Output.of(s3Location));
        }

        public AgentcoreBrowserRecordingArgs build() {
            return $;
        }
    }

}
