// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ec2.outputs;

import com.pulumi.aws.ec2.outputs.GetInstanceTypeFpga;
import com.pulumi.aws.ec2.outputs.GetInstanceTypeGpus;
import com.pulumi.aws.ec2.outputs.GetInstanceTypeInferenceAccelerator;
import com.pulumi.aws.ec2.outputs.GetInstanceTypeInstanceDisk;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetInstanceTypeResult {
    /**
     * @return `true` if auto recovery is supported.
     * 
     */
    private Boolean autoRecoverySupported;
    /**
     * @return `true` if it is a bare metal instance type.
     * 
     */
    private Boolean bareMetal;
    /**
     * @return `true` if the instance type is a burstable performance instance type.
     * 
     */
    private Boolean burstablePerformanceSupported;
    /**
     * @return `true`  if the instance type is a current generation.
     * 
     */
    private Boolean currentGeneration;
    /**
     * @return `true` if Dedicated Hosts are supported on the instance type.
     * 
     */
    private Boolean dedicatedHostsSupported;
    /**
     * @return Default number of cores for the instance type.
     * 
     */
    private Integer defaultCores;
    /**
     * @return The  default  number of threads per core for the instance type.
     * 
     */
    private Integer defaultThreadsPerCore;
    /**
     * @return Default number of vCPUs for the instance type.
     * 
     */
    private Integer defaultVcpus;
    /**
     * @return Indicates whether Amazon EBS encryption is supported.
     * 
     */
    private String ebsEncryptionSupport;
    /**
     * @return Whether non-volatile memory express (NVMe) is supported.
     * 
     */
    private String ebsNvmeSupport;
    /**
     * @return Indicates that the instance type is Amazon EBS-optimized.
     * 
     */
    private String ebsOptimizedSupport;
    /**
     * @return The baseline bandwidth performance for an EBS-optimized instance type, in Mbps.
     * 
     */
    private Integer ebsPerformanceBaselineBandwidth;
    /**
     * @return The baseline input/output storage operations per seconds for an EBS-optimized instance type.
     * 
     */
    private Integer ebsPerformanceBaselineIops;
    /**
     * @return The baseline throughput performance for an EBS-optimized instance type, in MBps.
     * 
     */
    private Double ebsPerformanceBaselineThroughput;
    /**
     * @return The maximum bandwidth performance for an EBS-optimized instance type, in Mbps.
     * 
     */
    private Integer ebsPerformanceMaximumBandwidth;
    /**
     * @return The maximum input/output storage operations per second for an EBS-optimized instance type.
     * 
     */
    private Integer ebsPerformanceMaximumIops;
    /**
     * @return The maximum throughput performance for an EBS-optimized instance type, in MBps.
     * 
     */
    private Double ebsPerformanceMaximumThroughput;
    /**
     * @return Whether Elastic Fabric Adapter (EFA) is supported.
     * 
     */
    private Boolean efaSupported;
    /**
     * @return Whether Elastic Network Adapter (ENA) is supported.
     * 
     */
    private String enaSupport;
    /**
     * @return Indicates whether encryption in-transit between instances is supported.
     * 
     */
    private Boolean encryptionInTransitSupported;
    /**
     * @return Describes the FPGA accelerator settings for the instance type.
     * * `fpgas.#.count` - The count of FPGA accelerators for the instance type.
     * * `fpgas.#.manufacturer` - The manufacturer of the FPGA accelerator.
     * * `fpgas.#.memory_size` - The size (in MiB) for the memory available to the FPGA accelerator.
     * * `fpgas.#.name` - The name of the FPGA accelerator.
     * 
     */
    private List<GetInstanceTypeFpga> fpgas;
    /**
     * @return `true` if the instance type is eligible for the free tier.
     * 
     */
    private Boolean freeTierEligible;
    /**
     * @return Describes the GPU accelerators for the instance type.
     * * `gpus.#.count` - The number of GPUs for the instance type.
     * * `gpus.#.manufacturer` - The manufacturer of the GPU accelerator.
     * * `gpus.#.memory_size` - The size (in MiB) for the memory available to the GPU accelerator.
     * * `gpus.#.name` - The name of the GPU accelerator.
     * 
     */
    private List<GetInstanceTypeGpus> gpuses;
    /**
     * @return `true` if On-Demand hibernation is supported.
     * 
     */
    private Boolean hibernationSupported;
    /**
     * @return Hypervisor used for the instance type.
     * 
     */
    private String hypervisor;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Describes the Inference accelerators for the instance type.
     * * `inference_accelerators.#.count` - The number of Inference accelerators for the instance type.
     * * `inference_accelerators.#.manufacturer` - The manufacturer of the Inference accelerator.
     * * `inference_accelerators.#.name` - The name of the Inference accelerator.
     * 
     */
    private List<GetInstanceTypeInferenceAccelerator> inferenceAccelerators;
    /**
     * @return Describes the disks for the instance type.
     * * `instance_disks.#.count` - The number of disks with this configuration.
     * * `instance_disks.#.size` - The size of the disk in GB.
     * * `instance_disks.#.type` - The type of disk.
     * 
     */
    private List<GetInstanceTypeInstanceDisk> instanceDisks;
    /**
     * @return `true` if instance storage is supported.
     * 
     */
    private Boolean instanceStorageSupported;
    private String instanceType;
    /**
     * @return `true` if IPv6 is supported.
     * 
     */
    private Boolean ipv6Supported;
    /**
     * @return The maximum number of IPv4 addresses per network interface.
     * 
     */
    private Integer maximumIpv4AddressesPerInterface;
    /**
     * @return The maximum number of IPv6 addresses per network interface.
     * 
     */
    private Integer maximumIpv6AddressesPerInterface;
    /**
     * @return The maximum number of network interfaces for the instance type.
     * 
     */
    private Integer maximumNetworkInterfaces;
    /**
     * @return Size of the instance memory, in MiB.
     * 
     */
    private Integer memorySize;
    /**
     * @return Describes the network performance.
     * 
     */
    private String networkPerformance;
    /**
     * @return A list of architectures supported by the instance type.
     * 
     */
    private List<String> supportedArchitectures;
    /**
     * @return A list of supported placement groups types.
     * 
     */
    private List<String> supportedPlacementStrategies;
    /**
     * @return Indicates the supported root device types.
     * 
     */
    private List<String> supportedRootDeviceTypes;
    /**
     * @return Indicates whether the instance type is offered for spot or On-Demand.
     * 
     */
    private List<String> supportedUsagesClasses;
    /**
     * @return The supported virtualization types.
     * 
     */
    private List<String> supportedVirtualizationTypes;
    /**
     * @return The speed of the processor, in GHz.
     * 
     */
    private Double sustainedClockSpeed;
    /**
     * @return Total memory of all FPGA accelerators for the instance type (in MiB).
     * 
     */
    private Integer totalFpgaMemory;
    /**
     * @return Total size of the memory for the GPU accelerators for the instance type (in MiB).
     * 
     */
    private Integer totalGpuMemory;
    /**
     * @return The total size of the instance disks, in GB.
     * 
     */
    private Integer totalInstanceStorage;
    /**
     * @return List of the valid number of cores that can be configured for the instance type.
     * 
     */
    private List<Integer> validCores;
    /**
     * @return List of the valid number of threads per core that can be configured for the instance type.
     * 
     */
    private List<Integer> validThreadsPerCores;

    private GetInstanceTypeResult() {}
    /**
     * @return `true` if auto recovery is supported.
     * 
     */
    public Boolean autoRecoverySupported() {
        return this.autoRecoverySupported;
    }
    /**
     * @return `true` if it is a bare metal instance type.
     * 
     */
    public Boolean bareMetal() {
        return this.bareMetal;
    }
    /**
     * @return `true` if the instance type is a burstable performance instance type.
     * 
     */
    public Boolean burstablePerformanceSupported() {
        return this.burstablePerformanceSupported;
    }
    /**
     * @return `true`  if the instance type is a current generation.
     * 
     */
    public Boolean currentGeneration() {
        return this.currentGeneration;
    }
    /**
     * @return `true` if Dedicated Hosts are supported on the instance type.
     * 
     */
    public Boolean dedicatedHostsSupported() {
        return this.dedicatedHostsSupported;
    }
    /**
     * @return Default number of cores for the instance type.
     * 
     */
    public Integer defaultCores() {
        return this.defaultCores;
    }
    /**
     * @return The  default  number of threads per core for the instance type.
     * 
     */
    public Integer defaultThreadsPerCore() {
        return this.defaultThreadsPerCore;
    }
    /**
     * @return Default number of vCPUs for the instance type.
     * 
     */
    public Integer defaultVcpus() {
        return this.defaultVcpus;
    }
    /**
     * @return Indicates whether Amazon EBS encryption is supported.
     * 
     */
    public String ebsEncryptionSupport() {
        return this.ebsEncryptionSupport;
    }
    /**
     * @return Whether non-volatile memory express (NVMe) is supported.
     * 
     */
    public String ebsNvmeSupport() {
        return this.ebsNvmeSupport;
    }
    /**
     * @return Indicates that the instance type is Amazon EBS-optimized.
     * 
     */
    public String ebsOptimizedSupport() {
        return this.ebsOptimizedSupport;
    }
    /**
     * @return The baseline bandwidth performance for an EBS-optimized instance type, in Mbps.
     * 
     */
    public Integer ebsPerformanceBaselineBandwidth() {
        return this.ebsPerformanceBaselineBandwidth;
    }
    /**
     * @return The baseline input/output storage operations per seconds for an EBS-optimized instance type.
     * 
     */
    public Integer ebsPerformanceBaselineIops() {
        return this.ebsPerformanceBaselineIops;
    }
    /**
     * @return The baseline throughput performance for an EBS-optimized instance type, in MBps.
     * 
     */
    public Double ebsPerformanceBaselineThroughput() {
        return this.ebsPerformanceBaselineThroughput;
    }
    /**
     * @return The maximum bandwidth performance for an EBS-optimized instance type, in Mbps.
     * 
     */
    public Integer ebsPerformanceMaximumBandwidth() {
        return this.ebsPerformanceMaximumBandwidth;
    }
    /**
     * @return The maximum input/output storage operations per second for an EBS-optimized instance type.
     * 
     */
    public Integer ebsPerformanceMaximumIops() {
        return this.ebsPerformanceMaximumIops;
    }
    /**
     * @return The maximum throughput performance for an EBS-optimized instance type, in MBps.
     * 
     */
    public Double ebsPerformanceMaximumThroughput() {
        return this.ebsPerformanceMaximumThroughput;
    }
    /**
     * @return Whether Elastic Fabric Adapter (EFA) is supported.
     * 
     */
    public Boolean efaSupported() {
        return this.efaSupported;
    }
    /**
     * @return Whether Elastic Network Adapter (ENA) is supported.
     * 
     */
    public String enaSupport() {
        return this.enaSupport;
    }
    /**
     * @return Indicates whether encryption in-transit between instances is supported.
     * 
     */
    public Boolean encryptionInTransitSupported() {
        return this.encryptionInTransitSupported;
    }
    /**
     * @return Describes the FPGA accelerator settings for the instance type.
     * * `fpgas.#.count` - The count of FPGA accelerators for the instance type.
     * * `fpgas.#.manufacturer` - The manufacturer of the FPGA accelerator.
     * * `fpgas.#.memory_size` - The size (in MiB) for the memory available to the FPGA accelerator.
     * * `fpgas.#.name` - The name of the FPGA accelerator.
     * 
     */
    public List<GetInstanceTypeFpga> fpgas() {
        return this.fpgas;
    }
    /**
     * @return `true` if the instance type is eligible for the free tier.
     * 
     */
    public Boolean freeTierEligible() {
        return this.freeTierEligible;
    }
    /**
     * @return Describes the GPU accelerators for the instance type.
     * * `gpus.#.count` - The number of GPUs for the instance type.
     * * `gpus.#.manufacturer` - The manufacturer of the GPU accelerator.
     * * `gpus.#.memory_size` - The size (in MiB) for the memory available to the GPU accelerator.
     * * `gpus.#.name` - The name of the GPU accelerator.
     * 
     */
    public List<GetInstanceTypeGpus> gpuses() {
        return this.gpuses;
    }
    /**
     * @return `true` if On-Demand hibernation is supported.
     * 
     */
    public Boolean hibernationSupported() {
        return this.hibernationSupported;
    }
    /**
     * @return Hypervisor used for the instance type.
     * 
     */
    public String hypervisor() {
        return this.hypervisor;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Describes the Inference accelerators for the instance type.
     * * `inference_accelerators.#.count` - The number of Inference accelerators for the instance type.
     * * `inference_accelerators.#.manufacturer` - The manufacturer of the Inference accelerator.
     * * `inference_accelerators.#.name` - The name of the Inference accelerator.
     * 
     */
    public List<GetInstanceTypeInferenceAccelerator> inferenceAccelerators() {
        return this.inferenceAccelerators;
    }
    /**
     * @return Describes the disks for the instance type.
     * * `instance_disks.#.count` - The number of disks with this configuration.
     * * `instance_disks.#.size` - The size of the disk in GB.
     * * `instance_disks.#.type` - The type of disk.
     * 
     */
    public List<GetInstanceTypeInstanceDisk> instanceDisks() {
        return this.instanceDisks;
    }
    /**
     * @return `true` if instance storage is supported.
     * 
     */
    public Boolean instanceStorageSupported() {
        return this.instanceStorageSupported;
    }
    public String instanceType() {
        return this.instanceType;
    }
    /**
     * @return `true` if IPv6 is supported.
     * 
     */
    public Boolean ipv6Supported() {
        return this.ipv6Supported;
    }
    /**
     * @return The maximum number of IPv4 addresses per network interface.
     * 
     */
    public Integer maximumIpv4AddressesPerInterface() {
        return this.maximumIpv4AddressesPerInterface;
    }
    /**
     * @return The maximum number of IPv6 addresses per network interface.
     * 
     */
    public Integer maximumIpv6AddressesPerInterface() {
        return this.maximumIpv6AddressesPerInterface;
    }
    /**
     * @return The maximum number of network interfaces for the instance type.
     * 
     */
    public Integer maximumNetworkInterfaces() {
        return this.maximumNetworkInterfaces;
    }
    /**
     * @return Size of the instance memory, in MiB.
     * 
     */
    public Integer memorySize() {
        return this.memorySize;
    }
    /**
     * @return Describes the network performance.
     * 
     */
    public String networkPerformance() {
        return this.networkPerformance;
    }
    /**
     * @return A list of architectures supported by the instance type.
     * 
     */
    public List<String> supportedArchitectures() {
        return this.supportedArchitectures;
    }
    /**
     * @return A list of supported placement groups types.
     * 
     */
    public List<String> supportedPlacementStrategies() {
        return this.supportedPlacementStrategies;
    }
    /**
     * @return Indicates the supported root device types.
     * 
     */
    public List<String> supportedRootDeviceTypes() {
        return this.supportedRootDeviceTypes;
    }
    /**
     * @return Indicates whether the instance type is offered for spot or On-Demand.
     * 
     */
    public List<String> supportedUsagesClasses() {
        return this.supportedUsagesClasses;
    }
    /**
     * @return The supported virtualization types.
     * 
     */
    public List<String> supportedVirtualizationTypes() {
        return this.supportedVirtualizationTypes;
    }
    /**
     * @return The speed of the processor, in GHz.
     * 
     */
    public Double sustainedClockSpeed() {
        return this.sustainedClockSpeed;
    }
    /**
     * @return Total memory of all FPGA accelerators for the instance type (in MiB).
     * 
     */
    public Integer totalFpgaMemory() {
        return this.totalFpgaMemory;
    }
    /**
     * @return Total size of the memory for the GPU accelerators for the instance type (in MiB).
     * 
     */
    public Integer totalGpuMemory() {
        return this.totalGpuMemory;
    }
    /**
     * @return The total size of the instance disks, in GB.
     * 
     */
    public Integer totalInstanceStorage() {
        return this.totalInstanceStorage;
    }
    /**
     * @return List of the valid number of cores that can be configured for the instance type.
     * 
     */
    public List<Integer> validCores() {
        return this.validCores;
    }
    /**
     * @return List of the valid number of threads per core that can be configured for the instance type.
     * 
     */
    public List<Integer> validThreadsPerCores() {
        return this.validThreadsPerCores;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInstanceTypeResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean autoRecoverySupported;
        private Boolean bareMetal;
        private Boolean burstablePerformanceSupported;
        private Boolean currentGeneration;
        private Boolean dedicatedHostsSupported;
        private Integer defaultCores;
        private Integer defaultThreadsPerCore;
        private Integer defaultVcpus;
        private String ebsEncryptionSupport;
        private String ebsNvmeSupport;
        private String ebsOptimizedSupport;
        private Integer ebsPerformanceBaselineBandwidth;
        private Integer ebsPerformanceBaselineIops;
        private Double ebsPerformanceBaselineThroughput;
        private Integer ebsPerformanceMaximumBandwidth;
        private Integer ebsPerformanceMaximumIops;
        private Double ebsPerformanceMaximumThroughput;
        private Boolean efaSupported;
        private String enaSupport;
        private Boolean encryptionInTransitSupported;
        private List<GetInstanceTypeFpga> fpgas;
        private Boolean freeTierEligible;
        private List<GetInstanceTypeGpus> gpuses;
        private Boolean hibernationSupported;
        private String hypervisor;
        private String id;
        private List<GetInstanceTypeInferenceAccelerator> inferenceAccelerators;
        private List<GetInstanceTypeInstanceDisk> instanceDisks;
        private Boolean instanceStorageSupported;
        private String instanceType;
        private Boolean ipv6Supported;
        private Integer maximumIpv4AddressesPerInterface;
        private Integer maximumIpv6AddressesPerInterface;
        private Integer maximumNetworkInterfaces;
        private Integer memorySize;
        private String networkPerformance;
        private List<String> supportedArchitectures;
        private List<String> supportedPlacementStrategies;
        private List<String> supportedRootDeviceTypes;
        private List<String> supportedUsagesClasses;
        private List<String> supportedVirtualizationTypes;
        private Double sustainedClockSpeed;
        private Integer totalFpgaMemory;
        private Integer totalGpuMemory;
        private Integer totalInstanceStorage;
        private List<Integer> validCores;
        private List<Integer> validThreadsPerCores;
        public Builder() {}
        public Builder(GetInstanceTypeResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autoRecoverySupported = defaults.autoRecoverySupported;
    	      this.bareMetal = defaults.bareMetal;
    	      this.burstablePerformanceSupported = defaults.burstablePerformanceSupported;
    	      this.currentGeneration = defaults.currentGeneration;
    	      this.dedicatedHostsSupported = defaults.dedicatedHostsSupported;
    	      this.defaultCores = defaults.defaultCores;
    	      this.defaultThreadsPerCore = defaults.defaultThreadsPerCore;
    	      this.defaultVcpus = defaults.defaultVcpus;
    	      this.ebsEncryptionSupport = defaults.ebsEncryptionSupport;
    	      this.ebsNvmeSupport = defaults.ebsNvmeSupport;
    	      this.ebsOptimizedSupport = defaults.ebsOptimizedSupport;
    	      this.ebsPerformanceBaselineBandwidth = defaults.ebsPerformanceBaselineBandwidth;
    	      this.ebsPerformanceBaselineIops = defaults.ebsPerformanceBaselineIops;
    	      this.ebsPerformanceBaselineThroughput = defaults.ebsPerformanceBaselineThroughput;
    	      this.ebsPerformanceMaximumBandwidth = defaults.ebsPerformanceMaximumBandwidth;
    	      this.ebsPerformanceMaximumIops = defaults.ebsPerformanceMaximumIops;
    	      this.ebsPerformanceMaximumThroughput = defaults.ebsPerformanceMaximumThroughput;
    	      this.efaSupported = defaults.efaSupported;
    	      this.enaSupport = defaults.enaSupport;
    	      this.encryptionInTransitSupported = defaults.encryptionInTransitSupported;
    	      this.fpgas = defaults.fpgas;
    	      this.freeTierEligible = defaults.freeTierEligible;
    	      this.gpuses = defaults.gpuses;
    	      this.hibernationSupported = defaults.hibernationSupported;
    	      this.hypervisor = defaults.hypervisor;
    	      this.id = defaults.id;
    	      this.inferenceAccelerators = defaults.inferenceAccelerators;
    	      this.instanceDisks = defaults.instanceDisks;
    	      this.instanceStorageSupported = defaults.instanceStorageSupported;
    	      this.instanceType = defaults.instanceType;
    	      this.ipv6Supported = defaults.ipv6Supported;
    	      this.maximumIpv4AddressesPerInterface = defaults.maximumIpv4AddressesPerInterface;
    	      this.maximumIpv6AddressesPerInterface = defaults.maximumIpv6AddressesPerInterface;
    	      this.maximumNetworkInterfaces = defaults.maximumNetworkInterfaces;
    	      this.memorySize = defaults.memorySize;
    	      this.networkPerformance = defaults.networkPerformance;
    	      this.supportedArchitectures = defaults.supportedArchitectures;
    	      this.supportedPlacementStrategies = defaults.supportedPlacementStrategies;
    	      this.supportedRootDeviceTypes = defaults.supportedRootDeviceTypes;
    	      this.supportedUsagesClasses = defaults.supportedUsagesClasses;
    	      this.supportedVirtualizationTypes = defaults.supportedVirtualizationTypes;
    	      this.sustainedClockSpeed = defaults.sustainedClockSpeed;
    	      this.totalFpgaMemory = defaults.totalFpgaMemory;
    	      this.totalGpuMemory = defaults.totalGpuMemory;
    	      this.totalInstanceStorage = defaults.totalInstanceStorage;
    	      this.validCores = defaults.validCores;
    	      this.validThreadsPerCores = defaults.validThreadsPerCores;
        }

        @CustomType.Setter
        public Builder autoRecoverySupported(Boolean autoRecoverySupported) {
            if (autoRecoverySupported == null) {
              throw new MissingRequiredPropertyException("GetInstanceTypeResult", "autoRecoverySupported");
            }
            this.autoRecoverySupported = autoRecoverySupported;
            return this;
        }
        @CustomType.Setter
        public Builder bareMetal(Boolean bareMetal) {
            if (bareMetal == null) {
              throw new MissingRequiredPropertyException("GetInstanceTypeResult", "bareMetal");
            }
            this.bareMetal = bareMetal;
            return this;
        }
        @CustomType.Setter
        public Builder burstablePerformanceSupported(Boolean burstablePerformanceSupported) {
            if (burstablePerformanceSupported == null) {
              throw new MissingRequiredPropertyException("GetInstanceTypeResult", "burstablePerformanceSupported");
            }
            this.burstablePerformanceSupported = burstablePerformanceSupported;
            return this;
        }
        @CustomType.Setter
        public Builder currentGeneration(Boolean currentGeneration) {
            if (currentGeneration == null) {
              throw new MissingRequiredPropertyException("GetInstanceTypeResult", "currentGeneration");
            }
            this.currentGeneration = currentGeneration;
            return this;
        }
        @CustomType.Setter
        public Builder dedicatedHostsSupported(Boolean dedicatedHostsSupported) {
            if (dedicatedHostsSupported == null) {
              throw new MissingRequiredPropertyException("GetInstanceTypeResult", "dedicatedHostsSupported");
            }
            this.dedicatedHostsSupported = dedicatedHostsSupported;
            return this;
        }
        @CustomType.Setter
        public Builder defaultCores(Integer defaultCores) {
            if (defaultCores == null) {
              throw new MissingRequiredPropertyException("GetInstanceTypeResult", "defaultCores");
            }
            this.defaultCores = defaultCores;
            return this;
        }
        @CustomType.Setter
        public Builder defaultThreadsPerCore(Integer defaultThreadsPerCore) {
            if (defaultThreadsPerCore == null) {
              throw new MissingRequiredPropertyException("GetInstanceTypeResult", "defaultThreadsPerCore");
            }
            this.defaultThreadsPerCore = defaultThreadsPerCore;
            return this;
        }
        @CustomType.Setter
        public Builder defaultVcpus(Integer defaultVcpus) {
            if (defaultVcpus == null) {
              throw new MissingRequiredPropertyException("GetInstanceTypeResult", "defaultVcpus");
            }
            this.defaultVcpus = defaultVcpus;
            return this;
        }
        @CustomType.Setter
        public Builder ebsEncryptionSupport(String ebsEncryptionSupport) {
            if (ebsEncryptionSupport == null) {
              throw new MissingRequiredPropertyException("GetInstanceTypeResult", "ebsEncryptionSupport");
            }
            this.ebsEncryptionSupport = ebsEncryptionSupport;
            return this;
        }
        @CustomType.Setter
        public Builder ebsNvmeSupport(String ebsNvmeSupport) {
            if (ebsNvmeSupport == null) {
              throw new MissingRequiredPropertyException("GetInstanceTypeResult", "ebsNvmeSupport");
            }
            this.ebsNvmeSupport = ebsNvmeSupport;
            return this;
        }
        @CustomType.Setter
        public Builder ebsOptimizedSupport(String ebsOptimizedSupport) {
            if (ebsOptimizedSupport == null) {
              throw new MissingRequiredPropertyException("GetInstanceTypeResult", "ebsOptimizedSupport");
            }
            this.ebsOptimizedSupport = ebsOptimizedSupport;
            return this;
        }
        @CustomType.Setter
        public Builder ebsPerformanceBaselineBandwidth(Integer ebsPerformanceBaselineBandwidth) {
            if (ebsPerformanceBaselineBandwidth == null) {
              throw new MissingRequiredPropertyException("GetInstanceTypeResult", "ebsPerformanceBaselineBandwidth");
            }
            this.ebsPerformanceBaselineBandwidth = ebsPerformanceBaselineBandwidth;
            return this;
        }
        @CustomType.Setter
        public Builder ebsPerformanceBaselineIops(Integer ebsPerformanceBaselineIops) {
            if (ebsPerformanceBaselineIops == null) {
              throw new MissingRequiredPropertyException("GetInstanceTypeResult", "ebsPerformanceBaselineIops");
            }
            this.ebsPerformanceBaselineIops = ebsPerformanceBaselineIops;
            return this;
        }
        @CustomType.Setter
        public Builder ebsPerformanceBaselineThroughput(Double ebsPerformanceBaselineThroughput) {
            if (ebsPerformanceBaselineThroughput == null) {
              throw new MissingRequiredPropertyException("GetInstanceTypeResult", "ebsPerformanceBaselineThroughput");
            }
            this.ebsPerformanceBaselineThroughput = ebsPerformanceBaselineThroughput;
            return this;
        }
        @CustomType.Setter
        public Builder ebsPerformanceMaximumBandwidth(Integer ebsPerformanceMaximumBandwidth) {
            if (ebsPerformanceMaximumBandwidth == null) {
              throw new MissingRequiredPropertyException("GetInstanceTypeResult", "ebsPerformanceMaximumBandwidth");
            }
            this.ebsPerformanceMaximumBandwidth = ebsPerformanceMaximumBandwidth;
            return this;
        }
        @CustomType.Setter
        public Builder ebsPerformanceMaximumIops(Integer ebsPerformanceMaximumIops) {
            if (ebsPerformanceMaximumIops == null) {
              throw new MissingRequiredPropertyException("GetInstanceTypeResult", "ebsPerformanceMaximumIops");
            }
            this.ebsPerformanceMaximumIops = ebsPerformanceMaximumIops;
            return this;
        }
        @CustomType.Setter
        public Builder ebsPerformanceMaximumThroughput(Double ebsPerformanceMaximumThroughput) {
            if (ebsPerformanceMaximumThroughput == null) {
              throw new MissingRequiredPropertyException("GetInstanceTypeResult", "ebsPerformanceMaximumThroughput");
            }
            this.ebsPerformanceMaximumThroughput = ebsPerformanceMaximumThroughput;
            return this;
        }
        @CustomType.Setter
        public Builder efaSupported(Boolean efaSupported) {
            if (efaSupported == null) {
              throw new MissingRequiredPropertyException("GetInstanceTypeResult", "efaSupported");
            }
            this.efaSupported = efaSupported;
            return this;
        }
        @CustomType.Setter
        public Builder enaSupport(String enaSupport) {
            if (enaSupport == null) {
              throw new MissingRequiredPropertyException("GetInstanceTypeResult", "enaSupport");
            }
            this.enaSupport = enaSupport;
            return this;
        }
        @CustomType.Setter
        public Builder encryptionInTransitSupported(Boolean encryptionInTransitSupported) {
            if (encryptionInTransitSupported == null) {
              throw new MissingRequiredPropertyException("GetInstanceTypeResult", "encryptionInTransitSupported");
            }
            this.encryptionInTransitSupported = encryptionInTransitSupported;
            return this;
        }
        @CustomType.Setter
        public Builder fpgas(List<GetInstanceTypeFpga> fpgas) {
            if (fpgas == null) {
              throw new MissingRequiredPropertyException("GetInstanceTypeResult", "fpgas");
            }
            this.fpgas = fpgas;
            return this;
        }
        public Builder fpgas(GetInstanceTypeFpga... fpgas) {
            return fpgas(List.of(fpgas));
        }
        @CustomType.Setter
        public Builder freeTierEligible(Boolean freeTierEligible) {
            if (freeTierEligible == null) {
              throw new MissingRequiredPropertyException("GetInstanceTypeResult", "freeTierEligible");
            }
            this.freeTierEligible = freeTierEligible;
            return this;
        }
        @CustomType.Setter
        public Builder gpuses(List<GetInstanceTypeGpus> gpuses) {
            if (gpuses == null) {
              throw new MissingRequiredPropertyException("GetInstanceTypeResult", "gpuses");
            }
            this.gpuses = gpuses;
            return this;
        }
        public Builder gpuses(GetInstanceTypeGpus... gpuses) {
            return gpuses(List.of(gpuses));
        }
        @CustomType.Setter
        public Builder hibernationSupported(Boolean hibernationSupported) {
            if (hibernationSupported == null) {
              throw new MissingRequiredPropertyException("GetInstanceTypeResult", "hibernationSupported");
            }
            this.hibernationSupported = hibernationSupported;
            return this;
        }
        @CustomType.Setter
        public Builder hypervisor(String hypervisor) {
            if (hypervisor == null) {
              throw new MissingRequiredPropertyException("GetInstanceTypeResult", "hypervisor");
            }
            this.hypervisor = hypervisor;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetInstanceTypeResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder inferenceAccelerators(List<GetInstanceTypeInferenceAccelerator> inferenceAccelerators) {
            if (inferenceAccelerators == null) {
              throw new MissingRequiredPropertyException("GetInstanceTypeResult", "inferenceAccelerators");
            }
            this.inferenceAccelerators = inferenceAccelerators;
            return this;
        }
        public Builder inferenceAccelerators(GetInstanceTypeInferenceAccelerator... inferenceAccelerators) {
            return inferenceAccelerators(List.of(inferenceAccelerators));
        }
        @CustomType.Setter
        public Builder instanceDisks(List<GetInstanceTypeInstanceDisk> instanceDisks) {
            if (instanceDisks == null) {
              throw new MissingRequiredPropertyException("GetInstanceTypeResult", "instanceDisks");
            }
            this.instanceDisks = instanceDisks;
            return this;
        }
        public Builder instanceDisks(GetInstanceTypeInstanceDisk... instanceDisks) {
            return instanceDisks(List.of(instanceDisks));
        }
        @CustomType.Setter
        public Builder instanceStorageSupported(Boolean instanceStorageSupported) {
            if (instanceStorageSupported == null) {
              throw new MissingRequiredPropertyException("GetInstanceTypeResult", "instanceStorageSupported");
            }
            this.instanceStorageSupported = instanceStorageSupported;
            return this;
        }
        @CustomType.Setter
        public Builder instanceType(String instanceType) {
            if (instanceType == null) {
              throw new MissingRequiredPropertyException("GetInstanceTypeResult", "instanceType");
            }
            this.instanceType = instanceType;
            return this;
        }
        @CustomType.Setter
        public Builder ipv6Supported(Boolean ipv6Supported) {
            if (ipv6Supported == null) {
              throw new MissingRequiredPropertyException("GetInstanceTypeResult", "ipv6Supported");
            }
            this.ipv6Supported = ipv6Supported;
            return this;
        }
        @CustomType.Setter
        public Builder maximumIpv4AddressesPerInterface(Integer maximumIpv4AddressesPerInterface) {
            if (maximumIpv4AddressesPerInterface == null) {
              throw new MissingRequiredPropertyException("GetInstanceTypeResult", "maximumIpv4AddressesPerInterface");
            }
            this.maximumIpv4AddressesPerInterface = maximumIpv4AddressesPerInterface;
            return this;
        }
        @CustomType.Setter
        public Builder maximumIpv6AddressesPerInterface(Integer maximumIpv6AddressesPerInterface) {
            if (maximumIpv6AddressesPerInterface == null) {
              throw new MissingRequiredPropertyException("GetInstanceTypeResult", "maximumIpv6AddressesPerInterface");
            }
            this.maximumIpv6AddressesPerInterface = maximumIpv6AddressesPerInterface;
            return this;
        }
        @CustomType.Setter
        public Builder maximumNetworkInterfaces(Integer maximumNetworkInterfaces) {
            if (maximumNetworkInterfaces == null) {
              throw new MissingRequiredPropertyException("GetInstanceTypeResult", "maximumNetworkInterfaces");
            }
            this.maximumNetworkInterfaces = maximumNetworkInterfaces;
            return this;
        }
        @CustomType.Setter
        public Builder memorySize(Integer memorySize) {
            if (memorySize == null) {
              throw new MissingRequiredPropertyException("GetInstanceTypeResult", "memorySize");
            }
            this.memorySize = memorySize;
            return this;
        }
        @CustomType.Setter
        public Builder networkPerformance(String networkPerformance) {
            if (networkPerformance == null) {
              throw new MissingRequiredPropertyException("GetInstanceTypeResult", "networkPerformance");
            }
            this.networkPerformance = networkPerformance;
            return this;
        }
        @CustomType.Setter
        public Builder supportedArchitectures(List<String> supportedArchitectures) {
            if (supportedArchitectures == null) {
              throw new MissingRequiredPropertyException("GetInstanceTypeResult", "supportedArchitectures");
            }
            this.supportedArchitectures = supportedArchitectures;
            return this;
        }
        public Builder supportedArchitectures(String... supportedArchitectures) {
            return supportedArchitectures(List.of(supportedArchitectures));
        }
        @CustomType.Setter
        public Builder supportedPlacementStrategies(List<String> supportedPlacementStrategies) {
            if (supportedPlacementStrategies == null) {
              throw new MissingRequiredPropertyException("GetInstanceTypeResult", "supportedPlacementStrategies");
            }
            this.supportedPlacementStrategies = supportedPlacementStrategies;
            return this;
        }
        public Builder supportedPlacementStrategies(String... supportedPlacementStrategies) {
            return supportedPlacementStrategies(List.of(supportedPlacementStrategies));
        }
        @CustomType.Setter
        public Builder supportedRootDeviceTypes(List<String> supportedRootDeviceTypes) {
            if (supportedRootDeviceTypes == null) {
              throw new MissingRequiredPropertyException("GetInstanceTypeResult", "supportedRootDeviceTypes");
            }
            this.supportedRootDeviceTypes = supportedRootDeviceTypes;
            return this;
        }
        public Builder supportedRootDeviceTypes(String... supportedRootDeviceTypes) {
            return supportedRootDeviceTypes(List.of(supportedRootDeviceTypes));
        }
        @CustomType.Setter
        public Builder supportedUsagesClasses(List<String> supportedUsagesClasses) {
            if (supportedUsagesClasses == null) {
              throw new MissingRequiredPropertyException("GetInstanceTypeResult", "supportedUsagesClasses");
            }
            this.supportedUsagesClasses = supportedUsagesClasses;
            return this;
        }
        public Builder supportedUsagesClasses(String... supportedUsagesClasses) {
            return supportedUsagesClasses(List.of(supportedUsagesClasses));
        }
        @CustomType.Setter
        public Builder supportedVirtualizationTypes(List<String> supportedVirtualizationTypes) {
            if (supportedVirtualizationTypes == null) {
              throw new MissingRequiredPropertyException("GetInstanceTypeResult", "supportedVirtualizationTypes");
            }
            this.supportedVirtualizationTypes = supportedVirtualizationTypes;
            return this;
        }
        public Builder supportedVirtualizationTypes(String... supportedVirtualizationTypes) {
            return supportedVirtualizationTypes(List.of(supportedVirtualizationTypes));
        }
        @CustomType.Setter
        public Builder sustainedClockSpeed(Double sustainedClockSpeed) {
            if (sustainedClockSpeed == null) {
              throw new MissingRequiredPropertyException("GetInstanceTypeResult", "sustainedClockSpeed");
            }
            this.sustainedClockSpeed = sustainedClockSpeed;
            return this;
        }
        @CustomType.Setter
        public Builder totalFpgaMemory(Integer totalFpgaMemory) {
            if (totalFpgaMemory == null) {
              throw new MissingRequiredPropertyException("GetInstanceTypeResult", "totalFpgaMemory");
            }
            this.totalFpgaMemory = totalFpgaMemory;
            return this;
        }
        @CustomType.Setter
        public Builder totalGpuMemory(Integer totalGpuMemory) {
            if (totalGpuMemory == null) {
              throw new MissingRequiredPropertyException("GetInstanceTypeResult", "totalGpuMemory");
            }
            this.totalGpuMemory = totalGpuMemory;
            return this;
        }
        @CustomType.Setter
        public Builder totalInstanceStorage(Integer totalInstanceStorage) {
            if (totalInstanceStorage == null) {
              throw new MissingRequiredPropertyException("GetInstanceTypeResult", "totalInstanceStorage");
            }
            this.totalInstanceStorage = totalInstanceStorage;
            return this;
        }
        @CustomType.Setter
        public Builder validCores(List<Integer> validCores) {
            if (validCores == null) {
              throw new MissingRequiredPropertyException("GetInstanceTypeResult", "validCores");
            }
            this.validCores = validCores;
            return this;
        }
        public Builder validCores(Integer... validCores) {
            return validCores(List.of(validCores));
        }
        @CustomType.Setter
        public Builder validThreadsPerCores(List<Integer> validThreadsPerCores) {
            if (validThreadsPerCores == null) {
              throw new MissingRequiredPropertyException("GetInstanceTypeResult", "validThreadsPerCores");
            }
            this.validThreadsPerCores = validThreadsPerCores;
            return this;
        }
        public Builder validThreadsPerCores(Integer... validThreadsPerCores) {
            return validThreadsPerCores(List.of(validThreadsPerCores));
        }
        public GetInstanceTypeResult build() {
            final var _resultValue = new GetInstanceTypeResult();
            _resultValue.autoRecoverySupported = autoRecoverySupported;
            _resultValue.bareMetal = bareMetal;
            _resultValue.burstablePerformanceSupported = burstablePerformanceSupported;
            _resultValue.currentGeneration = currentGeneration;
            _resultValue.dedicatedHostsSupported = dedicatedHostsSupported;
            _resultValue.defaultCores = defaultCores;
            _resultValue.defaultThreadsPerCore = defaultThreadsPerCore;
            _resultValue.defaultVcpus = defaultVcpus;
            _resultValue.ebsEncryptionSupport = ebsEncryptionSupport;
            _resultValue.ebsNvmeSupport = ebsNvmeSupport;
            _resultValue.ebsOptimizedSupport = ebsOptimizedSupport;
            _resultValue.ebsPerformanceBaselineBandwidth = ebsPerformanceBaselineBandwidth;
            _resultValue.ebsPerformanceBaselineIops = ebsPerformanceBaselineIops;
            _resultValue.ebsPerformanceBaselineThroughput = ebsPerformanceBaselineThroughput;
            _resultValue.ebsPerformanceMaximumBandwidth = ebsPerformanceMaximumBandwidth;
            _resultValue.ebsPerformanceMaximumIops = ebsPerformanceMaximumIops;
            _resultValue.ebsPerformanceMaximumThroughput = ebsPerformanceMaximumThroughput;
            _resultValue.efaSupported = efaSupported;
            _resultValue.enaSupport = enaSupport;
            _resultValue.encryptionInTransitSupported = encryptionInTransitSupported;
            _resultValue.fpgas = fpgas;
            _resultValue.freeTierEligible = freeTierEligible;
            _resultValue.gpuses = gpuses;
            _resultValue.hibernationSupported = hibernationSupported;
            _resultValue.hypervisor = hypervisor;
            _resultValue.id = id;
            _resultValue.inferenceAccelerators = inferenceAccelerators;
            _resultValue.instanceDisks = instanceDisks;
            _resultValue.instanceStorageSupported = instanceStorageSupported;
            _resultValue.instanceType = instanceType;
            _resultValue.ipv6Supported = ipv6Supported;
            _resultValue.maximumIpv4AddressesPerInterface = maximumIpv4AddressesPerInterface;
            _resultValue.maximumIpv6AddressesPerInterface = maximumIpv6AddressesPerInterface;
            _resultValue.maximumNetworkInterfaces = maximumNetworkInterfaces;
            _resultValue.memorySize = memorySize;
            _resultValue.networkPerformance = networkPerformance;
            _resultValue.supportedArchitectures = supportedArchitectures;
            _resultValue.supportedPlacementStrategies = supportedPlacementStrategies;
            _resultValue.supportedRootDeviceTypes = supportedRootDeviceTypes;
            _resultValue.supportedUsagesClasses = supportedUsagesClasses;
            _resultValue.supportedVirtualizationTypes = supportedVirtualizationTypes;
            _resultValue.sustainedClockSpeed = sustainedClockSpeed;
            _resultValue.totalFpgaMemory = totalFpgaMemory;
            _resultValue.totalGpuMemory = totalGpuMemory;
            _resultValue.totalInstanceStorage = totalInstanceStorage;
            _resultValue.validCores = validCores;
            _resultValue.validThreadsPerCores = validThreadsPerCores;
            return _resultValue;
        }
    }
}
