// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ec2.outputs;

import com.pulumi.aws.ec2.outputs.GetInstanceTypeFpga;
import com.pulumi.aws.ec2.outputs.GetInstanceTypeGpus;
import com.pulumi.aws.ec2.outputs.GetInstanceTypeInferenceAccelerator;
import com.pulumi.aws.ec2.outputs.GetInstanceTypeInstanceDisk;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetInstanceTypeResult {
    /**
     * @return `true` if auto recovery is supported.
     * 
     */
    private @Nullable Boolean autoRecoverySupported;
    /**
     * @return `true` if it is a bare metal instance type.
     * 
     */
    private @Nullable Boolean bareMetal;
    /**
     * @return `true` if the instance type is a burstable performance instance type.
     * 
     */
    private @Nullable Boolean burstablePerformanceSupported;
    /**
     * @return `true`  if the instance type is a current generation.
     * 
     */
    private @Nullable Boolean currentGeneration;
    /**
     * @return `true` if Dedicated Hosts are supported on the instance type.
     * 
     */
    private @Nullable Boolean dedicatedHostsSupported;
    /**
     * @return Default number of cores for the instance type.
     * 
     */
    private @Nullable Integer defaultCores;
    /**
     * @return The  default  number of threads per core for the instance type.
     * 
     */
    private @Nullable Integer defaultThreadsPerCore;
    /**
     * @return Default number of vCPUs for the instance type.
     * 
     */
    private @Nullable Integer defaultVcpus;
    /**
     * @return Indicates whether Amazon EBS encryption is supported.
     * 
     */
    private @Nullable String ebsEncryptionSupport;
    /**
     * @return Whether non-volatile memory express (NVMe) is supported.
     * 
     */
    private @Nullable String ebsNvmeSupport;
    /**
     * @return Indicates that the instance type is Amazon EBS-optimized.
     * 
     */
    private @Nullable String ebsOptimizedSupport;
    /**
     * @return The baseline bandwidth performance for an EBS-optimized instance type, in Mbps.
     * 
     */
    private @Nullable Integer ebsPerformanceBaselineBandwidth;
    /**
     * @return The baseline input/output storage operations per seconds for an EBS-optimized instance type.
     * 
     */
    private @Nullable Integer ebsPerformanceBaselineIops;
    /**
     * @return The baseline throughput performance for an EBS-optimized instance type, in MBps.
     * 
     */
    private @Nullable Double ebsPerformanceBaselineThroughput;
    /**
     * @return The maximum bandwidth performance for an EBS-optimized instance type, in Mbps.
     * 
     */
    private @Nullable Integer ebsPerformanceMaximumBandwidth;
    /**
     * @return The maximum input/output storage operations per second for an EBS-optimized instance type.
     * 
     */
    private @Nullable Integer ebsPerformanceMaximumIops;
    /**
     * @return The maximum throughput performance for an EBS-optimized instance type, in MBps.
     * 
     */
    private @Nullable Double ebsPerformanceMaximumThroughput;
    /**
     * @return Whether Elastic Fabric Adapter (EFA) is supported.
     * 
     */
    private @Nullable Boolean efaSupported;
    /**
     * @return Whether Elastic Network Adapter (ENA) is supported.
     * 
     */
    private @Nullable String enaSupport;
    /**
     * @return Indicates whether encryption in-transit between instances is supported.
     * 
     */
    private @Nullable Boolean encryptionInTransitSupported;
    /**
     * @return Describes the FPGA accelerator settings for the instance type.
     * * `fpgas.#.count` - The count of FPGA accelerators for the instance type.
     * * `fpgas.#.manufacturer` - The manufacturer of the FPGA accelerator.
     * * `fpgas.#.memory_size` - The size (in MiB) for the memory available to the FPGA accelerator.
     * * `fpgas.#.name` - The name of the FPGA accelerator.
     * 
     */
    private @Nullable List<GetInstanceTypeFpga> fpgas;
    /**
     * @return `true` if the instance type is eligible for the free tier.
     * 
     */
    private @Nullable Boolean freeTierEligible;
    /**
     * @return Describes the GPU accelerators for the instance type.
     * * `gpus.#.count` - The number of GPUs for the instance type.
     * * `gpus.#.manufacturer` - The manufacturer of the GPU accelerator.
     * * `gpus.#.memory_size` - The size (in MiB) for the memory available to the GPU accelerator.
     * * `gpus.#.name` - The name of the GPU accelerator.
     * 
     */
    private @Nullable List<GetInstanceTypeGpus> gpuses;
    /**
     * @return `true` if On-Demand hibernation is supported.
     * 
     */
    private @Nullable Boolean hibernationSupported;
    /**
     * @return Hypervisor used for the instance type.
     * 
     */
    private @Nullable String hypervisor;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private @Nullable String id;
    /**
     * @return Describes the Inference accelerators for the instance type.
     * * `inference_accelerators.#.count` - The number of Inference accelerators for the instance type.
     * * `inference_accelerators.#.manufacturer` - The manufacturer of the Inference accelerator.
     * * `inference_accelerators.#.name` - The name of the Inference accelerator.
     * 
     */
    private @Nullable List<GetInstanceTypeInferenceAccelerator> inferenceAccelerators;
    /**
     * @return Describes the disks for the instance type.
     * * `instance_disks.#.count` - The number of disks with this configuration.
     * * `instance_disks.#.size` - The size of the disk in GB.
     * * `instance_disks.#.type` - The type of disk.
     * 
     */
    private @Nullable List<GetInstanceTypeInstanceDisk> instanceDisks;
    /**
     * @return `true` if instance storage is supported.
     * 
     */
    private @Nullable Boolean instanceStorageSupported;
    private String instanceType;
    /**
     * @return `true` if IPv6 is supported.
     * 
     */
    private @Nullable Boolean ipv6Supported;
    /**
     * @return The maximum number of IPv4 addresses per network interface.
     * 
     */
    private @Nullable Integer maximumIpv4AddressesPerInterface;
    /**
     * @return The maximum number of IPv6 addresses per network interface.
     * 
     */
    private @Nullable Integer maximumIpv6AddressesPerInterface;
    /**
     * @return The maximum number of network interfaces for the instance type.
     * 
     */
    private @Nullable Integer maximumNetworkInterfaces;
    /**
     * @return Size of the instance memory, in MiB.
     * 
     */
    private @Nullable Integer memorySize;
    /**
     * @return Describes the network performance.
     * 
     */
    private @Nullable String networkPerformance;
    /**
     * @return A list of architectures supported by the instance type.
     * 
     */
    private @Nullable List<String> supportedArchitectures;
    /**
     * @return A list of supported placement groups types.
     * 
     */
    private @Nullable List<String> supportedPlacementStrategies;
    /**
     * @return Indicates the supported root device types.
     * 
     */
    private @Nullable List<String> supportedRootDeviceTypes;
    /**
     * @return Indicates whether the instance type is offered for spot or On-Demand.
     * 
     */
    private @Nullable List<String> supportedUsagesClasses;
    /**
     * @return The supported virtualization types.
     * 
     */
    private @Nullable List<String> supportedVirtualizationTypes;
    /**
     * @return The speed of the processor, in GHz.
     * 
     */
    private @Nullable Double sustainedClockSpeed;
    /**
     * @return Total memory of all FPGA accelerators for the instance type (in MiB).
     * 
     */
    private @Nullable Integer totalFpgaMemory;
    /**
     * @return Total size of the memory for the GPU accelerators for the instance type (in MiB).
     * 
     */
    private @Nullable Integer totalGpuMemory;
    /**
     * @return The total size of the instance disks, in GB.
     * 
     */
    private @Nullable Integer totalInstanceStorage;
    /**
     * @return List of the valid number of cores that can be configured for the instance type.
     * 
     */
    private @Nullable List<Integer> validCores;
    /**
     * @return List of the valid number of threads per core that can be configured for the instance type.
     * 
     */
    private @Nullable List<Integer> validThreadsPerCores;

    private GetInstanceTypeResult() {}
    /**
     * @return `true` if auto recovery is supported.
     * 
     */
    public Optional<Boolean> autoRecoverySupported() {
        return Optional.ofNullable(this.autoRecoverySupported);
    }
    /**
     * @return `true` if it is a bare metal instance type.
     * 
     */
    public Optional<Boolean> bareMetal() {
        return Optional.ofNullable(this.bareMetal);
    }
    /**
     * @return `true` if the instance type is a burstable performance instance type.
     * 
     */
    public Optional<Boolean> burstablePerformanceSupported() {
        return Optional.ofNullable(this.burstablePerformanceSupported);
    }
    /**
     * @return `true`  if the instance type is a current generation.
     * 
     */
    public Optional<Boolean> currentGeneration() {
        return Optional.ofNullable(this.currentGeneration);
    }
    /**
     * @return `true` if Dedicated Hosts are supported on the instance type.
     * 
     */
    public Optional<Boolean> dedicatedHostsSupported() {
        return Optional.ofNullable(this.dedicatedHostsSupported);
    }
    /**
     * @return Default number of cores for the instance type.
     * 
     */
    public Optional<Integer> defaultCores() {
        return Optional.ofNullable(this.defaultCores);
    }
    /**
     * @return The  default  number of threads per core for the instance type.
     * 
     */
    public Optional<Integer> defaultThreadsPerCore() {
        return Optional.ofNullable(this.defaultThreadsPerCore);
    }
    /**
     * @return Default number of vCPUs for the instance type.
     * 
     */
    public Optional<Integer> defaultVcpus() {
        return Optional.ofNullable(this.defaultVcpus);
    }
    /**
     * @return Indicates whether Amazon EBS encryption is supported.
     * 
     */
    public Optional<String> ebsEncryptionSupport() {
        return Optional.ofNullable(this.ebsEncryptionSupport);
    }
    /**
     * @return Whether non-volatile memory express (NVMe) is supported.
     * 
     */
    public Optional<String> ebsNvmeSupport() {
        return Optional.ofNullable(this.ebsNvmeSupport);
    }
    /**
     * @return Indicates that the instance type is Amazon EBS-optimized.
     * 
     */
    public Optional<String> ebsOptimizedSupport() {
        return Optional.ofNullable(this.ebsOptimizedSupport);
    }
    /**
     * @return The baseline bandwidth performance for an EBS-optimized instance type, in Mbps.
     * 
     */
    public Optional<Integer> ebsPerformanceBaselineBandwidth() {
        return Optional.ofNullable(this.ebsPerformanceBaselineBandwidth);
    }
    /**
     * @return The baseline input/output storage operations per seconds for an EBS-optimized instance type.
     * 
     */
    public Optional<Integer> ebsPerformanceBaselineIops() {
        return Optional.ofNullable(this.ebsPerformanceBaselineIops);
    }
    /**
     * @return The baseline throughput performance for an EBS-optimized instance type, in MBps.
     * 
     */
    public Optional<Double> ebsPerformanceBaselineThroughput() {
        return Optional.ofNullable(this.ebsPerformanceBaselineThroughput);
    }
    /**
     * @return The maximum bandwidth performance for an EBS-optimized instance type, in Mbps.
     * 
     */
    public Optional<Integer> ebsPerformanceMaximumBandwidth() {
        return Optional.ofNullable(this.ebsPerformanceMaximumBandwidth);
    }
    /**
     * @return The maximum input/output storage operations per second for an EBS-optimized instance type.
     * 
     */
    public Optional<Integer> ebsPerformanceMaximumIops() {
        return Optional.ofNullable(this.ebsPerformanceMaximumIops);
    }
    /**
     * @return The maximum throughput performance for an EBS-optimized instance type, in MBps.
     * 
     */
    public Optional<Double> ebsPerformanceMaximumThroughput() {
        return Optional.ofNullable(this.ebsPerformanceMaximumThroughput);
    }
    /**
     * @return Whether Elastic Fabric Adapter (EFA) is supported.
     * 
     */
    public Optional<Boolean> efaSupported() {
        return Optional.ofNullable(this.efaSupported);
    }
    /**
     * @return Whether Elastic Network Adapter (ENA) is supported.
     * 
     */
    public Optional<String> enaSupport() {
        return Optional.ofNullable(this.enaSupport);
    }
    /**
     * @return Indicates whether encryption in-transit between instances is supported.
     * 
     */
    public Optional<Boolean> encryptionInTransitSupported() {
        return Optional.ofNullable(this.encryptionInTransitSupported);
    }
    /**
     * @return Describes the FPGA accelerator settings for the instance type.
     * * `fpgas.#.count` - The count of FPGA accelerators for the instance type.
     * * `fpgas.#.manufacturer` - The manufacturer of the FPGA accelerator.
     * * `fpgas.#.memory_size` - The size (in MiB) for the memory available to the FPGA accelerator.
     * * `fpgas.#.name` - The name of the FPGA accelerator.
     * 
     */
    public List<GetInstanceTypeFpga> fpgas() {
        return this.fpgas == null ? List.of() : this.fpgas;
    }
    /**
     * @return `true` if the instance type is eligible for the free tier.
     * 
     */
    public Optional<Boolean> freeTierEligible() {
        return Optional.ofNullable(this.freeTierEligible);
    }
    /**
     * @return Describes the GPU accelerators for the instance type.
     * * `gpus.#.count` - The number of GPUs for the instance type.
     * * `gpus.#.manufacturer` - The manufacturer of the GPU accelerator.
     * * `gpus.#.memory_size` - The size (in MiB) for the memory available to the GPU accelerator.
     * * `gpus.#.name` - The name of the GPU accelerator.
     * 
     */
    public List<GetInstanceTypeGpus> gpuses() {
        return this.gpuses == null ? List.of() : this.gpuses;
    }
    /**
     * @return `true` if On-Demand hibernation is supported.
     * 
     */
    public Optional<Boolean> hibernationSupported() {
        return Optional.ofNullable(this.hibernationSupported);
    }
    /**
     * @return Hypervisor used for the instance type.
     * 
     */
    public Optional<String> hypervisor() {
        return Optional.ofNullable(this.hypervisor);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Describes the Inference accelerators for the instance type.
     * * `inference_accelerators.#.count` - The number of Inference accelerators for the instance type.
     * * `inference_accelerators.#.manufacturer` - The manufacturer of the Inference accelerator.
     * * `inference_accelerators.#.name` - The name of the Inference accelerator.
     * 
     */
    public List<GetInstanceTypeInferenceAccelerator> inferenceAccelerators() {
        return this.inferenceAccelerators == null ? List.of() : this.inferenceAccelerators;
    }
    /**
     * @return Describes the disks for the instance type.
     * * `instance_disks.#.count` - The number of disks with this configuration.
     * * `instance_disks.#.size` - The size of the disk in GB.
     * * `instance_disks.#.type` - The type of disk.
     * 
     */
    public List<GetInstanceTypeInstanceDisk> instanceDisks() {
        return this.instanceDisks == null ? List.of() : this.instanceDisks;
    }
    /**
     * @return `true` if instance storage is supported.
     * 
     */
    public Optional<Boolean> instanceStorageSupported() {
        return Optional.ofNullable(this.instanceStorageSupported);
    }
    public String instanceType() {
        return this.instanceType;
    }
    /**
     * @return `true` if IPv6 is supported.
     * 
     */
    public Optional<Boolean> ipv6Supported() {
        return Optional.ofNullable(this.ipv6Supported);
    }
    /**
     * @return The maximum number of IPv4 addresses per network interface.
     * 
     */
    public Optional<Integer> maximumIpv4AddressesPerInterface() {
        return Optional.ofNullable(this.maximumIpv4AddressesPerInterface);
    }
    /**
     * @return The maximum number of IPv6 addresses per network interface.
     * 
     */
    public Optional<Integer> maximumIpv6AddressesPerInterface() {
        return Optional.ofNullable(this.maximumIpv6AddressesPerInterface);
    }
    /**
     * @return The maximum number of network interfaces for the instance type.
     * 
     */
    public Optional<Integer> maximumNetworkInterfaces() {
        return Optional.ofNullable(this.maximumNetworkInterfaces);
    }
    /**
     * @return Size of the instance memory, in MiB.
     * 
     */
    public Optional<Integer> memorySize() {
        return Optional.ofNullable(this.memorySize);
    }
    /**
     * @return Describes the network performance.
     * 
     */
    public Optional<String> networkPerformance() {
        return Optional.ofNullable(this.networkPerformance);
    }
    /**
     * @return A list of architectures supported by the instance type.
     * 
     */
    public List<String> supportedArchitectures() {
        return this.supportedArchitectures == null ? List.of() : this.supportedArchitectures;
    }
    /**
     * @return A list of supported placement groups types.
     * 
     */
    public List<String> supportedPlacementStrategies() {
        return this.supportedPlacementStrategies == null ? List.of() : this.supportedPlacementStrategies;
    }
    /**
     * @return Indicates the supported root device types.
     * 
     */
    public List<String> supportedRootDeviceTypes() {
        return this.supportedRootDeviceTypes == null ? List.of() : this.supportedRootDeviceTypes;
    }
    /**
     * @return Indicates whether the instance type is offered for spot or On-Demand.
     * 
     */
    public List<String> supportedUsagesClasses() {
        return this.supportedUsagesClasses == null ? List.of() : this.supportedUsagesClasses;
    }
    /**
     * @return The supported virtualization types.
     * 
     */
    public List<String> supportedVirtualizationTypes() {
        return this.supportedVirtualizationTypes == null ? List.of() : this.supportedVirtualizationTypes;
    }
    /**
     * @return The speed of the processor, in GHz.
     * 
     */
    public Optional<Double> sustainedClockSpeed() {
        return Optional.ofNullable(this.sustainedClockSpeed);
    }
    /**
     * @return Total memory of all FPGA accelerators for the instance type (in MiB).
     * 
     */
    public Optional<Integer> totalFpgaMemory() {
        return Optional.ofNullable(this.totalFpgaMemory);
    }
    /**
     * @return Total size of the memory for the GPU accelerators for the instance type (in MiB).
     * 
     */
    public Optional<Integer> totalGpuMemory() {
        return Optional.ofNullable(this.totalGpuMemory);
    }
    /**
     * @return The total size of the instance disks, in GB.
     * 
     */
    public Optional<Integer> totalInstanceStorage() {
        return Optional.ofNullable(this.totalInstanceStorage);
    }
    /**
     * @return List of the valid number of cores that can be configured for the instance type.
     * 
     */
    public List<Integer> validCores() {
        return this.validCores == null ? List.of() : this.validCores;
    }
    /**
     * @return List of the valid number of threads per core that can be configured for the instance type.
     * 
     */
    public List<Integer> validThreadsPerCores() {
        return this.validThreadsPerCores == null ? List.of() : this.validThreadsPerCores;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInstanceTypeResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean autoRecoverySupported;
        private @Nullable Boolean bareMetal;
        private @Nullable Boolean burstablePerformanceSupported;
        private @Nullable Boolean currentGeneration;
        private @Nullable Boolean dedicatedHostsSupported;
        private @Nullable Integer defaultCores;
        private @Nullable Integer defaultThreadsPerCore;
        private @Nullable Integer defaultVcpus;
        private @Nullable String ebsEncryptionSupport;
        private @Nullable String ebsNvmeSupport;
        private @Nullable String ebsOptimizedSupport;
        private @Nullable Integer ebsPerformanceBaselineBandwidth;
        private @Nullable Integer ebsPerformanceBaselineIops;
        private @Nullable Double ebsPerformanceBaselineThroughput;
        private @Nullable Integer ebsPerformanceMaximumBandwidth;
        private @Nullable Integer ebsPerformanceMaximumIops;
        private @Nullable Double ebsPerformanceMaximumThroughput;
        private @Nullable Boolean efaSupported;
        private @Nullable String enaSupport;
        private @Nullable Boolean encryptionInTransitSupported;
        private @Nullable List<GetInstanceTypeFpga> fpgas;
        private @Nullable Boolean freeTierEligible;
        private @Nullable List<GetInstanceTypeGpus> gpuses;
        private @Nullable Boolean hibernationSupported;
        private @Nullable String hypervisor;
        private @Nullable String id;
        private @Nullable List<GetInstanceTypeInferenceAccelerator> inferenceAccelerators;
        private @Nullable List<GetInstanceTypeInstanceDisk> instanceDisks;
        private @Nullable Boolean instanceStorageSupported;
        private String instanceType;
        private @Nullable Boolean ipv6Supported;
        private @Nullable Integer maximumIpv4AddressesPerInterface;
        private @Nullable Integer maximumIpv6AddressesPerInterface;
        private @Nullable Integer maximumNetworkInterfaces;
        private @Nullable Integer memorySize;
        private @Nullable String networkPerformance;
        private @Nullable List<String> supportedArchitectures;
        private @Nullable List<String> supportedPlacementStrategies;
        private @Nullable List<String> supportedRootDeviceTypes;
        private @Nullable List<String> supportedUsagesClasses;
        private @Nullable List<String> supportedVirtualizationTypes;
        private @Nullable Double sustainedClockSpeed;
        private @Nullable Integer totalFpgaMemory;
        private @Nullable Integer totalGpuMemory;
        private @Nullable Integer totalInstanceStorage;
        private @Nullable List<Integer> validCores;
        private @Nullable List<Integer> validThreadsPerCores;
        public Builder() {}
        public Builder(GetInstanceTypeResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autoRecoverySupported = defaults.autoRecoverySupported;
    	      this.bareMetal = defaults.bareMetal;
    	      this.burstablePerformanceSupported = defaults.burstablePerformanceSupported;
    	      this.currentGeneration = defaults.currentGeneration;
    	      this.dedicatedHostsSupported = defaults.dedicatedHostsSupported;
    	      this.defaultCores = defaults.defaultCores;
    	      this.defaultThreadsPerCore = defaults.defaultThreadsPerCore;
    	      this.defaultVcpus = defaults.defaultVcpus;
    	      this.ebsEncryptionSupport = defaults.ebsEncryptionSupport;
    	      this.ebsNvmeSupport = defaults.ebsNvmeSupport;
    	      this.ebsOptimizedSupport = defaults.ebsOptimizedSupport;
    	      this.ebsPerformanceBaselineBandwidth = defaults.ebsPerformanceBaselineBandwidth;
    	      this.ebsPerformanceBaselineIops = defaults.ebsPerformanceBaselineIops;
    	      this.ebsPerformanceBaselineThroughput = defaults.ebsPerformanceBaselineThroughput;
    	      this.ebsPerformanceMaximumBandwidth = defaults.ebsPerformanceMaximumBandwidth;
    	      this.ebsPerformanceMaximumIops = defaults.ebsPerformanceMaximumIops;
    	      this.ebsPerformanceMaximumThroughput = defaults.ebsPerformanceMaximumThroughput;
    	      this.efaSupported = defaults.efaSupported;
    	      this.enaSupport = defaults.enaSupport;
    	      this.encryptionInTransitSupported = defaults.encryptionInTransitSupported;
    	      this.fpgas = defaults.fpgas;
    	      this.freeTierEligible = defaults.freeTierEligible;
    	      this.gpuses = defaults.gpuses;
    	      this.hibernationSupported = defaults.hibernationSupported;
    	      this.hypervisor = defaults.hypervisor;
    	      this.id = defaults.id;
    	      this.inferenceAccelerators = defaults.inferenceAccelerators;
    	      this.instanceDisks = defaults.instanceDisks;
    	      this.instanceStorageSupported = defaults.instanceStorageSupported;
    	      this.instanceType = defaults.instanceType;
    	      this.ipv6Supported = defaults.ipv6Supported;
    	      this.maximumIpv4AddressesPerInterface = defaults.maximumIpv4AddressesPerInterface;
    	      this.maximumIpv6AddressesPerInterface = defaults.maximumIpv6AddressesPerInterface;
    	      this.maximumNetworkInterfaces = defaults.maximumNetworkInterfaces;
    	      this.memorySize = defaults.memorySize;
    	      this.networkPerformance = defaults.networkPerformance;
    	      this.supportedArchitectures = defaults.supportedArchitectures;
    	      this.supportedPlacementStrategies = defaults.supportedPlacementStrategies;
    	      this.supportedRootDeviceTypes = defaults.supportedRootDeviceTypes;
    	      this.supportedUsagesClasses = defaults.supportedUsagesClasses;
    	      this.supportedVirtualizationTypes = defaults.supportedVirtualizationTypes;
    	      this.sustainedClockSpeed = defaults.sustainedClockSpeed;
    	      this.totalFpgaMemory = defaults.totalFpgaMemory;
    	      this.totalGpuMemory = defaults.totalGpuMemory;
    	      this.totalInstanceStorage = defaults.totalInstanceStorage;
    	      this.validCores = defaults.validCores;
    	      this.validThreadsPerCores = defaults.validThreadsPerCores;
        }

        @CustomType.Setter
        public Builder autoRecoverySupported(@Nullable Boolean autoRecoverySupported) {
            this.autoRecoverySupported = autoRecoverySupported;
            return this;
        }
        @CustomType.Setter
        public Builder bareMetal(@Nullable Boolean bareMetal) {
            this.bareMetal = bareMetal;
            return this;
        }
        @CustomType.Setter
        public Builder burstablePerformanceSupported(@Nullable Boolean burstablePerformanceSupported) {
            this.burstablePerformanceSupported = burstablePerformanceSupported;
            return this;
        }
        @CustomType.Setter
        public Builder currentGeneration(@Nullable Boolean currentGeneration) {
            this.currentGeneration = currentGeneration;
            return this;
        }
        @CustomType.Setter
        public Builder dedicatedHostsSupported(@Nullable Boolean dedicatedHostsSupported) {
            this.dedicatedHostsSupported = dedicatedHostsSupported;
            return this;
        }
        @CustomType.Setter
        public Builder defaultCores(@Nullable Integer defaultCores) {
            this.defaultCores = defaultCores;
            return this;
        }
        @CustomType.Setter
        public Builder defaultThreadsPerCore(@Nullable Integer defaultThreadsPerCore) {
            this.defaultThreadsPerCore = defaultThreadsPerCore;
            return this;
        }
        @CustomType.Setter
        public Builder defaultVcpus(@Nullable Integer defaultVcpus) {
            this.defaultVcpus = defaultVcpus;
            return this;
        }
        @CustomType.Setter
        public Builder ebsEncryptionSupport(@Nullable String ebsEncryptionSupport) {
            this.ebsEncryptionSupport = ebsEncryptionSupport;
            return this;
        }
        @CustomType.Setter
        public Builder ebsNvmeSupport(@Nullable String ebsNvmeSupport) {
            this.ebsNvmeSupport = ebsNvmeSupport;
            return this;
        }
        @CustomType.Setter
        public Builder ebsOptimizedSupport(@Nullable String ebsOptimizedSupport) {
            this.ebsOptimizedSupport = ebsOptimizedSupport;
            return this;
        }
        @CustomType.Setter
        public Builder ebsPerformanceBaselineBandwidth(@Nullable Integer ebsPerformanceBaselineBandwidth) {
            this.ebsPerformanceBaselineBandwidth = ebsPerformanceBaselineBandwidth;
            return this;
        }
        @CustomType.Setter
        public Builder ebsPerformanceBaselineIops(@Nullable Integer ebsPerformanceBaselineIops) {
            this.ebsPerformanceBaselineIops = ebsPerformanceBaselineIops;
            return this;
        }
        @CustomType.Setter
        public Builder ebsPerformanceBaselineThroughput(@Nullable Double ebsPerformanceBaselineThroughput) {
            this.ebsPerformanceBaselineThroughput = ebsPerformanceBaselineThroughput;
            return this;
        }
        @CustomType.Setter
        public Builder ebsPerformanceMaximumBandwidth(@Nullable Integer ebsPerformanceMaximumBandwidth) {
            this.ebsPerformanceMaximumBandwidth = ebsPerformanceMaximumBandwidth;
            return this;
        }
        @CustomType.Setter
        public Builder ebsPerformanceMaximumIops(@Nullable Integer ebsPerformanceMaximumIops) {
            this.ebsPerformanceMaximumIops = ebsPerformanceMaximumIops;
            return this;
        }
        @CustomType.Setter
        public Builder ebsPerformanceMaximumThroughput(@Nullable Double ebsPerformanceMaximumThroughput) {
            this.ebsPerformanceMaximumThroughput = ebsPerformanceMaximumThroughput;
            return this;
        }
        @CustomType.Setter
        public Builder efaSupported(@Nullable Boolean efaSupported) {
            this.efaSupported = efaSupported;
            return this;
        }
        @CustomType.Setter
        public Builder enaSupport(@Nullable String enaSupport) {
            this.enaSupport = enaSupport;
            return this;
        }
        @CustomType.Setter
        public Builder encryptionInTransitSupported(@Nullable Boolean encryptionInTransitSupported) {
            this.encryptionInTransitSupported = encryptionInTransitSupported;
            return this;
        }
        @CustomType.Setter
        public Builder fpgas(@Nullable List<GetInstanceTypeFpga> fpgas) {
            this.fpgas = fpgas;
            return this;
        }
        public Builder fpgas(GetInstanceTypeFpga... fpgas) {
            return fpgas(List.of(fpgas));
        }
        @CustomType.Setter
        public Builder freeTierEligible(@Nullable Boolean freeTierEligible) {
            this.freeTierEligible = freeTierEligible;
            return this;
        }
        @CustomType.Setter
        public Builder gpuses(@Nullable List<GetInstanceTypeGpus> gpuses) {
            this.gpuses = gpuses;
            return this;
        }
        public Builder gpuses(GetInstanceTypeGpus... gpuses) {
            return gpuses(List.of(gpuses));
        }
        @CustomType.Setter
        public Builder hibernationSupported(@Nullable Boolean hibernationSupported) {
            this.hibernationSupported = hibernationSupported;
            return this;
        }
        @CustomType.Setter
        public Builder hypervisor(@Nullable String hypervisor) {
            this.hypervisor = hypervisor;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder inferenceAccelerators(@Nullable List<GetInstanceTypeInferenceAccelerator> inferenceAccelerators) {
            this.inferenceAccelerators = inferenceAccelerators;
            return this;
        }
        public Builder inferenceAccelerators(GetInstanceTypeInferenceAccelerator... inferenceAccelerators) {
            return inferenceAccelerators(List.of(inferenceAccelerators));
        }
        @CustomType.Setter
        public Builder instanceDisks(@Nullable List<GetInstanceTypeInstanceDisk> instanceDisks) {
            this.instanceDisks = instanceDisks;
            return this;
        }
        public Builder instanceDisks(GetInstanceTypeInstanceDisk... instanceDisks) {
            return instanceDisks(List.of(instanceDisks));
        }
        @CustomType.Setter
        public Builder instanceStorageSupported(@Nullable Boolean instanceStorageSupported) {
            this.instanceStorageSupported = instanceStorageSupported;
            return this;
        }
        @CustomType.Setter
        public Builder instanceType(String instanceType) {
            this.instanceType = Objects.requireNonNull(instanceType);
            return this;
        }
        @CustomType.Setter
        public Builder ipv6Supported(@Nullable Boolean ipv6Supported) {
            this.ipv6Supported = ipv6Supported;
            return this;
        }
        @CustomType.Setter
        public Builder maximumIpv4AddressesPerInterface(@Nullable Integer maximumIpv4AddressesPerInterface) {
            this.maximumIpv4AddressesPerInterface = maximumIpv4AddressesPerInterface;
            return this;
        }
        @CustomType.Setter
        public Builder maximumIpv6AddressesPerInterface(@Nullable Integer maximumIpv6AddressesPerInterface) {
            this.maximumIpv6AddressesPerInterface = maximumIpv6AddressesPerInterface;
            return this;
        }
        @CustomType.Setter
        public Builder maximumNetworkInterfaces(@Nullable Integer maximumNetworkInterfaces) {
            this.maximumNetworkInterfaces = maximumNetworkInterfaces;
            return this;
        }
        @CustomType.Setter
        public Builder memorySize(@Nullable Integer memorySize) {
            this.memorySize = memorySize;
            return this;
        }
        @CustomType.Setter
        public Builder networkPerformance(@Nullable String networkPerformance) {
            this.networkPerformance = networkPerformance;
            return this;
        }
        @CustomType.Setter
        public Builder supportedArchitectures(@Nullable List<String> supportedArchitectures) {
            this.supportedArchitectures = supportedArchitectures;
            return this;
        }
        public Builder supportedArchitectures(String... supportedArchitectures) {
            return supportedArchitectures(List.of(supportedArchitectures));
        }
        @CustomType.Setter
        public Builder supportedPlacementStrategies(@Nullable List<String> supportedPlacementStrategies) {
            this.supportedPlacementStrategies = supportedPlacementStrategies;
            return this;
        }
        public Builder supportedPlacementStrategies(String... supportedPlacementStrategies) {
            return supportedPlacementStrategies(List.of(supportedPlacementStrategies));
        }
        @CustomType.Setter
        public Builder supportedRootDeviceTypes(@Nullable List<String> supportedRootDeviceTypes) {
            this.supportedRootDeviceTypes = supportedRootDeviceTypes;
            return this;
        }
        public Builder supportedRootDeviceTypes(String... supportedRootDeviceTypes) {
            return supportedRootDeviceTypes(List.of(supportedRootDeviceTypes));
        }
        @CustomType.Setter
        public Builder supportedUsagesClasses(@Nullable List<String> supportedUsagesClasses) {
            this.supportedUsagesClasses = supportedUsagesClasses;
            return this;
        }
        public Builder supportedUsagesClasses(String... supportedUsagesClasses) {
            return supportedUsagesClasses(List.of(supportedUsagesClasses));
        }
        @CustomType.Setter
        public Builder supportedVirtualizationTypes(@Nullable List<String> supportedVirtualizationTypes) {
            this.supportedVirtualizationTypes = supportedVirtualizationTypes;
            return this;
        }
        public Builder supportedVirtualizationTypes(String... supportedVirtualizationTypes) {
            return supportedVirtualizationTypes(List.of(supportedVirtualizationTypes));
        }
        @CustomType.Setter
        public Builder sustainedClockSpeed(@Nullable Double sustainedClockSpeed) {
            this.sustainedClockSpeed = sustainedClockSpeed;
            return this;
        }
        @CustomType.Setter
        public Builder totalFpgaMemory(@Nullable Integer totalFpgaMemory) {
            this.totalFpgaMemory = totalFpgaMemory;
            return this;
        }
        @CustomType.Setter
        public Builder totalGpuMemory(@Nullable Integer totalGpuMemory) {
            this.totalGpuMemory = totalGpuMemory;
            return this;
        }
        @CustomType.Setter
        public Builder totalInstanceStorage(@Nullable Integer totalInstanceStorage) {
            this.totalInstanceStorage = totalInstanceStorage;
            return this;
        }
        @CustomType.Setter
        public Builder validCores(@Nullable List<Integer> validCores) {
            this.validCores = validCores;
            return this;
        }
        public Builder validCores(Integer... validCores) {
            return validCores(List.of(validCores));
        }
        @CustomType.Setter
        public Builder validThreadsPerCores(@Nullable List<Integer> validThreadsPerCores) {
            this.validThreadsPerCores = validThreadsPerCores;
            return this;
        }
        public Builder validThreadsPerCores(Integer... validThreadsPerCores) {
            return validThreadsPerCores(List.of(validThreadsPerCores));
        }
        public GetInstanceTypeResult build() {
            final var o = new GetInstanceTypeResult();
            o.autoRecoverySupported = autoRecoverySupported;
            o.bareMetal = bareMetal;
            o.burstablePerformanceSupported = burstablePerformanceSupported;
            o.currentGeneration = currentGeneration;
            o.dedicatedHostsSupported = dedicatedHostsSupported;
            o.defaultCores = defaultCores;
            o.defaultThreadsPerCore = defaultThreadsPerCore;
            o.defaultVcpus = defaultVcpus;
            o.ebsEncryptionSupport = ebsEncryptionSupport;
            o.ebsNvmeSupport = ebsNvmeSupport;
            o.ebsOptimizedSupport = ebsOptimizedSupport;
            o.ebsPerformanceBaselineBandwidth = ebsPerformanceBaselineBandwidth;
            o.ebsPerformanceBaselineIops = ebsPerformanceBaselineIops;
            o.ebsPerformanceBaselineThroughput = ebsPerformanceBaselineThroughput;
            o.ebsPerformanceMaximumBandwidth = ebsPerformanceMaximumBandwidth;
            o.ebsPerformanceMaximumIops = ebsPerformanceMaximumIops;
            o.ebsPerformanceMaximumThroughput = ebsPerformanceMaximumThroughput;
            o.efaSupported = efaSupported;
            o.enaSupport = enaSupport;
            o.encryptionInTransitSupported = encryptionInTransitSupported;
            o.fpgas = fpgas;
            o.freeTierEligible = freeTierEligible;
            o.gpuses = gpuses;
            o.hibernationSupported = hibernationSupported;
            o.hypervisor = hypervisor;
            o.id = id;
            o.inferenceAccelerators = inferenceAccelerators;
            o.instanceDisks = instanceDisks;
            o.instanceStorageSupported = instanceStorageSupported;
            o.instanceType = instanceType;
            o.ipv6Supported = ipv6Supported;
            o.maximumIpv4AddressesPerInterface = maximumIpv4AddressesPerInterface;
            o.maximumIpv6AddressesPerInterface = maximumIpv6AddressesPerInterface;
            o.maximumNetworkInterfaces = maximumNetworkInterfaces;
            o.memorySize = memorySize;
            o.networkPerformance = networkPerformance;
            o.supportedArchitectures = supportedArchitectures;
            o.supportedPlacementStrategies = supportedPlacementStrategies;
            o.supportedRootDeviceTypes = supportedRootDeviceTypes;
            o.supportedUsagesClasses = supportedUsagesClasses;
            o.supportedVirtualizationTypes = supportedVirtualizationTypes;
            o.sustainedClockSpeed = sustainedClockSpeed;
            o.totalFpgaMemory = totalFpgaMemory;
            o.totalGpuMemory = totalGpuMemory;
            o.totalInstanceStorage = totalInstanceStorage;
            o.validCores = validCores;
            o.validThreadsPerCores = validThreadsPerCores;
            return o;
        }
    }
}
