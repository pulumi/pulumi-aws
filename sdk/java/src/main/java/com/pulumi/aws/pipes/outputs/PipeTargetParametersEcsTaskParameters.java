// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.pipes.outputs;

import com.pulumi.aws.pipes.outputs.PipeTargetParametersEcsTaskParametersCapacityProviderStrategy;
import com.pulumi.aws.pipes.outputs.PipeTargetParametersEcsTaskParametersNetworkConfiguration;
import com.pulumi.aws.pipes.outputs.PipeTargetParametersEcsTaskParametersOverrides;
import com.pulumi.aws.pipes.outputs.PipeTargetParametersEcsTaskParametersPlacementConstraint;
import com.pulumi.aws.pipes.outputs.PipeTargetParametersEcsTaskParametersPlacementStrategy;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class PipeTargetParametersEcsTaskParameters {
    /**
     * @return List of capacity provider strategies to use for the task. If a capacityProviderStrategy is specified, the launchType parameter must be omitted. If no capacityProviderStrategy or launchType is specified, the defaultCapacityProviderStrategy for the cluster is used. Detailed below.
     * 
     */
    private @Nullable List<PipeTargetParametersEcsTaskParametersCapacityProviderStrategy> capacityProviderStrategies;
    /**
     * @return Specifies whether to enable Amazon ECS managed tags for the task. Valid values: true, false.
     * 
     */
    private @Nullable Boolean enableEcsManagedTags;
    /**
     * @return Whether or not to enable the execute command functionality for the containers in this task. If true, this enables execute command functionality on all containers in the task. Valid values: true, false.
     * 
     */
    private @Nullable Boolean enableExecuteCommand;
    /**
     * @return Specifies an Amazon ECS task group for the task. The maximum length is 255 characters.
     * 
     */
    private @Nullable String group;
    /**
     * @return Specifies the launch type on which your task is running. The launch type that you specify here must match one of the launch type (compatibilities) of the target task. The FARGATE value is supported only in the Regions where AWS Fargate with Amazon ECS is supported. Valid Values: EC2, FARGATE, EXTERNAL
     * 
     */
    private @Nullable String launchType;
    /**
     * @return Use this structure if the Amazon ECS task uses the awsvpc network mode. This structure specifies the VPC subnets and security groups associated with the task, and whether a public IP address is to be used. This structure is required if LaunchType is FARGATE because the awsvpc mode is required for Fargate tasks. If you specify NetworkConfiguration when the target ECS task does not use the awsvpc network mode, the task fails. Detailed below.
     * 
     */
    private @Nullable PipeTargetParametersEcsTaskParametersNetworkConfiguration networkConfiguration;
    /**
     * @return The overrides that are associated with a task. Detailed below.
     * 
     */
    private @Nullable PipeTargetParametersEcsTaskParametersOverrides overrides;
    /**
     * @return An array of placement constraint objects to use for the task. You can specify up to 10 constraints per task (including constraints in the task definition and those specified at runtime). Detailed below.
     * 
     */
    private @Nullable List<PipeTargetParametersEcsTaskParametersPlacementConstraint> placementConstraints;
    /**
     * @return The placement strategy objects to use for the task. You can specify a maximum of five strategy rules per task. Detailed below.
     * 
     */
    private @Nullable List<PipeTargetParametersEcsTaskParametersPlacementStrategy> placementStrategies;
    /**
     * @return Specifies the platform version for the task. Specify only the numeric portion of the platform version, such as 1.1.0. This structure is used only if LaunchType is FARGATE.
     * 
     */
    private @Nullable String platformVersion;
    /**
     * @return Specifies whether to propagate the tags from the task definition to the task. If no value is specified, the tags are not propagated. Tags can only be propagated to the task during task creation. To add tags to a task after task creation, use the TagResource API action. Valid Values: TASK_DEFINITION
     * 
     */
    private @Nullable String propagateTags;
    /**
     * @return The reference ID to use for the task. Maximum length of 1,024.
     * 
     */
    private @Nullable String referenceId;
    /**
     * @return Key-value mapping of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private @Nullable Map<String,String> tags;
    /**
     * @return The number of tasks to create based on TaskDefinition. The default is 1.
     * 
     */
    private @Nullable Integer taskCount;
    /**
     * @return The ARN of the task definition to use if the event target is an Amazon ECS task.
     * 
     */
    private String taskDefinitionArn;

    private PipeTargetParametersEcsTaskParameters() {}
    /**
     * @return List of capacity provider strategies to use for the task. If a capacityProviderStrategy is specified, the launchType parameter must be omitted. If no capacityProviderStrategy or launchType is specified, the defaultCapacityProviderStrategy for the cluster is used. Detailed below.
     * 
     */
    public List<PipeTargetParametersEcsTaskParametersCapacityProviderStrategy> capacityProviderStrategies() {
        return this.capacityProviderStrategies == null ? List.of() : this.capacityProviderStrategies;
    }
    /**
     * @return Specifies whether to enable Amazon ECS managed tags for the task. Valid values: true, false.
     * 
     */
    public Optional<Boolean> enableEcsManagedTags() {
        return Optional.ofNullable(this.enableEcsManagedTags);
    }
    /**
     * @return Whether or not to enable the execute command functionality for the containers in this task. If true, this enables execute command functionality on all containers in the task. Valid values: true, false.
     * 
     */
    public Optional<Boolean> enableExecuteCommand() {
        return Optional.ofNullable(this.enableExecuteCommand);
    }
    /**
     * @return Specifies an Amazon ECS task group for the task. The maximum length is 255 characters.
     * 
     */
    public Optional<String> group() {
        return Optional.ofNullable(this.group);
    }
    /**
     * @return Specifies the launch type on which your task is running. The launch type that you specify here must match one of the launch type (compatibilities) of the target task. The FARGATE value is supported only in the Regions where AWS Fargate with Amazon ECS is supported. Valid Values: EC2, FARGATE, EXTERNAL
     * 
     */
    public Optional<String> launchType() {
        return Optional.ofNullable(this.launchType);
    }
    /**
     * @return Use this structure if the Amazon ECS task uses the awsvpc network mode. This structure specifies the VPC subnets and security groups associated with the task, and whether a public IP address is to be used. This structure is required if LaunchType is FARGATE because the awsvpc mode is required for Fargate tasks. If you specify NetworkConfiguration when the target ECS task does not use the awsvpc network mode, the task fails. Detailed below.
     * 
     */
    public Optional<PipeTargetParametersEcsTaskParametersNetworkConfiguration> networkConfiguration() {
        return Optional.ofNullable(this.networkConfiguration);
    }
    /**
     * @return The overrides that are associated with a task. Detailed below.
     * 
     */
    public Optional<PipeTargetParametersEcsTaskParametersOverrides> overrides() {
        return Optional.ofNullable(this.overrides);
    }
    /**
     * @return An array of placement constraint objects to use for the task. You can specify up to 10 constraints per task (including constraints in the task definition and those specified at runtime). Detailed below.
     * 
     */
    public List<PipeTargetParametersEcsTaskParametersPlacementConstraint> placementConstraints() {
        return this.placementConstraints == null ? List.of() : this.placementConstraints;
    }
    /**
     * @return The placement strategy objects to use for the task. You can specify a maximum of five strategy rules per task. Detailed below.
     * 
     */
    public List<PipeTargetParametersEcsTaskParametersPlacementStrategy> placementStrategies() {
        return this.placementStrategies == null ? List.of() : this.placementStrategies;
    }
    /**
     * @return Specifies the platform version for the task. Specify only the numeric portion of the platform version, such as 1.1.0. This structure is used only if LaunchType is FARGATE.
     * 
     */
    public Optional<String> platformVersion() {
        return Optional.ofNullable(this.platformVersion);
    }
    /**
     * @return Specifies whether to propagate the tags from the task definition to the task. If no value is specified, the tags are not propagated. Tags can only be propagated to the task during task creation. To add tags to a task after task creation, use the TagResource API action. Valid Values: TASK_DEFINITION
     * 
     */
    public Optional<String> propagateTags() {
        return Optional.ofNullable(this.propagateTags);
    }
    /**
     * @return The reference ID to use for the task. Maximum length of 1,024.
     * 
     */
    public Optional<String> referenceId() {
        return Optional.ofNullable(this.referenceId);
    }
    /**
     * @return Key-value mapping of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * @return The number of tasks to create based on TaskDefinition. The default is 1.
     * 
     */
    public Optional<Integer> taskCount() {
        return Optional.ofNullable(this.taskCount);
    }
    /**
     * @return The ARN of the task definition to use if the event target is an Amazon ECS task.
     * 
     */
    public String taskDefinitionArn() {
        return this.taskDefinitionArn;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PipeTargetParametersEcsTaskParameters defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<PipeTargetParametersEcsTaskParametersCapacityProviderStrategy> capacityProviderStrategies;
        private @Nullable Boolean enableEcsManagedTags;
        private @Nullable Boolean enableExecuteCommand;
        private @Nullable String group;
        private @Nullable String launchType;
        private @Nullable PipeTargetParametersEcsTaskParametersNetworkConfiguration networkConfiguration;
        private @Nullable PipeTargetParametersEcsTaskParametersOverrides overrides;
        private @Nullable List<PipeTargetParametersEcsTaskParametersPlacementConstraint> placementConstraints;
        private @Nullable List<PipeTargetParametersEcsTaskParametersPlacementStrategy> placementStrategies;
        private @Nullable String platformVersion;
        private @Nullable String propagateTags;
        private @Nullable String referenceId;
        private @Nullable Map<String,String> tags;
        private @Nullable Integer taskCount;
        private String taskDefinitionArn;
        public Builder() {}
        public Builder(PipeTargetParametersEcsTaskParameters defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.capacityProviderStrategies = defaults.capacityProviderStrategies;
    	      this.enableEcsManagedTags = defaults.enableEcsManagedTags;
    	      this.enableExecuteCommand = defaults.enableExecuteCommand;
    	      this.group = defaults.group;
    	      this.launchType = defaults.launchType;
    	      this.networkConfiguration = defaults.networkConfiguration;
    	      this.overrides = defaults.overrides;
    	      this.placementConstraints = defaults.placementConstraints;
    	      this.placementStrategies = defaults.placementStrategies;
    	      this.platformVersion = defaults.platformVersion;
    	      this.propagateTags = defaults.propagateTags;
    	      this.referenceId = defaults.referenceId;
    	      this.tags = defaults.tags;
    	      this.taskCount = defaults.taskCount;
    	      this.taskDefinitionArn = defaults.taskDefinitionArn;
        }

        @CustomType.Setter
        public Builder capacityProviderStrategies(@Nullable List<PipeTargetParametersEcsTaskParametersCapacityProviderStrategy> capacityProviderStrategies) {
            this.capacityProviderStrategies = capacityProviderStrategies;
            return this;
        }
        public Builder capacityProviderStrategies(PipeTargetParametersEcsTaskParametersCapacityProviderStrategy... capacityProviderStrategies) {
            return capacityProviderStrategies(List.of(capacityProviderStrategies));
        }
        @CustomType.Setter
        public Builder enableEcsManagedTags(@Nullable Boolean enableEcsManagedTags) {
            this.enableEcsManagedTags = enableEcsManagedTags;
            return this;
        }
        @CustomType.Setter
        public Builder enableExecuteCommand(@Nullable Boolean enableExecuteCommand) {
            this.enableExecuteCommand = enableExecuteCommand;
            return this;
        }
        @CustomType.Setter
        public Builder group(@Nullable String group) {
            this.group = group;
            return this;
        }
        @CustomType.Setter
        public Builder launchType(@Nullable String launchType) {
            this.launchType = launchType;
            return this;
        }
        @CustomType.Setter
        public Builder networkConfiguration(@Nullable PipeTargetParametersEcsTaskParametersNetworkConfiguration networkConfiguration) {
            this.networkConfiguration = networkConfiguration;
            return this;
        }
        @CustomType.Setter
        public Builder overrides(@Nullable PipeTargetParametersEcsTaskParametersOverrides overrides) {
            this.overrides = overrides;
            return this;
        }
        @CustomType.Setter
        public Builder placementConstraints(@Nullable List<PipeTargetParametersEcsTaskParametersPlacementConstraint> placementConstraints) {
            this.placementConstraints = placementConstraints;
            return this;
        }
        public Builder placementConstraints(PipeTargetParametersEcsTaskParametersPlacementConstraint... placementConstraints) {
            return placementConstraints(List.of(placementConstraints));
        }
        @CustomType.Setter
        public Builder placementStrategies(@Nullable List<PipeTargetParametersEcsTaskParametersPlacementStrategy> placementStrategies) {
            this.placementStrategies = placementStrategies;
            return this;
        }
        public Builder placementStrategies(PipeTargetParametersEcsTaskParametersPlacementStrategy... placementStrategies) {
            return placementStrategies(List.of(placementStrategies));
        }
        @CustomType.Setter
        public Builder platformVersion(@Nullable String platformVersion) {
            this.platformVersion = platformVersion;
            return this;
        }
        @CustomType.Setter
        public Builder propagateTags(@Nullable String propagateTags) {
            this.propagateTags = propagateTags;
            return this;
        }
        @CustomType.Setter
        public Builder referenceId(@Nullable String referenceId) {
            this.referenceId = referenceId;
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder taskCount(@Nullable Integer taskCount) {
            this.taskCount = taskCount;
            return this;
        }
        @CustomType.Setter
        public Builder taskDefinitionArn(String taskDefinitionArn) {
            this.taskDefinitionArn = Objects.requireNonNull(taskDefinitionArn);
            return this;
        }
        public PipeTargetParametersEcsTaskParameters build() {
            final var o = new PipeTargetParametersEcsTaskParameters();
            o.capacityProviderStrategies = capacityProviderStrategies;
            o.enableEcsManagedTags = enableEcsManagedTags;
            o.enableExecuteCommand = enableExecuteCommand;
            o.group = group;
            o.launchType = launchType;
            o.networkConfiguration = networkConfiguration;
            o.overrides = overrides;
            o.placementConstraints = placementConstraints;
            o.placementStrategies = placementStrategies;
            o.platformVersion = platformVersion;
            o.propagateTags = propagateTags;
            o.referenceId = referenceId;
            o.tags = tags;
            o.taskCount = taskCount;
            o.taskDefinitionArn = taskDefinitionArn;
            return o;
        }
    }
}
