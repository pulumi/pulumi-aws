// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.bedrock.outputs;

import com.pulumi.aws.bedrock.outputs.AgentcoreOauth2CredentialProviderOauth2ProviderConfigSlackOauth2ProviderConfigOauthDiscoveryAuthorizationServerMetadata;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class AgentcoreOauth2CredentialProviderOauth2ProviderConfigSlackOauth2ProviderConfigOauthDiscovery {
    /**
     * @return Manual OAuth2 authorization server metadata configuration. Cannot be used together with `discoveryUrl`. See `authorizationServerMetadata` below.
     * 
     */
    private List<AgentcoreOauth2CredentialProviderOauth2ProviderConfigSlackOauth2ProviderConfigOauthDiscoveryAuthorizationServerMetadata> authorizationServerMetadatas;
    /**
     * @return OpenID Connect discovery URL (e.g., `https://provider.com/.well-known/openid-configuration`). Cannot be used together with `authorizationServerMetadata`.
     * 
     */
    private String discoveryUrl;

    private AgentcoreOauth2CredentialProviderOauth2ProviderConfigSlackOauth2ProviderConfigOauthDiscovery() {}
    /**
     * @return Manual OAuth2 authorization server metadata configuration. Cannot be used together with `discoveryUrl`. See `authorizationServerMetadata` below.
     * 
     */
    public List<AgentcoreOauth2CredentialProviderOauth2ProviderConfigSlackOauth2ProviderConfigOauthDiscoveryAuthorizationServerMetadata> authorizationServerMetadatas() {
        return this.authorizationServerMetadatas;
    }
    /**
     * @return OpenID Connect discovery URL (e.g., `https://provider.com/.well-known/openid-configuration`). Cannot be used together with `authorizationServerMetadata`.
     * 
     */
    public String discoveryUrl() {
        return this.discoveryUrl;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AgentcoreOauth2CredentialProviderOauth2ProviderConfigSlackOauth2ProviderConfigOauthDiscovery defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<AgentcoreOauth2CredentialProviderOauth2ProviderConfigSlackOauth2ProviderConfigOauthDiscoveryAuthorizationServerMetadata> authorizationServerMetadatas;
        private String discoveryUrl;
        public Builder() {}
        public Builder(AgentcoreOauth2CredentialProviderOauth2ProviderConfigSlackOauth2ProviderConfigOauthDiscovery defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authorizationServerMetadatas = defaults.authorizationServerMetadatas;
    	      this.discoveryUrl = defaults.discoveryUrl;
        }

        @CustomType.Setter
        public Builder authorizationServerMetadatas(List<AgentcoreOauth2CredentialProviderOauth2ProviderConfigSlackOauth2ProviderConfigOauthDiscoveryAuthorizationServerMetadata> authorizationServerMetadatas) {
            if (authorizationServerMetadatas == null) {
              throw new MissingRequiredPropertyException("AgentcoreOauth2CredentialProviderOauth2ProviderConfigSlackOauth2ProviderConfigOauthDiscovery", "authorizationServerMetadatas");
            }
            this.authorizationServerMetadatas = authorizationServerMetadatas;
            return this;
        }
        public Builder authorizationServerMetadatas(AgentcoreOauth2CredentialProviderOauth2ProviderConfigSlackOauth2ProviderConfigOauthDiscoveryAuthorizationServerMetadata... authorizationServerMetadatas) {
            return authorizationServerMetadatas(List.of(authorizationServerMetadatas));
        }
        @CustomType.Setter
        public Builder discoveryUrl(String discoveryUrl) {
            if (discoveryUrl == null) {
              throw new MissingRequiredPropertyException("AgentcoreOauth2CredentialProviderOauth2ProviderConfigSlackOauth2ProviderConfigOauthDiscovery", "discoveryUrl");
            }
            this.discoveryUrl = discoveryUrl;
            return this;
        }
        public AgentcoreOauth2CredentialProviderOauth2ProviderConfigSlackOauth2ProviderConfigOauthDiscovery build() {
            final var _resultValue = new AgentcoreOauth2CredentialProviderOauth2ProviderConfigSlackOauth2ProviderConfigOauthDiscovery();
            _resultValue.authorizationServerMetadatas = authorizationServerMetadatas;
            _resultValue.discoveryUrl = discoveryUrl;
            return _resultValue;
        }
    }
}
