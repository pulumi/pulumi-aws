// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ecr.inputs;

import com.pulumi.aws.ecr.inputs.GetLifecyclePolicyDocumentRuleActionArgs;
import com.pulumi.aws.ecr.inputs.GetLifecyclePolicyDocumentRuleSelectionArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetLifecyclePolicyDocumentRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetLifecyclePolicyDocumentRuleArgs Empty = new GetLifecyclePolicyDocumentRuleArgs();

    /**
     * Specifies the action type.
     * 
     */
    @Import(name="action")
    private @Nullable Output<GetLifecyclePolicyDocumentRuleActionArgs> action;

    /**
     * @return Specifies the action type.
     * 
     */
    public Optional<Output<GetLifecyclePolicyDocumentRuleActionArgs>> action() {
        return Optional.ofNullable(this.action);
    }

    /**
     * Describes the purpose of a rule within a lifecycle policy.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Describes the purpose of a rule within a lifecycle policy.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Sets the order in which rules are evaluated, lowest to highest. When you add rules to a lifecycle policy, you must give them each a unique value for `priority`. Values do not need to be sequential across rules in a policy. A rule with a `tag_status` value of any must have the highest value for `priority` and be evaluated last.
     * 
     */
    @Import(name="priority", required=true)
    private Output<Integer> priority;

    /**
     * @return Sets the order in which rules are evaluated, lowest to highest. When you add rules to a lifecycle policy, you must give them each a unique value for `priority`. Values do not need to be sequential across rules in a policy. A rule with a `tag_status` value of any must have the highest value for `priority` and be evaluated last.
     * 
     */
    public Output<Integer> priority() {
        return this.priority;
    }

    /**
     * Collects parameters describing the selection criteria for the ECR lifecycle policy:
     * 
     */
    @Import(name="selection")
    private @Nullable Output<GetLifecyclePolicyDocumentRuleSelectionArgs> selection;

    /**
     * @return Collects parameters describing the selection criteria for the ECR lifecycle policy:
     * 
     */
    public Optional<Output<GetLifecyclePolicyDocumentRuleSelectionArgs>> selection() {
        return Optional.ofNullable(this.selection);
    }

    private GetLifecyclePolicyDocumentRuleArgs() {}

    private GetLifecyclePolicyDocumentRuleArgs(GetLifecyclePolicyDocumentRuleArgs $) {
        this.action = $.action;
        this.description = $.description;
        this.priority = $.priority;
        this.selection = $.selection;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetLifecyclePolicyDocumentRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetLifecyclePolicyDocumentRuleArgs $;

        public Builder() {
            $ = new GetLifecyclePolicyDocumentRuleArgs();
        }

        public Builder(GetLifecyclePolicyDocumentRuleArgs defaults) {
            $ = new GetLifecyclePolicyDocumentRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param action Specifies the action type.
         * 
         * @return builder
         * 
         */
        public Builder action(@Nullable Output<GetLifecyclePolicyDocumentRuleActionArgs> action) {
            $.action = action;
            return this;
        }

        /**
         * @param action Specifies the action type.
         * 
         * @return builder
         * 
         */
        public Builder action(GetLifecyclePolicyDocumentRuleActionArgs action) {
            return action(Output.of(action));
        }

        /**
         * @param description Describes the purpose of a rule within a lifecycle policy.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Describes the purpose of a rule within a lifecycle policy.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param priority Sets the order in which rules are evaluated, lowest to highest. When you add rules to a lifecycle policy, you must give them each a unique value for `priority`. Values do not need to be sequential across rules in a policy. A rule with a `tag_status` value of any must have the highest value for `priority` and be evaluated last.
         * 
         * @return builder
         * 
         */
        public Builder priority(Output<Integer> priority) {
            $.priority = priority;
            return this;
        }

        /**
         * @param priority Sets the order in which rules are evaluated, lowest to highest. When you add rules to a lifecycle policy, you must give them each a unique value for `priority`. Values do not need to be sequential across rules in a policy. A rule with a `tag_status` value of any must have the highest value for `priority` and be evaluated last.
         * 
         * @return builder
         * 
         */
        public Builder priority(Integer priority) {
            return priority(Output.of(priority));
        }

        /**
         * @param selection Collects parameters describing the selection criteria for the ECR lifecycle policy:
         * 
         * @return builder
         * 
         */
        public Builder selection(@Nullable Output<GetLifecyclePolicyDocumentRuleSelectionArgs> selection) {
            $.selection = selection;
            return this;
        }

        /**
         * @param selection Collects parameters describing the selection criteria for the ECR lifecycle policy:
         * 
         * @return builder
         * 
         */
        public Builder selection(GetLifecyclePolicyDocumentRuleSelectionArgs selection) {
            return selection(Output.of(selection));
        }

        public GetLifecyclePolicyDocumentRuleArgs build() {
            if ($.priority == null) {
                throw new MissingRequiredPropertyException("GetLifecyclePolicyDocumentRuleArgs", "priority");
            }
            return $;
        }
    }

}
