// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.inputs;

import com.pulumi.aws.quicksight.inputs.VisualsTableVisualConditionalFormattingConditionalFormattingOptionCellTextFormatArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VisualsTableVisualConditionalFormattingConditionalFormattingOptionCellArgs extends com.pulumi.resources.ResourceArgs {

    public static final VisualsTableVisualConditionalFormattingConditionalFormattingOptionCellArgs Empty = new VisualsTableVisualConditionalFormattingConditionalFormattingOptionCellArgs();

    @Import(name="fieldId", required=true)
    private Output<String> fieldId;

    public Output<String> fieldId() {
        return this.fieldId;
    }

    @Import(name="textFormat")
    private @Nullable Output<VisualsTableVisualConditionalFormattingConditionalFormattingOptionCellTextFormatArgs> textFormat;

    public Optional<Output<VisualsTableVisualConditionalFormattingConditionalFormattingOptionCellTextFormatArgs>> textFormat() {
        return Optional.ofNullable(this.textFormat);
    }

    private VisualsTableVisualConditionalFormattingConditionalFormattingOptionCellArgs() {}

    private VisualsTableVisualConditionalFormattingConditionalFormattingOptionCellArgs(VisualsTableVisualConditionalFormattingConditionalFormattingOptionCellArgs $) {
        this.fieldId = $.fieldId;
        this.textFormat = $.textFormat;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VisualsTableVisualConditionalFormattingConditionalFormattingOptionCellArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VisualsTableVisualConditionalFormattingConditionalFormattingOptionCellArgs $;

        public Builder() {
            $ = new VisualsTableVisualConditionalFormattingConditionalFormattingOptionCellArgs();
        }

        public Builder(VisualsTableVisualConditionalFormattingConditionalFormattingOptionCellArgs defaults) {
            $ = new VisualsTableVisualConditionalFormattingConditionalFormattingOptionCellArgs(Objects.requireNonNull(defaults));
        }

        public Builder fieldId(Output<String> fieldId) {
            $.fieldId = fieldId;
            return this;
        }

        public Builder fieldId(String fieldId) {
            return fieldId(Output.of(fieldId));
        }

        public Builder textFormat(@Nullable Output<VisualsTableVisualConditionalFormattingConditionalFormattingOptionCellTextFormatArgs> textFormat) {
            $.textFormat = textFormat;
            return this;
        }

        public Builder textFormat(VisualsTableVisualConditionalFormattingConditionalFormattingOptionCellTextFormatArgs textFormat) {
            return textFormat(Output.of(textFormat));
        }

        public VisualsTableVisualConditionalFormattingConditionalFormattingOptionCellArgs build() {
            if ($.fieldId == null) {
                throw new MissingRequiredPropertyException("VisualsTableVisualConditionalFormattingConditionalFormattingOptionCellArgs", "fieldId");
            }
            return $;
        }
    }

}
