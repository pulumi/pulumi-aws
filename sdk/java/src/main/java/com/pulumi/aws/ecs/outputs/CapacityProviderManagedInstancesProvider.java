// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ecs.outputs;

import com.pulumi.aws.ecs.outputs.CapacityProviderManagedInstancesProviderInstanceLaunchTemplate;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class CapacityProviderManagedInstancesProvider {
    /**
     * @return The Amazon Resource Name (ARN) of the infrastructure role that Amazon ECS uses to manage instances on your behalf. This role must have permissions to launch, terminate, and manage Amazon EC2 instances, as well as access to other AWS services required for Amazon ECS Managed Instances functionality. For more information, see [Amazon ECS infrastructure IAM role](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/infrastructure_IAM_role.html) in the Amazon ECS Developer Guide.
     * 
     */
    private String infrastructureRoleArn;
    /**
     * @return The launch template configuration that specifies how Amazon ECS should launch Amazon EC2 instances. This includes the instance profile, network configuration, storage settings, and instance requirements for attribute-based instance type selection. For more information, see [Store instance launch parameters in Amazon EC2 launch templates](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html) in the Amazon EC2 User Guide. Detailed below.
     * 
     */
    private CapacityProviderManagedInstancesProviderInstanceLaunchTemplate instanceLaunchTemplate;
    /**
     * @return Specifies whether to propagate tags from the capacity provider to the Amazon ECS Managed Instances. When enabled, tags applied to the capacity provider are automatically applied to all instances launched by this provider. Valid values are `CAPACITY_PROVIDER` and `NONE`.
     * 
     */
    private @Nullable String propagateTags;

    private CapacityProviderManagedInstancesProvider() {}
    /**
     * @return The Amazon Resource Name (ARN) of the infrastructure role that Amazon ECS uses to manage instances on your behalf. This role must have permissions to launch, terminate, and manage Amazon EC2 instances, as well as access to other AWS services required for Amazon ECS Managed Instances functionality. For more information, see [Amazon ECS infrastructure IAM role](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/infrastructure_IAM_role.html) in the Amazon ECS Developer Guide.
     * 
     */
    public String infrastructureRoleArn() {
        return this.infrastructureRoleArn;
    }
    /**
     * @return The launch template configuration that specifies how Amazon ECS should launch Amazon EC2 instances. This includes the instance profile, network configuration, storage settings, and instance requirements for attribute-based instance type selection. For more information, see [Store instance launch parameters in Amazon EC2 launch templates](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html) in the Amazon EC2 User Guide. Detailed below.
     * 
     */
    public CapacityProviderManagedInstancesProviderInstanceLaunchTemplate instanceLaunchTemplate() {
        return this.instanceLaunchTemplate;
    }
    /**
     * @return Specifies whether to propagate tags from the capacity provider to the Amazon ECS Managed Instances. When enabled, tags applied to the capacity provider are automatically applied to all instances launched by this provider. Valid values are `CAPACITY_PROVIDER` and `NONE`.
     * 
     */
    public Optional<String> propagateTags() {
        return Optional.ofNullable(this.propagateTags);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CapacityProviderManagedInstancesProvider defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String infrastructureRoleArn;
        private CapacityProviderManagedInstancesProviderInstanceLaunchTemplate instanceLaunchTemplate;
        private @Nullable String propagateTags;
        public Builder() {}
        public Builder(CapacityProviderManagedInstancesProvider defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.infrastructureRoleArn = defaults.infrastructureRoleArn;
    	      this.instanceLaunchTemplate = defaults.instanceLaunchTemplate;
    	      this.propagateTags = defaults.propagateTags;
        }

        @CustomType.Setter
        public Builder infrastructureRoleArn(String infrastructureRoleArn) {
            if (infrastructureRoleArn == null) {
              throw new MissingRequiredPropertyException("CapacityProviderManagedInstancesProvider", "infrastructureRoleArn");
            }
            this.infrastructureRoleArn = infrastructureRoleArn;
            return this;
        }
        @CustomType.Setter
        public Builder instanceLaunchTemplate(CapacityProviderManagedInstancesProviderInstanceLaunchTemplate instanceLaunchTemplate) {
            if (instanceLaunchTemplate == null) {
              throw new MissingRequiredPropertyException("CapacityProviderManagedInstancesProvider", "instanceLaunchTemplate");
            }
            this.instanceLaunchTemplate = instanceLaunchTemplate;
            return this;
        }
        @CustomType.Setter
        public Builder propagateTags(@Nullable String propagateTags) {

            this.propagateTags = propagateTags;
            return this;
        }
        public CapacityProviderManagedInstancesProvider build() {
            final var _resultValue = new CapacityProviderManagedInstancesProvider();
            _resultValue.infrastructureRoleArn = infrastructureRoleArn;
            _resultValue.instanceLaunchTemplate = instanceLaunchTemplate;
            _resultValue.propagateTags = propagateTags;
            return _resultValue;
        }
    }
}
