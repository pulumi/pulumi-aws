// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DashboardDefinitionFilterGroupScopeConfigurationSelectedSheetsSheetVisualScopingConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final DashboardDefinitionFilterGroupScopeConfigurationSelectedSheetsSheetVisualScopingConfigurationArgs Empty = new DashboardDefinitionFilterGroupScopeConfigurationSelectedSheetsSheetVisualScopingConfigurationArgs();

    @Import(name="scope", required=true)
    private Output<String> scope;

    public Output<String> scope() {
        return this.scope;
    }

    @Import(name="sheetId", required=true)
    private Output<String> sheetId;

    public Output<String> sheetId() {
        return this.sheetId;
    }

    @Import(name="visualIds")
    private @Nullable Output<List<String>> visualIds;

    public Optional<Output<List<String>>> visualIds() {
        return Optional.ofNullable(this.visualIds);
    }

    private DashboardDefinitionFilterGroupScopeConfigurationSelectedSheetsSheetVisualScopingConfigurationArgs() {}

    private DashboardDefinitionFilterGroupScopeConfigurationSelectedSheetsSheetVisualScopingConfigurationArgs(DashboardDefinitionFilterGroupScopeConfigurationSelectedSheetsSheetVisualScopingConfigurationArgs $) {
        this.scope = $.scope;
        this.sheetId = $.sheetId;
        this.visualIds = $.visualIds;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DashboardDefinitionFilterGroupScopeConfigurationSelectedSheetsSheetVisualScopingConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DashboardDefinitionFilterGroupScopeConfigurationSelectedSheetsSheetVisualScopingConfigurationArgs $;

        public Builder() {
            $ = new DashboardDefinitionFilterGroupScopeConfigurationSelectedSheetsSheetVisualScopingConfigurationArgs();
        }

        public Builder(DashboardDefinitionFilterGroupScopeConfigurationSelectedSheetsSheetVisualScopingConfigurationArgs defaults) {
            $ = new DashboardDefinitionFilterGroupScopeConfigurationSelectedSheetsSheetVisualScopingConfigurationArgs(Objects.requireNonNull(defaults));
        }

        public Builder scope(Output<String> scope) {
            $.scope = scope;
            return this;
        }

        public Builder scope(String scope) {
            return scope(Output.of(scope));
        }

        public Builder sheetId(Output<String> sheetId) {
            $.sheetId = sheetId;
            return this;
        }

        public Builder sheetId(String sheetId) {
            return sheetId(Output.of(sheetId));
        }

        public Builder visualIds(@Nullable Output<List<String>> visualIds) {
            $.visualIds = visualIds;
            return this;
        }

        public Builder visualIds(List<String> visualIds) {
            return visualIds(Output.of(visualIds));
        }

        public Builder visualIds(String... visualIds) {
            return visualIds(List.of(visualIds));
        }

        public DashboardDefinitionFilterGroupScopeConfigurationSelectedSheetsSheetVisualScopingConfigurationArgs build() {
            if ($.scope == null) {
                throw new MissingRequiredPropertyException("DashboardDefinitionFilterGroupScopeConfigurationSelectedSheetsSheetVisualScopingConfigurationArgs", "scope");
            }
            if ($.sheetId == null) {
                throw new MissingRequiredPropertyException("DashboardDefinitionFilterGroupScopeConfigurationSelectedSheetsSheetVisualScopingConfigurationArgs", "sheetId");
            }
            return $;
        }
    }

}
