// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.cognito;

import com.pulumi.aws.Utilities;
import com.pulumi.aws.cognito.LogDeliveryConfigurationArgs;
import com.pulumi.aws.cognito.inputs.LogDeliveryConfigurationState;
import com.pulumi.aws.cognito.outputs.LogDeliveryConfigurationLogConfiguration;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages an AWS Cognito IDP (Identity Provider) Log Delivery Configuration.
 * 
 * ## Example Usage
 * 
 * ### Basic Usage with CloudWatch Logs
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.aws.cognito.UserPool;
 * import com.pulumi.aws.cognito.UserPoolArgs;
 * import com.pulumi.aws.cloudwatch.LogGroup;
 * import com.pulumi.aws.cloudwatch.LogGroupArgs;
 * import com.pulumi.aws.cognito.LogDeliveryConfiguration;
 * import com.pulumi.aws.cognito.LogDeliveryConfigurationArgs;
 * import com.pulumi.aws.cognito.inputs.LogDeliveryConfigurationLogConfigurationArgs;
 * import com.pulumi.aws.cognito.inputs.LogDeliveryConfigurationLogConfigurationCloudWatchLogsConfigurationArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new UserPool("example", UserPoolArgs.builder()
 *             .name("example")
 *             .build());
 * 
 *         var exampleLogGroup = new LogGroup("exampleLogGroup", LogGroupArgs.builder()
 *             .name("example")
 *             .build());
 * 
 *         var exampleLogDeliveryConfiguration = new LogDeliveryConfiguration("exampleLogDeliveryConfiguration", LogDeliveryConfigurationArgs.builder()
 *             .userPoolId(example.id())
 *             .logConfigurations(LogDeliveryConfigurationLogConfigurationArgs.builder()
 *                 .eventSource("userNotification")
 *                 .logLevel("ERROR")
 *                 .cloudWatchLogsConfiguration(LogDeliveryConfigurationLogConfigurationCloudWatchLogsConfigurationArgs.builder()
 *                     .logGroupArn(exampleLogGroup.arn())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ### Multiple Log Configurations with Different Destinations
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.aws.cognito.UserPool;
 * import com.pulumi.aws.cognito.UserPoolArgs;
 * import com.pulumi.aws.cloudwatch.LogGroup;
 * import com.pulumi.aws.cloudwatch.LogGroupArgs;
 * import com.pulumi.aws.s3.Bucket;
 * import com.pulumi.aws.s3.BucketArgs;
 * import com.pulumi.aws.iam.Role;
 * import com.pulumi.aws.iam.RoleArgs;
 * import com.pulumi.aws.iam.RolePolicy;
 * import com.pulumi.aws.iam.RolePolicyArgs;
 * import com.pulumi.aws.kinesis.FirehoseDeliveryStream;
 * import com.pulumi.aws.kinesis.FirehoseDeliveryStreamArgs;
 * import com.pulumi.aws.kinesis.inputs.FirehoseDeliveryStreamExtendedS3ConfigurationArgs;
 * import com.pulumi.aws.cognito.LogDeliveryConfiguration;
 * import com.pulumi.aws.cognito.LogDeliveryConfigurationArgs;
 * import com.pulumi.aws.cognito.inputs.LogDeliveryConfigurationLogConfigurationArgs;
 * import com.pulumi.aws.cognito.inputs.LogDeliveryConfigurationLogConfigurationCloudWatchLogsConfigurationArgs;
 * import com.pulumi.aws.cognito.inputs.LogDeliveryConfigurationLogConfigurationFirehoseConfigurationArgs;
 * import static com.pulumi.codegen.internal.Serialization.*;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new UserPool("example", UserPoolArgs.builder()
 *             .name("example")
 *             .build());
 * 
 *         var exampleLogGroup = new LogGroup("exampleLogGroup", LogGroupArgs.builder()
 *             .name("example")
 *             .build());
 * 
 *         var exampleBucket = new Bucket("exampleBucket", BucketArgs.builder()
 *             .bucket("example-bucket")
 *             .forceDestroy(true)
 *             .build());
 * 
 *         var firehose = new Role("firehose", RoleArgs.builder()
 *             .name("firehose-role")
 *             .assumeRolePolicy(serializeJson(
 *                 jsonObject(
 *                     jsonProperty("Version", "2012-10-17"),
 *                     jsonProperty("Statement", jsonArray(jsonObject(
 *                         jsonProperty("Action", "sts:AssumeRole"),
 *                         jsonProperty("Effect", "Allow"),
 *                         jsonProperty("Principal", jsonObject(
 *                             jsonProperty("Service", "firehose.amazonaws.com")
 *                         ))
 *                     )))
 *                 )))
 *             .build());
 * 
 *         var firehoseRolePolicy = new RolePolicy("firehoseRolePolicy", RolePolicyArgs.builder()
 *             .name("firehose-policy")
 *             .role(firehose.id())
 *             .policy(Output.tuple(exampleBucket.arn(), exampleBucket.arn()).applyValue(values -> {
 *                 var exampleBucketArn = values.t1;
 *                 var exampleBucketArn1 = values.t2;
 *                 return serializeJson(
 *                     jsonObject(
 *                         jsonProperty("Version", "2012-10-17"),
 *                         jsonProperty("Statement", jsonArray(jsonObject(
 *                             jsonProperty("Effect", "Allow"),
 *                             jsonProperty("Action", jsonArray(
 *                                 "s3:AbortMultipartUpload", 
 *                                 "s3:GetBucketLocation", 
 *                                 "s3:GetObject", 
 *                                 "s3:ListBucket", 
 *                                 "s3:ListBucketMultipartUploads", 
 *                                 "s3:PutObject"
 *                             )),
 *                             jsonProperty("Resource", jsonArray(
 *                                 exampleBucketArn, 
 *                                 String.format("%s/*", exampleBucketArn1)
 *                             ))
 *                         )))
 *                     ));
 *             }))
 *             .build());
 * 
 *         var exampleFirehoseDeliveryStream = new FirehoseDeliveryStream("exampleFirehoseDeliveryStream", FirehoseDeliveryStreamArgs.builder()
 *             .name("example-stream")
 *             .destination("extended_s3")
 *             .extendedS3Configuration(FirehoseDeliveryStreamExtendedS3ConfigurationArgs.builder()
 *                 .roleArn(firehose.arn())
 *                 .bucketArn(exampleBucket.arn())
 *                 .build())
 *             .build());
 * 
 *         var exampleLogDeliveryConfiguration = new LogDeliveryConfiguration("exampleLogDeliveryConfiguration", LogDeliveryConfigurationArgs.builder()
 *             .userPoolId(example.id())
 *             .logConfigurations(            
 *                 LogDeliveryConfigurationLogConfigurationArgs.builder()
 *                     .eventSource("userNotification")
 *                     .logLevel("INFO")
 *                     .cloudWatchLogsConfiguration(LogDeliveryConfigurationLogConfigurationCloudWatchLogsConfigurationArgs.builder()
 *                         .logGroupArn(exampleLogGroup.arn())
 *                         .build())
 *                     .build(),
 *                 LogDeliveryConfigurationLogConfigurationArgs.builder()
 *                     .eventSource("userAuthEvents")
 *                     .logLevel("ERROR")
 *                     .firehoseConfiguration(LogDeliveryConfigurationLogConfigurationFirehoseConfigurationArgs.builder()
 *                         .streamArn(exampleFirehoseDeliveryStream.arn())
 *                         .build())
 *                     .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ### S3 Configuration
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.aws.cognito.UserPool;
 * import com.pulumi.aws.cognito.UserPoolArgs;
 * import com.pulumi.aws.s3.Bucket;
 * import com.pulumi.aws.s3.BucketArgs;
 * import com.pulumi.aws.cognito.LogDeliveryConfiguration;
 * import com.pulumi.aws.cognito.LogDeliveryConfigurationArgs;
 * import com.pulumi.aws.cognito.inputs.LogDeliveryConfigurationLogConfigurationArgs;
 * import com.pulumi.aws.cognito.inputs.LogDeliveryConfigurationLogConfigurationS3ConfigurationArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new UserPool("example", UserPoolArgs.builder()
 *             .name("example")
 *             .build());
 * 
 *         var exampleBucket = new Bucket("exampleBucket", BucketArgs.builder()
 *             .bucket("example-bucket")
 *             .forceDestroy(true)
 *             .build());
 * 
 *         var exampleLogDeliveryConfiguration = new LogDeliveryConfiguration("exampleLogDeliveryConfiguration", LogDeliveryConfigurationArgs.builder()
 *             .userPoolId(example.id())
 *             .logConfigurations(LogDeliveryConfigurationLogConfigurationArgs.builder()
 *                 .eventSource("userNotification")
 *                 .logLevel("ERROR")
 *                 .s3Configuration(LogDeliveryConfigurationLogConfigurationS3ConfigurationArgs.builder()
 *                     .bucketArn(exampleBucket.arn())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ## Import
 * 
 * Using `pulumi import`, import Cognito IDP (Identity Provider) Log Delivery Configuration using the `user_pool_id`. For example:
 * 
 * ```sh
 * $ pulumi import aws:cognito/logDeliveryConfiguration:LogDeliveryConfiguration example us-west-2_example123
 * ```
 * 
 */
@ResourceType(type="aws:cognito/logDeliveryConfiguration:LogDeliveryConfiguration")
public class LogDeliveryConfiguration extends com.pulumi.resources.CustomResource {
    /**
     * Configuration block for log delivery. At least one configuration block is required. See Log Configurations below.
     * 
     */
    @Export(name="logConfigurations", refs={List.class,LogDeliveryConfigurationLogConfiguration.class}, tree="[0,1]")
    private Output</* @Nullable */ List<LogDeliveryConfigurationLogConfiguration>> logConfigurations;

    /**
     * @return Configuration block for log delivery. At least one configuration block is required. See Log Configurations below.
     * 
     */
    public Output<Optional<List<LogDeliveryConfigurationLogConfiguration>>> logConfigurations() {
        return Codegen.optional(this.logConfigurations);
    }
    /**
     * The AWS region.
     * 
     */
    @Export(name="region", refs={String.class}, tree="[0]")
    private Output<String> region;

    /**
     * @return The AWS region.
     * 
     */
    public Output<String> region() {
        return this.region;
    }
    /**
     * The ID of the user pool for which to configure log delivery.
     * 
     * The following arguments are optional:
     * 
     */
    @Export(name="userPoolId", refs={String.class}, tree="[0]")
    private Output<String> userPoolId;

    /**
     * @return The ID of the user pool for which to configure log delivery.
     * 
     * The following arguments are optional:
     * 
     */
    public Output<String> userPoolId() {
        return this.userPoolId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public LogDeliveryConfiguration(java.lang.String name) {
        this(name, LogDeliveryConfigurationArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public LogDeliveryConfiguration(java.lang.String name, LogDeliveryConfigurationArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public LogDeliveryConfiguration(java.lang.String name, LogDeliveryConfigurationArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("aws:cognito/logDeliveryConfiguration:LogDeliveryConfiguration", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private LogDeliveryConfiguration(java.lang.String name, Output<java.lang.String> id, @Nullable LogDeliveryConfigurationState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("aws:cognito/logDeliveryConfiguration:LogDeliveryConfiguration", name, state, makeResourceOptions(options, id), false);
    }

    private static LogDeliveryConfigurationArgs makeArgs(LogDeliveryConfigurationArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? LogDeliveryConfigurationArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static LogDeliveryConfiguration get(java.lang.String name, Output<java.lang.String> id, @Nullable LogDeliveryConfigurationState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new LogDeliveryConfiguration(name, id, state, options);
    }
}
