// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.networkfirewall.outputs;

import com.pulumi.aws.networkfirewall.outputs.TlsInspectionConfigurationTlsInspectionConfigurationServerCertificateConfigurationCheckCertificateRevocationStatus;
import com.pulumi.aws.networkfirewall.outputs.TlsInspectionConfigurationTlsInspectionConfigurationServerCertificateConfigurationScope;
import com.pulumi.aws.networkfirewall.outputs.TlsInspectionConfigurationTlsInspectionConfigurationServerCertificateConfigurationServerCertificate;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class TlsInspectionConfigurationTlsInspectionConfigurationServerCertificateConfiguration {
    /**
     * @return ARN of the imported certificate authority (CA) certificate within Certificate Manager (ACM) to use for outbound SSL/TLS inspection. See [Using SSL/TLS certificates with TLS inspection configurations](https://docs.aws.amazon.com/network-firewall/latest/developerguide/tls-inspection-certificate-requirements.html) for limitations on CA certificates.
     * 
     */
    private @Nullable String certificateAuthorityArn;
    /**
     * @return Check Certificate Revocation Status block. Detailed below.
     * 
     */
    private @Nullable TlsInspectionConfigurationTlsInspectionConfigurationServerCertificateConfigurationCheckCertificateRevocationStatus checkCertificateRevocationStatus;
    /**
     * @return Scope block. Detailed below.
     * 
     */
    private @Nullable List<TlsInspectionConfigurationTlsInspectionConfigurationServerCertificateConfigurationScope> scopes;
    /**
     * @return Server certificates to use for inbound SSL/TLS inspection. See [Using SSL/TLS certificates with TLS inspection configurations](https://docs.aws.amazon.com/network-firewall/latest/developerguide/tls-inspection-certificate-requirements.html).
     * 
     */
    private @Nullable List<TlsInspectionConfigurationTlsInspectionConfigurationServerCertificateConfigurationServerCertificate> serverCertificates;

    private TlsInspectionConfigurationTlsInspectionConfigurationServerCertificateConfiguration() {}
    /**
     * @return ARN of the imported certificate authority (CA) certificate within Certificate Manager (ACM) to use for outbound SSL/TLS inspection. See [Using SSL/TLS certificates with TLS inspection configurations](https://docs.aws.amazon.com/network-firewall/latest/developerguide/tls-inspection-certificate-requirements.html) for limitations on CA certificates.
     * 
     */
    public Optional<String> certificateAuthorityArn() {
        return Optional.ofNullable(this.certificateAuthorityArn);
    }
    /**
     * @return Check Certificate Revocation Status block. Detailed below.
     * 
     */
    public Optional<TlsInspectionConfigurationTlsInspectionConfigurationServerCertificateConfigurationCheckCertificateRevocationStatus> checkCertificateRevocationStatus() {
        return Optional.ofNullable(this.checkCertificateRevocationStatus);
    }
    /**
     * @return Scope block. Detailed below.
     * 
     */
    public List<TlsInspectionConfigurationTlsInspectionConfigurationServerCertificateConfigurationScope> scopes() {
        return this.scopes == null ? List.of() : this.scopes;
    }
    /**
     * @return Server certificates to use for inbound SSL/TLS inspection. See [Using SSL/TLS certificates with TLS inspection configurations](https://docs.aws.amazon.com/network-firewall/latest/developerguide/tls-inspection-certificate-requirements.html).
     * 
     */
    public List<TlsInspectionConfigurationTlsInspectionConfigurationServerCertificateConfigurationServerCertificate> serverCertificates() {
        return this.serverCertificates == null ? List.of() : this.serverCertificates;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TlsInspectionConfigurationTlsInspectionConfigurationServerCertificateConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String certificateAuthorityArn;
        private @Nullable TlsInspectionConfigurationTlsInspectionConfigurationServerCertificateConfigurationCheckCertificateRevocationStatus checkCertificateRevocationStatus;
        private @Nullable List<TlsInspectionConfigurationTlsInspectionConfigurationServerCertificateConfigurationScope> scopes;
        private @Nullable List<TlsInspectionConfigurationTlsInspectionConfigurationServerCertificateConfigurationServerCertificate> serverCertificates;
        public Builder() {}
        public Builder(TlsInspectionConfigurationTlsInspectionConfigurationServerCertificateConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.certificateAuthorityArn = defaults.certificateAuthorityArn;
    	      this.checkCertificateRevocationStatus = defaults.checkCertificateRevocationStatus;
    	      this.scopes = defaults.scopes;
    	      this.serverCertificates = defaults.serverCertificates;
        }

        @CustomType.Setter
        public Builder certificateAuthorityArn(@Nullable String certificateAuthorityArn) {

            this.certificateAuthorityArn = certificateAuthorityArn;
            return this;
        }
        @CustomType.Setter
        public Builder checkCertificateRevocationStatus(@Nullable TlsInspectionConfigurationTlsInspectionConfigurationServerCertificateConfigurationCheckCertificateRevocationStatus checkCertificateRevocationStatus) {

            this.checkCertificateRevocationStatus = checkCertificateRevocationStatus;
            return this;
        }
        @CustomType.Setter
        public Builder scopes(@Nullable List<TlsInspectionConfigurationTlsInspectionConfigurationServerCertificateConfigurationScope> scopes) {

            this.scopes = scopes;
            return this;
        }
        public Builder scopes(TlsInspectionConfigurationTlsInspectionConfigurationServerCertificateConfigurationScope... scopes) {
            return scopes(List.of(scopes));
        }
        @CustomType.Setter
        public Builder serverCertificates(@Nullable List<TlsInspectionConfigurationTlsInspectionConfigurationServerCertificateConfigurationServerCertificate> serverCertificates) {

            this.serverCertificates = serverCertificates;
            return this;
        }
        public Builder serverCertificates(TlsInspectionConfigurationTlsInspectionConfigurationServerCertificateConfigurationServerCertificate... serverCertificates) {
            return serverCertificates(List.of(serverCertificates));
        }
        public TlsInspectionConfigurationTlsInspectionConfigurationServerCertificateConfiguration build() {
            final var _resultValue = new TlsInspectionConfigurationTlsInspectionConfigurationServerCertificateConfiguration();
            _resultValue.certificateAuthorityArn = certificateAuthorityArn;
            _resultValue.checkCertificateRevocationStatus = checkCertificateRevocationStatus;
            _resultValue.scopes = scopes;
            _resultValue.serverCertificates = serverCertificates;
            return _resultValue;
        }
    }
}
