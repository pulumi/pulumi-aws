// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.rds.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ProxyAuth {
    /**
     * @return The type of authentication that the proxy uses for connections from the proxy to the underlying database. One of `SECRETS`.
     * 
     */
    private @Nullable String authScheme;
    /**
     * @return The type of authentication the proxy uses for connections from clients. Valid values are `MYSQL_NATIVE_PASSWORD`, `POSTGRES_SCRAM_SHA_256`, `POSTGRES_MD5`, and `SQL_SERVER_AUTHENTICATION`.
     * 
     */
    private @Nullable String clientPasswordAuthType;
    /**
     * @return A user-specified description about the authentication used by a proxy to log in as a specific database user.
     * 
     */
    private @Nullable String description;
    /**
     * @return Whether to require or disallow AWS Identity and Access Management (IAM) authentication for connections to the proxy. One of `DISABLED`, `REQUIRED`.
     * 
     */
    private @Nullable String iamAuth;
    /**
     * @return The Amazon Resource Name (ARN) representing the secret that the proxy uses to authenticate to the RDS DB instance or Aurora DB cluster. These secrets are stored within Amazon Secrets Manager.
     * 
     */
    private @Nullable String secretArn;
    /**
     * @return The name of the database user to which the proxy connects.
     * 
     */
    private @Nullable String username;

    private ProxyAuth() {}
    /**
     * @return The type of authentication that the proxy uses for connections from the proxy to the underlying database. One of `SECRETS`.
     * 
     */
    public Optional<String> authScheme() {
        return Optional.ofNullable(this.authScheme);
    }
    /**
     * @return The type of authentication the proxy uses for connections from clients. Valid values are `MYSQL_NATIVE_PASSWORD`, `POSTGRES_SCRAM_SHA_256`, `POSTGRES_MD5`, and `SQL_SERVER_AUTHENTICATION`.
     * 
     */
    public Optional<String> clientPasswordAuthType() {
        return Optional.ofNullable(this.clientPasswordAuthType);
    }
    /**
     * @return A user-specified description about the authentication used by a proxy to log in as a specific database user.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return Whether to require or disallow AWS Identity and Access Management (IAM) authentication for connections to the proxy. One of `DISABLED`, `REQUIRED`.
     * 
     */
    public Optional<String> iamAuth() {
        return Optional.ofNullable(this.iamAuth);
    }
    /**
     * @return The Amazon Resource Name (ARN) representing the secret that the proxy uses to authenticate to the RDS DB instance or Aurora DB cluster. These secrets are stored within Amazon Secrets Manager.
     * 
     */
    public Optional<String> secretArn() {
        return Optional.ofNullable(this.secretArn);
    }
    /**
     * @return The name of the database user to which the proxy connects.
     * 
     */
    public Optional<String> username() {
        return Optional.ofNullable(this.username);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ProxyAuth defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String authScheme;
        private @Nullable String clientPasswordAuthType;
        private @Nullable String description;
        private @Nullable String iamAuth;
        private @Nullable String secretArn;
        private @Nullable String username;
        public Builder() {}
        public Builder(ProxyAuth defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authScheme = defaults.authScheme;
    	      this.clientPasswordAuthType = defaults.clientPasswordAuthType;
    	      this.description = defaults.description;
    	      this.iamAuth = defaults.iamAuth;
    	      this.secretArn = defaults.secretArn;
    	      this.username = defaults.username;
        }

        @CustomType.Setter
        public Builder authScheme(@Nullable String authScheme) {
            this.authScheme = authScheme;
            return this;
        }
        @CustomType.Setter
        public Builder clientPasswordAuthType(@Nullable String clientPasswordAuthType) {
            this.clientPasswordAuthType = clientPasswordAuthType;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder iamAuth(@Nullable String iamAuth) {
            this.iamAuth = iamAuth;
            return this;
        }
        @CustomType.Setter
        public Builder secretArn(@Nullable String secretArn) {
            this.secretArn = secretArn;
            return this;
        }
        @CustomType.Setter
        public Builder username(@Nullable String username) {
            this.username = username;
            return this;
        }
        public ProxyAuth build() {
            final var o = new ProxyAuth();
            o.authScheme = authScheme;
            o.clientPasswordAuthType = clientPasswordAuthType;
            o.description = description;
            o.iamAuth = iamAuth;
            o.secretArn = secretArn;
            o.username = username;
            return o;
        }
    }
}
