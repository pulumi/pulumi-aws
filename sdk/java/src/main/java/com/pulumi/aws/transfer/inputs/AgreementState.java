// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.transfer.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AgreementState extends com.pulumi.resources.ResourceArgs {

    public static final AgreementState Empty = new AgreementState();

    /**
     * The IAM Role which provides read and write access to the parent directory of the file location mentioned in the StartFileTransfer request.
     * 
     */
    @Import(name="accessRole")
    private @Nullable Output<String> accessRole;

    /**
     * @return The IAM Role which provides read and write access to the parent directory of the file location mentioned in the StartFileTransfer request.
     * 
     */
    public Optional<Output<String>> accessRole() {
        return Optional.ofNullable(this.accessRole);
    }

    /**
     * The unique identifier for the AS2 agreement.
     * 
     */
    @Import(name="agreementId")
    private @Nullable Output<String> agreementId;

    /**
     * @return The unique identifier for the AS2 agreement.
     * 
     */
    public Optional<Output<String>> agreementId() {
        return Optional.ofNullable(this.agreementId);
    }

    /**
     * The ARN of the agreement.
     * 
     */
    @Import(name="arn")
    private @Nullable Output<String> arn;

    /**
     * @return The ARN of the agreement.
     * 
     */
    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    /**
     * The landing directory for the files transferred by using the AS2 protocol.
     * 
     */
    @Import(name="baseDirectory")
    private @Nullable Output<String> baseDirectory;

    /**
     * @return The landing directory for the files transferred by using the AS2 protocol.
     * 
     */
    public Optional<Output<String>> baseDirectory() {
        return Optional.ofNullable(this.baseDirectory);
    }

    /**
     * The Optional description of the transdfer.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The Optional description of the transdfer.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The unique identifier for the AS2 local profile.
     * 
     */
    @Import(name="localProfileId")
    private @Nullable Output<String> localProfileId;

    /**
     * @return The unique identifier for the AS2 local profile.
     * 
     */
    public Optional<Output<String>> localProfileId() {
        return Optional.ofNullable(this.localProfileId);
    }

    /**
     * The unique identifier for the AS2 partner profile.
     * 
     */
    @Import(name="partnerProfileId")
    private @Nullable Output<String> partnerProfileId;

    /**
     * @return The unique identifier for the AS2 partner profile.
     * 
     */
    public Optional<Output<String>> partnerProfileId() {
        return Optional.ofNullable(this.partnerProfileId);
    }

    /**
     * The unique server identifier for the server instance. This is the specific server the agreement uses.
     * 
     */
    @Import(name="serverId")
    private @Nullable Output<String> serverId;

    /**
     * @return The unique server identifier for the server instance. This is the specific server the agreement uses.
     * 
     */
    public Optional<Output<String>> serverId() {
        return Optional.ofNullable(this.serverId);
    }

    @Import(name="status")
    private @Nullable Output<String> status;

    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    /**
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    private AgreementState() {}

    private AgreementState(AgreementState $) {
        this.accessRole = $.accessRole;
        this.agreementId = $.agreementId;
        this.arn = $.arn;
        this.baseDirectory = $.baseDirectory;
        this.description = $.description;
        this.localProfileId = $.localProfileId;
        this.partnerProfileId = $.partnerProfileId;
        this.serverId = $.serverId;
        this.status = $.status;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AgreementState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AgreementState $;

        public Builder() {
            $ = new AgreementState();
        }

        public Builder(AgreementState defaults) {
            $ = new AgreementState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessRole The IAM Role which provides read and write access to the parent directory of the file location mentioned in the StartFileTransfer request.
         * 
         * @return builder
         * 
         */
        public Builder accessRole(@Nullable Output<String> accessRole) {
            $.accessRole = accessRole;
            return this;
        }

        /**
         * @param accessRole The IAM Role which provides read and write access to the parent directory of the file location mentioned in the StartFileTransfer request.
         * 
         * @return builder
         * 
         */
        public Builder accessRole(String accessRole) {
            return accessRole(Output.of(accessRole));
        }

        /**
         * @param agreementId The unique identifier for the AS2 agreement.
         * 
         * @return builder
         * 
         */
        public Builder agreementId(@Nullable Output<String> agreementId) {
            $.agreementId = agreementId;
            return this;
        }

        /**
         * @param agreementId The unique identifier for the AS2 agreement.
         * 
         * @return builder
         * 
         */
        public Builder agreementId(String agreementId) {
            return agreementId(Output.of(agreementId));
        }

        /**
         * @param arn The ARN of the agreement.
         * 
         * @return builder
         * 
         */
        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        /**
         * @param arn The ARN of the agreement.
         * 
         * @return builder
         * 
         */
        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        /**
         * @param baseDirectory The landing directory for the files transferred by using the AS2 protocol.
         * 
         * @return builder
         * 
         */
        public Builder baseDirectory(@Nullable Output<String> baseDirectory) {
            $.baseDirectory = baseDirectory;
            return this;
        }

        /**
         * @param baseDirectory The landing directory for the files transferred by using the AS2 protocol.
         * 
         * @return builder
         * 
         */
        public Builder baseDirectory(String baseDirectory) {
            return baseDirectory(Output.of(baseDirectory));
        }

        /**
         * @param description The Optional description of the transdfer.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The Optional description of the transdfer.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param localProfileId The unique identifier for the AS2 local profile.
         * 
         * @return builder
         * 
         */
        public Builder localProfileId(@Nullable Output<String> localProfileId) {
            $.localProfileId = localProfileId;
            return this;
        }

        /**
         * @param localProfileId The unique identifier for the AS2 local profile.
         * 
         * @return builder
         * 
         */
        public Builder localProfileId(String localProfileId) {
            return localProfileId(Output.of(localProfileId));
        }

        /**
         * @param partnerProfileId The unique identifier for the AS2 partner profile.
         * 
         * @return builder
         * 
         */
        public Builder partnerProfileId(@Nullable Output<String> partnerProfileId) {
            $.partnerProfileId = partnerProfileId;
            return this;
        }

        /**
         * @param partnerProfileId The unique identifier for the AS2 partner profile.
         * 
         * @return builder
         * 
         */
        public Builder partnerProfileId(String partnerProfileId) {
            return partnerProfileId(Output.of(partnerProfileId));
        }

        /**
         * @param serverId The unique server identifier for the server instance. This is the specific server the agreement uses.
         * 
         * @return builder
         * 
         */
        public Builder serverId(@Nullable Output<String> serverId) {
            $.serverId = serverId;
            return this;
        }

        /**
         * @param serverId The unique server identifier for the server instance. This is the specific server the agreement uses.
         * 
         * @return builder
         * 
         */
        public Builder serverId(String serverId) {
            return serverId(Output.of(serverId));
        }

        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param tags A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * Please use `tags` instead.
         * 
         */
        @Deprecated /* Please use `tags` instead. */
        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * Please use `tags` instead.
         * 
         */
        @Deprecated /* Please use `tags` instead. */
        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        public AgreementState build() {
            return $;
        }
    }

}
