// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class VisualsKpiVisualChartConfigurationKpiOptionsSparkline {
    private @Nullable String color;
    private @Nullable String tooltipVisibility;
    private String type;
    private @Nullable String visibility;

    private VisualsKpiVisualChartConfigurationKpiOptionsSparkline() {}
    public Optional<String> color() {
        return Optional.ofNullable(this.color);
    }
    public Optional<String> tooltipVisibility() {
        return Optional.ofNullable(this.tooltipVisibility);
    }
    public String type() {
        return this.type;
    }
    public Optional<String> visibility() {
        return Optional.ofNullable(this.visibility);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VisualsKpiVisualChartConfigurationKpiOptionsSparkline defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String color;
        private @Nullable String tooltipVisibility;
        private String type;
        private @Nullable String visibility;
        public Builder() {}
        public Builder(VisualsKpiVisualChartConfigurationKpiOptionsSparkline defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.color = defaults.color;
    	      this.tooltipVisibility = defaults.tooltipVisibility;
    	      this.type = defaults.type;
    	      this.visibility = defaults.visibility;
        }

        @CustomType.Setter
        public Builder color(@Nullable String color) {

            this.color = color;
            return this;
        }
        @CustomType.Setter
        public Builder tooltipVisibility(@Nullable String tooltipVisibility) {

            this.tooltipVisibility = tooltipVisibility;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("VisualsKpiVisualChartConfigurationKpiOptionsSparkline", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder visibility(@Nullable String visibility) {

            this.visibility = visibility;
            return this;
        }
        public VisualsKpiVisualChartConfigurationKpiOptionsSparkline build() {
            final var _resultValue = new VisualsKpiVisualChartConfigurationKpiOptionsSparkline();
            _resultValue.color = color;
            _resultValue.tooltipVisibility = tooltipVisibility;
            _resultValue.type = type;
            _resultValue.visibility = visibility;
            return _resultValue;
        }
    }
}
