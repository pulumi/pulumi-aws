// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.lambda.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EventSourceMappingDocumentDbEventSourceConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final EventSourceMappingDocumentDbEventSourceConfigArgs Empty = new EventSourceMappingDocumentDbEventSourceConfigArgs();

    /**
     * The name of the collection to consume within the database. If you do not specify a collection, Lambda consumes all collections.
     * 
     */
    @Import(name="collectionName")
    private @Nullable Output<String> collectionName;

    /**
     * @return The name of the collection to consume within the database. If you do not specify a collection, Lambda consumes all collections.
     * 
     */
    public Optional<Output<String>> collectionName() {
        return Optional.ofNullable(this.collectionName);
    }

    /**
     * The name of the database to consume within the DocumentDB cluster.
     * 
     */
    @Import(name="databaseName", required=true)
    private Output<String> databaseName;

    /**
     * @return The name of the database to consume within the DocumentDB cluster.
     * 
     */
    public Output<String> databaseName() {
        return this.databaseName;
    }

    /**
     * Determines what DocumentDB sends to your event stream during document update operations. If set to `UpdateLookup`, DocumentDB sends a delta describing the changes, along with a copy of the entire document. Otherwise, DocumentDB sends only a partial document that contains the changes. Valid values: `UpdateLookup`, `Default`.
     * 
     */
    @Import(name="fullDocument")
    private @Nullable Output<String> fullDocument;

    /**
     * @return Determines what DocumentDB sends to your event stream during document update operations. If set to `UpdateLookup`, DocumentDB sends a delta describing the changes, along with a copy of the entire document. Otherwise, DocumentDB sends only a partial document that contains the changes. Valid values: `UpdateLookup`, `Default`.
     * 
     */
    public Optional<Output<String>> fullDocument() {
        return Optional.ofNullable(this.fullDocument);
    }

    private EventSourceMappingDocumentDbEventSourceConfigArgs() {}

    private EventSourceMappingDocumentDbEventSourceConfigArgs(EventSourceMappingDocumentDbEventSourceConfigArgs $) {
        this.collectionName = $.collectionName;
        this.databaseName = $.databaseName;
        this.fullDocument = $.fullDocument;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EventSourceMappingDocumentDbEventSourceConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EventSourceMappingDocumentDbEventSourceConfigArgs $;

        public Builder() {
            $ = new EventSourceMappingDocumentDbEventSourceConfigArgs();
        }

        public Builder(EventSourceMappingDocumentDbEventSourceConfigArgs defaults) {
            $ = new EventSourceMappingDocumentDbEventSourceConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param collectionName The name of the collection to consume within the database. If you do not specify a collection, Lambda consumes all collections.
         * 
         * @return builder
         * 
         */
        public Builder collectionName(@Nullable Output<String> collectionName) {
            $.collectionName = collectionName;
            return this;
        }

        /**
         * @param collectionName The name of the collection to consume within the database. If you do not specify a collection, Lambda consumes all collections.
         * 
         * @return builder
         * 
         */
        public Builder collectionName(String collectionName) {
            return collectionName(Output.of(collectionName));
        }

        /**
         * @param databaseName The name of the database to consume within the DocumentDB cluster.
         * 
         * @return builder
         * 
         */
        public Builder databaseName(Output<String> databaseName) {
            $.databaseName = databaseName;
            return this;
        }

        /**
         * @param databaseName The name of the database to consume within the DocumentDB cluster.
         * 
         * @return builder
         * 
         */
        public Builder databaseName(String databaseName) {
            return databaseName(Output.of(databaseName));
        }

        /**
         * @param fullDocument Determines what DocumentDB sends to your event stream during document update operations. If set to `UpdateLookup`, DocumentDB sends a delta describing the changes, along with a copy of the entire document. Otherwise, DocumentDB sends only a partial document that contains the changes. Valid values: `UpdateLookup`, `Default`.
         * 
         * @return builder
         * 
         */
        public Builder fullDocument(@Nullable Output<String> fullDocument) {
            $.fullDocument = fullDocument;
            return this;
        }

        /**
         * @param fullDocument Determines what DocumentDB sends to your event stream during document update operations. If set to `UpdateLookup`, DocumentDB sends a delta describing the changes, along with a copy of the entire document. Otherwise, DocumentDB sends only a partial document that contains the changes. Valid values: `UpdateLookup`, `Default`.
         * 
         * @return builder
         * 
         */
        public Builder fullDocument(String fullDocument) {
            return fullDocument(Output.of(fullDocument));
        }

        public EventSourceMappingDocumentDbEventSourceConfigArgs build() {
            $.databaseName = Objects.requireNonNull($.databaseName, "expected parameter 'databaseName' to be non-null");
            return $;
        }
    }

}
