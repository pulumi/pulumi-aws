// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.verifiedpermissions.outputs;

import com.pulumi.aws.verifiedpermissions.outputs.IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelectionAccessTokenOnly;
import com.pulumi.aws.verifiedpermissions.outputs.IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelectionIdentityTokenOnly;
import com.pulumi.core.annotations.CustomType;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelection {
    /**
     * @return The OIDC configuration for processing access tokens. See Access Token Only below.
     * 
     */
    private @Nullable IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelectionAccessTokenOnly accessTokenOnly;
    /**
     * @return The OIDC configuration for processing identity (ID) tokens. See Identity Token Only below.
     * 
     */
    private @Nullable IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelectionIdentityTokenOnly identityTokenOnly;

    private IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelection() {}
    /**
     * @return The OIDC configuration for processing access tokens. See Access Token Only below.
     * 
     */
    public Optional<IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelectionAccessTokenOnly> accessTokenOnly() {
        return Optional.ofNullable(this.accessTokenOnly);
    }
    /**
     * @return The OIDC configuration for processing identity (ID) tokens. See Identity Token Only below.
     * 
     */
    public Optional<IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelectionIdentityTokenOnly> identityTokenOnly() {
        return Optional.ofNullable(this.identityTokenOnly);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelection defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelectionAccessTokenOnly accessTokenOnly;
        private @Nullable IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelectionIdentityTokenOnly identityTokenOnly;
        public Builder() {}
        public Builder(IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelection defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessTokenOnly = defaults.accessTokenOnly;
    	      this.identityTokenOnly = defaults.identityTokenOnly;
        }

        @CustomType.Setter
        public Builder accessTokenOnly(@Nullable IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelectionAccessTokenOnly accessTokenOnly) {

            this.accessTokenOnly = accessTokenOnly;
            return this;
        }
        @CustomType.Setter
        public Builder identityTokenOnly(@Nullable IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelectionIdentityTokenOnly identityTokenOnly) {

            this.identityTokenOnly = identityTokenOnly;
            return this;
        }
        public IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelection build() {
            final var _resultValue = new IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelection();
            _resultValue.accessTokenOnly = accessTokenOnly;
            _resultValue.identityTokenOnly = identityTokenOnly;
            return _resultValue;
        }
    }
}
