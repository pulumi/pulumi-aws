// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.datazone.inputs;

import com.pulumi.aws.datazone.inputs.FormTypeImportArgs;
import com.pulumi.aws.datazone.inputs.FormTypeModelArgs;
import com.pulumi.aws.datazone.inputs.FormTypeTimeoutsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FormTypeState extends com.pulumi.resources.ResourceArgs {

    public static final FormTypeState Empty = new FormTypeState();

    /**
     * Creation time of the Form Type.
     * 
     */
    @Import(name="createdAt")
    private @Nullable Output<String> createdAt;

    /**
     * @return Creation time of the Form Type.
     * 
     */
    public Optional<Output<String>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    /**
     * Creator of the Form Type.
     * 
     */
    @Import(name="createdBy")
    private @Nullable Output<String> createdBy;

    /**
     * @return Creator of the Form Type.
     * 
     */
    public Optional<Output<String>> createdBy() {
        return Optional.ofNullable(this.createdBy);
    }

    /**
     * Description of form type. Must have a length of between 1 and 2048 characters.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of form type. Must have a length of between 1 and 2048 characters.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Identifier of the domain.
     * 
     */
    @Import(name="domainIdentifier")
    private @Nullable Output<String> domainIdentifier;

    /**
     * @return Identifier of the domain.
     * 
     */
    public Optional<Output<String>> domainIdentifier() {
        return Optional.ofNullable(this.domainIdentifier);
    }

    @Import(name="imports")
    private @Nullable Output<List<FormTypeImportArgs>> imports;

    public Optional<Output<List<FormTypeImportArgs>>> imports() {
        return Optional.ofNullable(this.imports);
    }

    /**
     * Object of the model of the form type that contains the following attributes.
     * 
     */
    @Import(name="model")
    private @Nullable Output<FormTypeModelArgs> model;

    /**
     * @return Object of the model of the form type that contains the following attributes.
     * 
     */
    public Optional<Output<FormTypeModelArgs>> model() {
        return Optional.ofNullable(this.model);
    }

    /**
     * Name of the form type. Must be the name of the structure in smithy document.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the form type. Must be the name of the structure in smithy document.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Origin domain id of the Form Type.
     * 
     */
    @Import(name="originDomainId")
    private @Nullable Output<String> originDomainId;

    /**
     * @return Origin domain id of the Form Type.
     * 
     */
    public Optional<Output<String>> originDomainId() {
        return Optional.ofNullable(this.originDomainId);
    }

    /**
     * Origin project id of the Form Type.
     * 
     */
    @Import(name="originProjectId")
    private @Nullable Output<String> originProjectId;

    /**
     * @return Origin project id of the Form Type.
     * 
     */
    public Optional<Output<String>> originProjectId() {
        return Optional.ofNullable(this.originProjectId);
    }

    /**
     * Identifier of project that owns the form type. Must follow regex of ^[a-zA-Z0-9_-]{1,36}.
     * 
     */
    @Import(name="owningProjectIdentifier")
    private @Nullable Output<String> owningProjectIdentifier;

    /**
     * @return Identifier of project that owns the form type. Must follow regex of ^[a-zA-Z0-9_-]{1,36}.
     * 
     */
    public Optional<Output<String>> owningProjectIdentifier() {
        return Optional.ofNullable(this.owningProjectIdentifier);
    }

    /**
     * Revision of the Form Type.
     * 
     */
    @Import(name="revision")
    private @Nullable Output<String> revision;

    /**
     * @return Revision of the Form Type.
     * 
     */
    public Optional<Output<String>> revision() {
        return Optional.ofNullable(this.revision);
    }

    @Import(name="status")
    private @Nullable Output<String> status;

    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    @Import(name="timeouts")
    private @Nullable Output<FormTypeTimeoutsArgs> timeouts;

    public Optional<Output<FormTypeTimeoutsArgs>> timeouts() {
        return Optional.ofNullable(this.timeouts);
    }

    private FormTypeState() {}

    private FormTypeState(FormTypeState $) {
        this.createdAt = $.createdAt;
        this.createdBy = $.createdBy;
        this.description = $.description;
        this.domainIdentifier = $.domainIdentifier;
        this.imports = $.imports;
        this.model = $.model;
        this.name = $.name;
        this.originDomainId = $.originDomainId;
        this.originProjectId = $.originProjectId;
        this.owningProjectIdentifier = $.owningProjectIdentifier;
        this.revision = $.revision;
        this.status = $.status;
        this.timeouts = $.timeouts;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FormTypeState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FormTypeState $;

        public Builder() {
            $ = new FormTypeState();
        }

        public Builder(FormTypeState defaults) {
            $ = new FormTypeState(Objects.requireNonNull(defaults));
        }

        /**
         * @param createdAt Creation time of the Form Type.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(@Nullable Output<String> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        /**
         * @param createdAt Creation time of the Form Type.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(String createdAt) {
            return createdAt(Output.of(createdAt));
        }

        /**
         * @param createdBy Creator of the Form Type.
         * 
         * @return builder
         * 
         */
        public Builder createdBy(@Nullable Output<String> createdBy) {
            $.createdBy = createdBy;
            return this;
        }

        /**
         * @param createdBy Creator of the Form Type.
         * 
         * @return builder
         * 
         */
        public Builder createdBy(String createdBy) {
            return createdBy(Output.of(createdBy));
        }

        /**
         * @param description Description of form type. Must have a length of between 1 and 2048 characters.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of form type. Must have a length of between 1 and 2048 characters.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param domainIdentifier Identifier of the domain.
         * 
         * @return builder
         * 
         */
        public Builder domainIdentifier(@Nullable Output<String> domainIdentifier) {
            $.domainIdentifier = domainIdentifier;
            return this;
        }

        /**
         * @param domainIdentifier Identifier of the domain.
         * 
         * @return builder
         * 
         */
        public Builder domainIdentifier(String domainIdentifier) {
            return domainIdentifier(Output.of(domainIdentifier));
        }

        public Builder imports(@Nullable Output<List<FormTypeImportArgs>> imports) {
            $.imports = imports;
            return this;
        }

        public Builder imports(List<FormTypeImportArgs> imports) {
            return imports(Output.of(imports));
        }

        public Builder imports(FormTypeImportArgs... imports) {
            return imports(List.of(imports));
        }

        /**
         * @param model Object of the model of the form type that contains the following attributes.
         * 
         * @return builder
         * 
         */
        public Builder model(@Nullable Output<FormTypeModelArgs> model) {
            $.model = model;
            return this;
        }

        /**
         * @param model Object of the model of the form type that contains the following attributes.
         * 
         * @return builder
         * 
         */
        public Builder model(FormTypeModelArgs model) {
            return model(Output.of(model));
        }

        /**
         * @param name Name of the form type. Must be the name of the structure in smithy document.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the form type. Must be the name of the structure in smithy document.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param originDomainId Origin domain id of the Form Type.
         * 
         * @return builder
         * 
         */
        public Builder originDomainId(@Nullable Output<String> originDomainId) {
            $.originDomainId = originDomainId;
            return this;
        }

        /**
         * @param originDomainId Origin domain id of the Form Type.
         * 
         * @return builder
         * 
         */
        public Builder originDomainId(String originDomainId) {
            return originDomainId(Output.of(originDomainId));
        }

        /**
         * @param originProjectId Origin project id of the Form Type.
         * 
         * @return builder
         * 
         */
        public Builder originProjectId(@Nullable Output<String> originProjectId) {
            $.originProjectId = originProjectId;
            return this;
        }

        /**
         * @param originProjectId Origin project id of the Form Type.
         * 
         * @return builder
         * 
         */
        public Builder originProjectId(String originProjectId) {
            return originProjectId(Output.of(originProjectId));
        }

        /**
         * @param owningProjectIdentifier Identifier of project that owns the form type. Must follow regex of ^[a-zA-Z0-9_-]{1,36}.
         * 
         * @return builder
         * 
         */
        public Builder owningProjectIdentifier(@Nullable Output<String> owningProjectIdentifier) {
            $.owningProjectIdentifier = owningProjectIdentifier;
            return this;
        }

        /**
         * @param owningProjectIdentifier Identifier of project that owns the form type. Must follow regex of ^[a-zA-Z0-9_-]{1,36}.
         * 
         * @return builder
         * 
         */
        public Builder owningProjectIdentifier(String owningProjectIdentifier) {
            return owningProjectIdentifier(Output.of(owningProjectIdentifier));
        }

        /**
         * @param revision Revision of the Form Type.
         * 
         * @return builder
         * 
         */
        public Builder revision(@Nullable Output<String> revision) {
            $.revision = revision;
            return this;
        }

        /**
         * @param revision Revision of the Form Type.
         * 
         * @return builder
         * 
         */
        public Builder revision(String revision) {
            return revision(Output.of(revision));
        }

        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        public Builder status(String status) {
            return status(Output.of(status));
        }

        public Builder timeouts(@Nullable Output<FormTypeTimeoutsArgs> timeouts) {
            $.timeouts = timeouts;
            return this;
        }

        public Builder timeouts(FormTypeTimeoutsArgs timeouts) {
            return timeouts(Output.of(timeouts));
        }

        public FormTypeState build() {
            return $;
        }
    }

}
