// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.verifiedaccess.inputs;

import com.pulumi.aws.verifiedaccess.inputs.EndpointLoadBalancerOptionsArgs;
import com.pulumi.aws.verifiedaccess.inputs.EndpointNetworkInterfaceOptionsArgs;
import com.pulumi.aws.verifiedaccess.inputs.EndpointSseSpecificationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EndpointState extends com.pulumi.resources.ResourceArgs {

    public static final EndpointState Empty = new EndpointState();

    /**
     * The DNS name for users to reach your application.
     * 
     */
    @Import(name="applicationDomain")
    private @Nullable Output<String> applicationDomain;

    /**
     * @return The DNS name for users to reach your application.
     * 
     */
    public Optional<Output<String>> applicationDomain() {
        return Optional.ofNullable(this.applicationDomain);
    }

    /**
     * The type of attachment. Currently, only `vpc` is supported.
     * 
     */
    @Import(name="attachmentType")
    private @Nullable Output<String> attachmentType;

    /**
     * @return The type of attachment. Currently, only `vpc` is supported.
     * 
     */
    public Optional<Output<String>> attachmentType() {
        return Optional.ofNullable(this.attachmentType);
    }

    /**
     * A description for the Verified Access endpoint.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A description for the Verified Access endpoint.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Returned if endpoint has a device trust provider attached.
     * 
     */
    @Import(name="deviceValidationDomain")
    private @Nullable Output<String> deviceValidationDomain;

    /**
     * @return Returned if endpoint has a device trust provider attached.
     * 
     */
    public Optional<Output<String>> deviceValidationDomain() {
        return Optional.ofNullable(this.deviceValidationDomain);
    }

    /**
     * The ARN of the public TLS/SSL certificate in AWS Certificate Manager to associate with the endpoint. The CN in the certificate must match the DNS name your end users will use to reach your application.
     * 
     */
    @Import(name="domainCertificateArn")
    private @Nullable Output<String> domainCertificateArn;

    /**
     * @return The ARN of the public TLS/SSL certificate in AWS Certificate Manager to associate with the endpoint. The CN in the certificate must match the DNS name your end users will use to reach your application.
     * 
     */
    public Optional<Output<String>> domainCertificateArn() {
        return Optional.ofNullable(this.domainCertificateArn);
    }

    /**
     * A DNS name that is generated for the endpoint.
     * 
     */
    @Import(name="endpointDomain")
    private @Nullable Output<String> endpointDomain;

    /**
     * @return A DNS name that is generated for the endpoint.
     * 
     */
    public Optional<Output<String>> endpointDomain() {
        return Optional.ofNullable(this.endpointDomain);
    }

    /**
     * A custom identifier that is prepended to the DNS name that is generated for the endpoint.
     * 
     */
    @Import(name="endpointDomainPrefix")
    private @Nullable Output<String> endpointDomainPrefix;

    /**
     * @return A custom identifier that is prepended to the DNS name that is generated for the endpoint.
     * 
     */
    public Optional<Output<String>> endpointDomainPrefix() {
        return Optional.ofNullable(this.endpointDomainPrefix);
    }

    /**
     * The type of Verified Access endpoint to create. Currently `load-balancer` or `network-interface` are supported.
     * 
     */
    @Import(name="endpointType")
    private @Nullable Output<String> endpointType;

    /**
     * @return The type of Verified Access endpoint to create. Currently `load-balancer` or `network-interface` are supported.
     * 
     */
    public Optional<Output<String>> endpointType() {
        return Optional.ofNullable(this.endpointType);
    }

    /**
     * The load balancer details. This parameter is required if the endpoint type is `load-balancer`.
     * 
     */
    @Import(name="loadBalancerOptions")
    private @Nullable Output<EndpointLoadBalancerOptionsArgs> loadBalancerOptions;

    /**
     * @return The load balancer details. This parameter is required if the endpoint type is `load-balancer`.
     * 
     */
    public Optional<Output<EndpointLoadBalancerOptionsArgs>> loadBalancerOptions() {
        return Optional.ofNullable(this.loadBalancerOptions);
    }

    /**
     * The network interface details. This parameter is required if the endpoint type is `network-interface`.
     * 
     */
    @Import(name="networkInterfaceOptions")
    private @Nullable Output<EndpointNetworkInterfaceOptionsArgs> networkInterfaceOptions;

    /**
     * @return The network interface details. This parameter is required if the endpoint type is `network-interface`.
     * 
     */
    public Optional<Output<EndpointNetworkInterfaceOptionsArgs>> networkInterfaceOptions() {
        return Optional.ofNullable(this.networkInterfaceOptions);
    }

    /**
     * List of the the security groups IDs to associate with the Verified Access endpoint.
     * 
     */
    @Import(name="securityGroupIds")
    private @Nullable Output<List<String>> securityGroupIds;

    /**
     * @return List of the the security groups IDs to associate with the Verified Access endpoint.
     * 
     */
    public Optional<Output<List<String>>> securityGroupIds() {
        return Optional.ofNullable(this.securityGroupIds);
    }

    /**
     * The options in use for server side encryption.
     * 
     */
    @Import(name="sseSpecification")
    private @Nullable Output<EndpointSseSpecificationArgs> sseSpecification;

    /**
     * @return The options in use for server side encryption.
     * 
     */
    public Optional<Output<EndpointSseSpecificationArgs>> sseSpecification() {
        return Optional.ofNullable(this.sseSpecification);
    }

    /**
     * Key-value tags for the Verified Access Endpoint. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Key-value tags for the Verified Access Endpoint. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    /**
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    /**
     * The ID of the Verified Access group to associate the endpoint with.
     * 
     * The following arguments are optional:
     * 
     */
    @Import(name="verifiedAccessGroupId")
    private @Nullable Output<String> verifiedAccessGroupId;

    /**
     * @return The ID of the Verified Access group to associate the endpoint with.
     * 
     * The following arguments are optional:
     * 
     */
    public Optional<Output<String>> verifiedAccessGroupId() {
        return Optional.ofNullable(this.verifiedAccessGroupId);
    }

    @Import(name="verifiedAccessInstanceId")
    private @Nullable Output<String> verifiedAccessInstanceId;

    public Optional<Output<String>> verifiedAccessInstanceId() {
        return Optional.ofNullable(this.verifiedAccessInstanceId);
    }

    private EndpointState() {}

    private EndpointState(EndpointState $) {
        this.applicationDomain = $.applicationDomain;
        this.attachmentType = $.attachmentType;
        this.description = $.description;
        this.deviceValidationDomain = $.deviceValidationDomain;
        this.domainCertificateArn = $.domainCertificateArn;
        this.endpointDomain = $.endpointDomain;
        this.endpointDomainPrefix = $.endpointDomainPrefix;
        this.endpointType = $.endpointType;
        this.loadBalancerOptions = $.loadBalancerOptions;
        this.networkInterfaceOptions = $.networkInterfaceOptions;
        this.securityGroupIds = $.securityGroupIds;
        this.sseSpecification = $.sseSpecification;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
        this.verifiedAccessGroupId = $.verifiedAccessGroupId;
        this.verifiedAccessInstanceId = $.verifiedAccessInstanceId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EndpointState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EndpointState $;

        public Builder() {
            $ = new EndpointState();
        }

        public Builder(EndpointState defaults) {
            $ = new EndpointState(Objects.requireNonNull(defaults));
        }

        /**
         * @param applicationDomain The DNS name for users to reach your application.
         * 
         * @return builder
         * 
         */
        public Builder applicationDomain(@Nullable Output<String> applicationDomain) {
            $.applicationDomain = applicationDomain;
            return this;
        }

        /**
         * @param applicationDomain The DNS name for users to reach your application.
         * 
         * @return builder
         * 
         */
        public Builder applicationDomain(String applicationDomain) {
            return applicationDomain(Output.of(applicationDomain));
        }

        /**
         * @param attachmentType The type of attachment. Currently, only `vpc` is supported.
         * 
         * @return builder
         * 
         */
        public Builder attachmentType(@Nullable Output<String> attachmentType) {
            $.attachmentType = attachmentType;
            return this;
        }

        /**
         * @param attachmentType The type of attachment. Currently, only `vpc` is supported.
         * 
         * @return builder
         * 
         */
        public Builder attachmentType(String attachmentType) {
            return attachmentType(Output.of(attachmentType));
        }

        /**
         * @param description A description for the Verified Access endpoint.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A description for the Verified Access endpoint.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param deviceValidationDomain Returned if endpoint has a device trust provider attached.
         * 
         * @return builder
         * 
         */
        public Builder deviceValidationDomain(@Nullable Output<String> deviceValidationDomain) {
            $.deviceValidationDomain = deviceValidationDomain;
            return this;
        }

        /**
         * @param deviceValidationDomain Returned if endpoint has a device trust provider attached.
         * 
         * @return builder
         * 
         */
        public Builder deviceValidationDomain(String deviceValidationDomain) {
            return deviceValidationDomain(Output.of(deviceValidationDomain));
        }

        /**
         * @param domainCertificateArn The ARN of the public TLS/SSL certificate in AWS Certificate Manager to associate with the endpoint. The CN in the certificate must match the DNS name your end users will use to reach your application.
         * 
         * @return builder
         * 
         */
        public Builder domainCertificateArn(@Nullable Output<String> domainCertificateArn) {
            $.domainCertificateArn = domainCertificateArn;
            return this;
        }

        /**
         * @param domainCertificateArn The ARN of the public TLS/SSL certificate in AWS Certificate Manager to associate with the endpoint. The CN in the certificate must match the DNS name your end users will use to reach your application.
         * 
         * @return builder
         * 
         */
        public Builder domainCertificateArn(String domainCertificateArn) {
            return domainCertificateArn(Output.of(domainCertificateArn));
        }

        /**
         * @param endpointDomain A DNS name that is generated for the endpoint.
         * 
         * @return builder
         * 
         */
        public Builder endpointDomain(@Nullable Output<String> endpointDomain) {
            $.endpointDomain = endpointDomain;
            return this;
        }

        /**
         * @param endpointDomain A DNS name that is generated for the endpoint.
         * 
         * @return builder
         * 
         */
        public Builder endpointDomain(String endpointDomain) {
            return endpointDomain(Output.of(endpointDomain));
        }

        /**
         * @param endpointDomainPrefix A custom identifier that is prepended to the DNS name that is generated for the endpoint.
         * 
         * @return builder
         * 
         */
        public Builder endpointDomainPrefix(@Nullable Output<String> endpointDomainPrefix) {
            $.endpointDomainPrefix = endpointDomainPrefix;
            return this;
        }

        /**
         * @param endpointDomainPrefix A custom identifier that is prepended to the DNS name that is generated for the endpoint.
         * 
         * @return builder
         * 
         */
        public Builder endpointDomainPrefix(String endpointDomainPrefix) {
            return endpointDomainPrefix(Output.of(endpointDomainPrefix));
        }

        /**
         * @param endpointType The type of Verified Access endpoint to create. Currently `load-balancer` or `network-interface` are supported.
         * 
         * @return builder
         * 
         */
        public Builder endpointType(@Nullable Output<String> endpointType) {
            $.endpointType = endpointType;
            return this;
        }

        /**
         * @param endpointType The type of Verified Access endpoint to create. Currently `load-balancer` or `network-interface` are supported.
         * 
         * @return builder
         * 
         */
        public Builder endpointType(String endpointType) {
            return endpointType(Output.of(endpointType));
        }

        /**
         * @param loadBalancerOptions The load balancer details. This parameter is required if the endpoint type is `load-balancer`.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerOptions(@Nullable Output<EndpointLoadBalancerOptionsArgs> loadBalancerOptions) {
            $.loadBalancerOptions = loadBalancerOptions;
            return this;
        }

        /**
         * @param loadBalancerOptions The load balancer details. This parameter is required if the endpoint type is `load-balancer`.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerOptions(EndpointLoadBalancerOptionsArgs loadBalancerOptions) {
            return loadBalancerOptions(Output.of(loadBalancerOptions));
        }

        /**
         * @param networkInterfaceOptions The network interface details. This parameter is required if the endpoint type is `network-interface`.
         * 
         * @return builder
         * 
         */
        public Builder networkInterfaceOptions(@Nullable Output<EndpointNetworkInterfaceOptionsArgs> networkInterfaceOptions) {
            $.networkInterfaceOptions = networkInterfaceOptions;
            return this;
        }

        /**
         * @param networkInterfaceOptions The network interface details. This parameter is required if the endpoint type is `network-interface`.
         * 
         * @return builder
         * 
         */
        public Builder networkInterfaceOptions(EndpointNetworkInterfaceOptionsArgs networkInterfaceOptions) {
            return networkInterfaceOptions(Output.of(networkInterfaceOptions));
        }

        /**
         * @param securityGroupIds List of the the security groups IDs to associate with the Verified Access endpoint.
         * 
         * @return builder
         * 
         */
        public Builder securityGroupIds(@Nullable Output<List<String>> securityGroupIds) {
            $.securityGroupIds = securityGroupIds;
            return this;
        }

        /**
         * @param securityGroupIds List of the the security groups IDs to associate with the Verified Access endpoint.
         * 
         * @return builder
         * 
         */
        public Builder securityGroupIds(List<String> securityGroupIds) {
            return securityGroupIds(Output.of(securityGroupIds));
        }

        /**
         * @param securityGroupIds List of the the security groups IDs to associate with the Verified Access endpoint.
         * 
         * @return builder
         * 
         */
        public Builder securityGroupIds(String... securityGroupIds) {
            return securityGroupIds(List.of(securityGroupIds));
        }

        /**
         * @param sseSpecification The options in use for server side encryption.
         * 
         * @return builder
         * 
         */
        public Builder sseSpecification(@Nullable Output<EndpointSseSpecificationArgs> sseSpecification) {
            $.sseSpecification = sseSpecification;
            return this;
        }

        /**
         * @param sseSpecification The options in use for server side encryption.
         * 
         * @return builder
         * 
         */
        public Builder sseSpecification(EndpointSseSpecificationArgs sseSpecification) {
            return sseSpecification(Output.of(sseSpecification));
        }

        /**
         * @param tags Key-value tags for the Verified Access Endpoint. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Key-value tags for the Verified Access Endpoint. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * Please use `tags` instead.
         * 
         */
        @Deprecated /* Please use `tags` instead. */
        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * Please use `tags` instead.
         * 
         */
        @Deprecated /* Please use `tags` instead. */
        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        /**
         * @param verifiedAccessGroupId The ID of the Verified Access group to associate the endpoint with.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder verifiedAccessGroupId(@Nullable Output<String> verifiedAccessGroupId) {
            $.verifiedAccessGroupId = verifiedAccessGroupId;
            return this;
        }

        /**
         * @param verifiedAccessGroupId The ID of the Verified Access group to associate the endpoint with.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder verifiedAccessGroupId(String verifiedAccessGroupId) {
            return verifiedAccessGroupId(Output.of(verifiedAccessGroupId));
        }

        public Builder verifiedAccessInstanceId(@Nullable Output<String> verifiedAccessInstanceId) {
            $.verifiedAccessInstanceId = verifiedAccessInstanceId;
            return this;
        }

        public Builder verifiedAccessInstanceId(String verifiedAccessInstanceId) {
            return verifiedAccessInstanceId(Output.of(verifiedAccessInstanceId));
        }

        public EndpointState build() {
            return $;
        }
    }

}
