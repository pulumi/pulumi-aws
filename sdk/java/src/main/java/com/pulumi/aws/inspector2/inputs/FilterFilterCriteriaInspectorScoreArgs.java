// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.inspector2.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.util.Objects;


public final class FilterFilterCriteriaInspectorScoreArgs extends com.pulumi.resources.ResourceArgs {

    public static final FilterFilterCriteriaInspectorScoreArgs Empty = new FilterFilterCriteriaInspectorScoreArgs();

    /**
     * (Optional) Lower bound of the range, inclusive.
     * 
     */
    @Import(name="lowerInclusive", required=true)
    private Output<Double> lowerInclusive;

    /**
     * @return (Optional) Lower bound of the range, inclusive.
     * 
     */
    public Output<Double> lowerInclusive() {
        return this.lowerInclusive;
    }

    /**
     * (Optional) Upper bound of the range, inclusive.
     * 
     */
    @Import(name="upperInclusive", required=true)
    private Output<Double> upperInclusive;

    /**
     * @return (Optional) Upper bound of the range, inclusive.
     * 
     */
    public Output<Double> upperInclusive() {
        return this.upperInclusive;
    }

    private FilterFilterCriteriaInspectorScoreArgs() {}

    private FilterFilterCriteriaInspectorScoreArgs(FilterFilterCriteriaInspectorScoreArgs $) {
        this.lowerInclusive = $.lowerInclusive;
        this.upperInclusive = $.upperInclusive;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FilterFilterCriteriaInspectorScoreArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FilterFilterCriteriaInspectorScoreArgs $;

        public Builder() {
            $ = new FilterFilterCriteriaInspectorScoreArgs();
        }

        public Builder(FilterFilterCriteriaInspectorScoreArgs defaults) {
            $ = new FilterFilterCriteriaInspectorScoreArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param lowerInclusive (Optional) Lower bound of the range, inclusive.
         * 
         * @return builder
         * 
         */
        public Builder lowerInclusive(Output<Double> lowerInclusive) {
            $.lowerInclusive = lowerInclusive;
            return this;
        }

        /**
         * @param lowerInclusive (Optional) Lower bound of the range, inclusive.
         * 
         * @return builder
         * 
         */
        public Builder lowerInclusive(Double lowerInclusive) {
            return lowerInclusive(Output.of(lowerInclusive));
        }

        /**
         * @param upperInclusive (Optional) Upper bound of the range, inclusive.
         * 
         * @return builder
         * 
         */
        public Builder upperInclusive(Output<Double> upperInclusive) {
            $.upperInclusive = upperInclusive;
            return this;
        }

        /**
         * @param upperInclusive (Optional) Upper bound of the range, inclusive.
         * 
         * @return builder
         * 
         */
        public Builder upperInclusive(Double upperInclusive) {
            return upperInclusive(Output.of(upperInclusive));
        }

        public FilterFilterCriteriaInspectorScoreArgs build() {
            if ($.lowerInclusive == null) {
                throw new MissingRequiredPropertyException("FilterFilterCriteriaInspectorScoreArgs", "lowerInclusive");
            }
            if ($.upperInclusive == null) {
                throw new MissingRequiredPropertyException("FilterFilterCriteriaInspectorScoreArgs", "upperInclusive");
            }
            return $;
        }
    }

}
