// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.wafv2.outputs;

import com.pulumi.aws.wafv2.outputs.WebAclRuleGroupAssociationManagedRuleGroupRuleActionOverrideActionToUseAllow;
import com.pulumi.aws.wafv2.outputs.WebAclRuleGroupAssociationManagedRuleGroupRuleActionOverrideActionToUseBlock;
import com.pulumi.aws.wafv2.outputs.WebAclRuleGroupAssociationManagedRuleGroupRuleActionOverrideActionToUseCaptcha;
import com.pulumi.aws.wafv2.outputs.WebAclRuleGroupAssociationManagedRuleGroupRuleActionOverrideActionToUseChallenge;
import com.pulumi.aws.wafv2.outputs.WebAclRuleGroupAssociationManagedRuleGroupRuleActionOverrideActionToUseCount;
import com.pulumi.core.annotations.CustomType;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class WebAclRuleGroupAssociationManagedRuleGroupRuleActionOverrideActionToUse {
    /**
     * @return Allow the request. See below.
     * 
     */
    private @Nullable WebAclRuleGroupAssociationManagedRuleGroupRuleActionOverrideActionToUseAllow allow;
    /**
     * @return Block the request. See below.
     * 
     */
    private @Nullable WebAclRuleGroupAssociationManagedRuleGroupRuleActionOverrideActionToUseBlock block;
    /**
     * @return Require CAPTCHA verification. See below.
     * 
     */
    private @Nullable WebAclRuleGroupAssociationManagedRuleGroupRuleActionOverrideActionToUseCaptcha captcha;
    /**
     * @return Require challenge verification. See below.
     * 
     */
    private @Nullable WebAclRuleGroupAssociationManagedRuleGroupRuleActionOverrideActionToUseChallenge challenge;
    /**
     * @return Count the request without taking action. See below.
     * 
     */
    private @Nullable WebAclRuleGroupAssociationManagedRuleGroupRuleActionOverrideActionToUseCount count;

    private WebAclRuleGroupAssociationManagedRuleGroupRuleActionOverrideActionToUse() {}
    /**
     * @return Allow the request. See below.
     * 
     */
    public Optional<WebAclRuleGroupAssociationManagedRuleGroupRuleActionOverrideActionToUseAllow> allow() {
        return Optional.ofNullable(this.allow);
    }
    /**
     * @return Block the request. See below.
     * 
     */
    public Optional<WebAclRuleGroupAssociationManagedRuleGroupRuleActionOverrideActionToUseBlock> block() {
        return Optional.ofNullable(this.block);
    }
    /**
     * @return Require CAPTCHA verification. See below.
     * 
     */
    public Optional<WebAclRuleGroupAssociationManagedRuleGroupRuleActionOverrideActionToUseCaptcha> captcha() {
        return Optional.ofNullable(this.captcha);
    }
    /**
     * @return Require challenge verification. See below.
     * 
     */
    public Optional<WebAclRuleGroupAssociationManagedRuleGroupRuleActionOverrideActionToUseChallenge> challenge() {
        return Optional.ofNullable(this.challenge);
    }
    /**
     * @return Count the request without taking action. See below.
     * 
     */
    public Optional<WebAclRuleGroupAssociationManagedRuleGroupRuleActionOverrideActionToUseCount> count() {
        return Optional.ofNullable(this.count);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(WebAclRuleGroupAssociationManagedRuleGroupRuleActionOverrideActionToUse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable WebAclRuleGroupAssociationManagedRuleGroupRuleActionOverrideActionToUseAllow allow;
        private @Nullable WebAclRuleGroupAssociationManagedRuleGroupRuleActionOverrideActionToUseBlock block;
        private @Nullable WebAclRuleGroupAssociationManagedRuleGroupRuleActionOverrideActionToUseCaptcha captcha;
        private @Nullable WebAclRuleGroupAssociationManagedRuleGroupRuleActionOverrideActionToUseChallenge challenge;
        private @Nullable WebAclRuleGroupAssociationManagedRuleGroupRuleActionOverrideActionToUseCount count;
        public Builder() {}
        public Builder(WebAclRuleGroupAssociationManagedRuleGroupRuleActionOverrideActionToUse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allow = defaults.allow;
    	      this.block = defaults.block;
    	      this.captcha = defaults.captcha;
    	      this.challenge = defaults.challenge;
    	      this.count = defaults.count;
        }

        @CustomType.Setter
        public Builder allow(@Nullable WebAclRuleGroupAssociationManagedRuleGroupRuleActionOverrideActionToUseAllow allow) {

            this.allow = allow;
            return this;
        }
        @CustomType.Setter
        public Builder block(@Nullable WebAclRuleGroupAssociationManagedRuleGroupRuleActionOverrideActionToUseBlock block) {

            this.block = block;
            return this;
        }
        @CustomType.Setter
        public Builder captcha(@Nullable WebAclRuleGroupAssociationManagedRuleGroupRuleActionOverrideActionToUseCaptcha captcha) {

            this.captcha = captcha;
            return this;
        }
        @CustomType.Setter
        public Builder challenge(@Nullable WebAclRuleGroupAssociationManagedRuleGroupRuleActionOverrideActionToUseChallenge challenge) {

            this.challenge = challenge;
            return this;
        }
        @CustomType.Setter
        public Builder count(@Nullable WebAclRuleGroupAssociationManagedRuleGroupRuleActionOverrideActionToUseCount count) {

            this.count = count;
            return this;
        }
        public WebAclRuleGroupAssociationManagedRuleGroupRuleActionOverrideActionToUse build() {
            final var _resultValue = new WebAclRuleGroupAssociationManagedRuleGroupRuleActionOverrideActionToUse();
            _resultValue.allow = allow;
            _resultValue.block = block;
            _resultValue.captcha = captcha;
            _resultValue.challenge = challenge;
            _resultValue.count = count;
            return _resultValue;
        }
    }
}
