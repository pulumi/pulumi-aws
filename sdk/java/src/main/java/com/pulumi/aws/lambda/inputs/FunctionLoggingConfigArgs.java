// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.lambda.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FunctionLoggingConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final FunctionLoggingConfigArgs Empty = new FunctionLoggingConfigArgs();

    /**
     * for JSON structured logs, choose the detail level of the logs your application sends to CloudWatch when using supported logging libraries.
     * 
     */
    @Import(name="applicationLogLevel")
    private @Nullable Output<String> applicationLogLevel;

    /**
     * @return for JSON structured logs, choose the detail level of the logs your application sends to CloudWatch when using supported logging libraries.
     * 
     */
    public Optional<Output<String>> applicationLogLevel() {
        return Optional.ofNullable(this.applicationLogLevel);
    }

    /**
     * select between `Text` and structured `JSON` format for your function&#39;s logs.
     * 
     */
    @Import(name="logFormat", required=true)
    private Output<String> logFormat;

    /**
     * @return select between `Text` and structured `JSON` format for your function&#39;s logs.
     * 
     */
    public Output<String> logFormat() {
        return this.logFormat;
    }

    /**
     * the CloudWatch log group your function sends logs to.
     * 
     */
    @Import(name="logGroup")
    private @Nullable Output<String> logGroup;

    /**
     * @return the CloudWatch log group your function sends logs to.
     * 
     */
    public Optional<Output<String>> logGroup() {
        return Optional.ofNullable(this.logGroup);
    }

    /**
     * for JSON structured logs, choose the detail level of the Lambda platform event logs sent to CloudWatch, such as `ERROR`, `DEBUG`, or `INFO`.
     * 
     */
    @Import(name="systemLogLevel")
    private @Nullable Output<String> systemLogLevel;

    /**
     * @return for JSON structured logs, choose the detail level of the Lambda platform event logs sent to CloudWatch, such as `ERROR`, `DEBUG`, or `INFO`.
     * 
     */
    public Optional<Output<String>> systemLogLevel() {
        return Optional.ofNullable(this.systemLogLevel);
    }

    private FunctionLoggingConfigArgs() {}

    private FunctionLoggingConfigArgs(FunctionLoggingConfigArgs $) {
        this.applicationLogLevel = $.applicationLogLevel;
        this.logFormat = $.logFormat;
        this.logGroup = $.logGroup;
        this.systemLogLevel = $.systemLogLevel;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FunctionLoggingConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FunctionLoggingConfigArgs $;

        public Builder() {
            $ = new FunctionLoggingConfigArgs();
        }

        public Builder(FunctionLoggingConfigArgs defaults) {
            $ = new FunctionLoggingConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param applicationLogLevel for JSON structured logs, choose the detail level of the logs your application sends to CloudWatch when using supported logging libraries.
         * 
         * @return builder
         * 
         */
        public Builder applicationLogLevel(@Nullable Output<String> applicationLogLevel) {
            $.applicationLogLevel = applicationLogLevel;
            return this;
        }

        /**
         * @param applicationLogLevel for JSON structured logs, choose the detail level of the logs your application sends to CloudWatch when using supported logging libraries.
         * 
         * @return builder
         * 
         */
        public Builder applicationLogLevel(String applicationLogLevel) {
            return applicationLogLevel(Output.of(applicationLogLevel));
        }

        /**
         * @param logFormat select between `Text` and structured `JSON` format for your function&#39;s logs.
         * 
         * @return builder
         * 
         */
        public Builder logFormat(Output<String> logFormat) {
            $.logFormat = logFormat;
            return this;
        }

        /**
         * @param logFormat select between `Text` and structured `JSON` format for your function&#39;s logs.
         * 
         * @return builder
         * 
         */
        public Builder logFormat(String logFormat) {
            return logFormat(Output.of(logFormat));
        }

        /**
         * @param logGroup the CloudWatch log group your function sends logs to.
         * 
         * @return builder
         * 
         */
        public Builder logGroup(@Nullable Output<String> logGroup) {
            $.logGroup = logGroup;
            return this;
        }

        /**
         * @param logGroup the CloudWatch log group your function sends logs to.
         * 
         * @return builder
         * 
         */
        public Builder logGroup(String logGroup) {
            return logGroup(Output.of(logGroup));
        }

        /**
         * @param systemLogLevel for JSON structured logs, choose the detail level of the Lambda platform event logs sent to CloudWatch, such as `ERROR`, `DEBUG`, or `INFO`.
         * 
         * @return builder
         * 
         */
        public Builder systemLogLevel(@Nullable Output<String> systemLogLevel) {
            $.systemLogLevel = systemLogLevel;
            return this;
        }

        /**
         * @param systemLogLevel for JSON structured logs, choose the detail level of the Lambda platform event logs sent to CloudWatch, such as `ERROR`, `DEBUG`, or `INFO`.
         * 
         * @return builder
         * 
         */
        public Builder systemLogLevel(String systemLogLevel) {
            return systemLogLevel(Output.of(systemLogLevel));
        }

        public FunctionLoggingConfigArgs build() {
            if ($.logFormat == null) {
                throw new MissingRequiredPropertyException("FunctionLoggingConfigArgs", "logFormat");
            }
            return $;
        }
    }

}
