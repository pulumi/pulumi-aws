// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.appmesh.outputs;

import com.pulumi.aws.appmesh.outputs.GetGatewayRouteSpecHttp2RouteMatchHeader;
import com.pulumi.aws.appmesh.outputs.GetGatewayRouteSpecHttp2RouteMatchHostname;
import com.pulumi.aws.appmesh.outputs.GetGatewayRouteSpecHttp2RouteMatchPath;
import com.pulumi.aws.appmesh.outputs.GetGatewayRouteSpecHttp2RouteMatchQueryParameter;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetGatewayRouteSpecHttp2RouteMatch {
    private List<GetGatewayRouteSpecHttp2RouteMatchHeader> headers;
    private List<GetGatewayRouteSpecHttp2RouteMatchHostname> hostnames;
    private List<GetGatewayRouteSpecHttp2RouteMatchPath> paths;
    private Integer port;
    private String prefix;
    private List<GetGatewayRouteSpecHttp2RouteMatchQueryParameter> queryParameters;

    private GetGatewayRouteSpecHttp2RouteMatch() {}
    public List<GetGatewayRouteSpecHttp2RouteMatchHeader> headers() {
        return this.headers;
    }
    public List<GetGatewayRouteSpecHttp2RouteMatchHostname> hostnames() {
        return this.hostnames;
    }
    public List<GetGatewayRouteSpecHttp2RouteMatchPath> paths() {
        return this.paths;
    }
    public Integer port() {
        return this.port;
    }
    public String prefix() {
        return this.prefix;
    }
    public List<GetGatewayRouteSpecHttp2RouteMatchQueryParameter> queryParameters() {
        return this.queryParameters;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetGatewayRouteSpecHttp2RouteMatch defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetGatewayRouteSpecHttp2RouteMatchHeader> headers;
        private List<GetGatewayRouteSpecHttp2RouteMatchHostname> hostnames;
        private List<GetGatewayRouteSpecHttp2RouteMatchPath> paths;
        private Integer port;
        private String prefix;
        private List<GetGatewayRouteSpecHttp2RouteMatchQueryParameter> queryParameters;
        public Builder() {}
        public Builder(GetGatewayRouteSpecHttp2RouteMatch defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.headers = defaults.headers;
    	      this.hostnames = defaults.hostnames;
    	      this.paths = defaults.paths;
    	      this.port = defaults.port;
    	      this.prefix = defaults.prefix;
    	      this.queryParameters = defaults.queryParameters;
        }

        @CustomType.Setter
        public Builder headers(List<GetGatewayRouteSpecHttp2RouteMatchHeader> headers) {
            if (headers == null) {
              throw new MissingRequiredPropertyException("GetGatewayRouteSpecHttp2RouteMatch", "headers");
            }
            this.headers = headers;
            return this;
        }
        public Builder headers(GetGatewayRouteSpecHttp2RouteMatchHeader... headers) {
            return headers(List.of(headers));
        }
        @CustomType.Setter
        public Builder hostnames(List<GetGatewayRouteSpecHttp2RouteMatchHostname> hostnames) {
            if (hostnames == null) {
              throw new MissingRequiredPropertyException("GetGatewayRouteSpecHttp2RouteMatch", "hostnames");
            }
            this.hostnames = hostnames;
            return this;
        }
        public Builder hostnames(GetGatewayRouteSpecHttp2RouteMatchHostname... hostnames) {
            return hostnames(List.of(hostnames));
        }
        @CustomType.Setter
        public Builder paths(List<GetGatewayRouteSpecHttp2RouteMatchPath> paths) {
            if (paths == null) {
              throw new MissingRequiredPropertyException("GetGatewayRouteSpecHttp2RouteMatch", "paths");
            }
            this.paths = paths;
            return this;
        }
        public Builder paths(GetGatewayRouteSpecHttp2RouteMatchPath... paths) {
            return paths(List.of(paths));
        }
        @CustomType.Setter
        public Builder port(Integer port) {
            if (port == null) {
              throw new MissingRequiredPropertyException("GetGatewayRouteSpecHttp2RouteMatch", "port");
            }
            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder prefix(String prefix) {
            if (prefix == null) {
              throw new MissingRequiredPropertyException("GetGatewayRouteSpecHttp2RouteMatch", "prefix");
            }
            this.prefix = prefix;
            return this;
        }
        @CustomType.Setter
        public Builder queryParameters(List<GetGatewayRouteSpecHttp2RouteMatchQueryParameter> queryParameters) {
            if (queryParameters == null) {
              throw new MissingRequiredPropertyException("GetGatewayRouteSpecHttp2RouteMatch", "queryParameters");
            }
            this.queryParameters = queryParameters;
            return this;
        }
        public Builder queryParameters(GetGatewayRouteSpecHttp2RouteMatchQueryParameter... queryParameters) {
            return queryParameters(List.of(queryParameters));
        }
        public GetGatewayRouteSpecHttp2RouteMatch build() {
            final var _resultValue = new GetGatewayRouteSpecHttp2RouteMatch();
            _resultValue.headers = headers;
            _resultValue.hostnames = hostnames;
            _resultValue.paths = paths;
            _resultValue.port = port;
            _resultValue.prefix = prefix;
            _resultValue.queryParameters = queryParameters;
            return _resultValue;
        }
    }
}
