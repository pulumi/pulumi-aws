// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.appstream;

import com.pulumi.aws.appstream.inputs.StackAccessEndpointArgs;
import com.pulumi.aws.appstream.inputs.StackApplicationSettingsArgs;
import com.pulumi.aws.appstream.inputs.StackStorageConnectorArgs;
import com.pulumi.aws.appstream.inputs.StackUserSettingArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class StackArgs extends com.pulumi.resources.ResourceArgs {

    public static final StackArgs Empty = new StackArgs();

    @Import(name="accessEndpoints")
    private @Nullable Output<List<StackAccessEndpointArgs>> accessEndpoints;

    public Optional<Output<List<StackAccessEndpointArgs>>> accessEndpoints() {
        return Optional.ofNullable(this.accessEndpoints);
    }

    @Import(name="applicationSettings")
    private @Nullable Output<StackApplicationSettingsArgs> applicationSettings;

    public Optional<Output<StackApplicationSettingsArgs>> applicationSettings() {
        return Optional.ofNullable(this.applicationSettings);
    }

    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    @Import(name="embedHostDomains")
    private @Nullable Output<List<String>> embedHostDomains;

    public Optional<Output<List<String>>> embedHostDomains() {
        return Optional.ofNullable(this.embedHostDomains);
    }

    @Import(name="feedbackUrl")
    private @Nullable Output<String> feedbackUrl;

    public Optional<Output<String>> feedbackUrl() {
        return Optional.ofNullable(this.feedbackUrl);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="redirectUrl")
    private @Nullable Output<String> redirectUrl;

    public Optional<Output<String>> redirectUrl() {
        return Optional.ofNullable(this.redirectUrl);
    }

    @Import(name="storageConnectors")
    private @Nullable Output<List<StackStorageConnectorArgs>> storageConnectors;

    public Optional<Output<List<StackStorageConnectorArgs>>> storageConnectors() {
        return Optional.ofNullable(this.storageConnectors);
    }

    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="userSettings")
    private @Nullable Output<List<StackUserSettingArgs>> userSettings;

    public Optional<Output<List<StackUserSettingArgs>>> userSettings() {
        return Optional.ofNullable(this.userSettings);
    }

    private StackArgs() {}

    private StackArgs(StackArgs $) {
        this.accessEndpoints = $.accessEndpoints;
        this.applicationSettings = $.applicationSettings;
        this.description = $.description;
        this.displayName = $.displayName;
        this.embedHostDomains = $.embedHostDomains;
        this.feedbackUrl = $.feedbackUrl;
        this.name = $.name;
        this.redirectUrl = $.redirectUrl;
        this.storageConnectors = $.storageConnectors;
        this.tags = $.tags;
        this.userSettings = $.userSettings;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StackArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StackArgs $;

        public Builder() {
            $ = new StackArgs();
        }

        public Builder(StackArgs defaults) {
            $ = new StackArgs(Objects.requireNonNull(defaults));
        }

        public Builder accessEndpoints(@Nullable Output<List<StackAccessEndpointArgs>> accessEndpoints) {
            $.accessEndpoints = accessEndpoints;
            return this;
        }

        public Builder accessEndpoints(List<StackAccessEndpointArgs> accessEndpoints) {
            return accessEndpoints(Output.of(accessEndpoints));
        }

        public Builder accessEndpoints(StackAccessEndpointArgs... accessEndpoints) {
            return accessEndpoints(List.of(accessEndpoints));
        }

        public Builder applicationSettings(@Nullable Output<StackApplicationSettingsArgs> applicationSettings) {
            $.applicationSettings = applicationSettings;
            return this;
        }

        public Builder applicationSettings(StackApplicationSettingsArgs applicationSettings) {
            return applicationSettings(Output.of(applicationSettings));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        public Builder embedHostDomains(@Nullable Output<List<String>> embedHostDomains) {
            $.embedHostDomains = embedHostDomains;
            return this;
        }

        public Builder embedHostDomains(List<String> embedHostDomains) {
            return embedHostDomains(Output.of(embedHostDomains));
        }

        public Builder embedHostDomains(String... embedHostDomains) {
            return embedHostDomains(List.of(embedHostDomains));
        }

        public Builder feedbackUrl(@Nullable Output<String> feedbackUrl) {
            $.feedbackUrl = feedbackUrl;
            return this;
        }

        public Builder feedbackUrl(String feedbackUrl) {
            return feedbackUrl(Output.of(feedbackUrl));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder redirectUrl(@Nullable Output<String> redirectUrl) {
            $.redirectUrl = redirectUrl;
            return this;
        }

        public Builder redirectUrl(String redirectUrl) {
            return redirectUrl(Output.of(redirectUrl));
        }

        public Builder storageConnectors(@Nullable Output<List<StackStorageConnectorArgs>> storageConnectors) {
            $.storageConnectors = storageConnectors;
            return this;
        }

        public Builder storageConnectors(List<StackStorageConnectorArgs> storageConnectors) {
            return storageConnectors(Output.of(storageConnectors));
        }

        public Builder storageConnectors(StackStorageConnectorArgs... storageConnectors) {
            return storageConnectors(List.of(storageConnectors));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder userSettings(@Nullable Output<List<StackUserSettingArgs>> userSettings) {
            $.userSettings = userSettings;
            return this;
        }

        public Builder userSettings(List<StackUserSettingArgs> userSettings) {
            return userSettings(Output.of(userSettings));
        }

        public Builder userSettings(StackUserSettingArgs... userSettings) {
            return userSettings(List.of(userSettings));
        }

        public StackArgs build() {
            return $;
        }
    }

}
