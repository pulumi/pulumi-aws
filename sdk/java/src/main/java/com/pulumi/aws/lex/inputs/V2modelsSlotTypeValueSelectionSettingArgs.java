// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.lex.inputs;

import com.pulumi.aws.lex.inputs.V2modelsSlotTypeValueSelectionSettingAdvancedRecognitionSettingArgs;
import com.pulumi.aws.lex.inputs.V2modelsSlotTypeValueSelectionSettingRegexFilterArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class V2modelsSlotTypeValueSelectionSettingArgs extends com.pulumi.resources.ResourceArgs {

    public static final V2modelsSlotTypeValueSelectionSettingArgs Empty = new V2modelsSlotTypeValueSelectionSettingArgs();

    /**
     * Provides settings that enable advanced recognition settings for slot values. You can use this to enable using slot values as a custom vocabulary for recognizing user utterances. See [`advanced_recognition_setting` argument reference] below.
     * 
     */
    @Import(name="advancedRecognitionSettings")
    private @Nullable Output<List<V2modelsSlotTypeValueSelectionSettingAdvancedRecognitionSettingArgs>> advancedRecognitionSettings;

    /**
     * @return Provides settings that enable advanced recognition settings for slot values. You can use this to enable using slot values as a custom vocabulary for recognizing user utterances. See [`advanced_recognition_setting` argument reference] below.
     * 
     */
    public Optional<Output<List<V2modelsSlotTypeValueSelectionSettingAdvancedRecognitionSettingArgs>>> advancedRecognitionSettings() {
        return Optional.ofNullable(this.advancedRecognitionSettings);
    }

    /**
     * Used to validate the value of the slot. See [`regex_filter` argument reference] below.
     * 
     */
    @Import(name="regexFilters")
    private @Nullable Output<List<V2modelsSlotTypeValueSelectionSettingRegexFilterArgs>> regexFilters;

    /**
     * @return Used to validate the value of the slot. See [`regex_filter` argument reference] below.
     * 
     */
    public Optional<Output<List<V2modelsSlotTypeValueSelectionSettingRegexFilterArgs>>> regexFilters() {
        return Optional.ofNullable(this.regexFilters);
    }

    /**
     * Determines the slot resolution strategy that Amazon Lex uses to return slot type values. The field can be set to one of the following values: `ORIGINAL_VALUE` - Returns the value entered by the user, if the user value is similar to the slot value. `TOP_RESOLUTION` If there is a resolution list for the slot, return the first value in the resolution list as the slot type value. If there is no resolution list, null is returned. If you don&#39;t specify the valueSelectionStrategy , the default is `ORIGINAL_VALUE`. Valid values are `OriginalValue`, `TopResolution`, and `Concatenation`.
     * 
     */
    @Import(name="resolutionStrategy", required=true)
    private Output<String> resolutionStrategy;

    /**
     * @return Determines the slot resolution strategy that Amazon Lex uses to return slot type values. The field can be set to one of the following values: `ORIGINAL_VALUE` - Returns the value entered by the user, if the user value is similar to the slot value. `TOP_RESOLUTION` If there is a resolution list for the slot, return the first value in the resolution list as the slot type value. If there is no resolution list, null is returned. If you don&#39;t specify the valueSelectionStrategy , the default is `ORIGINAL_VALUE`. Valid values are `OriginalValue`, `TopResolution`, and `Concatenation`.
     * 
     */
    public Output<String> resolutionStrategy() {
        return this.resolutionStrategy;
    }

    private V2modelsSlotTypeValueSelectionSettingArgs() {}

    private V2modelsSlotTypeValueSelectionSettingArgs(V2modelsSlotTypeValueSelectionSettingArgs $) {
        this.advancedRecognitionSettings = $.advancedRecognitionSettings;
        this.regexFilters = $.regexFilters;
        this.resolutionStrategy = $.resolutionStrategy;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(V2modelsSlotTypeValueSelectionSettingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private V2modelsSlotTypeValueSelectionSettingArgs $;

        public Builder() {
            $ = new V2modelsSlotTypeValueSelectionSettingArgs();
        }

        public Builder(V2modelsSlotTypeValueSelectionSettingArgs defaults) {
            $ = new V2modelsSlotTypeValueSelectionSettingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param advancedRecognitionSettings Provides settings that enable advanced recognition settings for slot values. You can use this to enable using slot values as a custom vocabulary for recognizing user utterances. See [`advanced_recognition_setting` argument reference] below.
         * 
         * @return builder
         * 
         */
        public Builder advancedRecognitionSettings(@Nullable Output<List<V2modelsSlotTypeValueSelectionSettingAdvancedRecognitionSettingArgs>> advancedRecognitionSettings) {
            $.advancedRecognitionSettings = advancedRecognitionSettings;
            return this;
        }

        /**
         * @param advancedRecognitionSettings Provides settings that enable advanced recognition settings for slot values. You can use this to enable using slot values as a custom vocabulary for recognizing user utterances. See [`advanced_recognition_setting` argument reference] below.
         * 
         * @return builder
         * 
         */
        public Builder advancedRecognitionSettings(List<V2modelsSlotTypeValueSelectionSettingAdvancedRecognitionSettingArgs> advancedRecognitionSettings) {
            return advancedRecognitionSettings(Output.of(advancedRecognitionSettings));
        }

        /**
         * @param advancedRecognitionSettings Provides settings that enable advanced recognition settings for slot values. You can use this to enable using slot values as a custom vocabulary for recognizing user utterances. See [`advanced_recognition_setting` argument reference] below.
         * 
         * @return builder
         * 
         */
        public Builder advancedRecognitionSettings(V2modelsSlotTypeValueSelectionSettingAdvancedRecognitionSettingArgs... advancedRecognitionSettings) {
            return advancedRecognitionSettings(List.of(advancedRecognitionSettings));
        }

        /**
         * @param regexFilters Used to validate the value of the slot. See [`regex_filter` argument reference] below.
         * 
         * @return builder
         * 
         */
        public Builder regexFilters(@Nullable Output<List<V2modelsSlotTypeValueSelectionSettingRegexFilterArgs>> regexFilters) {
            $.regexFilters = regexFilters;
            return this;
        }

        /**
         * @param regexFilters Used to validate the value of the slot. See [`regex_filter` argument reference] below.
         * 
         * @return builder
         * 
         */
        public Builder regexFilters(List<V2modelsSlotTypeValueSelectionSettingRegexFilterArgs> regexFilters) {
            return regexFilters(Output.of(regexFilters));
        }

        /**
         * @param regexFilters Used to validate the value of the slot. See [`regex_filter` argument reference] below.
         * 
         * @return builder
         * 
         */
        public Builder regexFilters(V2modelsSlotTypeValueSelectionSettingRegexFilterArgs... regexFilters) {
            return regexFilters(List.of(regexFilters));
        }

        /**
         * @param resolutionStrategy Determines the slot resolution strategy that Amazon Lex uses to return slot type values. The field can be set to one of the following values: `ORIGINAL_VALUE` - Returns the value entered by the user, if the user value is similar to the slot value. `TOP_RESOLUTION` If there is a resolution list for the slot, return the first value in the resolution list as the slot type value. If there is no resolution list, null is returned. If you don&#39;t specify the valueSelectionStrategy , the default is `ORIGINAL_VALUE`. Valid values are `OriginalValue`, `TopResolution`, and `Concatenation`.
         * 
         * @return builder
         * 
         */
        public Builder resolutionStrategy(Output<String> resolutionStrategy) {
            $.resolutionStrategy = resolutionStrategy;
            return this;
        }

        /**
         * @param resolutionStrategy Determines the slot resolution strategy that Amazon Lex uses to return slot type values. The field can be set to one of the following values: `ORIGINAL_VALUE` - Returns the value entered by the user, if the user value is similar to the slot value. `TOP_RESOLUTION` If there is a resolution list for the slot, return the first value in the resolution list as the slot type value. If there is no resolution list, null is returned. If you don&#39;t specify the valueSelectionStrategy , the default is `ORIGINAL_VALUE`. Valid values are `OriginalValue`, `TopResolution`, and `Concatenation`.
         * 
         * @return builder
         * 
         */
        public Builder resolutionStrategy(String resolutionStrategy) {
            return resolutionStrategy(Output.of(resolutionStrategy));
        }

        public V2modelsSlotTypeValueSelectionSettingArgs build() {
            if ($.resolutionStrategy == null) {
                throw new MissingRequiredPropertyException("V2modelsSlotTypeValueSelectionSettingArgs", "resolutionStrategy");
            }
            return $;
        }
    }

}
