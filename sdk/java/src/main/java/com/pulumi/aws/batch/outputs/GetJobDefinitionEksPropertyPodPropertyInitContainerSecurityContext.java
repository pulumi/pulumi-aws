// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.batch.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.Objects;

@CustomType
public final class GetJobDefinitionEksPropertyPodPropertyInitContainerSecurityContext {
    /**
     * @return When this parameter is true, the container is given elevated permissions on the host container instance (similar to the root user).
     * 
     */
    private Boolean privileged;
    private Boolean readOnlyRootFileSystem;
    /**
     * @return When this parameter is specified, the container is run as the specified group ID (gid). If this parameter isn&#39;t specified, the default is the group that&#39;s specified in the image metadata.
     * 
     */
    private Integer runAsGroup;
    /**
     * @return When this parameter is specified, the container is run as a user with a uid other than 0. If this parameter isn&#39;t specified, so such rule is enforced.
     * 
     */
    private Boolean runAsNonRoot;
    /**
     * @return When this parameter is specified, the container is run as the specified user ID (uid). If this parameter isn&#39;t specified, the default is the user that&#39;s specified in the image metadata.
     * 
     */
    private Integer runAsUser;

    private GetJobDefinitionEksPropertyPodPropertyInitContainerSecurityContext() {}
    /**
     * @return When this parameter is true, the container is given elevated permissions on the host container instance (similar to the root user).
     * 
     */
    public Boolean privileged() {
        return this.privileged;
    }
    public Boolean readOnlyRootFileSystem() {
        return this.readOnlyRootFileSystem;
    }
    /**
     * @return When this parameter is specified, the container is run as the specified group ID (gid). If this parameter isn&#39;t specified, the default is the group that&#39;s specified in the image metadata.
     * 
     */
    public Integer runAsGroup() {
        return this.runAsGroup;
    }
    /**
     * @return When this parameter is specified, the container is run as a user with a uid other than 0. If this parameter isn&#39;t specified, so such rule is enforced.
     * 
     */
    public Boolean runAsNonRoot() {
        return this.runAsNonRoot;
    }
    /**
     * @return When this parameter is specified, the container is run as the specified user ID (uid). If this parameter isn&#39;t specified, the default is the user that&#39;s specified in the image metadata.
     * 
     */
    public Integer runAsUser() {
        return this.runAsUser;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetJobDefinitionEksPropertyPodPropertyInitContainerSecurityContext defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean privileged;
        private Boolean readOnlyRootFileSystem;
        private Integer runAsGroup;
        private Boolean runAsNonRoot;
        private Integer runAsUser;
        public Builder() {}
        public Builder(GetJobDefinitionEksPropertyPodPropertyInitContainerSecurityContext defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.privileged = defaults.privileged;
    	      this.readOnlyRootFileSystem = defaults.readOnlyRootFileSystem;
    	      this.runAsGroup = defaults.runAsGroup;
    	      this.runAsNonRoot = defaults.runAsNonRoot;
    	      this.runAsUser = defaults.runAsUser;
        }

        @CustomType.Setter
        public Builder privileged(Boolean privileged) {
            if (privileged == null) {
              throw new MissingRequiredPropertyException("GetJobDefinitionEksPropertyPodPropertyInitContainerSecurityContext", "privileged");
            }
            this.privileged = privileged;
            return this;
        }
        @CustomType.Setter
        public Builder readOnlyRootFileSystem(Boolean readOnlyRootFileSystem) {
            if (readOnlyRootFileSystem == null) {
              throw new MissingRequiredPropertyException("GetJobDefinitionEksPropertyPodPropertyInitContainerSecurityContext", "readOnlyRootFileSystem");
            }
            this.readOnlyRootFileSystem = readOnlyRootFileSystem;
            return this;
        }
        @CustomType.Setter
        public Builder runAsGroup(Integer runAsGroup) {
            if (runAsGroup == null) {
              throw new MissingRequiredPropertyException("GetJobDefinitionEksPropertyPodPropertyInitContainerSecurityContext", "runAsGroup");
            }
            this.runAsGroup = runAsGroup;
            return this;
        }
        @CustomType.Setter
        public Builder runAsNonRoot(Boolean runAsNonRoot) {
            if (runAsNonRoot == null) {
              throw new MissingRequiredPropertyException("GetJobDefinitionEksPropertyPodPropertyInitContainerSecurityContext", "runAsNonRoot");
            }
            this.runAsNonRoot = runAsNonRoot;
            return this;
        }
        @CustomType.Setter
        public Builder runAsUser(Integer runAsUser) {
            if (runAsUser == null) {
              throw new MissingRequiredPropertyException("GetJobDefinitionEksPropertyPodPropertyInitContainerSecurityContext", "runAsUser");
            }
            this.runAsUser = runAsUser;
            return this;
        }
        public GetJobDefinitionEksPropertyPodPropertyInitContainerSecurityContext build() {
            final var _resultValue = new GetJobDefinitionEksPropertyPodPropertyInitContainerSecurityContext();
            _resultValue.privileged = privileged;
            _resultValue.readOnlyRootFileSystem = readOnlyRootFileSystem;
            _resultValue.runAsGroup = runAsGroup;
            _resultValue.runAsNonRoot = runAsNonRoot;
            _resultValue.runAsUser = runAsUser;
            return _resultValue;
        }
    }
}
