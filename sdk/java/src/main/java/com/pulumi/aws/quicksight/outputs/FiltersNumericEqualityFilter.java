// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.outputs;

import com.pulumi.aws.quicksight.outputs.AggregationFunction;
import com.pulumi.aws.quicksight.outputs.Column;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class FiltersNumericEqualityFilter {
    private @Nullable AggregationFunction aggregationFunction;
    private Column column;
    private String filterId;
    private String matchOperator;
    private String nullOption;
    private @Nullable String parameterName;
    private @Nullable String selectAllOptions;
    private @Nullable Double value;

    private FiltersNumericEqualityFilter() {}
    public Optional<AggregationFunction> aggregationFunction() {
        return Optional.ofNullable(this.aggregationFunction);
    }
    public Column column() {
        return this.column;
    }
    public String filterId() {
        return this.filterId;
    }
    public String matchOperator() {
        return this.matchOperator;
    }
    public String nullOption() {
        return this.nullOption;
    }
    public Optional<String> parameterName() {
        return Optional.ofNullable(this.parameterName);
    }
    public Optional<String> selectAllOptions() {
        return Optional.ofNullable(this.selectAllOptions);
    }
    public Optional<Double> value() {
        return Optional.ofNullable(this.value);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FiltersNumericEqualityFilter defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable AggregationFunction aggregationFunction;
        private Column column;
        private String filterId;
        private String matchOperator;
        private String nullOption;
        private @Nullable String parameterName;
        private @Nullable String selectAllOptions;
        private @Nullable Double value;
        public Builder() {}
        public Builder(FiltersNumericEqualityFilter defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aggregationFunction = defaults.aggregationFunction;
    	      this.column = defaults.column;
    	      this.filterId = defaults.filterId;
    	      this.matchOperator = defaults.matchOperator;
    	      this.nullOption = defaults.nullOption;
    	      this.parameterName = defaults.parameterName;
    	      this.selectAllOptions = defaults.selectAllOptions;
    	      this.value = defaults.value;
        }

        @CustomType.Setter
        public Builder aggregationFunction(@Nullable AggregationFunction aggregationFunction) {

            this.aggregationFunction = aggregationFunction;
            return this;
        }
        @CustomType.Setter
        public Builder column(Column column) {
            if (column == null) {
              throw new MissingRequiredPropertyException("FiltersNumericEqualityFilter", "column");
            }
            this.column = column;
            return this;
        }
        @CustomType.Setter
        public Builder filterId(String filterId) {
            if (filterId == null) {
              throw new MissingRequiredPropertyException("FiltersNumericEqualityFilter", "filterId");
            }
            this.filterId = filterId;
            return this;
        }
        @CustomType.Setter
        public Builder matchOperator(String matchOperator) {
            if (matchOperator == null) {
              throw new MissingRequiredPropertyException("FiltersNumericEqualityFilter", "matchOperator");
            }
            this.matchOperator = matchOperator;
            return this;
        }
        @CustomType.Setter
        public Builder nullOption(String nullOption) {
            if (nullOption == null) {
              throw new MissingRequiredPropertyException("FiltersNumericEqualityFilter", "nullOption");
            }
            this.nullOption = nullOption;
            return this;
        }
        @CustomType.Setter
        public Builder parameterName(@Nullable String parameterName) {

            this.parameterName = parameterName;
            return this;
        }
        @CustomType.Setter
        public Builder selectAllOptions(@Nullable String selectAllOptions) {

            this.selectAllOptions = selectAllOptions;
            return this;
        }
        @CustomType.Setter
        public Builder value(@Nullable Double value) {

            this.value = value;
            return this;
        }
        public FiltersNumericEqualityFilter build() {
            final var _resultValue = new FiltersNumericEqualityFilter();
            _resultValue.aggregationFunction = aggregationFunction;
            _resultValue.column = column;
            _resultValue.filterId = filterId;
            _resultValue.matchOperator = matchOperator;
            _resultValue.nullOption = nullOption;
            _resultValue.parameterName = parameterName;
            _resultValue.selectAllOptions = selectAllOptions;
            _resultValue.value = value;
            return _resultValue;
        }
    }
}
