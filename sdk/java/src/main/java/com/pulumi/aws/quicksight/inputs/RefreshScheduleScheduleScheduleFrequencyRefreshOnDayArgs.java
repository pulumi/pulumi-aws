// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RefreshScheduleScheduleScheduleFrequencyRefreshOnDayArgs extends com.pulumi.resources.ResourceArgs {

    public static final RefreshScheduleScheduleScheduleFrequencyRefreshOnDayArgs Empty = new RefreshScheduleScheduleScheduleFrequencyRefreshOnDayArgs();

    /**
     * The day of the month that you want to schedule refresh on.
     * 
     */
    @Import(name="dayOfMonth")
    private @Nullable Output<String> dayOfMonth;

    /**
     * @return The day of the month that you want to schedule refresh on.
     * 
     */
    public Optional<Output<String>> dayOfMonth() {
        return Optional.ofNullable(this.dayOfMonth);
    }

    /**
     * The day of the week that you want to schedule a refresh on. Valid values are `SUNDAY`, `MONDAY`, `TUESDAY`, `WEDNESDAY`, `THURSDAY`, `FRIDAY` and `SATURDAY`.
     * 
     */
    @Import(name="dayOfWeek")
    private @Nullable Output<String> dayOfWeek;

    /**
     * @return The day of the week that you want to schedule a refresh on. Valid values are `SUNDAY`, `MONDAY`, `TUESDAY`, `WEDNESDAY`, `THURSDAY`, `FRIDAY` and `SATURDAY`.
     * 
     */
    public Optional<Output<String>> dayOfWeek() {
        return Optional.ofNullable(this.dayOfWeek);
    }

    private RefreshScheduleScheduleScheduleFrequencyRefreshOnDayArgs() {}

    private RefreshScheduleScheduleScheduleFrequencyRefreshOnDayArgs(RefreshScheduleScheduleScheduleFrequencyRefreshOnDayArgs $) {
        this.dayOfMonth = $.dayOfMonth;
        this.dayOfWeek = $.dayOfWeek;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RefreshScheduleScheduleScheduleFrequencyRefreshOnDayArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RefreshScheduleScheduleScheduleFrequencyRefreshOnDayArgs $;

        public Builder() {
            $ = new RefreshScheduleScheduleScheduleFrequencyRefreshOnDayArgs();
        }

        public Builder(RefreshScheduleScheduleScheduleFrequencyRefreshOnDayArgs defaults) {
            $ = new RefreshScheduleScheduleScheduleFrequencyRefreshOnDayArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dayOfMonth The day of the month that you want to schedule refresh on.
         * 
         * @return builder
         * 
         */
        public Builder dayOfMonth(@Nullable Output<String> dayOfMonth) {
            $.dayOfMonth = dayOfMonth;
            return this;
        }

        /**
         * @param dayOfMonth The day of the month that you want to schedule refresh on.
         * 
         * @return builder
         * 
         */
        public Builder dayOfMonth(String dayOfMonth) {
            return dayOfMonth(Output.of(dayOfMonth));
        }

        /**
         * @param dayOfWeek The day of the week that you want to schedule a refresh on. Valid values are `SUNDAY`, `MONDAY`, `TUESDAY`, `WEDNESDAY`, `THURSDAY`, `FRIDAY` and `SATURDAY`.
         * 
         * @return builder
         * 
         */
        public Builder dayOfWeek(@Nullable Output<String> dayOfWeek) {
            $.dayOfWeek = dayOfWeek;
            return this;
        }

        /**
         * @param dayOfWeek The day of the week that you want to schedule a refresh on. Valid values are `SUNDAY`, `MONDAY`, `TUESDAY`, `WEDNESDAY`, `THURSDAY`, `FRIDAY` and `SATURDAY`.
         * 
         * @return builder
         * 
         */
        public Builder dayOfWeek(String dayOfWeek) {
            return dayOfWeek(Output.of(dayOfWeek));
        }

        public RefreshScheduleScheduleScheduleFrequencyRefreshOnDayArgs build() {
            return $;
        }
    }

}
