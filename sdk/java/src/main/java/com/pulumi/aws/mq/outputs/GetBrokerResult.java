// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.mq.outputs;

import com.pulumi.aws.mq.outputs.GetBrokerConfiguration;
import com.pulumi.aws.mq.outputs.GetBrokerEncryptionOption;
import com.pulumi.aws.mq.outputs.GetBrokerInstance;
import com.pulumi.aws.mq.outputs.GetBrokerLdapServerMetadata;
import com.pulumi.aws.mq.outputs.GetBrokerLogs;
import com.pulumi.aws.mq.outputs.GetBrokerMaintenanceWindowStartTime;
import com.pulumi.aws.mq.outputs.GetBrokerUser;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetBrokerResult {
    private String arn;
    private String authenticationStrategy;
    private Boolean autoMinorVersionUpgrade;
    private String brokerId;
    private String brokerName;
    private GetBrokerConfiguration configuration;
    private String deploymentMode;
    private List<GetBrokerEncryptionOption> encryptionOptions;
    private String engineType;
    private String engineVersion;
    private String hostInstanceType;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private List<GetBrokerInstance> instances;
    private List<GetBrokerLdapServerMetadata> ldapServerMetadatas;
    private GetBrokerLogs logs;
    private GetBrokerMaintenanceWindowStartTime maintenanceWindowStartTime;
    private Boolean publiclyAccessible;
    private List<String> securityGroups;
    private String storageType;
    private List<String> subnetIds;
    private Map<String,String> tags;
    private List<GetBrokerUser> users;

    private GetBrokerResult() {}
    public String arn() {
        return this.arn;
    }
    public String authenticationStrategy() {
        return this.authenticationStrategy;
    }
    public Boolean autoMinorVersionUpgrade() {
        return this.autoMinorVersionUpgrade;
    }
    public String brokerId() {
        return this.brokerId;
    }
    public String brokerName() {
        return this.brokerName;
    }
    public GetBrokerConfiguration configuration() {
        return this.configuration;
    }
    public String deploymentMode() {
        return this.deploymentMode;
    }
    public List<GetBrokerEncryptionOption> encryptionOptions() {
        return this.encryptionOptions;
    }
    public String engineType() {
        return this.engineType;
    }
    public String engineVersion() {
        return this.engineVersion;
    }
    public String hostInstanceType() {
        return this.hostInstanceType;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public List<GetBrokerInstance> instances() {
        return this.instances;
    }
    public List<GetBrokerLdapServerMetadata> ldapServerMetadatas() {
        return this.ldapServerMetadatas;
    }
    public GetBrokerLogs logs() {
        return this.logs;
    }
    public GetBrokerMaintenanceWindowStartTime maintenanceWindowStartTime() {
        return this.maintenanceWindowStartTime;
    }
    public Boolean publiclyAccessible() {
        return this.publiclyAccessible;
    }
    public List<String> securityGroups() {
        return this.securityGroups;
    }
    public String storageType() {
        return this.storageType;
    }
    public List<String> subnetIds() {
        return this.subnetIds;
    }
    public Map<String,String> tags() {
        return this.tags;
    }
    public List<GetBrokerUser> users() {
        return this.users;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBrokerResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String arn;
        private String authenticationStrategy;
        private Boolean autoMinorVersionUpgrade;
        private String brokerId;
        private String brokerName;
        private GetBrokerConfiguration configuration;
        private String deploymentMode;
        private List<GetBrokerEncryptionOption> encryptionOptions;
        private String engineType;
        private String engineVersion;
        private String hostInstanceType;
        private String id;
        private List<GetBrokerInstance> instances;
        private List<GetBrokerLdapServerMetadata> ldapServerMetadatas;
        private GetBrokerLogs logs;
        private GetBrokerMaintenanceWindowStartTime maintenanceWindowStartTime;
        private Boolean publiclyAccessible;
        private List<String> securityGroups;
        private String storageType;
        private List<String> subnetIds;
        private Map<String,String> tags;
        private List<GetBrokerUser> users;
        public Builder() {}
        public Builder(GetBrokerResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.authenticationStrategy = defaults.authenticationStrategy;
    	      this.autoMinorVersionUpgrade = defaults.autoMinorVersionUpgrade;
    	      this.brokerId = defaults.brokerId;
    	      this.brokerName = defaults.brokerName;
    	      this.configuration = defaults.configuration;
    	      this.deploymentMode = defaults.deploymentMode;
    	      this.encryptionOptions = defaults.encryptionOptions;
    	      this.engineType = defaults.engineType;
    	      this.engineVersion = defaults.engineVersion;
    	      this.hostInstanceType = defaults.hostInstanceType;
    	      this.id = defaults.id;
    	      this.instances = defaults.instances;
    	      this.ldapServerMetadatas = defaults.ldapServerMetadatas;
    	      this.logs = defaults.logs;
    	      this.maintenanceWindowStartTime = defaults.maintenanceWindowStartTime;
    	      this.publiclyAccessible = defaults.publiclyAccessible;
    	      this.securityGroups = defaults.securityGroups;
    	      this.storageType = defaults.storageType;
    	      this.subnetIds = defaults.subnetIds;
    	      this.tags = defaults.tags;
    	      this.users = defaults.users;
        }

        @CustomType.Setter
        public Builder arn(String arn) {
            if (arn == null) {
              throw new MissingRequiredPropertyException("GetBrokerResult", "arn");
            }
            this.arn = arn;
            return this;
        }
        @CustomType.Setter
        public Builder authenticationStrategy(String authenticationStrategy) {
            if (authenticationStrategy == null) {
              throw new MissingRequiredPropertyException("GetBrokerResult", "authenticationStrategy");
            }
            this.authenticationStrategy = authenticationStrategy;
            return this;
        }
        @CustomType.Setter
        public Builder autoMinorVersionUpgrade(Boolean autoMinorVersionUpgrade) {
            if (autoMinorVersionUpgrade == null) {
              throw new MissingRequiredPropertyException("GetBrokerResult", "autoMinorVersionUpgrade");
            }
            this.autoMinorVersionUpgrade = autoMinorVersionUpgrade;
            return this;
        }
        @CustomType.Setter
        public Builder brokerId(String brokerId) {
            if (brokerId == null) {
              throw new MissingRequiredPropertyException("GetBrokerResult", "brokerId");
            }
            this.brokerId = brokerId;
            return this;
        }
        @CustomType.Setter
        public Builder brokerName(String brokerName) {
            if (brokerName == null) {
              throw new MissingRequiredPropertyException("GetBrokerResult", "brokerName");
            }
            this.brokerName = brokerName;
            return this;
        }
        @CustomType.Setter
        public Builder configuration(GetBrokerConfiguration configuration) {
            if (configuration == null) {
              throw new MissingRequiredPropertyException("GetBrokerResult", "configuration");
            }
            this.configuration = configuration;
            return this;
        }
        @CustomType.Setter
        public Builder deploymentMode(String deploymentMode) {
            if (deploymentMode == null) {
              throw new MissingRequiredPropertyException("GetBrokerResult", "deploymentMode");
            }
            this.deploymentMode = deploymentMode;
            return this;
        }
        @CustomType.Setter
        public Builder encryptionOptions(List<GetBrokerEncryptionOption> encryptionOptions) {
            if (encryptionOptions == null) {
              throw new MissingRequiredPropertyException("GetBrokerResult", "encryptionOptions");
            }
            this.encryptionOptions = encryptionOptions;
            return this;
        }
        public Builder encryptionOptions(GetBrokerEncryptionOption... encryptionOptions) {
            return encryptionOptions(List.of(encryptionOptions));
        }
        @CustomType.Setter
        public Builder engineType(String engineType) {
            if (engineType == null) {
              throw new MissingRequiredPropertyException("GetBrokerResult", "engineType");
            }
            this.engineType = engineType;
            return this;
        }
        @CustomType.Setter
        public Builder engineVersion(String engineVersion) {
            if (engineVersion == null) {
              throw new MissingRequiredPropertyException("GetBrokerResult", "engineVersion");
            }
            this.engineVersion = engineVersion;
            return this;
        }
        @CustomType.Setter
        public Builder hostInstanceType(String hostInstanceType) {
            if (hostInstanceType == null) {
              throw new MissingRequiredPropertyException("GetBrokerResult", "hostInstanceType");
            }
            this.hostInstanceType = hostInstanceType;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetBrokerResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder instances(List<GetBrokerInstance> instances) {
            if (instances == null) {
              throw new MissingRequiredPropertyException("GetBrokerResult", "instances");
            }
            this.instances = instances;
            return this;
        }
        public Builder instances(GetBrokerInstance... instances) {
            return instances(List.of(instances));
        }
        @CustomType.Setter
        public Builder ldapServerMetadatas(List<GetBrokerLdapServerMetadata> ldapServerMetadatas) {
            if (ldapServerMetadatas == null) {
              throw new MissingRequiredPropertyException("GetBrokerResult", "ldapServerMetadatas");
            }
            this.ldapServerMetadatas = ldapServerMetadatas;
            return this;
        }
        public Builder ldapServerMetadatas(GetBrokerLdapServerMetadata... ldapServerMetadatas) {
            return ldapServerMetadatas(List.of(ldapServerMetadatas));
        }
        @CustomType.Setter
        public Builder logs(GetBrokerLogs logs) {
            if (logs == null) {
              throw new MissingRequiredPropertyException("GetBrokerResult", "logs");
            }
            this.logs = logs;
            return this;
        }
        @CustomType.Setter
        public Builder maintenanceWindowStartTime(GetBrokerMaintenanceWindowStartTime maintenanceWindowStartTime) {
            if (maintenanceWindowStartTime == null) {
              throw new MissingRequiredPropertyException("GetBrokerResult", "maintenanceWindowStartTime");
            }
            this.maintenanceWindowStartTime = maintenanceWindowStartTime;
            return this;
        }
        @CustomType.Setter
        public Builder publiclyAccessible(Boolean publiclyAccessible) {
            if (publiclyAccessible == null) {
              throw new MissingRequiredPropertyException("GetBrokerResult", "publiclyAccessible");
            }
            this.publiclyAccessible = publiclyAccessible;
            return this;
        }
        @CustomType.Setter
        public Builder securityGroups(List<String> securityGroups) {
            if (securityGroups == null) {
              throw new MissingRequiredPropertyException("GetBrokerResult", "securityGroups");
            }
            this.securityGroups = securityGroups;
            return this;
        }
        public Builder securityGroups(String... securityGroups) {
            return securityGroups(List.of(securityGroups));
        }
        @CustomType.Setter
        public Builder storageType(String storageType) {
            if (storageType == null) {
              throw new MissingRequiredPropertyException("GetBrokerResult", "storageType");
            }
            this.storageType = storageType;
            return this;
        }
        @CustomType.Setter
        public Builder subnetIds(List<String> subnetIds) {
            if (subnetIds == null) {
              throw new MissingRequiredPropertyException("GetBrokerResult", "subnetIds");
            }
            this.subnetIds = subnetIds;
            return this;
        }
        public Builder subnetIds(String... subnetIds) {
            return subnetIds(List.of(subnetIds));
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetBrokerResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder users(List<GetBrokerUser> users) {
            if (users == null) {
              throw new MissingRequiredPropertyException("GetBrokerResult", "users");
            }
            this.users = users;
            return this;
        }
        public Builder users(GetBrokerUser... users) {
            return users(List.of(users));
        }
        public GetBrokerResult build() {
            final var _resultValue = new GetBrokerResult();
            _resultValue.arn = arn;
            _resultValue.authenticationStrategy = authenticationStrategy;
            _resultValue.autoMinorVersionUpgrade = autoMinorVersionUpgrade;
            _resultValue.brokerId = brokerId;
            _resultValue.brokerName = brokerName;
            _resultValue.configuration = configuration;
            _resultValue.deploymentMode = deploymentMode;
            _resultValue.encryptionOptions = encryptionOptions;
            _resultValue.engineType = engineType;
            _resultValue.engineVersion = engineVersion;
            _resultValue.hostInstanceType = hostInstanceType;
            _resultValue.id = id;
            _resultValue.instances = instances;
            _resultValue.ldapServerMetadatas = ldapServerMetadatas;
            _resultValue.logs = logs;
            _resultValue.maintenanceWindowStartTime = maintenanceWindowStartTime;
            _resultValue.publiclyAccessible = publiclyAccessible;
            _resultValue.securityGroups = securityGroups;
            _resultValue.storageType = storageType;
            _resultValue.subnetIds = subnetIds;
            _resultValue.tags = tags;
            _resultValue.users = users;
            return _resultValue;
        }
    }
}
