// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.outputs;

import com.pulumi.aws.quicksight.outputs.DecimalParameterDeclarationDefaultValues;
import com.pulumi.aws.quicksight.outputs.DecimalParameterDeclarationValuesWhenUnset;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DecimalParameterDeclaration {
    private @Nullable DecimalParameterDeclarationDefaultValues defaultValues;
    /**
     * @return Display name for the dashboard.
     * 
     */
    private String name;
    private String parameterValueType;
    private @Nullable DecimalParameterDeclarationValuesWhenUnset valuesWhenUnset;

    private DecimalParameterDeclaration() {}
    public Optional<DecimalParameterDeclarationDefaultValues> defaultValues() {
        return Optional.ofNullable(this.defaultValues);
    }
    /**
     * @return Display name for the dashboard.
     * 
     */
    public String name() {
        return this.name;
    }
    public String parameterValueType() {
        return this.parameterValueType;
    }
    public Optional<DecimalParameterDeclarationValuesWhenUnset> valuesWhenUnset() {
        return Optional.ofNullable(this.valuesWhenUnset);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DecimalParameterDeclaration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable DecimalParameterDeclarationDefaultValues defaultValues;
        private String name;
        private String parameterValueType;
        private @Nullable DecimalParameterDeclarationValuesWhenUnset valuesWhenUnset;
        public Builder() {}
        public Builder(DecimalParameterDeclaration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.defaultValues = defaults.defaultValues;
    	      this.name = defaults.name;
    	      this.parameterValueType = defaults.parameterValueType;
    	      this.valuesWhenUnset = defaults.valuesWhenUnset;
        }

        @CustomType.Setter
        public Builder defaultValues(@Nullable DecimalParameterDeclarationDefaultValues defaultValues) {

            this.defaultValues = defaultValues;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("DecimalParameterDeclaration", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder parameterValueType(String parameterValueType) {
            if (parameterValueType == null) {
              throw new MissingRequiredPropertyException("DecimalParameterDeclaration", "parameterValueType");
            }
            this.parameterValueType = parameterValueType;
            return this;
        }
        @CustomType.Setter
        public Builder valuesWhenUnset(@Nullable DecimalParameterDeclarationValuesWhenUnset valuesWhenUnset) {

            this.valuesWhenUnset = valuesWhenUnset;
            return this;
        }
        public DecimalParameterDeclaration build() {
            final var _resultValue = new DecimalParameterDeclaration();
            _resultValue.defaultValues = defaultValues;
            _resultValue.name = name;
            _resultValue.parameterValueType = parameterValueType;
            _resultValue.valuesWhenUnset = valuesWhenUnset;
            return _resultValue;
        }
    }
}
