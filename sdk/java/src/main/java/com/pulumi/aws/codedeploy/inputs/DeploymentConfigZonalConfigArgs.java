// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.codedeploy.inputs;

import com.pulumi.aws.codedeploy.inputs.DeploymentConfigZonalConfigMinimumHealthyHostsPerZoneArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DeploymentConfigZonalConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final DeploymentConfigZonalConfigArgs Empty = new DeploymentConfigZonalConfigArgs();

    /**
     * The period of time, in seconds, that CodeDeploy must wait after completing a deployment to the first Availability Zone. CodeDeploy will wait this amount of time before starting a deployment to the second Availability Zone. If you don&#39;t specify a value for `first_zone_monitor_duration_in_seconds`, then CodeDeploy uses the `monitor_duration_in_seconds` value for the first Availability Zone.
     * 
     */
    @Import(name="firstZoneMonitorDurationInSeconds")
    private @Nullable Output<Integer> firstZoneMonitorDurationInSeconds;

    /**
     * @return The period of time, in seconds, that CodeDeploy must wait after completing a deployment to the first Availability Zone. CodeDeploy will wait this amount of time before starting a deployment to the second Availability Zone. If you don&#39;t specify a value for `first_zone_monitor_duration_in_seconds`, then CodeDeploy uses the `monitor_duration_in_seconds` value for the first Availability Zone.
     * 
     */
    public Optional<Output<Integer>> firstZoneMonitorDurationInSeconds() {
        return Optional.ofNullable(this.firstZoneMonitorDurationInSeconds);
    }

    /**
     * The number or percentage of instances that must remain available per Availability Zone during a deployment. If you don&#39;t specify a value under `minimum_healthy_hosts_per_zone`, then CodeDeploy uses a default value of 0 percent. This block is more documented below.
     * 
     */
    @Import(name="minimumHealthyHostsPerZone")
    private @Nullable Output<DeploymentConfigZonalConfigMinimumHealthyHostsPerZoneArgs> minimumHealthyHostsPerZone;

    /**
     * @return The number or percentage of instances that must remain available per Availability Zone during a deployment. If you don&#39;t specify a value under `minimum_healthy_hosts_per_zone`, then CodeDeploy uses a default value of 0 percent. This block is more documented below.
     * 
     */
    public Optional<Output<DeploymentConfigZonalConfigMinimumHealthyHostsPerZoneArgs>> minimumHealthyHostsPerZone() {
        return Optional.ofNullable(this.minimumHealthyHostsPerZone);
    }

    /**
     * The period of time, in seconds, that CodeDeploy must wait after completing a deployment to an Availability Zone. CodeDeploy will wait this amount of time before starting a deployment to the next Availability Zone. If you don&#39;t specify a `monitor_duration_in_seconds`, CodeDeploy starts deploying to the next Availability Zone immediately.
     * 
     */
    @Import(name="monitorDurationInSeconds")
    private @Nullable Output<Integer> monitorDurationInSeconds;

    /**
     * @return The period of time, in seconds, that CodeDeploy must wait after completing a deployment to an Availability Zone. CodeDeploy will wait this amount of time before starting a deployment to the next Availability Zone. If you don&#39;t specify a `monitor_duration_in_seconds`, CodeDeploy starts deploying to the next Availability Zone immediately.
     * 
     */
    public Optional<Output<Integer>> monitorDurationInSeconds() {
        return Optional.ofNullable(this.monitorDurationInSeconds);
    }

    private DeploymentConfigZonalConfigArgs() {}

    private DeploymentConfigZonalConfigArgs(DeploymentConfigZonalConfigArgs $) {
        this.firstZoneMonitorDurationInSeconds = $.firstZoneMonitorDurationInSeconds;
        this.minimumHealthyHostsPerZone = $.minimumHealthyHostsPerZone;
        this.monitorDurationInSeconds = $.monitorDurationInSeconds;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DeploymentConfigZonalConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DeploymentConfigZonalConfigArgs $;

        public Builder() {
            $ = new DeploymentConfigZonalConfigArgs();
        }

        public Builder(DeploymentConfigZonalConfigArgs defaults) {
            $ = new DeploymentConfigZonalConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param firstZoneMonitorDurationInSeconds The period of time, in seconds, that CodeDeploy must wait after completing a deployment to the first Availability Zone. CodeDeploy will wait this amount of time before starting a deployment to the second Availability Zone. If you don&#39;t specify a value for `first_zone_monitor_duration_in_seconds`, then CodeDeploy uses the `monitor_duration_in_seconds` value for the first Availability Zone.
         * 
         * @return builder
         * 
         */
        public Builder firstZoneMonitorDurationInSeconds(@Nullable Output<Integer> firstZoneMonitorDurationInSeconds) {
            $.firstZoneMonitorDurationInSeconds = firstZoneMonitorDurationInSeconds;
            return this;
        }

        /**
         * @param firstZoneMonitorDurationInSeconds The period of time, in seconds, that CodeDeploy must wait after completing a deployment to the first Availability Zone. CodeDeploy will wait this amount of time before starting a deployment to the second Availability Zone. If you don&#39;t specify a value for `first_zone_monitor_duration_in_seconds`, then CodeDeploy uses the `monitor_duration_in_seconds` value for the first Availability Zone.
         * 
         * @return builder
         * 
         */
        public Builder firstZoneMonitorDurationInSeconds(Integer firstZoneMonitorDurationInSeconds) {
            return firstZoneMonitorDurationInSeconds(Output.of(firstZoneMonitorDurationInSeconds));
        }

        /**
         * @param minimumHealthyHostsPerZone The number or percentage of instances that must remain available per Availability Zone during a deployment. If you don&#39;t specify a value under `minimum_healthy_hosts_per_zone`, then CodeDeploy uses a default value of 0 percent. This block is more documented below.
         * 
         * @return builder
         * 
         */
        public Builder minimumHealthyHostsPerZone(@Nullable Output<DeploymentConfigZonalConfigMinimumHealthyHostsPerZoneArgs> minimumHealthyHostsPerZone) {
            $.minimumHealthyHostsPerZone = minimumHealthyHostsPerZone;
            return this;
        }

        /**
         * @param minimumHealthyHostsPerZone The number or percentage of instances that must remain available per Availability Zone during a deployment. If you don&#39;t specify a value under `minimum_healthy_hosts_per_zone`, then CodeDeploy uses a default value of 0 percent. This block is more documented below.
         * 
         * @return builder
         * 
         */
        public Builder minimumHealthyHostsPerZone(DeploymentConfigZonalConfigMinimumHealthyHostsPerZoneArgs minimumHealthyHostsPerZone) {
            return minimumHealthyHostsPerZone(Output.of(minimumHealthyHostsPerZone));
        }

        /**
         * @param monitorDurationInSeconds The period of time, in seconds, that CodeDeploy must wait after completing a deployment to an Availability Zone. CodeDeploy will wait this amount of time before starting a deployment to the next Availability Zone. If you don&#39;t specify a `monitor_duration_in_seconds`, CodeDeploy starts deploying to the next Availability Zone immediately.
         * 
         * @return builder
         * 
         */
        public Builder monitorDurationInSeconds(@Nullable Output<Integer> monitorDurationInSeconds) {
            $.monitorDurationInSeconds = monitorDurationInSeconds;
            return this;
        }

        /**
         * @param monitorDurationInSeconds The period of time, in seconds, that CodeDeploy must wait after completing a deployment to an Availability Zone. CodeDeploy will wait this amount of time before starting a deployment to the next Availability Zone. If you don&#39;t specify a `monitor_duration_in_seconds`, CodeDeploy starts deploying to the next Availability Zone immediately.
         * 
         * @return builder
         * 
         */
        public Builder monitorDurationInSeconds(Integer monitorDurationInSeconds) {
            return monitorDurationInSeconds(Output.of(monitorDurationInSeconds));
        }

        public DeploymentConfigZonalConfigArgs build() {
            return $;
        }
    }

}
