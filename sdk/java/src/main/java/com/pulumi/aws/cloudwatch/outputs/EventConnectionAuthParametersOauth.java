// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.cloudwatch.outputs;

import com.pulumi.aws.cloudwatch.outputs.EventConnectionAuthParametersOauthClientParameters;
import com.pulumi.aws.cloudwatch.outputs.EventConnectionAuthParametersOauthOauthHttpParameters;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class EventConnectionAuthParametersOauth {
    /**
     * @return The URL to the authorization endpoint.
     * 
     */
    private String authorizationEndpoint;
    /**
     * @return Contains the client parameters for OAuth authorization. Contains the following two parameters.
     * 
     */
    private @Nullable EventConnectionAuthParametersOauthClientParameters clientParameters;
    /**
     * @return A password for the authorization. Created and stored in AWS Secrets Manager.
     * 
     */
    private String httpMethod;
    /**
     * @return OAuth Http Parameters are additional credentials used to sign the request to the authorization endpoint to exchange the OAuth Client information for an access token. Secret values are stored and managed by AWS Secrets Manager. A maximum of 1 are allowed. Documented below.
     * 
     */
    private EventConnectionAuthParametersOauthOauthHttpParameters oauthHttpParameters;

    private EventConnectionAuthParametersOauth() {}
    /**
     * @return The URL to the authorization endpoint.
     * 
     */
    public String authorizationEndpoint() {
        return this.authorizationEndpoint;
    }
    /**
     * @return Contains the client parameters for OAuth authorization. Contains the following two parameters.
     * 
     */
    public Optional<EventConnectionAuthParametersOauthClientParameters> clientParameters() {
        return Optional.ofNullable(this.clientParameters);
    }
    /**
     * @return A password for the authorization. Created and stored in AWS Secrets Manager.
     * 
     */
    public String httpMethod() {
        return this.httpMethod;
    }
    /**
     * @return OAuth Http Parameters are additional credentials used to sign the request to the authorization endpoint to exchange the OAuth Client information for an access token. Secret values are stored and managed by AWS Secrets Manager. A maximum of 1 are allowed. Documented below.
     * 
     */
    public EventConnectionAuthParametersOauthOauthHttpParameters oauthHttpParameters() {
        return this.oauthHttpParameters;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EventConnectionAuthParametersOauth defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String authorizationEndpoint;
        private @Nullable EventConnectionAuthParametersOauthClientParameters clientParameters;
        private String httpMethod;
        private EventConnectionAuthParametersOauthOauthHttpParameters oauthHttpParameters;
        public Builder() {}
        public Builder(EventConnectionAuthParametersOauth defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authorizationEndpoint = defaults.authorizationEndpoint;
    	      this.clientParameters = defaults.clientParameters;
    	      this.httpMethod = defaults.httpMethod;
    	      this.oauthHttpParameters = defaults.oauthHttpParameters;
        }

        @CustomType.Setter
        public Builder authorizationEndpoint(String authorizationEndpoint) {
            if (authorizationEndpoint == null) {
              throw new MissingRequiredPropertyException("EventConnectionAuthParametersOauth", "authorizationEndpoint");
            }
            this.authorizationEndpoint = authorizationEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder clientParameters(@Nullable EventConnectionAuthParametersOauthClientParameters clientParameters) {

            this.clientParameters = clientParameters;
            return this;
        }
        @CustomType.Setter
        public Builder httpMethod(String httpMethod) {
            if (httpMethod == null) {
              throw new MissingRequiredPropertyException("EventConnectionAuthParametersOauth", "httpMethod");
            }
            this.httpMethod = httpMethod;
            return this;
        }
        @CustomType.Setter
        public Builder oauthHttpParameters(EventConnectionAuthParametersOauthOauthHttpParameters oauthHttpParameters) {
            if (oauthHttpParameters == null) {
              throw new MissingRequiredPropertyException("EventConnectionAuthParametersOauth", "oauthHttpParameters");
            }
            this.oauthHttpParameters = oauthHttpParameters;
            return this;
        }
        public EventConnectionAuthParametersOauth build() {
            final var _resultValue = new EventConnectionAuthParametersOauth();
            _resultValue.authorizationEndpoint = authorizationEndpoint;
            _resultValue.clientParameters = clientParameters;
            _resultValue.httpMethod = httpMethod;
            _resultValue.oauthHttpParameters = oauthHttpParameters;
            return _resultValue;
        }
    }
}
