// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.transfer.outputs;

import com.pulumi.aws.transfer.outputs.GetConnectorAs2Config;
import com.pulumi.aws.transfer.outputs.GetConnectorSftpConfig;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetConnectorResult {
    /**
     * @return ARN of the AWS Identity and Access Management role.
     * 
     */
    private String accessRole;
    /**
     * @return ARN of the Connector.
     * 
     */
    private String arn;
    /**
     * @return Structure containing the parameters for an AS2 connector object. Contains the following attributes:
     * 
     */
    private List<GetConnectorAs2Config> as2Configs;
    private String id;
    /**
     * @return ARN of the IAM role that allows a connector to turn on CLoudwatch logging for Amazon S3 events.
     * 
     */
    private String loggingRole;
    /**
     * @return Name of security policy.
     * 
     */
    private String securityPolicyName;
    /**
     * @return List of egress Ip addresses.
     * 
     */
    private List<String> serviceManagedEgressIpAddresses;
    /**
     * @return Object containing the following attributes:
     * 
     */
    private List<GetConnectorSftpConfig> sftpConfigs;
    /**
     * @return Object containing the following attributes:
     * 
     */
    private Map<String,String> tags;
    /**
     * @return URL of the partner&#39;s AS2 or SFTP endpoint.
     * 
     */
    private String url;

    private GetConnectorResult() {}
    /**
     * @return ARN of the AWS Identity and Access Management role.
     * 
     */
    public String accessRole() {
        return this.accessRole;
    }
    /**
     * @return ARN of the Connector.
     * 
     */
    public String arn() {
        return this.arn;
    }
    /**
     * @return Structure containing the parameters for an AS2 connector object. Contains the following attributes:
     * 
     */
    public List<GetConnectorAs2Config> as2Configs() {
        return this.as2Configs;
    }
    public String id() {
        return this.id;
    }
    /**
     * @return ARN of the IAM role that allows a connector to turn on CLoudwatch logging for Amazon S3 events.
     * 
     */
    public String loggingRole() {
        return this.loggingRole;
    }
    /**
     * @return Name of security policy.
     * 
     */
    public String securityPolicyName() {
        return this.securityPolicyName;
    }
    /**
     * @return List of egress Ip addresses.
     * 
     */
    public List<String> serviceManagedEgressIpAddresses() {
        return this.serviceManagedEgressIpAddresses;
    }
    /**
     * @return Object containing the following attributes:
     * 
     */
    public List<GetConnectorSftpConfig> sftpConfigs() {
        return this.sftpConfigs;
    }
    /**
     * @return Object containing the following attributes:
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }
    /**
     * @return URL of the partner&#39;s AS2 or SFTP endpoint.
     * 
     */
    public String url() {
        return this.url;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetConnectorResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accessRole;
        private String arn;
        private List<GetConnectorAs2Config> as2Configs;
        private String id;
        private String loggingRole;
        private String securityPolicyName;
        private List<String> serviceManagedEgressIpAddresses;
        private List<GetConnectorSftpConfig> sftpConfigs;
        private Map<String,String> tags;
        private String url;
        public Builder() {}
        public Builder(GetConnectorResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessRole = defaults.accessRole;
    	      this.arn = defaults.arn;
    	      this.as2Configs = defaults.as2Configs;
    	      this.id = defaults.id;
    	      this.loggingRole = defaults.loggingRole;
    	      this.securityPolicyName = defaults.securityPolicyName;
    	      this.serviceManagedEgressIpAddresses = defaults.serviceManagedEgressIpAddresses;
    	      this.sftpConfigs = defaults.sftpConfigs;
    	      this.tags = defaults.tags;
    	      this.url = defaults.url;
        }

        @CustomType.Setter
        public Builder accessRole(String accessRole) {
            if (accessRole == null) {
              throw new MissingRequiredPropertyException("GetConnectorResult", "accessRole");
            }
            this.accessRole = accessRole;
            return this;
        }
        @CustomType.Setter
        public Builder arn(String arn) {
            if (arn == null) {
              throw new MissingRequiredPropertyException("GetConnectorResult", "arn");
            }
            this.arn = arn;
            return this;
        }
        @CustomType.Setter
        public Builder as2Configs(List<GetConnectorAs2Config> as2Configs) {
            if (as2Configs == null) {
              throw new MissingRequiredPropertyException("GetConnectorResult", "as2Configs");
            }
            this.as2Configs = as2Configs;
            return this;
        }
        public Builder as2Configs(GetConnectorAs2Config... as2Configs) {
            return as2Configs(List.of(as2Configs));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetConnectorResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder loggingRole(String loggingRole) {
            if (loggingRole == null) {
              throw new MissingRequiredPropertyException("GetConnectorResult", "loggingRole");
            }
            this.loggingRole = loggingRole;
            return this;
        }
        @CustomType.Setter
        public Builder securityPolicyName(String securityPolicyName) {
            if (securityPolicyName == null) {
              throw new MissingRequiredPropertyException("GetConnectorResult", "securityPolicyName");
            }
            this.securityPolicyName = securityPolicyName;
            return this;
        }
        @CustomType.Setter
        public Builder serviceManagedEgressIpAddresses(List<String> serviceManagedEgressIpAddresses) {
            if (serviceManagedEgressIpAddresses == null) {
              throw new MissingRequiredPropertyException("GetConnectorResult", "serviceManagedEgressIpAddresses");
            }
            this.serviceManagedEgressIpAddresses = serviceManagedEgressIpAddresses;
            return this;
        }
        public Builder serviceManagedEgressIpAddresses(String... serviceManagedEgressIpAddresses) {
            return serviceManagedEgressIpAddresses(List.of(serviceManagedEgressIpAddresses));
        }
        @CustomType.Setter
        public Builder sftpConfigs(List<GetConnectorSftpConfig> sftpConfigs) {
            if (sftpConfigs == null) {
              throw new MissingRequiredPropertyException("GetConnectorResult", "sftpConfigs");
            }
            this.sftpConfigs = sftpConfigs;
            return this;
        }
        public Builder sftpConfigs(GetConnectorSftpConfig... sftpConfigs) {
            return sftpConfigs(List.of(sftpConfigs));
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetConnectorResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder url(String url) {
            if (url == null) {
              throw new MissingRequiredPropertyException("GetConnectorResult", "url");
            }
            this.url = url;
            return this;
        }
        public GetConnectorResult build() {
            final var _resultValue = new GetConnectorResult();
            _resultValue.accessRole = accessRole;
            _resultValue.arn = arn;
            _resultValue.as2Configs = as2Configs;
            _resultValue.id = id;
            _resultValue.loggingRole = loggingRole;
            _resultValue.securityPolicyName = securityPolicyName;
            _resultValue.serviceManagedEgressIpAddresses = serviceManagedEgressIpAddresses;
            _resultValue.sftpConfigs = sftpConfigs;
            _resultValue.tags = tags;
            _resultValue.url = url;
            return _resultValue;
        }
    }
}
