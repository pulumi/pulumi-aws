// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.redshiftserverless.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CustomDomainAssociationState extends com.pulumi.resources.ResourceArgs {

    public static final CustomDomainAssociationState Empty = new CustomDomainAssociationState();

    /**
     * ARN of the certificate for the custom domain association.
     * 
     */
    @Import(name="customDomainCertificateArn")
    private @Nullable Output<String> customDomainCertificateArn;

    /**
     * @return ARN of the certificate for the custom domain association.
     * 
     */
    public Optional<Output<String>> customDomainCertificateArn() {
        return Optional.ofNullable(this.customDomainCertificateArn);
    }

    /**
     * Expiration time for the certificate.
     * 
     */
    @Import(name="customDomainCertificateExpiryTime")
    private @Nullable Output<String> customDomainCertificateExpiryTime;

    /**
     * @return Expiration time for the certificate.
     * 
     */
    public Optional<Output<String>> customDomainCertificateExpiryTime() {
        return Optional.ofNullable(this.customDomainCertificateExpiryTime);
    }

    /**
     * Custom domain to associate with the workgroup.
     * 
     */
    @Import(name="customDomainName")
    private @Nullable Output<String> customDomainName;

    /**
     * @return Custom domain to associate with the workgroup.
     * 
     */
    public Optional<Output<String>> customDomainName() {
        return Optional.ofNullable(this.customDomainName);
    }

    /**
     * Name of the workgroup.
     * 
     */
    @Import(name="workgroupName")
    private @Nullable Output<String> workgroupName;

    /**
     * @return Name of the workgroup.
     * 
     */
    public Optional<Output<String>> workgroupName() {
        return Optional.ofNullable(this.workgroupName);
    }

    private CustomDomainAssociationState() {}

    private CustomDomainAssociationState(CustomDomainAssociationState $) {
        this.customDomainCertificateArn = $.customDomainCertificateArn;
        this.customDomainCertificateExpiryTime = $.customDomainCertificateExpiryTime;
        this.customDomainName = $.customDomainName;
        this.workgroupName = $.workgroupName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CustomDomainAssociationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CustomDomainAssociationState $;

        public Builder() {
            $ = new CustomDomainAssociationState();
        }

        public Builder(CustomDomainAssociationState defaults) {
            $ = new CustomDomainAssociationState(Objects.requireNonNull(defaults));
        }

        /**
         * @param customDomainCertificateArn ARN of the certificate for the custom domain association.
         * 
         * @return builder
         * 
         */
        public Builder customDomainCertificateArn(@Nullable Output<String> customDomainCertificateArn) {
            $.customDomainCertificateArn = customDomainCertificateArn;
            return this;
        }

        /**
         * @param customDomainCertificateArn ARN of the certificate for the custom domain association.
         * 
         * @return builder
         * 
         */
        public Builder customDomainCertificateArn(String customDomainCertificateArn) {
            return customDomainCertificateArn(Output.of(customDomainCertificateArn));
        }

        /**
         * @param customDomainCertificateExpiryTime Expiration time for the certificate.
         * 
         * @return builder
         * 
         */
        public Builder customDomainCertificateExpiryTime(@Nullable Output<String> customDomainCertificateExpiryTime) {
            $.customDomainCertificateExpiryTime = customDomainCertificateExpiryTime;
            return this;
        }

        /**
         * @param customDomainCertificateExpiryTime Expiration time for the certificate.
         * 
         * @return builder
         * 
         */
        public Builder customDomainCertificateExpiryTime(String customDomainCertificateExpiryTime) {
            return customDomainCertificateExpiryTime(Output.of(customDomainCertificateExpiryTime));
        }

        /**
         * @param customDomainName Custom domain to associate with the workgroup.
         * 
         * @return builder
         * 
         */
        public Builder customDomainName(@Nullable Output<String> customDomainName) {
            $.customDomainName = customDomainName;
            return this;
        }

        /**
         * @param customDomainName Custom domain to associate with the workgroup.
         * 
         * @return builder
         * 
         */
        public Builder customDomainName(String customDomainName) {
            return customDomainName(Output.of(customDomainName));
        }

        /**
         * @param workgroupName Name of the workgroup.
         * 
         * @return builder
         * 
         */
        public Builder workgroupName(@Nullable Output<String> workgroupName) {
            $.workgroupName = workgroupName;
            return this;
        }

        /**
         * @param workgroupName Name of the workgroup.
         * 
         * @return builder
         * 
         */
        public Builder workgroupName(String workgroupName) {
            return workgroupName(Output.of(workgroupName));
        }

        public CustomDomainAssociationState build() {
            return $;
        }
    }

}
