// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.bedrock.inputs;

import com.pulumi.aws.bedrock.inputs.AgentAgentPromptOverrideConfigurationArgs;
import com.pulumi.aws.bedrock.inputs.AgentAgentTimeoutsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AgentAgentState extends com.pulumi.resources.ResourceArgs {

    public static final AgentAgentState Empty = new AgentAgentState();

    /**
     * ARN of the Agent.
     * 
     */
    @Import(name="agentArn")
    private @Nullable Output<String> agentArn;

    /**
     * @return ARN of the Agent.
     * 
     */
    public Optional<Output<String>> agentArn() {
        return Optional.ofNullable(this.agentArn);
    }

    /**
     * ID of the Agent.
     * 
     */
    @Import(name="agentId")
    private @Nullable Output<String> agentId;

    /**
     * @return ID of the Agent.
     * 
     */
    public Optional<Output<String>> agentId() {
        return Optional.ofNullable(this.agentId);
    }

    /**
     * Name for the agent.
     * 
     */
    @Import(name="agentName")
    private @Nullable Output<String> agentName;

    /**
     * @return Name for the agent.
     * 
     */
    public Optional<Output<String>> agentName() {
        return Optional.ofNullable(this.agentName);
    }

    /**
     * ARN of the Role for the agent.
     * 
     */
    @Import(name="agentResourceRoleArn")
    private @Nullable Output<String> agentResourceRoleArn;

    /**
     * @return ARN of the Role for the agent.
     * 
     */
    public Optional<Output<String>> agentResourceRoleArn() {
        return Optional.ofNullable(this.agentResourceRoleArn);
    }

    /**
     * Version of the Agent.
     * 
     */
    @Import(name="agentVersion")
    private @Nullable Output<String> agentVersion;

    /**
     * @return Version of the Agent.
     * 
     */
    public Optional<Output<String>> agentVersion() {
        return Optional.ofNullable(this.agentVersion);
    }

    /**
     * ARN of customer manager key to use for encryption.
     * 
     */
    @Import(name="customerEncryptionKeyArn")
    private @Nullable Output<String> customerEncryptionKeyArn;

    /**
     * @return ARN of customer manager key to use for encryption.
     * 
     */
    public Optional<Output<String>> customerEncryptionKeyArn() {
        return Optional.ofNullable(this.customerEncryptionKeyArn);
    }

    /**
     * Description of the agent.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the agent.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Foundation model for the agent to use.
     * 
     * The following arguments are optional:
     * 
     */
    @Import(name="foundationModel")
    private @Nullable Output<String> foundationModel;

    /**
     * @return Foundation model for the agent to use.
     * 
     * The following arguments are optional:
     * 
     */
    public Optional<Output<String>> foundationModel() {
        return Optional.ofNullable(this.foundationModel);
    }

    /**
     * TTL in seconds for the agent to idle.
     * 
     */
    @Import(name="idleSessionTtlInSeconds")
    private @Nullable Output<Integer> idleSessionTtlInSeconds;

    /**
     * @return TTL in seconds for the agent to idle.
     * 
     */
    public Optional<Output<Integer>> idleSessionTtlInSeconds() {
        return Optional.ofNullable(this.idleSessionTtlInSeconds);
    }

    /**
     * Instructions to tell agent what it should do.
     * 
     */
    @Import(name="instruction")
    private @Nullable Output<String> instruction;

    /**
     * @return Instructions to tell agent what it should do.
     * 
     */
    public Optional<Output<String>> instruction() {
        return Optional.ofNullable(this.instruction);
    }

    @Import(name="prepareAgent")
    private @Nullable Output<Boolean> prepareAgent;

    public Optional<Output<Boolean>> prepareAgent() {
        return Optional.ofNullable(this.prepareAgent);
    }

    /**
     * Prompt Override Configuration
     * 
     */
    @Import(name="promptOverrideConfigurations")
    private @Nullable Output<List<AgentAgentPromptOverrideConfigurationArgs>> promptOverrideConfigurations;

    /**
     * @return Prompt Override Configuration
     * 
     */
    public Optional<Output<List<AgentAgentPromptOverrideConfigurationArgs>>> promptOverrideConfigurations() {
        return Optional.ofNullable(this.promptOverrideConfigurations);
    }

    /**
     * Key-value tags for the place index. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Key-value tags for the place index. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    /**
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    @Import(name="timeouts")
    private @Nullable Output<AgentAgentTimeoutsArgs> timeouts;

    public Optional<Output<AgentAgentTimeoutsArgs>> timeouts() {
        return Optional.ofNullable(this.timeouts);
    }

    private AgentAgentState() {}

    private AgentAgentState(AgentAgentState $) {
        this.agentArn = $.agentArn;
        this.agentId = $.agentId;
        this.agentName = $.agentName;
        this.agentResourceRoleArn = $.agentResourceRoleArn;
        this.agentVersion = $.agentVersion;
        this.customerEncryptionKeyArn = $.customerEncryptionKeyArn;
        this.description = $.description;
        this.foundationModel = $.foundationModel;
        this.idleSessionTtlInSeconds = $.idleSessionTtlInSeconds;
        this.instruction = $.instruction;
        this.prepareAgent = $.prepareAgent;
        this.promptOverrideConfigurations = $.promptOverrideConfigurations;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
        this.timeouts = $.timeouts;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AgentAgentState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AgentAgentState $;

        public Builder() {
            $ = new AgentAgentState();
        }

        public Builder(AgentAgentState defaults) {
            $ = new AgentAgentState(Objects.requireNonNull(defaults));
        }

        /**
         * @param agentArn ARN of the Agent.
         * 
         * @return builder
         * 
         */
        public Builder agentArn(@Nullable Output<String> agentArn) {
            $.agentArn = agentArn;
            return this;
        }

        /**
         * @param agentArn ARN of the Agent.
         * 
         * @return builder
         * 
         */
        public Builder agentArn(String agentArn) {
            return agentArn(Output.of(agentArn));
        }

        /**
         * @param agentId ID of the Agent.
         * 
         * @return builder
         * 
         */
        public Builder agentId(@Nullable Output<String> agentId) {
            $.agentId = agentId;
            return this;
        }

        /**
         * @param agentId ID of the Agent.
         * 
         * @return builder
         * 
         */
        public Builder agentId(String agentId) {
            return agentId(Output.of(agentId));
        }

        /**
         * @param agentName Name for the agent.
         * 
         * @return builder
         * 
         */
        public Builder agentName(@Nullable Output<String> agentName) {
            $.agentName = agentName;
            return this;
        }

        /**
         * @param agentName Name for the agent.
         * 
         * @return builder
         * 
         */
        public Builder agentName(String agentName) {
            return agentName(Output.of(agentName));
        }

        /**
         * @param agentResourceRoleArn ARN of the Role for the agent.
         * 
         * @return builder
         * 
         */
        public Builder agentResourceRoleArn(@Nullable Output<String> agentResourceRoleArn) {
            $.agentResourceRoleArn = agentResourceRoleArn;
            return this;
        }

        /**
         * @param agentResourceRoleArn ARN of the Role for the agent.
         * 
         * @return builder
         * 
         */
        public Builder agentResourceRoleArn(String agentResourceRoleArn) {
            return agentResourceRoleArn(Output.of(agentResourceRoleArn));
        }

        /**
         * @param agentVersion Version of the Agent.
         * 
         * @return builder
         * 
         */
        public Builder agentVersion(@Nullable Output<String> agentVersion) {
            $.agentVersion = agentVersion;
            return this;
        }

        /**
         * @param agentVersion Version of the Agent.
         * 
         * @return builder
         * 
         */
        public Builder agentVersion(String agentVersion) {
            return agentVersion(Output.of(agentVersion));
        }

        /**
         * @param customerEncryptionKeyArn ARN of customer manager key to use for encryption.
         * 
         * @return builder
         * 
         */
        public Builder customerEncryptionKeyArn(@Nullable Output<String> customerEncryptionKeyArn) {
            $.customerEncryptionKeyArn = customerEncryptionKeyArn;
            return this;
        }

        /**
         * @param customerEncryptionKeyArn ARN of customer manager key to use for encryption.
         * 
         * @return builder
         * 
         */
        public Builder customerEncryptionKeyArn(String customerEncryptionKeyArn) {
            return customerEncryptionKeyArn(Output.of(customerEncryptionKeyArn));
        }

        /**
         * @param description Description of the agent.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the agent.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param foundationModel Foundation model for the agent to use.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder foundationModel(@Nullable Output<String> foundationModel) {
            $.foundationModel = foundationModel;
            return this;
        }

        /**
         * @param foundationModel Foundation model for the agent to use.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder foundationModel(String foundationModel) {
            return foundationModel(Output.of(foundationModel));
        }

        /**
         * @param idleSessionTtlInSeconds TTL in seconds for the agent to idle.
         * 
         * @return builder
         * 
         */
        public Builder idleSessionTtlInSeconds(@Nullable Output<Integer> idleSessionTtlInSeconds) {
            $.idleSessionTtlInSeconds = idleSessionTtlInSeconds;
            return this;
        }

        /**
         * @param idleSessionTtlInSeconds TTL in seconds for the agent to idle.
         * 
         * @return builder
         * 
         */
        public Builder idleSessionTtlInSeconds(Integer idleSessionTtlInSeconds) {
            return idleSessionTtlInSeconds(Output.of(idleSessionTtlInSeconds));
        }

        /**
         * @param instruction Instructions to tell agent what it should do.
         * 
         * @return builder
         * 
         */
        public Builder instruction(@Nullable Output<String> instruction) {
            $.instruction = instruction;
            return this;
        }

        /**
         * @param instruction Instructions to tell agent what it should do.
         * 
         * @return builder
         * 
         */
        public Builder instruction(String instruction) {
            return instruction(Output.of(instruction));
        }

        public Builder prepareAgent(@Nullable Output<Boolean> prepareAgent) {
            $.prepareAgent = prepareAgent;
            return this;
        }

        public Builder prepareAgent(Boolean prepareAgent) {
            return prepareAgent(Output.of(prepareAgent));
        }

        /**
         * @param promptOverrideConfigurations Prompt Override Configuration
         * 
         * @return builder
         * 
         */
        public Builder promptOverrideConfigurations(@Nullable Output<List<AgentAgentPromptOverrideConfigurationArgs>> promptOverrideConfigurations) {
            $.promptOverrideConfigurations = promptOverrideConfigurations;
            return this;
        }

        /**
         * @param promptOverrideConfigurations Prompt Override Configuration
         * 
         * @return builder
         * 
         */
        public Builder promptOverrideConfigurations(List<AgentAgentPromptOverrideConfigurationArgs> promptOverrideConfigurations) {
            return promptOverrideConfigurations(Output.of(promptOverrideConfigurations));
        }

        /**
         * @param promptOverrideConfigurations Prompt Override Configuration
         * 
         * @return builder
         * 
         */
        public Builder promptOverrideConfigurations(AgentAgentPromptOverrideConfigurationArgs... promptOverrideConfigurations) {
            return promptOverrideConfigurations(List.of(promptOverrideConfigurations));
        }

        /**
         * @param tags Key-value tags for the place index. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Key-value tags for the place index. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * Please use `tags` instead.
         * 
         */
        @Deprecated /* Please use `tags` instead. */
        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * Please use `tags` instead.
         * 
         */
        @Deprecated /* Please use `tags` instead. */
        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        public Builder timeouts(@Nullable Output<AgentAgentTimeoutsArgs> timeouts) {
            $.timeouts = timeouts;
            return this;
        }

        public Builder timeouts(AgentAgentTimeoutsArgs timeouts) {
            return timeouts(Output.of(timeouts));
        }

        public AgentAgentState build() {
            return $;
        }
    }

}
