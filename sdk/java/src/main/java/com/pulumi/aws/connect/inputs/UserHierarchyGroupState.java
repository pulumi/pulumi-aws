// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.connect.inputs;

import com.pulumi.aws.connect.inputs.UserHierarchyGroupHierarchyPathArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UserHierarchyGroupState extends com.pulumi.resources.ResourceArgs {

    public static final UserHierarchyGroupState Empty = new UserHierarchyGroupState();

    /**
     * The Amazon Resource Name (ARN) of the hierarchy group.
     * 
     */
    @Import(name="arn")
    private @Nullable Output<String> arn;

    /**
     * @return The Amazon Resource Name (ARN) of the hierarchy group.
     * 
     */
    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    /**
     * The identifier for the hierarchy group.
     * 
     */
    @Import(name="hierarchyGroupId")
    private @Nullable Output<String> hierarchyGroupId;

    /**
     * @return The identifier for the hierarchy group.
     * 
     */
    public Optional<Output<String>> hierarchyGroupId() {
        return Optional.ofNullable(this.hierarchyGroupId);
    }

    /**
     * A block that contains information about the levels in the hierarchy group. The `hierarchy_path` block is documented below.
     * 
     */
    @Import(name="hierarchyPaths")
    private @Nullable Output<List<UserHierarchyGroupHierarchyPathArgs>> hierarchyPaths;

    /**
     * @return A block that contains information about the levels in the hierarchy group. The `hierarchy_path` block is documented below.
     * 
     */
    public Optional<Output<List<UserHierarchyGroupHierarchyPathArgs>>> hierarchyPaths() {
        return Optional.ofNullable(this.hierarchyPaths);
    }

    /**
     * Specifies the identifier of the hosting Amazon Connect Instance.
     * 
     */
    @Import(name="instanceId")
    private @Nullable Output<String> instanceId;

    /**
     * @return Specifies the identifier of the hosting Amazon Connect Instance.
     * 
     */
    public Optional<Output<String>> instanceId() {
        return Optional.ofNullable(this.instanceId);
    }

    /**
     * The identifier of the level in the hierarchy group.
     * 
     */
    @Import(name="levelId")
    private @Nullable Output<String> levelId;

    /**
     * @return The identifier of the level in the hierarchy group.
     * 
     */
    public Optional<Output<String>> levelId() {
        return Optional.ofNullable(this.levelId);
    }

    /**
     * The name of the user hierarchy group. Must not be more than 100 characters.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the user hierarchy group. Must not be more than 100 characters.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The identifier for the parent hierarchy group. The user hierarchy is created at level one if the parent group ID is null.
     * 
     */
    @Import(name="parentGroupId")
    private @Nullable Output<String> parentGroupId;

    /**
     * @return The identifier for the parent hierarchy group. The user hierarchy is created at level one if the parent group ID is null.
     * 
     */
    public Optional<Output<String>> parentGroupId() {
        return Optional.ofNullable(this.parentGroupId);
    }

    /**
     * Tags to apply to the hierarchy group. If configured with a provider
     * `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Tags to apply to the hierarchy group. If configured with a provider
     * `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     */
    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    /**
     * @return A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     */
    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    private UserHierarchyGroupState() {}

    private UserHierarchyGroupState(UserHierarchyGroupState $) {
        this.arn = $.arn;
        this.hierarchyGroupId = $.hierarchyGroupId;
        this.hierarchyPaths = $.hierarchyPaths;
        this.instanceId = $.instanceId;
        this.levelId = $.levelId;
        this.name = $.name;
        this.parentGroupId = $.parentGroupId;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UserHierarchyGroupState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UserHierarchyGroupState $;

        public Builder() {
            $ = new UserHierarchyGroupState();
        }

        public Builder(UserHierarchyGroupState defaults) {
            $ = new UserHierarchyGroupState(Objects.requireNonNull(defaults));
        }

        /**
         * @param arn The Amazon Resource Name (ARN) of the hierarchy group.
         * 
         * @return builder
         * 
         */
        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        /**
         * @param arn The Amazon Resource Name (ARN) of the hierarchy group.
         * 
         * @return builder
         * 
         */
        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        /**
         * @param hierarchyGroupId The identifier for the hierarchy group.
         * 
         * @return builder
         * 
         */
        public Builder hierarchyGroupId(@Nullable Output<String> hierarchyGroupId) {
            $.hierarchyGroupId = hierarchyGroupId;
            return this;
        }

        /**
         * @param hierarchyGroupId The identifier for the hierarchy group.
         * 
         * @return builder
         * 
         */
        public Builder hierarchyGroupId(String hierarchyGroupId) {
            return hierarchyGroupId(Output.of(hierarchyGroupId));
        }

        /**
         * @param hierarchyPaths A block that contains information about the levels in the hierarchy group. The `hierarchy_path` block is documented below.
         * 
         * @return builder
         * 
         */
        public Builder hierarchyPaths(@Nullable Output<List<UserHierarchyGroupHierarchyPathArgs>> hierarchyPaths) {
            $.hierarchyPaths = hierarchyPaths;
            return this;
        }

        /**
         * @param hierarchyPaths A block that contains information about the levels in the hierarchy group. The `hierarchy_path` block is documented below.
         * 
         * @return builder
         * 
         */
        public Builder hierarchyPaths(List<UserHierarchyGroupHierarchyPathArgs> hierarchyPaths) {
            return hierarchyPaths(Output.of(hierarchyPaths));
        }

        /**
         * @param hierarchyPaths A block that contains information about the levels in the hierarchy group. The `hierarchy_path` block is documented below.
         * 
         * @return builder
         * 
         */
        public Builder hierarchyPaths(UserHierarchyGroupHierarchyPathArgs... hierarchyPaths) {
            return hierarchyPaths(List.of(hierarchyPaths));
        }

        /**
         * @param instanceId Specifies the identifier of the hosting Amazon Connect Instance.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(@Nullable Output<String> instanceId) {
            $.instanceId = instanceId;
            return this;
        }

        /**
         * @param instanceId Specifies the identifier of the hosting Amazon Connect Instance.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(String instanceId) {
            return instanceId(Output.of(instanceId));
        }

        /**
         * @param levelId The identifier of the level in the hierarchy group.
         * 
         * @return builder
         * 
         */
        public Builder levelId(@Nullable Output<String> levelId) {
            $.levelId = levelId;
            return this;
        }

        /**
         * @param levelId The identifier of the level in the hierarchy group.
         * 
         * @return builder
         * 
         */
        public Builder levelId(String levelId) {
            return levelId(Output.of(levelId));
        }

        /**
         * @param name The name of the user hierarchy group. Must not be more than 100 characters.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the user hierarchy group. Must not be more than 100 characters.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param parentGroupId The identifier for the parent hierarchy group. The user hierarchy is created at level one if the parent group ID is null.
         * 
         * @return builder
         * 
         */
        public Builder parentGroupId(@Nullable Output<String> parentGroupId) {
            $.parentGroupId = parentGroupId;
            return this;
        }

        /**
         * @param parentGroupId The identifier for the parent hierarchy group. The user hierarchy is created at level one if the parent group ID is null.
         * 
         * @return builder
         * 
         */
        public Builder parentGroupId(String parentGroupId) {
            return parentGroupId(Output.of(parentGroupId));
        }

        /**
         * @param tags Tags to apply to the hierarchy group. If configured with a provider
         * `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Tags to apply to the hierarchy group. If configured with a provider
         * `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tagsAll A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
         * 
         * @return builder
         * 
         */
        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        /**
         * @param tagsAll A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
         * 
         * @return builder
         * 
         */
        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        public UserHierarchyGroupState build() {
            return $;
        }
    }

}
