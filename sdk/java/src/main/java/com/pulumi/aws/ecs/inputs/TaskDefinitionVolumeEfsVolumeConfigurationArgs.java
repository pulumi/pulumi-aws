// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ecs.inputs;

import com.pulumi.aws.ecs.inputs.TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TaskDefinitionVolumeEfsVolumeConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final TaskDefinitionVolumeEfsVolumeConfigurationArgs Empty = new TaskDefinitionVolumeEfsVolumeConfigurationArgs();

    /**
     * Configuration block for authorization for the Amazon EFS file system. Detailed below.
     * 
     */
    @Import(name="authorizationConfig")
    private @Nullable Output<TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigArgs> authorizationConfig;

    /**
     * @return Configuration block for authorization for the Amazon EFS file system. Detailed below.
     * 
     */
    public Optional<Output<TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigArgs>> authorizationConfig() {
        return Optional.ofNullable(this.authorizationConfig);
    }

    /**
     * ID of the EFS File System.
     * 
     */
    @Import(name="fileSystemId", required=true)
    private Output<String> fileSystemId;

    /**
     * @return ID of the EFS File System.
     * 
     */
    public Output<String> fileSystemId() {
        return this.fileSystemId;
    }

    /**
     * Directory within the Amazon EFS file system to mount as the root directory inside the host. If this parameter is omitted, the root of the Amazon EFS volume will be used. Specifying / will have the same effect as omitting this parameter. This argument is ignored when using `authorization_config`.
     * 
     */
    @Import(name="rootDirectory")
    private @Nullable Output<String> rootDirectory;

    /**
     * @return Directory within the Amazon EFS file system to mount as the root directory inside the host. If this parameter is omitted, the root of the Amazon EFS volume will be used. Specifying / will have the same effect as omitting this parameter. This argument is ignored when using `authorization_config`.
     * 
     */
    public Optional<Output<String>> rootDirectory() {
        return Optional.ofNullable(this.rootDirectory);
    }

    /**
     * Whether or not to enable encryption for Amazon EFS data in transit between the Amazon ECS host and the Amazon EFS server. Transit encryption must be enabled if Amazon EFS IAM authorization is used. Valid values: `ENABLED`, `DISABLED`. If this parameter is omitted, the default value of `DISABLED` is used.
     * 
     */
    @Import(name="transitEncryption")
    private @Nullable Output<String> transitEncryption;

    /**
     * @return Whether or not to enable encryption for Amazon EFS data in transit between the Amazon ECS host and the Amazon EFS server. Transit encryption must be enabled if Amazon EFS IAM authorization is used. Valid values: `ENABLED`, `DISABLED`. If this parameter is omitted, the default value of `DISABLED` is used.
     * 
     */
    public Optional<Output<String>> transitEncryption() {
        return Optional.ofNullable(this.transitEncryption);
    }

    /**
     * Port to use for transit encryption. If you do not specify a transit encryption port, it will use the port selection strategy that the Amazon EFS mount helper uses.
     * 
     */
    @Import(name="transitEncryptionPort")
    private @Nullable Output<Integer> transitEncryptionPort;

    /**
     * @return Port to use for transit encryption. If you do not specify a transit encryption port, it will use the port selection strategy that the Amazon EFS mount helper uses.
     * 
     */
    public Optional<Output<Integer>> transitEncryptionPort() {
        return Optional.ofNullable(this.transitEncryptionPort);
    }

    private TaskDefinitionVolumeEfsVolumeConfigurationArgs() {}

    private TaskDefinitionVolumeEfsVolumeConfigurationArgs(TaskDefinitionVolumeEfsVolumeConfigurationArgs $) {
        this.authorizationConfig = $.authorizationConfig;
        this.fileSystemId = $.fileSystemId;
        this.rootDirectory = $.rootDirectory;
        this.transitEncryption = $.transitEncryption;
        this.transitEncryptionPort = $.transitEncryptionPort;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TaskDefinitionVolumeEfsVolumeConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TaskDefinitionVolumeEfsVolumeConfigurationArgs $;

        public Builder() {
            $ = new TaskDefinitionVolumeEfsVolumeConfigurationArgs();
        }

        public Builder(TaskDefinitionVolumeEfsVolumeConfigurationArgs defaults) {
            $ = new TaskDefinitionVolumeEfsVolumeConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param authorizationConfig Configuration block for authorization for the Amazon EFS file system. Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder authorizationConfig(@Nullable Output<TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigArgs> authorizationConfig) {
            $.authorizationConfig = authorizationConfig;
            return this;
        }

        /**
         * @param authorizationConfig Configuration block for authorization for the Amazon EFS file system. Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder authorizationConfig(TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigArgs authorizationConfig) {
            return authorizationConfig(Output.of(authorizationConfig));
        }

        /**
         * @param fileSystemId ID of the EFS File System.
         * 
         * @return builder
         * 
         */
        public Builder fileSystemId(Output<String> fileSystemId) {
            $.fileSystemId = fileSystemId;
            return this;
        }

        /**
         * @param fileSystemId ID of the EFS File System.
         * 
         * @return builder
         * 
         */
        public Builder fileSystemId(String fileSystemId) {
            return fileSystemId(Output.of(fileSystemId));
        }

        /**
         * @param rootDirectory Directory within the Amazon EFS file system to mount as the root directory inside the host. If this parameter is omitted, the root of the Amazon EFS volume will be used. Specifying / will have the same effect as omitting this parameter. This argument is ignored when using `authorization_config`.
         * 
         * @return builder
         * 
         */
        public Builder rootDirectory(@Nullable Output<String> rootDirectory) {
            $.rootDirectory = rootDirectory;
            return this;
        }

        /**
         * @param rootDirectory Directory within the Amazon EFS file system to mount as the root directory inside the host. If this parameter is omitted, the root of the Amazon EFS volume will be used. Specifying / will have the same effect as omitting this parameter. This argument is ignored when using `authorization_config`.
         * 
         * @return builder
         * 
         */
        public Builder rootDirectory(String rootDirectory) {
            return rootDirectory(Output.of(rootDirectory));
        }

        /**
         * @param transitEncryption Whether or not to enable encryption for Amazon EFS data in transit between the Amazon ECS host and the Amazon EFS server. Transit encryption must be enabled if Amazon EFS IAM authorization is used. Valid values: `ENABLED`, `DISABLED`. If this parameter is omitted, the default value of `DISABLED` is used.
         * 
         * @return builder
         * 
         */
        public Builder transitEncryption(@Nullable Output<String> transitEncryption) {
            $.transitEncryption = transitEncryption;
            return this;
        }

        /**
         * @param transitEncryption Whether or not to enable encryption for Amazon EFS data in transit between the Amazon ECS host and the Amazon EFS server. Transit encryption must be enabled if Amazon EFS IAM authorization is used. Valid values: `ENABLED`, `DISABLED`. If this parameter is omitted, the default value of `DISABLED` is used.
         * 
         * @return builder
         * 
         */
        public Builder transitEncryption(String transitEncryption) {
            return transitEncryption(Output.of(transitEncryption));
        }

        /**
         * @param transitEncryptionPort Port to use for transit encryption. If you do not specify a transit encryption port, it will use the port selection strategy that the Amazon EFS mount helper uses.
         * 
         * @return builder
         * 
         */
        public Builder transitEncryptionPort(@Nullable Output<Integer> transitEncryptionPort) {
            $.transitEncryptionPort = transitEncryptionPort;
            return this;
        }

        /**
         * @param transitEncryptionPort Port to use for transit encryption. If you do not specify a transit encryption port, it will use the port selection strategy that the Amazon EFS mount helper uses.
         * 
         * @return builder
         * 
         */
        public Builder transitEncryptionPort(Integer transitEncryptionPort) {
            return transitEncryptionPort(Output.of(transitEncryptionPort));
        }

        public TaskDefinitionVolumeEfsVolumeConfigurationArgs build() {
            $.fileSystemId = Objects.requireNonNull($.fileSystemId, "expected parameter 'fileSystemId' to be non-null");
            return $;
        }
    }

}
