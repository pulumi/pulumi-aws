// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.appfabric.inputs;

import com.pulumi.aws.appfabric.inputs.AppAuthorizationCredentialArgs;
import com.pulumi.aws.appfabric.inputs.AppAuthorizationTenantArgs;
import com.pulumi.aws.appfabric.inputs.AppAuthorizationTimeoutsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AppAuthorizationState extends com.pulumi.resources.ResourceArgs {

    public static final AppAuthorizationState Empty = new AppAuthorizationState();

    /**
     * The name of the application for valid values see https://docs.aws.amazon.com/appfabric/latest/api/API_CreateAppAuthorization.html.
     * 
     */
    @Import(name="app")
    private @Nullable Output<String> app;

    /**
     * @return The name of the application for valid values see https://docs.aws.amazon.com/appfabric/latest/api/API_CreateAppAuthorization.html.
     * 
     */
    public Optional<Output<String>> app() {
        return Optional.ofNullable(this.app);
    }

    /**
     * The Amazon Resource Name (ARN) of the app bundle to use for the request.
     * 
     */
    @Import(name="appBundleArn")
    private @Nullable Output<String> appBundleArn;

    /**
     * @return The Amazon Resource Name (ARN) of the app bundle to use for the request.
     * 
     */
    public Optional<Output<String>> appBundleArn() {
        return Optional.ofNullable(this.appBundleArn);
    }

    /**
     * ARN of the App Authorization. Do not begin the description with &#34;An&#34;, &#34;The&#34;, &#34;Defines&#34;, &#34;Indicates&#34;, or &#34;Specifies,&#34; as these are verbose. In other words, &#34;Indicates the amount of storage,&#34; can be rewritten as &#34;Amount of storage,&#34; without losing any information.
     * 
     */
    @Import(name="arn")
    private @Nullable Output<String> arn;

    /**
     * @return ARN of the App Authorization. Do not begin the description with &#34;An&#34;, &#34;The&#34;, &#34;Defines&#34;, &#34;Indicates&#34;, or &#34;Specifies,&#34; as these are verbose. In other words, &#34;Indicates the amount of storage,&#34; can be rewritten as &#34;Amount of storage,&#34; without losing any information.
     * 
     */
    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    /**
     * The authorization type for the app authorization valid values are oauth2 and apiKey.
     * 
     */
    @Import(name="authType")
    private @Nullable Output<String> authType;

    /**
     * @return The authorization type for the app authorization valid values are oauth2 and apiKey.
     * 
     */
    public Optional<Output<String>> authType() {
        return Optional.ofNullable(this.authType);
    }

    /**
     * The application URL for the OAuth flow.
     * 
     */
    @Import(name="authUrl")
    private @Nullable Output<String> authUrl;

    /**
     * @return The application URL for the OAuth flow.
     * 
     */
    public Optional<Output<String>> authUrl() {
        return Optional.ofNullable(this.authUrl);
    }

    @Import(name="createdAt")
    private @Nullable Output<String> createdAt;

    public Optional<Output<String>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    /**
     * Contains credentials for the application, such as an API key or OAuth2 client ID and secret.
     * Specify credentials that match the authorization type for your request. For example, if the authorization type for your request is OAuth2 (oauth2), then you should provide only the OAuth2 credentials.
     * 
     */
    @Import(name="credential")
    private @Nullable Output<AppAuthorizationCredentialArgs> credential;

    /**
     * @return Contains credentials for the application, such as an API key or OAuth2 client ID and secret.
     * Specify credentials that match the authorization type for your request. For example, if the authorization type for your request is OAuth2 (oauth2), then you should provide only the OAuth2 credentials.
     * 
     */
    public Optional<Output<AppAuthorizationCredentialArgs>> credential() {
        return Optional.ofNullable(this.credential);
    }

    /**
     * The user persona of the app authorization.
     * 
     */
    @Import(name="persona")
    private @Nullable Output<String> persona;

    /**
     * @return The user persona of the app authorization.
     * 
     */
    public Optional<Output<String>> persona() {
        return Optional.ofNullable(this.persona);
    }

    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    /**
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    /**
     * Contains information about an application tenant, such as the application display name and identifier.
     * 
     */
    @Import(name="tenants")
    private @Nullable Output<List<AppAuthorizationTenantArgs>> tenants;

    /**
     * @return Contains information about an application tenant, such as the application display name and identifier.
     * 
     */
    public Optional<Output<List<AppAuthorizationTenantArgs>>> tenants() {
        return Optional.ofNullable(this.tenants);
    }

    @Import(name="timeouts")
    private @Nullable Output<AppAuthorizationTimeoutsArgs> timeouts;

    public Optional<Output<AppAuthorizationTimeoutsArgs>> timeouts() {
        return Optional.ofNullable(this.timeouts);
    }

    @Import(name="updatedAt")
    private @Nullable Output<String> updatedAt;

    public Optional<Output<String>> updatedAt() {
        return Optional.ofNullable(this.updatedAt);
    }

    private AppAuthorizationState() {}

    private AppAuthorizationState(AppAuthorizationState $) {
        this.app = $.app;
        this.appBundleArn = $.appBundleArn;
        this.arn = $.arn;
        this.authType = $.authType;
        this.authUrl = $.authUrl;
        this.createdAt = $.createdAt;
        this.credential = $.credential;
        this.persona = $.persona;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
        this.tenants = $.tenants;
        this.timeouts = $.timeouts;
        this.updatedAt = $.updatedAt;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AppAuthorizationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AppAuthorizationState $;

        public Builder() {
            $ = new AppAuthorizationState();
        }

        public Builder(AppAuthorizationState defaults) {
            $ = new AppAuthorizationState(Objects.requireNonNull(defaults));
        }

        /**
         * @param app The name of the application for valid values see https://docs.aws.amazon.com/appfabric/latest/api/API_CreateAppAuthorization.html.
         * 
         * @return builder
         * 
         */
        public Builder app(@Nullable Output<String> app) {
            $.app = app;
            return this;
        }

        /**
         * @param app The name of the application for valid values see https://docs.aws.amazon.com/appfabric/latest/api/API_CreateAppAuthorization.html.
         * 
         * @return builder
         * 
         */
        public Builder app(String app) {
            return app(Output.of(app));
        }

        /**
         * @param appBundleArn The Amazon Resource Name (ARN) of the app bundle to use for the request.
         * 
         * @return builder
         * 
         */
        public Builder appBundleArn(@Nullable Output<String> appBundleArn) {
            $.appBundleArn = appBundleArn;
            return this;
        }

        /**
         * @param appBundleArn The Amazon Resource Name (ARN) of the app bundle to use for the request.
         * 
         * @return builder
         * 
         */
        public Builder appBundleArn(String appBundleArn) {
            return appBundleArn(Output.of(appBundleArn));
        }

        /**
         * @param arn ARN of the App Authorization. Do not begin the description with &#34;An&#34;, &#34;The&#34;, &#34;Defines&#34;, &#34;Indicates&#34;, or &#34;Specifies,&#34; as these are verbose. In other words, &#34;Indicates the amount of storage,&#34; can be rewritten as &#34;Amount of storage,&#34; without losing any information.
         * 
         * @return builder
         * 
         */
        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        /**
         * @param arn ARN of the App Authorization. Do not begin the description with &#34;An&#34;, &#34;The&#34;, &#34;Defines&#34;, &#34;Indicates&#34;, or &#34;Specifies,&#34; as these are verbose. In other words, &#34;Indicates the amount of storage,&#34; can be rewritten as &#34;Amount of storage,&#34; without losing any information.
         * 
         * @return builder
         * 
         */
        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        /**
         * @param authType The authorization type for the app authorization valid values are oauth2 and apiKey.
         * 
         * @return builder
         * 
         */
        public Builder authType(@Nullable Output<String> authType) {
            $.authType = authType;
            return this;
        }

        /**
         * @param authType The authorization type for the app authorization valid values are oauth2 and apiKey.
         * 
         * @return builder
         * 
         */
        public Builder authType(String authType) {
            return authType(Output.of(authType));
        }

        /**
         * @param authUrl The application URL for the OAuth flow.
         * 
         * @return builder
         * 
         */
        public Builder authUrl(@Nullable Output<String> authUrl) {
            $.authUrl = authUrl;
            return this;
        }

        /**
         * @param authUrl The application URL for the OAuth flow.
         * 
         * @return builder
         * 
         */
        public Builder authUrl(String authUrl) {
            return authUrl(Output.of(authUrl));
        }

        public Builder createdAt(@Nullable Output<String> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        public Builder createdAt(String createdAt) {
            return createdAt(Output.of(createdAt));
        }

        /**
         * @param credential Contains credentials for the application, such as an API key or OAuth2 client ID and secret.
         * Specify credentials that match the authorization type for your request. For example, if the authorization type for your request is OAuth2 (oauth2), then you should provide only the OAuth2 credentials.
         * 
         * @return builder
         * 
         */
        public Builder credential(@Nullable Output<AppAuthorizationCredentialArgs> credential) {
            $.credential = credential;
            return this;
        }

        /**
         * @param credential Contains credentials for the application, such as an API key or OAuth2 client ID and secret.
         * Specify credentials that match the authorization type for your request. For example, if the authorization type for your request is OAuth2 (oauth2), then you should provide only the OAuth2 credentials.
         * 
         * @return builder
         * 
         */
        public Builder credential(AppAuthorizationCredentialArgs credential) {
            return credential(Output.of(credential));
        }

        /**
         * @param persona The user persona of the app authorization.
         * 
         * @return builder
         * 
         */
        public Builder persona(@Nullable Output<String> persona) {
            $.persona = persona;
            return this;
        }

        /**
         * @param persona The user persona of the app authorization.
         * 
         * @return builder
         * 
         */
        public Builder persona(String persona) {
            return persona(Output.of(persona));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * Please use `tags` instead.
         * 
         */
        @Deprecated /* Please use `tags` instead. */
        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * Please use `tags` instead.
         * 
         */
        @Deprecated /* Please use `tags` instead. */
        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        /**
         * @param tenants Contains information about an application tenant, such as the application display name and identifier.
         * 
         * @return builder
         * 
         */
        public Builder tenants(@Nullable Output<List<AppAuthorizationTenantArgs>> tenants) {
            $.tenants = tenants;
            return this;
        }

        /**
         * @param tenants Contains information about an application tenant, such as the application display name and identifier.
         * 
         * @return builder
         * 
         */
        public Builder tenants(List<AppAuthorizationTenantArgs> tenants) {
            return tenants(Output.of(tenants));
        }

        /**
         * @param tenants Contains information about an application tenant, such as the application display name and identifier.
         * 
         * @return builder
         * 
         */
        public Builder tenants(AppAuthorizationTenantArgs... tenants) {
            return tenants(List.of(tenants));
        }

        public Builder timeouts(@Nullable Output<AppAuthorizationTimeoutsArgs> timeouts) {
            $.timeouts = timeouts;
            return this;
        }

        public Builder timeouts(AppAuthorizationTimeoutsArgs timeouts) {
            return timeouts(Output.of(timeouts));
        }

        public Builder updatedAt(@Nullable Output<String> updatedAt) {
            $.updatedAt = updatedAt;
            return this;
        }

        public Builder updatedAt(String updatedAt) {
            return updatedAt(Output.of(updatedAt));
        }

        public AppAuthorizationState build() {
            return $;
        }
    }

}
