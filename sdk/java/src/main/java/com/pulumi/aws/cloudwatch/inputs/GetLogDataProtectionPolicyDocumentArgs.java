// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.cloudwatch.inputs;

import com.pulumi.aws.cloudwatch.inputs.GetLogDataProtectionPolicyDocumentStatementArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetLogDataProtectionPolicyDocumentArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetLogDataProtectionPolicyDocumentArgs Empty = new GetLogDataProtectionPolicyDocumentArgs();

    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The name of the data protection policy document.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the data protection policy document.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * Configures the data protection policy.
     * 
     * &gt; There must be exactly two statements: the first with an `audit` operation, and the second with a `deidentify` operation.
     * 
     * The following arguments are optional:
     * 
     */
    @Import(name="statements", required=true)
    private Output<List<GetLogDataProtectionPolicyDocumentStatementArgs>> statements;

    /**
     * @return Configures the data protection policy.
     * 
     * &gt; There must be exactly two statements: the first with an `audit` operation, and the second with a `deidentify` operation.
     * 
     * The following arguments are optional:
     * 
     */
    public Output<List<GetLogDataProtectionPolicyDocumentStatementArgs>> statements() {
        return this.statements;
    }

    @Import(name="version")
    private @Nullable Output<String> version;

    public Optional<Output<String>> version() {
        return Optional.ofNullable(this.version);
    }

    private GetLogDataProtectionPolicyDocumentArgs() {}

    private GetLogDataProtectionPolicyDocumentArgs(GetLogDataProtectionPolicyDocumentArgs $) {
        this.description = $.description;
        this.name = $.name;
        this.statements = $.statements;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetLogDataProtectionPolicyDocumentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetLogDataProtectionPolicyDocumentArgs $;

        public Builder() {
            $ = new GetLogDataProtectionPolicyDocumentArgs();
        }

        public Builder(GetLogDataProtectionPolicyDocumentArgs defaults) {
            $ = new GetLogDataProtectionPolicyDocumentArgs(Objects.requireNonNull(defaults));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param name The name of the data protection policy document.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the data protection policy document.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param statements Configures the data protection policy.
         * 
         * &gt; There must be exactly two statements: the first with an `audit` operation, and the second with a `deidentify` operation.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder statements(Output<List<GetLogDataProtectionPolicyDocumentStatementArgs>> statements) {
            $.statements = statements;
            return this;
        }

        /**
         * @param statements Configures the data protection policy.
         * 
         * &gt; There must be exactly two statements: the first with an `audit` operation, and the second with a `deidentify` operation.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder statements(List<GetLogDataProtectionPolicyDocumentStatementArgs> statements) {
            return statements(Output.of(statements));
        }

        /**
         * @param statements Configures the data protection policy.
         * 
         * &gt; There must be exactly two statements: the first with an `audit` operation, and the second with a `deidentify` operation.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder statements(GetLogDataProtectionPolicyDocumentStatementArgs... statements) {
            return statements(List.of(statements));
        }

        public Builder version(@Nullable Output<String> version) {
            $.version = version;
            return this;
        }

        public Builder version(String version) {
            return version(Output.of(version));
        }

        public GetLogDataProtectionPolicyDocumentArgs build() {
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.statements = Objects.requireNonNull($.statements, "expected parameter 'statements' to be non-null");
            return $;
        }
    }

}
