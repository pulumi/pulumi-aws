// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.rds.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProxyAuthArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProxyAuthArgs Empty = new ProxyAuthArgs();

    /**
     * The type of authentication that the proxy uses for connections from the proxy to the underlying database. One of `SECRETS`.
     * 
     */
    @Import(name="authScheme")
    private @Nullable Output<String> authScheme;

    /**
     * @return The type of authentication that the proxy uses for connections from the proxy to the underlying database. One of `SECRETS`.
     * 
     */
    public Optional<Output<String>> authScheme() {
        return Optional.ofNullable(this.authScheme);
    }

    /**
     * The type of authentication the proxy uses for connections from clients. Valid values are `MYSQL_NATIVE_PASSWORD`, `POSTGRES_SCRAM_SHA_256`, `POSTGRES_MD5`, and `SQL_SERVER_AUTHENTICATION`.
     * 
     */
    @Import(name="clientPasswordAuthType")
    private @Nullable Output<String> clientPasswordAuthType;

    /**
     * @return The type of authentication the proxy uses for connections from clients. Valid values are `MYSQL_NATIVE_PASSWORD`, `POSTGRES_SCRAM_SHA_256`, `POSTGRES_MD5`, and `SQL_SERVER_AUTHENTICATION`.
     * 
     */
    public Optional<Output<String>> clientPasswordAuthType() {
        return Optional.ofNullable(this.clientPasswordAuthType);
    }

    /**
     * A user-specified description about the authentication used by a proxy to log in as a specific database user.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A user-specified description about the authentication used by a proxy to log in as a specific database user.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Whether to require or disallow AWS Identity and Access Management (IAM) authentication for connections to the proxy. One of `DISABLED`, `REQUIRED`.
     * 
     */
    @Import(name="iamAuth")
    private @Nullable Output<String> iamAuth;

    /**
     * @return Whether to require or disallow AWS Identity and Access Management (IAM) authentication for connections to the proxy. One of `DISABLED`, `REQUIRED`.
     * 
     */
    public Optional<Output<String>> iamAuth() {
        return Optional.ofNullable(this.iamAuth);
    }

    /**
     * The Amazon Resource Name (ARN) representing the secret that the proxy uses to authenticate to the RDS DB instance or Aurora DB cluster. These secrets are stored within Amazon Secrets Manager.
     * 
     */
    @Import(name="secretArn")
    private @Nullable Output<String> secretArn;

    /**
     * @return The Amazon Resource Name (ARN) representing the secret that the proxy uses to authenticate to the RDS DB instance or Aurora DB cluster. These secrets are stored within Amazon Secrets Manager.
     * 
     */
    public Optional<Output<String>> secretArn() {
        return Optional.ofNullable(this.secretArn);
    }

    /**
     * The name of the database user to which the proxy connects.
     * 
     */
    @Import(name="username")
    private @Nullable Output<String> username;

    /**
     * @return The name of the database user to which the proxy connects.
     * 
     */
    public Optional<Output<String>> username() {
        return Optional.ofNullable(this.username);
    }

    private ProxyAuthArgs() {}

    private ProxyAuthArgs(ProxyAuthArgs $) {
        this.authScheme = $.authScheme;
        this.clientPasswordAuthType = $.clientPasswordAuthType;
        this.description = $.description;
        this.iamAuth = $.iamAuth;
        this.secretArn = $.secretArn;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProxyAuthArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProxyAuthArgs $;

        public Builder() {
            $ = new ProxyAuthArgs();
        }

        public Builder(ProxyAuthArgs defaults) {
            $ = new ProxyAuthArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param authScheme The type of authentication that the proxy uses for connections from the proxy to the underlying database. One of `SECRETS`.
         * 
         * @return builder
         * 
         */
        public Builder authScheme(@Nullable Output<String> authScheme) {
            $.authScheme = authScheme;
            return this;
        }

        /**
         * @param authScheme The type of authentication that the proxy uses for connections from the proxy to the underlying database. One of `SECRETS`.
         * 
         * @return builder
         * 
         */
        public Builder authScheme(String authScheme) {
            return authScheme(Output.of(authScheme));
        }

        /**
         * @param clientPasswordAuthType The type of authentication the proxy uses for connections from clients. Valid values are `MYSQL_NATIVE_PASSWORD`, `POSTGRES_SCRAM_SHA_256`, `POSTGRES_MD5`, and `SQL_SERVER_AUTHENTICATION`.
         * 
         * @return builder
         * 
         */
        public Builder clientPasswordAuthType(@Nullable Output<String> clientPasswordAuthType) {
            $.clientPasswordAuthType = clientPasswordAuthType;
            return this;
        }

        /**
         * @param clientPasswordAuthType The type of authentication the proxy uses for connections from clients. Valid values are `MYSQL_NATIVE_PASSWORD`, `POSTGRES_SCRAM_SHA_256`, `POSTGRES_MD5`, and `SQL_SERVER_AUTHENTICATION`.
         * 
         * @return builder
         * 
         */
        public Builder clientPasswordAuthType(String clientPasswordAuthType) {
            return clientPasswordAuthType(Output.of(clientPasswordAuthType));
        }

        /**
         * @param description A user-specified description about the authentication used by a proxy to log in as a specific database user.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A user-specified description about the authentication used by a proxy to log in as a specific database user.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param iamAuth Whether to require or disallow AWS Identity and Access Management (IAM) authentication for connections to the proxy. One of `DISABLED`, `REQUIRED`.
         * 
         * @return builder
         * 
         */
        public Builder iamAuth(@Nullable Output<String> iamAuth) {
            $.iamAuth = iamAuth;
            return this;
        }

        /**
         * @param iamAuth Whether to require or disallow AWS Identity and Access Management (IAM) authentication for connections to the proxy. One of `DISABLED`, `REQUIRED`.
         * 
         * @return builder
         * 
         */
        public Builder iamAuth(String iamAuth) {
            return iamAuth(Output.of(iamAuth));
        }

        /**
         * @param secretArn The Amazon Resource Name (ARN) representing the secret that the proxy uses to authenticate to the RDS DB instance or Aurora DB cluster. These secrets are stored within Amazon Secrets Manager.
         * 
         * @return builder
         * 
         */
        public Builder secretArn(@Nullable Output<String> secretArn) {
            $.secretArn = secretArn;
            return this;
        }

        /**
         * @param secretArn The Amazon Resource Name (ARN) representing the secret that the proxy uses to authenticate to the RDS DB instance or Aurora DB cluster. These secrets are stored within Amazon Secrets Manager.
         * 
         * @return builder
         * 
         */
        public Builder secretArn(String secretArn) {
            return secretArn(Output.of(secretArn));
        }

        /**
         * @param username The name of the database user to which the proxy connects.
         * 
         * @return builder
         * 
         */
        public Builder username(@Nullable Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username The name of the database user to which the proxy connects.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public ProxyAuthArgs build() {
            return $;
        }
    }

}
