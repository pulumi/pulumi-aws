// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.devicefarm.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NetworkProfileState extends com.pulumi.resources.ResourceArgs {

    public static final NetworkProfileState Empty = new NetworkProfileState();

    /**
     * The Amazon Resource Name of this network profile.
     * 
     */
    @Import(name="arn")
    private @Nullable Output<String> arn;

    /**
     * @return The Amazon Resource Name of this network profile.
     * 
     */
    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    /**
     * The description of the network profile.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the network profile.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The data throughput rate in bits per second, as an integer from `0` to `104857600`. Default value is `104857600`.
     * 
     */
    @Import(name="downlinkBandwidthBits")
    private @Nullable Output<Integer> downlinkBandwidthBits;

    /**
     * @return The data throughput rate in bits per second, as an integer from `0` to `104857600`. Default value is `104857600`.
     * 
     */
    public Optional<Output<Integer>> downlinkBandwidthBits() {
        return Optional.ofNullable(this.downlinkBandwidthBits);
    }

    /**
     * Delay time for all packets to destination in milliseconds as an integer from `0` to `2000`.
     * 
     */
    @Import(name="downlinkDelayMs")
    private @Nullable Output<Integer> downlinkDelayMs;

    /**
     * @return Delay time for all packets to destination in milliseconds as an integer from `0` to `2000`.
     * 
     */
    public Optional<Output<Integer>> downlinkDelayMs() {
        return Optional.ofNullable(this.downlinkDelayMs);
    }

    /**
     * Time variation in the delay of received packets in milliseconds as an integer from `0` to `2000`.
     * 
     */
    @Import(name="downlinkJitterMs")
    private @Nullable Output<Integer> downlinkJitterMs;

    /**
     * @return Time variation in the delay of received packets in milliseconds as an integer from `0` to `2000`.
     * 
     */
    public Optional<Output<Integer>> downlinkJitterMs() {
        return Optional.ofNullable(this.downlinkJitterMs);
    }

    /**
     * Proportion of received packets that fail to arrive from `0` to `100` percent.
     * 
     */
    @Import(name="downlinkLossPercent")
    private @Nullable Output<Integer> downlinkLossPercent;

    /**
     * @return Proportion of received packets that fail to arrive from `0` to `100` percent.
     * 
     */
    public Optional<Output<Integer>> downlinkLossPercent() {
        return Optional.ofNullable(this.downlinkLossPercent);
    }

    /**
     * The name for the network profile.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name for the network profile.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ARN of the project for the network profile.
     * 
     */
    @Import(name="projectArn")
    private @Nullable Output<String> projectArn;

    /**
     * @return The ARN of the project for the network profile.
     * 
     */
    public Optional<Output<String>> projectArn() {
        return Optional.ofNullable(this.projectArn);
    }

    /**
     * A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     */
    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    /**
     * @return A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     */
    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    /**
     * The type of network profile to create. Valid values are listed are `PRIVATE` and `CURATED`.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The type of network profile to create. Valid values are listed are `PRIVATE` and `CURATED`.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * The data throughput rate in bits per second, as an integer from `0` to `104857600`. Default value is `104857600`.
     * 
     */
    @Import(name="uplinkBandwidthBits")
    private @Nullable Output<Integer> uplinkBandwidthBits;

    /**
     * @return The data throughput rate in bits per second, as an integer from `0` to `104857600`. Default value is `104857600`.
     * 
     */
    public Optional<Output<Integer>> uplinkBandwidthBits() {
        return Optional.ofNullable(this.uplinkBandwidthBits);
    }

    /**
     * Delay time for all packets to destination in milliseconds as an integer from `0` to `2000`.
     * 
     */
    @Import(name="uplinkDelayMs")
    private @Nullable Output<Integer> uplinkDelayMs;

    /**
     * @return Delay time for all packets to destination in milliseconds as an integer from `0` to `2000`.
     * 
     */
    public Optional<Output<Integer>> uplinkDelayMs() {
        return Optional.ofNullable(this.uplinkDelayMs);
    }

    /**
     * Time variation in the delay of received packets in milliseconds as an integer from `0` to `2000`.
     * 
     */
    @Import(name="uplinkJitterMs")
    private @Nullable Output<Integer> uplinkJitterMs;

    /**
     * @return Time variation in the delay of received packets in milliseconds as an integer from `0` to `2000`.
     * 
     */
    public Optional<Output<Integer>> uplinkJitterMs() {
        return Optional.ofNullable(this.uplinkJitterMs);
    }

    /**
     * Proportion of received packets that fail to arrive from `0` to `100` percent.
     * 
     */
    @Import(name="uplinkLossPercent")
    private @Nullable Output<Integer> uplinkLossPercent;

    /**
     * @return Proportion of received packets that fail to arrive from `0` to `100` percent.
     * 
     */
    public Optional<Output<Integer>> uplinkLossPercent() {
        return Optional.ofNullable(this.uplinkLossPercent);
    }

    private NetworkProfileState() {}

    private NetworkProfileState(NetworkProfileState $) {
        this.arn = $.arn;
        this.description = $.description;
        this.downlinkBandwidthBits = $.downlinkBandwidthBits;
        this.downlinkDelayMs = $.downlinkDelayMs;
        this.downlinkJitterMs = $.downlinkJitterMs;
        this.downlinkLossPercent = $.downlinkLossPercent;
        this.name = $.name;
        this.projectArn = $.projectArn;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
        this.type = $.type;
        this.uplinkBandwidthBits = $.uplinkBandwidthBits;
        this.uplinkDelayMs = $.uplinkDelayMs;
        this.uplinkJitterMs = $.uplinkJitterMs;
        this.uplinkLossPercent = $.uplinkLossPercent;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NetworkProfileState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NetworkProfileState $;

        public Builder() {
            $ = new NetworkProfileState();
        }

        public Builder(NetworkProfileState defaults) {
            $ = new NetworkProfileState(Objects.requireNonNull(defaults));
        }

        /**
         * @param arn The Amazon Resource Name of this network profile.
         * 
         * @return builder
         * 
         */
        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        /**
         * @param arn The Amazon Resource Name of this network profile.
         * 
         * @return builder
         * 
         */
        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        /**
         * @param description The description of the network profile.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the network profile.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param downlinkBandwidthBits The data throughput rate in bits per second, as an integer from `0` to `104857600`. Default value is `104857600`.
         * 
         * @return builder
         * 
         */
        public Builder downlinkBandwidthBits(@Nullable Output<Integer> downlinkBandwidthBits) {
            $.downlinkBandwidthBits = downlinkBandwidthBits;
            return this;
        }

        /**
         * @param downlinkBandwidthBits The data throughput rate in bits per second, as an integer from `0` to `104857600`. Default value is `104857600`.
         * 
         * @return builder
         * 
         */
        public Builder downlinkBandwidthBits(Integer downlinkBandwidthBits) {
            return downlinkBandwidthBits(Output.of(downlinkBandwidthBits));
        }

        /**
         * @param downlinkDelayMs Delay time for all packets to destination in milliseconds as an integer from `0` to `2000`.
         * 
         * @return builder
         * 
         */
        public Builder downlinkDelayMs(@Nullable Output<Integer> downlinkDelayMs) {
            $.downlinkDelayMs = downlinkDelayMs;
            return this;
        }

        /**
         * @param downlinkDelayMs Delay time for all packets to destination in milliseconds as an integer from `0` to `2000`.
         * 
         * @return builder
         * 
         */
        public Builder downlinkDelayMs(Integer downlinkDelayMs) {
            return downlinkDelayMs(Output.of(downlinkDelayMs));
        }

        /**
         * @param downlinkJitterMs Time variation in the delay of received packets in milliseconds as an integer from `0` to `2000`.
         * 
         * @return builder
         * 
         */
        public Builder downlinkJitterMs(@Nullable Output<Integer> downlinkJitterMs) {
            $.downlinkJitterMs = downlinkJitterMs;
            return this;
        }

        /**
         * @param downlinkJitterMs Time variation in the delay of received packets in milliseconds as an integer from `0` to `2000`.
         * 
         * @return builder
         * 
         */
        public Builder downlinkJitterMs(Integer downlinkJitterMs) {
            return downlinkJitterMs(Output.of(downlinkJitterMs));
        }

        /**
         * @param downlinkLossPercent Proportion of received packets that fail to arrive from `0` to `100` percent.
         * 
         * @return builder
         * 
         */
        public Builder downlinkLossPercent(@Nullable Output<Integer> downlinkLossPercent) {
            $.downlinkLossPercent = downlinkLossPercent;
            return this;
        }

        /**
         * @param downlinkLossPercent Proportion of received packets that fail to arrive from `0` to `100` percent.
         * 
         * @return builder
         * 
         */
        public Builder downlinkLossPercent(Integer downlinkLossPercent) {
            return downlinkLossPercent(Output.of(downlinkLossPercent));
        }

        /**
         * @param name The name for the network profile.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name for the network profile.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param projectArn The ARN of the project for the network profile.
         * 
         * @return builder
         * 
         */
        public Builder projectArn(@Nullable Output<String> projectArn) {
            $.projectArn = projectArn;
            return this;
        }

        /**
         * @param projectArn The ARN of the project for the network profile.
         * 
         * @return builder
         * 
         */
        public Builder projectArn(String projectArn) {
            return projectArn(Output.of(projectArn));
        }

        /**
         * @param tags A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tagsAll A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
         * 
         * @return builder
         * 
         */
        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        /**
         * @param tagsAll A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
         * 
         * @return builder
         * 
         */
        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        /**
         * @param type The type of network profile to create. Valid values are listed are `PRIVATE` and `CURATED`.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of network profile to create. Valid values are listed are `PRIVATE` and `CURATED`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param uplinkBandwidthBits The data throughput rate in bits per second, as an integer from `0` to `104857600`. Default value is `104857600`.
         * 
         * @return builder
         * 
         */
        public Builder uplinkBandwidthBits(@Nullable Output<Integer> uplinkBandwidthBits) {
            $.uplinkBandwidthBits = uplinkBandwidthBits;
            return this;
        }

        /**
         * @param uplinkBandwidthBits The data throughput rate in bits per second, as an integer from `0` to `104857600`. Default value is `104857600`.
         * 
         * @return builder
         * 
         */
        public Builder uplinkBandwidthBits(Integer uplinkBandwidthBits) {
            return uplinkBandwidthBits(Output.of(uplinkBandwidthBits));
        }

        /**
         * @param uplinkDelayMs Delay time for all packets to destination in milliseconds as an integer from `0` to `2000`.
         * 
         * @return builder
         * 
         */
        public Builder uplinkDelayMs(@Nullable Output<Integer> uplinkDelayMs) {
            $.uplinkDelayMs = uplinkDelayMs;
            return this;
        }

        /**
         * @param uplinkDelayMs Delay time for all packets to destination in milliseconds as an integer from `0` to `2000`.
         * 
         * @return builder
         * 
         */
        public Builder uplinkDelayMs(Integer uplinkDelayMs) {
            return uplinkDelayMs(Output.of(uplinkDelayMs));
        }

        /**
         * @param uplinkJitterMs Time variation in the delay of received packets in milliseconds as an integer from `0` to `2000`.
         * 
         * @return builder
         * 
         */
        public Builder uplinkJitterMs(@Nullable Output<Integer> uplinkJitterMs) {
            $.uplinkJitterMs = uplinkJitterMs;
            return this;
        }

        /**
         * @param uplinkJitterMs Time variation in the delay of received packets in milliseconds as an integer from `0` to `2000`.
         * 
         * @return builder
         * 
         */
        public Builder uplinkJitterMs(Integer uplinkJitterMs) {
            return uplinkJitterMs(Output.of(uplinkJitterMs));
        }

        /**
         * @param uplinkLossPercent Proportion of received packets that fail to arrive from `0` to `100` percent.
         * 
         * @return builder
         * 
         */
        public Builder uplinkLossPercent(@Nullable Output<Integer> uplinkLossPercent) {
            $.uplinkLossPercent = uplinkLossPercent;
            return this;
        }

        /**
         * @param uplinkLossPercent Proportion of received packets that fail to arrive from `0` to `100` percent.
         * 
         * @return builder
         * 
         */
        public Builder uplinkLossPercent(Integer uplinkLossPercent) {
            return uplinkLossPercent(Output.of(uplinkLossPercent));
        }

        public NetworkProfileState build() {
            return $;
        }
    }

}
