// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.codebuild;

import com.pulumi.aws.codebuild.inputs.ProjectArtifactsArgs;
import com.pulumi.aws.codebuild.inputs.ProjectBuildBatchConfigArgs;
import com.pulumi.aws.codebuild.inputs.ProjectCacheArgs;
import com.pulumi.aws.codebuild.inputs.ProjectEnvironmentArgs;
import com.pulumi.aws.codebuild.inputs.ProjectFileSystemLocationArgs;
import com.pulumi.aws.codebuild.inputs.ProjectLogsConfigArgs;
import com.pulumi.aws.codebuild.inputs.ProjectSecondaryArtifactArgs;
import com.pulumi.aws.codebuild.inputs.ProjectSecondarySourceArgs;
import com.pulumi.aws.codebuild.inputs.ProjectSecondarySourceVersionArgs;
import com.pulumi.aws.codebuild.inputs.ProjectSourceArgs;
import com.pulumi.aws.codebuild.inputs.ProjectVpcConfigArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProjectArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProjectArgs Empty = new ProjectArgs();

    @Import(name="artifacts", required=true)
    private Output<ProjectArtifactsArgs> artifacts;

    public Output<ProjectArtifactsArgs> artifacts() {
        return this.artifacts;
    }

    @Import(name="badgeEnabled")
    private @Nullable Output<Boolean> badgeEnabled;

    public Optional<Output<Boolean>> badgeEnabled() {
        return Optional.ofNullable(this.badgeEnabled);
    }

    @Import(name="buildBatchConfig")
    private @Nullable Output<ProjectBuildBatchConfigArgs> buildBatchConfig;

    public Optional<Output<ProjectBuildBatchConfigArgs>> buildBatchConfig() {
        return Optional.ofNullable(this.buildBatchConfig);
    }

    @Import(name="buildTimeout")
    private @Nullable Output<Integer> buildTimeout;

    public Optional<Output<Integer>> buildTimeout() {
        return Optional.ofNullable(this.buildTimeout);
    }

    @Import(name="cache")
    private @Nullable Output<ProjectCacheArgs> cache;

    public Optional<Output<ProjectCacheArgs>> cache() {
        return Optional.ofNullable(this.cache);
    }

    @Import(name="concurrentBuildLimit")
    private @Nullable Output<Integer> concurrentBuildLimit;

    public Optional<Output<Integer>> concurrentBuildLimit() {
        return Optional.ofNullable(this.concurrentBuildLimit);
    }

    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="encryptionKey")
    private @Nullable Output<String> encryptionKey;

    public Optional<Output<String>> encryptionKey() {
        return Optional.ofNullable(this.encryptionKey);
    }

    @Import(name="environment", required=true)
    private Output<ProjectEnvironmentArgs> environment;

    public Output<ProjectEnvironmentArgs> environment() {
        return this.environment;
    }

    @Import(name="fileSystemLocations")
    private @Nullable Output<List<ProjectFileSystemLocationArgs>> fileSystemLocations;

    public Optional<Output<List<ProjectFileSystemLocationArgs>>> fileSystemLocations() {
        return Optional.ofNullable(this.fileSystemLocations);
    }

    @Import(name="logsConfig")
    private @Nullable Output<ProjectLogsConfigArgs> logsConfig;

    public Optional<Output<ProjectLogsConfigArgs>> logsConfig() {
        return Optional.ofNullable(this.logsConfig);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="projectVisibility")
    private @Nullable Output<String> projectVisibility;

    public Optional<Output<String>> projectVisibility() {
        return Optional.ofNullable(this.projectVisibility);
    }

    @Import(name="queuedTimeout")
    private @Nullable Output<Integer> queuedTimeout;

    public Optional<Output<Integer>> queuedTimeout() {
        return Optional.ofNullable(this.queuedTimeout);
    }

    @Import(name="resourceAccessRole")
    private @Nullable Output<String> resourceAccessRole;

    public Optional<Output<String>> resourceAccessRole() {
        return Optional.ofNullable(this.resourceAccessRole);
    }

    @Import(name="secondaryArtifacts")
    private @Nullable Output<List<ProjectSecondaryArtifactArgs>> secondaryArtifacts;

    public Optional<Output<List<ProjectSecondaryArtifactArgs>>> secondaryArtifacts() {
        return Optional.ofNullable(this.secondaryArtifacts);
    }

    @Import(name="secondarySourceVersions")
    private @Nullable Output<List<ProjectSecondarySourceVersionArgs>> secondarySourceVersions;

    public Optional<Output<List<ProjectSecondarySourceVersionArgs>>> secondarySourceVersions() {
        return Optional.ofNullable(this.secondarySourceVersions);
    }

    @Import(name="secondarySources")
    private @Nullable Output<List<ProjectSecondarySourceArgs>> secondarySources;

    public Optional<Output<List<ProjectSecondarySourceArgs>>> secondarySources() {
        return Optional.ofNullable(this.secondarySources);
    }

    @Import(name="serviceRole", required=true)
    private Output<String> serviceRole;

    public Output<String> serviceRole() {
        return this.serviceRole;
    }

    @Import(name="source", required=true)
    private Output<ProjectSourceArgs> source;

    public Output<ProjectSourceArgs> source() {
        return this.source;
    }

    @Import(name="sourceVersion")
    private @Nullable Output<String> sourceVersion;

    public Optional<Output<String>> sourceVersion() {
        return Optional.ofNullable(this.sourceVersion);
    }

    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="vpcConfig")
    private @Nullable Output<ProjectVpcConfigArgs> vpcConfig;

    public Optional<Output<ProjectVpcConfigArgs>> vpcConfig() {
        return Optional.ofNullable(this.vpcConfig);
    }

    private ProjectArgs() {}

    private ProjectArgs(ProjectArgs $) {
        this.artifacts = $.artifacts;
        this.badgeEnabled = $.badgeEnabled;
        this.buildBatchConfig = $.buildBatchConfig;
        this.buildTimeout = $.buildTimeout;
        this.cache = $.cache;
        this.concurrentBuildLimit = $.concurrentBuildLimit;
        this.description = $.description;
        this.encryptionKey = $.encryptionKey;
        this.environment = $.environment;
        this.fileSystemLocations = $.fileSystemLocations;
        this.logsConfig = $.logsConfig;
        this.name = $.name;
        this.projectVisibility = $.projectVisibility;
        this.queuedTimeout = $.queuedTimeout;
        this.resourceAccessRole = $.resourceAccessRole;
        this.secondaryArtifacts = $.secondaryArtifacts;
        this.secondarySourceVersions = $.secondarySourceVersions;
        this.secondarySources = $.secondarySources;
        this.serviceRole = $.serviceRole;
        this.source = $.source;
        this.sourceVersion = $.sourceVersion;
        this.tags = $.tags;
        this.vpcConfig = $.vpcConfig;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectArgs $;

        public Builder() {
            $ = new ProjectArgs();
        }

        public Builder(ProjectArgs defaults) {
            $ = new ProjectArgs(Objects.requireNonNull(defaults));
        }

        public Builder artifacts(Output<ProjectArtifactsArgs> artifacts) {
            $.artifacts = artifacts;
            return this;
        }

        public Builder artifacts(ProjectArtifactsArgs artifacts) {
            return artifacts(Output.of(artifacts));
        }

        public Builder badgeEnabled(@Nullable Output<Boolean> badgeEnabled) {
            $.badgeEnabled = badgeEnabled;
            return this;
        }

        public Builder badgeEnabled(Boolean badgeEnabled) {
            return badgeEnabled(Output.of(badgeEnabled));
        }

        public Builder buildBatchConfig(@Nullable Output<ProjectBuildBatchConfigArgs> buildBatchConfig) {
            $.buildBatchConfig = buildBatchConfig;
            return this;
        }

        public Builder buildBatchConfig(ProjectBuildBatchConfigArgs buildBatchConfig) {
            return buildBatchConfig(Output.of(buildBatchConfig));
        }

        public Builder buildTimeout(@Nullable Output<Integer> buildTimeout) {
            $.buildTimeout = buildTimeout;
            return this;
        }

        public Builder buildTimeout(Integer buildTimeout) {
            return buildTimeout(Output.of(buildTimeout));
        }

        public Builder cache(@Nullable Output<ProjectCacheArgs> cache) {
            $.cache = cache;
            return this;
        }

        public Builder cache(ProjectCacheArgs cache) {
            return cache(Output.of(cache));
        }

        public Builder concurrentBuildLimit(@Nullable Output<Integer> concurrentBuildLimit) {
            $.concurrentBuildLimit = concurrentBuildLimit;
            return this;
        }

        public Builder concurrentBuildLimit(Integer concurrentBuildLimit) {
            return concurrentBuildLimit(Output.of(concurrentBuildLimit));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder encryptionKey(@Nullable Output<String> encryptionKey) {
            $.encryptionKey = encryptionKey;
            return this;
        }

        public Builder encryptionKey(String encryptionKey) {
            return encryptionKey(Output.of(encryptionKey));
        }

        public Builder environment(Output<ProjectEnvironmentArgs> environment) {
            $.environment = environment;
            return this;
        }

        public Builder environment(ProjectEnvironmentArgs environment) {
            return environment(Output.of(environment));
        }

        public Builder fileSystemLocations(@Nullable Output<List<ProjectFileSystemLocationArgs>> fileSystemLocations) {
            $.fileSystemLocations = fileSystemLocations;
            return this;
        }

        public Builder fileSystemLocations(List<ProjectFileSystemLocationArgs> fileSystemLocations) {
            return fileSystemLocations(Output.of(fileSystemLocations));
        }

        public Builder fileSystemLocations(ProjectFileSystemLocationArgs... fileSystemLocations) {
            return fileSystemLocations(List.of(fileSystemLocations));
        }

        public Builder logsConfig(@Nullable Output<ProjectLogsConfigArgs> logsConfig) {
            $.logsConfig = logsConfig;
            return this;
        }

        public Builder logsConfig(ProjectLogsConfigArgs logsConfig) {
            return logsConfig(Output.of(logsConfig));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder projectVisibility(@Nullable Output<String> projectVisibility) {
            $.projectVisibility = projectVisibility;
            return this;
        }

        public Builder projectVisibility(String projectVisibility) {
            return projectVisibility(Output.of(projectVisibility));
        }

        public Builder queuedTimeout(@Nullable Output<Integer> queuedTimeout) {
            $.queuedTimeout = queuedTimeout;
            return this;
        }

        public Builder queuedTimeout(Integer queuedTimeout) {
            return queuedTimeout(Output.of(queuedTimeout));
        }

        public Builder resourceAccessRole(@Nullable Output<String> resourceAccessRole) {
            $.resourceAccessRole = resourceAccessRole;
            return this;
        }

        public Builder resourceAccessRole(String resourceAccessRole) {
            return resourceAccessRole(Output.of(resourceAccessRole));
        }

        public Builder secondaryArtifacts(@Nullable Output<List<ProjectSecondaryArtifactArgs>> secondaryArtifacts) {
            $.secondaryArtifacts = secondaryArtifacts;
            return this;
        }

        public Builder secondaryArtifacts(List<ProjectSecondaryArtifactArgs> secondaryArtifacts) {
            return secondaryArtifacts(Output.of(secondaryArtifacts));
        }

        public Builder secondaryArtifacts(ProjectSecondaryArtifactArgs... secondaryArtifacts) {
            return secondaryArtifacts(List.of(secondaryArtifacts));
        }

        public Builder secondarySourceVersions(@Nullable Output<List<ProjectSecondarySourceVersionArgs>> secondarySourceVersions) {
            $.secondarySourceVersions = secondarySourceVersions;
            return this;
        }

        public Builder secondarySourceVersions(List<ProjectSecondarySourceVersionArgs> secondarySourceVersions) {
            return secondarySourceVersions(Output.of(secondarySourceVersions));
        }

        public Builder secondarySourceVersions(ProjectSecondarySourceVersionArgs... secondarySourceVersions) {
            return secondarySourceVersions(List.of(secondarySourceVersions));
        }

        public Builder secondarySources(@Nullable Output<List<ProjectSecondarySourceArgs>> secondarySources) {
            $.secondarySources = secondarySources;
            return this;
        }

        public Builder secondarySources(List<ProjectSecondarySourceArgs> secondarySources) {
            return secondarySources(Output.of(secondarySources));
        }

        public Builder secondarySources(ProjectSecondarySourceArgs... secondarySources) {
            return secondarySources(List.of(secondarySources));
        }

        public Builder serviceRole(Output<String> serviceRole) {
            $.serviceRole = serviceRole;
            return this;
        }

        public Builder serviceRole(String serviceRole) {
            return serviceRole(Output.of(serviceRole));
        }

        public Builder source(Output<ProjectSourceArgs> source) {
            $.source = source;
            return this;
        }

        public Builder source(ProjectSourceArgs source) {
            return source(Output.of(source));
        }

        public Builder sourceVersion(@Nullable Output<String> sourceVersion) {
            $.sourceVersion = sourceVersion;
            return this;
        }

        public Builder sourceVersion(String sourceVersion) {
            return sourceVersion(Output.of(sourceVersion));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder vpcConfig(@Nullable Output<ProjectVpcConfigArgs> vpcConfig) {
            $.vpcConfig = vpcConfig;
            return this;
        }

        public Builder vpcConfig(ProjectVpcConfigArgs vpcConfig) {
            return vpcConfig(Output.of(vpcConfig));
        }

        public ProjectArgs build() {
            $.artifacts = Objects.requireNonNull($.artifacts, "expected parameter 'artifacts' to be non-null");
            $.environment = Objects.requireNonNull($.environment, "expected parameter 'environment' to be non-null");
            $.serviceRole = Objects.requireNonNull($.serviceRole, "expected parameter 'serviceRole' to be non-null");
            $.source = Objects.requireNonNull($.source, "expected parameter 'source' to be non-null");
            return $;
        }
    }

}
