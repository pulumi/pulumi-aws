// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.lightsail.outputs;

import com.pulumi.aws.lightsail.outputs.DistributionCacheBehaviorSettingsForwardedCookies;
import com.pulumi.aws.lightsail.outputs.DistributionCacheBehaviorSettingsForwardedHeaders;
import com.pulumi.aws.lightsail.outputs.DistributionCacheBehaviorSettingsForwardedQueryStrings;
import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DistributionCacheBehaviorSettings {
    /**
     * @return HTTP methods that are processed and forwarded to the distribution&#39;s origin.
     * 
     */
    private @Nullable String allowedHttpMethods;
    /**
     * @return HTTP method responses that are cached by your distribution.
     * 
     */
    private @Nullable String cachedHttpMethods;
    /**
     * @return Default amount of time that objects stay in the distribution&#39;s cache before the distribution forwards another request to the origin to determine whether the content has been updated.
     * 
     */
    private @Nullable Integer defaultTtl;
    /**
     * @return Cookies that are forwarded to the origin. Your content is cached based on the cookies that are forwarded. See below.
     * 
     */
    private @Nullable DistributionCacheBehaviorSettingsForwardedCookies forwardedCookies;
    /**
     * @return Headers that are forwarded to the origin. Your content is cached based on the headers that are forwarded. See below.
     * 
     */
    private @Nullable DistributionCacheBehaviorSettingsForwardedHeaders forwardedHeaders;
    /**
     * @return Query strings that are forwarded to the origin. Your content is cached based on the query strings that are forwarded. See below.
     * 
     */
    private @Nullable DistributionCacheBehaviorSettingsForwardedQueryStrings forwardedQueryStrings;
    /**
     * @return Maximum amount of time that objects stay in the distribution&#39;s cache before the distribution forwards another request to the origin to determine whether the object has been updated.
     * 
     */
    private @Nullable Integer maximumTtl;
    /**
     * @return Minimum amount of time that objects stay in the distribution&#39;s cache before the distribution forwards another request to the origin to determine whether the object has been updated.
     * 
     */
    private @Nullable Integer minimumTtl;

    private DistributionCacheBehaviorSettings() {}
    /**
     * @return HTTP methods that are processed and forwarded to the distribution&#39;s origin.
     * 
     */
    public Optional<String> allowedHttpMethods() {
        return Optional.ofNullable(this.allowedHttpMethods);
    }
    /**
     * @return HTTP method responses that are cached by your distribution.
     * 
     */
    public Optional<String> cachedHttpMethods() {
        return Optional.ofNullable(this.cachedHttpMethods);
    }
    /**
     * @return Default amount of time that objects stay in the distribution&#39;s cache before the distribution forwards another request to the origin to determine whether the content has been updated.
     * 
     */
    public Optional<Integer> defaultTtl() {
        return Optional.ofNullable(this.defaultTtl);
    }
    /**
     * @return Cookies that are forwarded to the origin. Your content is cached based on the cookies that are forwarded. See below.
     * 
     */
    public Optional<DistributionCacheBehaviorSettingsForwardedCookies> forwardedCookies() {
        return Optional.ofNullable(this.forwardedCookies);
    }
    /**
     * @return Headers that are forwarded to the origin. Your content is cached based on the headers that are forwarded. See below.
     * 
     */
    public Optional<DistributionCacheBehaviorSettingsForwardedHeaders> forwardedHeaders() {
        return Optional.ofNullable(this.forwardedHeaders);
    }
    /**
     * @return Query strings that are forwarded to the origin. Your content is cached based on the query strings that are forwarded. See below.
     * 
     */
    public Optional<DistributionCacheBehaviorSettingsForwardedQueryStrings> forwardedQueryStrings() {
        return Optional.ofNullable(this.forwardedQueryStrings);
    }
    /**
     * @return Maximum amount of time that objects stay in the distribution&#39;s cache before the distribution forwards another request to the origin to determine whether the object has been updated.
     * 
     */
    public Optional<Integer> maximumTtl() {
        return Optional.ofNullable(this.maximumTtl);
    }
    /**
     * @return Minimum amount of time that objects stay in the distribution&#39;s cache before the distribution forwards another request to the origin to determine whether the object has been updated.
     * 
     */
    public Optional<Integer> minimumTtl() {
        return Optional.ofNullable(this.minimumTtl);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DistributionCacheBehaviorSettings defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String allowedHttpMethods;
        private @Nullable String cachedHttpMethods;
        private @Nullable Integer defaultTtl;
        private @Nullable DistributionCacheBehaviorSettingsForwardedCookies forwardedCookies;
        private @Nullable DistributionCacheBehaviorSettingsForwardedHeaders forwardedHeaders;
        private @Nullable DistributionCacheBehaviorSettingsForwardedQueryStrings forwardedQueryStrings;
        private @Nullable Integer maximumTtl;
        private @Nullable Integer minimumTtl;
        public Builder() {}
        public Builder(DistributionCacheBehaviorSettings defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowedHttpMethods = defaults.allowedHttpMethods;
    	      this.cachedHttpMethods = defaults.cachedHttpMethods;
    	      this.defaultTtl = defaults.defaultTtl;
    	      this.forwardedCookies = defaults.forwardedCookies;
    	      this.forwardedHeaders = defaults.forwardedHeaders;
    	      this.forwardedQueryStrings = defaults.forwardedQueryStrings;
    	      this.maximumTtl = defaults.maximumTtl;
    	      this.minimumTtl = defaults.minimumTtl;
        }

        @CustomType.Setter
        public Builder allowedHttpMethods(@Nullable String allowedHttpMethods) {

            this.allowedHttpMethods = allowedHttpMethods;
            return this;
        }
        @CustomType.Setter
        public Builder cachedHttpMethods(@Nullable String cachedHttpMethods) {

            this.cachedHttpMethods = cachedHttpMethods;
            return this;
        }
        @CustomType.Setter
        public Builder defaultTtl(@Nullable Integer defaultTtl) {

            this.defaultTtl = defaultTtl;
            return this;
        }
        @CustomType.Setter
        public Builder forwardedCookies(@Nullable DistributionCacheBehaviorSettingsForwardedCookies forwardedCookies) {

            this.forwardedCookies = forwardedCookies;
            return this;
        }
        @CustomType.Setter
        public Builder forwardedHeaders(@Nullable DistributionCacheBehaviorSettingsForwardedHeaders forwardedHeaders) {

            this.forwardedHeaders = forwardedHeaders;
            return this;
        }
        @CustomType.Setter
        public Builder forwardedQueryStrings(@Nullable DistributionCacheBehaviorSettingsForwardedQueryStrings forwardedQueryStrings) {

            this.forwardedQueryStrings = forwardedQueryStrings;
            return this;
        }
        @CustomType.Setter
        public Builder maximumTtl(@Nullable Integer maximumTtl) {

            this.maximumTtl = maximumTtl;
            return this;
        }
        @CustomType.Setter
        public Builder minimumTtl(@Nullable Integer minimumTtl) {

            this.minimumTtl = minimumTtl;
            return this;
        }
        public DistributionCacheBehaviorSettings build() {
            final var _resultValue = new DistributionCacheBehaviorSettings();
            _resultValue.allowedHttpMethods = allowedHttpMethods;
            _resultValue.cachedHttpMethods = cachedHttpMethods;
            _resultValue.defaultTtl = defaultTtl;
            _resultValue.forwardedCookies = forwardedCookies;
            _resultValue.forwardedHeaders = forwardedHeaders;
            _resultValue.forwardedQueryStrings = forwardedQueryStrings;
            _resultValue.maximumTtl = maximumTtl;
            _resultValue.minimumTtl = minimumTtl;
            return _resultValue;
        }
    }
}
