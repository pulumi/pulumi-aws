// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.dms.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class EndpointMysqlSettings {
    /**
     * @return Script to run immediately after AWS DMS connects to the endpoint.
     * 
     */
    private @Nullable String afterConnectScript;
    /**
     * @return Authentication method to use. Valid values: `password`, `iam`.
     * 
     */
    private @Nullable String authenticationMethod;
    /**
     * @return Whether to clean and recreate table metadata information on the replication instance when a mismatch occurs.
     * 
     */
    private @Nullable Boolean cleanSourceMetadataOnMismatch;
    /**
     * @return Time interval to check the binary log for new changes/events when the database is idle. Default is `5`.
     * 
     */
    private @Nullable Integer eventsPollInterval;
    /**
     * @return Client statement timeout (in seconds) for a MySQL source endpoint.
     * 
     */
    private @Nullable Integer executeTimeout;
    /**
     * @return Maximum size (in KB) of any .csv file used to transfer data to a MySQL-compatible database.
     * 
     */
    private @Nullable Integer maxFileSize;
    /**
     * @return Number of threads to use to load the data into the MySQL-compatible target database.
     * 
     */
    private @Nullable Integer parallelLoadThreads;
    /**
     * @return Time zone for the source MySQL database.
     * 
     */
    private @Nullable String serverTimezone;
    /**
     * @return ARN of the IAM role to authenticate when connecting to the endpoint.
     * 
     */
    private @Nullable String serviceAccessRoleArn;
    /**
     * @return Where to migrate source tables on the target. Valid values are `specific-database` and `multiple-databases`.
     * 
     */
    private @Nullable String targetDbType;

    private EndpointMysqlSettings() {}
    /**
     * @return Script to run immediately after AWS DMS connects to the endpoint.
     * 
     */
    public Optional<String> afterConnectScript() {
        return Optional.ofNullable(this.afterConnectScript);
    }
    /**
     * @return Authentication method to use. Valid values: `password`, `iam`.
     * 
     */
    public Optional<String> authenticationMethod() {
        return Optional.ofNullable(this.authenticationMethod);
    }
    /**
     * @return Whether to clean and recreate table metadata information on the replication instance when a mismatch occurs.
     * 
     */
    public Optional<Boolean> cleanSourceMetadataOnMismatch() {
        return Optional.ofNullable(this.cleanSourceMetadataOnMismatch);
    }
    /**
     * @return Time interval to check the binary log for new changes/events when the database is idle. Default is `5`.
     * 
     */
    public Optional<Integer> eventsPollInterval() {
        return Optional.ofNullable(this.eventsPollInterval);
    }
    /**
     * @return Client statement timeout (in seconds) for a MySQL source endpoint.
     * 
     */
    public Optional<Integer> executeTimeout() {
        return Optional.ofNullable(this.executeTimeout);
    }
    /**
     * @return Maximum size (in KB) of any .csv file used to transfer data to a MySQL-compatible database.
     * 
     */
    public Optional<Integer> maxFileSize() {
        return Optional.ofNullable(this.maxFileSize);
    }
    /**
     * @return Number of threads to use to load the data into the MySQL-compatible target database.
     * 
     */
    public Optional<Integer> parallelLoadThreads() {
        return Optional.ofNullable(this.parallelLoadThreads);
    }
    /**
     * @return Time zone for the source MySQL database.
     * 
     */
    public Optional<String> serverTimezone() {
        return Optional.ofNullable(this.serverTimezone);
    }
    /**
     * @return ARN of the IAM role to authenticate when connecting to the endpoint.
     * 
     */
    public Optional<String> serviceAccessRoleArn() {
        return Optional.ofNullable(this.serviceAccessRoleArn);
    }
    /**
     * @return Where to migrate source tables on the target. Valid values are `specific-database` and `multiple-databases`.
     * 
     */
    public Optional<String> targetDbType() {
        return Optional.ofNullable(this.targetDbType);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EndpointMysqlSettings defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String afterConnectScript;
        private @Nullable String authenticationMethod;
        private @Nullable Boolean cleanSourceMetadataOnMismatch;
        private @Nullable Integer eventsPollInterval;
        private @Nullable Integer executeTimeout;
        private @Nullable Integer maxFileSize;
        private @Nullable Integer parallelLoadThreads;
        private @Nullable String serverTimezone;
        private @Nullable String serviceAccessRoleArn;
        private @Nullable String targetDbType;
        public Builder() {}
        public Builder(EndpointMysqlSettings defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.afterConnectScript = defaults.afterConnectScript;
    	      this.authenticationMethod = defaults.authenticationMethod;
    	      this.cleanSourceMetadataOnMismatch = defaults.cleanSourceMetadataOnMismatch;
    	      this.eventsPollInterval = defaults.eventsPollInterval;
    	      this.executeTimeout = defaults.executeTimeout;
    	      this.maxFileSize = defaults.maxFileSize;
    	      this.parallelLoadThreads = defaults.parallelLoadThreads;
    	      this.serverTimezone = defaults.serverTimezone;
    	      this.serviceAccessRoleArn = defaults.serviceAccessRoleArn;
    	      this.targetDbType = defaults.targetDbType;
        }

        @CustomType.Setter
        public Builder afterConnectScript(@Nullable String afterConnectScript) {

            this.afterConnectScript = afterConnectScript;
            return this;
        }
        @CustomType.Setter
        public Builder authenticationMethod(@Nullable String authenticationMethod) {

            this.authenticationMethod = authenticationMethod;
            return this;
        }
        @CustomType.Setter
        public Builder cleanSourceMetadataOnMismatch(@Nullable Boolean cleanSourceMetadataOnMismatch) {

            this.cleanSourceMetadataOnMismatch = cleanSourceMetadataOnMismatch;
            return this;
        }
        @CustomType.Setter
        public Builder eventsPollInterval(@Nullable Integer eventsPollInterval) {

            this.eventsPollInterval = eventsPollInterval;
            return this;
        }
        @CustomType.Setter
        public Builder executeTimeout(@Nullable Integer executeTimeout) {

            this.executeTimeout = executeTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder maxFileSize(@Nullable Integer maxFileSize) {

            this.maxFileSize = maxFileSize;
            return this;
        }
        @CustomType.Setter
        public Builder parallelLoadThreads(@Nullable Integer parallelLoadThreads) {

            this.parallelLoadThreads = parallelLoadThreads;
            return this;
        }
        @CustomType.Setter
        public Builder serverTimezone(@Nullable String serverTimezone) {

            this.serverTimezone = serverTimezone;
            return this;
        }
        @CustomType.Setter
        public Builder serviceAccessRoleArn(@Nullable String serviceAccessRoleArn) {

            this.serviceAccessRoleArn = serviceAccessRoleArn;
            return this;
        }
        @CustomType.Setter
        public Builder targetDbType(@Nullable String targetDbType) {

            this.targetDbType = targetDbType;
            return this;
        }
        public EndpointMysqlSettings build() {
            final var _resultValue = new EndpointMysqlSettings();
            _resultValue.afterConnectScript = afterConnectScript;
            _resultValue.authenticationMethod = authenticationMethod;
            _resultValue.cleanSourceMetadataOnMismatch = cleanSourceMetadataOnMismatch;
            _resultValue.eventsPollInterval = eventsPollInterval;
            _resultValue.executeTimeout = executeTimeout;
            _resultValue.maxFileSize = maxFileSize;
            _resultValue.parallelLoadThreads = parallelLoadThreads;
            _resultValue.serverTimezone = serverTimezone;
            _resultValue.serviceAccessRoleArn = serviceAccessRoleArn;
            _resultValue.targetDbType = targetDbType;
            return _resultValue;
        }
    }
}
