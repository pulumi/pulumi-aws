// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.bedrock.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.util.Objects;

@CustomType
public final class AgentDataSourceVectorIngestionConfigurationChunkingConfigurationSemanticChunkingConfiguration {
    /**
     * @return The dissimilarity threshold for splitting chunks.
     * 
     */
    private Double breakpointPercentileThreshold;
    /**
     * @return The buffer size.
     * 
     */
    private Double bufferSize;
    /**
     * @return The maximum number of tokens a chunk can contain.
     * 
     */
    private Double maxToken;

    private AgentDataSourceVectorIngestionConfigurationChunkingConfigurationSemanticChunkingConfiguration() {}
    /**
     * @return The dissimilarity threshold for splitting chunks.
     * 
     */
    public Double breakpointPercentileThreshold() {
        return this.breakpointPercentileThreshold;
    }
    /**
     * @return The buffer size.
     * 
     */
    public Double bufferSize() {
        return this.bufferSize;
    }
    /**
     * @return The maximum number of tokens a chunk can contain.
     * 
     */
    public Double maxToken() {
        return this.maxToken;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AgentDataSourceVectorIngestionConfigurationChunkingConfigurationSemanticChunkingConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Double breakpointPercentileThreshold;
        private Double bufferSize;
        private Double maxToken;
        public Builder() {}
        public Builder(AgentDataSourceVectorIngestionConfigurationChunkingConfigurationSemanticChunkingConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.breakpointPercentileThreshold = defaults.breakpointPercentileThreshold;
    	      this.bufferSize = defaults.bufferSize;
    	      this.maxToken = defaults.maxToken;
        }

        @CustomType.Setter
        public Builder breakpointPercentileThreshold(Double breakpointPercentileThreshold) {
            if (breakpointPercentileThreshold == null) {
              throw new MissingRequiredPropertyException("AgentDataSourceVectorIngestionConfigurationChunkingConfigurationSemanticChunkingConfiguration", "breakpointPercentileThreshold");
            }
            this.breakpointPercentileThreshold = breakpointPercentileThreshold;
            return this;
        }
        @CustomType.Setter
        public Builder bufferSize(Double bufferSize) {
            if (bufferSize == null) {
              throw new MissingRequiredPropertyException("AgentDataSourceVectorIngestionConfigurationChunkingConfigurationSemanticChunkingConfiguration", "bufferSize");
            }
            this.bufferSize = bufferSize;
            return this;
        }
        @CustomType.Setter
        public Builder maxToken(Double maxToken) {
            if (maxToken == null) {
              throw new MissingRequiredPropertyException("AgentDataSourceVectorIngestionConfigurationChunkingConfigurationSemanticChunkingConfiguration", "maxToken");
            }
            this.maxToken = maxToken;
            return this;
        }
        public AgentDataSourceVectorIngestionConfigurationChunkingConfigurationSemanticChunkingConfiguration build() {
            final var _resultValue = new AgentDataSourceVectorIngestionConfigurationChunkingConfigurationSemanticChunkingConfiguration();
            _resultValue.breakpointPercentileThreshold = breakpointPercentileThreshold;
            _resultValue.bufferSize = bufferSize;
            _resultValue.maxToken = maxToken;
            return _resultValue;
        }
    }
}
