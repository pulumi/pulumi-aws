// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.cloudwatch.outputs;

import com.pulumi.aws.cloudwatch.outputs.EventTargetEcsTargetCapacityProviderStrategy;
import com.pulumi.aws.cloudwatch.outputs.EventTargetEcsTargetNetworkConfiguration;
import com.pulumi.aws.cloudwatch.outputs.EventTargetEcsTargetPlacementConstraint;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class EventTargetEcsTarget {
    private @Nullable List<EventTargetEcsTargetCapacityProviderStrategy> capacityProviderStrategies;
    private @Nullable Boolean enableEcsManagedTags;
    private @Nullable Boolean enableExecuteCommand;
    private @Nullable String group;
    private @Nullable String launchType;
    private @Nullable EventTargetEcsTargetNetworkConfiguration networkConfiguration;
    private @Nullable List<EventTargetEcsTargetPlacementConstraint> placementConstraints;
    private @Nullable String platformVersion;
    private @Nullable String propagateTags;
    private @Nullable Map<String,String> tags;
    private @Nullable Integer taskCount;
    private String taskDefinitionArn;

    private EventTargetEcsTarget() {}
    public List<EventTargetEcsTargetCapacityProviderStrategy> capacityProviderStrategies() {
        return this.capacityProviderStrategies == null ? List.of() : this.capacityProviderStrategies;
    }
    public Optional<Boolean> enableEcsManagedTags() {
        return Optional.ofNullable(this.enableEcsManagedTags);
    }
    public Optional<Boolean> enableExecuteCommand() {
        return Optional.ofNullable(this.enableExecuteCommand);
    }
    public Optional<String> group() {
        return Optional.ofNullable(this.group);
    }
    public Optional<String> launchType() {
        return Optional.ofNullable(this.launchType);
    }
    public Optional<EventTargetEcsTargetNetworkConfiguration> networkConfiguration() {
        return Optional.ofNullable(this.networkConfiguration);
    }
    public List<EventTargetEcsTargetPlacementConstraint> placementConstraints() {
        return this.placementConstraints == null ? List.of() : this.placementConstraints;
    }
    public Optional<String> platformVersion() {
        return Optional.ofNullable(this.platformVersion);
    }
    public Optional<String> propagateTags() {
        return Optional.ofNullable(this.propagateTags);
    }
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    public Optional<Integer> taskCount() {
        return Optional.ofNullable(this.taskCount);
    }
    public String taskDefinitionArn() {
        return this.taskDefinitionArn;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EventTargetEcsTarget defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<EventTargetEcsTargetCapacityProviderStrategy> capacityProviderStrategies;
        private @Nullable Boolean enableEcsManagedTags;
        private @Nullable Boolean enableExecuteCommand;
        private @Nullable String group;
        private @Nullable String launchType;
        private @Nullable EventTargetEcsTargetNetworkConfiguration networkConfiguration;
        private @Nullable List<EventTargetEcsTargetPlacementConstraint> placementConstraints;
        private @Nullable String platformVersion;
        private @Nullable String propagateTags;
        private @Nullable Map<String,String> tags;
        private @Nullable Integer taskCount;
        private String taskDefinitionArn;
        public Builder() {}
        public Builder(EventTargetEcsTarget defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.capacityProviderStrategies = defaults.capacityProviderStrategies;
    	      this.enableEcsManagedTags = defaults.enableEcsManagedTags;
    	      this.enableExecuteCommand = defaults.enableExecuteCommand;
    	      this.group = defaults.group;
    	      this.launchType = defaults.launchType;
    	      this.networkConfiguration = defaults.networkConfiguration;
    	      this.placementConstraints = defaults.placementConstraints;
    	      this.platformVersion = defaults.platformVersion;
    	      this.propagateTags = defaults.propagateTags;
    	      this.tags = defaults.tags;
    	      this.taskCount = defaults.taskCount;
    	      this.taskDefinitionArn = defaults.taskDefinitionArn;
        }

        @CustomType.Setter
        public Builder capacityProviderStrategies(@Nullable List<EventTargetEcsTargetCapacityProviderStrategy> capacityProviderStrategies) {
            this.capacityProviderStrategies = capacityProviderStrategies;
            return this;
        }
        public Builder capacityProviderStrategies(EventTargetEcsTargetCapacityProviderStrategy... capacityProviderStrategies) {
            return capacityProviderStrategies(List.of(capacityProviderStrategies));
        }
        @CustomType.Setter
        public Builder enableEcsManagedTags(@Nullable Boolean enableEcsManagedTags) {
            this.enableEcsManagedTags = enableEcsManagedTags;
            return this;
        }
        @CustomType.Setter
        public Builder enableExecuteCommand(@Nullable Boolean enableExecuteCommand) {
            this.enableExecuteCommand = enableExecuteCommand;
            return this;
        }
        @CustomType.Setter
        public Builder group(@Nullable String group) {
            this.group = group;
            return this;
        }
        @CustomType.Setter
        public Builder launchType(@Nullable String launchType) {
            this.launchType = launchType;
            return this;
        }
        @CustomType.Setter
        public Builder networkConfiguration(@Nullable EventTargetEcsTargetNetworkConfiguration networkConfiguration) {
            this.networkConfiguration = networkConfiguration;
            return this;
        }
        @CustomType.Setter
        public Builder placementConstraints(@Nullable List<EventTargetEcsTargetPlacementConstraint> placementConstraints) {
            this.placementConstraints = placementConstraints;
            return this;
        }
        public Builder placementConstraints(EventTargetEcsTargetPlacementConstraint... placementConstraints) {
            return placementConstraints(List.of(placementConstraints));
        }
        @CustomType.Setter
        public Builder platformVersion(@Nullable String platformVersion) {
            this.platformVersion = platformVersion;
            return this;
        }
        @CustomType.Setter
        public Builder propagateTags(@Nullable String propagateTags) {
            this.propagateTags = propagateTags;
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder taskCount(@Nullable Integer taskCount) {
            this.taskCount = taskCount;
            return this;
        }
        @CustomType.Setter
        public Builder taskDefinitionArn(String taskDefinitionArn) {
            this.taskDefinitionArn = Objects.requireNonNull(taskDefinitionArn);
            return this;
        }
        public EventTargetEcsTarget build() {
            final var o = new EventTargetEcsTarget();
            o.capacityProviderStrategies = capacityProviderStrategies;
            o.enableEcsManagedTags = enableEcsManagedTags;
            o.enableExecuteCommand = enableExecuteCommand;
            o.group = group;
            o.launchType = launchType;
            o.networkConfiguration = networkConfiguration;
            o.placementConstraints = placementConstraints;
            o.platformVersion = platformVersion;
            o.propagateTags = propagateTags;
            o.tags = tags;
            o.taskCount = taskCount;
            o.taskDefinitionArn = taskDefinitionArn;
            return o;
        }
    }
}
