// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.bedrock.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AgentKnowledgeBaseStorageConfigurationOpensearchServerlessConfigurationFieldMappingArgs extends com.pulumi.resources.ResourceArgs {

    public static final AgentKnowledgeBaseStorageConfigurationOpensearchServerlessConfigurationFieldMappingArgs Empty = new AgentKnowledgeBaseStorageConfigurationOpensearchServerlessConfigurationFieldMappingArgs();

    /**
     * The name of the field in which Amazon Bedrock stores metadata about the vector store.
     * 
     */
    @Import(name="metadataField")
    private @Nullable Output<String> metadataField;

    /**
     * @return The name of the field in which Amazon Bedrock stores metadata about the vector store.
     * 
     */
    public Optional<Output<String>> metadataField() {
        return Optional.ofNullable(this.metadataField);
    }

    /**
     * The name of the field in which Amazon Bedrock stores the raw text from your data. The text is split according to the chunking strategy you choose.
     * 
     */
    @Import(name="textField")
    private @Nullable Output<String> textField;

    /**
     * @return The name of the field in which Amazon Bedrock stores the raw text from your data. The text is split according to the chunking strategy you choose.
     * 
     */
    public Optional<Output<String>> textField() {
        return Optional.ofNullable(this.textField);
    }

    /**
     * The name of the field in which Amazon Bedrock stores the vector embeddings for your data sources.
     * 
     */
    @Import(name="vectorField")
    private @Nullable Output<String> vectorField;

    /**
     * @return The name of the field in which Amazon Bedrock stores the vector embeddings for your data sources.
     * 
     */
    public Optional<Output<String>> vectorField() {
        return Optional.ofNullable(this.vectorField);
    }

    private AgentKnowledgeBaseStorageConfigurationOpensearchServerlessConfigurationFieldMappingArgs() {}

    private AgentKnowledgeBaseStorageConfigurationOpensearchServerlessConfigurationFieldMappingArgs(AgentKnowledgeBaseStorageConfigurationOpensearchServerlessConfigurationFieldMappingArgs $) {
        this.metadataField = $.metadataField;
        this.textField = $.textField;
        this.vectorField = $.vectorField;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AgentKnowledgeBaseStorageConfigurationOpensearchServerlessConfigurationFieldMappingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AgentKnowledgeBaseStorageConfigurationOpensearchServerlessConfigurationFieldMappingArgs $;

        public Builder() {
            $ = new AgentKnowledgeBaseStorageConfigurationOpensearchServerlessConfigurationFieldMappingArgs();
        }

        public Builder(AgentKnowledgeBaseStorageConfigurationOpensearchServerlessConfigurationFieldMappingArgs defaults) {
            $ = new AgentKnowledgeBaseStorageConfigurationOpensearchServerlessConfigurationFieldMappingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param metadataField The name of the field in which Amazon Bedrock stores metadata about the vector store.
         * 
         * @return builder
         * 
         */
        public Builder metadataField(@Nullable Output<String> metadataField) {
            $.metadataField = metadataField;
            return this;
        }

        /**
         * @param metadataField The name of the field in which Amazon Bedrock stores metadata about the vector store.
         * 
         * @return builder
         * 
         */
        public Builder metadataField(String metadataField) {
            return metadataField(Output.of(metadataField));
        }

        /**
         * @param textField The name of the field in which Amazon Bedrock stores the raw text from your data. The text is split according to the chunking strategy you choose.
         * 
         * @return builder
         * 
         */
        public Builder textField(@Nullable Output<String> textField) {
            $.textField = textField;
            return this;
        }

        /**
         * @param textField The name of the field in which Amazon Bedrock stores the raw text from your data. The text is split according to the chunking strategy you choose.
         * 
         * @return builder
         * 
         */
        public Builder textField(String textField) {
            return textField(Output.of(textField));
        }

        /**
         * @param vectorField The name of the field in which Amazon Bedrock stores the vector embeddings for your data sources.
         * 
         * @return builder
         * 
         */
        public Builder vectorField(@Nullable Output<String> vectorField) {
            $.vectorField = vectorField;
            return this;
        }

        /**
         * @param vectorField The name of the field in which Amazon Bedrock stores the vector embeddings for your data sources.
         * 
         * @return builder
         * 
         */
        public Builder vectorField(String vectorField) {
            return vectorField(Output.of(vectorField));
        }

        public AgentKnowledgeBaseStorageConfigurationOpensearchServerlessConfigurationFieldMappingArgs build() {
            return $;
        }
    }

}
