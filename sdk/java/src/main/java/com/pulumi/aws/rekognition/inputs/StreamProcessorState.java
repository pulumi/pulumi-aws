// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.rekognition.inputs;

import com.pulumi.aws.rekognition.inputs.StreamProcessorDataSharingPreferenceArgs;
import com.pulumi.aws.rekognition.inputs.StreamProcessorInputArgs;
import com.pulumi.aws.rekognition.inputs.StreamProcessorNotificationChannelArgs;
import com.pulumi.aws.rekognition.inputs.StreamProcessorOutputArgs;
import com.pulumi.aws.rekognition.inputs.StreamProcessorRegionsOfInterestArgs;
import com.pulumi.aws.rekognition.inputs.StreamProcessorSettingsArgs;
import com.pulumi.aws.rekognition.inputs.StreamProcessorTimeoutsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class StreamProcessorState extends com.pulumi.resources.ResourceArgs {

    public static final StreamProcessorState Empty = new StreamProcessorState();

    /**
     * ARN of the Stream Processor.
     * 
     */
    @Import(name="arn")
    private @Nullable Output<String> arn;

    /**
     * @return ARN of the Stream Processor.
     * 
     */
    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    /**
     * See `data_sharing_preference`.
     * 
     */
    @Import(name="dataSharingPreference")
    private @Nullable Output<StreamProcessorDataSharingPreferenceArgs> dataSharingPreference;

    /**
     * @return See `data_sharing_preference`.
     * 
     */
    public Optional<Output<StreamProcessorDataSharingPreferenceArgs>> dataSharingPreference() {
        return Optional.ofNullable(this.dataSharingPreference);
    }

    /**
     * Input video stream. See `input`.
     * 
     */
    @Import(name="input")
    private @Nullable Output<StreamProcessorInputArgs> input;

    /**
     * @return Input video stream. See `input`.
     * 
     */
    public Optional<Output<StreamProcessorInputArgs>> input() {
        return Optional.ofNullable(this.input);
    }

    /**
     * Optional parameter for label detection stream processors.
     * 
     */
    @Import(name="kmsKeyId")
    private @Nullable Output<String> kmsKeyId;

    /**
     * @return Optional parameter for label detection stream processors.
     * 
     */
    public Optional<Output<String>> kmsKeyId() {
        return Optional.ofNullable(this.kmsKeyId);
    }

    /**
     * The name of the Stream Processor.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the Stream Processor.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The Amazon Simple Notification Service topic to which Amazon Rekognition publishes the completion status. See `notification_channel`.
     * 
     */
    @Import(name="notificationChannel")
    private @Nullable Output<StreamProcessorNotificationChannelArgs> notificationChannel;

    /**
     * @return The Amazon Simple Notification Service topic to which Amazon Rekognition publishes the completion status. See `notification_channel`.
     * 
     */
    public Optional<Output<StreamProcessorNotificationChannelArgs>> notificationChannel() {
        return Optional.ofNullable(this.notificationChannel);
    }

    /**
     * Kinesis data stream stream or Amazon S3 bucket location to which Amazon Rekognition Video puts the analysis results. See `output`.
     * 
     */
    @Import(name="output")
    private @Nullable Output<StreamProcessorOutputArgs> output;

    /**
     * @return Kinesis data stream stream or Amazon S3 bucket location to which Amazon Rekognition Video puts the analysis results. See `output`.
     * 
     */
    public Optional<Output<StreamProcessorOutputArgs>> output() {
        return Optional.ofNullable(this.output);
    }

    /**
     * Specifies locations in the frames where Amazon Rekognition checks for objects or people. See `regions_of_interest`.
     * 
     */
    @Import(name="regionsOfInterests")
    private @Nullable Output<List<StreamProcessorRegionsOfInterestArgs>> regionsOfInterests;

    /**
     * @return Specifies locations in the frames where Amazon Rekognition checks for objects or people. See `regions_of_interest`.
     * 
     */
    public Optional<Output<List<StreamProcessorRegionsOfInterestArgs>>> regionsOfInterests() {
        return Optional.ofNullable(this.regionsOfInterests);
    }

    /**
     * The Amazon Resource Number (ARN) of the IAM role that allows access to the stream processor. The IAM role provides Rekognition read permissions for a Kinesis stream. It also provides write permissions to an Amazon S3 bucket and Amazon Simple Notification Service topic for a label detection stream processor. This is required for both face search and label detection stream processors.
     * 
     */
    @Import(name="roleArn")
    private @Nullable Output<String> roleArn;

    /**
     * @return The Amazon Resource Number (ARN) of the IAM role that allows access to the stream processor. The IAM role provides Rekognition read permissions for a Kinesis stream. It also provides write permissions to an Amazon S3 bucket and Amazon Simple Notification Service topic for a label detection stream processor. This is required for both face search and label detection stream processors.
     * 
     */
    public Optional<Output<String>> roleArn() {
        return Optional.ofNullable(this.roleArn);
    }

    /**
     * Input parameters used in a streaming video analyzed by a stream processor. See `settings`.
     * 
     * The following arguments are optional:
     * 
     */
    @Import(name="settings")
    private @Nullable Output<StreamProcessorSettingsArgs> settings;

    /**
     * @return Input parameters used in a streaming video analyzed by a stream processor. See `settings`.
     * 
     * The following arguments are optional:
     * 
     */
    public Optional<Output<StreamProcessorSettingsArgs>> settings() {
        return Optional.ofNullable(this.settings);
    }

    /**
     * (**Deprecated**) ARN of the Stream Processor.
     * Use `arn` instead.
     * 
     * @deprecated
     * Use &#39;arn&#39; instead. This attribute will be removed in a future version of the provider.
     * 
     */
    @Deprecated /* Use 'arn' instead. This attribute will be removed in a future version of the provider. */
    @Import(name="streamProcessorArn")
    private @Nullable Output<String> streamProcessorArn;

    /**
     * @return (**Deprecated**) ARN of the Stream Processor.
     * Use `arn` instead.
     * 
     * @deprecated
     * Use &#39;arn&#39; instead. This attribute will be removed in a future version of the provider.
     * 
     */
    @Deprecated /* Use 'arn' instead. This attribute will be removed in a future version of the provider. */
    public Optional<Output<String>> streamProcessorArn() {
        return Optional.ofNullable(this.streamProcessorArn);
    }

    /**
     * A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    /**
     * @return A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    @Import(name="timeouts")
    private @Nullable Output<StreamProcessorTimeoutsArgs> timeouts;

    public Optional<Output<StreamProcessorTimeoutsArgs>> timeouts() {
        return Optional.ofNullable(this.timeouts);
    }

    private StreamProcessorState() {}

    private StreamProcessorState(StreamProcessorState $) {
        this.arn = $.arn;
        this.dataSharingPreference = $.dataSharingPreference;
        this.input = $.input;
        this.kmsKeyId = $.kmsKeyId;
        this.name = $.name;
        this.notificationChannel = $.notificationChannel;
        this.output = $.output;
        this.regionsOfInterests = $.regionsOfInterests;
        this.roleArn = $.roleArn;
        this.settings = $.settings;
        this.streamProcessorArn = $.streamProcessorArn;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
        this.timeouts = $.timeouts;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StreamProcessorState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StreamProcessorState $;

        public Builder() {
            $ = new StreamProcessorState();
        }

        public Builder(StreamProcessorState defaults) {
            $ = new StreamProcessorState(Objects.requireNonNull(defaults));
        }

        /**
         * @param arn ARN of the Stream Processor.
         * 
         * @return builder
         * 
         */
        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        /**
         * @param arn ARN of the Stream Processor.
         * 
         * @return builder
         * 
         */
        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        /**
         * @param dataSharingPreference See `data_sharing_preference`.
         * 
         * @return builder
         * 
         */
        public Builder dataSharingPreference(@Nullable Output<StreamProcessorDataSharingPreferenceArgs> dataSharingPreference) {
            $.dataSharingPreference = dataSharingPreference;
            return this;
        }

        /**
         * @param dataSharingPreference See `data_sharing_preference`.
         * 
         * @return builder
         * 
         */
        public Builder dataSharingPreference(StreamProcessorDataSharingPreferenceArgs dataSharingPreference) {
            return dataSharingPreference(Output.of(dataSharingPreference));
        }

        /**
         * @param input Input video stream. See `input`.
         * 
         * @return builder
         * 
         */
        public Builder input(@Nullable Output<StreamProcessorInputArgs> input) {
            $.input = input;
            return this;
        }

        /**
         * @param input Input video stream. See `input`.
         * 
         * @return builder
         * 
         */
        public Builder input(StreamProcessorInputArgs input) {
            return input(Output.of(input));
        }

        /**
         * @param kmsKeyId Optional parameter for label detection stream processors.
         * 
         * @return builder
         * 
         */
        public Builder kmsKeyId(@Nullable Output<String> kmsKeyId) {
            $.kmsKeyId = kmsKeyId;
            return this;
        }

        /**
         * @param kmsKeyId Optional parameter for label detection stream processors.
         * 
         * @return builder
         * 
         */
        public Builder kmsKeyId(String kmsKeyId) {
            return kmsKeyId(Output.of(kmsKeyId));
        }

        /**
         * @param name The name of the Stream Processor.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the Stream Processor.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param notificationChannel The Amazon Simple Notification Service topic to which Amazon Rekognition publishes the completion status. See `notification_channel`.
         * 
         * @return builder
         * 
         */
        public Builder notificationChannel(@Nullable Output<StreamProcessorNotificationChannelArgs> notificationChannel) {
            $.notificationChannel = notificationChannel;
            return this;
        }

        /**
         * @param notificationChannel The Amazon Simple Notification Service topic to which Amazon Rekognition publishes the completion status. See `notification_channel`.
         * 
         * @return builder
         * 
         */
        public Builder notificationChannel(StreamProcessorNotificationChannelArgs notificationChannel) {
            return notificationChannel(Output.of(notificationChannel));
        }

        /**
         * @param output Kinesis data stream stream or Amazon S3 bucket location to which Amazon Rekognition Video puts the analysis results. See `output`.
         * 
         * @return builder
         * 
         */
        public Builder output(@Nullable Output<StreamProcessorOutputArgs> output) {
            $.output = output;
            return this;
        }

        /**
         * @param output Kinesis data stream stream or Amazon S3 bucket location to which Amazon Rekognition Video puts the analysis results. See `output`.
         * 
         * @return builder
         * 
         */
        public Builder output(StreamProcessorOutputArgs output) {
            return output(Output.of(output));
        }

        /**
         * @param regionsOfInterests Specifies locations in the frames where Amazon Rekognition checks for objects or people. See `regions_of_interest`.
         * 
         * @return builder
         * 
         */
        public Builder regionsOfInterests(@Nullable Output<List<StreamProcessorRegionsOfInterestArgs>> regionsOfInterests) {
            $.regionsOfInterests = regionsOfInterests;
            return this;
        }

        /**
         * @param regionsOfInterests Specifies locations in the frames where Amazon Rekognition checks for objects or people. See `regions_of_interest`.
         * 
         * @return builder
         * 
         */
        public Builder regionsOfInterests(List<StreamProcessorRegionsOfInterestArgs> regionsOfInterests) {
            return regionsOfInterests(Output.of(regionsOfInterests));
        }

        /**
         * @param regionsOfInterests Specifies locations in the frames where Amazon Rekognition checks for objects or people. See `regions_of_interest`.
         * 
         * @return builder
         * 
         */
        public Builder regionsOfInterests(StreamProcessorRegionsOfInterestArgs... regionsOfInterests) {
            return regionsOfInterests(List.of(regionsOfInterests));
        }

        /**
         * @param roleArn The Amazon Resource Number (ARN) of the IAM role that allows access to the stream processor. The IAM role provides Rekognition read permissions for a Kinesis stream. It also provides write permissions to an Amazon S3 bucket and Amazon Simple Notification Service topic for a label detection stream processor. This is required for both face search and label detection stream processors.
         * 
         * @return builder
         * 
         */
        public Builder roleArn(@Nullable Output<String> roleArn) {
            $.roleArn = roleArn;
            return this;
        }

        /**
         * @param roleArn The Amazon Resource Number (ARN) of the IAM role that allows access to the stream processor. The IAM role provides Rekognition read permissions for a Kinesis stream. It also provides write permissions to an Amazon S3 bucket and Amazon Simple Notification Service topic for a label detection stream processor. This is required for both face search and label detection stream processors.
         * 
         * @return builder
         * 
         */
        public Builder roleArn(String roleArn) {
            return roleArn(Output.of(roleArn));
        }

        /**
         * @param settings Input parameters used in a streaming video analyzed by a stream processor. See `settings`.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder settings(@Nullable Output<StreamProcessorSettingsArgs> settings) {
            $.settings = settings;
            return this;
        }

        /**
         * @param settings Input parameters used in a streaming video analyzed by a stream processor. See `settings`.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder settings(StreamProcessorSettingsArgs settings) {
            return settings(Output.of(settings));
        }

        /**
         * @param streamProcessorArn (**Deprecated**) ARN of the Stream Processor.
         * Use `arn` instead.
         * 
         * @return builder
         * 
         * @deprecated
         * Use &#39;arn&#39; instead. This attribute will be removed in a future version of the provider.
         * 
         */
        @Deprecated /* Use 'arn' instead. This attribute will be removed in a future version of the provider. */
        public Builder streamProcessorArn(@Nullable Output<String> streamProcessorArn) {
            $.streamProcessorArn = streamProcessorArn;
            return this;
        }

        /**
         * @param streamProcessorArn (**Deprecated**) ARN of the Stream Processor.
         * Use `arn` instead.
         * 
         * @return builder
         * 
         * @deprecated
         * Use &#39;arn&#39; instead. This attribute will be removed in a future version of the provider.
         * 
         */
        @Deprecated /* Use 'arn' instead. This attribute will be removed in a future version of the provider. */
        public Builder streamProcessorArn(String streamProcessorArn) {
            return streamProcessorArn(Output.of(streamProcessorArn));
        }

        /**
         * @param tags A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tagsAll A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
         * 
         * @return builder
         * 
         * @deprecated
         * Please use `tags` instead.
         * 
         */
        @Deprecated /* Please use `tags` instead. */
        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        /**
         * @param tagsAll A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
         * 
         * @return builder
         * 
         * @deprecated
         * Please use `tags` instead.
         * 
         */
        @Deprecated /* Please use `tags` instead. */
        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        public Builder timeouts(@Nullable Output<StreamProcessorTimeoutsArgs> timeouts) {
            $.timeouts = timeouts;
            return this;
        }

        public Builder timeouts(StreamProcessorTimeoutsArgs timeouts) {
            return timeouts(Output.of(timeouts));
        }

        public StreamProcessorState build() {
            return $;
        }
    }

}
