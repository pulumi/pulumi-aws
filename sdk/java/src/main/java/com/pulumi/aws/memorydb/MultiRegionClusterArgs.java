// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.memorydb;

import com.pulumi.aws.memorydb.inputs.MultiRegionClusterTimeoutsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MultiRegionClusterArgs extends com.pulumi.resources.ResourceArgs {

    public static final MultiRegionClusterArgs Empty = new MultiRegionClusterArgs();

    /**
     * description for the multi-region cluster.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return description for the multi-region cluster.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The name of the engine to be used for the multi-region cluster. Valid values are `redis` and `valkey`.
     * 
     */
    @Import(name="engine")
    private @Nullable Output<String> engine;

    /**
     * @return The name of the engine to be used for the multi-region cluster. Valid values are `redis` and `valkey`.
     * 
     */
    public Optional<Output<String>> engine() {
        return Optional.ofNullable(this.engine);
    }

    /**
     * The version of the engine to be used for the multi-region cluster. Downgrades are not supported.
     * 
     */
    @Import(name="engineVersion")
    private @Nullable Output<String> engineVersion;

    /**
     * @return The version of the engine to be used for the multi-region cluster. Downgrades are not supported.
     * 
     */
    public Optional<Output<String>> engineVersion() {
        return Optional.ofNullable(this.engineVersion);
    }

    /**
     * A suffix to be added to the multi-region cluster name. An AWS generated prefix is automatically applied to the multi-region cluster name when it is created.
     * 
     */
    @Import(name="multiRegionClusterNameSuffix", required=true)
    private Output<String> multiRegionClusterNameSuffix;

    /**
     * @return A suffix to be added to the multi-region cluster name. An AWS generated prefix is automatically applied to the multi-region cluster name when it is created.
     * 
     */
    public Output<String> multiRegionClusterNameSuffix() {
        return this.multiRegionClusterNameSuffix;
    }

    /**
     * The name of the multi-region parameter group to be associated with the cluster.
     * 
     */
    @Import(name="multiRegionParameterGroupName")
    private @Nullable Output<String> multiRegionParameterGroupName;

    /**
     * @return The name of the multi-region parameter group to be associated with the cluster.
     * 
     */
    public Optional<Output<String>> multiRegionParameterGroupName() {
        return Optional.ofNullable(this.multiRegionParameterGroupName);
    }

    /**
     * The node type to be used for the multi-region cluster.
     * 
     * The following arguments are optional:
     * 
     */
    @Import(name="nodeType", required=true)
    private Output<String> nodeType;

    /**
     * @return The node type to be used for the multi-region cluster.
     * 
     * The following arguments are optional:
     * 
     */
    public Output<String> nodeType() {
        return this.nodeType;
    }

    /**
     * The number of shards for the multi-region cluster.
     * 
     */
    @Import(name="numShards")
    private @Nullable Output<Integer> numShards;

    /**
     * @return The number of shards for the multi-region cluster.
     * 
     */
    public Optional<Output<Integer>> numShards() {
        return Optional.ofNullable(this.numShards);
    }

    /**
     * A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="timeouts")
    private @Nullable Output<MultiRegionClusterTimeoutsArgs> timeouts;

    public Optional<Output<MultiRegionClusterTimeoutsArgs>> timeouts() {
        return Optional.ofNullable(this.timeouts);
    }

    /**
     * A flag to enable in-transit encryption on the cluster.
     * 
     */
    @Import(name="tlsEnabled")
    private @Nullable Output<Boolean> tlsEnabled;

    /**
     * @return A flag to enable in-transit encryption on the cluster.
     * 
     */
    public Optional<Output<Boolean>> tlsEnabled() {
        return Optional.ofNullable(this.tlsEnabled);
    }

    @Import(name="updateStrategy")
    private @Nullable Output<String> updateStrategy;

    public Optional<Output<String>> updateStrategy() {
        return Optional.ofNullable(this.updateStrategy);
    }

    private MultiRegionClusterArgs() {}

    private MultiRegionClusterArgs(MultiRegionClusterArgs $) {
        this.description = $.description;
        this.engine = $.engine;
        this.engineVersion = $.engineVersion;
        this.multiRegionClusterNameSuffix = $.multiRegionClusterNameSuffix;
        this.multiRegionParameterGroupName = $.multiRegionParameterGroupName;
        this.nodeType = $.nodeType;
        this.numShards = $.numShards;
        this.tags = $.tags;
        this.timeouts = $.timeouts;
        this.tlsEnabled = $.tlsEnabled;
        this.updateStrategy = $.updateStrategy;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MultiRegionClusterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MultiRegionClusterArgs $;

        public Builder() {
            $ = new MultiRegionClusterArgs();
        }

        public Builder(MultiRegionClusterArgs defaults) {
            $ = new MultiRegionClusterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description description for the multi-region cluster.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description description for the multi-region cluster.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param engine The name of the engine to be used for the multi-region cluster. Valid values are `redis` and `valkey`.
         * 
         * @return builder
         * 
         */
        public Builder engine(@Nullable Output<String> engine) {
            $.engine = engine;
            return this;
        }

        /**
         * @param engine The name of the engine to be used for the multi-region cluster. Valid values are `redis` and `valkey`.
         * 
         * @return builder
         * 
         */
        public Builder engine(String engine) {
            return engine(Output.of(engine));
        }

        /**
         * @param engineVersion The version of the engine to be used for the multi-region cluster. Downgrades are not supported.
         * 
         * @return builder
         * 
         */
        public Builder engineVersion(@Nullable Output<String> engineVersion) {
            $.engineVersion = engineVersion;
            return this;
        }

        /**
         * @param engineVersion The version of the engine to be used for the multi-region cluster. Downgrades are not supported.
         * 
         * @return builder
         * 
         */
        public Builder engineVersion(String engineVersion) {
            return engineVersion(Output.of(engineVersion));
        }

        /**
         * @param multiRegionClusterNameSuffix A suffix to be added to the multi-region cluster name. An AWS generated prefix is automatically applied to the multi-region cluster name when it is created.
         * 
         * @return builder
         * 
         */
        public Builder multiRegionClusterNameSuffix(Output<String> multiRegionClusterNameSuffix) {
            $.multiRegionClusterNameSuffix = multiRegionClusterNameSuffix;
            return this;
        }

        /**
         * @param multiRegionClusterNameSuffix A suffix to be added to the multi-region cluster name. An AWS generated prefix is automatically applied to the multi-region cluster name when it is created.
         * 
         * @return builder
         * 
         */
        public Builder multiRegionClusterNameSuffix(String multiRegionClusterNameSuffix) {
            return multiRegionClusterNameSuffix(Output.of(multiRegionClusterNameSuffix));
        }

        /**
         * @param multiRegionParameterGroupName The name of the multi-region parameter group to be associated with the cluster.
         * 
         * @return builder
         * 
         */
        public Builder multiRegionParameterGroupName(@Nullable Output<String> multiRegionParameterGroupName) {
            $.multiRegionParameterGroupName = multiRegionParameterGroupName;
            return this;
        }

        /**
         * @param multiRegionParameterGroupName The name of the multi-region parameter group to be associated with the cluster.
         * 
         * @return builder
         * 
         */
        public Builder multiRegionParameterGroupName(String multiRegionParameterGroupName) {
            return multiRegionParameterGroupName(Output.of(multiRegionParameterGroupName));
        }

        /**
         * @param nodeType The node type to be used for the multi-region cluster.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder nodeType(Output<String> nodeType) {
            $.nodeType = nodeType;
            return this;
        }

        /**
         * @param nodeType The node type to be used for the multi-region cluster.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder nodeType(String nodeType) {
            return nodeType(Output.of(nodeType));
        }

        /**
         * @param numShards The number of shards for the multi-region cluster.
         * 
         * @return builder
         * 
         */
        public Builder numShards(@Nullable Output<Integer> numShards) {
            $.numShards = numShards;
            return this;
        }

        /**
         * @param numShards The number of shards for the multi-region cluster.
         * 
         * @return builder
         * 
         */
        public Builder numShards(Integer numShards) {
            return numShards(Output.of(numShards));
        }

        /**
         * @param tags A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder timeouts(@Nullable Output<MultiRegionClusterTimeoutsArgs> timeouts) {
            $.timeouts = timeouts;
            return this;
        }

        public Builder timeouts(MultiRegionClusterTimeoutsArgs timeouts) {
            return timeouts(Output.of(timeouts));
        }

        /**
         * @param tlsEnabled A flag to enable in-transit encryption on the cluster.
         * 
         * @return builder
         * 
         */
        public Builder tlsEnabled(@Nullable Output<Boolean> tlsEnabled) {
            $.tlsEnabled = tlsEnabled;
            return this;
        }

        /**
         * @param tlsEnabled A flag to enable in-transit encryption on the cluster.
         * 
         * @return builder
         * 
         */
        public Builder tlsEnabled(Boolean tlsEnabled) {
            return tlsEnabled(Output.of(tlsEnabled));
        }

        public Builder updateStrategy(@Nullable Output<String> updateStrategy) {
            $.updateStrategy = updateStrategy;
            return this;
        }

        public Builder updateStrategy(String updateStrategy) {
            return updateStrategy(Output.of(updateStrategy));
        }

        public MultiRegionClusterArgs build() {
            if ($.multiRegionClusterNameSuffix == null) {
                throw new MissingRequiredPropertyException("MultiRegionClusterArgs", "multiRegionClusterNameSuffix");
            }
            if ($.nodeType == null) {
                throw new MissingRequiredPropertyException("MultiRegionClusterArgs", "nodeType");
            }
            return $;
        }
    }

}
