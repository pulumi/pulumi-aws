// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.outputs;

import com.pulumi.aws.quicksight.outputs.Column;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class CategoryFilter {
    private List<String> categoryValues;
    private Column column;

    private CategoryFilter() {}
    public List<String> categoryValues() {
        return this.categoryValues;
    }
    public Column column() {
        return this.column;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CategoryFilter defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> categoryValues;
        private Column column;
        public Builder() {}
        public Builder(CategoryFilter defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.categoryValues = defaults.categoryValues;
    	      this.column = defaults.column;
        }

        @CustomType.Setter
        public Builder categoryValues(List<String> categoryValues) {
            if (categoryValues == null) {
              throw new MissingRequiredPropertyException("CategoryFilter", "categoryValues");
            }
            this.categoryValues = categoryValues;
            return this;
        }
        public Builder categoryValues(String... categoryValues) {
            return categoryValues(List.of(categoryValues));
        }
        @CustomType.Setter
        public Builder column(Column column) {
            if (column == null) {
              throw new MissingRequiredPropertyException("CategoryFilter", "column");
            }
            this.column = column;
            return this;
        }
        public CategoryFilter build() {
            final var _resultValue = new CategoryFilter();
            _resultValue.categoryValues = categoryValues;
            _resultValue.column = column;
            return _resultValue;
        }
    }
}
