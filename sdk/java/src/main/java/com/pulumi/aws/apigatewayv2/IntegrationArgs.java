// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.apigatewayv2;

import com.pulumi.aws.apigatewayv2.inputs.IntegrationResponseParameterArgs;
import com.pulumi.aws.apigatewayv2.inputs.IntegrationTlsConfigArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IntegrationArgs extends com.pulumi.resources.ResourceArgs {

    public static final IntegrationArgs Empty = new IntegrationArgs();

    @Import(name="apiId", required=true)
    private Output<String> apiId;

    public Output<String> apiId() {
        return this.apiId;
    }

    @Import(name="connectionId")
    private @Nullable Output<String> connectionId;

    public Optional<Output<String>> connectionId() {
        return Optional.ofNullable(this.connectionId);
    }

    @Import(name="connectionType")
    private @Nullable Output<String> connectionType;

    public Optional<Output<String>> connectionType() {
        return Optional.ofNullable(this.connectionType);
    }

    @Import(name="contentHandlingStrategy")
    private @Nullable Output<String> contentHandlingStrategy;

    public Optional<Output<String>> contentHandlingStrategy() {
        return Optional.ofNullable(this.contentHandlingStrategy);
    }

    @Import(name="credentialsArn")
    private @Nullable Output<String> credentialsArn;

    public Optional<Output<String>> credentialsArn() {
        return Optional.ofNullable(this.credentialsArn);
    }

    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="integrationMethod")
    private @Nullable Output<String> integrationMethod;

    public Optional<Output<String>> integrationMethod() {
        return Optional.ofNullable(this.integrationMethod);
    }

    @Import(name="integrationSubtype")
    private @Nullable Output<String> integrationSubtype;

    public Optional<Output<String>> integrationSubtype() {
        return Optional.ofNullable(this.integrationSubtype);
    }

    @Import(name="integrationType", required=true)
    private Output<String> integrationType;

    public Output<String> integrationType() {
        return this.integrationType;
    }

    @Import(name="integrationUri")
    private @Nullable Output<String> integrationUri;

    public Optional<Output<String>> integrationUri() {
        return Optional.ofNullable(this.integrationUri);
    }

    @Import(name="passthroughBehavior")
    private @Nullable Output<String> passthroughBehavior;

    public Optional<Output<String>> passthroughBehavior() {
        return Optional.ofNullable(this.passthroughBehavior);
    }

    @Import(name="payloadFormatVersion")
    private @Nullable Output<String> payloadFormatVersion;

    public Optional<Output<String>> payloadFormatVersion() {
        return Optional.ofNullable(this.payloadFormatVersion);
    }

    @Import(name="requestParameters")
    private @Nullable Output<Map<String,String>> requestParameters;

    public Optional<Output<Map<String,String>>> requestParameters() {
        return Optional.ofNullable(this.requestParameters);
    }

    @Import(name="requestTemplates")
    private @Nullable Output<Map<String,String>> requestTemplates;

    public Optional<Output<Map<String,String>>> requestTemplates() {
        return Optional.ofNullable(this.requestTemplates);
    }

    @Import(name="responseParameters")
    private @Nullable Output<List<IntegrationResponseParameterArgs>> responseParameters;

    public Optional<Output<List<IntegrationResponseParameterArgs>>> responseParameters() {
        return Optional.ofNullable(this.responseParameters);
    }

    @Import(name="templateSelectionExpression")
    private @Nullable Output<String> templateSelectionExpression;

    public Optional<Output<String>> templateSelectionExpression() {
        return Optional.ofNullable(this.templateSelectionExpression);
    }

    @Import(name="timeoutMilliseconds")
    private @Nullable Output<Integer> timeoutMilliseconds;

    public Optional<Output<Integer>> timeoutMilliseconds() {
        return Optional.ofNullable(this.timeoutMilliseconds);
    }

    @Import(name="tlsConfig")
    private @Nullable Output<IntegrationTlsConfigArgs> tlsConfig;

    public Optional<Output<IntegrationTlsConfigArgs>> tlsConfig() {
        return Optional.ofNullable(this.tlsConfig);
    }

    private IntegrationArgs() {}

    private IntegrationArgs(IntegrationArgs $) {
        this.apiId = $.apiId;
        this.connectionId = $.connectionId;
        this.connectionType = $.connectionType;
        this.contentHandlingStrategy = $.contentHandlingStrategy;
        this.credentialsArn = $.credentialsArn;
        this.description = $.description;
        this.integrationMethod = $.integrationMethod;
        this.integrationSubtype = $.integrationSubtype;
        this.integrationType = $.integrationType;
        this.integrationUri = $.integrationUri;
        this.passthroughBehavior = $.passthroughBehavior;
        this.payloadFormatVersion = $.payloadFormatVersion;
        this.requestParameters = $.requestParameters;
        this.requestTemplates = $.requestTemplates;
        this.responseParameters = $.responseParameters;
        this.templateSelectionExpression = $.templateSelectionExpression;
        this.timeoutMilliseconds = $.timeoutMilliseconds;
        this.tlsConfig = $.tlsConfig;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IntegrationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IntegrationArgs $;

        public Builder() {
            $ = new IntegrationArgs();
        }

        public Builder(IntegrationArgs defaults) {
            $ = new IntegrationArgs(Objects.requireNonNull(defaults));
        }

        public Builder apiId(Output<String> apiId) {
            $.apiId = apiId;
            return this;
        }

        public Builder apiId(String apiId) {
            return apiId(Output.of(apiId));
        }

        public Builder connectionId(@Nullable Output<String> connectionId) {
            $.connectionId = connectionId;
            return this;
        }

        public Builder connectionId(String connectionId) {
            return connectionId(Output.of(connectionId));
        }

        public Builder connectionType(@Nullable Output<String> connectionType) {
            $.connectionType = connectionType;
            return this;
        }

        public Builder connectionType(String connectionType) {
            return connectionType(Output.of(connectionType));
        }

        public Builder contentHandlingStrategy(@Nullable Output<String> contentHandlingStrategy) {
            $.contentHandlingStrategy = contentHandlingStrategy;
            return this;
        }

        public Builder contentHandlingStrategy(String contentHandlingStrategy) {
            return contentHandlingStrategy(Output.of(contentHandlingStrategy));
        }

        public Builder credentialsArn(@Nullable Output<String> credentialsArn) {
            $.credentialsArn = credentialsArn;
            return this;
        }

        public Builder credentialsArn(String credentialsArn) {
            return credentialsArn(Output.of(credentialsArn));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder integrationMethod(@Nullable Output<String> integrationMethod) {
            $.integrationMethod = integrationMethod;
            return this;
        }

        public Builder integrationMethod(String integrationMethod) {
            return integrationMethod(Output.of(integrationMethod));
        }

        public Builder integrationSubtype(@Nullable Output<String> integrationSubtype) {
            $.integrationSubtype = integrationSubtype;
            return this;
        }

        public Builder integrationSubtype(String integrationSubtype) {
            return integrationSubtype(Output.of(integrationSubtype));
        }

        public Builder integrationType(Output<String> integrationType) {
            $.integrationType = integrationType;
            return this;
        }

        public Builder integrationType(String integrationType) {
            return integrationType(Output.of(integrationType));
        }

        public Builder integrationUri(@Nullable Output<String> integrationUri) {
            $.integrationUri = integrationUri;
            return this;
        }

        public Builder integrationUri(String integrationUri) {
            return integrationUri(Output.of(integrationUri));
        }

        public Builder passthroughBehavior(@Nullable Output<String> passthroughBehavior) {
            $.passthroughBehavior = passthroughBehavior;
            return this;
        }

        public Builder passthroughBehavior(String passthroughBehavior) {
            return passthroughBehavior(Output.of(passthroughBehavior));
        }

        public Builder payloadFormatVersion(@Nullable Output<String> payloadFormatVersion) {
            $.payloadFormatVersion = payloadFormatVersion;
            return this;
        }

        public Builder payloadFormatVersion(String payloadFormatVersion) {
            return payloadFormatVersion(Output.of(payloadFormatVersion));
        }

        public Builder requestParameters(@Nullable Output<Map<String,String>> requestParameters) {
            $.requestParameters = requestParameters;
            return this;
        }

        public Builder requestParameters(Map<String,String> requestParameters) {
            return requestParameters(Output.of(requestParameters));
        }

        public Builder requestTemplates(@Nullable Output<Map<String,String>> requestTemplates) {
            $.requestTemplates = requestTemplates;
            return this;
        }

        public Builder requestTemplates(Map<String,String> requestTemplates) {
            return requestTemplates(Output.of(requestTemplates));
        }

        public Builder responseParameters(@Nullable Output<List<IntegrationResponseParameterArgs>> responseParameters) {
            $.responseParameters = responseParameters;
            return this;
        }

        public Builder responseParameters(List<IntegrationResponseParameterArgs> responseParameters) {
            return responseParameters(Output.of(responseParameters));
        }

        public Builder responseParameters(IntegrationResponseParameterArgs... responseParameters) {
            return responseParameters(List.of(responseParameters));
        }

        public Builder templateSelectionExpression(@Nullable Output<String> templateSelectionExpression) {
            $.templateSelectionExpression = templateSelectionExpression;
            return this;
        }

        public Builder templateSelectionExpression(String templateSelectionExpression) {
            return templateSelectionExpression(Output.of(templateSelectionExpression));
        }

        public Builder timeoutMilliseconds(@Nullable Output<Integer> timeoutMilliseconds) {
            $.timeoutMilliseconds = timeoutMilliseconds;
            return this;
        }

        public Builder timeoutMilliseconds(Integer timeoutMilliseconds) {
            return timeoutMilliseconds(Output.of(timeoutMilliseconds));
        }

        public Builder tlsConfig(@Nullable Output<IntegrationTlsConfigArgs> tlsConfig) {
            $.tlsConfig = tlsConfig;
            return this;
        }

        public Builder tlsConfig(IntegrationTlsConfigArgs tlsConfig) {
            return tlsConfig(Output.of(tlsConfig));
        }

        public IntegrationArgs build() {
            $.apiId = Objects.requireNonNull($.apiId, "expected parameter 'apiId' to be non-null");
            $.integrationType = Objects.requireNonNull($.integrationType, "expected parameter 'integrationType' to be non-null");
            return $;
        }
    }

}
