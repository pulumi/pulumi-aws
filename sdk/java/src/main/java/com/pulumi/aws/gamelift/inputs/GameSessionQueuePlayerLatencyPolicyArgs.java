// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.gamelift.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GameSessionQueuePlayerLatencyPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final GameSessionQueuePlayerLatencyPolicyArgs Empty = new GameSessionQueuePlayerLatencyPolicyArgs();

    /**
     * Maximum latency value that is allowed for any player.
     * 
     */
    @Import(name="maximumIndividualPlayerLatencyMilliseconds", required=true)
    private Output<Integer> maximumIndividualPlayerLatencyMilliseconds;

    /**
     * @return Maximum latency value that is allowed for any player.
     * 
     */
    public Output<Integer> maximumIndividualPlayerLatencyMilliseconds() {
        return this.maximumIndividualPlayerLatencyMilliseconds;
    }

    /**
     * Length of time that the policy is enforced while placing a new game session. Absence of value for this attribute means that the policy is enforced until the queue times out.
     * 
     */
    @Import(name="policyDurationSeconds")
    private @Nullable Output<Integer> policyDurationSeconds;

    /**
     * @return Length of time that the policy is enforced while placing a new game session. Absence of value for this attribute means that the policy is enforced until the queue times out.
     * 
     */
    public Optional<Output<Integer>> policyDurationSeconds() {
        return Optional.ofNullable(this.policyDurationSeconds);
    }

    private GameSessionQueuePlayerLatencyPolicyArgs() {}

    private GameSessionQueuePlayerLatencyPolicyArgs(GameSessionQueuePlayerLatencyPolicyArgs $) {
        this.maximumIndividualPlayerLatencyMilliseconds = $.maximumIndividualPlayerLatencyMilliseconds;
        this.policyDurationSeconds = $.policyDurationSeconds;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GameSessionQueuePlayerLatencyPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GameSessionQueuePlayerLatencyPolicyArgs $;

        public Builder() {
            $ = new GameSessionQueuePlayerLatencyPolicyArgs();
        }

        public Builder(GameSessionQueuePlayerLatencyPolicyArgs defaults) {
            $ = new GameSessionQueuePlayerLatencyPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param maximumIndividualPlayerLatencyMilliseconds Maximum latency value that is allowed for any player.
         * 
         * @return builder
         * 
         */
        public Builder maximumIndividualPlayerLatencyMilliseconds(Output<Integer> maximumIndividualPlayerLatencyMilliseconds) {
            $.maximumIndividualPlayerLatencyMilliseconds = maximumIndividualPlayerLatencyMilliseconds;
            return this;
        }

        /**
         * @param maximumIndividualPlayerLatencyMilliseconds Maximum latency value that is allowed for any player.
         * 
         * @return builder
         * 
         */
        public Builder maximumIndividualPlayerLatencyMilliseconds(Integer maximumIndividualPlayerLatencyMilliseconds) {
            return maximumIndividualPlayerLatencyMilliseconds(Output.of(maximumIndividualPlayerLatencyMilliseconds));
        }

        /**
         * @param policyDurationSeconds Length of time that the policy is enforced while placing a new game session. Absence of value for this attribute means that the policy is enforced until the queue times out.
         * 
         * @return builder
         * 
         */
        public Builder policyDurationSeconds(@Nullable Output<Integer> policyDurationSeconds) {
            $.policyDurationSeconds = policyDurationSeconds;
            return this;
        }

        /**
         * @param policyDurationSeconds Length of time that the policy is enforced while placing a new game session. Absence of value for this attribute means that the policy is enforced until the queue times out.
         * 
         * @return builder
         * 
         */
        public Builder policyDurationSeconds(Integer policyDurationSeconds) {
            return policyDurationSeconds(Output.of(policyDurationSeconds));
        }

        public GameSessionQueuePlayerLatencyPolicyArgs build() {
            if ($.maximumIndividualPlayerLatencyMilliseconds == null) {
                throw new MissingRequiredPropertyException("GameSessionQueuePlayerLatencyPolicyArgs", "maximumIndividualPlayerLatencyMilliseconds");
            }
            return $;
        }
    }

}
