// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.route53domains.inputs;

import com.pulumi.aws.route53domains.inputs.RegisteredDomainAdminContactArgs;
import com.pulumi.aws.route53domains.inputs.RegisteredDomainNameServerArgs;
import com.pulumi.aws.route53domains.inputs.RegisteredDomainRegistrantContactArgs;
import com.pulumi.aws.route53domains.inputs.RegisteredDomainTechContactArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RegisteredDomainState extends com.pulumi.resources.ResourceArgs {

    public static final RegisteredDomainState Empty = new RegisteredDomainState();

    @Import(name="abuseContactEmail")
    private @Nullable Output<String> abuseContactEmail;

    public Optional<Output<String>> abuseContactEmail() {
        return Optional.ofNullable(this.abuseContactEmail);
    }

    @Import(name="abuseContactPhone")
    private @Nullable Output<String> abuseContactPhone;

    public Optional<Output<String>> abuseContactPhone() {
        return Optional.ofNullable(this.abuseContactPhone);
    }

    @Import(name="adminContact")
    private @Nullable Output<RegisteredDomainAdminContactArgs> adminContact;

    public Optional<Output<RegisteredDomainAdminContactArgs>> adminContact() {
        return Optional.ofNullable(this.adminContact);
    }

    @Import(name="adminPrivacy")
    private @Nullable Output<Boolean> adminPrivacy;

    public Optional<Output<Boolean>> adminPrivacy() {
        return Optional.ofNullable(this.adminPrivacy);
    }

    @Import(name="autoRenew")
    private @Nullable Output<Boolean> autoRenew;

    public Optional<Output<Boolean>> autoRenew() {
        return Optional.ofNullable(this.autoRenew);
    }

    @Import(name="creationDate")
    private @Nullable Output<String> creationDate;

    public Optional<Output<String>> creationDate() {
        return Optional.ofNullable(this.creationDate);
    }

    @Import(name="domainName")
    private @Nullable Output<String> domainName;

    public Optional<Output<String>> domainName() {
        return Optional.ofNullable(this.domainName);
    }

    @Import(name="expirationDate")
    private @Nullable Output<String> expirationDate;

    public Optional<Output<String>> expirationDate() {
        return Optional.ofNullable(this.expirationDate);
    }

    @Import(name="nameServers")
    private @Nullable Output<List<RegisteredDomainNameServerArgs>> nameServers;

    public Optional<Output<List<RegisteredDomainNameServerArgs>>> nameServers() {
        return Optional.ofNullable(this.nameServers);
    }

    @Import(name="registrantContact")
    private @Nullable Output<RegisteredDomainRegistrantContactArgs> registrantContact;

    public Optional<Output<RegisteredDomainRegistrantContactArgs>> registrantContact() {
        return Optional.ofNullable(this.registrantContact);
    }

    @Import(name="registrantPrivacy")
    private @Nullable Output<Boolean> registrantPrivacy;

    public Optional<Output<Boolean>> registrantPrivacy() {
        return Optional.ofNullable(this.registrantPrivacy);
    }

    @Import(name="registrarName")
    private @Nullable Output<String> registrarName;

    public Optional<Output<String>> registrarName() {
        return Optional.ofNullable(this.registrarName);
    }

    @Import(name="registrarUrl")
    private @Nullable Output<String> registrarUrl;

    public Optional<Output<String>> registrarUrl() {
        return Optional.ofNullable(this.registrarUrl);
    }

    @Import(name="reseller")
    private @Nullable Output<String> reseller;

    public Optional<Output<String>> reseller() {
        return Optional.ofNullable(this.reseller);
    }

    @Import(name="statusLists")
    private @Nullable Output<List<String>> statusLists;

    public Optional<Output<List<String>>> statusLists() {
        return Optional.ofNullable(this.statusLists);
    }

    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    @Import(name="techContact")
    private @Nullable Output<RegisteredDomainTechContactArgs> techContact;

    public Optional<Output<RegisteredDomainTechContactArgs>> techContact() {
        return Optional.ofNullable(this.techContact);
    }

    @Import(name="techPrivacy")
    private @Nullable Output<Boolean> techPrivacy;

    public Optional<Output<Boolean>> techPrivacy() {
        return Optional.ofNullable(this.techPrivacy);
    }

    @Import(name="transferLock")
    private @Nullable Output<Boolean> transferLock;

    public Optional<Output<Boolean>> transferLock() {
        return Optional.ofNullable(this.transferLock);
    }

    @Import(name="updatedDate")
    private @Nullable Output<String> updatedDate;

    public Optional<Output<String>> updatedDate() {
        return Optional.ofNullable(this.updatedDate);
    }

    @Import(name="whoisServer")
    private @Nullable Output<String> whoisServer;

    public Optional<Output<String>> whoisServer() {
        return Optional.ofNullable(this.whoisServer);
    }

    private RegisteredDomainState() {}

    private RegisteredDomainState(RegisteredDomainState $) {
        this.abuseContactEmail = $.abuseContactEmail;
        this.abuseContactPhone = $.abuseContactPhone;
        this.adminContact = $.adminContact;
        this.adminPrivacy = $.adminPrivacy;
        this.autoRenew = $.autoRenew;
        this.creationDate = $.creationDate;
        this.domainName = $.domainName;
        this.expirationDate = $.expirationDate;
        this.nameServers = $.nameServers;
        this.registrantContact = $.registrantContact;
        this.registrantPrivacy = $.registrantPrivacy;
        this.registrarName = $.registrarName;
        this.registrarUrl = $.registrarUrl;
        this.reseller = $.reseller;
        this.statusLists = $.statusLists;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
        this.techContact = $.techContact;
        this.techPrivacy = $.techPrivacy;
        this.transferLock = $.transferLock;
        this.updatedDate = $.updatedDate;
        this.whoisServer = $.whoisServer;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RegisteredDomainState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RegisteredDomainState $;

        public Builder() {
            $ = new RegisteredDomainState();
        }

        public Builder(RegisteredDomainState defaults) {
            $ = new RegisteredDomainState(Objects.requireNonNull(defaults));
        }

        public Builder abuseContactEmail(@Nullable Output<String> abuseContactEmail) {
            $.abuseContactEmail = abuseContactEmail;
            return this;
        }

        public Builder abuseContactEmail(String abuseContactEmail) {
            return abuseContactEmail(Output.of(abuseContactEmail));
        }

        public Builder abuseContactPhone(@Nullable Output<String> abuseContactPhone) {
            $.abuseContactPhone = abuseContactPhone;
            return this;
        }

        public Builder abuseContactPhone(String abuseContactPhone) {
            return abuseContactPhone(Output.of(abuseContactPhone));
        }

        public Builder adminContact(@Nullable Output<RegisteredDomainAdminContactArgs> adminContact) {
            $.adminContact = adminContact;
            return this;
        }

        public Builder adminContact(RegisteredDomainAdminContactArgs adminContact) {
            return adminContact(Output.of(adminContact));
        }

        public Builder adminPrivacy(@Nullable Output<Boolean> adminPrivacy) {
            $.adminPrivacy = adminPrivacy;
            return this;
        }

        public Builder adminPrivacy(Boolean adminPrivacy) {
            return adminPrivacy(Output.of(adminPrivacy));
        }

        public Builder autoRenew(@Nullable Output<Boolean> autoRenew) {
            $.autoRenew = autoRenew;
            return this;
        }

        public Builder autoRenew(Boolean autoRenew) {
            return autoRenew(Output.of(autoRenew));
        }

        public Builder creationDate(@Nullable Output<String> creationDate) {
            $.creationDate = creationDate;
            return this;
        }

        public Builder creationDate(String creationDate) {
            return creationDate(Output.of(creationDate));
        }

        public Builder domainName(@Nullable Output<String> domainName) {
            $.domainName = domainName;
            return this;
        }

        public Builder domainName(String domainName) {
            return domainName(Output.of(domainName));
        }

        public Builder expirationDate(@Nullable Output<String> expirationDate) {
            $.expirationDate = expirationDate;
            return this;
        }

        public Builder expirationDate(String expirationDate) {
            return expirationDate(Output.of(expirationDate));
        }

        public Builder nameServers(@Nullable Output<List<RegisteredDomainNameServerArgs>> nameServers) {
            $.nameServers = nameServers;
            return this;
        }

        public Builder nameServers(List<RegisteredDomainNameServerArgs> nameServers) {
            return nameServers(Output.of(nameServers));
        }

        public Builder nameServers(RegisteredDomainNameServerArgs... nameServers) {
            return nameServers(List.of(nameServers));
        }

        public Builder registrantContact(@Nullable Output<RegisteredDomainRegistrantContactArgs> registrantContact) {
            $.registrantContact = registrantContact;
            return this;
        }

        public Builder registrantContact(RegisteredDomainRegistrantContactArgs registrantContact) {
            return registrantContact(Output.of(registrantContact));
        }

        public Builder registrantPrivacy(@Nullable Output<Boolean> registrantPrivacy) {
            $.registrantPrivacy = registrantPrivacy;
            return this;
        }

        public Builder registrantPrivacy(Boolean registrantPrivacy) {
            return registrantPrivacy(Output.of(registrantPrivacy));
        }

        public Builder registrarName(@Nullable Output<String> registrarName) {
            $.registrarName = registrarName;
            return this;
        }

        public Builder registrarName(String registrarName) {
            return registrarName(Output.of(registrarName));
        }

        public Builder registrarUrl(@Nullable Output<String> registrarUrl) {
            $.registrarUrl = registrarUrl;
            return this;
        }

        public Builder registrarUrl(String registrarUrl) {
            return registrarUrl(Output.of(registrarUrl));
        }

        public Builder reseller(@Nullable Output<String> reseller) {
            $.reseller = reseller;
            return this;
        }

        public Builder reseller(String reseller) {
            return reseller(Output.of(reseller));
        }

        public Builder statusLists(@Nullable Output<List<String>> statusLists) {
            $.statusLists = statusLists;
            return this;
        }

        public Builder statusLists(List<String> statusLists) {
            return statusLists(Output.of(statusLists));
        }

        public Builder statusLists(String... statusLists) {
            return statusLists(List.of(statusLists));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        public Builder techContact(@Nullable Output<RegisteredDomainTechContactArgs> techContact) {
            $.techContact = techContact;
            return this;
        }

        public Builder techContact(RegisteredDomainTechContactArgs techContact) {
            return techContact(Output.of(techContact));
        }

        public Builder techPrivacy(@Nullable Output<Boolean> techPrivacy) {
            $.techPrivacy = techPrivacy;
            return this;
        }

        public Builder techPrivacy(Boolean techPrivacy) {
            return techPrivacy(Output.of(techPrivacy));
        }

        public Builder transferLock(@Nullable Output<Boolean> transferLock) {
            $.transferLock = transferLock;
            return this;
        }

        public Builder transferLock(Boolean transferLock) {
            return transferLock(Output.of(transferLock));
        }

        public Builder updatedDate(@Nullable Output<String> updatedDate) {
            $.updatedDate = updatedDate;
            return this;
        }

        public Builder updatedDate(String updatedDate) {
            return updatedDate(Output.of(updatedDate));
        }

        public Builder whoisServer(@Nullable Output<String> whoisServer) {
            $.whoisServer = whoisServer;
            return this;
        }

        public Builder whoisServer(String whoisServer) {
            return whoisServer(Output.of(whoisServer));
        }

        public RegisteredDomainState build() {
            return $;
        }
    }

}
