// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.bedrock.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.util.Objects;


public final class AgentDataSourceVectorIngestionConfigurationChunkingConfigurationFixedSizeChunkingConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final AgentDataSourceVectorIngestionConfigurationChunkingConfigurationFixedSizeChunkingConfigurationArgs Empty = new AgentDataSourceVectorIngestionConfigurationChunkingConfigurationFixedSizeChunkingConfigurationArgs();

    @Import(name="maxTokens", required=true)
    private Output<Integer> maxTokens;

    public Output<Integer> maxTokens() {
        return this.maxTokens;
    }

    @Import(name="overlapPercentage", required=true)
    private Output<Integer> overlapPercentage;

    public Output<Integer> overlapPercentage() {
        return this.overlapPercentage;
    }

    private AgentDataSourceVectorIngestionConfigurationChunkingConfigurationFixedSizeChunkingConfigurationArgs() {}

    private AgentDataSourceVectorIngestionConfigurationChunkingConfigurationFixedSizeChunkingConfigurationArgs(AgentDataSourceVectorIngestionConfigurationChunkingConfigurationFixedSizeChunkingConfigurationArgs $) {
        this.maxTokens = $.maxTokens;
        this.overlapPercentage = $.overlapPercentage;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AgentDataSourceVectorIngestionConfigurationChunkingConfigurationFixedSizeChunkingConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AgentDataSourceVectorIngestionConfigurationChunkingConfigurationFixedSizeChunkingConfigurationArgs $;

        public Builder() {
            $ = new AgentDataSourceVectorIngestionConfigurationChunkingConfigurationFixedSizeChunkingConfigurationArgs();
        }

        public Builder(AgentDataSourceVectorIngestionConfigurationChunkingConfigurationFixedSizeChunkingConfigurationArgs defaults) {
            $ = new AgentDataSourceVectorIngestionConfigurationChunkingConfigurationFixedSizeChunkingConfigurationArgs(Objects.requireNonNull(defaults));
        }

        public Builder maxTokens(Output<Integer> maxTokens) {
            $.maxTokens = maxTokens;
            return this;
        }

        public Builder maxTokens(Integer maxTokens) {
            return maxTokens(Output.of(maxTokens));
        }

        public Builder overlapPercentage(Output<Integer> overlapPercentage) {
            $.overlapPercentage = overlapPercentage;
            return this;
        }

        public Builder overlapPercentage(Integer overlapPercentage) {
            return overlapPercentage(Output.of(overlapPercentage));
        }

        public AgentDataSourceVectorIngestionConfigurationChunkingConfigurationFixedSizeChunkingConfigurationArgs build() {
            if ($.maxTokens == null) {
                throw new MissingRequiredPropertyException("AgentDataSourceVectorIngestionConfigurationChunkingConfigurationFixedSizeChunkingConfigurationArgs", "maxTokens");
            }
            if ($.overlapPercentage == null) {
                throw new MissingRequiredPropertyException("AgentDataSourceVectorIngestionConfigurationChunkingConfigurationFixedSizeChunkingConfigurationArgs", "overlapPercentage");
            }
            return $;
        }
    }

}
