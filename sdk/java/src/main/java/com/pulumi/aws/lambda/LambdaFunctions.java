// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.lambda;

import com.pulumi.aws.Utilities;
import com.pulumi.aws.lambda.inputs.GetAliasArgs;
import com.pulumi.aws.lambda.inputs.GetAliasPlainArgs;
import com.pulumi.aws.lambda.inputs.GetCodeSigningConfigArgs;
import com.pulumi.aws.lambda.inputs.GetCodeSigningConfigPlainArgs;
import com.pulumi.aws.lambda.inputs.GetFunctionArgs;
import com.pulumi.aws.lambda.inputs.GetFunctionPlainArgs;
import com.pulumi.aws.lambda.inputs.GetFunctionUrlArgs;
import com.pulumi.aws.lambda.inputs.GetFunctionUrlPlainArgs;
import com.pulumi.aws.lambda.inputs.GetFunctionsArgs;
import com.pulumi.aws.lambda.inputs.GetFunctionsPlainArgs;
import com.pulumi.aws.lambda.inputs.GetInvocationArgs;
import com.pulumi.aws.lambda.inputs.GetInvocationPlainArgs;
import com.pulumi.aws.lambda.inputs.GetLayerVersionArgs;
import com.pulumi.aws.lambda.inputs.GetLayerVersionPlainArgs;
import com.pulumi.aws.lambda.outputs.GetAliasResult;
import com.pulumi.aws.lambda.outputs.GetCodeSigningConfigResult;
import com.pulumi.aws.lambda.outputs.GetFunctionResult;
import com.pulumi.aws.lambda.outputs.GetFunctionUrlResult;
import com.pulumi.aws.lambda.outputs.GetFunctionsResult;
import com.pulumi.aws.lambda.outputs.GetInvocationResult;
import com.pulumi.aws.lambda.outputs.GetLayerVersionResult;
import com.pulumi.core.Output;
import com.pulumi.core.TypeShape;
import com.pulumi.deployment.Deployment;
import com.pulumi.deployment.InvokeOptions;
import com.pulumi.deployment.InvokeOutputOptions;
import java.util.concurrent.CompletableFuture;

public final class LambdaFunctions {
    /**
     * Provides details about an AWS Lambda Alias. Use this data source to retrieve information about an existing Lambda function alias for traffic management, deployment strategies, or API integrations.
     * 
     * ## Example Usage
     * 
     * ### Basic Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetAliasArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = LambdaFunctions.getAlias(GetAliasArgs.builder()
     *             .functionName("my-lambda-function")
     *             .name("production")
     *             .build());
     * 
     *         ctx.export("aliasArn", example.arn());
     *     }
     * }
     * }
     * </pre>
     * 
     * ### API Gateway Integration
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetAliasArgs;
     * import com.pulumi.aws.apigateway.Integration;
     * import com.pulumi.aws.apigateway.IntegrationArgs;
     * import com.pulumi.aws.lambda.Permission;
     * import com.pulumi.aws.lambda.PermissionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App }{{@code
     *     public static void main(String[] args) }{{@code
     *         Pulumi.run(App::stack);
     *     }}{@code
     * 
     *     public static void stack(Context ctx) }{{@code
     *         final var apiHandler = LambdaFunctions.getAlias(GetAliasArgs.builder()
     *             .functionName("api-handler")
     *             .name("live")
     *             .build());
     * 
     *         var example = new Integration("example", IntegrationArgs.builder()
     *             .restApi(exampleAwsApiGatewayRestApi.id())
     *             .resourceId(exampleAwsApiGatewayResource.id())
     *             .httpMethod(exampleAwsApiGatewayMethod.httpMethod())
     *             .integrationHttpMethod("POST")
     *             .type("AWS_PROXY")
     *             .uri(apiHandler.invokeArn())
     *             .build());
     * 
     *         // Grant API Gateway permission to invoke the alias
     *         var apiGateway = new Permission("apiGateway", PermissionArgs.builder()
     *             .statementId("AllowExecutionFromAPIGateway")
     *             .action("lambda:InvokeFunction")
     *             .function(apiHandler.functionName())
     *             .principal("apigateway.amazonaws.com")
     *             .qualifier(apiHandler.name())
     *             .sourceArn(String.format("%s/*}&#47;{@code *", exampleAwsApiGatewayRestApi.executionArn()))
     *             .build());
     * 
     *     }}{@code
     * }}{@code
     * }
     * </pre>
     * 
     * ### EventBridge Rule Target
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetAliasArgs;
     * import com.pulumi.aws.cloudwatch.EventRule;
     * import com.pulumi.aws.cloudwatch.EventRuleArgs;
     * import com.pulumi.aws.cloudwatch.EventTarget;
     * import com.pulumi.aws.cloudwatch.EventTargetArgs;
     * import com.pulumi.aws.lambda.Permission;
     * import com.pulumi.aws.lambda.PermissionArgs;
     * import static com.pulumi.codegen.internal.Serialization.*;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var eventProcessor = LambdaFunctions.getAlias(GetAliasArgs.builder()
     *             .functionName("event-processor")
     *             .name("stable")
     *             .build());
     * 
     *         var example = new EventRule("example", EventRuleArgs.builder()
     *             .name("capture-events")
     *             .description("Capture events for processing")
     *             .eventPattern(serializeJson(
     *                 jsonObject(
     *                     jsonProperty("source", jsonArray("myapp.orders")),
     *                     jsonProperty("detail-type", jsonArray("Order Placed"))
     *                 )))
     *             .build());
     * 
     *         var lambda = new EventTarget("lambda", EventTargetArgs.builder()
     *             .rule(example.name())
     *             .targetId("SendToLambda")
     *             .arn(eventProcessor.arn())
     *             .build());
     * 
     *         var allowEventbridge = new Permission("allowEventbridge", PermissionArgs.builder()
     *             .statementId("AllowExecutionFromEventBridge")
     *             .action("lambda:InvokeFunction")
     *             .function(eventProcessor.functionName())
     *             .principal("events.amazonaws.com")
     *             .qualifier(eventProcessor.name())
     *             .sourceArn(example.arn())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetAliasResult> getAlias(GetAliasArgs args) {
        return getAlias(args, InvokeOptions.Empty);
    }
    /**
     * Provides details about an AWS Lambda Alias. Use this data source to retrieve information about an existing Lambda function alias for traffic management, deployment strategies, or API integrations.
     * 
     * ## Example Usage
     * 
     * ### Basic Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetAliasArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = LambdaFunctions.getAlias(GetAliasArgs.builder()
     *             .functionName("my-lambda-function")
     *             .name("production")
     *             .build());
     * 
     *         ctx.export("aliasArn", example.arn());
     *     }
     * }
     * }
     * </pre>
     * 
     * ### API Gateway Integration
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetAliasArgs;
     * import com.pulumi.aws.apigateway.Integration;
     * import com.pulumi.aws.apigateway.IntegrationArgs;
     * import com.pulumi.aws.lambda.Permission;
     * import com.pulumi.aws.lambda.PermissionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App }{{@code
     *     public static void main(String[] args) }{{@code
     *         Pulumi.run(App::stack);
     *     }}{@code
     * 
     *     public static void stack(Context ctx) }{{@code
     *         final var apiHandler = LambdaFunctions.getAlias(GetAliasArgs.builder()
     *             .functionName("api-handler")
     *             .name("live")
     *             .build());
     * 
     *         var example = new Integration("example", IntegrationArgs.builder()
     *             .restApi(exampleAwsApiGatewayRestApi.id())
     *             .resourceId(exampleAwsApiGatewayResource.id())
     *             .httpMethod(exampleAwsApiGatewayMethod.httpMethod())
     *             .integrationHttpMethod("POST")
     *             .type("AWS_PROXY")
     *             .uri(apiHandler.invokeArn())
     *             .build());
     * 
     *         // Grant API Gateway permission to invoke the alias
     *         var apiGateway = new Permission("apiGateway", PermissionArgs.builder()
     *             .statementId("AllowExecutionFromAPIGateway")
     *             .action("lambda:InvokeFunction")
     *             .function(apiHandler.functionName())
     *             .principal("apigateway.amazonaws.com")
     *             .qualifier(apiHandler.name())
     *             .sourceArn(String.format("%s/*}&#47;{@code *", exampleAwsApiGatewayRestApi.executionArn()))
     *             .build());
     * 
     *     }}{@code
     * }}{@code
     * }
     * </pre>
     * 
     * ### EventBridge Rule Target
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetAliasArgs;
     * import com.pulumi.aws.cloudwatch.EventRule;
     * import com.pulumi.aws.cloudwatch.EventRuleArgs;
     * import com.pulumi.aws.cloudwatch.EventTarget;
     * import com.pulumi.aws.cloudwatch.EventTargetArgs;
     * import com.pulumi.aws.lambda.Permission;
     * import com.pulumi.aws.lambda.PermissionArgs;
     * import static com.pulumi.codegen.internal.Serialization.*;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var eventProcessor = LambdaFunctions.getAlias(GetAliasArgs.builder()
     *             .functionName("event-processor")
     *             .name("stable")
     *             .build());
     * 
     *         var example = new EventRule("example", EventRuleArgs.builder()
     *             .name("capture-events")
     *             .description("Capture events for processing")
     *             .eventPattern(serializeJson(
     *                 jsonObject(
     *                     jsonProperty("source", jsonArray("myapp.orders")),
     *                     jsonProperty("detail-type", jsonArray("Order Placed"))
     *                 )))
     *             .build());
     * 
     *         var lambda = new EventTarget("lambda", EventTargetArgs.builder()
     *             .rule(example.name())
     *             .targetId("SendToLambda")
     *             .arn(eventProcessor.arn())
     *             .build());
     * 
     *         var allowEventbridge = new Permission("allowEventbridge", PermissionArgs.builder()
     *             .statementId("AllowExecutionFromEventBridge")
     *             .action("lambda:InvokeFunction")
     *             .function(eventProcessor.functionName())
     *             .principal("events.amazonaws.com")
     *             .qualifier(eventProcessor.name())
     *             .sourceArn(example.arn())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetAliasResult> getAliasPlain(GetAliasPlainArgs args) {
        return getAliasPlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides details about an AWS Lambda Alias. Use this data source to retrieve information about an existing Lambda function alias for traffic management, deployment strategies, or API integrations.
     * 
     * ## Example Usage
     * 
     * ### Basic Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetAliasArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = LambdaFunctions.getAlias(GetAliasArgs.builder()
     *             .functionName("my-lambda-function")
     *             .name("production")
     *             .build());
     * 
     *         ctx.export("aliasArn", example.arn());
     *     }
     * }
     * }
     * </pre>
     * 
     * ### API Gateway Integration
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetAliasArgs;
     * import com.pulumi.aws.apigateway.Integration;
     * import com.pulumi.aws.apigateway.IntegrationArgs;
     * import com.pulumi.aws.lambda.Permission;
     * import com.pulumi.aws.lambda.PermissionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App }{{@code
     *     public static void main(String[] args) }{{@code
     *         Pulumi.run(App::stack);
     *     }}{@code
     * 
     *     public static void stack(Context ctx) }{{@code
     *         final var apiHandler = LambdaFunctions.getAlias(GetAliasArgs.builder()
     *             .functionName("api-handler")
     *             .name("live")
     *             .build());
     * 
     *         var example = new Integration("example", IntegrationArgs.builder()
     *             .restApi(exampleAwsApiGatewayRestApi.id())
     *             .resourceId(exampleAwsApiGatewayResource.id())
     *             .httpMethod(exampleAwsApiGatewayMethod.httpMethod())
     *             .integrationHttpMethod("POST")
     *             .type("AWS_PROXY")
     *             .uri(apiHandler.invokeArn())
     *             .build());
     * 
     *         // Grant API Gateway permission to invoke the alias
     *         var apiGateway = new Permission("apiGateway", PermissionArgs.builder()
     *             .statementId("AllowExecutionFromAPIGateway")
     *             .action("lambda:InvokeFunction")
     *             .function(apiHandler.functionName())
     *             .principal("apigateway.amazonaws.com")
     *             .qualifier(apiHandler.name())
     *             .sourceArn(String.format("%s/*}&#47;{@code *", exampleAwsApiGatewayRestApi.executionArn()))
     *             .build());
     * 
     *     }}{@code
     * }}{@code
     * }
     * </pre>
     * 
     * ### EventBridge Rule Target
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetAliasArgs;
     * import com.pulumi.aws.cloudwatch.EventRule;
     * import com.pulumi.aws.cloudwatch.EventRuleArgs;
     * import com.pulumi.aws.cloudwatch.EventTarget;
     * import com.pulumi.aws.cloudwatch.EventTargetArgs;
     * import com.pulumi.aws.lambda.Permission;
     * import com.pulumi.aws.lambda.PermissionArgs;
     * import static com.pulumi.codegen.internal.Serialization.*;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var eventProcessor = LambdaFunctions.getAlias(GetAliasArgs.builder()
     *             .functionName("event-processor")
     *             .name("stable")
     *             .build());
     * 
     *         var example = new EventRule("example", EventRuleArgs.builder()
     *             .name("capture-events")
     *             .description("Capture events for processing")
     *             .eventPattern(serializeJson(
     *                 jsonObject(
     *                     jsonProperty("source", jsonArray("myapp.orders")),
     *                     jsonProperty("detail-type", jsonArray("Order Placed"))
     *                 )))
     *             .build());
     * 
     *         var lambda = new EventTarget("lambda", EventTargetArgs.builder()
     *             .rule(example.name())
     *             .targetId("SendToLambda")
     *             .arn(eventProcessor.arn())
     *             .build());
     * 
     *         var allowEventbridge = new Permission("allowEventbridge", PermissionArgs.builder()
     *             .statementId("AllowExecutionFromEventBridge")
     *             .action("lambda:InvokeFunction")
     *             .function(eventProcessor.functionName())
     *             .principal("events.amazonaws.com")
     *             .qualifier(eventProcessor.name())
     *             .sourceArn(example.arn())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetAliasResult> getAlias(GetAliasArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("aws:lambda/getAlias:getAlias", TypeShape.of(GetAliasResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides details about an AWS Lambda Alias. Use this data source to retrieve information about an existing Lambda function alias for traffic management, deployment strategies, or API integrations.
     * 
     * ## Example Usage
     * 
     * ### Basic Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetAliasArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = LambdaFunctions.getAlias(GetAliasArgs.builder()
     *             .functionName("my-lambda-function")
     *             .name("production")
     *             .build());
     * 
     *         ctx.export("aliasArn", example.arn());
     *     }
     * }
     * }
     * </pre>
     * 
     * ### API Gateway Integration
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetAliasArgs;
     * import com.pulumi.aws.apigateway.Integration;
     * import com.pulumi.aws.apigateway.IntegrationArgs;
     * import com.pulumi.aws.lambda.Permission;
     * import com.pulumi.aws.lambda.PermissionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App }{{@code
     *     public static void main(String[] args) }{{@code
     *         Pulumi.run(App::stack);
     *     }}{@code
     * 
     *     public static void stack(Context ctx) }{{@code
     *         final var apiHandler = LambdaFunctions.getAlias(GetAliasArgs.builder()
     *             .functionName("api-handler")
     *             .name("live")
     *             .build());
     * 
     *         var example = new Integration("example", IntegrationArgs.builder()
     *             .restApi(exampleAwsApiGatewayRestApi.id())
     *             .resourceId(exampleAwsApiGatewayResource.id())
     *             .httpMethod(exampleAwsApiGatewayMethod.httpMethod())
     *             .integrationHttpMethod("POST")
     *             .type("AWS_PROXY")
     *             .uri(apiHandler.invokeArn())
     *             .build());
     * 
     *         // Grant API Gateway permission to invoke the alias
     *         var apiGateway = new Permission("apiGateway", PermissionArgs.builder()
     *             .statementId("AllowExecutionFromAPIGateway")
     *             .action("lambda:InvokeFunction")
     *             .function(apiHandler.functionName())
     *             .principal("apigateway.amazonaws.com")
     *             .qualifier(apiHandler.name())
     *             .sourceArn(String.format("%s/*}&#47;{@code *", exampleAwsApiGatewayRestApi.executionArn()))
     *             .build());
     * 
     *     }}{@code
     * }}{@code
     * }
     * </pre>
     * 
     * ### EventBridge Rule Target
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetAliasArgs;
     * import com.pulumi.aws.cloudwatch.EventRule;
     * import com.pulumi.aws.cloudwatch.EventRuleArgs;
     * import com.pulumi.aws.cloudwatch.EventTarget;
     * import com.pulumi.aws.cloudwatch.EventTargetArgs;
     * import com.pulumi.aws.lambda.Permission;
     * import com.pulumi.aws.lambda.PermissionArgs;
     * import static com.pulumi.codegen.internal.Serialization.*;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var eventProcessor = LambdaFunctions.getAlias(GetAliasArgs.builder()
     *             .functionName("event-processor")
     *             .name("stable")
     *             .build());
     * 
     *         var example = new EventRule("example", EventRuleArgs.builder()
     *             .name("capture-events")
     *             .description("Capture events for processing")
     *             .eventPattern(serializeJson(
     *                 jsonObject(
     *                     jsonProperty("source", jsonArray("myapp.orders")),
     *                     jsonProperty("detail-type", jsonArray("Order Placed"))
     *                 )))
     *             .build());
     * 
     *         var lambda = new EventTarget("lambda", EventTargetArgs.builder()
     *             .rule(example.name())
     *             .targetId("SendToLambda")
     *             .arn(eventProcessor.arn())
     *             .build());
     * 
     *         var allowEventbridge = new Permission("allowEventbridge", PermissionArgs.builder()
     *             .statementId("AllowExecutionFromEventBridge")
     *             .action("lambda:InvokeFunction")
     *             .function(eventProcessor.functionName())
     *             .principal("events.amazonaws.com")
     *             .qualifier(eventProcessor.name())
     *             .sourceArn(example.arn())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetAliasResult> getAlias(GetAliasArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("aws:lambda/getAlias:getAlias", TypeShape.of(GetAliasResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides details about an AWS Lambda Alias. Use this data source to retrieve information about an existing Lambda function alias for traffic management, deployment strategies, or API integrations.
     * 
     * ## Example Usage
     * 
     * ### Basic Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetAliasArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = LambdaFunctions.getAlias(GetAliasArgs.builder()
     *             .functionName("my-lambda-function")
     *             .name("production")
     *             .build());
     * 
     *         ctx.export("aliasArn", example.arn());
     *     }
     * }
     * }
     * </pre>
     * 
     * ### API Gateway Integration
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetAliasArgs;
     * import com.pulumi.aws.apigateway.Integration;
     * import com.pulumi.aws.apigateway.IntegrationArgs;
     * import com.pulumi.aws.lambda.Permission;
     * import com.pulumi.aws.lambda.PermissionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App }{{@code
     *     public static void main(String[] args) }{{@code
     *         Pulumi.run(App::stack);
     *     }}{@code
     * 
     *     public static void stack(Context ctx) }{{@code
     *         final var apiHandler = LambdaFunctions.getAlias(GetAliasArgs.builder()
     *             .functionName("api-handler")
     *             .name("live")
     *             .build());
     * 
     *         var example = new Integration("example", IntegrationArgs.builder()
     *             .restApi(exampleAwsApiGatewayRestApi.id())
     *             .resourceId(exampleAwsApiGatewayResource.id())
     *             .httpMethod(exampleAwsApiGatewayMethod.httpMethod())
     *             .integrationHttpMethod("POST")
     *             .type("AWS_PROXY")
     *             .uri(apiHandler.invokeArn())
     *             .build());
     * 
     *         // Grant API Gateway permission to invoke the alias
     *         var apiGateway = new Permission("apiGateway", PermissionArgs.builder()
     *             .statementId("AllowExecutionFromAPIGateway")
     *             .action("lambda:InvokeFunction")
     *             .function(apiHandler.functionName())
     *             .principal("apigateway.amazonaws.com")
     *             .qualifier(apiHandler.name())
     *             .sourceArn(String.format("%s/*}&#47;{@code *", exampleAwsApiGatewayRestApi.executionArn()))
     *             .build());
     * 
     *     }}{@code
     * }}{@code
     * }
     * </pre>
     * 
     * ### EventBridge Rule Target
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetAliasArgs;
     * import com.pulumi.aws.cloudwatch.EventRule;
     * import com.pulumi.aws.cloudwatch.EventRuleArgs;
     * import com.pulumi.aws.cloudwatch.EventTarget;
     * import com.pulumi.aws.cloudwatch.EventTargetArgs;
     * import com.pulumi.aws.lambda.Permission;
     * import com.pulumi.aws.lambda.PermissionArgs;
     * import static com.pulumi.codegen.internal.Serialization.*;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var eventProcessor = LambdaFunctions.getAlias(GetAliasArgs.builder()
     *             .functionName("event-processor")
     *             .name("stable")
     *             .build());
     * 
     *         var example = new EventRule("example", EventRuleArgs.builder()
     *             .name("capture-events")
     *             .description("Capture events for processing")
     *             .eventPattern(serializeJson(
     *                 jsonObject(
     *                     jsonProperty("source", jsonArray("myapp.orders")),
     *                     jsonProperty("detail-type", jsonArray("Order Placed"))
     *                 )))
     *             .build());
     * 
     *         var lambda = new EventTarget("lambda", EventTargetArgs.builder()
     *             .rule(example.name())
     *             .targetId("SendToLambda")
     *             .arn(eventProcessor.arn())
     *             .build());
     * 
     *         var allowEventbridge = new Permission("allowEventbridge", PermissionArgs.builder()
     *             .statementId("AllowExecutionFromEventBridge")
     *             .action("lambda:InvokeFunction")
     *             .function(eventProcessor.functionName())
     *             .principal("events.amazonaws.com")
     *             .qualifier(eventProcessor.name())
     *             .sourceArn(example.arn())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetAliasResult> getAliasPlain(GetAliasPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("aws:lambda/getAlias:getAlias", TypeShape.of(GetAliasResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides details about an AWS Lambda Code Signing Config. Use this data source to retrieve information about an existing code signing configuration for Lambda functions to ensure code integrity and authenticity.
     * 
     * For information about Lambda code signing configurations and how to use them, see [configuring code signing for Lambda functions](https://docs.aws.amazon.com/lambda/latest/dg/configuration-codesigning.html).
     * 
     * ## Example Usage
     * 
     * ### Basic Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetCodeSigningConfigArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = LambdaFunctions.getCodeSigningConfig(GetCodeSigningConfigArgs.builder()
     *             .arn("arn:aws:lambda:us-west-2:123456789012:code-signing-config:csc-0f6c334abcdea4d8b")
     *             .build());
     * 
     *         ctx.export("configDetails", Map.ofEntries(
     *             Map.entry("configId", example.configId()),
     *             Map.entry("description", example.description()),
     *             Map.entry("policy", example.policies()[0].untrustedArtifactOnDeployment())
     *         ));
     *     }
     * }
     * }
     * </pre>
     * 
     * ### Use in Lambda Function
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetCodeSigningConfigArgs;
     * import com.pulumi.aws.lambda.Function;
     * import com.pulumi.aws.lambda.FunctionArgs;
     * import com.pulumi.asset.FileArchive;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Get existing code signing configuration
     *         final var securityConfig = LambdaFunctions.getCodeSigningConfig(GetCodeSigningConfigArgs.builder()
     *             .arn(codeSigningConfigArn)
     *             .build());
     * 
     *         // Create Lambda function with code signing
     *         var example = new Function("example", FunctionArgs.builder()
     *             .code(new FileArchive("function.zip"))
     *             .name("secure-function")
     *             .role(lambdaRole.arn())
     *             .handler("index.handler")
     *             .runtime("nodejs20.x")
     *             .codeSigningConfigArn(securityConfig.arn())
     *             .tags(Map.ofEntries(
     *                 Map.entry("Environment", "production"),
     *                 Map.entry("Security", "code-signed")
     *             ))
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     * ### Validate Signing Profiles
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetCodeSigningConfigArgs;
     * import com.pulumi.std.StdFunctions;
     * import com.pulumi.std.inputs.ContainsArgs;
     * import com.pulumi.aws.lambda.Function;
     * import com.pulumi.aws.lambda.FunctionArgs;
     * import com.pulumi.asset.FileArchive;
     * import com.pulumi.codegen.internal.KeyedValue;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = LambdaFunctions.getCodeSigningConfig(GetCodeSigningConfigArgs.builder()
     *             .arn(codeSigningConfigArn)
     *             .build());
     * 
     *         final var allowedProfiles = example.allowedPublishers()[0].signingProfileVersionArns();
     * 
     *         final var requiredProfile = "arn:aws:signer:us-west-2:123456789012:/signing-profiles/MyProfile";
     * 
     *         final var profileAllowed = StdFunctions.contains(ContainsArgs.builder()
     *             .input(allowedProfiles)
     *             .element(requiredProfile)
     *             .build()).result();
     * 
     *         // Conditional resource creation based on signing profile validation
     *         for (var i = 0; i < profileAllowed ? 1 : 0; i++) {
     *             new Function("conditional-" + i, FunctionArgs.builder()
     *                 .code(new FileArchive("function.zip"))
     *                 .name("conditional-function")
     *                 .role(lambdaRole.arn())
     *                 .handler("index.handler")
     *                 .runtime("python3.12")
     *                 .codeSigningConfigArn(example.arn())
     *                 .build());
     * 
     *         
     * }
     *         ctx.export("deploymentStatus", Map.ofEntries(
     *             Map.entry("profileAllowed", profileAllowed),
     *             Map.entry("functionCreated", profileAllowed),
     *             Map.entry("message", profileAllowed ? "Function deployed with valid signing profile" : "Deployment blocked - signing profile not allowed")
     *         ));
     *     }
     * }
     * }
     * </pre>
     * 
     * ### Multi-Environment Configuration
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetCodeSigningConfigArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Production code signing config
     *         final var prod = LambdaFunctions.getCodeSigningConfig(GetCodeSigningConfigArgs.builder()
     *             .arn("arn:aws:lambda:us-west-2:123456789012:code-signing-config:csc-prod-123")
     *             .build());
     * 
     *         // Development code signing config
     *         final var dev = LambdaFunctions.getCodeSigningConfig(GetCodeSigningConfigArgs.builder()
     *             .arn("arn:aws:lambda:us-west-2:123456789012:code-signing-config:csc-dev-456")
     *             .build());
     * 
     *         final var prodPolicy = prod.policies()[0].untrustedArtifactOnDeployment();
     * 
     *         final var devPolicy = dev.policies()[0].untrustedArtifactOnDeployment();
     * 
     *         final var configComparison = Map.ofEntries(
     *             Map.entry("prodEnforcement", prodPolicy),
     *             Map.entry("devEnforcement", devPolicy),
     *             Map.entry("policiesMatch", prodPolicy == devPolicy)
     *         );
     * 
     *         ctx.export("environmentComparison", configComparison);
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetCodeSigningConfigResult> getCodeSigningConfig(GetCodeSigningConfigArgs args) {
        return getCodeSigningConfig(args, InvokeOptions.Empty);
    }
    /**
     * Provides details about an AWS Lambda Code Signing Config. Use this data source to retrieve information about an existing code signing configuration for Lambda functions to ensure code integrity and authenticity.
     * 
     * For information about Lambda code signing configurations and how to use them, see [configuring code signing for Lambda functions](https://docs.aws.amazon.com/lambda/latest/dg/configuration-codesigning.html).
     * 
     * ## Example Usage
     * 
     * ### Basic Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetCodeSigningConfigArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = LambdaFunctions.getCodeSigningConfig(GetCodeSigningConfigArgs.builder()
     *             .arn("arn:aws:lambda:us-west-2:123456789012:code-signing-config:csc-0f6c334abcdea4d8b")
     *             .build());
     * 
     *         ctx.export("configDetails", Map.ofEntries(
     *             Map.entry("configId", example.configId()),
     *             Map.entry("description", example.description()),
     *             Map.entry("policy", example.policies()[0].untrustedArtifactOnDeployment())
     *         ));
     *     }
     * }
     * }
     * </pre>
     * 
     * ### Use in Lambda Function
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetCodeSigningConfigArgs;
     * import com.pulumi.aws.lambda.Function;
     * import com.pulumi.aws.lambda.FunctionArgs;
     * import com.pulumi.asset.FileArchive;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Get existing code signing configuration
     *         final var securityConfig = LambdaFunctions.getCodeSigningConfig(GetCodeSigningConfigArgs.builder()
     *             .arn(codeSigningConfigArn)
     *             .build());
     * 
     *         // Create Lambda function with code signing
     *         var example = new Function("example", FunctionArgs.builder()
     *             .code(new FileArchive("function.zip"))
     *             .name("secure-function")
     *             .role(lambdaRole.arn())
     *             .handler("index.handler")
     *             .runtime("nodejs20.x")
     *             .codeSigningConfigArn(securityConfig.arn())
     *             .tags(Map.ofEntries(
     *                 Map.entry("Environment", "production"),
     *                 Map.entry("Security", "code-signed")
     *             ))
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     * ### Validate Signing Profiles
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetCodeSigningConfigArgs;
     * import com.pulumi.std.StdFunctions;
     * import com.pulumi.std.inputs.ContainsArgs;
     * import com.pulumi.aws.lambda.Function;
     * import com.pulumi.aws.lambda.FunctionArgs;
     * import com.pulumi.asset.FileArchive;
     * import com.pulumi.codegen.internal.KeyedValue;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = LambdaFunctions.getCodeSigningConfig(GetCodeSigningConfigArgs.builder()
     *             .arn(codeSigningConfigArn)
     *             .build());
     * 
     *         final var allowedProfiles = example.allowedPublishers()[0].signingProfileVersionArns();
     * 
     *         final var requiredProfile = "arn:aws:signer:us-west-2:123456789012:/signing-profiles/MyProfile";
     * 
     *         final var profileAllowed = StdFunctions.contains(ContainsArgs.builder()
     *             .input(allowedProfiles)
     *             .element(requiredProfile)
     *             .build()).result();
     * 
     *         // Conditional resource creation based on signing profile validation
     *         for (var i = 0; i < profileAllowed ? 1 : 0; i++) {
     *             new Function("conditional-" + i, FunctionArgs.builder()
     *                 .code(new FileArchive("function.zip"))
     *                 .name("conditional-function")
     *                 .role(lambdaRole.arn())
     *                 .handler("index.handler")
     *                 .runtime("python3.12")
     *                 .codeSigningConfigArn(example.arn())
     *                 .build());
     * 
     *         
     * }
     *         ctx.export("deploymentStatus", Map.ofEntries(
     *             Map.entry("profileAllowed", profileAllowed),
     *             Map.entry("functionCreated", profileAllowed),
     *             Map.entry("message", profileAllowed ? "Function deployed with valid signing profile" : "Deployment blocked - signing profile not allowed")
     *         ));
     *     }
     * }
     * }
     * </pre>
     * 
     * ### Multi-Environment Configuration
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetCodeSigningConfigArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Production code signing config
     *         final var prod = LambdaFunctions.getCodeSigningConfig(GetCodeSigningConfigArgs.builder()
     *             .arn("arn:aws:lambda:us-west-2:123456789012:code-signing-config:csc-prod-123")
     *             .build());
     * 
     *         // Development code signing config
     *         final var dev = LambdaFunctions.getCodeSigningConfig(GetCodeSigningConfigArgs.builder()
     *             .arn("arn:aws:lambda:us-west-2:123456789012:code-signing-config:csc-dev-456")
     *             .build());
     * 
     *         final var prodPolicy = prod.policies()[0].untrustedArtifactOnDeployment();
     * 
     *         final var devPolicy = dev.policies()[0].untrustedArtifactOnDeployment();
     * 
     *         final var configComparison = Map.ofEntries(
     *             Map.entry("prodEnforcement", prodPolicy),
     *             Map.entry("devEnforcement", devPolicy),
     *             Map.entry("policiesMatch", prodPolicy == devPolicy)
     *         );
     * 
     *         ctx.export("environmentComparison", configComparison);
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetCodeSigningConfigResult> getCodeSigningConfigPlain(GetCodeSigningConfigPlainArgs args) {
        return getCodeSigningConfigPlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides details about an AWS Lambda Code Signing Config. Use this data source to retrieve information about an existing code signing configuration for Lambda functions to ensure code integrity and authenticity.
     * 
     * For information about Lambda code signing configurations and how to use them, see [configuring code signing for Lambda functions](https://docs.aws.amazon.com/lambda/latest/dg/configuration-codesigning.html).
     * 
     * ## Example Usage
     * 
     * ### Basic Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetCodeSigningConfigArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = LambdaFunctions.getCodeSigningConfig(GetCodeSigningConfigArgs.builder()
     *             .arn("arn:aws:lambda:us-west-2:123456789012:code-signing-config:csc-0f6c334abcdea4d8b")
     *             .build());
     * 
     *         ctx.export("configDetails", Map.ofEntries(
     *             Map.entry("configId", example.configId()),
     *             Map.entry("description", example.description()),
     *             Map.entry("policy", example.policies()[0].untrustedArtifactOnDeployment())
     *         ));
     *     }
     * }
     * }
     * </pre>
     * 
     * ### Use in Lambda Function
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetCodeSigningConfigArgs;
     * import com.pulumi.aws.lambda.Function;
     * import com.pulumi.aws.lambda.FunctionArgs;
     * import com.pulumi.asset.FileArchive;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Get existing code signing configuration
     *         final var securityConfig = LambdaFunctions.getCodeSigningConfig(GetCodeSigningConfigArgs.builder()
     *             .arn(codeSigningConfigArn)
     *             .build());
     * 
     *         // Create Lambda function with code signing
     *         var example = new Function("example", FunctionArgs.builder()
     *             .code(new FileArchive("function.zip"))
     *             .name("secure-function")
     *             .role(lambdaRole.arn())
     *             .handler("index.handler")
     *             .runtime("nodejs20.x")
     *             .codeSigningConfigArn(securityConfig.arn())
     *             .tags(Map.ofEntries(
     *                 Map.entry("Environment", "production"),
     *                 Map.entry("Security", "code-signed")
     *             ))
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     * ### Validate Signing Profiles
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetCodeSigningConfigArgs;
     * import com.pulumi.std.StdFunctions;
     * import com.pulumi.std.inputs.ContainsArgs;
     * import com.pulumi.aws.lambda.Function;
     * import com.pulumi.aws.lambda.FunctionArgs;
     * import com.pulumi.asset.FileArchive;
     * import com.pulumi.codegen.internal.KeyedValue;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = LambdaFunctions.getCodeSigningConfig(GetCodeSigningConfigArgs.builder()
     *             .arn(codeSigningConfigArn)
     *             .build());
     * 
     *         final var allowedProfiles = example.allowedPublishers()[0].signingProfileVersionArns();
     * 
     *         final var requiredProfile = "arn:aws:signer:us-west-2:123456789012:/signing-profiles/MyProfile";
     * 
     *         final var profileAllowed = StdFunctions.contains(ContainsArgs.builder()
     *             .input(allowedProfiles)
     *             .element(requiredProfile)
     *             .build()).result();
     * 
     *         // Conditional resource creation based on signing profile validation
     *         for (var i = 0; i < profileAllowed ? 1 : 0; i++) {
     *             new Function("conditional-" + i, FunctionArgs.builder()
     *                 .code(new FileArchive("function.zip"))
     *                 .name("conditional-function")
     *                 .role(lambdaRole.arn())
     *                 .handler("index.handler")
     *                 .runtime("python3.12")
     *                 .codeSigningConfigArn(example.arn())
     *                 .build());
     * 
     *         
     * }
     *         ctx.export("deploymentStatus", Map.ofEntries(
     *             Map.entry("profileAllowed", profileAllowed),
     *             Map.entry("functionCreated", profileAllowed),
     *             Map.entry("message", profileAllowed ? "Function deployed with valid signing profile" : "Deployment blocked - signing profile not allowed")
     *         ));
     *     }
     * }
     * }
     * </pre>
     * 
     * ### Multi-Environment Configuration
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetCodeSigningConfigArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Production code signing config
     *         final var prod = LambdaFunctions.getCodeSigningConfig(GetCodeSigningConfigArgs.builder()
     *             .arn("arn:aws:lambda:us-west-2:123456789012:code-signing-config:csc-prod-123")
     *             .build());
     * 
     *         // Development code signing config
     *         final var dev = LambdaFunctions.getCodeSigningConfig(GetCodeSigningConfigArgs.builder()
     *             .arn("arn:aws:lambda:us-west-2:123456789012:code-signing-config:csc-dev-456")
     *             .build());
     * 
     *         final var prodPolicy = prod.policies()[0].untrustedArtifactOnDeployment();
     * 
     *         final var devPolicy = dev.policies()[0].untrustedArtifactOnDeployment();
     * 
     *         final var configComparison = Map.ofEntries(
     *             Map.entry("prodEnforcement", prodPolicy),
     *             Map.entry("devEnforcement", devPolicy),
     *             Map.entry("policiesMatch", prodPolicy == devPolicy)
     *         );
     * 
     *         ctx.export("environmentComparison", configComparison);
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetCodeSigningConfigResult> getCodeSigningConfig(GetCodeSigningConfigArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("aws:lambda/getCodeSigningConfig:getCodeSigningConfig", TypeShape.of(GetCodeSigningConfigResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides details about an AWS Lambda Code Signing Config. Use this data source to retrieve information about an existing code signing configuration for Lambda functions to ensure code integrity and authenticity.
     * 
     * For information about Lambda code signing configurations and how to use them, see [configuring code signing for Lambda functions](https://docs.aws.amazon.com/lambda/latest/dg/configuration-codesigning.html).
     * 
     * ## Example Usage
     * 
     * ### Basic Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetCodeSigningConfigArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = LambdaFunctions.getCodeSigningConfig(GetCodeSigningConfigArgs.builder()
     *             .arn("arn:aws:lambda:us-west-2:123456789012:code-signing-config:csc-0f6c334abcdea4d8b")
     *             .build());
     * 
     *         ctx.export("configDetails", Map.ofEntries(
     *             Map.entry("configId", example.configId()),
     *             Map.entry("description", example.description()),
     *             Map.entry("policy", example.policies()[0].untrustedArtifactOnDeployment())
     *         ));
     *     }
     * }
     * }
     * </pre>
     * 
     * ### Use in Lambda Function
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetCodeSigningConfigArgs;
     * import com.pulumi.aws.lambda.Function;
     * import com.pulumi.aws.lambda.FunctionArgs;
     * import com.pulumi.asset.FileArchive;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Get existing code signing configuration
     *         final var securityConfig = LambdaFunctions.getCodeSigningConfig(GetCodeSigningConfigArgs.builder()
     *             .arn(codeSigningConfigArn)
     *             .build());
     * 
     *         // Create Lambda function with code signing
     *         var example = new Function("example", FunctionArgs.builder()
     *             .code(new FileArchive("function.zip"))
     *             .name("secure-function")
     *             .role(lambdaRole.arn())
     *             .handler("index.handler")
     *             .runtime("nodejs20.x")
     *             .codeSigningConfigArn(securityConfig.arn())
     *             .tags(Map.ofEntries(
     *                 Map.entry("Environment", "production"),
     *                 Map.entry("Security", "code-signed")
     *             ))
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     * ### Validate Signing Profiles
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetCodeSigningConfigArgs;
     * import com.pulumi.std.StdFunctions;
     * import com.pulumi.std.inputs.ContainsArgs;
     * import com.pulumi.aws.lambda.Function;
     * import com.pulumi.aws.lambda.FunctionArgs;
     * import com.pulumi.asset.FileArchive;
     * import com.pulumi.codegen.internal.KeyedValue;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = LambdaFunctions.getCodeSigningConfig(GetCodeSigningConfigArgs.builder()
     *             .arn(codeSigningConfigArn)
     *             .build());
     * 
     *         final var allowedProfiles = example.allowedPublishers()[0].signingProfileVersionArns();
     * 
     *         final var requiredProfile = "arn:aws:signer:us-west-2:123456789012:/signing-profiles/MyProfile";
     * 
     *         final var profileAllowed = StdFunctions.contains(ContainsArgs.builder()
     *             .input(allowedProfiles)
     *             .element(requiredProfile)
     *             .build()).result();
     * 
     *         // Conditional resource creation based on signing profile validation
     *         for (var i = 0; i < profileAllowed ? 1 : 0; i++) {
     *             new Function("conditional-" + i, FunctionArgs.builder()
     *                 .code(new FileArchive("function.zip"))
     *                 .name("conditional-function")
     *                 .role(lambdaRole.arn())
     *                 .handler("index.handler")
     *                 .runtime("python3.12")
     *                 .codeSigningConfigArn(example.arn())
     *                 .build());
     * 
     *         
     * }
     *         ctx.export("deploymentStatus", Map.ofEntries(
     *             Map.entry("profileAllowed", profileAllowed),
     *             Map.entry("functionCreated", profileAllowed),
     *             Map.entry("message", profileAllowed ? "Function deployed with valid signing profile" : "Deployment blocked - signing profile not allowed")
     *         ));
     *     }
     * }
     * }
     * </pre>
     * 
     * ### Multi-Environment Configuration
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetCodeSigningConfigArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Production code signing config
     *         final var prod = LambdaFunctions.getCodeSigningConfig(GetCodeSigningConfigArgs.builder()
     *             .arn("arn:aws:lambda:us-west-2:123456789012:code-signing-config:csc-prod-123")
     *             .build());
     * 
     *         // Development code signing config
     *         final var dev = LambdaFunctions.getCodeSigningConfig(GetCodeSigningConfigArgs.builder()
     *             .arn("arn:aws:lambda:us-west-2:123456789012:code-signing-config:csc-dev-456")
     *             .build());
     * 
     *         final var prodPolicy = prod.policies()[0].untrustedArtifactOnDeployment();
     * 
     *         final var devPolicy = dev.policies()[0].untrustedArtifactOnDeployment();
     * 
     *         final var configComparison = Map.ofEntries(
     *             Map.entry("prodEnforcement", prodPolicy),
     *             Map.entry("devEnforcement", devPolicy),
     *             Map.entry("policiesMatch", prodPolicy == devPolicy)
     *         );
     * 
     *         ctx.export("environmentComparison", configComparison);
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetCodeSigningConfigResult> getCodeSigningConfig(GetCodeSigningConfigArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("aws:lambda/getCodeSigningConfig:getCodeSigningConfig", TypeShape.of(GetCodeSigningConfigResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides details about an AWS Lambda Code Signing Config. Use this data source to retrieve information about an existing code signing configuration for Lambda functions to ensure code integrity and authenticity.
     * 
     * For information about Lambda code signing configurations and how to use them, see [configuring code signing for Lambda functions](https://docs.aws.amazon.com/lambda/latest/dg/configuration-codesigning.html).
     * 
     * ## Example Usage
     * 
     * ### Basic Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetCodeSigningConfigArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = LambdaFunctions.getCodeSigningConfig(GetCodeSigningConfigArgs.builder()
     *             .arn("arn:aws:lambda:us-west-2:123456789012:code-signing-config:csc-0f6c334abcdea4d8b")
     *             .build());
     * 
     *         ctx.export("configDetails", Map.ofEntries(
     *             Map.entry("configId", example.configId()),
     *             Map.entry("description", example.description()),
     *             Map.entry("policy", example.policies()[0].untrustedArtifactOnDeployment())
     *         ));
     *     }
     * }
     * }
     * </pre>
     * 
     * ### Use in Lambda Function
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetCodeSigningConfigArgs;
     * import com.pulumi.aws.lambda.Function;
     * import com.pulumi.aws.lambda.FunctionArgs;
     * import com.pulumi.asset.FileArchive;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Get existing code signing configuration
     *         final var securityConfig = LambdaFunctions.getCodeSigningConfig(GetCodeSigningConfigArgs.builder()
     *             .arn(codeSigningConfigArn)
     *             .build());
     * 
     *         // Create Lambda function with code signing
     *         var example = new Function("example", FunctionArgs.builder()
     *             .code(new FileArchive("function.zip"))
     *             .name("secure-function")
     *             .role(lambdaRole.arn())
     *             .handler("index.handler")
     *             .runtime("nodejs20.x")
     *             .codeSigningConfigArn(securityConfig.arn())
     *             .tags(Map.ofEntries(
     *                 Map.entry("Environment", "production"),
     *                 Map.entry("Security", "code-signed")
     *             ))
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     * ### Validate Signing Profiles
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetCodeSigningConfigArgs;
     * import com.pulumi.std.StdFunctions;
     * import com.pulumi.std.inputs.ContainsArgs;
     * import com.pulumi.aws.lambda.Function;
     * import com.pulumi.aws.lambda.FunctionArgs;
     * import com.pulumi.asset.FileArchive;
     * import com.pulumi.codegen.internal.KeyedValue;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = LambdaFunctions.getCodeSigningConfig(GetCodeSigningConfigArgs.builder()
     *             .arn(codeSigningConfigArn)
     *             .build());
     * 
     *         final var allowedProfiles = example.allowedPublishers()[0].signingProfileVersionArns();
     * 
     *         final var requiredProfile = "arn:aws:signer:us-west-2:123456789012:/signing-profiles/MyProfile";
     * 
     *         final var profileAllowed = StdFunctions.contains(ContainsArgs.builder()
     *             .input(allowedProfiles)
     *             .element(requiredProfile)
     *             .build()).result();
     * 
     *         // Conditional resource creation based on signing profile validation
     *         for (var i = 0; i < profileAllowed ? 1 : 0; i++) {
     *             new Function("conditional-" + i, FunctionArgs.builder()
     *                 .code(new FileArchive("function.zip"))
     *                 .name("conditional-function")
     *                 .role(lambdaRole.arn())
     *                 .handler("index.handler")
     *                 .runtime("python3.12")
     *                 .codeSigningConfigArn(example.arn())
     *                 .build());
     * 
     *         
     * }
     *         ctx.export("deploymentStatus", Map.ofEntries(
     *             Map.entry("profileAllowed", profileAllowed),
     *             Map.entry("functionCreated", profileAllowed),
     *             Map.entry("message", profileAllowed ? "Function deployed with valid signing profile" : "Deployment blocked - signing profile not allowed")
     *         ));
     *     }
     * }
     * }
     * </pre>
     * 
     * ### Multi-Environment Configuration
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetCodeSigningConfigArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Production code signing config
     *         final var prod = LambdaFunctions.getCodeSigningConfig(GetCodeSigningConfigArgs.builder()
     *             .arn("arn:aws:lambda:us-west-2:123456789012:code-signing-config:csc-prod-123")
     *             .build());
     * 
     *         // Development code signing config
     *         final var dev = LambdaFunctions.getCodeSigningConfig(GetCodeSigningConfigArgs.builder()
     *             .arn("arn:aws:lambda:us-west-2:123456789012:code-signing-config:csc-dev-456")
     *             .build());
     * 
     *         final var prodPolicy = prod.policies()[0].untrustedArtifactOnDeployment();
     * 
     *         final var devPolicy = dev.policies()[0].untrustedArtifactOnDeployment();
     * 
     *         final var configComparison = Map.ofEntries(
     *             Map.entry("prodEnforcement", prodPolicy),
     *             Map.entry("devEnforcement", devPolicy),
     *             Map.entry("policiesMatch", prodPolicy == devPolicy)
     *         );
     * 
     *         ctx.export("environmentComparison", configComparison);
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetCodeSigningConfigResult> getCodeSigningConfigPlain(GetCodeSigningConfigPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("aws:lambda/getCodeSigningConfig:getCodeSigningConfig", TypeShape.of(GetCodeSigningConfigResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides details about an AWS Lambda Function. Use this data source to obtain information about an existing Lambda function for use in other resources or as a reference for function configurations.
     * 
     * &gt; **Note:** This data source returns information about the latest version or alias specified by the `qualifier`. If no `qualifier` is provided, it returns information about the most recent published version, or `$LATEST` if no published version exists.
     * 
     * ## Example Usage
     * 
     * ### Basic Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetFunctionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = LambdaFunctions.getFunction(GetFunctionArgs.builder()
     *             .functionName("my-lambda-function")
     *             .build());
     * 
     *         ctx.export("functionArn", example.arn());
     *     }
     * }
     * }
     * </pre>
     * 
     * ### Using Function Alias
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetFunctionArgs;
     * import com.pulumi.aws.apigateway.Integration;
     * import com.pulumi.aws.apigateway.IntegrationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = LambdaFunctions.getFunction(GetFunctionArgs.builder()
     *             .functionName("api-handler")
     *             .qualifier("production")
     *             .build());
     * 
     *         // Use in API Gateway integration
     *         var exampleIntegration = new Integration("exampleIntegration", IntegrationArgs.builder()
     *             .restApi(exampleAwsApiGatewayRestApi.id())
     *             .resourceId(exampleAwsApiGatewayResource.id())
     *             .httpMethod(exampleAwsApiGatewayMethod.httpMethod())
     *             .integrationHttpMethod("POST")
     *             .type("AWS_PROXY")
     *             .uri(example.invokeArn())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     * ### Function Configuration Reference
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetFunctionArgs;
     * import com.pulumi.aws.lambda.Function;
     * import com.pulumi.aws.lambda.FunctionArgs;
     * import com.pulumi.aws.lambda.inputs.FunctionVpcConfigArgs;
     * import com.pulumi.aws.lambda.inputs.FunctionEnvironmentArgs;
     * import com.pulumi.asset.FileArchive;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Get existing function details
     *         final var reference = LambdaFunctions.getFunction(GetFunctionArgs.builder()
     *             .functionName("existing-function")
     *             .build());
     * 
     *         // Create new function with similar configuration
     *         var example = new Function("example", FunctionArgs.builder()
     *             .code(new FileArchive("new-function.zip"))
     *             .name("new-function")
     *             .role(reference.role())
     *             .handler(reference.handler())
     *             .runtime(reference.runtime())
     *             .memorySize(reference.memorySize())
     *             .timeout(reference.timeout())
     *             .architectures(reference.architectures())
     *             .vpcConfig(FunctionVpcConfigArgs.builder()
     *                 .subnetIds(reference.vpcConfig().subnetIds())
     *                 .securityGroupIds(reference.vpcConfig().securityGroupIds())
     *                 .build())
     *             .environment(FunctionEnvironmentArgs.builder()
     *                 .variables(reference.environment().variables())
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     * ### Function Version Management
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetFunctionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Get details about specific version
     *         final var version = LambdaFunctions.getFunction(GetFunctionArgs.builder()
     *             .functionName("my-function")
     *             .qualifier("3")
     *             .build());
     * 
     *         // Get details about latest version
     *         final var latest = LambdaFunctions.getFunction(GetFunctionArgs.builder()
     *             .functionName("my-function")
     *             .qualifier("$LATEST")
     *             .build());
     * 
     *         ctx.export("versionComparison", Map.ofEntries(
     *             Map.entry("specificVersion", version.version()),
     *             Map.entry("latestVersion", latest.version()),
     *             Map.entry("codeDifference", version.codeSha256() != latest.codeSha256())
     *         ));
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetFunctionResult> getFunction(GetFunctionArgs args) {
        return getFunction(args, InvokeOptions.Empty);
    }
    /**
     * Provides details about an AWS Lambda Function. Use this data source to obtain information about an existing Lambda function for use in other resources or as a reference for function configurations.
     * 
     * &gt; **Note:** This data source returns information about the latest version or alias specified by the `qualifier`. If no `qualifier` is provided, it returns information about the most recent published version, or `$LATEST` if no published version exists.
     * 
     * ## Example Usage
     * 
     * ### Basic Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetFunctionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = LambdaFunctions.getFunction(GetFunctionArgs.builder()
     *             .functionName("my-lambda-function")
     *             .build());
     * 
     *         ctx.export("functionArn", example.arn());
     *     }
     * }
     * }
     * </pre>
     * 
     * ### Using Function Alias
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetFunctionArgs;
     * import com.pulumi.aws.apigateway.Integration;
     * import com.pulumi.aws.apigateway.IntegrationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = LambdaFunctions.getFunction(GetFunctionArgs.builder()
     *             .functionName("api-handler")
     *             .qualifier("production")
     *             .build());
     * 
     *         // Use in API Gateway integration
     *         var exampleIntegration = new Integration("exampleIntegration", IntegrationArgs.builder()
     *             .restApi(exampleAwsApiGatewayRestApi.id())
     *             .resourceId(exampleAwsApiGatewayResource.id())
     *             .httpMethod(exampleAwsApiGatewayMethod.httpMethod())
     *             .integrationHttpMethod("POST")
     *             .type("AWS_PROXY")
     *             .uri(example.invokeArn())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     * ### Function Configuration Reference
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetFunctionArgs;
     * import com.pulumi.aws.lambda.Function;
     * import com.pulumi.aws.lambda.FunctionArgs;
     * import com.pulumi.aws.lambda.inputs.FunctionVpcConfigArgs;
     * import com.pulumi.aws.lambda.inputs.FunctionEnvironmentArgs;
     * import com.pulumi.asset.FileArchive;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Get existing function details
     *         final var reference = LambdaFunctions.getFunction(GetFunctionArgs.builder()
     *             .functionName("existing-function")
     *             .build());
     * 
     *         // Create new function with similar configuration
     *         var example = new Function("example", FunctionArgs.builder()
     *             .code(new FileArchive("new-function.zip"))
     *             .name("new-function")
     *             .role(reference.role())
     *             .handler(reference.handler())
     *             .runtime(reference.runtime())
     *             .memorySize(reference.memorySize())
     *             .timeout(reference.timeout())
     *             .architectures(reference.architectures())
     *             .vpcConfig(FunctionVpcConfigArgs.builder()
     *                 .subnetIds(reference.vpcConfig().subnetIds())
     *                 .securityGroupIds(reference.vpcConfig().securityGroupIds())
     *                 .build())
     *             .environment(FunctionEnvironmentArgs.builder()
     *                 .variables(reference.environment().variables())
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     * ### Function Version Management
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetFunctionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Get details about specific version
     *         final var version = LambdaFunctions.getFunction(GetFunctionArgs.builder()
     *             .functionName("my-function")
     *             .qualifier("3")
     *             .build());
     * 
     *         // Get details about latest version
     *         final var latest = LambdaFunctions.getFunction(GetFunctionArgs.builder()
     *             .functionName("my-function")
     *             .qualifier("$LATEST")
     *             .build());
     * 
     *         ctx.export("versionComparison", Map.ofEntries(
     *             Map.entry("specificVersion", version.version()),
     *             Map.entry("latestVersion", latest.version()),
     *             Map.entry("codeDifference", version.codeSha256() != latest.codeSha256())
     *         ));
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetFunctionResult> getFunctionPlain(GetFunctionPlainArgs args) {
        return getFunctionPlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides details about an AWS Lambda Function. Use this data source to obtain information about an existing Lambda function for use in other resources or as a reference for function configurations.
     * 
     * &gt; **Note:** This data source returns information about the latest version or alias specified by the `qualifier`. If no `qualifier` is provided, it returns information about the most recent published version, or `$LATEST` if no published version exists.
     * 
     * ## Example Usage
     * 
     * ### Basic Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetFunctionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = LambdaFunctions.getFunction(GetFunctionArgs.builder()
     *             .functionName("my-lambda-function")
     *             .build());
     * 
     *         ctx.export("functionArn", example.arn());
     *     }
     * }
     * }
     * </pre>
     * 
     * ### Using Function Alias
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetFunctionArgs;
     * import com.pulumi.aws.apigateway.Integration;
     * import com.pulumi.aws.apigateway.IntegrationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = LambdaFunctions.getFunction(GetFunctionArgs.builder()
     *             .functionName("api-handler")
     *             .qualifier("production")
     *             .build());
     * 
     *         // Use in API Gateway integration
     *         var exampleIntegration = new Integration("exampleIntegration", IntegrationArgs.builder()
     *             .restApi(exampleAwsApiGatewayRestApi.id())
     *             .resourceId(exampleAwsApiGatewayResource.id())
     *             .httpMethod(exampleAwsApiGatewayMethod.httpMethod())
     *             .integrationHttpMethod("POST")
     *             .type("AWS_PROXY")
     *             .uri(example.invokeArn())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     * ### Function Configuration Reference
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetFunctionArgs;
     * import com.pulumi.aws.lambda.Function;
     * import com.pulumi.aws.lambda.FunctionArgs;
     * import com.pulumi.aws.lambda.inputs.FunctionVpcConfigArgs;
     * import com.pulumi.aws.lambda.inputs.FunctionEnvironmentArgs;
     * import com.pulumi.asset.FileArchive;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Get existing function details
     *         final var reference = LambdaFunctions.getFunction(GetFunctionArgs.builder()
     *             .functionName("existing-function")
     *             .build());
     * 
     *         // Create new function with similar configuration
     *         var example = new Function("example", FunctionArgs.builder()
     *             .code(new FileArchive("new-function.zip"))
     *             .name("new-function")
     *             .role(reference.role())
     *             .handler(reference.handler())
     *             .runtime(reference.runtime())
     *             .memorySize(reference.memorySize())
     *             .timeout(reference.timeout())
     *             .architectures(reference.architectures())
     *             .vpcConfig(FunctionVpcConfigArgs.builder()
     *                 .subnetIds(reference.vpcConfig().subnetIds())
     *                 .securityGroupIds(reference.vpcConfig().securityGroupIds())
     *                 .build())
     *             .environment(FunctionEnvironmentArgs.builder()
     *                 .variables(reference.environment().variables())
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     * ### Function Version Management
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetFunctionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Get details about specific version
     *         final var version = LambdaFunctions.getFunction(GetFunctionArgs.builder()
     *             .functionName("my-function")
     *             .qualifier("3")
     *             .build());
     * 
     *         // Get details about latest version
     *         final var latest = LambdaFunctions.getFunction(GetFunctionArgs.builder()
     *             .functionName("my-function")
     *             .qualifier("$LATEST")
     *             .build());
     * 
     *         ctx.export("versionComparison", Map.ofEntries(
     *             Map.entry("specificVersion", version.version()),
     *             Map.entry("latestVersion", latest.version()),
     *             Map.entry("codeDifference", version.codeSha256() != latest.codeSha256())
     *         ));
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetFunctionResult> getFunction(GetFunctionArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("aws:lambda/getFunction:getFunction", TypeShape.of(GetFunctionResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides details about an AWS Lambda Function. Use this data source to obtain information about an existing Lambda function for use in other resources or as a reference for function configurations.
     * 
     * &gt; **Note:** This data source returns information about the latest version or alias specified by the `qualifier`. If no `qualifier` is provided, it returns information about the most recent published version, or `$LATEST` if no published version exists.
     * 
     * ## Example Usage
     * 
     * ### Basic Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetFunctionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = LambdaFunctions.getFunction(GetFunctionArgs.builder()
     *             .functionName("my-lambda-function")
     *             .build());
     * 
     *         ctx.export("functionArn", example.arn());
     *     }
     * }
     * }
     * </pre>
     * 
     * ### Using Function Alias
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetFunctionArgs;
     * import com.pulumi.aws.apigateway.Integration;
     * import com.pulumi.aws.apigateway.IntegrationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = LambdaFunctions.getFunction(GetFunctionArgs.builder()
     *             .functionName("api-handler")
     *             .qualifier("production")
     *             .build());
     * 
     *         // Use in API Gateway integration
     *         var exampleIntegration = new Integration("exampleIntegration", IntegrationArgs.builder()
     *             .restApi(exampleAwsApiGatewayRestApi.id())
     *             .resourceId(exampleAwsApiGatewayResource.id())
     *             .httpMethod(exampleAwsApiGatewayMethod.httpMethod())
     *             .integrationHttpMethod("POST")
     *             .type("AWS_PROXY")
     *             .uri(example.invokeArn())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     * ### Function Configuration Reference
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetFunctionArgs;
     * import com.pulumi.aws.lambda.Function;
     * import com.pulumi.aws.lambda.FunctionArgs;
     * import com.pulumi.aws.lambda.inputs.FunctionVpcConfigArgs;
     * import com.pulumi.aws.lambda.inputs.FunctionEnvironmentArgs;
     * import com.pulumi.asset.FileArchive;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Get existing function details
     *         final var reference = LambdaFunctions.getFunction(GetFunctionArgs.builder()
     *             .functionName("existing-function")
     *             .build());
     * 
     *         // Create new function with similar configuration
     *         var example = new Function("example", FunctionArgs.builder()
     *             .code(new FileArchive("new-function.zip"))
     *             .name("new-function")
     *             .role(reference.role())
     *             .handler(reference.handler())
     *             .runtime(reference.runtime())
     *             .memorySize(reference.memorySize())
     *             .timeout(reference.timeout())
     *             .architectures(reference.architectures())
     *             .vpcConfig(FunctionVpcConfigArgs.builder()
     *                 .subnetIds(reference.vpcConfig().subnetIds())
     *                 .securityGroupIds(reference.vpcConfig().securityGroupIds())
     *                 .build())
     *             .environment(FunctionEnvironmentArgs.builder()
     *                 .variables(reference.environment().variables())
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     * ### Function Version Management
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetFunctionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Get details about specific version
     *         final var version = LambdaFunctions.getFunction(GetFunctionArgs.builder()
     *             .functionName("my-function")
     *             .qualifier("3")
     *             .build());
     * 
     *         // Get details about latest version
     *         final var latest = LambdaFunctions.getFunction(GetFunctionArgs.builder()
     *             .functionName("my-function")
     *             .qualifier("$LATEST")
     *             .build());
     * 
     *         ctx.export("versionComparison", Map.ofEntries(
     *             Map.entry("specificVersion", version.version()),
     *             Map.entry("latestVersion", latest.version()),
     *             Map.entry("codeDifference", version.codeSha256() != latest.codeSha256())
     *         ));
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetFunctionResult> getFunction(GetFunctionArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("aws:lambda/getFunction:getFunction", TypeShape.of(GetFunctionResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides details about an AWS Lambda Function. Use this data source to obtain information about an existing Lambda function for use in other resources or as a reference for function configurations.
     * 
     * &gt; **Note:** This data source returns information about the latest version or alias specified by the `qualifier`. If no `qualifier` is provided, it returns information about the most recent published version, or `$LATEST` if no published version exists.
     * 
     * ## Example Usage
     * 
     * ### Basic Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetFunctionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = LambdaFunctions.getFunction(GetFunctionArgs.builder()
     *             .functionName("my-lambda-function")
     *             .build());
     * 
     *         ctx.export("functionArn", example.arn());
     *     }
     * }
     * }
     * </pre>
     * 
     * ### Using Function Alias
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetFunctionArgs;
     * import com.pulumi.aws.apigateway.Integration;
     * import com.pulumi.aws.apigateway.IntegrationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = LambdaFunctions.getFunction(GetFunctionArgs.builder()
     *             .functionName("api-handler")
     *             .qualifier("production")
     *             .build());
     * 
     *         // Use in API Gateway integration
     *         var exampleIntegration = new Integration("exampleIntegration", IntegrationArgs.builder()
     *             .restApi(exampleAwsApiGatewayRestApi.id())
     *             .resourceId(exampleAwsApiGatewayResource.id())
     *             .httpMethod(exampleAwsApiGatewayMethod.httpMethod())
     *             .integrationHttpMethod("POST")
     *             .type("AWS_PROXY")
     *             .uri(example.invokeArn())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     * ### Function Configuration Reference
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetFunctionArgs;
     * import com.pulumi.aws.lambda.Function;
     * import com.pulumi.aws.lambda.FunctionArgs;
     * import com.pulumi.aws.lambda.inputs.FunctionVpcConfigArgs;
     * import com.pulumi.aws.lambda.inputs.FunctionEnvironmentArgs;
     * import com.pulumi.asset.FileArchive;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Get existing function details
     *         final var reference = LambdaFunctions.getFunction(GetFunctionArgs.builder()
     *             .functionName("existing-function")
     *             .build());
     * 
     *         // Create new function with similar configuration
     *         var example = new Function("example", FunctionArgs.builder()
     *             .code(new FileArchive("new-function.zip"))
     *             .name("new-function")
     *             .role(reference.role())
     *             .handler(reference.handler())
     *             .runtime(reference.runtime())
     *             .memorySize(reference.memorySize())
     *             .timeout(reference.timeout())
     *             .architectures(reference.architectures())
     *             .vpcConfig(FunctionVpcConfigArgs.builder()
     *                 .subnetIds(reference.vpcConfig().subnetIds())
     *                 .securityGroupIds(reference.vpcConfig().securityGroupIds())
     *                 .build())
     *             .environment(FunctionEnvironmentArgs.builder()
     *                 .variables(reference.environment().variables())
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     * ### Function Version Management
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetFunctionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Get details about specific version
     *         final var version = LambdaFunctions.getFunction(GetFunctionArgs.builder()
     *             .functionName("my-function")
     *             .qualifier("3")
     *             .build());
     * 
     *         // Get details about latest version
     *         final var latest = LambdaFunctions.getFunction(GetFunctionArgs.builder()
     *             .functionName("my-function")
     *             .qualifier("$LATEST")
     *             .build());
     * 
     *         ctx.export("versionComparison", Map.ofEntries(
     *             Map.entry("specificVersion", version.version()),
     *             Map.entry("latestVersion", latest.version()),
     *             Map.entry("codeDifference", version.codeSha256() != latest.codeSha256())
     *         ));
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetFunctionResult> getFunctionPlain(GetFunctionPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("aws:lambda/getFunction:getFunction", TypeShape.of(GetFunctionResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides details about an AWS Lambda Function URL. Use this data source to retrieve information about an existing function URL configuration.
     * 
     * ## Example Usage
     * 
     * ### Basic Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetFunctionUrlArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = LambdaFunctions.getFunctionUrl(GetFunctionUrlArgs.builder()
     *             .functionName("my_lambda_function")
     *             .build());
     * 
     *         ctx.export("functionUrl", example.functionUrl());
     *     }
     * }
     * }
     * </pre>
     * 
     * ### With Qualifier
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetFunctionUrlArgs;
     * import com.pulumi.aws.route53.Record;
     * import com.pulumi.aws.route53.RecordArgs;
     * import com.pulumi.std.StdFunctions;
     * import com.pulumi.std.inputs.ReplaceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = LambdaFunctions.getFunctionUrl(GetFunctionUrlArgs.builder()
     *             .functionName(exampleAwsLambdaFunction.functionName())
     *             .qualifier("production")
     *             .build());
     * 
     *         // Use the URL in other resources
     *         var lambdaAlias = new Record("lambdaAlias", RecordArgs.builder()
     *             .zoneId(exampleAwsRoute53Zone.zoneId())
     *             .name("api.example.com")
     *             .type("CNAME")
     *             .ttl(300)
     *             .records(StdFunctions.replace(ReplaceArgs.builder()
     *                 .text(example.functionUrl())
     *                 .search("https://")
     *                 .replace("")
     *                 .build()).result())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     * ### Retrieve CORS Configuration
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetFunctionUrlArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = LambdaFunctions.getFunctionUrl(GetFunctionUrlArgs.builder()
     *             .functionName("api_function")
     *             .build());
     * 
     *         final var corsConfig = example.cors().length().applyValue(_length -> _length > 0 ? example.cors()[0] : null);
     * 
     *         final var allowedOrigins = corsConfig != null ? corsConfig.allowOrigins() : List.of();
     * 
     *         ctx.export("corsAllowedOrigins", allowedOrigins);
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetFunctionUrlResult> getFunctionUrl(GetFunctionUrlArgs args) {
        return getFunctionUrl(args, InvokeOptions.Empty);
    }
    /**
     * Provides details about an AWS Lambda Function URL. Use this data source to retrieve information about an existing function URL configuration.
     * 
     * ## Example Usage
     * 
     * ### Basic Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetFunctionUrlArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = LambdaFunctions.getFunctionUrl(GetFunctionUrlArgs.builder()
     *             .functionName("my_lambda_function")
     *             .build());
     * 
     *         ctx.export("functionUrl", example.functionUrl());
     *     }
     * }
     * }
     * </pre>
     * 
     * ### With Qualifier
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetFunctionUrlArgs;
     * import com.pulumi.aws.route53.Record;
     * import com.pulumi.aws.route53.RecordArgs;
     * import com.pulumi.std.StdFunctions;
     * import com.pulumi.std.inputs.ReplaceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = LambdaFunctions.getFunctionUrl(GetFunctionUrlArgs.builder()
     *             .functionName(exampleAwsLambdaFunction.functionName())
     *             .qualifier("production")
     *             .build());
     * 
     *         // Use the URL in other resources
     *         var lambdaAlias = new Record("lambdaAlias", RecordArgs.builder()
     *             .zoneId(exampleAwsRoute53Zone.zoneId())
     *             .name("api.example.com")
     *             .type("CNAME")
     *             .ttl(300)
     *             .records(StdFunctions.replace(ReplaceArgs.builder()
     *                 .text(example.functionUrl())
     *                 .search("https://")
     *                 .replace("")
     *                 .build()).result())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     * ### Retrieve CORS Configuration
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetFunctionUrlArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = LambdaFunctions.getFunctionUrl(GetFunctionUrlArgs.builder()
     *             .functionName("api_function")
     *             .build());
     * 
     *         final var corsConfig = example.cors().length().applyValue(_length -> _length > 0 ? example.cors()[0] : null);
     * 
     *         final var allowedOrigins = corsConfig != null ? corsConfig.allowOrigins() : List.of();
     * 
     *         ctx.export("corsAllowedOrigins", allowedOrigins);
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetFunctionUrlResult> getFunctionUrlPlain(GetFunctionUrlPlainArgs args) {
        return getFunctionUrlPlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides details about an AWS Lambda Function URL. Use this data source to retrieve information about an existing function URL configuration.
     * 
     * ## Example Usage
     * 
     * ### Basic Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetFunctionUrlArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = LambdaFunctions.getFunctionUrl(GetFunctionUrlArgs.builder()
     *             .functionName("my_lambda_function")
     *             .build());
     * 
     *         ctx.export("functionUrl", example.functionUrl());
     *     }
     * }
     * }
     * </pre>
     * 
     * ### With Qualifier
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetFunctionUrlArgs;
     * import com.pulumi.aws.route53.Record;
     * import com.pulumi.aws.route53.RecordArgs;
     * import com.pulumi.std.StdFunctions;
     * import com.pulumi.std.inputs.ReplaceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = LambdaFunctions.getFunctionUrl(GetFunctionUrlArgs.builder()
     *             .functionName(exampleAwsLambdaFunction.functionName())
     *             .qualifier("production")
     *             .build());
     * 
     *         // Use the URL in other resources
     *         var lambdaAlias = new Record("lambdaAlias", RecordArgs.builder()
     *             .zoneId(exampleAwsRoute53Zone.zoneId())
     *             .name("api.example.com")
     *             .type("CNAME")
     *             .ttl(300)
     *             .records(StdFunctions.replace(ReplaceArgs.builder()
     *                 .text(example.functionUrl())
     *                 .search("https://")
     *                 .replace("")
     *                 .build()).result())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     * ### Retrieve CORS Configuration
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetFunctionUrlArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = LambdaFunctions.getFunctionUrl(GetFunctionUrlArgs.builder()
     *             .functionName("api_function")
     *             .build());
     * 
     *         final var corsConfig = example.cors().length().applyValue(_length -> _length > 0 ? example.cors()[0] : null);
     * 
     *         final var allowedOrigins = corsConfig != null ? corsConfig.allowOrigins() : List.of();
     * 
     *         ctx.export("corsAllowedOrigins", allowedOrigins);
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetFunctionUrlResult> getFunctionUrl(GetFunctionUrlArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("aws:lambda/getFunctionUrl:getFunctionUrl", TypeShape.of(GetFunctionUrlResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides details about an AWS Lambda Function URL. Use this data source to retrieve information about an existing function URL configuration.
     * 
     * ## Example Usage
     * 
     * ### Basic Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetFunctionUrlArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = LambdaFunctions.getFunctionUrl(GetFunctionUrlArgs.builder()
     *             .functionName("my_lambda_function")
     *             .build());
     * 
     *         ctx.export("functionUrl", example.functionUrl());
     *     }
     * }
     * }
     * </pre>
     * 
     * ### With Qualifier
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetFunctionUrlArgs;
     * import com.pulumi.aws.route53.Record;
     * import com.pulumi.aws.route53.RecordArgs;
     * import com.pulumi.std.StdFunctions;
     * import com.pulumi.std.inputs.ReplaceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = LambdaFunctions.getFunctionUrl(GetFunctionUrlArgs.builder()
     *             .functionName(exampleAwsLambdaFunction.functionName())
     *             .qualifier("production")
     *             .build());
     * 
     *         // Use the URL in other resources
     *         var lambdaAlias = new Record("lambdaAlias", RecordArgs.builder()
     *             .zoneId(exampleAwsRoute53Zone.zoneId())
     *             .name("api.example.com")
     *             .type("CNAME")
     *             .ttl(300)
     *             .records(StdFunctions.replace(ReplaceArgs.builder()
     *                 .text(example.functionUrl())
     *                 .search("https://")
     *                 .replace("")
     *                 .build()).result())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     * ### Retrieve CORS Configuration
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetFunctionUrlArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = LambdaFunctions.getFunctionUrl(GetFunctionUrlArgs.builder()
     *             .functionName("api_function")
     *             .build());
     * 
     *         final var corsConfig = example.cors().length().applyValue(_length -> _length > 0 ? example.cors()[0] : null);
     * 
     *         final var allowedOrigins = corsConfig != null ? corsConfig.allowOrigins() : List.of();
     * 
     *         ctx.export("corsAllowedOrigins", allowedOrigins);
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetFunctionUrlResult> getFunctionUrl(GetFunctionUrlArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("aws:lambda/getFunctionUrl:getFunctionUrl", TypeShape.of(GetFunctionUrlResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides details about an AWS Lambda Function URL. Use this data source to retrieve information about an existing function URL configuration.
     * 
     * ## Example Usage
     * 
     * ### Basic Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetFunctionUrlArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = LambdaFunctions.getFunctionUrl(GetFunctionUrlArgs.builder()
     *             .functionName("my_lambda_function")
     *             .build());
     * 
     *         ctx.export("functionUrl", example.functionUrl());
     *     }
     * }
     * }
     * </pre>
     * 
     * ### With Qualifier
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetFunctionUrlArgs;
     * import com.pulumi.aws.route53.Record;
     * import com.pulumi.aws.route53.RecordArgs;
     * import com.pulumi.std.StdFunctions;
     * import com.pulumi.std.inputs.ReplaceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = LambdaFunctions.getFunctionUrl(GetFunctionUrlArgs.builder()
     *             .functionName(exampleAwsLambdaFunction.functionName())
     *             .qualifier("production")
     *             .build());
     * 
     *         // Use the URL in other resources
     *         var lambdaAlias = new Record("lambdaAlias", RecordArgs.builder()
     *             .zoneId(exampleAwsRoute53Zone.zoneId())
     *             .name("api.example.com")
     *             .type("CNAME")
     *             .ttl(300)
     *             .records(StdFunctions.replace(ReplaceArgs.builder()
     *                 .text(example.functionUrl())
     *                 .search("https://")
     *                 .replace("")
     *                 .build()).result())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     * ### Retrieve CORS Configuration
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetFunctionUrlArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = LambdaFunctions.getFunctionUrl(GetFunctionUrlArgs.builder()
     *             .functionName("api_function")
     *             .build());
     * 
     *         final var corsConfig = example.cors().length().applyValue(_length -> _length > 0 ? example.cors()[0] : null);
     * 
     *         final var allowedOrigins = corsConfig != null ? corsConfig.allowOrigins() : List.of();
     * 
     *         ctx.export("corsAllowedOrigins", allowedOrigins);
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetFunctionUrlResult> getFunctionUrlPlain(GetFunctionUrlPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("aws:lambda/getFunctionUrl:getFunctionUrl", TypeShape.of(GetFunctionUrlResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides a list of AWS Lambda Functions in the current region. Use this data source to discover existing Lambda functions for inventory, monitoring, or bulk operations.
     * 
     * ## Example Usage
     * 
     * ### List All Functions
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetFunctionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = LambdaFunctions.getFunctions(GetFunctionsArgs.builder()
     *             .build());
     * 
     *         ctx.export("functionCount", all.functionNames().length());
     *         ctx.export("allFunctionNames", all.functionNames());
     *     }
     * }
     * }
     * </pre>
     * 
     * ### Use Function List for Bulk Operations
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetFunctionsArgs;
     * import com.pulumi.aws.cloudwatch.MetricAlarm;
     * import com.pulumi.aws.cloudwatch.MetricAlarmArgs;
     * import com.pulumi.codegen.internal.KeyedValue;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Get all Lambda functions
     *         final var all = LambdaFunctions.getFunctions(GetFunctionsArgs.builder()
     *             .build());
     * 
     *         // Create CloudWatch alarms for all functions
     *         for (var i = 0; i < all.functionNames().length(); i++) {
     *             new MetricAlarm("lambdaErrors-" + i, MetricAlarmArgs.builder()
     *                 .name(String.format("%s-errors", all.functionNames()[range.value()]))
     *                 .comparisonOperator("GreaterThanThreshold")
     *                 .evaluationPeriods(2)
     *                 .metricName("Errors")
     *                 .namespace("AWS/Lambda")
     *                 .period(300)
     *                 .statistic("Sum")
     *                 .threshold(5.0)
     *                 .alarmDescription("This metric monitors lambda errors")
     *                 .dimensions(Map.of("FunctionName", all.functionNames()[range.value()]))
     *                 .tags(Map.ofEntries(
     *                     Map.entry("Environment", "monitoring"),
     *                     Map.entry("Purpose", "lambda-error-tracking")
     *                 ))
     *                 .build());
     * 
     *         
     * }
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetFunctionsResult> getFunctions() {
        return getFunctions(GetFunctionsArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides a list of AWS Lambda Functions in the current region. Use this data source to discover existing Lambda functions for inventory, monitoring, or bulk operations.
     * 
     * ## Example Usage
     * 
     * ### List All Functions
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetFunctionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = LambdaFunctions.getFunctions(GetFunctionsArgs.builder()
     *             .build());
     * 
     *         ctx.export("functionCount", all.functionNames().length());
     *         ctx.export("allFunctionNames", all.functionNames());
     *     }
     * }
     * }
     * </pre>
     * 
     * ### Use Function List for Bulk Operations
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetFunctionsArgs;
     * import com.pulumi.aws.cloudwatch.MetricAlarm;
     * import com.pulumi.aws.cloudwatch.MetricAlarmArgs;
     * import com.pulumi.codegen.internal.KeyedValue;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Get all Lambda functions
     *         final var all = LambdaFunctions.getFunctions(GetFunctionsArgs.builder()
     *             .build());
     * 
     *         // Create CloudWatch alarms for all functions
     *         for (var i = 0; i < all.functionNames().length(); i++) {
     *             new MetricAlarm("lambdaErrors-" + i, MetricAlarmArgs.builder()
     *                 .name(String.format("%s-errors", all.functionNames()[range.value()]))
     *                 .comparisonOperator("GreaterThanThreshold")
     *                 .evaluationPeriods(2)
     *                 .metricName("Errors")
     *                 .namespace("AWS/Lambda")
     *                 .period(300)
     *                 .statistic("Sum")
     *                 .threshold(5.0)
     *                 .alarmDescription("This metric monitors lambda errors")
     *                 .dimensions(Map.of("FunctionName", all.functionNames()[range.value()]))
     *                 .tags(Map.ofEntries(
     *                     Map.entry("Environment", "monitoring"),
     *                     Map.entry("Purpose", "lambda-error-tracking")
     *                 ))
     *                 .build());
     * 
     *         
     * }
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetFunctionsResult> getFunctionsPlain() {
        return getFunctionsPlain(GetFunctionsPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides a list of AWS Lambda Functions in the current region. Use this data source to discover existing Lambda functions for inventory, monitoring, or bulk operations.
     * 
     * ## Example Usage
     * 
     * ### List All Functions
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetFunctionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = LambdaFunctions.getFunctions(GetFunctionsArgs.builder()
     *             .build());
     * 
     *         ctx.export("functionCount", all.functionNames().length());
     *         ctx.export("allFunctionNames", all.functionNames());
     *     }
     * }
     * }
     * </pre>
     * 
     * ### Use Function List for Bulk Operations
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetFunctionsArgs;
     * import com.pulumi.aws.cloudwatch.MetricAlarm;
     * import com.pulumi.aws.cloudwatch.MetricAlarmArgs;
     * import com.pulumi.codegen.internal.KeyedValue;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Get all Lambda functions
     *         final var all = LambdaFunctions.getFunctions(GetFunctionsArgs.builder()
     *             .build());
     * 
     *         // Create CloudWatch alarms for all functions
     *         for (var i = 0; i < all.functionNames().length(); i++) {
     *             new MetricAlarm("lambdaErrors-" + i, MetricAlarmArgs.builder()
     *                 .name(String.format("%s-errors", all.functionNames()[range.value()]))
     *                 .comparisonOperator("GreaterThanThreshold")
     *                 .evaluationPeriods(2)
     *                 .metricName("Errors")
     *                 .namespace("AWS/Lambda")
     *                 .period(300)
     *                 .statistic("Sum")
     *                 .threshold(5.0)
     *                 .alarmDescription("This metric monitors lambda errors")
     *                 .dimensions(Map.of("FunctionName", all.functionNames()[range.value()]))
     *                 .tags(Map.ofEntries(
     *                     Map.entry("Environment", "monitoring"),
     *                     Map.entry("Purpose", "lambda-error-tracking")
     *                 ))
     *                 .build());
     * 
     *         
     * }
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetFunctionsResult> getFunctions(GetFunctionsArgs args) {
        return getFunctions(args, InvokeOptions.Empty);
    }
    /**
     * Provides a list of AWS Lambda Functions in the current region. Use this data source to discover existing Lambda functions for inventory, monitoring, or bulk operations.
     * 
     * ## Example Usage
     * 
     * ### List All Functions
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetFunctionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = LambdaFunctions.getFunctions(GetFunctionsArgs.builder()
     *             .build());
     * 
     *         ctx.export("functionCount", all.functionNames().length());
     *         ctx.export("allFunctionNames", all.functionNames());
     *     }
     * }
     * }
     * </pre>
     * 
     * ### Use Function List for Bulk Operations
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetFunctionsArgs;
     * import com.pulumi.aws.cloudwatch.MetricAlarm;
     * import com.pulumi.aws.cloudwatch.MetricAlarmArgs;
     * import com.pulumi.codegen.internal.KeyedValue;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Get all Lambda functions
     *         final var all = LambdaFunctions.getFunctions(GetFunctionsArgs.builder()
     *             .build());
     * 
     *         // Create CloudWatch alarms for all functions
     *         for (var i = 0; i < all.functionNames().length(); i++) {
     *             new MetricAlarm("lambdaErrors-" + i, MetricAlarmArgs.builder()
     *                 .name(String.format("%s-errors", all.functionNames()[range.value()]))
     *                 .comparisonOperator("GreaterThanThreshold")
     *                 .evaluationPeriods(2)
     *                 .metricName("Errors")
     *                 .namespace("AWS/Lambda")
     *                 .period(300)
     *                 .statistic("Sum")
     *                 .threshold(5.0)
     *                 .alarmDescription("This metric monitors lambda errors")
     *                 .dimensions(Map.of("FunctionName", all.functionNames()[range.value()]))
     *                 .tags(Map.ofEntries(
     *                     Map.entry("Environment", "monitoring"),
     *                     Map.entry("Purpose", "lambda-error-tracking")
     *                 ))
     *                 .build());
     * 
     *         
     * }
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetFunctionsResult> getFunctionsPlain(GetFunctionsPlainArgs args) {
        return getFunctionsPlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides a list of AWS Lambda Functions in the current region. Use this data source to discover existing Lambda functions for inventory, monitoring, or bulk operations.
     * 
     * ## Example Usage
     * 
     * ### List All Functions
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetFunctionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = LambdaFunctions.getFunctions(GetFunctionsArgs.builder()
     *             .build());
     * 
     *         ctx.export("functionCount", all.functionNames().length());
     *         ctx.export("allFunctionNames", all.functionNames());
     *     }
     * }
     * }
     * </pre>
     * 
     * ### Use Function List for Bulk Operations
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetFunctionsArgs;
     * import com.pulumi.aws.cloudwatch.MetricAlarm;
     * import com.pulumi.aws.cloudwatch.MetricAlarmArgs;
     * import com.pulumi.codegen.internal.KeyedValue;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Get all Lambda functions
     *         final var all = LambdaFunctions.getFunctions(GetFunctionsArgs.builder()
     *             .build());
     * 
     *         // Create CloudWatch alarms for all functions
     *         for (var i = 0; i < all.functionNames().length(); i++) {
     *             new MetricAlarm("lambdaErrors-" + i, MetricAlarmArgs.builder()
     *                 .name(String.format("%s-errors", all.functionNames()[range.value()]))
     *                 .comparisonOperator("GreaterThanThreshold")
     *                 .evaluationPeriods(2)
     *                 .metricName("Errors")
     *                 .namespace("AWS/Lambda")
     *                 .period(300)
     *                 .statistic("Sum")
     *                 .threshold(5.0)
     *                 .alarmDescription("This metric monitors lambda errors")
     *                 .dimensions(Map.of("FunctionName", all.functionNames()[range.value()]))
     *                 .tags(Map.ofEntries(
     *                     Map.entry("Environment", "monitoring"),
     *                     Map.entry("Purpose", "lambda-error-tracking")
     *                 ))
     *                 .build());
     * 
     *         
     * }
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetFunctionsResult> getFunctions(GetFunctionsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("aws:lambda/getFunctions:getFunctions", TypeShape.of(GetFunctionsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides a list of AWS Lambda Functions in the current region. Use this data source to discover existing Lambda functions for inventory, monitoring, or bulk operations.
     * 
     * ## Example Usage
     * 
     * ### List All Functions
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetFunctionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = LambdaFunctions.getFunctions(GetFunctionsArgs.builder()
     *             .build());
     * 
     *         ctx.export("functionCount", all.functionNames().length());
     *         ctx.export("allFunctionNames", all.functionNames());
     *     }
     * }
     * }
     * </pre>
     * 
     * ### Use Function List for Bulk Operations
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetFunctionsArgs;
     * import com.pulumi.aws.cloudwatch.MetricAlarm;
     * import com.pulumi.aws.cloudwatch.MetricAlarmArgs;
     * import com.pulumi.codegen.internal.KeyedValue;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Get all Lambda functions
     *         final var all = LambdaFunctions.getFunctions(GetFunctionsArgs.builder()
     *             .build());
     * 
     *         // Create CloudWatch alarms for all functions
     *         for (var i = 0; i < all.functionNames().length(); i++) {
     *             new MetricAlarm("lambdaErrors-" + i, MetricAlarmArgs.builder()
     *                 .name(String.format("%s-errors", all.functionNames()[range.value()]))
     *                 .comparisonOperator("GreaterThanThreshold")
     *                 .evaluationPeriods(2)
     *                 .metricName("Errors")
     *                 .namespace("AWS/Lambda")
     *                 .period(300)
     *                 .statistic("Sum")
     *                 .threshold(5.0)
     *                 .alarmDescription("This metric monitors lambda errors")
     *                 .dimensions(Map.of("FunctionName", all.functionNames()[range.value()]))
     *                 .tags(Map.ofEntries(
     *                     Map.entry("Environment", "monitoring"),
     *                     Map.entry("Purpose", "lambda-error-tracking")
     *                 ))
     *                 .build());
     * 
     *         
     * }
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetFunctionsResult> getFunctions(GetFunctionsArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("aws:lambda/getFunctions:getFunctions", TypeShape.of(GetFunctionsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides a list of AWS Lambda Functions in the current region. Use this data source to discover existing Lambda functions for inventory, monitoring, or bulk operations.
     * 
     * ## Example Usage
     * 
     * ### List All Functions
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetFunctionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = LambdaFunctions.getFunctions(GetFunctionsArgs.builder()
     *             .build());
     * 
     *         ctx.export("functionCount", all.functionNames().length());
     *         ctx.export("allFunctionNames", all.functionNames());
     *     }
     * }
     * }
     * </pre>
     * 
     * ### Use Function List for Bulk Operations
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetFunctionsArgs;
     * import com.pulumi.aws.cloudwatch.MetricAlarm;
     * import com.pulumi.aws.cloudwatch.MetricAlarmArgs;
     * import com.pulumi.codegen.internal.KeyedValue;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Get all Lambda functions
     *         final var all = LambdaFunctions.getFunctions(GetFunctionsArgs.builder()
     *             .build());
     * 
     *         // Create CloudWatch alarms for all functions
     *         for (var i = 0; i < all.functionNames().length(); i++) {
     *             new MetricAlarm("lambdaErrors-" + i, MetricAlarmArgs.builder()
     *                 .name(String.format("%s-errors", all.functionNames()[range.value()]))
     *                 .comparisonOperator("GreaterThanThreshold")
     *                 .evaluationPeriods(2)
     *                 .metricName("Errors")
     *                 .namespace("AWS/Lambda")
     *                 .period(300)
     *                 .statistic("Sum")
     *                 .threshold(5.0)
     *                 .alarmDescription("This metric monitors lambda errors")
     *                 .dimensions(Map.of("FunctionName", all.functionNames()[range.value()]))
     *                 .tags(Map.ofEntries(
     *                     Map.entry("Environment", "monitoring"),
     *                     Map.entry("Purpose", "lambda-error-tracking")
     *                 ))
     *                 .build());
     * 
     *         
     * }
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetFunctionsResult> getFunctionsPlain(GetFunctionsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("aws:lambda/getFunctions:getFunctions", TypeShape.of(GetFunctionsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Invokes an AWS Lambda Function and returns its results. Use this data source to execute Lambda functions during Pulumi operations and use their results in other resources or outputs.
     * 
     * The Lambda function is invoked with [RequestResponse](https://docs.aws.amazon.com/lambda/latest/dg/API_Invoke.html#API_Invoke_RequestSyntax) invocation type.
     * 
     * &gt; **Note:** The `aws.lambda.Invocation` data source invokes the function during the first `apply` and every subsequent `plan` when the function is known.
     * 
     * &gt; **Note:** If you get a `KMSAccessDeniedException: Lambda was unable to decrypt the environment variables because KMS access was denied` error when invoking a Lambda function with environment variables, the IAM role associated with the function may have been deleted and recreated after the function was created. You can fix the problem two ways: 1) updating the function&#39;s role to another role and then updating it back again to the recreated role. (When you create a function, Lambda grants permissions on the KMS key to the function&#39;s IAM role. If the IAM role is recreated, the grant is no longer valid. Changing the function&#39;s role or recreating the function causes Lambda to update the grant.)
     * 
     * ## Example Usage
     * 
     * ### Basic Invocation
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetInvocationArgs;
     * import com.pulumi.std.StdFunctions;
     * import com.pulumi.std.inputs.JsondecodeArgs;
     * import static com.pulumi.codegen.internal.Serialization.*;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = LambdaFunctions.getInvocation(GetInvocationArgs.builder()
     *             .functionName(exampleAwsLambdaFunction.functionName())
     *             .input(serializeJson(
     *                 jsonObject(
     *                     jsonProperty("operation", "getStatus"),
     *                     jsonProperty("id", "123456")
     *                 )))
     *             .build());
     * 
     *         ctx.export("result", StdFunctions.jsondecode(JsondecodeArgs.builder()
     *             .input(example.result())
     *             .build()).result());
     *     }
     * }
     * }
     * </pre>
     * 
     * ### Dynamic Resource Configuration
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetInvocationArgs;
     * import com.pulumi.std.StdFunctions;
     * import com.pulumi.std.inputs.JsondecodeArgs;
     * import com.pulumi.aws.elasticache.Cluster;
     * import com.pulumi.aws.elasticache.ClusterArgs;
     * import static com.pulumi.codegen.internal.Serialization.*;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Get resource configuration from Lambda
     *         final var resourceConfig = LambdaFunctions.getInvocation(GetInvocationArgs.builder()
     *             .functionName("resource-config-generator")
     *             .qualifier("production")
     *             .input(serializeJson(
     *                 jsonObject(
     *                     jsonProperty("environment", environment),
     *                     jsonProperty("region", current.region()),
     *                     jsonProperty("service", "api")
     *                 )))
     *             .build());
     * 
     *         final var config = StdFunctions.jsondecode(JsondecodeArgs.builder()
     *             .input(resourceConfig.result())
     *             .build()).result();
     * 
     *         // Use dynamic configuration
     *         var example = new Cluster("example", ClusterArgs.builder()
     *             .clusterId(config.cache().clusterId())
     *             .engine(config.cache().engine())
     *             .nodeType(config.cache().nodeType())
     *             .numCacheNodes(config.cache().nodes())
     *             .parameterGroupName(config.cache().parameterGroup())
     *             .tags(config.tags())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetInvocationResult> getInvocation(GetInvocationArgs args) {
        return getInvocation(args, InvokeOptions.Empty);
    }
    /**
     * Invokes an AWS Lambda Function and returns its results. Use this data source to execute Lambda functions during Pulumi operations and use their results in other resources or outputs.
     * 
     * The Lambda function is invoked with [RequestResponse](https://docs.aws.amazon.com/lambda/latest/dg/API_Invoke.html#API_Invoke_RequestSyntax) invocation type.
     * 
     * &gt; **Note:** The `aws.lambda.Invocation` data source invokes the function during the first `apply` and every subsequent `plan` when the function is known.
     * 
     * &gt; **Note:** If you get a `KMSAccessDeniedException: Lambda was unable to decrypt the environment variables because KMS access was denied` error when invoking a Lambda function with environment variables, the IAM role associated with the function may have been deleted and recreated after the function was created. You can fix the problem two ways: 1) updating the function&#39;s role to another role and then updating it back again to the recreated role. (When you create a function, Lambda grants permissions on the KMS key to the function&#39;s IAM role. If the IAM role is recreated, the grant is no longer valid. Changing the function&#39;s role or recreating the function causes Lambda to update the grant.)
     * 
     * ## Example Usage
     * 
     * ### Basic Invocation
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetInvocationArgs;
     * import com.pulumi.std.StdFunctions;
     * import com.pulumi.std.inputs.JsondecodeArgs;
     * import static com.pulumi.codegen.internal.Serialization.*;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = LambdaFunctions.getInvocation(GetInvocationArgs.builder()
     *             .functionName(exampleAwsLambdaFunction.functionName())
     *             .input(serializeJson(
     *                 jsonObject(
     *                     jsonProperty("operation", "getStatus"),
     *                     jsonProperty("id", "123456")
     *                 )))
     *             .build());
     * 
     *         ctx.export("result", StdFunctions.jsondecode(JsondecodeArgs.builder()
     *             .input(example.result())
     *             .build()).result());
     *     }
     * }
     * }
     * </pre>
     * 
     * ### Dynamic Resource Configuration
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetInvocationArgs;
     * import com.pulumi.std.StdFunctions;
     * import com.pulumi.std.inputs.JsondecodeArgs;
     * import com.pulumi.aws.elasticache.Cluster;
     * import com.pulumi.aws.elasticache.ClusterArgs;
     * import static com.pulumi.codegen.internal.Serialization.*;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Get resource configuration from Lambda
     *         final var resourceConfig = LambdaFunctions.getInvocation(GetInvocationArgs.builder()
     *             .functionName("resource-config-generator")
     *             .qualifier("production")
     *             .input(serializeJson(
     *                 jsonObject(
     *                     jsonProperty("environment", environment),
     *                     jsonProperty("region", current.region()),
     *                     jsonProperty("service", "api")
     *                 )))
     *             .build());
     * 
     *         final var config = StdFunctions.jsondecode(JsondecodeArgs.builder()
     *             .input(resourceConfig.result())
     *             .build()).result();
     * 
     *         // Use dynamic configuration
     *         var example = new Cluster("example", ClusterArgs.builder()
     *             .clusterId(config.cache().clusterId())
     *             .engine(config.cache().engine())
     *             .nodeType(config.cache().nodeType())
     *             .numCacheNodes(config.cache().nodes())
     *             .parameterGroupName(config.cache().parameterGroup())
     *             .tags(config.tags())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetInvocationResult> getInvocationPlain(GetInvocationPlainArgs args) {
        return getInvocationPlain(args, InvokeOptions.Empty);
    }
    /**
     * Invokes an AWS Lambda Function and returns its results. Use this data source to execute Lambda functions during Pulumi operations and use their results in other resources or outputs.
     * 
     * The Lambda function is invoked with [RequestResponse](https://docs.aws.amazon.com/lambda/latest/dg/API_Invoke.html#API_Invoke_RequestSyntax) invocation type.
     * 
     * &gt; **Note:** The `aws.lambda.Invocation` data source invokes the function during the first `apply` and every subsequent `plan` when the function is known.
     * 
     * &gt; **Note:** If you get a `KMSAccessDeniedException: Lambda was unable to decrypt the environment variables because KMS access was denied` error when invoking a Lambda function with environment variables, the IAM role associated with the function may have been deleted and recreated after the function was created. You can fix the problem two ways: 1) updating the function&#39;s role to another role and then updating it back again to the recreated role. (When you create a function, Lambda grants permissions on the KMS key to the function&#39;s IAM role. If the IAM role is recreated, the grant is no longer valid. Changing the function&#39;s role or recreating the function causes Lambda to update the grant.)
     * 
     * ## Example Usage
     * 
     * ### Basic Invocation
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetInvocationArgs;
     * import com.pulumi.std.StdFunctions;
     * import com.pulumi.std.inputs.JsondecodeArgs;
     * import static com.pulumi.codegen.internal.Serialization.*;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = LambdaFunctions.getInvocation(GetInvocationArgs.builder()
     *             .functionName(exampleAwsLambdaFunction.functionName())
     *             .input(serializeJson(
     *                 jsonObject(
     *                     jsonProperty("operation", "getStatus"),
     *                     jsonProperty("id", "123456")
     *                 )))
     *             .build());
     * 
     *         ctx.export("result", StdFunctions.jsondecode(JsondecodeArgs.builder()
     *             .input(example.result())
     *             .build()).result());
     *     }
     * }
     * }
     * </pre>
     * 
     * ### Dynamic Resource Configuration
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetInvocationArgs;
     * import com.pulumi.std.StdFunctions;
     * import com.pulumi.std.inputs.JsondecodeArgs;
     * import com.pulumi.aws.elasticache.Cluster;
     * import com.pulumi.aws.elasticache.ClusterArgs;
     * import static com.pulumi.codegen.internal.Serialization.*;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Get resource configuration from Lambda
     *         final var resourceConfig = LambdaFunctions.getInvocation(GetInvocationArgs.builder()
     *             .functionName("resource-config-generator")
     *             .qualifier("production")
     *             .input(serializeJson(
     *                 jsonObject(
     *                     jsonProperty("environment", environment),
     *                     jsonProperty("region", current.region()),
     *                     jsonProperty("service", "api")
     *                 )))
     *             .build());
     * 
     *         final var config = StdFunctions.jsondecode(JsondecodeArgs.builder()
     *             .input(resourceConfig.result())
     *             .build()).result();
     * 
     *         // Use dynamic configuration
     *         var example = new Cluster("example", ClusterArgs.builder()
     *             .clusterId(config.cache().clusterId())
     *             .engine(config.cache().engine())
     *             .nodeType(config.cache().nodeType())
     *             .numCacheNodes(config.cache().nodes())
     *             .parameterGroupName(config.cache().parameterGroup())
     *             .tags(config.tags())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetInvocationResult> getInvocation(GetInvocationArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("aws:lambda/getInvocation:getInvocation", TypeShape.of(GetInvocationResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Invokes an AWS Lambda Function and returns its results. Use this data source to execute Lambda functions during Pulumi operations and use their results in other resources or outputs.
     * 
     * The Lambda function is invoked with [RequestResponse](https://docs.aws.amazon.com/lambda/latest/dg/API_Invoke.html#API_Invoke_RequestSyntax) invocation type.
     * 
     * &gt; **Note:** The `aws.lambda.Invocation` data source invokes the function during the first `apply` and every subsequent `plan` when the function is known.
     * 
     * &gt; **Note:** If you get a `KMSAccessDeniedException: Lambda was unable to decrypt the environment variables because KMS access was denied` error when invoking a Lambda function with environment variables, the IAM role associated with the function may have been deleted and recreated after the function was created. You can fix the problem two ways: 1) updating the function&#39;s role to another role and then updating it back again to the recreated role. (When you create a function, Lambda grants permissions on the KMS key to the function&#39;s IAM role. If the IAM role is recreated, the grant is no longer valid. Changing the function&#39;s role or recreating the function causes Lambda to update the grant.)
     * 
     * ## Example Usage
     * 
     * ### Basic Invocation
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetInvocationArgs;
     * import com.pulumi.std.StdFunctions;
     * import com.pulumi.std.inputs.JsondecodeArgs;
     * import static com.pulumi.codegen.internal.Serialization.*;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = LambdaFunctions.getInvocation(GetInvocationArgs.builder()
     *             .functionName(exampleAwsLambdaFunction.functionName())
     *             .input(serializeJson(
     *                 jsonObject(
     *                     jsonProperty("operation", "getStatus"),
     *                     jsonProperty("id", "123456")
     *                 )))
     *             .build());
     * 
     *         ctx.export("result", StdFunctions.jsondecode(JsondecodeArgs.builder()
     *             .input(example.result())
     *             .build()).result());
     *     }
     * }
     * }
     * </pre>
     * 
     * ### Dynamic Resource Configuration
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetInvocationArgs;
     * import com.pulumi.std.StdFunctions;
     * import com.pulumi.std.inputs.JsondecodeArgs;
     * import com.pulumi.aws.elasticache.Cluster;
     * import com.pulumi.aws.elasticache.ClusterArgs;
     * import static com.pulumi.codegen.internal.Serialization.*;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Get resource configuration from Lambda
     *         final var resourceConfig = LambdaFunctions.getInvocation(GetInvocationArgs.builder()
     *             .functionName("resource-config-generator")
     *             .qualifier("production")
     *             .input(serializeJson(
     *                 jsonObject(
     *                     jsonProperty("environment", environment),
     *                     jsonProperty("region", current.region()),
     *                     jsonProperty("service", "api")
     *                 )))
     *             .build());
     * 
     *         final var config = StdFunctions.jsondecode(JsondecodeArgs.builder()
     *             .input(resourceConfig.result())
     *             .build()).result();
     * 
     *         // Use dynamic configuration
     *         var example = new Cluster("example", ClusterArgs.builder()
     *             .clusterId(config.cache().clusterId())
     *             .engine(config.cache().engine())
     *             .nodeType(config.cache().nodeType())
     *             .numCacheNodes(config.cache().nodes())
     *             .parameterGroupName(config.cache().parameterGroup())
     *             .tags(config.tags())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetInvocationResult> getInvocation(GetInvocationArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("aws:lambda/getInvocation:getInvocation", TypeShape.of(GetInvocationResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Invokes an AWS Lambda Function and returns its results. Use this data source to execute Lambda functions during Pulumi operations and use their results in other resources or outputs.
     * 
     * The Lambda function is invoked with [RequestResponse](https://docs.aws.amazon.com/lambda/latest/dg/API_Invoke.html#API_Invoke_RequestSyntax) invocation type.
     * 
     * &gt; **Note:** The `aws.lambda.Invocation` data source invokes the function during the first `apply` and every subsequent `plan` when the function is known.
     * 
     * &gt; **Note:** If you get a `KMSAccessDeniedException: Lambda was unable to decrypt the environment variables because KMS access was denied` error when invoking a Lambda function with environment variables, the IAM role associated with the function may have been deleted and recreated after the function was created. You can fix the problem two ways: 1) updating the function&#39;s role to another role and then updating it back again to the recreated role. (When you create a function, Lambda grants permissions on the KMS key to the function&#39;s IAM role. If the IAM role is recreated, the grant is no longer valid. Changing the function&#39;s role or recreating the function causes Lambda to update the grant.)
     * 
     * ## Example Usage
     * 
     * ### Basic Invocation
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetInvocationArgs;
     * import com.pulumi.std.StdFunctions;
     * import com.pulumi.std.inputs.JsondecodeArgs;
     * import static com.pulumi.codegen.internal.Serialization.*;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = LambdaFunctions.getInvocation(GetInvocationArgs.builder()
     *             .functionName(exampleAwsLambdaFunction.functionName())
     *             .input(serializeJson(
     *                 jsonObject(
     *                     jsonProperty("operation", "getStatus"),
     *                     jsonProperty("id", "123456")
     *                 )))
     *             .build());
     * 
     *         ctx.export("result", StdFunctions.jsondecode(JsondecodeArgs.builder()
     *             .input(example.result())
     *             .build()).result());
     *     }
     * }
     * }
     * </pre>
     * 
     * ### Dynamic Resource Configuration
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetInvocationArgs;
     * import com.pulumi.std.StdFunctions;
     * import com.pulumi.std.inputs.JsondecodeArgs;
     * import com.pulumi.aws.elasticache.Cluster;
     * import com.pulumi.aws.elasticache.ClusterArgs;
     * import static com.pulumi.codegen.internal.Serialization.*;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Get resource configuration from Lambda
     *         final var resourceConfig = LambdaFunctions.getInvocation(GetInvocationArgs.builder()
     *             .functionName("resource-config-generator")
     *             .qualifier("production")
     *             .input(serializeJson(
     *                 jsonObject(
     *                     jsonProperty("environment", environment),
     *                     jsonProperty("region", current.region()),
     *                     jsonProperty("service", "api")
     *                 )))
     *             .build());
     * 
     *         final var config = StdFunctions.jsondecode(JsondecodeArgs.builder()
     *             .input(resourceConfig.result())
     *             .build()).result();
     * 
     *         // Use dynamic configuration
     *         var example = new Cluster("example", ClusterArgs.builder()
     *             .clusterId(config.cache().clusterId())
     *             .engine(config.cache().engine())
     *             .nodeType(config.cache().nodeType())
     *             .numCacheNodes(config.cache().nodes())
     *             .parameterGroupName(config.cache().parameterGroup())
     *             .tags(config.tags())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetInvocationResult> getInvocationPlain(GetInvocationPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("aws:lambda/getInvocation:getInvocation", TypeShape.of(GetInvocationResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides details about an AWS Lambda Layer Version. Use this data source to retrieve information about a specific layer version or find the latest version compatible with your runtime and architecture requirements.
     * 
     * ## Example Usage
     * 
     * ### Get Latest Layer Version
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetLayerVersionArgs;
     * import com.pulumi.aws.lambda.Function;
     * import com.pulumi.aws.lambda.FunctionArgs;
     * import com.pulumi.asset.FileArchive;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = LambdaFunctions.getLayerVersion(GetLayerVersionArgs.builder()
     *             .layerName("my-shared-utilities")
     *             .build());
     * 
     *         // Use the layer in a Lambda function
     *         var exampleFunction = new Function("exampleFunction", FunctionArgs.builder()
     *             .code(new FileArchive("function.zip"))
     *             .name("example_function")
     *             .role(lambdaRole.arn())
     *             .handler("index.handler")
     *             .runtime("nodejs20.x")
     *             .layers(example.arn())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     * ### Get Specific Layer Version
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetLayerVersionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = LambdaFunctions.getLayerVersion(GetLayerVersionArgs.builder()
     *             .layerName("production-utilities")
     *             .version(5)
     *             .build());
     * 
     *         ctx.export("layerInfo", Map.ofEntries(
     *             Map.entry("arn", example.arn()),
     *             Map.entry("version", example.version()),
     *             Map.entry("description", example.description())
     *         ));
     *     }
     * }
     * }
     * </pre>
     * 
     * ### Get Latest Compatible Layer Version
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetLayerVersionArgs;
     * import com.pulumi.aws.lambda.Function;
     * import com.pulumi.aws.lambda.FunctionArgs;
     * import com.pulumi.asset.FileArchive;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Find latest layer version compatible with Python 3.12
     *         final var pythonLayer = LambdaFunctions.getLayerVersion(GetLayerVersionArgs.builder()
     *             .layerName("python-dependencies")
     *             .compatibleRuntime("python3.12")
     *             .build());
     * 
     *         // Find latest layer version compatible with ARM64 architecture
     *         final var armLayer = LambdaFunctions.getLayerVersion(GetLayerVersionArgs.builder()
     *             .layerName("optimized-libraries")
     *             .compatibleArchitecture("arm64")
     *             .build());
     * 
     *         // Use both layers in a function
     *         var example = new Function("example", FunctionArgs.builder()
     *             .code(new FileArchive("function.zip"))
     *             .name("multi_layer_function")
     *             .role(lambdaRole.arn())
     *             .handler("app.handler")
     *             .runtime("python3.12")
     *             .architectures("arm64")
     *             .layers(            
     *                 pythonLayer.arn(),
     *                 armLayer.arn())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     * ### Compare Layer Versions
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetLayerVersionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Get latest version
     *         final var latest = LambdaFunctions.getLayerVersion(GetLayerVersionArgs.builder()
     *             .layerName("shared-layer")
     *             .build());
     * 
     *         // Get specific version for comparison
     *         final var stable = LambdaFunctions.getLayerVersion(GetLayerVersionArgs.builder()
     *             .layerName("shared-layer")
     *             .version(3)
     *             .build());
     * 
     *         final var useLatestLayer = latest.version() > 5;
     * 
     *         final var selectedLayer = useLatestLayer ? latest.arn() : stable.arn();
     * 
     *         ctx.export("selectedLayerVersion", useLatestLayer ? latest.version() : stable.version());
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetLayerVersionResult> getLayerVersion(GetLayerVersionArgs args) {
        return getLayerVersion(args, InvokeOptions.Empty);
    }
    /**
     * Provides details about an AWS Lambda Layer Version. Use this data source to retrieve information about a specific layer version or find the latest version compatible with your runtime and architecture requirements.
     * 
     * ## Example Usage
     * 
     * ### Get Latest Layer Version
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetLayerVersionArgs;
     * import com.pulumi.aws.lambda.Function;
     * import com.pulumi.aws.lambda.FunctionArgs;
     * import com.pulumi.asset.FileArchive;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = LambdaFunctions.getLayerVersion(GetLayerVersionArgs.builder()
     *             .layerName("my-shared-utilities")
     *             .build());
     * 
     *         // Use the layer in a Lambda function
     *         var exampleFunction = new Function("exampleFunction", FunctionArgs.builder()
     *             .code(new FileArchive("function.zip"))
     *             .name("example_function")
     *             .role(lambdaRole.arn())
     *             .handler("index.handler")
     *             .runtime("nodejs20.x")
     *             .layers(example.arn())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     * ### Get Specific Layer Version
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetLayerVersionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = LambdaFunctions.getLayerVersion(GetLayerVersionArgs.builder()
     *             .layerName("production-utilities")
     *             .version(5)
     *             .build());
     * 
     *         ctx.export("layerInfo", Map.ofEntries(
     *             Map.entry("arn", example.arn()),
     *             Map.entry("version", example.version()),
     *             Map.entry("description", example.description())
     *         ));
     *     }
     * }
     * }
     * </pre>
     * 
     * ### Get Latest Compatible Layer Version
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetLayerVersionArgs;
     * import com.pulumi.aws.lambda.Function;
     * import com.pulumi.aws.lambda.FunctionArgs;
     * import com.pulumi.asset.FileArchive;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Find latest layer version compatible with Python 3.12
     *         final var pythonLayer = LambdaFunctions.getLayerVersion(GetLayerVersionArgs.builder()
     *             .layerName("python-dependencies")
     *             .compatibleRuntime("python3.12")
     *             .build());
     * 
     *         // Find latest layer version compatible with ARM64 architecture
     *         final var armLayer = LambdaFunctions.getLayerVersion(GetLayerVersionArgs.builder()
     *             .layerName("optimized-libraries")
     *             .compatibleArchitecture("arm64")
     *             .build());
     * 
     *         // Use both layers in a function
     *         var example = new Function("example", FunctionArgs.builder()
     *             .code(new FileArchive("function.zip"))
     *             .name("multi_layer_function")
     *             .role(lambdaRole.arn())
     *             .handler("app.handler")
     *             .runtime("python3.12")
     *             .architectures("arm64")
     *             .layers(            
     *                 pythonLayer.arn(),
     *                 armLayer.arn())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     * ### Compare Layer Versions
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetLayerVersionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Get latest version
     *         final var latest = LambdaFunctions.getLayerVersion(GetLayerVersionArgs.builder()
     *             .layerName("shared-layer")
     *             .build());
     * 
     *         // Get specific version for comparison
     *         final var stable = LambdaFunctions.getLayerVersion(GetLayerVersionArgs.builder()
     *             .layerName("shared-layer")
     *             .version(3)
     *             .build());
     * 
     *         final var useLatestLayer = latest.version() > 5;
     * 
     *         final var selectedLayer = useLatestLayer ? latest.arn() : stable.arn();
     * 
     *         ctx.export("selectedLayerVersion", useLatestLayer ? latest.version() : stable.version());
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetLayerVersionResult> getLayerVersionPlain(GetLayerVersionPlainArgs args) {
        return getLayerVersionPlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides details about an AWS Lambda Layer Version. Use this data source to retrieve information about a specific layer version or find the latest version compatible with your runtime and architecture requirements.
     * 
     * ## Example Usage
     * 
     * ### Get Latest Layer Version
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetLayerVersionArgs;
     * import com.pulumi.aws.lambda.Function;
     * import com.pulumi.aws.lambda.FunctionArgs;
     * import com.pulumi.asset.FileArchive;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = LambdaFunctions.getLayerVersion(GetLayerVersionArgs.builder()
     *             .layerName("my-shared-utilities")
     *             .build());
     * 
     *         // Use the layer in a Lambda function
     *         var exampleFunction = new Function("exampleFunction", FunctionArgs.builder()
     *             .code(new FileArchive("function.zip"))
     *             .name("example_function")
     *             .role(lambdaRole.arn())
     *             .handler("index.handler")
     *             .runtime("nodejs20.x")
     *             .layers(example.arn())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     * ### Get Specific Layer Version
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetLayerVersionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = LambdaFunctions.getLayerVersion(GetLayerVersionArgs.builder()
     *             .layerName("production-utilities")
     *             .version(5)
     *             .build());
     * 
     *         ctx.export("layerInfo", Map.ofEntries(
     *             Map.entry("arn", example.arn()),
     *             Map.entry("version", example.version()),
     *             Map.entry("description", example.description())
     *         ));
     *     }
     * }
     * }
     * </pre>
     * 
     * ### Get Latest Compatible Layer Version
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetLayerVersionArgs;
     * import com.pulumi.aws.lambda.Function;
     * import com.pulumi.aws.lambda.FunctionArgs;
     * import com.pulumi.asset.FileArchive;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Find latest layer version compatible with Python 3.12
     *         final var pythonLayer = LambdaFunctions.getLayerVersion(GetLayerVersionArgs.builder()
     *             .layerName("python-dependencies")
     *             .compatibleRuntime("python3.12")
     *             .build());
     * 
     *         // Find latest layer version compatible with ARM64 architecture
     *         final var armLayer = LambdaFunctions.getLayerVersion(GetLayerVersionArgs.builder()
     *             .layerName("optimized-libraries")
     *             .compatibleArchitecture("arm64")
     *             .build());
     * 
     *         // Use both layers in a function
     *         var example = new Function("example", FunctionArgs.builder()
     *             .code(new FileArchive("function.zip"))
     *             .name("multi_layer_function")
     *             .role(lambdaRole.arn())
     *             .handler("app.handler")
     *             .runtime("python3.12")
     *             .architectures("arm64")
     *             .layers(            
     *                 pythonLayer.arn(),
     *                 armLayer.arn())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     * ### Compare Layer Versions
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetLayerVersionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Get latest version
     *         final var latest = LambdaFunctions.getLayerVersion(GetLayerVersionArgs.builder()
     *             .layerName("shared-layer")
     *             .build());
     * 
     *         // Get specific version for comparison
     *         final var stable = LambdaFunctions.getLayerVersion(GetLayerVersionArgs.builder()
     *             .layerName("shared-layer")
     *             .version(3)
     *             .build());
     * 
     *         final var useLatestLayer = latest.version() > 5;
     * 
     *         final var selectedLayer = useLatestLayer ? latest.arn() : stable.arn();
     * 
     *         ctx.export("selectedLayerVersion", useLatestLayer ? latest.version() : stable.version());
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetLayerVersionResult> getLayerVersion(GetLayerVersionArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("aws:lambda/getLayerVersion:getLayerVersion", TypeShape.of(GetLayerVersionResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides details about an AWS Lambda Layer Version. Use this data source to retrieve information about a specific layer version or find the latest version compatible with your runtime and architecture requirements.
     * 
     * ## Example Usage
     * 
     * ### Get Latest Layer Version
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetLayerVersionArgs;
     * import com.pulumi.aws.lambda.Function;
     * import com.pulumi.aws.lambda.FunctionArgs;
     * import com.pulumi.asset.FileArchive;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = LambdaFunctions.getLayerVersion(GetLayerVersionArgs.builder()
     *             .layerName("my-shared-utilities")
     *             .build());
     * 
     *         // Use the layer in a Lambda function
     *         var exampleFunction = new Function("exampleFunction", FunctionArgs.builder()
     *             .code(new FileArchive("function.zip"))
     *             .name("example_function")
     *             .role(lambdaRole.arn())
     *             .handler("index.handler")
     *             .runtime("nodejs20.x")
     *             .layers(example.arn())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     * ### Get Specific Layer Version
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetLayerVersionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = LambdaFunctions.getLayerVersion(GetLayerVersionArgs.builder()
     *             .layerName("production-utilities")
     *             .version(5)
     *             .build());
     * 
     *         ctx.export("layerInfo", Map.ofEntries(
     *             Map.entry("arn", example.arn()),
     *             Map.entry("version", example.version()),
     *             Map.entry("description", example.description())
     *         ));
     *     }
     * }
     * }
     * </pre>
     * 
     * ### Get Latest Compatible Layer Version
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetLayerVersionArgs;
     * import com.pulumi.aws.lambda.Function;
     * import com.pulumi.aws.lambda.FunctionArgs;
     * import com.pulumi.asset.FileArchive;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Find latest layer version compatible with Python 3.12
     *         final var pythonLayer = LambdaFunctions.getLayerVersion(GetLayerVersionArgs.builder()
     *             .layerName("python-dependencies")
     *             .compatibleRuntime("python3.12")
     *             .build());
     * 
     *         // Find latest layer version compatible with ARM64 architecture
     *         final var armLayer = LambdaFunctions.getLayerVersion(GetLayerVersionArgs.builder()
     *             .layerName("optimized-libraries")
     *             .compatibleArchitecture("arm64")
     *             .build());
     * 
     *         // Use both layers in a function
     *         var example = new Function("example", FunctionArgs.builder()
     *             .code(new FileArchive("function.zip"))
     *             .name("multi_layer_function")
     *             .role(lambdaRole.arn())
     *             .handler("app.handler")
     *             .runtime("python3.12")
     *             .architectures("arm64")
     *             .layers(            
     *                 pythonLayer.arn(),
     *                 armLayer.arn())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     * ### Compare Layer Versions
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetLayerVersionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Get latest version
     *         final var latest = LambdaFunctions.getLayerVersion(GetLayerVersionArgs.builder()
     *             .layerName("shared-layer")
     *             .build());
     * 
     *         // Get specific version for comparison
     *         final var stable = LambdaFunctions.getLayerVersion(GetLayerVersionArgs.builder()
     *             .layerName("shared-layer")
     *             .version(3)
     *             .build());
     * 
     *         final var useLatestLayer = latest.version() > 5;
     * 
     *         final var selectedLayer = useLatestLayer ? latest.arn() : stable.arn();
     * 
     *         ctx.export("selectedLayerVersion", useLatestLayer ? latest.version() : stable.version());
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetLayerVersionResult> getLayerVersion(GetLayerVersionArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("aws:lambda/getLayerVersion:getLayerVersion", TypeShape.of(GetLayerVersionResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides details about an AWS Lambda Layer Version. Use this data source to retrieve information about a specific layer version or find the latest version compatible with your runtime and architecture requirements.
     * 
     * ## Example Usage
     * 
     * ### Get Latest Layer Version
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetLayerVersionArgs;
     * import com.pulumi.aws.lambda.Function;
     * import com.pulumi.aws.lambda.FunctionArgs;
     * import com.pulumi.asset.FileArchive;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = LambdaFunctions.getLayerVersion(GetLayerVersionArgs.builder()
     *             .layerName("my-shared-utilities")
     *             .build());
     * 
     *         // Use the layer in a Lambda function
     *         var exampleFunction = new Function("exampleFunction", FunctionArgs.builder()
     *             .code(new FileArchive("function.zip"))
     *             .name("example_function")
     *             .role(lambdaRole.arn())
     *             .handler("index.handler")
     *             .runtime("nodejs20.x")
     *             .layers(example.arn())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     * ### Get Specific Layer Version
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetLayerVersionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = LambdaFunctions.getLayerVersion(GetLayerVersionArgs.builder()
     *             .layerName("production-utilities")
     *             .version(5)
     *             .build());
     * 
     *         ctx.export("layerInfo", Map.ofEntries(
     *             Map.entry("arn", example.arn()),
     *             Map.entry("version", example.version()),
     *             Map.entry("description", example.description())
     *         ));
     *     }
     * }
     * }
     * </pre>
     * 
     * ### Get Latest Compatible Layer Version
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetLayerVersionArgs;
     * import com.pulumi.aws.lambda.Function;
     * import com.pulumi.aws.lambda.FunctionArgs;
     * import com.pulumi.asset.FileArchive;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Find latest layer version compatible with Python 3.12
     *         final var pythonLayer = LambdaFunctions.getLayerVersion(GetLayerVersionArgs.builder()
     *             .layerName("python-dependencies")
     *             .compatibleRuntime("python3.12")
     *             .build());
     * 
     *         // Find latest layer version compatible with ARM64 architecture
     *         final var armLayer = LambdaFunctions.getLayerVersion(GetLayerVersionArgs.builder()
     *             .layerName("optimized-libraries")
     *             .compatibleArchitecture("arm64")
     *             .build());
     * 
     *         // Use both layers in a function
     *         var example = new Function("example", FunctionArgs.builder()
     *             .code(new FileArchive("function.zip"))
     *             .name("multi_layer_function")
     *             .role(lambdaRole.arn())
     *             .handler("app.handler")
     *             .runtime("python3.12")
     *             .architectures("arm64")
     *             .layers(            
     *                 pythonLayer.arn(),
     *                 armLayer.arn())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     * ### Compare Layer Versions
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.LambdaFunctions;
     * import com.pulumi.aws.lambda.inputs.GetLayerVersionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Get latest version
     *         final var latest = LambdaFunctions.getLayerVersion(GetLayerVersionArgs.builder()
     *             .layerName("shared-layer")
     *             .build());
     * 
     *         // Get specific version for comparison
     *         final var stable = LambdaFunctions.getLayerVersion(GetLayerVersionArgs.builder()
     *             .layerName("shared-layer")
     *             .version(3)
     *             .build());
     * 
     *         final var useLatestLayer = latest.version() > 5;
     * 
     *         final var selectedLayer = useLatestLayer ? latest.arn() : stable.arn();
     * 
     *         ctx.export("selectedLayerVersion", useLatestLayer ? latest.version() : stable.version());
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetLayerVersionResult> getLayerVersionPlain(GetLayerVersionPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("aws:lambda/getLayerVersion:getLayerVersion", TypeShape.of(GetLayerVersionResult.class), args, Utilities.withVersion(options));
    }
}
