// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.verifiedaccess.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstanceLoggingConfigurationAccessLogsS3Args extends com.pulumi.resources.ResourceArgs {

    public static final InstanceLoggingConfigurationAccessLogsS3Args Empty = new InstanceLoggingConfigurationAccessLogsS3Args();

    /**
     * The name of S3 bucket.
     * 
     */
    @Import(name="bucketName")
    private @Nullable Output<String> bucketName;

    /**
     * @return The name of S3 bucket.
     * 
     */
    public Optional<Output<String>> bucketName() {
        return Optional.ofNullable(this.bucketName);
    }

    /**
     * The ID of the AWS account that owns the Amazon S3 bucket.
     * 
     */
    @Import(name="bucketOwner")
    private @Nullable Output<String> bucketOwner;

    /**
     * @return The ID of the AWS account that owns the Amazon S3 bucket.
     * 
     */
    public Optional<Output<String>> bucketOwner() {
        return Optional.ofNullable(this.bucketOwner);
    }

    /**
     * Indicates whether logging is enabled.
     * 
     */
    @Import(name="enabled", required=true)
    private Output<Boolean> enabled;

    /**
     * @return Indicates whether logging is enabled.
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }

    /**
     * The bucket prefix.
     * 
     */
    @Import(name="prefix")
    private @Nullable Output<String> prefix;

    /**
     * @return The bucket prefix.
     * 
     */
    public Optional<Output<String>> prefix() {
        return Optional.ofNullable(this.prefix);
    }

    private InstanceLoggingConfigurationAccessLogsS3Args() {}

    private InstanceLoggingConfigurationAccessLogsS3Args(InstanceLoggingConfigurationAccessLogsS3Args $) {
        this.bucketName = $.bucketName;
        this.bucketOwner = $.bucketOwner;
        this.enabled = $.enabled;
        this.prefix = $.prefix;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceLoggingConfigurationAccessLogsS3Args defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceLoggingConfigurationAccessLogsS3Args $;

        public Builder() {
            $ = new InstanceLoggingConfigurationAccessLogsS3Args();
        }

        public Builder(InstanceLoggingConfigurationAccessLogsS3Args defaults) {
            $ = new InstanceLoggingConfigurationAccessLogsS3Args(Objects.requireNonNull(defaults));
        }

        /**
         * @param bucketName The name of S3 bucket.
         * 
         * @return builder
         * 
         */
        public Builder bucketName(@Nullable Output<String> bucketName) {
            $.bucketName = bucketName;
            return this;
        }

        /**
         * @param bucketName The name of S3 bucket.
         * 
         * @return builder
         * 
         */
        public Builder bucketName(String bucketName) {
            return bucketName(Output.of(bucketName));
        }

        /**
         * @param bucketOwner The ID of the AWS account that owns the Amazon S3 bucket.
         * 
         * @return builder
         * 
         */
        public Builder bucketOwner(@Nullable Output<String> bucketOwner) {
            $.bucketOwner = bucketOwner;
            return this;
        }

        /**
         * @param bucketOwner The ID of the AWS account that owns the Amazon S3 bucket.
         * 
         * @return builder
         * 
         */
        public Builder bucketOwner(String bucketOwner) {
            return bucketOwner(Output.of(bucketOwner));
        }

        /**
         * @param enabled Indicates whether logging is enabled.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Indicates whether logging is enabled.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param prefix The bucket prefix.
         * 
         * @return builder
         * 
         */
        public Builder prefix(@Nullable Output<String> prefix) {
            $.prefix = prefix;
            return this;
        }

        /**
         * @param prefix The bucket prefix.
         * 
         * @return builder
         * 
         */
        public Builder prefix(String prefix) {
            return prefix(Output.of(prefix));
        }

        public InstanceLoggingConfigurationAccessLogsS3Args build() {
            if ($.enabled == null) {
                throw new MissingRequiredPropertyException("InstanceLoggingConfigurationAccessLogsS3Args", "enabled");
            }
            return $;
        }
    }

}
