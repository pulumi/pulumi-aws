// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.inputs;

import com.pulumi.aws.quicksight.inputs.DataSetLogicalTableMapDataTransformArgs;
import com.pulumi.aws.quicksight.inputs.DataSetLogicalTableMapSourceArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DataSetLogicalTableMapArgs extends com.pulumi.resources.ResourceArgs {

    public static final DataSetLogicalTableMapArgs Empty = new DataSetLogicalTableMapArgs();

    /**
     * A display name for the logical table.
     * 
     */
    @Import(name="alias", required=true)
    private Output<String> alias;

    /**
     * @return A display name for the logical table.
     * 
     */
    public Output<String> alias() {
        return this.alias;
    }

    /**
     * Transform operations that act on this logical table. For this structure to be valid, only one of the attributes can be non-null. See data_transforms.
     * 
     */
    @Import(name="dataTransforms")
    private @Nullable Output<List<DataSetLogicalTableMapDataTransformArgs>> dataTransforms;

    /**
     * @return Transform operations that act on this logical table. For this structure to be valid, only one of the attributes can be non-null. See data_transforms.
     * 
     */
    public Optional<Output<List<DataSetLogicalTableMapDataTransformArgs>>> dataTransforms() {
        return Optional.ofNullable(this.dataTransforms);
    }

    /**
     * Key of the logical table map.
     * 
     */
    @Import(name="logicalTableMapId", required=true)
    private Output<String> logicalTableMapId;

    /**
     * @return Key of the logical table map.
     * 
     */
    public Output<String> logicalTableMapId() {
        return this.logicalTableMapId;
    }

    /**
     * Source of this logical table. See source.
     * 
     */
    @Import(name="source", required=true)
    private Output<DataSetLogicalTableMapSourceArgs> source;

    /**
     * @return Source of this logical table. See source.
     * 
     */
    public Output<DataSetLogicalTableMapSourceArgs> source() {
        return this.source;
    }

    private DataSetLogicalTableMapArgs() {}

    private DataSetLogicalTableMapArgs(DataSetLogicalTableMapArgs $) {
        this.alias = $.alias;
        this.dataTransforms = $.dataTransforms;
        this.logicalTableMapId = $.logicalTableMapId;
        this.source = $.source;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DataSetLogicalTableMapArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DataSetLogicalTableMapArgs $;

        public Builder() {
            $ = new DataSetLogicalTableMapArgs();
        }

        public Builder(DataSetLogicalTableMapArgs defaults) {
            $ = new DataSetLogicalTableMapArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param alias A display name for the logical table.
         * 
         * @return builder
         * 
         */
        public Builder alias(Output<String> alias) {
            $.alias = alias;
            return this;
        }

        /**
         * @param alias A display name for the logical table.
         * 
         * @return builder
         * 
         */
        public Builder alias(String alias) {
            return alias(Output.of(alias));
        }

        /**
         * @param dataTransforms Transform operations that act on this logical table. For this structure to be valid, only one of the attributes can be non-null. See data_transforms.
         * 
         * @return builder
         * 
         */
        public Builder dataTransforms(@Nullable Output<List<DataSetLogicalTableMapDataTransformArgs>> dataTransforms) {
            $.dataTransforms = dataTransforms;
            return this;
        }

        /**
         * @param dataTransforms Transform operations that act on this logical table. For this structure to be valid, only one of the attributes can be non-null. See data_transforms.
         * 
         * @return builder
         * 
         */
        public Builder dataTransforms(List<DataSetLogicalTableMapDataTransformArgs> dataTransforms) {
            return dataTransforms(Output.of(dataTransforms));
        }

        /**
         * @param dataTransforms Transform operations that act on this logical table. For this structure to be valid, only one of the attributes can be non-null. See data_transforms.
         * 
         * @return builder
         * 
         */
        public Builder dataTransforms(DataSetLogicalTableMapDataTransformArgs... dataTransforms) {
            return dataTransforms(List.of(dataTransforms));
        }

        /**
         * @param logicalTableMapId Key of the logical table map.
         * 
         * @return builder
         * 
         */
        public Builder logicalTableMapId(Output<String> logicalTableMapId) {
            $.logicalTableMapId = logicalTableMapId;
            return this;
        }

        /**
         * @param logicalTableMapId Key of the logical table map.
         * 
         * @return builder
         * 
         */
        public Builder logicalTableMapId(String logicalTableMapId) {
            return logicalTableMapId(Output.of(logicalTableMapId));
        }

        /**
         * @param source Source of this logical table. See source.
         * 
         * @return builder
         * 
         */
        public Builder source(Output<DataSetLogicalTableMapSourceArgs> source) {
            $.source = source;
            return this;
        }

        /**
         * @param source Source of this logical table. See source.
         * 
         * @return builder
         * 
         */
        public Builder source(DataSetLogicalTableMapSourceArgs source) {
            return source(Output.of(source));
        }

        public DataSetLogicalTableMapArgs build() {
            $.alias = Objects.requireNonNull($.alias, "expected parameter 'alias' to be non-null");
            $.logicalTableMapId = Objects.requireNonNull($.logicalTableMapId, "expected parameter 'logicalTableMapId' to be non-null");
            $.source = Objects.requireNonNull($.source, "expected parameter 'source' to be non-null");
            return $;
        }
    }

}
