// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.inputs;

import com.pulumi.aws.quicksight.inputs.FreeFormLayoutElementsBackgroundStyleArgs;
import com.pulumi.aws.quicksight.inputs.FreeFormLayoutElementsBorderStyleArgs;
import com.pulumi.aws.quicksight.inputs.FreeFormLayoutElementsRenderingRuleArgs;
import com.pulumi.aws.quicksight.inputs.FreeFormLayoutElementsSelectedBorderStyleArgs;
import com.pulumi.aws.quicksight.inputs.SelectAllOptionsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FreeFormLayoutElementsArgs extends com.pulumi.resources.ResourceArgs {

    public static final FreeFormLayoutElementsArgs Empty = new FreeFormLayoutElementsArgs();

    @Import(name="backgroundStyle")
    private @Nullable Output<FreeFormLayoutElementsBackgroundStyleArgs> backgroundStyle;

    public Optional<Output<FreeFormLayoutElementsBackgroundStyleArgs>> backgroundStyle() {
        return Optional.ofNullable(this.backgroundStyle);
    }

    @Import(name="borderStyle")
    private @Nullable Output<FreeFormLayoutElementsBorderStyleArgs> borderStyle;

    public Optional<Output<FreeFormLayoutElementsBorderStyleArgs>> borderStyle() {
        return Optional.ofNullable(this.borderStyle);
    }

    @Import(name="elementId", required=true)
    private Output<String> elementId;

    public Output<String> elementId() {
        return this.elementId;
    }

    @Import(name="elementType", required=true)
    private Output<String> elementType;

    public Output<String> elementType() {
        return this.elementType;
    }

    @Import(name="height", required=true)
    private Output<String> height;

    public Output<String> height() {
        return this.height;
    }

    @Import(name="loadingAnimation")
    private @Nullable Output<SelectAllOptionsArgs> loadingAnimation;

    public Optional<Output<SelectAllOptionsArgs>> loadingAnimation() {
        return Optional.ofNullable(this.loadingAnimation);
    }

    @Import(name="renderingRules")
    private @Nullable Output<List<FreeFormLayoutElementsRenderingRuleArgs>> renderingRules;

    public Optional<Output<List<FreeFormLayoutElementsRenderingRuleArgs>>> renderingRules() {
        return Optional.ofNullable(this.renderingRules);
    }

    @Import(name="selectedBorderStyle")
    private @Nullable Output<FreeFormLayoutElementsSelectedBorderStyleArgs> selectedBorderStyle;

    public Optional<Output<FreeFormLayoutElementsSelectedBorderStyleArgs>> selectedBorderStyle() {
        return Optional.ofNullable(this.selectedBorderStyle);
    }

    @Import(name="visibility")
    private @Nullable Output<String> visibility;

    public Optional<Output<String>> visibility() {
        return Optional.ofNullable(this.visibility);
    }

    @Import(name="width", required=true)
    private Output<String> width;

    public Output<String> width() {
        return this.width;
    }

    @Import(name="xAxisLocation", required=true)
    private Output<String> xAxisLocation;

    public Output<String> xAxisLocation() {
        return this.xAxisLocation;
    }

    @Import(name="yAxisLocation", required=true)
    private Output<String> yAxisLocation;

    public Output<String> yAxisLocation() {
        return this.yAxisLocation;
    }

    private FreeFormLayoutElementsArgs() {}

    private FreeFormLayoutElementsArgs(FreeFormLayoutElementsArgs $) {
        this.backgroundStyle = $.backgroundStyle;
        this.borderStyle = $.borderStyle;
        this.elementId = $.elementId;
        this.elementType = $.elementType;
        this.height = $.height;
        this.loadingAnimation = $.loadingAnimation;
        this.renderingRules = $.renderingRules;
        this.selectedBorderStyle = $.selectedBorderStyle;
        this.visibility = $.visibility;
        this.width = $.width;
        this.xAxisLocation = $.xAxisLocation;
        this.yAxisLocation = $.yAxisLocation;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FreeFormLayoutElementsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FreeFormLayoutElementsArgs $;

        public Builder() {
            $ = new FreeFormLayoutElementsArgs();
        }

        public Builder(FreeFormLayoutElementsArgs defaults) {
            $ = new FreeFormLayoutElementsArgs(Objects.requireNonNull(defaults));
        }

        public Builder backgroundStyle(@Nullable Output<FreeFormLayoutElementsBackgroundStyleArgs> backgroundStyle) {
            $.backgroundStyle = backgroundStyle;
            return this;
        }

        public Builder backgroundStyle(FreeFormLayoutElementsBackgroundStyleArgs backgroundStyle) {
            return backgroundStyle(Output.of(backgroundStyle));
        }

        public Builder borderStyle(@Nullable Output<FreeFormLayoutElementsBorderStyleArgs> borderStyle) {
            $.borderStyle = borderStyle;
            return this;
        }

        public Builder borderStyle(FreeFormLayoutElementsBorderStyleArgs borderStyle) {
            return borderStyle(Output.of(borderStyle));
        }

        public Builder elementId(Output<String> elementId) {
            $.elementId = elementId;
            return this;
        }

        public Builder elementId(String elementId) {
            return elementId(Output.of(elementId));
        }

        public Builder elementType(Output<String> elementType) {
            $.elementType = elementType;
            return this;
        }

        public Builder elementType(String elementType) {
            return elementType(Output.of(elementType));
        }

        public Builder height(Output<String> height) {
            $.height = height;
            return this;
        }

        public Builder height(String height) {
            return height(Output.of(height));
        }

        public Builder loadingAnimation(@Nullable Output<SelectAllOptionsArgs> loadingAnimation) {
            $.loadingAnimation = loadingAnimation;
            return this;
        }

        public Builder loadingAnimation(SelectAllOptionsArgs loadingAnimation) {
            return loadingAnimation(Output.of(loadingAnimation));
        }

        public Builder renderingRules(@Nullable Output<List<FreeFormLayoutElementsRenderingRuleArgs>> renderingRules) {
            $.renderingRules = renderingRules;
            return this;
        }

        public Builder renderingRules(List<FreeFormLayoutElementsRenderingRuleArgs> renderingRules) {
            return renderingRules(Output.of(renderingRules));
        }

        public Builder renderingRules(FreeFormLayoutElementsRenderingRuleArgs... renderingRules) {
            return renderingRules(List.of(renderingRules));
        }

        public Builder selectedBorderStyle(@Nullable Output<FreeFormLayoutElementsSelectedBorderStyleArgs> selectedBorderStyle) {
            $.selectedBorderStyle = selectedBorderStyle;
            return this;
        }

        public Builder selectedBorderStyle(FreeFormLayoutElementsSelectedBorderStyleArgs selectedBorderStyle) {
            return selectedBorderStyle(Output.of(selectedBorderStyle));
        }

        public Builder visibility(@Nullable Output<String> visibility) {
            $.visibility = visibility;
            return this;
        }

        public Builder visibility(String visibility) {
            return visibility(Output.of(visibility));
        }

        public Builder width(Output<String> width) {
            $.width = width;
            return this;
        }

        public Builder width(String width) {
            return width(Output.of(width));
        }

        public Builder xAxisLocation(Output<String> xAxisLocation) {
            $.xAxisLocation = xAxisLocation;
            return this;
        }

        public Builder xAxisLocation(String xAxisLocation) {
            return xAxisLocation(Output.of(xAxisLocation));
        }

        public Builder yAxisLocation(Output<String> yAxisLocation) {
            $.yAxisLocation = yAxisLocation;
            return this;
        }

        public Builder yAxisLocation(String yAxisLocation) {
            return yAxisLocation(Output.of(yAxisLocation));
        }

        public FreeFormLayoutElementsArgs build() {
            if ($.elementId == null) {
                throw new MissingRequiredPropertyException("FreeFormLayoutElementsArgs", "elementId");
            }
            if ($.elementType == null) {
                throw new MissingRequiredPropertyException("FreeFormLayoutElementsArgs", "elementType");
            }
            if ($.height == null) {
                throw new MissingRequiredPropertyException("FreeFormLayoutElementsArgs", "height");
            }
            if ($.width == null) {
                throw new MissingRequiredPropertyException("FreeFormLayoutElementsArgs", "width");
            }
            if ($.xAxisLocation == null) {
                throw new MissingRequiredPropertyException("FreeFormLayoutElementsArgs", "xAxisLocation");
            }
            if ($.yAxisLocation == null) {
                throw new MissingRequiredPropertyException("FreeFormLayoutElementsArgs", "yAxisLocation");
            }
            return $;
        }
    }

}
