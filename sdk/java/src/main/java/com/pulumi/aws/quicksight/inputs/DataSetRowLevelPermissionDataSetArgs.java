// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DataSetRowLevelPermissionDataSetArgs extends com.pulumi.resources.ResourceArgs {

    public static final DataSetRowLevelPermissionDataSetArgs Empty = new DataSetRowLevelPermissionDataSetArgs();

    /**
     * ARN of the dataset that contains permissions for RLS.
     * 
     */
    @Import(name="arn", required=true)
    private Output<String> arn;

    /**
     * @return ARN of the dataset that contains permissions for RLS.
     * 
     */
    public Output<String> arn() {
        return this.arn;
    }

    /**
     * User or group rules associated with the dataset that contains permissions for RLS.
     * 
     */
    @Import(name="formatVersion")
    private @Nullable Output<String> formatVersion;

    /**
     * @return User or group rules associated with the dataset that contains permissions for RLS.
     * 
     */
    public Optional<Output<String>> formatVersion() {
        return Optional.ofNullable(this.formatVersion);
    }

    /**
     * Namespace associated with the dataset that contains permissions for RLS.
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return Namespace associated with the dataset that contains permissions for RLS.
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * Type of permissions to use when interpreting the permissions for RLS. Valid values are `GRANT_ACCESS` and `DENY_ACCESS`.
     * 
     */
    @Import(name="permissionPolicy", required=true)
    private Output<String> permissionPolicy;

    /**
     * @return Type of permissions to use when interpreting the permissions for RLS. Valid values are `GRANT_ACCESS` and `DENY_ACCESS`.
     * 
     */
    public Output<String> permissionPolicy() {
        return this.permissionPolicy;
    }

    /**
     * Status of the row-level security permission dataset. If enabled, the status is `ENABLED`. If disabled, the status is `DISABLED`.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Status of the row-level security permission dataset. If enabled, the status is `ENABLED`. If disabled, the status is `DISABLED`.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private DataSetRowLevelPermissionDataSetArgs() {}

    private DataSetRowLevelPermissionDataSetArgs(DataSetRowLevelPermissionDataSetArgs $) {
        this.arn = $.arn;
        this.formatVersion = $.formatVersion;
        this.namespace = $.namespace;
        this.permissionPolicy = $.permissionPolicy;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DataSetRowLevelPermissionDataSetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DataSetRowLevelPermissionDataSetArgs $;

        public Builder() {
            $ = new DataSetRowLevelPermissionDataSetArgs();
        }

        public Builder(DataSetRowLevelPermissionDataSetArgs defaults) {
            $ = new DataSetRowLevelPermissionDataSetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param arn ARN of the dataset that contains permissions for RLS.
         * 
         * @return builder
         * 
         */
        public Builder arn(Output<String> arn) {
            $.arn = arn;
            return this;
        }

        /**
         * @param arn ARN of the dataset that contains permissions for RLS.
         * 
         * @return builder
         * 
         */
        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        /**
         * @param formatVersion User or group rules associated with the dataset that contains permissions for RLS.
         * 
         * @return builder
         * 
         */
        public Builder formatVersion(@Nullable Output<String> formatVersion) {
            $.formatVersion = formatVersion;
            return this;
        }

        /**
         * @param formatVersion User or group rules associated with the dataset that contains permissions for RLS.
         * 
         * @return builder
         * 
         */
        public Builder formatVersion(String formatVersion) {
            return formatVersion(Output.of(formatVersion));
        }

        /**
         * @param namespace Namespace associated with the dataset that contains permissions for RLS.
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace Namespace associated with the dataset that contains permissions for RLS.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param permissionPolicy Type of permissions to use when interpreting the permissions for RLS. Valid values are `GRANT_ACCESS` and `DENY_ACCESS`.
         * 
         * @return builder
         * 
         */
        public Builder permissionPolicy(Output<String> permissionPolicy) {
            $.permissionPolicy = permissionPolicy;
            return this;
        }

        /**
         * @param permissionPolicy Type of permissions to use when interpreting the permissions for RLS. Valid values are `GRANT_ACCESS` and `DENY_ACCESS`.
         * 
         * @return builder
         * 
         */
        public Builder permissionPolicy(String permissionPolicy) {
            return permissionPolicy(Output.of(permissionPolicy));
        }

        /**
         * @param status Status of the row-level security permission dataset. If enabled, the status is `ENABLED`. If disabled, the status is `DISABLED`.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Status of the row-level security permission dataset. If enabled, the status is `ENABLED`. If disabled, the status is `DISABLED`.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public DataSetRowLevelPermissionDataSetArgs build() {
            if ($.arn == null) {
                throw new MissingRequiredPropertyException("DataSetRowLevelPermissionDataSetArgs", "arn");
            }
            if ($.permissionPolicy == null) {
                throw new MissingRequiredPropertyException("DataSetRowLevelPermissionDataSetArgs", "permissionPolicy");
            }
            return $;
        }
    }

}
