// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.codepipeline.outputs;

import com.pulumi.aws.codepipeline.outputs.PipelineStageAction;
import com.pulumi.aws.codepipeline.outputs.PipelineStageBeforeEntry;
import com.pulumi.aws.codepipeline.outputs.PipelineStageOnFailure;
import com.pulumi.aws.codepipeline.outputs.PipelineStageOnSuccess;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class PipelineStage {
    /**
     * @return The action(s) to include in the stage. Defined as an `action` block below
     * 
     */
    private List<PipelineStageAction> actions;
    /**
     * @return The method to use when a stage allows entry. For example, configuring this field for conditions will allow entry to the stage when the conditions are met.
     * 
     */
    private @Nullable PipelineStageBeforeEntry beforeEntry;
    /**
     * @return The name of the stage.
     * 
     */
    private String name;
    /**
     * @return The method to use when a stage has not completed successfully. For example, configuring this field for rollback will roll back a failed stage automatically to the last successful pipeline execution in the stage.
     * 
     */
    private @Nullable PipelineStageOnFailure onFailure;
    /**
     * @return The method to use when a stage has succeeded. For example, configuring this field for conditions will allow the stage to succeed when the conditions are met.
     * 
     */
    private @Nullable PipelineStageOnSuccess onSuccess;

    private PipelineStage() {}
    /**
     * @return The action(s) to include in the stage. Defined as an `action` block below
     * 
     */
    public List<PipelineStageAction> actions() {
        return this.actions;
    }
    /**
     * @return The method to use when a stage allows entry. For example, configuring this field for conditions will allow entry to the stage when the conditions are met.
     * 
     */
    public Optional<PipelineStageBeforeEntry> beforeEntry() {
        return Optional.ofNullable(this.beforeEntry);
    }
    /**
     * @return The name of the stage.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The method to use when a stage has not completed successfully. For example, configuring this field for rollback will roll back a failed stage automatically to the last successful pipeline execution in the stage.
     * 
     */
    public Optional<PipelineStageOnFailure> onFailure() {
        return Optional.ofNullable(this.onFailure);
    }
    /**
     * @return The method to use when a stage has succeeded. For example, configuring this field for conditions will allow the stage to succeed when the conditions are met.
     * 
     */
    public Optional<PipelineStageOnSuccess> onSuccess() {
        return Optional.ofNullable(this.onSuccess);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PipelineStage defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<PipelineStageAction> actions;
        private @Nullable PipelineStageBeforeEntry beforeEntry;
        private String name;
        private @Nullable PipelineStageOnFailure onFailure;
        private @Nullable PipelineStageOnSuccess onSuccess;
        public Builder() {}
        public Builder(PipelineStage defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.actions = defaults.actions;
    	      this.beforeEntry = defaults.beforeEntry;
    	      this.name = defaults.name;
    	      this.onFailure = defaults.onFailure;
    	      this.onSuccess = defaults.onSuccess;
        }

        @CustomType.Setter
        public Builder actions(List<PipelineStageAction> actions) {
            if (actions == null) {
              throw new MissingRequiredPropertyException("PipelineStage", "actions");
            }
            this.actions = actions;
            return this;
        }
        public Builder actions(PipelineStageAction... actions) {
            return actions(List.of(actions));
        }
        @CustomType.Setter
        public Builder beforeEntry(@Nullable PipelineStageBeforeEntry beforeEntry) {

            this.beforeEntry = beforeEntry;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("PipelineStage", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder onFailure(@Nullable PipelineStageOnFailure onFailure) {

            this.onFailure = onFailure;
            return this;
        }
        @CustomType.Setter
        public Builder onSuccess(@Nullable PipelineStageOnSuccess onSuccess) {

            this.onSuccess = onSuccess;
            return this;
        }
        public PipelineStage build() {
            final var _resultValue = new PipelineStage();
            _resultValue.actions = actions;
            _resultValue.beforeEntry = beforeEntry;
            _resultValue.name = name;
            _resultValue.onFailure = onFailure;
            _resultValue.onSuccess = onSuccess;
            return _resultValue;
        }
    }
}
