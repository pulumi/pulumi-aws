// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.inputs;

import com.pulumi.aws.quicksight.inputs.VisualsHistogramVisualChartConfigurationBinOptionsBinCountArgs;
import com.pulumi.aws.quicksight.inputs.VisualsHistogramVisualChartConfigurationBinOptionsBinWidthArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VisualsHistogramVisualChartConfigurationBinOptionsArgs extends com.pulumi.resources.ResourceArgs {

    public static final VisualsHistogramVisualChartConfigurationBinOptionsArgs Empty = new VisualsHistogramVisualChartConfigurationBinOptionsArgs();

    @Import(name="binCount")
    private @Nullable Output<VisualsHistogramVisualChartConfigurationBinOptionsBinCountArgs> binCount;

    public Optional<Output<VisualsHistogramVisualChartConfigurationBinOptionsBinCountArgs>> binCount() {
        return Optional.ofNullable(this.binCount);
    }

    @Import(name="binWidth")
    private @Nullable Output<VisualsHistogramVisualChartConfigurationBinOptionsBinWidthArgs> binWidth;

    public Optional<Output<VisualsHistogramVisualChartConfigurationBinOptionsBinWidthArgs>> binWidth() {
        return Optional.ofNullable(this.binWidth);
    }

    @Import(name="selectedBinType")
    private @Nullable Output<String> selectedBinType;

    public Optional<Output<String>> selectedBinType() {
        return Optional.ofNullable(this.selectedBinType);
    }

    @Import(name="startValue")
    private @Nullable Output<Double> startValue;

    public Optional<Output<Double>> startValue() {
        return Optional.ofNullable(this.startValue);
    }

    private VisualsHistogramVisualChartConfigurationBinOptionsArgs() {}

    private VisualsHistogramVisualChartConfigurationBinOptionsArgs(VisualsHistogramVisualChartConfigurationBinOptionsArgs $) {
        this.binCount = $.binCount;
        this.binWidth = $.binWidth;
        this.selectedBinType = $.selectedBinType;
        this.startValue = $.startValue;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VisualsHistogramVisualChartConfigurationBinOptionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VisualsHistogramVisualChartConfigurationBinOptionsArgs $;

        public Builder() {
            $ = new VisualsHistogramVisualChartConfigurationBinOptionsArgs();
        }

        public Builder(VisualsHistogramVisualChartConfigurationBinOptionsArgs defaults) {
            $ = new VisualsHistogramVisualChartConfigurationBinOptionsArgs(Objects.requireNonNull(defaults));
        }

        public Builder binCount(@Nullable Output<VisualsHistogramVisualChartConfigurationBinOptionsBinCountArgs> binCount) {
            $.binCount = binCount;
            return this;
        }

        public Builder binCount(VisualsHistogramVisualChartConfigurationBinOptionsBinCountArgs binCount) {
            return binCount(Output.of(binCount));
        }

        public Builder binWidth(@Nullable Output<VisualsHistogramVisualChartConfigurationBinOptionsBinWidthArgs> binWidth) {
            $.binWidth = binWidth;
            return this;
        }

        public Builder binWidth(VisualsHistogramVisualChartConfigurationBinOptionsBinWidthArgs binWidth) {
            return binWidth(Output.of(binWidth));
        }

        public Builder selectedBinType(@Nullable Output<String> selectedBinType) {
            $.selectedBinType = selectedBinType;
            return this;
        }

        public Builder selectedBinType(String selectedBinType) {
            return selectedBinType(Output.of(selectedBinType));
        }

        public Builder startValue(@Nullable Output<Double> startValue) {
            $.startValue = startValue;
            return this;
        }

        public Builder startValue(Double startValue) {
            return startValue(Output.of(startValue));
        }

        public VisualsHistogramVisualChartConfigurationBinOptionsArgs build() {
            return $;
        }
    }

}
