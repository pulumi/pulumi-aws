// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.shield;

import com.pulumi.aws.shield.inputs.DrtAccessLogBucketAssociationTimeoutsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DrtAccessLogBucketAssociationArgs extends com.pulumi.resources.ResourceArgs {

    public static final DrtAccessLogBucketAssociationArgs Empty = new DrtAccessLogBucketAssociationArgs();

    /**
     * The Amazon S3 bucket that contains the logs that you want to share.
     * 
     */
    @Import(name="logBucket", required=true)
    private Output<String> logBucket;

    /**
     * @return The Amazon S3 bucket that contains the logs that you want to share.
     * 
     */
    public Output<String> logBucket() {
        return this.logBucket;
    }

    /**
     * The ID of the Role Arn association used for allowing Shield DRT Access.
     * 
     */
    @Import(name="roleArnAssociationId", required=true)
    private Output<String> roleArnAssociationId;

    /**
     * @return The ID of the Role Arn association used for allowing Shield DRT Access.
     * 
     */
    public Output<String> roleArnAssociationId() {
        return this.roleArnAssociationId;
    }

    @Import(name="timeouts")
    private @Nullable Output<DrtAccessLogBucketAssociationTimeoutsArgs> timeouts;

    public Optional<Output<DrtAccessLogBucketAssociationTimeoutsArgs>> timeouts() {
        return Optional.ofNullable(this.timeouts);
    }

    private DrtAccessLogBucketAssociationArgs() {}

    private DrtAccessLogBucketAssociationArgs(DrtAccessLogBucketAssociationArgs $) {
        this.logBucket = $.logBucket;
        this.roleArnAssociationId = $.roleArnAssociationId;
        this.timeouts = $.timeouts;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DrtAccessLogBucketAssociationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DrtAccessLogBucketAssociationArgs $;

        public Builder() {
            $ = new DrtAccessLogBucketAssociationArgs();
        }

        public Builder(DrtAccessLogBucketAssociationArgs defaults) {
            $ = new DrtAccessLogBucketAssociationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param logBucket The Amazon S3 bucket that contains the logs that you want to share.
         * 
         * @return builder
         * 
         */
        public Builder logBucket(Output<String> logBucket) {
            $.logBucket = logBucket;
            return this;
        }

        /**
         * @param logBucket The Amazon S3 bucket that contains the logs that you want to share.
         * 
         * @return builder
         * 
         */
        public Builder logBucket(String logBucket) {
            return logBucket(Output.of(logBucket));
        }

        /**
         * @param roleArnAssociationId The ID of the Role Arn association used for allowing Shield DRT Access.
         * 
         * @return builder
         * 
         */
        public Builder roleArnAssociationId(Output<String> roleArnAssociationId) {
            $.roleArnAssociationId = roleArnAssociationId;
            return this;
        }

        /**
         * @param roleArnAssociationId The ID of the Role Arn association used for allowing Shield DRT Access.
         * 
         * @return builder
         * 
         */
        public Builder roleArnAssociationId(String roleArnAssociationId) {
            return roleArnAssociationId(Output.of(roleArnAssociationId));
        }

        public Builder timeouts(@Nullable Output<DrtAccessLogBucketAssociationTimeoutsArgs> timeouts) {
            $.timeouts = timeouts;
            return this;
        }

        public Builder timeouts(DrtAccessLogBucketAssociationTimeoutsArgs timeouts) {
            return timeouts(Output.of(timeouts));
        }

        public DrtAccessLogBucketAssociationArgs build() {
            $.logBucket = Objects.requireNonNull($.logBucket, "expected parameter 'logBucket' to be non-null");
            $.roleArnAssociationId = Objects.requireNonNull($.roleArnAssociationId, "expected parameter 'roleArnAssociationId' to be non-null");
            return $;
        }
    }

}
