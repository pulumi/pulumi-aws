// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.transcribe;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MedicalVocabularyArgs extends com.pulumi.resources.ResourceArgs {

    public static final MedicalVocabularyArgs Empty = new MedicalVocabularyArgs();

    @Import(name="languageCode", required=true)
    private Output<String> languageCode;

    public Output<String> languageCode() {
        return this.languageCode;
    }

    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="vocabularyFileUri", required=true)
    private Output<String> vocabularyFileUri;

    public Output<String> vocabularyFileUri() {
        return this.vocabularyFileUri;
    }

    @Import(name="vocabularyName", required=true)
    private Output<String> vocabularyName;

    public Output<String> vocabularyName() {
        return this.vocabularyName;
    }

    private MedicalVocabularyArgs() {}

    private MedicalVocabularyArgs(MedicalVocabularyArgs $) {
        this.languageCode = $.languageCode;
        this.tags = $.tags;
        this.vocabularyFileUri = $.vocabularyFileUri;
        this.vocabularyName = $.vocabularyName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MedicalVocabularyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MedicalVocabularyArgs $;

        public Builder() {
            $ = new MedicalVocabularyArgs();
        }

        public Builder(MedicalVocabularyArgs defaults) {
            $ = new MedicalVocabularyArgs(Objects.requireNonNull(defaults));
        }

        public Builder languageCode(Output<String> languageCode) {
            $.languageCode = languageCode;
            return this;
        }

        public Builder languageCode(String languageCode) {
            return languageCode(Output.of(languageCode));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder vocabularyFileUri(Output<String> vocabularyFileUri) {
            $.vocabularyFileUri = vocabularyFileUri;
            return this;
        }

        public Builder vocabularyFileUri(String vocabularyFileUri) {
            return vocabularyFileUri(Output.of(vocabularyFileUri));
        }

        public Builder vocabularyName(Output<String> vocabularyName) {
            $.vocabularyName = vocabularyName;
            return this;
        }

        public Builder vocabularyName(String vocabularyName) {
            return vocabularyName(Output.of(vocabularyName));
        }

        public MedicalVocabularyArgs build() {
            $.languageCode = Objects.requireNonNull($.languageCode, "expected parameter 'languageCode' to be non-null");
            $.vocabularyFileUri = Objects.requireNonNull($.vocabularyFileUri, "expected parameter 'vocabularyFileUri' to be non-null");
            $.vocabularyName = Objects.requireNonNull($.vocabularyName, "expected parameter 'vocabularyName' to be non-null");
            return $;
        }
    }

}
