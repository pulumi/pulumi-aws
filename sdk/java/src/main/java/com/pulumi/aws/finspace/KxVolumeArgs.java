// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.finspace;

import com.pulumi.aws.finspace.inputs.KxVolumeNas1ConfigurationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class KxVolumeArgs extends com.pulumi.resources.ResourceArgs {

    public static final KxVolumeArgs Empty = new KxVolumeArgs();

    /**
     * The identifier of the AWS Availability Zone IDs.
     * 
     * The following arguments are optional:
     * 
     */
    @Import(name="availabilityZones", required=true)
    private Output<List<String>> availabilityZones;

    /**
     * @return The identifier of the AWS Availability Zone IDs.
     * 
     * The following arguments are optional:
     * 
     */
    public Output<List<String>> availabilityZones() {
        return this.availabilityZones;
    }

    /**
     * The number of availability zones you want to assign per volume. Currently, Finspace only support SINGLE for volumes.
     * 
     */
    @Import(name="azMode", required=true)
    private Output<String> azMode;

    /**
     * @return The number of availability zones you want to assign per volume. Currently, Finspace only support SINGLE for volumes.
     * 
     */
    public Output<String> azMode() {
        return this.azMode;
    }

    /**
     * Description of the volume.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the volume.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * A unique identifier for the kdb environment, whose clusters can attach to the volume.
     * 
     */
    @Import(name="environmentId", required=true)
    private Output<String> environmentId;

    /**
     * @return A unique identifier for the kdb environment, whose clusters can attach to the volume.
     * 
     */
    public Output<String> environmentId() {
        return this.environmentId;
    }

    /**
     * Unique name for the volumr that you want to create.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Unique name for the volumr that you want to create.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Specifies the configuration for the Network attached storage (`NAS_1`) file system volume. This parameter is required when `volume_type` is `NAS_1`. See `nas1_configuration` Argument Reference below.
     * 
     */
    @Import(name="nas1Configurations")
    private @Nullable Output<List<KxVolumeNas1ConfigurationArgs>> nas1Configurations;

    /**
     * @return Specifies the configuration for the Network attached storage (`NAS_1`) file system volume. This parameter is required when `volume_type` is `NAS_1`. See `nas1_configuration` Argument Reference below.
     * 
     */
    public Optional<Output<List<KxVolumeNas1ConfigurationArgs>>> nas1Configurations() {
        return Optional.ofNullable(this.nas1Configurations);
    }

    /**
     * A list of key-value pairs to label the volume. You can add up to 50 tags to a volume
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A list of key-value pairs to label the volume. You can add up to 50 tags to a volume
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The type of file system volume. Currently, FinSpace only supports the `NAS_1` volume type. When you select the `NAS_1` volume type, you must also provide `nas1_configuration`.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return The type of file system volume. Currently, FinSpace only supports the `NAS_1` volume type. When you select the `NAS_1` volume type, you must also provide `nas1_configuration`.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private KxVolumeArgs() {}

    private KxVolumeArgs(KxVolumeArgs $) {
        this.availabilityZones = $.availabilityZones;
        this.azMode = $.azMode;
        this.description = $.description;
        this.environmentId = $.environmentId;
        this.name = $.name;
        this.nas1Configurations = $.nas1Configurations;
        this.tags = $.tags;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(KxVolumeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private KxVolumeArgs $;

        public Builder() {
            $ = new KxVolumeArgs();
        }

        public Builder(KxVolumeArgs defaults) {
            $ = new KxVolumeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param availabilityZones The identifier of the AWS Availability Zone IDs.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder availabilityZones(Output<List<String>> availabilityZones) {
            $.availabilityZones = availabilityZones;
            return this;
        }

        /**
         * @param availabilityZones The identifier of the AWS Availability Zone IDs.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder availabilityZones(List<String> availabilityZones) {
            return availabilityZones(Output.of(availabilityZones));
        }

        /**
         * @param availabilityZones The identifier of the AWS Availability Zone IDs.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder availabilityZones(String... availabilityZones) {
            return availabilityZones(List.of(availabilityZones));
        }

        /**
         * @param azMode The number of availability zones you want to assign per volume. Currently, Finspace only support SINGLE for volumes.
         * 
         * @return builder
         * 
         */
        public Builder azMode(Output<String> azMode) {
            $.azMode = azMode;
            return this;
        }

        /**
         * @param azMode The number of availability zones you want to assign per volume. Currently, Finspace only support SINGLE for volumes.
         * 
         * @return builder
         * 
         */
        public Builder azMode(String azMode) {
            return azMode(Output.of(azMode));
        }

        /**
         * @param description Description of the volume.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the volume.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param environmentId A unique identifier for the kdb environment, whose clusters can attach to the volume.
         * 
         * @return builder
         * 
         */
        public Builder environmentId(Output<String> environmentId) {
            $.environmentId = environmentId;
            return this;
        }

        /**
         * @param environmentId A unique identifier for the kdb environment, whose clusters can attach to the volume.
         * 
         * @return builder
         * 
         */
        public Builder environmentId(String environmentId) {
            return environmentId(Output.of(environmentId));
        }

        /**
         * @param name Unique name for the volumr that you want to create.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Unique name for the volumr that you want to create.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param nas1Configurations Specifies the configuration for the Network attached storage (`NAS_1`) file system volume. This parameter is required when `volume_type` is `NAS_1`. See `nas1_configuration` Argument Reference below.
         * 
         * @return builder
         * 
         */
        public Builder nas1Configurations(@Nullable Output<List<KxVolumeNas1ConfigurationArgs>> nas1Configurations) {
            $.nas1Configurations = nas1Configurations;
            return this;
        }

        /**
         * @param nas1Configurations Specifies the configuration for the Network attached storage (`NAS_1`) file system volume. This parameter is required when `volume_type` is `NAS_1`. See `nas1_configuration` Argument Reference below.
         * 
         * @return builder
         * 
         */
        public Builder nas1Configurations(List<KxVolumeNas1ConfigurationArgs> nas1Configurations) {
            return nas1Configurations(Output.of(nas1Configurations));
        }

        /**
         * @param nas1Configurations Specifies the configuration for the Network attached storage (`NAS_1`) file system volume. This parameter is required when `volume_type` is `NAS_1`. See `nas1_configuration` Argument Reference below.
         * 
         * @return builder
         * 
         */
        public Builder nas1Configurations(KxVolumeNas1ConfigurationArgs... nas1Configurations) {
            return nas1Configurations(List.of(nas1Configurations));
        }

        /**
         * @param tags A list of key-value pairs to label the volume. You can add up to 50 tags to a volume
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A list of key-value pairs to label the volume. You can add up to 50 tags to a volume
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param type The type of file system volume. Currently, FinSpace only supports the `NAS_1` volume type. When you select the `NAS_1` volume type, you must also provide `nas1_configuration`.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of file system volume. Currently, FinSpace only supports the `NAS_1` volume type. When you select the `NAS_1` volume type, you must also provide `nas1_configuration`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public KxVolumeArgs build() {
            if ($.availabilityZones == null) {
                throw new MissingRequiredPropertyException("KxVolumeArgs", "availabilityZones");
            }
            if ($.azMode == null) {
                throw new MissingRequiredPropertyException("KxVolumeArgs", "azMode");
            }
            if ($.environmentId == null) {
                throw new MissingRequiredPropertyException("KxVolumeArgs", "environmentId");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("KxVolumeArgs", "type");
            }
            return $;
        }
    }

}
