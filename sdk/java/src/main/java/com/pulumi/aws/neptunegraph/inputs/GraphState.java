// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.neptunegraph.inputs;

import com.pulumi.aws.neptunegraph.inputs.GraphTimeoutsArgs;
import com.pulumi.aws.neptunegraph.inputs.GraphVectorSearchConfigurationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GraphState extends com.pulumi.resources.ResourceArgs {

    public static final GraphState Empty = new GraphState();

    /**
     * (String) Graph resource ARN
     * 
     */
    @Import(name="arn")
    private @Nullable Output<String> arn;

    /**
     * @return (String) Graph resource ARN
     * 
     */
    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    /**
     * A value that indicates whether the graph has deletion protection enabled. The graph can&#39;t be deleted when deletion
     * protection is enabled.
     * 
     */
    @Import(name="deletionProtection")
    private @Nullable Output<Boolean> deletionProtection;

    /**
     * @return A value that indicates whether the graph has deletion protection enabled. The graph can&#39;t be deleted when deletion
     * protection is enabled.
     * 
     */
    public Optional<Output<Boolean>> deletionProtection() {
        return Optional.ofNullable(this.deletionProtection);
    }

    /**
     * (String) The connection endpoint for the graph. For example: `g-12a3bcdef4.us-east-1.neptune-graph.amazonaws.com`
     * 
     */
    @Import(name="endpoint")
    private @Nullable Output<String> endpoint;

    /**
     * @return (String) The connection endpoint for the graph. For example: `g-12a3bcdef4.us-east-1.neptune-graph.amazonaws.com`
     * 
     */
    public Optional<Output<String>> endpoint() {
        return Optional.ofNullable(this.endpoint);
    }

    /**
     * The graph name. For example: my-graph-1. The name must contain from 1 to 63 letters, numbers, or hyphens, and its first
     * character must be a letter. It cannot end with a hyphen or contain two consecutive hyphens. If you don&#39;t specify a graph
     * name, a unique graph name is generated for you using the prefix graph-for, followed by a combination of Stack Name and a
     * UUID.
     * 
     */
    @Import(name="graphName")
    private @Nullable Output<String> graphName;

    /**
     * @return The graph name. For example: my-graph-1. The name must contain from 1 to 63 letters, numbers, or hyphens, and its first
     * character must be a letter. It cannot end with a hyphen or contain two consecutive hyphens. If you don&#39;t specify a graph
     * name, a unique graph name is generated for you using the prefix graph-for, followed by a combination of Stack Name and a
     * UUID.
     * 
     */
    public Optional<Output<String>> graphName() {
        return Optional.ofNullable(this.graphName);
    }

    /**
     * Allows user to specify name prefix and have remainder of name automatically generated.
     * 
     */
    @Import(name="graphNamePrefix")
    private @Nullable Output<String> graphNamePrefix;

    /**
     * @return Allows user to specify name prefix and have remainder of name automatically generated.
     * 
     */
    public Optional<Output<String>> graphNamePrefix() {
        return Optional.ofNullable(this.graphNamePrefix);
    }

    /**
     * Specifies a KMS key to use to encrypt data in the new graph. Value must be ARN of KMS Key.
     * 
     */
    @Import(name="kmsKeyIdentifier")
    private @Nullable Output<String> kmsKeyIdentifier;

    /**
     * @return Specifies a KMS key to use to encrypt data in the new graph. Value must be ARN of KMS Key.
     * 
     */
    public Optional<Output<String>> kmsKeyIdentifier() {
        return Optional.ofNullable(this.kmsKeyIdentifier);
    }

    /**
     * The provisioned memory-optimized Neptune Capacity Units (m-NCUs) to use for the graph.
     * 
     */
    @Import(name="provisionedMemory")
    private @Nullable Output<Integer> provisionedMemory;

    /**
     * @return The provisioned memory-optimized Neptune Capacity Units (m-NCUs) to use for the graph.
     * 
     */
    public Optional<Output<Integer>> provisionedMemory() {
        return Optional.ofNullable(this.provisionedMemory);
    }

    /**
     * Specifies whether or not the graph can be reachable over the internet. All access to graphs is IAM authenticated. When
     * the graph is publicly available, its domain name system (DNS) endpoint resolves to the public IP address from the
     * internet. When the graph isn&#39;t publicly available, you need to create a PrivateGraphEndpoint in a given VPC to ensure
     * the DNS name resolves to a private IP address that is reachable from the VPC.
     * 
     */
    @Import(name="publicConnectivity")
    private @Nullable Output<Boolean> publicConnectivity;

    /**
     * @return Specifies whether or not the graph can be reachable over the internet. All access to graphs is IAM authenticated. When
     * the graph is publicly available, its domain name system (DNS) endpoint resolves to the public IP address from the
     * internet. When the graph isn&#39;t publicly available, you need to create a PrivateGraphEndpoint in a given VPC to ensure
     * the DNS name resolves to a private IP address that is reachable from the VPC.
     * 
     */
    public Optional<Output<Boolean>> publicConnectivity() {
        return Optional.ofNullable(this.publicConnectivity);
    }

    /**
     * The number of replicas in other AZs. Value must be between 0 and 2.
     * 
     */
    @Import(name="replicaCount")
    private @Nullable Output<Integer> replicaCount;

    /**
     * @return The number of replicas in other AZs. Value must be between 0 and 2.
     * 
     */
    public Optional<Output<Integer>> replicaCount() {
        return Optional.ofNullable(this.replicaCount);
    }

    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    /**
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    @Import(name="timeouts")
    private @Nullable Output<GraphTimeoutsArgs> timeouts;

    public Optional<Output<GraphTimeoutsArgs>> timeouts() {
        return Optional.ofNullable(this.timeouts);
    }

    /**
     * Vector search configuration for the Neptune Graph
     * 
     */
    @Import(name="vectorSearchConfiguration")
    private @Nullable Output<GraphVectorSearchConfigurationArgs> vectorSearchConfiguration;

    /**
     * @return Vector search configuration for the Neptune Graph
     * 
     */
    public Optional<Output<GraphVectorSearchConfigurationArgs>> vectorSearchConfiguration() {
        return Optional.ofNullable(this.vectorSearchConfiguration);
    }

    private GraphState() {}

    private GraphState(GraphState $) {
        this.arn = $.arn;
        this.deletionProtection = $.deletionProtection;
        this.endpoint = $.endpoint;
        this.graphName = $.graphName;
        this.graphNamePrefix = $.graphNamePrefix;
        this.kmsKeyIdentifier = $.kmsKeyIdentifier;
        this.provisionedMemory = $.provisionedMemory;
        this.publicConnectivity = $.publicConnectivity;
        this.replicaCount = $.replicaCount;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
        this.timeouts = $.timeouts;
        this.vectorSearchConfiguration = $.vectorSearchConfiguration;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GraphState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GraphState $;

        public Builder() {
            $ = new GraphState();
        }

        public Builder(GraphState defaults) {
            $ = new GraphState(Objects.requireNonNull(defaults));
        }

        /**
         * @param arn (String) Graph resource ARN
         * 
         * @return builder
         * 
         */
        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        /**
         * @param arn (String) Graph resource ARN
         * 
         * @return builder
         * 
         */
        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        /**
         * @param deletionProtection A value that indicates whether the graph has deletion protection enabled. The graph can&#39;t be deleted when deletion
         * protection is enabled.
         * 
         * @return builder
         * 
         */
        public Builder deletionProtection(@Nullable Output<Boolean> deletionProtection) {
            $.deletionProtection = deletionProtection;
            return this;
        }

        /**
         * @param deletionProtection A value that indicates whether the graph has deletion protection enabled. The graph can&#39;t be deleted when deletion
         * protection is enabled.
         * 
         * @return builder
         * 
         */
        public Builder deletionProtection(Boolean deletionProtection) {
            return deletionProtection(Output.of(deletionProtection));
        }

        /**
         * @param endpoint (String) The connection endpoint for the graph. For example: `g-12a3bcdef4.us-east-1.neptune-graph.amazonaws.com`
         * 
         * @return builder
         * 
         */
        public Builder endpoint(@Nullable Output<String> endpoint) {
            $.endpoint = endpoint;
            return this;
        }

        /**
         * @param endpoint (String) The connection endpoint for the graph. For example: `g-12a3bcdef4.us-east-1.neptune-graph.amazonaws.com`
         * 
         * @return builder
         * 
         */
        public Builder endpoint(String endpoint) {
            return endpoint(Output.of(endpoint));
        }

        /**
         * @param graphName The graph name. For example: my-graph-1. The name must contain from 1 to 63 letters, numbers, or hyphens, and its first
         * character must be a letter. It cannot end with a hyphen or contain two consecutive hyphens. If you don&#39;t specify a graph
         * name, a unique graph name is generated for you using the prefix graph-for, followed by a combination of Stack Name and a
         * UUID.
         * 
         * @return builder
         * 
         */
        public Builder graphName(@Nullable Output<String> graphName) {
            $.graphName = graphName;
            return this;
        }

        /**
         * @param graphName The graph name. For example: my-graph-1. The name must contain from 1 to 63 letters, numbers, or hyphens, and its first
         * character must be a letter. It cannot end with a hyphen or contain two consecutive hyphens. If you don&#39;t specify a graph
         * name, a unique graph name is generated for you using the prefix graph-for, followed by a combination of Stack Name and a
         * UUID.
         * 
         * @return builder
         * 
         */
        public Builder graphName(String graphName) {
            return graphName(Output.of(graphName));
        }

        /**
         * @param graphNamePrefix Allows user to specify name prefix and have remainder of name automatically generated.
         * 
         * @return builder
         * 
         */
        public Builder graphNamePrefix(@Nullable Output<String> graphNamePrefix) {
            $.graphNamePrefix = graphNamePrefix;
            return this;
        }

        /**
         * @param graphNamePrefix Allows user to specify name prefix and have remainder of name automatically generated.
         * 
         * @return builder
         * 
         */
        public Builder graphNamePrefix(String graphNamePrefix) {
            return graphNamePrefix(Output.of(graphNamePrefix));
        }

        /**
         * @param kmsKeyIdentifier Specifies a KMS key to use to encrypt data in the new graph. Value must be ARN of KMS Key.
         * 
         * @return builder
         * 
         */
        public Builder kmsKeyIdentifier(@Nullable Output<String> kmsKeyIdentifier) {
            $.kmsKeyIdentifier = kmsKeyIdentifier;
            return this;
        }

        /**
         * @param kmsKeyIdentifier Specifies a KMS key to use to encrypt data in the new graph. Value must be ARN of KMS Key.
         * 
         * @return builder
         * 
         */
        public Builder kmsKeyIdentifier(String kmsKeyIdentifier) {
            return kmsKeyIdentifier(Output.of(kmsKeyIdentifier));
        }

        /**
         * @param provisionedMemory The provisioned memory-optimized Neptune Capacity Units (m-NCUs) to use for the graph.
         * 
         * @return builder
         * 
         */
        public Builder provisionedMemory(@Nullable Output<Integer> provisionedMemory) {
            $.provisionedMemory = provisionedMemory;
            return this;
        }

        /**
         * @param provisionedMemory The provisioned memory-optimized Neptune Capacity Units (m-NCUs) to use for the graph.
         * 
         * @return builder
         * 
         */
        public Builder provisionedMemory(Integer provisionedMemory) {
            return provisionedMemory(Output.of(provisionedMemory));
        }

        /**
         * @param publicConnectivity Specifies whether or not the graph can be reachable over the internet. All access to graphs is IAM authenticated. When
         * the graph is publicly available, its domain name system (DNS) endpoint resolves to the public IP address from the
         * internet. When the graph isn&#39;t publicly available, you need to create a PrivateGraphEndpoint in a given VPC to ensure
         * the DNS name resolves to a private IP address that is reachable from the VPC.
         * 
         * @return builder
         * 
         */
        public Builder publicConnectivity(@Nullable Output<Boolean> publicConnectivity) {
            $.publicConnectivity = publicConnectivity;
            return this;
        }

        /**
         * @param publicConnectivity Specifies whether or not the graph can be reachable over the internet. All access to graphs is IAM authenticated. When
         * the graph is publicly available, its domain name system (DNS) endpoint resolves to the public IP address from the
         * internet. When the graph isn&#39;t publicly available, you need to create a PrivateGraphEndpoint in a given VPC to ensure
         * the DNS name resolves to a private IP address that is reachable from the VPC.
         * 
         * @return builder
         * 
         */
        public Builder publicConnectivity(Boolean publicConnectivity) {
            return publicConnectivity(Output.of(publicConnectivity));
        }

        /**
         * @param replicaCount The number of replicas in other AZs. Value must be between 0 and 2.
         * 
         * @return builder
         * 
         */
        public Builder replicaCount(@Nullable Output<Integer> replicaCount) {
            $.replicaCount = replicaCount;
            return this;
        }

        /**
         * @param replicaCount The number of replicas in other AZs. Value must be between 0 and 2.
         * 
         * @return builder
         * 
         */
        public Builder replicaCount(Integer replicaCount) {
            return replicaCount(Output.of(replicaCount));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * Please use `tags` instead.
         * 
         */
        @Deprecated /* Please use `tags` instead. */
        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * Please use `tags` instead.
         * 
         */
        @Deprecated /* Please use `tags` instead. */
        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        public Builder timeouts(@Nullable Output<GraphTimeoutsArgs> timeouts) {
            $.timeouts = timeouts;
            return this;
        }

        public Builder timeouts(GraphTimeoutsArgs timeouts) {
            return timeouts(Output.of(timeouts));
        }

        /**
         * @param vectorSearchConfiguration Vector search configuration for the Neptune Graph
         * 
         * @return builder
         * 
         */
        public Builder vectorSearchConfiguration(@Nullable Output<GraphVectorSearchConfigurationArgs> vectorSearchConfiguration) {
            $.vectorSearchConfiguration = vectorSearchConfiguration;
            return this;
        }

        /**
         * @param vectorSearchConfiguration Vector search configuration for the Neptune Graph
         * 
         * @return builder
         * 
         */
        public Builder vectorSearchConfiguration(GraphVectorSearchConfigurationArgs vectorSearchConfiguration) {
            return vectorSearchConfiguration(Output.of(vectorSearchConfiguration));
        }

        public GraphState build() {
            return $;
        }
    }

}
