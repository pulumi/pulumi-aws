// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.cognito.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UserPoolPasswordPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final UserPoolPasswordPolicyArgs Empty = new UserPoolPasswordPolicyArgs();

    /**
     * Minimum length of the password policy that you have set.
     * 
     */
    @Import(name="minimumLength")
    private @Nullable Output<Integer> minimumLength;

    /**
     * @return Minimum length of the password policy that you have set.
     * 
     */
    public Optional<Output<Integer>> minimumLength() {
        return Optional.ofNullable(this.minimumLength);
    }

    /**
     * Whether you have required users to use at least one lowercase letter in their password.
     * 
     */
    @Import(name="requireLowercase")
    private @Nullable Output<Boolean> requireLowercase;

    /**
     * @return Whether you have required users to use at least one lowercase letter in their password.
     * 
     */
    public Optional<Output<Boolean>> requireLowercase() {
        return Optional.ofNullable(this.requireLowercase);
    }

    /**
     * Whether you have required users to use at least one number in their password.
     * 
     */
    @Import(name="requireNumbers")
    private @Nullable Output<Boolean> requireNumbers;

    /**
     * @return Whether you have required users to use at least one number in their password.
     * 
     */
    public Optional<Output<Boolean>> requireNumbers() {
        return Optional.ofNullable(this.requireNumbers);
    }

    /**
     * Whether you have required users to use at least one symbol in their password.
     * 
     */
    @Import(name="requireSymbols")
    private @Nullable Output<Boolean> requireSymbols;

    /**
     * @return Whether you have required users to use at least one symbol in their password.
     * 
     */
    public Optional<Output<Boolean>> requireSymbols() {
        return Optional.ofNullable(this.requireSymbols);
    }

    /**
     * Whether you have required users to use at least one uppercase letter in their password.
     * 
     */
    @Import(name="requireUppercase")
    private @Nullable Output<Boolean> requireUppercase;

    /**
     * @return Whether you have required users to use at least one uppercase letter in their password.
     * 
     */
    public Optional<Output<Boolean>> requireUppercase() {
        return Optional.ofNullable(this.requireUppercase);
    }

    /**
     * In the password policy you have set, refers to the number of days a temporary password is valid. If the user does not sign-in during this time, their password will need to be reset by an administrator.
     * 
     */
    @Import(name="temporaryPasswordValidityDays")
    private @Nullable Output<Integer> temporaryPasswordValidityDays;

    /**
     * @return In the password policy you have set, refers to the number of days a temporary password is valid. If the user does not sign-in during this time, their password will need to be reset by an administrator.
     * 
     */
    public Optional<Output<Integer>> temporaryPasswordValidityDays() {
        return Optional.ofNullable(this.temporaryPasswordValidityDays);
    }

    private UserPoolPasswordPolicyArgs() {}

    private UserPoolPasswordPolicyArgs(UserPoolPasswordPolicyArgs $) {
        this.minimumLength = $.minimumLength;
        this.requireLowercase = $.requireLowercase;
        this.requireNumbers = $.requireNumbers;
        this.requireSymbols = $.requireSymbols;
        this.requireUppercase = $.requireUppercase;
        this.temporaryPasswordValidityDays = $.temporaryPasswordValidityDays;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UserPoolPasswordPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UserPoolPasswordPolicyArgs $;

        public Builder() {
            $ = new UserPoolPasswordPolicyArgs();
        }

        public Builder(UserPoolPasswordPolicyArgs defaults) {
            $ = new UserPoolPasswordPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param minimumLength Minimum length of the password policy that you have set.
         * 
         * @return builder
         * 
         */
        public Builder minimumLength(@Nullable Output<Integer> minimumLength) {
            $.minimumLength = minimumLength;
            return this;
        }

        /**
         * @param minimumLength Minimum length of the password policy that you have set.
         * 
         * @return builder
         * 
         */
        public Builder minimumLength(Integer minimumLength) {
            return minimumLength(Output.of(minimumLength));
        }

        /**
         * @param requireLowercase Whether you have required users to use at least one lowercase letter in their password.
         * 
         * @return builder
         * 
         */
        public Builder requireLowercase(@Nullable Output<Boolean> requireLowercase) {
            $.requireLowercase = requireLowercase;
            return this;
        }

        /**
         * @param requireLowercase Whether you have required users to use at least one lowercase letter in their password.
         * 
         * @return builder
         * 
         */
        public Builder requireLowercase(Boolean requireLowercase) {
            return requireLowercase(Output.of(requireLowercase));
        }

        /**
         * @param requireNumbers Whether you have required users to use at least one number in their password.
         * 
         * @return builder
         * 
         */
        public Builder requireNumbers(@Nullable Output<Boolean> requireNumbers) {
            $.requireNumbers = requireNumbers;
            return this;
        }

        /**
         * @param requireNumbers Whether you have required users to use at least one number in their password.
         * 
         * @return builder
         * 
         */
        public Builder requireNumbers(Boolean requireNumbers) {
            return requireNumbers(Output.of(requireNumbers));
        }

        /**
         * @param requireSymbols Whether you have required users to use at least one symbol in their password.
         * 
         * @return builder
         * 
         */
        public Builder requireSymbols(@Nullable Output<Boolean> requireSymbols) {
            $.requireSymbols = requireSymbols;
            return this;
        }

        /**
         * @param requireSymbols Whether you have required users to use at least one symbol in their password.
         * 
         * @return builder
         * 
         */
        public Builder requireSymbols(Boolean requireSymbols) {
            return requireSymbols(Output.of(requireSymbols));
        }

        /**
         * @param requireUppercase Whether you have required users to use at least one uppercase letter in their password.
         * 
         * @return builder
         * 
         */
        public Builder requireUppercase(@Nullable Output<Boolean> requireUppercase) {
            $.requireUppercase = requireUppercase;
            return this;
        }

        /**
         * @param requireUppercase Whether you have required users to use at least one uppercase letter in their password.
         * 
         * @return builder
         * 
         */
        public Builder requireUppercase(Boolean requireUppercase) {
            return requireUppercase(Output.of(requireUppercase));
        }

        /**
         * @param temporaryPasswordValidityDays In the password policy you have set, refers to the number of days a temporary password is valid. If the user does not sign-in during this time, their password will need to be reset by an administrator.
         * 
         * @return builder
         * 
         */
        public Builder temporaryPasswordValidityDays(@Nullable Output<Integer> temporaryPasswordValidityDays) {
            $.temporaryPasswordValidityDays = temporaryPasswordValidityDays;
            return this;
        }

        /**
         * @param temporaryPasswordValidityDays In the password policy you have set, refers to the number of days a temporary password is valid. If the user does not sign-in during this time, their password will need to be reset by an administrator.
         * 
         * @return builder
         * 
         */
        public Builder temporaryPasswordValidityDays(Integer temporaryPasswordValidityDays) {
            return temporaryPasswordValidityDays(Output.of(temporaryPasswordValidityDays));
        }

        public UserPoolPasswordPolicyArgs build() {
            return $;
        }
    }

}
