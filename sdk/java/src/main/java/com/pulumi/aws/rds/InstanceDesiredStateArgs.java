// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.rds;

import com.pulumi.aws.rds.inputs.InstanceDesiredStateTimeoutsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstanceDesiredStateArgs extends com.pulumi.resources.ResourceArgs {

    public static final InstanceDesiredStateArgs Empty = new InstanceDesiredStateArgs();

    /**
     * DB Instance Identifier
     * 
     */
    @Import(name="identifier", required=true)
    private Output<String> identifier;

    /**
     * @return DB Instance Identifier
     * 
     */
    public Output<String> identifier() {
        return this.identifier;
    }

    /**
     * Configured state of the DB Instance. Valid values are `available` and `stopped`.
     * 
     */
    @Import(name="state", required=true)
    private Output<String> state;

    /**
     * @return Configured state of the DB Instance. Valid values are `available` and `stopped`.
     * 
     */
    public Output<String> state() {
        return this.state;
    }

    @Import(name="timeouts")
    private @Nullable Output<InstanceDesiredStateTimeoutsArgs> timeouts;

    public Optional<Output<InstanceDesiredStateTimeoutsArgs>> timeouts() {
        return Optional.ofNullable(this.timeouts);
    }

    private InstanceDesiredStateArgs() {}

    private InstanceDesiredStateArgs(InstanceDesiredStateArgs $) {
        this.identifier = $.identifier;
        this.state = $.state;
        this.timeouts = $.timeouts;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceDesiredStateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceDesiredStateArgs $;

        public Builder() {
            $ = new InstanceDesiredStateArgs();
        }

        public Builder(InstanceDesiredStateArgs defaults) {
            $ = new InstanceDesiredStateArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param identifier DB Instance Identifier
         * 
         * @return builder
         * 
         */
        public Builder identifier(Output<String> identifier) {
            $.identifier = identifier;
            return this;
        }

        /**
         * @param identifier DB Instance Identifier
         * 
         * @return builder
         * 
         */
        public Builder identifier(String identifier) {
            return identifier(Output.of(identifier));
        }

        /**
         * @param state Configured state of the DB Instance. Valid values are `available` and `stopped`.
         * 
         * @return builder
         * 
         */
        public Builder state(Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state Configured state of the DB Instance. Valid values are `available` and `stopped`.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        public Builder timeouts(@Nullable Output<InstanceDesiredStateTimeoutsArgs> timeouts) {
            $.timeouts = timeouts;
            return this;
        }

        public Builder timeouts(InstanceDesiredStateTimeoutsArgs timeouts) {
            return timeouts(Output.of(timeouts));
        }

        public InstanceDesiredStateArgs build() {
            if ($.identifier == null) {
                throw new MissingRequiredPropertyException("InstanceDesiredStateArgs", "identifier");
            }
            if ($.state == null) {
                throw new MissingRequiredPropertyException("InstanceDesiredStateArgs", "state");
            }
            return $;
        }
    }

}
