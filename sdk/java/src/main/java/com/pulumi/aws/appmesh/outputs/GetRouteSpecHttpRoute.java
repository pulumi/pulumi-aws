// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.appmesh.outputs;

import com.pulumi.aws.appmesh.outputs.GetRouteSpecHttpRouteAction;
import com.pulumi.aws.appmesh.outputs.GetRouteSpecHttpRouteMatch;
import com.pulumi.aws.appmesh.outputs.GetRouteSpecHttpRouteRetryPolicy;
import com.pulumi.aws.appmesh.outputs.GetRouteSpecHttpRouteTimeout;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetRouteSpecHttpRoute {
    private List<GetRouteSpecHttpRouteAction> actions;
    private List<GetRouteSpecHttpRouteMatch> matches;
    private List<GetRouteSpecHttpRouteRetryPolicy> retryPolicies;
    private List<GetRouteSpecHttpRouteTimeout> timeouts;

    private GetRouteSpecHttpRoute() {}
    public List<GetRouteSpecHttpRouteAction> actions() {
        return this.actions;
    }
    public List<GetRouteSpecHttpRouteMatch> matches() {
        return this.matches;
    }
    public List<GetRouteSpecHttpRouteRetryPolicy> retryPolicies() {
        return this.retryPolicies;
    }
    public List<GetRouteSpecHttpRouteTimeout> timeouts() {
        return this.timeouts;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRouteSpecHttpRoute defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetRouteSpecHttpRouteAction> actions;
        private List<GetRouteSpecHttpRouteMatch> matches;
        private List<GetRouteSpecHttpRouteRetryPolicy> retryPolicies;
        private List<GetRouteSpecHttpRouteTimeout> timeouts;
        public Builder() {}
        public Builder(GetRouteSpecHttpRoute defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.actions = defaults.actions;
    	      this.matches = defaults.matches;
    	      this.retryPolicies = defaults.retryPolicies;
    	      this.timeouts = defaults.timeouts;
        }

        @CustomType.Setter
        public Builder actions(List<GetRouteSpecHttpRouteAction> actions) {
            if (actions == null) {
              throw new MissingRequiredPropertyException("GetRouteSpecHttpRoute", "actions");
            }
            this.actions = actions;
            return this;
        }
        public Builder actions(GetRouteSpecHttpRouteAction... actions) {
            return actions(List.of(actions));
        }
        @CustomType.Setter
        public Builder matches(List<GetRouteSpecHttpRouteMatch> matches) {
            if (matches == null) {
              throw new MissingRequiredPropertyException("GetRouteSpecHttpRoute", "matches");
            }
            this.matches = matches;
            return this;
        }
        public Builder matches(GetRouteSpecHttpRouteMatch... matches) {
            return matches(List.of(matches));
        }
        @CustomType.Setter
        public Builder retryPolicies(List<GetRouteSpecHttpRouteRetryPolicy> retryPolicies) {
            if (retryPolicies == null) {
              throw new MissingRequiredPropertyException("GetRouteSpecHttpRoute", "retryPolicies");
            }
            this.retryPolicies = retryPolicies;
            return this;
        }
        public Builder retryPolicies(GetRouteSpecHttpRouteRetryPolicy... retryPolicies) {
            return retryPolicies(List.of(retryPolicies));
        }
        @CustomType.Setter
        public Builder timeouts(List<GetRouteSpecHttpRouteTimeout> timeouts) {
            if (timeouts == null) {
              throw new MissingRequiredPropertyException("GetRouteSpecHttpRoute", "timeouts");
            }
            this.timeouts = timeouts;
            return this;
        }
        public Builder timeouts(GetRouteSpecHttpRouteTimeout... timeouts) {
            return timeouts(List.of(timeouts));
        }
        public GetRouteSpecHttpRoute build() {
            final var _resultValue = new GetRouteSpecHttpRoute();
            _resultValue.actions = actions;
            _resultValue.matches = matches;
            _resultValue.retryPolicies = retryPolicies;
            _resultValue.timeouts = timeouts;
            return _resultValue;
        }
    }
}
