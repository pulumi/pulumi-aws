// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.lightsail;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;


public final class LbHttpsRedirectionPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final LbHttpsRedirectionPolicyArgs Empty = new LbHttpsRedirectionPolicyArgs();

    /**
     * Whether to enable HTTP to HTTPS redirection. `true` to activate HTTP to HTTPS redirection or `false` to deactivate HTTP to HTTPS redirection.
     * 
     */
    @Import(name="enabled", required=true)
    private Output<Boolean> enabled;

    /**
     * @return Whether to enable HTTP to HTTPS redirection. `true` to activate HTTP to HTTPS redirection or `false` to deactivate HTTP to HTTPS redirection.
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }

    /**
     * Name of the load balancer to which you want to enable HTTP to HTTPS redirection.
     * 
     */
    @Import(name="lbName", required=true)
    private Output<String> lbName;

    /**
     * @return Name of the load balancer to which you want to enable HTTP to HTTPS redirection.
     * 
     */
    public Output<String> lbName() {
        return this.lbName;
    }

    private LbHttpsRedirectionPolicyArgs() {}

    private LbHttpsRedirectionPolicyArgs(LbHttpsRedirectionPolicyArgs $) {
        this.enabled = $.enabled;
        this.lbName = $.lbName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LbHttpsRedirectionPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LbHttpsRedirectionPolicyArgs $;

        public Builder() {
            $ = new LbHttpsRedirectionPolicyArgs();
        }

        public Builder(LbHttpsRedirectionPolicyArgs defaults) {
            $ = new LbHttpsRedirectionPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param enabled Whether to enable HTTP to HTTPS redirection. `true` to activate HTTP to HTTPS redirection or `false` to deactivate HTTP to HTTPS redirection.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Whether to enable HTTP to HTTPS redirection. `true` to activate HTTP to HTTPS redirection or `false` to deactivate HTTP to HTTPS redirection.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param lbName Name of the load balancer to which you want to enable HTTP to HTTPS redirection.
         * 
         * @return builder
         * 
         */
        public Builder lbName(Output<String> lbName) {
            $.lbName = lbName;
            return this;
        }

        /**
         * @param lbName Name of the load balancer to which you want to enable HTTP to HTTPS redirection.
         * 
         * @return builder
         * 
         */
        public Builder lbName(String lbName) {
            return lbName(Output.of(lbName));
        }

        public LbHttpsRedirectionPolicyArgs build() {
            if ($.enabled == null) {
                throw new MissingRequiredPropertyException("LbHttpsRedirectionPolicyArgs", "enabled");
            }
            if ($.lbName == null) {
                throw new MissingRequiredPropertyException("LbHttpsRedirectionPolicyArgs", "lbName");
            }
            return $;
        }
    }

}
