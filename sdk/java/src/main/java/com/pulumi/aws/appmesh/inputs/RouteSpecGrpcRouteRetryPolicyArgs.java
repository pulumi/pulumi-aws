// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.appmesh.inputs;

import com.pulumi.aws.appmesh.inputs.RouteSpecGrpcRouteRetryPolicyPerRetryTimeoutArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RouteSpecGrpcRouteRetryPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final RouteSpecGrpcRouteRetryPolicyArgs Empty = new RouteSpecGrpcRouteRetryPolicyArgs();

    /**
     * List of gRPC retry events.
     * Valid values: `cancelled`, `deadline-exceeded`, `internal`, `resource-exhausted`, `unavailable`.
     * 
     */
    @Import(name="grpcRetryEvents")
    private @Nullable Output<List<String>> grpcRetryEvents;

    /**
     * @return List of gRPC retry events.
     * Valid values: `cancelled`, `deadline-exceeded`, `internal`, `resource-exhausted`, `unavailable`.
     * 
     */
    public Optional<Output<List<String>>> grpcRetryEvents() {
        return Optional.ofNullable(this.grpcRetryEvents);
    }

    /**
     * List of HTTP retry events.
     * Valid values: `client-error` (HTTP status code 409), `gateway-error` (HTTP status codes 502, 503, and 504), `server-error` (HTTP status codes 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, and 511), `stream-error` (retry on refused stream).
     * 
     */
    @Import(name="httpRetryEvents")
    private @Nullable Output<List<String>> httpRetryEvents;

    /**
     * @return List of HTTP retry events.
     * Valid values: `client-error` (HTTP status code 409), `gateway-error` (HTTP status codes 502, 503, and 504), `server-error` (HTTP status codes 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, and 511), `stream-error` (retry on refused stream).
     * 
     */
    public Optional<Output<List<String>>> httpRetryEvents() {
        return Optional.ofNullable(this.httpRetryEvents);
    }

    /**
     * Maximum number of retries.
     * 
     */
    @Import(name="maxRetries", required=true)
    private Output<Integer> maxRetries;

    /**
     * @return Maximum number of retries.
     * 
     */
    public Output<Integer> maxRetries() {
        return this.maxRetries;
    }

    /**
     * Per-retry timeout.
     * 
     */
    @Import(name="perRetryTimeout", required=true)
    private Output<RouteSpecGrpcRouteRetryPolicyPerRetryTimeoutArgs> perRetryTimeout;

    /**
     * @return Per-retry timeout.
     * 
     */
    public Output<RouteSpecGrpcRouteRetryPolicyPerRetryTimeoutArgs> perRetryTimeout() {
        return this.perRetryTimeout;
    }

    /**
     * List of TCP retry events. The only valid value is `connection-error`.
     * 
     */
    @Import(name="tcpRetryEvents")
    private @Nullable Output<List<String>> tcpRetryEvents;

    /**
     * @return List of TCP retry events. The only valid value is `connection-error`.
     * 
     */
    public Optional<Output<List<String>>> tcpRetryEvents() {
        return Optional.ofNullable(this.tcpRetryEvents);
    }

    private RouteSpecGrpcRouteRetryPolicyArgs() {}

    private RouteSpecGrpcRouteRetryPolicyArgs(RouteSpecGrpcRouteRetryPolicyArgs $) {
        this.grpcRetryEvents = $.grpcRetryEvents;
        this.httpRetryEvents = $.httpRetryEvents;
        this.maxRetries = $.maxRetries;
        this.perRetryTimeout = $.perRetryTimeout;
        this.tcpRetryEvents = $.tcpRetryEvents;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RouteSpecGrpcRouteRetryPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RouteSpecGrpcRouteRetryPolicyArgs $;

        public Builder() {
            $ = new RouteSpecGrpcRouteRetryPolicyArgs();
        }

        public Builder(RouteSpecGrpcRouteRetryPolicyArgs defaults) {
            $ = new RouteSpecGrpcRouteRetryPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param grpcRetryEvents List of gRPC retry events.
         * Valid values: `cancelled`, `deadline-exceeded`, `internal`, `resource-exhausted`, `unavailable`.
         * 
         * @return builder
         * 
         */
        public Builder grpcRetryEvents(@Nullable Output<List<String>> grpcRetryEvents) {
            $.grpcRetryEvents = grpcRetryEvents;
            return this;
        }

        /**
         * @param grpcRetryEvents List of gRPC retry events.
         * Valid values: `cancelled`, `deadline-exceeded`, `internal`, `resource-exhausted`, `unavailable`.
         * 
         * @return builder
         * 
         */
        public Builder grpcRetryEvents(List<String> grpcRetryEvents) {
            return grpcRetryEvents(Output.of(grpcRetryEvents));
        }

        /**
         * @param grpcRetryEvents List of gRPC retry events.
         * Valid values: `cancelled`, `deadline-exceeded`, `internal`, `resource-exhausted`, `unavailable`.
         * 
         * @return builder
         * 
         */
        public Builder grpcRetryEvents(String... grpcRetryEvents) {
            return grpcRetryEvents(List.of(grpcRetryEvents));
        }

        /**
         * @param httpRetryEvents List of HTTP retry events.
         * Valid values: `client-error` (HTTP status code 409), `gateway-error` (HTTP status codes 502, 503, and 504), `server-error` (HTTP status codes 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, and 511), `stream-error` (retry on refused stream).
         * 
         * @return builder
         * 
         */
        public Builder httpRetryEvents(@Nullable Output<List<String>> httpRetryEvents) {
            $.httpRetryEvents = httpRetryEvents;
            return this;
        }

        /**
         * @param httpRetryEvents List of HTTP retry events.
         * Valid values: `client-error` (HTTP status code 409), `gateway-error` (HTTP status codes 502, 503, and 504), `server-error` (HTTP status codes 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, and 511), `stream-error` (retry on refused stream).
         * 
         * @return builder
         * 
         */
        public Builder httpRetryEvents(List<String> httpRetryEvents) {
            return httpRetryEvents(Output.of(httpRetryEvents));
        }

        /**
         * @param httpRetryEvents List of HTTP retry events.
         * Valid values: `client-error` (HTTP status code 409), `gateway-error` (HTTP status codes 502, 503, and 504), `server-error` (HTTP status codes 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, and 511), `stream-error` (retry on refused stream).
         * 
         * @return builder
         * 
         */
        public Builder httpRetryEvents(String... httpRetryEvents) {
            return httpRetryEvents(List.of(httpRetryEvents));
        }

        /**
         * @param maxRetries Maximum number of retries.
         * 
         * @return builder
         * 
         */
        public Builder maxRetries(Output<Integer> maxRetries) {
            $.maxRetries = maxRetries;
            return this;
        }

        /**
         * @param maxRetries Maximum number of retries.
         * 
         * @return builder
         * 
         */
        public Builder maxRetries(Integer maxRetries) {
            return maxRetries(Output.of(maxRetries));
        }

        /**
         * @param perRetryTimeout Per-retry timeout.
         * 
         * @return builder
         * 
         */
        public Builder perRetryTimeout(Output<RouteSpecGrpcRouteRetryPolicyPerRetryTimeoutArgs> perRetryTimeout) {
            $.perRetryTimeout = perRetryTimeout;
            return this;
        }

        /**
         * @param perRetryTimeout Per-retry timeout.
         * 
         * @return builder
         * 
         */
        public Builder perRetryTimeout(RouteSpecGrpcRouteRetryPolicyPerRetryTimeoutArgs perRetryTimeout) {
            return perRetryTimeout(Output.of(perRetryTimeout));
        }

        /**
         * @param tcpRetryEvents List of TCP retry events. The only valid value is `connection-error`.
         * 
         * @return builder
         * 
         */
        public Builder tcpRetryEvents(@Nullable Output<List<String>> tcpRetryEvents) {
            $.tcpRetryEvents = tcpRetryEvents;
            return this;
        }

        /**
         * @param tcpRetryEvents List of TCP retry events. The only valid value is `connection-error`.
         * 
         * @return builder
         * 
         */
        public Builder tcpRetryEvents(List<String> tcpRetryEvents) {
            return tcpRetryEvents(Output.of(tcpRetryEvents));
        }

        /**
         * @param tcpRetryEvents List of TCP retry events. The only valid value is `connection-error`.
         * 
         * @return builder
         * 
         */
        public Builder tcpRetryEvents(String... tcpRetryEvents) {
            return tcpRetryEvents(List.of(tcpRetryEvents));
        }

        public RouteSpecGrpcRouteRetryPolicyArgs build() {
            if ($.maxRetries == null) {
                throw new MissingRequiredPropertyException("RouteSpecGrpcRouteRetryPolicyArgs", "maxRetries");
            }
            if ($.perRetryTimeout == null) {
                throw new MissingRequiredPropertyException("RouteSpecGrpcRouteRetryPolicyArgs", "perRetryTimeout");
            }
            return $;
        }
    }

}
