// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.wafv2.inputs;

import com.pulumi.aws.wafv2.inputs.WebAclRuleOverrideActionCountArgs;
import com.pulumi.aws.wafv2.inputs.WebAclRuleOverrideActionNoneArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WebAclRuleOverrideActionArgs extends com.pulumi.resources.ResourceArgs {

    public static final WebAclRuleOverrideActionArgs Empty = new WebAclRuleOverrideActionArgs();

    /**
     * Override the rule action setting to count (i.e., only count matches). Configured as an empty block `{}`.
     * 
     */
    @Import(name="count")
    private @Nullable Output<WebAclRuleOverrideActionCountArgs> count;

    /**
     * @return Override the rule action setting to count (i.e., only count matches). Configured as an empty block `{}`.
     * 
     */
    public Optional<Output<WebAclRuleOverrideActionCountArgs>> count() {
        return Optional.ofNullable(this.count);
    }

    /**
     * Don&#39;t override the rule action setting. Configured as an empty block `{}`.
     * 
     */
    @Import(name="none")
    private @Nullable Output<WebAclRuleOverrideActionNoneArgs> none;

    /**
     * @return Don&#39;t override the rule action setting. Configured as an empty block `{}`.
     * 
     */
    public Optional<Output<WebAclRuleOverrideActionNoneArgs>> none() {
        return Optional.ofNullable(this.none);
    }

    private WebAclRuleOverrideActionArgs() {}

    private WebAclRuleOverrideActionArgs(WebAclRuleOverrideActionArgs $) {
        this.count = $.count;
        this.none = $.none;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WebAclRuleOverrideActionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WebAclRuleOverrideActionArgs $;

        public Builder() {
            $ = new WebAclRuleOverrideActionArgs();
        }

        public Builder(WebAclRuleOverrideActionArgs defaults) {
            $ = new WebAclRuleOverrideActionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param count Override the rule action setting to count (i.e., only count matches). Configured as an empty block `{}`.
         * 
         * @return builder
         * 
         */
        public Builder count(@Nullable Output<WebAclRuleOverrideActionCountArgs> count) {
            $.count = count;
            return this;
        }

        /**
         * @param count Override the rule action setting to count (i.e., only count matches). Configured as an empty block `{}`.
         * 
         * @return builder
         * 
         */
        public Builder count(WebAclRuleOverrideActionCountArgs count) {
            return count(Output.of(count));
        }

        /**
         * @param none Don&#39;t override the rule action setting. Configured as an empty block `{}`.
         * 
         * @return builder
         * 
         */
        public Builder none(@Nullable Output<WebAclRuleOverrideActionNoneArgs> none) {
            $.none = none;
            return this;
        }

        /**
         * @param none Don&#39;t override the rule action setting. Configured as an empty block `{}`.
         * 
         * @return builder
         * 
         */
        public Builder none(WebAclRuleOverrideActionNoneArgs none) {
            return none(Output.of(none));
        }

        public WebAclRuleOverrideActionArgs build() {
            return $;
        }
    }

}
