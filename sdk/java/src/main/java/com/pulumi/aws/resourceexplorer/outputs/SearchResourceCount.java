// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.resourceexplorer.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.Objects;

@CustomType
public final class SearchResourceCount {
    /**
     * @return Indicates whether the TotalResources value represents an exhaustive count of search results. If True, it indicates that the search was exhaustive. Every resource that matches the query was counted. If False, then the search reached the limit of 1,000 matching results, and stopped counting.
     * 
     */
    private Boolean complete;
    /**
     * @return Number of resources that match the search query. This value can&#39;t exceed 1,000. If there are more than 1,000 resources that match the query, then only 1,000 are counted and the Complete field is set to false. We recommend that you refine your query to return a smaller number of results.
     * 
     */
    private Integer totalResources;

    private SearchResourceCount() {}
    /**
     * @return Indicates whether the TotalResources value represents an exhaustive count of search results. If True, it indicates that the search was exhaustive. Every resource that matches the query was counted. If False, then the search reached the limit of 1,000 matching results, and stopped counting.
     * 
     */
    public Boolean complete() {
        return this.complete;
    }
    /**
     * @return Number of resources that match the search query. This value can&#39;t exceed 1,000. If there are more than 1,000 resources that match the query, then only 1,000 are counted and the Complete field is set to false. We recommend that you refine your query to return a smaller number of results.
     * 
     */
    public Integer totalResources() {
        return this.totalResources;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SearchResourceCount defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean complete;
        private Integer totalResources;
        public Builder() {}
        public Builder(SearchResourceCount defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.complete = defaults.complete;
    	      this.totalResources = defaults.totalResources;
        }

        @CustomType.Setter
        public Builder complete(Boolean complete) {
            if (complete == null) {
              throw new MissingRequiredPropertyException("SearchResourceCount", "complete");
            }
            this.complete = complete;
            return this;
        }
        @CustomType.Setter
        public Builder totalResources(Integer totalResources) {
            if (totalResources == null) {
              throw new MissingRequiredPropertyException("SearchResourceCount", "totalResources");
            }
            this.totalResources = totalResources;
            return this;
        }
        public SearchResourceCount build() {
            final var _resultValue = new SearchResourceCount();
            _resultValue.complete = complete;
            _resultValue.totalResources = totalResources;
            return _resultValue;
        }
    }
}
