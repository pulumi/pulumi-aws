// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ivs.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ChannelState extends com.pulumi.resources.ResourceArgs {

    public static final ChannelState Empty = new ChannelState();

    /**
     * ARN of the Channel.
     * 
     */
    @Import(name="arn")
    private @Nullable Output<String> arn;

    /**
     * @return ARN of the Channel.
     * 
     */
    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    /**
     * If `true`, channel is private (enabled for playback authorization).
     * 
     */
    @Import(name="authorized")
    private @Nullable Output<Boolean> authorized;

    /**
     * @return If `true`, channel is private (enabled for playback authorization).
     * 
     */
    public Optional<Output<Boolean>> authorized() {
        return Optional.ofNullable(this.authorized);
    }

    /**
     * Channel ingest endpoint, part of the definition of an ingest server, used when setting up streaming software.
     * 
     */
    @Import(name="ingestEndpoint")
    private @Nullable Output<String> ingestEndpoint;

    /**
     * @return Channel ingest endpoint, part of the definition of an ingest server, used when setting up streaming software.
     * 
     */
    public Optional<Output<String>> ingestEndpoint() {
        return Optional.ofNullable(this.ingestEndpoint);
    }

    /**
     * Channel latency mode. Valid values: `NORMAL`, `LOW`.
     * 
     */
    @Import(name="latencyMode")
    private @Nullable Output<String> latencyMode;

    /**
     * @return Channel latency mode. Valid values: `NORMAL`, `LOW`.
     * 
     */
    public Optional<Output<String>> latencyMode() {
        return Optional.ofNullable(this.latencyMode);
    }

    /**
     * Channel name.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Channel name.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Channel playback URL.
     * 
     */
    @Import(name="playbackUrl")
    private @Nullable Output<String> playbackUrl;

    /**
     * @return Channel playback URL.
     * 
     */
    public Optional<Output<String>> playbackUrl() {
        return Optional.ofNullable(this.playbackUrl);
    }

    /**
     * Recording configuration ARN.
     * 
     */
    @Import(name="recordingConfigurationArn")
    private @Nullable Output<String> recordingConfigurationArn;

    /**
     * @return Recording configuration ARN.
     * 
     */
    public Optional<Output<String>> recordingConfigurationArn() {
        return Optional.ofNullable(this.recordingConfigurationArn);
    }

    /**
     * A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    /**
     * @return Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    /**
     * Channel type, which determines the allowable resolution and bitrate. Valid values: `STANDARD`, `BASIC`.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Channel type, which determines the allowable resolution and bitrate. Valid values: `STANDARD`, `BASIC`.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private ChannelState() {}

    private ChannelState(ChannelState $) {
        this.arn = $.arn;
        this.authorized = $.authorized;
        this.ingestEndpoint = $.ingestEndpoint;
        this.latencyMode = $.latencyMode;
        this.name = $.name;
        this.playbackUrl = $.playbackUrl;
        this.recordingConfigurationArn = $.recordingConfigurationArn;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ChannelState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ChannelState $;

        public Builder() {
            $ = new ChannelState();
        }

        public Builder(ChannelState defaults) {
            $ = new ChannelState(Objects.requireNonNull(defaults));
        }

        /**
         * @param arn ARN of the Channel.
         * 
         * @return builder
         * 
         */
        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        /**
         * @param arn ARN of the Channel.
         * 
         * @return builder
         * 
         */
        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        /**
         * @param authorized If `true`, channel is private (enabled for playback authorization).
         * 
         * @return builder
         * 
         */
        public Builder authorized(@Nullable Output<Boolean> authorized) {
            $.authorized = authorized;
            return this;
        }

        /**
         * @param authorized If `true`, channel is private (enabled for playback authorization).
         * 
         * @return builder
         * 
         */
        public Builder authorized(Boolean authorized) {
            return authorized(Output.of(authorized));
        }

        /**
         * @param ingestEndpoint Channel ingest endpoint, part of the definition of an ingest server, used when setting up streaming software.
         * 
         * @return builder
         * 
         */
        public Builder ingestEndpoint(@Nullable Output<String> ingestEndpoint) {
            $.ingestEndpoint = ingestEndpoint;
            return this;
        }

        /**
         * @param ingestEndpoint Channel ingest endpoint, part of the definition of an ingest server, used when setting up streaming software.
         * 
         * @return builder
         * 
         */
        public Builder ingestEndpoint(String ingestEndpoint) {
            return ingestEndpoint(Output.of(ingestEndpoint));
        }

        /**
         * @param latencyMode Channel latency mode. Valid values: `NORMAL`, `LOW`.
         * 
         * @return builder
         * 
         */
        public Builder latencyMode(@Nullable Output<String> latencyMode) {
            $.latencyMode = latencyMode;
            return this;
        }

        /**
         * @param latencyMode Channel latency mode. Valid values: `NORMAL`, `LOW`.
         * 
         * @return builder
         * 
         */
        public Builder latencyMode(String latencyMode) {
            return latencyMode(Output.of(latencyMode));
        }

        /**
         * @param name Channel name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Channel name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param playbackUrl Channel playback URL.
         * 
         * @return builder
         * 
         */
        public Builder playbackUrl(@Nullable Output<String> playbackUrl) {
            $.playbackUrl = playbackUrl;
            return this;
        }

        /**
         * @param playbackUrl Channel playback URL.
         * 
         * @return builder
         * 
         */
        public Builder playbackUrl(String playbackUrl) {
            return playbackUrl(Output.of(playbackUrl));
        }

        /**
         * @param recordingConfigurationArn Recording configuration ARN.
         * 
         * @return builder
         * 
         */
        public Builder recordingConfigurationArn(@Nullable Output<String> recordingConfigurationArn) {
            $.recordingConfigurationArn = recordingConfigurationArn;
            return this;
        }

        /**
         * @param recordingConfigurationArn Recording configuration ARN.
         * 
         * @return builder
         * 
         */
        public Builder recordingConfigurationArn(String recordingConfigurationArn) {
            return recordingConfigurationArn(Output.of(recordingConfigurationArn));
        }

        /**
         * @param tags A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tagsAll Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
         * 
         * @return builder
         * 
         * @deprecated
         * Please use `tags` instead.
         * 
         */
        @Deprecated /* Please use `tags` instead. */
        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        /**
         * @param tagsAll Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
         * 
         * @return builder
         * 
         * @deprecated
         * Please use `tags` instead.
         * 
         */
        @Deprecated /* Please use `tags` instead. */
        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        /**
         * @param type Channel type, which determines the allowable resolution and bitrate. Valid values: `STANDARD`, `BASIC`.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Channel type, which determines the allowable resolution and bitrate. Valid values: `STANDARD`, `BASIC`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public ChannelState build() {
            return $;
        }
    }

}
