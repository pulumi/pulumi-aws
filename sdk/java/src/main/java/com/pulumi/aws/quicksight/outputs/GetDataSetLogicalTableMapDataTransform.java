// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.outputs;

import com.pulumi.aws.quicksight.outputs.GetDataSetLogicalTableMapDataTransformCastColumnTypeOperation;
import com.pulumi.aws.quicksight.outputs.GetDataSetLogicalTableMapDataTransformCreateColumnsOperation;
import com.pulumi.aws.quicksight.outputs.GetDataSetLogicalTableMapDataTransformFilterOperation;
import com.pulumi.aws.quicksight.outputs.GetDataSetLogicalTableMapDataTransformProjectOperation;
import com.pulumi.aws.quicksight.outputs.GetDataSetLogicalTableMapDataTransformRenameColumnOperation;
import com.pulumi.aws.quicksight.outputs.GetDataSetLogicalTableMapDataTransformTagColumnOperation;
import com.pulumi.aws.quicksight.outputs.GetDataSetLogicalTableMapDataTransformUntagColumnOperation;
import com.pulumi.core.annotations.CustomType;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetDataSetLogicalTableMapDataTransform {
    private List<GetDataSetLogicalTableMapDataTransformCastColumnTypeOperation> castColumnTypeOperations;
    private List<GetDataSetLogicalTableMapDataTransformCreateColumnsOperation> createColumnsOperations;
    private List<GetDataSetLogicalTableMapDataTransformFilterOperation> filterOperations;
    private List<GetDataSetLogicalTableMapDataTransformProjectOperation> projectOperations;
    private List<GetDataSetLogicalTableMapDataTransformRenameColumnOperation> renameColumnOperations;
    private List<GetDataSetLogicalTableMapDataTransformTagColumnOperation> tagColumnOperations;
    private List<GetDataSetLogicalTableMapDataTransformUntagColumnOperation> untagColumnOperations;

    private GetDataSetLogicalTableMapDataTransform() {}
    public List<GetDataSetLogicalTableMapDataTransformCastColumnTypeOperation> castColumnTypeOperations() {
        return this.castColumnTypeOperations;
    }
    public List<GetDataSetLogicalTableMapDataTransformCreateColumnsOperation> createColumnsOperations() {
        return this.createColumnsOperations;
    }
    public List<GetDataSetLogicalTableMapDataTransformFilterOperation> filterOperations() {
        return this.filterOperations;
    }
    public List<GetDataSetLogicalTableMapDataTransformProjectOperation> projectOperations() {
        return this.projectOperations;
    }
    public List<GetDataSetLogicalTableMapDataTransformRenameColumnOperation> renameColumnOperations() {
        return this.renameColumnOperations;
    }
    public List<GetDataSetLogicalTableMapDataTransformTagColumnOperation> tagColumnOperations() {
        return this.tagColumnOperations;
    }
    public List<GetDataSetLogicalTableMapDataTransformUntagColumnOperation> untagColumnOperations() {
        return this.untagColumnOperations;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDataSetLogicalTableMapDataTransform defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetDataSetLogicalTableMapDataTransformCastColumnTypeOperation> castColumnTypeOperations;
        private List<GetDataSetLogicalTableMapDataTransformCreateColumnsOperation> createColumnsOperations;
        private List<GetDataSetLogicalTableMapDataTransformFilterOperation> filterOperations;
        private List<GetDataSetLogicalTableMapDataTransformProjectOperation> projectOperations;
        private List<GetDataSetLogicalTableMapDataTransformRenameColumnOperation> renameColumnOperations;
        private List<GetDataSetLogicalTableMapDataTransformTagColumnOperation> tagColumnOperations;
        private List<GetDataSetLogicalTableMapDataTransformUntagColumnOperation> untagColumnOperations;
        public Builder() {}
        public Builder(GetDataSetLogicalTableMapDataTransform defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.castColumnTypeOperations = defaults.castColumnTypeOperations;
    	      this.createColumnsOperations = defaults.createColumnsOperations;
    	      this.filterOperations = defaults.filterOperations;
    	      this.projectOperations = defaults.projectOperations;
    	      this.renameColumnOperations = defaults.renameColumnOperations;
    	      this.tagColumnOperations = defaults.tagColumnOperations;
    	      this.untagColumnOperations = defaults.untagColumnOperations;
        }

        @CustomType.Setter
        public Builder castColumnTypeOperations(List<GetDataSetLogicalTableMapDataTransformCastColumnTypeOperation> castColumnTypeOperations) {
            this.castColumnTypeOperations = Objects.requireNonNull(castColumnTypeOperations);
            return this;
        }
        public Builder castColumnTypeOperations(GetDataSetLogicalTableMapDataTransformCastColumnTypeOperation... castColumnTypeOperations) {
            return castColumnTypeOperations(List.of(castColumnTypeOperations));
        }
        @CustomType.Setter
        public Builder createColumnsOperations(List<GetDataSetLogicalTableMapDataTransformCreateColumnsOperation> createColumnsOperations) {
            this.createColumnsOperations = Objects.requireNonNull(createColumnsOperations);
            return this;
        }
        public Builder createColumnsOperations(GetDataSetLogicalTableMapDataTransformCreateColumnsOperation... createColumnsOperations) {
            return createColumnsOperations(List.of(createColumnsOperations));
        }
        @CustomType.Setter
        public Builder filterOperations(List<GetDataSetLogicalTableMapDataTransformFilterOperation> filterOperations) {
            this.filterOperations = Objects.requireNonNull(filterOperations);
            return this;
        }
        public Builder filterOperations(GetDataSetLogicalTableMapDataTransformFilterOperation... filterOperations) {
            return filterOperations(List.of(filterOperations));
        }
        @CustomType.Setter
        public Builder projectOperations(List<GetDataSetLogicalTableMapDataTransformProjectOperation> projectOperations) {
            this.projectOperations = Objects.requireNonNull(projectOperations);
            return this;
        }
        public Builder projectOperations(GetDataSetLogicalTableMapDataTransformProjectOperation... projectOperations) {
            return projectOperations(List.of(projectOperations));
        }
        @CustomType.Setter
        public Builder renameColumnOperations(List<GetDataSetLogicalTableMapDataTransformRenameColumnOperation> renameColumnOperations) {
            this.renameColumnOperations = Objects.requireNonNull(renameColumnOperations);
            return this;
        }
        public Builder renameColumnOperations(GetDataSetLogicalTableMapDataTransformRenameColumnOperation... renameColumnOperations) {
            return renameColumnOperations(List.of(renameColumnOperations));
        }
        @CustomType.Setter
        public Builder tagColumnOperations(List<GetDataSetLogicalTableMapDataTransformTagColumnOperation> tagColumnOperations) {
            this.tagColumnOperations = Objects.requireNonNull(tagColumnOperations);
            return this;
        }
        public Builder tagColumnOperations(GetDataSetLogicalTableMapDataTransformTagColumnOperation... tagColumnOperations) {
            return tagColumnOperations(List.of(tagColumnOperations));
        }
        @CustomType.Setter
        public Builder untagColumnOperations(List<GetDataSetLogicalTableMapDataTransformUntagColumnOperation> untagColumnOperations) {
            this.untagColumnOperations = Objects.requireNonNull(untagColumnOperations);
            return this;
        }
        public Builder untagColumnOperations(GetDataSetLogicalTableMapDataTransformUntagColumnOperation... untagColumnOperations) {
            return untagColumnOperations(List.of(untagColumnOperations));
        }
        public GetDataSetLogicalTableMapDataTransform build() {
            final var o = new GetDataSetLogicalTableMapDataTransform();
            o.castColumnTypeOperations = castColumnTypeOperations;
            o.createColumnsOperations = createColumnsOperations;
            o.filterOperations = filterOperations;
            o.projectOperations = projectOperations;
            o.renameColumnOperations = renameColumnOperations;
            o.tagColumnOperations = tagColumnOperations;
            o.untagColumnOperations = untagColumnOperations;
            return o;
        }
    }
}
