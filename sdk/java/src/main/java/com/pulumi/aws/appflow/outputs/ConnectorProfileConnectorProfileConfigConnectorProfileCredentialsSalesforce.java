// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.appflow.outputs;

import com.pulumi.aws.appflow.outputs.ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOauthRequest;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforce {
    /**
     * @return The access token used to access the connector on your behalf.
     * 
     */
    private @Nullable String accessToken;
    /**
     * @return The secret manager ARN, which contains the client ID and client secret of the connected app.
     * 
     */
    private @Nullable String clientCredentialsArn;
    /**
     * @return A JSON web token (JWT) that authorizes access to Salesforce records.
     * 
     */
    private @Nullable String jwtToken;
    /**
     * @return The OAuth 2.0 grant type used by connector for OAuth 2.0 authentication. One of: `AUTHORIZATION_CODE`, `CLIENT_CREDENTIALS`.
     * 
     */
    private @Nullable String oauth2GrantType;
    /**
     * @return Used by select connectors for which the OAuth workflow is supported. See OAuth Request for more details.
     * 
     */
    private @Nullable ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOauthRequest oauthRequest;
    /**
     * @return The refresh token used to refresh an expired access token.
     * 
     */
    private @Nullable String refreshToken;

    private ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforce() {}
    /**
     * @return The access token used to access the connector on your behalf.
     * 
     */
    public Optional<String> accessToken() {
        return Optional.ofNullable(this.accessToken);
    }
    /**
     * @return The secret manager ARN, which contains the client ID and client secret of the connected app.
     * 
     */
    public Optional<String> clientCredentialsArn() {
        return Optional.ofNullable(this.clientCredentialsArn);
    }
    /**
     * @return A JSON web token (JWT) that authorizes access to Salesforce records.
     * 
     */
    public Optional<String> jwtToken() {
        return Optional.ofNullable(this.jwtToken);
    }
    /**
     * @return The OAuth 2.0 grant type used by connector for OAuth 2.0 authentication. One of: `AUTHORIZATION_CODE`, `CLIENT_CREDENTIALS`.
     * 
     */
    public Optional<String> oauth2GrantType() {
        return Optional.ofNullable(this.oauth2GrantType);
    }
    /**
     * @return Used by select connectors for which the OAuth workflow is supported. See OAuth Request for more details.
     * 
     */
    public Optional<ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOauthRequest> oauthRequest() {
        return Optional.ofNullable(this.oauthRequest);
    }
    /**
     * @return The refresh token used to refresh an expired access token.
     * 
     */
    public Optional<String> refreshToken() {
        return Optional.ofNullable(this.refreshToken);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforce defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String accessToken;
        private @Nullable String clientCredentialsArn;
        private @Nullable String jwtToken;
        private @Nullable String oauth2GrantType;
        private @Nullable ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOauthRequest oauthRequest;
        private @Nullable String refreshToken;
        public Builder() {}
        public Builder(ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforce defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessToken = defaults.accessToken;
    	      this.clientCredentialsArn = defaults.clientCredentialsArn;
    	      this.jwtToken = defaults.jwtToken;
    	      this.oauth2GrantType = defaults.oauth2GrantType;
    	      this.oauthRequest = defaults.oauthRequest;
    	      this.refreshToken = defaults.refreshToken;
        }

        @CustomType.Setter
        public Builder accessToken(@Nullable String accessToken) {

            this.accessToken = accessToken;
            return this;
        }
        @CustomType.Setter
        public Builder clientCredentialsArn(@Nullable String clientCredentialsArn) {

            this.clientCredentialsArn = clientCredentialsArn;
            return this;
        }
        @CustomType.Setter
        public Builder jwtToken(@Nullable String jwtToken) {

            this.jwtToken = jwtToken;
            return this;
        }
        @CustomType.Setter
        public Builder oauth2GrantType(@Nullable String oauth2GrantType) {

            this.oauth2GrantType = oauth2GrantType;
            return this;
        }
        @CustomType.Setter
        public Builder oauthRequest(@Nullable ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOauthRequest oauthRequest) {

            this.oauthRequest = oauthRequest;
            return this;
        }
        @CustomType.Setter
        public Builder refreshToken(@Nullable String refreshToken) {

            this.refreshToken = refreshToken;
            return this;
        }
        public ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforce build() {
            final var _resultValue = new ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforce();
            _resultValue.accessToken = accessToken;
            _resultValue.clientCredentialsArn = clientCredentialsArn;
            _resultValue.jwtToken = jwtToken;
            _resultValue.oauth2GrantType = oauth2GrantType;
            _resultValue.oauthRequest = oauthRequest;
            _resultValue.refreshToken = refreshToken;
            return _resultValue;
        }
    }
}
