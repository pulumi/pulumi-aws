// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.glue.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class JobSourceControlDetailsArgs extends com.pulumi.resources.ResourceArgs {

    public static final JobSourceControlDetailsArgs Empty = new JobSourceControlDetailsArgs();

    /**
     * The type of authentication, which can be an authentication token stored in Amazon Web Services Secrets Manager, or a personal access token. Valid values are: `PERSONAL_ACCESS_TOKEN` and `AWS_SECRETS_MANAGER`.
     * 
     */
    @Import(name="authStrategy")
    private @Nullable Output<String> authStrategy;

    /**
     * @return The type of authentication, which can be an authentication token stored in Amazon Web Services Secrets Manager, or a personal access token. Valid values are: `PERSONAL_ACCESS_TOKEN` and `AWS_SECRETS_MANAGER`.
     * 
     */
    public Optional<Output<String>> authStrategy() {
        return Optional.ofNullable(this.authStrategy);
    }

    /**
     * The value of an authorization token.
     * 
     */
    @Import(name="authToken")
    private @Nullable Output<String> authToken;

    /**
     * @return The value of an authorization token.
     * 
     */
    public Optional<Output<String>> authToken() {
        return Optional.ofNullable(this.authToken);
    }

    /**
     * A branch in the remote repository.
     * 
     */
    @Import(name="branch")
    private @Nullable Output<String> branch;

    /**
     * @return A branch in the remote repository.
     * 
     */
    public Optional<Output<String>> branch() {
        return Optional.ofNullable(this.branch);
    }

    /**
     * A folder in the remote repository.
     * 
     */
    @Import(name="folder")
    private @Nullable Output<String> folder;

    /**
     * @return A folder in the remote repository.
     * 
     */
    public Optional<Output<String>> folder() {
        return Optional.ofNullable(this.folder);
    }

    /**
     * The last commit ID for a commit in the remote repository.
     * 
     */
    @Import(name="lastCommitId")
    private @Nullable Output<String> lastCommitId;

    /**
     * @return The last commit ID for a commit in the remote repository.
     * 
     */
    public Optional<Output<String>> lastCommitId() {
        return Optional.ofNullable(this.lastCommitId);
    }

    /**
     * The owner of the remote repository that contains the job artifacts.
     * 
     */
    @Import(name="owner")
    private @Nullable Output<String> owner;

    /**
     * @return The owner of the remote repository that contains the job artifacts.
     * 
     */
    public Optional<Output<String>> owner() {
        return Optional.ofNullable(this.owner);
    }

    /**
     * The provider for the remote repository. Valid values are: `GITHUB`, `GITLAB`, `BITBUCKET`, and `AWS_CODE_COMMIT`.
     * 
     */
    @Import(name="provider")
    private @Nullable Output<String> provider;

    /**
     * @return The provider for the remote repository. Valid values are: `GITHUB`, `GITLAB`, `BITBUCKET`, and `AWS_CODE_COMMIT`.
     * 
     */
    public Optional<Output<String>> provider() {
        return Optional.ofNullable(this.provider);
    }

    /**
     * The name of the remote repository that contains the job artifacts.
     * 
     */
    @Import(name="repository")
    private @Nullable Output<String> repository;

    /**
     * @return The name of the remote repository that contains the job artifacts.
     * 
     */
    public Optional<Output<String>> repository() {
        return Optional.ofNullable(this.repository);
    }

    private JobSourceControlDetailsArgs() {}

    private JobSourceControlDetailsArgs(JobSourceControlDetailsArgs $) {
        this.authStrategy = $.authStrategy;
        this.authToken = $.authToken;
        this.branch = $.branch;
        this.folder = $.folder;
        this.lastCommitId = $.lastCommitId;
        this.owner = $.owner;
        this.provider = $.provider;
        this.repository = $.repository;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(JobSourceControlDetailsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private JobSourceControlDetailsArgs $;

        public Builder() {
            $ = new JobSourceControlDetailsArgs();
        }

        public Builder(JobSourceControlDetailsArgs defaults) {
            $ = new JobSourceControlDetailsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param authStrategy The type of authentication, which can be an authentication token stored in Amazon Web Services Secrets Manager, or a personal access token. Valid values are: `PERSONAL_ACCESS_TOKEN` and `AWS_SECRETS_MANAGER`.
         * 
         * @return builder
         * 
         */
        public Builder authStrategy(@Nullable Output<String> authStrategy) {
            $.authStrategy = authStrategy;
            return this;
        }

        /**
         * @param authStrategy The type of authentication, which can be an authentication token stored in Amazon Web Services Secrets Manager, or a personal access token. Valid values are: `PERSONAL_ACCESS_TOKEN` and `AWS_SECRETS_MANAGER`.
         * 
         * @return builder
         * 
         */
        public Builder authStrategy(String authStrategy) {
            return authStrategy(Output.of(authStrategy));
        }

        /**
         * @param authToken The value of an authorization token.
         * 
         * @return builder
         * 
         */
        public Builder authToken(@Nullable Output<String> authToken) {
            $.authToken = authToken;
            return this;
        }

        /**
         * @param authToken The value of an authorization token.
         * 
         * @return builder
         * 
         */
        public Builder authToken(String authToken) {
            return authToken(Output.of(authToken));
        }

        /**
         * @param branch A branch in the remote repository.
         * 
         * @return builder
         * 
         */
        public Builder branch(@Nullable Output<String> branch) {
            $.branch = branch;
            return this;
        }

        /**
         * @param branch A branch in the remote repository.
         * 
         * @return builder
         * 
         */
        public Builder branch(String branch) {
            return branch(Output.of(branch));
        }

        /**
         * @param folder A folder in the remote repository.
         * 
         * @return builder
         * 
         */
        public Builder folder(@Nullable Output<String> folder) {
            $.folder = folder;
            return this;
        }

        /**
         * @param folder A folder in the remote repository.
         * 
         * @return builder
         * 
         */
        public Builder folder(String folder) {
            return folder(Output.of(folder));
        }

        /**
         * @param lastCommitId The last commit ID for a commit in the remote repository.
         * 
         * @return builder
         * 
         */
        public Builder lastCommitId(@Nullable Output<String> lastCommitId) {
            $.lastCommitId = lastCommitId;
            return this;
        }

        /**
         * @param lastCommitId The last commit ID for a commit in the remote repository.
         * 
         * @return builder
         * 
         */
        public Builder lastCommitId(String lastCommitId) {
            return lastCommitId(Output.of(lastCommitId));
        }

        /**
         * @param owner The owner of the remote repository that contains the job artifacts.
         * 
         * @return builder
         * 
         */
        public Builder owner(@Nullable Output<String> owner) {
            $.owner = owner;
            return this;
        }

        /**
         * @param owner The owner of the remote repository that contains the job artifacts.
         * 
         * @return builder
         * 
         */
        public Builder owner(String owner) {
            return owner(Output.of(owner));
        }

        /**
         * @param provider The provider for the remote repository. Valid values are: `GITHUB`, `GITLAB`, `BITBUCKET`, and `AWS_CODE_COMMIT`.
         * 
         * @return builder
         * 
         */
        public Builder provider(@Nullable Output<String> provider) {
            $.provider = provider;
            return this;
        }

        /**
         * @param provider The provider for the remote repository. Valid values are: `GITHUB`, `GITLAB`, `BITBUCKET`, and `AWS_CODE_COMMIT`.
         * 
         * @return builder
         * 
         */
        public Builder provider(String provider) {
            return provider(Output.of(provider));
        }

        /**
         * @param repository The name of the remote repository that contains the job artifacts.
         * 
         * @return builder
         * 
         */
        public Builder repository(@Nullable Output<String> repository) {
            $.repository = repository;
            return this;
        }

        /**
         * @param repository The name of the remote repository that contains the job artifacts.
         * 
         * @return builder
         * 
         */
        public Builder repository(String repository) {
            return repository(Output.of(repository));
        }

        public JobSourceControlDetailsArgs build() {
            return $;
        }
    }

}
