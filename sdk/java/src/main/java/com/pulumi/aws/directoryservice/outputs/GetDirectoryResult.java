// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.directoryservice.outputs;

import com.pulumi.aws.directoryservice.outputs.GetDirectoryConnectSetting;
import com.pulumi.aws.directoryservice.outputs.GetDirectoryRadiusSetting;
import com.pulumi.aws.directoryservice.outputs.GetDirectoryVpcSetting;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDirectoryResult {
    /**
     * @return Access URL for the directory/connector, such as http://alias.awsapps.com.
     * 
     */
    private @Nullable String accessUrl;
    /**
     * @return Alias for the directory/connector, such as `d-991708b282.awsapps.com`.
     * 
     */
    private @Nullable String alias;
    private @Nullable List<GetDirectoryConnectSetting> connectSettings;
    /**
     * @return Textual description for the directory/connector.
     * 
     */
    private @Nullable String description;
    private String directoryId;
    /**
     * @return List of IP addresses of the DNS servers for the directory/connector.
     * 
     */
    private @Nullable List<String> dnsIpAddresses;
    /**
     * @return (for `MicrosoftAD`) Microsoft AD edition (`Standard` or `Enterprise`).
     * 
     */
    private @Nullable String edition;
    /**
     * @return Directory/connector single-sign on status.
     * 
     */
    private @Nullable Boolean enableSso;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private @Nullable String id;
    /**
     * @return Fully qualified name for the directory/connector.
     * 
     */
    private @Nullable String name;
    private @Nullable List<GetDirectoryRadiusSetting> radiusSettings;
    /**
     * @return ID of the security group created by the directory/connector.
     * 
     */
    private @Nullable String securityGroupId;
    /**
     * @return Short name of the directory/connector, such as `CORP`.
     * 
     */
    private @Nullable String shortName;
    /**
     * @return (for `SimpleAD` and `ADConnector`) Size of the directory/connector (`Small` or `Large`).
     * 
     */
    private @Nullable String size;
    /**
     * @return A map of tags assigned to the directory/connector.
     * 
     */
    private @Nullable Map<String,String> tags;
    /**
     * @return Directory type (`SimpleAD`, `ADConnector` or `MicrosoftAD`).
     * 
     */
    private @Nullable String type;
    private @Nullable List<GetDirectoryVpcSetting> vpcSettings;

    private GetDirectoryResult() {}
    /**
     * @return Access URL for the directory/connector, such as http://alias.awsapps.com.
     * 
     */
    public Optional<String> accessUrl() {
        return Optional.ofNullable(this.accessUrl);
    }
    /**
     * @return Alias for the directory/connector, such as `d-991708b282.awsapps.com`.
     * 
     */
    public Optional<String> alias() {
        return Optional.ofNullable(this.alias);
    }
    public List<GetDirectoryConnectSetting> connectSettings() {
        return this.connectSettings == null ? List.of() : this.connectSettings;
    }
    /**
     * @return Textual description for the directory/connector.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    public String directoryId() {
        return this.directoryId;
    }
    /**
     * @return List of IP addresses of the DNS servers for the directory/connector.
     * 
     */
    public List<String> dnsIpAddresses() {
        return this.dnsIpAddresses == null ? List.of() : this.dnsIpAddresses;
    }
    /**
     * @return (for `MicrosoftAD`) Microsoft AD edition (`Standard` or `Enterprise`).
     * 
     */
    public Optional<String> edition() {
        return Optional.ofNullable(this.edition);
    }
    /**
     * @return Directory/connector single-sign on status.
     * 
     */
    public Optional<Boolean> enableSso() {
        return Optional.ofNullable(this.enableSso);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Fully qualified name for the directory/connector.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    public List<GetDirectoryRadiusSetting> radiusSettings() {
        return this.radiusSettings == null ? List.of() : this.radiusSettings;
    }
    /**
     * @return ID of the security group created by the directory/connector.
     * 
     */
    public Optional<String> securityGroupId() {
        return Optional.ofNullable(this.securityGroupId);
    }
    /**
     * @return Short name of the directory/connector, such as `CORP`.
     * 
     */
    public Optional<String> shortName() {
        return Optional.ofNullable(this.shortName);
    }
    /**
     * @return (for `SimpleAD` and `ADConnector`) Size of the directory/connector (`Small` or `Large`).
     * 
     */
    public Optional<String> size() {
        return Optional.ofNullable(this.size);
    }
    /**
     * @return A map of tags assigned to the directory/connector.
     * 
     */
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * @return Directory type (`SimpleAD`, `ADConnector` or `MicrosoftAD`).
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }
    public List<GetDirectoryVpcSetting> vpcSettings() {
        return this.vpcSettings == null ? List.of() : this.vpcSettings;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDirectoryResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String accessUrl;
        private @Nullable String alias;
        private @Nullable List<GetDirectoryConnectSetting> connectSettings;
        private @Nullable String description;
        private String directoryId;
        private @Nullable List<String> dnsIpAddresses;
        private @Nullable String edition;
        private @Nullable Boolean enableSso;
        private @Nullable String id;
        private @Nullable String name;
        private @Nullable List<GetDirectoryRadiusSetting> radiusSettings;
        private @Nullable String securityGroupId;
        private @Nullable String shortName;
        private @Nullable String size;
        private @Nullable Map<String,String> tags;
        private @Nullable String type;
        private @Nullable List<GetDirectoryVpcSetting> vpcSettings;
        public Builder() {}
        public Builder(GetDirectoryResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessUrl = defaults.accessUrl;
    	      this.alias = defaults.alias;
    	      this.connectSettings = defaults.connectSettings;
    	      this.description = defaults.description;
    	      this.directoryId = defaults.directoryId;
    	      this.dnsIpAddresses = defaults.dnsIpAddresses;
    	      this.edition = defaults.edition;
    	      this.enableSso = defaults.enableSso;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.radiusSettings = defaults.radiusSettings;
    	      this.securityGroupId = defaults.securityGroupId;
    	      this.shortName = defaults.shortName;
    	      this.size = defaults.size;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
    	      this.vpcSettings = defaults.vpcSettings;
        }

        @CustomType.Setter
        public Builder accessUrl(@Nullable String accessUrl) {
            this.accessUrl = accessUrl;
            return this;
        }
        @CustomType.Setter
        public Builder alias(@Nullable String alias) {
            this.alias = alias;
            return this;
        }
        @CustomType.Setter
        public Builder connectSettings(@Nullable List<GetDirectoryConnectSetting> connectSettings) {
            this.connectSettings = connectSettings;
            return this;
        }
        public Builder connectSettings(GetDirectoryConnectSetting... connectSettings) {
            return connectSettings(List.of(connectSettings));
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder directoryId(String directoryId) {
            this.directoryId = Objects.requireNonNull(directoryId);
            return this;
        }
        @CustomType.Setter
        public Builder dnsIpAddresses(@Nullable List<String> dnsIpAddresses) {
            this.dnsIpAddresses = dnsIpAddresses;
            return this;
        }
        public Builder dnsIpAddresses(String... dnsIpAddresses) {
            return dnsIpAddresses(List.of(dnsIpAddresses));
        }
        @CustomType.Setter
        public Builder edition(@Nullable String edition) {
            this.edition = edition;
            return this;
        }
        @CustomType.Setter
        public Builder enableSso(@Nullable Boolean enableSso) {
            this.enableSso = enableSso;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder radiusSettings(@Nullable List<GetDirectoryRadiusSetting> radiusSettings) {
            this.radiusSettings = radiusSettings;
            return this;
        }
        public Builder radiusSettings(GetDirectoryRadiusSetting... radiusSettings) {
            return radiusSettings(List.of(radiusSettings));
        }
        @CustomType.Setter
        public Builder securityGroupId(@Nullable String securityGroupId) {
            this.securityGroupId = securityGroupId;
            return this;
        }
        @CustomType.Setter
        public Builder shortName(@Nullable String shortName) {
            this.shortName = shortName;
            return this;
        }
        @CustomType.Setter
        public Builder size(@Nullable String size) {
            this.size = size;
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder type(@Nullable String type) {
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder vpcSettings(@Nullable List<GetDirectoryVpcSetting> vpcSettings) {
            this.vpcSettings = vpcSettings;
            return this;
        }
        public Builder vpcSettings(GetDirectoryVpcSetting... vpcSettings) {
            return vpcSettings(List.of(vpcSettings));
        }
        public GetDirectoryResult build() {
            final var o = new GetDirectoryResult();
            o.accessUrl = accessUrl;
            o.alias = alias;
            o.connectSettings = connectSettings;
            o.description = description;
            o.directoryId = directoryId;
            o.dnsIpAddresses = dnsIpAddresses;
            o.edition = edition;
            o.enableSso = enableSso;
            o.id = id;
            o.name = name;
            o.radiusSettings = radiusSettings;
            o.securityGroupId = securityGroupId;
            o.shortName = shortName;
            o.size = size;
            o.tags = tags;
            o.type = type;
            o.vpcSettings = vpcSettings;
            return o;
        }
    }
}
