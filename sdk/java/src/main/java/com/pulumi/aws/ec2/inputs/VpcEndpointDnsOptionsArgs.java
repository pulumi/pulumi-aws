// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ec2.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VpcEndpointDnsOptionsArgs extends com.pulumi.resources.ResourceArgs {

    public static final VpcEndpointDnsOptionsArgs Empty = new VpcEndpointDnsOptionsArgs();

    /**
     * The DNS records created for the endpoint. Valid values are `ipv4`, `dualstack`, `service-defined`, and `ipv6`.
     * 
     */
    @Import(name="dnsRecordIpType")
    private @Nullable Output<String> dnsRecordIpType;

    /**
     * @return The DNS records created for the endpoint. Valid values are `ipv4`, `dualstack`, `service-defined`, and `ipv6`.
     * 
     */
    public Optional<Output<String>> dnsRecordIpType() {
        return Optional.ofNullable(this.dnsRecordIpType);
    }

    /**
     * Indicates whether to enable private DNS only for inbound endpoints. This option is available only for services that support both gateway and interface endpoints. It routes traffic that originates from the VPC to the gateway endpoint and traffic that originates from on-premises to the interface endpoint. Default is `false`. Can only be specified if private_dns_enabled is `true`.
     * 
     */
    @Import(name="privateDnsOnlyForInboundResolverEndpoint")
    private @Nullable Output<Boolean> privateDnsOnlyForInboundResolverEndpoint;

    /**
     * @return Indicates whether to enable private DNS only for inbound endpoints. This option is available only for services that support both gateway and interface endpoints. It routes traffic that originates from the VPC to the gateway endpoint and traffic that originates from on-premises to the interface endpoint. Default is `false`. Can only be specified if private_dns_enabled is `true`.
     * 
     */
    public Optional<Output<Boolean>> privateDnsOnlyForInboundResolverEndpoint() {
        return Optional.ofNullable(this.privateDnsOnlyForInboundResolverEndpoint);
    }

    private VpcEndpointDnsOptionsArgs() {}

    private VpcEndpointDnsOptionsArgs(VpcEndpointDnsOptionsArgs $) {
        this.dnsRecordIpType = $.dnsRecordIpType;
        this.privateDnsOnlyForInboundResolverEndpoint = $.privateDnsOnlyForInboundResolverEndpoint;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VpcEndpointDnsOptionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VpcEndpointDnsOptionsArgs $;

        public Builder() {
            $ = new VpcEndpointDnsOptionsArgs();
        }

        public Builder(VpcEndpointDnsOptionsArgs defaults) {
            $ = new VpcEndpointDnsOptionsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dnsRecordIpType The DNS records created for the endpoint. Valid values are `ipv4`, `dualstack`, `service-defined`, and `ipv6`.
         * 
         * @return builder
         * 
         */
        public Builder dnsRecordIpType(@Nullable Output<String> dnsRecordIpType) {
            $.dnsRecordIpType = dnsRecordIpType;
            return this;
        }

        /**
         * @param dnsRecordIpType The DNS records created for the endpoint. Valid values are `ipv4`, `dualstack`, `service-defined`, and `ipv6`.
         * 
         * @return builder
         * 
         */
        public Builder dnsRecordIpType(String dnsRecordIpType) {
            return dnsRecordIpType(Output.of(dnsRecordIpType));
        }

        /**
         * @param privateDnsOnlyForInboundResolverEndpoint Indicates whether to enable private DNS only for inbound endpoints. This option is available only for services that support both gateway and interface endpoints. It routes traffic that originates from the VPC to the gateway endpoint and traffic that originates from on-premises to the interface endpoint. Default is `false`. Can only be specified if private_dns_enabled is `true`.
         * 
         * @return builder
         * 
         */
        public Builder privateDnsOnlyForInboundResolverEndpoint(@Nullable Output<Boolean> privateDnsOnlyForInboundResolverEndpoint) {
            $.privateDnsOnlyForInboundResolverEndpoint = privateDnsOnlyForInboundResolverEndpoint;
            return this;
        }

        /**
         * @param privateDnsOnlyForInboundResolverEndpoint Indicates whether to enable private DNS only for inbound endpoints. This option is available only for services that support both gateway and interface endpoints. It routes traffic that originates from the VPC to the gateway endpoint and traffic that originates from on-premises to the interface endpoint. Default is `false`. Can only be specified if private_dns_enabled is `true`.
         * 
         * @return builder
         * 
         */
        public Builder privateDnsOnlyForInboundResolverEndpoint(Boolean privateDnsOnlyForInboundResolverEndpoint) {
            return privateDnsOnlyForInboundResolverEndpoint(Output.of(privateDnsOnlyForInboundResolverEndpoint));
        }

        public VpcEndpointDnsOptionsArgs build() {
            return $;
        }
    }

}
