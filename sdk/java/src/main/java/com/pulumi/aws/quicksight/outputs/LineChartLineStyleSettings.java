// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class LineChartLineStyleSettings {
    private @Nullable String lineInterpolation;
    private @Nullable String lineStyle;
    private @Nullable String lineVisibility;
    private @Nullable String lineWidth;

    private LineChartLineStyleSettings() {}
    public Optional<String> lineInterpolation() {
        return Optional.ofNullable(this.lineInterpolation);
    }
    public Optional<String> lineStyle() {
        return Optional.ofNullable(this.lineStyle);
    }
    public Optional<String> lineVisibility() {
        return Optional.ofNullable(this.lineVisibility);
    }
    public Optional<String> lineWidth() {
        return Optional.ofNullable(this.lineWidth);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LineChartLineStyleSettings defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String lineInterpolation;
        private @Nullable String lineStyle;
        private @Nullable String lineVisibility;
        private @Nullable String lineWidth;
        public Builder() {}
        public Builder(LineChartLineStyleSettings defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.lineInterpolation = defaults.lineInterpolation;
    	      this.lineStyle = defaults.lineStyle;
    	      this.lineVisibility = defaults.lineVisibility;
    	      this.lineWidth = defaults.lineWidth;
        }

        @CustomType.Setter
        public Builder lineInterpolation(@Nullable String lineInterpolation) {

            this.lineInterpolation = lineInterpolation;
            return this;
        }
        @CustomType.Setter
        public Builder lineStyle(@Nullable String lineStyle) {

            this.lineStyle = lineStyle;
            return this;
        }
        @CustomType.Setter
        public Builder lineVisibility(@Nullable String lineVisibility) {

            this.lineVisibility = lineVisibility;
            return this;
        }
        @CustomType.Setter
        public Builder lineWidth(@Nullable String lineWidth) {

            this.lineWidth = lineWidth;
            return this;
        }
        public LineChartLineStyleSettings build() {
            final var _resultValue = new LineChartLineStyleSettings();
            _resultValue.lineInterpolation = lineInterpolation;
            _resultValue.lineStyle = lineStyle;
            _resultValue.lineVisibility = lineVisibility;
            _resultValue.lineWidth = lineWidth;
            return _resultValue;
        }
    }
}
