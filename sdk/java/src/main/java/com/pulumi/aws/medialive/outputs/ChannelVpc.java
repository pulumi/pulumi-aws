// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.medialive.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class ChannelVpc {
    private @Nullable List<String> availabilityZones;
    private @Nullable List<String> networkInterfaceIds;
    /**
     * @return List of public address allocation ids to associate with ENIs that will be created in Output VPC. Must specify one for SINGLE_PIPELINE, two for STANDARD channels.
     * 
     */
    private List<String> publicAddressAllocationIds;
    /**
     * @return A list of up to 5 EC2 VPC security group IDs to attach to the Output VPC network interfaces. If none are specified then the VPC default security group will be used.
     * 
     */
    private @Nullable List<String> securityGroupIds;
    /**
     * @return A list of VPC subnet IDs from the same VPC. If STANDARD channel, subnet IDs must be mapped to two unique availability zones (AZ).
     * 
     */
    private List<String> subnetIds;

    private ChannelVpc() {}
    public List<String> availabilityZones() {
        return this.availabilityZones == null ? List.of() : this.availabilityZones;
    }
    public List<String> networkInterfaceIds() {
        return this.networkInterfaceIds == null ? List.of() : this.networkInterfaceIds;
    }
    /**
     * @return List of public address allocation ids to associate with ENIs that will be created in Output VPC. Must specify one for SINGLE_PIPELINE, two for STANDARD channels.
     * 
     */
    public List<String> publicAddressAllocationIds() {
        return this.publicAddressAllocationIds;
    }
    /**
     * @return A list of up to 5 EC2 VPC security group IDs to attach to the Output VPC network interfaces. If none are specified then the VPC default security group will be used.
     * 
     */
    public List<String> securityGroupIds() {
        return this.securityGroupIds == null ? List.of() : this.securityGroupIds;
    }
    /**
     * @return A list of VPC subnet IDs from the same VPC. If STANDARD channel, subnet IDs must be mapped to two unique availability zones (AZ).
     * 
     */
    public List<String> subnetIds() {
        return this.subnetIds;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ChannelVpc defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> availabilityZones;
        private @Nullable List<String> networkInterfaceIds;
        private List<String> publicAddressAllocationIds;
        private @Nullable List<String> securityGroupIds;
        private List<String> subnetIds;
        public Builder() {}
        public Builder(ChannelVpc defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.availabilityZones = defaults.availabilityZones;
    	      this.networkInterfaceIds = defaults.networkInterfaceIds;
    	      this.publicAddressAllocationIds = defaults.publicAddressAllocationIds;
    	      this.securityGroupIds = defaults.securityGroupIds;
    	      this.subnetIds = defaults.subnetIds;
        }

        @CustomType.Setter
        public Builder availabilityZones(@Nullable List<String> availabilityZones) {

            this.availabilityZones = availabilityZones;
            return this;
        }
        public Builder availabilityZones(String... availabilityZones) {
            return availabilityZones(List.of(availabilityZones));
        }
        @CustomType.Setter
        public Builder networkInterfaceIds(@Nullable List<String> networkInterfaceIds) {

            this.networkInterfaceIds = networkInterfaceIds;
            return this;
        }
        public Builder networkInterfaceIds(String... networkInterfaceIds) {
            return networkInterfaceIds(List.of(networkInterfaceIds));
        }
        @CustomType.Setter
        public Builder publicAddressAllocationIds(List<String> publicAddressAllocationIds) {
            if (publicAddressAllocationIds == null) {
              throw new MissingRequiredPropertyException("ChannelVpc", "publicAddressAllocationIds");
            }
            this.publicAddressAllocationIds = publicAddressAllocationIds;
            return this;
        }
        public Builder publicAddressAllocationIds(String... publicAddressAllocationIds) {
            return publicAddressAllocationIds(List.of(publicAddressAllocationIds));
        }
        @CustomType.Setter
        public Builder securityGroupIds(@Nullable List<String> securityGroupIds) {

            this.securityGroupIds = securityGroupIds;
            return this;
        }
        public Builder securityGroupIds(String... securityGroupIds) {
            return securityGroupIds(List.of(securityGroupIds));
        }
        @CustomType.Setter
        public Builder subnetIds(List<String> subnetIds) {
            if (subnetIds == null) {
              throw new MissingRequiredPropertyException("ChannelVpc", "subnetIds");
            }
            this.subnetIds = subnetIds;
            return this;
        }
        public Builder subnetIds(String... subnetIds) {
            return subnetIds(List.of(subnetIds));
        }
        public ChannelVpc build() {
            final var _resultValue = new ChannelVpc();
            _resultValue.availabilityZones = availabilityZones;
            _resultValue.networkInterfaceIds = networkInterfaceIds;
            _resultValue.publicAddressAllocationIds = publicAddressAllocationIds;
            _resultValue.securityGroupIds = securityGroupIds;
            _resultValue.subnetIds = subnetIds;
            return _resultValue;
        }
    }
}
