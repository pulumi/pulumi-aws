// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.directconnect;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class HostedPublicVirtualInterfaceAccepterArgs extends com.pulumi.resources.ResourceArgs {

    public static final HostedPublicVirtualInterfaceAccepterArgs Empty = new HostedPublicVirtualInterfaceAccepterArgs();

    /**
     * A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The ID of the Direct Connect virtual interface to accept.
     * 
     */
    @Import(name="virtualInterfaceId", required=true)
    private Output<String> virtualInterfaceId;

    /**
     * @return The ID of the Direct Connect virtual interface to accept.
     * 
     */
    public Output<String> virtualInterfaceId() {
        return this.virtualInterfaceId;
    }

    private HostedPublicVirtualInterfaceAccepterArgs() {}

    private HostedPublicVirtualInterfaceAccepterArgs(HostedPublicVirtualInterfaceAccepterArgs $) {
        this.tags = $.tags;
        this.virtualInterfaceId = $.virtualInterfaceId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HostedPublicVirtualInterfaceAccepterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HostedPublicVirtualInterfaceAccepterArgs $;

        public Builder() {
            $ = new HostedPublicVirtualInterfaceAccepterArgs();
        }

        public Builder(HostedPublicVirtualInterfaceAccepterArgs defaults) {
            $ = new HostedPublicVirtualInterfaceAccepterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param tags A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param virtualInterfaceId The ID of the Direct Connect virtual interface to accept.
         * 
         * @return builder
         * 
         */
        public Builder virtualInterfaceId(Output<String> virtualInterfaceId) {
            $.virtualInterfaceId = virtualInterfaceId;
            return this;
        }

        /**
         * @param virtualInterfaceId The ID of the Direct Connect virtual interface to accept.
         * 
         * @return builder
         * 
         */
        public Builder virtualInterfaceId(String virtualInterfaceId) {
            return virtualInterfaceId(Output.of(virtualInterfaceId));
        }

        public HostedPublicVirtualInterfaceAccepterArgs build() {
            if ($.virtualInterfaceId == null) {
                throw new MissingRequiredPropertyException("HostedPublicVirtualInterfaceAccepterArgs", "virtualInterfaceId");
            }
            return $;
        }
    }

}
