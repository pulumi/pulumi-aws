// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.fsx.outputs;

import com.pulumi.aws.fsx.outputs.GetOntapFileSystemDiskIopsConfiguration;
import com.pulumi.aws.fsx.outputs.GetOntapFileSystemEndpoint;
import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetOntapFileSystemResult {
    /**
     * @return Amazon Resource Name of the file system.
     * 
     */
    private String arn;
    /**
     * @return The number of days to retain automatic backups.
     * 
     */
    private Integer automaticBackupRetentionDays;
    /**
     * @return The preferred time (in `HH:MM` format) to take daily automatic backups, in the UTC time zone.
     * 
     */
    private String dailyAutomaticBackupStartTime;
    /**
     * @return The file system deployment type.
     * 
     */
    private String deploymentType;
    /**
     * @return The SSD IOPS configuration for the Amazon FSx for NetApp ONTAP file system, specifying the number of provisioned IOPS and the provision mode. See Disk IOPS Below.
     * 
     */
    private List<GetOntapFileSystemDiskIopsConfiguration> diskIopsConfigurations;
    /**
     * @return DNS name for the file system (e.g. `fs-12345678.corp.example.com`).
     * 
     */
    private String dnsName;
    /**
     * @return (Multi-AZ only) Specifies the IP address range in which the endpoints to access your file system exist.
     * 
     */
    private String endpointIpAddressRange;
    /**
     * @return The Management and Intercluster FileSystemEndpoints that are used to access data or to manage the file system using the NetApp ONTAP CLI, REST API, or NetApp SnapMirror. See FileSystemEndpoints below.
     * 
     */
    private List<GetOntapFileSystemEndpoint> endpoints;
    /**
     * @return Identifier of the file system (e.g. `fs-12345678`).
     * 
     */
    private String id;
    /**
     * @return ARN for the KMS Key to encrypt the file system at rest.
     * 
     */
    private String kmsKeyId;
    /**
     * @return The IDs of the elastic network interfaces from which a specific file system is accessible.
     * 
     */
    private List<String> networkInterfaceIds;
    /**
     * @return AWS account identifier that created the file system.
     * 
     */
    private String ownerId;
    /**
     * @return Specifies the subnet in which you want the preferred file server to be located.
     * 
     */
    private String preferredSubnetId;
    /**
     * @return (Multi-AZ only) The VPC route tables in which your file system&#39;s endpoints exist.
     * 
     */
    private List<String> routeTableIds;
    /**
     * @return The storage capacity of the file system in gibibytes (GiB).
     * 
     */
    private Integer storageCapacity;
    /**
     * @return The type of storage the file system is using. If set to `SSD`, the file system uses solid state drive storage. If set to `HDD`, the file system uses hard disk drive storage.
     * 
     */
    private String storageType;
    /**
     * @return Specifies the IDs of the subnets that the file system is accessible from. For the MULTI_AZ_1 file system deployment type, there are two subnet IDs, one for the preferred file server and one for the standby file server. The preferred file server subnet identified in the `preferred_subnet_id` property.
     * 
     */
    private List<String> subnetIds;
    /**
     * @return The tags associated with the file system.
     * 
     */
    private Map<String,String> tags;
    /**
     * @return The sustained throughput of an Amazon FSx file system in Megabytes per second (MBps).
     * 
     */
    private Integer throughputCapacity;
    /**
     * @return The ID of the primary virtual private cloud (VPC) for the file system.
     * 
     */
    private String vpcId;
    /**
     * @return The preferred start time (in `D:HH:MM` format) to perform weekly maintenance, in the UTC time zone.
     * 
     */
    private String weeklyMaintenanceStartTime;

    private GetOntapFileSystemResult() {}
    /**
     * @return Amazon Resource Name of the file system.
     * 
     */
    public String arn() {
        return this.arn;
    }
    /**
     * @return The number of days to retain automatic backups.
     * 
     */
    public Integer automaticBackupRetentionDays() {
        return this.automaticBackupRetentionDays;
    }
    /**
     * @return The preferred time (in `HH:MM` format) to take daily automatic backups, in the UTC time zone.
     * 
     */
    public String dailyAutomaticBackupStartTime() {
        return this.dailyAutomaticBackupStartTime;
    }
    /**
     * @return The file system deployment type.
     * 
     */
    public String deploymentType() {
        return this.deploymentType;
    }
    /**
     * @return The SSD IOPS configuration for the Amazon FSx for NetApp ONTAP file system, specifying the number of provisioned IOPS and the provision mode. See Disk IOPS Below.
     * 
     */
    public List<GetOntapFileSystemDiskIopsConfiguration> diskIopsConfigurations() {
        return this.diskIopsConfigurations;
    }
    /**
     * @return DNS name for the file system (e.g. `fs-12345678.corp.example.com`).
     * 
     */
    public String dnsName() {
        return this.dnsName;
    }
    /**
     * @return (Multi-AZ only) Specifies the IP address range in which the endpoints to access your file system exist.
     * 
     */
    public String endpointIpAddressRange() {
        return this.endpointIpAddressRange;
    }
    /**
     * @return The Management and Intercluster FileSystemEndpoints that are used to access data or to manage the file system using the NetApp ONTAP CLI, REST API, or NetApp SnapMirror. See FileSystemEndpoints below.
     * 
     */
    public List<GetOntapFileSystemEndpoint> endpoints() {
        return this.endpoints;
    }
    /**
     * @return Identifier of the file system (e.g. `fs-12345678`).
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return ARN for the KMS Key to encrypt the file system at rest.
     * 
     */
    public String kmsKeyId() {
        return this.kmsKeyId;
    }
    /**
     * @return The IDs of the elastic network interfaces from which a specific file system is accessible.
     * 
     */
    public List<String> networkInterfaceIds() {
        return this.networkInterfaceIds;
    }
    /**
     * @return AWS account identifier that created the file system.
     * 
     */
    public String ownerId() {
        return this.ownerId;
    }
    /**
     * @return Specifies the subnet in which you want the preferred file server to be located.
     * 
     */
    public String preferredSubnetId() {
        return this.preferredSubnetId;
    }
    /**
     * @return (Multi-AZ only) The VPC route tables in which your file system&#39;s endpoints exist.
     * 
     */
    public List<String> routeTableIds() {
        return this.routeTableIds;
    }
    /**
     * @return The storage capacity of the file system in gibibytes (GiB).
     * 
     */
    public Integer storageCapacity() {
        return this.storageCapacity;
    }
    /**
     * @return The type of storage the file system is using. If set to `SSD`, the file system uses solid state drive storage. If set to `HDD`, the file system uses hard disk drive storage.
     * 
     */
    public String storageType() {
        return this.storageType;
    }
    /**
     * @return Specifies the IDs of the subnets that the file system is accessible from. For the MULTI_AZ_1 file system deployment type, there are two subnet IDs, one for the preferred file server and one for the standby file server. The preferred file server subnet identified in the `preferred_subnet_id` property.
     * 
     */
    public List<String> subnetIds() {
        return this.subnetIds;
    }
    /**
     * @return The tags associated with the file system.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }
    /**
     * @return The sustained throughput of an Amazon FSx file system in Megabytes per second (MBps).
     * 
     */
    public Integer throughputCapacity() {
        return this.throughputCapacity;
    }
    /**
     * @return The ID of the primary virtual private cloud (VPC) for the file system.
     * 
     */
    public String vpcId() {
        return this.vpcId;
    }
    /**
     * @return The preferred start time (in `D:HH:MM` format) to perform weekly maintenance, in the UTC time zone.
     * 
     */
    public String weeklyMaintenanceStartTime() {
        return this.weeklyMaintenanceStartTime;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetOntapFileSystemResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String arn;
        private Integer automaticBackupRetentionDays;
        private String dailyAutomaticBackupStartTime;
        private String deploymentType;
        private List<GetOntapFileSystemDiskIopsConfiguration> diskIopsConfigurations;
        private String dnsName;
        private String endpointIpAddressRange;
        private List<GetOntapFileSystemEndpoint> endpoints;
        private String id;
        private String kmsKeyId;
        private List<String> networkInterfaceIds;
        private String ownerId;
        private String preferredSubnetId;
        private List<String> routeTableIds;
        private Integer storageCapacity;
        private String storageType;
        private List<String> subnetIds;
        private Map<String,String> tags;
        private Integer throughputCapacity;
        private String vpcId;
        private String weeklyMaintenanceStartTime;
        public Builder() {}
        public Builder(GetOntapFileSystemResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.automaticBackupRetentionDays = defaults.automaticBackupRetentionDays;
    	      this.dailyAutomaticBackupStartTime = defaults.dailyAutomaticBackupStartTime;
    	      this.deploymentType = defaults.deploymentType;
    	      this.diskIopsConfigurations = defaults.diskIopsConfigurations;
    	      this.dnsName = defaults.dnsName;
    	      this.endpointIpAddressRange = defaults.endpointIpAddressRange;
    	      this.endpoints = defaults.endpoints;
    	      this.id = defaults.id;
    	      this.kmsKeyId = defaults.kmsKeyId;
    	      this.networkInterfaceIds = defaults.networkInterfaceIds;
    	      this.ownerId = defaults.ownerId;
    	      this.preferredSubnetId = defaults.preferredSubnetId;
    	      this.routeTableIds = defaults.routeTableIds;
    	      this.storageCapacity = defaults.storageCapacity;
    	      this.storageType = defaults.storageType;
    	      this.subnetIds = defaults.subnetIds;
    	      this.tags = defaults.tags;
    	      this.throughputCapacity = defaults.throughputCapacity;
    	      this.vpcId = defaults.vpcId;
    	      this.weeklyMaintenanceStartTime = defaults.weeklyMaintenanceStartTime;
        }

        @CustomType.Setter
        public Builder arn(String arn) {
            this.arn = Objects.requireNonNull(arn);
            return this;
        }
        @CustomType.Setter
        public Builder automaticBackupRetentionDays(Integer automaticBackupRetentionDays) {
            this.automaticBackupRetentionDays = Objects.requireNonNull(automaticBackupRetentionDays);
            return this;
        }
        @CustomType.Setter
        public Builder dailyAutomaticBackupStartTime(String dailyAutomaticBackupStartTime) {
            this.dailyAutomaticBackupStartTime = Objects.requireNonNull(dailyAutomaticBackupStartTime);
            return this;
        }
        @CustomType.Setter
        public Builder deploymentType(String deploymentType) {
            this.deploymentType = Objects.requireNonNull(deploymentType);
            return this;
        }
        @CustomType.Setter
        public Builder diskIopsConfigurations(List<GetOntapFileSystemDiskIopsConfiguration> diskIopsConfigurations) {
            this.diskIopsConfigurations = Objects.requireNonNull(diskIopsConfigurations);
            return this;
        }
        public Builder diskIopsConfigurations(GetOntapFileSystemDiskIopsConfiguration... diskIopsConfigurations) {
            return diskIopsConfigurations(List.of(diskIopsConfigurations));
        }
        @CustomType.Setter
        public Builder dnsName(String dnsName) {
            this.dnsName = Objects.requireNonNull(dnsName);
            return this;
        }
        @CustomType.Setter
        public Builder endpointIpAddressRange(String endpointIpAddressRange) {
            this.endpointIpAddressRange = Objects.requireNonNull(endpointIpAddressRange);
            return this;
        }
        @CustomType.Setter
        public Builder endpoints(List<GetOntapFileSystemEndpoint> endpoints) {
            this.endpoints = Objects.requireNonNull(endpoints);
            return this;
        }
        public Builder endpoints(GetOntapFileSystemEndpoint... endpoints) {
            return endpoints(List.of(endpoints));
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder kmsKeyId(String kmsKeyId) {
            this.kmsKeyId = Objects.requireNonNull(kmsKeyId);
            return this;
        }
        @CustomType.Setter
        public Builder networkInterfaceIds(List<String> networkInterfaceIds) {
            this.networkInterfaceIds = Objects.requireNonNull(networkInterfaceIds);
            return this;
        }
        public Builder networkInterfaceIds(String... networkInterfaceIds) {
            return networkInterfaceIds(List.of(networkInterfaceIds));
        }
        @CustomType.Setter
        public Builder ownerId(String ownerId) {
            this.ownerId = Objects.requireNonNull(ownerId);
            return this;
        }
        @CustomType.Setter
        public Builder preferredSubnetId(String preferredSubnetId) {
            this.preferredSubnetId = Objects.requireNonNull(preferredSubnetId);
            return this;
        }
        @CustomType.Setter
        public Builder routeTableIds(List<String> routeTableIds) {
            this.routeTableIds = Objects.requireNonNull(routeTableIds);
            return this;
        }
        public Builder routeTableIds(String... routeTableIds) {
            return routeTableIds(List.of(routeTableIds));
        }
        @CustomType.Setter
        public Builder storageCapacity(Integer storageCapacity) {
            this.storageCapacity = Objects.requireNonNull(storageCapacity);
            return this;
        }
        @CustomType.Setter
        public Builder storageType(String storageType) {
            this.storageType = Objects.requireNonNull(storageType);
            return this;
        }
        @CustomType.Setter
        public Builder subnetIds(List<String> subnetIds) {
            this.subnetIds = Objects.requireNonNull(subnetIds);
            return this;
        }
        public Builder subnetIds(String... subnetIds) {
            return subnetIds(List.of(subnetIds));
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        @CustomType.Setter
        public Builder throughputCapacity(Integer throughputCapacity) {
            this.throughputCapacity = Objects.requireNonNull(throughputCapacity);
            return this;
        }
        @CustomType.Setter
        public Builder vpcId(String vpcId) {
            this.vpcId = Objects.requireNonNull(vpcId);
            return this;
        }
        @CustomType.Setter
        public Builder weeklyMaintenanceStartTime(String weeklyMaintenanceStartTime) {
            this.weeklyMaintenanceStartTime = Objects.requireNonNull(weeklyMaintenanceStartTime);
            return this;
        }
        public GetOntapFileSystemResult build() {
            final var o = new GetOntapFileSystemResult();
            o.arn = arn;
            o.automaticBackupRetentionDays = automaticBackupRetentionDays;
            o.dailyAutomaticBackupStartTime = dailyAutomaticBackupStartTime;
            o.deploymentType = deploymentType;
            o.diskIopsConfigurations = diskIopsConfigurations;
            o.dnsName = dnsName;
            o.endpointIpAddressRange = endpointIpAddressRange;
            o.endpoints = endpoints;
            o.id = id;
            o.kmsKeyId = kmsKeyId;
            o.networkInterfaceIds = networkInterfaceIds;
            o.ownerId = ownerId;
            o.preferredSubnetId = preferredSubnetId;
            o.routeTableIds = routeTableIds;
            o.storageCapacity = storageCapacity;
            o.storageType = storageType;
            o.subnetIds = subnetIds;
            o.tags = tags;
            o.throughputCapacity = throughputCapacity;
            o.vpcId = vpcId;
            o.weeklyMaintenanceStartTime = weeklyMaintenanceStartTime;
            return o;
        }
    }
}
