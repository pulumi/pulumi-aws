// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.bedrock.inputs;

import com.pulumi.aws.bedrock.inputs.AgentcoreMemoryStrategyConfigurationArgs;
import com.pulumi.aws.bedrock.inputs.AgentcoreMemoryStrategyTimeoutsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AgentcoreMemoryStrategyState extends com.pulumi.resources.ResourceArgs {

    public static final AgentcoreMemoryStrategyState Empty = new AgentcoreMemoryStrategyState();

    /**
     * Custom configuration block. Required when `type` is `CUSTOM`, must be omitted for other types. See `configuration` below.
     * 
     */
    @Import(name="configuration")
    private @Nullable Output<AgentcoreMemoryStrategyConfigurationArgs> configuration;

    /**
     * @return Custom configuration block. Required when `type` is `CUSTOM`, must be omitted for other types. See `configuration` below.
     * 
     */
    public Optional<Output<AgentcoreMemoryStrategyConfigurationArgs>> configuration() {
        return Optional.ofNullable(this.configuration);
    }

    /**
     * Description of the memory strategy.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the memory strategy.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="memoryExecutionRoleArn")
    private @Nullable Output<String> memoryExecutionRoleArn;

    public Optional<Output<String>> memoryExecutionRoleArn() {
        return Optional.ofNullable(this.memoryExecutionRoleArn);
    }

    /**
     * ID of the memory to associate with this strategy. Changing this forces a new resource.
     * 
     */
    @Import(name="memoryId")
    private @Nullable Output<String> memoryId;

    /**
     * @return ID of the memory to associate with this strategy. Changing this forces a new resource.
     * 
     */
    public Optional<Output<String>> memoryId() {
        return Optional.ofNullable(this.memoryId);
    }

    @Import(name="memoryStrategyId")
    private @Nullable Output<String> memoryStrategyId;

    public Optional<Output<String>> memoryStrategyId() {
        return Optional.ofNullable(this.memoryStrategyId);
    }

    /**
     * Name of the memory strategy.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the memory strategy.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Set of namespace identifiers where this strategy applies. Namespaces help organize and scope memory content.
     * 
     * The following arguments are optional:
     * 
     */
    @Import(name="namespaces")
    private @Nullable Output<List<String>> namespaces;

    /**
     * @return Set of namespace identifiers where this strategy applies. Namespaces help organize and scope memory content.
     * 
     * The following arguments are optional:
     * 
     */
    public Optional<Output<List<String>>> namespaces() {
        return Optional.ofNullable(this.namespaces);
    }

    /**
     * Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    @Import(name="timeouts")
    private @Nullable Output<AgentcoreMemoryStrategyTimeoutsArgs> timeouts;

    public Optional<Output<AgentcoreMemoryStrategyTimeoutsArgs>> timeouts() {
        return Optional.ofNullable(this.timeouts);
    }

    /**
     * Type of memory strategy. Valid values: `SEMANTIC`, `SUMMARIZATION`, `USER_PREFERENCE`, `CUSTOM`. Changing this forces a new resource. Note that only one strategy of each built-in type (`SEMANTIC`, `SUMMARIZATION`, `USER_PREFERENCE`) can exist per memory.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Type of memory strategy. Valid values: `SEMANTIC`, `SUMMARIZATION`, `USER_PREFERENCE`, `CUSTOM`. Changing this forces a new resource. Note that only one strategy of each built-in type (`SEMANTIC`, `SUMMARIZATION`, `USER_PREFERENCE`) can exist per memory.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private AgentcoreMemoryStrategyState() {}

    private AgentcoreMemoryStrategyState(AgentcoreMemoryStrategyState $) {
        this.configuration = $.configuration;
        this.description = $.description;
        this.memoryExecutionRoleArn = $.memoryExecutionRoleArn;
        this.memoryId = $.memoryId;
        this.memoryStrategyId = $.memoryStrategyId;
        this.name = $.name;
        this.namespaces = $.namespaces;
        this.region = $.region;
        this.timeouts = $.timeouts;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AgentcoreMemoryStrategyState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AgentcoreMemoryStrategyState $;

        public Builder() {
            $ = new AgentcoreMemoryStrategyState();
        }

        public Builder(AgentcoreMemoryStrategyState defaults) {
            $ = new AgentcoreMemoryStrategyState(Objects.requireNonNull(defaults));
        }

        /**
         * @param configuration Custom configuration block. Required when `type` is `CUSTOM`, must be omitted for other types. See `configuration` below.
         * 
         * @return builder
         * 
         */
        public Builder configuration(@Nullable Output<AgentcoreMemoryStrategyConfigurationArgs> configuration) {
            $.configuration = configuration;
            return this;
        }

        /**
         * @param configuration Custom configuration block. Required when `type` is `CUSTOM`, must be omitted for other types. See `configuration` below.
         * 
         * @return builder
         * 
         */
        public Builder configuration(AgentcoreMemoryStrategyConfigurationArgs configuration) {
            return configuration(Output.of(configuration));
        }

        /**
         * @param description Description of the memory strategy.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the memory strategy.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder memoryExecutionRoleArn(@Nullable Output<String> memoryExecutionRoleArn) {
            $.memoryExecutionRoleArn = memoryExecutionRoleArn;
            return this;
        }

        public Builder memoryExecutionRoleArn(String memoryExecutionRoleArn) {
            return memoryExecutionRoleArn(Output.of(memoryExecutionRoleArn));
        }

        /**
         * @param memoryId ID of the memory to associate with this strategy. Changing this forces a new resource.
         * 
         * @return builder
         * 
         */
        public Builder memoryId(@Nullable Output<String> memoryId) {
            $.memoryId = memoryId;
            return this;
        }

        /**
         * @param memoryId ID of the memory to associate with this strategy. Changing this forces a new resource.
         * 
         * @return builder
         * 
         */
        public Builder memoryId(String memoryId) {
            return memoryId(Output.of(memoryId));
        }

        public Builder memoryStrategyId(@Nullable Output<String> memoryStrategyId) {
            $.memoryStrategyId = memoryStrategyId;
            return this;
        }

        public Builder memoryStrategyId(String memoryStrategyId) {
            return memoryStrategyId(Output.of(memoryStrategyId));
        }

        /**
         * @param name Name of the memory strategy.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the memory strategy.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param namespaces Set of namespace identifiers where this strategy applies. Namespaces help organize and scope memory content.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder namespaces(@Nullable Output<List<String>> namespaces) {
            $.namespaces = namespaces;
            return this;
        }

        /**
         * @param namespaces Set of namespace identifiers where this strategy applies. Namespaces help organize and scope memory content.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder namespaces(List<String> namespaces) {
            return namespaces(Output.of(namespaces));
        }

        /**
         * @param namespaces Set of namespace identifiers where this strategy applies. Namespaces help organize and scope memory content.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder namespaces(String... namespaces) {
            return namespaces(List.of(namespaces));
        }

        /**
         * @param region Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        public Builder timeouts(@Nullable Output<AgentcoreMemoryStrategyTimeoutsArgs> timeouts) {
            $.timeouts = timeouts;
            return this;
        }

        public Builder timeouts(AgentcoreMemoryStrategyTimeoutsArgs timeouts) {
            return timeouts(Output.of(timeouts));
        }

        /**
         * @param type Type of memory strategy. Valid values: `SEMANTIC`, `SUMMARIZATION`, `USER_PREFERENCE`, `CUSTOM`. Changing this forces a new resource. Note that only one strategy of each built-in type (`SEMANTIC`, `SUMMARIZATION`, `USER_PREFERENCE`) can exist per memory.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of memory strategy. Valid values: `SEMANTIC`, `SUMMARIZATION`, `USER_PREFERENCE`, `CUSTOM`. Changing this forces a new resource. Note that only one strategy of each built-in type (`SEMANTIC`, `SUMMARIZATION`, `USER_PREFERENCE`) can exist per memory.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public AgentcoreMemoryStrategyState build() {
            return $;
        }
    }

}
