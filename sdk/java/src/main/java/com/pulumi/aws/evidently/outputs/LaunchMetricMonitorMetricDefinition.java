// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.evidently.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class LaunchMetricMonitorMetricDefinition {
    /**
     * @return Specifies the entity, such as a user or session, that does an action that causes a metric value to be recorded. An example is `userDetails.userID`.
     * 
     */
    private String entityIdKey;
    /**
     * @return Specifies The EventBridge event pattern that defines how the metric is recorded.
     * 
     */
    private @Nullable String eventPattern;
    /**
     * @return Specifies the name for the metric.
     * 
     */
    private String name;
    /**
     * @return Specifies a label for the units that the metric is measuring.
     * 
     */
    private @Nullable String unitLabel;
    /**
     * @return Specifies the value that is tracked to produce the metric.
     * 
     */
    private String valueKey;

    private LaunchMetricMonitorMetricDefinition() {}
    /**
     * @return Specifies the entity, such as a user or session, that does an action that causes a metric value to be recorded. An example is `userDetails.userID`.
     * 
     */
    public String entityIdKey() {
        return this.entityIdKey;
    }
    /**
     * @return Specifies The EventBridge event pattern that defines how the metric is recorded.
     * 
     */
    public Optional<String> eventPattern() {
        return Optional.ofNullable(this.eventPattern);
    }
    /**
     * @return Specifies the name for the metric.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Specifies a label for the units that the metric is measuring.
     * 
     */
    public Optional<String> unitLabel() {
        return Optional.ofNullable(this.unitLabel);
    }
    /**
     * @return Specifies the value that is tracked to produce the metric.
     * 
     */
    public String valueKey() {
        return this.valueKey;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LaunchMetricMonitorMetricDefinition defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String entityIdKey;
        private @Nullable String eventPattern;
        private String name;
        private @Nullable String unitLabel;
        private String valueKey;
        public Builder() {}
        public Builder(LaunchMetricMonitorMetricDefinition defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.entityIdKey = defaults.entityIdKey;
    	      this.eventPattern = defaults.eventPattern;
    	      this.name = defaults.name;
    	      this.unitLabel = defaults.unitLabel;
    	      this.valueKey = defaults.valueKey;
        }

        @CustomType.Setter
        public Builder entityIdKey(String entityIdKey) {
            if (entityIdKey == null) {
              throw new MissingRequiredPropertyException("LaunchMetricMonitorMetricDefinition", "entityIdKey");
            }
            this.entityIdKey = entityIdKey;
            return this;
        }
        @CustomType.Setter
        public Builder eventPattern(@Nullable String eventPattern) {

            this.eventPattern = eventPattern;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("LaunchMetricMonitorMetricDefinition", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder unitLabel(@Nullable String unitLabel) {

            this.unitLabel = unitLabel;
            return this;
        }
        @CustomType.Setter
        public Builder valueKey(String valueKey) {
            if (valueKey == null) {
              throw new MissingRequiredPropertyException("LaunchMetricMonitorMetricDefinition", "valueKey");
            }
            this.valueKey = valueKey;
            return this;
        }
        public LaunchMetricMonitorMetricDefinition build() {
            final var _resultValue = new LaunchMetricMonitorMetricDefinition();
            _resultValue.entityIdKey = entityIdKey;
            _resultValue.eventPattern = eventPattern;
            _resultValue.name = name;
            _resultValue.unitLabel = unitLabel;
            _resultValue.valueKey = valueKey;
            return _resultValue;
        }
    }
}
