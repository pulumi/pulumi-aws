// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.notifications;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ContactsEmailContactArgs extends com.pulumi.resources.ResourceArgs {

    public static final ContactsEmailContactArgs Empty = new ContactsEmailContactArgs();

    /**
     * Email address for the contact. Must be between 6 and 254 characters and match an email
     * pattern.
     * 
     */
    @Import(name="emailAddress", required=true)
    private Output<String> emailAddress;

    /**
     * @return Email address for the contact. Must be between 6 and 254 characters and match an email
     * pattern.
     * 
     */
    public Output<String> emailAddress() {
        return this.emailAddress;
    }

    /**
     * Name of the email contact. Must be between 1 and 64 characters and can contain alphanumeric
     * characters, underscores, tildes, periods, and hyphens.
     * 
     * The following arguments are optional:
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the email contact. Must be between 1 and 64 characters and can contain alphanumeric
     * characters, underscores, tildes, periods, and hyphens.
     * 
     * The following arguments are optional:
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Map of tags to assign to the resource. If configured with a provider
     * `default_tags` configuration block
     * present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Map of tags to assign to the resource. If configured with a provider
     * `default_tags` configuration block
     * present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private ContactsEmailContactArgs() {}

    private ContactsEmailContactArgs(ContactsEmailContactArgs $) {
        this.emailAddress = $.emailAddress;
        this.name = $.name;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ContactsEmailContactArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ContactsEmailContactArgs $;

        public Builder() {
            $ = new ContactsEmailContactArgs();
        }

        public Builder(ContactsEmailContactArgs defaults) {
            $ = new ContactsEmailContactArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param emailAddress Email address for the contact. Must be between 6 and 254 characters and match an email
         * pattern.
         * 
         * @return builder
         * 
         */
        public Builder emailAddress(Output<String> emailAddress) {
            $.emailAddress = emailAddress;
            return this;
        }

        /**
         * @param emailAddress Email address for the contact. Must be between 6 and 254 characters and match an email
         * pattern.
         * 
         * @return builder
         * 
         */
        public Builder emailAddress(String emailAddress) {
            return emailAddress(Output.of(emailAddress));
        }

        /**
         * @param name Name of the email contact. Must be between 1 and 64 characters and can contain alphanumeric
         * characters, underscores, tildes, periods, and hyphens.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the email contact. Must be between 1 and 64 characters and can contain alphanumeric
         * characters, underscores, tildes, periods, and hyphens.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param tags Map of tags to assign to the resource. If configured with a provider
         * `default_tags` configuration block
         * present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Map of tags to assign to the resource. If configured with a provider
         * `default_tags` configuration block
         * present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public ContactsEmailContactArgs build() {
            if ($.emailAddress == null) {
                throw new MissingRequiredPropertyException("ContactsEmailContactArgs", "emailAddress");
            }
            return $;
        }
    }

}
