// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.customerprofiles.outputs;

import com.pulumi.aws.customerprofiles.outputs.DomainMatchingAutoMergingConflictResolution;
import com.pulumi.aws.customerprofiles.outputs.DomainMatchingAutoMergingConsolidation;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Double;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DomainMatchingAutoMerging {
    /**
     * @return A block that specifies how the auto-merging process should resolve conflicts between different profiles. Documented below.
     * 
     */
    private @Nullable DomainMatchingAutoMergingConflictResolution conflictResolution;
    /**
     * @return A block that specifies a list of matching attributes that represent matching criteria. If two profiles meet at least one of the requirements in the matching attributes list, they will be merged. Documented below.
     * * ` min_allowed_confidence_score_for_merging  ` - (Optional) A number between 0 and 1 that represents the minimum confidence score required for profiles within a matching group to be merged during the auto-merge process. A higher score means higher similarity required to merge profiles.
     * 
     */
    private @Nullable DomainMatchingAutoMergingConsolidation consolidation;
    /**
     * @return The flag that enables the auto-merging of duplicate profiles.
     * 
     */
    private Boolean enabled;
    private @Nullable Double minAllowedConfidenceScoreForMerging;

    private DomainMatchingAutoMerging() {}
    /**
     * @return A block that specifies how the auto-merging process should resolve conflicts between different profiles. Documented below.
     * 
     */
    public Optional<DomainMatchingAutoMergingConflictResolution> conflictResolution() {
        return Optional.ofNullable(this.conflictResolution);
    }
    /**
     * @return A block that specifies a list of matching attributes that represent matching criteria. If two profiles meet at least one of the requirements in the matching attributes list, they will be merged. Documented below.
     * * ` min_allowed_confidence_score_for_merging  ` - (Optional) A number between 0 and 1 that represents the minimum confidence score required for profiles within a matching group to be merged during the auto-merge process. A higher score means higher similarity required to merge profiles.
     * 
     */
    public Optional<DomainMatchingAutoMergingConsolidation> consolidation() {
        return Optional.ofNullable(this.consolidation);
    }
    /**
     * @return The flag that enables the auto-merging of duplicate profiles.
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }
    public Optional<Double> minAllowedConfidenceScoreForMerging() {
        return Optional.ofNullable(this.minAllowedConfidenceScoreForMerging);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DomainMatchingAutoMerging defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable DomainMatchingAutoMergingConflictResolution conflictResolution;
        private @Nullable DomainMatchingAutoMergingConsolidation consolidation;
        private Boolean enabled;
        private @Nullable Double minAllowedConfidenceScoreForMerging;
        public Builder() {}
        public Builder(DomainMatchingAutoMerging defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.conflictResolution = defaults.conflictResolution;
    	      this.consolidation = defaults.consolidation;
    	      this.enabled = defaults.enabled;
    	      this.minAllowedConfidenceScoreForMerging = defaults.minAllowedConfidenceScoreForMerging;
        }

        @CustomType.Setter
        public Builder conflictResolution(@Nullable DomainMatchingAutoMergingConflictResolution conflictResolution) {

            this.conflictResolution = conflictResolution;
            return this;
        }
        @CustomType.Setter
        public Builder consolidation(@Nullable DomainMatchingAutoMergingConsolidation consolidation) {

            this.consolidation = consolidation;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            if (enabled == null) {
              throw new MissingRequiredPropertyException("DomainMatchingAutoMerging", "enabled");
            }
            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder minAllowedConfidenceScoreForMerging(@Nullable Double minAllowedConfidenceScoreForMerging) {

            this.minAllowedConfidenceScoreForMerging = minAllowedConfidenceScoreForMerging;
            return this;
        }
        public DomainMatchingAutoMerging build() {
            final var _resultValue = new DomainMatchingAutoMerging();
            _resultValue.conflictResolution = conflictResolution;
            _resultValue.consolidation = consolidation;
            _resultValue.enabled = enabled;
            _resultValue.minAllowedConfidenceScoreForMerging = minAllowedConfidenceScoreForMerging;
            return _resultValue;
        }
    }
}
