// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ecr.inputs;

import com.pulumi.aws.ecr.enums.LifecyclePolicyCountType;
import com.pulumi.aws.ecr.enums.LifecyclePolicyTagStatus;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Represents selection criteria for an ECR lifecycle policy rule.
 * 
 */
public final class LifecyclePolicySelectionArgs extends com.pulumi.resources.ResourceArgs {

    public static final LifecyclePolicySelectionArgs Empty = new LifecyclePolicySelectionArgs();

    /**
     * The count number to use with the count type.
     * 
     */
    @Import(name="countNumber", required=true)
    private Output<Integer> countNumber;

    /**
     * @return The count number to use with the count type.
     * 
     */
    public Output<Integer> countNumber() {
        return this.countNumber;
    }

    /**
     * The type of count to perform. Either &#39;imageCountMoreThan&#39; or &#39;sinceImagePushed&#39;.
     * 
     */
    @Import(name="countType", required=true)
    private Output<LifecyclePolicyCountType> countType;

    /**
     * @return The type of count to perform. Either &#39;imageCountMoreThan&#39; or &#39;sinceImagePushed&#39;.
     * 
     */
    public Output<LifecyclePolicyCountType> countType() {
        return this.countType;
    }

    /**
     * The unit of time for sinceImagePushed. Either &#39;days&#39;.
     * 
     */
    @Import(name="countUnit")
    private @Nullable Output<String> countUnit;

    /**
     * @return The unit of time for sinceImagePushed. Either &#39;days&#39;.
     * 
     */
    public Optional<Output<String>> countUnit() {
        return Optional.ofNullable(this.countUnit);
    }

    /**
     * A list of image tag prefixes on which to take action.
     * 
     */
    @Import(name="tagPrefixList")
    private @Nullable Output<List<String>> tagPrefixList;

    /**
     * @return A list of image tag prefixes on which to take action.
     * 
     */
    public Optional<Output<List<String>>> tagPrefixList() {
        return Optional.ofNullable(this.tagPrefixList);
    }

    /**
     * The tag status of the image. Either &#39;tagged&#39;, &#39;untagged&#39;, or &#39;any&#39;.
     * 
     */
    @Import(name="tagStatus", required=true)
    private Output<LifecyclePolicyTagStatus> tagStatus;

    /**
     * @return The tag status of the image. Either &#39;tagged&#39;, &#39;untagged&#39;, or &#39;any&#39;.
     * 
     */
    public Output<LifecyclePolicyTagStatus> tagStatus() {
        return this.tagStatus;
    }

    private LifecyclePolicySelectionArgs() {}

    private LifecyclePolicySelectionArgs(LifecyclePolicySelectionArgs $) {
        this.countNumber = $.countNumber;
        this.countType = $.countType;
        this.countUnit = $.countUnit;
        this.tagPrefixList = $.tagPrefixList;
        this.tagStatus = $.tagStatus;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LifecyclePolicySelectionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LifecyclePolicySelectionArgs $;

        public Builder() {
            $ = new LifecyclePolicySelectionArgs();
        }

        public Builder(LifecyclePolicySelectionArgs defaults) {
            $ = new LifecyclePolicySelectionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param countNumber The count number to use with the count type.
         * 
         * @return builder
         * 
         */
        public Builder countNumber(Output<Integer> countNumber) {
            $.countNumber = countNumber;
            return this;
        }

        /**
         * @param countNumber The count number to use with the count type.
         * 
         * @return builder
         * 
         */
        public Builder countNumber(Integer countNumber) {
            return countNumber(Output.of(countNumber));
        }

        /**
         * @param countType The type of count to perform. Either &#39;imageCountMoreThan&#39; or &#39;sinceImagePushed&#39;.
         * 
         * @return builder
         * 
         */
        public Builder countType(Output<LifecyclePolicyCountType> countType) {
            $.countType = countType;
            return this;
        }

        /**
         * @param countType The type of count to perform. Either &#39;imageCountMoreThan&#39; or &#39;sinceImagePushed&#39;.
         * 
         * @return builder
         * 
         */
        public Builder countType(LifecyclePolicyCountType countType) {
            return countType(Output.of(countType));
        }

        /**
         * @param countUnit The unit of time for sinceImagePushed. Either &#39;days&#39;.
         * 
         * @return builder
         * 
         */
        public Builder countUnit(@Nullable Output<String> countUnit) {
            $.countUnit = countUnit;
            return this;
        }

        /**
         * @param countUnit The unit of time for sinceImagePushed. Either &#39;days&#39;.
         * 
         * @return builder
         * 
         */
        public Builder countUnit(String countUnit) {
            return countUnit(Output.of(countUnit));
        }

        /**
         * @param tagPrefixList A list of image tag prefixes on which to take action.
         * 
         * @return builder
         * 
         */
        public Builder tagPrefixList(@Nullable Output<List<String>> tagPrefixList) {
            $.tagPrefixList = tagPrefixList;
            return this;
        }

        /**
         * @param tagPrefixList A list of image tag prefixes on which to take action.
         * 
         * @return builder
         * 
         */
        public Builder tagPrefixList(List<String> tagPrefixList) {
            return tagPrefixList(Output.of(tagPrefixList));
        }

        /**
         * @param tagPrefixList A list of image tag prefixes on which to take action.
         * 
         * @return builder
         * 
         */
        public Builder tagPrefixList(String... tagPrefixList) {
            return tagPrefixList(List.of(tagPrefixList));
        }

        /**
         * @param tagStatus The tag status of the image. Either &#39;tagged&#39;, &#39;untagged&#39;, or &#39;any&#39;.
         * 
         * @return builder
         * 
         */
        public Builder tagStatus(Output<LifecyclePolicyTagStatus> tagStatus) {
            $.tagStatus = tagStatus;
            return this;
        }

        /**
         * @param tagStatus The tag status of the image. Either &#39;tagged&#39;, &#39;untagged&#39;, or &#39;any&#39;.
         * 
         * @return builder
         * 
         */
        public Builder tagStatus(LifecyclePolicyTagStatus tagStatus) {
            return tagStatus(Output.of(tagStatus));
        }

        public LifecyclePolicySelectionArgs build() {
            if ($.countNumber == null) {
                throw new MissingRequiredPropertyException("LifecyclePolicySelectionArgs", "countNumber");
            }
            if ($.countType == null) {
                throw new MissingRequiredPropertyException("LifecyclePolicySelectionArgs", "countType");
            }
            if ($.tagStatus == null) {
                throw new MissingRequiredPropertyException("LifecyclePolicySelectionArgs", "tagStatus");
            }
            return $;
        }
    }

}
