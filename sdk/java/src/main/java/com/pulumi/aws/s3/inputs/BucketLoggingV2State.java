// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.s3.inputs;

import com.pulumi.aws.s3.inputs.BucketLoggingV2TargetGrantArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BucketLoggingV2State extends com.pulumi.resources.ResourceArgs {

    public static final BucketLoggingV2State Empty = new BucketLoggingV2State();

    /**
     * Name of the bucket.
     * 
     */
    @Import(name="bucket")
    private @Nullable Output<String> bucket;

    /**
     * @return Name of the bucket.
     * 
     */
    public Optional<Output<String>> bucket() {
        return Optional.ofNullable(this.bucket);
    }

    /**
     * Account ID of the expected bucket owner.
     * 
     */
    @Import(name="expectedBucketOwner")
    private @Nullable Output<String> expectedBucketOwner;

    /**
     * @return Account ID of the expected bucket owner.
     * 
     */
    public Optional<Output<String>> expectedBucketOwner() {
        return Optional.ofNullable(this.expectedBucketOwner);
    }

    /**
     * Name of the bucket where you want Amazon S3 to store server access logs.
     * 
     */
    @Import(name="targetBucket")
    private @Nullable Output<String> targetBucket;

    /**
     * @return Name of the bucket where you want Amazon S3 to store server access logs.
     * 
     */
    public Optional<Output<String>> targetBucket() {
        return Optional.ofNullable(this.targetBucket);
    }

    /**
     * Set of configuration blocks with information for granting permissions. See below.
     * 
     */
    @Import(name="targetGrants")
    private @Nullable Output<List<BucketLoggingV2TargetGrantArgs>> targetGrants;

    /**
     * @return Set of configuration blocks with information for granting permissions. See below.
     * 
     */
    public Optional<Output<List<BucketLoggingV2TargetGrantArgs>>> targetGrants() {
        return Optional.ofNullable(this.targetGrants);
    }

    /**
     * Prefix for all log object keys.
     * 
     */
    @Import(name="targetPrefix")
    private @Nullable Output<String> targetPrefix;

    /**
     * @return Prefix for all log object keys.
     * 
     */
    public Optional<Output<String>> targetPrefix() {
        return Optional.ofNullable(this.targetPrefix);
    }

    private BucketLoggingV2State() {}

    private BucketLoggingV2State(BucketLoggingV2State $) {
        this.bucket = $.bucket;
        this.expectedBucketOwner = $.expectedBucketOwner;
        this.targetBucket = $.targetBucket;
        this.targetGrants = $.targetGrants;
        this.targetPrefix = $.targetPrefix;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BucketLoggingV2State defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BucketLoggingV2State $;

        public Builder() {
            $ = new BucketLoggingV2State();
        }

        public Builder(BucketLoggingV2State defaults) {
            $ = new BucketLoggingV2State(Objects.requireNonNull(defaults));
        }

        /**
         * @param bucket Name of the bucket.
         * 
         * @return builder
         * 
         */
        public Builder bucket(@Nullable Output<String> bucket) {
            $.bucket = bucket;
            return this;
        }

        /**
         * @param bucket Name of the bucket.
         * 
         * @return builder
         * 
         */
        public Builder bucket(String bucket) {
            return bucket(Output.of(bucket));
        }

        /**
         * @param expectedBucketOwner Account ID of the expected bucket owner.
         * 
         * @return builder
         * 
         */
        public Builder expectedBucketOwner(@Nullable Output<String> expectedBucketOwner) {
            $.expectedBucketOwner = expectedBucketOwner;
            return this;
        }

        /**
         * @param expectedBucketOwner Account ID of the expected bucket owner.
         * 
         * @return builder
         * 
         */
        public Builder expectedBucketOwner(String expectedBucketOwner) {
            return expectedBucketOwner(Output.of(expectedBucketOwner));
        }

        /**
         * @param targetBucket Name of the bucket where you want Amazon S3 to store server access logs.
         * 
         * @return builder
         * 
         */
        public Builder targetBucket(@Nullable Output<String> targetBucket) {
            $.targetBucket = targetBucket;
            return this;
        }

        /**
         * @param targetBucket Name of the bucket where you want Amazon S3 to store server access logs.
         * 
         * @return builder
         * 
         */
        public Builder targetBucket(String targetBucket) {
            return targetBucket(Output.of(targetBucket));
        }

        /**
         * @param targetGrants Set of configuration blocks with information for granting permissions. See below.
         * 
         * @return builder
         * 
         */
        public Builder targetGrants(@Nullable Output<List<BucketLoggingV2TargetGrantArgs>> targetGrants) {
            $.targetGrants = targetGrants;
            return this;
        }

        /**
         * @param targetGrants Set of configuration blocks with information for granting permissions. See below.
         * 
         * @return builder
         * 
         */
        public Builder targetGrants(List<BucketLoggingV2TargetGrantArgs> targetGrants) {
            return targetGrants(Output.of(targetGrants));
        }

        /**
         * @param targetGrants Set of configuration blocks with information for granting permissions. See below.
         * 
         * @return builder
         * 
         */
        public Builder targetGrants(BucketLoggingV2TargetGrantArgs... targetGrants) {
            return targetGrants(List.of(targetGrants));
        }

        /**
         * @param targetPrefix Prefix for all log object keys.
         * 
         * @return builder
         * 
         */
        public Builder targetPrefix(@Nullable Output<String> targetPrefix) {
            $.targetPrefix = targetPrefix;
            return this;
        }

        /**
         * @param targetPrefix Prefix for all log object keys.
         * 
         * @return builder
         * 
         */
        public Builder targetPrefix(String targetPrefix) {
            return targetPrefix(Output.of(targetPrefix));
        }

        public BucketLoggingV2State build() {
            return $;
        }
    }

}
