// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.codedeploy.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ApplicationState extends com.pulumi.resources.ResourceArgs {

    public static final ApplicationState Empty = new ApplicationState();

    @Import(name="applicationId")
    private @Nullable Output<String> applicationId;

    public Optional<Output<String>> applicationId() {
        return Optional.ofNullable(this.applicationId);
    }

    @Import(name="arn")
    private @Nullable Output<String> arn;

    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    @Import(name="computePlatform")
    private @Nullable Output<String> computePlatform;

    public Optional<Output<String>> computePlatform() {
        return Optional.ofNullable(this.computePlatform);
    }

    @Import(name="githubAccountName")
    private @Nullable Output<String> githubAccountName;

    public Optional<Output<String>> githubAccountName() {
        return Optional.ofNullable(this.githubAccountName);
    }

    @Import(name="linkedToGithub")
    private @Nullable Output<Boolean> linkedToGithub;

    public Optional<Output<Boolean>> linkedToGithub() {
        return Optional.ofNullable(this.linkedToGithub);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    private ApplicationState() {}

    private ApplicationState(ApplicationState $) {
        this.applicationId = $.applicationId;
        this.arn = $.arn;
        this.computePlatform = $.computePlatform;
        this.githubAccountName = $.githubAccountName;
        this.linkedToGithub = $.linkedToGithub;
        this.name = $.name;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApplicationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApplicationState $;

        public Builder() {
            $ = new ApplicationState();
        }

        public Builder(ApplicationState defaults) {
            $ = new ApplicationState(Objects.requireNonNull(defaults));
        }

        public Builder applicationId(@Nullable Output<String> applicationId) {
            $.applicationId = applicationId;
            return this;
        }

        public Builder applicationId(String applicationId) {
            return applicationId(Output.of(applicationId));
        }

        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        public Builder computePlatform(@Nullable Output<String> computePlatform) {
            $.computePlatform = computePlatform;
            return this;
        }

        public Builder computePlatform(String computePlatform) {
            return computePlatform(Output.of(computePlatform));
        }

        public Builder githubAccountName(@Nullable Output<String> githubAccountName) {
            $.githubAccountName = githubAccountName;
            return this;
        }

        public Builder githubAccountName(String githubAccountName) {
            return githubAccountName(Output.of(githubAccountName));
        }

        public Builder linkedToGithub(@Nullable Output<Boolean> linkedToGithub) {
            $.linkedToGithub = linkedToGithub;
            return this;
        }

        public Builder linkedToGithub(Boolean linkedToGithub) {
            return linkedToGithub(Output.of(linkedToGithub));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        public ApplicationState build() {
            return $;
        }
    }

}
