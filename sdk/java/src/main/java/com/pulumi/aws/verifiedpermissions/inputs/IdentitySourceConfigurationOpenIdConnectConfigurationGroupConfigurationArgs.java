// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.verifiedpermissions.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class IdentitySourceConfigurationOpenIdConnectConfigurationGroupConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final IdentitySourceConfigurationOpenIdConnectConfigurationGroupConfigurationArgs Empty = new IdentitySourceConfigurationOpenIdConnectConfigurationGroupConfigurationArgs();

    /**
     * The token claim that you want Verified Permissions to interpret as group membership. For example, `groups`.
     * 
     */
    @Import(name="groupClaim", required=true)
    private Output<String> groupClaim;

    /**
     * @return The token claim that you want Verified Permissions to interpret as group membership. For example, `groups`.
     * 
     */
    public Output<String> groupClaim() {
        return this.groupClaim;
    }

    /**
     * The name of the schema entity type that&#39;s mapped to the user pool group. Defaults to `AWS::CognitoGroup`.
     * 
     */
    @Import(name="groupEntityType", required=true)
    private Output<String> groupEntityType;

    /**
     * @return The name of the schema entity type that&#39;s mapped to the user pool group. Defaults to `AWS::CognitoGroup`.
     * 
     */
    public Output<String> groupEntityType() {
        return this.groupEntityType;
    }

    private IdentitySourceConfigurationOpenIdConnectConfigurationGroupConfigurationArgs() {}

    private IdentitySourceConfigurationOpenIdConnectConfigurationGroupConfigurationArgs(IdentitySourceConfigurationOpenIdConnectConfigurationGroupConfigurationArgs $) {
        this.groupClaim = $.groupClaim;
        this.groupEntityType = $.groupEntityType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IdentitySourceConfigurationOpenIdConnectConfigurationGroupConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IdentitySourceConfigurationOpenIdConnectConfigurationGroupConfigurationArgs $;

        public Builder() {
            $ = new IdentitySourceConfigurationOpenIdConnectConfigurationGroupConfigurationArgs();
        }

        public Builder(IdentitySourceConfigurationOpenIdConnectConfigurationGroupConfigurationArgs defaults) {
            $ = new IdentitySourceConfigurationOpenIdConnectConfigurationGroupConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param groupClaim The token claim that you want Verified Permissions to interpret as group membership. For example, `groups`.
         * 
         * @return builder
         * 
         */
        public Builder groupClaim(Output<String> groupClaim) {
            $.groupClaim = groupClaim;
            return this;
        }

        /**
         * @param groupClaim The token claim that you want Verified Permissions to interpret as group membership. For example, `groups`.
         * 
         * @return builder
         * 
         */
        public Builder groupClaim(String groupClaim) {
            return groupClaim(Output.of(groupClaim));
        }

        /**
         * @param groupEntityType The name of the schema entity type that&#39;s mapped to the user pool group. Defaults to `AWS::CognitoGroup`.
         * 
         * @return builder
         * 
         */
        public Builder groupEntityType(Output<String> groupEntityType) {
            $.groupEntityType = groupEntityType;
            return this;
        }

        /**
         * @param groupEntityType The name of the schema entity type that&#39;s mapped to the user pool group. Defaults to `AWS::CognitoGroup`.
         * 
         * @return builder
         * 
         */
        public Builder groupEntityType(String groupEntityType) {
            return groupEntityType(Output.of(groupEntityType));
        }

        public IdentitySourceConfigurationOpenIdConnectConfigurationGroupConfigurationArgs build() {
            if ($.groupClaim == null) {
                throw new MissingRequiredPropertyException("IdentitySourceConfigurationOpenIdConnectConfigurationGroupConfigurationArgs", "groupClaim");
            }
            if ($.groupEntityType == null) {
                throw new MissingRequiredPropertyException("IdentitySourceConfigurationOpenIdConnectConfigurationGroupConfigurationArgs", "groupEntityType");
            }
            return $;
        }
    }

}
