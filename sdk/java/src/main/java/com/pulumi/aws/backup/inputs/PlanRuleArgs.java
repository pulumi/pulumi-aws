// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.backup.inputs;

import com.pulumi.aws.backup.inputs.PlanRuleCopyActionArgs;
import com.pulumi.aws.backup.inputs.PlanRuleLifecycleArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PlanRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final PlanRuleArgs Empty = new PlanRuleArgs();

    @Import(name="completionWindow")
    private @Nullable Output<Integer> completionWindow;

    public Optional<Output<Integer>> completionWindow() {
        return Optional.ofNullable(this.completionWindow);
    }

    @Import(name="copyActions")
    private @Nullable Output<List<PlanRuleCopyActionArgs>> copyActions;

    public Optional<Output<List<PlanRuleCopyActionArgs>>> copyActions() {
        return Optional.ofNullable(this.copyActions);
    }

    @Import(name="enableContinuousBackup")
    private @Nullable Output<Boolean> enableContinuousBackup;

    public Optional<Output<Boolean>> enableContinuousBackup() {
        return Optional.ofNullable(this.enableContinuousBackup);
    }

    @Import(name="lifecycle")
    private @Nullable Output<PlanRuleLifecycleArgs> lifecycle;

    public Optional<Output<PlanRuleLifecycleArgs>> lifecycle() {
        return Optional.ofNullable(this.lifecycle);
    }

    @Import(name="recoveryPointTags")
    private @Nullable Output<Map<String,String>> recoveryPointTags;

    public Optional<Output<Map<String,String>>> recoveryPointTags() {
        return Optional.ofNullable(this.recoveryPointTags);
    }

    @Import(name="ruleName", required=true)
    private Output<String> ruleName;

    public Output<String> ruleName() {
        return this.ruleName;
    }

    @Import(name="schedule")
    private @Nullable Output<String> schedule;

    public Optional<Output<String>> schedule() {
        return Optional.ofNullable(this.schedule);
    }

    @Import(name="startWindow")
    private @Nullable Output<Integer> startWindow;

    public Optional<Output<Integer>> startWindow() {
        return Optional.ofNullable(this.startWindow);
    }

    @Import(name="targetVaultName", required=true)
    private Output<String> targetVaultName;

    public Output<String> targetVaultName() {
        return this.targetVaultName;
    }

    private PlanRuleArgs() {}

    private PlanRuleArgs(PlanRuleArgs $) {
        this.completionWindow = $.completionWindow;
        this.copyActions = $.copyActions;
        this.enableContinuousBackup = $.enableContinuousBackup;
        this.lifecycle = $.lifecycle;
        this.recoveryPointTags = $.recoveryPointTags;
        this.ruleName = $.ruleName;
        this.schedule = $.schedule;
        this.startWindow = $.startWindow;
        this.targetVaultName = $.targetVaultName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PlanRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PlanRuleArgs $;

        public Builder() {
            $ = new PlanRuleArgs();
        }

        public Builder(PlanRuleArgs defaults) {
            $ = new PlanRuleArgs(Objects.requireNonNull(defaults));
        }

        public Builder completionWindow(@Nullable Output<Integer> completionWindow) {
            $.completionWindow = completionWindow;
            return this;
        }

        public Builder completionWindow(Integer completionWindow) {
            return completionWindow(Output.of(completionWindow));
        }

        public Builder copyActions(@Nullable Output<List<PlanRuleCopyActionArgs>> copyActions) {
            $.copyActions = copyActions;
            return this;
        }

        public Builder copyActions(List<PlanRuleCopyActionArgs> copyActions) {
            return copyActions(Output.of(copyActions));
        }

        public Builder copyActions(PlanRuleCopyActionArgs... copyActions) {
            return copyActions(List.of(copyActions));
        }

        public Builder enableContinuousBackup(@Nullable Output<Boolean> enableContinuousBackup) {
            $.enableContinuousBackup = enableContinuousBackup;
            return this;
        }

        public Builder enableContinuousBackup(Boolean enableContinuousBackup) {
            return enableContinuousBackup(Output.of(enableContinuousBackup));
        }

        public Builder lifecycle(@Nullable Output<PlanRuleLifecycleArgs> lifecycle) {
            $.lifecycle = lifecycle;
            return this;
        }

        public Builder lifecycle(PlanRuleLifecycleArgs lifecycle) {
            return lifecycle(Output.of(lifecycle));
        }

        public Builder recoveryPointTags(@Nullable Output<Map<String,String>> recoveryPointTags) {
            $.recoveryPointTags = recoveryPointTags;
            return this;
        }

        public Builder recoveryPointTags(Map<String,String> recoveryPointTags) {
            return recoveryPointTags(Output.of(recoveryPointTags));
        }

        public Builder ruleName(Output<String> ruleName) {
            $.ruleName = ruleName;
            return this;
        }

        public Builder ruleName(String ruleName) {
            return ruleName(Output.of(ruleName));
        }

        public Builder schedule(@Nullable Output<String> schedule) {
            $.schedule = schedule;
            return this;
        }

        public Builder schedule(String schedule) {
            return schedule(Output.of(schedule));
        }

        public Builder startWindow(@Nullable Output<Integer> startWindow) {
            $.startWindow = startWindow;
            return this;
        }

        public Builder startWindow(Integer startWindow) {
            return startWindow(Output.of(startWindow));
        }

        public Builder targetVaultName(Output<String> targetVaultName) {
            $.targetVaultName = targetVaultName;
            return this;
        }

        public Builder targetVaultName(String targetVaultName) {
            return targetVaultName(Output.of(targetVaultName));
        }

        public PlanRuleArgs build() {
            $.ruleName = Objects.requireNonNull($.ruleName, "expected parameter 'ruleName' to be non-null");
            $.targetVaultName = Objects.requireNonNull($.targetVaultName, "expected parameter 'targetVaultName' to be non-null");
            return $;
        }
    }

}
