// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.outputs;

import com.pulumi.aws.quicksight.outputs.DataSetPhysicalTableMapCustomSql;
import com.pulumi.aws.quicksight.outputs.DataSetPhysicalTableMapRelationalTable;
import com.pulumi.aws.quicksight.outputs.DataSetPhysicalTableMapS3Source;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DataSetPhysicalTableMap {
    /**
     * @return A physical table type built from the results of the custom SQL query. See custom_sql.
     * 
     */
    private @Nullable DataSetPhysicalTableMapCustomSql customSql;
    /**
     * @return Key of the physical table map.
     * 
     */
    private String physicalTableMapId;
    /**
     * @return A physical table type for relational data sources. See relational_table.
     * 
     */
    private @Nullable DataSetPhysicalTableMapRelationalTable relationalTable;
    /**
     * @return A physical table type for as S3 data source. See s3_source.
     * 
     */
    private @Nullable DataSetPhysicalTableMapS3Source s3Source;

    private DataSetPhysicalTableMap() {}
    /**
     * @return A physical table type built from the results of the custom SQL query. See custom_sql.
     * 
     */
    public Optional<DataSetPhysicalTableMapCustomSql> customSql() {
        return Optional.ofNullable(this.customSql);
    }
    /**
     * @return Key of the physical table map.
     * 
     */
    public String physicalTableMapId() {
        return this.physicalTableMapId;
    }
    /**
     * @return A physical table type for relational data sources. See relational_table.
     * 
     */
    public Optional<DataSetPhysicalTableMapRelationalTable> relationalTable() {
        return Optional.ofNullable(this.relationalTable);
    }
    /**
     * @return A physical table type for as S3 data source. See s3_source.
     * 
     */
    public Optional<DataSetPhysicalTableMapS3Source> s3Source() {
        return Optional.ofNullable(this.s3Source);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DataSetPhysicalTableMap defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable DataSetPhysicalTableMapCustomSql customSql;
        private String physicalTableMapId;
        private @Nullable DataSetPhysicalTableMapRelationalTable relationalTable;
        private @Nullable DataSetPhysicalTableMapS3Source s3Source;
        public Builder() {}
        public Builder(DataSetPhysicalTableMap defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.customSql = defaults.customSql;
    	      this.physicalTableMapId = defaults.physicalTableMapId;
    	      this.relationalTable = defaults.relationalTable;
    	      this.s3Source = defaults.s3Source;
        }

        @CustomType.Setter
        public Builder customSql(@Nullable DataSetPhysicalTableMapCustomSql customSql) {
            this.customSql = customSql;
            return this;
        }
        @CustomType.Setter
        public Builder physicalTableMapId(String physicalTableMapId) {
            this.physicalTableMapId = Objects.requireNonNull(physicalTableMapId);
            return this;
        }
        @CustomType.Setter
        public Builder relationalTable(@Nullable DataSetPhysicalTableMapRelationalTable relationalTable) {
            this.relationalTable = relationalTable;
            return this;
        }
        @CustomType.Setter
        public Builder s3Source(@Nullable DataSetPhysicalTableMapS3Source s3Source) {
            this.s3Source = s3Source;
            return this;
        }
        public DataSetPhysicalTableMap build() {
            final var _resultValue = new DataSetPhysicalTableMap();
            _resultValue.customSql = customSql;
            _resultValue.physicalTableMapId = physicalTableMapId;
            _resultValue.relationalTable = relationalTable;
            _resultValue.s3Source = s3Source;
            return _resultValue;
        }
    }
}
