// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.lb.inputs;

import com.pulumi.aws.lb.inputs.ListenerRuleActionArgs;
import com.pulumi.aws.lb.inputs.ListenerRuleConditionArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ListenerRuleState extends com.pulumi.resources.ResourceArgs {

    public static final ListenerRuleState Empty = new ListenerRuleState();

    @Import(name="actions")
    private @Nullable Output<List<ListenerRuleActionArgs>> actions;

    public Optional<Output<List<ListenerRuleActionArgs>>> actions() {
        return Optional.ofNullable(this.actions);
    }

    @Import(name="arn")
    private @Nullable Output<String> arn;

    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    @Import(name="conditions")
    private @Nullable Output<List<ListenerRuleConditionArgs>> conditions;

    public Optional<Output<List<ListenerRuleConditionArgs>>> conditions() {
        return Optional.ofNullable(this.conditions);
    }

    @Import(name="listenerArn")
    private @Nullable Output<String> listenerArn;

    public Optional<Output<String>> listenerArn() {
        return Optional.ofNullable(this.listenerArn);
    }

    @Import(name="priority")
    private @Nullable Output<Integer> priority;

    public Optional<Output<Integer>> priority() {
        return Optional.ofNullable(this.priority);
    }

    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    private ListenerRuleState() {}

    private ListenerRuleState(ListenerRuleState $) {
        this.actions = $.actions;
        this.arn = $.arn;
        this.conditions = $.conditions;
        this.listenerArn = $.listenerArn;
        this.priority = $.priority;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ListenerRuleState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ListenerRuleState $;

        public Builder() {
            $ = new ListenerRuleState();
        }

        public Builder(ListenerRuleState defaults) {
            $ = new ListenerRuleState(Objects.requireNonNull(defaults));
        }

        public Builder actions(@Nullable Output<List<ListenerRuleActionArgs>> actions) {
            $.actions = actions;
            return this;
        }

        public Builder actions(List<ListenerRuleActionArgs> actions) {
            return actions(Output.of(actions));
        }

        public Builder actions(ListenerRuleActionArgs... actions) {
            return actions(List.of(actions));
        }

        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        public Builder conditions(@Nullable Output<List<ListenerRuleConditionArgs>> conditions) {
            $.conditions = conditions;
            return this;
        }

        public Builder conditions(List<ListenerRuleConditionArgs> conditions) {
            return conditions(Output.of(conditions));
        }

        public Builder conditions(ListenerRuleConditionArgs... conditions) {
            return conditions(List.of(conditions));
        }

        public Builder listenerArn(@Nullable Output<String> listenerArn) {
            $.listenerArn = listenerArn;
            return this;
        }

        public Builder listenerArn(String listenerArn) {
            return listenerArn(Output.of(listenerArn));
        }

        public Builder priority(@Nullable Output<Integer> priority) {
            $.priority = priority;
            return this;
        }

        public Builder priority(Integer priority) {
            return priority(Output.of(priority));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        public ListenerRuleState build() {
            return $;
        }
    }

}
