// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ses.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DomainDkimState extends com.pulumi.resources.ResourceArgs {

    public static final DomainDkimState Empty = new DomainDkimState();

    @Import(name="dkimTokens")
    private @Nullable Output<List<String>> dkimTokens;

    public Optional<Output<List<String>>> dkimTokens() {
        return Optional.ofNullable(this.dkimTokens);
    }

    @Import(name="domain")
    private @Nullable Output<String> domain;

    public Optional<Output<String>> domain() {
        return Optional.ofNullable(this.domain);
    }

    private DomainDkimState() {}

    private DomainDkimState(DomainDkimState $) {
        this.dkimTokens = $.dkimTokens;
        this.domain = $.domain;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DomainDkimState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DomainDkimState $;

        public Builder() {
            $ = new DomainDkimState();
        }

        public Builder(DomainDkimState defaults) {
            $ = new DomainDkimState(Objects.requireNonNull(defaults));
        }

        public Builder dkimTokens(@Nullable Output<List<String>> dkimTokens) {
            $.dkimTokens = dkimTokens;
            return this;
        }

        public Builder dkimTokens(List<String> dkimTokens) {
            return dkimTokens(Output.of(dkimTokens));
        }

        public Builder dkimTokens(String... dkimTokens) {
            return dkimTokens(List.of(dkimTokens));
        }

        public Builder domain(@Nullable Output<String> domain) {
            $.domain = domain;
            return this;
        }

        public Builder domain(String domain) {
            return domain(Output.of(domain));
        }

        public DomainDkimState build() {
            return $;
        }
    }

}
