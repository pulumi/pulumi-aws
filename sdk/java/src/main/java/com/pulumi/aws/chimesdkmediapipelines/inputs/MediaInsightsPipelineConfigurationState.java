// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.chimesdkmediapipelines.inputs;

import com.pulumi.aws.chimesdkmediapipelines.inputs.MediaInsightsPipelineConfigurationElementArgs;
import com.pulumi.aws.chimesdkmediapipelines.inputs.MediaInsightsPipelineConfigurationRealTimeAlertConfigurationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MediaInsightsPipelineConfigurationState extends com.pulumi.resources.ResourceArgs {

    public static final MediaInsightsPipelineConfigurationState Empty = new MediaInsightsPipelineConfigurationState();

    /**
     * ARN of the Media Insights Pipeline Configuration.
     * 
     */
    @Import(name="arn")
    private @Nullable Output<String> arn;

    /**
     * @return ARN of the Media Insights Pipeline Configuration.
     * 
     */
    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    /**
     * Collection of processors and sinks to transform media and deliver data.
     * 
     */
    @Import(name="elements")
    private @Nullable Output<List<MediaInsightsPipelineConfigurationElementArgs>> elements;

    /**
     * @return Collection of processors and sinks to transform media and deliver data.
     * 
     */
    public Optional<Output<List<MediaInsightsPipelineConfigurationElementArgs>>> elements() {
        return Optional.ofNullable(this.elements);
    }

    /**
     * Configuration name.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Configuration name.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Configuration for real-time alert rules to send EventBridge notifications when certain conditions are met.
     * 
     */
    @Import(name="realTimeAlertConfiguration")
    private @Nullable Output<MediaInsightsPipelineConfigurationRealTimeAlertConfigurationArgs> realTimeAlertConfiguration;

    /**
     * @return Configuration for real-time alert rules to send EventBridge notifications when certain conditions are met.
     * 
     */
    public Optional<Output<MediaInsightsPipelineConfigurationRealTimeAlertConfigurationArgs>> realTimeAlertConfiguration() {
        return Optional.ofNullable(this.realTimeAlertConfiguration);
    }

    /**
     * ARN of IAM Role used by service to invoke processors and sinks specified by configuration elements.
     * 
     */
    @Import(name="resourceAccessRoleArn")
    private @Nullable Output<String> resourceAccessRoleArn;

    /**
     * @return ARN of IAM Role used by service to invoke processors and sinks specified by configuration elements.
     * 
     */
    public Optional<Output<String>> resourceAccessRoleArn() {
        return Optional.ofNullable(this.resourceAccessRoleArn);
    }

    /**
     * Key-value map of tags for the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Key-value map of tags for the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    /**
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    private MediaInsightsPipelineConfigurationState() {}

    private MediaInsightsPipelineConfigurationState(MediaInsightsPipelineConfigurationState $) {
        this.arn = $.arn;
        this.elements = $.elements;
        this.name = $.name;
        this.realTimeAlertConfiguration = $.realTimeAlertConfiguration;
        this.resourceAccessRoleArn = $.resourceAccessRoleArn;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MediaInsightsPipelineConfigurationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MediaInsightsPipelineConfigurationState $;

        public Builder() {
            $ = new MediaInsightsPipelineConfigurationState();
        }

        public Builder(MediaInsightsPipelineConfigurationState defaults) {
            $ = new MediaInsightsPipelineConfigurationState(Objects.requireNonNull(defaults));
        }

        /**
         * @param arn ARN of the Media Insights Pipeline Configuration.
         * 
         * @return builder
         * 
         */
        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        /**
         * @param arn ARN of the Media Insights Pipeline Configuration.
         * 
         * @return builder
         * 
         */
        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        /**
         * @param elements Collection of processors and sinks to transform media and deliver data.
         * 
         * @return builder
         * 
         */
        public Builder elements(@Nullable Output<List<MediaInsightsPipelineConfigurationElementArgs>> elements) {
            $.elements = elements;
            return this;
        }

        /**
         * @param elements Collection of processors and sinks to transform media and deliver data.
         * 
         * @return builder
         * 
         */
        public Builder elements(List<MediaInsightsPipelineConfigurationElementArgs> elements) {
            return elements(Output.of(elements));
        }

        /**
         * @param elements Collection of processors and sinks to transform media and deliver data.
         * 
         * @return builder
         * 
         */
        public Builder elements(MediaInsightsPipelineConfigurationElementArgs... elements) {
            return elements(List.of(elements));
        }

        /**
         * @param name Configuration name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Configuration name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param realTimeAlertConfiguration Configuration for real-time alert rules to send EventBridge notifications when certain conditions are met.
         * 
         * @return builder
         * 
         */
        public Builder realTimeAlertConfiguration(@Nullable Output<MediaInsightsPipelineConfigurationRealTimeAlertConfigurationArgs> realTimeAlertConfiguration) {
            $.realTimeAlertConfiguration = realTimeAlertConfiguration;
            return this;
        }

        /**
         * @param realTimeAlertConfiguration Configuration for real-time alert rules to send EventBridge notifications when certain conditions are met.
         * 
         * @return builder
         * 
         */
        public Builder realTimeAlertConfiguration(MediaInsightsPipelineConfigurationRealTimeAlertConfigurationArgs realTimeAlertConfiguration) {
            return realTimeAlertConfiguration(Output.of(realTimeAlertConfiguration));
        }

        /**
         * @param resourceAccessRoleArn ARN of IAM Role used by service to invoke processors and sinks specified by configuration elements.
         * 
         * @return builder
         * 
         */
        public Builder resourceAccessRoleArn(@Nullable Output<String> resourceAccessRoleArn) {
            $.resourceAccessRoleArn = resourceAccessRoleArn;
            return this;
        }

        /**
         * @param resourceAccessRoleArn ARN of IAM Role used by service to invoke processors and sinks specified by configuration elements.
         * 
         * @return builder
         * 
         */
        public Builder resourceAccessRoleArn(String resourceAccessRoleArn) {
            return resourceAccessRoleArn(Output.of(resourceAccessRoleArn));
        }

        /**
         * @param tags Key-value map of tags for the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Key-value map of tags for the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * Please use `tags` instead.
         * 
         */
        @Deprecated /* Please use `tags` instead. */
        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * Please use `tags` instead.
         * 
         */
        @Deprecated /* Please use `tags` instead. */
        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        public MediaInsightsPipelineConfigurationState build() {
            return $;
        }
    }

}
