// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.dynamodb.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class TableWarmThroughput {
    /**
     * @return Number of read operations a table or index can instantaneously support. For the base table, decreasing this value will force a new resource. For a global secondary index, this value can be increased or decreased without recreation. Minimum value of `12000` (default).
     * 
     */
    private @Nullable Integer readUnitsPerSecond;
    /**
     * @return Number of write operations a table or index can instantaneously support. For the base table, decreasing this value will force a new resource. For a global secondary index, this value can be increased or decreased without recreation. Minimum value of `4000` (default).
     * 
     */
    private @Nullable Integer writeUnitsPerSecond;

    private TableWarmThroughput() {}
    /**
     * @return Number of read operations a table or index can instantaneously support. For the base table, decreasing this value will force a new resource. For a global secondary index, this value can be increased or decreased without recreation. Minimum value of `12000` (default).
     * 
     */
    public Optional<Integer> readUnitsPerSecond() {
        return Optional.ofNullable(this.readUnitsPerSecond);
    }
    /**
     * @return Number of write operations a table or index can instantaneously support. For the base table, decreasing this value will force a new resource. For a global secondary index, this value can be increased or decreased without recreation. Minimum value of `4000` (default).
     * 
     */
    public Optional<Integer> writeUnitsPerSecond() {
        return Optional.ofNullable(this.writeUnitsPerSecond);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TableWarmThroughput defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer readUnitsPerSecond;
        private @Nullable Integer writeUnitsPerSecond;
        public Builder() {}
        public Builder(TableWarmThroughput defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.readUnitsPerSecond = defaults.readUnitsPerSecond;
    	      this.writeUnitsPerSecond = defaults.writeUnitsPerSecond;
        }

        @CustomType.Setter
        public Builder readUnitsPerSecond(@Nullable Integer readUnitsPerSecond) {

            this.readUnitsPerSecond = readUnitsPerSecond;
            return this;
        }
        @CustomType.Setter
        public Builder writeUnitsPerSecond(@Nullable Integer writeUnitsPerSecond) {

            this.writeUnitsPerSecond = writeUnitsPerSecond;
            return this;
        }
        public TableWarmThroughput build() {
            final var _resultValue = new TableWarmThroughput();
            _resultValue.readUnitsPerSecond = readUnitsPerSecond;
            _resultValue.writeUnitsPerSecond = writeUnitsPerSecond;
            return _resultValue;
        }
    }
}
