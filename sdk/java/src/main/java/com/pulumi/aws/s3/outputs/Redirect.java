// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.s3.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class Redirect {
    /**
     * @return The hostname to be used in the Location header that is returned in the response. If another property is set, `HostName` is not required.
     * 
     */
    private @Nullable String HostName;
    /**
     * @return The HTTP redirect code to be used in the Location header that is returned in the response. If another property is set, `HttpRedirectCode` is not required.
     * 
     */
    private @Nullable String HttpRedirectCode;
    /**
     * @return The protocol, http or https, to be used in the Location header that is returned in the response. If another property is set, `Protocol` is not required.
     * 
     */
    private @Nullable String Protocol;
    /**
     * @return The prefix of the object key name that replaces the value of `KeyPrefixEquals` in the redirect request. If another property is set, `ReplaceKeyPrefixWith` is not required. It can be set only if `ReplaceKeyWith` is not set.
     * 
     */
    private @Nullable String ReplaceKeyPrefixWith;
    /**
     * @return The object key to be used in the Location header that is returned in the response. If another property is set, `ReplaceKeyWith` is not required. It can be set only if `ReplaceKeyPrefixWith` is not set.
     * 
     */
    private @Nullable String ReplaceKeyWith;

    private Redirect() {}
    /**
     * @return The hostname to be used in the Location header that is returned in the response. If another property is set, `HostName` is not required.
     * 
     */
    public Optional<String> HostName() {
        return Optional.ofNullable(this.HostName);
    }
    /**
     * @return The HTTP redirect code to be used in the Location header that is returned in the response. If another property is set, `HttpRedirectCode` is not required.
     * 
     */
    public Optional<String> HttpRedirectCode() {
        return Optional.ofNullable(this.HttpRedirectCode);
    }
    /**
     * @return The protocol, http or https, to be used in the Location header that is returned in the response. If another property is set, `Protocol` is not required.
     * 
     */
    public Optional<String> Protocol() {
        return Optional.ofNullable(this.Protocol);
    }
    /**
     * @return The prefix of the object key name that replaces the value of `KeyPrefixEquals` in the redirect request. If another property is set, `ReplaceKeyPrefixWith` is not required. It can be set only if `ReplaceKeyWith` is not set.
     * 
     */
    public Optional<String> ReplaceKeyPrefixWith() {
        return Optional.ofNullable(this.ReplaceKeyPrefixWith);
    }
    /**
     * @return The object key to be used in the Location header that is returned in the response. If another property is set, `ReplaceKeyWith` is not required. It can be set only if `ReplaceKeyPrefixWith` is not set.
     * 
     */
    public Optional<String> ReplaceKeyWith() {
        return Optional.ofNullable(this.ReplaceKeyWith);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(Redirect defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String HostName;
        private @Nullable String HttpRedirectCode;
        private @Nullable String Protocol;
        private @Nullable String ReplaceKeyPrefixWith;
        private @Nullable String ReplaceKeyWith;
        public Builder() {}
        public Builder(Redirect defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.HostName = defaults.HostName;
    	      this.HttpRedirectCode = defaults.HttpRedirectCode;
    	      this.Protocol = defaults.Protocol;
    	      this.ReplaceKeyPrefixWith = defaults.ReplaceKeyPrefixWith;
    	      this.ReplaceKeyWith = defaults.ReplaceKeyWith;
        }

        @CustomType.Setter
        public Builder HostName(@Nullable String HostName) {

            this.HostName = HostName;
            return this;
        }
        @CustomType.Setter
        public Builder HttpRedirectCode(@Nullable String HttpRedirectCode) {

            this.HttpRedirectCode = HttpRedirectCode;
            return this;
        }
        @CustomType.Setter
        public Builder Protocol(@Nullable String Protocol) {

            this.Protocol = Protocol;
            return this;
        }
        @CustomType.Setter
        public Builder ReplaceKeyPrefixWith(@Nullable String ReplaceKeyPrefixWith) {

            this.ReplaceKeyPrefixWith = ReplaceKeyPrefixWith;
            return this;
        }
        @CustomType.Setter
        public Builder ReplaceKeyWith(@Nullable String ReplaceKeyWith) {

            this.ReplaceKeyWith = ReplaceKeyWith;
            return this;
        }
        public Redirect build() {
            final var _resultValue = new Redirect();
            _resultValue.HostName = HostName;
            _resultValue.HttpRedirectCode = HttpRedirectCode;
            _resultValue.Protocol = Protocol;
            _resultValue.ReplaceKeyPrefixWith = ReplaceKeyPrefixWith;
            _resultValue.ReplaceKeyWith = ReplaceKeyWith;
            return _resultValue;
        }
    }
}
