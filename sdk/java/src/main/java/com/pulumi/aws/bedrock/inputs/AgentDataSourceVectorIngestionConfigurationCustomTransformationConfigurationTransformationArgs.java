// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.bedrock.inputs;

import com.pulumi.aws.bedrock.inputs.AgentDataSourceVectorIngestionConfigurationCustomTransformationConfigurationTransformationTransformationFunctionArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AgentDataSourceVectorIngestionConfigurationCustomTransformationConfigurationTransformationArgs extends com.pulumi.resources.ResourceArgs {

    public static final AgentDataSourceVectorIngestionConfigurationCustomTransformationConfigurationTransformationArgs Empty = new AgentDataSourceVectorIngestionConfigurationCustomTransformationConfigurationTransformationArgs();

    /**
     * When the service applies the transformation. Currently only `POST_CHUNKING` is supported.
     * 
     */
    @Import(name="stepToApply", required=true)
    private Output<String> stepToApply;

    /**
     * @return When the service applies the transformation. Currently only `POST_CHUNKING` is supported.
     * 
     */
    public Output<String> stepToApply() {
        return this.stepToApply;
    }

    /**
     * The lambda function that processes documents.
     * 
     */
    @Import(name="transformationFunction")
    private @Nullable Output<AgentDataSourceVectorIngestionConfigurationCustomTransformationConfigurationTransformationTransformationFunctionArgs> transformationFunction;

    /**
     * @return The lambda function that processes documents.
     * 
     */
    public Optional<Output<AgentDataSourceVectorIngestionConfigurationCustomTransformationConfigurationTransformationTransformationFunctionArgs>> transformationFunction() {
        return Optional.ofNullable(this.transformationFunction);
    }

    private AgentDataSourceVectorIngestionConfigurationCustomTransformationConfigurationTransformationArgs() {}

    private AgentDataSourceVectorIngestionConfigurationCustomTransformationConfigurationTransformationArgs(AgentDataSourceVectorIngestionConfigurationCustomTransformationConfigurationTransformationArgs $) {
        this.stepToApply = $.stepToApply;
        this.transformationFunction = $.transformationFunction;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AgentDataSourceVectorIngestionConfigurationCustomTransformationConfigurationTransformationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AgentDataSourceVectorIngestionConfigurationCustomTransformationConfigurationTransformationArgs $;

        public Builder() {
            $ = new AgentDataSourceVectorIngestionConfigurationCustomTransformationConfigurationTransformationArgs();
        }

        public Builder(AgentDataSourceVectorIngestionConfigurationCustomTransformationConfigurationTransformationArgs defaults) {
            $ = new AgentDataSourceVectorIngestionConfigurationCustomTransformationConfigurationTransformationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param stepToApply When the service applies the transformation. Currently only `POST_CHUNKING` is supported.
         * 
         * @return builder
         * 
         */
        public Builder stepToApply(Output<String> stepToApply) {
            $.stepToApply = stepToApply;
            return this;
        }

        /**
         * @param stepToApply When the service applies the transformation. Currently only `POST_CHUNKING` is supported.
         * 
         * @return builder
         * 
         */
        public Builder stepToApply(String stepToApply) {
            return stepToApply(Output.of(stepToApply));
        }

        /**
         * @param transformationFunction The lambda function that processes documents.
         * 
         * @return builder
         * 
         */
        public Builder transformationFunction(@Nullable Output<AgentDataSourceVectorIngestionConfigurationCustomTransformationConfigurationTransformationTransformationFunctionArgs> transformationFunction) {
            $.transformationFunction = transformationFunction;
            return this;
        }

        /**
         * @param transformationFunction The lambda function that processes documents.
         * 
         * @return builder
         * 
         */
        public Builder transformationFunction(AgentDataSourceVectorIngestionConfigurationCustomTransformationConfigurationTransformationTransformationFunctionArgs transformationFunction) {
            return transformationFunction(Output.of(transformationFunction));
        }

        public AgentDataSourceVectorIngestionConfigurationCustomTransformationConfigurationTransformationArgs build() {
            if ($.stepToApply == null) {
                throw new MissingRequiredPropertyException("AgentDataSourceVectorIngestionConfigurationCustomTransformationConfigurationTransformationArgs", "stepToApply");
            }
            return $;
        }
    }

}
