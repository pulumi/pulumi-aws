// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.evidently;

import com.pulumi.aws.evidently.inputs.FeatureVariationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FeatureArgs extends com.pulumi.resources.ResourceArgs {

    public static final FeatureArgs Empty = new FeatureArgs();

    @Import(name="defaultVariation")
    private @Nullable Output<String> defaultVariation;

    public Optional<Output<String>> defaultVariation() {
        return Optional.ofNullable(this.defaultVariation);
    }

    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="entityOverrides")
    private @Nullable Output<Map<String,String>> entityOverrides;

    public Optional<Output<Map<String,String>>> entityOverrides() {
        return Optional.ofNullable(this.entityOverrides);
    }

    @Import(name="evaluationStrategy")
    private @Nullable Output<String> evaluationStrategy;

    public Optional<Output<String>> evaluationStrategy() {
        return Optional.ofNullable(this.evaluationStrategy);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="project", required=true)
    private Output<String> project;

    public Output<String> project() {
        return this.project;
    }

    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="variations", required=true)
    private Output<List<FeatureVariationArgs>> variations;

    public Output<List<FeatureVariationArgs>> variations() {
        return this.variations;
    }

    private FeatureArgs() {}

    private FeatureArgs(FeatureArgs $) {
        this.defaultVariation = $.defaultVariation;
        this.description = $.description;
        this.entityOverrides = $.entityOverrides;
        this.evaluationStrategy = $.evaluationStrategy;
        this.name = $.name;
        this.project = $.project;
        this.tags = $.tags;
        this.variations = $.variations;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FeatureArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FeatureArgs $;

        public Builder() {
            $ = new FeatureArgs();
        }

        public Builder(FeatureArgs defaults) {
            $ = new FeatureArgs(Objects.requireNonNull(defaults));
        }

        public Builder defaultVariation(@Nullable Output<String> defaultVariation) {
            $.defaultVariation = defaultVariation;
            return this;
        }

        public Builder defaultVariation(String defaultVariation) {
            return defaultVariation(Output.of(defaultVariation));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder entityOverrides(@Nullable Output<Map<String,String>> entityOverrides) {
            $.entityOverrides = entityOverrides;
            return this;
        }

        public Builder entityOverrides(Map<String,String> entityOverrides) {
            return entityOverrides(Output.of(entityOverrides));
        }

        public Builder evaluationStrategy(@Nullable Output<String> evaluationStrategy) {
            $.evaluationStrategy = evaluationStrategy;
            return this;
        }

        public Builder evaluationStrategy(String evaluationStrategy) {
            return evaluationStrategy(Output.of(evaluationStrategy));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder project(Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder variations(Output<List<FeatureVariationArgs>> variations) {
            $.variations = variations;
            return this;
        }

        public Builder variations(List<FeatureVariationArgs> variations) {
            return variations(Output.of(variations));
        }

        public Builder variations(FeatureVariationArgs... variations) {
            return variations(List.of(variations));
        }

        public FeatureArgs build() {
            $.project = Objects.requireNonNull($.project, "expected parameter 'project' to be non-null");
            $.variations = Objects.requireNonNull($.variations, "expected parameter 'variations' to be non-null");
            return $;
        }
    }

}
