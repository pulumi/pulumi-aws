// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight;

import com.pulumi.aws.Utilities;
import com.pulumi.aws.quicksight.inputs.GetAnalysisArgs;
import com.pulumi.aws.quicksight.inputs.GetAnalysisPlainArgs;
import com.pulumi.aws.quicksight.inputs.GetDataSetArgs;
import com.pulumi.aws.quicksight.inputs.GetDataSetPlainArgs;
import com.pulumi.aws.quicksight.inputs.GetQuicksightAnalysisArgs;
import com.pulumi.aws.quicksight.inputs.GetQuicksightAnalysisPlainArgs;
import com.pulumi.aws.quicksight.inputs.GetQuicksightGroupArgs;
import com.pulumi.aws.quicksight.inputs.GetQuicksightGroupPlainArgs;
import com.pulumi.aws.quicksight.inputs.GetQuicksightUserArgs;
import com.pulumi.aws.quicksight.inputs.GetQuicksightUserPlainArgs;
import com.pulumi.aws.quicksight.inputs.GetThemeArgs;
import com.pulumi.aws.quicksight.inputs.GetThemePlainArgs;
import com.pulumi.aws.quicksight.outputs.GetAnalysisResult;
import com.pulumi.aws.quicksight.outputs.GetDataSetResult;
import com.pulumi.aws.quicksight.outputs.GetQuicksightAnalysisResult;
import com.pulumi.aws.quicksight.outputs.GetQuicksightGroupResult;
import com.pulumi.aws.quicksight.outputs.GetQuicksightUserResult;
import com.pulumi.aws.quicksight.outputs.GetThemeResult;
import com.pulumi.core.Output;
import com.pulumi.core.TypeShape;
import com.pulumi.deployment.Deployment;
import com.pulumi.deployment.InvokeOptions;
import java.util.concurrent.CompletableFuture;

public final class QuicksightFunctions {
    /**
     * Data source for managing an AWS QuickSight Analysis.
     * 
     * ## Example Usage
     * 
     * ### Basic Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.quicksight.QuicksightFunctions;
     * import com.pulumi.aws.quicksight.inputs.GetQuicksightAnalysisArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = QuicksightFunctions.getQuicksightAnalysis(GetQuicksightAnalysisArgs.builder()
     *             .analysisId("example-id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * @deprecated
     * aws.quicksight/getanalysis.getAnalysis has been deprecated in favor of aws.quicksight/getquicksightanalysis.getQuicksightAnalysis
     * 
     */
    @Deprecated /* aws.quicksight/getanalysis.getAnalysis has been deprecated in favor of aws.quicksight/getquicksightanalysis.getQuicksightAnalysis */
    public static Output<GetAnalysisResult> getAnalysis(GetAnalysisArgs args) {
        return getAnalysis(args, InvokeOptions.Empty);
    }
    /**
     * Data source for managing an AWS QuickSight Analysis.
     * 
     * ## Example Usage
     * 
     * ### Basic Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.quicksight.QuicksightFunctions;
     * import com.pulumi.aws.quicksight.inputs.GetQuicksightAnalysisArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = QuicksightFunctions.getQuicksightAnalysis(GetQuicksightAnalysisArgs.builder()
     *             .analysisId("example-id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * @deprecated
     * aws.quicksight/getanalysis.getAnalysis has been deprecated in favor of aws.quicksight/getquicksightanalysis.getQuicksightAnalysis
     * 
     */
    @Deprecated /* aws.quicksight/getanalysis.getAnalysis has been deprecated in favor of aws.quicksight/getquicksightanalysis.getQuicksightAnalysis */
    public static CompletableFuture<GetAnalysisResult> getAnalysisPlain(GetAnalysisPlainArgs args) {
        return getAnalysisPlain(args, InvokeOptions.Empty);
    }
    /**
     * Data source for managing an AWS QuickSight Analysis.
     * 
     * ## Example Usage
     * 
     * ### Basic Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.quicksight.QuicksightFunctions;
     * import com.pulumi.aws.quicksight.inputs.GetQuicksightAnalysisArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = QuicksightFunctions.getQuicksightAnalysis(GetQuicksightAnalysisArgs.builder()
     *             .analysisId("example-id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * @deprecated
     * aws.quicksight/getanalysis.getAnalysis has been deprecated in favor of aws.quicksight/getquicksightanalysis.getQuicksightAnalysis
     * 
     */
    @Deprecated /* aws.quicksight/getanalysis.getAnalysis has been deprecated in favor of aws.quicksight/getquicksightanalysis.getQuicksightAnalysis */
    public static Output<GetAnalysisResult> getAnalysis(GetAnalysisArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("aws:quicksight/getAnalysis:getAnalysis", TypeShape.of(GetAnalysisResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for managing an AWS QuickSight Analysis.
     * 
     * ## Example Usage
     * 
     * ### Basic Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.quicksight.QuicksightFunctions;
     * import com.pulumi.aws.quicksight.inputs.GetQuicksightAnalysisArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = QuicksightFunctions.getQuicksightAnalysis(GetQuicksightAnalysisArgs.builder()
     *             .analysisId("example-id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * @deprecated
     * aws.quicksight/getanalysis.getAnalysis has been deprecated in favor of aws.quicksight/getquicksightanalysis.getQuicksightAnalysis
     * 
     */
    @Deprecated /* aws.quicksight/getanalysis.getAnalysis has been deprecated in favor of aws.quicksight/getquicksightanalysis.getQuicksightAnalysis */
    public static CompletableFuture<GetAnalysisResult> getAnalysisPlain(GetAnalysisPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("aws:quicksight/getAnalysis:getAnalysis", TypeShape.of(GetAnalysisResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for managing a QuickSight Data Set.
     * 
     * ## Example Usage
     * 
     * ### Basic Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.quicksight.QuicksightFunctions;
     * import com.pulumi.aws.quicksight.inputs.GetDataSetArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = QuicksightFunctions.getDataSet(GetDataSetArgs.builder()
     *             .dataSetId("example-id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetDataSetResult> getDataSet(GetDataSetArgs args) {
        return getDataSet(args, InvokeOptions.Empty);
    }
    /**
     * Data source for managing a QuickSight Data Set.
     * 
     * ## Example Usage
     * 
     * ### Basic Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.quicksight.QuicksightFunctions;
     * import com.pulumi.aws.quicksight.inputs.GetDataSetArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = QuicksightFunctions.getDataSet(GetDataSetArgs.builder()
     *             .dataSetId("example-id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetDataSetResult> getDataSetPlain(GetDataSetPlainArgs args) {
        return getDataSetPlain(args, InvokeOptions.Empty);
    }
    /**
     * Data source for managing a QuickSight Data Set.
     * 
     * ## Example Usage
     * 
     * ### Basic Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.quicksight.QuicksightFunctions;
     * import com.pulumi.aws.quicksight.inputs.GetDataSetArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = QuicksightFunctions.getDataSet(GetDataSetArgs.builder()
     *             .dataSetId("example-id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetDataSetResult> getDataSet(GetDataSetArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("aws:quicksight/getDataSet:getDataSet", TypeShape.of(GetDataSetResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for managing a QuickSight Data Set.
     * 
     * ## Example Usage
     * 
     * ### Basic Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.quicksight.QuicksightFunctions;
     * import com.pulumi.aws.quicksight.inputs.GetDataSetArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = QuicksightFunctions.getDataSet(GetDataSetArgs.builder()
     *             .dataSetId("example-id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetDataSetResult> getDataSetPlain(GetDataSetPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("aws:quicksight/getDataSet:getDataSet", TypeShape.of(GetDataSetResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for managing an AWS QuickSight Analysis.
     * 
     * ## Example Usage
     * 
     * ### Basic Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.quicksight.QuicksightFunctions;
     * import com.pulumi.aws.quicksight.inputs.GetQuicksightAnalysisArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = QuicksightFunctions.getQuicksightAnalysis(GetQuicksightAnalysisArgs.builder()
     *             .analysisId("example-id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetQuicksightAnalysisResult> getQuicksightAnalysis(GetQuicksightAnalysisArgs args) {
        return getQuicksightAnalysis(args, InvokeOptions.Empty);
    }
    /**
     * Data source for managing an AWS QuickSight Analysis.
     * 
     * ## Example Usage
     * 
     * ### Basic Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.quicksight.QuicksightFunctions;
     * import com.pulumi.aws.quicksight.inputs.GetQuicksightAnalysisArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = QuicksightFunctions.getQuicksightAnalysis(GetQuicksightAnalysisArgs.builder()
     *             .analysisId("example-id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetQuicksightAnalysisResult> getQuicksightAnalysisPlain(GetQuicksightAnalysisPlainArgs args) {
        return getQuicksightAnalysisPlain(args, InvokeOptions.Empty);
    }
    /**
     * Data source for managing an AWS QuickSight Analysis.
     * 
     * ## Example Usage
     * 
     * ### Basic Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.quicksight.QuicksightFunctions;
     * import com.pulumi.aws.quicksight.inputs.GetQuicksightAnalysisArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = QuicksightFunctions.getQuicksightAnalysis(GetQuicksightAnalysisArgs.builder()
     *             .analysisId("example-id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetQuicksightAnalysisResult> getQuicksightAnalysis(GetQuicksightAnalysisArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("aws:quicksight/getQuicksightAnalysis:getQuicksightAnalysis", TypeShape.of(GetQuicksightAnalysisResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for managing an AWS QuickSight Analysis.
     * 
     * ## Example Usage
     * 
     * ### Basic Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.quicksight.QuicksightFunctions;
     * import com.pulumi.aws.quicksight.inputs.GetQuicksightAnalysisArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = QuicksightFunctions.getQuicksightAnalysis(GetQuicksightAnalysisArgs.builder()
     *             .analysisId("example-id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetQuicksightAnalysisResult> getQuicksightAnalysisPlain(GetQuicksightAnalysisPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("aws:quicksight/getQuicksightAnalysis:getQuicksightAnalysis", TypeShape.of(GetQuicksightAnalysisResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source can be used to fetch information about a specific
     * QuickSight group. By using this data source, you can reference QuickSight group
     * properties without having to hard code ARNs or unique IDs as input.
     * 
     * ## Example Usage
     * 
     * ### Basic Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.quicksight.QuicksightFunctions;
     * import com.pulumi.aws.quicksight.inputs.GetQuicksightGroupArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = QuicksightFunctions.getQuicksightGroup(GetQuicksightGroupArgs.builder()
     *             .groupName("example")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetQuicksightGroupResult> getQuicksightGroup(GetQuicksightGroupArgs args) {
        return getQuicksightGroup(args, InvokeOptions.Empty);
    }
    /**
     * This data source can be used to fetch information about a specific
     * QuickSight group. By using this data source, you can reference QuickSight group
     * properties without having to hard code ARNs or unique IDs as input.
     * 
     * ## Example Usage
     * 
     * ### Basic Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.quicksight.QuicksightFunctions;
     * import com.pulumi.aws.quicksight.inputs.GetQuicksightGroupArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = QuicksightFunctions.getQuicksightGroup(GetQuicksightGroupArgs.builder()
     *             .groupName("example")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetQuicksightGroupResult> getQuicksightGroupPlain(GetQuicksightGroupPlainArgs args) {
        return getQuicksightGroupPlain(args, InvokeOptions.Empty);
    }
    /**
     * This data source can be used to fetch information about a specific
     * QuickSight group. By using this data source, you can reference QuickSight group
     * properties without having to hard code ARNs or unique IDs as input.
     * 
     * ## Example Usage
     * 
     * ### Basic Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.quicksight.QuicksightFunctions;
     * import com.pulumi.aws.quicksight.inputs.GetQuicksightGroupArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = QuicksightFunctions.getQuicksightGroup(GetQuicksightGroupArgs.builder()
     *             .groupName("example")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetQuicksightGroupResult> getQuicksightGroup(GetQuicksightGroupArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("aws:quicksight/getQuicksightGroup:getQuicksightGroup", TypeShape.of(GetQuicksightGroupResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source can be used to fetch information about a specific
     * QuickSight group. By using this data source, you can reference QuickSight group
     * properties without having to hard code ARNs or unique IDs as input.
     * 
     * ## Example Usage
     * 
     * ### Basic Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.quicksight.QuicksightFunctions;
     * import com.pulumi.aws.quicksight.inputs.GetQuicksightGroupArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = QuicksightFunctions.getQuicksightGroup(GetQuicksightGroupArgs.builder()
     *             .groupName("example")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetQuicksightGroupResult> getQuicksightGroupPlain(GetQuicksightGroupPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("aws:quicksight/getQuicksightGroup:getQuicksightGroup", TypeShape.of(GetQuicksightGroupResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source can be used to fetch information about a specific
     * QuickSight user. By using this data source, you can reference QuickSight user
     * properties without having to hard code ARNs or unique IDs as input.
     * 
     * ## Example Usage
     * 
     * ### Basic Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.quicksight.QuicksightFunctions;
     * import com.pulumi.aws.quicksight.inputs.GetQuicksightUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = QuicksightFunctions.getQuicksightUser(GetQuicksightUserArgs.builder()
     *             .userName("example")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetQuicksightUserResult> getQuicksightUser(GetQuicksightUserArgs args) {
        return getQuicksightUser(args, InvokeOptions.Empty);
    }
    /**
     * This data source can be used to fetch information about a specific
     * QuickSight user. By using this data source, you can reference QuickSight user
     * properties without having to hard code ARNs or unique IDs as input.
     * 
     * ## Example Usage
     * 
     * ### Basic Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.quicksight.QuicksightFunctions;
     * import com.pulumi.aws.quicksight.inputs.GetQuicksightUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = QuicksightFunctions.getQuicksightUser(GetQuicksightUserArgs.builder()
     *             .userName("example")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetQuicksightUserResult> getQuicksightUserPlain(GetQuicksightUserPlainArgs args) {
        return getQuicksightUserPlain(args, InvokeOptions.Empty);
    }
    /**
     * This data source can be used to fetch information about a specific
     * QuickSight user. By using this data source, you can reference QuickSight user
     * properties without having to hard code ARNs or unique IDs as input.
     * 
     * ## Example Usage
     * 
     * ### Basic Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.quicksight.QuicksightFunctions;
     * import com.pulumi.aws.quicksight.inputs.GetQuicksightUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = QuicksightFunctions.getQuicksightUser(GetQuicksightUserArgs.builder()
     *             .userName("example")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetQuicksightUserResult> getQuicksightUser(GetQuicksightUserArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("aws:quicksight/getQuicksightUser:getQuicksightUser", TypeShape.of(GetQuicksightUserResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source can be used to fetch information about a specific
     * QuickSight user. By using this data source, you can reference QuickSight user
     * properties without having to hard code ARNs or unique IDs as input.
     * 
     * ## Example Usage
     * 
     * ### Basic Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.quicksight.QuicksightFunctions;
     * import com.pulumi.aws.quicksight.inputs.GetQuicksightUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = QuicksightFunctions.getQuicksightUser(GetQuicksightUserArgs.builder()
     *             .userName("example")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetQuicksightUserResult> getQuicksightUserPlain(GetQuicksightUserPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("aws:quicksight/getQuicksightUser:getQuicksightUser", TypeShape.of(GetQuicksightUserResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for managing an AWS QuickSight Theme.
     * 
     * ## Example Usage
     * 
     * ### Basic Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.quicksight.QuicksightFunctions;
     * import com.pulumi.aws.quicksight.inputs.GetThemeArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = QuicksightFunctions.getTheme(GetThemeArgs.builder()
     *             .themeId("example")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetThemeResult> getTheme(GetThemeArgs args) {
        return getTheme(args, InvokeOptions.Empty);
    }
    /**
     * Data source for managing an AWS QuickSight Theme.
     * 
     * ## Example Usage
     * 
     * ### Basic Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.quicksight.QuicksightFunctions;
     * import com.pulumi.aws.quicksight.inputs.GetThemeArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = QuicksightFunctions.getTheme(GetThemeArgs.builder()
     *             .themeId("example")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetThemeResult> getThemePlain(GetThemePlainArgs args) {
        return getThemePlain(args, InvokeOptions.Empty);
    }
    /**
     * Data source for managing an AWS QuickSight Theme.
     * 
     * ## Example Usage
     * 
     * ### Basic Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.quicksight.QuicksightFunctions;
     * import com.pulumi.aws.quicksight.inputs.GetThemeArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = QuicksightFunctions.getTheme(GetThemeArgs.builder()
     *             .themeId("example")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetThemeResult> getTheme(GetThemeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("aws:quicksight/getTheme:getTheme", TypeShape.of(GetThemeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for managing an AWS QuickSight Theme.
     * 
     * ## Example Usage
     * 
     * ### Basic Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.quicksight.QuicksightFunctions;
     * import com.pulumi.aws.quicksight.inputs.GetThemeArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = QuicksightFunctions.getTheme(GetThemeArgs.builder()
     *             .themeId("example")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetThemeResult> getThemePlain(GetThemePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("aws:quicksight/getTheme:getTheme", TypeShape.of(GetThemeResult.class), args, Utilities.withVersion(options));
    }
}
