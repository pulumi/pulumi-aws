// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.lightsail.inputs;

import com.pulumi.aws.lightsail.inputs.DistributionCacheBehaviorSettingsForwardedCookiesArgs;
import com.pulumi.aws.lightsail.inputs.DistributionCacheBehaviorSettingsForwardedHeadersArgs;
import com.pulumi.aws.lightsail.inputs.DistributionCacheBehaviorSettingsForwardedQueryStringsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DistributionCacheBehaviorSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final DistributionCacheBehaviorSettingsArgs Empty = new DistributionCacheBehaviorSettingsArgs();

    /**
     * HTTP methods that are processed and forwarded to the distribution&#39;s origin.
     * 
     */
    @Import(name="allowedHttpMethods")
    private @Nullable Output<String> allowedHttpMethods;

    /**
     * @return HTTP methods that are processed and forwarded to the distribution&#39;s origin.
     * 
     */
    public Optional<Output<String>> allowedHttpMethods() {
        return Optional.ofNullable(this.allowedHttpMethods);
    }

    /**
     * HTTP method responses that are cached by your distribution.
     * 
     */
    @Import(name="cachedHttpMethods")
    private @Nullable Output<String> cachedHttpMethods;

    /**
     * @return HTTP method responses that are cached by your distribution.
     * 
     */
    public Optional<Output<String>> cachedHttpMethods() {
        return Optional.ofNullable(this.cachedHttpMethods);
    }

    /**
     * Default amount of time that objects stay in the distribution&#39;s cache before the distribution forwards another request to the origin to determine whether the content has been updated.
     * 
     */
    @Import(name="defaultTtl")
    private @Nullable Output<Integer> defaultTtl;

    /**
     * @return Default amount of time that objects stay in the distribution&#39;s cache before the distribution forwards another request to the origin to determine whether the content has been updated.
     * 
     */
    public Optional<Output<Integer>> defaultTtl() {
        return Optional.ofNullable(this.defaultTtl);
    }

    /**
     * Cookies that are forwarded to the origin. Your content is cached based on the cookies that are forwarded. See below.
     * 
     */
    @Import(name="forwardedCookies")
    private @Nullable Output<DistributionCacheBehaviorSettingsForwardedCookiesArgs> forwardedCookies;

    /**
     * @return Cookies that are forwarded to the origin. Your content is cached based on the cookies that are forwarded. See below.
     * 
     */
    public Optional<Output<DistributionCacheBehaviorSettingsForwardedCookiesArgs>> forwardedCookies() {
        return Optional.ofNullable(this.forwardedCookies);
    }

    /**
     * Headers that are forwarded to the origin. Your content is cached based on the headers that are forwarded. See below.
     * 
     */
    @Import(name="forwardedHeaders")
    private @Nullable Output<DistributionCacheBehaviorSettingsForwardedHeadersArgs> forwardedHeaders;

    /**
     * @return Headers that are forwarded to the origin. Your content is cached based on the headers that are forwarded. See below.
     * 
     */
    public Optional<Output<DistributionCacheBehaviorSettingsForwardedHeadersArgs>> forwardedHeaders() {
        return Optional.ofNullable(this.forwardedHeaders);
    }

    /**
     * Query strings that are forwarded to the origin. Your content is cached based on the query strings that are forwarded. See below.
     * 
     */
    @Import(name="forwardedQueryStrings")
    private @Nullable Output<DistributionCacheBehaviorSettingsForwardedQueryStringsArgs> forwardedQueryStrings;

    /**
     * @return Query strings that are forwarded to the origin. Your content is cached based on the query strings that are forwarded. See below.
     * 
     */
    public Optional<Output<DistributionCacheBehaviorSettingsForwardedQueryStringsArgs>> forwardedQueryStrings() {
        return Optional.ofNullable(this.forwardedQueryStrings);
    }

    /**
     * Maximum amount of time that objects stay in the distribution&#39;s cache before the distribution forwards another request to the origin to determine whether the object has been updated.
     * 
     */
    @Import(name="maximumTtl")
    private @Nullable Output<Integer> maximumTtl;

    /**
     * @return Maximum amount of time that objects stay in the distribution&#39;s cache before the distribution forwards another request to the origin to determine whether the object has been updated.
     * 
     */
    public Optional<Output<Integer>> maximumTtl() {
        return Optional.ofNullable(this.maximumTtl);
    }

    /**
     * Minimum amount of time that objects stay in the distribution&#39;s cache before the distribution forwards another request to the origin to determine whether the object has been updated.
     * 
     */
    @Import(name="minimumTtl")
    private @Nullable Output<Integer> minimumTtl;

    /**
     * @return Minimum amount of time that objects stay in the distribution&#39;s cache before the distribution forwards another request to the origin to determine whether the object has been updated.
     * 
     */
    public Optional<Output<Integer>> minimumTtl() {
        return Optional.ofNullable(this.minimumTtl);
    }

    private DistributionCacheBehaviorSettingsArgs() {}

    private DistributionCacheBehaviorSettingsArgs(DistributionCacheBehaviorSettingsArgs $) {
        this.allowedHttpMethods = $.allowedHttpMethods;
        this.cachedHttpMethods = $.cachedHttpMethods;
        this.defaultTtl = $.defaultTtl;
        this.forwardedCookies = $.forwardedCookies;
        this.forwardedHeaders = $.forwardedHeaders;
        this.forwardedQueryStrings = $.forwardedQueryStrings;
        this.maximumTtl = $.maximumTtl;
        this.minimumTtl = $.minimumTtl;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DistributionCacheBehaviorSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DistributionCacheBehaviorSettingsArgs $;

        public Builder() {
            $ = new DistributionCacheBehaviorSettingsArgs();
        }

        public Builder(DistributionCacheBehaviorSettingsArgs defaults) {
            $ = new DistributionCacheBehaviorSettingsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowedHttpMethods HTTP methods that are processed and forwarded to the distribution&#39;s origin.
         * 
         * @return builder
         * 
         */
        public Builder allowedHttpMethods(@Nullable Output<String> allowedHttpMethods) {
            $.allowedHttpMethods = allowedHttpMethods;
            return this;
        }

        /**
         * @param allowedHttpMethods HTTP methods that are processed and forwarded to the distribution&#39;s origin.
         * 
         * @return builder
         * 
         */
        public Builder allowedHttpMethods(String allowedHttpMethods) {
            return allowedHttpMethods(Output.of(allowedHttpMethods));
        }

        /**
         * @param cachedHttpMethods HTTP method responses that are cached by your distribution.
         * 
         * @return builder
         * 
         */
        public Builder cachedHttpMethods(@Nullable Output<String> cachedHttpMethods) {
            $.cachedHttpMethods = cachedHttpMethods;
            return this;
        }

        /**
         * @param cachedHttpMethods HTTP method responses that are cached by your distribution.
         * 
         * @return builder
         * 
         */
        public Builder cachedHttpMethods(String cachedHttpMethods) {
            return cachedHttpMethods(Output.of(cachedHttpMethods));
        }

        /**
         * @param defaultTtl Default amount of time that objects stay in the distribution&#39;s cache before the distribution forwards another request to the origin to determine whether the content has been updated.
         * 
         * @return builder
         * 
         */
        public Builder defaultTtl(@Nullable Output<Integer> defaultTtl) {
            $.defaultTtl = defaultTtl;
            return this;
        }

        /**
         * @param defaultTtl Default amount of time that objects stay in the distribution&#39;s cache before the distribution forwards another request to the origin to determine whether the content has been updated.
         * 
         * @return builder
         * 
         */
        public Builder defaultTtl(Integer defaultTtl) {
            return defaultTtl(Output.of(defaultTtl));
        }

        /**
         * @param forwardedCookies Cookies that are forwarded to the origin. Your content is cached based on the cookies that are forwarded. See below.
         * 
         * @return builder
         * 
         */
        public Builder forwardedCookies(@Nullable Output<DistributionCacheBehaviorSettingsForwardedCookiesArgs> forwardedCookies) {
            $.forwardedCookies = forwardedCookies;
            return this;
        }

        /**
         * @param forwardedCookies Cookies that are forwarded to the origin. Your content is cached based on the cookies that are forwarded. See below.
         * 
         * @return builder
         * 
         */
        public Builder forwardedCookies(DistributionCacheBehaviorSettingsForwardedCookiesArgs forwardedCookies) {
            return forwardedCookies(Output.of(forwardedCookies));
        }

        /**
         * @param forwardedHeaders Headers that are forwarded to the origin. Your content is cached based on the headers that are forwarded. See below.
         * 
         * @return builder
         * 
         */
        public Builder forwardedHeaders(@Nullable Output<DistributionCacheBehaviorSettingsForwardedHeadersArgs> forwardedHeaders) {
            $.forwardedHeaders = forwardedHeaders;
            return this;
        }

        /**
         * @param forwardedHeaders Headers that are forwarded to the origin. Your content is cached based on the headers that are forwarded. See below.
         * 
         * @return builder
         * 
         */
        public Builder forwardedHeaders(DistributionCacheBehaviorSettingsForwardedHeadersArgs forwardedHeaders) {
            return forwardedHeaders(Output.of(forwardedHeaders));
        }

        /**
         * @param forwardedQueryStrings Query strings that are forwarded to the origin. Your content is cached based on the query strings that are forwarded. See below.
         * 
         * @return builder
         * 
         */
        public Builder forwardedQueryStrings(@Nullable Output<DistributionCacheBehaviorSettingsForwardedQueryStringsArgs> forwardedQueryStrings) {
            $.forwardedQueryStrings = forwardedQueryStrings;
            return this;
        }

        /**
         * @param forwardedQueryStrings Query strings that are forwarded to the origin. Your content is cached based on the query strings that are forwarded. See below.
         * 
         * @return builder
         * 
         */
        public Builder forwardedQueryStrings(DistributionCacheBehaviorSettingsForwardedQueryStringsArgs forwardedQueryStrings) {
            return forwardedQueryStrings(Output.of(forwardedQueryStrings));
        }

        /**
         * @param maximumTtl Maximum amount of time that objects stay in the distribution&#39;s cache before the distribution forwards another request to the origin to determine whether the object has been updated.
         * 
         * @return builder
         * 
         */
        public Builder maximumTtl(@Nullable Output<Integer> maximumTtl) {
            $.maximumTtl = maximumTtl;
            return this;
        }

        /**
         * @param maximumTtl Maximum amount of time that objects stay in the distribution&#39;s cache before the distribution forwards another request to the origin to determine whether the object has been updated.
         * 
         * @return builder
         * 
         */
        public Builder maximumTtl(Integer maximumTtl) {
            return maximumTtl(Output.of(maximumTtl));
        }

        /**
         * @param minimumTtl Minimum amount of time that objects stay in the distribution&#39;s cache before the distribution forwards another request to the origin to determine whether the object has been updated.
         * 
         * @return builder
         * 
         */
        public Builder minimumTtl(@Nullable Output<Integer> minimumTtl) {
            $.minimumTtl = minimumTtl;
            return this;
        }

        /**
         * @param minimumTtl Minimum amount of time that objects stay in the distribution&#39;s cache before the distribution forwards another request to the origin to determine whether the object has been updated.
         * 
         * @return builder
         * 
         */
        public Builder minimumTtl(Integer minimumTtl) {
            return minimumTtl(Output.of(minimumTtl));
        }

        public DistributionCacheBehaviorSettingsArgs build() {
            return $;
        }
    }

}
