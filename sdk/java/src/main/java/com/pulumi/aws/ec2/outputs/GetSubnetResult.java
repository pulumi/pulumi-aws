// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ec2.outputs;

import com.pulumi.aws.ec2.outputs.GetSubnetFilter;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetSubnetResult {
    /**
     * @return ARN of the subnet.
     * 
     */
    private @Nullable String arn;
    /**
     * @return Whether an IPv6 address is assigned on creation.
     * 
     */
    private @Nullable Boolean assignIpv6AddressOnCreation;
    private @Nullable String availabilityZone;
    private @Nullable String availabilityZoneId;
    /**
     * @return Available IP addresses of the subnet.
     * 
     */
    private @Nullable Integer availableIpAddressCount;
    private @Nullable String cidrBlock;
    /**
     * @return Identifier of customer owned IPv4 address pool.
     * 
     */
    private @Nullable String customerOwnedIpv4Pool;
    private @Nullable Boolean defaultForAz;
    /**
     * @return Whether DNS queries made to the Amazon-provided DNS Resolver in this subnet return synthetic IPv6 addresses for IPv4-only destinations.
     * 
     */
    private @Nullable Boolean enableDns64;
    /**
     * @return Indicates the device position for local network interfaces in this subnet. For example, 1 indicates local network interfaces in this subnet are the secondary network interface (eth1). A local network interface cannot be the primary network interface (eth0).
     * 
     */
    private @Nullable Integer enableLniAtDeviceIndex;
    /**
     * @return Indicates whether to respond to DNS queries for instance hostnames with DNS A records.
     * 
     */
    private @Nullable Boolean enableResourceNameDnsARecordOnLaunch;
    /**
     * @return Indicates whether to respond to DNS queries for instance hostnames with DNS AAAA records.
     * 
     */
    private @Nullable Boolean enableResourceNameDnsAaaaRecordOnLaunch;
    private @Nullable List<GetSubnetFilter> filters;
    private @Nullable String id;
    private @Nullable String ipv6CidrBlock;
    /**
     * @return Association ID of the IPv6 CIDR block.
     * 
     */
    private @Nullable String ipv6CidrBlockAssociationId;
    /**
     * @return Whether this is an IPv6-only subnet.
     * 
     */
    private @Nullable Boolean ipv6Native;
    /**
     * @return Whether customer owned IP addresses are assigned on network interface creation.
     * 
     */
    private @Nullable Boolean mapCustomerOwnedIpOnLaunch;
    /**
     * @return Whether public IP addresses are assigned on instance launch.
     * 
     */
    private @Nullable Boolean mapPublicIpOnLaunch;
    /**
     * @return ARN of the Outpost.
     * 
     */
    private @Nullable String outpostArn;
    /**
     * @return ID of the AWS account that owns the subnet.
     * 
     */
    private @Nullable String ownerId;
    /**
     * @return The type of hostnames assigned to instances in the subnet at launch.
     * 
     */
    private @Nullable String privateDnsHostnameTypeOnLaunch;
    private @Nullable String state;
    private @Nullable Map<String,String> tags;
    private @Nullable String vpcId;

    private GetSubnetResult() {}
    /**
     * @return ARN of the subnet.
     * 
     */
    public Optional<String> arn() {
        return Optional.ofNullable(this.arn);
    }
    /**
     * @return Whether an IPv6 address is assigned on creation.
     * 
     */
    public Optional<Boolean> assignIpv6AddressOnCreation() {
        return Optional.ofNullable(this.assignIpv6AddressOnCreation);
    }
    public Optional<String> availabilityZone() {
        return Optional.ofNullable(this.availabilityZone);
    }
    public Optional<String> availabilityZoneId() {
        return Optional.ofNullable(this.availabilityZoneId);
    }
    /**
     * @return Available IP addresses of the subnet.
     * 
     */
    public Optional<Integer> availableIpAddressCount() {
        return Optional.ofNullable(this.availableIpAddressCount);
    }
    public Optional<String> cidrBlock() {
        return Optional.ofNullable(this.cidrBlock);
    }
    /**
     * @return Identifier of customer owned IPv4 address pool.
     * 
     */
    public Optional<String> customerOwnedIpv4Pool() {
        return Optional.ofNullable(this.customerOwnedIpv4Pool);
    }
    public Optional<Boolean> defaultForAz() {
        return Optional.ofNullable(this.defaultForAz);
    }
    /**
     * @return Whether DNS queries made to the Amazon-provided DNS Resolver in this subnet return synthetic IPv6 addresses for IPv4-only destinations.
     * 
     */
    public Optional<Boolean> enableDns64() {
        return Optional.ofNullable(this.enableDns64);
    }
    /**
     * @return Indicates the device position for local network interfaces in this subnet. For example, 1 indicates local network interfaces in this subnet are the secondary network interface (eth1). A local network interface cannot be the primary network interface (eth0).
     * 
     */
    public Optional<Integer> enableLniAtDeviceIndex() {
        return Optional.ofNullable(this.enableLniAtDeviceIndex);
    }
    /**
     * @return Indicates whether to respond to DNS queries for instance hostnames with DNS A records.
     * 
     */
    public Optional<Boolean> enableResourceNameDnsARecordOnLaunch() {
        return Optional.ofNullable(this.enableResourceNameDnsARecordOnLaunch);
    }
    /**
     * @return Indicates whether to respond to DNS queries for instance hostnames with DNS AAAA records.
     * 
     */
    public Optional<Boolean> enableResourceNameDnsAaaaRecordOnLaunch() {
        return Optional.ofNullable(this.enableResourceNameDnsAaaaRecordOnLaunch);
    }
    public List<GetSubnetFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    public Optional<String> ipv6CidrBlock() {
        return Optional.ofNullable(this.ipv6CidrBlock);
    }
    /**
     * @return Association ID of the IPv6 CIDR block.
     * 
     */
    public Optional<String> ipv6CidrBlockAssociationId() {
        return Optional.ofNullable(this.ipv6CidrBlockAssociationId);
    }
    /**
     * @return Whether this is an IPv6-only subnet.
     * 
     */
    public Optional<Boolean> ipv6Native() {
        return Optional.ofNullable(this.ipv6Native);
    }
    /**
     * @return Whether customer owned IP addresses are assigned on network interface creation.
     * 
     */
    public Optional<Boolean> mapCustomerOwnedIpOnLaunch() {
        return Optional.ofNullable(this.mapCustomerOwnedIpOnLaunch);
    }
    /**
     * @return Whether public IP addresses are assigned on instance launch.
     * 
     */
    public Optional<Boolean> mapPublicIpOnLaunch() {
        return Optional.ofNullable(this.mapPublicIpOnLaunch);
    }
    /**
     * @return ARN of the Outpost.
     * 
     */
    public Optional<String> outpostArn() {
        return Optional.ofNullable(this.outpostArn);
    }
    /**
     * @return ID of the AWS account that owns the subnet.
     * 
     */
    public Optional<String> ownerId() {
        return Optional.ofNullable(this.ownerId);
    }
    /**
     * @return The type of hostnames assigned to instances in the subnet at launch.
     * 
     */
    public Optional<String> privateDnsHostnameTypeOnLaunch() {
        return Optional.ofNullable(this.privateDnsHostnameTypeOnLaunch);
    }
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    public Optional<String> vpcId() {
        return Optional.ofNullable(this.vpcId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSubnetResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String arn;
        private @Nullable Boolean assignIpv6AddressOnCreation;
        private @Nullable String availabilityZone;
        private @Nullable String availabilityZoneId;
        private @Nullable Integer availableIpAddressCount;
        private @Nullable String cidrBlock;
        private @Nullable String customerOwnedIpv4Pool;
        private @Nullable Boolean defaultForAz;
        private @Nullable Boolean enableDns64;
        private @Nullable Integer enableLniAtDeviceIndex;
        private @Nullable Boolean enableResourceNameDnsARecordOnLaunch;
        private @Nullable Boolean enableResourceNameDnsAaaaRecordOnLaunch;
        private @Nullable List<GetSubnetFilter> filters;
        private @Nullable String id;
        private @Nullable String ipv6CidrBlock;
        private @Nullable String ipv6CidrBlockAssociationId;
        private @Nullable Boolean ipv6Native;
        private @Nullable Boolean mapCustomerOwnedIpOnLaunch;
        private @Nullable Boolean mapPublicIpOnLaunch;
        private @Nullable String outpostArn;
        private @Nullable String ownerId;
        private @Nullable String privateDnsHostnameTypeOnLaunch;
        private @Nullable String state;
        private @Nullable Map<String,String> tags;
        private @Nullable String vpcId;
        public Builder() {}
        public Builder(GetSubnetResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.assignIpv6AddressOnCreation = defaults.assignIpv6AddressOnCreation;
    	      this.availabilityZone = defaults.availabilityZone;
    	      this.availabilityZoneId = defaults.availabilityZoneId;
    	      this.availableIpAddressCount = defaults.availableIpAddressCount;
    	      this.cidrBlock = defaults.cidrBlock;
    	      this.customerOwnedIpv4Pool = defaults.customerOwnedIpv4Pool;
    	      this.defaultForAz = defaults.defaultForAz;
    	      this.enableDns64 = defaults.enableDns64;
    	      this.enableLniAtDeviceIndex = defaults.enableLniAtDeviceIndex;
    	      this.enableResourceNameDnsARecordOnLaunch = defaults.enableResourceNameDnsARecordOnLaunch;
    	      this.enableResourceNameDnsAaaaRecordOnLaunch = defaults.enableResourceNameDnsAaaaRecordOnLaunch;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.ipv6CidrBlock = defaults.ipv6CidrBlock;
    	      this.ipv6CidrBlockAssociationId = defaults.ipv6CidrBlockAssociationId;
    	      this.ipv6Native = defaults.ipv6Native;
    	      this.mapCustomerOwnedIpOnLaunch = defaults.mapCustomerOwnedIpOnLaunch;
    	      this.mapPublicIpOnLaunch = defaults.mapPublicIpOnLaunch;
    	      this.outpostArn = defaults.outpostArn;
    	      this.ownerId = defaults.ownerId;
    	      this.privateDnsHostnameTypeOnLaunch = defaults.privateDnsHostnameTypeOnLaunch;
    	      this.state = defaults.state;
    	      this.tags = defaults.tags;
    	      this.vpcId = defaults.vpcId;
        }

        @CustomType.Setter
        public Builder arn(@Nullable String arn) {
            this.arn = arn;
            return this;
        }
        @CustomType.Setter
        public Builder assignIpv6AddressOnCreation(@Nullable Boolean assignIpv6AddressOnCreation) {
            this.assignIpv6AddressOnCreation = assignIpv6AddressOnCreation;
            return this;
        }
        @CustomType.Setter
        public Builder availabilityZone(@Nullable String availabilityZone) {
            this.availabilityZone = availabilityZone;
            return this;
        }
        @CustomType.Setter
        public Builder availabilityZoneId(@Nullable String availabilityZoneId) {
            this.availabilityZoneId = availabilityZoneId;
            return this;
        }
        @CustomType.Setter
        public Builder availableIpAddressCount(@Nullable Integer availableIpAddressCount) {
            this.availableIpAddressCount = availableIpAddressCount;
            return this;
        }
        @CustomType.Setter
        public Builder cidrBlock(@Nullable String cidrBlock) {
            this.cidrBlock = cidrBlock;
            return this;
        }
        @CustomType.Setter
        public Builder customerOwnedIpv4Pool(@Nullable String customerOwnedIpv4Pool) {
            this.customerOwnedIpv4Pool = customerOwnedIpv4Pool;
            return this;
        }
        @CustomType.Setter
        public Builder defaultForAz(@Nullable Boolean defaultForAz) {
            this.defaultForAz = defaultForAz;
            return this;
        }
        @CustomType.Setter
        public Builder enableDns64(@Nullable Boolean enableDns64) {
            this.enableDns64 = enableDns64;
            return this;
        }
        @CustomType.Setter
        public Builder enableLniAtDeviceIndex(@Nullable Integer enableLniAtDeviceIndex) {
            this.enableLniAtDeviceIndex = enableLniAtDeviceIndex;
            return this;
        }
        @CustomType.Setter
        public Builder enableResourceNameDnsARecordOnLaunch(@Nullable Boolean enableResourceNameDnsARecordOnLaunch) {
            this.enableResourceNameDnsARecordOnLaunch = enableResourceNameDnsARecordOnLaunch;
            return this;
        }
        @CustomType.Setter
        public Builder enableResourceNameDnsAaaaRecordOnLaunch(@Nullable Boolean enableResourceNameDnsAaaaRecordOnLaunch) {
            this.enableResourceNameDnsAaaaRecordOnLaunch = enableResourceNameDnsAaaaRecordOnLaunch;
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetSubnetFilter> filters) {
            this.filters = filters;
            return this;
        }
        public Builder filters(GetSubnetFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ipv6CidrBlock(@Nullable String ipv6CidrBlock) {
            this.ipv6CidrBlock = ipv6CidrBlock;
            return this;
        }
        @CustomType.Setter
        public Builder ipv6CidrBlockAssociationId(@Nullable String ipv6CidrBlockAssociationId) {
            this.ipv6CidrBlockAssociationId = ipv6CidrBlockAssociationId;
            return this;
        }
        @CustomType.Setter
        public Builder ipv6Native(@Nullable Boolean ipv6Native) {
            this.ipv6Native = ipv6Native;
            return this;
        }
        @CustomType.Setter
        public Builder mapCustomerOwnedIpOnLaunch(@Nullable Boolean mapCustomerOwnedIpOnLaunch) {
            this.mapCustomerOwnedIpOnLaunch = mapCustomerOwnedIpOnLaunch;
            return this;
        }
        @CustomType.Setter
        public Builder mapPublicIpOnLaunch(@Nullable Boolean mapPublicIpOnLaunch) {
            this.mapPublicIpOnLaunch = mapPublicIpOnLaunch;
            return this;
        }
        @CustomType.Setter
        public Builder outpostArn(@Nullable String outpostArn) {
            this.outpostArn = outpostArn;
            return this;
        }
        @CustomType.Setter
        public Builder ownerId(@Nullable String ownerId) {
            this.ownerId = ownerId;
            return this;
        }
        @CustomType.Setter
        public Builder privateDnsHostnameTypeOnLaunch(@Nullable String privateDnsHostnameTypeOnLaunch) {
            this.privateDnsHostnameTypeOnLaunch = privateDnsHostnameTypeOnLaunch;
            return this;
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder vpcId(@Nullable String vpcId) {
            this.vpcId = vpcId;
            return this;
        }
        public GetSubnetResult build() {
            final var o = new GetSubnetResult();
            o.arn = arn;
            o.assignIpv6AddressOnCreation = assignIpv6AddressOnCreation;
            o.availabilityZone = availabilityZone;
            o.availabilityZoneId = availabilityZoneId;
            o.availableIpAddressCount = availableIpAddressCount;
            o.cidrBlock = cidrBlock;
            o.customerOwnedIpv4Pool = customerOwnedIpv4Pool;
            o.defaultForAz = defaultForAz;
            o.enableDns64 = enableDns64;
            o.enableLniAtDeviceIndex = enableLniAtDeviceIndex;
            o.enableResourceNameDnsARecordOnLaunch = enableResourceNameDnsARecordOnLaunch;
            o.enableResourceNameDnsAaaaRecordOnLaunch = enableResourceNameDnsAaaaRecordOnLaunch;
            o.filters = filters;
            o.id = id;
            o.ipv6CidrBlock = ipv6CidrBlock;
            o.ipv6CidrBlockAssociationId = ipv6CidrBlockAssociationId;
            o.ipv6Native = ipv6Native;
            o.mapCustomerOwnedIpOnLaunch = mapCustomerOwnedIpOnLaunch;
            o.mapPublicIpOnLaunch = mapPublicIpOnLaunch;
            o.outpostArn = outpostArn;
            o.ownerId = ownerId;
            o.privateDnsHostnameTypeOnLaunch = privateDnsHostnameTypeOnLaunch;
            o.state = state;
            o.tags = tags;
            o.vpcId = vpcId;
            return o;
        }
    }
}
