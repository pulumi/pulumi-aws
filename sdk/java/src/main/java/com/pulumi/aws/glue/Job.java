// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.glue;

import com.pulumi.aws.Utilities;
import com.pulumi.aws.glue.JobArgs;
import com.pulumi.aws.glue.inputs.JobState;
import com.pulumi.aws.glue.outputs.JobCommand;
import com.pulumi.aws.glue.outputs.JobExecutionProperty;
import com.pulumi.aws.glue.outputs.JobNotificationProperty;
import com.pulumi.aws.glue.outputs.JobSourceControlDetails;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provides a Glue Job resource.
 * 
 * &gt; Glue functionality, such as monitoring and logging of jobs, is typically managed with the `default_arguments` argument. See the [Special Parameters Used by AWS Glue](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html) topic in the Glue developer guide for additional information.
 * 
 * ## Example Usage
 * 
 * ### Python Glue Job
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.aws.iam.Role;
 * import com.pulumi.aws.iam.RoleArgs;
 * import com.pulumi.aws.glue.Job;
 * import com.pulumi.aws.glue.JobArgs;
 * import com.pulumi.aws.glue.inputs.JobCommandArgs;
 * import com.pulumi.aws.glue.inputs.JobNotificationPropertyArgs;
 * import com.pulumi.aws.glue.inputs.JobExecutionPropertyArgs;
 * import com.pulumi.aws.s3.BucketObjectv2;
 * import com.pulumi.aws.s3.BucketObjectv2Args;
 * import com.pulumi.asset.FileAsset;
 * import static com.pulumi.codegen.internal.Serialization.*;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         // IAM role for Glue jobs
 *         var glueJobRole = new Role("glueJobRole", RoleArgs.builder()
 *             .name("glue-job-role")
 *             .assumeRolePolicy(serializeJson(
 *                 jsonObject(
 *                     jsonProperty("Version", "2012-10-17"),
 *                     jsonProperty("Statement", jsonArray(jsonObject(
 *                         jsonProperty("Action", "sts:AssumeRole"),
 *                         jsonProperty("Effect", "Allow"),
 *                         jsonProperty("Principal", jsonObject(
 *                             jsonProperty("Service", "glue.amazonaws.com")
 *                         ))
 *                     )))
 *                 )))
 *             .build());
 * 
 *         var etlJob = new Job("etlJob", JobArgs.builder()
 *             .name("example-etl-job")
 *             .description("An example Glue ETL job")
 *             .roleArn(glueJobRole.arn())
 *             .glueVersion("5.0")
 *             .maxRetries(0)
 *             .timeout(2880)
 *             .numberOfWorkers(2)
 *             .workerType("G.1X")
 *             .connections(example.name())
 *             .executionClass("STANDARD")
 *             .command(JobCommandArgs.builder()
 *                 .scriptLocation(String.format("s3://%s/jobs/etl_job.py", glueScripts.bucket()))
 *                 .name("glueetl")
 *                 .pythonVersion("3")
 *                 .build())
 *             .notificationProperty(JobNotificationPropertyArgs.builder()
 *                 .notifyDelayAfter(3)
 *                 .build())
 *             .defaultArguments(Map.ofEntries(
 *                 Map.entry("--job-language", "python"),
 *                 Map.entry("--continuous-log-logGroup", "/aws-glue/jobs"),
 *                 Map.entry("--enable-continuous-cloudwatch-log", "true"),
 *                 Map.entry("--enable-continuous-log-filter", "true"),
 *                 Map.entry("--enable-metrics", ""),
 *                 Map.entry("--enable-auto-scaling", "true")
 *             ))
 *             .executionProperty(JobExecutionPropertyArgs.builder()
 *                 .maxConcurrentRuns(1)
 *                 .build())
 *             .tags(Map.of("ManagedBy", "AWS"))
 *             .build());
 * 
 *         var glueEtlScript = new BucketObjectv2("glueEtlScript", BucketObjectv2Args.builder()
 *             .bucket(glueScripts.id())
 *             .key("jobs/etl_job.py")
 *             .source(new FileAsset("jobs/etl_job.py"))
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ### Pythonshell Job
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.aws.iam.Role;
 * import com.pulumi.aws.iam.RoleArgs;
 * import com.pulumi.aws.glue.Job;
 * import com.pulumi.aws.glue.JobArgs;
 * import com.pulumi.aws.glue.inputs.JobCommandArgs;
 * import com.pulumi.aws.glue.inputs.JobExecutionPropertyArgs;
 * import com.pulumi.aws.s3.BucketObjectv2;
 * import com.pulumi.aws.s3.BucketObjectv2Args;
 * import com.pulumi.asset.FileAsset;
 * import static com.pulumi.codegen.internal.Serialization.*;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         // IAM role for Glue jobs
 *         var glueJobRole = new Role("glueJobRole", RoleArgs.builder()
 *             .name("glue-job-role")
 *             .assumeRolePolicy(serializeJson(
 *                 jsonObject(
 *                     jsonProperty("Version", "2012-10-17"),
 *                     jsonProperty("Statement", jsonArray(jsonObject(
 *                         jsonProperty("Action", "sts:AssumeRole"),
 *                         jsonProperty("Effect", "Allow"),
 *                         jsonProperty("Principal", jsonObject(
 *                             jsonProperty("Service", "glue.amazonaws.com")
 *                         ))
 *                     )))
 *                 )))
 *             .build());
 * 
 *         var pythonShellJob = new Job("pythonShellJob", JobArgs.builder()
 *             .name("example-python-shell-job")
 *             .description("An example Python shell job")
 *             .roleArn(glueJobRole.arn())
 *             .maxCapacity(0.0625)
 *             .maxRetries(0)
 *             .timeout(2880)
 *             .connections(example.name())
 *             .command(JobCommandArgs.builder()
 *                 .scriptLocation(String.format("s3://%s/jobs/shell_job.py", glueScripts.bucket()))
 *                 .name("pythonshell")
 *                 .pythonVersion("3.9")
 *                 .build())
 *             .defaultArguments(Map.ofEntries(
 *                 Map.entry("--job-language", "python"),
 *                 Map.entry("--continuous-log-logGroup", "/aws-glue/jobs"),
 *                 Map.entry("--enable-continuous-cloudwatch-log", "true"),
 *                 Map.entry("library-set", "analytics")
 *             ))
 *             .executionProperty(JobExecutionPropertyArgs.builder()
 *                 .maxConcurrentRuns(1)
 *                 .build())
 *             .tags(Map.of("ManagedBy", "AWS"))
 *             .build());
 * 
 *         var pythonShellScript = new BucketObjectv2("pythonShellScript", BucketObjectv2Args.builder()
 *             .bucket(glueScripts.id())
 *             .key("jobs/shell_job.py")
 *             .source(new FileAsset("jobs/shell_job.py"))
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ### Ray Job
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.aws.glue.Job;
 * import com.pulumi.aws.glue.JobArgs;
 * import com.pulumi.aws.glue.inputs.JobCommandArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new Job("example", JobArgs.builder()
 *             .name("example")
 *             .roleArn(exampleAwsIamRole.arn())
 *             .glueVersion("4.0")
 *             .workerType("Z.2X")
 *             .command(JobCommandArgs.builder()
 *                 .name("glueray")
 *                 .pythonVersion("3.9")
 *                 .runtime("Ray2.4")
 *                 .scriptLocation(String.format("s3://%s/example.py", exampleAwsS3Bucket.bucket()))
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ### Scala Job
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.aws.glue.Job;
 * import com.pulumi.aws.glue.JobArgs;
 * import com.pulumi.aws.glue.inputs.JobCommandArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new Job("example", JobArgs.builder()
 *             .name("example")
 *             .roleArn(exampleAwsIamRole.arn())
 *             .command(JobCommandArgs.builder()
 *                 .scriptLocation(String.format("s3://%s/example.scala", exampleAwsS3Bucket.bucket()))
 *                 .build())
 *             .defaultArguments(Map.of("--job-language", "scala"))
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ### Streaming Job
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.aws.glue.Job;
 * import com.pulumi.aws.glue.JobArgs;
 * import com.pulumi.aws.glue.inputs.JobCommandArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new Job("example", JobArgs.builder()
 *             .name("example streaming job")
 *             .roleArn(exampleAwsIamRole.arn())
 *             .command(JobCommandArgs.builder()
 *                 .name("gluestreaming")
 *                 .scriptLocation(String.format("s3://%s/example.script", exampleAwsS3Bucket.bucket()))
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ### Enabling CloudWatch Logs and Metrics
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.aws.cloudwatch.LogGroup;
 * import com.pulumi.aws.cloudwatch.LogGroupArgs;
 * import com.pulumi.aws.glue.Job;
 * import com.pulumi.aws.glue.JobArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new LogGroup("example", LogGroupArgs.builder()
 *             .name("example")
 *             .retentionInDays(14)
 *             .build());
 * 
 *         var exampleJob = new Job("exampleJob", JobArgs.builder()
 *             .defaultArguments(Map.ofEntries(
 *                 Map.entry("--continuous-log-logGroup", example.name()),
 *                 Map.entry("--enable-continuous-cloudwatch-log", "true"),
 *                 Map.entry("--enable-continuous-log-filter", "true"),
 *                 Map.entry("--enable-metrics", "")
 *             ))
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ## Import
 * 
 * Using `pulumi import`, import Glue Jobs using `name`. For example:
 * 
 * ```sh
 * $ pulumi import aws:glue/job:Job MyJob MyJob
 * ```
 * 
 */
@ResourceType(type="aws:glue/job:Job")
public class Job extends com.pulumi.resources.CustomResource {
    /**
     * Amazon Resource Name (ARN) of Glue Job
     * 
     */
    @Export(name="arn", refs={String.class}, tree="[0]")
    private Output<String> arn;

    /**
     * @return Amazon Resource Name (ARN) of Glue Job
     * 
     */
    public Output<String> arn() {
        return this.arn;
    }
    /**
     * The command of the job. Defined below.
     * 
     */
    @Export(name="command", refs={JobCommand.class}, tree="[0]")
    private Output<JobCommand> command;

    /**
     * @return The command of the job. Defined below.
     * 
     */
    public Output<JobCommand> command() {
        return this.command;
    }
    /**
     * The list of connections used for this job.
     * 
     */
    @Export(name="connections", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> connections;

    /**
     * @return The list of connections used for this job.
     * 
     */
    public Output<Optional<List<String>>> connections() {
        return Codegen.optional(this.connections);
    }
    /**
     * The map of default arguments for this job. You can specify arguments here that your own job-execution script consumes, as well as arguments that AWS Glue itself consumes. For information about how to specify and consume your own Job arguments, see the [Calling AWS Glue APIs in Python](http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html) topic in the developer guide. For information about the key-value pairs that AWS Glue consumes to set up your job, see the [Special Parameters Used by AWS Glue](http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-glue-arguments.html) topic in the developer guide.
     * 
     */
    @Export(name="defaultArguments", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> defaultArguments;

    /**
     * @return The map of default arguments for this job. You can specify arguments here that your own job-execution script consumes, as well as arguments that AWS Glue itself consumes. For information about how to specify and consume your own Job arguments, see the [Calling AWS Glue APIs in Python](http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html) topic in the developer guide. For information about the key-value pairs that AWS Glue consumes to set up your job, see the [Special Parameters Used by AWS Glue](http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-glue-arguments.html) topic in the developer guide.
     * 
     */
    public Output<Optional<Map<String,String>>> defaultArguments() {
        return Codegen.optional(this.defaultArguments);
    }
    /**
     * Description of the job.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return Description of the job.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * Indicates whether the job is run with a standard or flexible execution class. The standard execution class is ideal for time-sensitive workloads that require fast job startup and dedicated resources. Valid value: `FLEX`, `STANDARD`.
     * 
     */
    @Export(name="executionClass", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> executionClass;

    /**
     * @return Indicates whether the job is run with a standard or flexible execution class. The standard execution class is ideal for time-sensitive workloads that require fast job startup and dedicated resources. Valid value: `FLEX`, `STANDARD`.
     * 
     */
    public Output<Optional<String>> executionClass() {
        return Codegen.optional(this.executionClass);
    }
    /**
     * Execution property of the job. Defined below.
     * 
     */
    @Export(name="executionProperty", refs={JobExecutionProperty.class}, tree="[0]")
    private Output<JobExecutionProperty> executionProperty;

    /**
     * @return Execution property of the job. Defined below.
     * 
     */
    public Output<JobExecutionProperty> executionProperty() {
        return this.executionProperty;
    }
    /**
     * The version of glue to use, for example &#34;1.0&#34;. Ray jobs should set this to 4.0 or greater. For information about available versions, see the [AWS Glue Release Notes](https://docs.aws.amazon.com/glue/latest/dg/release-notes.html).
     * 
     */
    @Export(name="glueVersion", refs={String.class}, tree="[0]")
    private Output<String> glueVersion;

    /**
     * @return The version of glue to use, for example &#34;1.0&#34;. Ray jobs should set this to 4.0 or greater. For information about available versions, see the [AWS Glue Release Notes](https://docs.aws.amazon.com/glue/latest/dg/release-notes.html).
     * 
     */
    public Output<String> glueVersion() {
        return this.glueVersion;
    }
    /**
     * Describes how a job was created. Valid values are `SCRIPT`, `NOTEBOOK` and `VISUAL`.
     * 
     */
    @Export(name="jobMode", refs={String.class}, tree="[0]")
    private Output<String> jobMode;

    /**
     * @return Describes how a job was created. Valid values are `SCRIPT`, `NOTEBOOK` and `VISUAL`.
     * 
     */
    public Output<String> jobMode() {
        return this.jobMode;
    }
    /**
     * Specifies whether job run queuing is enabled for the job runs for this job. A value of true means job run queuing is enabled for the job runs. If false or not populated, the job runs will not be considered for queueing.
     * 
     */
    @Export(name="jobRunQueuingEnabled", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> jobRunQueuingEnabled;

    /**
     * @return Specifies whether job run queuing is enabled for the job runs for this job. A value of true means job run queuing is enabled for the job runs. If false or not populated, the job runs will not be considered for queueing.
     * 
     */
    public Output<Optional<Boolean>> jobRunQueuingEnabled() {
        return Codegen.optional(this.jobRunQueuingEnabled);
    }
    /**
     * Specifies the day of the week and hour for the maintenance window for streaming jobs.
     * 
     */
    @Export(name="maintenanceWindow", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> maintenanceWindow;

    /**
     * @return Specifies the day of the week and hour for the maintenance window for streaming jobs.
     * 
     */
    public Output<Optional<String>> maintenanceWindow() {
        return Codegen.optional(this.maintenanceWindow);
    }
    /**
     * The maximum number of AWS Glue data processing units (DPUs) that can be allocated when this job runs. `Required` when `pythonshell` is set, accept either `0.0625` or `1.0`. Use `number_of_workers` and `worker_type` arguments instead with `glue_version` `2.0` and above.
     * 
     */
    @Export(name="maxCapacity", refs={Double.class}, tree="[0]")
    private Output<Double> maxCapacity;

    /**
     * @return The maximum number of AWS Glue data processing units (DPUs) that can be allocated when this job runs. `Required` when `pythonshell` is set, accept either `0.0625` or `1.0`. Use `number_of_workers` and `worker_type` arguments instead with `glue_version` `2.0` and above.
     * 
     */
    public Output<Double> maxCapacity() {
        return this.maxCapacity;
    }
    /**
     * The maximum number of times to retry this job if it fails.
     * 
     */
    @Export(name="maxRetries", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> maxRetries;

    /**
     * @return The maximum number of times to retry this job if it fails.
     * 
     */
    public Output<Optional<Integer>> maxRetries() {
        return Codegen.optional(this.maxRetries);
    }
    /**
     * The name you assign to this job. It must be unique in your account.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name you assign to this job. It must be unique in your account.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Non-overridable arguments for this job, specified as name-value pairs.
     * 
     */
    @Export(name="nonOverridableArguments", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> nonOverridableArguments;

    /**
     * @return Non-overridable arguments for this job, specified as name-value pairs.
     * 
     */
    public Output<Optional<Map<String,String>>> nonOverridableArguments() {
        return Codegen.optional(this.nonOverridableArguments);
    }
    /**
     * Notification property of the job. Defined below.
     * 
     */
    @Export(name="notificationProperty", refs={JobNotificationProperty.class}, tree="[0]")
    private Output<JobNotificationProperty> notificationProperty;

    /**
     * @return Notification property of the job. Defined below.
     * 
     */
    public Output<JobNotificationProperty> notificationProperty() {
        return this.notificationProperty;
    }
    /**
     * The number of workers of a defined workerType that are allocated when a job runs.
     * 
     */
    @Export(name="numberOfWorkers", refs={Integer.class}, tree="[0]")
    private Output<Integer> numberOfWorkers;

    /**
     * @return The number of workers of a defined workerType that are allocated when a job runs.
     * 
     */
    public Output<Integer> numberOfWorkers() {
        return this.numberOfWorkers;
    }
    /**
     * Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     * 
     */
    @Export(name="region", refs={String.class}, tree="[0]")
    private Output<String> region;

    /**
     * @return Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     * 
     */
    public Output<String> region() {
        return this.region;
    }
    /**
     * The ARN of the IAM role associated with this job.
     * 
     */
    @Export(name="roleArn", refs={String.class}, tree="[0]")
    private Output<String> roleArn;

    /**
     * @return The ARN of the IAM role associated with this job.
     * 
     */
    public Output<String> roleArn() {
        return this.roleArn;
    }
    /**
     * The name of the Security Configuration to be associated with the job.
     * 
     */
    @Export(name="securityConfiguration", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> securityConfiguration;

    /**
     * @return The name of the Security Configuration to be associated with the job.
     * 
     */
    public Output<Optional<String>> securityConfiguration() {
        return Codegen.optional(this.securityConfiguration);
    }
    /**
     * The details for a source control configuration for a job, allowing synchronization of job artifacts to or from a remote repository. Defined below.
     * 
     */
    @Export(name="sourceControlDetails", refs={JobSourceControlDetails.class}, tree="[0]")
    private Output</* @Nullable */ JobSourceControlDetails> sourceControlDetails;

    /**
     * @return The details for a source control configuration for a job, allowing synchronization of job artifacts to or from a remote repository. Defined below.
     * 
     */
    public Output<Optional<JobSourceControlDetails>> sourceControlDetails() {
        return Codegen.optional(this.sourceControlDetails);
    }
    /**
     * Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Export(name="tags", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Output<Optional<Map<String,String>>> tags() {
        return Codegen.optional(this.tags);
    }
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     */
    @Export(name="tagsAll", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> tagsAll;

    /**
     * @return A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     */
    public Output<Map<String,String>> tagsAll() {
        return this.tagsAll;
    }
    /**
     * The job timeout in minutes. The default is 2880 minutes (48 hours) for `glueetl` and `pythonshell` jobs, and null (unlimited) for `gluestreaming` jobs.
     * 
     */
    @Export(name="timeout", refs={Integer.class}, tree="[0]")
    private Output<Integer> timeout;

    /**
     * @return The job timeout in minutes. The default is 2880 minutes (48 hours) for `glueetl` and `pythonshell` jobs, and null (unlimited) for `gluestreaming` jobs.
     * 
     */
    public Output<Integer> timeout() {
        return this.timeout;
    }
    /**
     * The type of predefined worker that is allocated when a job runs. Valid values: `Standard`, `G.1X`, `G.2X`, `G.025X`, `G.4X`, `G.8X`, `G.12X`, `G.16X`, `R.1X`, `R.2X`, `R.4X`, `R.8X`, `Z.2X` (Ray jobs). See the [AWS documentation](https://docs.aws.amazon.com/glue/latest/dg/worker-types.html) for details.
     * 
     */
    @Export(name="workerType", refs={String.class}, tree="[0]")
    private Output<String> workerType;

    /**
     * @return The type of predefined worker that is allocated when a job runs. Valid values: `Standard`, `G.1X`, `G.2X`, `G.025X`, `G.4X`, `G.8X`, `G.12X`, `G.16X`, `R.1X`, `R.2X`, `R.4X`, `R.8X`, `Z.2X` (Ray jobs). See the [AWS documentation](https://docs.aws.amazon.com/glue/latest/dg/worker-types.html) for details.
     * 
     */
    public Output<String> workerType() {
        return this.workerType;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Job(java.lang.String name) {
        this(name, JobArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Job(java.lang.String name, JobArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Job(java.lang.String name, JobArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("aws:glue/job:Job", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Job(java.lang.String name, Output<java.lang.String> id, @Nullable JobState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("aws:glue/job:Job", name, state, makeResourceOptions(options, id), false);
    }

    private static JobArgs makeArgs(JobArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? JobArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Job get(java.lang.String name, Output<java.lang.String> id, @Nullable JobState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Job(name, id, state, options);
    }
}
