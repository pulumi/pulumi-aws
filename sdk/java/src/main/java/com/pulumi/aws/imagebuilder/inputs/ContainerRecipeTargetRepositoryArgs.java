// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.imagebuilder.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class ContainerRecipeTargetRepositoryArgs extends com.pulumi.resources.ResourceArgs {

    public static final ContainerRecipeTargetRepositoryArgs Empty = new ContainerRecipeTargetRepositoryArgs();

    /**
     * The name of the container repository where the output container image is stored. This name is prefixed by the repository location.
     * 
     */
    @Import(name="repositoryName", required=true)
    private Output<String> repositoryName;

    /**
     * @return The name of the container repository where the output container image is stored. This name is prefixed by the repository location.
     * 
     */
    public Output<String> repositoryName() {
        return this.repositoryName;
    }

    /**
     * The service in which this image is registered. Valid values: `ECR`.
     * 
     */
    @Import(name="service", required=true)
    private Output<String> service;

    /**
     * @return The service in which this image is registered. Valid values: `ECR`.
     * 
     */
    public Output<String> service() {
        return this.service;
    }

    private ContainerRecipeTargetRepositoryArgs() {}

    private ContainerRecipeTargetRepositoryArgs(ContainerRecipeTargetRepositoryArgs $) {
        this.repositoryName = $.repositoryName;
        this.service = $.service;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ContainerRecipeTargetRepositoryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ContainerRecipeTargetRepositoryArgs $;

        public Builder() {
            $ = new ContainerRecipeTargetRepositoryArgs();
        }

        public Builder(ContainerRecipeTargetRepositoryArgs defaults) {
            $ = new ContainerRecipeTargetRepositoryArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param repositoryName The name of the container repository where the output container image is stored. This name is prefixed by the repository location.
         * 
         * @return builder
         * 
         */
        public Builder repositoryName(Output<String> repositoryName) {
            $.repositoryName = repositoryName;
            return this;
        }

        /**
         * @param repositoryName The name of the container repository where the output container image is stored. This name is prefixed by the repository location.
         * 
         * @return builder
         * 
         */
        public Builder repositoryName(String repositoryName) {
            return repositoryName(Output.of(repositoryName));
        }

        /**
         * @param service The service in which this image is registered. Valid values: `ECR`.
         * 
         * @return builder
         * 
         */
        public Builder service(Output<String> service) {
            $.service = service;
            return this;
        }

        /**
         * @param service The service in which this image is registered. Valid values: `ECR`.
         * 
         * @return builder
         * 
         */
        public Builder service(String service) {
            return service(Output.of(service));
        }

        public ContainerRecipeTargetRepositoryArgs build() {
            if ($.repositoryName == null) {
                throw new MissingRequiredPropertyException("ContainerRecipeTargetRepositoryArgs", "repositoryName");
            }
            if ($.service == null) {
                throw new MissingRequiredPropertyException("ContainerRecipeTargetRepositoryArgs", "service");
            }
            return $;
        }
    }

}
