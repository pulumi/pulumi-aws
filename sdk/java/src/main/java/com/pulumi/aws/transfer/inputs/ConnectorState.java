// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.transfer.inputs;

import com.pulumi.aws.transfer.inputs.ConnectorAs2ConfigArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConnectorState extends com.pulumi.resources.ResourceArgs {

    public static final ConnectorState Empty = new ConnectorState();

    /**
     * The IAM Role which provides read and write access to the parent directory of the file location mentioned in the StartFileTransfer request.
     * 
     */
    @Import(name="accessRole")
    private @Nullable Output<String> accessRole;

    /**
     * @return The IAM Role which provides read and write access to the parent directory of the file location mentioned in the StartFileTransfer request.
     * 
     */
    public Optional<Output<String>> accessRole() {
        return Optional.ofNullable(this.accessRole);
    }

    /**
     * The ARN of the connector.
     * 
     */
    @Import(name="arn")
    private @Nullable Output<String> arn;

    /**
     * @return The ARN of the connector.
     * 
     */
    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    /**
     * The parameters to configure for the connector object. Fields documented below.
     * 
     */
    @Import(name="as2Config")
    private @Nullable Output<ConnectorAs2ConfigArgs> as2Config;

    /**
     * @return The parameters to configure for the connector object. Fields documented below.
     * 
     */
    public Optional<Output<ConnectorAs2ConfigArgs>> as2Config() {
        return Optional.ofNullable(this.as2Config);
    }

    /**
     * The unique identifier for the AS2 profile.
     * 
     */
    @Import(name="connectorId")
    private @Nullable Output<String> connectorId;

    /**
     * @return The unique identifier for the AS2 profile.
     * 
     */
    public Optional<Output<String>> connectorId() {
        return Optional.ofNullable(this.connectorId);
    }

    /**
     * The IAM Role which is required for allowing the connector to turn on CloudWatch logging for Amazon S3 events.
     * 
     */
    @Import(name="loggingRole")
    private @Nullable Output<String> loggingRole;

    /**
     * @return The IAM Role which is required for allowing the connector to turn on CloudWatch logging for Amazon S3 events.
     * 
     */
    public Optional<Output<String>> loggingRole() {
        return Optional.ofNullable(this.loggingRole);
    }

    /**
     * A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    /**
     * The URL of the partners AS2 endpoint.
     * 
     */
    @Import(name="url")
    private @Nullable Output<String> url;

    /**
     * @return The URL of the partners AS2 endpoint.
     * 
     */
    public Optional<Output<String>> url() {
        return Optional.ofNullable(this.url);
    }

    private ConnectorState() {}

    private ConnectorState(ConnectorState $) {
        this.accessRole = $.accessRole;
        this.arn = $.arn;
        this.as2Config = $.as2Config;
        this.connectorId = $.connectorId;
        this.loggingRole = $.loggingRole;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
        this.url = $.url;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectorState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectorState $;

        public Builder() {
            $ = new ConnectorState();
        }

        public Builder(ConnectorState defaults) {
            $ = new ConnectorState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessRole The IAM Role which provides read and write access to the parent directory of the file location mentioned in the StartFileTransfer request.
         * 
         * @return builder
         * 
         */
        public Builder accessRole(@Nullable Output<String> accessRole) {
            $.accessRole = accessRole;
            return this;
        }

        /**
         * @param accessRole The IAM Role which provides read and write access to the parent directory of the file location mentioned in the StartFileTransfer request.
         * 
         * @return builder
         * 
         */
        public Builder accessRole(String accessRole) {
            return accessRole(Output.of(accessRole));
        }

        /**
         * @param arn The ARN of the connector.
         * 
         * @return builder
         * 
         */
        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        /**
         * @param arn The ARN of the connector.
         * 
         * @return builder
         * 
         */
        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        /**
         * @param as2Config The parameters to configure for the connector object. Fields documented below.
         * 
         * @return builder
         * 
         */
        public Builder as2Config(@Nullable Output<ConnectorAs2ConfigArgs> as2Config) {
            $.as2Config = as2Config;
            return this;
        }

        /**
         * @param as2Config The parameters to configure for the connector object. Fields documented below.
         * 
         * @return builder
         * 
         */
        public Builder as2Config(ConnectorAs2ConfigArgs as2Config) {
            return as2Config(Output.of(as2Config));
        }

        /**
         * @param connectorId The unique identifier for the AS2 profile.
         * 
         * @return builder
         * 
         */
        public Builder connectorId(@Nullable Output<String> connectorId) {
            $.connectorId = connectorId;
            return this;
        }

        /**
         * @param connectorId The unique identifier for the AS2 profile.
         * 
         * @return builder
         * 
         */
        public Builder connectorId(String connectorId) {
            return connectorId(Output.of(connectorId));
        }

        /**
         * @param loggingRole The IAM Role which is required for allowing the connector to turn on CloudWatch logging for Amazon S3 events.
         * 
         * @return builder
         * 
         */
        public Builder loggingRole(@Nullable Output<String> loggingRole) {
            $.loggingRole = loggingRole;
            return this;
        }

        /**
         * @param loggingRole The IAM Role which is required for allowing the connector to turn on CloudWatch logging for Amazon S3 events.
         * 
         * @return builder
         * 
         */
        public Builder loggingRole(String loggingRole) {
            return loggingRole(Output.of(loggingRole));
        }

        /**
         * @param tags A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        /**
         * @param url The URL of the partners AS2 endpoint.
         * 
         * @return builder
         * 
         */
        public Builder url(@Nullable Output<String> url) {
            $.url = url;
            return this;
        }

        /**
         * @param url The URL of the partners AS2 endpoint.
         * 
         * @return builder
         * 
         */
        public Builder url(String url) {
            return url(Output.of(url));
        }

        public ConnectorState build() {
            return $;
        }
    }

}
