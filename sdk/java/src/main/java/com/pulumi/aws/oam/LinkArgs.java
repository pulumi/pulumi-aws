// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.oam;

import com.pulumi.aws.oam.inputs.LinkLinkConfigurationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LinkArgs extends com.pulumi.resources.ResourceArgs {

    public static final LinkArgs Empty = new LinkArgs();

    /**
     * Human-readable name to use to identify this source account when you are viewing data from it in the monitoring account.
     * 
     */
    @Import(name="labelTemplate", required=true)
    private Output<String> labelTemplate;

    /**
     * @return Human-readable name to use to identify this source account when you are viewing data from it in the monitoring account.
     * 
     */
    public Output<String> labelTemplate() {
        return this.labelTemplate;
    }

    /**
     * Configuration for creating filters that specify that only some metric namespaces or log groups are to be shared from the source account to the monitoring account. See `link_configuration` Block for details.
     * 
     */
    @Import(name="linkConfiguration")
    private @Nullable Output<LinkLinkConfigurationArgs> linkConfiguration;

    /**
     * @return Configuration for creating filters that specify that only some metric namespaces or log groups are to be shared from the source account to the monitoring account. See `link_configuration` Block for details.
     * 
     */
    public Optional<Output<LinkLinkConfigurationArgs>> linkConfiguration() {
        return Optional.ofNullable(this.linkConfiguration);
    }

    /**
     * Types of data that the source account shares with the monitoring account.
     * 
     */
    @Import(name="resourceTypes", required=true)
    private Output<List<String>> resourceTypes;

    /**
     * @return Types of data that the source account shares with the monitoring account.
     * 
     */
    public Output<List<String>> resourceTypes() {
        return this.resourceTypes;
    }

    /**
     * Identifier of the sink to use to create this link.
     * 
     * The following arguments are optional:
     * 
     */
    @Import(name="sinkIdentifier", required=true)
    private Output<String> sinkIdentifier;

    /**
     * @return Identifier of the sink to use to create this link.
     * 
     * The following arguments are optional:
     * 
     */
    public Output<String> sinkIdentifier() {
        return this.sinkIdentifier;
    }

    /**
     * A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private LinkArgs() {}

    private LinkArgs(LinkArgs $) {
        this.labelTemplate = $.labelTemplate;
        this.linkConfiguration = $.linkConfiguration;
        this.resourceTypes = $.resourceTypes;
        this.sinkIdentifier = $.sinkIdentifier;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LinkArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LinkArgs $;

        public Builder() {
            $ = new LinkArgs();
        }

        public Builder(LinkArgs defaults) {
            $ = new LinkArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param labelTemplate Human-readable name to use to identify this source account when you are viewing data from it in the monitoring account.
         * 
         * @return builder
         * 
         */
        public Builder labelTemplate(Output<String> labelTemplate) {
            $.labelTemplate = labelTemplate;
            return this;
        }

        /**
         * @param labelTemplate Human-readable name to use to identify this source account when you are viewing data from it in the monitoring account.
         * 
         * @return builder
         * 
         */
        public Builder labelTemplate(String labelTemplate) {
            return labelTemplate(Output.of(labelTemplate));
        }

        /**
         * @param linkConfiguration Configuration for creating filters that specify that only some metric namespaces or log groups are to be shared from the source account to the monitoring account. See `link_configuration` Block for details.
         * 
         * @return builder
         * 
         */
        public Builder linkConfiguration(@Nullable Output<LinkLinkConfigurationArgs> linkConfiguration) {
            $.linkConfiguration = linkConfiguration;
            return this;
        }

        /**
         * @param linkConfiguration Configuration for creating filters that specify that only some metric namespaces or log groups are to be shared from the source account to the monitoring account. See `link_configuration` Block for details.
         * 
         * @return builder
         * 
         */
        public Builder linkConfiguration(LinkLinkConfigurationArgs linkConfiguration) {
            return linkConfiguration(Output.of(linkConfiguration));
        }

        /**
         * @param resourceTypes Types of data that the source account shares with the monitoring account.
         * 
         * @return builder
         * 
         */
        public Builder resourceTypes(Output<List<String>> resourceTypes) {
            $.resourceTypes = resourceTypes;
            return this;
        }

        /**
         * @param resourceTypes Types of data that the source account shares with the monitoring account.
         * 
         * @return builder
         * 
         */
        public Builder resourceTypes(List<String> resourceTypes) {
            return resourceTypes(Output.of(resourceTypes));
        }

        /**
         * @param resourceTypes Types of data that the source account shares with the monitoring account.
         * 
         * @return builder
         * 
         */
        public Builder resourceTypes(String... resourceTypes) {
            return resourceTypes(List.of(resourceTypes));
        }

        /**
         * @param sinkIdentifier Identifier of the sink to use to create this link.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder sinkIdentifier(Output<String> sinkIdentifier) {
            $.sinkIdentifier = sinkIdentifier;
            return this;
        }

        /**
         * @param sinkIdentifier Identifier of the sink to use to create this link.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder sinkIdentifier(String sinkIdentifier) {
            return sinkIdentifier(Output.of(sinkIdentifier));
        }

        /**
         * @param tags A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public LinkArgs build() {
            if ($.labelTemplate == null) {
                throw new MissingRequiredPropertyException("LinkArgs", "labelTemplate");
            }
            if ($.resourceTypes == null) {
                throw new MissingRequiredPropertyException("LinkArgs", "resourceTypes");
            }
            if ($.sinkIdentifier == null) {
                throw new MissingRequiredPropertyException("LinkArgs", "sinkIdentifier");
            }
            return $;
        }
    }

}
