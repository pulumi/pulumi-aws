// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.elb.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class LoadBalancerHealthCheckArgs extends com.pulumi.resources.ResourceArgs {

    public static final LoadBalancerHealthCheckArgs Empty = new LoadBalancerHealthCheckArgs();

    /**
     * The number of checks before the instance is declared healthy.
     * 
     */
    @Import(name="healthyThreshold", required=true)
    private Output<Integer> healthyThreshold;

    /**
     * @return The number of checks before the instance is declared healthy.
     * 
     */
    public Output<Integer> healthyThreshold() {
        return this.healthyThreshold;
    }

    /**
     * The interval between checks.
     * 
     */
    @Import(name="interval", required=true)
    private Output<Integer> interval;

    /**
     * @return The interval between checks.
     * 
     */
    public Output<Integer> interval() {
        return this.interval;
    }

    /**
     * The target of the check. Valid pattern is &#34;${PROTOCOL}:${PORT}${PATH}&#34;, where PROTOCOL
     * values are:
     * 
     */
    @Import(name="target", required=true)
    private Output<String> target;

    /**
     * @return The target of the check. Valid pattern is &#34;${PROTOCOL}:${PORT}${PATH}&#34;, where PROTOCOL
     * values are:
     * 
     */
    public Output<String> target() {
        return this.target;
    }

    /**
     * The length of time before the check times out.
     * 
     */
    @Import(name="timeout", required=true)
    private Output<Integer> timeout;

    /**
     * @return The length of time before the check times out.
     * 
     */
    public Output<Integer> timeout() {
        return this.timeout;
    }

    /**
     * The number of checks before the instance is declared unhealthy.
     * 
     */
    @Import(name="unhealthyThreshold", required=true)
    private Output<Integer> unhealthyThreshold;

    /**
     * @return The number of checks before the instance is declared unhealthy.
     * 
     */
    public Output<Integer> unhealthyThreshold() {
        return this.unhealthyThreshold;
    }

    private LoadBalancerHealthCheckArgs() {}

    private LoadBalancerHealthCheckArgs(LoadBalancerHealthCheckArgs $) {
        this.healthyThreshold = $.healthyThreshold;
        this.interval = $.interval;
        this.target = $.target;
        this.timeout = $.timeout;
        this.unhealthyThreshold = $.unhealthyThreshold;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LoadBalancerHealthCheckArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LoadBalancerHealthCheckArgs $;

        public Builder() {
            $ = new LoadBalancerHealthCheckArgs();
        }

        public Builder(LoadBalancerHealthCheckArgs defaults) {
            $ = new LoadBalancerHealthCheckArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param healthyThreshold The number of checks before the instance is declared healthy.
         * 
         * @return builder
         * 
         */
        public Builder healthyThreshold(Output<Integer> healthyThreshold) {
            $.healthyThreshold = healthyThreshold;
            return this;
        }

        /**
         * @param healthyThreshold The number of checks before the instance is declared healthy.
         * 
         * @return builder
         * 
         */
        public Builder healthyThreshold(Integer healthyThreshold) {
            return healthyThreshold(Output.of(healthyThreshold));
        }

        /**
         * @param interval The interval between checks.
         * 
         * @return builder
         * 
         */
        public Builder interval(Output<Integer> interval) {
            $.interval = interval;
            return this;
        }

        /**
         * @param interval The interval between checks.
         * 
         * @return builder
         * 
         */
        public Builder interval(Integer interval) {
            return interval(Output.of(interval));
        }

        /**
         * @param target The target of the check. Valid pattern is &#34;${PROTOCOL}:${PORT}${PATH}&#34;, where PROTOCOL
         * values are:
         * 
         * @return builder
         * 
         */
        public Builder target(Output<String> target) {
            $.target = target;
            return this;
        }

        /**
         * @param target The target of the check. Valid pattern is &#34;${PROTOCOL}:${PORT}${PATH}&#34;, where PROTOCOL
         * values are:
         * 
         * @return builder
         * 
         */
        public Builder target(String target) {
            return target(Output.of(target));
        }

        /**
         * @param timeout The length of time before the check times out.
         * 
         * @return builder
         * 
         */
        public Builder timeout(Output<Integer> timeout) {
            $.timeout = timeout;
            return this;
        }

        /**
         * @param timeout The length of time before the check times out.
         * 
         * @return builder
         * 
         */
        public Builder timeout(Integer timeout) {
            return timeout(Output.of(timeout));
        }

        /**
         * @param unhealthyThreshold The number of checks before the instance is declared unhealthy.
         * 
         * @return builder
         * 
         */
        public Builder unhealthyThreshold(Output<Integer> unhealthyThreshold) {
            $.unhealthyThreshold = unhealthyThreshold;
            return this;
        }

        /**
         * @param unhealthyThreshold The number of checks before the instance is declared unhealthy.
         * 
         * @return builder
         * 
         */
        public Builder unhealthyThreshold(Integer unhealthyThreshold) {
            return unhealthyThreshold(Output.of(unhealthyThreshold));
        }

        public LoadBalancerHealthCheckArgs build() {
            $.healthyThreshold = Objects.requireNonNull($.healthyThreshold, "expected parameter 'healthyThreshold' to be non-null");
            $.interval = Objects.requireNonNull($.interval, "expected parameter 'interval' to be non-null");
            $.target = Objects.requireNonNull($.target, "expected parameter 'target' to be non-null");
            $.timeout = Objects.requireNonNull($.timeout, "expected parameter 'timeout' to be non-null");
            $.unhealthyThreshold = Objects.requireNonNull($.unhealthyThreshold, "expected parameter 'unhealthyThreshold' to be non-null");
            return $;
        }
    }

}
