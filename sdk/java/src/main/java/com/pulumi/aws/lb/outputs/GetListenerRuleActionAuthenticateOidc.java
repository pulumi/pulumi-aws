// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.lb.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetListenerRuleActionAuthenticateOidc {
    /**
     * @return Set of additional parameters for the request.
     * Detailed below.
     * 
     */
    private Map<String,String> authenticationRequestExtraParams;
    /**
     * @return The authorization endpoint of the IdP.
     * 
     */
    private String authorizationEndpoint;
    /**
     * @return OAuth 2.0 client identifier.
     * 
     */
    private String clientId;
    /**
     * @return OIDC issuer identifier of the IdP.
     * 
     */
    private String issuer;
    /**
     * @return Behavior when the client is not authenticated.
     * 
     */
    private String onUnauthenticatedRequest;
    /**
     * @return Set of user claims requested.
     * 
     */
    private String scope;
    /**
     * @return Name of the cookie used to maintain session information.
     * 
     */
    private String sessionCookieName;
    /**
     * @return Maximum duration of the authentication session in seconds.
     * 
     */
    private Integer sessionTimeout;
    /**
     * @return The token endpoint of the IdP.
     * 
     */
    private String tokenEndpoint;
    /**
     * @return The user info endpoint of the IdP.
     * 
     */
    private String userInfoEndpoint;

    private GetListenerRuleActionAuthenticateOidc() {}
    /**
     * @return Set of additional parameters for the request.
     * Detailed below.
     * 
     */
    public Map<String,String> authenticationRequestExtraParams() {
        return this.authenticationRequestExtraParams;
    }
    /**
     * @return The authorization endpoint of the IdP.
     * 
     */
    public String authorizationEndpoint() {
        return this.authorizationEndpoint;
    }
    /**
     * @return OAuth 2.0 client identifier.
     * 
     */
    public String clientId() {
        return this.clientId;
    }
    /**
     * @return OIDC issuer identifier of the IdP.
     * 
     */
    public String issuer() {
        return this.issuer;
    }
    /**
     * @return Behavior when the client is not authenticated.
     * 
     */
    public String onUnauthenticatedRequest() {
        return this.onUnauthenticatedRequest;
    }
    /**
     * @return Set of user claims requested.
     * 
     */
    public String scope() {
        return this.scope;
    }
    /**
     * @return Name of the cookie used to maintain session information.
     * 
     */
    public String sessionCookieName() {
        return this.sessionCookieName;
    }
    /**
     * @return Maximum duration of the authentication session in seconds.
     * 
     */
    public Integer sessionTimeout() {
        return this.sessionTimeout;
    }
    /**
     * @return The token endpoint of the IdP.
     * 
     */
    public String tokenEndpoint() {
        return this.tokenEndpoint;
    }
    /**
     * @return The user info endpoint of the IdP.
     * 
     */
    public String userInfoEndpoint() {
        return this.userInfoEndpoint;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetListenerRuleActionAuthenticateOidc defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Map<String,String> authenticationRequestExtraParams;
        private String authorizationEndpoint;
        private String clientId;
        private String issuer;
        private String onUnauthenticatedRequest;
        private String scope;
        private String sessionCookieName;
        private Integer sessionTimeout;
        private String tokenEndpoint;
        private String userInfoEndpoint;
        public Builder() {}
        public Builder(GetListenerRuleActionAuthenticateOidc defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authenticationRequestExtraParams = defaults.authenticationRequestExtraParams;
    	      this.authorizationEndpoint = defaults.authorizationEndpoint;
    	      this.clientId = defaults.clientId;
    	      this.issuer = defaults.issuer;
    	      this.onUnauthenticatedRequest = defaults.onUnauthenticatedRequest;
    	      this.scope = defaults.scope;
    	      this.sessionCookieName = defaults.sessionCookieName;
    	      this.sessionTimeout = defaults.sessionTimeout;
    	      this.tokenEndpoint = defaults.tokenEndpoint;
    	      this.userInfoEndpoint = defaults.userInfoEndpoint;
        }

        @CustomType.Setter
        public Builder authenticationRequestExtraParams(Map<String,String> authenticationRequestExtraParams) {
            if (authenticationRequestExtraParams == null) {
              throw new MissingRequiredPropertyException("GetListenerRuleActionAuthenticateOidc", "authenticationRequestExtraParams");
            }
            this.authenticationRequestExtraParams = authenticationRequestExtraParams;
            return this;
        }
        @CustomType.Setter
        public Builder authorizationEndpoint(String authorizationEndpoint) {
            if (authorizationEndpoint == null) {
              throw new MissingRequiredPropertyException("GetListenerRuleActionAuthenticateOidc", "authorizationEndpoint");
            }
            this.authorizationEndpoint = authorizationEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder clientId(String clientId) {
            if (clientId == null) {
              throw new MissingRequiredPropertyException("GetListenerRuleActionAuthenticateOidc", "clientId");
            }
            this.clientId = clientId;
            return this;
        }
        @CustomType.Setter
        public Builder issuer(String issuer) {
            if (issuer == null) {
              throw new MissingRequiredPropertyException("GetListenerRuleActionAuthenticateOidc", "issuer");
            }
            this.issuer = issuer;
            return this;
        }
        @CustomType.Setter
        public Builder onUnauthenticatedRequest(String onUnauthenticatedRequest) {
            if (onUnauthenticatedRequest == null) {
              throw new MissingRequiredPropertyException("GetListenerRuleActionAuthenticateOidc", "onUnauthenticatedRequest");
            }
            this.onUnauthenticatedRequest = onUnauthenticatedRequest;
            return this;
        }
        @CustomType.Setter
        public Builder scope(String scope) {
            if (scope == null) {
              throw new MissingRequiredPropertyException("GetListenerRuleActionAuthenticateOidc", "scope");
            }
            this.scope = scope;
            return this;
        }
        @CustomType.Setter
        public Builder sessionCookieName(String sessionCookieName) {
            if (sessionCookieName == null) {
              throw new MissingRequiredPropertyException("GetListenerRuleActionAuthenticateOidc", "sessionCookieName");
            }
            this.sessionCookieName = sessionCookieName;
            return this;
        }
        @CustomType.Setter
        public Builder sessionTimeout(Integer sessionTimeout) {
            if (sessionTimeout == null) {
              throw new MissingRequiredPropertyException("GetListenerRuleActionAuthenticateOidc", "sessionTimeout");
            }
            this.sessionTimeout = sessionTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder tokenEndpoint(String tokenEndpoint) {
            if (tokenEndpoint == null) {
              throw new MissingRequiredPropertyException("GetListenerRuleActionAuthenticateOidc", "tokenEndpoint");
            }
            this.tokenEndpoint = tokenEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder userInfoEndpoint(String userInfoEndpoint) {
            if (userInfoEndpoint == null) {
              throw new MissingRequiredPropertyException("GetListenerRuleActionAuthenticateOidc", "userInfoEndpoint");
            }
            this.userInfoEndpoint = userInfoEndpoint;
            return this;
        }
        public GetListenerRuleActionAuthenticateOidc build() {
            final var _resultValue = new GetListenerRuleActionAuthenticateOidc();
            _resultValue.authenticationRequestExtraParams = authenticationRequestExtraParams;
            _resultValue.authorizationEndpoint = authorizationEndpoint;
            _resultValue.clientId = clientId;
            _resultValue.issuer = issuer;
            _resultValue.onUnauthenticatedRequest = onUnauthenticatedRequest;
            _resultValue.scope = scope;
            _resultValue.sessionCookieName = sessionCookieName;
            _resultValue.sessionTimeout = sessionTimeout;
            _resultValue.tokenEndpoint = tokenEndpoint;
            _resultValue.userInfoEndpoint = userInfoEndpoint;
            return _resultValue;
        }
    }
}
