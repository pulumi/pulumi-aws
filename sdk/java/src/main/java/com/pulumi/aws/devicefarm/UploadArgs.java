// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.devicefarm;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UploadArgs extends com.pulumi.resources.ResourceArgs {

    public static final UploadArgs Empty = new UploadArgs();

    @Import(name="contentType")
    private @Nullable Output<String> contentType;

    public Optional<Output<String>> contentType() {
        return Optional.ofNullable(this.contentType);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="projectArn", required=true)
    private Output<String> projectArn;

    public Output<String> projectArn() {
        return this.projectArn;
    }

    @Import(name="type", required=true)
    private Output<String> type;

    public Output<String> type() {
        return this.type;
    }

    private UploadArgs() {}

    private UploadArgs(UploadArgs $) {
        this.contentType = $.contentType;
        this.name = $.name;
        this.projectArn = $.projectArn;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UploadArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UploadArgs $;

        public Builder() {
            $ = new UploadArgs();
        }

        public Builder(UploadArgs defaults) {
            $ = new UploadArgs(Objects.requireNonNull(defaults));
        }

        public Builder contentType(@Nullable Output<String> contentType) {
            $.contentType = contentType;
            return this;
        }

        public Builder contentType(String contentType) {
            return contentType(Output.of(contentType));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder projectArn(Output<String> projectArn) {
            $.projectArn = projectArn;
            return this;
        }

        public Builder projectArn(String projectArn) {
            return projectArn(Output.of(projectArn));
        }

        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        public Builder type(String type) {
            return type(Output.of(type));
        }

        public UploadArgs build() {
            $.projectArn = Objects.requireNonNull($.projectArn, "expected parameter 'projectArn' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
