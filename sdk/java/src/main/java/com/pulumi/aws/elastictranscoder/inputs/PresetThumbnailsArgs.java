// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.elastictranscoder.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PresetThumbnailsArgs extends com.pulumi.resources.ResourceArgs {

    public static final PresetThumbnailsArgs Empty = new PresetThumbnailsArgs();

    @Import(name="aspectRatio")
    private @Nullable Output<String> aspectRatio;

    public Optional<Output<String>> aspectRatio() {
        return Optional.ofNullable(this.aspectRatio);
    }

    @Import(name="format")
    private @Nullable Output<String> format;

    public Optional<Output<String>> format() {
        return Optional.ofNullable(this.format);
    }

    @Import(name="interval")
    private @Nullable Output<String> interval;

    public Optional<Output<String>> interval() {
        return Optional.ofNullable(this.interval);
    }

    @Import(name="maxHeight")
    private @Nullable Output<String> maxHeight;

    public Optional<Output<String>> maxHeight() {
        return Optional.ofNullable(this.maxHeight);
    }

    @Import(name="maxWidth")
    private @Nullable Output<String> maxWidth;

    public Optional<Output<String>> maxWidth() {
        return Optional.ofNullable(this.maxWidth);
    }

    @Import(name="paddingPolicy")
    private @Nullable Output<String> paddingPolicy;

    public Optional<Output<String>> paddingPolicy() {
        return Optional.ofNullable(this.paddingPolicy);
    }

    @Import(name="resolution")
    private @Nullable Output<String> resolution;

    public Optional<Output<String>> resolution() {
        return Optional.ofNullable(this.resolution);
    }

    @Import(name="sizingPolicy")
    private @Nullable Output<String> sizingPolicy;

    public Optional<Output<String>> sizingPolicy() {
        return Optional.ofNullable(this.sizingPolicy);
    }

    private PresetThumbnailsArgs() {}

    private PresetThumbnailsArgs(PresetThumbnailsArgs $) {
        this.aspectRatio = $.aspectRatio;
        this.format = $.format;
        this.interval = $.interval;
        this.maxHeight = $.maxHeight;
        this.maxWidth = $.maxWidth;
        this.paddingPolicy = $.paddingPolicy;
        this.resolution = $.resolution;
        this.sizingPolicy = $.sizingPolicy;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PresetThumbnailsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PresetThumbnailsArgs $;

        public Builder() {
            $ = new PresetThumbnailsArgs();
        }

        public Builder(PresetThumbnailsArgs defaults) {
            $ = new PresetThumbnailsArgs(Objects.requireNonNull(defaults));
        }

        public Builder aspectRatio(@Nullable Output<String> aspectRatio) {
            $.aspectRatio = aspectRatio;
            return this;
        }

        public Builder aspectRatio(String aspectRatio) {
            return aspectRatio(Output.of(aspectRatio));
        }

        public Builder format(@Nullable Output<String> format) {
            $.format = format;
            return this;
        }

        public Builder format(String format) {
            return format(Output.of(format));
        }

        public Builder interval(@Nullable Output<String> interval) {
            $.interval = interval;
            return this;
        }

        public Builder interval(String interval) {
            return interval(Output.of(interval));
        }

        public Builder maxHeight(@Nullable Output<String> maxHeight) {
            $.maxHeight = maxHeight;
            return this;
        }

        public Builder maxHeight(String maxHeight) {
            return maxHeight(Output.of(maxHeight));
        }

        public Builder maxWidth(@Nullable Output<String> maxWidth) {
            $.maxWidth = maxWidth;
            return this;
        }

        public Builder maxWidth(String maxWidth) {
            return maxWidth(Output.of(maxWidth));
        }

        public Builder paddingPolicy(@Nullable Output<String> paddingPolicy) {
            $.paddingPolicy = paddingPolicy;
            return this;
        }

        public Builder paddingPolicy(String paddingPolicy) {
            return paddingPolicy(Output.of(paddingPolicy));
        }

        public Builder resolution(@Nullable Output<String> resolution) {
            $.resolution = resolution;
            return this;
        }

        public Builder resolution(String resolution) {
            return resolution(Output.of(resolution));
        }

        public Builder sizingPolicy(@Nullable Output<String> sizingPolicy) {
            $.sizingPolicy = sizingPolicy;
            return this;
        }

        public Builder sizingPolicy(String sizingPolicy) {
            return sizingPolicy(Output.of(sizingPolicy));
        }

        public PresetThumbnailsArgs build() {
            return $;
        }
    }

}
