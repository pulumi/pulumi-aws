// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.outputs;

import com.pulumi.aws.quicksight.outputs.AggregationFunction;
import com.pulumi.aws.quicksight.outputs.Column;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ColumnSort {
    private @Nullable AggregationFunction aggregationFunction;
    private String direction;
    private Column sortBy;

    private ColumnSort() {}
    public Optional<AggregationFunction> aggregationFunction() {
        return Optional.ofNullable(this.aggregationFunction);
    }
    public String direction() {
        return this.direction;
    }
    public Column sortBy() {
        return this.sortBy;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ColumnSort defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable AggregationFunction aggregationFunction;
        private String direction;
        private Column sortBy;
        public Builder() {}
        public Builder(ColumnSort defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aggregationFunction = defaults.aggregationFunction;
    	      this.direction = defaults.direction;
    	      this.sortBy = defaults.sortBy;
        }

        @CustomType.Setter
        public Builder aggregationFunction(@Nullable AggregationFunction aggregationFunction) {

            this.aggregationFunction = aggregationFunction;
            return this;
        }
        @CustomType.Setter
        public Builder direction(String direction) {
            if (direction == null) {
              throw new MissingRequiredPropertyException("ColumnSort", "direction");
            }
            this.direction = direction;
            return this;
        }
        @CustomType.Setter
        public Builder sortBy(Column sortBy) {
            if (sortBy == null) {
              throw new MissingRequiredPropertyException("ColumnSort", "sortBy");
            }
            this.sortBy = sortBy;
            return this;
        }
        public ColumnSort build() {
            final var _resultValue = new ColumnSort();
            _resultValue.aggregationFunction = aggregationFunction;
            _resultValue.direction = direction;
            _resultValue.sortBy = sortBy;
            return _resultValue;
        }
    }
}
