// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.kinesis.inputs;

import com.pulumi.aws.kinesis.inputs.FirehoseDeliveryStreamSnowflakeConfigurationCloudwatchLoggingOptionsArgs;
import com.pulumi.aws.kinesis.inputs.FirehoseDeliveryStreamSnowflakeConfigurationProcessingConfigurationArgs;
import com.pulumi.aws.kinesis.inputs.FirehoseDeliveryStreamSnowflakeConfigurationS3ConfigurationArgs;
import com.pulumi.aws.kinesis.inputs.FirehoseDeliveryStreamSnowflakeConfigurationSecretsManagerConfigurationArgs;
import com.pulumi.aws.kinesis.inputs.FirehoseDeliveryStreamSnowflakeConfigurationSnowflakeRoleConfigurationArgs;
import com.pulumi.aws.kinesis.inputs.FirehoseDeliveryStreamSnowflakeConfigurationSnowflakeVpcConfigurationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FirehoseDeliveryStreamSnowflakeConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final FirehoseDeliveryStreamSnowflakeConfigurationArgs Empty = new FirehoseDeliveryStreamSnowflakeConfigurationArgs();

    /**
     * The URL of the Snowflake account. Format: https://[account_identifier].snowflakecomputing.com.
     * 
     */
    @Import(name="accountUrl", required=true)
    private Output<String> accountUrl;

    /**
     * @return The URL of the Snowflake account. Format: https://[account_identifier].snowflakecomputing.com.
     * 
     */
    public Output<String> accountUrl() {
        return this.accountUrl;
    }

    /**
     * Buffer incoming data for the specified period of time, in seconds between 0 to 900, before delivering it to the destination.  The default value is 0s.
     * 
     */
    @Import(name="bufferingInterval")
    private @Nullable Output<Integer> bufferingInterval;

    /**
     * @return Buffer incoming data for the specified period of time, in seconds between 0 to 900, before delivering it to the destination.  The default value is 0s.
     * 
     */
    public Optional<Output<Integer>> bufferingInterval() {
        return Optional.ofNullable(this.bufferingInterval);
    }

    /**
     * Buffer incoming data to the specified size, in MBs between 1 to 128, before delivering it to the destination.  The default value is 1MB.
     * 
     */
    @Import(name="bufferingSize")
    private @Nullable Output<Integer> bufferingSize;

    /**
     * @return Buffer incoming data to the specified size, in MBs between 1 to 128, before delivering it to the destination.  The default value is 1MB.
     * 
     */
    public Optional<Output<Integer>> bufferingSize() {
        return Optional.ofNullable(this.bufferingSize);
    }

    /**
     * The CloudWatch Logging Options for the delivery stream. See `cloudwatch_logging_options` block below for details.
     * 
     */
    @Import(name="cloudwatchLoggingOptions")
    private @Nullable Output<FirehoseDeliveryStreamSnowflakeConfigurationCloudwatchLoggingOptionsArgs> cloudwatchLoggingOptions;

    /**
     * @return The CloudWatch Logging Options for the delivery stream. See `cloudwatch_logging_options` block below for details.
     * 
     */
    public Optional<Output<FirehoseDeliveryStreamSnowflakeConfigurationCloudwatchLoggingOptionsArgs>> cloudwatchLoggingOptions() {
        return Optional.ofNullable(this.cloudwatchLoggingOptions);
    }

    /**
     * The name of the content column.
     * 
     */
    @Import(name="contentColumnName")
    private @Nullable Output<String> contentColumnName;

    /**
     * @return The name of the content column.
     * 
     */
    public Optional<Output<String>> contentColumnName() {
        return Optional.ofNullable(this.contentColumnName);
    }

    /**
     * The data loading option.
     * 
     */
    @Import(name="dataLoadingOption")
    private @Nullable Output<String> dataLoadingOption;

    /**
     * @return The data loading option.
     * 
     */
    public Optional<Output<String>> dataLoadingOption() {
        return Optional.ofNullable(this.dataLoadingOption);
    }

    /**
     * The Snowflake database name.
     * 
     */
    @Import(name="database", required=true)
    private Output<String> database;

    /**
     * @return The Snowflake database name.
     * 
     */
    public Output<String> database() {
        return this.database;
    }

    /**
     * The passphrase for the private key.
     * 
     */
    @Import(name="keyPassphrase")
    private @Nullable Output<String> keyPassphrase;

    /**
     * @return The passphrase for the private key.
     * 
     */
    public Optional<Output<String>> keyPassphrase() {
        return Optional.ofNullable(this.keyPassphrase);
    }

    /**
     * The name of the metadata column.
     * 
     */
    @Import(name="metadataColumnName")
    private @Nullable Output<String> metadataColumnName;

    /**
     * @return The name of the metadata column.
     * 
     */
    public Optional<Output<String>> metadataColumnName() {
        return Optional.ofNullable(this.metadataColumnName);
    }

    /**
     * The private key for authentication. This value is required if `secrets_manager_configuration` is not provided.
     * 
     */
    @Import(name="privateKey")
    private @Nullable Output<String> privateKey;

    /**
     * @return The private key for authentication. This value is required if `secrets_manager_configuration` is not provided.
     * 
     */
    public Optional<Output<String>> privateKey() {
        return Optional.ofNullable(this.privateKey);
    }

    /**
     * The processing configuration. See `processing_configuration` block below for details.
     * 
     */
    @Import(name="processingConfiguration")
    private @Nullable Output<FirehoseDeliveryStreamSnowflakeConfigurationProcessingConfigurationArgs> processingConfiguration;

    /**
     * @return The processing configuration. See `processing_configuration` block below for details.
     * 
     */
    public Optional<Output<FirehoseDeliveryStreamSnowflakeConfigurationProcessingConfigurationArgs>> processingConfiguration() {
        return Optional.ofNullable(this.processingConfiguration);
    }

    /**
     * After an initial failure to deliver to Snowflake, the total amount of time, in seconds between 0 to 7200, during which Firehose re-attempts delivery (including the first attempt).  After this time has elapsed, the failed documents are written to Amazon S3.  The default value is 60s.  There will be no retry if the value is 0.
     * 
     */
    @Import(name="retryDuration")
    private @Nullable Output<Integer> retryDuration;

    /**
     * @return After an initial failure to deliver to Snowflake, the total amount of time, in seconds between 0 to 7200, during which Firehose re-attempts delivery (including the first attempt).  After this time has elapsed, the failed documents are written to Amazon S3.  The default value is 60s.  There will be no retry if the value is 0.
     * 
     */
    public Optional<Output<Integer>> retryDuration() {
        return Optional.ofNullable(this.retryDuration);
    }

    /**
     * The ARN of the IAM role.
     * 
     */
    @Import(name="roleArn", required=true)
    private Output<String> roleArn;

    /**
     * @return The ARN of the IAM role.
     * 
     */
    public Output<String> roleArn() {
        return this.roleArn;
    }

    /**
     * The S3 backup mode.
     * 
     */
    @Import(name="s3BackupMode")
    private @Nullable Output<String> s3BackupMode;

    /**
     * @return The S3 backup mode.
     * 
     */
    public Optional<Output<String>> s3BackupMode() {
        return Optional.ofNullable(this.s3BackupMode);
    }

    /**
     * The S3 configuration. See `s3_configuration` block below for details.
     * 
     */
    @Import(name="s3Configuration", required=true)
    private Output<FirehoseDeliveryStreamSnowflakeConfigurationS3ConfigurationArgs> s3Configuration;

    /**
     * @return The S3 configuration. See `s3_configuration` block below for details.
     * 
     */
    public Output<FirehoseDeliveryStreamSnowflakeConfigurationS3ConfigurationArgs> s3Configuration() {
        return this.s3Configuration;
    }

    /**
     * The Snowflake schema name.
     * 
     */
    @Import(name="schema", required=true)
    private Output<String> schema;

    /**
     * @return The Snowflake schema name.
     * 
     */
    public Output<String> schema() {
        return this.schema;
    }

    /**
     * The Secrets Manager configuration. See `secrets_manager_configuration` block below for details. This value is required if `user` and `private_key` are not provided.
     * 
     */
    @Import(name="secretsManagerConfiguration")
    private @Nullable Output<FirehoseDeliveryStreamSnowflakeConfigurationSecretsManagerConfigurationArgs> secretsManagerConfiguration;

    /**
     * @return The Secrets Manager configuration. See `secrets_manager_configuration` block below for details. This value is required if `user` and `private_key` are not provided.
     * 
     */
    public Optional<Output<FirehoseDeliveryStreamSnowflakeConfigurationSecretsManagerConfigurationArgs>> secretsManagerConfiguration() {
        return Optional.ofNullable(this.secretsManagerConfiguration);
    }

    /**
     * The configuration for Snowflake role.
     * 
     */
    @Import(name="snowflakeRoleConfiguration")
    private @Nullable Output<FirehoseDeliveryStreamSnowflakeConfigurationSnowflakeRoleConfigurationArgs> snowflakeRoleConfiguration;

    /**
     * @return The configuration for Snowflake role.
     * 
     */
    public Optional<Output<FirehoseDeliveryStreamSnowflakeConfigurationSnowflakeRoleConfigurationArgs>> snowflakeRoleConfiguration() {
        return Optional.ofNullable(this.snowflakeRoleConfiguration);
    }

    /**
     * The VPC configuration for Snowflake.
     * 
     */
    @Import(name="snowflakeVpcConfiguration")
    private @Nullable Output<FirehoseDeliveryStreamSnowflakeConfigurationSnowflakeVpcConfigurationArgs> snowflakeVpcConfiguration;

    /**
     * @return The VPC configuration for Snowflake.
     * 
     */
    public Optional<Output<FirehoseDeliveryStreamSnowflakeConfigurationSnowflakeVpcConfigurationArgs>> snowflakeVpcConfiguration() {
        return Optional.ofNullable(this.snowflakeVpcConfiguration);
    }

    /**
     * The Snowflake table name.
     * 
     */
    @Import(name="table", required=true)
    private Output<String> table;

    /**
     * @return The Snowflake table name.
     * 
     */
    public Output<String> table() {
        return this.table;
    }

    /**
     * The user for authentication. This value is required if `secrets_manager_configuration` is not provided.
     * 
     */
    @Import(name="user")
    private @Nullable Output<String> user;

    /**
     * @return The user for authentication. This value is required if `secrets_manager_configuration` is not provided.
     * 
     */
    public Optional<Output<String>> user() {
        return Optional.ofNullable(this.user);
    }

    private FirehoseDeliveryStreamSnowflakeConfigurationArgs() {}

    private FirehoseDeliveryStreamSnowflakeConfigurationArgs(FirehoseDeliveryStreamSnowflakeConfigurationArgs $) {
        this.accountUrl = $.accountUrl;
        this.bufferingInterval = $.bufferingInterval;
        this.bufferingSize = $.bufferingSize;
        this.cloudwatchLoggingOptions = $.cloudwatchLoggingOptions;
        this.contentColumnName = $.contentColumnName;
        this.dataLoadingOption = $.dataLoadingOption;
        this.database = $.database;
        this.keyPassphrase = $.keyPassphrase;
        this.metadataColumnName = $.metadataColumnName;
        this.privateKey = $.privateKey;
        this.processingConfiguration = $.processingConfiguration;
        this.retryDuration = $.retryDuration;
        this.roleArn = $.roleArn;
        this.s3BackupMode = $.s3BackupMode;
        this.s3Configuration = $.s3Configuration;
        this.schema = $.schema;
        this.secretsManagerConfiguration = $.secretsManagerConfiguration;
        this.snowflakeRoleConfiguration = $.snowflakeRoleConfiguration;
        this.snowflakeVpcConfiguration = $.snowflakeVpcConfiguration;
        this.table = $.table;
        this.user = $.user;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FirehoseDeliveryStreamSnowflakeConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FirehoseDeliveryStreamSnowflakeConfigurationArgs $;

        public Builder() {
            $ = new FirehoseDeliveryStreamSnowflakeConfigurationArgs();
        }

        public Builder(FirehoseDeliveryStreamSnowflakeConfigurationArgs defaults) {
            $ = new FirehoseDeliveryStreamSnowflakeConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountUrl The URL of the Snowflake account. Format: https://[account_identifier].snowflakecomputing.com.
         * 
         * @return builder
         * 
         */
        public Builder accountUrl(Output<String> accountUrl) {
            $.accountUrl = accountUrl;
            return this;
        }

        /**
         * @param accountUrl The URL of the Snowflake account. Format: https://[account_identifier].snowflakecomputing.com.
         * 
         * @return builder
         * 
         */
        public Builder accountUrl(String accountUrl) {
            return accountUrl(Output.of(accountUrl));
        }

        /**
         * @param bufferingInterval Buffer incoming data for the specified period of time, in seconds between 0 to 900, before delivering it to the destination.  The default value is 0s.
         * 
         * @return builder
         * 
         */
        public Builder bufferingInterval(@Nullable Output<Integer> bufferingInterval) {
            $.bufferingInterval = bufferingInterval;
            return this;
        }

        /**
         * @param bufferingInterval Buffer incoming data for the specified period of time, in seconds between 0 to 900, before delivering it to the destination.  The default value is 0s.
         * 
         * @return builder
         * 
         */
        public Builder bufferingInterval(Integer bufferingInterval) {
            return bufferingInterval(Output.of(bufferingInterval));
        }

        /**
         * @param bufferingSize Buffer incoming data to the specified size, in MBs between 1 to 128, before delivering it to the destination.  The default value is 1MB.
         * 
         * @return builder
         * 
         */
        public Builder bufferingSize(@Nullable Output<Integer> bufferingSize) {
            $.bufferingSize = bufferingSize;
            return this;
        }

        /**
         * @param bufferingSize Buffer incoming data to the specified size, in MBs between 1 to 128, before delivering it to the destination.  The default value is 1MB.
         * 
         * @return builder
         * 
         */
        public Builder bufferingSize(Integer bufferingSize) {
            return bufferingSize(Output.of(bufferingSize));
        }

        /**
         * @param cloudwatchLoggingOptions The CloudWatch Logging Options for the delivery stream. See `cloudwatch_logging_options` block below for details.
         * 
         * @return builder
         * 
         */
        public Builder cloudwatchLoggingOptions(@Nullable Output<FirehoseDeliveryStreamSnowflakeConfigurationCloudwatchLoggingOptionsArgs> cloudwatchLoggingOptions) {
            $.cloudwatchLoggingOptions = cloudwatchLoggingOptions;
            return this;
        }

        /**
         * @param cloudwatchLoggingOptions The CloudWatch Logging Options for the delivery stream. See `cloudwatch_logging_options` block below for details.
         * 
         * @return builder
         * 
         */
        public Builder cloudwatchLoggingOptions(FirehoseDeliveryStreamSnowflakeConfigurationCloudwatchLoggingOptionsArgs cloudwatchLoggingOptions) {
            return cloudwatchLoggingOptions(Output.of(cloudwatchLoggingOptions));
        }

        /**
         * @param contentColumnName The name of the content column.
         * 
         * @return builder
         * 
         */
        public Builder contentColumnName(@Nullable Output<String> contentColumnName) {
            $.contentColumnName = contentColumnName;
            return this;
        }

        /**
         * @param contentColumnName The name of the content column.
         * 
         * @return builder
         * 
         */
        public Builder contentColumnName(String contentColumnName) {
            return contentColumnName(Output.of(contentColumnName));
        }

        /**
         * @param dataLoadingOption The data loading option.
         * 
         * @return builder
         * 
         */
        public Builder dataLoadingOption(@Nullable Output<String> dataLoadingOption) {
            $.dataLoadingOption = dataLoadingOption;
            return this;
        }

        /**
         * @param dataLoadingOption The data loading option.
         * 
         * @return builder
         * 
         */
        public Builder dataLoadingOption(String dataLoadingOption) {
            return dataLoadingOption(Output.of(dataLoadingOption));
        }

        /**
         * @param database The Snowflake database name.
         * 
         * @return builder
         * 
         */
        public Builder database(Output<String> database) {
            $.database = database;
            return this;
        }

        /**
         * @param database The Snowflake database name.
         * 
         * @return builder
         * 
         */
        public Builder database(String database) {
            return database(Output.of(database));
        }

        /**
         * @param keyPassphrase The passphrase for the private key.
         * 
         * @return builder
         * 
         */
        public Builder keyPassphrase(@Nullable Output<String> keyPassphrase) {
            $.keyPassphrase = keyPassphrase;
            return this;
        }

        /**
         * @param keyPassphrase The passphrase for the private key.
         * 
         * @return builder
         * 
         */
        public Builder keyPassphrase(String keyPassphrase) {
            return keyPassphrase(Output.of(keyPassphrase));
        }

        /**
         * @param metadataColumnName The name of the metadata column.
         * 
         * @return builder
         * 
         */
        public Builder metadataColumnName(@Nullable Output<String> metadataColumnName) {
            $.metadataColumnName = metadataColumnName;
            return this;
        }

        /**
         * @param metadataColumnName The name of the metadata column.
         * 
         * @return builder
         * 
         */
        public Builder metadataColumnName(String metadataColumnName) {
            return metadataColumnName(Output.of(metadataColumnName));
        }

        /**
         * @param privateKey The private key for authentication. This value is required if `secrets_manager_configuration` is not provided.
         * 
         * @return builder
         * 
         */
        public Builder privateKey(@Nullable Output<String> privateKey) {
            $.privateKey = privateKey;
            return this;
        }

        /**
         * @param privateKey The private key for authentication. This value is required if `secrets_manager_configuration` is not provided.
         * 
         * @return builder
         * 
         */
        public Builder privateKey(String privateKey) {
            return privateKey(Output.of(privateKey));
        }

        /**
         * @param processingConfiguration The processing configuration. See `processing_configuration` block below for details.
         * 
         * @return builder
         * 
         */
        public Builder processingConfiguration(@Nullable Output<FirehoseDeliveryStreamSnowflakeConfigurationProcessingConfigurationArgs> processingConfiguration) {
            $.processingConfiguration = processingConfiguration;
            return this;
        }

        /**
         * @param processingConfiguration The processing configuration. See `processing_configuration` block below for details.
         * 
         * @return builder
         * 
         */
        public Builder processingConfiguration(FirehoseDeliveryStreamSnowflakeConfigurationProcessingConfigurationArgs processingConfiguration) {
            return processingConfiguration(Output.of(processingConfiguration));
        }

        /**
         * @param retryDuration After an initial failure to deliver to Snowflake, the total amount of time, in seconds between 0 to 7200, during which Firehose re-attempts delivery (including the first attempt).  After this time has elapsed, the failed documents are written to Amazon S3.  The default value is 60s.  There will be no retry if the value is 0.
         * 
         * @return builder
         * 
         */
        public Builder retryDuration(@Nullable Output<Integer> retryDuration) {
            $.retryDuration = retryDuration;
            return this;
        }

        /**
         * @param retryDuration After an initial failure to deliver to Snowflake, the total amount of time, in seconds between 0 to 7200, during which Firehose re-attempts delivery (including the first attempt).  After this time has elapsed, the failed documents are written to Amazon S3.  The default value is 60s.  There will be no retry if the value is 0.
         * 
         * @return builder
         * 
         */
        public Builder retryDuration(Integer retryDuration) {
            return retryDuration(Output.of(retryDuration));
        }

        /**
         * @param roleArn The ARN of the IAM role.
         * 
         * @return builder
         * 
         */
        public Builder roleArn(Output<String> roleArn) {
            $.roleArn = roleArn;
            return this;
        }

        /**
         * @param roleArn The ARN of the IAM role.
         * 
         * @return builder
         * 
         */
        public Builder roleArn(String roleArn) {
            return roleArn(Output.of(roleArn));
        }

        /**
         * @param s3BackupMode The S3 backup mode.
         * 
         * @return builder
         * 
         */
        public Builder s3BackupMode(@Nullable Output<String> s3BackupMode) {
            $.s3BackupMode = s3BackupMode;
            return this;
        }

        /**
         * @param s3BackupMode The S3 backup mode.
         * 
         * @return builder
         * 
         */
        public Builder s3BackupMode(String s3BackupMode) {
            return s3BackupMode(Output.of(s3BackupMode));
        }

        /**
         * @param s3Configuration The S3 configuration. See `s3_configuration` block below for details.
         * 
         * @return builder
         * 
         */
        public Builder s3Configuration(Output<FirehoseDeliveryStreamSnowflakeConfigurationS3ConfigurationArgs> s3Configuration) {
            $.s3Configuration = s3Configuration;
            return this;
        }

        /**
         * @param s3Configuration The S3 configuration. See `s3_configuration` block below for details.
         * 
         * @return builder
         * 
         */
        public Builder s3Configuration(FirehoseDeliveryStreamSnowflakeConfigurationS3ConfigurationArgs s3Configuration) {
            return s3Configuration(Output.of(s3Configuration));
        }

        /**
         * @param schema The Snowflake schema name.
         * 
         * @return builder
         * 
         */
        public Builder schema(Output<String> schema) {
            $.schema = schema;
            return this;
        }

        /**
         * @param schema The Snowflake schema name.
         * 
         * @return builder
         * 
         */
        public Builder schema(String schema) {
            return schema(Output.of(schema));
        }

        /**
         * @param secretsManagerConfiguration The Secrets Manager configuration. See `secrets_manager_configuration` block below for details. This value is required if `user` and `private_key` are not provided.
         * 
         * @return builder
         * 
         */
        public Builder secretsManagerConfiguration(@Nullable Output<FirehoseDeliveryStreamSnowflakeConfigurationSecretsManagerConfigurationArgs> secretsManagerConfiguration) {
            $.secretsManagerConfiguration = secretsManagerConfiguration;
            return this;
        }

        /**
         * @param secretsManagerConfiguration The Secrets Manager configuration. See `secrets_manager_configuration` block below for details. This value is required if `user` and `private_key` are not provided.
         * 
         * @return builder
         * 
         */
        public Builder secretsManagerConfiguration(FirehoseDeliveryStreamSnowflakeConfigurationSecretsManagerConfigurationArgs secretsManagerConfiguration) {
            return secretsManagerConfiguration(Output.of(secretsManagerConfiguration));
        }

        /**
         * @param snowflakeRoleConfiguration The configuration for Snowflake role.
         * 
         * @return builder
         * 
         */
        public Builder snowflakeRoleConfiguration(@Nullable Output<FirehoseDeliveryStreamSnowflakeConfigurationSnowflakeRoleConfigurationArgs> snowflakeRoleConfiguration) {
            $.snowflakeRoleConfiguration = snowflakeRoleConfiguration;
            return this;
        }

        /**
         * @param snowflakeRoleConfiguration The configuration for Snowflake role.
         * 
         * @return builder
         * 
         */
        public Builder snowflakeRoleConfiguration(FirehoseDeliveryStreamSnowflakeConfigurationSnowflakeRoleConfigurationArgs snowflakeRoleConfiguration) {
            return snowflakeRoleConfiguration(Output.of(snowflakeRoleConfiguration));
        }

        /**
         * @param snowflakeVpcConfiguration The VPC configuration for Snowflake.
         * 
         * @return builder
         * 
         */
        public Builder snowflakeVpcConfiguration(@Nullable Output<FirehoseDeliveryStreamSnowflakeConfigurationSnowflakeVpcConfigurationArgs> snowflakeVpcConfiguration) {
            $.snowflakeVpcConfiguration = snowflakeVpcConfiguration;
            return this;
        }

        /**
         * @param snowflakeVpcConfiguration The VPC configuration for Snowflake.
         * 
         * @return builder
         * 
         */
        public Builder snowflakeVpcConfiguration(FirehoseDeliveryStreamSnowflakeConfigurationSnowflakeVpcConfigurationArgs snowflakeVpcConfiguration) {
            return snowflakeVpcConfiguration(Output.of(snowflakeVpcConfiguration));
        }

        /**
         * @param table The Snowflake table name.
         * 
         * @return builder
         * 
         */
        public Builder table(Output<String> table) {
            $.table = table;
            return this;
        }

        /**
         * @param table The Snowflake table name.
         * 
         * @return builder
         * 
         */
        public Builder table(String table) {
            return table(Output.of(table));
        }

        /**
         * @param user The user for authentication. This value is required if `secrets_manager_configuration` is not provided.
         * 
         * @return builder
         * 
         */
        public Builder user(@Nullable Output<String> user) {
            $.user = user;
            return this;
        }

        /**
         * @param user The user for authentication. This value is required if `secrets_manager_configuration` is not provided.
         * 
         * @return builder
         * 
         */
        public Builder user(String user) {
            return user(Output.of(user));
        }

        public FirehoseDeliveryStreamSnowflakeConfigurationArgs build() {
            if ($.accountUrl == null) {
                throw new MissingRequiredPropertyException("FirehoseDeliveryStreamSnowflakeConfigurationArgs", "accountUrl");
            }
            if ($.database == null) {
                throw new MissingRequiredPropertyException("FirehoseDeliveryStreamSnowflakeConfigurationArgs", "database");
            }
            if ($.roleArn == null) {
                throw new MissingRequiredPropertyException("FirehoseDeliveryStreamSnowflakeConfigurationArgs", "roleArn");
            }
            if ($.s3Configuration == null) {
                throw new MissingRequiredPropertyException("FirehoseDeliveryStreamSnowflakeConfigurationArgs", "s3Configuration");
            }
            if ($.schema == null) {
                throw new MissingRequiredPropertyException("FirehoseDeliveryStreamSnowflakeConfigurationArgs", "schema");
            }
            if ($.table == null) {
                throw new MissingRequiredPropertyException("FirehoseDeliveryStreamSnowflakeConfigurationArgs", "table");
            }
            return $;
        }
    }

}
