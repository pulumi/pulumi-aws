// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.lakeformation.inputs;

import com.pulumi.aws.lakeformation.inputs.DataCellsFilterTableDataRowFilterAllRowsWildcardArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DataCellsFilterTableDataRowFilterArgs extends com.pulumi.resources.ResourceArgs {

    public static final DataCellsFilterTableDataRowFilterArgs Empty = new DataCellsFilterTableDataRowFilterArgs();

    /**
     * (Optional) A wildcard that matches all rows.
     * 
     */
    @Import(name="allRowsWildcard")
    private @Nullable Output<DataCellsFilterTableDataRowFilterAllRowsWildcardArgs> allRowsWildcard;

    /**
     * @return (Optional) A wildcard that matches all rows.
     * 
     */
    public Optional<Output<DataCellsFilterTableDataRowFilterAllRowsWildcardArgs>> allRowsWildcard() {
        return Optional.ofNullable(this.allRowsWildcard);
    }

    /**
     * (Optional) A filter expression.
     * 
     */
    @Import(name="filterExpression")
    private @Nullable Output<String> filterExpression;

    /**
     * @return (Optional) A filter expression.
     * 
     */
    public Optional<Output<String>> filterExpression() {
        return Optional.ofNullable(this.filterExpression);
    }

    private DataCellsFilterTableDataRowFilterArgs() {}

    private DataCellsFilterTableDataRowFilterArgs(DataCellsFilterTableDataRowFilterArgs $) {
        this.allRowsWildcard = $.allRowsWildcard;
        this.filterExpression = $.filterExpression;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DataCellsFilterTableDataRowFilterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DataCellsFilterTableDataRowFilterArgs $;

        public Builder() {
            $ = new DataCellsFilterTableDataRowFilterArgs();
        }

        public Builder(DataCellsFilterTableDataRowFilterArgs defaults) {
            $ = new DataCellsFilterTableDataRowFilterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allRowsWildcard (Optional) A wildcard that matches all rows.
         * 
         * @return builder
         * 
         */
        public Builder allRowsWildcard(@Nullable Output<DataCellsFilterTableDataRowFilterAllRowsWildcardArgs> allRowsWildcard) {
            $.allRowsWildcard = allRowsWildcard;
            return this;
        }

        /**
         * @param allRowsWildcard (Optional) A wildcard that matches all rows.
         * 
         * @return builder
         * 
         */
        public Builder allRowsWildcard(DataCellsFilterTableDataRowFilterAllRowsWildcardArgs allRowsWildcard) {
            return allRowsWildcard(Output.of(allRowsWildcard));
        }

        /**
         * @param filterExpression (Optional) A filter expression.
         * 
         * @return builder
         * 
         */
        public Builder filterExpression(@Nullable Output<String> filterExpression) {
            $.filterExpression = filterExpression;
            return this;
        }

        /**
         * @param filterExpression (Optional) A filter expression.
         * 
         * @return builder
         * 
         */
        public Builder filterExpression(String filterExpression) {
            return filterExpression(Output.of(filterExpression));
        }

        public DataCellsFilterTableDataRowFilterArgs build() {
            return $;
        }
    }

}
