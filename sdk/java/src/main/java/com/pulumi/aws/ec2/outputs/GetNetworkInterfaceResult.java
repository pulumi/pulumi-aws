// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ec2.outputs;

import com.pulumi.aws.ec2.outputs.GetNetworkInterfaceAssociation;
import com.pulumi.aws.ec2.outputs.GetNetworkInterfaceAttachment;
import com.pulumi.aws.ec2.outputs.GetNetworkInterfaceFilter;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class GetNetworkInterfaceResult {
    private String arn;
    private List<GetNetworkInterfaceAssociation> associations;
    private List<GetNetworkInterfaceAttachment> attachments;
    private String availabilityZone;
    private String description;
    private @Nullable List<GetNetworkInterfaceFilter> filters;
    private String id;
    private String interfaceType;
    private List<String> ipv6Addresses;
    private String macAddress;
    private String outpostArn;
    private String ownerId;
    private String privateDnsName;
    private String privateIp;
    private List<String> privateIps;
    private String requesterId;
    private List<String> securityGroups;
    private String subnetId;
    private Map<String,String> tags;
    private String vpcId;

    private GetNetworkInterfaceResult() {}
    public String arn() {
        return this.arn;
    }
    public List<GetNetworkInterfaceAssociation> associations() {
        return this.associations;
    }
    public List<GetNetworkInterfaceAttachment> attachments() {
        return this.attachments;
    }
    public String availabilityZone() {
        return this.availabilityZone;
    }
    public String description() {
        return this.description;
    }
    public List<GetNetworkInterfaceFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    public String id() {
        return this.id;
    }
    public String interfaceType() {
        return this.interfaceType;
    }
    public List<String> ipv6Addresses() {
        return this.ipv6Addresses;
    }
    public String macAddress() {
        return this.macAddress;
    }
    public String outpostArn() {
        return this.outpostArn;
    }
    public String ownerId() {
        return this.ownerId;
    }
    public String privateDnsName() {
        return this.privateDnsName;
    }
    public String privateIp() {
        return this.privateIp;
    }
    public List<String> privateIps() {
        return this.privateIps;
    }
    public String requesterId() {
        return this.requesterId;
    }
    public List<String> securityGroups() {
        return this.securityGroups;
    }
    public String subnetId() {
        return this.subnetId;
    }
    public Map<String,String> tags() {
        return this.tags;
    }
    public String vpcId() {
        return this.vpcId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNetworkInterfaceResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String arn;
        private List<GetNetworkInterfaceAssociation> associations;
        private List<GetNetworkInterfaceAttachment> attachments;
        private String availabilityZone;
        private String description;
        private @Nullable List<GetNetworkInterfaceFilter> filters;
        private String id;
        private String interfaceType;
        private List<String> ipv6Addresses;
        private String macAddress;
        private String outpostArn;
        private String ownerId;
        private String privateDnsName;
        private String privateIp;
        private List<String> privateIps;
        private String requesterId;
        private List<String> securityGroups;
        private String subnetId;
        private Map<String,String> tags;
        private String vpcId;
        public Builder() {}
        public Builder(GetNetworkInterfaceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.associations = defaults.associations;
    	      this.attachments = defaults.attachments;
    	      this.availabilityZone = defaults.availabilityZone;
    	      this.description = defaults.description;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.interfaceType = defaults.interfaceType;
    	      this.ipv6Addresses = defaults.ipv6Addresses;
    	      this.macAddress = defaults.macAddress;
    	      this.outpostArn = defaults.outpostArn;
    	      this.ownerId = defaults.ownerId;
    	      this.privateDnsName = defaults.privateDnsName;
    	      this.privateIp = defaults.privateIp;
    	      this.privateIps = defaults.privateIps;
    	      this.requesterId = defaults.requesterId;
    	      this.securityGroups = defaults.securityGroups;
    	      this.subnetId = defaults.subnetId;
    	      this.tags = defaults.tags;
    	      this.vpcId = defaults.vpcId;
        }

        @CustomType.Setter
        public Builder arn(String arn) {
            this.arn = Objects.requireNonNull(arn);
            return this;
        }
        @CustomType.Setter
        public Builder associations(List<GetNetworkInterfaceAssociation> associations) {
            this.associations = Objects.requireNonNull(associations);
            return this;
        }
        public Builder associations(GetNetworkInterfaceAssociation... associations) {
            return associations(List.of(associations));
        }
        @CustomType.Setter
        public Builder attachments(List<GetNetworkInterfaceAttachment> attachments) {
            this.attachments = Objects.requireNonNull(attachments);
            return this;
        }
        public Builder attachments(GetNetworkInterfaceAttachment... attachments) {
            return attachments(List.of(attachments));
        }
        @CustomType.Setter
        public Builder availabilityZone(String availabilityZone) {
            this.availabilityZone = Objects.requireNonNull(availabilityZone);
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetNetworkInterfaceFilter> filters) {
            this.filters = filters;
            return this;
        }
        public Builder filters(GetNetworkInterfaceFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder interfaceType(String interfaceType) {
            this.interfaceType = Objects.requireNonNull(interfaceType);
            return this;
        }
        @CustomType.Setter
        public Builder ipv6Addresses(List<String> ipv6Addresses) {
            this.ipv6Addresses = Objects.requireNonNull(ipv6Addresses);
            return this;
        }
        public Builder ipv6Addresses(String... ipv6Addresses) {
            return ipv6Addresses(List.of(ipv6Addresses));
        }
        @CustomType.Setter
        public Builder macAddress(String macAddress) {
            this.macAddress = Objects.requireNonNull(macAddress);
            return this;
        }
        @CustomType.Setter
        public Builder outpostArn(String outpostArn) {
            this.outpostArn = Objects.requireNonNull(outpostArn);
            return this;
        }
        @CustomType.Setter
        public Builder ownerId(String ownerId) {
            this.ownerId = Objects.requireNonNull(ownerId);
            return this;
        }
        @CustomType.Setter
        public Builder privateDnsName(String privateDnsName) {
            this.privateDnsName = Objects.requireNonNull(privateDnsName);
            return this;
        }
        @CustomType.Setter
        public Builder privateIp(String privateIp) {
            this.privateIp = Objects.requireNonNull(privateIp);
            return this;
        }
        @CustomType.Setter
        public Builder privateIps(List<String> privateIps) {
            this.privateIps = Objects.requireNonNull(privateIps);
            return this;
        }
        public Builder privateIps(String... privateIps) {
            return privateIps(List.of(privateIps));
        }
        @CustomType.Setter
        public Builder requesterId(String requesterId) {
            this.requesterId = Objects.requireNonNull(requesterId);
            return this;
        }
        @CustomType.Setter
        public Builder securityGroups(List<String> securityGroups) {
            this.securityGroups = Objects.requireNonNull(securityGroups);
            return this;
        }
        public Builder securityGroups(String... securityGroups) {
            return securityGroups(List.of(securityGroups));
        }
        @CustomType.Setter
        public Builder subnetId(String subnetId) {
            this.subnetId = Objects.requireNonNull(subnetId);
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        @CustomType.Setter
        public Builder vpcId(String vpcId) {
            this.vpcId = Objects.requireNonNull(vpcId);
            return this;
        }
        public GetNetworkInterfaceResult build() {
            final var o = new GetNetworkInterfaceResult();
            o.arn = arn;
            o.associations = associations;
            o.attachments = attachments;
            o.availabilityZone = availabilityZone;
            o.description = description;
            o.filters = filters;
            o.id = id;
            o.interfaceType = interfaceType;
            o.ipv6Addresses = ipv6Addresses;
            o.macAddress = macAddress;
            o.outpostArn = outpostArn;
            o.ownerId = ownerId;
            o.privateDnsName = privateDnsName;
            o.privateIp = privateIp;
            o.privateIps = privateIps;
            o.requesterId = requesterId;
            o.securityGroups = securityGroups;
            o.subnetId = subnetId;
            o.tags = tags;
            o.vpcId = vpcId;
            return o;
        }
    }
}
