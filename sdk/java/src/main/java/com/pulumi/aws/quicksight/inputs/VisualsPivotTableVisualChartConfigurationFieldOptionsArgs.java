// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.inputs;

import com.pulumi.aws.quicksight.inputs.VisualsPivotTableVisualChartConfigurationFieldOptionsDataPathOptionArgs;
import com.pulumi.aws.quicksight.inputs.VisualsPivotTableVisualChartConfigurationFieldOptionsSelectedFieldOptionArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VisualsPivotTableVisualChartConfigurationFieldOptionsArgs extends com.pulumi.resources.ResourceArgs {

    public static final VisualsPivotTableVisualChartConfigurationFieldOptionsArgs Empty = new VisualsPivotTableVisualChartConfigurationFieldOptionsArgs();

    @Import(name="dataPathOptions")
    private @Nullable Output<List<VisualsPivotTableVisualChartConfigurationFieldOptionsDataPathOptionArgs>> dataPathOptions;

    public Optional<Output<List<VisualsPivotTableVisualChartConfigurationFieldOptionsDataPathOptionArgs>>> dataPathOptions() {
        return Optional.ofNullable(this.dataPathOptions);
    }

    @Import(name="selectedFieldOptions")
    private @Nullable Output<List<VisualsPivotTableVisualChartConfigurationFieldOptionsSelectedFieldOptionArgs>> selectedFieldOptions;

    public Optional<Output<List<VisualsPivotTableVisualChartConfigurationFieldOptionsSelectedFieldOptionArgs>>> selectedFieldOptions() {
        return Optional.ofNullable(this.selectedFieldOptions);
    }

    private VisualsPivotTableVisualChartConfigurationFieldOptionsArgs() {}

    private VisualsPivotTableVisualChartConfigurationFieldOptionsArgs(VisualsPivotTableVisualChartConfigurationFieldOptionsArgs $) {
        this.dataPathOptions = $.dataPathOptions;
        this.selectedFieldOptions = $.selectedFieldOptions;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VisualsPivotTableVisualChartConfigurationFieldOptionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VisualsPivotTableVisualChartConfigurationFieldOptionsArgs $;

        public Builder() {
            $ = new VisualsPivotTableVisualChartConfigurationFieldOptionsArgs();
        }

        public Builder(VisualsPivotTableVisualChartConfigurationFieldOptionsArgs defaults) {
            $ = new VisualsPivotTableVisualChartConfigurationFieldOptionsArgs(Objects.requireNonNull(defaults));
        }

        public Builder dataPathOptions(@Nullable Output<List<VisualsPivotTableVisualChartConfigurationFieldOptionsDataPathOptionArgs>> dataPathOptions) {
            $.dataPathOptions = dataPathOptions;
            return this;
        }

        public Builder dataPathOptions(List<VisualsPivotTableVisualChartConfigurationFieldOptionsDataPathOptionArgs> dataPathOptions) {
            return dataPathOptions(Output.of(dataPathOptions));
        }

        public Builder dataPathOptions(VisualsPivotTableVisualChartConfigurationFieldOptionsDataPathOptionArgs... dataPathOptions) {
            return dataPathOptions(List.of(dataPathOptions));
        }

        public Builder selectedFieldOptions(@Nullable Output<List<VisualsPivotTableVisualChartConfigurationFieldOptionsSelectedFieldOptionArgs>> selectedFieldOptions) {
            $.selectedFieldOptions = selectedFieldOptions;
            return this;
        }

        public Builder selectedFieldOptions(List<VisualsPivotTableVisualChartConfigurationFieldOptionsSelectedFieldOptionArgs> selectedFieldOptions) {
            return selectedFieldOptions(Output.of(selectedFieldOptions));
        }

        public Builder selectedFieldOptions(VisualsPivotTableVisualChartConfigurationFieldOptionsSelectedFieldOptionArgs... selectedFieldOptions) {
            return selectedFieldOptions(List.of(selectedFieldOptions));
        }

        public VisualsPivotTableVisualChartConfigurationFieldOptionsArgs build() {
            return $;
        }
    }

}
