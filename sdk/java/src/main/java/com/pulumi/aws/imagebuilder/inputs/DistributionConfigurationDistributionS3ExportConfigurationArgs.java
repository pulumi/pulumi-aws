// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.imagebuilder.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DistributionConfigurationDistributionS3ExportConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final DistributionConfigurationDistributionS3ExportConfigurationArgs Empty = new DistributionConfigurationDistributionS3ExportConfigurationArgs();

    /**
     * The disk image format of the exported image (`RAW`, `VHD`, or `VMDK`)
     * 
     */
    @Import(name="diskImageFormat", required=true)
    private Output<String> diskImageFormat;

    /**
     * @return The disk image format of the exported image (`RAW`, `VHD`, or `VMDK`)
     * 
     */
    public Output<String> diskImageFormat() {
        return this.diskImageFormat;
    }

    /**
     * The name of the IAM role to use for exporting.
     * 
     */
    @Import(name="roleName", required=true)
    private Output<String> roleName;

    /**
     * @return The name of the IAM role to use for exporting.
     * 
     */
    public Output<String> roleName() {
        return this.roleName;
    }

    /**
     * The name of the S3 bucket to store the exported image in. The bucket needs to exist before the export configuration is created.
     * 
     */
    @Import(name="s3Bucket", required=true)
    private Output<String> s3Bucket;

    /**
     * @return The name of the S3 bucket to store the exported image in. The bucket needs to exist before the export configuration is created.
     * 
     */
    public Output<String> s3Bucket() {
        return this.s3Bucket;
    }

    /**
     * The prefix for the exported image.
     * 
     */
    @Import(name="s3Prefix")
    private @Nullable Output<String> s3Prefix;

    /**
     * @return The prefix for the exported image.
     * 
     */
    public Optional<Output<String>> s3Prefix() {
        return Optional.ofNullable(this.s3Prefix);
    }

    private DistributionConfigurationDistributionS3ExportConfigurationArgs() {}

    private DistributionConfigurationDistributionS3ExportConfigurationArgs(DistributionConfigurationDistributionS3ExportConfigurationArgs $) {
        this.diskImageFormat = $.diskImageFormat;
        this.roleName = $.roleName;
        this.s3Bucket = $.s3Bucket;
        this.s3Prefix = $.s3Prefix;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DistributionConfigurationDistributionS3ExportConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DistributionConfigurationDistributionS3ExportConfigurationArgs $;

        public Builder() {
            $ = new DistributionConfigurationDistributionS3ExportConfigurationArgs();
        }

        public Builder(DistributionConfigurationDistributionS3ExportConfigurationArgs defaults) {
            $ = new DistributionConfigurationDistributionS3ExportConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param diskImageFormat The disk image format of the exported image (`RAW`, `VHD`, or `VMDK`)
         * 
         * @return builder
         * 
         */
        public Builder diskImageFormat(Output<String> diskImageFormat) {
            $.diskImageFormat = diskImageFormat;
            return this;
        }

        /**
         * @param diskImageFormat The disk image format of the exported image (`RAW`, `VHD`, or `VMDK`)
         * 
         * @return builder
         * 
         */
        public Builder diskImageFormat(String diskImageFormat) {
            return diskImageFormat(Output.of(diskImageFormat));
        }

        /**
         * @param roleName The name of the IAM role to use for exporting.
         * 
         * @return builder
         * 
         */
        public Builder roleName(Output<String> roleName) {
            $.roleName = roleName;
            return this;
        }

        /**
         * @param roleName The name of the IAM role to use for exporting.
         * 
         * @return builder
         * 
         */
        public Builder roleName(String roleName) {
            return roleName(Output.of(roleName));
        }

        /**
         * @param s3Bucket The name of the S3 bucket to store the exported image in. The bucket needs to exist before the export configuration is created.
         * 
         * @return builder
         * 
         */
        public Builder s3Bucket(Output<String> s3Bucket) {
            $.s3Bucket = s3Bucket;
            return this;
        }

        /**
         * @param s3Bucket The name of the S3 bucket to store the exported image in. The bucket needs to exist before the export configuration is created.
         * 
         * @return builder
         * 
         */
        public Builder s3Bucket(String s3Bucket) {
            return s3Bucket(Output.of(s3Bucket));
        }

        /**
         * @param s3Prefix The prefix for the exported image.
         * 
         * @return builder
         * 
         */
        public Builder s3Prefix(@Nullable Output<String> s3Prefix) {
            $.s3Prefix = s3Prefix;
            return this;
        }

        /**
         * @param s3Prefix The prefix for the exported image.
         * 
         * @return builder
         * 
         */
        public Builder s3Prefix(String s3Prefix) {
            return s3Prefix(Output.of(s3Prefix));
        }

        public DistributionConfigurationDistributionS3ExportConfigurationArgs build() {
            if ($.diskImageFormat == null) {
                throw new MissingRequiredPropertyException("DistributionConfigurationDistributionS3ExportConfigurationArgs", "diskImageFormat");
            }
            if ($.roleName == null) {
                throw new MissingRequiredPropertyException("DistributionConfigurationDistributionS3ExportConfigurationArgs", "roleName");
            }
            if ($.s3Bucket == null) {
                throw new MissingRequiredPropertyException("DistributionConfigurationDistributionS3ExportConfigurationArgs", "s3Bucket");
            }
            return $;
        }
    }

}
