// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.fsx;

import com.pulumi.aws.fsx.inputs.FileCacheDataRepositoryAssociationArgs;
import com.pulumi.aws.fsx.inputs.FileCacheLustreConfigurationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FileCacheArgs extends com.pulumi.resources.ResourceArgs {

    public static final FileCacheArgs Empty = new FileCacheArgs();

    @Import(name="copyTagsToDataRepositoryAssociations")
    private @Nullable Output<Boolean> copyTagsToDataRepositoryAssociations;

    public Optional<Output<Boolean>> copyTagsToDataRepositoryAssociations() {
        return Optional.ofNullable(this.copyTagsToDataRepositoryAssociations);
    }

    @Import(name="dataRepositoryAssociations")
    private @Nullable Output<List<FileCacheDataRepositoryAssociationArgs>> dataRepositoryAssociations;

    public Optional<Output<List<FileCacheDataRepositoryAssociationArgs>>> dataRepositoryAssociations() {
        return Optional.ofNullable(this.dataRepositoryAssociations);
    }

    @Import(name="fileCacheType", required=true)
    private Output<String> fileCacheType;

    public Output<String> fileCacheType() {
        return this.fileCacheType;
    }

    @Import(name="fileCacheTypeVersion", required=true)
    private Output<String> fileCacheTypeVersion;

    public Output<String> fileCacheTypeVersion() {
        return this.fileCacheTypeVersion;
    }

    @Import(name="kmsKeyId")
    private @Nullable Output<String> kmsKeyId;

    public Optional<Output<String>> kmsKeyId() {
        return Optional.ofNullable(this.kmsKeyId);
    }

    @Import(name="lustreConfigurations")
    private @Nullable Output<List<FileCacheLustreConfigurationArgs>> lustreConfigurations;

    public Optional<Output<List<FileCacheLustreConfigurationArgs>>> lustreConfigurations() {
        return Optional.ofNullable(this.lustreConfigurations);
    }

    @Import(name="securityGroupIds")
    private @Nullable Output<List<String>> securityGroupIds;

    public Optional<Output<List<String>>> securityGroupIds() {
        return Optional.ofNullable(this.securityGroupIds);
    }

    @Import(name="storageCapacity", required=true)
    private Output<Integer> storageCapacity;

    public Output<Integer> storageCapacity() {
        return this.storageCapacity;
    }

    @Import(name="subnetIds", required=true)
    private Output<List<String>> subnetIds;

    public Output<List<String>> subnetIds() {
        return this.subnetIds;
    }

    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private FileCacheArgs() {}

    private FileCacheArgs(FileCacheArgs $) {
        this.copyTagsToDataRepositoryAssociations = $.copyTagsToDataRepositoryAssociations;
        this.dataRepositoryAssociations = $.dataRepositoryAssociations;
        this.fileCacheType = $.fileCacheType;
        this.fileCacheTypeVersion = $.fileCacheTypeVersion;
        this.kmsKeyId = $.kmsKeyId;
        this.lustreConfigurations = $.lustreConfigurations;
        this.securityGroupIds = $.securityGroupIds;
        this.storageCapacity = $.storageCapacity;
        this.subnetIds = $.subnetIds;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FileCacheArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FileCacheArgs $;

        public Builder() {
            $ = new FileCacheArgs();
        }

        public Builder(FileCacheArgs defaults) {
            $ = new FileCacheArgs(Objects.requireNonNull(defaults));
        }

        public Builder copyTagsToDataRepositoryAssociations(@Nullable Output<Boolean> copyTagsToDataRepositoryAssociations) {
            $.copyTagsToDataRepositoryAssociations = copyTagsToDataRepositoryAssociations;
            return this;
        }

        public Builder copyTagsToDataRepositoryAssociations(Boolean copyTagsToDataRepositoryAssociations) {
            return copyTagsToDataRepositoryAssociations(Output.of(copyTagsToDataRepositoryAssociations));
        }

        public Builder dataRepositoryAssociations(@Nullable Output<List<FileCacheDataRepositoryAssociationArgs>> dataRepositoryAssociations) {
            $.dataRepositoryAssociations = dataRepositoryAssociations;
            return this;
        }

        public Builder dataRepositoryAssociations(List<FileCacheDataRepositoryAssociationArgs> dataRepositoryAssociations) {
            return dataRepositoryAssociations(Output.of(dataRepositoryAssociations));
        }

        public Builder dataRepositoryAssociations(FileCacheDataRepositoryAssociationArgs... dataRepositoryAssociations) {
            return dataRepositoryAssociations(List.of(dataRepositoryAssociations));
        }

        public Builder fileCacheType(Output<String> fileCacheType) {
            $.fileCacheType = fileCacheType;
            return this;
        }

        public Builder fileCacheType(String fileCacheType) {
            return fileCacheType(Output.of(fileCacheType));
        }

        public Builder fileCacheTypeVersion(Output<String> fileCacheTypeVersion) {
            $.fileCacheTypeVersion = fileCacheTypeVersion;
            return this;
        }

        public Builder fileCacheTypeVersion(String fileCacheTypeVersion) {
            return fileCacheTypeVersion(Output.of(fileCacheTypeVersion));
        }

        public Builder kmsKeyId(@Nullable Output<String> kmsKeyId) {
            $.kmsKeyId = kmsKeyId;
            return this;
        }

        public Builder kmsKeyId(String kmsKeyId) {
            return kmsKeyId(Output.of(kmsKeyId));
        }

        public Builder lustreConfigurations(@Nullable Output<List<FileCacheLustreConfigurationArgs>> lustreConfigurations) {
            $.lustreConfigurations = lustreConfigurations;
            return this;
        }

        public Builder lustreConfigurations(List<FileCacheLustreConfigurationArgs> lustreConfigurations) {
            return lustreConfigurations(Output.of(lustreConfigurations));
        }

        public Builder lustreConfigurations(FileCacheLustreConfigurationArgs... lustreConfigurations) {
            return lustreConfigurations(List.of(lustreConfigurations));
        }

        public Builder securityGroupIds(@Nullable Output<List<String>> securityGroupIds) {
            $.securityGroupIds = securityGroupIds;
            return this;
        }

        public Builder securityGroupIds(List<String> securityGroupIds) {
            return securityGroupIds(Output.of(securityGroupIds));
        }

        public Builder securityGroupIds(String... securityGroupIds) {
            return securityGroupIds(List.of(securityGroupIds));
        }

        public Builder storageCapacity(Output<Integer> storageCapacity) {
            $.storageCapacity = storageCapacity;
            return this;
        }

        public Builder storageCapacity(Integer storageCapacity) {
            return storageCapacity(Output.of(storageCapacity));
        }

        public Builder subnetIds(Output<List<String>> subnetIds) {
            $.subnetIds = subnetIds;
            return this;
        }

        public Builder subnetIds(List<String> subnetIds) {
            return subnetIds(Output.of(subnetIds));
        }

        public Builder subnetIds(String... subnetIds) {
            return subnetIds(List.of(subnetIds));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public FileCacheArgs build() {
            $.fileCacheType = Objects.requireNonNull($.fileCacheType, "expected parameter 'fileCacheType' to be non-null");
            $.fileCacheTypeVersion = Objects.requireNonNull($.fileCacheTypeVersion, "expected parameter 'fileCacheTypeVersion' to be non-null");
            $.storageCapacity = Objects.requireNonNull($.storageCapacity, "expected parameter 'storageCapacity' to be non-null");
            $.subnetIds = Objects.requireNonNull($.subnetIds, "expected parameter 'subnetIds' to be non-null");
            return $;
        }
    }

}
