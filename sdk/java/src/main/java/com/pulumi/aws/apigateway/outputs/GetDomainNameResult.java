// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.apigateway.outputs;

import com.pulumi.aws.apigateway.outputs.GetDomainNameEndpointConfiguration;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDomainNameResult {
    /**
     * @return ARN of the found custom domain name.
     * 
     */
    private @Nullable String arn;
    /**
     * @return ARN for an AWS-managed certificate that is used by edge-optimized endpoint for this domain name.
     * 
     */
    private @Nullable String certificateArn;
    /**
     * @return Name of the certificate that is used by edge-optimized endpoint for this domain name.
     * 
     */
    private @Nullable String certificateName;
    /**
     * @return Upload date associated with the domain certificate.
     * 
     */
    private @Nullable String certificateUploadDate;
    /**
     * @return Hostname created by Cloudfront to represent the distribution that implements this domain name mapping.
     * 
     */
    private @Nullable String cloudfrontDomainName;
    /**
     * @return For convenience, the hosted zone ID (`Z2FDTNDATAQYW2`) that can be used to create a Route53 alias record for the distribution.
     * 
     */
    private @Nullable String cloudfrontZoneId;
    private String domainName;
    /**
     * @return List of objects with the endpoint configuration of this domain name.
     * 
     */
    private @Nullable List<GetDomainNameEndpointConfiguration> endpointConfigurations;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private @Nullable String id;
    /**
     * @return ARN for an AWS-managed certificate that is used for validating the regional domain name.
     * 
     */
    private @Nullable String regionalCertificateArn;
    /**
     * @return User-friendly name of the certificate that is used by regional endpoint for this domain name.
     * 
     */
    private @Nullable String regionalCertificateName;
    /**
     * @return Hostname for the custom domain&#39;s regional endpoint.
     * 
     */
    private @Nullable String regionalDomainName;
    /**
     * @return Hosted zone ID that can be used to create a Route53 alias record for the regional endpoint.
     * 
     */
    private @Nullable String regionalZoneId;
    /**
     * @return Security policy for the domain name.
     * 
     */
    private @Nullable String securityPolicy;
    /**
     * @return Key-value map of tags for the resource.
     * 
     */
    private @Nullable Map<String,String> tags;

    private GetDomainNameResult() {}
    /**
     * @return ARN of the found custom domain name.
     * 
     */
    public Optional<String> arn() {
        return Optional.ofNullable(this.arn);
    }
    /**
     * @return ARN for an AWS-managed certificate that is used by edge-optimized endpoint for this domain name.
     * 
     */
    public Optional<String> certificateArn() {
        return Optional.ofNullable(this.certificateArn);
    }
    /**
     * @return Name of the certificate that is used by edge-optimized endpoint for this domain name.
     * 
     */
    public Optional<String> certificateName() {
        return Optional.ofNullable(this.certificateName);
    }
    /**
     * @return Upload date associated with the domain certificate.
     * 
     */
    public Optional<String> certificateUploadDate() {
        return Optional.ofNullable(this.certificateUploadDate);
    }
    /**
     * @return Hostname created by Cloudfront to represent the distribution that implements this domain name mapping.
     * 
     */
    public Optional<String> cloudfrontDomainName() {
        return Optional.ofNullable(this.cloudfrontDomainName);
    }
    /**
     * @return For convenience, the hosted zone ID (`Z2FDTNDATAQYW2`) that can be used to create a Route53 alias record for the distribution.
     * 
     */
    public Optional<String> cloudfrontZoneId() {
        return Optional.ofNullable(this.cloudfrontZoneId);
    }
    public String domainName() {
        return this.domainName;
    }
    /**
     * @return List of objects with the endpoint configuration of this domain name.
     * 
     */
    public List<GetDomainNameEndpointConfiguration> endpointConfigurations() {
        return this.endpointConfigurations == null ? List.of() : this.endpointConfigurations;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return ARN for an AWS-managed certificate that is used for validating the regional domain name.
     * 
     */
    public Optional<String> regionalCertificateArn() {
        return Optional.ofNullable(this.regionalCertificateArn);
    }
    /**
     * @return User-friendly name of the certificate that is used by regional endpoint for this domain name.
     * 
     */
    public Optional<String> regionalCertificateName() {
        return Optional.ofNullable(this.regionalCertificateName);
    }
    /**
     * @return Hostname for the custom domain&#39;s regional endpoint.
     * 
     */
    public Optional<String> regionalDomainName() {
        return Optional.ofNullable(this.regionalDomainName);
    }
    /**
     * @return Hosted zone ID that can be used to create a Route53 alias record for the regional endpoint.
     * 
     */
    public Optional<String> regionalZoneId() {
        return Optional.ofNullable(this.regionalZoneId);
    }
    /**
     * @return Security policy for the domain name.
     * 
     */
    public Optional<String> securityPolicy() {
        return Optional.ofNullable(this.securityPolicy);
    }
    /**
     * @return Key-value map of tags for the resource.
     * 
     */
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDomainNameResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String arn;
        private @Nullable String certificateArn;
        private @Nullable String certificateName;
        private @Nullable String certificateUploadDate;
        private @Nullable String cloudfrontDomainName;
        private @Nullable String cloudfrontZoneId;
        private String domainName;
        private @Nullable List<GetDomainNameEndpointConfiguration> endpointConfigurations;
        private @Nullable String id;
        private @Nullable String regionalCertificateArn;
        private @Nullable String regionalCertificateName;
        private @Nullable String regionalDomainName;
        private @Nullable String regionalZoneId;
        private @Nullable String securityPolicy;
        private @Nullable Map<String,String> tags;
        public Builder() {}
        public Builder(GetDomainNameResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.certificateArn = defaults.certificateArn;
    	      this.certificateName = defaults.certificateName;
    	      this.certificateUploadDate = defaults.certificateUploadDate;
    	      this.cloudfrontDomainName = defaults.cloudfrontDomainName;
    	      this.cloudfrontZoneId = defaults.cloudfrontZoneId;
    	      this.domainName = defaults.domainName;
    	      this.endpointConfigurations = defaults.endpointConfigurations;
    	      this.id = defaults.id;
    	      this.regionalCertificateArn = defaults.regionalCertificateArn;
    	      this.regionalCertificateName = defaults.regionalCertificateName;
    	      this.regionalDomainName = defaults.regionalDomainName;
    	      this.regionalZoneId = defaults.regionalZoneId;
    	      this.securityPolicy = defaults.securityPolicy;
    	      this.tags = defaults.tags;
        }

        @CustomType.Setter
        public Builder arn(@Nullable String arn) {
            this.arn = arn;
            return this;
        }
        @CustomType.Setter
        public Builder certificateArn(@Nullable String certificateArn) {
            this.certificateArn = certificateArn;
            return this;
        }
        @CustomType.Setter
        public Builder certificateName(@Nullable String certificateName) {
            this.certificateName = certificateName;
            return this;
        }
        @CustomType.Setter
        public Builder certificateUploadDate(@Nullable String certificateUploadDate) {
            this.certificateUploadDate = certificateUploadDate;
            return this;
        }
        @CustomType.Setter
        public Builder cloudfrontDomainName(@Nullable String cloudfrontDomainName) {
            this.cloudfrontDomainName = cloudfrontDomainName;
            return this;
        }
        @CustomType.Setter
        public Builder cloudfrontZoneId(@Nullable String cloudfrontZoneId) {
            this.cloudfrontZoneId = cloudfrontZoneId;
            return this;
        }
        @CustomType.Setter
        public Builder domainName(String domainName) {
            this.domainName = Objects.requireNonNull(domainName);
            return this;
        }
        @CustomType.Setter
        public Builder endpointConfigurations(@Nullable List<GetDomainNameEndpointConfiguration> endpointConfigurations) {
            this.endpointConfigurations = endpointConfigurations;
            return this;
        }
        public Builder endpointConfigurations(GetDomainNameEndpointConfiguration... endpointConfigurations) {
            return endpointConfigurations(List.of(endpointConfigurations));
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder regionalCertificateArn(@Nullable String regionalCertificateArn) {
            this.regionalCertificateArn = regionalCertificateArn;
            return this;
        }
        @CustomType.Setter
        public Builder regionalCertificateName(@Nullable String regionalCertificateName) {
            this.regionalCertificateName = regionalCertificateName;
            return this;
        }
        @CustomType.Setter
        public Builder regionalDomainName(@Nullable String regionalDomainName) {
            this.regionalDomainName = regionalDomainName;
            return this;
        }
        @CustomType.Setter
        public Builder regionalZoneId(@Nullable String regionalZoneId) {
            this.regionalZoneId = regionalZoneId;
            return this;
        }
        @CustomType.Setter
        public Builder securityPolicy(@Nullable String securityPolicy) {
            this.securityPolicy = securityPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        public GetDomainNameResult build() {
            final var o = new GetDomainNameResult();
            o.arn = arn;
            o.certificateArn = certificateArn;
            o.certificateName = certificateName;
            o.certificateUploadDate = certificateUploadDate;
            o.cloudfrontDomainName = cloudfrontDomainName;
            o.cloudfrontZoneId = cloudfrontZoneId;
            o.domainName = domainName;
            o.endpointConfigurations = endpointConfigurations;
            o.id = id;
            o.regionalCertificateArn = regionalCertificateArn;
            o.regionalCertificateName = regionalCertificateName;
            o.regionalDomainName = regionalDomainName;
            o.regionalZoneId = regionalZoneId;
            o.securityPolicy = securityPolicy;
            o.tags = tags;
            return o;
        }
    }
}
