// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.backup.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VaultLockConfigurationState extends com.pulumi.resources.ResourceArgs {

    public static final VaultLockConfigurationState Empty = new VaultLockConfigurationState();

    @Import(name="backupVaultArn")
    private @Nullable Output<String> backupVaultArn;

    public Optional<Output<String>> backupVaultArn() {
        return Optional.ofNullable(this.backupVaultArn);
    }

    @Import(name="backupVaultName")
    private @Nullable Output<String> backupVaultName;

    public Optional<Output<String>> backupVaultName() {
        return Optional.ofNullable(this.backupVaultName);
    }

    @Import(name="changeableForDays")
    private @Nullable Output<Integer> changeableForDays;

    public Optional<Output<Integer>> changeableForDays() {
        return Optional.ofNullable(this.changeableForDays);
    }

    @Import(name="maxRetentionDays")
    private @Nullable Output<Integer> maxRetentionDays;

    public Optional<Output<Integer>> maxRetentionDays() {
        return Optional.ofNullable(this.maxRetentionDays);
    }

    @Import(name="minRetentionDays")
    private @Nullable Output<Integer> minRetentionDays;

    public Optional<Output<Integer>> minRetentionDays() {
        return Optional.ofNullable(this.minRetentionDays);
    }

    private VaultLockConfigurationState() {}

    private VaultLockConfigurationState(VaultLockConfigurationState $) {
        this.backupVaultArn = $.backupVaultArn;
        this.backupVaultName = $.backupVaultName;
        this.changeableForDays = $.changeableForDays;
        this.maxRetentionDays = $.maxRetentionDays;
        this.minRetentionDays = $.minRetentionDays;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VaultLockConfigurationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VaultLockConfigurationState $;

        public Builder() {
            $ = new VaultLockConfigurationState();
        }

        public Builder(VaultLockConfigurationState defaults) {
            $ = new VaultLockConfigurationState(Objects.requireNonNull(defaults));
        }

        public Builder backupVaultArn(@Nullable Output<String> backupVaultArn) {
            $.backupVaultArn = backupVaultArn;
            return this;
        }

        public Builder backupVaultArn(String backupVaultArn) {
            return backupVaultArn(Output.of(backupVaultArn));
        }

        public Builder backupVaultName(@Nullable Output<String> backupVaultName) {
            $.backupVaultName = backupVaultName;
            return this;
        }

        public Builder backupVaultName(String backupVaultName) {
            return backupVaultName(Output.of(backupVaultName));
        }

        public Builder changeableForDays(@Nullable Output<Integer> changeableForDays) {
            $.changeableForDays = changeableForDays;
            return this;
        }

        public Builder changeableForDays(Integer changeableForDays) {
            return changeableForDays(Output.of(changeableForDays));
        }

        public Builder maxRetentionDays(@Nullable Output<Integer> maxRetentionDays) {
            $.maxRetentionDays = maxRetentionDays;
            return this;
        }

        public Builder maxRetentionDays(Integer maxRetentionDays) {
            return maxRetentionDays(Output.of(maxRetentionDays));
        }

        public Builder minRetentionDays(@Nullable Output<Integer> minRetentionDays) {
            $.minRetentionDays = minRetentionDays;
            return this;
        }

        public Builder minRetentionDays(Integer minRetentionDays) {
            return minRetentionDays(Output.of(minRetentionDays));
        }

        public VaultLockConfigurationState build() {
            return $;
        }
    }

}
