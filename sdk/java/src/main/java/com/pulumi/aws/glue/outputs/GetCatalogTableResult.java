// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.glue.outputs;

import com.pulumi.aws.glue.outputs.GetCatalogTablePartitionIndex;
import com.pulumi.aws.glue.outputs.GetCatalogTablePartitionKey;
import com.pulumi.aws.glue.outputs.GetCatalogTableStorageDescriptor;
import com.pulumi.aws.glue.outputs.GetCatalogTableTargetTable;
import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetCatalogTableResult {
    /**
     * @return The ARN of the Glue Table.
     * 
     */
    private @Nullable String arn;
    /**
     * @return ID of the Data Catalog in which the table resides.
     * 
     */
    private @Nullable String catalogId;
    /**
     * @return Name of the catalog database that contains the target table.
     * 
     */
    private String databaseName;
    /**
     * @return Description of the table.
     * 
     */
    private @Nullable String description;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private @Nullable String id;
    /**
     * @return Name of the target table.
     * 
     */
    private String name;
    /**
     * @return Owner of the table.
     * 
     */
    private @Nullable String owner;
    /**
     * @return Map of initialization parameters for the SerDe, in key-value form.
     * 
     */
    private @Nullable Map<String,String> parameters;
    /**
     * @return Configuration block for a maximum of 3 partition indexes. See `partition_index` below.
     * 
     */
    private @Nullable List<GetCatalogTablePartitionIndex> partitionIndices;
    /**
     * @return Configuration block of columns by which the table is partitioned. Only primitive types are supported as partition keys. See `partition_keys` below.
     * 
     */
    private @Nullable List<GetCatalogTablePartitionKey> partitionKeys;
    private @Nullable String queryAsOfTime;
    /**
     * @return Retention time for this table.
     * 
     */
    private @Nullable Integer retention;
    /**
     * @return Configuration block for information about the physical storage of this table. For more information, refer to the [Glue Developer Guide](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html#aws-glue-api-catalog-tables-StorageDescriptor). See `storage_descriptor` below.
     * 
     */
    private @Nullable List<GetCatalogTableStorageDescriptor> storageDescriptors;
    /**
     * @return Type of this table (EXTERNAL_TABLE, VIRTUAL_VIEW, etc.). While optional, some Athena DDL queries such as `ALTER TABLE` and `SHOW CREATE TABLE` will fail if this argument is empty.
     * 
     */
    private @Nullable String tableType;
    /**
     * @return Configuration block of a target table for resource linking. See `target_table` below.
     * 
     */
    private @Nullable List<GetCatalogTableTargetTable> targetTables;
    private @Nullable Integer transactionId;
    /**
     * @return If the table is a view, the expanded text of the view; otherwise null.
     * 
     */
    private @Nullable String viewExpandedText;
    /**
     * @return If the table is a view, the original text of the view; otherwise null.
     * 
     */
    private @Nullable String viewOriginalText;

    private GetCatalogTableResult() {}
    /**
     * @return The ARN of the Glue Table.
     * 
     */
    public Optional<String> arn() {
        return Optional.ofNullable(this.arn);
    }
    /**
     * @return ID of the Data Catalog in which the table resides.
     * 
     */
    public Optional<String> catalogId() {
        return Optional.ofNullable(this.catalogId);
    }
    /**
     * @return Name of the catalog database that contains the target table.
     * 
     */
    public String databaseName() {
        return this.databaseName;
    }
    /**
     * @return Description of the table.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Name of the target table.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Owner of the table.
     * 
     */
    public Optional<String> owner() {
        return Optional.ofNullable(this.owner);
    }
    /**
     * @return Map of initialization parameters for the SerDe, in key-value form.
     * 
     */
    public Map<String,String> parameters() {
        return this.parameters == null ? Map.of() : this.parameters;
    }
    /**
     * @return Configuration block for a maximum of 3 partition indexes. See `partition_index` below.
     * 
     */
    public List<GetCatalogTablePartitionIndex> partitionIndices() {
        return this.partitionIndices == null ? List.of() : this.partitionIndices;
    }
    /**
     * @return Configuration block of columns by which the table is partitioned. Only primitive types are supported as partition keys. See `partition_keys` below.
     * 
     */
    public List<GetCatalogTablePartitionKey> partitionKeys() {
        return this.partitionKeys == null ? List.of() : this.partitionKeys;
    }
    public Optional<String> queryAsOfTime() {
        return Optional.ofNullable(this.queryAsOfTime);
    }
    /**
     * @return Retention time for this table.
     * 
     */
    public Optional<Integer> retention() {
        return Optional.ofNullable(this.retention);
    }
    /**
     * @return Configuration block for information about the physical storage of this table. For more information, refer to the [Glue Developer Guide](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html#aws-glue-api-catalog-tables-StorageDescriptor). See `storage_descriptor` below.
     * 
     */
    public List<GetCatalogTableStorageDescriptor> storageDescriptors() {
        return this.storageDescriptors == null ? List.of() : this.storageDescriptors;
    }
    /**
     * @return Type of this table (EXTERNAL_TABLE, VIRTUAL_VIEW, etc.). While optional, some Athena DDL queries such as `ALTER TABLE` and `SHOW CREATE TABLE` will fail if this argument is empty.
     * 
     */
    public Optional<String> tableType() {
        return Optional.ofNullable(this.tableType);
    }
    /**
     * @return Configuration block of a target table for resource linking. See `target_table` below.
     * 
     */
    public List<GetCatalogTableTargetTable> targetTables() {
        return this.targetTables == null ? List.of() : this.targetTables;
    }
    public Optional<Integer> transactionId() {
        return Optional.ofNullable(this.transactionId);
    }
    /**
     * @return If the table is a view, the expanded text of the view; otherwise null.
     * 
     */
    public Optional<String> viewExpandedText() {
        return Optional.ofNullable(this.viewExpandedText);
    }
    /**
     * @return If the table is a view, the original text of the view; otherwise null.
     * 
     */
    public Optional<String> viewOriginalText() {
        return Optional.ofNullable(this.viewOriginalText);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCatalogTableResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String arn;
        private @Nullable String catalogId;
        private String databaseName;
        private @Nullable String description;
        private @Nullable String id;
        private String name;
        private @Nullable String owner;
        private @Nullable Map<String,String> parameters;
        private @Nullable List<GetCatalogTablePartitionIndex> partitionIndices;
        private @Nullable List<GetCatalogTablePartitionKey> partitionKeys;
        private @Nullable String queryAsOfTime;
        private @Nullable Integer retention;
        private @Nullable List<GetCatalogTableStorageDescriptor> storageDescriptors;
        private @Nullable String tableType;
        private @Nullable List<GetCatalogTableTargetTable> targetTables;
        private @Nullable Integer transactionId;
        private @Nullable String viewExpandedText;
        private @Nullable String viewOriginalText;
        public Builder() {}
        public Builder(GetCatalogTableResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.catalogId = defaults.catalogId;
    	      this.databaseName = defaults.databaseName;
    	      this.description = defaults.description;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.owner = defaults.owner;
    	      this.parameters = defaults.parameters;
    	      this.partitionIndices = defaults.partitionIndices;
    	      this.partitionKeys = defaults.partitionKeys;
    	      this.queryAsOfTime = defaults.queryAsOfTime;
    	      this.retention = defaults.retention;
    	      this.storageDescriptors = defaults.storageDescriptors;
    	      this.tableType = defaults.tableType;
    	      this.targetTables = defaults.targetTables;
    	      this.transactionId = defaults.transactionId;
    	      this.viewExpandedText = defaults.viewExpandedText;
    	      this.viewOriginalText = defaults.viewOriginalText;
        }

        @CustomType.Setter
        public Builder arn(@Nullable String arn) {
            this.arn = arn;
            return this;
        }
        @CustomType.Setter
        public Builder catalogId(@Nullable String catalogId) {
            this.catalogId = catalogId;
            return this;
        }
        @CustomType.Setter
        public Builder databaseName(String databaseName) {
            this.databaseName = Objects.requireNonNull(databaseName);
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder owner(@Nullable String owner) {
            this.owner = owner;
            return this;
        }
        @CustomType.Setter
        public Builder parameters(@Nullable Map<String,String> parameters) {
            this.parameters = parameters;
            return this;
        }
        @CustomType.Setter
        public Builder partitionIndices(@Nullable List<GetCatalogTablePartitionIndex> partitionIndices) {
            this.partitionIndices = partitionIndices;
            return this;
        }
        public Builder partitionIndices(GetCatalogTablePartitionIndex... partitionIndices) {
            return partitionIndices(List.of(partitionIndices));
        }
        @CustomType.Setter
        public Builder partitionKeys(@Nullable List<GetCatalogTablePartitionKey> partitionKeys) {
            this.partitionKeys = partitionKeys;
            return this;
        }
        public Builder partitionKeys(GetCatalogTablePartitionKey... partitionKeys) {
            return partitionKeys(List.of(partitionKeys));
        }
        @CustomType.Setter
        public Builder queryAsOfTime(@Nullable String queryAsOfTime) {
            this.queryAsOfTime = queryAsOfTime;
            return this;
        }
        @CustomType.Setter
        public Builder retention(@Nullable Integer retention) {
            this.retention = retention;
            return this;
        }
        @CustomType.Setter
        public Builder storageDescriptors(@Nullable List<GetCatalogTableStorageDescriptor> storageDescriptors) {
            this.storageDescriptors = storageDescriptors;
            return this;
        }
        public Builder storageDescriptors(GetCatalogTableStorageDescriptor... storageDescriptors) {
            return storageDescriptors(List.of(storageDescriptors));
        }
        @CustomType.Setter
        public Builder tableType(@Nullable String tableType) {
            this.tableType = tableType;
            return this;
        }
        @CustomType.Setter
        public Builder targetTables(@Nullable List<GetCatalogTableTargetTable> targetTables) {
            this.targetTables = targetTables;
            return this;
        }
        public Builder targetTables(GetCatalogTableTargetTable... targetTables) {
            return targetTables(List.of(targetTables));
        }
        @CustomType.Setter
        public Builder transactionId(@Nullable Integer transactionId) {
            this.transactionId = transactionId;
            return this;
        }
        @CustomType.Setter
        public Builder viewExpandedText(@Nullable String viewExpandedText) {
            this.viewExpandedText = viewExpandedText;
            return this;
        }
        @CustomType.Setter
        public Builder viewOriginalText(@Nullable String viewOriginalText) {
            this.viewOriginalText = viewOriginalText;
            return this;
        }
        public GetCatalogTableResult build() {
            final var o = new GetCatalogTableResult();
            o.arn = arn;
            o.catalogId = catalogId;
            o.databaseName = databaseName;
            o.description = description;
            o.id = id;
            o.name = name;
            o.owner = owner;
            o.parameters = parameters;
            o.partitionIndices = partitionIndices;
            o.partitionKeys = partitionKeys;
            o.queryAsOfTime = queryAsOfTime;
            o.retention = retention;
            o.storageDescriptors = storageDescriptors;
            o.tableType = tableType;
            o.targetTables = targetTables;
            o.transactionId = transactionId;
            o.viewExpandedText = viewExpandedText;
            o.viewOriginalText = viewOriginalText;
            return o;
        }
    }
}
