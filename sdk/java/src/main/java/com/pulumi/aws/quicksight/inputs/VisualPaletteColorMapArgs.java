// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.inputs;

import com.pulumi.aws.quicksight.inputs.DataPathValueArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VisualPaletteColorMapArgs extends com.pulumi.resources.ResourceArgs {

    public static final VisualPaletteColorMapArgs Empty = new VisualPaletteColorMapArgs();

    @Import(name="color", required=true)
    private Output<String> color;

    public Output<String> color() {
        return this.color;
    }

    @Import(name="element", required=true)
    private Output<DataPathValueArgs> element;

    public Output<DataPathValueArgs> element() {
        return this.element;
    }

    @Import(name="timeGranularity")
    private @Nullable Output<String> timeGranularity;

    public Optional<Output<String>> timeGranularity() {
        return Optional.ofNullable(this.timeGranularity);
    }

    private VisualPaletteColorMapArgs() {}

    private VisualPaletteColorMapArgs(VisualPaletteColorMapArgs $) {
        this.color = $.color;
        this.element = $.element;
        this.timeGranularity = $.timeGranularity;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VisualPaletteColorMapArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VisualPaletteColorMapArgs $;

        public Builder() {
            $ = new VisualPaletteColorMapArgs();
        }

        public Builder(VisualPaletteColorMapArgs defaults) {
            $ = new VisualPaletteColorMapArgs(Objects.requireNonNull(defaults));
        }

        public Builder color(Output<String> color) {
            $.color = color;
            return this;
        }

        public Builder color(String color) {
            return color(Output.of(color));
        }

        public Builder element(Output<DataPathValueArgs> element) {
            $.element = element;
            return this;
        }

        public Builder element(DataPathValueArgs element) {
            return element(Output.of(element));
        }

        public Builder timeGranularity(@Nullable Output<String> timeGranularity) {
            $.timeGranularity = timeGranularity;
            return this;
        }

        public Builder timeGranularity(String timeGranularity) {
            return timeGranularity(Output.of(timeGranularity));
        }

        public VisualPaletteColorMapArgs build() {
            if ($.color == null) {
                throw new MissingRequiredPropertyException("VisualPaletteColorMapArgs", "color");
            }
            if ($.element == null) {
                throw new MissingRequiredPropertyException("VisualPaletteColorMapArgs", "element");
            }
            return $;
        }
    }

}
