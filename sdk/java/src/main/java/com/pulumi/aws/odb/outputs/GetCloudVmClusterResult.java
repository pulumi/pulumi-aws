// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.odb.outputs;

import com.pulumi.aws.odb.outputs.GetCloudVmClusterDataCollectionOption;
import com.pulumi.aws.odb.outputs.GetCloudVmClusterIormConfigCach;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetCloudVmClusterResult {
    /**
     * @return The Amazon Resource Name (ARN) for the cloud vm cluster.
     * 
     */
    private String arn;
    /**
     * @return The ID of the Cloud Exadata Infrastructure.
     * 
     */
    private String cloudExadataInfrastructureId;
    /**
     * @return The name of the Grid Infrastructure (GI) cluster.
     * 
     */
    private String clusterName;
    /**
     * @return The OCI model compute model used when you create or clone an instance: ECPU or OCPU. An ECPU is an abstracted measure of compute resources. ECPUs are based on the number of cores elastically allocated from a pool of compute and storage servers. An OCPU is a legacy physical measure of compute resources. OCPUs are based on the physical core of a processor with hyper-threading enabled.
     * 
     */
    private String computeModel;
    /**
     * @return The number of CPU cores enabled on the VM cluster.
     * 
     */
    private Integer cpuCoreCount;
    /**
     * @return The time when the VM cluster was created.
     * 
     */
    private String createdAt;
    /**
     * @return The set of diagnostic collection options enabled for the VM cluster.
     * 
     */
    private List<GetCloudVmClusterDataCollectionOption> dataCollectionOptions;
    /**
     * @return The size of the data disk group, in terabytes (TB), that&#39;s allocated for the VM cluster.
     * 
     */
    private Double dataStorageSizeInTbs;
    /**
     * @return The amount of local node storage, in gigabytes (GB), that&#39;s allocated for the VM cluster.
     * 
     */
    private Integer dbNodeStorageSizeInGbs;
    /**
     * @return The list of database servers for the VM cluster.
     * 
     */
    private List<String> dbServers;
    /**
     * @return The type of redundancy configured for the VM cluster. NORMAL is 2-way redundancy. HIGH is 3-way redundancy.
     * 
     */
    private String diskRedundancy;
    /**
     * @return The display name of the VM cluster.
     * 
     */
    private String displayName;
    /**
     * @return The domain name of the VM cluster.
     * 
     */
    private String domain;
    /**
     * @return The software version of the Oracle Grid Infrastructure (GI) for the VM cluster.
     * 
     */
    private String giVersion;
    /**
     * @return The computed hostname prefix for the VM cluster.
     * 
     */
    private String hostnamePrefixComputed;
    private String id;
    /**
     * @return The ExadataIormConfig cache details for the VM cluster.
     * 
     */
    private List<GetCloudVmClusterIormConfigCach> iormConfigCaches;
    /**
     * @return Indicates whether database backups to local Exadata storage is enabled for the VM cluster.
     * 
     */
    private Boolean isLocalBackupEnabled;
    /**
     * @return Indicates whether the VM cluster is configured with a sparse disk group.
     * 
     */
    private Boolean isSparseDiskGroupEnabled;
    /**
     * @return The Oracle Cloud ID (OCID) of the last maintenance update history entry.
     * 
     */
    private String lastUpdateHistoryEntryId;
    /**
     * @return The Oracle license model applied to the VM cluster.
     * 
     */
    private String licenseModel;
    /**
     * @return The port number configured for the listener on the VM cluster.
     * 
     */
    private Integer listenerPort;
    /**
     * @return The amount of memory, in gigabytes (GB), that&#39;s allocated for the VM cluster.
     * 
     */
    private Integer memorySizeInGbs;
    /**
     * @return The number of nodes in the VM cluster.
     * 
     */
    private Integer nodeCount;
    /**
     * @return The name of the OCI Resource Anchor.
     * 
     */
    private String ociResourceAnchorName;
    /**
     * @return The HTTPS link to the VM cluster in OCI.
     * 
     */
    private String ociUrl;
    /**
     * @return The OCID of the VM cluster.
     * 
     */
    private String ocid;
    /**
     * @return The ID of the ODB network.
     * 
     */
    private String odbNetworkId;
    /**
     * @return The amount of progress made on the current operation on the VM cluster, expressed as a percentage.
     * 
     */
    private Double percentProgress;
    private String region;
    /**
     * @return The FQDN of the DNS record for the Single Client Access Name (SCAN) IP addresses that are associated with the VM cluster.
     * 
     */
    private String scanDnsName;
    /**
     * @return The OCID of the DNS record for the SCAN IP addresses that are associated with the VM cluster.
     * 
     */
    private String scanDnsRecordId;
    /**
     * @return The OCID of the SCAN IP addresses that are associated with the VM cluster.
     * 
     */
    private List<String> scanIpIds;
    /**
     * @return The hardware model name of the Exadata infrastructure that&#39;s running the VM cluster.
     * 
     */
    private String shape;
    /**
     * @return The public key portion of one or more key pairs used for SSH access to the VM cluster.
     * 
     */
    private List<String> sshPublicKeys;
    /**
     * @return The status of the VM cluster.
     * 
     */
    private String status;
    /**
     * @return Additional information about the status of the VM cluster.
     * 
     */
    private String statusReason;
    /**
     * @return The amount of local node storage, in gigabytes (GB), that&#39;s allocated to the VM cluster.
     * 
     */
    private Integer storageSizeInGbs;
    /**
     * @return The operating system version of the image chosen for the VM cluster.
     * 
     */
    private String systemVersion;
    private Map<String,String> tags;
    /**
     * @return The time zone of the VM cluster.
     * 
     */
    private String timezone;
    /**
     * @return The virtual IP (VIP) addresses that are associated with the VM cluster. Oracle&#39;s Cluster Ready Services (CRS) creates and maintains one VIP address for each node in the VM cluster to enable failover. If one node fails, the VIP is reassigned to another active node in the cluster.
     * 
     */
    private List<String> vipIds;

    private GetCloudVmClusterResult() {}
    /**
     * @return The Amazon Resource Name (ARN) for the cloud vm cluster.
     * 
     */
    public String arn() {
        return this.arn;
    }
    /**
     * @return The ID of the Cloud Exadata Infrastructure.
     * 
     */
    public String cloudExadataInfrastructureId() {
        return this.cloudExadataInfrastructureId;
    }
    /**
     * @return The name of the Grid Infrastructure (GI) cluster.
     * 
     */
    public String clusterName() {
        return this.clusterName;
    }
    /**
     * @return The OCI model compute model used when you create or clone an instance: ECPU or OCPU. An ECPU is an abstracted measure of compute resources. ECPUs are based on the number of cores elastically allocated from a pool of compute and storage servers. An OCPU is a legacy physical measure of compute resources. OCPUs are based on the physical core of a processor with hyper-threading enabled.
     * 
     */
    public String computeModel() {
        return this.computeModel;
    }
    /**
     * @return The number of CPU cores enabled on the VM cluster.
     * 
     */
    public Integer cpuCoreCount() {
        return this.cpuCoreCount;
    }
    /**
     * @return The time when the VM cluster was created.
     * 
     */
    public String createdAt() {
        return this.createdAt;
    }
    /**
     * @return The set of diagnostic collection options enabled for the VM cluster.
     * 
     */
    public List<GetCloudVmClusterDataCollectionOption> dataCollectionOptions() {
        return this.dataCollectionOptions;
    }
    /**
     * @return The size of the data disk group, in terabytes (TB), that&#39;s allocated for the VM cluster.
     * 
     */
    public Double dataStorageSizeInTbs() {
        return this.dataStorageSizeInTbs;
    }
    /**
     * @return The amount of local node storage, in gigabytes (GB), that&#39;s allocated for the VM cluster.
     * 
     */
    public Integer dbNodeStorageSizeInGbs() {
        return this.dbNodeStorageSizeInGbs;
    }
    /**
     * @return The list of database servers for the VM cluster.
     * 
     */
    public List<String> dbServers() {
        return this.dbServers;
    }
    /**
     * @return The type of redundancy configured for the VM cluster. NORMAL is 2-way redundancy. HIGH is 3-way redundancy.
     * 
     */
    public String diskRedundancy() {
        return this.diskRedundancy;
    }
    /**
     * @return The display name of the VM cluster.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return The domain name of the VM cluster.
     * 
     */
    public String domain() {
        return this.domain;
    }
    /**
     * @return The software version of the Oracle Grid Infrastructure (GI) for the VM cluster.
     * 
     */
    public String giVersion() {
        return this.giVersion;
    }
    /**
     * @return The computed hostname prefix for the VM cluster.
     * 
     */
    public String hostnamePrefixComputed() {
        return this.hostnamePrefixComputed;
    }
    public String id() {
        return this.id;
    }
    /**
     * @return The ExadataIormConfig cache details for the VM cluster.
     * 
     */
    public List<GetCloudVmClusterIormConfigCach> iormConfigCaches() {
        return this.iormConfigCaches;
    }
    /**
     * @return Indicates whether database backups to local Exadata storage is enabled for the VM cluster.
     * 
     */
    public Boolean isLocalBackupEnabled() {
        return this.isLocalBackupEnabled;
    }
    /**
     * @return Indicates whether the VM cluster is configured with a sparse disk group.
     * 
     */
    public Boolean isSparseDiskGroupEnabled() {
        return this.isSparseDiskGroupEnabled;
    }
    /**
     * @return The Oracle Cloud ID (OCID) of the last maintenance update history entry.
     * 
     */
    public String lastUpdateHistoryEntryId() {
        return this.lastUpdateHistoryEntryId;
    }
    /**
     * @return The Oracle license model applied to the VM cluster.
     * 
     */
    public String licenseModel() {
        return this.licenseModel;
    }
    /**
     * @return The port number configured for the listener on the VM cluster.
     * 
     */
    public Integer listenerPort() {
        return this.listenerPort;
    }
    /**
     * @return The amount of memory, in gigabytes (GB), that&#39;s allocated for the VM cluster.
     * 
     */
    public Integer memorySizeInGbs() {
        return this.memorySizeInGbs;
    }
    /**
     * @return The number of nodes in the VM cluster.
     * 
     */
    public Integer nodeCount() {
        return this.nodeCount;
    }
    /**
     * @return The name of the OCI Resource Anchor.
     * 
     */
    public String ociResourceAnchorName() {
        return this.ociResourceAnchorName;
    }
    /**
     * @return The HTTPS link to the VM cluster in OCI.
     * 
     */
    public String ociUrl() {
        return this.ociUrl;
    }
    /**
     * @return The OCID of the VM cluster.
     * 
     */
    public String ocid() {
        return this.ocid;
    }
    /**
     * @return The ID of the ODB network.
     * 
     */
    public String odbNetworkId() {
        return this.odbNetworkId;
    }
    /**
     * @return The amount of progress made on the current operation on the VM cluster, expressed as a percentage.
     * 
     */
    public Double percentProgress() {
        return this.percentProgress;
    }
    public String region() {
        return this.region;
    }
    /**
     * @return The FQDN of the DNS record for the Single Client Access Name (SCAN) IP addresses that are associated with the VM cluster.
     * 
     */
    public String scanDnsName() {
        return this.scanDnsName;
    }
    /**
     * @return The OCID of the DNS record for the SCAN IP addresses that are associated with the VM cluster.
     * 
     */
    public String scanDnsRecordId() {
        return this.scanDnsRecordId;
    }
    /**
     * @return The OCID of the SCAN IP addresses that are associated with the VM cluster.
     * 
     */
    public List<String> scanIpIds() {
        return this.scanIpIds;
    }
    /**
     * @return The hardware model name of the Exadata infrastructure that&#39;s running the VM cluster.
     * 
     */
    public String shape() {
        return this.shape;
    }
    /**
     * @return The public key portion of one or more key pairs used for SSH access to the VM cluster.
     * 
     */
    public List<String> sshPublicKeys() {
        return this.sshPublicKeys;
    }
    /**
     * @return The status of the VM cluster.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return Additional information about the status of the VM cluster.
     * 
     */
    public String statusReason() {
        return this.statusReason;
    }
    /**
     * @return The amount of local node storage, in gigabytes (GB), that&#39;s allocated to the VM cluster.
     * 
     */
    public Integer storageSizeInGbs() {
        return this.storageSizeInGbs;
    }
    /**
     * @return The operating system version of the image chosen for the VM cluster.
     * 
     */
    public String systemVersion() {
        return this.systemVersion;
    }
    public Map<String,String> tags() {
        return this.tags;
    }
    /**
     * @return The time zone of the VM cluster.
     * 
     */
    public String timezone() {
        return this.timezone;
    }
    /**
     * @return The virtual IP (VIP) addresses that are associated with the VM cluster. Oracle&#39;s Cluster Ready Services (CRS) creates and maintains one VIP address for each node in the VM cluster to enable failover. If one node fails, the VIP is reassigned to another active node in the cluster.
     * 
     */
    public List<String> vipIds() {
        return this.vipIds;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCloudVmClusterResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String arn;
        private String cloudExadataInfrastructureId;
        private String clusterName;
        private String computeModel;
        private Integer cpuCoreCount;
        private String createdAt;
        private List<GetCloudVmClusterDataCollectionOption> dataCollectionOptions;
        private Double dataStorageSizeInTbs;
        private Integer dbNodeStorageSizeInGbs;
        private List<String> dbServers;
        private String diskRedundancy;
        private String displayName;
        private String domain;
        private String giVersion;
        private String hostnamePrefixComputed;
        private String id;
        private List<GetCloudVmClusterIormConfigCach> iormConfigCaches;
        private Boolean isLocalBackupEnabled;
        private Boolean isSparseDiskGroupEnabled;
        private String lastUpdateHistoryEntryId;
        private String licenseModel;
        private Integer listenerPort;
        private Integer memorySizeInGbs;
        private Integer nodeCount;
        private String ociResourceAnchorName;
        private String ociUrl;
        private String ocid;
        private String odbNetworkId;
        private Double percentProgress;
        private String region;
        private String scanDnsName;
        private String scanDnsRecordId;
        private List<String> scanIpIds;
        private String shape;
        private List<String> sshPublicKeys;
        private String status;
        private String statusReason;
        private Integer storageSizeInGbs;
        private String systemVersion;
        private Map<String,String> tags;
        private String timezone;
        private List<String> vipIds;
        public Builder() {}
        public Builder(GetCloudVmClusterResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.cloudExadataInfrastructureId = defaults.cloudExadataInfrastructureId;
    	      this.clusterName = defaults.clusterName;
    	      this.computeModel = defaults.computeModel;
    	      this.cpuCoreCount = defaults.cpuCoreCount;
    	      this.createdAt = defaults.createdAt;
    	      this.dataCollectionOptions = defaults.dataCollectionOptions;
    	      this.dataStorageSizeInTbs = defaults.dataStorageSizeInTbs;
    	      this.dbNodeStorageSizeInGbs = defaults.dbNodeStorageSizeInGbs;
    	      this.dbServers = defaults.dbServers;
    	      this.diskRedundancy = defaults.diskRedundancy;
    	      this.displayName = defaults.displayName;
    	      this.domain = defaults.domain;
    	      this.giVersion = defaults.giVersion;
    	      this.hostnamePrefixComputed = defaults.hostnamePrefixComputed;
    	      this.id = defaults.id;
    	      this.iormConfigCaches = defaults.iormConfigCaches;
    	      this.isLocalBackupEnabled = defaults.isLocalBackupEnabled;
    	      this.isSparseDiskGroupEnabled = defaults.isSparseDiskGroupEnabled;
    	      this.lastUpdateHistoryEntryId = defaults.lastUpdateHistoryEntryId;
    	      this.licenseModel = defaults.licenseModel;
    	      this.listenerPort = defaults.listenerPort;
    	      this.memorySizeInGbs = defaults.memorySizeInGbs;
    	      this.nodeCount = defaults.nodeCount;
    	      this.ociResourceAnchorName = defaults.ociResourceAnchorName;
    	      this.ociUrl = defaults.ociUrl;
    	      this.ocid = defaults.ocid;
    	      this.odbNetworkId = defaults.odbNetworkId;
    	      this.percentProgress = defaults.percentProgress;
    	      this.region = defaults.region;
    	      this.scanDnsName = defaults.scanDnsName;
    	      this.scanDnsRecordId = defaults.scanDnsRecordId;
    	      this.scanIpIds = defaults.scanIpIds;
    	      this.shape = defaults.shape;
    	      this.sshPublicKeys = defaults.sshPublicKeys;
    	      this.status = defaults.status;
    	      this.statusReason = defaults.statusReason;
    	      this.storageSizeInGbs = defaults.storageSizeInGbs;
    	      this.systemVersion = defaults.systemVersion;
    	      this.tags = defaults.tags;
    	      this.timezone = defaults.timezone;
    	      this.vipIds = defaults.vipIds;
        }

        @CustomType.Setter
        public Builder arn(String arn) {
            if (arn == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "arn");
            }
            this.arn = arn;
            return this;
        }
        @CustomType.Setter
        public Builder cloudExadataInfrastructureId(String cloudExadataInfrastructureId) {
            if (cloudExadataInfrastructureId == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "cloudExadataInfrastructureId");
            }
            this.cloudExadataInfrastructureId = cloudExadataInfrastructureId;
            return this;
        }
        @CustomType.Setter
        public Builder clusterName(String clusterName) {
            if (clusterName == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "clusterName");
            }
            this.clusterName = clusterName;
            return this;
        }
        @CustomType.Setter
        public Builder computeModel(String computeModel) {
            if (computeModel == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "computeModel");
            }
            this.computeModel = computeModel;
            return this;
        }
        @CustomType.Setter
        public Builder cpuCoreCount(Integer cpuCoreCount) {
            if (cpuCoreCount == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "cpuCoreCount");
            }
            this.cpuCoreCount = cpuCoreCount;
            return this;
        }
        @CustomType.Setter
        public Builder createdAt(String createdAt) {
            if (createdAt == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "createdAt");
            }
            this.createdAt = createdAt;
            return this;
        }
        @CustomType.Setter
        public Builder dataCollectionOptions(List<GetCloudVmClusterDataCollectionOption> dataCollectionOptions) {
            if (dataCollectionOptions == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "dataCollectionOptions");
            }
            this.dataCollectionOptions = dataCollectionOptions;
            return this;
        }
        public Builder dataCollectionOptions(GetCloudVmClusterDataCollectionOption... dataCollectionOptions) {
            return dataCollectionOptions(List.of(dataCollectionOptions));
        }
        @CustomType.Setter
        public Builder dataStorageSizeInTbs(Double dataStorageSizeInTbs) {
            if (dataStorageSizeInTbs == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "dataStorageSizeInTbs");
            }
            this.dataStorageSizeInTbs = dataStorageSizeInTbs;
            return this;
        }
        @CustomType.Setter
        public Builder dbNodeStorageSizeInGbs(Integer dbNodeStorageSizeInGbs) {
            if (dbNodeStorageSizeInGbs == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "dbNodeStorageSizeInGbs");
            }
            this.dbNodeStorageSizeInGbs = dbNodeStorageSizeInGbs;
            return this;
        }
        @CustomType.Setter
        public Builder dbServers(List<String> dbServers) {
            if (dbServers == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "dbServers");
            }
            this.dbServers = dbServers;
            return this;
        }
        public Builder dbServers(String... dbServers) {
            return dbServers(List.of(dbServers));
        }
        @CustomType.Setter
        public Builder diskRedundancy(String diskRedundancy) {
            if (diskRedundancy == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "diskRedundancy");
            }
            this.diskRedundancy = diskRedundancy;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder domain(String domain) {
            if (domain == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "domain");
            }
            this.domain = domain;
            return this;
        }
        @CustomType.Setter
        public Builder giVersion(String giVersion) {
            if (giVersion == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "giVersion");
            }
            this.giVersion = giVersion;
            return this;
        }
        @CustomType.Setter
        public Builder hostnamePrefixComputed(String hostnamePrefixComputed) {
            if (hostnamePrefixComputed == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "hostnamePrefixComputed");
            }
            this.hostnamePrefixComputed = hostnamePrefixComputed;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder iormConfigCaches(List<GetCloudVmClusterIormConfigCach> iormConfigCaches) {
            if (iormConfigCaches == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "iormConfigCaches");
            }
            this.iormConfigCaches = iormConfigCaches;
            return this;
        }
        public Builder iormConfigCaches(GetCloudVmClusterIormConfigCach... iormConfigCaches) {
            return iormConfigCaches(List.of(iormConfigCaches));
        }
        @CustomType.Setter
        public Builder isLocalBackupEnabled(Boolean isLocalBackupEnabled) {
            if (isLocalBackupEnabled == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "isLocalBackupEnabled");
            }
            this.isLocalBackupEnabled = isLocalBackupEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder isSparseDiskGroupEnabled(Boolean isSparseDiskGroupEnabled) {
            if (isSparseDiskGroupEnabled == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "isSparseDiskGroupEnabled");
            }
            this.isSparseDiskGroupEnabled = isSparseDiskGroupEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder lastUpdateHistoryEntryId(String lastUpdateHistoryEntryId) {
            if (lastUpdateHistoryEntryId == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "lastUpdateHistoryEntryId");
            }
            this.lastUpdateHistoryEntryId = lastUpdateHistoryEntryId;
            return this;
        }
        @CustomType.Setter
        public Builder licenseModel(String licenseModel) {
            if (licenseModel == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "licenseModel");
            }
            this.licenseModel = licenseModel;
            return this;
        }
        @CustomType.Setter
        public Builder listenerPort(Integer listenerPort) {
            if (listenerPort == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "listenerPort");
            }
            this.listenerPort = listenerPort;
            return this;
        }
        @CustomType.Setter
        public Builder memorySizeInGbs(Integer memorySizeInGbs) {
            if (memorySizeInGbs == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "memorySizeInGbs");
            }
            this.memorySizeInGbs = memorySizeInGbs;
            return this;
        }
        @CustomType.Setter
        public Builder nodeCount(Integer nodeCount) {
            if (nodeCount == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "nodeCount");
            }
            this.nodeCount = nodeCount;
            return this;
        }
        @CustomType.Setter
        public Builder ociResourceAnchorName(String ociResourceAnchorName) {
            if (ociResourceAnchorName == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "ociResourceAnchorName");
            }
            this.ociResourceAnchorName = ociResourceAnchorName;
            return this;
        }
        @CustomType.Setter
        public Builder ociUrl(String ociUrl) {
            if (ociUrl == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "ociUrl");
            }
            this.ociUrl = ociUrl;
            return this;
        }
        @CustomType.Setter
        public Builder ocid(String ocid) {
            if (ocid == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "ocid");
            }
            this.ocid = ocid;
            return this;
        }
        @CustomType.Setter
        public Builder odbNetworkId(String odbNetworkId) {
            if (odbNetworkId == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "odbNetworkId");
            }
            this.odbNetworkId = odbNetworkId;
            return this;
        }
        @CustomType.Setter
        public Builder percentProgress(Double percentProgress) {
            if (percentProgress == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "percentProgress");
            }
            this.percentProgress = percentProgress;
            return this;
        }
        @CustomType.Setter
        public Builder region(String region) {
            if (region == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "region");
            }
            this.region = region;
            return this;
        }
        @CustomType.Setter
        public Builder scanDnsName(String scanDnsName) {
            if (scanDnsName == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "scanDnsName");
            }
            this.scanDnsName = scanDnsName;
            return this;
        }
        @CustomType.Setter
        public Builder scanDnsRecordId(String scanDnsRecordId) {
            if (scanDnsRecordId == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "scanDnsRecordId");
            }
            this.scanDnsRecordId = scanDnsRecordId;
            return this;
        }
        @CustomType.Setter
        public Builder scanIpIds(List<String> scanIpIds) {
            if (scanIpIds == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "scanIpIds");
            }
            this.scanIpIds = scanIpIds;
            return this;
        }
        public Builder scanIpIds(String... scanIpIds) {
            return scanIpIds(List.of(scanIpIds));
        }
        @CustomType.Setter
        public Builder shape(String shape) {
            if (shape == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "shape");
            }
            this.shape = shape;
            return this;
        }
        @CustomType.Setter
        public Builder sshPublicKeys(List<String> sshPublicKeys) {
            if (sshPublicKeys == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "sshPublicKeys");
            }
            this.sshPublicKeys = sshPublicKeys;
            return this;
        }
        public Builder sshPublicKeys(String... sshPublicKeys) {
            return sshPublicKeys(List.of(sshPublicKeys));
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder statusReason(String statusReason) {
            if (statusReason == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "statusReason");
            }
            this.statusReason = statusReason;
            return this;
        }
        @CustomType.Setter
        public Builder storageSizeInGbs(Integer storageSizeInGbs) {
            if (storageSizeInGbs == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "storageSizeInGbs");
            }
            this.storageSizeInGbs = storageSizeInGbs;
            return this;
        }
        @CustomType.Setter
        public Builder systemVersion(String systemVersion) {
            if (systemVersion == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "systemVersion");
            }
            this.systemVersion = systemVersion;
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder timezone(String timezone) {
            if (timezone == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "timezone");
            }
            this.timezone = timezone;
            return this;
        }
        @CustomType.Setter
        public Builder vipIds(List<String> vipIds) {
            if (vipIds == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "vipIds");
            }
            this.vipIds = vipIds;
            return this;
        }
        public Builder vipIds(String... vipIds) {
            return vipIds(List.of(vipIds));
        }
        public GetCloudVmClusterResult build() {
            final var _resultValue = new GetCloudVmClusterResult();
            _resultValue.arn = arn;
            _resultValue.cloudExadataInfrastructureId = cloudExadataInfrastructureId;
            _resultValue.clusterName = clusterName;
            _resultValue.computeModel = computeModel;
            _resultValue.cpuCoreCount = cpuCoreCount;
            _resultValue.createdAt = createdAt;
            _resultValue.dataCollectionOptions = dataCollectionOptions;
            _resultValue.dataStorageSizeInTbs = dataStorageSizeInTbs;
            _resultValue.dbNodeStorageSizeInGbs = dbNodeStorageSizeInGbs;
            _resultValue.dbServers = dbServers;
            _resultValue.diskRedundancy = diskRedundancy;
            _resultValue.displayName = displayName;
            _resultValue.domain = domain;
            _resultValue.giVersion = giVersion;
            _resultValue.hostnamePrefixComputed = hostnamePrefixComputed;
            _resultValue.id = id;
            _resultValue.iormConfigCaches = iormConfigCaches;
            _resultValue.isLocalBackupEnabled = isLocalBackupEnabled;
            _resultValue.isSparseDiskGroupEnabled = isSparseDiskGroupEnabled;
            _resultValue.lastUpdateHistoryEntryId = lastUpdateHistoryEntryId;
            _resultValue.licenseModel = licenseModel;
            _resultValue.listenerPort = listenerPort;
            _resultValue.memorySizeInGbs = memorySizeInGbs;
            _resultValue.nodeCount = nodeCount;
            _resultValue.ociResourceAnchorName = ociResourceAnchorName;
            _resultValue.ociUrl = ociUrl;
            _resultValue.ocid = ocid;
            _resultValue.odbNetworkId = odbNetworkId;
            _resultValue.percentProgress = percentProgress;
            _resultValue.region = region;
            _resultValue.scanDnsName = scanDnsName;
            _resultValue.scanDnsRecordId = scanDnsRecordId;
            _resultValue.scanIpIds = scanIpIds;
            _resultValue.shape = shape;
            _resultValue.sshPublicKeys = sshPublicKeys;
            _resultValue.status = status;
            _resultValue.statusReason = statusReason;
            _resultValue.storageSizeInGbs = storageSizeInGbs;
            _resultValue.systemVersion = systemVersion;
            _resultValue.tags = tags;
            _resultValue.timezone = timezone;
            _resultValue.vipIds = vipIds;
            return _resultValue;
        }
    }
}
