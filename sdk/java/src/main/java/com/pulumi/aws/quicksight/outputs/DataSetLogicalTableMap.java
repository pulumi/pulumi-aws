// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.outputs;

import com.pulumi.aws.quicksight.outputs.DataSetLogicalTableMapDataTransform;
import com.pulumi.aws.quicksight.outputs.DataSetLogicalTableMapSource;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class DataSetLogicalTableMap {
    /**
     * @return A display name for the logical table.
     * 
     */
    private String alias;
    /**
     * @return Transform operations that act on this logical table. For this structure to be valid, only one of the attributes can be non-null. See data_transforms.
     * 
     */
    private @Nullable List<DataSetLogicalTableMapDataTransform> dataTransforms;
    /**
     * @return Key of the logical table map.
     * 
     */
    private String logicalTableMapId;
    /**
     * @return Source of this logical table. See source.
     * 
     */
    private DataSetLogicalTableMapSource source;

    private DataSetLogicalTableMap() {}
    /**
     * @return A display name for the logical table.
     * 
     */
    public String alias() {
        return this.alias;
    }
    /**
     * @return Transform operations that act on this logical table. For this structure to be valid, only one of the attributes can be non-null. See data_transforms.
     * 
     */
    public List<DataSetLogicalTableMapDataTransform> dataTransforms() {
        return this.dataTransforms == null ? List.of() : this.dataTransforms;
    }
    /**
     * @return Key of the logical table map.
     * 
     */
    public String logicalTableMapId() {
        return this.logicalTableMapId;
    }
    /**
     * @return Source of this logical table. See source.
     * 
     */
    public DataSetLogicalTableMapSource source() {
        return this.source;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DataSetLogicalTableMap defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String alias;
        private @Nullable List<DataSetLogicalTableMapDataTransform> dataTransforms;
        private String logicalTableMapId;
        private DataSetLogicalTableMapSource source;
        public Builder() {}
        public Builder(DataSetLogicalTableMap defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.alias = defaults.alias;
    	      this.dataTransforms = defaults.dataTransforms;
    	      this.logicalTableMapId = defaults.logicalTableMapId;
    	      this.source = defaults.source;
        }

        @CustomType.Setter
        public Builder alias(String alias) {
            this.alias = Objects.requireNonNull(alias);
            return this;
        }
        @CustomType.Setter
        public Builder dataTransforms(@Nullable List<DataSetLogicalTableMapDataTransform> dataTransforms) {
            this.dataTransforms = dataTransforms;
            return this;
        }
        public Builder dataTransforms(DataSetLogicalTableMapDataTransform... dataTransforms) {
            return dataTransforms(List.of(dataTransforms));
        }
        @CustomType.Setter
        public Builder logicalTableMapId(String logicalTableMapId) {
            this.logicalTableMapId = Objects.requireNonNull(logicalTableMapId);
            return this;
        }
        @CustomType.Setter
        public Builder source(DataSetLogicalTableMapSource source) {
            this.source = Objects.requireNonNull(source);
            return this;
        }
        public DataSetLogicalTableMap build() {
            final var _resultValue = new DataSetLogicalTableMap();
            _resultValue.alias = alias;
            _resultValue.dataTransforms = dataTransforms;
            _resultValue.logicalTableMapId = logicalTableMapId;
            _resultValue.source = source;
            return _resultValue;
        }
    }
}
