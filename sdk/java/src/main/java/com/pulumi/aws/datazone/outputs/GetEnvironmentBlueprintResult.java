// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.datazone.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetEnvironmentBlueprintResult {
    /**
     * @return Provider of the blueprint
     * 
     */
    private String blueprintProvider;
    /**
     * @return Description of the blueprint
     * 
     */
    private String description;
    private String domainId;
    /**
     * @return ID of the environment blueprint
     * 
     */
    private String id;
    private Boolean managed;
    private String name;

    private GetEnvironmentBlueprintResult() {}
    /**
     * @return Provider of the blueprint
     * 
     */
    public String blueprintProvider() {
        return this.blueprintProvider;
    }
    /**
     * @return Description of the blueprint
     * 
     */
    public String description() {
        return this.description;
    }
    public String domainId() {
        return this.domainId;
    }
    /**
     * @return ID of the environment blueprint
     * 
     */
    public String id() {
        return this.id;
    }
    public Boolean managed() {
        return this.managed;
    }
    public String name() {
        return this.name;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetEnvironmentBlueprintResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String blueprintProvider;
        private String description;
        private String domainId;
        private String id;
        private Boolean managed;
        private String name;
        public Builder() {}
        public Builder(GetEnvironmentBlueprintResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.blueprintProvider = defaults.blueprintProvider;
    	      this.description = defaults.description;
    	      this.domainId = defaults.domainId;
    	      this.id = defaults.id;
    	      this.managed = defaults.managed;
    	      this.name = defaults.name;
        }

        @CustomType.Setter
        public Builder blueprintProvider(String blueprintProvider) {
            if (blueprintProvider == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentBlueprintResult", "blueprintProvider");
            }
            this.blueprintProvider = blueprintProvider;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentBlueprintResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder domainId(String domainId) {
            if (domainId == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentBlueprintResult", "domainId");
            }
            this.domainId = domainId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentBlueprintResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder managed(Boolean managed) {
            if (managed == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentBlueprintResult", "managed");
            }
            this.managed = managed;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentBlueprintResult", "name");
            }
            this.name = name;
            return this;
        }
        public GetEnvironmentBlueprintResult build() {
            final var _resultValue = new GetEnvironmentBlueprintResult();
            _resultValue.blueprintProvider = blueprintProvider;
            _resultValue.description = description;
            _resultValue.domainId = domainId;
            _resultValue.id = id;
            _resultValue.managed = managed;
            _resultValue.name = name;
            return _resultValue;
        }
    }
}
