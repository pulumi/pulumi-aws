// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.opsworks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CustomLayerCloudwatchConfigurationLogStreamArgs extends com.pulumi.resources.ResourceArgs {

    public static final CustomLayerCloudwatchConfigurationLogStreamArgs Empty = new CustomLayerCloudwatchConfigurationLogStreamArgs();

    /**
     * Specifies the max number of log events in a batch, up to `10000`. The default value is `1000`.
     * 
     */
    @Import(name="batchCount")
    private @Nullable Output<Integer> batchCount;

    /**
     * @return Specifies the max number of log events in a batch, up to `10000`. The default value is `1000`.
     * 
     */
    public Optional<Output<Integer>> batchCount() {
        return Optional.ofNullable(this.batchCount);
    }

    /**
     * Specifies the maximum size of log events in a batch, in bytes, up to `1048576` bytes. The default value is `32768` bytes.
     * 
     */
    @Import(name="batchSize")
    private @Nullable Output<Integer> batchSize;

    /**
     * @return Specifies the maximum size of log events in a batch, in bytes, up to `1048576` bytes. The default value is `32768` bytes.
     * 
     */
    public Optional<Output<Integer>> batchSize() {
        return Optional.ofNullable(this.batchSize);
    }

    /**
     * Specifies the time duration for the batching of log events. The minimum value is `5000` and default value is `5000`.
     * 
     */
    @Import(name="bufferDuration")
    private @Nullable Output<Integer> bufferDuration;

    /**
     * @return Specifies the time duration for the batching of log events. The minimum value is `5000` and default value is `5000`.
     * 
     */
    public Optional<Output<Integer>> bufferDuration() {
        return Optional.ofNullable(this.bufferDuration);
    }

    /**
     * Specifies how the timestamp is extracted from logs. For more information, see the CloudWatch Logs Agent Reference (https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/AgentReference.html).
     * 
     */
    @Import(name="datetimeFormat")
    private @Nullable Output<String> datetimeFormat;

    /**
     * @return Specifies how the timestamp is extracted from logs. For more information, see the CloudWatch Logs Agent Reference (https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/AgentReference.html).
     * 
     */
    public Optional<Output<String>> datetimeFormat() {
        return Optional.ofNullable(this.datetimeFormat);
    }

    /**
     * Specifies the encoding of the log file so that the file can be read correctly. The default is `utf_8`.
     * 
     */
    @Import(name="encoding")
    private @Nullable Output<String> encoding;

    /**
     * @return Specifies the encoding of the log file so that the file can be read correctly. The default is `utf_8`.
     * 
     */
    public Optional<Output<String>> encoding() {
        return Optional.ofNullable(this.encoding);
    }

    /**
     * Specifies log files that you want to push to CloudWatch Logs. File can point to a specific file or multiple files (by using wild card characters such as /var/log/system.log*).
     * 
     */
    @Import(name="file", required=true)
    private Output<String> file;

    /**
     * @return Specifies log files that you want to push to CloudWatch Logs. File can point to a specific file or multiple files (by using wild card characters such as /var/log/system.log*).
     * 
     */
    public Output<String> file() {
        return this.file;
    }

    /**
     * Specifies the range of lines for identifying a file. The valid values are one number, or two dash-delimited numbers, such as `1`, `2-5`. The default value is `1`.
     * 
     */
    @Import(name="fileFingerprintLines")
    private @Nullable Output<String> fileFingerprintLines;

    /**
     * @return Specifies the range of lines for identifying a file. The valid values are one number, or two dash-delimited numbers, such as `1`, `2-5`. The default value is `1`.
     * 
     */
    public Optional<Output<String>> fileFingerprintLines() {
        return Optional.ofNullable(this.fileFingerprintLines);
    }

    /**
     * Specifies where to start to read data (`start_of_file` or `end_of_file`). The default is `start_of_file`.
     * 
     */
    @Import(name="initialPosition")
    private @Nullable Output<String> initialPosition;

    /**
     * @return Specifies where to start to read data (`start_of_file` or `end_of_file`). The default is `start_of_file`.
     * 
     */
    public Optional<Output<String>> initialPosition() {
        return Optional.ofNullable(this.initialPosition);
    }

    /**
     * Specifies the destination log group. A log group is created automatically if it doesn&#39;t already exist.
     * 
     */
    @Import(name="logGroupName", required=true)
    private Output<String> logGroupName;

    /**
     * @return Specifies the destination log group. A log group is created automatically if it doesn&#39;t already exist.
     * 
     */
    public Output<String> logGroupName() {
        return this.logGroupName;
    }

    /**
     * Specifies the pattern for identifying the start of a log message.
     * 
     */
    @Import(name="multilineStartPattern")
    private @Nullable Output<String> multilineStartPattern;

    /**
     * @return Specifies the pattern for identifying the start of a log message.
     * 
     */
    public Optional<Output<String>> multilineStartPattern() {
        return Optional.ofNullable(this.multilineStartPattern);
    }

    /**
     * Specifies the time zone of log event time stamps.
     * 
     */
    @Import(name="timeZone")
    private @Nullable Output<String> timeZone;

    /**
     * @return Specifies the time zone of log event time stamps.
     * 
     */
    public Optional<Output<String>> timeZone() {
        return Optional.ofNullable(this.timeZone);
    }

    private CustomLayerCloudwatchConfigurationLogStreamArgs() {}

    private CustomLayerCloudwatchConfigurationLogStreamArgs(CustomLayerCloudwatchConfigurationLogStreamArgs $) {
        this.batchCount = $.batchCount;
        this.batchSize = $.batchSize;
        this.bufferDuration = $.bufferDuration;
        this.datetimeFormat = $.datetimeFormat;
        this.encoding = $.encoding;
        this.file = $.file;
        this.fileFingerprintLines = $.fileFingerprintLines;
        this.initialPosition = $.initialPosition;
        this.logGroupName = $.logGroupName;
        this.multilineStartPattern = $.multilineStartPattern;
        this.timeZone = $.timeZone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CustomLayerCloudwatchConfigurationLogStreamArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CustomLayerCloudwatchConfigurationLogStreamArgs $;

        public Builder() {
            $ = new CustomLayerCloudwatchConfigurationLogStreamArgs();
        }

        public Builder(CustomLayerCloudwatchConfigurationLogStreamArgs defaults) {
            $ = new CustomLayerCloudwatchConfigurationLogStreamArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param batchCount Specifies the max number of log events in a batch, up to `10000`. The default value is `1000`.
         * 
         * @return builder
         * 
         */
        public Builder batchCount(@Nullable Output<Integer> batchCount) {
            $.batchCount = batchCount;
            return this;
        }

        /**
         * @param batchCount Specifies the max number of log events in a batch, up to `10000`. The default value is `1000`.
         * 
         * @return builder
         * 
         */
        public Builder batchCount(Integer batchCount) {
            return batchCount(Output.of(batchCount));
        }

        /**
         * @param batchSize Specifies the maximum size of log events in a batch, in bytes, up to `1048576` bytes. The default value is `32768` bytes.
         * 
         * @return builder
         * 
         */
        public Builder batchSize(@Nullable Output<Integer> batchSize) {
            $.batchSize = batchSize;
            return this;
        }

        /**
         * @param batchSize Specifies the maximum size of log events in a batch, in bytes, up to `1048576` bytes. The default value is `32768` bytes.
         * 
         * @return builder
         * 
         */
        public Builder batchSize(Integer batchSize) {
            return batchSize(Output.of(batchSize));
        }

        /**
         * @param bufferDuration Specifies the time duration for the batching of log events. The minimum value is `5000` and default value is `5000`.
         * 
         * @return builder
         * 
         */
        public Builder bufferDuration(@Nullable Output<Integer> bufferDuration) {
            $.bufferDuration = bufferDuration;
            return this;
        }

        /**
         * @param bufferDuration Specifies the time duration for the batching of log events. The minimum value is `5000` and default value is `5000`.
         * 
         * @return builder
         * 
         */
        public Builder bufferDuration(Integer bufferDuration) {
            return bufferDuration(Output.of(bufferDuration));
        }

        /**
         * @param datetimeFormat Specifies how the timestamp is extracted from logs. For more information, see the CloudWatch Logs Agent Reference (https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/AgentReference.html).
         * 
         * @return builder
         * 
         */
        public Builder datetimeFormat(@Nullable Output<String> datetimeFormat) {
            $.datetimeFormat = datetimeFormat;
            return this;
        }

        /**
         * @param datetimeFormat Specifies how the timestamp is extracted from logs. For more information, see the CloudWatch Logs Agent Reference (https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/AgentReference.html).
         * 
         * @return builder
         * 
         */
        public Builder datetimeFormat(String datetimeFormat) {
            return datetimeFormat(Output.of(datetimeFormat));
        }

        /**
         * @param encoding Specifies the encoding of the log file so that the file can be read correctly. The default is `utf_8`.
         * 
         * @return builder
         * 
         */
        public Builder encoding(@Nullable Output<String> encoding) {
            $.encoding = encoding;
            return this;
        }

        /**
         * @param encoding Specifies the encoding of the log file so that the file can be read correctly. The default is `utf_8`.
         * 
         * @return builder
         * 
         */
        public Builder encoding(String encoding) {
            return encoding(Output.of(encoding));
        }

        /**
         * @param file Specifies log files that you want to push to CloudWatch Logs. File can point to a specific file or multiple files (by using wild card characters such as /var/log/system.log*).
         * 
         * @return builder
         * 
         */
        public Builder file(Output<String> file) {
            $.file = file;
            return this;
        }

        /**
         * @param file Specifies log files that you want to push to CloudWatch Logs. File can point to a specific file or multiple files (by using wild card characters such as /var/log/system.log*).
         * 
         * @return builder
         * 
         */
        public Builder file(String file) {
            return file(Output.of(file));
        }

        /**
         * @param fileFingerprintLines Specifies the range of lines for identifying a file. The valid values are one number, or two dash-delimited numbers, such as `1`, `2-5`. The default value is `1`.
         * 
         * @return builder
         * 
         */
        public Builder fileFingerprintLines(@Nullable Output<String> fileFingerprintLines) {
            $.fileFingerprintLines = fileFingerprintLines;
            return this;
        }

        /**
         * @param fileFingerprintLines Specifies the range of lines for identifying a file. The valid values are one number, or two dash-delimited numbers, such as `1`, `2-5`. The default value is `1`.
         * 
         * @return builder
         * 
         */
        public Builder fileFingerprintLines(String fileFingerprintLines) {
            return fileFingerprintLines(Output.of(fileFingerprintLines));
        }

        /**
         * @param initialPosition Specifies where to start to read data (`start_of_file` or `end_of_file`). The default is `start_of_file`.
         * 
         * @return builder
         * 
         */
        public Builder initialPosition(@Nullable Output<String> initialPosition) {
            $.initialPosition = initialPosition;
            return this;
        }

        /**
         * @param initialPosition Specifies where to start to read data (`start_of_file` or `end_of_file`). The default is `start_of_file`.
         * 
         * @return builder
         * 
         */
        public Builder initialPosition(String initialPosition) {
            return initialPosition(Output.of(initialPosition));
        }

        /**
         * @param logGroupName Specifies the destination log group. A log group is created automatically if it doesn&#39;t already exist.
         * 
         * @return builder
         * 
         */
        public Builder logGroupName(Output<String> logGroupName) {
            $.logGroupName = logGroupName;
            return this;
        }

        /**
         * @param logGroupName Specifies the destination log group. A log group is created automatically if it doesn&#39;t already exist.
         * 
         * @return builder
         * 
         */
        public Builder logGroupName(String logGroupName) {
            return logGroupName(Output.of(logGroupName));
        }

        /**
         * @param multilineStartPattern Specifies the pattern for identifying the start of a log message.
         * 
         * @return builder
         * 
         */
        public Builder multilineStartPattern(@Nullable Output<String> multilineStartPattern) {
            $.multilineStartPattern = multilineStartPattern;
            return this;
        }

        /**
         * @param multilineStartPattern Specifies the pattern for identifying the start of a log message.
         * 
         * @return builder
         * 
         */
        public Builder multilineStartPattern(String multilineStartPattern) {
            return multilineStartPattern(Output.of(multilineStartPattern));
        }

        /**
         * @param timeZone Specifies the time zone of log event time stamps.
         * 
         * @return builder
         * 
         */
        public Builder timeZone(@Nullable Output<String> timeZone) {
            $.timeZone = timeZone;
            return this;
        }

        /**
         * @param timeZone Specifies the time zone of log event time stamps.
         * 
         * @return builder
         * 
         */
        public Builder timeZone(String timeZone) {
            return timeZone(Output.of(timeZone));
        }

        public CustomLayerCloudwatchConfigurationLogStreamArgs build() {
            $.file = Objects.requireNonNull($.file, "expected parameter 'file' to be non-null");
            $.logGroupName = Objects.requireNonNull($.logGroupName, "expected parameter 'logGroupName' to be non-null");
            return $;
        }
    }

}
