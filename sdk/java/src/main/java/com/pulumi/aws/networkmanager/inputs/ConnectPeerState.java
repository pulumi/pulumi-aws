// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.networkmanager.inputs;

import com.pulumi.aws.networkmanager.inputs.ConnectPeerBgpOptionsArgs;
import com.pulumi.aws.networkmanager.inputs.ConnectPeerConfigurationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConnectPeerState extends com.pulumi.resources.ResourceArgs {

    public static final ConnectPeerState Empty = new ConnectPeerState();

    /**
     * The ARN of the attachment.
     * 
     */
    @Import(name="arn")
    private @Nullable Output<String> arn;

    /**
     * @return The ARN of the attachment.
     * 
     */
    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    /**
     * The Connect peer BGP options.
     * 
     */
    @Import(name="bgpOptions")
    private @Nullable Output<ConnectPeerBgpOptionsArgs> bgpOptions;

    /**
     * @return The Connect peer BGP options.
     * 
     */
    public Optional<Output<ConnectPeerBgpOptionsArgs>> bgpOptions() {
        return Optional.ofNullable(this.bgpOptions);
    }

    /**
     * The configuration of the Connect peer.
     * 
     */
    @Import(name="configurations")
    private @Nullable Output<List<ConnectPeerConfigurationArgs>> configurations;

    /**
     * @return The configuration of the Connect peer.
     * 
     */
    public Optional<Output<List<ConnectPeerConfigurationArgs>>> configurations() {
        return Optional.ofNullable(this.configurations);
    }

    /**
     * The ID of the connection attachment.
     * 
     */
    @Import(name="connectAttachmentId")
    private @Nullable Output<String> connectAttachmentId;

    /**
     * @return The ID of the connection attachment.
     * 
     */
    public Optional<Output<String>> connectAttachmentId() {
        return Optional.ofNullable(this.connectAttachmentId);
    }

    @Import(name="connectPeerId")
    private @Nullable Output<String> connectPeerId;

    public Optional<Output<String>> connectPeerId() {
        return Optional.ofNullable(this.connectPeerId);
    }

    /**
     * A Connect peer core network address.
     * 
     */
    @Import(name="coreNetworkAddress")
    private @Nullable Output<String> coreNetworkAddress;

    /**
     * @return A Connect peer core network address.
     * 
     */
    public Optional<Output<String>> coreNetworkAddress() {
        return Optional.ofNullable(this.coreNetworkAddress);
    }

    /**
     * The ID of a core network.
     * 
     */
    @Import(name="coreNetworkId")
    private @Nullable Output<String> coreNetworkId;

    /**
     * @return The ID of a core network.
     * 
     */
    public Optional<Output<String>> coreNetworkId() {
        return Optional.ofNullable(this.coreNetworkId);
    }

    @Import(name="createdAt")
    private @Nullable Output<String> createdAt;

    public Optional<Output<String>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    /**
     * The Region where the peer is located.
     * 
     */
    @Import(name="edgeLocation")
    private @Nullable Output<String> edgeLocation;

    /**
     * @return The Region where the peer is located.
     * 
     */
    public Optional<Output<String>> edgeLocation() {
        return Optional.ofNullable(this.edgeLocation);
    }

    /**
     * The inside IP addresses used for BGP peering.
     * 
     */
    @Import(name="insideCidrBlocks")
    private @Nullable Output<List<String>> insideCidrBlocks;

    /**
     * @return The inside IP addresses used for BGP peering.
     * 
     */
    public Optional<Output<List<String>>> insideCidrBlocks() {
        return Optional.ofNullable(this.insideCidrBlocks);
    }

    /**
     * The Connect peer address.
     * 
     * The following arguments are optional:
     * 
     */
    @Import(name="peerAddress")
    private @Nullable Output<String> peerAddress;

    /**
     * @return The Connect peer address.
     * 
     * The following arguments are optional:
     * 
     */
    public Optional<Output<String>> peerAddress() {
        return Optional.ofNullable(this.peerAddress);
    }

    /**
     * The state of the Connect peer.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The state of the Connect peer.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * Key-value tags for the attachment. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Key-value tags for the attachment. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    /**
     * @return A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    private ConnectPeerState() {}

    private ConnectPeerState(ConnectPeerState $) {
        this.arn = $.arn;
        this.bgpOptions = $.bgpOptions;
        this.configurations = $.configurations;
        this.connectAttachmentId = $.connectAttachmentId;
        this.connectPeerId = $.connectPeerId;
        this.coreNetworkAddress = $.coreNetworkAddress;
        this.coreNetworkId = $.coreNetworkId;
        this.createdAt = $.createdAt;
        this.edgeLocation = $.edgeLocation;
        this.insideCidrBlocks = $.insideCidrBlocks;
        this.peerAddress = $.peerAddress;
        this.state = $.state;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectPeerState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectPeerState $;

        public Builder() {
            $ = new ConnectPeerState();
        }

        public Builder(ConnectPeerState defaults) {
            $ = new ConnectPeerState(Objects.requireNonNull(defaults));
        }

        /**
         * @param arn The ARN of the attachment.
         * 
         * @return builder
         * 
         */
        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        /**
         * @param arn The ARN of the attachment.
         * 
         * @return builder
         * 
         */
        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        /**
         * @param bgpOptions The Connect peer BGP options.
         * 
         * @return builder
         * 
         */
        public Builder bgpOptions(@Nullable Output<ConnectPeerBgpOptionsArgs> bgpOptions) {
            $.bgpOptions = bgpOptions;
            return this;
        }

        /**
         * @param bgpOptions The Connect peer BGP options.
         * 
         * @return builder
         * 
         */
        public Builder bgpOptions(ConnectPeerBgpOptionsArgs bgpOptions) {
            return bgpOptions(Output.of(bgpOptions));
        }

        /**
         * @param configurations The configuration of the Connect peer.
         * 
         * @return builder
         * 
         */
        public Builder configurations(@Nullable Output<List<ConnectPeerConfigurationArgs>> configurations) {
            $.configurations = configurations;
            return this;
        }

        /**
         * @param configurations The configuration of the Connect peer.
         * 
         * @return builder
         * 
         */
        public Builder configurations(List<ConnectPeerConfigurationArgs> configurations) {
            return configurations(Output.of(configurations));
        }

        /**
         * @param configurations The configuration of the Connect peer.
         * 
         * @return builder
         * 
         */
        public Builder configurations(ConnectPeerConfigurationArgs... configurations) {
            return configurations(List.of(configurations));
        }

        /**
         * @param connectAttachmentId The ID of the connection attachment.
         * 
         * @return builder
         * 
         */
        public Builder connectAttachmentId(@Nullable Output<String> connectAttachmentId) {
            $.connectAttachmentId = connectAttachmentId;
            return this;
        }

        /**
         * @param connectAttachmentId The ID of the connection attachment.
         * 
         * @return builder
         * 
         */
        public Builder connectAttachmentId(String connectAttachmentId) {
            return connectAttachmentId(Output.of(connectAttachmentId));
        }

        public Builder connectPeerId(@Nullable Output<String> connectPeerId) {
            $.connectPeerId = connectPeerId;
            return this;
        }

        public Builder connectPeerId(String connectPeerId) {
            return connectPeerId(Output.of(connectPeerId));
        }

        /**
         * @param coreNetworkAddress A Connect peer core network address.
         * 
         * @return builder
         * 
         */
        public Builder coreNetworkAddress(@Nullable Output<String> coreNetworkAddress) {
            $.coreNetworkAddress = coreNetworkAddress;
            return this;
        }

        /**
         * @param coreNetworkAddress A Connect peer core network address.
         * 
         * @return builder
         * 
         */
        public Builder coreNetworkAddress(String coreNetworkAddress) {
            return coreNetworkAddress(Output.of(coreNetworkAddress));
        }

        /**
         * @param coreNetworkId The ID of a core network.
         * 
         * @return builder
         * 
         */
        public Builder coreNetworkId(@Nullable Output<String> coreNetworkId) {
            $.coreNetworkId = coreNetworkId;
            return this;
        }

        /**
         * @param coreNetworkId The ID of a core network.
         * 
         * @return builder
         * 
         */
        public Builder coreNetworkId(String coreNetworkId) {
            return coreNetworkId(Output.of(coreNetworkId));
        }

        public Builder createdAt(@Nullable Output<String> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        public Builder createdAt(String createdAt) {
            return createdAt(Output.of(createdAt));
        }

        /**
         * @param edgeLocation The Region where the peer is located.
         * 
         * @return builder
         * 
         */
        public Builder edgeLocation(@Nullable Output<String> edgeLocation) {
            $.edgeLocation = edgeLocation;
            return this;
        }

        /**
         * @param edgeLocation The Region where the peer is located.
         * 
         * @return builder
         * 
         */
        public Builder edgeLocation(String edgeLocation) {
            return edgeLocation(Output.of(edgeLocation));
        }

        /**
         * @param insideCidrBlocks The inside IP addresses used for BGP peering.
         * 
         * @return builder
         * 
         */
        public Builder insideCidrBlocks(@Nullable Output<List<String>> insideCidrBlocks) {
            $.insideCidrBlocks = insideCidrBlocks;
            return this;
        }

        /**
         * @param insideCidrBlocks The inside IP addresses used for BGP peering.
         * 
         * @return builder
         * 
         */
        public Builder insideCidrBlocks(List<String> insideCidrBlocks) {
            return insideCidrBlocks(Output.of(insideCidrBlocks));
        }

        /**
         * @param insideCidrBlocks The inside IP addresses used for BGP peering.
         * 
         * @return builder
         * 
         */
        public Builder insideCidrBlocks(String... insideCidrBlocks) {
            return insideCidrBlocks(List.of(insideCidrBlocks));
        }

        /**
         * @param peerAddress The Connect peer address.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder peerAddress(@Nullable Output<String> peerAddress) {
            $.peerAddress = peerAddress;
            return this;
        }

        /**
         * @param peerAddress The Connect peer address.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder peerAddress(String peerAddress) {
            return peerAddress(Output.of(peerAddress));
        }

        /**
         * @param state The state of the Connect peer.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The state of the Connect peer.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param tags Key-value tags for the attachment. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Key-value tags for the attachment. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tagsAll A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
         * 
         * @return builder
         * 
         * @deprecated
         * Please use `tags` instead.
         * 
         */
        @Deprecated /* Please use `tags` instead. */
        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        /**
         * @param tagsAll A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
         * 
         * @return builder
         * 
         * @deprecated
         * Please use `tags` instead.
         * 
         */
        @Deprecated /* Please use `tags` instead. */
        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        public ConnectPeerState build() {
            return $;
        }
    }

}
