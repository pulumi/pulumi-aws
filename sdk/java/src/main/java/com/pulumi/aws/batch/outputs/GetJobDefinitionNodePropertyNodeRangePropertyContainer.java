// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.batch.outputs;

import com.pulumi.aws.batch.outputs.GetJobDefinitionNodePropertyNodeRangePropertyContainerEnvironment;
import com.pulumi.aws.batch.outputs.GetJobDefinitionNodePropertyNodeRangePropertyContainerEphemeralStorage;
import com.pulumi.aws.batch.outputs.GetJobDefinitionNodePropertyNodeRangePropertyContainerFargatePlatformConfiguration;
import com.pulumi.aws.batch.outputs.GetJobDefinitionNodePropertyNodeRangePropertyContainerLinuxParameter;
import com.pulumi.aws.batch.outputs.GetJobDefinitionNodePropertyNodeRangePropertyContainerLogConfiguration;
import com.pulumi.aws.batch.outputs.GetJobDefinitionNodePropertyNodeRangePropertyContainerMountPoint;
import com.pulumi.aws.batch.outputs.GetJobDefinitionNodePropertyNodeRangePropertyContainerNetworkConfiguration;
import com.pulumi.aws.batch.outputs.GetJobDefinitionNodePropertyNodeRangePropertyContainerResourceRequirement;
import com.pulumi.aws.batch.outputs.GetJobDefinitionNodePropertyNodeRangePropertyContainerRuntimePlatform;
import com.pulumi.aws.batch.outputs.GetJobDefinitionNodePropertyNodeRangePropertyContainerSecret;
import com.pulumi.aws.batch.outputs.GetJobDefinitionNodePropertyNodeRangePropertyContainerUlimit;
import com.pulumi.aws.batch.outputs.GetJobDefinitionNodePropertyNodeRangePropertyContainerVolume;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetJobDefinitionNodePropertyNodeRangePropertyContainer {
    /**
     * @return The command that&#39;s passed to the container.
     * 
     */
    private List<String> commands;
    /**
     * @return The environment variables to pass to a container.
     * 
     */
    private List<GetJobDefinitionNodePropertyNodeRangePropertyContainerEnvironment> environments;
    /**
     * @return The amount of ephemeral storage to allocate for the task. This parameter is used to expand the total amount of ephemeral storage available, beyond the default amount, for tasks hosted on AWS Fargate.
     * 
     */
    private List<GetJobDefinitionNodePropertyNodeRangePropertyContainerEphemeralStorage> ephemeralStorages;
    /**
     * @return The Amazon Resource Name (ARN) of the execution role that AWS Batch can assume. For jobs that run on Fargate resources, you must provide an execution role.
     * 
     */
    private String executionRoleArn;
    /**
     * @return The platform configuration for jobs that are running on Fargate resources. Jobs that are running on EC2 resources must not specify this parameter.
     * 
     */
    private List<GetJobDefinitionNodePropertyNodeRangePropertyContainerFargatePlatformConfiguration> fargatePlatformConfigurations;
    /**
     * @return The image used to start a container.
     * 
     */
    private String image;
    /**
     * @return The instance type to use for a multi-node parallel job.
     * 
     */
    private String instanceType;
    /**
     * @return The Amazon Resource Name (ARN) of the IAM role that the container can assume for AWS permissions.
     * 
     */
    private String jobRoleArn;
    /**
     * @return Linux-specific modifications that are applied to the container.
     * 
     */
    private List<GetJobDefinitionNodePropertyNodeRangePropertyContainerLinuxParameter> linuxParameters;
    /**
     * @return The log configuration specification for the container.
     * 
     */
    private List<GetJobDefinitionNodePropertyNodeRangePropertyContainerLogConfiguration> logConfigurations;
    /**
     * @return The mount points for data volumes in your container.
     * 
     */
    private List<GetJobDefinitionNodePropertyNodeRangePropertyContainerMountPoint> mountPoints;
    /**
     * @return The network configuration for jobs that are running on Fargate resources.
     * 
     */
    private List<GetJobDefinitionNodePropertyNodeRangePropertyContainerNetworkConfiguration> networkConfigurations;
    /**
     * @return When this parameter is true, the container is given elevated permissions on the host container instance (similar to the root user).
     * 
     */
    private Boolean privileged;
    /**
     * @return When this parameter is true, the container is given read-only access to its root file system.
     * 
     */
    private Boolean readonlyRootFilesystem;
    /**
     * @return The type and amount of resources to assign to a container.
     * 
     */
    private List<GetJobDefinitionNodePropertyNodeRangePropertyContainerResourceRequirement> resourceRequirements;
    /**
     * @return An object that represents the compute environment architecture for AWS Batch jobs on Fargate.
     * 
     */
    private List<GetJobDefinitionNodePropertyNodeRangePropertyContainerRuntimePlatform> runtimePlatforms;
    /**
     * @return The secrets for the container.
     * 
     */
    private List<GetJobDefinitionNodePropertyNodeRangePropertyContainerSecret> secrets;
    /**
     * @return A list of ulimits to set in the container.
     * 
     */
    private List<GetJobDefinitionNodePropertyNodeRangePropertyContainerUlimit> ulimits;
    /**
     * @return The user name to use inside the container.
     * 
     */
    private String user;
    /**
     * @return A list of data volumes used in a job.
     * 
     */
    private List<GetJobDefinitionNodePropertyNodeRangePropertyContainerVolume> volumes;

    private GetJobDefinitionNodePropertyNodeRangePropertyContainer() {}
    /**
     * @return The command that&#39;s passed to the container.
     * 
     */
    public List<String> commands() {
        return this.commands;
    }
    /**
     * @return The environment variables to pass to a container.
     * 
     */
    public List<GetJobDefinitionNodePropertyNodeRangePropertyContainerEnvironment> environments() {
        return this.environments;
    }
    /**
     * @return The amount of ephemeral storage to allocate for the task. This parameter is used to expand the total amount of ephemeral storage available, beyond the default amount, for tasks hosted on AWS Fargate.
     * 
     */
    public List<GetJobDefinitionNodePropertyNodeRangePropertyContainerEphemeralStorage> ephemeralStorages() {
        return this.ephemeralStorages;
    }
    /**
     * @return The Amazon Resource Name (ARN) of the execution role that AWS Batch can assume. For jobs that run on Fargate resources, you must provide an execution role.
     * 
     */
    public String executionRoleArn() {
        return this.executionRoleArn;
    }
    /**
     * @return The platform configuration for jobs that are running on Fargate resources. Jobs that are running on EC2 resources must not specify this parameter.
     * 
     */
    public List<GetJobDefinitionNodePropertyNodeRangePropertyContainerFargatePlatformConfiguration> fargatePlatformConfigurations() {
        return this.fargatePlatformConfigurations;
    }
    /**
     * @return The image used to start a container.
     * 
     */
    public String image() {
        return this.image;
    }
    /**
     * @return The instance type to use for a multi-node parallel job.
     * 
     */
    public String instanceType() {
        return this.instanceType;
    }
    /**
     * @return The Amazon Resource Name (ARN) of the IAM role that the container can assume for AWS permissions.
     * 
     */
    public String jobRoleArn() {
        return this.jobRoleArn;
    }
    /**
     * @return Linux-specific modifications that are applied to the container.
     * 
     */
    public List<GetJobDefinitionNodePropertyNodeRangePropertyContainerLinuxParameter> linuxParameters() {
        return this.linuxParameters;
    }
    /**
     * @return The log configuration specification for the container.
     * 
     */
    public List<GetJobDefinitionNodePropertyNodeRangePropertyContainerLogConfiguration> logConfigurations() {
        return this.logConfigurations;
    }
    /**
     * @return The mount points for data volumes in your container.
     * 
     */
    public List<GetJobDefinitionNodePropertyNodeRangePropertyContainerMountPoint> mountPoints() {
        return this.mountPoints;
    }
    /**
     * @return The network configuration for jobs that are running on Fargate resources.
     * 
     */
    public List<GetJobDefinitionNodePropertyNodeRangePropertyContainerNetworkConfiguration> networkConfigurations() {
        return this.networkConfigurations;
    }
    /**
     * @return When this parameter is true, the container is given elevated permissions on the host container instance (similar to the root user).
     * 
     */
    public Boolean privileged() {
        return this.privileged;
    }
    /**
     * @return When this parameter is true, the container is given read-only access to its root file system.
     * 
     */
    public Boolean readonlyRootFilesystem() {
        return this.readonlyRootFilesystem;
    }
    /**
     * @return The type and amount of resources to assign to a container.
     * 
     */
    public List<GetJobDefinitionNodePropertyNodeRangePropertyContainerResourceRequirement> resourceRequirements() {
        return this.resourceRequirements;
    }
    /**
     * @return An object that represents the compute environment architecture for AWS Batch jobs on Fargate.
     * 
     */
    public List<GetJobDefinitionNodePropertyNodeRangePropertyContainerRuntimePlatform> runtimePlatforms() {
        return this.runtimePlatforms;
    }
    /**
     * @return The secrets for the container.
     * 
     */
    public List<GetJobDefinitionNodePropertyNodeRangePropertyContainerSecret> secrets() {
        return this.secrets;
    }
    /**
     * @return A list of ulimits to set in the container.
     * 
     */
    public List<GetJobDefinitionNodePropertyNodeRangePropertyContainerUlimit> ulimits() {
        return this.ulimits;
    }
    /**
     * @return The user name to use inside the container.
     * 
     */
    public String user() {
        return this.user;
    }
    /**
     * @return A list of data volumes used in a job.
     * 
     */
    public List<GetJobDefinitionNodePropertyNodeRangePropertyContainerVolume> volumes() {
        return this.volumes;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetJobDefinitionNodePropertyNodeRangePropertyContainer defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> commands;
        private List<GetJobDefinitionNodePropertyNodeRangePropertyContainerEnvironment> environments;
        private List<GetJobDefinitionNodePropertyNodeRangePropertyContainerEphemeralStorage> ephemeralStorages;
        private String executionRoleArn;
        private List<GetJobDefinitionNodePropertyNodeRangePropertyContainerFargatePlatformConfiguration> fargatePlatformConfigurations;
        private String image;
        private String instanceType;
        private String jobRoleArn;
        private List<GetJobDefinitionNodePropertyNodeRangePropertyContainerLinuxParameter> linuxParameters;
        private List<GetJobDefinitionNodePropertyNodeRangePropertyContainerLogConfiguration> logConfigurations;
        private List<GetJobDefinitionNodePropertyNodeRangePropertyContainerMountPoint> mountPoints;
        private List<GetJobDefinitionNodePropertyNodeRangePropertyContainerNetworkConfiguration> networkConfigurations;
        private Boolean privileged;
        private Boolean readonlyRootFilesystem;
        private List<GetJobDefinitionNodePropertyNodeRangePropertyContainerResourceRequirement> resourceRequirements;
        private List<GetJobDefinitionNodePropertyNodeRangePropertyContainerRuntimePlatform> runtimePlatforms;
        private List<GetJobDefinitionNodePropertyNodeRangePropertyContainerSecret> secrets;
        private List<GetJobDefinitionNodePropertyNodeRangePropertyContainerUlimit> ulimits;
        private String user;
        private List<GetJobDefinitionNodePropertyNodeRangePropertyContainerVolume> volumes;
        public Builder() {}
        public Builder(GetJobDefinitionNodePropertyNodeRangePropertyContainer defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.commands = defaults.commands;
    	      this.environments = defaults.environments;
    	      this.ephemeralStorages = defaults.ephemeralStorages;
    	      this.executionRoleArn = defaults.executionRoleArn;
    	      this.fargatePlatformConfigurations = defaults.fargatePlatformConfigurations;
    	      this.image = defaults.image;
    	      this.instanceType = defaults.instanceType;
    	      this.jobRoleArn = defaults.jobRoleArn;
    	      this.linuxParameters = defaults.linuxParameters;
    	      this.logConfigurations = defaults.logConfigurations;
    	      this.mountPoints = defaults.mountPoints;
    	      this.networkConfigurations = defaults.networkConfigurations;
    	      this.privileged = defaults.privileged;
    	      this.readonlyRootFilesystem = defaults.readonlyRootFilesystem;
    	      this.resourceRequirements = defaults.resourceRequirements;
    	      this.runtimePlatforms = defaults.runtimePlatforms;
    	      this.secrets = defaults.secrets;
    	      this.ulimits = defaults.ulimits;
    	      this.user = defaults.user;
    	      this.volumes = defaults.volumes;
        }

        @CustomType.Setter
        public Builder commands(List<String> commands) {
            if (commands == null) {
              throw new MissingRequiredPropertyException("GetJobDefinitionNodePropertyNodeRangePropertyContainer", "commands");
            }
            this.commands = commands;
            return this;
        }
        public Builder commands(String... commands) {
            return commands(List.of(commands));
        }
        @CustomType.Setter
        public Builder environments(List<GetJobDefinitionNodePropertyNodeRangePropertyContainerEnvironment> environments) {
            if (environments == null) {
              throw new MissingRequiredPropertyException("GetJobDefinitionNodePropertyNodeRangePropertyContainer", "environments");
            }
            this.environments = environments;
            return this;
        }
        public Builder environments(GetJobDefinitionNodePropertyNodeRangePropertyContainerEnvironment... environments) {
            return environments(List.of(environments));
        }
        @CustomType.Setter
        public Builder ephemeralStorages(List<GetJobDefinitionNodePropertyNodeRangePropertyContainerEphemeralStorage> ephemeralStorages) {
            if (ephemeralStorages == null) {
              throw new MissingRequiredPropertyException("GetJobDefinitionNodePropertyNodeRangePropertyContainer", "ephemeralStorages");
            }
            this.ephemeralStorages = ephemeralStorages;
            return this;
        }
        public Builder ephemeralStorages(GetJobDefinitionNodePropertyNodeRangePropertyContainerEphemeralStorage... ephemeralStorages) {
            return ephemeralStorages(List.of(ephemeralStorages));
        }
        @CustomType.Setter
        public Builder executionRoleArn(String executionRoleArn) {
            if (executionRoleArn == null) {
              throw new MissingRequiredPropertyException("GetJobDefinitionNodePropertyNodeRangePropertyContainer", "executionRoleArn");
            }
            this.executionRoleArn = executionRoleArn;
            return this;
        }
        @CustomType.Setter
        public Builder fargatePlatformConfigurations(List<GetJobDefinitionNodePropertyNodeRangePropertyContainerFargatePlatformConfiguration> fargatePlatformConfigurations) {
            if (fargatePlatformConfigurations == null) {
              throw new MissingRequiredPropertyException("GetJobDefinitionNodePropertyNodeRangePropertyContainer", "fargatePlatformConfigurations");
            }
            this.fargatePlatformConfigurations = fargatePlatformConfigurations;
            return this;
        }
        public Builder fargatePlatformConfigurations(GetJobDefinitionNodePropertyNodeRangePropertyContainerFargatePlatformConfiguration... fargatePlatformConfigurations) {
            return fargatePlatformConfigurations(List.of(fargatePlatformConfigurations));
        }
        @CustomType.Setter
        public Builder image(String image) {
            if (image == null) {
              throw new MissingRequiredPropertyException("GetJobDefinitionNodePropertyNodeRangePropertyContainer", "image");
            }
            this.image = image;
            return this;
        }
        @CustomType.Setter
        public Builder instanceType(String instanceType) {
            if (instanceType == null) {
              throw new MissingRequiredPropertyException("GetJobDefinitionNodePropertyNodeRangePropertyContainer", "instanceType");
            }
            this.instanceType = instanceType;
            return this;
        }
        @CustomType.Setter
        public Builder jobRoleArn(String jobRoleArn) {
            if (jobRoleArn == null) {
              throw new MissingRequiredPropertyException("GetJobDefinitionNodePropertyNodeRangePropertyContainer", "jobRoleArn");
            }
            this.jobRoleArn = jobRoleArn;
            return this;
        }
        @CustomType.Setter
        public Builder linuxParameters(List<GetJobDefinitionNodePropertyNodeRangePropertyContainerLinuxParameter> linuxParameters) {
            if (linuxParameters == null) {
              throw new MissingRequiredPropertyException("GetJobDefinitionNodePropertyNodeRangePropertyContainer", "linuxParameters");
            }
            this.linuxParameters = linuxParameters;
            return this;
        }
        public Builder linuxParameters(GetJobDefinitionNodePropertyNodeRangePropertyContainerLinuxParameter... linuxParameters) {
            return linuxParameters(List.of(linuxParameters));
        }
        @CustomType.Setter
        public Builder logConfigurations(List<GetJobDefinitionNodePropertyNodeRangePropertyContainerLogConfiguration> logConfigurations) {
            if (logConfigurations == null) {
              throw new MissingRequiredPropertyException("GetJobDefinitionNodePropertyNodeRangePropertyContainer", "logConfigurations");
            }
            this.logConfigurations = logConfigurations;
            return this;
        }
        public Builder logConfigurations(GetJobDefinitionNodePropertyNodeRangePropertyContainerLogConfiguration... logConfigurations) {
            return logConfigurations(List.of(logConfigurations));
        }
        @CustomType.Setter
        public Builder mountPoints(List<GetJobDefinitionNodePropertyNodeRangePropertyContainerMountPoint> mountPoints) {
            if (mountPoints == null) {
              throw new MissingRequiredPropertyException("GetJobDefinitionNodePropertyNodeRangePropertyContainer", "mountPoints");
            }
            this.mountPoints = mountPoints;
            return this;
        }
        public Builder mountPoints(GetJobDefinitionNodePropertyNodeRangePropertyContainerMountPoint... mountPoints) {
            return mountPoints(List.of(mountPoints));
        }
        @CustomType.Setter
        public Builder networkConfigurations(List<GetJobDefinitionNodePropertyNodeRangePropertyContainerNetworkConfiguration> networkConfigurations) {
            if (networkConfigurations == null) {
              throw new MissingRequiredPropertyException("GetJobDefinitionNodePropertyNodeRangePropertyContainer", "networkConfigurations");
            }
            this.networkConfigurations = networkConfigurations;
            return this;
        }
        public Builder networkConfigurations(GetJobDefinitionNodePropertyNodeRangePropertyContainerNetworkConfiguration... networkConfigurations) {
            return networkConfigurations(List.of(networkConfigurations));
        }
        @CustomType.Setter
        public Builder privileged(Boolean privileged) {
            if (privileged == null) {
              throw new MissingRequiredPropertyException("GetJobDefinitionNodePropertyNodeRangePropertyContainer", "privileged");
            }
            this.privileged = privileged;
            return this;
        }
        @CustomType.Setter
        public Builder readonlyRootFilesystem(Boolean readonlyRootFilesystem) {
            if (readonlyRootFilesystem == null) {
              throw new MissingRequiredPropertyException("GetJobDefinitionNodePropertyNodeRangePropertyContainer", "readonlyRootFilesystem");
            }
            this.readonlyRootFilesystem = readonlyRootFilesystem;
            return this;
        }
        @CustomType.Setter
        public Builder resourceRequirements(List<GetJobDefinitionNodePropertyNodeRangePropertyContainerResourceRequirement> resourceRequirements) {
            if (resourceRequirements == null) {
              throw new MissingRequiredPropertyException("GetJobDefinitionNodePropertyNodeRangePropertyContainer", "resourceRequirements");
            }
            this.resourceRequirements = resourceRequirements;
            return this;
        }
        public Builder resourceRequirements(GetJobDefinitionNodePropertyNodeRangePropertyContainerResourceRequirement... resourceRequirements) {
            return resourceRequirements(List.of(resourceRequirements));
        }
        @CustomType.Setter
        public Builder runtimePlatforms(List<GetJobDefinitionNodePropertyNodeRangePropertyContainerRuntimePlatform> runtimePlatforms) {
            if (runtimePlatforms == null) {
              throw new MissingRequiredPropertyException("GetJobDefinitionNodePropertyNodeRangePropertyContainer", "runtimePlatforms");
            }
            this.runtimePlatforms = runtimePlatforms;
            return this;
        }
        public Builder runtimePlatforms(GetJobDefinitionNodePropertyNodeRangePropertyContainerRuntimePlatform... runtimePlatforms) {
            return runtimePlatforms(List.of(runtimePlatforms));
        }
        @CustomType.Setter
        public Builder secrets(List<GetJobDefinitionNodePropertyNodeRangePropertyContainerSecret> secrets) {
            if (secrets == null) {
              throw new MissingRequiredPropertyException("GetJobDefinitionNodePropertyNodeRangePropertyContainer", "secrets");
            }
            this.secrets = secrets;
            return this;
        }
        public Builder secrets(GetJobDefinitionNodePropertyNodeRangePropertyContainerSecret... secrets) {
            return secrets(List.of(secrets));
        }
        @CustomType.Setter
        public Builder ulimits(List<GetJobDefinitionNodePropertyNodeRangePropertyContainerUlimit> ulimits) {
            if (ulimits == null) {
              throw new MissingRequiredPropertyException("GetJobDefinitionNodePropertyNodeRangePropertyContainer", "ulimits");
            }
            this.ulimits = ulimits;
            return this;
        }
        public Builder ulimits(GetJobDefinitionNodePropertyNodeRangePropertyContainerUlimit... ulimits) {
            return ulimits(List.of(ulimits));
        }
        @CustomType.Setter
        public Builder user(String user) {
            if (user == null) {
              throw new MissingRequiredPropertyException("GetJobDefinitionNodePropertyNodeRangePropertyContainer", "user");
            }
            this.user = user;
            return this;
        }
        @CustomType.Setter
        public Builder volumes(List<GetJobDefinitionNodePropertyNodeRangePropertyContainerVolume> volumes) {
            if (volumes == null) {
              throw new MissingRequiredPropertyException("GetJobDefinitionNodePropertyNodeRangePropertyContainer", "volumes");
            }
            this.volumes = volumes;
            return this;
        }
        public Builder volumes(GetJobDefinitionNodePropertyNodeRangePropertyContainerVolume... volumes) {
            return volumes(List.of(volumes));
        }
        public GetJobDefinitionNodePropertyNodeRangePropertyContainer build() {
            final var _resultValue = new GetJobDefinitionNodePropertyNodeRangePropertyContainer();
            _resultValue.commands = commands;
            _resultValue.environments = environments;
            _resultValue.ephemeralStorages = ephemeralStorages;
            _resultValue.executionRoleArn = executionRoleArn;
            _resultValue.fargatePlatformConfigurations = fargatePlatformConfigurations;
            _resultValue.image = image;
            _resultValue.instanceType = instanceType;
            _resultValue.jobRoleArn = jobRoleArn;
            _resultValue.linuxParameters = linuxParameters;
            _resultValue.logConfigurations = logConfigurations;
            _resultValue.mountPoints = mountPoints;
            _resultValue.networkConfigurations = networkConfigurations;
            _resultValue.privileged = privileged;
            _resultValue.readonlyRootFilesystem = readonlyRootFilesystem;
            _resultValue.resourceRequirements = resourceRequirements;
            _resultValue.runtimePlatforms = runtimePlatforms;
            _resultValue.secrets = secrets;
            _resultValue.ulimits = ulimits;
            _resultValue.user = user;
            _resultValue.volumes = volumes;
            return _resultValue;
        }
    }
}
