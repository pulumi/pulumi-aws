// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ec2.outputs;

import com.pulumi.aws.ec2.outputs.GetAmiBlockDeviceMapping;
import com.pulumi.aws.ec2.outputs.GetAmiFilter;
import com.pulumi.aws.ec2.outputs.GetAmiProductCode;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetAmiResult {
    /**
     * @return OS architecture of the AMI (ie: `i386` or `x86_64`).
     * 
     */
    private @Nullable String architecture;
    /**
     * @return ARN of the AMI.
     * 
     */
    private @Nullable String arn;
    /**
     * @return Set of objects with block device mappings of the AMI.
     * 
     */
    private @Nullable List<GetAmiBlockDeviceMapping> blockDeviceMappings;
    /**
     * @return Boot mode of the image.
     * 
     */
    private @Nullable String bootMode;
    /**
     * @return Date and time the image was created.
     * 
     */
    private @Nullable String creationDate;
    /**
     * @return Date and time when the image will be deprecated.
     * 
     */
    private @Nullable String deprecationTime;
    /**
     * @return Description of the AMI that was provided during image
     * creation.
     * 
     */
    private @Nullable String description;
    /**
     * @return Whether enhanced networking with ENA is enabled.
     * 
     */
    private @Nullable Boolean enaSupport;
    private @Nullable List<String> executableUsers;
    private @Nullable List<GetAmiFilter> filters;
    /**
     * @return Hypervisor type of the image.
     * 
     */
    private @Nullable String hypervisor;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private @Nullable String id;
    /**
     * @return ID of the AMI. Should be the same as the resource `id`.
     * 
     */
    private @Nullable String imageId;
    /**
     * @return Location of the AMI.
     * 
     */
    private @Nullable String imageLocation;
    /**
     * @return AWS account alias (for example, `amazon`, `self`) or
     * the AWS account ID of the AMI owner.
     * 
     */
    private @Nullable String imageOwnerAlias;
    /**
     * @return Type of image.
     * 
     */
    private @Nullable String imageType;
    /**
     * @return Instance Metadata Service (IMDS) support mode for the image. Set to `v2.0` if instances ran from this image enforce IMDSv2.
     * 
     */
    private @Nullable String imdsSupport;
    private @Nullable Boolean includeDeprecated;
    /**
     * @return Kernel associated with the image, if any. Only applicable
     * for machine images.
     * 
     */
    private @Nullable String kernelId;
    private @Nullable Boolean mostRecent;
    /**
     * @return Name of the AMI that was provided during image creation.
     * 
     */
    private @Nullable String name;
    private @Nullable String nameRegex;
    /**
     * @return AWS account ID of the image owner.
     * 
     */
    private @Nullable String ownerId;
    private @Nullable List<String> owners;
    /**
     * @return Value is Windows for `Windows` AMIs; otherwise blank.
     * 
     */
    private @Nullable String platform;
    /**
     * @return Platform details associated with the billing code of the AMI.
     * 
     */
    private @Nullable String platformDetails;
    /**
     * @return Any product codes associated with the AMI.
     * * `product_codes.#.product_code_id` - The product code.
     * * `product_codes.#.product_code_type` - The type of product code.
     * 
     */
    private @Nullable List<GetAmiProductCode> productCodes;
    /**
     * @return `true` if the image has public launch permissions.
     * 
     */
    private @Nullable Boolean public_;
    /**
     * @return RAM disk associated with the image, if any. Only applicable
     * for machine images.
     * 
     */
    private @Nullable String ramdiskId;
    /**
     * @return Device name of the root device.
     * 
     */
    private @Nullable String rootDeviceName;
    /**
     * @return Type of root device (ie: `ebs` or `instance-store`).
     * 
     */
    private @Nullable String rootDeviceType;
    /**
     * @return Snapshot id associated with the root device, if any
     * (only applies to `ebs` root devices).
     * 
     */
    private @Nullable String rootSnapshotId;
    /**
     * @return Whether enhanced networking is enabled.
     * 
     */
    private @Nullable String sriovNetSupport;
    /**
     * @return Current state of the AMI. If the state is `available`, the image
     * is successfully registered and can be used to launch an instance.
     * 
     */
    private @Nullable String state;
    /**
     * @return Describes a state change. Fields are `UNSET` if not available.
     * * `state_reason.code` - The reason code for the state change.
     * * `state_reason.message` - The message for the state change.
     * 
     */
    private @Nullable Map<String,String> stateReason;
    /**
     * @return Any tags assigned to the image.
     * * `tags.#.key` - Key name of the tag.
     * * `tags.#.value` - Value of the tag.
     * 
     */
    private @Nullable Map<String,String> tags;
    /**
     * @return If the image is configured for NitroTPM support, the value is `v2.0`.
     * 
     */
    private @Nullable String tpmSupport;
    /**
     * @return Operation of the Amazon EC2 instance and the billing code that is associated with the AMI.
     * 
     */
    private @Nullable String usageOperation;
    /**
     * @return Type of virtualization of the AMI (ie: `hvm` or
     * `paravirtual`).
     * 
     */
    private @Nullable String virtualizationType;

    private GetAmiResult() {}
    /**
     * @return OS architecture of the AMI (ie: `i386` or `x86_64`).
     * 
     */
    public Optional<String> architecture() {
        return Optional.ofNullable(this.architecture);
    }
    /**
     * @return ARN of the AMI.
     * 
     */
    public Optional<String> arn() {
        return Optional.ofNullable(this.arn);
    }
    /**
     * @return Set of objects with block device mappings of the AMI.
     * 
     */
    public List<GetAmiBlockDeviceMapping> blockDeviceMappings() {
        return this.blockDeviceMappings == null ? List.of() : this.blockDeviceMappings;
    }
    /**
     * @return Boot mode of the image.
     * 
     */
    public Optional<String> bootMode() {
        return Optional.ofNullable(this.bootMode);
    }
    /**
     * @return Date and time the image was created.
     * 
     */
    public Optional<String> creationDate() {
        return Optional.ofNullable(this.creationDate);
    }
    /**
     * @return Date and time when the image will be deprecated.
     * 
     */
    public Optional<String> deprecationTime() {
        return Optional.ofNullable(this.deprecationTime);
    }
    /**
     * @return Description of the AMI that was provided during image
     * creation.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return Whether enhanced networking with ENA is enabled.
     * 
     */
    public Optional<Boolean> enaSupport() {
        return Optional.ofNullable(this.enaSupport);
    }
    public List<String> executableUsers() {
        return this.executableUsers == null ? List.of() : this.executableUsers;
    }
    public List<GetAmiFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return Hypervisor type of the image.
     * 
     */
    public Optional<String> hypervisor() {
        return Optional.ofNullable(this.hypervisor);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return ID of the AMI. Should be the same as the resource `id`.
     * 
     */
    public Optional<String> imageId() {
        return Optional.ofNullable(this.imageId);
    }
    /**
     * @return Location of the AMI.
     * 
     */
    public Optional<String> imageLocation() {
        return Optional.ofNullable(this.imageLocation);
    }
    /**
     * @return AWS account alias (for example, `amazon`, `self`) or
     * the AWS account ID of the AMI owner.
     * 
     */
    public Optional<String> imageOwnerAlias() {
        return Optional.ofNullable(this.imageOwnerAlias);
    }
    /**
     * @return Type of image.
     * 
     */
    public Optional<String> imageType() {
        return Optional.ofNullable(this.imageType);
    }
    /**
     * @return Instance Metadata Service (IMDS) support mode for the image. Set to `v2.0` if instances ran from this image enforce IMDSv2.
     * 
     */
    public Optional<String> imdsSupport() {
        return Optional.ofNullable(this.imdsSupport);
    }
    public Optional<Boolean> includeDeprecated() {
        return Optional.ofNullable(this.includeDeprecated);
    }
    /**
     * @return Kernel associated with the image, if any. Only applicable
     * for machine images.
     * 
     */
    public Optional<String> kernelId() {
        return Optional.ofNullable(this.kernelId);
    }
    public Optional<Boolean> mostRecent() {
        return Optional.ofNullable(this.mostRecent);
    }
    /**
     * @return Name of the AMI that was provided during image creation.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    public Optional<String> nameRegex() {
        return Optional.ofNullable(this.nameRegex);
    }
    /**
     * @return AWS account ID of the image owner.
     * 
     */
    public Optional<String> ownerId() {
        return Optional.ofNullable(this.ownerId);
    }
    public List<String> owners() {
        return this.owners == null ? List.of() : this.owners;
    }
    /**
     * @return Value is Windows for `Windows` AMIs; otherwise blank.
     * 
     */
    public Optional<String> platform() {
        return Optional.ofNullable(this.platform);
    }
    /**
     * @return Platform details associated with the billing code of the AMI.
     * 
     */
    public Optional<String> platformDetails() {
        return Optional.ofNullable(this.platformDetails);
    }
    /**
     * @return Any product codes associated with the AMI.
     * * `product_codes.#.product_code_id` - The product code.
     * * `product_codes.#.product_code_type` - The type of product code.
     * 
     */
    public List<GetAmiProductCode> productCodes() {
        return this.productCodes == null ? List.of() : this.productCodes;
    }
    /**
     * @return `true` if the image has public launch permissions.
     * 
     */
    public Optional<Boolean> public_() {
        return Optional.ofNullable(this.public_);
    }
    /**
     * @return RAM disk associated with the image, if any. Only applicable
     * for machine images.
     * 
     */
    public Optional<String> ramdiskId() {
        return Optional.ofNullable(this.ramdiskId);
    }
    /**
     * @return Device name of the root device.
     * 
     */
    public Optional<String> rootDeviceName() {
        return Optional.ofNullable(this.rootDeviceName);
    }
    /**
     * @return Type of root device (ie: `ebs` or `instance-store`).
     * 
     */
    public Optional<String> rootDeviceType() {
        return Optional.ofNullable(this.rootDeviceType);
    }
    /**
     * @return Snapshot id associated with the root device, if any
     * (only applies to `ebs` root devices).
     * 
     */
    public Optional<String> rootSnapshotId() {
        return Optional.ofNullable(this.rootSnapshotId);
    }
    /**
     * @return Whether enhanced networking is enabled.
     * 
     */
    public Optional<String> sriovNetSupport() {
        return Optional.ofNullable(this.sriovNetSupport);
    }
    /**
     * @return Current state of the AMI. If the state is `available`, the image
     * is successfully registered and can be used to launch an instance.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    /**
     * @return Describes a state change. Fields are `UNSET` if not available.
     * * `state_reason.code` - The reason code for the state change.
     * * `state_reason.message` - The message for the state change.
     * 
     */
    public Map<String,String> stateReason() {
        return this.stateReason == null ? Map.of() : this.stateReason;
    }
    /**
     * @return Any tags assigned to the image.
     * * `tags.#.key` - Key name of the tag.
     * * `tags.#.value` - Value of the tag.
     * 
     */
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * @return If the image is configured for NitroTPM support, the value is `v2.0`.
     * 
     */
    public Optional<String> tpmSupport() {
        return Optional.ofNullable(this.tpmSupport);
    }
    /**
     * @return Operation of the Amazon EC2 instance and the billing code that is associated with the AMI.
     * 
     */
    public Optional<String> usageOperation() {
        return Optional.ofNullable(this.usageOperation);
    }
    /**
     * @return Type of virtualization of the AMI (ie: `hvm` or
     * `paravirtual`).
     * 
     */
    public Optional<String> virtualizationType() {
        return Optional.ofNullable(this.virtualizationType);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAmiResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String architecture;
        private @Nullable String arn;
        private @Nullable List<GetAmiBlockDeviceMapping> blockDeviceMappings;
        private @Nullable String bootMode;
        private @Nullable String creationDate;
        private @Nullable String deprecationTime;
        private @Nullable String description;
        private @Nullable Boolean enaSupport;
        private @Nullable List<String> executableUsers;
        private @Nullable List<GetAmiFilter> filters;
        private @Nullable String hypervisor;
        private @Nullable String id;
        private @Nullable String imageId;
        private @Nullable String imageLocation;
        private @Nullable String imageOwnerAlias;
        private @Nullable String imageType;
        private @Nullable String imdsSupport;
        private @Nullable Boolean includeDeprecated;
        private @Nullable String kernelId;
        private @Nullable Boolean mostRecent;
        private @Nullable String name;
        private @Nullable String nameRegex;
        private @Nullable String ownerId;
        private @Nullable List<String> owners;
        private @Nullable String platform;
        private @Nullable String platformDetails;
        private @Nullable List<GetAmiProductCode> productCodes;
        private @Nullable Boolean public_;
        private @Nullable String ramdiskId;
        private @Nullable String rootDeviceName;
        private @Nullable String rootDeviceType;
        private @Nullable String rootSnapshotId;
        private @Nullable String sriovNetSupport;
        private @Nullable String state;
        private @Nullable Map<String,String> stateReason;
        private @Nullable Map<String,String> tags;
        private @Nullable String tpmSupport;
        private @Nullable String usageOperation;
        private @Nullable String virtualizationType;
        public Builder() {}
        public Builder(GetAmiResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.architecture = defaults.architecture;
    	      this.arn = defaults.arn;
    	      this.blockDeviceMappings = defaults.blockDeviceMappings;
    	      this.bootMode = defaults.bootMode;
    	      this.creationDate = defaults.creationDate;
    	      this.deprecationTime = defaults.deprecationTime;
    	      this.description = defaults.description;
    	      this.enaSupport = defaults.enaSupport;
    	      this.executableUsers = defaults.executableUsers;
    	      this.filters = defaults.filters;
    	      this.hypervisor = defaults.hypervisor;
    	      this.id = defaults.id;
    	      this.imageId = defaults.imageId;
    	      this.imageLocation = defaults.imageLocation;
    	      this.imageOwnerAlias = defaults.imageOwnerAlias;
    	      this.imageType = defaults.imageType;
    	      this.imdsSupport = defaults.imdsSupport;
    	      this.includeDeprecated = defaults.includeDeprecated;
    	      this.kernelId = defaults.kernelId;
    	      this.mostRecent = defaults.mostRecent;
    	      this.name = defaults.name;
    	      this.nameRegex = defaults.nameRegex;
    	      this.ownerId = defaults.ownerId;
    	      this.owners = defaults.owners;
    	      this.platform = defaults.platform;
    	      this.platformDetails = defaults.platformDetails;
    	      this.productCodes = defaults.productCodes;
    	      this.public_ = defaults.public_;
    	      this.ramdiskId = defaults.ramdiskId;
    	      this.rootDeviceName = defaults.rootDeviceName;
    	      this.rootDeviceType = defaults.rootDeviceType;
    	      this.rootSnapshotId = defaults.rootSnapshotId;
    	      this.sriovNetSupport = defaults.sriovNetSupport;
    	      this.state = defaults.state;
    	      this.stateReason = defaults.stateReason;
    	      this.tags = defaults.tags;
    	      this.tpmSupport = defaults.tpmSupport;
    	      this.usageOperation = defaults.usageOperation;
    	      this.virtualizationType = defaults.virtualizationType;
        }

        @CustomType.Setter
        public Builder architecture(@Nullable String architecture) {
            this.architecture = architecture;
            return this;
        }
        @CustomType.Setter
        public Builder arn(@Nullable String arn) {
            this.arn = arn;
            return this;
        }
        @CustomType.Setter
        public Builder blockDeviceMappings(@Nullable List<GetAmiBlockDeviceMapping> blockDeviceMappings) {
            this.blockDeviceMappings = blockDeviceMappings;
            return this;
        }
        public Builder blockDeviceMappings(GetAmiBlockDeviceMapping... blockDeviceMappings) {
            return blockDeviceMappings(List.of(blockDeviceMappings));
        }
        @CustomType.Setter
        public Builder bootMode(@Nullable String bootMode) {
            this.bootMode = bootMode;
            return this;
        }
        @CustomType.Setter
        public Builder creationDate(@Nullable String creationDate) {
            this.creationDate = creationDate;
            return this;
        }
        @CustomType.Setter
        public Builder deprecationTime(@Nullable String deprecationTime) {
            this.deprecationTime = deprecationTime;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder enaSupport(@Nullable Boolean enaSupport) {
            this.enaSupport = enaSupport;
            return this;
        }
        @CustomType.Setter
        public Builder executableUsers(@Nullable List<String> executableUsers) {
            this.executableUsers = executableUsers;
            return this;
        }
        public Builder executableUsers(String... executableUsers) {
            return executableUsers(List.of(executableUsers));
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetAmiFilter> filters) {
            this.filters = filters;
            return this;
        }
        public Builder filters(GetAmiFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder hypervisor(@Nullable String hypervisor) {
            this.hypervisor = hypervisor;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder imageId(@Nullable String imageId) {
            this.imageId = imageId;
            return this;
        }
        @CustomType.Setter
        public Builder imageLocation(@Nullable String imageLocation) {
            this.imageLocation = imageLocation;
            return this;
        }
        @CustomType.Setter
        public Builder imageOwnerAlias(@Nullable String imageOwnerAlias) {
            this.imageOwnerAlias = imageOwnerAlias;
            return this;
        }
        @CustomType.Setter
        public Builder imageType(@Nullable String imageType) {
            this.imageType = imageType;
            return this;
        }
        @CustomType.Setter
        public Builder imdsSupport(@Nullable String imdsSupport) {
            this.imdsSupport = imdsSupport;
            return this;
        }
        @CustomType.Setter
        public Builder includeDeprecated(@Nullable Boolean includeDeprecated) {
            this.includeDeprecated = includeDeprecated;
            return this;
        }
        @CustomType.Setter
        public Builder kernelId(@Nullable String kernelId) {
            this.kernelId = kernelId;
            return this;
        }
        @CustomType.Setter
        public Builder mostRecent(@Nullable Boolean mostRecent) {
            this.mostRecent = mostRecent;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder nameRegex(@Nullable String nameRegex) {
            this.nameRegex = nameRegex;
            return this;
        }
        @CustomType.Setter
        public Builder ownerId(@Nullable String ownerId) {
            this.ownerId = ownerId;
            return this;
        }
        @CustomType.Setter
        public Builder owners(@Nullable List<String> owners) {
            this.owners = owners;
            return this;
        }
        public Builder owners(String... owners) {
            return owners(List.of(owners));
        }
        @CustomType.Setter
        public Builder platform(@Nullable String platform) {
            this.platform = platform;
            return this;
        }
        @CustomType.Setter
        public Builder platformDetails(@Nullable String platformDetails) {
            this.platformDetails = platformDetails;
            return this;
        }
        @CustomType.Setter
        public Builder productCodes(@Nullable List<GetAmiProductCode> productCodes) {
            this.productCodes = productCodes;
            return this;
        }
        public Builder productCodes(GetAmiProductCode... productCodes) {
            return productCodes(List.of(productCodes));
        }
        @CustomType.Setter("public")
        public Builder public_(@Nullable Boolean public_) {
            this.public_ = public_;
            return this;
        }
        @CustomType.Setter
        public Builder ramdiskId(@Nullable String ramdiskId) {
            this.ramdiskId = ramdiskId;
            return this;
        }
        @CustomType.Setter
        public Builder rootDeviceName(@Nullable String rootDeviceName) {
            this.rootDeviceName = rootDeviceName;
            return this;
        }
        @CustomType.Setter
        public Builder rootDeviceType(@Nullable String rootDeviceType) {
            this.rootDeviceType = rootDeviceType;
            return this;
        }
        @CustomType.Setter
        public Builder rootSnapshotId(@Nullable String rootSnapshotId) {
            this.rootSnapshotId = rootSnapshotId;
            return this;
        }
        @CustomType.Setter
        public Builder sriovNetSupport(@Nullable String sriovNetSupport) {
            this.sriovNetSupport = sriovNetSupport;
            return this;
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder stateReason(@Nullable Map<String,String> stateReason) {
            this.stateReason = stateReason;
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder tpmSupport(@Nullable String tpmSupport) {
            this.tpmSupport = tpmSupport;
            return this;
        }
        @CustomType.Setter
        public Builder usageOperation(@Nullable String usageOperation) {
            this.usageOperation = usageOperation;
            return this;
        }
        @CustomType.Setter
        public Builder virtualizationType(@Nullable String virtualizationType) {
            this.virtualizationType = virtualizationType;
            return this;
        }
        public GetAmiResult build() {
            final var o = new GetAmiResult();
            o.architecture = architecture;
            o.arn = arn;
            o.blockDeviceMappings = blockDeviceMappings;
            o.bootMode = bootMode;
            o.creationDate = creationDate;
            o.deprecationTime = deprecationTime;
            o.description = description;
            o.enaSupport = enaSupport;
            o.executableUsers = executableUsers;
            o.filters = filters;
            o.hypervisor = hypervisor;
            o.id = id;
            o.imageId = imageId;
            o.imageLocation = imageLocation;
            o.imageOwnerAlias = imageOwnerAlias;
            o.imageType = imageType;
            o.imdsSupport = imdsSupport;
            o.includeDeprecated = includeDeprecated;
            o.kernelId = kernelId;
            o.mostRecent = mostRecent;
            o.name = name;
            o.nameRegex = nameRegex;
            o.ownerId = ownerId;
            o.owners = owners;
            o.platform = platform;
            o.platformDetails = platformDetails;
            o.productCodes = productCodes;
            o.public_ = public_;
            o.ramdiskId = ramdiskId;
            o.rootDeviceName = rootDeviceName;
            o.rootDeviceType = rootDeviceType;
            o.rootSnapshotId = rootSnapshotId;
            o.sriovNetSupport = sriovNetSupport;
            o.state = state;
            o.stateReason = stateReason;
            o.tags = tags;
            o.tpmSupport = tpmSupport;
            o.usageOperation = usageOperation;
            o.virtualizationType = virtualizationType;
            return o;
        }
    }
}
