// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.sagemaker.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ModelContainerMultiModelConfig {
    /**
     * @return Whether to cache models for a multi-model endpoint. By default, multi-model endpoints cache models so that a model does not have to be loaded into memory each time it is invoked. Some use cases do not benefit from model caching. For example, if an endpoint hosts a large number of models that are each invoked infrequently, the endpoint might perform better if you disable model caching. To disable model caching, set the value of this parameter to `Disabled`. Allowed values are: `Enabled` and `Disabled`.
     * 
     */
    private @Nullable String modelCacheSetting;

    private ModelContainerMultiModelConfig() {}
    /**
     * @return Whether to cache models for a multi-model endpoint. By default, multi-model endpoints cache models so that a model does not have to be loaded into memory each time it is invoked. Some use cases do not benefit from model caching. For example, if an endpoint hosts a large number of models that are each invoked infrequently, the endpoint might perform better if you disable model caching. To disable model caching, set the value of this parameter to `Disabled`. Allowed values are: `Enabled` and `Disabled`.
     * 
     */
    public Optional<String> modelCacheSetting() {
        return Optional.ofNullable(this.modelCacheSetting);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ModelContainerMultiModelConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String modelCacheSetting;
        public Builder() {}
        public Builder(ModelContainerMultiModelConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.modelCacheSetting = defaults.modelCacheSetting;
        }

        @CustomType.Setter
        public Builder modelCacheSetting(@Nullable String modelCacheSetting) {

            this.modelCacheSetting = modelCacheSetting;
            return this;
        }
        public ModelContainerMultiModelConfig build() {
            final var _resultValue = new ModelContainerMultiModelConfig();
            _resultValue.modelCacheSetting = modelCacheSetting;
            return _resultValue;
        }
    }
}
