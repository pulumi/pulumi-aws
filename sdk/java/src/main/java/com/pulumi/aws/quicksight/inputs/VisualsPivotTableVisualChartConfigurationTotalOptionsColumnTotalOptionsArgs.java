// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.inputs;

import com.pulumi.aws.quicksight.inputs.CellStyleArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VisualsPivotTableVisualChartConfigurationTotalOptionsColumnTotalOptionsArgs extends com.pulumi.resources.ResourceArgs {

    public static final VisualsPivotTableVisualChartConfigurationTotalOptionsColumnTotalOptionsArgs Empty = new VisualsPivotTableVisualChartConfigurationTotalOptionsColumnTotalOptionsArgs();

    @Import(name="customLabel")
    private @Nullable Output<String> customLabel;

    public Optional<Output<String>> customLabel() {
        return Optional.ofNullable(this.customLabel);
    }

    @Import(name="metricHeaderCellStyle")
    private @Nullable Output<CellStyleArgs> metricHeaderCellStyle;

    public Optional<Output<CellStyleArgs>> metricHeaderCellStyle() {
        return Optional.ofNullable(this.metricHeaderCellStyle);
    }

    @Import(name="placement")
    private @Nullable Output<String> placement;

    public Optional<Output<String>> placement() {
        return Optional.ofNullable(this.placement);
    }

    @Import(name="scrollStatus")
    private @Nullable Output<String> scrollStatus;

    public Optional<Output<String>> scrollStatus() {
        return Optional.ofNullable(this.scrollStatus);
    }

    @Import(name="totalCellStyle")
    private @Nullable Output<CellStyleArgs> totalCellStyle;

    public Optional<Output<CellStyleArgs>> totalCellStyle() {
        return Optional.ofNullable(this.totalCellStyle);
    }

    @Import(name="totalsVisibility")
    private @Nullable Output<String> totalsVisibility;

    public Optional<Output<String>> totalsVisibility() {
        return Optional.ofNullable(this.totalsVisibility);
    }

    @Import(name="valueCellStyle")
    private @Nullable Output<CellStyleArgs> valueCellStyle;

    public Optional<Output<CellStyleArgs>> valueCellStyle() {
        return Optional.ofNullable(this.valueCellStyle);
    }

    private VisualsPivotTableVisualChartConfigurationTotalOptionsColumnTotalOptionsArgs() {}

    private VisualsPivotTableVisualChartConfigurationTotalOptionsColumnTotalOptionsArgs(VisualsPivotTableVisualChartConfigurationTotalOptionsColumnTotalOptionsArgs $) {
        this.customLabel = $.customLabel;
        this.metricHeaderCellStyle = $.metricHeaderCellStyle;
        this.placement = $.placement;
        this.scrollStatus = $.scrollStatus;
        this.totalCellStyle = $.totalCellStyle;
        this.totalsVisibility = $.totalsVisibility;
        this.valueCellStyle = $.valueCellStyle;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VisualsPivotTableVisualChartConfigurationTotalOptionsColumnTotalOptionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VisualsPivotTableVisualChartConfigurationTotalOptionsColumnTotalOptionsArgs $;

        public Builder() {
            $ = new VisualsPivotTableVisualChartConfigurationTotalOptionsColumnTotalOptionsArgs();
        }

        public Builder(VisualsPivotTableVisualChartConfigurationTotalOptionsColumnTotalOptionsArgs defaults) {
            $ = new VisualsPivotTableVisualChartConfigurationTotalOptionsColumnTotalOptionsArgs(Objects.requireNonNull(defaults));
        }

        public Builder customLabel(@Nullable Output<String> customLabel) {
            $.customLabel = customLabel;
            return this;
        }

        public Builder customLabel(String customLabel) {
            return customLabel(Output.of(customLabel));
        }

        public Builder metricHeaderCellStyle(@Nullable Output<CellStyleArgs> metricHeaderCellStyle) {
            $.metricHeaderCellStyle = metricHeaderCellStyle;
            return this;
        }

        public Builder metricHeaderCellStyle(CellStyleArgs metricHeaderCellStyle) {
            return metricHeaderCellStyle(Output.of(metricHeaderCellStyle));
        }

        public Builder placement(@Nullable Output<String> placement) {
            $.placement = placement;
            return this;
        }

        public Builder placement(String placement) {
            return placement(Output.of(placement));
        }

        public Builder scrollStatus(@Nullable Output<String> scrollStatus) {
            $.scrollStatus = scrollStatus;
            return this;
        }

        public Builder scrollStatus(String scrollStatus) {
            return scrollStatus(Output.of(scrollStatus));
        }

        public Builder totalCellStyle(@Nullable Output<CellStyleArgs> totalCellStyle) {
            $.totalCellStyle = totalCellStyle;
            return this;
        }

        public Builder totalCellStyle(CellStyleArgs totalCellStyle) {
            return totalCellStyle(Output.of(totalCellStyle));
        }

        public Builder totalsVisibility(@Nullable Output<String> totalsVisibility) {
            $.totalsVisibility = totalsVisibility;
            return this;
        }

        public Builder totalsVisibility(String totalsVisibility) {
            return totalsVisibility(Output.of(totalsVisibility));
        }

        public Builder valueCellStyle(@Nullable Output<CellStyleArgs> valueCellStyle) {
            $.valueCellStyle = valueCellStyle;
            return this;
        }

        public Builder valueCellStyle(CellStyleArgs valueCellStyle) {
            return valueCellStyle(Output.of(valueCellStyle));
        }

        public VisualsPivotTableVisualChartConfigurationTotalOptionsColumnTotalOptionsArgs build() {
            return $;
        }
    }

}
