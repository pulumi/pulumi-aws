// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.transfer.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class ServerWorkflowDetailsOnUploadArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServerWorkflowDetailsOnUploadArgs Empty = new ServerWorkflowDetailsOnUploadArgs();

    /**
     * Includes the necessary permissions for S3, EFS, and Lambda operations that Transfer can assume, so that all workflow steps can operate on the required resources.
     * 
     */
    @Import(name="executionRole", required=true)
    private Output<String> executionRole;

    /**
     * @return Includes the necessary permissions for S3, EFS, and Lambda operations that Transfer can assume, so that all workflow steps can operate on the required resources.
     * 
     */
    public Output<String> executionRole() {
        return this.executionRole;
    }

    /**
     * A unique identifier for the workflow.
     * 
     */
    @Import(name="workflowId", required=true)
    private Output<String> workflowId;

    /**
     * @return A unique identifier for the workflow.
     * 
     */
    public Output<String> workflowId() {
        return this.workflowId;
    }

    private ServerWorkflowDetailsOnUploadArgs() {}

    private ServerWorkflowDetailsOnUploadArgs(ServerWorkflowDetailsOnUploadArgs $) {
        this.executionRole = $.executionRole;
        this.workflowId = $.workflowId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServerWorkflowDetailsOnUploadArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServerWorkflowDetailsOnUploadArgs $;

        public Builder() {
            $ = new ServerWorkflowDetailsOnUploadArgs();
        }

        public Builder(ServerWorkflowDetailsOnUploadArgs defaults) {
            $ = new ServerWorkflowDetailsOnUploadArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param executionRole Includes the necessary permissions for S3, EFS, and Lambda operations that Transfer can assume, so that all workflow steps can operate on the required resources.
         * 
         * @return builder
         * 
         */
        public Builder executionRole(Output<String> executionRole) {
            $.executionRole = executionRole;
            return this;
        }

        /**
         * @param executionRole Includes the necessary permissions for S3, EFS, and Lambda operations that Transfer can assume, so that all workflow steps can operate on the required resources.
         * 
         * @return builder
         * 
         */
        public Builder executionRole(String executionRole) {
            return executionRole(Output.of(executionRole));
        }

        /**
         * @param workflowId A unique identifier for the workflow.
         * 
         * @return builder
         * 
         */
        public Builder workflowId(Output<String> workflowId) {
            $.workflowId = workflowId;
            return this;
        }

        /**
         * @param workflowId A unique identifier for the workflow.
         * 
         * @return builder
         * 
         */
        public Builder workflowId(String workflowId) {
            return workflowId(Output.of(workflowId));
        }

        public ServerWorkflowDetailsOnUploadArgs build() {
            if ($.executionRole == null) {
                throw new MissingRequiredPropertyException("ServerWorkflowDetailsOnUploadArgs", "executionRole");
            }
            if ($.workflowId == null) {
                throw new MissingRequiredPropertyException("ServerWorkflowDetailsOnUploadArgs", "workflowId");
            }
            return $;
        }
    }

}
