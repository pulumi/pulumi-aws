// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.outputs;

import com.pulumi.aws.quicksight.outputs.DataSetPhysicalTableMapCustomSqlColumn;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class DataSetPhysicalTableMapCustomSql {
    /**
     * @return Column schema from the SQL query result set. See columns.
     * 
     */
    private @Nullable List<DataSetPhysicalTableMapCustomSqlColumn> columns;
    /**
     * @return ARN of the data source.
     * 
     */
    private String dataSourceArn;
    /**
     * @return Display name for the SQL query result.
     * 
     */
    private String name;
    /**
     * @return SQL query.
     * 
     */
    private String sqlQuery;

    private DataSetPhysicalTableMapCustomSql() {}
    /**
     * @return Column schema from the SQL query result set. See columns.
     * 
     */
    public List<DataSetPhysicalTableMapCustomSqlColumn> columns() {
        return this.columns == null ? List.of() : this.columns;
    }
    /**
     * @return ARN of the data source.
     * 
     */
    public String dataSourceArn() {
        return this.dataSourceArn;
    }
    /**
     * @return Display name for the SQL query result.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return SQL query.
     * 
     */
    public String sqlQuery() {
        return this.sqlQuery;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DataSetPhysicalTableMapCustomSql defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<DataSetPhysicalTableMapCustomSqlColumn> columns;
        private String dataSourceArn;
        private String name;
        private String sqlQuery;
        public Builder() {}
        public Builder(DataSetPhysicalTableMapCustomSql defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.columns = defaults.columns;
    	      this.dataSourceArn = defaults.dataSourceArn;
    	      this.name = defaults.name;
    	      this.sqlQuery = defaults.sqlQuery;
        }

        @CustomType.Setter
        public Builder columns(@Nullable List<DataSetPhysicalTableMapCustomSqlColumn> columns) {

            this.columns = columns;
            return this;
        }
        public Builder columns(DataSetPhysicalTableMapCustomSqlColumn... columns) {
            return columns(List.of(columns));
        }
        @CustomType.Setter
        public Builder dataSourceArn(String dataSourceArn) {
            if (dataSourceArn == null) {
              throw new MissingRequiredPropertyException("DataSetPhysicalTableMapCustomSql", "dataSourceArn");
            }
            this.dataSourceArn = dataSourceArn;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("DataSetPhysicalTableMapCustomSql", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder sqlQuery(String sqlQuery) {
            if (sqlQuery == null) {
              throw new MissingRequiredPropertyException("DataSetPhysicalTableMapCustomSql", "sqlQuery");
            }
            this.sqlQuery = sqlQuery;
            return this;
        }
        public DataSetPhysicalTableMapCustomSql build() {
            final var _resultValue = new DataSetPhysicalTableMapCustomSql();
            _resultValue.columns = columns;
            _resultValue.dataSourceArn = dataSourceArn;
            _resultValue.name = name;
            _resultValue.sqlQuery = sqlQuery;
            return _resultValue;
        }
    }
}
