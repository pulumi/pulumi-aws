// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.outputs;

import com.pulumi.aws.quicksight.outputs.ConditionalFormattingColorGradientColor;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class ConditionalFormattingColorGradient {
    private ConditionalFormattingColorGradientColor color;
    private String expression;

    private ConditionalFormattingColorGradient() {}
    public ConditionalFormattingColorGradientColor color() {
        return this.color;
    }
    public String expression() {
        return this.expression;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConditionalFormattingColorGradient defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private ConditionalFormattingColorGradientColor color;
        private String expression;
        public Builder() {}
        public Builder(ConditionalFormattingColorGradient defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.color = defaults.color;
    	      this.expression = defaults.expression;
        }

        @CustomType.Setter
        public Builder color(ConditionalFormattingColorGradientColor color) {
            if (color == null) {
              throw new MissingRequiredPropertyException("ConditionalFormattingColorGradient", "color");
            }
            this.color = color;
            return this;
        }
        @CustomType.Setter
        public Builder expression(String expression) {
            if (expression == null) {
              throw new MissingRequiredPropertyException("ConditionalFormattingColorGradient", "expression");
            }
            this.expression = expression;
            return this;
        }
        public ConditionalFormattingColorGradient build() {
            final var _resultValue = new ConditionalFormattingColorGradient();
            _resultValue.color = color;
            _resultValue.expression = expression;
            return _resultValue;
        }
    }
}
