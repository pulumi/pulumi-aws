// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.servicecatalog.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetProductResult {
    private @Nullable String acceptLanguage;
    /**
     * @return ARN of the product.
     * 
     */
    private String arn;
    /**
     * @return Time when the product was created.
     * 
     */
    private String createdTime;
    /**
     * @return Description of the product.
     * 
     */
    private String description;
    /**
     * @return Vendor of the product.
     * 
     */
    private String distributor;
    /**
     * @return Whether the product has a default path.
     * 
     */
    private Boolean hasDefaultPath;
    private String id;
    /**
     * @return Name of the product.
     * 
     */
    private String name;
    /**
     * @return Owner of the product.
     * 
     */
    private String owner;
    /**
     * @return Status of the product.
     * 
     */
    private String status;
    /**
     * @return Field that provides support information about the product.
     * 
     */
    private String supportDescription;
    /**
     * @return Contact email for product support.
     * 
     */
    private String supportEmail;
    /**
     * @return Contact URL for product support.
     * 
     */
    private String supportUrl;
    /**
     * @return Tags applied to the product.
     * 
     */
    private Map<String,String> tags;
    /**
     * @return Type of product.
     * 
     */
    private String type;

    private GetProductResult() {}
    public Optional<String> acceptLanguage() {
        return Optional.ofNullable(this.acceptLanguage);
    }
    /**
     * @return ARN of the product.
     * 
     */
    public String arn() {
        return this.arn;
    }
    /**
     * @return Time when the product was created.
     * 
     */
    public String createdTime() {
        return this.createdTime;
    }
    /**
     * @return Description of the product.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Vendor of the product.
     * 
     */
    public String distributor() {
        return this.distributor;
    }
    /**
     * @return Whether the product has a default path.
     * 
     */
    public Boolean hasDefaultPath() {
        return this.hasDefaultPath;
    }
    public String id() {
        return this.id;
    }
    /**
     * @return Name of the product.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Owner of the product.
     * 
     */
    public String owner() {
        return this.owner;
    }
    /**
     * @return Status of the product.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return Field that provides support information about the product.
     * 
     */
    public String supportDescription() {
        return this.supportDescription;
    }
    /**
     * @return Contact email for product support.
     * 
     */
    public String supportEmail() {
        return this.supportEmail;
    }
    /**
     * @return Contact URL for product support.
     * 
     */
    public String supportUrl() {
        return this.supportUrl;
    }
    /**
     * @return Tags applied to the product.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }
    /**
     * @return Type of product.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetProductResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String acceptLanguage;
        private String arn;
        private String createdTime;
        private String description;
        private String distributor;
        private Boolean hasDefaultPath;
        private String id;
        private String name;
        private String owner;
        private String status;
        private String supportDescription;
        private String supportEmail;
        private String supportUrl;
        private Map<String,String> tags;
        private String type;
        public Builder() {}
        public Builder(GetProductResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.acceptLanguage = defaults.acceptLanguage;
    	      this.arn = defaults.arn;
    	      this.createdTime = defaults.createdTime;
    	      this.description = defaults.description;
    	      this.distributor = defaults.distributor;
    	      this.hasDefaultPath = defaults.hasDefaultPath;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.owner = defaults.owner;
    	      this.status = defaults.status;
    	      this.supportDescription = defaults.supportDescription;
    	      this.supportEmail = defaults.supportEmail;
    	      this.supportUrl = defaults.supportUrl;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder acceptLanguage(@Nullable String acceptLanguage) {

            this.acceptLanguage = acceptLanguage;
            return this;
        }
        @CustomType.Setter
        public Builder arn(String arn) {
            if (arn == null) {
              throw new MissingRequiredPropertyException("GetProductResult", "arn");
            }
            this.arn = arn;
            return this;
        }
        @CustomType.Setter
        public Builder createdTime(String createdTime) {
            if (createdTime == null) {
              throw new MissingRequiredPropertyException("GetProductResult", "createdTime");
            }
            this.createdTime = createdTime;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetProductResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder distributor(String distributor) {
            if (distributor == null) {
              throw new MissingRequiredPropertyException("GetProductResult", "distributor");
            }
            this.distributor = distributor;
            return this;
        }
        @CustomType.Setter
        public Builder hasDefaultPath(Boolean hasDefaultPath) {
            if (hasDefaultPath == null) {
              throw new MissingRequiredPropertyException("GetProductResult", "hasDefaultPath");
            }
            this.hasDefaultPath = hasDefaultPath;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetProductResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetProductResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder owner(String owner) {
            if (owner == null) {
              throw new MissingRequiredPropertyException("GetProductResult", "owner");
            }
            this.owner = owner;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetProductResult", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder supportDescription(String supportDescription) {
            if (supportDescription == null) {
              throw new MissingRequiredPropertyException("GetProductResult", "supportDescription");
            }
            this.supportDescription = supportDescription;
            return this;
        }
        @CustomType.Setter
        public Builder supportEmail(String supportEmail) {
            if (supportEmail == null) {
              throw new MissingRequiredPropertyException("GetProductResult", "supportEmail");
            }
            this.supportEmail = supportEmail;
            return this;
        }
        @CustomType.Setter
        public Builder supportUrl(String supportUrl) {
            if (supportUrl == null) {
              throw new MissingRequiredPropertyException("GetProductResult", "supportUrl");
            }
            this.supportUrl = supportUrl;
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetProductResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetProductResult", "type");
            }
            this.type = type;
            return this;
        }
        public GetProductResult build() {
            final var _resultValue = new GetProductResult();
            _resultValue.acceptLanguage = acceptLanguage;
            _resultValue.arn = arn;
            _resultValue.createdTime = createdTime;
            _resultValue.description = description;
            _resultValue.distributor = distributor;
            _resultValue.hasDefaultPath = hasDefaultPath;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.owner = owner;
            _resultValue.status = status;
            _resultValue.supportDescription = supportDescription;
            _resultValue.supportEmail = supportEmail;
            _resultValue.supportUrl = supportUrl;
            _resultValue.tags = tags;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
