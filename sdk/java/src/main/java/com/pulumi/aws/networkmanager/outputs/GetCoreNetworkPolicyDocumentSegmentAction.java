// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.networkmanager.outputs;

import com.pulumi.aws.networkmanager.outputs.GetCoreNetworkPolicyDocumentSegmentActionVia;
import com.pulumi.aws.networkmanager.outputs.GetCoreNetworkPolicyDocumentSegmentActionWhenSentTo;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetCoreNetworkPolicyDocumentSegmentAction {
    /**
     * @return Action to take for the chosen segment. Valid values: `create-route`, `share`, `send-via` and `send-to`.
     * 
     */
    private String action;
    /**
     * @return A user-defined string describing the segment action.
     * 
     */
    private @Nullable String description;
    /**
     * @return List of strings containing CIDRs. You can define the IPv4 and IPv6 CIDR notation for each AWS Region. For example, `10.1.0.0/16` or `2001:db8::/56`. This is an array of CIDR notation strings.
     * 
     */
    private @Nullable List<String> destinationCidrBlocks;
    /**
     * @return A list of strings. Valid values include `[&#34;blackhole&#34;]` or a list of attachment ids.
     * 
     */
    private @Nullable List<String> destinations;
    /**
     * @return String. When `action` is `share`, a `mode` value of `attachment-route` places the attachment and return routes in each of the `share_with` segments. When `action` is `send-via`, indicates the mode used for packets. Valid values: `attachment-route`, `single-hop`, `dual-hop`.
     * 
     */
    private @Nullable String mode;
    /**
     * @return Name of the segment.
     * 
     */
    private String segment;
    /**
     * @return A set subtraction of segments to not share with.
     * 
     */
    private @Nullable List<String> shareWithExcepts;
    /**
     * @return A list of strings to share with. Must be a substring is all segments. Valid values include: `[&#34;*&#34;]` or `[&#34;&lt;segment-names&gt;&#34;]`.
     * 
     */
    private @Nullable List<String> shareWiths;
    /**
     * @return The network function groups and any edge overrides associated with the action.
     * 
     */
    private @Nullable GetCoreNetworkPolicyDocumentSegmentActionVia via;
    /**
     * @return The destination segments for the `send-via` or `send-to` `action`.
     * 
     */
    private @Nullable GetCoreNetworkPolicyDocumentSegmentActionWhenSentTo whenSentTo;

    private GetCoreNetworkPolicyDocumentSegmentAction() {}
    /**
     * @return Action to take for the chosen segment. Valid values: `create-route`, `share`, `send-via` and `send-to`.
     * 
     */
    public String action() {
        return this.action;
    }
    /**
     * @return A user-defined string describing the segment action.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return List of strings containing CIDRs. You can define the IPv4 and IPv6 CIDR notation for each AWS Region. For example, `10.1.0.0/16` or `2001:db8::/56`. This is an array of CIDR notation strings.
     * 
     */
    public List<String> destinationCidrBlocks() {
        return this.destinationCidrBlocks == null ? List.of() : this.destinationCidrBlocks;
    }
    /**
     * @return A list of strings. Valid values include `[&#34;blackhole&#34;]` or a list of attachment ids.
     * 
     */
    public List<String> destinations() {
        return this.destinations == null ? List.of() : this.destinations;
    }
    /**
     * @return String. When `action` is `share`, a `mode` value of `attachment-route` places the attachment and return routes in each of the `share_with` segments. When `action` is `send-via`, indicates the mode used for packets. Valid values: `attachment-route`, `single-hop`, `dual-hop`.
     * 
     */
    public Optional<String> mode() {
        return Optional.ofNullable(this.mode);
    }
    /**
     * @return Name of the segment.
     * 
     */
    public String segment() {
        return this.segment;
    }
    /**
     * @return A set subtraction of segments to not share with.
     * 
     */
    public List<String> shareWithExcepts() {
        return this.shareWithExcepts == null ? List.of() : this.shareWithExcepts;
    }
    /**
     * @return A list of strings to share with. Must be a substring is all segments. Valid values include: `[&#34;*&#34;]` or `[&#34;&lt;segment-names&gt;&#34;]`.
     * 
     */
    public List<String> shareWiths() {
        return this.shareWiths == null ? List.of() : this.shareWiths;
    }
    /**
     * @return The network function groups and any edge overrides associated with the action.
     * 
     */
    public Optional<GetCoreNetworkPolicyDocumentSegmentActionVia> via() {
        return Optional.ofNullable(this.via);
    }
    /**
     * @return The destination segments for the `send-via` or `send-to` `action`.
     * 
     */
    public Optional<GetCoreNetworkPolicyDocumentSegmentActionWhenSentTo> whenSentTo() {
        return Optional.ofNullable(this.whenSentTo);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCoreNetworkPolicyDocumentSegmentAction defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String action;
        private @Nullable String description;
        private @Nullable List<String> destinationCidrBlocks;
        private @Nullable List<String> destinations;
        private @Nullable String mode;
        private String segment;
        private @Nullable List<String> shareWithExcepts;
        private @Nullable List<String> shareWiths;
        private @Nullable GetCoreNetworkPolicyDocumentSegmentActionVia via;
        private @Nullable GetCoreNetworkPolicyDocumentSegmentActionWhenSentTo whenSentTo;
        public Builder() {}
        public Builder(GetCoreNetworkPolicyDocumentSegmentAction defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.action = defaults.action;
    	      this.description = defaults.description;
    	      this.destinationCidrBlocks = defaults.destinationCidrBlocks;
    	      this.destinations = defaults.destinations;
    	      this.mode = defaults.mode;
    	      this.segment = defaults.segment;
    	      this.shareWithExcepts = defaults.shareWithExcepts;
    	      this.shareWiths = defaults.shareWiths;
    	      this.via = defaults.via;
    	      this.whenSentTo = defaults.whenSentTo;
        }

        @CustomType.Setter
        public Builder action(String action) {
            if (action == null) {
              throw new MissingRequiredPropertyException("GetCoreNetworkPolicyDocumentSegmentAction", "action");
            }
            this.action = action;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {

            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder destinationCidrBlocks(@Nullable List<String> destinationCidrBlocks) {

            this.destinationCidrBlocks = destinationCidrBlocks;
            return this;
        }
        public Builder destinationCidrBlocks(String... destinationCidrBlocks) {
            return destinationCidrBlocks(List.of(destinationCidrBlocks));
        }
        @CustomType.Setter
        public Builder destinations(@Nullable List<String> destinations) {

            this.destinations = destinations;
            return this;
        }
        public Builder destinations(String... destinations) {
            return destinations(List.of(destinations));
        }
        @CustomType.Setter
        public Builder mode(@Nullable String mode) {

            this.mode = mode;
            return this;
        }
        @CustomType.Setter
        public Builder segment(String segment) {
            if (segment == null) {
              throw new MissingRequiredPropertyException("GetCoreNetworkPolicyDocumentSegmentAction", "segment");
            }
            this.segment = segment;
            return this;
        }
        @CustomType.Setter
        public Builder shareWithExcepts(@Nullable List<String> shareWithExcepts) {

            this.shareWithExcepts = shareWithExcepts;
            return this;
        }
        public Builder shareWithExcepts(String... shareWithExcepts) {
            return shareWithExcepts(List.of(shareWithExcepts));
        }
        @CustomType.Setter
        public Builder shareWiths(@Nullable List<String> shareWiths) {

            this.shareWiths = shareWiths;
            return this;
        }
        public Builder shareWiths(String... shareWiths) {
            return shareWiths(List.of(shareWiths));
        }
        @CustomType.Setter
        public Builder via(@Nullable GetCoreNetworkPolicyDocumentSegmentActionVia via) {

            this.via = via;
            return this;
        }
        @CustomType.Setter
        public Builder whenSentTo(@Nullable GetCoreNetworkPolicyDocumentSegmentActionWhenSentTo whenSentTo) {

            this.whenSentTo = whenSentTo;
            return this;
        }
        public GetCoreNetworkPolicyDocumentSegmentAction build() {
            final var _resultValue = new GetCoreNetworkPolicyDocumentSegmentAction();
            _resultValue.action = action;
            _resultValue.description = description;
            _resultValue.destinationCidrBlocks = destinationCidrBlocks;
            _resultValue.destinations = destinations;
            _resultValue.mode = mode;
            _resultValue.segment = segment;
            _resultValue.shareWithExcepts = shareWithExcepts;
            _resultValue.shareWiths = shareWiths;
            _resultValue.via = via;
            _resultValue.whenSentTo = whenSentTo;
            return _resultValue;
        }
    }
}
