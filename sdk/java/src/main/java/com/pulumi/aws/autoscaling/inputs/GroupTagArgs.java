// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.autoscaling.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;


public final class GroupTagArgs extends com.pulumi.resources.ResourceArgs {

    public static final GroupTagArgs Empty = new GroupTagArgs();

    /**
     * Key
     * 
     */
    @Import(name="key", required=true)
    private Output<String> key;

    /**
     * @return Key
     * 
     */
    public Output<String> key() {
        return this.key;
    }

    /**
     * Enables propagation of the tag to
     * Amazon EC2 instances launched via this ASG
     * 
     * To declare multiple tags additional `tag` blocks can be specified.
     * Alternatively the `tags` attributes can be used, which accepts a list of maps containing the above field names as keys and their respective values.
     * This allows the construction of dynamic lists of tags which is not possible using the single `tag` attribute.
     * `tag` and `tags` are mutually exclusive, only one of them can be specified.
     * 
     * &gt; **NOTE:** Other AWS APIs may automatically add special tags to their associated Auto Scaling Group for management purposes, such as ECS Capacity Providers adding the `AmazonECSManaged` tag. These generally should be included in the configuration so the provider does not attempt to remove them and so if the `min_size` was greater than zero on creation, that these tag(s) are applied to any initial EC2 Instances in the Auto Scaling Group. If these tag(s) were missing in the Auto Scaling Group configuration on creation, affected EC2 Instances missing the tags may require manual intervention of adding the tags to ensure they work properly with the other AWS service.
     * 
     */
    @Import(name="propagateAtLaunch", required=true)
    private Output<Boolean> propagateAtLaunch;

    /**
     * @return Enables propagation of the tag to
     * Amazon EC2 instances launched via this ASG
     * 
     * To declare multiple tags additional `tag` blocks can be specified.
     * Alternatively the `tags` attributes can be used, which accepts a list of maps containing the above field names as keys and their respective values.
     * This allows the construction of dynamic lists of tags which is not possible using the single `tag` attribute.
     * `tag` and `tags` are mutually exclusive, only one of them can be specified.
     * 
     * &gt; **NOTE:** Other AWS APIs may automatically add special tags to their associated Auto Scaling Group for management purposes, such as ECS Capacity Providers adding the `AmazonECSManaged` tag. These generally should be included in the configuration so the provider does not attempt to remove them and so if the `min_size` was greater than zero on creation, that these tag(s) are applied to any initial EC2 Instances in the Auto Scaling Group. If these tag(s) were missing in the Auto Scaling Group configuration on creation, affected EC2 Instances missing the tags may require manual intervention of adding the tags to ensure they work properly with the other AWS service.
     * 
     */
    public Output<Boolean> propagateAtLaunch() {
        return this.propagateAtLaunch;
    }

    /**
     * Value
     * 
     */
    @Import(name="value", required=true)
    private Output<String> value;

    /**
     * @return Value
     * 
     */
    public Output<String> value() {
        return this.value;
    }

    private GroupTagArgs() {}

    private GroupTagArgs(GroupTagArgs $) {
        this.key = $.key;
        this.propagateAtLaunch = $.propagateAtLaunch;
        this.value = $.value;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GroupTagArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GroupTagArgs $;

        public Builder() {
            $ = new GroupTagArgs();
        }

        public Builder(GroupTagArgs defaults) {
            $ = new GroupTagArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param key Key
         * 
         * @return builder
         * 
         */
        public Builder key(Output<String> key) {
            $.key = key;
            return this;
        }

        /**
         * @param key Key
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            return key(Output.of(key));
        }

        /**
         * @param propagateAtLaunch Enables propagation of the tag to
         * Amazon EC2 instances launched via this ASG
         * 
         * To declare multiple tags additional `tag` blocks can be specified.
         * Alternatively the `tags` attributes can be used, which accepts a list of maps containing the above field names as keys and their respective values.
         * This allows the construction of dynamic lists of tags which is not possible using the single `tag` attribute.
         * `tag` and `tags` are mutually exclusive, only one of them can be specified.
         * 
         * &gt; **NOTE:** Other AWS APIs may automatically add special tags to their associated Auto Scaling Group for management purposes, such as ECS Capacity Providers adding the `AmazonECSManaged` tag. These generally should be included in the configuration so the provider does not attempt to remove them and so if the `min_size` was greater than zero on creation, that these tag(s) are applied to any initial EC2 Instances in the Auto Scaling Group. If these tag(s) were missing in the Auto Scaling Group configuration on creation, affected EC2 Instances missing the tags may require manual intervention of adding the tags to ensure they work properly with the other AWS service.
         * 
         * @return builder
         * 
         */
        public Builder propagateAtLaunch(Output<Boolean> propagateAtLaunch) {
            $.propagateAtLaunch = propagateAtLaunch;
            return this;
        }

        /**
         * @param propagateAtLaunch Enables propagation of the tag to
         * Amazon EC2 instances launched via this ASG
         * 
         * To declare multiple tags additional `tag` blocks can be specified.
         * Alternatively the `tags` attributes can be used, which accepts a list of maps containing the above field names as keys and their respective values.
         * This allows the construction of dynamic lists of tags which is not possible using the single `tag` attribute.
         * `tag` and `tags` are mutually exclusive, only one of them can be specified.
         * 
         * &gt; **NOTE:** Other AWS APIs may automatically add special tags to their associated Auto Scaling Group for management purposes, such as ECS Capacity Providers adding the `AmazonECSManaged` tag. These generally should be included in the configuration so the provider does not attempt to remove them and so if the `min_size` was greater than zero on creation, that these tag(s) are applied to any initial EC2 Instances in the Auto Scaling Group. If these tag(s) were missing in the Auto Scaling Group configuration on creation, affected EC2 Instances missing the tags may require manual intervention of adding the tags to ensure they work properly with the other AWS service.
         * 
         * @return builder
         * 
         */
        public Builder propagateAtLaunch(Boolean propagateAtLaunch) {
            return propagateAtLaunch(Output.of(propagateAtLaunch));
        }

        /**
         * @param value Value
         * 
         * @return builder
         * 
         */
        public Builder value(Output<String> value) {
            $.value = value;
            return this;
        }

        /**
         * @param value Value
         * 
         * @return builder
         * 
         */
        public Builder value(String value) {
            return value(Output.of(value));
        }

        public GroupTagArgs build() {
            $.key = Objects.requireNonNull($.key, "expected parameter 'key' to be non-null");
            $.propagateAtLaunch = Objects.requireNonNull($.propagateAtLaunch, "expected parameter 'propagateAtLaunch' to be non-null");
            $.value = Objects.requireNonNull($.value, "expected parameter 'value' to be non-null");
            return $;
        }
    }

}
