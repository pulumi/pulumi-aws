// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.macie2.inputs;

import com.pulumi.aws.macie2.inputs.ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermArgs extends com.pulumi.resources.ResourceArgs {

    public static final ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermArgs Empty = new ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermArgs();

    /**
     * The operator to use in the condition.
     * 
     */
    @Import(name="comparator")
    private @Nullable Output<String> comparator;

    /**
     * @return The operator to use in the condition.
     * 
     */
    public Optional<Output<String>> comparator() {
        return Optional.ofNullable(this.comparator);
    }

    /**
     * The tag key to use in the condition. The only valid value is `TAG`.
     * 
     */
    @Import(name="key")
    private @Nullable Output<String> key;

    /**
     * @return The tag key to use in the condition. The only valid value is `TAG`.
     * 
     */
    public Optional<Output<String>> key() {
        return Optional.ofNullable(this.key);
    }

    /**
     * The tag keys or tag key and value pairs to use in the condition.
     * 
     */
    @Import(name="tagValues")
    private @Nullable Output<List<ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueArgs>> tagValues;

    /**
     * @return The tag keys or tag key and value pairs to use in the condition.
     * 
     */
    public Optional<Output<List<ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueArgs>>> tagValues() {
        return Optional.ofNullable(this.tagValues);
    }

    /**
     * The type of object to apply the condition to. The only valid value is `S3_OBJECT`.
     * 
     */
    @Import(name="target")
    private @Nullable Output<String> target;

    /**
     * @return The type of object to apply the condition to. The only valid value is `S3_OBJECT`.
     * 
     */
    public Optional<Output<String>> target() {
        return Optional.ofNullable(this.target);
    }

    private ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermArgs() {}

    private ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermArgs(ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermArgs $) {
        this.comparator = $.comparator;
        this.key = $.key;
        this.tagValues = $.tagValues;
        this.target = $.target;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermArgs $;

        public Builder() {
            $ = new ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermArgs();
        }

        public Builder(ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermArgs defaults) {
            $ = new ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param comparator The operator to use in the condition.
         * 
         * @return builder
         * 
         */
        public Builder comparator(@Nullable Output<String> comparator) {
            $.comparator = comparator;
            return this;
        }

        /**
         * @param comparator The operator to use in the condition.
         * 
         * @return builder
         * 
         */
        public Builder comparator(String comparator) {
            return comparator(Output.of(comparator));
        }

        /**
         * @param key The tag key to use in the condition. The only valid value is `TAG`.
         * 
         * @return builder
         * 
         */
        public Builder key(@Nullable Output<String> key) {
            $.key = key;
            return this;
        }

        /**
         * @param key The tag key to use in the condition. The only valid value is `TAG`.
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            return key(Output.of(key));
        }

        /**
         * @param tagValues The tag keys or tag key and value pairs to use in the condition.
         * 
         * @return builder
         * 
         */
        public Builder tagValues(@Nullable Output<List<ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueArgs>> tagValues) {
            $.tagValues = tagValues;
            return this;
        }

        /**
         * @param tagValues The tag keys or tag key and value pairs to use in the condition.
         * 
         * @return builder
         * 
         */
        public Builder tagValues(List<ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueArgs> tagValues) {
            return tagValues(Output.of(tagValues));
        }

        /**
         * @param tagValues The tag keys or tag key and value pairs to use in the condition.
         * 
         * @return builder
         * 
         */
        public Builder tagValues(ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueArgs... tagValues) {
            return tagValues(List.of(tagValues));
        }

        /**
         * @param target The type of object to apply the condition to. The only valid value is `S3_OBJECT`.
         * 
         * @return builder
         * 
         */
        public Builder target(@Nullable Output<String> target) {
            $.target = target;
            return this;
        }

        /**
         * @param target The type of object to apply the condition to. The only valid value is `S3_OBJECT`.
         * 
         * @return builder
         * 
         */
        public Builder target(String target) {
            return target(Output.of(target));
        }

        public ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermArgs build() {
            return $;
        }
    }

}
