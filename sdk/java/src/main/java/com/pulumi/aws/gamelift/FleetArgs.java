// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.gamelift;

import com.pulumi.aws.gamelift.inputs.FleetCertificateConfigurationArgs;
import com.pulumi.aws.gamelift.inputs.FleetEc2InboundPermissionArgs;
import com.pulumi.aws.gamelift.inputs.FleetResourceCreationLimitPolicyArgs;
import com.pulumi.aws.gamelift.inputs.FleetRuntimeConfigurationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FleetArgs extends com.pulumi.resources.ResourceArgs {

    public static final FleetArgs Empty = new FleetArgs();

    @Import(name="buildId")
    private @Nullable Output<String> buildId;

    public Optional<Output<String>> buildId() {
        return Optional.ofNullable(this.buildId);
    }

    @Import(name="certificateConfiguration")
    private @Nullable Output<FleetCertificateConfigurationArgs> certificateConfiguration;

    public Optional<Output<FleetCertificateConfigurationArgs>> certificateConfiguration() {
        return Optional.ofNullable(this.certificateConfiguration);
    }

    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="ec2InboundPermissions")
    private @Nullable Output<List<FleetEc2InboundPermissionArgs>> ec2InboundPermissions;

    public Optional<Output<List<FleetEc2InboundPermissionArgs>>> ec2InboundPermissions() {
        return Optional.ofNullable(this.ec2InboundPermissions);
    }

    @Import(name="ec2InstanceType", required=true)
    private Output<String> ec2InstanceType;

    public Output<String> ec2InstanceType() {
        return this.ec2InstanceType;
    }

    @Import(name="fleetType")
    private @Nullable Output<String> fleetType;

    public Optional<Output<String>> fleetType() {
        return Optional.ofNullable(this.fleetType);
    }

    @Import(name="instanceRoleArn")
    private @Nullable Output<String> instanceRoleArn;

    public Optional<Output<String>> instanceRoleArn() {
        return Optional.ofNullable(this.instanceRoleArn);
    }

    @Import(name="metricGroups")
    private @Nullable Output<List<String>> metricGroups;

    public Optional<Output<List<String>>> metricGroups() {
        return Optional.ofNullable(this.metricGroups);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="newGameSessionProtectionPolicy")
    private @Nullable Output<String> newGameSessionProtectionPolicy;

    public Optional<Output<String>> newGameSessionProtectionPolicy() {
        return Optional.ofNullable(this.newGameSessionProtectionPolicy);
    }

    @Import(name="resourceCreationLimitPolicy")
    private @Nullable Output<FleetResourceCreationLimitPolicyArgs> resourceCreationLimitPolicy;

    public Optional<Output<FleetResourceCreationLimitPolicyArgs>> resourceCreationLimitPolicy() {
        return Optional.ofNullable(this.resourceCreationLimitPolicy);
    }

    @Import(name="runtimeConfiguration")
    private @Nullable Output<FleetRuntimeConfigurationArgs> runtimeConfiguration;

    public Optional<Output<FleetRuntimeConfigurationArgs>> runtimeConfiguration() {
        return Optional.ofNullable(this.runtimeConfiguration);
    }

    @Import(name="scriptId")
    private @Nullable Output<String> scriptId;

    public Optional<Output<String>> scriptId() {
        return Optional.ofNullable(this.scriptId);
    }

    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private FleetArgs() {}

    private FleetArgs(FleetArgs $) {
        this.buildId = $.buildId;
        this.certificateConfiguration = $.certificateConfiguration;
        this.description = $.description;
        this.ec2InboundPermissions = $.ec2InboundPermissions;
        this.ec2InstanceType = $.ec2InstanceType;
        this.fleetType = $.fleetType;
        this.instanceRoleArn = $.instanceRoleArn;
        this.metricGroups = $.metricGroups;
        this.name = $.name;
        this.newGameSessionProtectionPolicy = $.newGameSessionProtectionPolicy;
        this.resourceCreationLimitPolicy = $.resourceCreationLimitPolicy;
        this.runtimeConfiguration = $.runtimeConfiguration;
        this.scriptId = $.scriptId;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FleetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FleetArgs $;

        public Builder() {
            $ = new FleetArgs();
        }

        public Builder(FleetArgs defaults) {
            $ = new FleetArgs(Objects.requireNonNull(defaults));
        }

        public Builder buildId(@Nullable Output<String> buildId) {
            $.buildId = buildId;
            return this;
        }

        public Builder buildId(String buildId) {
            return buildId(Output.of(buildId));
        }

        public Builder certificateConfiguration(@Nullable Output<FleetCertificateConfigurationArgs> certificateConfiguration) {
            $.certificateConfiguration = certificateConfiguration;
            return this;
        }

        public Builder certificateConfiguration(FleetCertificateConfigurationArgs certificateConfiguration) {
            return certificateConfiguration(Output.of(certificateConfiguration));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder ec2InboundPermissions(@Nullable Output<List<FleetEc2InboundPermissionArgs>> ec2InboundPermissions) {
            $.ec2InboundPermissions = ec2InboundPermissions;
            return this;
        }

        public Builder ec2InboundPermissions(List<FleetEc2InboundPermissionArgs> ec2InboundPermissions) {
            return ec2InboundPermissions(Output.of(ec2InboundPermissions));
        }

        public Builder ec2InboundPermissions(FleetEc2InboundPermissionArgs... ec2InboundPermissions) {
            return ec2InboundPermissions(List.of(ec2InboundPermissions));
        }

        public Builder ec2InstanceType(Output<String> ec2InstanceType) {
            $.ec2InstanceType = ec2InstanceType;
            return this;
        }

        public Builder ec2InstanceType(String ec2InstanceType) {
            return ec2InstanceType(Output.of(ec2InstanceType));
        }

        public Builder fleetType(@Nullable Output<String> fleetType) {
            $.fleetType = fleetType;
            return this;
        }

        public Builder fleetType(String fleetType) {
            return fleetType(Output.of(fleetType));
        }

        public Builder instanceRoleArn(@Nullable Output<String> instanceRoleArn) {
            $.instanceRoleArn = instanceRoleArn;
            return this;
        }

        public Builder instanceRoleArn(String instanceRoleArn) {
            return instanceRoleArn(Output.of(instanceRoleArn));
        }

        public Builder metricGroups(@Nullable Output<List<String>> metricGroups) {
            $.metricGroups = metricGroups;
            return this;
        }

        public Builder metricGroups(List<String> metricGroups) {
            return metricGroups(Output.of(metricGroups));
        }

        public Builder metricGroups(String... metricGroups) {
            return metricGroups(List.of(metricGroups));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder newGameSessionProtectionPolicy(@Nullable Output<String> newGameSessionProtectionPolicy) {
            $.newGameSessionProtectionPolicy = newGameSessionProtectionPolicy;
            return this;
        }

        public Builder newGameSessionProtectionPolicy(String newGameSessionProtectionPolicy) {
            return newGameSessionProtectionPolicy(Output.of(newGameSessionProtectionPolicy));
        }

        public Builder resourceCreationLimitPolicy(@Nullable Output<FleetResourceCreationLimitPolicyArgs> resourceCreationLimitPolicy) {
            $.resourceCreationLimitPolicy = resourceCreationLimitPolicy;
            return this;
        }

        public Builder resourceCreationLimitPolicy(FleetResourceCreationLimitPolicyArgs resourceCreationLimitPolicy) {
            return resourceCreationLimitPolicy(Output.of(resourceCreationLimitPolicy));
        }

        public Builder runtimeConfiguration(@Nullable Output<FleetRuntimeConfigurationArgs> runtimeConfiguration) {
            $.runtimeConfiguration = runtimeConfiguration;
            return this;
        }

        public Builder runtimeConfiguration(FleetRuntimeConfigurationArgs runtimeConfiguration) {
            return runtimeConfiguration(Output.of(runtimeConfiguration));
        }

        public Builder scriptId(@Nullable Output<String> scriptId) {
            $.scriptId = scriptId;
            return this;
        }

        public Builder scriptId(String scriptId) {
            return scriptId(Output.of(scriptId));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public FleetArgs build() {
            $.ec2InstanceType = Objects.requireNonNull($.ec2InstanceType, "expected parameter 'ec2InstanceType' to be non-null");
            return $;
        }
    }

}
