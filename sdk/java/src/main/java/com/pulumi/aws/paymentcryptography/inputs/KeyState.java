// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.paymentcryptography.inputs;

import com.pulumi.aws.paymentcryptography.inputs.KeyKeyAttributesArgs;
import com.pulumi.aws.paymentcryptography.inputs.KeyTimeoutsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class KeyState extends com.pulumi.resources.ResourceArgs {

    public static final KeyState Empty = new KeyState();

    /**
     * ARN of the key.
     * 
     */
    @Import(name="arn")
    private @Nullable Output<String> arn;

    /**
     * @return ARN of the key.
     * 
     */
    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    @Import(name="deletionWindowInDays")
    private @Nullable Output<Integer> deletionWindowInDays;

    public Optional<Output<Integer>> deletionWindowInDays() {
        return Optional.ofNullable(this.deletionWindowInDays);
    }

    /**
     * Whether to enable the key.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Whether to enable the key.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * Whether the key is exportable from the service.
     * 
     */
    @Import(name="exportable")
    private @Nullable Output<Boolean> exportable;

    /**
     * @return Whether the key is exportable from the service.
     * 
     */
    public Optional<Output<Boolean>> exportable() {
        return Optional.ofNullable(this.exportable);
    }

    /**
     * Role of the key, the algorithm it supports, and the cryptographic operations allowed with the key.
     * 
     * The following arguments are optional:
     * 
     */
    @Import(name="keyAttributes")
    private @Nullable Output<KeyKeyAttributesArgs> keyAttributes;

    /**
     * @return Role of the key, the algorithm it supports, and the cryptographic operations allowed with the key.
     * 
     * The following arguments are optional:
     * 
     */
    public Optional<Output<KeyKeyAttributesArgs>> keyAttributes() {
        return Optional.ofNullable(this.keyAttributes);
    }

    /**
     * Key check value (KCV) is used to check if all parties holding a given key have the same key or to detect that a key has changed.
     * 
     */
    @Import(name="keyCheckValue")
    private @Nullable Output<String> keyCheckValue;

    /**
     * @return Key check value (KCV) is used to check if all parties holding a given key have the same key or to detect that a key has changed.
     * 
     */
    public Optional<Output<String>> keyCheckValue() {
        return Optional.ofNullable(this.keyCheckValue);
    }

    /**
     * Algorithm that AWS Payment Cryptography uses to calculate the key check value (KCV).
     * 
     */
    @Import(name="keyCheckValueAlgorithm")
    private @Nullable Output<String> keyCheckValueAlgorithm;

    /**
     * @return Algorithm that AWS Payment Cryptography uses to calculate the key check value (KCV).
     * 
     */
    public Optional<Output<String>> keyCheckValueAlgorithm() {
        return Optional.ofNullable(this.keyCheckValueAlgorithm);
    }

    /**
     * Source of the key material.
     * 
     */
    @Import(name="keyOrigin")
    private @Nullable Output<String> keyOrigin;

    /**
     * @return Source of the key material.
     * 
     */
    public Optional<Output<String>> keyOrigin() {
        return Optional.ofNullable(this.keyOrigin);
    }

    /**
     * State of key that is being created or deleted.
     * 
     */
    @Import(name="keyState")
    private @Nullable Output<String> keyState;

    /**
     * @return State of key that is being created or deleted.
     * 
     */
    public Optional<Output<String>> keyState() {
        return Optional.ofNullable(this.keyState);
    }

    /**
     * Map of tags assigned to the WorkSpaces Connection Alias. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Map of tags assigned to the WorkSpaces Connection Alias. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    /**
     * @return Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    @Import(name="timeouts")
    private @Nullable Output<KeyTimeoutsArgs> timeouts;

    public Optional<Output<KeyTimeoutsArgs>> timeouts() {
        return Optional.ofNullable(this.timeouts);
    }

    private KeyState() {}

    private KeyState(KeyState $) {
        this.arn = $.arn;
        this.deletionWindowInDays = $.deletionWindowInDays;
        this.enabled = $.enabled;
        this.exportable = $.exportable;
        this.keyAttributes = $.keyAttributes;
        this.keyCheckValue = $.keyCheckValue;
        this.keyCheckValueAlgorithm = $.keyCheckValueAlgorithm;
        this.keyOrigin = $.keyOrigin;
        this.keyState = $.keyState;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
        this.timeouts = $.timeouts;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(KeyState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private KeyState $;

        public Builder() {
            $ = new KeyState();
        }

        public Builder(KeyState defaults) {
            $ = new KeyState(Objects.requireNonNull(defaults));
        }

        /**
         * @param arn ARN of the key.
         * 
         * @return builder
         * 
         */
        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        /**
         * @param arn ARN of the key.
         * 
         * @return builder
         * 
         */
        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        public Builder deletionWindowInDays(@Nullable Output<Integer> deletionWindowInDays) {
            $.deletionWindowInDays = deletionWindowInDays;
            return this;
        }

        public Builder deletionWindowInDays(Integer deletionWindowInDays) {
            return deletionWindowInDays(Output.of(deletionWindowInDays));
        }

        /**
         * @param enabled Whether to enable the key.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Whether to enable the key.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param exportable Whether the key is exportable from the service.
         * 
         * @return builder
         * 
         */
        public Builder exportable(@Nullable Output<Boolean> exportable) {
            $.exportable = exportable;
            return this;
        }

        /**
         * @param exportable Whether the key is exportable from the service.
         * 
         * @return builder
         * 
         */
        public Builder exportable(Boolean exportable) {
            return exportable(Output.of(exportable));
        }

        /**
         * @param keyAttributes Role of the key, the algorithm it supports, and the cryptographic operations allowed with the key.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder keyAttributes(@Nullable Output<KeyKeyAttributesArgs> keyAttributes) {
            $.keyAttributes = keyAttributes;
            return this;
        }

        /**
         * @param keyAttributes Role of the key, the algorithm it supports, and the cryptographic operations allowed with the key.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder keyAttributes(KeyKeyAttributesArgs keyAttributes) {
            return keyAttributes(Output.of(keyAttributes));
        }

        /**
         * @param keyCheckValue Key check value (KCV) is used to check if all parties holding a given key have the same key or to detect that a key has changed.
         * 
         * @return builder
         * 
         */
        public Builder keyCheckValue(@Nullable Output<String> keyCheckValue) {
            $.keyCheckValue = keyCheckValue;
            return this;
        }

        /**
         * @param keyCheckValue Key check value (KCV) is used to check if all parties holding a given key have the same key or to detect that a key has changed.
         * 
         * @return builder
         * 
         */
        public Builder keyCheckValue(String keyCheckValue) {
            return keyCheckValue(Output.of(keyCheckValue));
        }

        /**
         * @param keyCheckValueAlgorithm Algorithm that AWS Payment Cryptography uses to calculate the key check value (KCV).
         * 
         * @return builder
         * 
         */
        public Builder keyCheckValueAlgorithm(@Nullable Output<String> keyCheckValueAlgorithm) {
            $.keyCheckValueAlgorithm = keyCheckValueAlgorithm;
            return this;
        }

        /**
         * @param keyCheckValueAlgorithm Algorithm that AWS Payment Cryptography uses to calculate the key check value (KCV).
         * 
         * @return builder
         * 
         */
        public Builder keyCheckValueAlgorithm(String keyCheckValueAlgorithm) {
            return keyCheckValueAlgorithm(Output.of(keyCheckValueAlgorithm));
        }

        /**
         * @param keyOrigin Source of the key material.
         * 
         * @return builder
         * 
         */
        public Builder keyOrigin(@Nullable Output<String> keyOrigin) {
            $.keyOrigin = keyOrigin;
            return this;
        }

        /**
         * @param keyOrigin Source of the key material.
         * 
         * @return builder
         * 
         */
        public Builder keyOrigin(String keyOrigin) {
            return keyOrigin(Output.of(keyOrigin));
        }

        /**
         * @param keyState State of key that is being created or deleted.
         * 
         * @return builder
         * 
         */
        public Builder keyState(@Nullable Output<String> keyState) {
            $.keyState = keyState;
            return this;
        }

        /**
         * @param keyState State of key that is being created or deleted.
         * 
         * @return builder
         * 
         */
        public Builder keyState(String keyState) {
            return keyState(Output.of(keyState));
        }

        /**
         * @param tags Map of tags assigned to the WorkSpaces Connection Alias. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Map of tags assigned to the WorkSpaces Connection Alias. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tagsAll Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
         * 
         * @return builder
         * 
         * @deprecated
         * Please use `tags` instead.
         * 
         */
        @Deprecated /* Please use `tags` instead. */
        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        /**
         * @param tagsAll Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
         * 
         * @return builder
         * 
         * @deprecated
         * Please use `tags` instead.
         * 
         */
        @Deprecated /* Please use `tags` instead. */
        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        public Builder timeouts(@Nullable Output<KeyTimeoutsArgs> timeouts) {
            $.timeouts = timeouts;
            return this;
        }

        public Builder timeouts(KeyTimeoutsArgs timeouts) {
            return timeouts(Output.of(timeouts));
        }

        public KeyState build() {
            return $;
        }
    }

}
