// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.imagebuilder.inputs;

import com.pulumi.aws.imagebuilder.inputs.LifecyclePolicyPolicyDetailActionArgs;
import com.pulumi.aws.imagebuilder.inputs.LifecyclePolicyPolicyDetailExclusionRulesArgs;
import com.pulumi.aws.imagebuilder.inputs.LifecyclePolicyPolicyDetailFilterArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LifecyclePolicyPolicyDetailArgs extends com.pulumi.resources.ResourceArgs {

    public static final LifecyclePolicyPolicyDetailArgs Empty = new LifecyclePolicyPolicyDetailArgs();

    /**
     * Configuration details for the policy action.
     * 
     */
    @Import(name="action")
    private @Nullable Output<LifecyclePolicyPolicyDetailActionArgs> action;

    /**
     * @return Configuration details for the policy action.
     * 
     */
    public Optional<Output<LifecyclePolicyPolicyDetailActionArgs>> action() {
        return Optional.ofNullable(this.action);
    }

    /**
     * Additional rules to specify resources that should be exempt from policy actions.
     * 
     */
    @Import(name="exclusionRules")
    private @Nullable Output<LifecyclePolicyPolicyDetailExclusionRulesArgs> exclusionRules;

    /**
     * @return Additional rules to specify resources that should be exempt from policy actions.
     * 
     */
    public Optional<Output<LifecyclePolicyPolicyDetailExclusionRulesArgs>> exclusionRules() {
        return Optional.ofNullable(this.exclusionRules);
    }

    /**
     * Specifies the resources that the lifecycle policy applies to.
     * 
     * The following arguments are optional:
     * 
     */
    @Import(name="filter")
    private @Nullable Output<LifecyclePolicyPolicyDetailFilterArgs> filter;

    /**
     * @return Specifies the resources that the lifecycle policy applies to.
     * 
     * The following arguments are optional:
     * 
     */
    public Optional<Output<LifecyclePolicyPolicyDetailFilterArgs>> filter() {
        return Optional.ofNullable(this.filter);
    }

    private LifecyclePolicyPolicyDetailArgs() {}

    private LifecyclePolicyPolicyDetailArgs(LifecyclePolicyPolicyDetailArgs $) {
        this.action = $.action;
        this.exclusionRules = $.exclusionRules;
        this.filter = $.filter;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LifecyclePolicyPolicyDetailArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LifecyclePolicyPolicyDetailArgs $;

        public Builder() {
            $ = new LifecyclePolicyPolicyDetailArgs();
        }

        public Builder(LifecyclePolicyPolicyDetailArgs defaults) {
            $ = new LifecyclePolicyPolicyDetailArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param action Configuration details for the policy action.
         * 
         * @return builder
         * 
         */
        public Builder action(@Nullable Output<LifecyclePolicyPolicyDetailActionArgs> action) {
            $.action = action;
            return this;
        }

        /**
         * @param action Configuration details for the policy action.
         * 
         * @return builder
         * 
         */
        public Builder action(LifecyclePolicyPolicyDetailActionArgs action) {
            return action(Output.of(action));
        }

        /**
         * @param exclusionRules Additional rules to specify resources that should be exempt from policy actions.
         * 
         * @return builder
         * 
         */
        public Builder exclusionRules(@Nullable Output<LifecyclePolicyPolicyDetailExclusionRulesArgs> exclusionRules) {
            $.exclusionRules = exclusionRules;
            return this;
        }

        /**
         * @param exclusionRules Additional rules to specify resources that should be exempt from policy actions.
         * 
         * @return builder
         * 
         */
        public Builder exclusionRules(LifecyclePolicyPolicyDetailExclusionRulesArgs exclusionRules) {
            return exclusionRules(Output.of(exclusionRules));
        }

        /**
         * @param filter Specifies the resources that the lifecycle policy applies to.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder filter(@Nullable Output<LifecyclePolicyPolicyDetailFilterArgs> filter) {
            $.filter = filter;
            return this;
        }

        /**
         * @param filter Specifies the resources that the lifecycle policy applies to.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder filter(LifecyclePolicyPolicyDetailFilterArgs filter) {
            return filter(Output.of(filter));
        }

        public LifecyclePolicyPolicyDetailArgs build() {
            return $;
        }
    }

}
