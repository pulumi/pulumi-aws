// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class DataSetLogicalTableMapDataTransformCreateColumnsOperationColumn {
    /**
     * @return A unique ID to identify a calculated column. During a dataset update, if the column ID of a calculated column matches that of an existing calculated column, Amazon QuickSight preserves the existing calculated column.
     * 
     */
    private String columnId;
    /**
     * @return Column name.
     * 
     */
    private String columnName;
    /**
     * @return An expression that defines the calculated column.
     * 
     */
    private String expression;

    private DataSetLogicalTableMapDataTransformCreateColumnsOperationColumn() {}
    /**
     * @return A unique ID to identify a calculated column. During a dataset update, if the column ID of a calculated column matches that of an existing calculated column, Amazon QuickSight preserves the existing calculated column.
     * 
     */
    public String columnId() {
        return this.columnId;
    }
    /**
     * @return Column name.
     * 
     */
    public String columnName() {
        return this.columnName;
    }
    /**
     * @return An expression that defines the calculated column.
     * 
     */
    public String expression() {
        return this.expression;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DataSetLogicalTableMapDataTransformCreateColumnsOperationColumn defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String columnId;
        private String columnName;
        private String expression;
        public Builder() {}
        public Builder(DataSetLogicalTableMapDataTransformCreateColumnsOperationColumn defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.columnId = defaults.columnId;
    	      this.columnName = defaults.columnName;
    	      this.expression = defaults.expression;
        }

        @CustomType.Setter
        public Builder columnId(String columnId) {
            this.columnId = Objects.requireNonNull(columnId);
            return this;
        }
        @CustomType.Setter
        public Builder columnName(String columnName) {
            this.columnName = Objects.requireNonNull(columnName);
            return this;
        }
        @CustomType.Setter
        public Builder expression(String expression) {
            this.expression = Objects.requireNonNull(expression);
            return this;
        }
        public DataSetLogicalTableMapDataTransformCreateColumnsOperationColumn build() {
            final var o = new DataSetLogicalTableMapDataTransformCreateColumnsOperationColumn();
            o.columnId = columnId;
            o.columnName = columnName;
            o.expression = expression;
            return o;
        }
    }
}
