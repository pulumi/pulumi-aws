// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.evidently.inputs;

import com.pulumi.aws.evidently.inputs.ProjectDataDeliveryArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProjectState extends com.pulumi.resources.ResourceArgs {

    public static final ProjectState Empty = new ProjectState();

    @Import(name="activeExperimentCount")
    private @Nullable Output<Integer> activeExperimentCount;

    public Optional<Output<Integer>> activeExperimentCount() {
        return Optional.ofNullable(this.activeExperimentCount);
    }

    @Import(name="activeLaunchCount")
    private @Nullable Output<Integer> activeLaunchCount;

    public Optional<Output<Integer>> activeLaunchCount() {
        return Optional.ofNullable(this.activeLaunchCount);
    }

    @Import(name="arn")
    private @Nullable Output<String> arn;

    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    @Import(name="createdTime")
    private @Nullable Output<String> createdTime;

    public Optional<Output<String>> createdTime() {
        return Optional.ofNullable(this.createdTime);
    }

    @Import(name="dataDelivery")
    private @Nullable Output<ProjectDataDeliveryArgs> dataDelivery;

    public Optional<Output<ProjectDataDeliveryArgs>> dataDelivery() {
        return Optional.ofNullable(this.dataDelivery);
    }

    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="experimentCount")
    private @Nullable Output<Integer> experimentCount;

    public Optional<Output<Integer>> experimentCount() {
        return Optional.ofNullable(this.experimentCount);
    }

    @Import(name="featureCount")
    private @Nullable Output<Integer> featureCount;

    public Optional<Output<Integer>> featureCount() {
        return Optional.ofNullable(this.featureCount);
    }

    @Import(name="lastUpdatedTime")
    private @Nullable Output<String> lastUpdatedTime;

    public Optional<Output<String>> lastUpdatedTime() {
        return Optional.ofNullable(this.lastUpdatedTime);
    }

    @Import(name="launchCount")
    private @Nullable Output<Integer> launchCount;

    public Optional<Output<Integer>> launchCount() {
        return Optional.ofNullable(this.launchCount);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="status")
    private @Nullable Output<String> status;

    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    private ProjectState() {}

    private ProjectState(ProjectState $) {
        this.activeExperimentCount = $.activeExperimentCount;
        this.activeLaunchCount = $.activeLaunchCount;
        this.arn = $.arn;
        this.createdTime = $.createdTime;
        this.dataDelivery = $.dataDelivery;
        this.description = $.description;
        this.experimentCount = $.experimentCount;
        this.featureCount = $.featureCount;
        this.lastUpdatedTime = $.lastUpdatedTime;
        this.launchCount = $.launchCount;
        this.name = $.name;
        this.status = $.status;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectState $;

        public Builder() {
            $ = new ProjectState();
        }

        public Builder(ProjectState defaults) {
            $ = new ProjectState(Objects.requireNonNull(defaults));
        }

        public Builder activeExperimentCount(@Nullable Output<Integer> activeExperimentCount) {
            $.activeExperimentCount = activeExperimentCount;
            return this;
        }

        public Builder activeExperimentCount(Integer activeExperimentCount) {
            return activeExperimentCount(Output.of(activeExperimentCount));
        }

        public Builder activeLaunchCount(@Nullable Output<Integer> activeLaunchCount) {
            $.activeLaunchCount = activeLaunchCount;
            return this;
        }

        public Builder activeLaunchCount(Integer activeLaunchCount) {
            return activeLaunchCount(Output.of(activeLaunchCount));
        }

        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        public Builder createdTime(@Nullable Output<String> createdTime) {
            $.createdTime = createdTime;
            return this;
        }

        public Builder createdTime(String createdTime) {
            return createdTime(Output.of(createdTime));
        }

        public Builder dataDelivery(@Nullable Output<ProjectDataDeliveryArgs> dataDelivery) {
            $.dataDelivery = dataDelivery;
            return this;
        }

        public Builder dataDelivery(ProjectDataDeliveryArgs dataDelivery) {
            return dataDelivery(Output.of(dataDelivery));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder experimentCount(@Nullable Output<Integer> experimentCount) {
            $.experimentCount = experimentCount;
            return this;
        }

        public Builder experimentCount(Integer experimentCount) {
            return experimentCount(Output.of(experimentCount));
        }

        public Builder featureCount(@Nullable Output<Integer> featureCount) {
            $.featureCount = featureCount;
            return this;
        }

        public Builder featureCount(Integer featureCount) {
            return featureCount(Output.of(featureCount));
        }

        public Builder lastUpdatedTime(@Nullable Output<String> lastUpdatedTime) {
            $.lastUpdatedTime = lastUpdatedTime;
            return this;
        }

        public Builder lastUpdatedTime(String lastUpdatedTime) {
            return lastUpdatedTime(Output.of(lastUpdatedTime));
        }

        public Builder launchCount(@Nullable Output<Integer> launchCount) {
            $.launchCount = launchCount;
            return this;
        }

        public Builder launchCount(Integer launchCount) {
            return launchCount(Output.of(launchCount));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        public Builder status(String status) {
            return status(Output.of(status));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        public ProjectState build() {
            return $;
        }
    }

}
