// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.batch.inputs;

import com.pulumi.aws.batch.inputs.JobDefinitionEksPropertiesPodPropertiesContainersEnvArgs;
import com.pulumi.aws.batch.inputs.JobDefinitionEksPropertiesPodPropertiesContainersResourcesArgs;
import com.pulumi.aws.batch.inputs.JobDefinitionEksPropertiesPodPropertiesContainersSecurityContextArgs;
import com.pulumi.aws.batch.inputs.JobDefinitionEksPropertiesPodPropertiesContainersVolumeMountArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class JobDefinitionEksPropertiesPodPropertiesContainersArgs extends com.pulumi.resources.ResourceArgs {

    public static final JobDefinitionEksPropertiesPodPropertiesContainersArgs Empty = new JobDefinitionEksPropertiesPodPropertiesContainersArgs();

    /**
     * An array of arguments to the entrypoint. If this isn&#39;t specified, the CMD of the container image is used. This corresponds to the args member in the Entrypoint portion of the Pod in Kubernetes. Environment variable references are expanded using the container&#39;s environment.
     * 
     */
    @Import(name="args")
    private @Nullable Output<List<String>> args;

    /**
     * @return An array of arguments to the entrypoint. If this isn&#39;t specified, the CMD of the container image is used. This corresponds to the args member in the Entrypoint portion of the Pod in Kubernetes. Environment variable references are expanded using the container&#39;s environment.
     * 
     */
    public Optional<Output<List<String>>> args() {
        return Optional.ofNullable(this.args);
    }

    /**
     * The entrypoint for the container. This isn&#39;t run within a shell. If this isn&#39;t specified, the ENTRYPOINT of the container image is used. Environment variable references are expanded using the container&#39;s environment.
     * 
     */
    @Import(name="commands")
    private @Nullable Output<List<String>> commands;

    /**
     * @return The entrypoint for the container. This isn&#39;t run within a shell. If this isn&#39;t specified, the ENTRYPOINT of the container image is used. Environment variable references are expanded using the container&#39;s environment.
     * 
     */
    public Optional<Output<List<String>>> commands() {
        return Optional.ofNullable(this.commands);
    }

    /**
     * The environment variables to pass to a container. See EKS Environment below.
     * 
     */
    @Import(name="envs")
    private @Nullable Output<List<JobDefinitionEksPropertiesPodPropertiesContainersEnvArgs>> envs;

    /**
     * @return The environment variables to pass to a container. See EKS Environment below.
     * 
     */
    public Optional<Output<List<JobDefinitionEksPropertiesPodPropertiesContainersEnvArgs>>> envs() {
        return Optional.ofNullable(this.envs);
    }

    /**
     * The Docker image used to start the container.
     * 
     */
    @Import(name="image", required=true)
    private Output<String> image;

    /**
     * @return The Docker image used to start the container.
     * 
     */
    public Output<String> image() {
        return this.image;
    }

    /**
     * The image pull policy for the container. Supported values are `Always`, `IfNotPresent`, and `Never`.
     * 
     */
    @Import(name="imagePullPolicy")
    private @Nullable Output<String> imagePullPolicy;

    /**
     * @return The image pull policy for the container. Supported values are `Always`, `IfNotPresent`, and `Never`.
     * 
     */
    public Optional<Output<String>> imagePullPolicy() {
        return Optional.ofNullable(this.imagePullPolicy);
    }

    /**
     * The name of the container. If the name isn&#39;t specified, the default name &#34;Default&#34; is used. Each container in a pod must have a unique name.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the container. If the name isn&#39;t specified, the default name &#34;Default&#34; is used. Each container in a pod must have a unique name.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The type and amount of resources to assign to a container. The supported resources include `memory`, `cpu`, and `nvidia.com/gpu`.
     * 
     */
    @Import(name="resources")
    private @Nullable Output<JobDefinitionEksPropertiesPodPropertiesContainersResourcesArgs> resources;

    /**
     * @return The type and amount of resources to assign to a container. The supported resources include `memory`, `cpu`, and `nvidia.com/gpu`.
     * 
     */
    public Optional<Output<JobDefinitionEksPropertiesPodPropertiesContainersResourcesArgs>> resources() {
        return Optional.ofNullable(this.resources);
    }

    /**
     * The security context for a job.
     * 
     */
    @Import(name="securityContext")
    private @Nullable Output<JobDefinitionEksPropertiesPodPropertiesContainersSecurityContextArgs> securityContext;

    /**
     * @return The security context for a job.
     * 
     */
    public Optional<Output<JobDefinitionEksPropertiesPodPropertiesContainersSecurityContextArgs>> securityContext() {
        return Optional.ofNullable(this.securityContext);
    }

    /**
     * The volume mounts for the container.
     * 
     */
    @Import(name="volumeMounts")
    private @Nullable Output<List<JobDefinitionEksPropertiesPodPropertiesContainersVolumeMountArgs>> volumeMounts;

    /**
     * @return The volume mounts for the container.
     * 
     */
    public Optional<Output<List<JobDefinitionEksPropertiesPodPropertiesContainersVolumeMountArgs>>> volumeMounts() {
        return Optional.ofNullable(this.volumeMounts);
    }

    private JobDefinitionEksPropertiesPodPropertiesContainersArgs() {}

    private JobDefinitionEksPropertiesPodPropertiesContainersArgs(JobDefinitionEksPropertiesPodPropertiesContainersArgs $) {
        this.args = $.args;
        this.commands = $.commands;
        this.envs = $.envs;
        this.image = $.image;
        this.imagePullPolicy = $.imagePullPolicy;
        this.name = $.name;
        this.resources = $.resources;
        this.securityContext = $.securityContext;
        this.volumeMounts = $.volumeMounts;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(JobDefinitionEksPropertiesPodPropertiesContainersArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private JobDefinitionEksPropertiesPodPropertiesContainersArgs $;

        public Builder() {
            $ = new JobDefinitionEksPropertiesPodPropertiesContainersArgs();
        }

        public Builder(JobDefinitionEksPropertiesPodPropertiesContainersArgs defaults) {
            $ = new JobDefinitionEksPropertiesPodPropertiesContainersArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param args An array of arguments to the entrypoint. If this isn&#39;t specified, the CMD of the container image is used. This corresponds to the args member in the Entrypoint portion of the Pod in Kubernetes. Environment variable references are expanded using the container&#39;s environment.
         * 
         * @return builder
         * 
         */
        public Builder args(@Nullable Output<List<String>> args) {
            $.args = args;
            return this;
        }

        /**
         * @param args An array of arguments to the entrypoint. If this isn&#39;t specified, the CMD of the container image is used. This corresponds to the args member in the Entrypoint portion of the Pod in Kubernetes. Environment variable references are expanded using the container&#39;s environment.
         * 
         * @return builder
         * 
         */
        public Builder args(List<String> args) {
            return args(Output.of(args));
        }

        /**
         * @param args An array of arguments to the entrypoint. If this isn&#39;t specified, the CMD of the container image is used. This corresponds to the args member in the Entrypoint portion of the Pod in Kubernetes. Environment variable references are expanded using the container&#39;s environment.
         * 
         * @return builder
         * 
         */
        public Builder args(String... args) {
            return args(List.of(args));
        }

        /**
         * @param commands The entrypoint for the container. This isn&#39;t run within a shell. If this isn&#39;t specified, the ENTRYPOINT of the container image is used. Environment variable references are expanded using the container&#39;s environment.
         * 
         * @return builder
         * 
         */
        public Builder commands(@Nullable Output<List<String>> commands) {
            $.commands = commands;
            return this;
        }

        /**
         * @param commands The entrypoint for the container. This isn&#39;t run within a shell. If this isn&#39;t specified, the ENTRYPOINT of the container image is used. Environment variable references are expanded using the container&#39;s environment.
         * 
         * @return builder
         * 
         */
        public Builder commands(List<String> commands) {
            return commands(Output.of(commands));
        }

        /**
         * @param commands The entrypoint for the container. This isn&#39;t run within a shell. If this isn&#39;t specified, the ENTRYPOINT of the container image is used. Environment variable references are expanded using the container&#39;s environment.
         * 
         * @return builder
         * 
         */
        public Builder commands(String... commands) {
            return commands(List.of(commands));
        }

        /**
         * @param envs The environment variables to pass to a container. See EKS Environment below.
         * 
         * @return builder
         * 
         */
        public Builder envs(@Nullable Output<List<JobDefinitionEksPropertiesPodPropertiesContainersEnvArgs>> envs) {
            $.envs = envs;
            return this;
        }

        /**
         * @param envs The environment variables to pass to a container. See EKS Environment below.
         * 
         * @return builder
         * 
         */
        public Builder envs(List<JobDefinitionEksPropertiesPodPropertiesContainersEnvArgs> envs) {
            return envs(Output.of(envs));
        }

        /**
         * @param envs The environment variables to pass to a container. See EKS Environment below.
         * 
         * @return builder
         * 
         */
        public Builder envs(JobDefinitionEksPropertiesPodPropertiesContainersEnvArgs... envs) {
            return envs(List.of(envs));
        }

        /**
         * @param image The Docker image used to start the container.
         * 
         * @return builder
         * 
         */
        public Builder image(Output<String> image) {
            $.image = image;
            return this;
        }

        /**
         * @param image The Docker image used to start the container.
         * 
         * @return builder
         * 
         */
        public Builder image(String image) {
            return image(Output.of(image));
        }

        /**
         * @param imagePullPolicy The image pull policy for the container. Supported values are `Always`, `IfNotPresent`, and `Never`.
         * 
         * @return builder
         * 
         */
        public Builder imagePullPolicy(@Nullable Output<String> imagePullPolicy) {
            $.imagePullPolicy = imagePullPolicy;
            return this;
        }

        /**
         * @param imagePullPolicy The image pull policy for the container. Supported values are `Always`, `IfNotPresent`, and `Never`.
         * 
         * @return builder
         * 
         */
        public Builder imagePullPolicy(String imagePullPolicy) {
            return imagePullPolicy(Output.of(imagePullPolicy));
        }

        /**
         * @param name The name of the container. If the name isn&#39;t specified, the default name &#34;Default&#34; is used. Each container in a pod must have a unique name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the container. If the name isn&#39;t specified, the default name &#34;Default&#34; is used. Each container in a pod must have a unique name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param resources The type and amount of resources to assign to a container. The supported resources include `memory`, `cpu`, and `nvidia.com/gpu`.
         * 
         * @return builder
         * 
         */
        public Builder resources(@Nullable Output<JobDefinitionEksPropertiesPodPropertiesContainersResourcesArgs> resources) {
            $.resources = resources;
            return this;
        }

        /**
         * @param resources The type and amount of resources to assign to a container. The supported resources include `memory`, `cpu`, and `nvidia.com/gpu`.
         * 
         * @return builder
         * 
         */
        public Builder resources(JobDefinitionEksPropertiesPodPropertiesContainersResourcesArgs resources) {
            return resources(Output.of(resources));
        }

        /**
         * @param securityContext The security context for a job.
         * 
         * @return builder
         * 
         */
        public Builder securityContext(@Nullable Output<JobDefinitionEksPropertiesPodPropertiesContainersSecurityContextArgs> securityContext) {
            $.securityContext = securityContext;
            return this;
        }

        /**
         * @param securityContext The security context for a job.
         * 
         * @return builder
         * 
         */
        public Builder securityContext(JobDefinitionEksPropertiesPodPropertiesContainersSecurityContextArgs securityContext) {
            return securityContext(Output.of(securityContext));
        }

        /**
         * @param volumeMounts The volume mounts for the container.
         * 
         * @return builder
         * 
         */
        public Builder volumeMounts(@Nullable Output<List<JobDefinitionEksPropertiesPodPropertiesContainersVolumeMountArgs>> volumeMounts) {
            $.volumeMounts = volumeMounts;
            return this;
        }

        /**
         * @param volumeMounts The volume mounts for the container.
         * 
         * @return builder
         * 
         */
        public Builder volumeMounts(List<JobDefinitionEksPropertiesPodPropertiesContainersVolumeMountArgs> volumeMounts) {
            return volumeMounts(Output.of(volumeMounts));
        }

        /**
         * @param volumeMounts The volume mounts for the container.
         * 
         * @return builder
         * 
         */
        public Builder volumeMounts(JobDefinitionEksPropertiesPodPropertiesContainersVolumeMountArgs... volumeMounts) {
            return volumeMounts(List.of(volumeMounts));
        }

        public JobDefinitionEksPropertiesPodPropertiesContainersArgs build() {
            if ($.image == null) {
                throw new MissingRequiredPropertyException("JobDefinitionEksPropertiesPodPropertiesContainersArgs", "image");
            }
            return $;
        }
    }

}
