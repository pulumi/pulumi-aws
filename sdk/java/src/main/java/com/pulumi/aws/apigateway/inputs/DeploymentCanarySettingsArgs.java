// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.apigateway.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DeploymentCanarySettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final DeploymentCanarySettingsArgs Empty = new DeploymentCanarySettingsArgs();

    /**
     * Percentage (0.0-100.0) of traffic routed to the canary deployment.
     * 
     */
    @Import(name="percentTraffic")
    private @Nullable Output<Double> percentTraffic;

    /**
     * @return Percentage (0.0-100.0) of traffic routed to the canary deployment.
     * 
     */
    public Optional<Output<Double>> percentTraffic() {
        return Optional.ofNullable(this.percentTraffic);
    }

    /**
     * Stage variable overrides used for the canary release deployment. They can override existing stage variables or add new stage variables for the canary release deployment. These stage variables are represented as a string-to-string map between stage variable names and their values.
     * 
     */
    @Import(name="stageVariableOverrides")
    private @Nullable Output<Map<String,String>> stageVariableOverrides;

    /**
     * @return Stage variable overrides used for the canary release deployment. They can override existing stage variables or add new stage variables for the canary release deployment. These stage variables are represented as a string-to-string map between stage variable names and their values.
     * 
     */
    public Optional<Output<Map<String,String>>> stageVariableOverrides() {
        return Optional.ofNullable(this.stageVariableOverrides);
    }

    /**
     * Boolean flag to indicate whether the canary release deployment uses the stage cache or not.
     * 
     */
    @Import(name="useStageCache")
    private @Nullable Output<Boolean> useStageCache;

    /**
     * @return Boolean flag to indicate whether the canary release deployment uses the stage cache or not.
     * 
     */
    public Optional<Output<Boolean>> useStageCache() {
        return Optional.ofNullable(this.useStageCache);
    }

    private DeploymentCanarySettingsArgs() {}

    private DeploymentCanarySettingsArgs(DeploymentCanarySettingsArgs $) {
        this.percentTraffic = $.percentTraffic;
        this.stageVariableOverrides = $.stageVariableOverrides;
        this.useStageCache = $.useStageCache;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DeploymentCanarySettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DeploymentCanarySettingsArgs $;

        public Builder() {
            $ = new DeploymentCanarySettingsArgs();
        }

        public Builder(DeploymentCanarySettingsArgs defaults) {
            $ = new DeploymentCanarySettingsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param percentTraffic Percentage (0.0-100.0) of traffic routed to the canary deployment.
         * 
         * @return builder
         * 
         */
        public Builder percentTraffic(@Nullable Output<Double> percentTraffic) {
            $.percentTraffic = percentTraffic;
            return this;
        }

        /**
         * @param percentTraffic Percentage (0.0-100.0) of traffic routed to the canary deployment.
         * 
         * @return builder
         * 
         */
        public Builder percentTraffic(Double percentTraffic) {
            return percentTraffic(Output.of(percentTraffic));
        }

        /**
         * @param stageVariableOverrides Stage variable overrides used for the canary release deployment. They can override existing stage variables or add new stage variables for the canary release deployment. These stage variables are represented as a string-to-string map between stage variable names and their values.
         * 
         * @return builder
         * 
         */
        public Builder stageVariableOverrides(@Nullable Output<Map<String,String>> stageVariableOverrides) {
            $.stageVariableOverrides = stageVariableOverrides;
            return this;
        }

        /**
         * @param stageVariableOverrides Stage variable overrides used for the canary release deployment. They can override existing stage variables or add new stage variables for the canary release deployment. These stage variables are represented as a string-to-string map between stage variable names and their values.
         * 
         * @return builder
         * 
         */
        public Builder stageVariableOverrides(Map<String,String> stageVariableOverrides) {
            return stageVariableOverrides(Output.of(stageVariableOverrides));
        }

        /**
         * @param useStageCache Boolean flag to indicate whether the canary release deployment uses the stage cache or not.
         * 
         * @return builder
         * 
         */
        public Builder useStageCache(@Nullable Output<Boolean> useStageCache) {
            $.useStageCache = useStageCache;
            return this;
        }

        /**
         * @param useStageCache Boolean flag to indicate whether the canary release deployment uses the stage cache or not.
         * 
         * @return builder
         * 
         */
        public Builder useStageCache(Boolean useStageCache) {
            return useStageCache(Output.of(useStageCache));
        }

        public DeploymentCanarySettingsArgs build() {
            return $;
        }
    }

}
