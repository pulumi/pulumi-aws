// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.appmesh.inputs;

import com.pulumi.aws.appmesh.inputs.RouteSpecHttpRouteRetryPolicyPerRetryTimeoutArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RouteSpecHttpRouteRetryPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final RouteSpecHttpRouteRetryPolicyArgs Empty = new RouteSpecHttpRouteRetryPolicyArgs();

    @Import(name="httpRetryEvents")
    private @Nullable Output<List<String>> httpRetryEvents;

    public Optional<Output<List<String>>> httpRetryEvents() {
        return Optional.ofNullable(this.httpRetryEvents);
    }

    @Import(name="maxRetries", required=true)
    private Output<Integer> maxRetries;

    public Output<Integer> maxRetries() {
        return this.maxRetries;
    }

    @Import(name="perRetryTimeout", required=true)
    private Output<RouteSpecHttpRouteRetryPolicyPerRetryTimeoutArgs> perRetryTimeout;

    public Output<RouteSpecHttpRouteRetryPolicyPerRetryTimeoutArgs> perRetryTimeout() {
        return this.perRetryTimeout;
    }

    @Import(name="tcpRetryEvents")
    private @Nullable Output<List<String>> tcpRetryEvents;

    public Optional<Output<List<String>>> tcpRetryEvents() {
        return Optional.ofNullable(this.tcpRetryEvents);
    }

    private RouteSpecHttpRouteRetryPolicyArgs() {}

    private RouteSpecHttpRouteRetryPolicyArgs(RouteSpecHttpRouteRetryPolicyArgs $) {
        this.httpRetryEvents = $.httpRetryEvents;
        this.maxRetries = $.maxRetries;
        this.perRetryTimeout = $.perRetryTimeout;
        this.tcpRetryEvents = $.tcpRetryEvents;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RouteSpecHttpRouteRetryPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RouteSpecHttpRouteRetryPolicyArgs $;

        public Builder() {
            $ = new RouteSpecHttpRouteRetryPolicyArgs();
        }

        public Builder(RouteSpecHttpRouteRetryPolicyArgs defaults) {
            $ = new RouteSpecHttpRouteRetryPolicyArgs(Objects.requireNonNull(defaults));
        }

        public Builder httpRetryEvents(@Nullable Output<List<String>> httpRetryEvents) {
            $.httpRetryEvents = httpRetryEvents;
            return this;
        }

        public Builder httpRetryEvents(List<String> httpRetryEvents) {
            return httpRetryEvents(Output.of(httpRetryEvents));
        }

        public Builder httpRetryEvents(String... httpRetryEvents) {
            return httpRetryEvents(List.of(httpRetryEvents));
        }

        public Builder maxRetries(Output<Integer> maxRetries) {
            $.maxRetries = maxRetries;
            return this;
        }

        public Builder maxRetries(Integer maxRetries) {
            return maxRetries(Output.of(maxRetries));
        }

        public Builder perRetryTimeout(Output<RouteSpecHttpRouteRetryPolicyPerRetryTimeoutArgs> perRetryTimeout) {
            $.perRetryTimeout = perRetryTimeout;
            return this;
        }

        public Builder perRetryTimeout(RouteSpecHttpRouteRetryPolicyPerRetryTimeoutArgs perRetryTimeout) {
            return perRetryTimeout(Output.of(perRetryTimeout));
        }

        public Builder tcpRetryEvents(@Nullable Output<List<String>> tcpRetryEvents) {
            $.tcpRetryEvents = tcpRetryEvents;
            return this;
        }

        public Builder tcpRetryEvents(List<String> tcpRetryEvents) {
            return tcpRetryEvents(Output.of(tcpRetryEvents));
        }

        public Builder tcpRetryEvents(String... tcpRetryEvents) {
            return tcpRetryEvents(List.of(tcpRetryEvents));
        }

        public RouteSpecHttpRouteRetryPolicyArgs build() {
            $.maxRetries = Objects.requireNonNull($.maxRetries, "expected parameter 'maxRetries' to be non-null");
            $.perRetryTimeout = Objects.requireNonNull($.perRetryTimeout, "expected parameter 'perRetryTimeout' to be non-null");
            return $;
        }
    }

}
