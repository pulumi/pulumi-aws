// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.imagebuilder.outputs;

import com.pulumi.aws.imagebuilder.outputs.GetInfrastructureConfigurationInstanceMetadataOption;
import com.pulumi.aws.imagebuilder.outputs.GetInfrastructureConfigurationLogging;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetInfrastructureConfigurationResult {
    private String arn;
    /**
     * @return Date the infrastructure configuration was updated.
     * 
     */
    private @Nullable String dateCreated;
    private @Nullable String dateUpdated;
    /**
     * @return Description of the infrastructure configuration.
     * 
     */
    private @Nullable String description;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private @Nullable String id;
    /**
     * @return Nested list of instance metadata options for the HTTP requests that pipeline builds use to launch EC2 build and test instances.
     * 
     */
    private @Nullable List<GetInfrastructureConfigurationInstanceMetadataOption> instanceMetadataOptions;
    /**
     * @return Name of the IAM Instance Profile associated with the configuration.
     * 
     */
    private @Nullable String instanceProfileName;
    /**
     * @return Set of EC2 Instance Types associated with the configuration.
     * 
     */
    private @Nullable List<String> instanceTypes;
    /**
     * @return Name of the EC2 Key Pair associated with the configuration.
     * 
     */
    private @Nullable String keyPair;
    /**
     * @return Nested list of logging settings.
     * 
     */
    private @Nullable List<GetInfrastructureConfigurationLogging> loggings;
    /**
     * @return Name of the infrastructure configuration.
     * 
     */
    private @Nullable String name;
    /**
     * @return Key-value map of resource tags for the infrastructure created by the infrastructure configuration.
     * 
     */
    private @Nullable Map<String,String> resourceTags;
    /**
     * @return Set of EC2 Security Group identifiers associated with the configuration.
     * 
     */
    private @Nullable List<String> securityGroupIds;
    /**
     * @return ARN of the SNS Topic associated with the configuration.
     * 
     */
    private @Nullable String snsTopicArn;
    /**
     * @return Identifier of the EC2 Subnet associated with the configuration.
     * 
     */
    private @Nullable String subnetId;
    /**
     * @return Key-value map of resource tags for the infrastructure configuration.
     * 
     */
    private @Nullable Map<String,String> tags;
    /**
     * @return Whether instances are terminated on failure.
     * 
     */
    private @Nullable Boolean terminateInstanceOnFailure;

    private GetInfrastructureConfigurationResult() {}
    public String arn() {
        return this.arn;
    }
    /**
     * @return Date the infrastructure configuration was updated.
     * 
     */
    public Optional<String> dateCreated() {
        return Optional.ofNullable(this.dateCreated);
    }
    public Optional<String> dateUpdated() {
        return Optional.ofNullable(this.dateUpdated);
    }
    /**
     * @return Description of the infrastructure configuration.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Nested list of instance metadata options for the HTTP requests that pipeline builds use to launch EC2 build and test instances.
     * 
     */
    public List<GetInfrastructureConfigurationInstanceMetadataOption> instanceMetadataOptions() {
        return this.instanceMetadataOptions == null ? List.of() : this.instanceMetadataOptions;
    }
    /**
     * @return Name of the IAM Instance Profile associated with the configuration.
     * 
     */
    public Optional<String> instanceProfileName() {
        return Optional.ofNullable(this.instanceProfileName);
    }
    /**
     * @return Set of EC2 Instance Types associated with the configuration.
     * 
     */
    public List<String> instanceTypes() {
        return this.instanceTypes == null ? List.of() : this.instanceTypes;
    }
    /**
     * @return Name of the EC2 Key Pair associated with the configuration.
     * 
     */
    public Optional<String> keyPair() {
        return Optional.ofNullable(this.keyPair);
    }
    /**
     * @return Nested list of logging settings.
     * 
     */
    public List<GetInfrastructureConfigurationLogging> loggings() {
        return this.loggings == null ? List.of() : this.loggings;
    }
    /**
     * @return Name of the infrastructure configuration.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return Key-value map of resource tags for the infrastructure created by the infrastructure configuration.
     * 
     */
    public Map<String,String> resourceTags() {
        return this.resourceTags == null ? Map.of() : this.resourceTags;
    }
    /**
     * @return Set of EC2 Security Group identifiers associated with the configuration.
     * 
     */
    public List<String> securityGroupIds() {
        return this.securityGroupIds == null ? List.of() : this.securityGroupIds;
    }
    /**
     * @return ARN of the SNS Topic associated with the configuration.
     * 
     */
    public Optional<String> snsTopicArn() {
        return Optional.ofNullable(this.snsTopicArn);
    }
    /**
     * @return Identifier of the EC2 Subnet associated with the configuration.
     * 
     */
    public Optional<String> subnetId() {
        return Optional.ofNullable(this.subnetId);
    }
    /**
     * @return Key-value map of resource tags for the infrastructure configuration.
     * 
     */
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * @return Whether instances are terminated on failure.
     * 
     */
    public Optional<Boolean> terminateInstanceOnFailure() {
        return Optional.ofNullable(this.terminateInstanceOnFailure);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInfrastructureConfigurationResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String arn;
        private @Nullable String dateCreated;
        private @Nullable String dateUpdated;
        private @Nullable String description;
        private @Nullable String id;
        private @Nullable List<GetInfrastructureConfigurationInstanceMetadataOption> instanceMetadataOptions;
        private @Nullable String instanceProfileName;
        private @Nullable List<String> instanceTypes;
        private @Nullable String keyPair;
        private @Nullable List<GetInfrastructureConfigurationLogging> loggings;
        private @Nullable String name;
        private @Nullable Map<String,String> resourceTags;
        private @Nullable List<String> securityGroupIds;
        private @Nullable String snsTopicArn;
        private @Nullable String subnetId;
        private @Nullable Map<String,String> tags;
        private @Nullable Boolean terminateInstanceOnFailure;
        public Builder() {}
        public Builder(GetInfrastructureConfigurationResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.dateCreated = defaults.dateCreated;
    	      this.dateUpdated = defaults.dateUpdated;
    	      this.description = defaults.description;
    	      this.id = defaults.id;
    	      this.instanceMetadataOptions = defaults.instanceMetadataOptions;
    	      this.instanceProfileName = defaults.instanceProfileName;
    	      this.instanceTypes = defaults.instanceTypes;
    	      this.keyPair = defaults.keyPair;
    	      this.loggings = defaults.loggings;
    	      this.name = defaults.name;
    	      this.resourceTags = defaults.resourceTags;
    	      this.securityGroupIds = defaults.securityGroupIds;
    	      this.snsTopicArn = defaults.snsTopicArn;
    	      this.subnetId = defaults.subnetId;
    	      this.tags = defaults.tags;
    	      this.terminateInstanceOnFailure = defaults.terminateInstanceOnFailure;
        }

        @CustomType.Setter
        public Builder arn(String arn) {
            this.arn = Objects.requireNonNull(arn);
            return this;
        }
        @CustomType.Setter
        public Builder dateCreated(@Nullable String dateCreated) {
            this.dateCreated = dateCreated;
            return this;
        }
        @CustomType.Setter
        public Builder dateUpdated(@Nullable String dateUpdated) {
            this.dateUpdated = dateUpdated;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder instanceMetadataOptions(@Nullable List<GetInfrastructureConfigurationInstanceMetadataOption> instanceMetadataOptions) {
            this.instanceMetadataOptions = instanceMetadataOptions;
            return this;
        }
        public Builder instanceMetadataOptions(GetInfrastructureConfigurationInstanceMetadataOption... instanceMetadataOptions) {
            return instanceMetadataOptions(List.of(instanceMetadataOptions));
        }
        @CustomType.Setter
        public Builder instanceProfileName(@Nullable String instanceProfileName) {
            this.instanceProfileName = instanceProfileName;
            return this;
        }
        @CustomType.Setter
        public Builder instanceTypes(@Nullable List<String> instanceTypes) {
            this.instanceTypes = instanceTypes;
            return this;
        }
        public Builder instanceTypes(String... instanceTypes) {
            return instanceTypes(List.of(instanceTypes));
        }
        @CustomType.Setter
        public Builder keyPair(@Nullable String keyPair) {
            this.keyPair = keyPair;
            return this;
        }
        @CustomType.Setter
        public Builder loggings(@Nullable List<GetInfrastructureConfigurationLogging> loggings) {
            this.loggings = loggings;
            return this;
        }
        public Builder loggings(GetInfrastructureConfigurationLogging... loggings) {
            return loggings(List.of(loggings));
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder resourceTags(@Nullable Map<String,String> resourceTags) {
            this.resourceTags = resourceTags;
            return this;
        }
        @CustomType.Setter
        public Builder securityGroupIds(@Nullable List<String> securityGroupIds) {
            this.securityGroupIds = securityGroupIds;
            return this;
        }
        public Builder securityGroupIds(String... securityGroupIds) {
            return securityGroupIds(List.of(securityGroupIds));
        }
        @CustomType.Setter
        public Builder snsTopicArn(@Nullable String snsTopicArn) {
            this.snsTopicArn = snsTopicArn;
            return this;
        }
        @CustomType.Setter
        public Builder subnetId(@Nullable String subnetId) {
            this.subnetId = subnetId;
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder terminateInstanceOnFailure(@Nullable Boolean terminateInstanceOnFailure) {
            this.terminateInstanceOnFailure = terminateInstanceOnFailure;
            return this;
        }
        public GetInfrastructureConfigurationResult build() {
            final var o = new GetInfrastructureConfigurationResult();
            o.arn = arn;
            o.dateCreated = dateCreated;
            o.dateUpdated = dateUpdated;
            o.description = description;
            o.id = id;
            o.instanceMetadataOptions = instanceMetadataOptions;
            o.instanceProfileName = instanceProfileName;
            o.instanceTypes = instanceTypes;
            o.keyPair = keyPair;
            o.loggings = loggings;
            o.name = name;
            o.resourceTags = resourceTags;
            o.securityGroupIds = securityGroupIds;
            o.snsTopicArn = snsTopicArn;
            o.subnetId = subnetId;
            o.tags = tags;
            o.terminateInstanceOnFailure = terminateInstanceOnFailure;
            return o;
        }
    }
}
