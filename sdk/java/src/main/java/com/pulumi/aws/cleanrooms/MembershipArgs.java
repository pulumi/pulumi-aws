// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.cleanrooms;

import com.pulumi.aws.cleanrooms.inputs.MembershipDefaultResultConfigurationArgs;
import com.pulumi.aws.cleanrooms.inputs.MembershipPaymentConfigurationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MembershipArgs extends com.pulumi.resources.ResourceArgs {

    public static final MembershipArgs Empty = new MembershipArgs();

    /**
     * The ID of the collaboration to which the member was invited.
     * 
     */
    @Import(name="collaborationId", required=true)
    private Output<String> collaborationId;

    /**
     * @return The ID of the collaboration to which the member was invited.
     * 
     */
    public Output<String> collaborationId() {
        return this.collaborationId;
    }

    /**
     * The default configuration for a query result.
     * 
     */
    @Import(name="defaultResultConfiguration")
    private @Nullable Output<MembershipDefaultResultConfigurationArgs> defaultResultConfiguration;

    /**
     * @return The default configuration for a query result.
     * 
     */
    public Optional<Output<MembershipDefaultResultConfigurationArgs>> defaultResultConfiguration() {
        return Optional.ofNullable(this.defaultResultConfiguration);
    }

    @Import(name="paymentConfiguration")
    private @Nullable Output<MembershipPaymentConfigurationArgs> paymentConfiguration;

    public Optional<Output<MembershipPaymentConfigurationArgs>> paymentConfiguration() {
        return Optional.ofNullable(this.paymentConfiguration);
    }

    /**
     * An indicator as to whether query logging has been enabled or disabled for the membership.
     * 
     */
    @Import(name="queryLogStatus", required=true)
    private Output<String> queryLogStatus;

    /**
     * @return An indicator as to whether query logging has been enabled or disabled for the membership.
     * 
     */
    public Output<String> queryLogStatus() {
        return this.queryLogStatus;
    }

    /**
     * Key value pairs which tag the membership.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Key value pairs which tag the membership.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private MembershipArgs() {}

    private MembershipArgs(MembershipArgs $) {
        this.collaborationId = $.collaborationId;
        this.defaultResultConfiguration = $.defaultResultConfiguration;
        this.paymentConfiguration = $.paymentConfiguration;
        this.queryLogStatus = $.queryLogStatus;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MembershipArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MembershipArgs $;

        public Builder() {
            $ = new MembershipArgs();
        }

        public Builder(MembershipArgs defaults) {
            $ = new MembershipArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param collaborationId The ID of the collaboration to which the member was invited.
         * 
         * @return builder
         * 
         */
        public Builder collaborationId(Output<String> collaborationId) {
            $.collaborationId = collaborationId;
            return this;
        }

        /**
         * @param collaborationId The ID of the collaboration to which the member was invited.
         * 
         * @return builder
         * 
         */
        public Builder collaborationId(String collaborationId) {
            return collaborationId(Output.of(collaborationId));
        }

        /**
         * @param defaultResultConfiguration The default configuration for a query result.
         * 
         * @return builder
         * 
         */
        public Builder defaultResultConfiguration(@Nullable Output<MembershipDefaultResultConfigurationArgs> defaultResultConfiguration) {
            $.defaultResultConfiguration = defaultResultConfiguration;
            return this;
        }

        /**
         * @param defaultResultConfiguration The default configuration for a query result.
         * 
         * @return builder
         * 
         */
        public Builder defaultResultConfiguration(MembershipDefaultResultConfigurationArgs defaultResultConfiguration) {
            return defaultResultConfiguration(Output.of(defaultResultConfiguration));
        }

        public Builder paymentConfiguration(@Nullable Output<MembershipPaymentConfigurationArgs> paymentConfiguration) {
            $.paymentConfiguration = paymentConfiguration;
            return this;
        }

        public Builder paymentConfiguration(MembershipPaymentConfigurationArgs paymentConfiguration) {
            return paymentConfiguration(Output.of(paymentConfiguration));
        }

        /**
         * @param queryLogStatus An indicator as to whether query logging has been enabled or disabled for the membership.
         * 
         * @return builder
         * 
         */
        public Builder queryLogStatus(Output<String> queryLogStatus) {
            $.queryLogStatus = queryLogStatus;
            return this;
        }

        /**
         * @param queryLogStatus An indicator as to whether query logging has been enabled or disabled for the membership.
         * 
         * @return builder
         * 
         */
        public Builder queryLogStatus(String queryLogStatus) {
            return queryLogStatus(Output.of(queryLogStatus));
        }

        /**
         * @param tags Key value pairs which tag the membership.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Key value pairs which tag the membership.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public MembershipArgs build() {
            if ($.collaborationId == null) {
                throw new MissingRequiredPropertyException("MembershipArgs", "collaborationId");
            }
            if ($.queryLogStatus == null) {
                throw new MissingRequiredPropertyException("MembershipArgs", "queryLogStatus");
            }
            return $;
        }
    }

}
