// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ec2.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProxyProtocolPolicyState extends com.pulumi.resources.ResourceArgs {

    public static final ProxyProtocolPolicyState Empty = new ProxyProtocolPolicyState();

    /**
     * List of instance ports to which the policy
     * should be applied. This can be specified if the protocol is SSL or TCP.
     * 
     */
    @Import(name="instancePorts")
    private @Nullable Output<List<String>> instancePorts;

    /**
     * @return List of instance ports to which the policy
     * should be applied. This can be specified if the protocol is SSL or TCP.
     * 
     */
    public Optional<Output<List<String>>> instancePorts() {
        return Optional.ofNullable(this.instancePorts);
    }

    /**
     * The load balancer to which the policy
     * should be attached.
     * 
     */
    @Import(name="loadBalancer")
    private @Nullable Output<String> loadBalancer;

    /**
     * @return The load balancer to which the policy
     * should be attached.
     * 
     */
    public Optional<Output<String>> loadBalancer() {
        return Optional.ofNullable(this.loadBalancer);
    }

    private ProxyProtocolPolicyState() {}

    private ProxyProtocolPolicyState(ProxyProtocolPolicyState $) {
        this.instancePorts = $.instancePorts;
        this.loadBalancer = $.loadBalancer;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProxyProtocolPolicyState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProxyProtocolPolicyState $;

        public Builder() {
            $ = new ProxyProtocolPolicyState();
        }

        public Builder(ProxyProtocolPolicyState defaults) {
            $ = new ProxyProtocolPolicyState(Objects.requireNonNull(defaults));
        }

        /**
         * @param instancePorts List of instance ports to which the policy
         * should be applied. This can be specified if the protocol is SSL or TCP.
         * 
         * @return builder
         * 
         */
        public Builder instancePorts(@Nullable Output<List<String>> instancePorts) {
            $.instancePorts = instancePorts;
            return this;
        }

        /**
         * @param instancePorts List of instance ports to which the policy
         * should be applied. This can be specified if the protocol is SSL or TCP.
         * 
         * @return builder
         * 
         */
        public Builder instancePorts(List<String> instancePorts) {
            return instancePorts(Output.of(instancePorts));
        }

        /**
         * @param instancePorts List of instance ports to which the policy
         * should be applied. This can be specified if the protocol is SSL or TCP.
         * 
         * @return builder
         * 
         */
        public Builder instancePorts(String... instancePorts) {
            return instancePorts(List.of(instancePorts));
        }

        /**
         * @param loadBalancer The load balancer to which the policy
         * should be attached.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancer(@Nullable Output<String> loadBalancer) {
            $.loadBalancer = loadBalancer;
            return this;
        }

        /**
         * @param loadBalancer The load balancer to which the policy
         * should be attached.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancer(String loadBalancer) {
            return loadBalancer(Output.of(loadBalancer));
        }

        public ProxyProtocolPolicyState build() {
            return $;
        }
    }

}
