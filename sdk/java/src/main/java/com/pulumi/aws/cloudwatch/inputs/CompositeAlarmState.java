// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.cloudwatch.inputs;

import com.pulumi.aws.cloudwatch.inputs.CompositeAlarmActionsSuppressorArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CompositeAlarmState extends com.pulumi.resources.ResourceArgs {

    public static final CompositeAlarmState Empty = new CompositeAlarmState();

    /**
     * Indicates whether actions should be executed during any changes to the alarm state of the composite alarm. Defaults to `true`.
     * 
     */
    @Import(name="actionsEnabled")
    private @Nullable Output<Boolean> actionsEnabled;

    /**
     * @return Indicates whether actions should be executed during any changes to the alarm state of the composite alarm. Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> actionsEnabled() {
        return Optional.ofNullable(this.actionsEnabled);
    }

    /**
     * Actions will be suppressed if the suppressor alarm is in the ALARM state.
     * 
     */
    @Import(name="actionsSuppressor")
    private @Nullable Output<CompositeAlarmActionsSuppressorArgs> actionsSuppressor;

    /**
     * @return Actions will be suppressed if the suppressor alarm is in the ALARM state.
     * 
     */
    public Optional<Output<CompositeAlarmActionsSuppressorArgs>> actionsSuppressor() {
        return Optional.ofNullable(this.actionsSuppressor);
    }

    /**
     * The set of actions to execute when this alarm transitions to the `ALARM` state from any other state. Each action is specified as an ARN. Up to 5 actions are allowed.
     * 
     */
    @Import(name="alarmActions")
    private @Nullable Output<List<String>> alarmActions;

    /**
     * @return The set of actions to execute when this alarm transitions to the `ALARM` state from any other state. Each action is specified as an ARN. Up to 5 actions are allowed.
     * 
     */
    public Optional<Output<List<String>>> alarmActions() {
        return Optional.ofNullable(this.alarmActions);
    }

    /**
     * The description for the composite alarm.
     * 
     */
    @Import(name="alarmDescription")
    private @Nullable Output<String> alarmDescription;

    /**
     * @return The description for the composite alarm.
     * 
     */
    public Optional<Output<String>> alarmDescription() {
        return Optional.ofNullable(this.alarmDescription);
    }

    /**
     * The name for the composite alarm. This name must be unique within the region.
     * 
     */
    @Import(name="alarmName")
    private @Nullable Output<String> alarmName;

    /**
     * @return The name for the composite alarm. This name must be unique within the region.
     * 
     */
    public Optional<Output<String>> alarmName() {
        return Optional.ofNullable(this.alarmName);
    }

    /**
     * An expression that specifies which other alarms are to be evaluated to determine this composite alarm&#39;s state. For syntax, see [Creating a Composite Alarm](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Create_Composite_Alarm.html). The maximum length is 10240 characters.
     * 
     */
    @Import(name="alarmRule")
    private @Nullable Output<String> alarmRule;

    /**
     * @return An expression that specifies which other alarms are to be evaluated to determine this composite alarm&#39;s state. For syntax, see [Creating a Composite Alarm](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Create_Composite_Alarm.html). The maximum length is 10240 characters.
     * 
     */
    public Optional<Output<String>> alarmRule() {
        return Optional.ofNullable(this.alarmRule);
    }

    /**
     * The ARN of the composite alarm.
     * 
     */
    @Import(name="arn")
    private @Nullable Output<String> arn;

    /**
     * @return The ARN of the composite alarm.
     * 
     */
    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    /**
     * The set of actions to execute when this alarm transitions to the `INSUFFICIENT_DATA` state from any other state. Each action is specified as an ARN. Up to 5 actions are allowed.
     * 
     */
    @Import(name="insufficientDataActions")
    private @Nullable Output<List<String>> insufficientDataActions;

    /**
     * @return The set of actions to execute when this alarm transitions to the `INSUFFICIENT_DATA` state from any other state. Each action is specified as an ARN. Up to 5 actions are allowed.
     * 
     */
    public Optional<Output<List<String>>> insufficientDataActions() {
        return Optional.ofNullable(this.insufficientDataActions);
    }

    /**
     * The set of actions to execute when this alarm transitions to an `OK` state from any other state. Each action is specified as an ARN. Up to 5 actions are allowed.
     * 
     */
    @Import(name="okActions")
    private @Nullable Output<List<String>> okActions;

    /**
     * @return The set of actions to execute when this alarm transitions to an `OK` state from any other state. Each action is specified as an ARN. Up to 5 actions are allowed.
     * 
     */
    public Optional<Output<List<String>>> okActions() {
        return Optional.ofNullable(this.okActions);
    }

    /**
     * A map of tags to associate with the alarm. Up to 50 tags are allowed. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A map of tags to associate with the alarm. Up to 50 tags are allowed. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    /**
     * @return A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    private CompositeAlarmState() {}

    private CompositeAlarmState(CompositeAlarmState $) {
        this.actionsEnabled = $.actionsEnabled;
        this.actionsSuppressor = $.actionsSuppressor;
        this.alarmActions = $.alarmActions;
        this.alarmDescription = $.alarmDescription;
        this.alarmName = $.alarmName;
        this.alarmRule = $.alarmRule;
        this.arn = $.arn;
        this.insufficientDataActions = $.insufficientDataActions;
        this.okActions = $.okActions;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CompositeAlarmState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CompositeAlarmState $;

        public Builder() {
            $ = new CompositeAlarmState();
        }

        public Builder(CompositeAlarmState defaults) {
            $ = new CompositeAlarmState(Objects.requireNonNull(defaults));
        }

        /**
         * @param actionsEnabled Indicates whether actions should be executed during any changes to the alarm state of the composite alarm. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder actionsEnabled(@Nullable Output<Boolean> actionsEnabled) {
            $.actionsEnabled = actionsEnabled;
            return this;
        }

        /**
         * @param actionsEnabled Indicates whether actions should be executed during any changes to the alarm state of the composite alarm. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder actionsEnabled(Boolean actionsEnabled) {
            return actionsEnabled(Output.of(actionsEnabled));
        }

        /**
         * @param actionsSuppressor Actions will be suppressed if the suppressor alarm is in the ALARM state.
         * 
         * @return builder
         * 
         */
        public Builder actionsSuppressor(@Nullable Output<CompositeAlarmActionsSuppressorArgs> actionsSuppressor) {
            $.actionsSuppressor = actionsSuppressor;
            return this;
        }

        /**
         * @param actionsSuppressor Actions will be suppressed if the suppressor alarm is in the ALARM state.
         * 
         * @return builder
         * 
         */
        public Builder actionsSuppressor(CompositeAlarmActionsSuppressorArgs actionsSuppressor) {
            return actionsSuppressor(Output.of(actionsSuppressor));
        }

        /**
         * @param alarmActions The set of actions to execute when this alarm transitions to the `ALARM` state from any other state. Each action is specified as an ARN. Up to 5 actions are allowed.
         * 
         * @return builder
         * 
         */
        public Builder alarmActions(@Nullable Output<List<String>> alarmActions) {
            $.alarmActions = alarmActions;
            return this;
        }

        /**
         * @param alarmActions The set of actions to execute when this alarm transitions to the `ALARM` state from any other state. Each action is specified as an ARN. Up to 5 actions are allowed.
         * 
         * @return builder
         * 
         */
        public Builder alarmActions(List<String> alarmActions) {
            return alarmActions(Output.of(alarmActions));
        }

        /**
         * @param alarmActions The set of actions to execute when this alarm transitions to the `ALARM` state from any other state. Each action is specified as an ARN. Up to 5 actions are allowed.
         * 
         * @return builder
         * 
         */
        public Builder alarmActions(String... alarmActions) {
            return alarmActions(List.of(alarmActions));
        }

        /**
         * @param alarmDescription The description for the composite alarm.
         * 
         * @return builder
         * 
         */
        public Builder alarmDescription(@Nullable Output<String> alarmDescription) {
            $.alarmDescription = alarmDescription;
            return this;
        }

        /**
         * @param alarmDescription The description for the composite alarm.
         * 
         * @return builder
         * 
         */
        public Builder alarmDescription(String alarmDescription) {
            return alarmDescription(Output.of(alarmDescription));
        }

        /**
         * @param alarmName The name for the composite alarm. This name must be unique within the region.
         * 
         * @return builder
         * 
         */
        public Builder alarmName(@Nullable Output<String> alarmName) {
            $.alarmName = alarmName;
            return this;
        }

        /**
         * @param alarmName The name for the composite alarm. This name must be unique within the region.
         * 
         * @return builder
         * 
         */
        public Builder alarmName(String alarmName) {
            return alarmName(Output.of(alarmName));
        }

        /**
         * @param alarmRule An expression that specifies which other alarms are to be evaluated to determine this composite alarm&#39;s state. For syntax, see [Creating a Composite Alarm](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Create_Composite_Alarm.html). The maximum length is 10240 characters.
         * 
         * @return builder
         * 
         */
        public Builder alarmRule(@Nullable Output<String> alarmRule) {
            $.alarmRule = alarmRule;
            return this;
        }

        /**
         * @param alarmRule An expression that specifies which other alarms are to be evaluated to determine this composite alarm&#39;s state. For syntax, see [Creating a Composite Alarm](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Create_Composite_Alarm.html). The maximum length is 10240 characters.
         * 
         * @return builder
         * 
         */
        public Builder alarmRule(String alarmRule) {
            return alarmRule(Output.of(alarmRule));
        }

        /**
         * @param arn The ARN of the composite alarm.
         * 
         * @return builder
         * 
         */
        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        /**
         * @param arn The ARN of the composite alarm.
         * 
         * @return builder
         * 
         */
        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        /**
         * @param insufficientDataActions The set of actions to execute when this alarm transitions to the `INSUFFICIENT_DATA` state from any other state. Each action is specified as an ARN. Up to 5 actions are allowed.
         * 
         * @return builder
         * 
         */
        public Builder insufficientDataActions(@Nullable Output<List<String>> insufficientDataActions) {
            $.insufficientDataActions = insufficientDataActions;
            return this;
        }

        /**
         * @param insufficientDataActions The set of actions to execute when this alarm transitions to the `INSUFFICIENT_DATA` state from any other state. Each action is specified as an ARN. Up to 5 actions are allowed.
         * 
         * @return builder
         * 
         */
        public Builder insufficientDataActions(List<String> insufficientDataActions) {
            return insufficientDataActions(Output.of(insufficientDataActions));
        }

        /**
         * @param insufficientDataActions The set of actions to execute when this alarm transitions to the `INSUFFICIENT_DATA` state from any other state. Each action is specified as an ARN. Up to 5 actions are allowed.
         * 
         * @return builder
         * 
         */
        public Builder insufficientDataActions(String... insufficientDataActions) {
            return insufficientDataActions(List.of(insufficientDataActions));
        }

        /**
         * @param okActions The set of actions to execute when this alarm transitions to an `OK` state from any other state. Each action is specified as an ARN. Up to 5 actions are allowed.
         * 
         * @return builder
         * 
         */
        public Builder okActions(@Nullable Output<List<String>> okActions) {
            $.okActions = okActions;
            return this;
        }

        /**
         * @param okActions The set of actions to execute when this alarm transitions to an `OK` state from any other state. Each action is specified as an ARN. Up to 5 actions are allowed.
         * 
         * @return builder
         * 
         */
        public Builder okActions(List<String> okActions) {
            return okActions(Output.of(okActions));
        }

        /**
         * @param okActions The set of actions to execute when this alarm transitions to an `OK` state from any other state. Each action is specified as an ARN. Up to 5 actions are allowed.
         * 
         * @return builder
         * 
         */
        public Builder okActions(String... okActions) {
            return okActions(List.of(okActions));
        }

        /**
         * @param tags A map of tags to associate with the alarm. Up to 50 tags are allowed. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A map of tags to associate with the alarm. Up to 50 tags are allowed. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tagsAll A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
         * 
         * @return builder
         * 
         * @deprecated
         * Please use `tags` instead.
         * 
         */
        @Deprecated /* Please use `tags` instead. */
        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        /**
         * @param tagsAll A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
         * 
         * @return builder
         * 
         * @deprecated
         * Please use `tags` instead.
         * 
         */
        @Deprecated /* Please use `tags` instead. */
        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        public CompositeAlarmState build() {
            return $;
        }
    }

}
