// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.inspector;

import com.pulumi.aws.inspector.inputs.AssessmentTemplateEventSubscriptionArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AssessmentTemplateArgs extends com.pulumi.resources.ResourceArgs {

    public static final AssessmentTemplateArgs Empty = new AssessmentTemplateArgs();

    /**
     * The duration of the inspector run.
     * 
     */
    @Import(name="duration", required=true)
    private Output<Integer> duration;

    /**
     * @return The duration of the inspector run.
     * 
     */
    public Output<Integer> duration() {
        return this.duration;
    }

    /**
     * A block that enables sending notifications about a specified assessment template event to a designated SNS topic. See Event Subscriptions for details.
     * 
     */
    @Import(name="eventSubscriptions")
    private @Nullable Output<List<AssessmentTemplateEventSubscriptionArgs>> eventSubscriptions;

    /**
     * @return A block that enables sending notifications about a specified assessment template event to a designated SNS topic. See Event Subscriptions for details.
     * 
     */
    public Optional<Output<List<AssessmentTemplateEventSubscriptionArgs>>> eventSubscriptions() {
        return Optional.ofNullable(this.eventSubscriptions);
    }

    /**
     * The name of the assessment template.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the assessment template.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The rules to be used during the run.
     * 
     */
    @Import(name="rulesPackageArns", required=true)
    private Output<List<String>> rulesPackageArns;

    /**
     * @return The rules to be used during the run.
     * 
     */
    public Output<List<String>> rulesPackageArns() {
        return this.rulesPackageArns;
    }

    /**
     * Key-value map of tags for the Inspector assessment template. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Key-value map of tags for the Inspector assessment template. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     */
    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    /**
     * @return A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     */
    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    /**
     * The assessment target ARN to attach the template to.
     * 
     */
    @Import(name="targetArn", required=true)
    private Output<String> targetArn;

    /**
     * @return The assessment target ARN to attach the template to.
     * 
     */
    public Output<String> targetArn() {
        return this.targetArn;
    }

    private AssessmentTemplateArgs() {}

    private AssessmentTemplateArgs(AssessmentTemplateArgs $) {
        this.duration = $.duration;
        this.eventSubscriptions = $.eventSubscriptions;
        this.name = $.name;
        this.rulesPackageArns = $.rulesPackageArns;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
        this.targetArn = $.targetArn;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AssessmentTemplateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AssessmentTemplateArgs $;

        public Builder() {
            $ = new AssessmentTemplateArgs();
        }

        public Builder(AssessmentTemplateArgs defaults) {
            $ = new AssessmentTemplateArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param duration The duration of the inspector run.
         * 
         * @return builder
         * 
         */
        public Builder duration(Output<Integer> duration) {
            $.duration = duration;
            return this;
        }

        /**
         * @param duration The duration of the inspector run.
         * 
         * @return builder
         * 
         */
        public Builder duration(Integer duration) {
            return duration(Output.of(duration));
        }

        /**
         * @param eventSubscriptions A block that enables sending notifications about a specified assessment template event to a designated SNS topic. See Event Subscriptions for details.
         * 
         * @return builder
         * 
         */
        public Builder eventSubscriptions(@Nullable Output<List<AssessmentTemplateEventSubscriptionArgs>> eventSubscriptions) {
            $.eventSubscriptions = eventSubscriptions;
            return this;
        }

        /**
         * @param eventSubscriptions A block that enables sending notifications about a specified assessment template event to a designated SNS topic. See Event Subscriptions for details.
         * 
         * @return builder
         * 
         */
        public Builder eventSubscriptions(List<AssessmentTemplateEventSubscriptionArgs> eventSubscriptions) {
            return eventSubscriptions(Output.of(eventSubscriptions));
        }

        /**
         * @param eventSubscriptions A block that enables sending notifications about a specified assessment template event to a designated SNS topic. See Event Subscriptions for details.
         * 
         * @return builder
         * 
         */
        public Builder eventSubscriptions(AssessmentTemplateEventSubscriptionArgs... eventSubscriptions) {
            return eventSubscriptions(List.of(eventSubscriptions));
        }

        /**
         * @param name The name of the assessment template.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the assessment template.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param rulesPackageArns The rules to be used during the run.
         * 
         * @return builder
         * 
         */
        public Builder rulesPackageArns(Output<List<String>> rulesPackageArns) {
            $.rulesPackageArns = rulesPackageArns;
            return this;
        }

        /**
         * @param rulesPackageArns The rules to be used during the run.
         * 
         * @return builder
         * 
         */
        public Builder rulesPackageArns(List<String> rulesPackageArns) {
            return rulesPackageArns(Output.of(rulesPackageArns));
        }

        /**
         * @param rulesPackageArns The rules to be used during the run.
         * 
         * @return builder
         * 
         */
        public Builder rulesPackageArns(String... rulesPackageArns) {
            return rulesPackageArns(List.of(rulesPackageArns));
        }

        /**
         * @param tags Key-value map of tags for the Inspector assessment template. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Key-value map of tags for the Inspector assessment template. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tagsAll A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
         * 
         * @return builder
         * 
         */
        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        /**
         * @param tagsAll A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
         * 
         * @return builder
         * 
         */
        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        /**
         * @param targetArn The assessment target ARN to attach the template to.
         * 
         * @return builder
         * 
         */
        public Builder targetArn(Output<String> targetArn) {
            $.targetArn = targetArn;
            return this;
        }

        /**
         * @param targetArn The assessment target ARN to attach the template to.
         * 
         * @return builder
         * 
         */
        public Builder targetArn(String targetArn) {
            return targetArn(Output.of(targetArn));
        }

        public AssessmentTemplateArgs build() {
            $.duration = Objects.requireNonNull($.duration, "expected parameter 'duration' to be non-null");
            $.rulesPackageArns = Objects.requireNonNull($.rulesPackageArns, "expected parameter 'rulesPackageArns' to be non-null");
            $.targetArn = Objects.requireNonNull($.targetArn, "expected parameter 'targetArn' to be non-null");
            return $;
        }
    }

}
