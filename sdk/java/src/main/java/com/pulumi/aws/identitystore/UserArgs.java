// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.identitystore;

import com.pulumi.aws.identitystore.inputs.UserAddressesArgs;
import com.pulumi.aws.identitystore.inputs.UserEmailsArgs;
import com.pulumi.aws.identitystore.inputs.UserNameArgs;
import com.pulumi.aws.identitystore.inputs.UserPhoneNumbersArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UserArgs extends com.pulumi.resources.ResourceArgs {

    public static final UserArgs Empty = new UserArgs();

    @Import(name="addresses")
    private @Nullable Output<UserAddressesArgs> addresses;

    public Optional<Output<UserAddressesArgs>> addresses() {
        return Optional.ofNullable(this.addresses);
    }

    @Import(name="displayName", required=true)
    private Output<String> displayName;

    public Output<String> displayName() {
        return this.displayName;
    }

    @Import(name="emails")
    private @Nullable Output<UserEmailsArgs> emails;

    public Optional<Output<UserEmailsArgs>> emails() {
        return Optional.ofNullable(this.emails);
    }

    @Import(name="identityStoreId", required=true)
    private Output<String> identityStoreId;

    public Output<String> identityStoreId() {
        return this.identityStoreId;
    }

    @Import(name="locale")
    private @Nullable Output<String> locale;

    public Optional<Output<String>> locale() {
        return Optional.ofNullable(this.locale);
    }

    @Import(name="name")
    private @Nullable Output<UserNameArgs> name;

    public Optional<Output<UserNameArgs>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="nickname")
    private @Nullable Output<String> nickname;

    public Optional<Output<String>> nickname() {
        return Optional.ofNullable(this.nickname);
    }

    @Import(name="phoneNumbers")
    private @Nullable Output<UserPhoneNumbersArgs> phoneNumbers;

    public Optional<Output<UserPhoneNumbersArgs>> phoneNumbers() {
        return Optional.ofNullable(this.phoneNumbers);
    }

    @Import(name="preferredLanguage")
    private @Nullable Output<String> preferredLanguage;

    public Optional<Output<String>> preferredLanguage() {
        return Optional.ofNullable(this.preferredLanguage);
    }

    @Import(name="profileUrl")
    private @Nullable Output<String> profileUrl;

    public Optional<Output<String>> profileUrl() {
        return Optional.ofNullable(this.profileUrl);
    }

    @Import(name="timezone")
    private @Nullable Output<String> timezone;

    public Optional<Output<String>> timezone() {
        return Optional.ofNullable(this.timezone);
    }

    @Import(name="title")
    private @Nullable Output<String> title;

    public Optional<Output<String>> title() {
        return Optional.ofNullable(this.title);
    }

    @Import(name="userName", required=true)
    private Output<String> userName;

    public Output<String> userName() {
        return this.userName;
    }

    @Import(name="userType")
    private @Nullable Output<String> userType;

    public Optional<Output<String>> userType() {
        return Optional.ofNullable(this.userType);
    }

    private UserArgs() {}

    private UserArgs(UserArgs $) {
        this.addresses = $.addresses;
        this.displayName = $.displayName;
        this.emails = $.emails;
        this.identityStoreId = $.identityStoreId;
        this.locale = $.locale;
        this.name = $.name;
        this.nickname = $.nickname;
        this.phoneNumbers = $.phoneNumbers;
        this.preferredLanguage = $.preferredLanguage;
        this.profileUrl = $.profileUrl;
        this.timezone = $.timezone;
        this.title = $.title;
        this.userName = $.userName;
        this.userType = $.userType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UserArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UserArgs $;

        public Builder() {
            $ = new UserArgs();
        }

        public Builder(UserArgs defaults) {
            $ = new UserArgs(Objects.requireNonNull(defaults));
        }

        public Builder addresses(@Nullable Output<UserAddressesArgs> addresses) {
            $.addresses = addresses;
            return this;
        }

        public Builder addresses(UserAddressesArgs addresses) {
            return addresses(Output.of(addresses));
        }

        public Builder displayName(Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        public Builder emails(@Nullable Output<UserEmailsArgs> emails) {
            $.emails = emails;
            return this;
        }

        public Builder emails(UserEmailsArgs emails) {
            return emails(Output.of(emails));
        }

        public Builder identityStoreId(Output<String> identityStoreId) {
            $.identityStoreId = identityStoreId;
            return this;
        }

        public Builder identityStoreId(String identityStoreId) {
            return identityStoreId(Output.of(identityStoreId));
        }

        public Builder locale(@Nullable Output<String> locale) {
            $.locale = locale;
            return this;
        }

        public Builder locale(String locale) {
            return locale(Output.of(locale));
        }

        public Builder name(@Nullable Output<UserNameArgs> name) {
            $.name = name;
            return this;
        }

        public Builder name(UserNameArgs name) {
            return name(Output.of(name));
        }

        public Builder nickname(@Nullable Output<String> nickname) {
            $.nickname = nickname;
            return this;
        }

        public Builder nickname(String nickname) {
            return nickname(Output.of(nickname));
        }

        public Builder phoneNumbers(@Nullable Output<UserPhoneNumbersArgs> phoneNumbers) {
            $.phoneNumbers = phoneNumbers;
            return this;
        }

        public Builder phoneNumbers(UserPhoneNumbersArgs phoneNumbers) {
            return phoneNumbers(Output.of(phoneNumbers));
        }

        public Builder preferredLanguage(@Nullable Output<String> preferredLanguage) {
            $.preferredLanguage = preferredLanguage;
            return this;
        }

        public Builder preferredLanguage(String preferredLanguage) {
            return preferredLanguage(Output.of(preferredLanguage));
        }

        public Builder profileUrl(@Nullable Output<String> profileUrl) {
            $.profileUrl = profileUrl;
            return this;
        }

        public Builder profileUrl(String profileUrl) {
            return profileUrl(Output.of(profileUrl));
        }

        public Builder timezone(@Nullable Output<String> timezone) {
            $.timezone = timezone;
            return this;
        }

        public Builder timezone(String timezone) {
            return timezone(Output.of(timezone));
        }

        public Builder title(@Nullable Output<String> title) {
            $.title = title;
            return this;
        }

        public Builder title(String title) {
            return title(Output.of(title));
        }

        public Builder userName(Output<String> userName) {
            $.userName = userName;
            return this;
        }

        public Builder userName(String userName) {
            return userName(Output.of(userName));
        }

        public Builder userType(@Nullable Output<String> userType) {
            $.userType = userType;
            return this;
        }

        public Builder userType(String userType) {
            return userType(Output.of(userType));
        }

        public UserArgs build() {
            $.displayName = Objects.requireNonNull($.displayName, "expected parameter 'displayName' to be non-null");
            $.identityStoreId = Objects.requireNonNull($.identityStoreId, "expected parameter 'identityStoreId' to be non-null");
            $.userName = Objects.requireNonNull($.userName, "expected parameter 'userName' to be non-null");
            return $;
        }
    }

}
