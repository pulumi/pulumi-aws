// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.lb.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class GetListenerRuleActionRedirect extends com.pulumi.resources.InvokeArgs {

    public static final GetListenerRuleActionRedirect Empty = new GetListenerRuleActionRedirect();

    /**
     * The hostname.
     * 
     */
    @Import(name="host", required=true)
    private String host;

    /**
     * @return The hostname.
     * 
     */
    public String host() {
        return this.host;
    }

    /**
     * The absolute path, starting with `/`.
     * 
     */
    @Import(name="path", required=true)
    private String path;

    /**
     * @return The absolute path, starting with `/`.
     * 
     */
    public String path() {
        return this.path;
    }

    /**
     * The port.
     * 
     */
    @Import(name="port", required=true)
    private String port;

    /**
     * @return The port.
     * 
     */
    public String port() {
        return this.port;
    }

    /**
     * The protocol.
     * 
     */
    @Import(name="protocol", required=true)
    private String protocol;

    /**
     * @return The protocol.
     * 
     */
    public String protocol() {
        return this.protocol;
    }

    /**
     * The query parameters.
     * 
     */
    @Import(name="query", required=true)
    private String query;

    /**
     * @return The query parameters.
     * 
     */
    public String query() {
        return this.query;
    }

    /**
     * The HTTP redirect code.
     * 
     */
    @Import(name="statusCode", required=true)
    private String statusCode;

    /**
     * @return The HTTP redirect code.
     * 
     */
    public String statusCode() {
        return this.statusCode;
    }

    private GetListenerRuleActionRedirect() {}

    private GetListenerRuleActionRedirect(GetListenerRuleActionRedirect $) {
        this.host = $.host;
        this.path = $.path;
        this.port = $.port;
        this.protocol = $.protocol;
        this.query = $.query;
        this.statusCode = $.statusCode;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetListenerRuleActionRedirect defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetListenerRuleActionRedirect $;

        public Builder() {
            $ = new GetListenerRuleActionRedirect();
        }

        public Builder(GetListenerRuleActionRedirect defaults) {
            $ = new GetListenerRuleActionRedirect(Objects.requireNonNull(defaults));
        }

        /**
         * @param host The hostname.
         * 
         * @return builder
         * 
         */
        public Builder host(String host) {
            $.host = host;
            return this;
        }

        /**
         * @param path The absolute path, starting with `/`.
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            $.path = path;
            return this;
        }

        /**
         * @param port The port.
         * 
         * @return builder
         * 
         */
        public Builder port(String port) {
            $.port = port;
            return this;
        }

        /**
         * @param protocol The protocol.
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param query The query parameters.
         * 
         * @return builder
         * 
         */
        public Builder query(String query) {
            $.query = query;
            return this;
        }

        /**
         * @param statusCode The HTTP redirect code.
         * 
         * @return builder
         * 
         */
        public Builder statusCode(String statusCode) {
            $.statusCode = statusCode;
            return this;
        }

        public GetListenerRuleActionRedirect build() {
            if ($.host == null) {
                throw new MissingRequiredPropertyException("GetListenerRuleActionRedirect", "host");
            }
            if ($.path == null) {
                throw new MissingRequiredPropertyException("GetListenerRuleActionRedirect", "path");
            }
            if ($.port == null) {
                throw new MissingRequiredPropertyException("GetListenerRuleActionRedirect", "port");
            }
            if ($.protocol == null) {
                throw new MissingRequiredPropertyException("GetListenerRuleActionRedirect", "protocol");
            }
            if ($.query == null) {
                throw new MissingRequiredPropertyException("GetListenerRuleActionRedirect", "query");
            }
            if ($.statusCode == null) {
                throw new MissingRequiredPropertyException("GetListenerRuleActionRedirect", "statusCode");
            }
            return $;
        }
    }

}
