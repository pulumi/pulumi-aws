// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.fis.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ExperimentTemplateExperimentOptionsArgs extends com.pulumi.resources.ResourceArgs {

    public static final ExperimentTemplateExperimentOptionsArgs Empty = new ExperimentTemplateExperimentOptionsArgs();

    /**
     * Specifies the account targeting setting for experiment options. Supports `single-account` and `multi-account`.
     * 
     */
    @Import(name="accountTargeting")
    private @Nullable Output<String> accountTargeting;

    /**
     * @return Specifies the account targeting setting for experiment options. Supports `single-account` and `multi-account`.
     * 
     */
    public Optional<Output<String>> accountTargeting() {
        return Optional.ofNullable(this.accountTargeting);
    }

    /**
     * Specifies the empty target resolution mode for experiment options. Supports `fail` and `skip`.
     * 
     */
    @Import(name="emptyTargetResolutionMode")
    private @Nullable Output<String> emptyTargetResolutionMode;

    /**
     * @return Specifies the empty target resolution mode for experiment options. Supports `fail` and `skip`.
     * 
     */
    public Optional<Output<String>> emptyTargetResolutionMode() {
        return Optional.ofNullable(this.emptyTargetResolutionMode);
    }

    private ExperimentTemplateExperimentOptionsArgs() {}

    private ExperimentTemplateExperimentOptionsArgs(ExperimentTemplateExperimentOptionsArgs $) {
        this.accountTargeting = $.accountTargeting;
        this.emptyTargetResolutionMode = $.emptyTargetResolutionMode;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ExperimentTemplateExperimentOptionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ExperimentTemplateExperimentOptionsArgs $;

        public Builder() {
            $ = new ExperimentTemplateExperimentOptionsArgs();
        }

        public Builder(ExperimentTemplateExperimentOptionsArgs defaults) {
            $ = new ExperimentTemplateExperimentOptionsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountTargeting Specifies the account targeting setting for experiment options. Supports `single-account` and `multi-account`.
         * 
         * @return builder
         * 
         */
        public Builder accountTargeting(@Nullable Output<String> accountTargeting) {
            $.accountTargeting = accountTargeting;
            return this;
        }

        /**
         * @param accountTargeting Specifies the account targeting setting for experiment options. Supports `single-account` and `multi-account`.
         * 
         * @return builder
         * 
         */
        public Builder accountTargeting(String accountTargeting) {
            return accountTargeting(Output.of(accountTargeting));
        }

        /**
         * @param emptyTargetResolutionMode Specifies the empty target resolution mode for experiment options. Supports `fail` and `skip`.
         * 
         * @return builder
         * 
         */
        public Builder emptyTargetResolutionMode(@Nullable Output<String> emptyTargetResolutionMode) {
            $.emptyTargetResolutionMode = emptyTargetResolutionMode;
            return this;
        }

        /**
         * @param emptyTargetResolutionMode Specifies the empty target resolution mode for experiment options. Supports `fail` and `skip`.
         * 
         * @return builder
         * 
         */
        public Builder emptyTargetResolutionMode(String emptyTargetResolutionMode) {
            return emptyTargetResolutionMode(Output.of(emptyTargetResolutionMode));
        }

        public ExperimentTemplateExperimentOptionsArgs build() {
            return $;
        }
    }

}
