// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.glue;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SchemaArgs extends com.pulumi.resources.ResourceArgs {

    public static final SchemaArgs Empty = new SchemaArgs();

    @Import(name="compatibility", required=true)
    private Output<String> compatibility;

    public Output<String> compatibility() {
        return this.compatibility;
    }

    @Import(name="dataFormat", required=true)
    private Output<String> dataFormat;

    public Output<String> dataFormat() {
        return this.dataFormat;
    }

    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="registryArn")
    private @Nullable Output<String> registryArn;

    public Optional<Output<String>> registryArn() {
        return Optional.ofNullable(this.registryArn);
    }

    @Import(name="schemaDefinition", required=true)
    private Output<String> schemaDefinition;

    public Output<String> schemaDefinition() {
        return this.schemaDefinition;
    }

    @Import(name="schemaName", required=true)
    private Output<String> schemaName;

    public Output<String> schemaName() {
        return this.schemaName;
    }

    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private SchemaArgs() {}

    private SchemaArgs(SchemaArgs $) {
        this.compatibility = $.compatibility;
        this.dataFormat = $.dataFormat;
        this.description = $.description;
        this.registryArn = $.registryArn;
        this.schemaDefinition = $.schemaDefinition;
        this.schemaName = $.schemaName;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SchemaArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SchemaArgs $;

        public Builder() {
            $ = new SchemaArgs();
        }

        public Builder(SchemaArgs defaults) {
            $ = new SchemaArgs(Objects.requireNonNull(defaults));
        }

        public Builder compatibility(Output<String> compatibility) {
            $.compatibility = compatibility;
            return this;
        }

        public Builder compatibility(String compatibility) {
            return compatibility(Output.of(compatibility));
        }

        public Builder dataFormat(Output<String> dataFormat) {
            $.dataFormat = dataFormat;
            return this;
        }

        public Builder dataFormat(String dataFormat) {
            return dataFormat(Output.of(dataFormat));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder registryArn(@Nullable Output<String> registryArn) {
            $.registryArn = registryArn;
            return this;
        }

        public Builder registryArn(String registryArn) {
            return registryArn(Output.of(registryArn));
        }

        public Builder schemaDefinition(Output<String> schemaDefinition) {
            $.schemaDefinition = schemaDefinition;
            return this;
        }

        public Builder schemaDefinition(String schemaDefinition) {
            return schemaDefinition(Output.of(schemaDefinition));
        }

        public Builder schemaName(Output<String> schemaName) {
            $.schemaName = schemaName;
            return this;
        }

        public Builder schemaName(String schemaName) {
            return schemaName(Output.of(schemaName));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public SchemaArgs build() {
            $.compatibility = Objects.requireNonNull($.compatibility, "expected parameter 'compatibility' to be non-null");
            $.dataFormat = Objects.requireNonNull($.dataFormat, "expected parameter 'dataFormat' to be non-null");
            $.schemaDefinition = Objects.requireNonNull($.schemaDefinition, "expected parameter 'schemaDefinition' to be non-null");
            $.schemaName = Objects.requireNonNull($.schemaName, "expected parameter 'schemaName' to be non-null");
            return $;
        }
    }

}
