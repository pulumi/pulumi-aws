// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.inputs;

import com.pulumi.aws.quicksight.inputs.DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesArgs;
import com.pulumi.aws.quicksight.inputs.DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DataSetLogicalTableMapSourceJoinInstructionArgs extends com.pulumi.resources.ResourceArgs {

    public static final DataSetLogicalTableMapSourceJoinInstructionArgs Empty = new DataSetLogicalTableMapSourceJoinInstructionArgs();

    /**
     * Join key properties of the left operand. See left_join_key_properties.
     * 
     */
    @Import(name="leftJoinKeyProperties")
    private @Nullable Output<DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesArgs> leftJoinKeyProperties;

    /**
     * @return Join key properties of the left operand. See left_join_key_properties.
     * 
     */
    public Optional<Output<DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesArgs>> leftJoinKeyProperties() {
        return Optional.ofNullable(this.leftJoinKeyProperties);
    }

    /**
     * Operand on the left side of a join.
     * 
     */
    @Import(name="leftOperand", required=true)
    private Output<String> leftOperand;

    /**
     * @return Operand on the left side of a join.
     * 
     */
    public Output<String> leftOperand() {
        return this.leftOperand;
    }

    /**
     * Join instructions provided in the ON clause of a join.
     * 
     */
    @Import(name="onClause", required=true)
    private Output<String> onClause;

    /**
     * @return Join instructions provided in the ON clause of a join.
     * 
     */
    public Output<String> onClause() {
        return this.onClause;
    }

    /**
     * Join key properties of the right operand. See right_join_key_properties.
     * 
     */
    @Import(name="rightJoinKeyProperties")
    private @Nullable Output<DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesArgs> rightJoinKeyProperties;

    /**
     * @return Join key properties of the right operand. See right_join_key_properties.
     * 
     */
    public Optional<Output<DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesArgs>> rightJoinKeyProperties() {
        return Optional.ofNullable(this.rightJoinKeyProperties);
    }

    /**
     * Operand on the right side of a join.
     * 
     */
    @Import(name="rightOperand", required=true)
    private Output<String> rightOperand;

    /**
     * @return Operand on the right side of a join.
     * 
     */
    public Output<String> rightOperand() {
        return this.rightOperand;
    }

    /**
     * Type of join. Valid values are `INNER`, `OUTER`, `LEFT`, and `RIGHT`.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Type of join. Valid values are `INNER`, `OUTER`, `LEFT`, and `RIGHT`.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private DataSetLogicalTableMapSourceJoinInstructionArgs() {}

    private DataSetLogicalTableMapSourceJoinInstructionArgs(DataSetLogicalTableMapSourceJoinInstructionArgs $) {
        this.leftJoinKeyProperties = $.leftJoinKeyProperties;
        this.leftOperand = $.leftOperand;
        this.onClause = $.onClause;
        this.rightJoinKeyProperties = $.rightJoinKeyProperties;
        this.rightOperand = $.rightOperand;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DataSetLogicalTableMapSourceJoinInstructionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DataSetLogicalTableMapSourceJoinInstructionArgs $;

        public Builder() {
            $ = new DataSetLogicalTableMapSourceJoinInstructionArgs();
        }

        public Builder(DataSetLogicalTableMapSourceJoinInstructionArgs defaults) {
            $ = new DataSetLogicalTableMapSourceJoinInstructionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param leftJoinKeyProperties Join key properties of the left operand. See left_join_key_properties.
         * 
         * @return builder
         * 
         */
        public Builder leftJoinKeyProperties(@Nullable Output<DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesArgs> leftJoinKeyProperties) {
            $.leftJoinKeyProperties = leftJoinKeyProperties;
            return this;
        }

        /**
         * @param leftJoinKeyProperties Join key properties of the left operand. See left_join_key_properties.
         * 
         * @return builder
         * 
         */
        public Builder leftJoinKeyProperties(DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesArgs leftJoinKeyProperties) {
            return leftJoinKeyProperties(Output.of(leftJoinKeyProperties));
        }

        /**
         * @param leftOperand Operand on the left side of a join.
         * 
         * @return builder
         * 
         */
        public Builder leftOperand(Output<String> leftOperand) {
            $.leftOperand = leftOperand;
            return this;
        }

        /**
         * @param leftOperand Operand on the left side of a join.
         * 
         * @return builder
         * 
         */
        public Builder leftOperand(String leftOperand) {
            return leftOperand(Output.of(leftOperand));
        }

        /**
         * @param onClause Join instructions provided in the ON clause of a join.
         * 
         * @return builder
         * 
         */
        public Builder onClause(Output<String> onClause) {
            $.onClause = onClause;
            return this;
        }

        /**
         * @param onClause Join instructions provided in the ON clause of a join.
         * 
         * @return builder
         * 
         */
        public Builder onClause(String onClause) {
            return onClause(Output.of(onClause));
        }

        /**
         * @param rightJoinKeyProperties Join key properties of the right operand. See right_join_key_properties.
         * 
         * @return builder
         * 
         */
        public Builder rightJoinKeyProperties(@Nullable Output<DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesArgs> rightJoinKeyProperties) {
            $.rightJoinKeyProperties = rightJoinKeyProperties;
            return this;
        }

        /**
         * @param rightJoinKeyProperties Join key properties of the right operand. See right_join_key_properties.
         * 
         * @return builder
         * 
         */
        public Builder rightJoinKeyProperties(DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesArgs rightJoinKeyProperties) {
            return rightJoinKeyProperties(Output.of(rightJoinKeyProperties));
        }

        /**
         * @param rightOperand Operand on the right side of a join.
         * 
         * @return builder
         * 
         */
        public Builder rightOperand(Output<String> rightOperand) {
            $.rightOperand = rightOperand;
            return this;
        }

        /**
         * @param rightOperand Operand on the right side of a join.
         * 
         * @return builder
         * 
         */
        public Builder rightOperand(String rightOperand) {
            return rightOperand(Output.of(rightOperand));
        }

        /**
         * @param type Type of join. Valid values are `INNER`, `OUTER`, `LEFT`, and `RIGHT`.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of join. Valid values are `INNER`, `OUTER`, `LEFT`, and `RIGHT`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public DataSetLogicalTableMapSourceJoinInstructionArgs build() {
            $.leftOperand = Objects.requireNonNull($.leftOperand, "expected parameter 'leftOperand' to be non-null");
            $.onClause = Objects.requireNonNull($.onClause, "expected parameter 'onClause' to be non-null");
            $.rightOperand = Objects.requireNonNull($.rightOperand, "expected parameter 'rightOperand' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
