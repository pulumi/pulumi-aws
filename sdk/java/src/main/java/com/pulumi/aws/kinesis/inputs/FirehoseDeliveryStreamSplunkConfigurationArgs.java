// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.kinesis.inputs;

import com.pulumi.aws.kinesis.inputs.FirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptionsArgs;
import com.pulumi.aws.kinesis.inputs.FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationArgs;
import com.pulumi.aws.kinesis.inputs.FirehoseDeliveryStreamSplunkConfigurationS3ConfigurationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FirehoseDeliveryStreamSplunkConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final FirehoseDeliveryStreamSplunkConfigurationArgs Empty = new FirehoseDeliveryStreamSplunkConfigurationArgs();

    /**
     * The CloudWatch Logging Options for the delivery stream. More details are given below.
     * 
     */
    @Import(name="cloudwatchLoggingOptions")
    private @Nullable Output<FirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptionsArgs> cloudwatchLoggingOptions;

    /**
     * @return The CloudWatch Logging Options for the delivery stream. More details are given below.
     * 
     */
    public Optional<Output<FirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptionsArgs>> cloudwatchLoggingOptions() {
        return Optional.ofNullable(this.cloudwatchLoggingOptions);
    }

    /**
     * The amount of time, in seconds between 180 and 600, that Kinesis Firehose waits to receive an acknowledgment from Splunk after it sends it data.
     * 
     */
    @Import(name="hecAcknowledgmentTimeout")
    private @Nullable Output<Integer> hecAcknowledgmentTimeout;

    /**
     * @return The amount of time, in seconds between 180 and 600, that Kinesis Firehose waits to receive an acknowledgment from Splunk after it sends it data.
     * 
     */
    public Optional<Output<Integer>> hecAcknowledgmentTimeout() {
        return Optional.ofNullable(this.hecAcknowledgmentTimeout);
    }

    /**
     * The HTTP Event Collector (HEC) endpoint to which Kinesis Firehose sends your data.
     * 
     */
    @Import(name="hecEndpoint", required=true)
    private Output<String> hecEndpoint;

    /**
     * @return The HTTP Event Collector (HEC) endpoint to which Kinesis Firehose sends your data.
     * 
     */
    public Output<String> hecEndpoint() {
        return this.hecEndpoint;
    }

    /**
     * The HEC endpoint type. Valid values are `Raw` or `Event`. The default value is `Raw`.
     * 
     */
    @Import(name="hecEndpointType")
    private @Nullable Output<String> hecEndpointType;

    /**
     * @return The HEC endpoint type. Valid values are `Raw` or `Event`. The default value is `Raw`.
     * 
     */
    public Optional<Output<String>> hecEndpointType() {
        return Optional.ofNullable(this.hecEndpointType);
    }

    /**
     * The GUID that you obtain from your Splunk cluster when you create a new HEC endpoint.
     * 
     */
    @Import(name="hecToken", required=true)
    private Output<String> hecToken;

    /**
     * @return The GUID that you obtain from your Splunk cluster when you create a new HEC endpoint.
     * 
     */
    public Output<String> hecToken() {
        return this.hecToken;
    }

    /**
     * The data processing configuration.  More details are given below.
     * 
     */
    @Import(name="processingConfiguration")
    private @Nullable Output<FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationArgs> processingConfiguration;

    /**
     * @return The data processing configuration.  More details are given below.
     * 
     */
    public Optional<Output<FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationArgs>> processingConfiguration() {
        return Optional.ofNullable(this.processingConfiguration);
    }

    /**
     * After an initial failure to deliver to Splunk, the total amount of time, in seconds between 0 to 7200, during which Firehose re-attempts delivery (including the first attempt).  After this time has elapsed, the failed documents are written to Amazon S3.  The default value is 300s.  There will be no retry if the value is 0.
     * 
     */
    @Import(name="retryDuration")
    private @Nullable Output<Integer> retryDuration;

    /**
     * @return After an initial failure to deliver to Splunk, the total amount of time, in seconds between 0 to 7200, during which Firehose re-attempts delivery (including the first attempt).  After this time has elapsed, the failed documents are written to Amazon S3.  The default value is 300s.  There will be no retry if the value is 0.
     * 
     */
    public Optional<Output<Integer>> retryDuration() {
        return Optional.ofNullable(this.retryDuration);
    }

    /**
     * Defines how documents should be delivered to Amazon S3.  Valid values are `FailedEventsOnly` and `AllEvents`.  Default value is `FailedEventsOnly`.
     * 
     */
    @Import(name="s3BackupMode")
    private @Nullable Output<String> s3BackupMode;

    /**
     * @return Defines how documents should be delivered to Amazon S3.  Valid values are `FailedEventsOnly` and `AllEvents`.  Default value is `FailedEventsOnly`.
     * 
     */
    public Optional<Output<String>> s3BackupMode() {
        return Optional.ofNullable(this.s3BackupMode);
    }

    /**
     * The S3 Configuration. See s3_configuration for more details.
     * 
     */
    @Import(name="s3Configuration", required=true)
    private Output<FirehoseDeliveryStreamSplunkConfigurationS3ConfigurationArgs> s3Configuration;

    /**
     * @return The S3 Configuration. See s3_configuration for more details.
     * 
     */
    public Output<FirehoseDeliveryStreamSplunkConfigurationS3ConfigurationArgs> s3Configuration() {
        return this.s3Configuration;
    }

    private FirehoseDeliveryStreamSplunkConfigurationArgs() {}

    private FirehoseDeliveryStreamSplunkConfigurationArgs(FirehoseDeliveryStreamSplunkConfigurationArgs $) {
        this.cloudwatchLoggingOptions = $.cloudwatchLoggingOptions;
        this.hecAcknowledgmentTimeout = $.hecAcknowledgmentTimeout;
        this.hecEndpoint = $.hecEndpoint;
        this.hecEndpointType = $.hecEndpointType;
        this.hecToken = $.hecToken;
        this.processingConfiguration = $.processingConfiguration;
        this.retryDuration = $.retryDuration;
        this.s3BackupMode = $.s3BackupMode;
        this.s3Configuration = $.s3Configuration;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FirehoseDeliveryStreamSplunkConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FirehoseDeliveryStreamSplunkConfigurationArgs $;

        public Builder() {
            $ = new FirehoseDeliveryStreamSplunkConfigurationArgs();
        }

        public Builder(FirehoseDeliveryStreamSplunkConfigurationArgs defaults) {
            $ = new FirehoseDeliveryStreamSplunkConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cloudwatchLoggingOptions The CloudWatch Logging Options for the delivery stream. More details are given below.
         * 
         * @return builder
         * 
         */
        public Builder cloudwatchLoggingOptions(@Nullable Output<FirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptionsArgs> cloudwatchLoggingOptions) {
            $.cloudwatchLoggingOptions = cloudwatchLoggingOptions;
            return this;
        }

        /**
         * @param cloudwatchLoggingOptions The CloudWatch Logging Options for the delivery stream. More details are given below.
         * 
         * @return builder
         * 
         */
        public Builder cloudwatchLoggingOptions(FirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptionsArgs cloudwatchLoggingOptions) {
            return cloudwatchLoggingOptions(Output.of(cloudwatchLoggingOptions));
        }

        /**
         * @param hecAcknowledgmentTimeout The amount of time, in seconds between 180 and 600, that Kinesis Firehose waits to receive an acknowledgment from Splunk after it sends it data.
         * 
         * @return builder
         * 
         */
        public Builder hecAcknowledgmentTimeout(@Nullable Output<Integer> hecAcknowledgmentTimeout) {
            $.hecAcknowledgmentTimeout = hecAcknowledgmentTimeout;
            return this;
        }

        /**
         * @param hecAcknowledgmentTimeout The amount of time, in seconds between 180 and 600, that Kinesis Firehose waits to receive an acknowledgment from Splunk after it sends it data.
         * 
         * @return builder
         * 
         */
        public Builder hecAcknowledgmentTimeout(Integer hecAcknowledgmentTimeout) {
            return hecAcknowledgmentTimeout(Output.of(hecAcknowledgmentTimeout));
        }

        /**
         * @param hecEndpoint The HTTP Event Collector (HEC) endpoint to which Kinesis Firehose sends your data.
         * 
         * @return builder
         * 
         */
        public Builder hecEndpoint(Output<String> hecEndpoint) {
            $.hecEndpoint = hecEndpoint;
            return this;
        }

        /**
         * @param hecEndpoint The HTTP Event Collector (HEC) endpoint to which Kinesis Firehose sends your data.
         * 
         * @return builder
         * 
         */
        public Builder hecEndpoint(String hecEndpoint) {
            return hecEndpoint(Output.of(hecEndpoint));
        }

        /**
         * @param hecEndpointType The HEC endpoint type. Valid values are `Raw` or `Event`. The default value is `Raw`.
         * 
         * @return builder
         * 
         */
        public Builder hecEndpointType(@Nullable Output<String> hecEndpointType) {
            $.hecEndpointType = hecEndpointType;
            return this;
        }

        /**
         * @param hecEndpointType The HEC endpoint type. Valid values are `Raw` or `Event`. The default value is `Raw`.
         * 
         * @return builder
         * 
         */
        public Builder hecEndpointType(String hecEndpointType) {
            return hecEndpointType(Output.of(hecEndpointType));
        }

        /**
         * @param hecToken The GUID that you obtain from your Splunk cluster when you create a new HEC endpoint.
         * 
         * @return builder
         * 
         */
        public Builder hecToken(Output<String> hecToken) {
            $.hecToken = hecToken;
            return this;
        }

        /**
         * @param hecToken The GUID that you obtain from your Splunk cluster when you create a new HEC endpoint.
         * 
         * @return builder
         * 
         */
        public Builder hecToken(String hecToken) {
            return hecToken(Output.of(hecToken));
        }

        /**
         * @param processingConfiguration The data processing configuration.  More details are given below.
         * 
         * @return builder
         * 
         */
        public Builder processingConfiguration(@Nullable Output<FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationArgs> processingConfiguration) {
            $.processingConfiguration = processingConfiguration;
            return this;
        }

        /**
         * @param processingConfiguration The data processing configuration.  More details are given below.
         * 
         * @return builder
         * 
         */
        public Builder processingConfiguration(FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationArgs processingConfiguration) {
            return processingConfiguration(Output.of(processingConfiguration));
        }

        /**
         * @param retryDuration After an initial failure to deliver to Splunk, the total amount of time, in seconds between 0 to 7200, during which Firehose re-attempts delivery (including the first attempt).  After this time has elapsed, the failed documents are written to Amazon S3.  The default value is 300s.  There will be no retry if the value is 0.
         * 
         * @return builder
         * 
         */
        public Builder retryDuration(@Nullable Output<Integer> retryDuration) {
            $.retryDuration = retryDuration;
            return this;
        }

        /**
         * @param retryDuration After an initial failure to deliver to Splunk, the total amount of time, in seconds between 0 to 7200, during which Firehose re-attempts delivery (including the first attempt).  After this time has elapsed, the failed documents are written to Amazon S3.  The default value is 300s.  There will be no retry if the value is 0.
         * 
         * @return builder
         * 
         */
        public Builder retryDuration(Integer retryDuration) {
            return retryDuration(Output.of(retryDuration));
        }

        /**
         * @param s3BackupMode Defines how documents should be delivered to Amazon S3.  Valid values are `FailedEventsOnly` and `AllEvents`.  Default value is `FailedEventsOnly`.
         * 
         * @return builder
         * 
         */
        public Builder s3BackupMode(@Nullable Output<String> s3BackupMode) {
            $.s3BackupMode = s3BackupMode;
            return this;
        }

        /**
         * @param s3BackupMode Defines how documents should be delivered to Amazon S3.  Valid values are `FailedEventsOnly` and `AllEvents`.  Default value is `FailedEventsOnly`.
         * 
         * @return builder
         * 
         */
        public Builder s3BackupMode(String s3BackupMode) {
            return s3BackupMode(Output.of(s3BackupMode));
        }

        /**
         * @param s3Configuration The S3 Configuration. See s3_configuration for more details.
         * 
         * @return builder
         * 
         */
        public Builder s3Configuration(Output<FirehoseDeliveryStreamSplunkConfigurationS3ConfigurationArgs> s3Configuration) {
            $.s3Configuration = s3Configuration;
            return this;
        }

        /**
         * @param s3Configuration The S3 Configuration. See s3_configuration for more details.
         * 
         * @return builder
         * 
         */
        public Builder s3Configuration(FirehoseDeliveryStreamSplunkConfigurationS3ConfigurationArgs s3Configuration) {
            return s3Configuration(Output.of(s3Configuration));
        }

        public FirehoseDeliveryStreamSplunkConfigurationArgs build() {
            if ($.hecEndpoint == null) {
                throw new MissingRequiredPropertyException("FirehoseDeliveryStreamSplunkConfigurationArgs", "hecEndpoint");
            }
            if ($.hecToken == null) {
                throw new MissingRequiredPropertyException("FirehoseDeliveryStreamSplunkConfigurationArgs", "hecToken");
            }
            if ($.s3Configuration == null) {
                throw new MissingRequiredPropertyException("FirehoseDeliveryStreamSplunkConfigurationArgs", "s3Configuration");
            }
            return $;
        }
    }

}
