// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.inputs;

import com.pulumi.aws.quicksight.inputs.CascadingControlConfigurationArgs;
import com.pulumi.aws.quicksight.inputs.TemplateDefinitionSheetParameterControlListDisplayOptionsArgs;
import com.pulumi.aws.quicksight.inputs.TemplateDefinitionSheetParameterControlListSelectableValuesArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TemplateDefinitionSheetParameterControlListArgs extends com.pulumi.resources.ResourceArgs {

    public static final TemplateDefinitionSheetParameterControlListArgs Empty = new TemplateDefinitionSheetParameterControlListArgs();

    @Import(name="cascadingControlConfiguration")
    private @Nullable Output<CascadingControlConfigurationArgs> cascadingControlConfiguration;

    public Optional<Output<CascadingControlConfigurationArgs>> cascadingControlConfiguration() {
        return Optional.ofNullable(this.cascadingControlConfiguration);
    }

    @Import(name="displayOptions")
    private @Nullable Output<TemplateDefinitionSheetParameterControlListDisplayOptionsArgs> displayOptions;

    public Optional<Output<TemplateDefinitionSheetParameterControlListDisplayOptionsArgs>> displayOptions() {
        return Optional.ofNullable(this.displayOptions);
    }

    @Import(name="parameterControlId", required=true)
    private Output<String> parameterControlId;

    public Output<String> parameterControlId() {
        return this.parameterControlId;
    }

    @Import(name="selectableValues")
    private @Nullable Output<TemplateDefinitionSheetParameterControlListSelectableValuesArgs> selectableValues;

    public Optional<Output<TemplateDefinitionSheetParameterControlListSelectableValuesArgs>> selectableValues() {
        return Optional.ofNullable(this.selectableValues);
    }

    @Import(name="sourceParameterName", required=true)
    private Output<String> sourceParameterName;

    public Output<String> sourceParameterName() {
        return this.sourceParameterName;
    }

    @Import(name="title", required=true)
    private Output<String> title;

    public Output<String> title() {
        return this.title;
    }

    @Import(name="type")
    private @Nullable Output<String> type;

    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private TemplateDefinitionSheetParameterControlListArgs() {}

    private TemplateDefinitionSheetParameterControlListArgs(TemplateDefinitionSheetParameterControlListArgs $) {
        this.cascadingControlConfiguration = $.cascadingControlConfiguration;
        this.displayOptions = $.displayOptions;
        this.parameterControlId = $.parameterControlId;
        this.selectableValues = $.selectableValues;
        this.sourceParameterName = $.sourceParameterName;
        this.title = $.title;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TemplateDefinitionSheetParameterControlListArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TemplateDefinitionSheetParameterControlListArgs $;

        public Builder() {
            $ = new TemplateDefinitionSheetParameterControlListArgs();
        }

        public Builder(TemplateDefinitionSheetParameterControlListArgs defaults) {
            $ = new TemplateDefinitionSheetParameterControlListArgs(Objects.requireNonNull(defaults));
        }

        public Builder cascadingControlConfiguration(@Nullable Output<CascadingControlConfigurationArgs> cascadingControlConfiguration) {
            $.cascadingControlConfiguration = cascadingControlConfiguration;
            return this;
        }

        public Builder cascadingControlConfiguration(CascadingControlConfigurationArgs cascadingControlConfiguration) {
            return cascadingControlConfiguration(Output.of(cascadingControlConfiguration));
        }

        public Builder displayOptions(@Nullable Output<TemplateDefinitionSheetParameterControlListDisplayOptionsArgs> displayOptions) {
            $.displayOptions = displayOptions;
            return this;
        }

        public Builder displayOptions(TemplateDefinitionSheetParameterControlListDisplayOptionsArgs displayOptions) {
            return displayOptions(Output.of(displayOptions));
        }

        public Builder parameterControlId(Output<String> parameterControlId) {
            $.parameterControlId = parameterControlId;
            return this;
        }

        public Builder parameterControlId(String parameterControlId) {
            return parameterControlId(Output.of(parameterControlId));
        }

        public Builder selectableValues(@Nullable Output<TemplateDefinitionSheetParameterControlListSelectableValuesArgs> selectableValues) {
            $.selectableValues = selectableValues;
            return this;
        }

        public Builder selectableValues(TemplateDefinitionSheetParameterControlListSelectableValuesArgs selectableValues) {
            return selectableValues(Output.of(selectableValues));
        }

        public Builder sourceParameterName(Output<String> sourceParameterName) {
            $.sourceParameterName = sourceParameterName;
            return this;
        }

        public Builder sourceParameterName(String sourceParameterName) {
            return sourceParameterName(Output.of(sourceParameterName));
        }

        public Builder title(Output<String> title) {
            $.title = title;
            return this;
        }

        public Builder title(String title) {
            return title(Output.of(title));
        }

        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        public Builder type(String type) {
            return type(Output.of(type));
        }

        public TemplateDefinitionSheetParameterControlListArgs build() {
            if ($.parameterControlId == null) {
                throw new MissingRequiredPropertyException("TemplateDefinitionSheetParameterControlListArgs", "parameterControlId");
            }
            if ($.sourceParameterName == null) {
                throw new MissingRequiredPropertyException("TemplateDefinitionSheetParameterControlListArgs", "sourceParameterName");
            }
            if ($.title == null) {
                throw new MissingRequiredPropertyException("TemplateDefinitionSheetParameterControlListArgs", "title");
            }
            return $;
        }
    }

}
