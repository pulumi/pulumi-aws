// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.s3;

import com.pulumi.aws.Utilities;
import com.pulumi.aws.s3.BucketNotificationArgs;
import com.pulumi.aws.s3.inputs.BucketNotificationState;
import com.pulumi.aws.s3.outputs.BucketNotificationLambdaFunction;
import com.pulumi.aws.s3.outputs.BucketNotificationQueue;
import com.pulumi.aws.s3.outputs.BucketNotificationTopic;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages a S3 Bucket Notification Configuration. For additional information, see the [Configuring S3 Event Notifications section in the Amazon S3 Developer Guide](https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html).
 * 
 * &gt; **NOTE:** S3 Buckets only support a single notification configuration. Declaring multiple `aws.s3.BucketNotification` resources to the same S3 Bucket will cause a perpetual difference in configuration. See the example &#34;Trigger multiple Lambda functions&#34; for an option.
 * 
 * &gt; This resource cannot be used with S3 directory buckets.
 * 
 * ## Example Usage
 * ### Emit events to EventBridge
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.aws.s3.BucketV2;
 * import com.pulumi.aws.s3.BucketNotification;
 * import com.pulumi.aws.s3.BucketNotificationArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var bucket = new BucketV2(&#34;bucket&#34;);
 * 
 *         var bucketNotification = new BucketNotification(&#34;bucketNotification&#34;, BucketNotificationArgs.builder()        
 *             .bucket(bucket.id())
 *             .eventbridge(true)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * Using `pulumi import`, import S3 bucket notification using the `bucket`. For example:
 * 
 * ```sh
 *  $ pulumi import aws:s3/bucketNotification:BucketNotification bucket_notification bucket-name
 * ```
 * 
 */
@ResourceType(type="aws:s3/bucketNotification:BucketNotification")
public class BucketNotification extends com.pulumi.resources.CustomResource {
    /**
     * Name of the bucket for notification configuration.
     * 
     * The following arguments are optional:
     * 
     */
    @Export(name="bucket", refs={String.class}, tree="[0]")
    private Output<String> bucket;

    /**
     * @return Name of the bucket for notification configuration.
     * 
     * The following arguments are optional:
     * 
     */
    public Output<String> bucket() {
        return this.bucket;
    }
    /**
     * Whether to enable Amazon EventBridge notifications. Defaults to `false`.
     * 
     */
    @Export(name="eventbridge", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> eventbridge;

    /**
     * @return Whether to enable Amazon EventBridge notifications. Defaults to `false`.
     * 
     */
    public Output<Optional<Boolean>> eventbridge() {
        return Codegen.optional(this.eventbridge);
    }
    /**
     * Used to configure notifications to a Lambda Function. See below.
     * 
     */
    @Export(name="lambdaFunctions", refs={List.class,BucketNotificationLambdaFunction.class}, tree="[0,1]")
    private Output</* @Nullable */ List<BucketNotificationLambdaFunction>> lambdaFunctions;

    /**
     * @return Used to configure notifications to a Lambda Function. See below.
     * 
     */
    public Output<Optional<List<BucketNotificationLambdaFunction>>> lambdaFunctions() {
        return Codegen.optional(this.lambdaFunctions);
    }
    /**
     * Notification configuration to SQS Queue. See below.
     * 
     */
    @Export(name="queues", refs={List.class,BucketNotificationQueue.class}, tree="[0,1]")
    private Output</* @Nullable */ List<BucketNotificationQueue>> queues;

    /**
     * @return Notification configuration to SQS Queue. See below.
     * 
     */
    public Output<Optional<List<BucketNotificationQueue>>> queues() {
        return Codegen.optional(this.queues);
    }
    /**
     * Notification configuration to SNS Topic. See below.
     * 
     */
    @Export(name="topics", refs={List.class,BucketNotificationTopic.class}, tree="[0,1]")
    private Output</* @Nullable */ List<BucketNotificationTopic>> topics;

    /**
     * @return Notification configuration to SNS Topic. See below.
     * 
     */
    public Output<Optional<List<BucketNotificationTopic>>> topics() {
        return Codegen.optional(this.topics);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public BucketNotification(String name) {
        this(name, BucketNotificationArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public BucketNotification(String name, BucketNotificationArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public BucketNotification(String name, BucketNotificationArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("aws:s3/bucketNotification:BucketNotification", name, args == null ? BucketNotificationArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private BucketNotification(String name, Output<String> id, @Nullable BucketNotificationState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("aws:s3/bucketNotification:BucketNotification", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static BucketNotification get(String name, Output<String> id, @Nullable BucketNotificationState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new BucketNotification(name, id, state, options);
    }
}
