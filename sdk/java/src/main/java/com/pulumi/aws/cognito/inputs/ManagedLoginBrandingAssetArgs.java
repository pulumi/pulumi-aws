// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.cognito.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ManagedLoginBrandingAssetArgs extends com.pulumi.resources.ResourceArgs {

    public static final ManagedLoginBrandingAssetArgs Empty = new ManagedLoginBrandingAssetArgs();

    /**
     * Image file, in Base64-encoded binary.
     * 
     */
    @Import(name="bytes")
    private @Nullable Output<String> bytes;

    /**
     * @return Image file, in Base64-encoded binary.
     * 
     */
    public Optional<Output<String>> bytes() {
        return Optional.ofNullable(this.bytes);
    }

    /**
     * Category that the image corresponds to. See [AWS documentation](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_AssetType.html#CognitoUserPools-Type-AssetType-Category) for valid values.
     * 
     */
    @Import(name="category", required=true)
    private Output<String> category;

    /**
     * @return Category that the image corresponds to. See [AWS documentation](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_AssetType.html#CognitoUserPools-Type-AssetType-Category) for valid values.
     * 
     */
    public Output<String> category() {
        return this.category;
    }

    /**
     * Display-mode target of the asset. Valid values: `LIGHT`, `DARK`, `DYNAMIC`.
     * 
     */
    @Import(name="colorMode", required=true)
    private Output<String> colorMode;

    /**
     * @return Display-mode target of the asset. Valid values: `LIGHT`, `DARK`, `DYNAMIC`.
     * 
     */
    public Output<String> colorMode() {
        return this.colorMode;
    }

    @Import(name="extension", required=true)
    private Output<String> extension;

    public Output<String> extension() {
        return this.extension;
    }

    /**
     * Asset ID.
     * 
     */
    @Import(name="resourceId")
    private @Nullable Output<String> resourceId;

    /**
     * @return Asset ID.
     * 
     */
    public Optional<Output<String>> resourceId() {
        return Optional.ofNullable(this.resourceId);
    }

    private ManagedLoginBrandingAssetArgs() {}

    private ManagedLoginBrandingAssetArgs(ManagedLoginBrandingAssetArgs $) {
        this.bytes = $.bytes;
        this.category = $.category;
        this.colorMode = $.colorMode;
        this.extension = $.extension;
        this.resourceId = $.resourceId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ManagedLoginBrandingAssetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ManagedLoginBrandingAssetArgs $;

        public Builder() {
            $ = new ManagedLoginBrandingAssetArgs();
        }

        public Builder(ManagedLoginBrandingAssetArgs defaults) {
            $ = new ManagedLoginBrandingAssetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bytes Image file, in Base64-encoded binary.
         * 
         * @return builder
         * 
         */
        public Builder bytes(@Nullable Output<String> bytes) {
            $.bytes = bytes;
            return this;
        }

        /**
         * @param bytes Image file, in Base64-encoded binary.
         * 
         * @return builder
         * 
         */
        public Builder bytes(String bytes) {
            return bytes(Output.of(bytes));
        }

        /**
         * @param category Category that the image corresponds to. See [AWS documentation](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_AssetType.html#CognitoUserPools-Type-AssetType-Category) for valid values.
         * 
         * @return builder
         * 
         */
        public Builder category(Output<String> category) {
            $.category = category;
            return this;
        }

        /**
         * @param category Category that the image corresponds to. See [AWS documentation](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_AssetType.html#CognitoUserPools-Type-AssetType-Category) for valid values.
         * 
         * @return builder
         * 
         */
        public Builder category(String category) {
            return category(Output.of(category));
        }

        /**
         * @param colorMode Display-mode target of the asset. Valid values: `LIGHT`, `DARK`, `DYNAMIC`.
         * 
         * @return builder
         * 
         */
        public Builder colorMode(Output<String> colorMode) {
            $.colorMode = colorMode;
            return this;
        }

        /**
         * @param colorMode Display-mode target of the asset. Valid values: `LIGHT`, `DARK`, `DYNAMIC`.
         * 
         * @return builder
         * 
         */
        public Builder colorMode(String colorMode) {
            return colorMode(Output.of(colorMode));
        }

        public Builder extension(Output<String> extension) {
            $.extension = extension;
            return this;
        }

        public Builder extension(String extension) {
            return extension(Output.of(extension));
        }

        /**
         * @param resourceId Asset ID.
         * 
         * @return builder
         * 
         */
        public Builder resourceId(@Nullable Output<String> resourceId) {
            $.resourceId = resourceId;
            return this;
        }

        /**
         * @param resourceId Asset ID.
         * 
         * @return builder
         * 
         */
        public Builder resourceId(String resourceId) {
            return resourceId(Output.of(resourceId));
        }

        public ManagedLoginBrandingAssetArgs build() {
            if ($.category == null) {
                throw new MissingRequiredPropertyException("ManagedLoginBrandingAssetArgs", "category");
            }
            if ($.colorMode == null) {
                throw new MissingRequiredPropertyException("ManagedLoginBrandingAssetArgs", "colorMode");
            }
            if ($.extension == null) {
                throw new MissingRequiredPropertyException("ManagedLoginBrandingAssetArgs", "extension");
            }
            return $;
        }
    }

}
