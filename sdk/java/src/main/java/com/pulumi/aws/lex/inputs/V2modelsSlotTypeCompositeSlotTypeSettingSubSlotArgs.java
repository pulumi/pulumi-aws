// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.lex.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class V2modelsSlotTypeCompositeSlotTypeSettingSubSlotArgs extends com.pulumi.resources.ResourceArgs {

    public static final V2modelsSlotTypeCompositeSlotTypeSettingSubSlotArgs Empty = new V2modelsSlotTypeCompositeSlotTypeSettingSubSlotArgs();

    /**
     * Name of a constituent sub slot inside a composite slot.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Name of a constituent sub slot inside a composite slot.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * Unique identifier assigned to a slot type.
     * This refers to either a built-in slot type or the unique `slot_type_id` of a custom slot type.
     * 
     */
    @Import(name="slotTypeId", required=true)
    private Output<String> slotTypeId;

    /**
     * @return Unique identifier assigned to a slot type.
     * This refers to either a built-in slot type or the unique `slot_type_id` of a custom slot type.
     * 
     */
    public Output<String> slotTypeId() {
        return this.slotTypeId;
    }

    private V2modelsSlotTypeCompositeSlotTypeSettingSubSlotArgs() {}

    private V2modelsSlotTypeCompositeSlotTypeSettingSubSlotArgs(V2modelsSlotTypeCompositeSlotTypeSettingSubSlotArgs $) {
        this.name = $.name;
        this.slotTypeId = $.slotTypeId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(V2modelsSlotTypeCompositeSlotTypeSettingSubSlotArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private V2modelsSlotTypeCompositeSlotTypeSettingSubSlotArgs $;

        public Builder() {
            $ = new V2modelsSlotTypeCompositeSlotTypeSettingSubSlotArgs();
        }

        public Builder(V2modelsSlotTypeCompositeSlotTypeSettingSubSlotArgs defaults) {
            $ = new V2modelsSlotTypeCompositeSlotTypeSettingSubSlotArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param name Name of a constituent sub slot inside a composite slot.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of a constituent sub slot inside a composite slot.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param slotTypeId Unique identifier assigned to a slot type.
         * This refers to either a built-in slot type or the unique `slot_type_id` of a custom slot type.
         * 
         * @return builder
         * 
         */
        public Builder slotTypeId(Output<String> slotTypeId) {
            $.slotTypeId = slotTypeId;
            return this;
        }

        /**
         * @param slotTypeId Unique identifier assigned to a slot type.
         * This refers to either a built-in slot type or the unique `slot_type_id` of a custom slot type.
         * 
         * @return builder
         * 
         */
        public Builder slotTypeId(String slotTypeId) {
            return slotTypeId(Output.of(slotTypeId));
        }

        public V2modelsSlotTypeCompositeSlotTypeSettingSubSlotArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("V2modelsSlotTypeCompositeSlotTypeSettingSubSlotArgs", "name");
            }
            if ($.slotTypeId == null) {
                throw new MissingRequiredPropertyException("V2modelsSlotTypeCompositeSlotTypeSettingSubSlotArgs", "slotTypeId");
            }
            return $;
        }
    }

}
