// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.inputs;

import com.pulumi.aws.inputs.GetAmiIdsFilterArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetAmiIdsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetAmiIdsArgs Empty = new GetAmiIdsArgs();

    @Import(name="executableUsers")
    private @Nullable Output<List<String>> executableUsers;

    public Optional<Output<List<String>>> executableUsers() {
        return Optional.ofNullable(this.executableUsers);
    }

    @Import(name="filters")
    private @Nullable Output<List<GetAmiIdsFilterArgs>> filters;

    public Optional<Output<List<GetAmiIdsFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    @Import(name="nameRegex")
    private @Nullable Output<String> nameRegex;

    public Optional<Output<String>> nameRegex() {
        return Optional.ofNullable(this.nameRegex);
    }

    @Import(name="owners", required=true)
    private Output<List<String>> owners;

    public Output<List<String>> owners() {
        return this.owners;
    }

    @Import(name="sortAscending")
    private @Nullable Output<Boolean> sortAscending;

    public Optional<Output<Boolean>> sortAscending() {
        return Optional.ofNullable(this.sortAscending);
    }

    private GetAmiIdsArgs() {}

    private GetAmiIdsArgs(GetAmiIdsArgs $) {
        this.executableUsers = $.executableUsers;
        this.filters = $.filters;
        this.nameRegex = $.nameRegex;
        this.owners = $.owners;
        this.sortAscending = $.sortAscending;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetAmiIdsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetAmiIdsArgs $;

        public Builder() {
            $ = new GetAmiIdsArgs();
        }

        public Builder(GetAmiIdsArgs defaults) {
            $ = new GetAmiIdsArgs(Objects.requireNonNull(defaults));
        }

        public Builder executableUsers(@Nullable Output<List<String>> executableUsers) {
            $.executableUsers = executableUsers;
            return this;
        }

        public Builder executableUsers(List<String> executableUsers) {
            return executableUsers(Output.of(executableUsers));
        }

        public Builder executableUsers(String... executableUsers) {
            return executableUsers(List.of(executableUsers));
        }

        public Builder filters(@Nullable Output<List<GetAmiIdsFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<GetAmiIdsFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetAmiIdsFilterArgs... filters) {
            return filters(List.of(filters));
        }

        public Builder nameRegex(@Nullable Output<String> nameRegex) {
            $.nameRegex = nameRegex;
            return this;
        }

        public Builder nameRegex(String nameRegex) {
            return nameRegex(Output.of(nameRegex));
        }

        public Builder owners(Output<List<String>> owners) {
            $.owners = owners;
            return this;
        }

        public Builder owners(List<String> owners) {
            return owners(Output.of(owners));
        }

        public Builder owners(String... owners) {
            return owners(List.of(owners));
        }

        public Builder sortAscending(@Nullable Output<Boolean> sortAscending) {
            $.sortAscending = sortAscending;
            return this;
        }

        public Builder sortAscending(Boolean sortAscending) {
            return sortAscending(Output.of(sortAscending));
        }

        public GetAmiIdsArgs build() {
            $.owners = Objects.requireNonNull($.owners, "expected parameter 'owners' to be non-null");
            return $;
        }
    }

}
