// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.inputs;

import com.pulumi.aws.quicksight.inputs.CellStyleArgs;
import com.pulumi.aws.quicksight.inputs.VisualsPivotTableVisualChartConfigurationTableOptionsRowAlternateColorOptionsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VisualsPivotTableVisualChartConfigurationTableOptionsArgs extends com.pulumi.resources.ResourceArgs {

    public static final VisualsPivotTableVisualChartConfigurationTableOptionsArgs Empty = new VisualsPivotTableVisualChartConfigurationTableOptionsArgs();

    @Import(name="cellStyle")
    private @Nullable Output<CellStyleArgs> cellStyle;

    public Optional<Output<CellStyleArgs>> cellStyle() {
        return Optional.ofNullable(this.cellStyle);
    }

    @Import(name="collapsedRowDimensionsVisibility")
    private @Nullable Output<String> collapsedRowDimensionsVisibility;

    public Optional<Output<String>> collapsedRowDimensionsVisibility() {
        return Optional.ofNullable(this.collapsedRowDimensionsVisibility);
    }

    @Import(name="columnHeaderStyle")
    private @Nullable Output<CellStyleArgs> columnHeaderStyle;

    public Optional<Output<CellStyleArgs>> columnHeaderStyle() {
        return Optional.ofNullable(this.columnHeaderStyle);
    }

    @Import(name="columnNamesVisibility")
    private @Nullable Output<String> columnNamesVisibility;

    public Optional<Output<String>> columnNamesVisibility() {
        return Optional.ofNullable(this.columnNamesVisibility);
    }

    @Import(name="metricPlacement")
    private @Nullable Output<String> metricPlacement;

    public Optional<Output<String>> metricPlacement() {
        return Optional.ofNullable(this.metricPlacement);
    }

    @Import(name="rowAlternateColorOptions")
    private @Nullable Output<VisualsPivotTableVisualChartConfigurationTableOptionsRowAlternateColorOptionsArgs> rowAlternateColorOptions;

    public Optional<Output<VisualsPivotTableVisualChartConfigurationTableOptionsRowAlternateColorOptionsArgs>> rowAlternateColorOptions() {
        return Optional.ofNullable(this.rowAlternateColorOptions);
    }

    @Import(name="rowFieldNamesStyle")
    private @Nullable Output<CellStyleArgs> rowFieldNamesStyle;

    public Optional<Output<CellStyleArgs>> rowFieldNamesStyle() {
        return Optional.ofNullable(this.rowFieldNamesStyle);
    }

    @Import(name="rowHeaderStyle")
    private @Nullable Output<CellStyleArgs> rowHeaderStyle;

    public Optional<Output<CellStyleArgs>> rowHeaderStyle() {
        return Optional.ofNullable(this.rowHeaderStyle);
    }

    @Import(name="singleMetricVisibility")
    private @Nullable Output<String> singleMetricVisibility;

    public Optional<Output<String>> singleMetricVisibility() {
        return Optional.ofNullable(this.singleMetricVisibility);
    }

    @Import(name="toggleButtonsVisibility")
    private @Nullable Output<String> toggleButtonsVisibility;

    public Optional<Output<String>> toggleButtonsVisibility() {
        return Optional.ofNullable(this.toggleButtonsVisibility);
    }

    private VisualsPivotTableVisualChartConfigurationTableOptionsArgs() {}

    private VisualsPivotTableVisualChartConfigurationTableOptionsArgs(VisualsPivotTableVisualChartConfigurationTableOptionsArgs $) {
        this.cellStyle = $.cellStyle;
        this.collapsedRowDimensionsVisibility = $.collapsedRowDimensionsVisibility;
        this.columnHeaderStyle = $.columnHeaderStyle;
        this.columnNamesVisibility = $.columnNamesVisibility;
        this.metricPlacement = $.metricPlacement;
        this.rowAlternateColorOptions = $.rowAlternateColorOptions;
        this.rowFieldNamesStyle = $.rowFieldNamesStyle;
        this.rowHeaderStyle = $.rowHeaderStyle;
        this.singleMetricVisibility = $.singleMetricVisibility;
        this.toggleButtonsVisibility = $.toggleButtonsVisibility;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VisualsPivotTableVisualChartConfigurationTableOptionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VisualsPivotTableVisualChartConfigurationTableOptionsArgs $;

        public Builder() {
            $ = new VisualsPivotTableVisualChartConfigurationTableOptionsArgs();
        }

        public Builder(VisualsPivotTableVisualChartConfigurationTableOptionsArgs defaults) {
            $ = new VisualsPivotTableVisualChartConfigurationTableOptionsArgs(Objects.requireNonNull(defaults));
        }

        public Builder cellStyle(@Nullable Output<CellStyleArgs> cellStyle) {
            $.cellStyle = cellStyle;
            return this;
        }

        public Builder cellStyle(CellStyleArgs cellStyle) {
            return cellStyle(Output.of(cellStyle));
        }

        public Builder collapsedRowDimensionsVisibility(@Nullable Output<String> collapsedRowDimensionsVisibility) {
            $.collapsedRowDimensionsVisibility = collapsedRowDimensionsVisibility;
            return this;
        }

        public Builder collapsedRowDimensionsVisibility(String collapsedRowDimensionsVisibility) {
            return collapsedRowDimensionsVisibility(Output.of(collapsedRowDimensionsVisibility));
        }

        public Builder columnHeaderStyle(@Nullable Output<CellStyleArgs> columnHeaderStyle) {
            $.columnHeaderStyle = columnHeaderStyle;
            return this;
        }

        public Builder columnHeaderStyle(CellStyleArgs columnHeaderStyle) {
            return columnHeaderStyle(Output.of(columnHeaderStyle));
        }

        public Builder columnNamesVisibility(@Nullable Output<String> columnNamesVisibility) {
            $.columnNamesVisibility = columnNamesVisibility;
            return this;
        }

        public Builder columnNamesVisibility(String columnNamesVisibility) {
            return columnNamesVisibility(Output.of(columnNamesVisibility));
        }

        public Builder metricPlacement(@Nullable Output<String> metricPlacement) {
            $.metricPlacement = metricPlacement;
            return this;
        }

        public Builder metricPlacement(String metricPlacement) {
            return metricPlacement(Output.of(metricPlacement));
        }

        public Builder rowAlternateColorOptions(@Nullable Output<VisualsPivotTableVisualChartConfigurationTableOptionsRowAlternateColorOptionsArgs> rowAlternateColorOptions) {
            $.rowAlternateColorOptions = rowAlternateColorOptions;
            return this;
        }

        public Builder rowAlternateColorOptions(VisualsPivotTableVisualChartConfigurationTableOptionsRowAlternateColorOptionsArgs rowAlternateColorOptions) {
            return rowAlternateColorOptions(Output.of(rowAlternateColorOptions));
        }

        public Builder rowFieldNamesStyle(@Nullable Output<CellStyleArgs> rowFieldNamesStyle) {
            $.rowFieldNamesStyle = rowFieldNamesStyle;
            return this;
        }

        public Builder rowFieldNamesStyle(CellStyleArgs rowFieldNamesStyle) {
            return rowFieldNamesStyle(Output.of(rowFieldNamesStyle));
        }

        public Builder rowHeaderStyle(@Nullable Output<CellStyleArgs> rowHeaderStyle) {
            $.rowHeaderStyle = rowHeaderStyle;
            return this;
        }

        public Builder rowHeaderStyle(CellStyleArgs rowHeaderStyle) {
            return rowHeaderStyle(Output.of(rowHeaderStyle));
        }

        public Builder singleMetricVisibility(@Nullable Output<String> singleMetricVisibility) {
            $.singleMetricVisibility = singleMetricVisibility;
            return this;
        }

        public Builder singleMetricVisibility(String singleMetricVisibility) {
            return singleMetricVisibility(Output.of(singleMetricVisibility));
        }

        public Builder toggleButtonsVisibility(@Nullable Output<String> toggleButtonsVisibility) {
            $.toggleButtonsVisibility = toggleButtonsVisibility;
            return this;
        }

        public Builder toggleButtonsVisibility(String toggleButtonsVisibility) {
            return toggleButtonsVisibility(Output.of(toggleButtonsVisibility));
        }

        public VisualsPivotTableVisualChartConfigurationTableOptionsArgs build() {
            return $;
        }
    }

}
