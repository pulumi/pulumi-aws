// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.appmesh.inputs;

import com.pulumi.aws.appmesh.inputs.RouteSpecHttp2RouteMatchQueryParameterMatchArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RouteSpecHttp2RouteMatchQueryParameterArgs extends com.pulumi.resources.ResourceArgs {

    public static final RouteSpecHttp2RouteMatchQueryParameterArgs Empty = new RouteSpecHttp2RouteMatchQueryParameterArgs();

    /**
     * Criteria for determining an gRPC request match.
     * 
     */
    @Import(name="match")
    private @Nullable Output<RouteSpecHttp2RouteMatchQueryParameterMatchArgs> match;

    /**
     * @return Criteria for determining an gRPC request match.
     * 
     */
    public Optional<Output<RouteSpecHttp2RouteMatchQueryParameterMatchArgs>> match() {
        return Optional.ofNullable(this.match);
    }

    /**
     * Name to use for the route. Must be between 1 and 255 characters in length.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Name to use for the route. Must be between 1 and 255 characters in length.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    private RouteSpecHttp2RouteMatchQueryParameterArgs() {}

    private RouteSpecHttp2RouteMatchQueryParameterArgs(RouteSpecHttp2RouteMatchQueryParameterArgs $) {
        this.match = $.match;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RouteSpecHttp2RouteMatchQueryParameterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RouteSpecHttp2RouteMatchQueryParameterArgs $;

        public Builder() {
            $ = new RouteSpecHttp2RouteMatchQueryParameterArgs();
        }

        public Builder(RouteSpecHttp2RouteMatchQueryParameterArgs defaults) {
            $ = new RouteSpecHttp2RouteMatchQueryParameterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param match Criteria for determining an gRPC request match.
         * 
         * @return builder
         * 
         */
        public Builder match(@Nullable Output<RouteSpecHttp2RouteMatchQueryParameterMatchArgs> match) {
            $.match = match;
            return this;
        }

        /**
         * @param match Criteria for determining an gRPC request match.
         * 
         * @return builder
         * 
         */
        public Builder match(RouteSpecHttp2RouteMatchQueryParameterMatchArgs match) {
            return match(Output.of(match));
        }

        /**
         * @param name Name to use for the route. Must be between 1 and 255 characters in length.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name to use for the route. Must be between 1 and 255 characters in length.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public RouteSpecHttp2RouteMatchQueryParameterArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("RouteSpecHttp2RouteMatchQueryParameterArgs", "name");
            }
            return $;
        }
    }

}
