// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.inputs;

import com.pulumi.aws.quicksight.inputs.FiltersCategoryFilterArgs;
import com.pulumi.aws.quicksight.inputs.FiltersNumericEqualityFilterArgs;
import com.pulumi.aws.quicksight.inputs.FiltersNumericRangeFilterArgs;
import com.pulumi.aws.quicksight.inputs.FiltersRelativeDatesFilterArgs;
import com.pulumi.aws.quicksight.inputs.FiltersTimeEqualityFilterArgs;
import com.pulumi.aws.quicksight.inputs.FiltersTimeRangeFilterArgs;
import com.pulumi.aws.quicksight.inputs.FiltersTopBottomFilterArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FiltersArgs extends com.pulumi.resources.ResourceArgs {

    public static final FiltersArgs Empty = new FiltersArgs();

    @Import(name="categoryFilter")
    private @Nullable Output<FiltersCategoryFilterArgs> categoryFilter;

    public Optional<Output<FiltersCategoryFilterArgs>> categoryFilter() {
        return Optional.ofNullable(this.categoryFilter);
    }

    @Import(name="numericEqualityFilter")
    private @Nullable Output<FiltersNumericEqualityFilterArgs> numericEqualityFilter;

    public Optional<Output<FiltersNumericEqualityFilterArgs>> numericEqualityFilter() {
        return Optional.ofNullable(this.numericEqualityFilter);
    }

    @Import(name="numericRangeFilter")
    private @Nullable Output<FiltersNumericRangeFilterArgs> numericRangeFilter;

    public Optional<Output<FiltersNumericRangeFilterArgs>> numericRangeFilter() {
        return Optional.ofNullable(this.numericRangeFilter);
    }

    @Import(name="relativeDatesFilter")
    private @Nullable Output<FiltersRelativeDatesFilterArgs> relativeDatesFilter;

    public Optional<Output<FiltersRelativeDatesFilterArgs>> relativeDatesFilter() {
        return Optional.ofNullable(this.relativeDatesFilter);
    }

    @Import(name="timeEqualityFilter")
    private @Nullable Output<FiltersTimeEqualityFilterArgs> timeEqualityFilter;

    public Optional<Output<FiltersTimeEqualityFilterArgs>> timeEqualityFilter() {
        return Optional.ofNullable(this.timeEqualityFilter);
    }

    @Import(name="timeRangeFilter")
    private @Nullable Output<FiltersTimeRangeFilterArgs> timeRangeFilter;

    public Optional<Output<FiltersTimeRangeFilterArgs>> timeRangeFilter() {
        return Optional.ofNullable(this.timeRangeFilter);
    }

    @Import(name="topBottomFilter")
    private @Nullable Output<FiltersTopBottomFilterArgs> topBottomFilter;

    public Optional<Output<FiltersTopBottomFilterArgs>> topBottomFilter() {
        return Optional.ofNullable(this.topBottomFilter);
    }

    private FiltersArgs() {}

    private FiltersArgs(FiltersArgs $) {
        this.categoryFilter = $.categoryFilter;
        this.numericEqualityFilter = $.numericEqualityFilter;
        this.numericRangeFilter = $.numericRangeFilter;
        this.relativeDatesFilter = $.relativeDatesFilter;
        this.timeEqualityFilter = $.timeEqualityFilter;
        this.timeRangeFilter = $.timeRangeFilter;
        this.topBottomFilter = $.topBottomFilter;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FiltersArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FiltersArgs $;

        public Builder() {
            $ = new FiltersArgs();
        }

        public Builder(FiltersArgs defaults) {
            $ = new FiltersArgs(Objects.requireNonNull(defaults));
        }

        public Builder categoryFilter(@Nullable Output<FiltersCategoryFilterArgs> categoryFilter) {
            $.categoryFilter = categoryFilter;
            return this;
        }

        public Builder categoryFilter(FiltersCategoryFilterArgs categoryFilter) {
            return categoryFilter(Output.of(categoryFilter));
        }

        public Builder numericEqualityFilter(@Nullable Output<FiltersNumericEqualityFilterArgs> numericEqualityFilter) {
            $.numericEqualityFilter = numericEqualityFilter;
            return this;
        }

        public Builder numericEqualityFilter(FiltersNumericEqualityFilterArgs numericEqualityFilter) {
            return numericEqualityFilter(Output.of(numericEqualityFilter));
        }

        public Builder numericRangeFilter(@Nullable Output<FiltersNumericRangeFilterArgs> numericRangeFilter) {
            $.numericRangeFilter = numericRangeFilter;
            return this;
        }

        public Builder numericRangeFilter(FiltersNumericRangeFilterArgs numericRangeFilter) {
            return numericRangeFilter(Output.of(numericRangeFilter));
        }

        public Builder relativeDatesFilter(@Nullable Output<FiltersRelativeDatesFilterArgs> relativeDatesFilter) {
            $.relativeDatesFilter = relativeDatesFilter;
            return this;
        }

        public Builder relativeDatesFilter(FiltersRelativeDatesFilterArgs relativeDatesFilter) {
            return relativeDatesFilter(Output.of(relativeDatesFilter));
        }

        public Builder timeEqualityFilter(@Nullable Output<FiltersTimeEqualityFilterArgs> timeEqualityFilter) {
            $.timeEqualityFilter = timeEqualityFilter;
            return this;
        }

        public Builder timeEqualityFilter(FiltersTimeEqualityFilterArgs timeEqualityFilter) {
            return timeEqualityFilter(Output.of(timeEqualityFilter));
        }

        public Builder timeRangeFilter(@Nullable Output<FiltersTimeRangeFilterArgs> timeRangeFilter) {
            $.timeRangeFilter = timeRangeFilter;
            return this;
        }

        public Builder timeRangeFilter(FiltersTimeRangeFilterArgs timeRangeFilter) {
            return timeRangeFilter(Output.of(timeRangeFilter));
        }

        public Builder topBottomFilter(@Nullable Output<FiltersTopBottomFilterArgs> topBottomFilter) {
            $.topBottomFilter = topBottomFilter;
            return this;
        }

        public Builder topBottomFilter(FiltersTopBottomFilterArgs topBottomFilter) {
            return topBottomFilter(Output.of(topBottomFilter));
        }

        public FiltersArgs build() {
            return $;
        }
    }

}
