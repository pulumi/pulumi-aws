// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.directoryservice.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDirectoryConnectSetting {
    private @Nullable List<String> availabilityZones;
    /**
     * @return IP addresses of the AD Connector servers.
     * 
     */
    private @Nullable List<String> connectIps;
    /**
     * @return DNS IP addresses of the domain to connect to.
     * 
     */
    private @Nullable List<String> customerDnsIps;
    /**
     * @return Username corresponding to the password provided.
     * 
     */
    private @Nullable String customerUsername;
    /**
     * @return Identifiers of the subnets for the connector servers (2 subnets in 2 different AZs).
     * 
     */
    private @Nullable List<String> subnetIds;
    /**
     * @return ID of the VPC that the connector is in.
     * 
     */
    private @Nullable String vpcId;

    private GetDirectoryConnectSetting() {}
    public List<String> availabilityZones() {
        return this.availabilityZones == null ? List.of() : this.availabilityZones;
    }
    /**
     * @return IP addresses of the AD Connector servers.
     * 
     */
    public List<String> connectIps() {
        return this.connectIps == null ? List.of() : this.connectIps;
    }
    /**
     * @return DNS IP addresses of the domain to connect to.
     * 
     */
    public List<String> customerDnsIps() {
        return this.customerDnsIps == null ? List.of() : this.customerDnsIps;
    }
    /**
     * @return Username corresponding to the password provided.
     * 
     */
    public Optional<String> customerUsername() {
        return Optional.ofNullable(this.customerUsername);
    }
    /**
     * @return Identifiers of the subnets for the connector servers (2 subnets in 2 different AZs).
     * 
     */
    public List<String> subnetIds() {
        return this.subnetIds == null ? List.of() : this.subnetIds;
    }
    /**
     * @return ID of the VPC that the connector is in.
     * 
     */
    public Optional<String> vpcId() {
        return Optional.ofNullable(this.vpcId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDirectoryConnectSetting defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> availabilityZones;
        private @Nullable List<String> connectIps;
        private @Nullable List<String> customerDnsIps;
        private @Nullable String customerUsername;
        private @Nullable List<String> subnetIds;
        private @Nullable String vpcId;
        public Builder() {}
        public Builder(GetDirectoryConnectSetting defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.availabilityZones = defaults.availabilityZones;
    	      this.connectIps = defaults.connectIps;
    	      this.customerDnsIps = defaults.customerDnsIps;
    	      this.customerUsername = defaults.customerUsername;
    	      this.subnetIds = defaults.subnetIds;
    	      this.vpcId = defaults.vpcId;
        }

        @CustomType.Setter
        public Builder availabilityZones(@Nullable List<String> availabilityZones) {
            this.availabilityZones = availabilityZones;
            return this;
        }
        public Builder availabilityZones(String... availabilityZones) {
            return availabilityZones(List.of(availabilityZones));
        }
        @CustomType.Setter
        public Builder connectIps(@Nullable List<String> connectIps) {
            this.connectIps = connectIps;
            return this;
        }
        public Builder connectIps(String... connectIps) {
            return connectIps(List.of(connectIps));
        }
        @CustomType.Setter
        public Builder customerDnsIps(@Nullable List<String> customerDnsIps) {
            this.customerDnsIps = customerDnsIps;
            return this;
        }
        public Builder customerDnsIps(String... customerDnsIps) {
            return customerDnsIps(List.of(customerDnsIps));
        }
        @CustomType.Setter
        public Builder customerUsername(@Nullable String customerUsername) {
            this.customerUsername = customerUsername;
            return this;
        }
        @CustomType.Setter
        public Builder subnetIds(@Nullable List<String> subnetIds) {
            this.subnetIds = subnetIds;
            return this;
        }
        public Builder subnetIds(String... subnetIds) {
            return subnetIds(List.of(subnetIds));
        }
        @CustomType.Setter
        public Builder vpcId(@Nullable String vpcId) {
            this.vpcId = vpcId;
            return this;
        }
        public GetDirectoryConnectSetting build() {
            final var o = new GetDirectoryConnectSetting();
            o.availabilityZones = availabilityZones;
            o.connectIps = connectIps;
            o.customerDnsIps = customerDnsIps;
            o.customerUsername = customerUsername;
            o.subnetIds = subnetIds;
            o.vpcId = vpcId;
            return o;
        }
    }
}
