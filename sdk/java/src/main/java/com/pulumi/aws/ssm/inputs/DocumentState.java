// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ssm.inputs;

import com.pulumi.aws.ssm.inputs.DocumentAttachmentsSourceArgs;
import com.pulumi.aws.ssm.inputs.DocumentParameterArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DocumentState extends com.pulumi.resources.ResourceArgs {

    public static final DocumentState Empty = new DocumentState();

    @Import(name="arn")
    private @Nullable Output<String> arn;

    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    /**
     * One or more configuration blocks describing attachments sources to a version of a document. Defined below.
     * 
     */
    @Import(name="attachmentsSources")
    private @Nullable Output<List<DocumentAttachmentsSourceArgs>> attachmentsSources;

    /**
     * @return One or more configuration blocks describing attachments sources to a version of a document. Defined below.
     * 
     */
    public Optional<Output<List<DocumentAttachmentsSourceArgs>>> attachmentsSources() {
        return Optional.ofNullable(this.attachmentsSources);
    }

    /**
     * The JSON or YAML content of the document.
     * 
     */
    @Import(name="content")
    private @Nullable Output<String> content;

    /**
     * @return The JSON or YAML content of the document.
     * 
     */
    public Optional<Output<String>> content() {
        return Optional.ofNullable(this.content);
    }

    /**
     * The date the document was created.
     * 
     */
    @Import(name="createdDate")
    private @Nullable Output<String> createdDate;

    /**
     * @return The date the document was created.
     * 
     */
    public Optional<Output<String>> createdDate() {
        return Optional.ofNullable(this.createdDate);
    }

    /**
     * The default version of the document.
     * 
     */
    @Import(name="defaultVersion")
    private @Nullable Output<String> defaultVersion;

    /**
     * @return The default version of the document.
     * 
     */
    public Optional<Output<String>> defaultVersion() {
        return Optional.ofNullable(this.defaultVersion);
    }

    /**
     * The description of the document.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the document.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The format of the document. Valid document types include: `JSON` and `YAML`
     * 
     */
    @Import(name="documentFormat")
    private @Nullable Output<String> documentFormat;

    /**
     * @return The format of the document. Valid document types include: `JSON` and `YAML`
     * 
     */
    public Optional<Output<String>> documentFormat() {
        return Optional.ofNullable(this.documentFormat);
    }

    /**
     * The type of the document. Valid document types include: `Automation`, `Command`, `Package`, `Policy`, and `Session`
     * 
     */
    @Import(name="documentType")
    private @Nullable Output<String> documentType;

    /**
     * @return The type of the document. Valid document types include: `Automation`, `Command`, `Package`, `Policy`, and `Session`
     * 
     */
    public Optional<Output<String>> documentType() {
        return Optional.ofNullable(this.documentType);
    }

    /**
     * The document version.
     * 
     */
    @Import(name="documentVersion")
    private @Nullable Output<String> documentVersion;

    /**
     * @return The document version.
     * 
     */
    public Optional<Output<String>> documentVersion() {
        return Optional.ofNullable(this.documentVersion);
    }

    /**
     * The sha1 or sha256 of the document content
     * 
     */
    @Import(name="hash")
    private @Nullable Output<String> hash;

    /**
     * @return The sha1 or sha256 of the document content
     * 
     */
    public Optional<Output<String>> hash() {
        return Optional.ofNullable(this.hash);
    }

    /**
     * &#34;Sha1&#34; &#34;Sha256&#34;. The hashing algorithm used when hashing the content.
     * 
     */
    @Import(name="hashType")
    private @Nullable Output<String> hashType;

    /**
     * @return &#34;Sha1&#34; &#34;Sha256&#34;. The hashing algorithm used when hashing the content.
     * 
     */
    public Optional<Output<String>> hashType() {
        return Optional.ofNullable(this.hashType);
    }

    /**
     * The latest version of the document.
     * 
     */
    @Import(name="latestVersion")
    private @Nullable Output<String> latestVersion;

    /**
     * @return The latest version of the document.
     * 
     */
    public Optional<Output<String>> latestVersion() {
        return Optional.ofNullable(this.latestVersion);
    }

    /**
     * The name of the document.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the document.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The AWS user account of the person who created the document.
     * 
     */
    @Import(name="owner")
    private @Nullable Output<String> owner;

    /**
     * @return The AWS user account of the person who created the document.
     * 
     */
    public Optional<Output<String>> owner() {
        return Optional.ofNullable(this.owner);
    }

    /**
     * The parameters that are available to this document.
     * 
     */
    @Import(name="parameters")
    private @Nullable Output<List<DocumentParameterArgs>> parameters;

    /**
     * @return The parameters that are available to this document.
     * 
     */
    public Optional<Output<List<DocumentParameterArgs>>> parameters() {
        return Optional.ofNullable(this.parameters);
    }

    /**
     * Additional Permissions to attach to the document. See Permissions below for details.
     * 
     */
    @Import(name="permissions")
    private @Nullable Output<Map<String,String>> permissions;

    /**
     * @return Additional Permissions to attach to the document. See Permissions below for details.
     * 
     */
    public Optional<Output<Map<String,String>>> permissions() {
        return Optional.ofNullable(this.permissions);
    }

    /**
     * A list of OS platforms compatible with this SSM document, either &#34;Windows&#34; or &#34;Linux&#34;.
     * 
     */
    @Import(name="platformTypes")
    private @Nullable Output<List<String>> platformTypes;

    /**
     * @return A list of OS platforms compatible with this SSM document, either &#34;Windows&#34; or &#34;Linux&#34;.
     * 
     */
    public Optional<Output<List<String>>> platformTypes() {
        return Optional.ofNullable(this.platformTypes);
    }

    /**
     * The schema version of the document.
     * 
     */
    @Import(name="schemaVersion")
    private @Nullable Output<String> schemaVersion;

    /**
     * @return The schema version of the document.
     * 
     */
    public Optional<Output<String>> schemaVersion() {
        return Optional.ofNullable(this.schemaVersion);
    }

    /**
     * &#34;Creating&#34;, &#34;Active&#34; or &#34;Deleting&#34;. The current status of the document.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return &#34;Creating&#34;, &#34;Active&#34; or &#34;Deleting&#34;. The current status of the document.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * A map of tags to assign to the object. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A map of tags to assign to the object. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    /**
     * @return A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    /**
     * The target type which defines the kinds of resources the document can run on. For example, /AWS::EC2::Instance. For a list of valid resource types, see AWS Resource Types Reference (http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html)
     * 
     */
    @Import(name="targetType")
    private @Nullable Output<String> targetType;

    /**
     * @return The target type which defines the kinds of resources the document can run on. For example, /AWS::EC2::Instance. For a list of valid resource types, see AWS Resource Types Reference (http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html)
     * 
     */
    public Optional<Output<String>> targetType() {
        return Optional.ofNullable(this.targetType);
    }

    /**
     * A field specifying the version of the artifact you are creating with the document. For example, &#34;Release 12, Update 6&#34;. This value is unique across all versions of a document and cannot be changed for an existing document version.
     * 
     */
    @Import(name="versionName")
    private @Nullable Output<String> versionName;

    /**
     * @return A field specifying the version of the artifact you are creating with the document. For example, &#34;Release 12, Update 6&#34;. This value is unique across all versions of a document and cannot be changed for an existing document version.
     * 
     */
    public Optional<Output<String>> versionName() {
        return Optional.ofNullable(this.versionName);
    }

    private DocumentState() {}

    private DocumentState(DocumentState $) {
        this.arn = $.arn;
        this.attachmentsSources = $.attachmentsSources;
        this.content = $.content;
        this.createdDate = $.createdDate;
        this.defaultVersion = $.defaultVersion;
        this.description = $.description;
        this.documentFormat = $.documentFormat;
        this.documentType = $.documentType;
        this.documentVersion = $.documentVersion;
        this.hash = $.hash;
        this.hashType = $.hashType;
        this.latestVersion = $.latestVersion;
        this.name = $.name;
        this.owner = $.owner;
        this.parameters = $.parameters;
        this.permissions = $.permissions;
        this.platformTypes = $.platformTypes;
        this.schemaVersion = $.schemaVersion;
        this.status = $.status;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
        this.targetType = $.targetType;
        this.versionName = $.versionName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DocumentState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DocumentState $;

        public Builder() {
            $ = new DocumentState();
        }

        public Builder(DocumentState defaults) {
            $ = new DocumentState(Objects.requireNonNull(defaults));
        }

        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        /**
         * @param attachmentsSources One or more configuration blocks describing attachments sources to a version of a document. Defined below.
         * 
         * @return builder
         * 
         */
        public Builder attachmentsSources(@Nullable Output<List<DocumentAttachmentsSourceArgs>> attachmentsSources) {
            $.attachmentsSources = attachmentsSources;
            return this;
        }

        /**
         * @param attachmentsSources One or more configuration blocks describing attachments sources to a version of a document. Defined below.
         * 
         * @return builder
         * 
         */
        public Builder attachmentsSources(List<DocumentAttachmentsSourceArgs> attachmentsSources) {
            return attachmentsSources(Output.of(attachmentsSources));
        }

        /**
         * @param attachmentsSources One or more configuration blocks describing attachments sources to a version of a document. Defined below.
         * 
         * @return builder
         * 
         */
        public Builder attachmentsSources(DocumentAttachmentsSourceArgs... attachmentsSources) {
            return attachmentsSources(List.of(attachmentsSources));
        }

        /**
         * @param content The JSON or YAML content of the document.
         * 
         * @return builder
         * 
         */
        public Builder content(@Nullable Output<String> content) {
            $.content = content;
            return this;
        }

        /**
         * @param content The JSON or YAML content of the document.
         * 
         * @return builder
         * 
         */
        public Builder content(String content) {
            return content(Output.of(content));
        }

        /**
         * @param createdDate The date the document was created.
         * 
         * @return builder
         * 
         */
        public Builder createdDate(@Nullable Output<String> createdDate) {
            $.createdDate = createdDate;
            return this;
        }

        /**
         * @param createdDate The date the document was created.
         * 
         * @return builder
         * 
         */
        public Builder createdDate(String createdDate) {
            return createdDate(Output.of(createdDate));
        }

        /**
         * @param defaultVersion The default version of the document.
         * 
         * @return builder
         * 
         */
        public Builder defaultVersion(@Nullable Output<String> defaultVersion) {
            $.defaultVersion = defaultVersion;
            return this;
        }

        /**
         * @param defaultVersion The default version of the document.
         * 
         * @return builder
         * 
         */
        public Builder defaultVersion(String defaultVersion) {
            return defaultVersion(Output.of(defaultVersion));
        }

        /**
         * @param description The description of the document.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the document.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param documentFormat The format of the document. Valid document types include: `JSON` and `YAML`
         * 
         * @return builder
         * 
         */
        public Builder documentFormat(@Nullable Output<String> documentFormat) {
            $.documentFormat = documentFormat;
            return this;
        }

        /**
         * @param documentFormat The format of the document. Valid document types include: `JSON` and `YAML`
         * 
         * @return builder
         * 
         */
        public Builder documentFormat(String documentFormat) {
            return documentFormat(Output.of(documentFormat));
        }

        /**
         * @param documentType The type of the document. Valid document types include: `Automation`, `Command`, `Package`, `Policy`, and `Session`
         * 
         * @return builder
         * 
         */
        public Builder documentType(@Nullable Output<String> documentType) {
            $.documentType = documentType;
            return this;
        }

        /**
         * @param documentType The type of the document. Valid document types include: `Automation`, `Command`, `Package`, `Policy`, and `Session`
         * 
         * @return builder
         * 
         */
        public Builder documentType(String documentType) {
            return documentType(Output.of(documentType));
        }

        /**
         * @param documentVersion The document version.
         * 
         * @return builder
         * 
         */
        public Builder documentVersion(@Nullable Output<String> documentVersion) {
            $.documentVersion = documentVersion;
            return this;
        }

        /**
         * @param documentVersion The document version.
         * 
         * @return builder
         * 
         */
        public Builder documentVersion(String documentVersion) {
            return documentVersion(Output.of(documentVersion));
        }

        /**
         * @param hash The sha1 or sha256 of the document content
         * 
         * @return builder
         * 
         */
        public Builder hash(@Nullable Output<String> hash) {
            $.hash = hash;
            return this;
        }

        /**
         * @param hash The sha1 or sha256 of the document content
         * 
         * @return builder
         * 
         */
        public Builder hash(String hash) {
            return hash(Output.of(hash));
        }

        /**
         * @param hashType &#34;Sha1&#34; &#34;Sha256&#34;. The hashing algorithm used when hashing the content.
         * 
         * @return builder
         * 
         */
        public Builder hashType(@Nullable Output<String> hashType) {
            $.hashType = hashType;
            return this;
        }

        /**
         * @param hashType &#34;Sha1&#34; &#34;Sha256&#34;. The hashing algorithm used when hashing the content.
         * 
         * @return builder
         * 
         */
        public Builder hashType(String hashType) {
            return hashType(Output.of(hashType));
        }

        /**
         * @param latestVersion The latest version of the document.
         * 
         * @return builder
         * 
         */
        public Builder latestVersion(@Nullable Output<String> latestVersion) {
            $.latestVersion = latestVersion;
            return this;
        }

        /**
         * @param latestVersion The latest version of the document.
         * 
         * @return builder
         * 
         */
        public Builder latestVersion(String latestVersion) {
            return latestVersion(Output.of(latestVersion));
        }

        /**
         * @param name The name of the document.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the document.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param owner The AWS user account of the person who created the document.
         * 
         * @return builder
         * 
         */
        public Builder owner(@Nullable Output<String> owner) {
            $.owner = owner;
            return this;
        }

        /**
         * @param owner The AWS user account of the person who created the document.
         * 
         * @return builder
         * 
         */
        public Builder owner(String owner) {
            return owner(Output.of(owner));
        }

        /**
         * @param parameters The parameters that are available to this document.
         * 
         * @return builder
         * 
         */
        public Builder parameters(@Nullable Output<List<DocumentParameterArgs>> parameters) {
            $.parameters = parameters;
            return this;
        }

        /**
         * @param parameters The parameters that are available to this document.
         * 
         * @return builder
         * 
         */
        public Builder parameters(List<DocumentParameterArgs> parameters) {
            return parameters(Output.of(parameters));
        }

        /**
         * @param parameters The parameters that are available to this document.
         * 
         * @return builder
         * 
         */
        public Builder parameters(DocumentParameterArgs... parameters) {
            return parameters(List.of(parameters));
        }

        /**
         * @param permissions Additional Permissions to attach to the document. See Permissions below for details.
         * 
         * @return builder
         * 
         */
        public Builder permissions(@Nullable Output<Map<String,String>> permissions) {
            $.permissions = permissions;
            return this;
        }

        /**
         * @param permissions Additional Permissions to attach to the document. See Permissions below for details.
         * 
         * @return builder
         * 
         */
        public Builder permissions(Map<String,String> permissions) {
            return permissions(Output.of(permissions));
        }

        /**
         * @param platformTypes A list of OS platforms compatible with this SSM document, either &#34;Windows&#34; or &#34;Linux&#34;.
         * 
         * @return builder
         * 
         */
        public Builder platformTypes(@Nullable Output<List<String>> platformTypes) {
            $.platformTypes = platformTypes;
            return this;
        }

        /**
         * @param platformTypes A list of OS platforms compatible with this SSM document, either &#34;Windows&#34; or &#34;Linux&#34;.
         * 
         * @return builder
         * 
         */
        public Builder platformTypes(List<String> platformTypes) {
            return platformTypes(Output.of(platformTypes));
        }

        /**
         * @param platformTypes A list of OS platforms compatible with this SSM document, either &#34;Windows&#34; or &#34;Linux&#34;.
         * 
         * @return builder
         * 
         */
        public Builder platformTypes(String... platformTypes) {
            return platformTypes(List.of(platformTypes));
        }

        /**
         * @param schemaVersion The schema version of the document.
         * 
         * @return builder
         * 
         */
        public Builder schemaVersion(@Nullable Output<String> schemaVersion) {
            $.schemaVersion = schemaVersion;
            return this;
        }

        /**
         * @param schemaVersion The schema version of the document.
         * 
         * @return builder
         * 
         */
        public Builder schemaVersion(String schemaVersion) {
            return schemaVersion(Output.of(schemaVersion));
        }

        /**
         * @param status &#34;Creating&#34;, &#34;Active&#34; or &#34;Deleting&#34;. The current status of the document.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status &#34;Creating&#34;, &#34;Active&#34; or &#34;Deleting&#34;. The current status of the document.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param tags A map of tags to assign to the object. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A map of tags to assign to the object. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tagsAll A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
         * 
         * @return builder
         * 
         * @deprecated
         * Please use `tags` instead.
         * 
         */
        @Deprecated /* Please use `tags` instead. */
        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        /**
         * @param tagsAll A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
         * 
         * @return builder
         * 
         * @deprecated
         * Please use `tags` instead.
         * 
         */
        @Deprecated /* Please use `tags` instead. */
        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        /**
         * @param targetType The target type which defines the kinds of resources the document can run on. For example, /AWS::EC2::Instance. For a list of valid resource types, see AWS Resource Types Reference (http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html)
         * 
         * @return builder
         * 
         */
        public Builder targetType(@Nullable Output<String> targetType) {
            $.targetType = targetType;
            return this;
        }

        /**
         * @param targetType The target type which defines the kinds of resources the document can run on. For example, /AWS::EC2::Instance. For a list of valid resource types, see AWS Resource Types Reference (http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html)
         * 
         * @return builder
         * 
         */
        public Builder targetType(String targetType) {
            return targetType(Output.of(targetType));
        }

        /**
         * @param versionName A field specifying the version of the artifact you are creating with the document. For example, &#34;Release 12, Update 6&#34;. This value is unique across all versions of a document and cannot be changed for an existing document version.
         * 
         * @return builder
         * 
         */
        public Builder versionName(@Nullable Output<String> versionName) {
            $.versionName = versionName;
            return this;
        }

        /**
         * @param versionName A field specifying the version of the artifact you are creating with the document. For example, &#34;Release 12, Update 6&#34;. This value is unique across all versions of a document and cannot be changed for an existing document version.
         * 
         * @return builder
         * 
         */
        public Builder versionName(String versionName) {
            return versionName(Output.of(versionName));
        }

        public DocumentState build() {
            return $;
        }
    }

}
