// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ecs.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class ServiceDeploymentConfigurationLifecycleHookArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceDeploymentConfigurationLifecycleHookArgs Empty = new ServiceDeploymentConfigurationLifecycleHookArgs();

    /**
     * ARN of the Lambda function to invoke for the lifecycle hook.
     * 
     */
    @Import(name="hookTargetArn", required=true)
    private Output<String> hookTargetArn;

    /**
     * @return ARN of the Lambda function to invoke for the lifecycle hook.
     * 
     */
    public Output<String> hookTargetArn() {
        return this.hookTargetArn;
    }

    /**
     * Stages during the deployment when the hook should be invoked. Valid values: `RECONCILE_SERVICE`, `PRE_SCALE_UP`, `POST_SCALE_UP`, `TEST_TRAFFIC_SHIFT`, `POST_TEST_TRAFFIC_SHIFT`, `PRODUCTION_TRAFFIC_SHIFT`, `POST_PRODUCTION_TRAFFIC_SHIFT`.
     * 
     */
    @Import(name="lifecycleStages", required=true)
    private Output<List<String>> lifecycleStages;

    /**
     * @return Stages during the deployment when the hook should be invoked. Valid values: `RECONCILE_SERVICE`, `PRE_SCALE_UP`, `POST_SCALE_UP`, `TEST_TRAFFIC_SHIFT`, `POST_TEST_TRAFFIC_SHIFT`, `PRODUCTION_TRAFFIC_SHIFT`, `POST_PRODUCTION_TRAFFIC_SHIFT`.
     * 
     */
    public Output<List<String>> lifecycleStages() {
        return this.lifecycleStages;
    }

    /**
     * ARN of the IAM role that grants the service permission to invoke the Lambda function.
     * 
     */
    @Import(name="roleArn", required=true)
    private Output<String> roleArn;

    /**
     * @return ARN of the IAM role that grants the service permission to invoke the Lambda function.
     * 
     */
    public Output<String> roleArn() {
        return this.roleArn;
    }

    private ServiceDeploymentConfigurationLifecycleHookArgs() {}

    private ServiceDeploymentConfigurationLifecycleHookArgs(ServiceDeploymentConfigurationLifecycleHookArgs $) {
        this.hookTargetArn = $.hookTargetArn;
        this.lifecycleStages = $.lifecycleStages;
        this.roleArn = $.roleArn;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceDeploymentConfigurationLifecycleHookArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceDeploymentConfigurationLifecycleHookArgs $;

        public Builder() {
            $ = new ServiceDeploymentConfigurationLifecycleHookArgs();
        }

        public Builder(ServiceDeploymentConfigurationLifecycleHookArgs defaults) {
            $ = new ServiceDeploymentConfigurationLifecycleHookArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param hookTargetArn ARN of the Lambda function to invoke for the lifecycle hook.
         * 
         * @return builder
         * 
         */
        public Builder hookTargetArn(Output<String> hookTargetArn) {
            $.hookTargetArn = hookTargetArn;
            return this;
        }

        /**
         * @param hookTargetArn ARN of the Lambda function to invoke for the lifecycle hook.
         * 
         * @return builder
         * 
         */
        public Builder hookTargetArn(String hookTargetArn) {
            return hookTargetArn(Output.of(hookTargetArn));
        }

        /**
         * @param lifecycleStages Stages during the deployment when the hook should be invoked. Valid values: `RECONCILE_SERVICE`, `PRE_SCALE_UP`, `POST_SCALE_UP`, `TEST_TRAFFIC_SHIFT`, `POST_TEST_TRAFFIC_SHIFT`, `PRODUCTION_TRAFFIC_SHIFT`, `POST_PRODUCTION_TRAFFIC_SHIFT`.
         * 
         * @return builder
         * 
         */
        public Builder lifecycleStages(Output<List<String>> lifecycleStages) {
            $.lifecycleStages = lifecycleStages;
            return this;
        }

        /**
         * @param lifecycleStages Stages during the deployment when the hook should be invoked. Valid values: `RECONCILE_SERVICE`, `PRE_SCALE_UP`, `POST_SCALE_UP`, `TEST_TRAFFIC_SHIFT`, `POST_TEST_TRAFFIC_SHIFT`, `PRODUCTION_TRAFFIC_SHIFT`, `POST_PRODUCTION_TRAFFIC_SHIFT`.
         * 
         * @return builder
         * 
         */
        public Builder lifecycleStages(List<String> lifecycleStages) {
            return lifecycleStages(Output.of(lifecycleStages));
        }

        /**
         * @param lifecycleStages Stages during the deployment when the hook should be invoked. Valid values: `RECONCILE_SERVICE`, `PRE_SCALE_UP`, `POST_SCALE_UP`, `TEST_TRAFFIC_SHIFT`, `POST_TEST_TRAFFIC_SHIFT`, `PRODUCTION_TRAFFIC_SHIFT`, `POST_PRODUCTION_TRAFFIC_SHIFT`.
         * 
         * @return builder
         * 
         */
        public Builder lifecycleStages(String... lifecycleStages) {
            return lifecycleStages(List.of(lifecycleStages));
        }

        /**
         * @param roleArn ARN of the IAM role that grants the service permission to invoke the Lambda function.
         * 
         * @return builder
         * 
         */
        public Builder roleArn(Output<String> roleArn) {
            $.roleArn = roleArn;
            return this;
        }

        /**
         * @param roleArn ARN of the IAM role that grants the service permission to invoke the Lambda function.
         * 
         * @return builder
         * 
         */
        public Builder roleArn(String roleArn) {
            return roleArn(Output.of(roleArn));
        }

        public ServiceDeploymentConfigurationLifecycleHookArgs build() {
            if ($.hookTargetArn == null) {
                throw new MissingRequiredPropertyException("ServiceDeploymentConfigurationLifecycleHookArgs", "hookTargetArn");
            }
            if ($.lifecycleStages == null) {
                throw new MissingRequiredPropertyException("ServiceDeploymentConfigurationLifecycleHookArgs", "lifecycleStages");
            }
            if ($.roleArn == null) {
                throw new MissingRequiredPropertyException("ServiceDeploymentConfigurationLifecycleHookArgs", "roleArn");
            }
            return $;
        }
    }

}
