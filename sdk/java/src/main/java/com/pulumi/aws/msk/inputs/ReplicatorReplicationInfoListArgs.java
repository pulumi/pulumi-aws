// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.msk.inputs;

import com.pulumi.aws.msk.inputs.ReplicatorReplicationInfoListConsumerGroupReplicationArgs;
import com.pulumi.aws.msk.inputs.ReplicatorReplicationInfoListTopicReplicationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ReplicatorReplicationInfoListArgs extends com.pulumi.resources.ResourceArgs {

    public static final ReplicatorReplicationInfoListArgs Empty = new ReplicatorReplicationInfoListArgs();

    /**
     * Confguration relating to consumer group replication.
     * 
     */
    @Import(name="consumerGroupReplications", required=true)
    private Output<List<ReplicatorReplicationInfoListConsumerGroupReplicationArgs>> consumerGroupReplications;

    /**
     * @return Confguration relating to consumer group replication.
     * 
     */
    public Output<List<ReplicatorReplicationInfoListConsumerGroupReplicationArgs>> consumerGroupReplications() {
        return this.consumerGroupReplications;
    }

    @Import(name="sourceKafkaClusterAlias")
    private @Nullable Output<String> sourceKafkaClusterAlias;

    public Optional<Output<String>> sourceKafkaClusterAlias() {
        return Optional.ofNullable(this.sourceKafkaClusterAlias);
    }

    /**
     * The ARN of the source Kafka cluster.
     * 
     */
    @Import(name="sourceKafkaClusterArn", required=true)
    private Output<String> sourceKafkaClusterArn;

    /**
     * @return The ARN of the source Kafka cluster.
     * 
     */
    public Output<String> sourceKafkaClusterArn() {
        return this.sourceKafkaClusterArn;
    }

    /**
     * The type of compression to use writing records to target Kafka cluster.
     * 
     */
    @Import(name="targetCompressionType", required=true)
    private Output<String> targetCompressionType;

    /**
     * @return The type of compression to use writing records to target Kafka cluster.
     * 
     */
    public Output<String> targetCompressionType() {
        return this.targetCompressionType;
    }

    @Import(name="targetKafkaClusterAlias")
    private @Nullable Output<String> targetKafkaClusterAlias;

    public Optional<Output<String>> targetKafkaClusterAlias() {
        return Optional.ofNullable(this.targetKafkaClusterAlias);
    }

    /**
     * The ARN of the target Kafka cluster.
     * 
     */
    @Import(name="targetKafkaClusterArn", required=true)
    private Output<String> targetKafkaClusterArn;

    /**
     * @return The ARN of the target Kafka cluster.
     * 
     */
    public Output<String> targetKafkaClusterArn() {
        return this.targetKafkaClusterArn;
    }

    /**
     * Configuration relating to topic replication.
     * 
     */
    @Import(name="topicReplications", required=true)
    private Output<List<ReplicatorReplicationInfoListTopicReplicationArgs>> topicReplications;

    /**
     * @return Configuration relating to topic replication.
     * 
     */
    public Output<List<ReplicatorReplicationInfoListTopicReplicationArgs>> topicReplications() {
        return this.topicReplications;
    }

    private ReplicatorReplicationInfoListArgs() {}

    private ReplicatorReplicationInfoListArgs(ReplicatorReplicationInfoListArgs $) {
        this.consumerGroupReplications = $.consumerGroupReplications;
        this.sourceKafkaClusterAlias = $.sourceKafkaClusterAlias;
        this.sourceKafkaClusterArn = $.sourceKafkaClusterArn;
        this.targetCompressionType = $.targetCompressionType;
        this.targetKafkaClusterAlias = $.targetKafkaClusterAlias;
        this.targetKafkaClusterArn = $.targetKafkaClusterArn;
        this.topicReplications = $.topicReplications;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ReplicatorReplicationInfoListArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ReplicatorReplicationInfoListArgs $;

        public Builder() {
            $ = new ReplicatorReplicationInfoListArgs();
        }

        public Builder(ReplicatorReplicationInfoListArgs defaults) {
            $ = new ReplicatorReplicationInfoListArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param consumerGroupReplications Confguration relating to consumer group replication.
         * 
         * @return builder
         * 
         */
        public Builder consumerGroupReplications(Output<List<ReplicatorReplicationInfoListConsumerGroupReplicationArgs>> consumerGroupReplications) {
            $.consumerGroupReplications = consumerGroupReplications;
            return this;
        }

        /**
         * @param consumerGroupReplications Confguration relating to consumer group replication.
         * 
         * @return builder
         * 
         */
        public Builder consumerGroupReplications(List<ReplicatorReplicationInfoListConsumerGroupReplicationArgs> consumerGroupReplications) {
            return consumerGroupReplications(Output.of(consumerGroupReplications));
        }

        /**
         * @param consumerGroupReplications Confguration relating to consumer group replication.
         * 
         * @return builder
         * 
         */
        public Builder consumerGroupReplications(ReplicatorReplicationInfoListConsumerGroupReplicationArgs... consumerGroupReplications) {
            return consumerGroupReplications(List.of(consumerGroupReplications));
        }

        public Builder sourceKafkaClusterAlias(@Nullable Output<String> sourceKafkaClusterAlias) {
            $.sourceKafkaClusterAlias = sourceKafkaClusterAlias;
            return this;
        }

        public Builder sourceKafkaClusterAlias(String sourceKafkaClusterAlias) {
            return sourceKafkaClusterAlias(Output.of(sourceKafkaClusterAlias));
        }

        /**
         * @param sourceKafkaClusterArn The ARN of the source Kafka cluster.
         * 
         * @return builder
         * 
         */
        public Builder sourceKafkaClusterArn(Output<String> sourceKafkaClusterArn) {
            $.sourceKafkaClusterArn = sourceKafkaClusterArn;
            return this;
        }

        /**
         * @param sourceKafkaClusterArn The ARN of the source Kafka cluster.
         * 
         * @return builder
         * 
         */
        public Builder sourceKafkaClusterArn(String sourceKafkaClusterArn) {
            return sourceKafkaClusterArn(Output.of(sourceKafkaClusterArn));
        }

        /**
         * @param targetCompressionType The type of compression to use writing records to target Kafka cluster.
         * 
         * @return builder
         * 
         */
        public Builder targetCompressionType(Output<String> targetCompressionType) {
            $.targetCompressionType = targetCompressionType;
            return this;
        }

        /**
         * @param targetCompressionType The type of compression to use writing records to target Kafka cluster.
         * 
         * @return builder
         * 
         */
        public Builder targetCompressionType(String targetCompressionType) {
            return targetCompressionType(Output.of(targetCompressionType));
        }

        public Builder targetKafkaClusterAlias(@Nullable Output<String> targetKafkaClusterAlias) {
            $.targetKafkaClusterAlias = targetKafkaClusterAlias;
            return this;
        }

        public Builder targetKafkaClusterAlias(String targetKafkaClusterAlias) {
            return targetKafkaClusterAlias(Output.of(targetKafkaClusterAlias));
        }

        /**
         * @param targetKafkaClusterArn The ARN of the target Kafka cluster.
         * 
         * @return builder
         * 
         */
        public Builder targetKafkaClusterArn(Output<String> targetKafkaClusterArn) {
            $.targetKafkaClusterArn = targetKafkaClusterArn;
            return this;
        }

        /**
         * @param targetKafkaClusterArn The ARN of the target Kafka cluster.
         * 
         * @return builder
         * 
         */
        public Builder targetKafkaClusterArn(String targetKafkaClusterArn) {
            return targetKafkaClusterArn(Output.of(targetKafkaClusterArn));
        }

        /**
         * @param topicReplications Configuration relating to topic replication.
         * 
         * @return builder
         * 
         */
        public Builder topicReplications(Output<List<ReplicatorReplicationInfoListTopicReplicationArgs>> topicReplications) {
            $.topicReplications = topicReplications;
            return this;
        }

        /**
         * @param topicReplications Configuration relating to topic replication.
         * 
         * @return builder
         * 
         */
        public Builder topicReplications(List<ReplicatorReplicationInfoListTopicReplicationArgs> topicReplications) {
            return topicReplications(Output.of(topicReplications));
        }

        /**
         * @param topicReplications Configuration relating to topic replication.
         * 
         * @return builder
         * 
         */
        public Builder topicReplications(ReplicatorReplicationInfoListTopicReplicationArgs... topicReplications) {
            return topicReplications(List.of(topicReplications));
        }

        public ReplicatorReplicationInfoListArgs build() {
            if ($.consumerGroupReplications == null) {
                throw new MissingRequiredPropertyException("ReplicatorReplicationInfoListArgs", "consumerGroupReplications");
            }
            if ($.sourceKafkaClusterArn == null) {
                throw new MissingRequiredPropertyException("ReplicatorReplicationInfoListArgs", "sourceKafkaClusterArn");
            }
            if ($.targetCompressionType == null) {
                throw new MissingRequiredPropertyException("ReplicatorReplicationInfoListArgs", "targetCompressionType");
            }
            if ($.targetKafkaClusterArn == null) {
                throw new MissingRequiredPropertyException("ReplicatorReplicationInfoListArgs", "targetKafkaClusterArn");
            }
            if ($.topicReplications == null) {
                throw new MissingRequiredPropertyException("ReplicatorReplicationInfoListArgs", "topicReplications");
            }
            return $;
        }
    }

}
