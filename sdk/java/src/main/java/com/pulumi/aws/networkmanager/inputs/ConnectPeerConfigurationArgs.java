// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.networkmanager.inputs;

import com.pulumi.aws.networkmanager.inputs.ConnectPeerConfigurationBgpConfigurationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConnectPeerConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConnectPeerConfigurationArgs Empty = new ConnectPeerConfigurationArgs();

    @Import(name="bgpConfigurations")
    private @Nullable Output<List<ConnectPeerConfigurationBgpConfigurationArgs>> bgpConfigurations;

    public Optional<Output<List<ConnectPeerConfigurationBgpConfigurationArgs>>> bgpConfigurations() {
        return Optional.ofNullable(this.bgpConfigurations);
    }

    /**
     * A Connect peer core network address.
     * 
     */
    @Import(name="coreNetworkAddress")
    private @Nullable Output<String> coreNetworkAddress;

    /**
     * @return A Connect peer core network address.
     * 
     */
    public Optional<Output<String>> coreNetworkAddress() {
        return Optional.ofNullable(this.coreNetworkAddress);
    }

    /**
     * The inside IP addresses used for BGP peering.
     * 
     */
    @Import(name="insideCidrBlocks")
    private @Nullable Output<List<String>> insideCidrBlocks;

    /**
     * @return The inside IP addresses used for BGP peering.
     * 
     */
    public Optional<Output<List<String>>> insideCidrBlocks() {
        return Optional.ofNullable(this.insideCidrBlocks);
    }

    /**
     * The Connect peer address.
     * 
     */
    @Import(name="peerAddress")
    private @Nullable Output<String> peerAddress;

    /**
     * @return The Connect peer address.
     * 
     */
    public Optional<Output<String>> peerAddress() {
        return Optional.ofNullable(this.peerAddress);
    }

    @Import(name="protocol")
    private @Nullable Output<String> protocol;

    public Optional<Output<String>> protocol() {
        return Optional.ofNullable(this.protocol);
    }

    private ConnectPeerConfigurationArgs() {}

    private ConnectPeerConfigurationArgs(ConnectPeerConfigurationArgs $) {
        this.bgpConfigurations = $.bgpConfigurations;
        this.coreNetworkAddress = $.coreNetworkAddress;
        this.insideCidrBlocks = $.insideCidrBlocks;
        this.peerAddress = $.peerAddress;
        this.protocol = $.protocol;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectPeerConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectPeerConfigurationArgs $;

        public Builder() {
            $ = new ConnectPeerConfigurationArgs();
        }

        public Builder(ConnectPeerConfigurationArgs defaults) {
            $ = new ConnectPeerConfigurationArgs(Objects.requireNonNull(defaults));
        }

        public Builder bgpConfigurations(@Nullable Output<List<ConnectPeerConfigurationBgpConfigurationArgs>> bgpConfigurations) {
            $.bgpConfigurations = bgpConfigurations;
            return this;
        }

        public Builder bgpConfigurations(List<ConnectPeerConfigurationBgpConfigurationArgs> bgpConfigurations) {
            return bgpConfigurations(Output.of(bgpConfigurations));
        }

        public Builder bgpConfigurations(ConnectPeerConfigurationBgpConfigurationArgs... bgpConfigurations) {
            return bgpConfigurations(List.of(bgpConfigurations));
        }

        /**
         * @param coreNetworkAddress A Connect peer core network address.
         * 
         * @return builder
         * 
         */
        public Builder coreNetworkAddress(@Nullable Output<String> coreNetworkAddress) {
            $.coreNetworkAddress = coreNetworkAddress;
            return this;
        }

        /**
         * @param coreNetworkAddress A Connect peer core network address.
         * 
         * @return builder
         * 
         */
        public Builder coreNetworkAddress(String coreNetworkAddress) {
            return coreNetworkAddress(Output.of(coreNetworkAddress));
        }

        /**
         * @param insideCidrBlocks The inside IP addresses used for BGP peering.
         * 
         * @return builder
         * 
         */
        public Builder insideCidrBlocks(@Nullable Output<List<String>> insideCidrBlocks) {
            $.insideCidrBlocks = insideCidrBlocks;
            return this;
        }

        /**
         * @param insideCidrBlocks The inside IP addresses used for BGP peering.
         * 
         * @return builder
         * 
         */
        public Builder insideCidrBlocks(List<String> insideCidrBlocks) {
            return insideCidrBlocks(Output.of(insideCidrBlocks));
        }

        /**
         * @param insideCidrBlocks The inside IP addresses used for BGP peering.
         * 
         * @return builder
         * 
         */
        public Builder insideCidrBlocks(String... insideCidrBlocks) {
            return insideCidrBlocks(List.of(insideCidrBlocks));
        }

        /**
         * @param peerAddress The Connect peer address.
         * 
         * @return builder
         * 
         */
        public Builder peerAddress(@Nullable Output<String> peerAddress) {
            $.peerAddress = peerAddress;
            return this;
        }

        /**
         * @param peerAddress The Connect peer address.
         * 
         * @return builder
         * 
         */
        public Builder peerAddress(String peerAddress) {
            return peerAddress(Output.of(peerAddress));
        }

        public Builder protocol(@Nullable Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        public ConnectPeerConfigurationArgs build() {
            return $;
        }
    }

}
