// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.outputs;

import com.pulumi.aws.quicksight.outputs.ContributionAnalysisDefaultsContributorDimension;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class ContributionAnalysisDefaults {
    private List<ContributionAnalysisDefaultsContributorDimension> contributorDimensions;
    private String measureFieldId;

    private ContributionAnalysisDefaults() {}
    public List<ContributionAnalysisDefaultsContributorDimension> contributorDimensions() {
        return this.contributorDimensions;
    }
    public String measureFieldId() {
        return this.measureFieldId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ContributionAnalysisDefaults defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<ContributionAnalysisDefaultsContributorDimension> contributorDimensions;
        private String measureFieldId;
        public Builder() {}
        public Builder(ContributionAnalysisDefaults defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.contributorDimensions = defaults.contributorDimensions;
    	      this.measureFieldId = defaults.measureFieldId;
        }

        @CustomType.Setter
        public Builder contributorDimensions(List<ContributionAnalysisDefaultsContributorDimension> contributorDimensions) {
            if (contributorDimensions == null) {
              throw new MissingRequiredPropertyException("ContributionAnalysisDefaults", "contributorDimensions");
            }
            this.contributorDimensions = contributorDimensions;
            return this;
        }
        public Builder contributorDimensions(ContributionAnalysisDefaultsContributorDimension... contributorDimensions) {
            return contributorDimensions(List.of(contributorDimensions));
        }
        @CustomType.Setter
        public Builder measureFieldId(String measureFieldId) {
            if (measureFieldId == null) {
              throw new MissingRequiredPropertyException("ContributionAnalysisDefaults", "measureFieldId");
            }
            this.measureFieldId = measureFieldId;
            return this;
        }
        public ContributionAnalysisDefaults build() {
            final var _resultValue = new ContributionAnalysisDefaults();
            _resultValue.contributorDimensions = contributorDimensions;
            _resultValue.measureFieldId = measureFieldId;
            return _resultValue;
        }
    }
}
