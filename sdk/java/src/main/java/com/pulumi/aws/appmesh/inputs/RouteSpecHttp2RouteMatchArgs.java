// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.appmesh.inputs;

import com.pulumi.aws.appmesh.inputs.RouteSpecHttp2RouteMatchHeaderArgs;
import com.pulumi.aws.appmesh.inputs.RouteSpecHttp2RouteMatchPathArgs;
import com.pulumi.aws.appmesh.inputs.RouteSpecHttp2RouteMatchQueryParameterArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RouteSpecHttp2RouteMatchArgs extends com.pulumi.resources.ResourceArgs {

    public static final RouteSpecHttp2RouteMatchArgs Empty = new RouteSpecHttp2RouteMatchArgs();

    /**
     * Client request headers to match on.
     * 
     */
    @Import(name="headers")
    private @Nullable Output<List<RouteSpecHttp2RouteMatchHeaderArgs>> headers;

    /**
     * @return Client request headers to match on.
     * 
     */
    public Optional<Output<List<RouteSpecHttp2RouteMatchHeaderArgs>>> headers() {
        return Optional.ofNullable(this.headers);
    }

    /**
     * Client request header method to match on. Valid values: `GET`, `HEAD`, `POST`, `PUT`, `DELETE`, `CONNECT`, `OPTIONS`, `TRACE`, `PATCH`.
     * 
     */
    @Import(name="method")
    private @Nullable Output<String> method;

    /**
     * @return Client request header method to match on. Valid values: `GET`, `HEAD`, `POST`, `PUT`, `DELETE`, `CONNECT`, `OPTIONS`, `TRACE`, `PATCH`.
     * 
     */
    public Optional<Output<String>> method() {
        return Optional.ofNullable(this.method);
    }

    /**
     * Client request path to match on.
     * 
     */
    @Import(name="path")
    private @Nullable Output<RouteSpecHttp2RouteMatchPathArgs> path;

    /**
     * @return Client request path to match on.
     * 
     */
    public Optional<Output<RouteSpecHttp2RouteMatchPathArgs>> path() {
        return Optional.ofNullable(this.path);
    }

    /**
     * The port number to match from the request.
     * 
     */
    @Import(name="port")
    private @Nullable Output<Integer> port;

    /**
     * @return The port number to match from the request.
     * 
     */
    public Optional<Output<Integer>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * Value sent by the client must begin with the specified characters. Must be between 1 and 255 characters in length.
     * This parameter must always start with /, which by itself matches all requests to the virtual router service name.
     * 
     */
    @Import(name="prefix")
    private @Nullable Output<String> prefix;

    /**
     * @return Value sent by the client must begin with the specified characters. Must be between 1 and 255 characters in length.
     * This parameter must always start with /, which by itself matches all requests to the virtual router service name.
     * 
     */
    public Optional<Output<String>> prefix() {
        return Optional.ofNullable(this.prefix);
    }

    /**
     * Client request query parameters to match on.
     * 
     */
    @Import(name="queryParameters")
    private @Nullable Output<List<RouteSpecHttp2RouteMatchQueryParameterArgs>> queryParameters;

    /**
     * @return Client request query parameters to match on.
     * 
     */
    public Optional<Output<List<RouteSpecHttp2RouteMatchQueryParameterArgs>>> queryParameters() {
        return Optional.ofNullable(this.queryParameters);
    }

    /**
     * Client request header scheme to match on. Valid values: `http`, `https`.
     * 
     */
    @Import(name="scheme")
    private @Nullable Output<String> scheme;

    /**
     * @return Client request header scheme to match on. Valid values: `http`, `https`.
     * 
     */
    public Optional<Output<String>> scheme() {
        return Optional.ofNullable(this.scheme);
    }

    private RouteSpecHttp2RouteMatchArgs() {}

    private RouteSpecHttp2RouteMatchArgs(RouteSpecHttp2RouteMatchArgs $) {
        this.headers = $.headers;
        this.method = $.method;
        this.path = $.path;
        this.port = $.port;
        this.prefix = $.prefix;
        this.queryParameters = $.queryParameters;
        this.scheme = $.scheme;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RouteSpecHttp2RouteMatchArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RouteSpecHttp2RouteMatchArgs $;

        public Builder() {
            $ = new RouteSpecHttp2RouteMatchArgs();
        }

        public Builder(RouteSpecHttp2RouteMatchArgs defaults) {
            $ = new RouteSpecHttp2RouteMatchArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param headers Client request headers to match on.
         * 
         * @return builder
         * 
         */
        public Builder headers(@Nullable Output<List<RouteSpecHttp2RouteMatchHeaderArgs>> headers) {
            $.headers = headers;
            return this;
        }

        /**
         * @param headers Client request headers to match on.
         * 
         * @return builder
         * 
         */
        public Builder headers(List<RouteSpecHttp2RouteMatchHeaderArgs> headers) {
            return headers(Output.of(headers));
        }

        /**
         * @param headers Client request headers to match on.
         * 
         * @return builder
         * 
         */
        public Builder headers(RouteSpecHttp2RouteMatchHeaderArgs... headers) {
            return headers(List.of(headers));
        }

        /**
         * @param method Client request header method to match on. Valid values: `GET`, `HEAD`, `POST`, `PUT`, `DELETE`, `CONNECT`, `OPTIONS`, `TRACE`, `PATCH`.
         * 
         * @return builder
         * 
         */
        public Builder method(@Nullable Output<String> method) {
            $.method = method;
            return this;
        }

        /**
         * @param method Client request header method to match on. Valid values: `GET`, `HEAD`, `POST`, `PUT`, `DELETE`, `CONNECT`, `OPTIONS`, `TRACE`, `PATCH`.
         * 
         * @return builder
         * 
         */
        public Builder method(String method) {
            return method(Output.of(method));
        }

        /**
         * @param path Client request path to match on.
         * 
         * @return builder
         * 
         */
        public Builder path(@Nullable Output<RouteSpecHttp2RouteMatchPathArgs> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path Client request path to match on.
         * 
         * @return builder
         * 
         */
        public Builder path(RouteSpecHttp2RouteMatchPathArgs path) {
            return path(Output.of(path));
        }

        /**
         * @param port The port number to match from the request.
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port The port number to match from the request.
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param prefix Value sent by the client must begin with the specified characters. Must be between 1 and 255 characters in length.
         * This parameter must always start with /, which by itself matches all requests to the virtual router service name.
         * 
         * @return builder
         * 
         */
        public Builder prefix(@Nullable Output<String> prefix) {
            $.prefix = prefix;
            return this;
        }

        /**
         * @param prefix Value sent by the client must begin with the specified characters. Must be between 1 and 255 characters in length.
         * This parameter must always start with /, which by itself matches all requests to the virtual router service name.
         * 
         * @return builder
         * 
         */
        public Builder prefix(String prefix) {
            return prefix(Output.of(prefix));
        }

        /**
         * @param queryParameters Client request query parameters to match on.
         * 
         * @return builder
         * 
         */
        public Builder queryParameters(@Nullable Output<List<RouteSpecHttp2RouteMatchQueryParameterArgs>> queryParameters) {
            $.queryParameters = queryParameters;
            return this;
        }

        /**
         * @param queryParameters Client request query parameters to match on.
         * 
         * @return builder
         * 
         */
        public Builder queryParameters(List<RouteSpecHttp2RouteMatchQueryParameterArgs> queryParameters) {
            return queryParameters(Output.of(queryParameters));
        }

        /**
         * @param queryParameters Client request query parameters to match on.
         * 
         * @return builder
         * 
         */
        public Builder queryParameters(RouteSpecHttp2RouteMatchQueryParameterArgs... queryParameters) {
            return queryParameters(List.of(queryParameters));
        }

        /**
         * @param scheme Client request header scheme to match on. Valid values: `http`, `https`.
         * 
         * @return builder
         * 
         */
        public Builder scheme(@Nullable Output<String> scheme) {
            $.scheme = scheme;
            return this;
        }

        /**
         * @param scheme Client request header scheme to match on. Valid values: `http`, `https`.
         * 
         * @return builder
         * 
         */
        public Builder scheme(String scheme) {
            return scheme(Output.of(scheme));
        }

        public RouteSpecHttp2RouteMatchArgs build() {
            return $;
        }
    }

}
