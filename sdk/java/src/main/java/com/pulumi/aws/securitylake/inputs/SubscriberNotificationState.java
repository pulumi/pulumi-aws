// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.securitylake.inputs;

import com.pulumi.aws.securitylake.inputs.SubscriberNotificationConfigurationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SubscriberNotificationState extends com.pulumi.resources.ResourceArgs {

    public static final SubscriberNotificationState Empty = new SubscriberNotificationState();

    /**
     * Specify the configuration using which you want to create the subscriber notification..
     * 
     */
    @Import(name="configuration")
    private @Nullable Output<SubscriberNotificationConfigurationArgs> configuration;

    /**
     * @return Specify the configuration using which you want to create the subscriber notification..
     * 
     */
    public Optional<Output<SubscriberNotificationConfigurationArgs>> configuration() {
        return Optional.ofNullable(this.configuration);
    }

    @Import(name="endpointId")
    private @Nullable Output<String> endpointId;

    public Optional<Output<String>> endpointId() {
        return Optional.ofNullable(this.endpointId);
    }

    /**
     * The subscriber ID for the notification subscription.
     * 
     */
    @Import(name="subscriberId")
    private @Nullable Output<String> subscriberId;

    /**
     * @return The subscriber ID for the notification subscription.
     * 
     */
    public Optional<Output<String>> subscriberId() {
        return Optional.ofNullable(this.subscriberId);
    }

    private SubscriberNotificationState() {}

    private SubscriberNotificationState(SubscriberNotificationState $) {
        this.configuration = $.configuration;
        this.endpointId = $.endpointId;
        this.subscriberId = $.subscriberId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SubscriberNotificationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SubscriberNotificationState $;

        public Builder() {
            $ = new SubscriberNotificationState();
        }

        public Builder(SubscriberNotificationState defaults) {
            $ = new SubscriberNotificationState(Objects.requireNonNull(defaults));
        }

        /**
         * @param configuration Specify the configuration using which you want to create the subscriber notification..
         * 
         * @return builder
         * 
         */
        public Builder configuration(@Nullable Output<SubscriberNotificationConfigurationArgs> configuration) {
            $.configuration = configuration;
            return this;
        }

        /**
         * @param configuration Specify the configuration using which you want to create the subscriber notification..
         * 
         * @return builder
         * 
         */
        public Builder configuration(SubscriberNotificationConfigurationArgs configuration) {
            return configuration(Output.of(configuration));
        }

        public Builder endpointId(@Nullable Output<String> endpointId) {
            $.endpointId = endpointId;
            return this;
        }

        public Builder endpointId(String endpointId) {
            return endpointId(Output.of(endpointId));
        }

        /**
         * @param subscriberId The subscriber ID for the notification subscription.
         * 
         * @return builder
         * 
         */
        public Builder subscriberId(@Nullable Output<String> subscriberId) {
            $.subscriberId = subscriberId;
            return this;
        }

        /**
         * @param subscriberId The subscriber ID for the notification subscription.
         * 
         * @return builder
         * 
         */
        public Builder subscriberId(String subscriberId) {
            return subscriberId(Output.of(subscriberId));
        }

        public SubscriberNotificationState build() {
            return $;
        }
    }

}
