// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.lex.inputs;

import com.pulumi.aws.lex.inputs.IntentFollowUpPromptPromptArgs;
import com.pulumi.aws.lex.inputs.IntentFollowUpPromptRejectionStatementArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.util.Objects;


public final class IntentFollowUpPromptArgs extends com.pulumi.resources.ResourceArgs {

    public static final IntentFollowUpPromptArgs Empty = new IntentFollowUpPromptArgs();

    /**
     * Prompts for information from the user. Attributes are documented under prompt.
     * 
     */
    @Import(name="prompt", required=true)
    private Output<IntentFollowUpPromptPromptArgs> prompt;

    /**
     * @return Prompts for information from the user. Attributes are documented under prompt.
     * 
     */
    public Output<IntentFollowUpPromptPromptArgs> prompt() {
        return this.prompt;
    }

    /**
     * If the user answers &#34;no&#34; to the question defined in the prompt field,
     * Amazon Lex responds with this statement to acknowledge that the intent was canceled. Attributes are
     * documented below under statement.
     * 
     */
    @Import(name="rejectionStatement", required=true)
    private Output<IntentFollowUpPromptRejectionStatementArgs> rejectionStatement;

    /**
     * @return If the user answers &#34;no&#34; to the question defined in the prompt field,
     * Amazon Lex responds with this statement to acknowledge that the intent was canceled. Attributes are
     * documented below under statement.
     * 
     */
    public Output<IntentFollowUpPromptRejectionStatementArgs> rejectionStatement() {
        return this.rejectionStatement;
    }

    private IntentFollowUpPromptArgs() {}

    private IntentFollowUpPromptArgs(IntentFollowUpPromptArgs $) {
        this.prompt = $.prompt;
        this.rejectionStatement = $.rejectionStatement;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IntentFollowUpPromptArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IntentFollowUpPromptArgs $;

        public Builder() {
            $ = new IntentFollowUpPromptArgs();
        }

        public Builder(IntentFollowUpPromptArgs defaults) {
            $ = new IntentFollowUpPromptArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param prompt Prompts for information from the user. Attributes are documented under prompt.
         * 
         * @return builder
         * 
         */
        public Builder prompt(Output<IntentFollowUpPromptPromptArgs> prompt) {
            $.prompt = prompt;
            return this;
        }

        /**
         * @param prompt Prompts for information from the user. Attributes are documented under prompt.
         * 
         * @return builder
         * 
         */
        public Builder prompt(IntentFollowUpPromptPromptArgs prompt) {
            return prompt(Output.of(prompt));
        }

        /**
         * @param rejectionStatement If the user answers &#34;no&#34; to the question defined in the prompt field,
         * Amazon Lex responds with this statement to acknowledge that the intent was canceled. Attributes are
         * documented below under statement.
         * 
         * @return builder
         * 
         */
        public Builder rejectionStatement(Output<IntentFollowUpPromptRejectionStatementArgs> rejectionStatement) {
            $.rejectionStatement = rejectionStatement;
            return this;
        }

        /**
         * @param rejectionStatement If the user answers &#34;no&#34; to the question defined in the prompt field,
         * Amazon Lex responds with this statement to acknowledge that the intent was canceled. Attributes are
         * documented below under statement.
         * 
         * @return builder
         * 
         */
        public Builder rejectionStatement(IntentFollowUpPromptRejectionStatementArgs rejectionStatement) {
            return rejectionStatement(Output.of(rejectionStatement));
        }

        public IntentFollowUpPromptArgs build() {
            if ($.prompt == null) {
                throw new MissingRequiredPropertyException("IntentFollowUpPromptArgs", "prompt");
            }
            if ($.rejectionStatement == null) {
                throw new MissingRequiredPropertyException("IntentFollowUpPromptArgs", "rejectionStatement");
            }
            return $;
        }
    }

}
