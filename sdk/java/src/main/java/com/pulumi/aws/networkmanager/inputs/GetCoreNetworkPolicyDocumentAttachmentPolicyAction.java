// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.networkmanager.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetCoreNetworkPolicyDocumentAttachmentPolicyAction extends com.pulumi.resources.InvokeArgs {

    public static final GetCoreNetworkPolicyDocumentAttachmentPolicyAction Empty = new GetCoreNetworkPolicyDocumentAttachmentPolicyAction();

    /**
     * Defines how a segment is mapped. Values can be `constant` or `tag`. `constant` statically defines the segment to associate the attachment to. `tag` uses the value of a tag to dynamically try to map to a segment.reference_policies_elements_condition_operators.html) to evaluate.
     * 
     */
    @Import(name="associationMethod", required=true)
    private String associationMethod;

    /**
     * @return Defines how a segment is mapped. Values can be `constant` or `tag`. `constant` statically defines the segment to associate the attachment to. `tag` uses the value of a tag to dynamically try to map to a segment.reference_policies_elements_condition_operators.html) to evaluate.
     * 
     */
    public String associationMethod() {
        return this.associationMethod;
    }

    /**
     * Determines if this mapping should override the segment value for `require_attachment_acceptance`. You can only set this to `true`, indicating that this setting applies only to segments that have `require_attachment_acceptance` set to `false`. If the segment already has the default `require_attachment_acceptance`, you can set this to inherit segment’s acceptance value.
     * 
     */
    @Import(name="requireAcceptance")
    private @Nullable Boolean requireAcceptance;

    /**
     * @return Determines if this mapping should override the segment value for `require_attachment_acceptance`. You can only set this to `true`, indicating that this setting applies only to segments that have `require_attachment_acceptance` set to `false`. If the segment already has the default `require_attachment_acceptance`, you can set this to inherit segment’s acceptance value.
     * 
     */
    public Optional<Boolean> requireAcceptance() {
        return Optional.ofNullable(this.requireAcceptance);
    }

    /**
     * Name of the segment.
     * 
     */
    @Import(name="segment")
    private @Nullable String segment;

    /**
     * @return Name of the segment.
     * 
     */
    public Optional<String> segment() {
        return Optional.ofNullable(this.segment);
    }

    /**
     * Maps the attachment to the value of a known key. This is used with the `association_method` is `tag`. For example a `tag` of `stage = “test”`, will map to a segment named `test`. The value must exactly match the name of a segment. This allows you to have many segments, but use only a single rule without having to define multiple nearly identical conditions. This prevents creating many similar conditions that all use the same keys to map to segments.
     * 
     */
    @Import(name="tagValueOfKey")
    private @Nullable String tagValueOfKey;

    /**
     * @return Maps the attachment to the value of a known key. This is used with the `association_method` is `tag`. For example a `tag` of `stage = “test”`, will map to a segment named `test`. The value must exactly match the name of a segment. This allows you to have many segments, but use only a single rule without having to define multiple nearly identical conditions. This prevents creating many similar conditions that all use the same keys to map to segments.
     * 
     */
    public Optional<String> tagValueOfKey() {
        return Optional.ofNullable(this.tagValueOfKey);
    }

    private GetCoreNetworkPolicyDocumentAttachmentPolicyAction() {}

    private GetCoreNetworkPolicyDocumentAttachmentPolicyAction(GetCoreNetworkPolicyDocumentAttachmentPolicyAction $) {
        this.associationMethod = $.associationMethod;
        this.requireAcceptance = $.requireAcceptance;
        this.segment = $.segment;
        this.tagValueOfKey = $.tagValueOfKey;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetCoreNetworkPolicyDocumentAttachmentPolicyAction defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetCoreNetworkPolicyDocumentAttachmentPolicyAction $;

        public Builder() {
            $ = new GetCoreNetworkPolicyDocumentAttachmentPolicyAction();
        }

        public Builder(GetCoreNetworkPolicyDocumentAttachmentPolicyAction defaults) {
            $ = new GetCoreNetworkPolicyDocumentAttachmentPolicyAction(Objects.requireNonNull(defaults));
        }

        /**
         * @param associationMethod Defines how a segment is mapped. Values can be `constant` or `tag`. `constant` statically defines the segment to associate the attachment to. `tag` uses the value of a tag to dynamically try to map to a segment.reference_policies_elements_condition_operators.html) to evaluate.
         * 
         * @return builder
         * 
         */
        public Builder associationMethod(String associationMethod) {
            $.associationMethod = associationMethod;
            return this;
        }

        /**
         * @param requireAcceptance Determines if this mapping should override the segment value for `require_attachment_acceptance`. You can only set this to `true`, indicating that this setting applies only to segments that have `require_attachment_acceptance` set to `false`. If the segment already has the default `require_attachment_acceptance`, you can set this to inherit segment’s acceptance value.
         * 
         * @return builder
         * 
         */
        public Builder requireAcceptance(@Nullable Boolean requireAcceptance) {
            $.requireAcceptance = requireAcceptance;
            return this;
        }

        /**
         * @param segment Name of the segment.
         * 
         * @return builder
         * 
         */
        public Builder segment(@Nullable String segment) {
            $.segment = segment;
            return this;
        }

        /**
         * @param tagValueOfKey Maps the attachment to the value of a known key. This is used with the `association_method` is `tag`. For example a `tag` of `stage = “test”`, will map to a segment named `test`. The value must exactly match the name of a segment. This allows you to have many segments, but use only a single rule without having to define multiple nearly identical conditions. This prevents creating many similar conditions that all use the same keys to map to segments.
         * 
         * @return builder
         * 
         */
        public Builder tagValueOfKey(@Nullable String tagValueOfKey) {
            $.tagValueOfKey = tagValueOfKey;
            return this;
        }

        public GetCoreNetworkPolicyDocumentAttachmentPolicyAction build() {
            $.associationMethod = Objects.requireNonNull($.associationMethod, "expected parameter 'associationMethod' to be non-null");
            return $;
        }
    }

}
