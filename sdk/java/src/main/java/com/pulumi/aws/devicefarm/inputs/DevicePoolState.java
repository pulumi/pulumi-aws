// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.devicefarm.inputs;

import com.pulumi.aws.devicefarm.inputs.DevicePoolRuleArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DevicePoolState extends com.pulumi.resources.ResourceArgs {

    public static final DevicePoolState Empty = new DevicePoolState();

    @Import(name="arn")
    private @Nullable Output<String> arn;

    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="maxDevices")
    private @Nullable Output<Integer> maxDevices;

    public Optional<Output<Integer>> maxDevices() {
        return Optional.ofNullable(this.maxDevices);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="projectArn")
    private @Nullable Output<String> projectArn;

    public Optional<Output<String>> projectArn() {
        return Optional.ofNullable(this.projectArn);
    }

    @Import(name="rules")
    private @Nullable Output<List<DevicePoolRuleArgs>> rules;

    public Optional<Output<List<DevicePoolRuleArgs>>> rules() {
        return Optional.ofNullable(this.rules);
    }

    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    @Import(name="type")
    private @Nullable Output<String> type;

    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private DevicePoolState() {}

    private DevicePoolState(DevicePoolState $) {
        this.arn = $.arn;
        this.description = $.description;
        this.maxDevices = $.maxDevices;
        this.name = $.name;
        this.projectArn = $.projectArn;
        this.rules = $.rules;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DevicePoolState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DevicePoolState $;

        public Builder() {
            $ = new DevicePoolState();
        }

        public Builder(DevicePoolState defaults) {
            $ = new DevicePoolState(Objects.requireNonNull(defaults));
        }

        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder maxDevices(@Nullable Output<Integer> maxDevices) {
            $.maxDevices = maxDevices;
            return this;
        }

        public Builder maxDevices(Integer maxDevices) {
            return maxDevices(Output.of(maxDevices));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder projectArn(@Nullable Output<String> projectArn) {
            $.projectArn = projectArn;
            return this;
        }

        public Builder projectArn(String projectArn) {
            return projectArn(Output.of(projectArn));
        }

        public Builder rules(@Nullable Output<List<DevicePoolRuleArgs>> rules) {
            $.rules = rules;
            return this;
        }

        public Builder rules(List<DevicePoolRuleArgs> rules) {
            return rules(Output.of(rules));
        }

        public Builder rules(DevicePoolRuleArgs... rules) {
            return rules(List.of(rules));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        public Builder type(String type) {
            return type(Output.of(type));
        }

        public DevicePoolState build() {
            return $;
        }
    }

}
