// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.sagemaker.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DataQualityJobDefinitionDataQualityJobOutputConfigMonitoringOutputsS3OutputArgs extends com.pulumi.resources.ResourceArgs {

    public static final DataQualityJobDefinitionDataQualityJobOutputConfigMonitoringOutputsS3OutputArgs Empty = new DataQualityJobDefinitionDataQualityJobOutputConfigMonitoringOutputsS3OutputArgs();

    /**
     * Path to the filesystem where the batch transform data is available to the container. Defaults to `/opt/ml/processing/input`.
     * 
     */
    @Import(name="localPath")
    private @Nullable Output<String> localPath;

    /**
     * @return Path to the filesystem where the batch transform data is available to the container. Defaults to `/opt/ml/processing/input`.
     * 
     */
    public Optional<Output<String>> localPath() {
        return Optional.ofNullable(this.localPath);
    }

    /**
     * Whether to upload the results of the monitoring job continuously or after the job completes. Valid values are `Continuous` or `EndOfJob`
     * 
     */
    @Import(name="s3UploadMode")
    private @Nullable Output<String> s3UploadMode;

    /**
     * @return Whether to upload the results of the monitoring job continuously or after the job completes. Valid values are `Continuous` or `EndOfJob`
     * 
     */
    public Optional<Output<String>> s3UploadMode() {
        return Optional.ofNullable(this.s3UploadMode);
    }

    /**
     * The Amazon S3 URI for the constraints resource.
     * 
     */
    @Import(name="s3Uri", required=true)
    private Output<String> s3Uri;

    /**
     * @return The Amazon S3 URI for the constraints resource.
     * 
     */
    public Output<String> s3Uri() {
        return this.s3Uri;
    }

    private DataQualityJobDefinitionDataQualityJobOutputConfigMonitoringOutputsS3OutputArgs() {}

    private DataQualityJobDefinitionDataQualityJobOutputConfigMonitoringOutputsS3OutputArgs(DataQualityJobDefinitionDataQualityJobOutputConfigMonitoringOutputsS3OutputArgs $) {
        this.localPath = $.localPath;
        this.s3UploadMode = $.s3UploadMode;
        this.s3Uri = $.s3Uri;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DataQualityJobDefinitionDataQualityJobOutputConfigMonitoringOutputsS3OutputArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DataQualityJobDefinitionDataQualityJobOutputConfigMonitoringOutputsS3OutputArgs $;

        public Builder() {
            $ = new DataQualityJobDefinitionDataQualityJobOutputConfigMonitoringOutputsS3OutputArgs();
        }

        public Builder(DataQualityJobDefinitionDataQualityJobOutputConfigMonitoringOutputsS3OutputArgs defaults) {
            $ = new DataQualityJobDefinitionDataQualityJobOutputConfigMonitoringOutputsS3OutputArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param localPath Path to the filesystem where the batch transform data is available to the container. Defaults to `/opt/ml/processing/input`.
         * 
         * @return builder
         * 
         */
        public Builder localPath(@Nullable Output<String> localPath) {
            $.localPath = localPath;
            return this;
        }

        /**
         * @param localPath Path to the filesystem where the batch transform data is available to the container. Defaults to `/opt/ml/processing/input`.
         * 
         * @return builder
         * 
         */
        public Builder localPath(String localPath) {
            return localPath(Output.of(localPath));
        }

        /**
         * @param s3UploadMode Whether to upload the results of the monitoring job continuously or after the job completes. Valid values are `Continuous` or `EndOfJob`
         * 
         * @return builder
         * 
         */
        public Builder s3UploadMode(@Nullable Output<String> s3UploadMode) {
            $.s3UploadMode = s3UploadMode;
            return this;
        }

        /**
         * @param s3UploadMode Whether to upload the results of the monitoring job continuously or after the job completes. Valid values are `Continuous` or `EndOfJob`
         * 
         * @return builder
         * 
         */
        public Builder s3UploadMode(String s3UploadMode) {
            return s3UploadMode(Output.of(s3UploadMode));
        }

        /**
         * @param s3Uri The Amazon S3 URI for the constraints resource.
         * 
         * @return builder
         * 
         */
        public Builder s3Uri(Output<String> s3Uri) {
            $.s3Uri = s3Uri;
            return this;
        }

        /**
         * @param s3Uri The Amazon S3 URI for the constraints resource.
         * 
         * @return builder
         * 
         */
        public Builder s3Uri(String s3Uri) {
            return s3Uri(Output.of(s3Uri));
        }

        public DataQualityJobDefinitionDataQualityJobOutputConfigMonitoringOutputsS3OutputArgs build() {
            if ($.s3Uri == null) {
                throw new MissingRequiredPropertyException("DataQualityJobDefinitionDataQualityJobOutputConfigMonitoringOutputsS3OutputArgs", "s3Uri");
            }
            return $;
        }
    }

}
