// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.eks.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetClusterVersionsClusterVersion {
    /**
     * @return Type of clusters to filter by.
     * Currently, the only valid value is `eks`.
     * 
     */
    private String clusterType;
    /**
     * @return Kubernetes version supported by EKS.
     * 
     */
    private String clusterVersion;
    /**
     * @return Default eks platform version for the cluster version.
     * 
     */
    private String defaultPlatformVersion;
    /**
     * @return Default Kubernetes version for the cluster version.
     * 
     */
    private Boolean defaultVersion;
    /**
     * @return End of extended support date for the cluster version.
     * 
     */
    private String endOfExtendedSupportDate;
    /**
     * @return End of standard support date for the cluster version.
     * 
     */
    private String endOfStandardSupportDate;
    /**
     * @return Kubernetes patch version for the cluster version.
     * 
     */
    private String kubernetesPatchVersion;
    /**
     * @return Release date of the cluster version.
     * 
     */
    private String releaseDate;
    /**
     * @return Status of the EKS cluster versions to list.
     * Valid values are `STANDARD_SUPPORT` or `UNSUPPORTED` or `EXTENDED_SUPPORT`.
     * 
     */
    private String versionStatus;

    private GetClusterVersionsClusterVersion() {}
    /**
     * @return Type of clusters to filter by.
     * Currently, the only valid value is `eks`.
     * 
     */
    public String clusterType() {
        return this.clusterType;
    }
    /**
     * @return Kubernetes version supported by EKS.
     * 
     */
    public String clusterVersion() {
        return this.clusterVersion;
    }
    /**
     * @return Default eks platform version for the cluster version.
     * 
     */
    public String defaultPlatformVersion() {
        return this.defaultPlatformVersion;
    }
    /**
     * @return Default Kubernetes version for the cluster version.
     * 
     */
    public Boolean defaultVersion() {
        return this.defaultVersion;
    }
    /**
     * @return End of extended support date for the cluster version.
     * 
     */
    public String endOfExtendedSupportDate() {
        return this.endOfExtendedSupportDate;
    }
    /**
     * @return End of standard support date for the cluster version.
     * 
     */
    public String endOfStandardSupportDate() {
        return this.endOfStandardSupportDate;
    }
    /**
     * @return Kubernetes patch version for the cluster version.
     * 
     */
    public String kubernetesPatchVersion() {
        return this.kubernetesPatchVersion;
    }
    /**
     * @return Release date of the cluster version.
     * 
     */
    public String releaseDate() {
        return this.releaseDate;
    }
    /**
     * @return Status of the EKS cluster versions to list.
     * Valid values are `STANDARD_SUPPORT` or `UNSUPPORTED` or `EXTENDED_SUPPORT`.
     * 
     */
    public String versionStatus() {
        return this.versionStatus;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetClusterVersionsClusterVersion defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String clusterType;
        private String clusterVersion;
        private String defaultPlatformVersion;
        private Boolean defaultVersion;
        private String endOfExtendedSupportDate;
        private String endOfStandardSupportDate;
        private String kubernetesPatchVersion;
        private String releaseDate;
        private String versionStatus;
        public Builder() {}
        public Builder(GetClusterVersionsClusterVersion defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clusterType = defaults.clusterType;
    	      this.clusterVersion = defaults.clusterVersion;
    	      this.defaultPlatformVersion = defaults.defaultPlatformVersion;
    	      this.defaultVersion = defaults.defaultVersion;
    	      this.endOfExtendedSupportDate = defaults.endOfExtendedSupportDate;
    	      this.endOfStandardSupportDate = defaults.endOfStandardSupportDate;
    	      this.kubernetesPatchVersion = defaults.kubernetesPatchVersion;
    	      this.releaseDate = defaults.releaseDate;
    	      this.versionStatus = defaults.versionStatus;
        }

        @CustomType.Setter
        public Builder clusterType(String clusterType) {
            if (clusterType == null) {
              throw new MissingRequiredPropertyException("GetClusterVersionsClusterVersion", "clusterType");
            }
            this.clusterType = clusterType;
            return this;
        }
        @CustomType.Setter
        public Builder clusterVersion(String clusterVersion) {
            if (clusterVersion == null) {
              throw new MissingRequiredPropertyException("GetClusterVersionsClusterVersion", "clusterVersion");
            }
            this.clusterVersion = clusterVersion;
            return this;
        }
        @CustomType.Setter
        public Builder defaultPlatformVersion(String defaultPlatformVersion) {
            if (defaultPlatformVersion == null) {
              throw new MissingRequiredPropertyException("GetClusterVersionsClusterVersion", "defaultPlatformVersion");
            }
            this.defaultPlatformVersion = defaultPlatformVersion;
            return this;
        }
        @CustomType.Setter
        public Builder defaultVersion(Boolean defaultVersion) {
            if (defaultVersion == null) {
              throw new MissingRequiredPropertyException("GetClusterVersionsClusterVersion", "defaultVersion");
            }
            this.defaultVersion = defaultVersion;
            return this;
        }
        @CustomType.Setter
        public Builder endOfExtendedSupportDate(String endOfExtendedSupportDate) {
            if (endOfExtendedSupportDate == null) {
              throw new MissingRequiredPropertyException("GetClusterVersionsClusterVersion", "endOfExtendedSupportDate");
            }
            this.endOfExtendedSupportDate = endOfExtendedSupportDate;
            return this;
        }
        @CustomType.Setter
        public Builder endOfStandardSupportDate(String endOfStandardSupportDate) {
            if (endOfStandardSupportDate == null) {
              throw new MissingRequiredPropertyException("GetClusterVersionsClusterVersion", "endOfStandardSupportDate");
            }
            this.endOfStandardSupportDate = endOfStandardSupportDate;
            return this;
        }
        @CustomType.Setter
        public Builder kubernetesPatchVersion(String kubernetesPatchVersion) {
            if (kubernetesPatchVersion == null) {
              throw new MissingRequiredPropertyException("GetClusterVersionsClusterVersion", "kubernetesPatchVersion");
            }
            this.kubernetesPatchVersion = kubernetesPatchVersion;
            return this;
        }
        @CustomType.Setter
        public Builder releaseDate(String releaseDate) {
            if (releaseDate == null) {
              throw new MissingRequiredPropertyException("GetClusterVersionsClusterVersion", "releaseDate");
            }
            this.releaseDate = releaseDate;
            return this;
        }
        @CustomType.Setter
        public Builder versionStatus(String versionStatus) {
            if (versionStatus == null) {
              throw new MissingRequiredPropertyException("GetClusterVersionsClusterVersion", "versionStatus");
            }
            this.versionStatus = versionStatus;
            return this;
        }
        public GetClusterVersionsClusterVersion build() {
            final var _resultValue = new GetClusterVersionsClusterVersion();
            _resultValue.clusterType = clusterType;
            _resultValue.clusterVersion = clusterVersion;
            _resultValue.defaultPlatformVersion = defaultPlatformVersion;
            _resultValue.defaultVersion = defaultVersion;
            _resultValue.endOfExtendedSupportDate = endOfExtendedSupportDate;
            _resultValue.endOfStandardSupportDate = endOfStandardSupportDate;
            _resultValue.kubernetesPatchVersion = kubernetesPatchVersion;
            _resultValue.releaseDate = releaseDate;
            _resultValue.versionStatus = versionStatus;
            return _resultValue;
        }
    }
}
