// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.dms.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetEndpointS3Setting {
    private @Nullable Boolean addColumnName;
    private @Nullable String bucketFolder;
    private @Nullable String bucketName;
    private @Nullable String cannedAclForObjects;
    private @Nullable Boolean cdcInsertsAndUpdates;
    private @Nullable Boolean cdcInsertsOnly;
    private @Nullable Integer cdcMaxBatchInterval;
    private @Nullable Integer cdcMinFileSize;
    private @Nullable String cdcPath;
    private @Nullable String compressionType;
    private @Nullable String csvDelimiter;
    private @Nullable String csvNoSupValue;
    private @Nullable String csvNullValue;
    private @Nullable String csvRowDelimiter;
    private @Nullable String dataFormat;
    private @Nullable Integer dataPageSize;
    private @Nullable String datePartitionDelimiter;
    private @Nullable Boolean datePartitionEnabled;
    private @Nullable String datePartitionSequence;
    private @Nullable Integer dictPageSizeLimit;
    private @Nullable Boolean enableStatistics;
    private @Nullable String encodingType;
    private @Nullable String encryptionMode;
    private @Nullable String externalTableDefinition;
    private @Nullable Boolean glueCatalogGeneration;
    private @Nullable Integer ignoreHeaderRows;
    private @Nullable Integer ignoreHeadersRow;
    private @Nullable Boolean includeOpForFullLoad;
    private @Nullable Integer maxFileSize;
    private @Nullable Boolean parquetTimestampInMillisecond;
    private @Nullable String parquetVersion;
    private @Nullable Boolean preserveTransactions;
    private @Nullable Boolean rfc4180;
    private @Nullable Integer rowGroupLength;
    private @Nullable String serverSideEncryptionKmsKeyId;
    private @Nullable String serviceAccessRoleArn;
    private @Nullable String timestampColumnName;
    private @Nullable Boolean useCsvNoSupValue;
    private @Nullable Boolean useTaskStartTimeForFullLoadTimestamp;

    private GetEndpointS3Setting() {}
    public Optional<Boolean> addColumnName() {
        return Optional.ofNullable(this.addColumnName);
    }
    public Optional<String> bucketFolder() {
        return Optional.ofNullable(this.bucketFolder);
    }
    public Optional<String> bucketName() {
        return Optional.ofNullable(this.bucketName);
    }
    public Optional<String> cannedAclForObjects() {
        return Optional.ofNullable(this.cannedAclForObjects);
    }
    public Optional<Boolean> cdcInsertsAndUpdates() {
        return Optional.ofNullable(this.cdcInsertsAndUpdates);
    }
    public Optional<Boolean> cdcInsertsOnly() {
        return Optional.ofNullable(this.cdcInsertsOnly);
    }
    public Optional<Integer> cdcMaxBatchInterval() {
        return Optional.ofNullable(this.cdcMaxBatchInterval);
    }
    public Optional<Integer> cdcMinFileSize() {
        return Optional.ofNullable(this.cdcMinFileSize);
    }
    public Optional<String> cdcPath() {
        return Optional.ofNullable(this.cdcPath);
    }
    public Optional<String> compressionType() {
        return Optional.ofNullable(this.compressionType);
    }
    public Optional<String> csvDelimiter() {
        return Optional.ofNullable(this.csvDelimiter);
    }
    public Optional<String> csvNoSupValue() {
        return Optional.ofNullable(this.csvNoSupValue);
    }
    public Optional<String> csvNullValue() {
        return Optional.ofNullable(this.csvNullValue);
    }
    public Optional<String> csvRowDelimiter() {
        return Optional.ofNullable(this.csvRowDelimiter);
    }
    public Optional<String> dataFormat() {
        return Optional.ofNullable(this.dataFormat);
    }
    public Optional<Integer> dataPageSize() {
        return Optional.ofNullable(this.dataPageSize);
    }
    public Optional<String> datePartitionDelimiter() {
        return Optional.ofNullable(this.datePartitionDelimiter);
    }
    public Optional<Boolean> datePartitionEnabled() {
        return Optional.ofNullable(this.datePartitionEnabled);
    }
    public Optional<String> datePartitionSequence() {
        return Optional.ofNullable(this.datePartitionSequence);
    }
    public Optional<Integer> dictPageSizeLimit() {
        return Optional.ofNullable(this.dictPageSizeLimit);
    }
    public Optional<Boolean> enableStatistics() {
        return Optional.ofNullable(this.enableStatistics);
    }
    public Optional<String> encodingType() {
        return Optional.ofNullable(this.encodingType);
    }
    public Optional<String> encryptionMode() {
        return Optional.ofNullable(this.encryptionMode);
    }
    public Optional<String> externalTableDefinition() {
        return Optional.ofNullable(this.externalTableDefinition);
    }
    public Optional<Boolean> glueCatalogGeneration() {
        return Optional.ofNullable(this.glueCatalogGeneration);
    }
    public Optional<Integer> ignoreHeaderRows() {
        return Optional.ofNullable(this.ignoreHeaderRows);
    }
    public Optional<Integer> ignoreHeadersRow() {
        return Optional.ofNullable(this.ignoreHeadersRow);
    }
    public Optional<Boolean> includeOpForFullLoad() {
        return Optional.ofNullable(this.includeOpForFullLoad);
    }
    public Optional<Integer> maxFileSize() {
        return Optional.ofNullable(this.maxFileSize);
    }
    public Optional<Boolean> parquetTimestampInMillisecond() {
        return Optional.ofNullable(this.parquetTimestampInMillisecond);
    }
    public Optional<String> parquetVersion() {
        return Optional.ofNullable(this.parquetVersion);
    }
    public Optional<Boolean> preserveTransactions() {
        return Optional.ofNullable(this.preserveTransactions);
    }
    public Optional<Boolean> rfc4180() {
        return Optional.ofNullable(this.rfc4180);
    }
    public Optional<Integer> rowGroupLength() {
        return Optional.ofNullable(this.rowGroupLength);
    }
    public Optional<String> serverSideEncryptionKmsKeyId() {
        return Optional.ofNullable(this.serverSideEncryptionKmsKeyId);
    }
    public Optional<String> serviceAccessRoleArn() {
        return Optional.ofNullable(this.serviceAccessRoleArn);
    }
    public Optional<String> timestampColumnName() {
        return Optional.ofNullable(this.timestampColumnName);
    }
    public Optional<Boolean> useCsvNoSupValue() {
        return Optional.ofNullable(this.useCsvNoSupValue);
    }
    public Optional<Boolean> useTaskStartTimeForFullLoadTimestamp() {
        return Optional.ofNullable(this.useTaskStartTimeForFullLoadTimestamp);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetEndpointS3Setting defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean addColumnName;
        private @Nullable String bucketFolder;
        private @Nullable String bucketName;
        private @Nullable String cannedAclForObjects;
        private @Nullable Boolean cdcInsertsAndUpdates;
        private @Nullable Boolean cdcInsertsOnly;
        private @Nullable Integer cdcMaxBatchInterval;
        private @Nullable Integer cdcMinFileSize;
        private @Nullable String cdcPath;
        private @Nullable String compressionType;
        private @Nullable String csvDelimiter;
        private @Nullable String csvNoSupValue;
        private @Nullable String csvNullValue;
        private @Nullable String csvRowDelimiter;
        private @Nullable String dataFormat;
        private @Nullable Integer dataPageSize;
        private @Nullable String datePartitionDelimiter;
        private @Nullable Boolean datePartitionEnabled;
        private @Nullable String datePartitionSequence;
        private @Nullable Integer dictPageSizeLimit;
        private @Nullable Boolean enableStatistics;
        private @Nullable String encodingType;
        private @Nullable String encryptionMode;
        private @Nullable String externalTableDefinition;
        private @Nullable Boolean glueCatalogGeneration;
        private @Nullable Integer ignoreHeaderRows;
        private @Nullable Integer ignoreHeadersRow;
        private @Nullable Boolean includeOpForFullLoad;
        private @Nullable Integer maxFileSize;
        private @Nullable Boolean parquetTimestampInMillisecond;
        private @Nullable String parquetVersion;
        private @Nullable Boolean preserveTransactions;
        private @Nullable Boolean rfc4180;
        private @Nullable Integer rowGroupLength;
        private @Nullable String serverSideEncryptionKmsKeyId;
        private @Nullable String serviceAccessRoleArn;
        private @Nullable String timestampColumnName;
        private @Nullable Boolean useCsvNoSupValue;
        private @Nullable Boolean useTaskStartTimeForFullLoadTimestamp;
        public Builder() {}
        public Builder(GetEndpointS3Setting defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.addColumnName = defaults.addColumnName;
    	      this.bucketFolder = defaults.bucketFolder;
    	      this.bucketName = defaults.bucketName;
    	      this.cannedAclForObjects = defaults.cannedAclForObjects;
    	      this.cdcInsertsAndUpdates = defaults.cdcInsertsAndUpdates;
    	      this.cdcInsertsOnly = defaults.cdcInsertsOnly;
    	      this.cdcMaxBatchInterval = defaults.cdcMaxBatchInterval;
    	      this.cdcMinFileSize = defaults.cdcMinFileSize;
    	      this.cdcPath = defaults.cdcPath;
    	      this.compressionType = defaults.compressionType;
    	      this.csvDelimiter = defaults.csvDelimiter;
    	      this.csvNoSupValue = defaults.csvNoSupValue;
    	      this.csvNullValue = defaults.csvNullValue;
    	      this.csvRowDelimiter = defaults.csvRowDelimiter;
    	      this.dataFormat = defaults.dataFormat;
    	      this.dataPageSize = defaults.dataPageSize;
    	      this.datePartitionDelimiter = defaults.datePartitionDelimiter;
    	      this.datePartitionEnabled = defaults.datePartitionEnabled;
    	      this.datePartitionSequence = defaults.datePartitionSequence;
    	      this.dictPageSizeLimit = defaults.dictPageSizeLimit;
    	      this.enableStatistics = defaults.enableStatistics;
    	      this.encodingType = defaults.encodingType;
    	      this.encryptionMode = defaults.encryptionMode;
    	      this.externalTableDefinition = defaults.externalTableDefinition;
    	      this.glueCatalogGeneration = defaults.glueCatalogGeneration;
    	      this.ignoreHeaderRows = defaults.ignoreHeaderRows;
    	      this.ignoreHeadersRow = defaults.ignoreHeadersRow;
    	      this.includeOpForFullLoad = defaults.includeOpForFullLoad;
    	      this.maxFileSize = defaults.maxFileSize;
    	      this.parquetTimestampInMillisecond = defaults.parquetTimestampInMillisecond;
    	      this.parquetVersion = defaults.parquetVersion;
    	      this.preserveTransactions = defaults.preserveTransactions;
    	      this.rfc4180 = defaults.rfc4180;
    	      this.rowGroupLength = defaults.rowGroupLength;
    	      this.serverSideEncryptionKmsKeyId = defaults.serverSideEncryptionKmsKeyId;
    	      this.serviceAccessRoleArn = defaults.serviceAccessRoleArn;
    	      this.timestampColumnName = defaults.timestampColumnName;
    	      this.useCsvNoSupValue = defaults.useCsvNoSupValue;
    	      this.useTaskStartTimeForFullLoadTimestamp = defaults.useTaskStartTimeForFullLoadTimestamp;
        }

        @CustomType.Setter
        public Builder addColumnName(@Nullable Boolean addColumnName) {
            this.addColumnName = addColumnName;
            return this;
        }
        @CustomType.Setter
        public Builder bucketFolder(@Nullable String bucketFolder) {
            this.bucketFolder = bucketFolder;
            return this;
        }
        @CustomType.Setter
        public Builder bucketName(@Nullable String bucketName) {
            this.bucketName = bucketName;
            return this;
        }
        @CustomType.Setter
        public Builder cannedAclForObjects(@Nullable String cannedAclForObjects) {
            this.cannedAclForObjects = cannedAclForObjects;
            return this;
        }
        @CustomType.Setter
        public Builder cdcInsertsAndUpdates(@Nullable Boolean cdcInsertsAndUpdates) {
            this.cdcInsertsAndUpdates = cdcInsertsAndUpdates;
            return this;
        }
        @CustomType.Setter
        public Builder cdcInsertsOnly(@Nullable Boolean cdcInsertsOnly) {
            this.cdcInsertsOnly = cdcInsertsOnly;
            return this;
        }
        @CustomType.Setter
        public Builder cdcMaxBatchInterval(@Nullable Integer cdcMaxBatchInterval) {
            this.cdcMaxBatchInterval = cdcMaxBatchInterval;
            return this;
        }
        @CustomType.Setter
        public Builder cdcMinFileSize(@Nullable Integer cdcMinFileSize) {
            this.cdcMinFileSize = cdcMinFileSize;
            return this;
        }
        @CustomType.Setter
        public Builder cdcPath(@Nullable String cdcPath) {
            this.cdcPath = cdcPath;
            return this;
        }
        @CustomType.Setter
        public Builder compressionType(@Nullable String compressionType) {
            this.compressionType = compressionType;
            return this;
        }
        @CustomType.Setter
        public Builder csvDelimiter(@Nullable String csvDelimiter) {
            this.csvDelimiter = csvDelimiter;
            return this;
        }
        @CustomType.Setter
        public Builder csvNoSupValue(@Nullable String csvNoSupValue) {
            this.csvNoSupValue = csvNoSupValue;
            return this;
        }
        @CustomType.Setter
        public Builder csvNullValue(@Nullable String csvNullValue) {
            this.csvNullValue = csvNullValue;
            return this;
        }
        @CustomType.Setter
        public Builder csvRowDelimiter(@Nullable String csvRowDelimiter) {
            this.csvRowDelimiter = csvRowDelimiter;
            return this;
        }
        @CustomType.Setter
        public Builder dataFormat(@Nullable String dataFormat) {
            this.dataFormat = dataFormat;
            return this;
        }
        @CustomType.Setter
        public Builder dataPageSize(@Nullable Integer dataPageSize) {
            this.dataPageSize = dataPageSize;
            return this;
        }
        @CustomType.Setter
        public Builder datePartitionDelimiter(@Nullable String datePartitionDelimiter) {
            this.datePartitionDelimiter = datePartitionDelimiter;
            return this;
        }
        @CustomType.Setter
        public Builder datePartitionEnabled(@Nullable Boolean datePartitionEnabled) {
            this.datePartitionEnabled = datePartitionEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder datePartitionSequence(@Nullable String datePartitionSequence) {
            this.datePartitionSequence = datePartitionSequence;
            return this;
        }
        @CustomType.Setter
        public Builder dictPageSizeLimit(@Nullable Integer dictPageSizeLimit) {
            this.dictPageSizeLimit = dictPageSizeLimit;
            return this;
        }
        @CustomType.Setter
        public Builder enableStatistics(@Nullable Boolean enableStatistics) {
            this.enableStatistics = enableStatistics;
            return this;
        }
        @CustomType.Setter
        public Builder encodingType(@Nullable String encodingType) {
            this.encodingType = encodingType;
            return this;
        }
        @CustomType.Setter
        public Builder encryptionMode(@Nullable String encryptionMode) {
            this.encryptionMode = encryptionMode;
            return this;
        }
        @CustomType.Setter
        public Builder externalTableDefinition(@Nullable String externalTableDefinition) {
            this.externalTableDefinition = externalTableDefinition;
            return this;
        }
        @CustomType.Setter
        public Builder glueCatalogGeneration(@Nullable Boolean glueCatalogGeneration) {
            this.glueCatalogGeneration = glueCatalogGeneration;
            return this;
        }
        @CustomType.Setter
        public Builder ignoreHeaderRows(@Nullable Integer ignoreHeaderRows) {
            this.ignoreHeaderRows = ignoreHeaderRows;
            return this;
        }
        @CustomType.Setter
        public Builder ignoreHeadersRow(@Nullable Integer ignoreHeadersRow) {
            this.ignoreHeadersRow = ignoreHeadersRow;
            return this;
        }
        @CustomType.Setter
        public Builder includeOpForFullLoad(@Nullable Boolean includeOpForFullLoad) {
            this.includeOpForFullLoad = includeOpForFullLoad;
            return this;
        }
        @CustomType.Setter
        public Builder maxFileSize(@Nullable Integer maxFileSize) {
            this.maxFileSize = maxFileSize;
            return this;
        }
        @CustomType.Setter
        public Builder parquetTimestampInMillisecond(@Nullable Boolean parquetTimestampInMillisecond) {
            this.parquetTimestampInMillisecond = parquetTimestampInMillisecond;
            return this;
        }
        @CustomType.Setter
        public Builder parquetVersion(@Nullable String parquetVersion) {
            this.parquetVersion = parquetVersion;
            return this;
        }
        @CustomType.Setter
        public Builder preserveTransactions(@Nullable Boolean preserveTransactions) {
            this.preserveTransactions = preserveTransactions;
            return this;
        }
        @CustomType.Setter
        public Builder rfc4180(@Nullable Boolean rfc4180) {
            this.rfc4180 = rfc4180;
            return this;
        }
        @CustomType.Setter
        public Builder rowGroupLength(@Nullable Integer rowGroupLength) {
            this.rowGroupLength = rowGroupLength;
            return this;
        }
        @CustomType.Setter
        public Builder serverSideEncryptionKmsKeyId(@Nullable String serverSideEncryptionKmsKeyId) {
            this.serverSideEncryptionKmsKeyId = serverSideEncryptionKmsKeyId;
            return this;
        }
        @CustomType.Setter
        public Builder serviceAccessRoleArn(@Nullable String serviceAccessRoleArn) {
            this.serviceAccessRoleArn = serviceAccessRoleArn;
            return this;
        }
        @CustomType.Setter
        public Builder timestampColumnName(@Nullable String timestampColumnName) {
            this.timestampColumnName = timestampColumnName;
            return this;
        }
        @CustomType.Setter
        public Builder useCsvNoSupValue(@Nullable Boolean useCsvNoSupValue) {
            this.useCsvNoSupValue = useCsvNoSupValue;
            return this;
        }
        @CustomType.Setter
        public Builder useTaskStartTimeForFullLoadTimestamp(@Nullable Boolean useTaskStartTimeForFullLoadTimestamp) {
            this.useTaskStartTimeForFullLoadTimestamp = useTaskStartTimeForFullLoadTimestamp;
            return this;
        }
        public GetEndpointS3Setting build() {
            final var o = new GetEndpointS3Setting();
            o.addColumnName = addColumnName;
            o.bucketFolder = bucketFolder;
            o.bucketName = bucketName;
            o.cannedAclForObjects = cannedAclForObjects;
            o.cdcInsertsAndUpdates = cdcInsertsAndUpdates;
            o.cdcInsertsOnly = cdcInsertsOnly;
            o.cdcMaxBatchInterval = cdcMaxBatchInterval;
            o.cdcMinFileSize = cdcMinFileSize;
            o.cdcPath = cdcPath;
            o.compressionType = compressionType;
            o.csvDelimiter = csvDelimiter;
            o.csvNoSupValue = csvNoSupValue;
            o.csvNullValue = csvNullValue;
            o.csvRowDelimiter = csvRowDelimiter;
            o.dataFormat = dataFormat;
            o.dataPageSize = dataPageSize;
            o.datePartitionDelimiter = datePartitionDelimiter;
            o.datePartitionEnabled = datePartitionEnabled;
            o.datePartitionSequence = datePartitionSequence;
            o.dictPageSizeLimit = dictPageSizeLimit;
            o.enableStatistics = enableStatistics;
            o.encodingType = encodingType;
            o.encryptionMode = encryptionMode;
            o.externalTableDefinition = externalTableDefinition;
            o.glueCatalogGeneration = glueCatalogGeneration;
            o.ignoreHeaderRows = ignoreHeaderRows;
            o.ignoreHeadersRow = ignoreHeadersRow;
            o.includeOpForFullLoad = includeOpForFullLoad;
            o.maxFileSize = maxFileSize;
            o.parquetTimestampInMillisecond = parquetTimestampInMillisecond;
            o.parquetVersion = parquetVersion;
            o.preserveTransactions = preserveTransactions;
            o.rfc4180 = rfc4180;
            o.rowGroupLength = rowGroupLength;
            o.serverSideEncryptionKmsKeyId = serverSideEncryptionKmsKeyId;
            o.serviceAccessRoleArn = serviceAccessRoleArn;
            o.timestampColumnName = timestampColumnName;
            o.useCsvNoSupValue = useCsvNoSupValue;
            o.useTaskStartTimeForFullLoadTimestamp = useTaskStartTimeForFullLoadTimestamp;
            return o;
        }
    }
}
