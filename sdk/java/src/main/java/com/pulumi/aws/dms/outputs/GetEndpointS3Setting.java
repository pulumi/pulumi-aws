// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.dms.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetEndpointS3Setting {
    private Boolean addColumnName;
    private String bucketFolder;
    private String bucketName;
    private String cannedAclForObjects;
    private Boolean cdcInsertsAndUpdates;
    private Boolean cdcInsertsOnly;
    private Integer cdcMaxBatchInterval;
    private Integer cdcMinFileSize;
    private String cdcPath;
    private String compressionType;
    private String csvDelimiter;
    private String csvNoSupValue;
    private String csvNullValue;
    private String csvRowDelimiter;
    private String dataFormat;
    private Integer dataPageSize;
    private String datePartitionDelimiter;
    private Boolean datePartitionEnabled;
    private String datePartitionSequence;
    private Integer dictPageSizeLimit;
    private Boolean enableStatistics;
    private String encodingType;
    private String encryptionMode;
    private String externalTableDefinition;
    private Boolean glueCatalogGeneration;
    private Integer ignoreHeaderRows;
    private Integer ignoreHeadersRow;
    private Boolean includeOpForFullLoad;
    private Integer maxFileSize;
    private Boolean parquetTimestampInMillisecond;
    private String parquetVersion;
    private Boolean preserveTransactions;
    private Boolean rfc4180;
    private Integer rowGroupLength;
    private String serverSideEncryptionKmsKeyId;
    private String serviceAccessRoleArn;
    private String timestampColumnName;
    private Boolean useCsvNoSupValue;
    private Boolean useTaskStartTimeForFullLoadTimestamp;

    private GetEndpointS3Setting() {}
    public Boolean addColumnName() {
        return this.addColumnName;
    }
    public String bucketFolder() {
        return this.bucketFolder;
    }
    public String bucketName() {
        return this.bucketName;
    }
    public String cannedAclForObjects() {
        return this.cannedAclForObjects;
    }
    public Boolean cdcInsertsAndUpdates() {
        return this.cdcInsertsAndUpdates;
    }
    public Boolean cdcInsertsOnly() {
        return this.cdcInsertsOnly;
    }
    public Integer cdcMaxBatchInterval() {
        return this.cdcMaxBatchInterval;
    }
    public Integer cdcMinFileSize() {
        return this.cdcMinFileSize;
    }
    public String cdcPath() {
        return this.cdcPath;
    }
    public String compressionType() {
        return this.compressionType;
    }
    public String csvDelimiter() {
        return this.csvDelimiter;
    }
    public String csvNoSupValue() {
        return this.csvNoSupValue;
    }
    public String csvNullValue() {
        return this.csvNullValue;
    }
    public String csvRowDelimiter() {
        return this.csvRowDelimiter;
    }
    public String dataFormat() {
        return this.dataFormat;
    }
    public Integer dataPageSize() {
        return this.dataPageSize;
    }
    public String datePartitionDelimiter() {
        return this.datePartitionDelimiter;
    }
    public Boolean datePartitionEnabled() {
        return this.datePartitionEnabled;
    }
    public String datePartitionSequence() {
        return this.datePartitionSequence;
    }
    public Integer dictPageSizeLimit() {
        return this.dictPageSizeLimit;
    }
    public Boolean enableStatistics() {
        return this.enableStatistics;
    }
    public String encodingType() {
        return this.encodingType;
    }
    public String encryptionMode() {
        return this.encryptionMode;
    }
    public String externalTableDefinition() {
        return this.externalTableDefinition;
    }
    public Boolean glueCatalogGeneration() {
        return this.glueCatalogGeneration;
    }
    public Integer ignoreHeaderRows() {
        return this.ignoreHeaderRows;
    }
    public Integer ignoreHeadersRow() {
        return this.ignoreHeadersRow;
    }
    public Boolean includeOpForFullLoad() {
        return this.includeOpForFullLoad;
    }
    public Integer maxFileSize() {
        return this.maxFileSize;
    }
    public Boolean parquetTimestampInMillisecond() {
        return this.parquetTimestampInMillisecond;
    }
    public String parquetVersion() {
        return this.parquetVersion;
    }
    public Boolean preserveTransactions() {
        return this.preserveTransactions;
    }
    public Boolean rfc4180() {
        return this.rfc4180;
    }
    public Integer rowGroupLength() {
        return this.rowGroupLength;
    }
    public String serverSideEncryptionKmsKeyId() {
        return this.serverSideEncryptionKmsKeyId;
    }
    public String serviceAccessRoleArn() {
        return this.serviceAccessRoleArn;
    }
    public String timestampColumnName() {
        return this.timestampColumnName;
    }
    public Boolean useCsvNoSupValue() {
        return this.useCsvNoSupValue;
    }
    public Boolean useTaskStartTimeForFullLoadTimestamp() {
        return this.useTaskStartTimeForFullLoadTimestamp;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetEndpointS3Setting defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean addColumnName;
        private String bucketFolder;
        private String bucketName;
        private String cannedAclForObjects;
        private Boolean cdcInsertsAndUpdates;
        private Boolean cdcInsertsOnly;
        private Integer cdcMaxBatchInterval;
        private Integer cdcMinFileSize;
        private String cdcPath;
        private String compressionType;
        private String csvDelimiter;
        private String csvNoSupValue;
        private String csvNullValue;
        private String csvRowDelimiter;
        private String dataFormat;
        private Integer dataPageSize;
        private String datePartitionDelimiter;
        private Boolean datePartitionEnabled;
        private String datePartitionSequence;
        private Integer dictPageSizeLimit;
        private Boolean enableStatistics;
        private String encodingType;
        private String encryptionMode;
        private String externalTableDefinition;
        private Boolean glueCatalogGeneration;
        private Integer ignoreHeaderRows;
        private Integer ignoreHeadersRow;
        private Boolean includeOpForFullLoad;
        private Integer maxFileSize;
        private Boolean parquetTimestampInMillisecond;
        private String parquetVersion;
        private Boolean preserveTransactions;
        private Boolean rfc4180;
        private Integer rowGroupLength;
        private String serverSideEncryptionKmsKeyId;
        private String serviceAccessRoleArn;
        private String timestampColumnName;
        private Boolean useCsvNoSupValue;
        private Boolean useTaskStartTimeForFullLoadTimestamp;
        public Builder() {}
        public Builder(GetEndpointS3Setting defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.addColumnName = defaults.addColumnName;
    	      this.bucketFolder = defaults.bucketFolder;
    	      this.bucketName = defaults.bucketName;
    	      this.cannedAclForObjects = defaults.cannedAclForObjects;
    	      this.cdcInsertsAndUpdates = defaults.cdcInsertsAndUpdates;
    	      this.cdcInsertsOnly = defaults.cdcInsertsOnly;
    	      this.cdcMaxBatchInterval = defaults.cdcMaxBatchInterval;
    	      this.cdcMinFileSize = defaults.cdcMinFileSize;
    	      this.cdcPath = defaults.cdcPath;
    	      this.compressionType = defaults.compressionType;
    	      this.csvDelimiter = defaults.csvDelimiter;
    	      this.csvNoSupValue = defaults.csvNoSupValue;
    	      this.csvNullValue = defaults.csvNullValue;
    	      this.csvRowDelimiter = defaults.csvRowDelimiter;
    	      this.dataFormat = defaults.dataFormat;
    	      this.dataPageSize = defaults.dataPageSize;
    	      this.datePartitionDelimiter = defaults.datePartitionDelimiter;
    	      this.datePartitionEnabled = defaults.datePartitionEnabled;
    	      this.datePartitionSequence = defaults.datePartitionSequence;
    	      this.dictPageSizeLimit = defaults.dictPageSizeLimit;
    	      this.enableStatistics = defaults.enableStatistics;
    	      this.encodingType = defaults.encodingType;
    	      this.encryptionMode = defaults.encryptionMode;
    	      this.externalTableDefinition = defaults.externalTableDefinition;
    	      this.glueCatalogGeneration = defaults.glueCatalogGeneration;
    	      this.ignoreHeaderRows = defaults.ignoreHeaderRows;
    	      this.ignoreHeadersRow = defaults.ignoreHeadersRow;
    	      this.includeOpForFullLoad = defaults.includeOpForFullLoad;
    	      this.maxFileSize = defaults.maxFileSize;
    	      this.parquetTimestampInMillisecond = defaults.parquetTimestampInMillisecond;
    	      this.parquetVersion = defaults.parquetVersion;
    	      this.preserveTransactions = defaults.preserveTransactions;
    	      this.rfc4180 = defaults.rfc4180;
    	      this.rowGroupLength = defaults.rowGroupLength;
    	      this.serverSideEncryptionKmsKeyId = defaults.serverSideEncryptionKmsKeyId;
    	      this.serviceAccessRoleArn = defaults.serviceAccessRoleArn;
    	      this.timestampColumnName = defaults.timestampColumnName;
    	      this.useCsvNoSupValue = defaults.useCsvNoSupValue;
    	      this.useTaskStartTimeForFullLoadTimestamp = defaults.useTaskStartTimeForFullLoadTimestamp;
        }

        @CustomType.Setter
        public Builder addColumnName(Boolean addColumnName) {
            if (addColumnName == null) {
              throw new MissingRequiredPropertyException("GetEndpointS3Setting", "addColumnName");
            }
            this.addColumnName = addColumnName;
            return this;
        }
        @CustomType.Setter
        public Builder bucketFolder(String bucketFolder) {
            if (bucketFolder == null) {
              throw new MissingRequiredPropertyException("GetEndpointS3Setting", "bucketFolder");
            }
            this.bucketFolder = bucketFolder;
            return this;
        }
        @CustomType.Setter
        public Builder bucketName(String bucketName) {
            if (bucketName == null) {
              throw new MissingRequiredPropertyException("GetEndpointS3Setting", "bucketName");
            }
            this.bucketName = bucketName;
            return this;
        }
        @CustomType.Setter
        public Builder cannedAclForObjects(String cannedAclForObjects) {
            if (cannedAclForObjects == null) {
              throw new MissingRequiredPropertyException("GetEndpointS3Setting", "cannedAclForObjects");
            }
            this.cannedAclForObjects = cannedAclForObjects;
            return this;
        }
        @CustomType.Setter
        public Builder cdcInsertsAndUpdates(Boolean cdcInsertsAndUpdates) {
            if (cdcInsertsAndUpdates == null) {
              throw new MissingRequiredPropertyException("GetEndpointS3Setting", "cdcInsertsAndUpdates");
            }
            this.cdcInsertsAndUpdates = cdcInsertsAndUpdates;
            return this;
        }
        @CustomType.Setter
        public Builder cdcInsertsOnly(Boolean cdcInsertsOnly) {
            if (cdcInsertsOnly == null) {
              throw new MissingRequiredPropertyException("GetEndpointS3Setting", "cdcInsertsOnly");
            }
            this.cdcInsertsOnly = cdcInsertsOnly;
            return this;
        }
        @CustomType.Setter
        public Builder cdcMaxBatchInterval(Integer cdcMaxBatchInterval) {
            if (cdcMaxBatchInterval == null) {
              throw new MissingRequiredPropertyException("GetEndpointS3Setting", "cdcMaxBatchInterval");
            }
            this.cdcMaxBatchInterval = cdcMaxBatchInterval;
            return this;
        }
        @CustomType.Setter
        public Builder cdcMinFileSize(Integer cdcMinFileSize) {
            if (cdcMinFileSize == null) {
              throw new MissingRequiredPropertyException("GetEndpointS3Setting", "cdcMinFileSize");
            }
            this.cdcMinFileSize = cdcMinFileSize;
            return this;
        }
        @CustomType.Setter
        public Builder cdcPath(String cdcPath) {
            if (cdcPath == null) {
              throw new MissingRequiredPropertyException("GetEndpointS3Setting", "cdcPath");
            }
            this.cdcPath = cdcPath;
            return this;
        }
        @CustomType.Setter
        public Builder compressionType(String compressionType) {
            if (compressionType == null) {
              throw new MissingRequiredPropertyException("GetEndpointS3Setting", "compressionType");
            }
            this.compressionType = compressionType;
            return this;
        }
        @CustomType.Setter
        public Builder csvDelimiter(String csvDelimiter) {
            if (csvDelimiter == null) {
              throw new MissingRequiredPropertyException("GetEndpointS3Setting", "csvDelimiter");
            }
            this.csvDelimiter = csvDelimiter;
            return this;
        }
        @CustomType.Setter
        public Builder csvNoSupValue(String csvNoSupValue) {
            if (csvNoSupValue == null) {
              throw new MissingRequiredPropertyException("GetEndpointS3Setting", "csvNoSupValue");
            }
            this.csvNoSupValue = csvNoSupValue;
            return this;
        }
        @CustomType.Setter
        public Builder csvNullValue(String csvNullValue) {
            if (csvNullValue == null) {
              throw new MissingRequiredPropertyException("GetEndpointS3Setting", "csvNullValue");
            }
            this.csvNullValue = csvNullValue;
            return this;
        }
        @CustomType.Setter
        public Builder csvRowDelimiter(String csvRowDelimiter) {
            if (csvRowDelimiter == null) {
              throw new MissingRequiredPropertyException("GetEndpointS3Setting", "csvRowDelimiter");
            }
            this.csvRowDelimiter = csvRowDelimiter;
            return this;
        }
        @CustomType.Setter
        public Builder dataFormat(String dataFormat) {
            if (dataFormat == null) {
              throw new MissingRequiredPropertyException("GetEndpointS3Setting", "dataFormat");
            }
            this.dataFormat = dataFormat;
            return this;
        }
        @CustomType.Setter
        public Builder dataPageSize(Integer dataPageSize) {
            if (dataPageSize == null) {
              throw new MissingRequiredPropertyException("GetEndpointS3Setting", "dataPageSize");
            }
            this.dataPageSize = dataPageSize;
            return this;
        }
        @CustomType.Setter
        public Builder datePartitionDelimiter(String datePartitionDelimiter) {
            if (datePartitionDelimiter == null) {
              throw new MissingRequiredPropertyException("GetEndpointS3Setting", "datePartitionDelimiter");
            }
            this.datePartitionDelimiter = datePartitionDelimiter;
            return this;
        }
        @CustomType.Setter
        public Builder datePartitionEnabled(Boolean datePartitionEnabled) {
            if (datePartitionEnabled == null) {
              throw new MissingRequiredPropertyException("GetEndpointS3Setting", "datePartitionEnabled");
            }
            this.datePartitionEnabled = datePartitionEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder datePartitionSequence(String datePartitionSequence) {
            if (datePartitionSequence == null) {
              throw new MissingRequiredPropertyException("GetEndpointS3Setting", "datePartitionSequence");
            }
            this.datePartitionSequence = datePartitionSequence;
            return this;
        }
        @CustomType.Setter
        public Builder dictPageSizeLimit(Integer dictPageSizeLimit) {
            if (dictPageSizeLimit == null) {
              throw new MissingRequiredPropertyException("GetEndpointS3Setting", "dictPageSizeLimit");
            }
            this.dictPageSizeLimit = dictPageSizeLimit;
            return this;
        }
        @CustomType.Setter
        public Builder enableStatistics(Boolean enableStatistics) {
            if (enableStatistics == null) {
              throw new MissingRequiredPropertyException("GetEndpointS3Setting", "enableStatistics");
            }
            this.enableStatistics = enableStatistics;
            return this;
        }
        @CustomType.Setter
        public Builder encodingType(String encodingType) {
            if (encodingType == null) {
              throw new MissingRequiredPropertyException("GetEndpointS3Setting", "encodingType");
            }
            this.encodingType = encodingType;
            return this;
        }
        @CustomType.Setter
        public Builder encryptionMode(String encryptionMode) {
            if (encryptionMode == null) {
              throw new MissingRequiredPropertyException("GetEndpointS3Setting", "encryptionMode");
            }
            this.encryptionMode = encryptionMode;
            return this;
        }
        @CustomType.Setter
        public Builder externalTableDefinition(String externalTableDefinition) {
            if (externalTableDefinition == null) {
              throw new MissingRequiredPropertyException("GetEndpointS3Setting", "externalTableDefinition");
            }
            this.externalTableDefinition = externalTableDefinition;
            return this;
        }
        @CustomType.Setter
        public Builder glueCatalogGeneration(Boolean glueCatalogGeneration) {
            if (glueCatalogGeneration == null) {
              throw new MissingRequiredPropertyException("GetEndpointS3Setting", "glueCatalogGeneration");
            }
            this.glueCatalogGeneration = glueCatalogGeneration;
            return this;
        }
        @CustomType.Setter
        public Builder ignoreHeaderRows(Integer ignoreHeaderRows) {
            if (ignoreHeaderRows == null) {
              throw new MissingRequiredPropertyException("GetEndpointS3Setting", "ignoreHeaderRows");
            }
            this.ignoreHeaderRows = ignoreHeaderRows;
            return this;
        }
        @CustomType.Setter
        public Builder ignoreHeadersRow(Integer ignoreHeadersRow) {
            if (ignoreHeadersRow == null) {
              throw new MissingRequiredPropertyException("GetEndpointS3Setting", "ignoreHeadersRow");
            }
            this.ignoreHeadersRow = ignoreHeadersRow;
            return this;
        }
        @CustomType.Setter
        public Builder includeOpForFullLoad(Boolean includeOpForFullLoad) {
            if (includeOpForFullLoad == null) {
              throw new MissingRequiredPropertyException("GetEndpointS3Setting", "includeOpForFullLoad");
            }
            this.includeOpForFullLoad = includeOpForFullLoad;
            return this;
        }
        @CustomType.Setter
        public Builder maxFileSize(Integer maxFileSize) {
            if (maxFileSize == null) {
              throw new MissingRequiredPropertyException("GetEndpointS3Setting", "maxFileSize");
            }
            this.maxFileSize = maxFileSize;
            return this;
        }
        @CustomType.Setter
        public Builder parquetTimestampInMillisecond(Boolean parquetTimestampInMillisecond) {
            if (parquetTimestampInMillisecond == null) {
              throw new MissingRequiredPropertyException("GetEndpointS3Setting", "parquetTimestampInMillisecond");
            }
            this.parquetTimestampInMillisecond = parquetTimestampInMillisecond;
            return this;
        }
        @CustomType.Setter
        public Builder parquetVersion(String parquetVersion) {
            if (parquetVersion == null) {
              throw new MissingRequiredPropertyException("GetEndpointS3Setting", "parquetVersion");
            }
            this.parquetVersion = parquetVersion;
            return this;
        }
        @CustomType.Setter
        public Builder preserveTransactions(Boolean preserveTransactions) {
            if (preserveTransactions == null) {
              throw new MissingRequiredPropertyException("GetEndpointS3Setting", "preserveTransactions");
            }
            this.preserveTransactions = preserveTransactions;
            return this;
        }
        @CustomType.Setter
        public Builder rfc4180(Boolean rfc4180) {
            if (rfc4180 == null) {
              throw new MissingRequiredPropertyException("GetEndpointS3Setting", "rfc4180");
            }
            this.rfc4180 = rfc4180;
            return this;
        }
        @CustomType.Setter
        public Builder rowGroupLength(Integer rowGroupLength) {
            if (rowGroupLength == null) {
              throw new MissingRequiredPropertyException("GetEndpointS3Setting", "rowGroupLength");
            }
            this.rowGroupLength = rowGroupLength;
            return this;
        }
        @CustomType.Setter
        public Builder serverSideEncryptionKmsKeyId(String serverSideEncryptionKmsKeyId) {
            if (serverSideEncryptionKmsKeyId == null) {
              throw new MissingRequiredPropertyException("GetEndpointS3Setting", "serverSideEncryptionKmsKeyId");
            }
            this.serverSideEncryptionKmsKeyId = serverSideEncryptionKmsKeyId;
            return this;
        }
        @CustomType.Setter
        public Builder serviceAccessRoleArn(String serviceAccessRoleArn) {
            if (serviceAccessRoleArn == null) {
              throw new MissingRequiredPropertyException("GetEndpointS3Setting", "serviceAccessRoleArn");
            }
            this.serviceAccessRoleArn = serviceAccessRoleArn;
            return this;
        }
        @CustomType.Setter
        public Builder timestampColumnName(String timestampColumnName) {
            if (timestampColumnName == null) {
              throw new MissingRequiredPropertyException("GetEndpointS3Setting", "timestampColumnName");
            }
            this.timestampColumnName = timestampColumnName;
            return this;
        }
        @CustomType.Setter
        public Builder useCsvNoSupValue(Boolean useCsvNoSupValue) {
            if (useCsvNoSupValue == null) {
              throw new MissingRequiredPropertyException("GetEndpointS3Setting", "useCsvNoSupValue");
            }
            this.useCsvNoSupValue = useCsvNoSupValue;
            return this;
        }
        @CustomType.Setter
        public Builder useTaskStartTimeForFullLoadTimestamp(Boolean useTaskStartTimeForFullLoadTimestamp) {
            if (useTaskStartTimeForFullLoadTimestamp == null) {
              throw new MissingRequiredPropertyException("GetEndpointS3Setting", "useTaskStartTimeForFullLoadTimestamp");
            }
            this.useTaskStartTimeForFullLoadTimestamp = useTaskStartTimeForFullLoadTimestamp;
            return this;
        }
        public GetEndpointS3Setting build() {
            final var _resultValue = new GetEndpointS3Setting();
            _resultValue.addColumnName = addColumnName;
            _resultValue.bucketFolder = bucketFolder;
            _resultValue.bucketName = bucketName;
            _resultValue.cannedAclForObjects = cannedAclForObjects;
            _resultValue.cdcInsertsAndUpdates = cdcInsertsAndUpdates;
            _resultValue.cdcInsertsOnly = cdcInsertsOnly;
            _resultValue.cdcMaxBatchInterval = cdcMaxBatchInterval;
            _resultValue.cdcMinFileSize = cdcMinFileSize;
            _resultValue.cdcPath = cdcPath;
            _resultValue.compressionType = compressionType;
            _resultValue.csvDelimiter = csvDelimiter;
            _resultValue.csvNoSupValue = csvNoSupValue;
            _resultValue.csvNullValue = csvNullValue;
            _resultValue.csvRowDelimiter = csvRowDelimiter;
            _resultValue.dataFormat = dataFormat;
            _resultValue.dataPageSize = dataPageSize;
            _resultValue.datePartitionDelimiter = datePartitionDelimiter;
            _resultValue.datePartitionEnabled = datePartitionEnabled;
            _resultValue.datePartitionSequence = datePartitionSequence;
            _resultValue.dictPageSizeLimit = dictPageSizeLimit;
            _resultValue.enableStatistics = enableStatistics;
            _resultValue.encodingType = encodingType;
            _resultValue.encryptionMode = encryptionMode;
            _resultValue.externalTableDefinition = externalTableDefinition;
            _resultValue.glueCatalogGeneration = glueCatalogGeneration;
            _resultValue.ignoreHeaderRows = ignoreHeaderRows;
            _resultValue.ignoreHeadersRow = ignoreHeadersRow;
            _resultValue.includeOpForFullLoad = includeOpForFullLoad;
            _resultValue.maxFileSize = maxFileSize;
            _resultValue.parquetTimestampInMillisecond = parquetTimestampInMillisecond;
            _resultValue.parquetVersion = parquetVersion;
            _resultValue.preserveTransactions = preserveTransactions;
            _resultValue.rfc4180 = rfc4180;
            _resultValue.rowGroupLength = rowGroupLength;
            _resultValue.serverSideEncryptionKmsKeyId = serverSideEncryptionKmsKeyId;
            _resultValue.serviceAccessRoleArn = serviceAccessRoleArn;
            _resultValue.timestampColumnName = timestampColumnName;
            _resultValue.useCsvNoSupValue = useCsvNoSupValue;
            _resultValue.useTaskStartTimeForFullLoadTimestamp = useTaskStartTimeForFullLoadTimestamp;
            return _resultValue;
        }
    }
}
