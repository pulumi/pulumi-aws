// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.appflow.inputs;

import com.pulumi.aws.appflow.inputs.FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataErrorHandlingConfigArgs;
import com.pulumi.aws.appflow.inputs.FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataSuccessResponseHandlingConfigArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataArgs extends com.pulumi.resources.ResourceArgs {

    public static final FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataArgs Empty = new FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataArgs();

    /**
     * Settings that determine how Amazon AppFlow handles an error when placing data in the custom connector as destination. See Error Handling Config for more details.
     * 
     */
    @Import(name="errorHandlingConfig")
    private @Nullable Output<FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataErrorHandlingConfigArgs> errorHandlingConfig;

    /**
     * @return Settings that determine how Amazon AppFlow handles an error when placing data in the custom connector as destination. See Error Handling Config for more details.
     * 
     */
    public Optional<Output<FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataErrorHandlingConfigArgs>> errorHandlingConfig() {
        return Optional.ofNullable(this.errorHandlingConfig);
    }

    /**
     * Name of the field that Amazon AppFlow uses as an ID when performing a write operation such as update, delete, or upsert.
     * 
     */
    @Import(name="idFieldNames")
    private @Nullable Output<List<String>> idFieldNames;

    /**
     * @return Name of the field that Amazon AppFlow uses as an ID when performing a write operation such as update, delete, or upsert.
     * 
     */
    public Optional<Output<List<String>>> idFieldNames() {
        return Optional.ofNullable(this.idFieldNames);
    }

    /**
     * Object path specified in the SAPOData flow destination.
     * 
     */
    @Import(name="objectPath", required=true)
    private Output<String> objectPath;

    /**
     * @return Object path specified in the SAPOData flow destination.
     * 
     */
    public Output<String> objectPath() {
        return this.objectPath;
    }

    /**
     * Determines how Amazon AppFlow handles the success response that it gets from the connector after placing data. See Success Response Handling Config for more details.
     * 
     */
    @Import(name="successResponseHandlingConfig")
    private @Nullable Output<FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataSuccessResponseHandlingConfigArgs> successResponseHandlingConfig;

    /**
     * @return Determines how Amazon AppFlow handles the success response that it gets from the connector after placing data. See Success Response Handling Config for more details.
     * 
     */
    public Optional<Output<FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataSuccessResponseHandlingConfigArgs>> successResponseHandlingConfig() {
        return Optional.ofNullable(this.successResponseHandlingConfig);
    }

    /**
     * Type of write operation to be performed in the custom connector when it&#39;s used as destination. Valid values are `INSERT`, `UPSERT`, `UPDATE`, and `DELETE`.
     * 
     */
    @Import(name="writeOperationType")
    private @Nullable Output<String> writeOperationType;

    /**
     * @return Type of write operation to be performed in the custom connector when it&#39;s used as destination. Valid values are `INSERT`, `UPSERT`, `UPDATE`, and `DELETE`.
     * 
     */
    public Optional<Output<String>> writeOperationType() {
        return Optional.ofNullable(this.writeOperationType);
    }

    private FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataArgs() {}

    private FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataArgs(FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataArgs $) {
        this.errorHandlingConfig = $.errorHandlingConfig;
        this.idFieldNames = $.idFieldNames;
        this.objectPath = $.objectPath;
        this.successResponseHandlingConfig = $.successResponseHandlingConfig;
        this.writeOperationType = $.writeOperationType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataArgs $;

        public Builder() {
            $ = new FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataArgs();
        }

        public Builder(FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataArgs defaults) {
            $ = new FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param errorHandlingConfig Settings that determine how Amazon AppFlow handles an error when placing data in the custom connector as destination. See Error Handling Config for more details.
         * 
         * @return builder
         * 
         */
        public Builder errorHandlingConfig(@Nullable Output<FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataErrorHandlingConfigArgs> errorHandlingConfig) {
            $.errorHandlingConfig = errorHandlingConfig;
            return this;
        }

        /**
         * @param errorHandlingConfig Settings that determine how Amazon AppFlow handles an error when placing data in the custom connector as destination. See Error Handling Config for more details.
         * 
         * @return builder
         * 
         */
        public Builder errorHandlingConfig(FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataErrorHandlingConfigArgs errorHandlingConfig) {
            return errorHandlingConfig(Output.of(errorHandlingConfig));
        }

        /**
         * @param idFieldNames Name of the field that Amazon AppFlow uses as an ID when performing a write operation such as update, delete, or upsert.
         * 
         * @return builder
         * 
         */
        public Builder idFieldNames(@Nullable Output<List<String>> idFieldNames) {
            $.idFieldNames = idFieldNames;
            return this;
        }

        /**
         * @param idFieldNames Name of the field that Amazon AppFlow uses as an ID when performing a write operation such as update, delete, or upsert.
         * 
         * @return builder
         * 
         */
        public Builder idFieldNames(List<String> idFieldNames) {
            return idFieldNames(Output.of(idFieldNames));
        }

        /**
         * @param idFieldNames Name of the field that Amazon AppFlow uses as an ID when performing a write operation such as update, delete, or upsert.
         * 
         * @return builder
         * 
         */
        public Builder idFieldNames(String... idFieldNames) {
            return idFieldNames(List.of(idFieldNames));
        }

        /**
         * @param objectPath Object path specified in the SAPOData flow destination.
         * 
         * @return builder
         * 
         */
        public Builder objectPath(Output<String> objectPath) {
            $.objectPath = objectPath;
            return this;
        }

        /**
         * @param objectPath Object path specified in the SAPOData flow destination.
         * 
         * @return builder
         * 
         */
        public Builder objectPath(String objectPath) {
            return objectPath(Output.of(objectPath));
        }

        /**
         * @param successResponseHandlingConfig Determines how Amazon AppFlow handles the success response that it gets from the connector after placing data. See Success Response Handling Config for more details.
         * 
         * @return builder
         * 
         */
        public Builder successResponseHandlingConfig(@Nullable Output<FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataSuccessResponseHandlingConfigArgs> successResponseHandlingConfig) {
            $.successResponseHandlingConfig = successResponseHandlingConfig;
            return this;
        }

        /**
         * @param successResponseHandlingConfig Determines how Amazon AppFlow handles the success response that it gets from the connector after placing data. See Success Response Handling Config for more details.
         * 
         * @return builder
         * 
         */
        public Builder successResponseHandlingConfig(FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataSuccessResponseHandlingConfigArgs successResponseHandlingConfig) {
            return successResponseHandlingConfig(Output.of(successResponseHandlingConfig));
        }

        /**
         * @param writeOperationType Type of write operation to be performed in the custom connector when it&#39;s used as destination. Valid values are `INSERT`, `UPSERT`, `UPDATE`, and `DELETE`.
         * 
         * @return builder
         * 
         */
        public Builder writeOperationType(@Nullable Output<String> writeOperationType) {
            $.writeOperationType = writeOperationType;
            return this;
        }

        /**
         * @param writeOperationType Type of write operation to be performed in the custom connector when it&#39;s used as destination. Valid values are `INSERT`, `UPSERT`, `UPDATE`, and `DELETE`.
         * 
         * @return builder
         * 
         */
        public Builder writeOperationType(String writeOperationType) {
            return writeOperationType(Output.of(writeOperationType));
        }

        public FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataArgs build() {
            $.objectPath = Objects.requireNonNull($.objectPath, "expected parameter 'objectPath' to be non-null");
            return $;
        }
    }

}
