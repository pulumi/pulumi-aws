// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ecr;

import com.pulumi.aws.Utilities;
import com.pulumi.aws.ecr.PullThroughCacheRuleArgs;
import com.pulumi.aws.ecr.inputs.PullThroughCacheRuleState;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provides an Elastic Container Registry Pull Through Cache Rule.
 * 
 * More information about pull through cache rules, including the set of supported
 * upstream repositories, see [Using pull through cache rules](https://docs.aws.amazon.com/AmazonECR/latest/userguide/pull-through-cache.html).
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.aws.ecr.PullThroughCacheRule;
 * import com.pulumi.aws.ecr.PullThroughCacheRuleArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new PullThroughCacheRule("example", PullThroughCacheRuleArgs.builder()
 *             .ecrRepositoryPrefix("ecr-public")
 *             .upstreamRegistryUrl("public.ecr.aws")
 *             .credentialArn("arn:aws:secretsmanager:us-east-1:123456789:secret:ecr-pullthroughcache/ecrpublic")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Using `pulumi import`, import a pull-through cache rule using the `ecr_repository_prefix`. For example:
 * 
 * ```sh
 * $ pulumi import aws:ecr/pullThroughCacheRule:PullThroughCacheRule example ecr-public
 * ```
 * 
 */
@ResourceType(type="aws:ecr/pullThroughCacheRule:PullThroughCacheRule")
public class PullThroughCacheRule extends com.pulumi.resources.CustomResource {
    /**
     * ARN of the Secret which will be used to authenticate against the registry.
     * 
     */
    @Export(name="credentialArn", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> credentialArn;

    /**
     * @return ARN of the Secret which will be used to authenticate against the registry.
     * 
     */
    public Output<Optional<String>> credentialArn() {
        return Codegen.optional(this.credentialArn);
    }
    /**
     * The ARN of the IAM role associated with the pull through cache rule. Must be specified if the upstream registry is a cross-account ECR private registry. See [AWS Document - Setting up permissions for cross-account ECR to ECR PTC](https://docs.aws.amazon.com/AmazonECR/latest/userguide/pull-through-cache-private.html).
     * 
     */
    @Export(name="customRoleArn", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> customRoleArn;

    /**
     * @return The ARN of the IAM role associated with the pull through cache rule. Must be specified if the upstream registry is a cross-account ECR private registry. See [AWS Document - Setting up permissions for cross-account ECR to ECR PTC](https://docs.aws.amazon.com/AmazonECR/latest/userguide/pull-through-cache-private.html).
     * 
     */
    public Output<Optional<String>> customRoleArn() {
        return Codegen.optional(this.customRoleArn);
    }
    /**
     * The repository name prefix to use when caching images from the source registry. Use `ROOT` as the prefix to apply a template to all repositories in your registry that don&#39;t have an associated pull through cache rule.
     * 
     */
    @Export(name="ecrRepositoryPrefix", refs={String.class}, tree="[0]")
    private Output<String> ecrRepositoryPrefix;

    /**
     * @return The repository name prefix to use when caching images from the source registry. Use `ROOT` as the prefix to apply a template to all repositories in your registry that don&#39;t have an associated pull through cache rule.
     * 
     */
    public Output<String> ecrRepositoryPrefix() {
        return this.ecrRepositoryPrefix;
    }
    /**
     * The registry ID where the repository was created.
     * 
     */
    @Export(name="registryId", refs={String.class}, tree="[0]")
    private Output<String> registryId;

    /**
     * @return The registry ID where the repository was created.
     * 
     */
    public Output<String> registryId() {
        return this.registryId;
    }
    /**
     * The registry URL of the upstream registry to use as the source.
     * 
     */
    @Export(name="upstreamRegistryUrl", refs={String.class}, tree="[0]")
    private Output<String> upstreamRegistryUrl;

    /**
     * @return The registry URL of the upstream registry to use as the source.
     * 
     */
    public Output<String> upstreamRegistryUrl() {
        return this.upstreamRegistryUrl;
    }
    /**
     * The upstream repository prefix associated with the pull through cache rule. Used if the upstream registry is an ECR private registry. If not specified, it&#39;s set to `ROOT`, which allows matching with any upstream repository. See [AWS Document - Customizing repository prefixes for ECR to ECR pull through cache](https://docs.aws.amazon.com/AmazonECR/latest/userguide/pull-through-cache-private-wildcards.html).
     * 
     */
    @Export(name="upstreamRepositoryPrefix", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> upstreamRepositoryPrefix;

    /**
     * @return The upstream repository prefix associated with the pull through cache rule. Used if the upstream registry is an ECR private registry. If not specified, it&#39;s set to `ROOT`, which allows matching with any upstream repository. See [AWS Document - Customizing repository prefixes for ECR to ECR pull through cache](https://docs.aws.amazon.com/AmazonECR/latest/userguide/pull-through-cache-private-wildcards.html).
     * 
     */
    public Output<Optional<String>> upstreamRepositoryPrefix() {
        return Codegen.optional(this.upstreamRepositoryPrefix);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public PullThroughCacheRule(java.lang.String name) {
        this(name, PullThroughCacheRuleArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public PullThroughCacheRule(java.lang.String name, PullThroughCacheRuleArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public PullThroughCacheRule(java.lang.String name, PullThroughCacheRuleArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("aws:ecr/pullThroughCacheRule:PullThroughCacheRule", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private PullThroughCacheRule(java.lang.String name, Output<java.lang.String> id, @Nullable PullThroughCacheRuleState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("aws:ecr/pullThroughCacheRule:PullThroughCacheRule", name, state, makeResourceOptions(options, id), false);
    }

    private static PullThroughCacheRuleArgs makeArgs(PullThroughCacheRuleArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? PullThroughCacheRuleArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static PullThroughCacheRule get(java.lang.String name, Output<java.lang.String> id, @Nullable PullThroughCacheRuleState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new PullThroughCacheRule(name, id, state, options);
    }
}
