// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.evidently.inputs;

import com.pulumi.aws.evidently.inputs.FeatureEvaluationRuleArgs;
import com.pulumi.aws.evidently.inputs.FeatureVariationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FeatureState extends com.pulumi.resources.ResourceArgs {

    public static final FeatureState Empty = new FeatureState();

    /**
     * The ARN of the feature.
     * 
     */
    @Import(name="arn")
    private @Nullable Output<String> arn;

    /**
     * @return The ARN of the feature.
     * 
     */
    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    /**
     * The date and time that the feature is created.
     * 
     */
    @Import(name="createdTime")
    private @Nullable Output<String> createdTime;

    /**
     * @return The date and time that the feature is created.
     * 
     */
    public Optional<Output<String>> createdTime() {
        return Optional.ofNullable(this.createdTime);
    }

    /**
     * The name of the variation to use as the default variation. The default variation is served to users who are not allocated to any ongoing launches or experiments of this feature. This variation must also be listed in the `variations` structure. If you omit `default_variation`, the first variation listed in the `variations` structure is used as the default variation.
     * 
     */
    @Import(name="defaultVariation")
    private @Nullable Output<String> defaultVariation;

    /**
     * @return The name of the variation to use as the default variation. The default variation is served to users who are not allocated to any ongoing launches or experiments of this feature. This variation must also be listed in the `variations` structure. If you omit `default_variation`, the first variation listed in the `variations` structure is used as the default variation.
     * 
     */
    public Optional<Output<String>> defaultVariation() {
        return Optional.ofNullable(this.defaultVariation);
    }

    /**
     * Specifies the description of the feature.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Specifies the description of the feature.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Specify users that should always be served a specific variation of a feature. Each user is specified by a key-value pair . For each key, specify a user by entering their user ID, account ID, or some other identifier. For the value, specify the name of the variation that they are to be served.
     * 
     */
    @Import(name="entityOverrides")
    private @Nullable Output<Map<String,String>> entityOverrides;

    /**
     * @return Specify users that should always be served a specific variation of a feature. Each user is specified by a key-value pair . For each key, specify a user by entering their user ID, account ID, or some other identifier. For the value, specify the name of the variation that they are to be served.
     * 
     */
    public Optional<Output<Map<String,String>>> entityOverrides() {
        return Optional.ofNullable(this.entityOverrides);
    }

    /**
     * One or more blocks that define the evaluation rules for the feature. Detailed below
     * 
     */
    @Import(name="evaluationRules")
    private @Nullable Output<List<FeatureEvaluationRuleArgs>> evaluationRules;

    /**
     * @return One or more blocks that define the evaluation rules for the feature. Detailed below
     * 
     */
    public Optional<Output<List<FeatureEvaluationRuleArgs>>> evaluationRules() {
        return Optional.ofNullable(this.evaluationRules);
    }

    /**
     * Specify `ALL_RULES` to activate the traffic allocation specified by any ongoing launches or experiments. Specify `DEFAULT_VARIATION` to serve the default variation to all users instead.
     * 
     */
    @Import(name="evaluationStrategy")
    private @Nullable Output<String> evaluationStrategy;

    /**
     * @return Specify `ALL_RULES` to activate the traffic allocation specified by any ongoing launches or experiments. Specify `DEFAULT_VARIATION` to serve the default variation to all users instead.
     * 
     */
    public Optional<Output<String>> evaluationStrategy() {
        return Optional.ofNullable(this.evaluationStrategy);
    }

    /**
     * The date and time that the feature was most recently updated.
     * 
     */
    @Import(name="lastUpdatedTime")
    private @Nullable Output<String> lastUpdatedTime;

    /**
     * @return The date and time that the feature was most recently updated.
     * 
     */
    public Optional<Output<String>> lastUpdatedTime() {
        return Optional.ofNullable(this.lastUpdatedTime);
    }

    /**
     * The name for the new feature. Minimum length of `1`. Maximum length of `127`.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name for the new feature. Minimum length of `1`. Maximum length of `127`.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The name or ARN of the project that is to contain the new feature.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The name or ARN of the project that is to contain the new feature.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The current state of the feature. Valid values are `AVAILABLE` and `UPDATING`.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The current state of the feature. Valid values are `AVAILABLE` and `UPDATING`.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Tags to apply to the feature. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Tags to apply to the feature. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     */
    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    /**
     * @return A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     */
    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    /**
     * Defines the type of value used to define the different feature variations. Valid Values: `STRING`, `LONG`, `DOUBLE`, `BOOLEAN`.
     * 
     */
    @Import(name="valueType")
    private @Nullable Output<String> valueType;

    /**
     * @return Defines the type of value used to define the different feature variations. Valid Values: `STRING`, `LONG`, `DOUBLE`, `BOOLEAN`.
     * 
     */
    public Optional<Output<String>> valueType() {
        return Optional.ofNullable(this.valueType);
    }

    /**
     * One or more blocks that contain the configuration of the feature&#39;s different variations. Detailed below
     * 
     */
    @Import(name="variations")
    private @Nullable Output<List<FeatureVariationArgs>> variations;

    /**
     * @return One or more blocks that contain the configuration of the feature&#39;s different variations. Detailed below
     * 
     */
    public Optional<Output<List<FeatureVariationArgs>>> variations() {
        return Optional.ofNullable(this.variations);
    }

    private FeatureState() {}

    private FeatureState(FeatureState $) {
        this.arn = $.arn;
        this.createdTime = $.createdTime;
        this.defaultVariation = $.defaultVariation;
        this.description = $.description;
        this.entityOverrides = $.entityOverrides;
        this.evaluationRules = $.evaluationRules;
        this.evaluationStrategy = $.evaluationStrategy;
        this.lastUpdatedTime = $.lastUpdatedTime;
        this.name = $.name;
        this.project = $.project;
        this.status = $.status;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
        this.valueType = $.valueType;
        this.variations = $.variations;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FeatureState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FeatureState $;

        public Builder() {
            $ = new FeatureState();
        }

        public Builder(FeatureState defaults) {
            $ = new FeatureState(Objects.requireNonNull(defaults));
        }

        /**
         * @param arn The ARN of the feature.
         * 
         * @return builder
         * 
         */
        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        /**
         * @param arn The ARN of the feature.
         * 
         * @return builder
         * 
         */
        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        /**
         * @param createdTime The date and time that the feature is created.
         * 
         * @return builder
         * 
         */
        public Builder createdTime(@Nullable Output<String> createdTime) {
            $.createdTime = createdTime;
            return this;
        }

        /**
         * @param createdTime The date and time that the feature is created.
         * 
         * @return builder
         * 
         */
        public Builder createdTime(String createdTime) {
            return createdTime(Output.of(createdTime));
        }

        /**
         * @param defaultVariation The name of the variation to use as the default variation. The default variation is served to users who are not allocated to any ongoing launches or experiments of this feature. This variation must also be listed in the `variations` structure. If you omit `default_variation`, the first variation listed in the `variations` structure is used as the default variation.
         * 
         * @return builder
         * 
         */
        public Builder defaultVariation(@Nullable Output<String> defaultVariation) {
            $.defaultVariation = defaultVariation;
            return this;
        }

        /**
         * @param defaultVariation The name of the variation to use as the default variation. The default variation is served to users who are not allocated to any ongoing launches or experiments of this feature. This variation must also be listed in the `variations` structure. If you omit `default_variation`, the first variation listed in the `variations` structure is used as the default variation.
         * 
         * @return builder
         * 
         */
        public Builder defaultVariation(String defaultVariation) {
            return defaultVariation(Output.of(defaultVariation));
        }

        /**
         * @param description Specifies the description of the feature.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Specifies the description of the feature.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param entityOverrides Specify users that should always be served a specific variation of a feature. Each user is specified by a key-value pair . For each key, specify a user by entering their user ID, account ID, or some other identifier. For the value, specify the name of the variation that they are to be served.
         * 
         * @return builder
         * 
         */
        public Builder entityOverrides(@Nullable Output<Map<String,String>> entityOverrides) {
            $.entityOverrides = entityOverrides;
            return this;
        }

        /**
         * @param entityOverrides Specify users that should always be served a specific variation of a feature. Each user is specified by a key-value pair . For each key, specify a user by entering their user ID, account ID, or some other identifier. For the value, specify the name of the variation that they are to be served.
         * 
         * @return builder
         * 
         */
        public Builder entityOverrides(Map<String,String> entityOverrides) {
            return entityOverrides(Output.of(entityOverrides));
        }

        /**
         * @param evaluationRules One or more blocks that define the evaluation rules for the feature. Detailed below
         * 
         * @return builder
         * 
         */
        public Builder evaluationRules(@Nullable Output<List<FeatureEvaluationRuleArgs>> evaluationRules) {
            $.evaluationRules = evaluationRules;
            return this;
        }

        /**
         * @param evaluationRules One or more blocks that define the evaluation rules for the feature. Detailed below
         * 
         * @return builder
         * 
         */
        public Builder evaluationRules(List<FeatureEvaluationRuleArgs> evaluationRules) {
            return evaluationRules(Output.of(evaluationRules));
        }

        /**
         * @param evaluationRules One or more blocks that define the evaluation rules for the feature. Detailed below
         * 
         * @return builder
         * 
         */
        public Builder evaluationRules(FeatureEvaluationRuleArgs... evaluationRules) {
            return evaluationRules(List.of(evaluationRules));
        }

        /**
         * @param evaluationStrategy Specify `ALL_RULES` to activate the traffic allocation specified by any ongoing launches or experiments. Specify `DEFAULT_VARIATION` to serve the default variation to all users instead.
         * 
         * @return builder
         * 
         */
        public Builder evaluationStrategy(@Nullable Output<String> evaluationStrategy) {
            $.evaluationStrategy = evaluationStrategy;
            return this;
        }

        /**
         * @param evaluationStrategy Specify `ALL_RULES` to activate the traffic allocation specified by any ongoing launches or experiments. Specify `DEFAULT_VARIATION` to serve the default variation to all users instead.
         * 
         * @return builder
         * 
         */
        public Builder evaluationStrategy(String evaluationStrategy) {
            return evaluationStrategy(Output.of(evaluationStrategy));
        }

        /**
         * @param lastUpdatedTime The date and time that the feature was most recently updated.
         * 
         * @return builder
         * 
         */
        public Builder lastUpdatedTime(@Nullable Output<String> lastUpdatedTime) {
            $.lastUpdatedTime = lastUpdatedTime;
            return this;
        }

        /**
         * @param lastUpdatedTime The date and time that the feature was most recently updated.
         * 
         * @return builder
         * 
         */
        public Builder lastUpdatedTime(String lastUpdatedTime) {
            return lastUpdatedTime(Output.of(lastUpdatedTime));
        }

        /**
         * @param name The name for the new feature. Minimum length of `1`. Maximum length of `127`.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name for the new feature. Minimum length of `1`. Maximum length of `127`.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param project The name or ARN of the project that is to contain the new feature.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The name or ARN of the project that is to contain the new feature.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param status The current state of the feature. Valid values are `AVAILABLE` and `UPDATING`.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The current state of the feature. Valid values are `AVAILABLE` and `UPDATING`.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param tags Tags to apply to the feature. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Tags to apply to the feature. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tagsAll A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
         * 
         * @return builder
         * 
         */
        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        /**
         * @param tagsAll A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
         * 
         * @return builder
         * 
         */
        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        /**
         * @param valueType Defines the type of value used to define the different feature variations. Valid Values: `STRING`, `LONG`, `DOUBLE`, `BOOLEAN`.
         * 
         * @return builder
         * 
         */
        public Builder valueType(@Nullable Output<String> valueType) {
            $.valueType = valueType;
            return this;
        }

        /**
         * @param valueType Defines the type of value used to define the different feature variations. Valid Values: `STRING`, `LONG`, `DOUBLE`, `BOOLEAN`.
         * 
         * @return builder
         * 
         */
        public Builder valueType(String valueType) {
            return valueType(Output.of(valueType));
        }

        /**
         * @param variations One or more blocks that contain the configuration of the feature&#39;s different variations. Detailed below
         * 
         * @return builder
         * 
         */
        public Builder variations(@Nullable Output<List<FeatureVariationArgs>> variations) {
            $.variations = variations;
            return this;
        }

        /**
         * @param variations One or more blocks that contain the configuration of the feature&#39;s different variations. Detailed below
         * 
         * @return builder
         * 
         */
        public Builder variations(List<FeatureVariationArgs> variations) {
            return variations(Output.of(variations));
        }

        /**
         * @param variations One or more blocks that contain the configuration of the feature&#39;s different variations. Detailed below
         * 
         * @return builder
         * 
         */
        public Builder variations(FeatureVariationArgs... variations) {
            return variations(List.of(variations));
        }

        public FeatureState build() {
            return $;
        }
    }

}
