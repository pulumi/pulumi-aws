// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.alb.inputs;

import com.pulumi.aws.alb.inputs.ListenerDefaultActionArgs;
import com.pulumi.aws.alb.inputs.ListenerMutualAuthenticationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ListenerState extends com.pulumi.resources.ResourceArgs {

    public static final ListenerState Empty = new ListenerState();

    /**
     * Name of the Application-Layer Protocol Negotiation (ALPN) policy. Can be set if `protocol` is `TLS`. Valid values are `HTTP1Only`, `HTTP2Only`, `HTTP2Optional`, `HTTP2Preferred`, and `None`.
     * 
     */
    @Import(name="alpnPolicy")
    private @Nullable Output<String> alpnPolicy;

    /**
     * @return Name of the Application-Layer Protocol Negotiation (ALPN) policy. Can be set if `protocol` is `TLS`. Valid values are `HTTP1Only`, `HTTP2Only`, `HTTP2Optional`, `HTTP2Preferred`, and `None`.
     * 
     */
    public Optional<Output<String>> alpnPolicy() {
        return Optional.ofNullable(this.alpnPolicy);
    }

    /**
     * ARN of the listener (matches `id`).
     * 
     */
    @Import(name="arn")
    private @Nullable Output<String> arn;

    /**
     * @return ARN of the listener (matches `id`).
     * 
     */
    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    /**
     * ARN of the default SSL server certificate. Exactly one certificate is required if the protocol is HTTPS. For adding additional SSL certificates, see the `aws.lb.ListenerCertificate` resource.
     * 
     */
    @Import(name="certificateArn")
    private @Nullable Output<String> certificateArn;

    /**
     * @return ARN of the default SSL server certificate. Exactly one certificate is required if the protocol is HTTPS. For adding additional SSL certificates, see the `aws.lb.ListenerCertificate` resource.
     * 
     */
    public Optional<Output<String>> certificateArn() {
        return Optional.ofNullable(this.certificateArn);
    }

    /**
     * Configuration block for default actions. See below.
     * 
     */
    @Import(name="defaultActions")
    private @Nullable Output<List<ListenerDefaultActionArgs>> defaultActions;

    /**
     * @return Configuration block for default actions. See below.
     * 
     */
    public Optional<Output<List<ListenerDefaultActionArgs>>> defaultActions() {
        return Optional.ofNullable(this.defaultActions);
    }

    /**
     * ARN of the load balancer.
     * 
     * The following arguments are optional:
     * 
     */
    @Import(name="loadBalancerArn")
    private @Nullable Output<String> loadBalancerArn;

    /**
     * @return ARN of the load balancer.
     * 
     * The following arguments are optional:
     * 
     */
    public Optional<Output<String>> loadBalancerArn() {
        return Optional.ofNullable(this.loadBalancerArn);
    }

    /**
     * The mutual authentication configuration information. See below.
     * 
     */
    @Import(name="mutualAuthentication")
    private @Nullable Output<ListenerMutualAuthenticationArgs> mutualAuthentication;

    /**
     * @return The mutual authentication configuration information. See below.
     * 
     */
    public Optional<Output<ListenerMutualAuthenticationArgs>> mutualAuthentication() {
        return Optional.ofNullable(this.mutualAuthentication);
    }

    /**
     * Port on which the load balancer is listening. Not valid for Gateway Load Balancers.
     * 
     */
    @Import(name="port")
    private @Nullable Output<Integer> port;

    /**
     * @return Port on which the load balancer is listening. Not valid for Gateway Load Balancers.
     * 
     */
    public Optional<Output<Integer>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * Protocol for connections from clients to the load balancer. For Application Load Balancers, valid values are `HTTP` and `HTTPS`, with a default of `HTTP`. For Network Load Balancers, valid values are `TCP`, `TLS`, `UDP`, and `TCP_UDP`. Not valid to use `UDP` or `TCP_UDP` if dual-stack mode is enabled. Not valid for Gateway Load Balancers.
     * 
     */
    @Import(name="protocol")
    private @Nullable Output<String> protocol;

    /**
     * @return Protocol for connections from clients to the load balancer. For Application Load Balancers, valid values are `HTTP` and `HTTPS`, with a default of `HTTP`. For Network Load Balancers, valid values are `TCP`, `TLS`, `UDP`, and `TCP_UDP`. Not valid to use `UDP` or `TCP_UDP` if dual-stack mode is enabled. Not valid for Gateway Load Balancers.
     * 
     */
    public Optional<Output<String>> protocol() {
        return Optional.ofNullable(this.protocol);
    }

    /**
     * Enables you to modify the header name of the `X-Amzn-Mtls-Clientcert` HTTP request header. Can only be set if protocol is `HTTPS` for Application Load Balancers.
     * 
     */
    @Import(name="routingHttpRequestXAmznMtlsClientcertHeaderName")
    private @Nullable Output<String> routingHttpRequestXAmznMtlsClientcertHeaderName;

    /**
     * @return Enables you to modify the header name of the `X-Amzn-Mtls-Clientcert` HTTP request header. Can only be set if protocol is `HTTPS` for Application Load Balancers.
     * 
     */
    public Optional<Output<String>> routingHttpRequestXAmznMtlsClientcertHeaderName() {
        return Optional.ofNullable(this.routingHttpRequestXAmznMtlsClientcertHeaderName);
    }

    /**
     * Enables you to modify the header name of the `X-Amzn-Mtls-Clientcert-Issuer` HTTP request header. Can only be set if protocol is `HTTPS` for Application Load Balancers.
     * 
     */
    @Import(name="routingHttpRequestXAmznMtlsClientcertIssuerHeaderName")
    private @Nullable Output<String> routingHttpRequestXAmznMtlsClientcertIssuerHeaderName;

    /**
     * @return Enables you to modify the header name of the `X-Amzn-Mtls-Clientcert-Issuer` HTTP request header. Can only be set if protocol is `HTTPS` for Application Load Balancers.
     * 
     */
    public Optional<Output<String>> routingHttpRequestXAmznMtlsClientcertIssuerHeaderName() {
        return Optional.ofNullable(this.routingHttpRequestXAmznMtlsClientcertIssuerHeaderName);
    }

    /**
     * Enables you to modify the header name of the `X-Amzn-Mtls-Clientcert-Leaf` HTTP request header. Can only be set if protocol is `HTTPS` for Application Load Balancers.
     * 
     */
    @Import(name="routingHttpRequestXAmznMtlsClientcertLeafHeaderName")
    private @Nullable Output<String> routingHttpRequestXAmznMtlsClientcertLeafHeaderName;

    /**
     * @return Enables you to modify the header name of the `X-Amzn-Mtls-Clientcert-Leaf` HTTP request header. Can only be set if protocol is `HTTPS` for Application Load Balancers.
     * 
     */
    public Optional<Output<String>> routingHttpRequestXAmznMtlsClientcertLeafHeaderName() {
        return Optional.ofNullable(this.routingHttpRequestXAmznMtlsClientcertLeafHeaderName);
    }

    /**
     * Enables you to modify the header name of the `X-Amzn-Mtls-Clientcert-Serial-Number` HTTP request header. Can only be set if protocol is `HTTPS` for Application Load Balancers.
     * 
     */
    @Import(name="routingHttpRequestXAmznMtlsClientcertSerialNumberHeaderName")
    private @Nullable Output<String> routingHttpRequestXAmznMtlsClientcertSerialNumberHeaderName;

    /**
     * @return Enables you to modify the header name of the `X-Amzn-Mtls-Clientcert-Serial-Number` HTTP request header. Can only be set if protocol is `HTTPS` for Application Load Balancers.
     * 
     */
    public Optional<Output<String>> routingHttpRequestXAmznMtlsClientcertSerialNumberHeaderName() {
        return Optional.ofNullable(this.routingHttpRequestXAmznMtlsClientcertSerialNumberHeaderName);
    }

    /**
     * Enables you to modify the header name of the `X-Amzn-Mtls-Clientcert-Subject` HTTP request header. Can only be set if protocol is `HTTPS` for Application Load Balancers.
     * 
     */
    @Import(name="routingHttpRequestXAmznMtlsClientcertSubjectHeaderName")
    private @Nullable Output<String> routingHttpRequestXAmznMtlsClientcertSubjectHeaderName;

    /**
     * @return Enables you to modify the header name of the `X-Amzn-Mtls-Clientcert-Subject` HTTP request header. Can only be set if protocol is `HTTPS` for Application Load Balancers.
     * 
     */
    public Optional<Output<String>> routingHttpRequestXAmznMtlsClientcertSubjectHeaderName() {
        return Optional.ofNullable(this.routingHttpRequestXAmznMtlsClientcertSubjectHeaderName);
    }

    /**
     * Enables you to modify the header name of the `X-Amzn-Mtls-Clientcert-Validity` HTTP request header. Can only be set if protocol is `HTTPS` for Application Load Balancers.
     * 
     */
    @Import(name="routingHttpRequestXAmznMtlsClientcertValidityHeaderName")
    private @Nullable Output<String> routingHttpRequestXAmznMtlsClientcertValidityHeaderName;

    /**
     * @return Enables you to modify the header name of the `X-Amzn-Mtls-Clientcert-Validity` HTTP request header. Can only be set if protocol is `HTTPS` for Application Load Balancers.
     * 
     */
    public Optional<Output<String>> routingHttpRequestXAmznMtlsClientcertValidityHeaderName() {
        return Optional.ofNullable(this.routingHttpRequestXAmznMtlsClientcertValidityHeaderName);
    }

    /**
     * Enables you to modify the header name of the `X-Amzn-Tls-Cipher-Suite` HTTP request header. Can only be set if protocol is `HTTPS` for Application Load Balancers.
     * 
     */
    @Import(name="routingHttpRequestXAmznTlsCipherSuiteHeaderName")
    private @Nullable Output<String> routingHttpRequestXAmznTlsCipherSuiteHeaderName;

    /**
     * @return Enables you to modify the header name of the `X-Amzn-Tls-Cipher-Suite` HTTP request header. Can only be set if protocol is `HTTPS` for Application Load Balancers.
     * 
     */
    public Optional<Output<String>> routingHttpRequestXAmznTlsCipherSuiteHeaderName() {
        return Optional.ofNullable(this.routingHttpRequestXAmznTlsCipherSuiteHeaderName);
    }

    /**
     * Enables you to modify the header name of the `X-Amzn-Tls-Version` HTTP request header. Can only be set if protocol is `HTTPS` for Application Load Balancers.
     * 
     */
    @Import(name="routingHttpRequestXAmznTlsVersionHeaderName")
    private @Nullable Output<String> routingHttpRequestXAmznTlsVersionHeaderName;

    /**
     * @return Enables you to modify the header name of the `X-Amzn-Tls-Version` HTTP request header. Can only be set if protocol is `HTTPS` for Application Load Balancers.
     * 
     */
    public Optional<Output<String>> routingHttpRequestXAmznTlsVersionHeaderName() {
        return Optional.ofNullable(this.routingHttpRequestXAmznTlsVersionHeaderName);
    }

    /**
     * Specifies which headers the browser can expose to the requesting client. Can only be set if protocol is `HTTP` or `HTTPS` for Application Load Balancers. Not supported for Network Load Balancer, or with a Gateway Load Balancer. The only valid value is `true`.
     * 
     */
    @Import(name="routingHttpResponseAccessControlAllowCredentialsHeaderValue")
    private @Nullable Output<String> routingHttpResponseAccessControlAllowCredentialsHeaderValue;

    /**
     * @return Specifies which headers the browser can expose to the requesting client. Can only be set if protocol is `HTTP` or `HTTPS` for Application Load Balancers. Not supported for Network Load Balancer, or with a Gateway Load Balancer. The only valid value is `true`.
     * 
     */
    public Optional<Output<String>> routingHttpResponseAccessControlAllowCredentialsHeaderValue() {
        return Optional.ofNullable(this.routingHttpResponseAccessControlAllowCredentialsHeaderValue);
    }

    /**
     * Specifies which headers can be used during the request. Can only be set if protocol is `HTTP` or `HTTPS` for Application Load Balancers. Not supported for Network Load Balancer, or with a Gateway Load Balancer. Valid values are `*`, `Accept`, `Accept-Language`, `Cache-Control`, `Content-Language`, `Content-Length`, `Content-Type`, `Expires`, `Last-Modified`, `Pragma`. Dependent on your use-case other headers can be exposed and then set as a value consult the Access-Control-Allow-Headers documentation.
     * 
     */
    @Import(name="routingHttpResponseAccessControlAllowHeadersHeaderValue")
    private @Nullable Output<String> routingHttpResponseAccessControlAllowHeadersHeaderValue;

    /**
     * @return Specifies which headers can be used during the request. Can only be set if protocol is `HTTP` or `HTTPS` for Application Load Balancers. Not supported for Network Load Balancer, or with a Gateway Load Balancer. Valid values are `*`, `Accept`, `Accept-Language`, `Cache-Control`, `Content-Language`, `Content-Length`, `Content-Type`, `Expires`, `Last-Modified`, `Pragma`. Dependent on your use-case other headers can be exposed and then set as a value consult the Access-Control-Allow-Headers documentation.
     * 
     */
    public Optional<Output<String>> routingHttpResponseAccessControlAllowHeadersHeaderValue() {
        return Optional.ofNullable(this.routingHttpResponseAccessControlAllowHeadersHeaderValue);
    }

    /**
     * Set which HTTP methods are allowed when accessing the server from a different origin. Can only be set if protocol is `HTTP` or `HTTPS` for Application Load Balancers. Not supported for Network Load Balancer, or with a Gateway Load Balancer. Valid values are `GET`, `HEAD`, `POST`, `DELETE`, `CONNECT`, `OPTIONS`, `TRACE` or `PATCH`.
     * 
     */
    @Import(name="routingHttpResponseAccessControlAllowMethodsHeaderValue")
    private @Nullable Output<String> routingHttpResponseAccessControlAllowMethodsHeaderValue;

    /**
     * @return Set which HTTP methods are allowed when accessing the server from a different origin. Can only be set if protocol is `HTTP` or `HTTPS` for Application Load Balancers. Not supported for Network Load Balancer, or with a Gateway Load Balancer. Valid values are `GET`, `HEAD`, `POST`, `DELETE`, `CONNECT`, `OPTIONS`, `TRACE` or `PATCH`.
     * 
     */
    public Optional<Output<String>> routingHttpResponseAccessControlAllowMethodsHeaderValue() {
        return Optional.ofNullable(this.routingHttpResponseAccessControlAllowMethodsHeaderValue);
    }

    /**
     * Specifies which origins are allowed to access the server. Can only be set if protocol is `HTTP` or `HTTPS` for Application Load Balancers. Not supported for Network Load Balancer, or with a Gateway Load Balancer. A valid value is a URI, eg: `https://example.com`.
     * 
     */
    @Import(name="routingHttpResponseAccessControlAllowOriginHeaderValue")
    private @Nullable Output<String> routingHttpResponseAccessControlAllowOriginHeaderValue;

    /**
     * @return Specifies which origins are allowed to access the server. Can only be set if protocol is `HTTP` or `HTTPS` for Application Load Balancers. Not supported for Network Load Balancer, or with a Gateway Load Balancer. A valid value is a URI, eg: `https://example.com`.
     * 
     */
    public Optional<Output<String>> routingHttpResponseAccessControlAllowOriginHeaderValue() {
        return Optional.ofNullable(this.routingHttpResponseAccessControlAllowOriginHeaderValue);
    }

    /**
     * Specifies whether the browser should include credentials such as cookies or authentication when making requests. Can only be set if protocol is `HTTP` or `HTTPS` for Application Load Balancers. Not supported for Network Load Balancer, or with a Gateway Load Balancer. Valid values are `*`, `Cache-Control`, `Content-Language`, `Content-Length`, `Content-Type`, `Expires`, `Last-Modified`, or `Pragma`. Dependent on your use-case other headers can be exposed, consult the Access-Control-Expose-Headers documentation.
     * 
     */
    @Import(name="routingHttpResponseAccessControlExposeHeadersHeaderValue")
    private @Nullable Output<String> routingHttpResponseAccessControlExposeHeadersHeaderValue;

    /**
     * @return Specifies whether the browser should include credentials such as cookies or authentication when making requests. Can only be set if protocol is `HTTP` or `HTTPS` for Application Load Balancers. Not supported for Network Load Balancer, or with a Gateway Load Balancer. Valid values are `*`, `Cache-Control`, `Content-Language`, `Content-Length`, `Content-Type`, `Expires`, `Last-Modified`, or `Pragma`. Dependent on your use-case other headers can be exposed, consult the Access-Control-Expose-Headers documentation.
     * 
     */
    public Optional<Output<String>> routingHttpResponseAccessControlExposeHeadersHeaderValue() {
        return Optional.ofNullable(this.routingHttpResponseAccessControlExposeHeadersHeaderValue);
    }

    /**
     * Specifies how long the results of a preflight request can be cached, in seconds. Can only be set if protocol is `HTTP` or `HTTPS` for Application Load Balancers. Not supported for Network Load Balancer, or with a Gateway Load Balancer. Valid values are between `0` and `86400`. This value is browser specific, consult the Access-Control-Max-Age documentation.
     * 
     */
    @Import(name="routingHttpResponseAccessControlMaxAgeHeaderValue")
    private @Nullable Output<String> routingHttpResponseAccessControlMaxAgeHeaderValue;

    /**
     * @return Specifies how long the results of a preflight request can be cached, in seconds. Can only be set if protocol is `HTTP` or `HTTPS` for Application Load Balancers. Not supported for Network Load Balancer, or with a Gateway Load Balancer. Valid values are between `0` and `86400`. This value is browser specific, consult the Access-Control-Max-Age documentation.
     * 
     */
    public Optional<Output<String>> routingHttpResponseAccessControlMaxAgeHeaderValue() {
        return Optional.ofNullable(this.routingHttpResponseAccessControlMaxAgeHeaderValue);
    }

    /**
     * Specifies restrictions enforced by the browser to help minimize the risk of certain types of security threats. Can only be set if protocol is `HTTP` or `HTTPS` for Application Load Balancers. Not supported for Network Load Balancer, or with a Gateway Load Balancer. Values for this are extensive, and can be impactful when set, consult Content-Security-Policy documentation.
     * 
     */
    @Import(name="routingHttpResponseContentSecurityPolicyHeaderValue")
    private @Nullable Output<String> routingHttpResponseContentSecurityPolicyHeaderValue;

    /**
     * @return Specifies restrictions enforced by the browser to help minimize the risk of certain types of security threats. Can only be set if protocol is `HTTP` or `HTTPS` for Application Load Balancers. Not supported for Network Load Balancer, or with a Gateway Load Balancer. Values for this are extensive, and can be impactful when set, consult Content-Security-Policy documentation.
     * 
     */
    public Optional<Output<String>> routingHttpResponseContentSecurityPolicyHeaderValue() {
        return Optional.ofNullable(this.routingHttpResponseContentSecurityPolicyHeaderValue);
    }

    /**
     * Enables you to allow or remove the HTTP response server header. Can only be set if protocol is `HTTP` or `HTTPS` for Application Load Balancers. Not supported for Network Load Balancer, or with a Gateway Load Balancer. Valid values are `true` or `false`.
     * 
     */
    @Import(name="routingHttpResponseServerEnabled")
    private @Nullable Output<Boolean> routingHttpResponseServerEnabled;

    /**
     * @return Enables you to allow or remove the HTTP response server header. Can only be set if protocol is `HTTP` or `HTTPS` for Application Load Balancers. Not supported for Network Load Balancer, or with a Gateway Load Balancer. Valid values are `true` or `false`.
     * 
     */
    public Optional<Output<Boolean>> routingHttpResponseServerEnabled() {
        return Optional.ofNullable(this.routingHttpResponseServerEnabled);
    }

    /**
     * Informs browsers that the site should only be accessed using HTTPS, and that any future attempts to access it using HTTP should automatically be converted to HTTPS. Default values are `max-age=31536000; includeSubDomains; preload` consult the Strict-Transport-Security documentation for further details.
     * 
     */
    @Import(name="routingHttpResponseStrictTransportSecurityHeaderValue")
    private @Nullable Output<String> routingHttpResponseStrictTransportSecurityHeaderValue;

    /**
     * @return Informs browsers that the site should only be accessed using HTTPS, and that any future attempts to access it using HTTP should automatically be converted to HTTPS. Default values are `max-age=31536000; includeSubDomains; preload` consult the Strict-Transport-Security documentation for further details.
     * 
     */
    public Optional<Output<String>> routingHttpResponseStrictTransportSecurityHeaderValue() {
        return Optional.ofNullable(this.routingHttpResponseStrictTransportSecurityHeaderValue);
    }

    /**
     * Indicates whether the MIME types advertised in the Content-Type headers should be followed and not be changed. Can only be set if protocol is `HTTP` or `HTTPS` for Application Load Balancers. Not supported for Network Load Balancer, or with a Gateway Load Balancer. The only valid value is `nosniff`.
     * 
     */
    @Import(name="routingHttpResponseXContentTypeOptionsHeaderValue")
    private @Nullable Output<String> routingHttpResponseXContentTypeOptionsHeaderValue;

    /**
     * @return Indicates whether the MIME types advertised in the Content-Type headers should be followed and not be changed. Can only be set if protocol is `HTTP` or `HTTPS` for Application Load Balancers. Not supported for Network Load Balancer, or with a Gateway Load Balancer. The only valid value is `nosniff`.
     * 
     */
    public Optional<Output<String>> routingHttpResponseXContentTypeOptionsHeaderValue() {
        return Optional.ofNullable(this.routingHttpResponseXContentTypeOptionsHeaderValue);
    }

    /**
     * Indicates whether the browser is allowed to render a page in a frame, iframe, embed or object. Can only be set if protocol is `HTTP` or `HTTPS` for Application Load Balancers. Not supported for Network Load Balancer, or with a Gateway Load Balancer. The only valid values are `DENY`, `SAMEORIGIN`, or `ALLOW-FROM https://example.com`.
     * 
     */
    @Import(name="routingHttpResponseXFrameOptionsHeaderValue")
    private @Nullable Output<String> routingHttpResponseXFrameOptionsHeaderValue;

    /**
     * @return Indicates whether the browser is allowed to render a page in a frame, iframe, embed or object. Can only be set if protocol is `HTTP` or `HTTPS` for Application Load Balancers. Not supported for Network Load Balancer, or with a Gateway Load Balancer. The only valid values are `DENY`, `SAMEORIGIN`, or `ALLOW-FROM https://example.com`.
     * 
     */
    public Optional<Output<String>> routingHttpResponseXFrameOptionsHeaderValue() {
        return Optional.ofNullable(this.routingHttpResponseXFrameOptionsHeaderValue);
    }

    /**
     * Name of the SSL Policy for the listener. Required if `protocol` is `HTTPS` or `TLS`. Default is `ELBSecurityPolicy-2016-08`.
     * 
     */
    @Import(name="sslPolicy")
    private @Nullable Output<String> sslPolicy;

    /**
     * @return Name of the SSL Policy for the listener. Required if `protocol` is `HTTPS` or `TLS`. Default is `ELBSecurityPolicy-2016-08`.
     * 
     */
    public Optional<Output<String>> sslPolicy() {
        return Optional.ofNullable(this.sslPolicy);
    }

    /**
     * A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     * &gt; **Note::** When a `Name` key is specified in the map, the AWS Console maps the value to the `Name Tag` column value inside the `Listener Rules` table within a specific load balancer listener page. Otherwise, the value resolves to `Default`.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     * &gt; **Note::** When a `Name` key is specified in the map, the AWS Console maps the value to the `Name Tag` column value inside the `Listener Rules` table within a specific load balancer listener page. Otherwise, the value resolves to `Default`.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    /**
     * @return A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    /**
     * TCP idle timeout value in seconds. Can only be set if protocol is `TCP` on Network Load Balancer, or with a Gateway Load Balancer. Not supported for Application Load Balancers. Valid values are between `60` and `6000` inclusive. Default: `350`.
     * 
     */
    @Import(name="tcpIdleTimeoutSeconds")
    private @Nullable Output<Integer> tcpIdleTimeoutSeconds;

    /**
     * @return TCP idle timeout value in seconds. Can only be set if protocol is `TCP` on Network Load Balancer, or with a Gateway Load Balancer. Not supported for Application Load Balancers. Valid values are between `60` and `6000` inclusive. Default: `350`.
     * 
     */
    public Optional<Output<Integer>> tcpIdleTimeoutSeconds() {
        return Optional.ofNullable(this.tcpIdleTimeoutSeconds);
    }

    private ListenerState() {}

    private ListenerState(ListenerState $) {
        this.alpnPolicy = $.alpnPolicy;
        this.arn = $.arn;
        this.certificateArn = $.certificateArn;
        this.defaultActions = $.defaultActions;
        this.loadBalancerArn = $.loadBalancerArn;
        this.mutualAuthentication = $.mutualAuthentication;
        this.port = $.port;
        this.protocol = $.protocol;
        this.routingHttpRequestXAmznMtlsClientcertHeaderName = $.routingHttpRequestXAmznMtlsClientcertHeaderName;
        this.routingHttpRequestXAmznMtlsClientcertIssuerHeaderName = $.routingHttpRequestXAmznMtlsClientcertIssuerHeaderName;
        this.routingHttpRequestXAmznMtlsClientcertLeafHeaderName = $.routingHttpRequestXAmznMtlsClientcertLeafHeaderName;
        this.routingHttpRequestXAmznMtlsClientcertSerialNumberHeaderName = $.routingHttpRequestXAmznMtlsClientcertSerialNumberHeaderName;
        this.routingHttpRequestXAmznMtlsClientcertSubjectHeaderName = $.routingHttpRequestXAmznMtlsClientcertSubjectHeaderName;
        this.routingHttpRequestXAmznMtlsClientcertValidityHeaderName = $.routingHttpRequestXAmznMtlsClientcertValidityHeaderName;
        this.routingHttpRequestXAmznTlsCipherSuiteHeaderName = $.routingHttpRequestXAmznTlsCipherSuiteHeaderName;
        this.routingHttpRequestXAmznTlsVersionHeaderName = $.routingHttpRequestXAmznTlsVersionHeaderName;
        this.routingHttpResponseAccessControlAllowCredentialsHeaderValue = $.routingHttpResponseAccessControlAllowCredentialsHeaderValue;
        this.routingHttpResponseAccessControlAllowHeadersHeaderValue = $.routingHttpResponseAccessControlAllowHeadersHeaderValue;
        this.routingHttpResponseAccessControlAllowMethodsHeaderValue = $.routingHttpResponseAccessControlAllowMethodsHeaderValue;
        this.routingHttpResponseAccessControlAllowOriginHeaderValue = $.routingHttpResponseAccessControlAllowOriginHeaderValue;
        this.routingHttpResponseAccessControlExposeHeadersHeaderValue = $.routingHttpResponseAccessControlExposeHeadersHeaderValue;
        this.routingHttpResponseAccessControlMaxAgeHeaderValue = $.routingHttpResponseAccessControlMaxAgeHeaderValue;
        this.routingHttpResponseContentSecurityPolicyHeaderValue = $.routingHttpResponseContentSecurityPolicyHeaderValue;
        this.routingHttpResponseServerEnabled = $.routingHttpResponseServerEnabled;
        this.routingHttpResponseStrictTransportSecurityHeaderValue = $.routingHttpResponseStrictTransportSecurityHeaderValue;
        this.routingHttpResponseXContentTypeOptionsHeaderValue = $.routingHttpResponseXContentTypeOptionsHeaderValue;
        this.routingHttpResponseXFrameOptionsHeaderValue = $.routingHttpResponseXFrameOptionsHeaderValue;
        this.sslPolicy = $.sslPolicy;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
        this.tcpIdleTimeoutSeconds = $.tcpIdleTimeoutSeconds;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ListenerState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ListenerState $;

        public Builder() {
            $ = new ListenerState();
        }

        public Builder(ListenerState defaults) {
            $ = new ListenerState(Objects.requireNonNull(defaults));
        }

        /**
         * @param alpnPolicy Name of the Application-Layer Protocol Negotiation (ALPN) policy. Can be set if `protocol` is `TLS`. Valid values are `HTTP1Only`, `HTTP2Only`, `HTTP2Optional`, `HTTP2Preferred`, and `None`.
         * 
         * @return builder
         * 
         */
        public Builder alpnPolicy(@Nullable Output<String> alpnPolicy) {
            $.alpnPolicy = alpnPolicy;
            return this;
        }

        /**
         * @param alpnPolicy Name of the Application-Layer Protocol Negotiation (ALPN) policy. Can be set if `protocol` is `TLS`. Valid values are `HTTP1Only`, `HTTP2Only`, `HTTP2Optional`, `HTTP2Preferred`, and `None`.
         * 
         * @return builder
         * 
         */
        public Builder alpnPolicy(String alpnPolicy) {
            return alpnPolicy(Output.of(alpnPolicy));
        }

        /**
         * @param arn ARN of the listener (matches `id`).
         * 
         * @return builder
         * 
         */
        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        /**
         * @param arn ARN of the listener (matches `id`).
         * 
         * @return builder
         * 
         */
        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        /**
         * @param certificateArn ARN of the default SSL server certificate. Exactly one certificate is required if the protocol is HTTPS. For adding additional SSL certificates, see the `aws.lb.ListenerCertificate` resource.
         * 
         * @return builder
         * 
         */
        public Builder certificateArn(@Nullable Output<String> certificateArn) {
            $.certificateArn = certificateArn;
            return this;
        }

        /**
         * @param certificateArn ARN of the default SSL server certificate. Exactly one certificate is required if the protocol is HTTPS. For adding additional SSL certificates, see the `aws.lb.ListenerCertificate` resource.
         * 
         * @return builder
         * 
         */
        public Builder certificateArn(String certificateArn) {
            return certificateArn(Output.of(certificateArn));
        }

        /**
         * @param defaultActions Configuration block for default actions. See below.
         * 
         * @return builder
         * 
         */
        public Builder defaultActions(@Nullable Output<List<ListenerDefaultActionArgs>> defaultActions) {
            $.defaultActions = defaultActions;
            return this;
        }

        /**
         * @param defaultActions Configuration block for default actions. See below.
         * 
         * @return builder
         * 
         */
        public Builder defaultActions(List<ListenerDefaultActionArgs> defaultActions) {
            return defaultActions(Output.of(defaultActions));
        }

        /**
         * @param defaultActions Configuration block for default actions. See below.
         * 
         * @return builder
         * 
         */
        public Builder defaultActions(ListenerDefaultActionArgs... defaultActions) {
            return defaultActions(List.of(defaultActions));
        }

        /**
         * @param loadBalancerArn ARN of the load balancer.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerArn(@Nullable Output<String> loadBalancerArn) {
            $.loadBalancerArn = loadBalancerArn;
            return this;
        }

        /**
         * @param loadBalancerArn ARN of the load balancer.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerArn(String loadBalancerArn) {
            return loadBalancerArn(Output.of(loadBalancerArn));
        }

        /**
         * @param mutualAuthentication The mutual authentication configuration information. See below.
         * 
         * @return builder
         * 
         */
        public Builder mutualAuthentication(@Nullable Output<ListenerMutualAuthenticationArgs> mutualAuthentication) {
            $.mutualAuthentication = mutualAuthentication;
            return this;
        }

        /**
         * @param mutualAuthentication The mutual authentication configuration information. See below.
         * 
         * @return builder
         * 
         */
        public Builder mutualAuthentication(ListenerMutualAuthenticationArgs mutualAuthentication) {
            return mutualAuthentication(Output.of(mutualAuthentication));
        }

        /**
         * @param port Port on which the load balancer is listening. Not valid for Gateway Load Balancers.
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port Port on which the load balancer is listening. Not valid for Gateway Load Balancers.
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param protocol Protocol for connections from clients to the load balancer. For Application Load Balancers, valid values are `HTTP` and `HTTPS`, with a default of `HTTP`. For Network Load Balancers, valid values are `TCP`, `TLS`, `UDP`, and `TCP_UDP`. Not valid to use `UDP` or `TCP_UDP` if dual-stack mode is enabled. Not valid for Gateway Load Balancers.
         * 
         * @return builder
         * 
         */
        public Builder protocol(@Nullable Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol Protocol for connections from clients to the load balancer. For Application Load Balancers, valid values are `HTTP` and `HTTPS`, with a default of `HTTP`. For Network Load Balancers, valid values are `TCP`, `TLS`, `UDP`, and `TCP_UDP`. Not valid to use `UDP` or `TCP_UDP` if dual-stack mode is enabled. Not valid for Gateway Load Balancers.
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        /**
         * @param routingHttpRequestXAmznMtlsClientcertHeaderName Enables you to modify the header name of the `X-Amzn-Mtls-Clientcert` HTTP request header. Can only be set if protocol is `HTTPS` for Application Load Balancers.
         * 
         * @return builder
         * 
         */
        public Builder routingHttpRequestXAmznMtlsClientcertHeaderName(@Nullable Output<String> routingHttpRequestXAmznMtlsClientcertHeaderName) {
            $.routingHttpRequestXAmznMtlsClientcertHeaderName = routingHttpRequestXAmznMtlsClientcertHeaderName;
            return this;
        }

        /**
         * @param routingHttpRequestXAmznMtlsClientcertHeaderName Enables you to modify the header name of the `X-Amzn-Mtls-Clientcert` HTTP request header. Can only be set if protocol is `HTTPS` for Application Load Balancers.
         * 
         * @return builder
         * 
         */
        public Builder routingHttpRequestXAmznMtlsClientcertHeaderName(String routingHttpRequestXAmznMtlsClientcertHeaderName) {
            return routingHttpRequestXAmznMtlsClientcertHeaderName(Output.of(routingHttpRequestXAmznMtlsClientcertHeaderName));
        }

        /**
         * @param routingHttpRequestXAmznMtlsClientcertIssuerHeaderName Enables you to modify the header name of the `X-Amzn-Mtls-Clientcert-Issuer` HTTP request header. Can only be set if protocol is `HTTPS` for Application Load Balancers.
         * 
         * @return builder
         * 
         */
        public Builder routingHttpRequestXAmznMtlsClientcertIssuerHeaderName(@Nullable Output<String> routingHttpRequestXAmznMtlsClientcertIssuerHeaderName) {
            $.routingHttpRequestXAmznMtlsClientcertIssuerHeaderName = routingHttpRequestXAmznMtlsClientcertIssuerHeaderName;
            return this;
        }

        /**
         * @param routingHttpRequestXAmznMtlsClientcertIssuerHeaderName Enables you to modify the header name of the `X-Amzn-Mtls-Clientcert-Issuer` HTTP request header. Can only be set if protocol is `HTTPS` for Application Load Balancers.
         * 
         * @return builder
         * 
         */
        public Builder routingHttpRequestXAmznMtlsClientcertIssuerHeaderName(String routingHttpRequestXAmznMtlsClientcertIssuerHeaderName) {
            return routingHttpRequestXAmznMtlsClientcertIssuerHeaderName(Output.of(routingHttpRequestXAmznMtlsClientcertIssuerHeaderName));
        }

        /**
         * @param routingHttpRequestXAmznMtlsClientcertLeafHeaderName Enables you to modify the header name of the `X-Amzn-Mtls-Clientcert-Leaf` HTTP request header. Can only be set if protocol is `HTTPS` for Application Load Balancers.
         * 
         * @return builder
         * 
         */
        public Builder routingHttpRequestXAmznMtlsClientcertLeafHeaderName(@Nullable Output<String> routingHttpRequestXAmznMtlsClientcertLeafHeaderName) {
            $.routingHttpRequestXAmznMtlsClientcertLeafHeaderName = routingHttpRequestXAmznMtlsClientcertLeafHeaderName;
            return this;
        }

        /**
         * @param routingHttpRequestXAmznMtlsClientcertLeafHeaderName Enables you to modify the header name of the `X-Amzn-Mtls-Clientcert-Leaf` HTTP request header. Can only be set if protocol is `HTTPS` for Application Load Balancers.
         * 
         * @return builder
         * 
         */
        public Builder routingHttpRequestXAmznMtlsClientcertLeafHeaderName(String routingHttpRequestXAmznMtlsClientcertLeafHeaderName) {
            return routingHttpRequestXAmznMtlsClientcertLeafHeaderName(Output.of(routingHttpRequestXAmznMtlsClientcertLeafHeaderName));
        }

        /**
         * @param routingHttpRequestXAmznMtlsClientcertSerialNumberHeaderName Enables you to modify the header name of the `X-Amzn-Mtls-Clientcert-Serial-Number` HTTP request header. Can only be set if protocol is `HTTPS` for Application Load Balancers.
         * 
         * @return builder
         * 
         */
        public Builder routingHttpRequestXAmznMtlsClientcertSerialNumberHeaderName(@Nullable Output<String> routingHttpRequestXAmznMtlsClientcertSerialNumberHeaderName) {
            $.routingHttpRequestXAmznMtlsClientcertSerialNumberHeaderName = routingHttpRequestXAmznMtlsClientcertSerialNumberHeaderName;
            return this;
        }

        /**
         * @param routingHttpRequestXAmznMtlsClientcertSerialNumberHeaderName Enables you to modify the header name of the `X-Amzn-Mtls-Clientcert-Serial-Number` HTTP request header. Can only be set if protocol is `HTTPS` for Application Load Balancers.
         * 
         * @return builder
         * 
         */
        public Builder routingHttpRequestXAmznMtlsClientcertSerialNumberHeaderName(String routingHttpRequestXAmznMtlsClientcertSerialNumberHeaderName) {
            return routingHttpRequestXAmznMtlsClientcertSerialNumberHeaderName(Output.of(routingHttpRequestXAmznMtlsClientcertSerialNumberHeaderName));
        }

        /**
         * @param routingHttpRequestXAmznMtlsClientcertSubjectHeaderName Enables you to modify the header name of the `X-Amzn-Mtls-Clientcert-Subject` HTTP request header. Can only be set if protocol is `HTTPS` for Application Load Balancers.
         * 
         * @return builder
         * 
         */
        public Builder routingHttpRequestXAmznMtlsClientcertSubjectHeaderName(@Nullable Output<String> routingHttpRequestXAmznMtlsClientcertSubjectHeaderName) {
            $.routingHttpRequestXAmznMtlsClientcertSubjectHeaderName = routingHttpRequestXAmznMtlsClientcertSubjectHeaderName;
            return this;
        }

        /**
         * @param routingHttpRequestXAmznMtlsClientcertSubjectHeaderName Enables you to modify the header name of the `X-Amzn-Mtls-Clientcert-Subject` HTTP request header. Can only be set if protocol is `HTTPS` for Application Load Balancers.
         * 
         * @return builder
         * 
         */
        public Builder routingHttpRequestXAmznMtlsClientcertSubjectHeaderName(String routingHttpRequestXAmznMtlsClientcertSubjectHeaderName) {
            return routingHttpRequestXAmznMtlsClientcertSubjectHeaderName(Output.of(routingHttpRequestXAmznMtlsClientcertSubjectHeaderName));
        }

        /**
         * @param routingHttpRequestXAmznMtlsClientcertValidityHeaderName Enables you to modify the header name of the `X-Amzn-Mtls-Clientcert-Validity` HTTP request header. Can only be set if protocol is `HTTPS` for Application Load Balancers.
         * 
         * @return builder
         * 
         */
        public Builder routingHttpRequestXAmznMtlsClientcertValidityHeaderName(@Nullable Output<String> routingHttpRequestXAmznMtlsClientcertValidityHeaderName) {
            $.routingHttpRequestXAmznMtlsClientcertValidityHeaderName = routingHttpRequestXAmznMtlsClientcertValidityHeaderName;
            return this;
        }

        /**
         * @param routingHttpRequestXAmznMtlsClientcertValidityHeaderName Enables you to modify the header name of the `X-Amzn-Mtls-Clientcert-Validity` HTTP request header. Can only be set if protocol is `HTTPS` for Application Load Balancers.
         * 
         * @return builder
         * 
         */
        public Builder routingHttpRequestXAmznMtlsClientcertValidityHeaderName(String routingHttpRequestXAmznMtlsClientcertValidityHeaderName) {
            return routingHttpRequestXAmznMtlsClientcertValidityHeaderName(Output.of(routingHttpRequestXAmznMtlsClientcertValidityHeaderName));
        }

        /**
         * @param routingHttpRequestXAmznTlsCipherSuiteHeaderName Enables you to modify the header name of the `X-Amzn-Tls-Cipher-Suite` HTTP request header. Can only be set if protocol is `HTTPS` for Application Load Balancers.
         * 
         * @return builder
         * 
         */
        public Builder routingHttpRequestXAmznTlsCipherSuiteHeaderName(@Nullable Output<String> routingHttpRequestXAmznTlsCipherSuiteHeaderName) {
            $.routingHttpRequestXAmznTlsCipherSuiteHeaderName = routingHttpRequestXAmznTlsCipherSuiteHeaderName;
            return this;
        }

        /**
         * @param routingHttpRequestXAmznTlsCipherSuiteHeaderName Enables you to modify the header name of the `X-Amzn-Tls-Cipher-Suite` HTTP request header. Can only be set if protocol is `HTTPS` for Application Load Balancers.
         * 
         * @return builder
         * 
         */
        public Builder routingHttpRequestXAmznTlsCipherSuiteHeaderName(String routingHttpRequestXAmznTlsCipherSuiteHeaderName) {
            return routingHttpRequestXAmznTlsCipherSuiteHeaderName(Output.of(routingHttpRequestXAmznTlsCipherSuiteHeaderName));
        }

        /**
         * @param routingHttpRequestXAmznTlsVersionHeaderName Enables you to modify the header name of the `X-Amzn-Tls-Version` HTTP request header. Can only be set if protocol is `HTTPS` for Application Load Balancers.
         * 
         * @return builder
         * 
         */
        public Builder routingHttpRequestXAmznTlsVersionHeaderName(@Nullable Output<String> routingHttpRequestXAmznTlsVersionHeaderName) {
            $.routingHttpRequestXAmznTlsVersionHeaderName = routingHttpRequestXAmznTlsVersionHeaderName;
            return this;
        }

        /**
         * @param routingHttpRequestXAmznTlsVersionHeaderName Enables you to modify the header name of the `X-Amzn-Tls-Version` HTTP request header. Can only be set if protocol is `HTTPS` for Application Load Balancers.
         * 
         * @return builder
         * 
         */
        public Builder routingHttpRequestXAmznTlsVersionHeaderName(String routingHttpRequestXAmznTlsVersionHeaderName) {
            return routingHttpRequestXAmznTlsVersionHeaderName(Output.of(routingHttpRequestXAmznTlsVersionHeaderName));
        }

        /**
         * @param routingHttpResponseAccessControlAllowCredentialsHeaderValue Specifies which headers the browser can expose to the requesting client. Can only be set if protocol is `HTTP` or `HTTPS` for Application Load Balancers. Not supported for Network Load Balancer, or with a Gateway Load Balancer. The only valid value is `true`.
         * 
         * @return builder
         * 
         */
        public Builder routingHttpResponseAccessControlAllowCredentialsHeaderValue(@Nullable Output<String> routingHttpResponseAccessControlAllowCredentialsHeaderValue) {
            $.routingHttpResponseAccessControlAllowCredentialsHeaderValue = routingHttpResponseAccessControlAllowCredentialsHeaderValue;
            return this;
        }

        /**
         * @param routingHttpResponseAccessControlAllowCredentialsHeaderValue Specifies which headers the browser can expose to the requesting client. Can only be set if protocol is `HTTP` or `HTTPS` for Application Load Balancers. Not supported for Network Load Balancer, or with a Gateway Load Balancer. The only valid value is `true`.
         * 
         * @return builder
         * 
         */
        public Builder routingHttpResponseAccessControlAllowCredentialsHeaderValue(String routingHttpResponseAccessControlAllowCredentialsHeaderValue) {
            return routingHttpResponseAccessControlAllowCredentialsHeaderValue(Output.of(routingHttpResponseAccessControlAllowCredentialsHeaderValue));
        }

        /**
         * @param routingHttpResponseAccessControlAllowHeadersHeaderValue Specifies which headers can be used during the request. Can only be set if protocol is `HTTP` or `HTTPS` for Application Load Balancers. Not supported for Network Load Balancer, or with a Gateway Load Balancer. Valid values are `*`, `Accept`, `Accept-Language`, `Cache-Control`, `Content-Language`, `Content-Length`, `Content-Type`, `Expires`, `Last-Modified`, `Pragma`. Dependent on your use-case other headers can be exposed and then set as a value consult the Access-Control-Allow-Headers documentation.
         * 
         * @return builder
         * 
         */
        public Builder routingHttpResponseAccessControlAllowHeadersHeaderValue(@Nullable Output<String> routingHttpResponseAccessControlAllowHeadersHeaderValue) {
            $.routingHttpResponseAccessControlAllowHeadersHeaderValue = routingHttpResponseAccessControlAllowHeadersHeaderValue;
            return this;
        }

        /**
         * @param routingHttpResponseAccessControlAllowHeadersHeaderValue Specifies which headers can be used during the request. Can only be set if protocol is `HTTP` or `HTTPS` for Application Load Balancers. Not supported for Network Load Balancer, or with a Gateway Load Balancer. Valid values are `*`, `Accept`, `Accept-Language`, `Cache-Control`, `Content-Language`, `Content-Length`, `Content-Type`, `Expires`, `Last-Modified`, `Pragma`. Dependent on your use-case other headers can be exposed and then set as a value consult the Access-Control-Allow-Headers documentation.
         * 
         * @return builder
         * 
         */
        public Builder routingHttpResponseAccessControlAllowHeadersHeaderValue(String routingHttpResponseAccessControlAllowHeadersHeaderValue) {
            return routingHttpResponseAccessControlAllowHeadersHeaderValue(Output.of(routingHttpResponseAccessControlAllowHeadersHeaderValue));
        }

        /**
         * @param routingHttpResponseAccessControlAllowMethodsHeaderValue Set which HTTP methods are allowed when accessing the server from a different origin. Can only be set if protocol is `HTTP` or `HTTPS` for Application Load Balancers. Not supported for Network Load Balancer, or with a Gateway Load Balancer. Valid values are `GET`, `HEAD`, `POST`, `DELETE`, `CONNECT`, `OPTIONS`, `TRACE` or `PATCH`.
         * 
         * @return builder
         * 
         */
        public Builder routingHttpResponseAccessControlAllowMethodsHeaderValue(@Nullable Output<String> routingHttpResponseAccessControlAllowMethodsHeaderValue) {
            $.routingHttpResponseAccessControlAllowMethodsHeaderValue = routingHttpResponseAccessControlAllowMethodsHeaderValue;
            return this;
        }

        /**
         * @param routingHttpResponseAccessControlAllowMethodsHeaderValue Set which HTTP methods are allowed when accessing the server from a different origin. Can only be set if protocol is `HTTP` or `HTTPS` for Application Load Balancers. Not supported for Network Load Balancer, or with a Gateway Load Balancer. Valid values are `GET`, `HEAD`, `POST`, `DELETE`, `CONNECT`, `OPTIONS`, `TRACE` or `PATCH`.
         * 
         * @return builder
         * 
         */
        public Builder routingHttpResponseAccessControlAllowMethodsHeaderValue(String routingHttpResponseAccessControlAllowMethodsHeaderValue) {
            return routingHttpResponseAccessControlAllowMethodsHeaderValue(Output.of(routingHttpResponseAccessControlAllowMethodsHeaderValue));
        }

        /**
         * @param routingHttpResponseAccessControlAllowOriginHeaderValue Specifies which origins are allowed to access the server. Can only be set if protocol is `HTTP` or `HTTPS` for Application Load Balancers. Not supported for Network Load Balancer, or with a Gateway Load Balancer. A valid value is a URI, eg: `https://example.com`.
         * 
         * @return builder
         * 
         */
        public Builder routingHttpResponseAccessControlAllowOriginHeaderValue(@Nullable Output<String> routingHttpResponseAccessControlAllowOriginHeaderValue) {
            $.routingHttpResponseAccessControlAllowOriginHeaderValue = routingHttpResponseAccessControlAllowOriginHeaderValue;
            return this;
        }

        /**
         * @param routingHttpResponseAccessControlAllowOriginHeaderValue Specifies which origins are allowed to access the server. Can only be set if protocol is `HTTP` or `HTTPS` for Application Load Balancers. Not supported for Network Load Balancer, or with a Gateway Load Balancer. A valid value is a URI, eg: `https://example.com`.
         * 
         * @return builder
         * 
         */
        public Builder routingHttpResponseAccessControlAllowOriginHeaderValue(String routingHttpResponseAccessControlAllowOriginHeaderValue) {
            return routingHttpResponseAccessControlAllowOriginHeaderValue(Output.of(routingHttpResponseAccessControlAllowOriginHeaderValue));
        }

        /**
         * @param routingHttpResponseAccessControlExposeHeadersHeaderValue Specifies whether the browser should include credentials such as cookies or authentication when making requests. Can only be set if protocol is `HTTP` or `HTTPS` for Application Load Balancers. Not supported for Network Load Balancer, or with a Gateway Load Balancer. Valid values are `*`, `Cache-Control`, `Content-Language`, `Content-Length`, `Content-Type`, `Expires`, `Last-Modified`, or `Pragma`. Dependent on your use-case other headers can be exposed, consult the Access-Control-Expose-Headers documentation.
         * 
         * @return builder
         * 
         */
        public Builder routingHttpResponseAccessControlExposeHeadersHeaderValue(@Nullable Output<String> routingHttpResponseAccessControlExposeHeadersHeaderValue) {
            $.routingHttpResponseAccessControlExposeHeadersHeaderValue = routingHttpResponseAccessControlExposeHeadersHeaderValue;
            return this;
        }

        /**
         * @param routingHttpResponseAccessControlExposeHeadersHeaderValue Specifies whether the browser should include credentials such as cookies or authentication when making requests. Can only be set if protocol is `HTTP` or `HTTPS` for Application Load Balancers. Not supported for Network Load Balancer, or with a Gateway Load Balancer. Valid values are `*`, `Cache-Control`, `Content-Language`, `Content-Length`, `Content-Type`, `Expires`, `Last-Modified`, or `Pragma`. Dependent on your use-case other headers can be exposed, consult the Access-Control-Expose-Headers documentation.
         * 
         * @return builder
         * 
         */
        public Builder routingHttpResponseAccessControlExposeHeadersHeaderValue(String routingHttpResponseAccessControlExposeHeadersHeaderValue) {
            return routingHttpResponseAccessControlExposeHeadersHeaderValue(Output.of(routingHttpResponseAccessControlExposeHeadersHeaderValue));
        }

        /**
         * @param routingHttpResponseAccessControlMaxAgeHeaderValue Specifies how long the results of a preflight request can be cached, in seconds. Can only be set if protocol is `HTTP` or `HTTPS` for Application Load Balancers. Not supported for Network Load Balancer, or with a Gateway Load Balancer. Valid values are between `0` and `86400`. This value is browser specific, consult the Access-Control-Max-Age documentation.
         * 
         * @return builder
         * 
         */
        public Builder routingHttpResponseAccessControlMaxAgeHeaderValue(@Nullable Output<String> routingHttpResponseAccessControlMaxAgeHeaderValue) {
            $.routingHttpResponseAccessControlMaxAgeHeaderValue = routingHttpResponseAccessControlMaxAgeHeaderValue;
            return this;
        }

        /**
         * @param routingHttpResponseAccessControlMaxAgeHeaderValue Specifies how long the results of a preflight request can be cached, in seconds. Can only be set if protocol is `HTTP` or `HTTPS` for Application Load Balancers. Not supported for Network Load Balancer, or with a Gateway Load Balancer. Valid values are between `0` and `86400`. This value is browser specific, consult the Access-Control-Max-Age documentation.
         * 
         * @return builder
         * 
         */
        public Builder routingHttpResponseAccessControlMaxAgeHeaderValue(String routingHttpResponseAccessControlMaxAgeHeaderValue) {
            return routingHttpResponseAccessControlMaxAgeHeaderValue(Output.of(routingHttpResponseAccessControlMaxAgeHeaderValue));
        }

        /**
         * @param routingHttpResponseContentSecurityPolicyHeaderValue Specifies restrictions enforced by the browser to help minimize the risk of certain types of security threats. Can only be set if protocol is `HTTP` or `HTTPS` for Application Load Balancers. Not supported for Network Load Balancer, or with a Gateway Load Balancer. Values for this are extensive, and can be impactful when set, consult Content-Security-Policy documentation.
         * 
         * @return builder
         * 
         */
        public Builder routingHttpResponseContentSecurityPolicyHeaderValue(@Nullable Output<String> routingHttpResponseContentSecurityPolicyHeaderValue) {
            $.routingHttpResponseContentSecurityPolicyHeaderValue = routingHttpResponseContentSecurityPolicyHeaderValue;
            return this;
        }

        /**
         * @param routingHttpResponseContentSecurityPolicyHeaderValue Specifies restrictions enforced by the browser to help minimize the risk of certain types of security threats. Can only be set if protocol is `HTTP` or `HTTPS` for Application Load Balancers. Not supported for Network Load Balancer, or with a Gateway Load Balancer. Values for this are extensive, and can be impactful when set, consult Content-Security-Policy documentation.
         * 
         * @return builder
         * 
         */
        public Builder routingHttpResponseContentSecurityPolicyHeaderValue(String routingHttpResponseContentSecurityPolicyHeaderValue) {
            return routingHttpResponseContentSecurityPolicyHeaderValue(Output.of(routingHttpResponseContentSecurityPolicyHeaderValue));
        }

        /**
         * @param routingHttpResponseServerEnabled Enables you to allow or remove the HTTP response server header. Can only be set if protocol is `HTTP` or `HTTPS` for Application Load Balancers. Not supported for Network Load Balancer, or with a Gateway Load Balancer. Valid values are `true` or `false`.
         * 
         * @return builder
         * 
         */
        public Builder routingHttpResponseServerEnabled(@Nullable Output<Boolean> routingHttpResponseServerEnabled) {
            $.routingHttpResponseServerEnabled = routingHttpResponseServerEnabled;
            return this;
        }

        /**
         * @param routingHttpResponseServerEnabled Enables you to allow or remove the HTTP response server header. Can only be set if protocol is `HTTP` or `HTTPS` for Application Load Balancers. Not supported for Network Load Balancer, or with a Gateway Load Balancer. Valid values are `true` or `false`.
         * 
         * @return builder
         * 
         */
        public Builder routingHttpResponseServerEnabled(Boolean routingHttpResponseServerEnabled) {
            return routingHttpResponseServerEnabled(Output.of(routingHttpResponseServerEnabled));
        }

        /**
         * @param routingHttpResponseStrictTransportSecurityHeaderValue Informs browsers that the site should only be accessed using HTTPS, and that any future attempts to access it using HTTP should automatically be converted to HTTPS. Default values are `max-age=31536000; includeSubDomains; preload` consult the Strict-Transport-Security documentation for further details.
         * 
         * @return builder
         * 
         */
        public Builder routingHttpResponseStrictTransportSecurityHeaderValue(@Nullable Output<String> routingHttpResponseStrictTransportSecurityHeaderValue) {
            $.routingHttpResponseStrictTransportSecurityHeaderValue = routingHttpResponseStrictTransportSecurityHeaderValue;
            return this;
        }

        /**
         * @param routingHttpResponseStrictTransportSecurityHeaderValue Informs browsers that the site should only be accessed using HTTPS, and that any future attempts to access it using HTTP should automatically be converted to HTTPS. Default values are `max-age=31536000; includeSubDomains; preload` consult the Strict-Transport-Security documentation for further details.
         * 
         * @return builder
         * 
         */
        public Builder routingHttpResponseStrictTransportSecurityHeaderValue(String routingHttpResponseStrictTransportSecurityHeaderValue) {
            return routingHttpResponseStrictTransportSecurityHeaderValue(Output.of(routingHttpResponseStrictTransportSecurityHeaderValue));
        }

        /**
         * @param routingHttpResponseXContentTypeOptionsHeaderValue Indicates whether the MIME types advertised in the Content-Type headers should be followed and not be changed. Can only be set if protocol is `HTTP` or `HTTPS` for Application Load Balancers. Not supported for Network Load Balancer, or with a Gateway Load Balancer. The only valid value is `nosniff`.
         * 
         * @return builder
         * 
         */
        public Builder routingHttpResponseXContentTypeOptionsHeaderValue(@Nullable Output<String> routingHttpResponseXContentTypeOptionsHeaderValue) {
            $.routingHttpResponseXContentTypeOptionsHeaderValue = routingHttpResponseXContentTypeOptionsHeaderValue;
            return this;
        }

        /**
         * @param routingHttpResponseXContentTypeOptionsHeaderValue Indicates whether the MIME types advertised in the Content-Type headers should be followed and not be changed. Can only be set if protocol is `HTTP` or `HTTPS` for Application Load Balancers. Not supported for Network Load Balancer, or with a Gateway Load Balancer. The only valid value is `nosniff`.
         * 
         * @return builder
         * 
         */
        public Builder routingHttpResponseXContentTypeOptionsHeaderValue(String routingHttpResponseXContentTypeOptionsHeaderValue) {
            return routingHttpResponseXContentTypeOptionsHeaderValue(Output.of(routingHttpResponseXContentTypeOptionsHeaderValue));
        }

        /**
         * @param routingHttpResponseXFrameOptionsHeaderValue Indicates whether the browser is allowed to render a page in a frame, iframe, embed or object. Can only be set if protocol is `HTTP` or `HTTPS` for Application Load Balancers. Not supported for Network Load Balancer, or with a Gateway Load Balancer. The only valid values are `DENY`, `SAMEORIGIN`, or `ALLOW-FROM https://example.com`.
         * 
         * @return builder
         * 
         */
        public Builder routingHttpResponseXFrameOptionsHeaderValue(@Nullable Output<String> routingHttpResponseXFrameOptionsHeaderValue) {
            $.routingHttpResponseXFrameOptionsHeaderValue = routingHttpResponseXFrameOptionsHeaderValue;
            return this;
        }

        /**
         * @param routingHttpResponseXFrameOptionsHeaderValue Indicates whether the browser is allowed to render a page in a frame, iframe, embed or object. Can only be set if protocol is `HTTP` or `HTTPS` for Application Load Balancers. Not supported for Network Load Balancer, or with a Gateway Load Balancer. The only valid values are `DENY`, `SAMEORIGIN`, or `ALLOW-FROM https://example.com`.
         * 
         * @return builder
         * 
         */
        public Builder routingHttpResponseXFrameOptionsHeaderValue(String routingHttpResponseXFrameOptionsHeaderValue) {
            return routingHttpResponseXFrameOptionsHeaderValue(Output.of(routingHttpResponseXFrameOptionsHeaderValue));
        }

        /**
         * @param sslPolicy Name of the SSL Policy for the listener. Required if `protocol` is `HTTPS` or `TLS`. Default is `ELBSecurityPolicy-2016-08`.
         * 
         * @return builder
         * 
         */
        public Builder sslPolicy(@Nullable Output<String> sslPolicy) {
            $.sslPolicy = sslPolicy;
            return this;
        }

        /**
         * @param sslPolicy Name of the SSL Policy for the listener. Required if `protocol` is `HTTPS` or `TLS`. Default is `ELBSecurityPolicy-2016-08`.
         * 
         * @return builder
         * 
         */
        public Builder sslPolicy(String sslPolicy) {
            return sslPolicy(Output.of(sslPolicy));
        }

        /**
         * @param tags A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * &gt; **Note::** When a `Name` key is specified in the map, the AWS Console maps the value to the `Name Tag` column value inside the `Listener Rules` table within a specific load balancer listener page. Otherwise, the value resolves to `Default`.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * &gt; **Note::** When a `Name` key is specified in the map, the AWS Console maps the value to the `Name Tag` column value inside the `Listener Rules` table within a specific load balancer listener page. Otherwise, the value resolves to `Default`.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tagsAll A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
         * 
         * @return builder
         * 
         * @deprecated
         * Please use `tags` instead.
         * 
         */
        @Deprecated /* Please use `tags` instead. */
        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        /**
         * @param tagsAll A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
         * 
         * @return builder
         * 
         * @deprecated
         * Please use `tags` instead.
         * 
         */
        @Deprecated /* Please use `tags` instead. */
        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        /**
         * @param tcpIdleTimeoutSeconds TCP idle timeout value in seconds. Can only be set if protocol is `TCP` on Network Load Balancer, or with a Gateway Load Balancer. Not supported for Application Load Balancers. Valid values are between `60` and `6000` inclusive. Default: `350`.
         * 
         * @return builder
         * 
         */
        public Builder tcpIdleTimeoutSeconds(@Nullable Output<Integer> tcpIdleTimeoutSeconds) {
            $.tcpIdleTimeoutSeconds = tcpIdleTimeoutSeconds;
            return this;
        }

        /**
         * @param tcpIdleTimeoutSeconds TCP idle timeout value in seconds. Can only be set if protocol is `TCP` on Network Load Balancer, or with a Gateway Load Balancer. Not supported for Application Load Balancers. Valid values are between `60` and `6000` inclusive. Default: `350`.
         * 
         * @return builder
         * 
         */
        public Builder tcpIdleTimeoutSeconds(Integer tcpIdleTimeoutSeconds) {
            return tcpIdleTimeoutSeconds(Output.of(tcpIdleTimeoutSeconds));
        }

        public ListenerState build() {
            return $;
        }
    }

}
