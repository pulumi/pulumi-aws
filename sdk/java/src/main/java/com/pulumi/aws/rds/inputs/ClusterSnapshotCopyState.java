// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.rds.inputs;

import com.pulumi.aws.rds.inputs.ClusterSnapshotCopyTimeoutsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClusterSnapshotCopyState extends com.pulumi.resources.ResourceArgs {

    public static final ClusterSnapshotCopyState Empty = new ClusterSnapshotCopyState();

    /**
     * Specifies the allocated storage size in gigabytes (GB).
     * 
     */
    @Import(name="allocatedStorage")
    private @Nullable Output<Integer> allocatedStorage;

    /**
     * @return Specifies the allocated storage size in gigabytes (GB).
     * 
     */
    public Optional<Output<Integer>> allocatedStorage() {
        return Optional.ofNullable(this.allocatedStorage);
    }

    /**
     * Whether to copy existing tags. Defaults to `false`.
     * 
     */
    @Import(name="copyTags")
    private @Nullable Output<Boolean> copyTags;

    /**
     * @return Whether to copy existing tags. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> copyTags() {
        return Optional.ofNullable(this.copyTags);
    }

    /**
     * The Amazon Resource Name (ARN) for the DB cluster snapshot.
     * 
     */
    @Import(name="dbClusterSnapshotArn")
    private @Nullable Output<String> dbClusterSnapshotArn;

    /**
     * @return The Amazon Resource Name (ARN) for the DB cluster snapshot.
     * 
     */
    public Optional<Output<String>> dbClusterSnapshotArn() {
        return Optional.ofNullable(this.dbClusterSnapshotArn);
    }

    /**
     * The Destination region to place snapshot copy.
     * 
     */
    @Import(name="destinationRegion")
    private @Nullable Output<String> destinationRegion;

    /**
     * @return The Destination region to place snapshot copy.
     * 
     */
    public Optional<Output<String>> destinationRegion() {
        return Optional.ofNullable(this.destinationRegion);
    }

    /**
     * Specifies the name of the database engine.
     * 
     */
    @Import(name="engine")
    private @Nullable Output<String> engine;

    /**
     * @return Specifies the name of the database engine.
     * 
     */
    public Optional<Output<String>> engine() {
        return Optional.ofNullable(this.engine);
    }

    /**
     * Specifies the version of the database engine.
     * 
     */
    @Import(name="engineVersion")
    private @Nullable Output<String> engineVersion;

    /**
     * @return Specifies the version of the database engine.
     * 
     */
    public Optional<Output<String>> engineVersion() {
        return Optional.ofNullable(this.engineVersion);
    }

    /**
     * KMS key ID.
     * 
     */
    @Import(name="kmsKeyId")
    private @Nullable Output<String> kmsKeyId;

    /**
     * @return KMS key ID.
     * 
     */
    public Optional<Output<String>> kmsKeyId() {
        return Optional.ofNullable(this.kmsKeyId);
    }

    /**
     * License model information for the restored DB instance.
     * 
     */
    @Import(name="licenseModel")
    private @Nullable Output<String> licenseModel;

    /**
     * @return License model information for the restored DB instance.
     * 
     */
    public Optional<Output<String>> licenseModel() {
        return Optional.ofNullable(this.licenseModel);
    }

    /**
     * URL that contains a Signature Version 4 signed request.
     * 
     */
    @Import(name="presignedUrl")
    private @Nullable Output<String> presignedUrl;

    /**
     * @return URL that contains a Signature Version 4 signed request.
     * 
     */
    public Optional<Output<String>> presignedUrl() {
        return Optional.ofNullable(this.presignedUrl);
    }

    /**
     * List of AWS Account IDs to share the snapshot with. Use `all` to make the snapshot public.
     * 
     */
    @Import(name="sharedAccounts")
    private @Nullable Output<List<String>> sharedAccounts;

    /**
     * @return List of AWS Account IDs to share the snapshot with. Use `all` to make the snapshot public.
     * 
     */
    public Optional<Output<List<String>>> sharedAccounts() {
        return Optional.ofNullable(this.sharedAccounts);
    }

    @Import(name="snapshotType")
    private @Nullable Output<String> snapshotType;

    public Optional<Output<String>> snapshotType() {
        return Optional.ofNullable(this.snapshotType);
    }

    /**
     * Identifier of the source snapshot.
     * 
     */
    @Import(name="sourceDbClusterSnapshotIdentifier")
    private @Nullable Output<String> sourceDbClusterSnapshotIdentifier;

    /**
     * @return Identifier of the source snapshot.
     * 
     */
    public Optional<Output<String>> sourceDbClusterSnapshotIdentifier() {
        return Optional.ofNullable(this.sourceDbClusterSnapshotIdentifier);
    }

    /**
     * Specifies whether the DB cluster snapshot is encrypted.
     * 
     */
    @Import(name="storageEncrypted")
    private @Nullable Output<Boolean> storageEncrypted;

    /**
     * @return Specifies whether the DB cluster snapshot is encrypted.
     * 
     */
    public Optional<Output<Boolean>> storageEncrypted() {
        return Optional.ofNullable(this.storageEncrypted);
    }

    /**
     * Specifies the storage type associated with DB cluster snapshot.
     * 
     */
    @Import(name="storageType")
    private @Nullable Output<String> storageType;

    /**
     * @return Specifies the storage type associated with DB cluster snapshot.
     * 
     */
    public Optional<Output<String>> storageType() {
        return Optional.ofNullable(this.storageType);
    }

    /**
     * Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    /**
     * @return A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    /**
     * Identifier for the snapshot.
     * 
     * The following arguments are optional:
     * 
     */
    @Import(name="targetDbClusterSnapshotIdentifier")
    private @Nullable Output<String> targetDbClusterSnapshotIdentifier;

    /**
     * @return Identifier for the snapshot.
     * 
     * The following arguments are optional:
     * 
     */
    public Optional<Output<String>> targetDbClusterSnapshotIdentifier() {
        return Optional.ofNullable(this.targetDbClusterSnapshotIdentifier);
    }

    @Import(name="timeouts")
    private @Nullable Output<ClusterSnapshotCopyTimeoutsArgs> timeouts;

    public Optional<Output<ClusterSnapshotCopyTimeoutsArgs>> timeouts() {
        return Optional.ofNullable(this.timeouts);
    }

    /**
     * Provides the VPC ID associated with the DB cluster snapshot.
     * 
     */
    @Import(name="vpcId")
    private @Nullable Output<String> vpcId;

    /**
     * @return Provides the VPC ID associated with the DB cluster snapshot.
     * 
     */
    public Optional<Output<String>> vpcId() {
        return Optional.ofNullable(this.vpcId);
    }

    private ClusterSnapshotCopyState() {}

    private ClusterSnapshotCopyState(ClusterSnapshotCopyState $) {
        this.allocatedStorage = $.allocatedStorage;
        this.copyTags = $.copyTags;
        this.dbClusterSnapshotArn = $.dbClusterSnapshotArn;
        this.destinationRegion = $.destinationRegion;
        this.engine = $.engine;
        this.engineVersion = $.engineVersion;
        this.kmsKeyId = $.kmsKeyId;
        this.licenseModel = $.licenseModel;
        this.presignedUrl = $.presignedUrl;
        this.sharedAccounts = $.sharedAccounts;
        this.snapshotType = $.snapshotType;
        this.sourceDbClusterSnapshotIdentifier = $.sourceDbClusterSnapshotIdentifier;
        this.storageEncrypted = $.storageEncrypted;
        this.storageType = $.storageType;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
        this.targetDbClusterSnapshotIdentifier = $.targetDbClusterSnapshotIdentifier;
        this.timeouts = $.timeouts;
        this.vpcId = $.vpcId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClusterSnapshotCopyState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClusterSnapshotCopyState $;

        public Builder() {
            $ = new ClusterSnapshotCopyState();
        }

        public Builder(ClusterSnapshotCopyState defaults) {
            $ = new ClusterSnapshotCopyState(Objects.requireNonNull(defaults));
        }

        /**
         * @param allocatedStorage Specifies the allocated storage size in gigabytes (GB).
         * 
         * @return builder
         * 
         */
        public Builder allocatedStorage(@Nullable Output<Integer> allocatedStorage) {
            $.allocatedStorage = allocatedStorage;
            return this;
        }

        /**
         * @param allocatedStorage Specifies the allocated storage size in gigabytes (GB).
         * 
         * @return builder
         * 
         */
        public Builder allocatedStorage(Integer allocatedStorage) {
            return allocatedStorage(Output.of(allocatedStorage));
        }

        /**
         * @param copyTags Whether to copy existing tags. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder copyTags(@Nullable Output<Boolean> copyTags) {
            $.copyTags = copyTags;
            return this;
        }

        /**
         * @param copyTags Whether to copy existing tags. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder copyTags(Boolean copyTags) {
            return copyTags(Output.of(copyTags));
        }

        /**
         * @param dbClusterSnapshotArn The Amazon Resource Name (ARN) for the DB cluster snapshot.
         * 
         * @return builder
         * 
         */
        public Builder dbClusterSnapshotArn(@Nullable Output<String> dbClusterSnapshotArn) {
            $.dbClusterSnapshotArn = dbClusterSnapshotArn;
            return this;
        }

        /**
         * @param dbClusterSnapshotArn The Amazon Resource Name (ARN) for the DB cluster snapshot.
         * 
         * @return builder
         * 
         */
        public Builder dbClusterSnapshotArn(String dbClusterSnapshotArn) {
            return dbClusterSnapshotArn(Output.of(dbClusterSnapshotArn));
        }

        /**
         * @param destinationRegion The Destination region to place snapshot copy.
         * 
         * @return builder
         * 
         */
        public Builder destinationRegion(@Nullable Output<String> destinationRegion) {
            $.destinationRegion = destinationRegion;
            return this;
        }

        /**
         * @param destinationRegion The Destination region to place snapshot copy.
         * 
         * @return builder
         * 
         */
        public Builder destinationRegion(String destinationRegion) {
            return destinationRegion(Output.of(destinationRegion));
        }

        /**
         * @param engine Specifies the name of the database engine.
         * 
         * @return builder
         * 
         */
        public Builder engine(@Nullable Output<String> engine) {
            $.engine = engine;
            return this;
        }

        /**
         * @param engine Specifies the name of the database engine.
         * 
         * @return builder
         * 
         */
        public Builder engine(String engine) {
            return engine(Output.of(engine));
        }

        /**
         * @param engineVersion Specifies the version of the database engine.
         * 
         * @return builder
         * 
         */
        public Builder engineVersion(@Nullable Output<String> engineVersion) {
            $.engineVersion = engineVersion;
            return this;
        }

        /**
         * @param engineVersion Specifies the version of the database engine.
         * 
         * @return builder
         * 
         */
        public Builder engineVersion(String engineVersion) {
            return engineVersion(Output.of(engineVersion));
        }

        /**
         * @param kmsKeyId KMS key ID.
         * 
         * @return builder
         * 
         */
        public Builder kmsKeyId(@Nullable Output<String> kmsKeyId) {
            $.kmsKeyId = kmsKeyId;
            return this;
        }

        /**
         * @param kmsKeyId KMS key ID.
         * 
         * @return builder
         * 
         */
        public Builder kmsKeyId(String kmsKeyId) {
            return kmsKeyId(Output.of(kmsKeyId));
        }

        /**
         * @param licenseModel License model information for the restored DB instance.
         * 
         * @return builder
         * 
         */
        public Builder licenseModel(@Nullable Output<String> licenseModel) {
            $.licenseModel = licenseModel;
            return this;
        }

        /**
         * @param licenseModel License model information for the restored DB instance.
         * 
         * @return builder
         * 
         */
        public Builder licenseModel(String licenseModel) {
            return licenseModel(Output.of(licenseModel));
        }

        /**
         * @param presignedUrl URL that contains a Signature Version 4 signed request.
         * 
         * @return builder
         * 
         */
        public Builder presignedUrl(@Nullable Output<String> presignedUrl) {
            $.presignedUrl = presignedUrl;
            return this;
        }

        /**
         * @param presignedUrl URL that contains a Signature Version 4 signed request.
         * 
         * @return builder
         * 
         */
        public Builder presignedUrl(String presignedUrl) {
            return presignedUrl(Output.of(presignedUrl));
        }

        /**
         * @param sharedAccounts List of AWS Account IDs to share the snapshot with. Use `all` to make the snapshot public.
         * 
         * @return builder
         * 
         */
        public Builder sharedAccounts(@Nullable Output<List<String>> sharedAccounts) {
            $.sharedAccounts = sharedAccounts;
            return this;
        }

        /**
         * @param sharedAccounts List of AWS Account IDs to share the snapshot with. Use `all` to make the snapshot public.
         * 
         * @return builder
         * 
         */
        public Builder sharedAccounts(List<String> sharedAccounts) {
            return sharedAccounts(Output.of(sharedAccounts));
        }

        /**
         * @param sharedAccounts List of AWS Account IDs to share the snapshot with. Use `all` to make the snapshot public.
         * 
         * @return builder
         * 
         */
        public Builder sharedAccounts(String... sharedAccounts) {
            return sharedAccounts(List.of(sharedAccounts));
        }

        public Builder snapshotType(@Nullable Output<String> snapshotType) {
            $.snapshotType = snapshotType;
            return this;
        }

        public Builder snapshotType(String snapshotType) {
            return snapshotType(Output.of(snapshotType));
        }

        /**
         * @param sourceDbClusterSnapshotIdentifier Identifier of the source snapshot.
         * 
         * @return builder
         * 
         */
        public Builder sourceDbClusterSnapshotIdentifier(@Nullable Output<String> sourceDbClusterSnapshotIdentifier) {
            $.sourceDbClusterSnapshotIdentifier = sourceDbClusterSnapshotIdentifier;
            return this;
        }

        /**
         * @param sourceDbClusterSnapshotIdentifier Identifier of the source snapshot.
         * 
         * @return builder
         * 
         */
        public Builder sourceDbClusterSnapshotIdentifier(String sourceDbClusterSnapshotIdentifier) {
            return sourceDbClusterSnapshotIdentifier(Output.of(sourceDbClusterSnapshotIdentifier));
        }

        /**
         * @param storageEncrypted Specifies whether the DB cluster snapshot is encrypted.
         * 
         * @return builder
         * 
         */
        public Builder storageEncrypted(@Nullable Output<Boolean> storageEncrypted) {
            $.storageEncrypted = storageEncrypted;
            return this;
        }

        /**
         * @param storageEncrypted Specifies whether the DB cluster snapshot is encrypted.
         * 
         * @return builder
         * 
         */
        public Builder storageEncrypted(Boolean storageEncrypted) {
            return storageEncrypted(Output.of(storageEncrypted));
        }

        /**
         * @param storageType Specifies the storage type associated with DB cluster snapshot.
         * 
         * @return builder
         * 
         */
        public Builder storageType(@Nullable Output<String> storageType) {
            $.storageType = storageType;
            return this;
        }

        /**
         * @param storageType Specifies the storage type associated with DB cluster snapshot.
         * 
         * @return builder
         * 
         */
        public Builder storageType(String storageType) {
            return storageType(Output.of(storageType));
        }

        /**
         * @param tags Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tagsAll A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
         * 
         * @return builder
         * 
         * @deprecated
         * Please use `tags` instead.
         * 
         */
        @Deprecated /* Please use `tags` instead. */
        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        /**
         * @param tagsAll A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
         * 
         * @return builder
         * 
         * @deprecated
         * Please use `tags` instead.
         * 
         */
        @Deprecated /* Please use `tags` instead. */
        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        /**
         * @param targetDbClusterSnapshotIdentifier Identifier for the snapshot.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder targetDbClusterSnapshotIdentifier(@Nullable Output<String> targetDbClusterSnapshotIdentifier) {
            $.targetDbClusterSnapshotIdentifier = targetDbClusterSnapshotIdentifier;
            return this;
        }

        /**
         * @param targetDbClusterSnapshotIdentifier Identifier for the snapshot.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder targetDbClusterSnapshotIdentifier(String targetDbClusterSnapshotIdentifier) {
            return targetDbClusterSnapshotIdentifier(Output.of(targetDbClusterSnapshotIdentifier));
        }

        public Builder timeouts(@Nullable Output<ClusterSnapshotCopyTimeoutsArgs> timeouts) {
            $.timeouts = timeouts;
            return this;
        }

        public Builder timeouts(ClusterSnapshotCopyTimeoutsArgs timeouts) {
            return timeouts(Output.of(timeouts));
        }

        /**
         * @param vpcId Provides the VPC ID associated with the DB cluster snapshot.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(@Nullable Output<String> vpcId) {
            $.vpcId = vpcId;
            return this;
        }

        /**
         * @param vpcId Provides the VPC ID associated with the DB cluster snapshot.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(String vpcId) {
            return vpcId(Output.of(vpcId));
        }

        public ClusterSnapshotCopyState build() {
            return $;
        }
    }

}
