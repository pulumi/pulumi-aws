// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.lex;

import com.pulumi.aws.lex.inputs.V2modelsBotDataPrivacyArgs;
import com.pulumi.aws.lex.inputs.V2modelsBotMemberArgs;
import com.pulumi.aws.lex.inputs.V2modelsBotTimeoutsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class V2modelsBotArgs extends com.pulumi.resources.ResourceArgs {

    public static final V2modelsBotArgs Empty = new V2modelsBotArgs();

    /**
     * Provides information on additional privacy protections Amazon Lex should use with the bot&#39;s data. See `data_privacy`
     * 
     */
    @Import(name="dataPrivacies")
    private @Nullable Output<List<V2modelsBotDataPrivacyArgs>> dataPrivacies;

    /**
     * @return Provides information on additional privacy protections Amazon Lex should use with the bot&#39;s data. See `data_privacy`
     * 
     */
    public Optional<Output<List<V2modelsBotDataPrivacyArgs>>> dataPrivacies() {
        return Optional.ofNullable(this.dataPrivacies);
    }

    /**
     * Description of the bot. It appears in lists to help you identify a particular bot.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the bot. It appears in lists to help you identify a particular bot.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Time, in seconds, that Amazon Lex should keep information about a user&#39;s conversation with the bot. You can specify between 60 (1 minute) and 86,400 (24 hours) seconds.
     * 
     */
    @Import(name="idleSessionTtlInSeconds", required=true)
    private Output<Integer> idleSessionTtlInSeconds;

    /**
     * @return Time, in seconds, that Amazon Lex should keep information about a user&#39;s conversation with the bot. You can specify between 60 (1 minute) and 86,400 (24 hours) seconds.
     * 
     */
    public Output<Integer> idleSessionTtlInSeconds() {
        return this.idleSessionTtlInSeconds;
    }

    /**
     * List of bot members in a network to be created. See `bot_members`.
     * 
     */
    @Import(name="members")
    private @Nullable Output<List<V2modelsBotMemberArgs>> members;

    /**
     * @return List of bot members in a network to be created. See `bot_members`.
     * 
     */
    public Optional<Output<List<V2modelsBotMemberArgs>>> members() {
        return Optional.ofNullable(this.members);
    }

    /**
     * Name of the bot. The bot name must be unique in the account that creates the bot. Type String. Length Constraints: Minimum length of 1. Maximum length of 100.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the bot. The bot name must be unique in the account that creates the bot. Type String. Length Constraints: Minimum length of 1. Maximum length of 100.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * ARN of an IAM role that has permission to access the bot.
     * 
     * The following arguments are optional:
     * 
     */
    @Import(name="roleArn", required=true)
    private Output<String> roleArn;

    /**
     * @return ARN of an IAM role that has permission to access the bot.
     * 
     * The following arguments are optional:
     * 
     */
    public Output<String> roleArn() {
        return this.roleArn;
    }

    /**
     * List of tags to add to the bot. You can only add tags when you create a bot.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return List of tags to add to the bot. You can only add tags when you create a bot.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * List of tags to add to the test alias for a bot. You can only add tags when you create a bot.
     * 
     */
    @Import(name="testBotAliasTags")
    private @Nullable Output<Map<String,String>> testBotAliasTags;

    /**
     * @return List of tags to add to the test alias for a bot. You can only add tags when you create a bot.
     * 
     */
    public Optional<Output<Map<String,String>>> testBotAliasTags() {
        return Optional.ofNullable(this.testBotAliasTags);
    }

    @Import(name="timeouts")
    private @Nullable Output<V2modelsBotTimeoutsArgs> timeouts;

    public Optional<Output<V2modelsBotTimeoutsArgs>> timeouts() {
        return Optional.ofNullable(this.timeouts);
    }

    /**
     * Type of a bot to create. Possible values are `&#34;Bot&#34;` and `&#34;BotNetwork&#34;`.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Type of a bot to create. Possible values are `&#34;Bot&#34;` and `&#34;BotNetwork&#34;`.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private V2modelsBotArgs() {}

    private V2modelsBotArgs(V2modelsBotArgs $) {
        this.dataPrivacies = $.dataPrivacies;
        this.description = $.description;
        this.idleSessionTtlInSeconds = $.idleSessionTtlInSeconds;
        this.members = $.members;
        this.name = $.name;
        this.roleArn = $.roleArn;
        this.tags = $.tags;
        this.testBotAliasTags = $.testBotAliasTags;
        this.timeouts = $.timeouts;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(V2modelsBotArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private V2modelsBotArgs $;

        public Builder() {
            $ = new V2modelsBotArgs();
        }

        public Builder(V2modelsBotArgs defaults) {
            $ = new V2modelsBotArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dataPrivacies Provides information on additional privacy protections Amazon Lex should use with the bot&#39;s data. See `data_privacy`
         * 
         * @return builder
         * 
         */
        public Builder dataPrivacies(@Nullable Output<List<V2modelsBotDataPrivacyArgs>> dataPrivacies) {
            $.dataPrivacies = dataPrivacies;
            return this;
        }

        /**
         * @param dataPrivacies Provides information on additional privacy protections Amazon Lex should use with the bot&#39;s data. See `data_privacy`
         * 
         * @return builder
         * 
         */
        public Builder dataPrivacies(List<V2modelsBotDataPrivacyArgs> dataPrivacies) {
            return dataPrivacies(Output.of(dataPrivacies));
        }

        /**
         * @param dataPrivacies Provides information on additional privacy protections Amazon Lex should use with the bot&#39;s data. See `data_privacy`
         * 
         * @return builder
         * 
         */
        public Builder dataPrivacies(V2modelsBotDataPrivacyArgs... dataPrivacies) {
            return dataPrivacies(List.of(dataPrivacies));
        }

        /**
         * @param description Description of the bot. It appears in lists to help you identify a particular bot.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the bot. It appears in lists to help you identify a particular bot.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param idleSessionTtlInSeconds Time, in seconds, that Amazon Lex should keep information about a user&#39;s conversation with the bot. You can specify between 60 (1 minute) and 86,400 (24 hours) seconds.
         * 
         * @return builder
         * 
         */
        public Builder idleSessionTtlInSeconds(Output<Integer> idleSessionTtlInSeconds) {
            $.idleSessionTtlInSeconds = idleSessionTtlInSeconds;
            return this;
        }

        /**
         * @param idleSessionTtlInSeconds Time, in seconds, that Amazon Lex should keep information about a user&#39;s conversation with the bot. You can specify between 60 (1 minute) and 86,400 (24 hours) seconds.
         * 
         * @return builder
         * 
         */
        public Builder idleSessionTtlInSeconds(Integer idleSessionTtlInSeconds) {
            return idleSessionTtlInSeconds(Output.of(idleSessionTtlInSeconds));
        }

        /**
         * @param members List of bot members in a network to be created. See `bot_members`.
         * 
         * @return builder
         * 
         */
        public Builder members(@Nullable Output<List<V2modelsBotMemberArgs>> members) {
            $.members = members;
            return this;
        }

        /**
         * @param members List of bot members in a network to be created. See `bot_members`.
         * 
         * @return builder
         * 
         */
        public Builder members(List<V2modelsBotMemberArgs> members) {
            return members(Output.of(members));
        }

        /**
         * @param members List of bot members in a network to be created. See `bot_members`.
         * 
         * @return builder
         * 
         */
        public Builder members(V2modelsBotMemberArgs... members) {
            return members(List.of(members));
        }

        /**
         * @param name Name of the bot. The bot name must be unique in the account that creates the bot. Type String. Length Constraints: Minimum length of 1. Maximum length of 100.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the bot. The bot name must be unique in the account that creates the bot. Type String. Length Constraints: Minimum length of 1. Maximum length of 100.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param roleArn ARN of an IAM role that has permission to access the bot.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder roleArn(Output<String> roleArn) {
            $.roleArn = roleArn;
            return this;
        }

        /**
         * @param roleArn ARN of an IAM role that has permission to access the bot.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder roleArn(String roleArn) {
            return roleArn(Output.of(roleArn));
        }

        /**
         * @param tags List of tags to add to the bot. You can only add tags when you create a bot.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags List of tags to add to the bot. You can only add tags when you create a bot.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param testBotAliasTags List of tags to add to the test alias for a bot. You can only add tags when you create a bot.
         * 
         * @return builder
         * 
         */
        public Builder testBotAliasTags(@Nullable Output<Map<String,String>> testBotAliasTags) {
            $.testBotAliasTags = testBotAliasTags;
            return this;
        }

        /**
         * @param testBotAliasTags List of tags to add to the test alias for a bot. You can only add tags when you create a bot.
         * 
         * @return builder
         * 
         */
        public Builder testBotAliasTags(Map<String,String> testBotAliasTags) {
            return testBotAliasTags(Output.of(testBotAliasTags));
        }

        public Builder timeouts(@Nullable Output<V2modelsBotTimeoutsArgs> timeouts) {
            $.timeouts = timeouts;
            return this;
        }

        public Builder timeouts(V2modelsBotTimeoutsArgs timeouts) {
            return timeouts(Output.of(timeouts));
        }

        /**
         * @param type Type of a bot to create. Possible values are `&#34;Bot&#34;` and `&#34;BotNetwork&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of a bot to create. Possible values are `&#34;Bot&#34;` and `&#34;BotNetwork&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public V2modelsBotArgs build() {
            $.idleSessionTtlInSeconds = Objects.requireNonNull($.idleSessionTtlInSeconds, "expected parameter 'idleSessionTtlInSeconds' to be non-null");
            $.roleArn = Objects.requireNonNull($.roleArn, "expected parameter 'roleArn' to be non-null");
            return $;
        }
    }

}
