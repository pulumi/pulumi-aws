// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ec2clientvpn.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RouteState extends com.pulumi.resources.ResourceArgs {

    public static final RouteState Empty = new RouteState();

    @Import(name="clientVpnEndpointId")
    private @Nullable Output<String> clientVpnEndpointId;

    public Optional<Output<String>> clientVpnEndpointId() {
        return Optional.ofNullable(this.clientVpnEndpointId);
    }

    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="destinationCidrBlock")
    private @Nullable Output<String> destinationCidrBlock;

    public Optional<Output<String>> destinationCidrBlock() {
        return Optional.ofNullable(this.destinationCidrBlock);
    }

    @Import(name="origin")
    private @Nullable Output<String> origin;

    public Optional<Output<String>> origin() {
        return Optional.ofNullable(this.origin);
    }

    @Import(name="targetVpcSubnetId")
    private @Nullable Output<String> targetVpcSubnetId;

    public Optional<Output<String>> targetVpcSubnetId() {
        return Optional.ofNullable(this.targetVpcSubnetId);
    }

    @Import(name="type")
    private @Nullable Output<String> type;

    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private RouteState() {}

    private RouteState(RouteState $) {
        this.clientVpnEndpointId = $.clientVpnEndpointId;
        this.description = $.description;
        this.destinationCidrBlock = $.destinationCidrBlock;
        this.origin = $.origin;
        this.targetVpcSubnetId = $.targetVpcSubnetId;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RouteState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RouteState $;

        public Builder() {
            $ = new RouteState();
        }

        public Builder(RouteState defaults) {
            $ = new RouteState(Objects.requireNonNull(defaults));
        }

        public Builder clientVpnEndpointId(@Nullable Output<String> clientVpnEndpointId) {
            $.clientVpnEndpointId = clientVpnEndpointId;
            return this;
        }

        public Builder clientVpnEndpointId(String clientVpnEndpointId) {
            return clientVpnEndpointId(Output.of(clientVpnEndpointId));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder destinationCidrBlock(@Nullable Output<String> destinationCidrBlock) {
            $.destinationCidrBlock = destinationCidrBlock;
            return this;
        }

        public Builder destinationCidrBlock(String destinationCidrBlock) {
            return destinationCidrBlock(Output.of(destinationCidrBlock));
        }

        public Builder origin(@Nullable Output<String> origin) {
            $.origin = origin;
            return this;
        }

        public Builder origin(String origin) {
            return origin(Output.of(origin));
        }

        public Builder targetVpcSubnetId(@Nullable Output<String> targetVpcSubnetId) {
            $.targetVpcSubnetId = targetVpcSubnetId;
            return this;
        }

        public Builder targetVpcSubnetId(String targetVpcSubnetId) {
            return targetVpcSubnetId(Output.of(targetVpcSubnetId));
        }

        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        public Builder type(String type) {
            return type(Output.of(type));
        }

        public RouteState build() {
            return $;
        }
    }

}
