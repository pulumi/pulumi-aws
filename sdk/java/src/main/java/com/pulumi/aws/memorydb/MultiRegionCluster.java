// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.memorydb;

import com.pulumi.aws.Utilities;
import com.pulumi.aws.memorydb.MultiRegionClusterArgs;
import com.pulumi.aws.memorydb.inputs.MultiRegionClusterState;
import com.pulumi.aws.memorydb.outputs.MultiRegionClusterTimeouts;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provides a MemoryDB Multi Region Cluster.
 * 
 * More information about MemoryDB can be found in the [Developer Guide](https://docs.aws.amazon.com/memorydb/latest/devguide/what-is-memorydb-for-redis.html).
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.aws.memorydb.MultiRegionCluster;
 * import com.pulumi.aws.memorydb.MultiRegionClusterArgs;
 * import com.pulumi.aws.memorydb.Cluster;
 * import com.pulumi.aws.memorydb.ClusterArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new MultiRegionCluster("example", MultiRegionClusterArgs.builder()
 *             .multiRegionClusterNameSuffix("example")
 *             .nodeType("db.r7g.xlarge")
 *             .build());
 * 
 *         var exampleCluster = new Cluster("exampleCluster", ClusterArgs.builder()
 *             .aclName(exampleAwsMemorydbAcl.id())
 *             .autoMinorVersionUpgrade(false)
 *             .name("example")
 *             .nodeType("db.t4g.small")
 *             .numShards(2)
 *             .securityGroupIds(exampleAwsSecurityGroup.id())
 *             .snapshotRetentionLimit(7)
 *             .subnetGroupName(exampleAwsMemorydbSubnetGroup.id())
 *             .multiRegionClusterName(example.multiRegionClusterName())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Using `pulumi import`, import a cluster using the `multi_region_cluster_name`. For example:
 * 
 * ```sh
 * $ pulumi import aws:memorydb/multiRegionCluster:MultiRegionCluster example virxk-example
 * ```
 * 
 */
@ResourceType(type="aws:memorydb/multiRegionCluster:MultiRegionCluster")
public class MultiRegionCluster extends com.pulumi.resources.CustomResource {
    /**
     * The ARN of the multi-region cluster.
     * 
     */
    @Export(name="arn", refs={String.class}, tree="[0]")
    private Output<String> arn;

    /**
     * @return The ARN of the multi-region cluster.
     * 
     */
    public Output<String> arn() {
        return this.arn;
    }
    /**
     * description for the multi-region cluster.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return description for the multi-region cluster.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * The name of the engine to be used for the multi-region cluster. Valid values are `redis` and `valkey`.
     * 
     */
    @Export(name="engine", refs={String.class}, tree="[0]")
    private Output<String> engine;

    /**
     * @return The name of the engine to be used for the multi-region cluster. Valid values are `redis` and `valkey`.
     * 
     */
    public Output<String> engine() {
        return this.engine;
    }
    /**
     * The version of the engine to be used for the multi-region cluster. Downgrades are not supported.
     * 
     */
    @Export(name="engineVersion", refs={String.class}, tree="[0]")
    private Output<String> engineVersion;

    /**
     * @return The version of the engine to be used for the multi-region cluster. Downgrades are not supported.
     * 
     */
    public Output<String> engineVersion() {
        return this.engineVersion;
    }
    /**
     * The name of the multi-region cluster.
     * 
     */
    @Export(name="multiRegionClusterName", refs={String.class}, tree="[0]")
    private Output<String> multiRegionClusterName;

    /**
     * @return The name of the multi-region cluster.
     * 
     */
    public Output<String> multiRegionClusterName() {
        return this.multiRegionClusterName;
    }
    /**
     * A suffix to be added to the multi-region cluster name. An AWS generated prefix is automatically applied to the multi-region cluster name when it is created.
     * 
     */
    @Export(name="multiRegionClusterNameSuffix", refs={String.class}, tree="[0]")
    private Output<String> multiRegionClusterNameSuffix;

    /**
     * @return A suffix to be added to the multi-region cluster name. An AWS generated prefix is automatically applied to the multi-region cluster name when it is created.
     * 
     */
    public Output<String> multiRegionClusterNameSuffix() {
        return this.multiRegionClusterNameSuffix;
    }
    /**
     * The name of the multi-region parameter group to be associated with the cluster.
     * 
     */
    @Export(name="multiRegionParameterGroupName", refs={String.class}, tree="[0]")
    private Output<String> multiRegionParameterGroupName;

    /**
     * @return The name of the multi-region parameter group to be associated with the cluster.
     * 
     */
    public Output<String> multiRegionParameterGroupName() {
        return this.multiRegionParameterGroupName;
    }
    /**
     * The node type to be used for the multi-region cluster.
     * 
     * The following arguments are optional:
     * 
     */
    @Export(name="nodeType", refs={String.class}, tree="[0]")
    private Output<String> nodeType;

    /**
     * @return The node type to be used for the multi-region cluster.
     * 
     * The following arguments are optional:
     * 
     */
    public Output<String> nodeType() {
        return this.nodeType;
    }
    /**
     * The number of shards for the multi-region cluster.
     * 
     */
    @Export(name="numShards", refs={Integer.class}, tree="[0]")
    private Output<Integer> numShards;

    /**
     * @return The number of shards for the multi-region cluster.
     * 
     */
    public Output<Integer> numShards() {
        return this.numShards;
    }
    @Export(name="status", refs={String.class}, tree="[0]")
    private Output<String> status;

    public Output<String> status() {
        return this.status;
    }
    /**
     * A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Export(name="tags", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Output<Optional<Map<String,String>>> tags() {
        return Codegen.optional(this.tags);
    }
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @Export(name="tagsAll", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> tagsAll;

    /**
     * @return A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     */
    public Output<Map<String,String>> tagsAll() {
        return this.tagsAll;
    }
    @Export(name="timeouts", refs={MultiRegionClusterTimeouts.class}, tree="[0]")
    private Output</* @Nullable */ MultiRegionClusterTimeouts> timeouts;

    public Output<Optional<MultiRegionClusterTimeouts>> timeouts() {
        return Codegen.optional(this.timeouts);
    }
    /**
     * A flag to enable in-transit encryption on the cluster.
     * 
     */
    @Export(name="tlsEnabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> tlsEnabled;

    /**
     * @return A flag to enable in-transit encryption on the cluster.
     * 
     */
    public Output<Boolean> tlsEnabled() {
        return this.tlsEnabled;
    }
    @Export(name="updateStrategy", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> updateStrategy;

    public Output<Optional<String>> updateStrategy() {
        return Codegen.optional(this.updateStrategy);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public MultiRegionCluster(java.lang.String name) {
        this(name, MultiRegionClusterArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public MultiRegionCluster(java.lang.String name, MultiRegionClusterArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public MultiRegionCluster(java.lang.String name, MultiRegionClusterArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("aws:memorydb/multiRegionCluster:MultiRegionCluster", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private MultiRegionCluster(java.lang.String name, Output<java.lang.String> id, @Nullable MultiRegionClusterState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("aws:memorydb/multiRegionCluster:MultiRegionCluster", name, state, makeResourceOptions(options, id), false);
    }

    private static MultiRegionClusterArgs makeArgs(MultiRegionClusterArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? MultiRegionClusterArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static MultiRegionCluster get(java.lang.String name, Output<java.lang.String> id, @Nullable MultiRegionClusterState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new MultiRegionCluster(name, id, state, options);
    }
}
