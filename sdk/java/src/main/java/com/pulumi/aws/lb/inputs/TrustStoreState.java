// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.lb.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TrustStoreState extends com.pulumi.resources.ResourceArgs {

    public static final TrustStoreState Empty = new TrustStoreState();

    /**
     * ARN of the Trust Store (matches `id`).
     * 
     */
    @Import(name="arn")
    private @Nullable Output<String> arn;

    /**
     * @return ARN of the Trust Store (matches `id`).
     * 
     */
    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    /**
     * ARN suffix for use with CloudWatch Metrics.
     * 
     */
    @Import(name="arnSuffix")
    private @Nullable Output<String> arnSuffix;

    /**
     * @return ARN suffix for use with CloudWatch Metrics.
     * 
     */
    public Optional<Output<String>> arnSuffix() {
        return Optional.ofNullable(this.arnSuffix);
    }

    /**
     * S3 Bucket name holding the client certificate CA bundle.
     * 
     */
    @Import(name="caCertificatesBundleS3Bucket")
    private @Nullable Output<String> caCertificatesBundleS3Bucket;

    /**
     * @return S3 Bucket name holding the client certificate CA bundle.
     * 
     */
    public Optional<Output<String>> caCertificatesBundleS3Bucket() {
        return Optional.ofNullable(this.caCertificatesBundleS3Bucket);
    }

    /**
     * S3 Bucket name holding the client certificate CA bundle.
     * 
     */
    @Import(name="caCertificatesBundleS3Key")
    private @Nullable Output<String> caCertificatesBundleS3Key;

    /**
     * @return S3 Bucket name holding the client certificate CA bundle.
     * 
     */
    public Optional<Output<String>> caCertificatesBundleS3Key() {
        return Optional.ofNullable(this.caCertificatesBundleS3Key);
    }

    /**
     * Version Id of CA bundle S3 bucket object, if versioned, defaults to latest if omitted.
     * 
     */
    @Import(name="caCertificatesBundleS3ObjectVersion")
    private @Nullable Output<String> caCertificatesBundleS3ObjectVersion;

    /**
     * @return Version Id of CA bundle S3 bucket object, if versioned, defaults to latest if omitted.
     * 
     */
    public Optional<Output<String>> caCertificatesBundleS3ObjectVersion() {
        return Optional.ofNullable(this.caCertificatesBundleS3ObjectVersion);
    }

    /**
     * Name of the Trust Store. If omitted, the provider will assign a random, unique name. This name must be unique per region per account, can have a maximum of 32 characters, must contain only alphanumeric characters or hyphens, and must not begin or end with a hyphen.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the Trust Store. If omitted, the provider will assign a random, unique name. This name must be unique per region per account, can have a maximum of 32 characters, must contain only alphanumeric characters or hyphens, and must not begin or end with a hyphen.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Creates a unique name beginning with the specified prefix. Conflicts with `name`. Cannot be longer than 6 characters.
     * 
     */
    @Import(name="namePrefix")
    private @Nullable Output<String> namePrefix;

    /**
     * @return Creates a unique name beginning with the specified prefix. Conflicts with `name`. Cannot be longer than 6 characters.
     * 
     */
    public Optional<Output<String>> namePrefix() {
        return Optional.ofNullable(this.namePrefix);
    }

    /**
     * Map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    /**
     * @return A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    private TrustStoreState() {}

    private TrustStoreState(TrustStoreState $) {
        this.arn = $.arn;
        this.arnSuffix = $.arnSuffix;
        this.caCertificatesBundleS3Bucket = $.caCertificatesBundleS3Bucket;
        this.caCertificatesBundleS3Key = $.caCertificatesBundleS3Key;
        this.caCertificatesBundleS3ObjectVersion = $.caCertificatesBundleS3ObjectVersion;
        this.name = $.name;
        this.namePrefix = $.namePrefix;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TrustStoreState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TrustStoreState $;

        public Builder() {
            $ = new TrustStoreState();
        }

        public Builder(TrustStoreState defaults) {
            $ = new TrustStoreState(Objects.requireNonNull(defaults));
        }

        /**
         * @param arn ARN of the Trust Store (matches `id`).
         * 
         * @return builder
         * 
         */
        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        /**
         * @param arn ARN of the Trust Store (matches `id`).
         * 
         * @return builder
         * 
         */
        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        /**
         * @param arnSuffix ARN suffix for use with CloudWatch Metrics.
         * 
         * @return builder
         * 
         */
        public Builder arnSuffix(@Nullable Output<String> arnSuffix) {
            $.arnSuffix = arnSuffix;
            return this;
        }

        /**
         * @param arnSuffix ARN suffix for use with CloudWatch Metrics.
         * 
         * @return builder
         * 
         */
        public Builder arnSuffix(String arnSuffix) {
            return arnSuffix(Output.of(arnSuffix));
        }

        /**
         * @param caCertificatesBundleS3Bucket S3 Bucket name holding the client certificate CA bundle.
         * 
         * @return builder
         * 
         */
        public Builder caCertificatesBundleS3Bucket(@Nullable Output<String> caCertificatesBundleS3Bucket) {
            $.caCertificatesBundleS3Bucket = caCertificatesBundleS3Bucket;
            return this;
        }

        /**
         * @param caCertificatesBundleS3Bucket S3 Bucket name holding the client certificate CA bundle.
         * 
         * @return builder
         * 
         */
        public Builder caCertificatesBundleS3Bucket(String caCertificatesBundleS3Bucket) {
            return caCertificatesBundleS3Bucket(Output.of(caCertificatesBundleS3Bucket));
        }

        /**
         * @param caCertificatesBundleS3Key S3 Bucket name holding the client certificate CA bundle.
         * 
         * @return builder
         * 
         */
        public Builder caCertificatesBundleS3Key(@Nullable Output<String> caCertificatesBundleS3Key) {
            $.caCertificatesBundleS3Key = caCertificatesBundleS3Key;
            return this;
        }

        /**
         * @param caCertificatesBundleS3Key S3 Bucket name holding the client certificate CA bundle.
         * 
         * @return builder
         * 
         */
        public Builder caCertificatesBundleS3Key(String caCertificatesBundleS3Key) {
            return caCertificatesBundleS3Key(Output.of(caCertificatesBundleS3Key));
        }

        /**
         * @param caCertificatesBundleS3ObjectVersion Version Id of CA bundle S3 bucket object, if versioned, defaults to latest if omitted.
         * 
         * @return builder
         * 
         */
        public Builder caCertificatesBundleS3ObjectVersion(@Nullable Output<String> caCertificatesBundleS3ObjectVersion) {
            $.caCertificatesBundleS3ObjectVersion = caCertificatesBundleS3ObjectVersion;
            return this;
        }

        /**
         * @param caCertificatesBundleS3ObjectVersion Version Id of CA bundle S3 bucket object, if versioned, defaults to latest if omitted.
         * 
         * @return builder
         * 
         */
        public Builder caCertificatesBundleS3ObjectVersion(String caCertificatesBundleS3ObjectVersion) {
            return caCertificatesBundleS3ObjectVersion(Output.of(caCertificatesBundleS3ObjectVersion));
        }

        /**
         * @param name Name of the Trust Store. If omitted, the provider will assign a random, unique name. This name must be unique per region per account, can have a maximum of 32 characters, must contain only alphanumeric characters or hyphens, and must not begin or end with a hyphen.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the Trust Store. If omitted, the provider will assign a random, unique name. This name must be unique per region per account, can have a maximum of 32 characters, must contain only alphanumeric characters or hyphens, and must not begin or end with a hyphen.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param namePrefix Creates a unique name beginning with the specified prefix. Conflicts with `name`. Cannot be longer than 6 characters.
         * 
         * @return builder
         * 
         */
        public Builder namePrefix(@Nullable Output<String> namePrefix) {
            $.namePrefix = namePrefix;
            return this;
        }

        /**
         * @param namePrefix Creates a unique name beginning with the specified prefix. Conflicts with `name`. Cannot be longer than 6 characters.
         * 
         * @return builder
         * 
         */
        public Builder namePrefix(String namePrefix) {
            return namePrefix(Output.of(namePrefix));
        }

        /**
         * @param tags Map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tagsAll A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
         * 
         * @return builder
         * 
         * @deprecated
         * Please use `tags` instead.
         * 
         */
        @Deprecated /* Please use `tags` instead. */
        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        /**
         * @param tagsAll A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
         * 
         * @return builder
         * 
         * @deprecated
         * Please use `tags` instead.
         * 
         */
        @Deprecated /* Please use `tags` instead. */
        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        public TrustStoreState build() {
            return $;
        }
    }

}
