// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.emrcontainers.inputs;

import com.pulumi.aws.emrcontainers.inputs.VirtualClusterContainerProviderInfoArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class VirtualClusterContainerProviderArgs extends com.pulumi.resources.ResourceArgs {

    public static final VirtualClusterContainerProviderArgs Empty = new VirtualClusterContainerProviderArgs();

    /**
     * The name of the container provider that is running your EMR Containers cluster
     * 
     */
    @Import(name="id", required=true)
    private Output<String> id;

    /**
     * @return The name of the container provider that is running your EMR Containers cluster
     * 
     */
    public Output<String> id() {
        return this.id;
    }

    /**
     * Nested list containing information about the configuration of the container provider
     * 
     */
    @Import(name="info", required=true)
    private Output<VirtualClusterContainerProviderInfoArgs> info;

    /**
     * @return Nested list containing information about the configuration of the container provider
     * 
     */
    public Output<VirtualClusterContainerProviderInfoArgs> info() {
        return this.info;
    }

    /**
     * The type of the container provider
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return The type of the container provider
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private VirtualClusterContainerProviderArgs() {}

    private VirtualClusterContainerProviderArgs(VirtualClusterContainerProviderArgs $) {
        this.id = $.id;
        this.info = $.info;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VirtualClusterContainerProviderArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VirtualClusterContainerProviderArgs $;

        public Builder() {
            $ = new VirtualClusterContainerProviderArgs();
        }

        public Builder(VirtualClusterContainerProviderArgs defaults) {
            $ = new VirtualClusterContainerProviderArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param id The name of the container provider that is running your EMR Containers cluster
         * 
         * @return builder
         * 
         */
        public Builder id(Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The name of the container provider that is running your EMR Containers cluster
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param info Nested list containing information about the configuration of the container provider
         * 
         * @return builder
         * 
         */
        public Builder info(Output<VirtualClusterContainerProviderInfoArgs> info) {
            $.info = info;
            return this;
        }

        /**
         * @param info Nested list containing information about the configuration of the container provider
         * 
         * @return builder
         * 
         */
        public Builder info(VirtualClusterContainerProviderInfoArgs info) {
            return info(Output.of(info));
        }

        /**
         * @param type The type of the container provider
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of the container provider
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public VirtualClusterContainerProviderArgs build() {
            $.id = Objects.requireNonNull($.id, "expected parameter 'id' to be non-null");
            $.info = Objects.requireNonNull($.info, "expected parameter 'info' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
