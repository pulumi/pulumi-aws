// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.securityhub.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class StandardsControlAssociationState extends com.pulumi.resources.ResourceArgs {

    public static final StandardsControlAssociationState Empty = new StandardsControlAssociationState();

    /**
     * The desired enablement status of the control in the standard. Valid values: `ENABLED`, `DISABLED`.
     * 
     */
    @Import(name="associationStatus")
    private @Nullable Output<String> associationStatus;

    /**
     * @return The desired enablement status of the control in the standard. Valid values: `ENABLED`, `DISABLED`.
     * 
     */
    public Optional<Output<String>> associationStatus() {
        return Optional.ofNullable(this.associationStatus);
    }

    /**
     * The unique identifier for the security control whose enablement status you want to update.
     * 
     */
    @Import(name="securityControlId")
    private @Nullable Output<String> securityControlId;

    /**
     * @return The unique identifier for the security control whose enablement status you want to update.
     * 
     */
    public Optional<Output<String>> securityControlId() {
        return Optional.ofNullable(this.securityControlId);
    }

    /**
     * The Amazon Resource Name (ARN) of the standard in which you want to update the control&#39;s enablement status.
     * 
     * The following arguments are optional:
     * 
     */
    @Import(name="standardsArn")
    private @Nullable Output<String> standardsArn;

    /**
     * @return The Amazon Resource Name (ARN) of the standard in which you want to update the control&#39;s enablement status.
     * 
     * The following arguments are optional:
     * 
     */
    public Optional<Output<String>> standardsArn() {
        return Optional.ofNullable(this.standardsArn);
    }

    /**
     * The reason for updating the control&#39;s enablement status in the standard. Required when `association_status` is `DISABLED`.
     * 
     */
    @Import(name="updatedReason")
    private @Nullable Output<String> updatedReason;

    /**
     * @return The reason for updating the control&#39;s enablement status in the standard. Required when `association_status` is `DISABLED`.
     * 
     */
    public Optional<Output<String>> updatedReason() {
        return Optional.ofNullable(this.updatedReason);
    }

    private StandardsControlAssociationState() {}

    private StandardsControlAssociationState(StandardsControlAssociationState $) {
        this.associationStatus = $.associationStatus;
        this.securityControlId = $.securityControlId;
        this.standardsArn = $.standardsArn;
        this.updatedReason = $.updatedReason;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StandardsControlAssociationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StandardsControlAssociationState $;

        public Builder() {
            $ = new StandardsControlAssociationState();
        }

        public Builder(StandardsControlAssociationState defaults) {
            $ = new StandardsControlAssociationState(Objects.requireNonNull(defaults));
        }

        /**
         * @param associationStatus The desired enablement status of the control in the standard. Valid values: `ENABLED`, `DISABLED`.
         * 
         * @return builder
         * 
         */
        public Builder associationStatus(@Nullable Output<String> associationStatus) {
            $.associationStatus = associationStatus;
            return this;
        }

        /**
         * @param associationStatus The desired enablement status of the control in the standard. Valid values: `ENABLED`, `DISABLED`.
         * 
         * @return builder
         * 
         */
        public Builder associationStatus(String associationStatus) {
            return associationStatus(Output.of(associationStatus));
        }

        /**
         * @param securityControlId The unique identifier for the security control whose enablement status you want to update.
         * 
         * @return builder
         * 
         */
        public Builder securityControlId(@Nullable Output<String> securityControlId) {
            $.securityControlId = securityControlId;
            return this;
        }

        /**
         * @param securityControlId The unique identifier for the security control whose enablement status you want to update.
         * 
         * @return builder
         * 
         */
        public Builder securityControlId(String securityControlId) {
            return securityControlId(Output.of(securityControlId));
        }

        /**
         * @param standardsArn The Amazon Resource Name (ARN) of the standard in which you want to update the control&#39;s enablement status.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder standardsArn(@Nullable Output<String> standardsArn) {
            $.standardsArn = standardsArn;
            return this;
        }

        /**
         * @param standardsArn The Amazon Resource Name (ARN) of the standard in which you want to update the control&#39;s enablement status.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder standardsArn(String standardsArn) {
            return standardsArn(Output.of(standardsArn));
        }

        /**
         * @param updatedReason The reason for updating the control&#39;s enablement status in the standard. Required when `association_status` is `DISABLED`.
         * 
         * @return builder
         * 
         */
        public Builder updatedReason(@Nullable Output<String> updatedReason) {
            $.updatedReason = updatedReason;
            return this;
        }

        /**
         * @param updatedReason The reason for updating the control&#39;s enablement status in the standard. Required when `association_status` is `DISABLED`.
         * 
         * @return builder
         * 
         */
        public Builder updatedReason(String updatedReason) {
            return updatedReason(Output.of(updatedReason));
        }

        public StandardsControlAssociationState build() {
            return $;
        }
    }

}
