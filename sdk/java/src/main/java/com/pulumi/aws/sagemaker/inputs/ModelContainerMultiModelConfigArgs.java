// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.sagemaker.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ModelContainerMultiModelConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ModelContainerMultiModelConfigArgs Empty = new ModelContainerMultiModelConfigArgs();

    /**
     * Whether to cache models for a multi-model endpoint. By default, multi-model endpoints cache models so that a model does not have to be loaded into memory each time it is invoked. Some use cases do not benefit from model caching. For example, if an endpoint hosts a large number of models that are each invoked infrequently, the endpoint might perform better if you disable model caching. To disable model caching, set the value of this parameter to `Disabled`. Allowed values are: `Enabled` and `Disabled`.
     * 
     */
    @Import(name="modelCacheSetting")
    private @Nullable Output<String> modelCacheSetting;

    /**
     * @return Whether to cache models for a multi-model endpoint. By default, multi-model endpoints cache models so that a model does not have to be loaded into memory each time it is invoked. Some use cases do not benefit from model caching. For example, if an endpoint hosts a large number of models that are each invoked infrequently, the endpoint might perform better if you disable model caching. To disable model caching, set the value of this parameter to `Disabled`. Allowed values are: `Enabled` and `Disabled`.
     * 
     */
    public Optional<Output<String>> modelCacheSetting() {
        return Optional.ofNullable(this.modelCacheSetting);
    }

    private ModelContainerMultiModelConfigArgs() {}

    private ModelContainerMultiModelConfigArgs(ModelContainerMultiModelConfigArgs $) {
        this.modelCacheSetting = $.modelCacheSetting;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ModelContainerMultiModelConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ModelContainerMultiModelConfigArgs $;

        public Builder() {
            $ = new ModelContainerMultiModelConfigArgs();
        }

        public Builder(ModelContainerMultiModelConfigArgs defaults) {
            $ = new ModelContainerMultiModelConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param modelCacheSetting Whether to cache models for a multi-model endpoint. By default, multi-model endpoints cache models so that a model does not have to be loaded into memory each time it is invoked. Some use cases do not benefit from model caching. For example, if an endpoint hosts a large number of models that are each invoked infrequently, the endpoint might perform better if you disable model caching. To disable model caching, set the value of this parameter to `Disabled`. Allowed values are: `Enabled` and `Disabled`.
         * 
         * @return builder
         * 
         */
        public Builder modelCacheSetting(@Nullable Output<String> modelCacheSetting) {
            $.modelCacheSetting = modelCacheSetting;
            return this;
        }

        /**
         * @param modelCacheSetting Whether to cache models for a multi-model endpoint. By default, multi-model endpoints cache models so that a model does not have to be loaded into memory each time it is invoked. Some use cases do not benefit from model caching. For example, if an endpoint hosts a large number of models that are each invoked infrequently, the endpoint might perform better if you disable model caching. To disable model caching, set the value of this parameter to `Disabled`. Allowed values are: `Enabled` and `Disabled`.
         * 
         * @return builder
         * 
         */
        public Builder modelCacheSetting(String modelCacheSetting) {
            return modelCacheSetting(Output.of(modelCacheSetting));
        }

        public ModelContainerMultiModelConfigArgs build() {
            return $;
        }
    }

}
