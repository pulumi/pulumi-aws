// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.kms.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetCipherTextArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetCipherTextArgs Empty = new GetCipherTextArgs();

    /**
     * An optional mapping that makes up the encryption context.
     * 
     */
    @Import(name="context")
    private @Nullable Output<Map<String,String>> context;

    /**
     * @return An optional mapping that makes up the encryption context.
     * 
     */
    public Optional<Output<Map<String,String>>> context() {
        return Optional.ofNullable(this.context);
    }

    /**
     * Globally unique key ID for the customer master key.
     * 
     */
    @Import(name="keyId", required=true)
    private Output<String> keyId;

    /**
     * @return Globally unique key ID for the customer master key.
     * 
     */
    public Output<String> keyId() {
        return this.keyId;
    }

    /**
     * Data to be encrypted. Note that this may show up in logs, and it will be stored in the state file.
     * 
     */
    @Import(name="plaintext", required=true)
    private Output<String> plaintext;

    /**
     * @return Data to be encrypted. Note that this may show up in logs, and it will be stored in the state file.
     * 
     */
    public Output<String> plaintext() {
        return this.plaintext;
    }

    private GetCipherTextArgs() {}

    private GetCipherTextArgs(GetCipherTextArgs $) {
        this.context = $.context;
        this.keyId = $.keyId;
        this.plaintext = $.plaintext;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetCipherTextArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetCipherTextArgs $;

        public Builder() {
            $ = new GetCipherTextArgs();
        }

        public Builder(GetCipherTextArgs defaults) {
            $ = new GetCipherTextArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param context An optional mapping that makes up the encryption context.
         * 
         * @return builder
         * 
         */
        public Builder context(@Nullable Output<Map<String,String>> context) {
            $.context = context;
            return this;
        }

        /**
         * @param context An optional mapping that makes up the encryption context.
         * 
         * @return builder
         * 
         */
        public Builder context(Map<String,String> context) {
            return context(Output.of(context));
        }

        /**
         * @param keyId Globally unique key ID for the customer master key.
         * 
         * @return builder
         * 
         */
        public Builder keyId(Output<String> keyId) {
            $.keyId = keyId;
            return this;
        }

        /**
         * @param keyId Globally unique key ID for the customer master key.
         * 
         * @return builder
         * 
         */
        public Builder keyId(String keyId) {
            return keyId(Output.of(keyId));
        }

        /**
         * @param plaintext Data to be encrypted. Note that this may show up in logs, and it will be stored in the state file.
         * 
         * @return builder
         * 
         */
        public Builder plaintext(Output<String> plaintext) {
            $.plaintext = plaintext;
            return this;
        }

        /**
         * @param plaintext Data to be encrypted. Note that this may show up in logs, and it will be stored in the state file.
         * 
         * @return builder
         * 
         */
        public Builder plaintext(String plaintext) {
            return plaintext(Output.of(plaintext));
        }

        public GetCipherTextArgs build() {
            if ($.keyId == null) {
                throw new MissingRequiredPropertyException("GetCipherTextArgs", "keyId");
            }
            if ($.plaintext == null) {
                throw new MissingRequiredPropertyException("GetCipherTextArgs", "plaintext");
            }
            return $;
        }
    }

}
