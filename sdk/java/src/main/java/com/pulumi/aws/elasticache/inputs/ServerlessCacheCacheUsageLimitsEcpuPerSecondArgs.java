// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.elasticache.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServerlessCacheCacheUsageLimitsEcpuPerSecondArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServerlessCacheCacheUsageLimitsEcpuPerSecondArgs Empty = new ServerlessCacheCacheUsageLimitsEcpuPerSecondArgs();

    /**
     * The maximum number of ECPUs the cache can consume per second. Must be between 1,000 and 15,000,000.
     * 
     */
    @Import(name="maximum")
    private @Nullable Output<Integer> maximum;

    /**
     * @return The maximum number of ECPUs the cache can consume per second. Must be between 1,000 and 15,000,000.
     * 
     */
    public Optional<Output<Integer>> maximum() {
        return Optional.ofNullable(this.maximum);
    }

    /**
     * The minimum number of ECPUs the cache can consume per second. Must be between 1,000 and 15,000,000.
     * 
     */
    @Import(name="minimum")
    private @Nullable Output<Integer> minimum;

    /**
     * @return The minimum number of ECPUs the cache can consume per second. Must be between 1,000 and 15,000,000.
     * 
     */
    public Optional<Output<Integer>> minimum() {
        return Optional.ofNullable(this.minimum);
    }

    private ServerlessCacheCacheUsageLimitsEcpuPerSecondArgs() {}

    private ServerlessCacheCacheUsageLimitsEcpuPerSecondArgs(ServerlessCacheCacheUsageLimitsEcpuPerSecondArgs $) {
        this.maximum = $.maximum;
        this.minimum = $.minimum;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServerlessCacheCacheUsageLimitsEcpuPerSecondArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServerlessCacheCacheUsageLimitsEcpuPerSecondArgs $;

        public Builder() {
            $ = new ServerlessCacheCacheUsageLimitsEcpuPerSecondArgs();
        }

        public Builder(ServerlessCacheCacheUsageLimitsEcpuPerSecondArgs defaults) {
            $ = new ServerlessCacheCacheUsageLimitsEcpuPerSecondArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param maximum The maximum number of ECPUs the cache can consume per second. Must be between 1,000 and 15,000,000.
         * 
         * @return builder
         * 
         */
        public Builder maximum(@Nullable Output<Integer> maximum) {
            $.maximum = maximum;
            return this;
        }

        /**
         * @param maximum The maximum number of ECPUs the cache can consume per second. Must be between 1,000 and 15,000,000.
         * 
         * @return builder
         * 
         */
        public Builder maximum(Integer maximum) {
            return maximum(Output.of(maximum));
        }

        /**
         * @param minimum The minimum number of ECPUs the cache can consume per second. Must be between 1,000 and 15,000,000.
         * 
         * @return builder
         * 
         */
        public Builder minimum(@Nullable Output<Integer> minimum) {
            $.minimum = minimum;
            return this;
        }

        /**
         * @param minimum The minimum number of ECPUs the cache can consume per second. Must be between 1,000 and 15,000,000.
         * 
         * @return builder
         * 
         */
        public Builder minimum(Integer minimum) {
            return minimum(Output.of(minimum));
        }

        public ServerlessCacheCacheUsageLimitsEcpuPerSecondArgs build() {
            return $;
        }
    }

}
