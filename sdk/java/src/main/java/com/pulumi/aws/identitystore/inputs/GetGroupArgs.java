// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.identitystore.inputs;

import com.pulumi.aws.identitystore.inputs.GetGroupAlternateIdentifierArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetGroupArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetGroupArgs Empty = new GetGroupArgs();

    /**
     * A unique identifier for the group that is not the primary identifier. Conflicts with `group_id`. Detailed below.
     * 
     */
    @Import(name="alternateIdentifier")
    private @Nullable Output<GetGroupAlternateIdentifierArgs> alternateIdentifier;

    /**
     * @return A unique identifier for the group that is not the primary identifier. Conflicts with `group_id`. Detailed below.
     * 
     */
    public Optional<Output<GetGroupAlternateIdentifierArgs>> alternateIdentifier() {
        return Optional.ofNullable(this.alternateIdentifier);
    }

    /**
     * The identifier for a group in the Identity Store.
     * 
     * &gt; Exactly one of the above arguments must be provided.
     * 
     */
    @Import(name="groupId")
    private @Nullable Output<String> groupId;

    /**
     * @return The identifier for a group in the Identity Store.
     * 
     * &gt; Exactly one of the above arguments must be provided.
     * 
     */
    public Optional<Output<String>> groupId() {
        return Optional.ofNullable(this.groupId);
    }

    /**
     * Identity Store ID associated with the Single Sign-On Instance.
     * 
     * The following arguments are optional:
     * 
     */
    @Import(name="identityStoreId", required=true)
    private Output<String> identityStoreId;

    /**
     * @return Identity Store ID associated with the Single Sign-On Instance.
     * 
     * The following arguments are optional:
     * 
     */
    public Output<String> identityStoreId() {
        return this.identityStoreId;
    }

    private GetGroupArgs() {}

    private GetGroupArgs(GetGroupArgs $) {
        this.alternateIdentifier = $.alternateIdentifier;
        this.groupId = $.groupId;
        this.identityStoreId = $.identityStoreId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetGroupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetGroupArgs $;

        public Builder() {
            $ = new GetGroupArgs();
        }

        public Builder(GetGroupArgs defaults) {
            $ = new GetGroupArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param alternateIdentifier A unique identifier for the group that is not the primary identifier. Conflicts with `group_id`. Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder alternateIdentifier(@Nullable Output<GetGroupAlternateIdentifierArgs> alternateIdentifier) {
            $.alternateIdentifier = alternateIdentifier;
            return this;
        }

        /**
         * @param alternateIdentifier A unique identifier for the group that is not the primary identifier. Conflicts with `group_id`. Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder alternateIdentifier(GetGroupAlternateIdentifierArgs alternateIdentifier) {
            return alternateIdentifier(Output.of(alternateIdentifier));
        }

        /**
         * @param groupId The identifier for a group in the Identity Store.
         * 
         * &gt; Exactly one of the above arguments must be provided.
         * 
         * @return builder
         * 
         */
        public Builder groupId(@Nullable Output<String> groupId) {
            $.groupId = groupId;
            return this;
        }

        /**
         * @param groupId The identifier for a group in the Identity Store.
         * 
         * &gt; Exactly one of the above arguments must be provided.
         * 
         * @return builder
         * 
         */
        public Builder groupId(String groupId) {
            return groupId(Output.of(groupId));
        }

        /**
         * @param identityStoreId Identity Store ID associated with the Single Sign-On Instance.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder identityStoreId(Output<String> identityStoreId) {
            $.identityStoreId = identityStoreId;
            return this;
        }

        /**
         * @param identityStoreId Identity Store ID associated with the Single Sign-On Instance.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder identityStoreId(String identityStoreId) {
            return identityStoreId(Output.of(identityStoreId));
        }

        public GetGroupArgs build() {
            $.identityStoreId = Objects.requireNonNull($.identityStoreId, "expected parameter 'identityStoreId' to be non-null");
            return $;
        }
    }

}
