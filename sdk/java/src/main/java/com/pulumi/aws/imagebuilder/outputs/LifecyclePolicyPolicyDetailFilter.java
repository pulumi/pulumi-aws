// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.imagebuilder.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class LifecyclePolicyPolicyDetailFilter {
    /**
     * @return For age-based filters, this is the number of resources to keep on hand after the lifecycle DELETE action is applied. Impacted resources are only deleted if you have more than this number of resources. If you have fewer resources than this number, the impacted resource is not deleted.
     * 
     */
    private @Nullable Integer retainAtLeast;
    /**
     * @return Filter resources based on either age or count. Valid values: `AGE` or `COUNT`.
     * 
     */
    private String type;
    /**
     * @return Defines the unit of time that the lifecycle policy uses to determine impacted resources. This is required for age-based rules. Valid values: `DAYS`, `WEEKS`, `MONTHS` or `YEARS`.
     * 
     */
    private @Nullable String unit;
    /**
     * @return The number of units for the time period or for the count. For example, a value of 6 might refer to six months or six AMIs.
     * 
     * The following arguments are optional:
     * 
     */
    private Integer value;

    private LifecyclePolicyPolicyDetailFilter() {}
    /**
     * @return For age-based filters, this is the number of resources to keep on hand after the lifecycle DELETE action is applied. Impacted resources are only deleted if you have more than this number of resources. If you have fewer resources than this number, the impacted resource is not deleted.
     * 
     */
    public Optional<Integer> retainAtLeast() {
        return Optional.ofNullable(this.retainAtLeast);
    }
    /**
     * @return Filter resources based on either age or count. Valid values: `AGE` or `COUNT`.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return Defines the unit of time that the lifecycle policy uses to determine impacted resources. This is required for age-based rules. Valid values: `DAYS`, `WEEKS`, `MONTHS` or `YEARS`.
     * 
     */
    public Optional<String> unit() {
        return Optional.ofNullable(this.unit);
    }
    /**
     * @return The number of units for the time period or for the count. For example, a value of 6 might refer to six months or six AMIs.
     * 
     * The following arguments are optional:
     * 
     */
    public Integer value() {
        return this.value;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LifecyclePolicyPolicyDetailFilter defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer retainAtLeast;
        private String type;
        private @Nullable String unit;
        private Integer value;
        public Builder() {}
        public Builder(LifecyclePolicyPolicyDetailFilter defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.retainAtLeast = defaults.retainAtLeast;
    	      this.type = defaults.type;
    	      this.unit = defaults.unit;
    	      this.value = defaults.value;
        }

        @CustomType.Setter
        public Builder retainAtLeast(@Nullable Integer retainAtLeast) {

            this.retainAtLeast = retainAtLeast;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("LifecyclePolicyPolicyDetailFilter", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder unit(@Nullable String unit) {

            this.unit = unit;
            return this;
        }
        @CustomType.Setter
        public Builder value(Integer value) {
            if (value == null) {
              throw new MissingRequiredPropertyException("LifecyclePolicyPolicyDetailFilter", "value");
            }
            this.value = value;
            return this;
        }
        public LifecyclePolicyPolicyDetailFilter build() {
            final var _resultValue = new LifecyclePolicyPolicyDetailFilter();
            _resultValue.retainAtLeast = retainAtLeast;
            _resultValue.type = type;
            _resultValue.unit = unit;
            _resultValue.value = value;
            return _resultValue;
        }
    }
}
