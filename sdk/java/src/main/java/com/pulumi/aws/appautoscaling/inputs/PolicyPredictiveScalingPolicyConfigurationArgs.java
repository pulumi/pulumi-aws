// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.appautoscaling.inputs;

import com.pulumi.aws.appautoscaling.inputs.PolicyPredictiveScalingPolicyConfigurationMetricSpecificationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PolicyPredictiveScalingPolicyConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final PolicyPredictiveScalingPolicyConfigurationArgs Empty = new PolicyPredictiveScalingPolicyConfigurationArgs();

    /**
     * The behavior that should be applied if the forecast capacity approaches or exceeds the maximum capacity. Valid values are `HonorMaxCapacity` and `IncreaseMaxCapacity`.
     * 
     */
    @Import(name="maxCapacityBreachBehavior")
    private @Nullable Output<String> maxCapacityBreachBehavior;

    /**
     * @return The behavior that should be applied if the forecast capacity approaches or exceeds the maximum capacity. Valid values are `HonorMaxCapacity` and `IncreaseMaxCapacity`.
     * 
     */
    public Optional<Output<String>> maxCapacityBreachBehavior() {
        return Optional.ofNullable(this.maxCapacityBreachBehavior);
    }

    /**
     * Size of the capacity buffer to use when the forecast capacity is close to or exceeds the maximum capacity. The value is specified as a percentage relative to the forecast capacity. Required if the `max_capacity_breach_behavior` argument is set to `IncreaseMaxCapacity`, and cannot be used otherwise.
     * 
     */
    @Import(name="maxCapacityBuffer")
    private @Nullable Output<Integer> maxCapacityBuffer;

    /**
     * @return Size of the capacity buffer to use when the forecast capacity is close to or exceeds the maximum capacity. The value is specified as a percentage relative to the forecast capacity. Required if the `max_capacity_breach_behavior` argument is set to `IncreaseMaxCapacity`, and cannot be used otherwise.
     * 
     */
    public Optional<Output<Integer>> maxCapacityBuffer() {
        return Optional.ofNullable(this.maxCapacityBuffer);
    }

    /**
     * Metrics and target utilization to use for predictive scaling. See supported fields below.
     * 
     */
    @Import(name="metricSpecifications", required=true)
    private Output<List<PolicyPredictiveScalingPolicyConfigurationMetricSpecificationArgs>> metricSpecifications;

    /**
     * @return Metrics and target utilization to use for predictive scaling. See supported fields below.
     * 
     */
    public Output<List<PolicyPredictiveScalingPolicyConfigurationMetricSpecificationArgs>> metricSpecifications() {
        return this.metricSpecifications;
    }

    /**
     * Predictive scaling mode. Valid values are `ForecastOnly` and `ForecastAndScale`.
     * 
     */
    @Import(name="mode")
    private @Nullable Output<String> mode;

    /**
     * @return Predictive scaling mode. Valid values are `ForecastOnly` and `ForecastAndScale`.
     * 
     */
    public Optional<Output<String>> mode() {
        return Optional.ofNullable(this.mode);
    }

    /**
     * Amount of time, in seconds, that the start time can be advanced.
     * 
     */
    @Import(name="schedulingBufferTime")
    private @Nullable Output<Integer> schedulingBufferTime;

    /**
     * @return Amount of time, in seconds, that the start time can be advanced.
     * 
     */
    public Optional<Output<Integer>> schedulingBufferTime() {
        return Optional.ofNullable(this.schedulingBufferTime);
    }

    private PolicyPredictiveScalingPolicyConfigurationArgs() {}

    private PolicyPredictiveScalingPolicyConfigurationArgs(PolicyPredictiveScalingPolicyConfigurationArgs $) {
        this.maxCapacityBreachBehavior = $.maxCapacityBreachBehavior;
        this.maxCapacityBuffer = $.maxCapacityBuffer;
        this.metricSpecifications = $.metricSpecifications;
        this.mode = $.mode;
        this.schedulingBufferTime = $.schedulingBufferTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PolicyPredictiveScalingPolicyConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PolicyPredictiveScalingPolicyConfigurationArgs $;

        public Builder() {
            $ = new PolicyPredictiveScalingPolicyConfigurationArgs();
        }

        public Builder(PolicyPredictiveScalingPolicyConfigurationArgs defaults) {
            $ = new PolicyPredictiveScalingPolicyConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param maxCapacityBreachBehavior The behavior that should be applied if the forecast capacity approaches or exceeds the maximum capacity. Valid values are `HonorMaxCapacity` and `IncreaseMaxCapacity`.
         * 
         * @return builder
         * 
         */
        public Builder maxCapacityBreachBehavior(@Nullable Output<String> maxCapacityBreachBehavior) {
            $.maxCapacityBreachBehavior = maxCapacityBreachBehavior;
            return this;
        }

        /**
         * @param maxCapacityBreachBehavior The behavior that should be applied if the forecast capacity approaches or exceeds the maximum capacity. Valid values are `HonorMaxCapacity` and `IncreaseMaxCapacity`.
         * 
         * @return builder
         * 
         */
        public Builder maxCapacityBreachBehavior(String maxCapacityBreachBehavior) {
            return maxCapacityBreachBehavior(Output.of(maxCapacityBreachBehavior));
        }

        /**
         * @param maxCapacityBuffer Size of the capacity buffer to use when the forecast capacity is close to or exceeds the maximum capacity. The value is specified as a percentage relative to the forecast capacity. Required if the `max_capacity_breach_behavior` argument is set to `IncreaseMaxCapacity`, and cannot be used otherwise.
         * 
         * @return builder
         * 
         */
        public Builder maxCapacityBuffer(@Nullable Output<Integer> maxCapacityBuffer) {
            $.maxCapacityBuffer = maxCapacityBuffer;
            return this;
        }

        /**
         * @param maxCapacityBuffer Size of the capacity buffer to use when the forecast capacity is close to or exceeds the maximum capacity. The value is specified as a percentage relative to the forecast capacity. Required if the `max_capacity_breach_behavior` argument is set to `IncreaseMaxCapacity`, and cannot be used otherwise.
         * 
         * @return builder
         * 
         */
        public Builder maxCapacityBuffer(Integer maxCapacityBuffer) {
            return maxCapacityBuffer(Output.of(maxCapacityBuffer));
        }

        /**
         * @param metricSpecifications Metrics and target utilization to use for predictive scaling. See supported fields below.
         * 
         * @return builder
         * 
         */
        public Builder metricSpecifications(Output<List<PolicyPredictiveScalingPolicyConfigurationMetricSpecificationArgs>> metricSpecifications) {
            $.metricSpecifications = metricSpecifications;
            return this;
        }

        /**
         * @param metricSpecifications Metrics and target utilization to use for predictive scaling. See supported fields below.
         * 
         * @return builder
         * 
         */
        public Builder metricSpecifications(List<PolicyPredictiveScalingPolicyConfigurationMetricSpecificationArgs> metricSpecifications) {
            return metricSpecifications(Output.of(metricSpecifications));
        }

        /**
         * @param metricSpecifications Metrics and target utilization to use for predictive scaling. See supported fields below.
         * 
         * @return builder
         * 
         */
        public Builder metricSpecifications(PolicyPredictiveScalingPolicyConfigurationMetricSpecificationArgs... metricSpecifications) {
            return metricSpecifications(List.of(metricSpecifications));
        }

        /**
         * @param mode Predictive scaling mode. Valid values are `ForecastOnly` and `ForecastAndScale`.
         * 
         * @return builder
         * 
         */
        public Builder mode(@Nullable Output<String> mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param mode Predictive scaling mode. Valid values are `ForecastOnly` and `ForecastAndScale`.
         * 
         * @return builder
         * 
         */
        public Builder mode(String mode) {
            return mode(Output.of(mode));
        }

        /**
         * @param schedulingBufferTime Amount of time, in seconds, that the start time can be advanced.
         * 
         * @return builder
         * 
         */
        public Builder schedulingBufferTime(@Nullable Output<Integer> schedulingBufferTime) {
            $.schedulingBufferTime = schedulingBufferTime;
            return this;
        }

        /**
         * @param schedulingBufferTime Amount of time, in seconds, that the start time can be advanced.
         * 
         * @return builder
         * 
         */
        public Builder schedulingBufferTime(Integer schedulingBufferTime) {
            return schedulingBufferTime(Output.of(schedulingBufferTime));
        }

        public PolicyPredictiveScalingPolicyConfigurationArgs build() {
            if ($.metricSpecifications == null) {
                throw new MissingRequiredPropertyException("PolicyPredictiveScalingPolicyConfigurationArgs", "metricSpecifications");
            }
            return $;
        }
    }

}
