// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.appautoscaling.outputs;

import com.pulumi.aws.appautoscaling.outputs.PolicyPredictiveScalingPolicyConfigurationMetricSpecification;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class PolicyPredictiveScalingPolicyConfiguration {
    /**
     * @return The behavior that should be applied if the forecast capacity approaches or exceeds the maximum capacity. Valid values are `HonorMaxCapacity` and `IncreaseMaxCapacity`.
     * 
     */
    private @Nullable String maxCapacityBreachBehavior;
    /**
     * @return Size of the capacity buffer to use when the forecast capacity is close to or exceeds the maximum capacity. The value is specified as a percentage relative to the forecast capacity. Required if the `max_capacity_breach_behavior` argument is set to `IncreaseMaxCapacity`, and cannot be used otherwise.
     * 
     */
    private @Nullable Integer maxCapacityBuffer;
    /**
     * @return Metrics and target utilization to use for predictive scaling. See supported fields below.
     * 
     */
    private List<PolicyPredictiveScalingPolicyConfigurationMetricSpecification> metricSpecifications;
    /**
     * @return Predictive scaling mode. Valid values are `ForecastOnly` and `ForecastAndScale`.
     * 
     */
    private @Nullable String mode;
    /**
     * @return Amount of time, in seconds, that the start time can be advanced.
     * 
     */
    private @Nullable Integer schedulingBufferTime;

    private PolicyPredictiveScalingPolicyConfiguration() {}
    /**
     * @return The behavior that should be applied if the forecast capacity approaches or exceeds the maximum capacity. Valid values are `HonorMaxCapacity` and `IncreaseMaxCapacity`.
     * 
     */
    public Optional<String> maxCapacityBreachBehavior() {
        return Optional.ofNullable(this.maxCapacityBreachBehavior);
    }
    /**
     * @return Size of the capacity buffer to use when the forecast capacity is close to or exceeds the maximum capacity. The value is specified as a percentage relative to the forecast capacity. Required if the `max_capacity_breach_behavior` argument is set to `IncreaseMaxCapacity`, and cannot be used otherwise.
     * 
     */
    public Optional<Integer> maxCapacityBuffer() {
        return Optional.ofNullable(this.maxCapacityBuffer);
    }
    /**
     * @return Metrics and target utilization to use for predictive scaling. See supported fields below.
     * 
     */
    public List<PolicyPredictiveScalingPolicyConfigurationMetricSpecification> metricSpecifications() {
        return this.metricSpecifications;
    }
    /**
     * @return Predictive scaling mode. Valid values are `ForecastOnly` and `ForecastAndScale`.
     * 
     */
    public Optional<String> mode() {
        return Optional.ofNullable(this.mode);
    }
    /**
     * @return Amount of time, in seconds, that the start time can be advanced.
     * 
     */
    public Optional<Integer> schedulingBufferTime() {
        return Optional.ofNullable(this.schedulingBufferTime);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PolicyPredictiveScalingPolicyConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String maxCapacityBreachBehavior;
        private @Nullable Integer maxCapacityBuffer;
        private List<PolicyPredictiveScalingPolicyConfigurationMetricSpecification> metricSpecifications;
        private @Nullable String mode;
        private @Nullable Integer schedulingBufferTime;
        public Builder() {}
        public Builder(PolicyPredictiveScalingPolicyConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.maxCapacityBreachBehavior = defaults.maxCapacityBreachBehavior;
    	      this.maxCapacityBuffer = defaults.maxCapacityBuffer;
    	      this.metricSpecifications = defaults.metricSpecifications;
    	      this.mode = defaults.mode;
    	      this.schedulingBufferTime = defaults.schedulingBufferTime;
        }

        @CustomType.Setter
        public Builder maxCapacityBreachBehavior(@Nullable String maxCapacityBreachBehavior) {

            this.maxCapacityBreachBehavior = maxCapacityBreachBehavior;
            return this;
        }
        @CustomType.Setter
        public Builder maxCapacityBuffer(@Nullable Integer maxCapacityBuffer) {

            this.maxCapacityBuffer = maxCapacityBuffer;
            return this;
        }
        @CustomType.Setter
        public Builder metricSpecifications(List<PolicyPredictiveScalingPolicyConfigurationMetricSpecification> metricSpecifications) {
            if (metricSpecifications == null) {
              throw new MissingRequiredPropertyException("PolicyPredictiveScalingPolicyConfiguration", "metricSpecifications");
            }
            this.metricSpecifications = metricSpecifications;
            return this;
        }
        public Builder metricSpecifications(PolicyPredictiveScalingPolicyConfigurationMetricSpecification... metricSpecifications) {
            return metricSpecifications(List.of(metricSpecifications));
        }
        @CustomType.Setter
        public Builder mode(@Nullable String mode) {

            this.mode = mode;
            return this;
        }
        @CustomType.Setter
        public Builder schedulingBufferTime(@Nullable Integer schedulingBufferTime) {

            this.schedulingBufferTime = schedulingBufferTime;
            return this;
        }
        public PolicyPredictiveScalingPolicyConfiguration build() {
            final var _resultValue = new PolicyPredictiveScalingPolicyConfiguration();
            _resultValue.maxCapacityBreachBehavior = maxCapacityBreachBehavior;
            _resultValue.maxCapacityBuffer = maxCapacityBuffer;
            _resultValue.metricSpecifications = metricSpecifications;
            _resultValue.mode = mode;
            _resultValue.schedulingBufferTime = schedulingBufferTime;
            return _resultValue;
        }
    }
}
