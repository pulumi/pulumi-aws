// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.s3control.inputs;

import com.pulumi.aws.s3control.inputs.BucketLifecycleConfigurationRuleAbortIncompleteMultipartUploadArgs;
import com.pulumi.aws.s3control.inputs.BucketLifecycleConfigurationRuleExpirationArgs;
import com.pulumi.aws.s3control.inputs.BucketLifecycleConfigurationRuleFilterArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BucketLifecycleConfigurationRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final BucketLifecycleConfigurationRuleArgs Empty = new BucketLifecycleConfigurationRuleArgs();

    @Import(name="abortIncompleteMultipartUpload")
    private @Nullable Output<BucketLifecycleConfigurationRuleAbortIncompleteMultipartUploadArgs> abortIncompleteMultipartUpload;

    public Optional<Output<BucketLifecycleConfigurationRuleAbortIncompleteMultipartUploadArgs>> abortIncompleteMultipartUpload() {
        return Optional.ofNullable(this.abortIncompleteMultipartUpload);
    }

    @Import(name="expiration")
    private @Nullable Output<BucketLifecycleConfigurationRuleExpirationArgs> expiration;

    public Optional<Output<BucketLifecycleConfigurationRuleExpirationArgs>> expiration() {
        return Optional.ofNullable(this.expiration);
    }

    @Import(name="filter")
    private @Nullable Output<BucketLifecycleConfigurationRuleFilterArgs> filter;

    public Optional<Output<BucketLifecycleConfigurationRuleFilterArgs>> filter() {
        return Optional.ofNullable(this.filter);
    }

    @Import(name="id", required=true)
    private Output<String> id;

    public Output<String> id() {
        return this.id;
    }

    @Import(name="status")
    private @Nullable Output<String> status;

    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private BucketLifecycleConfigurationRuleArgs() {}

    private BucketLifecycleConfigurationRuleArgs(BucketLifecycleConfigurationRuleArgs $) {
        this.abortIncompleteMultipartUpload = $.abortIncompleteMultipartUpload;
        this.expiration = $.expiration;
        this.filter = $.filter;
        this.id = $.id;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BucketLifecycleConfigurationRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BucketLifecycleConfigurationRuleArgs $;

        public Builder() {
            $ = new BucketLifecycleConfigurationRuleArgs();
        }

        public Builder(BucketLifecycleConfigurationRuleArgs defaults) {
            $ = new BucketLifecycleConfigurationRuleArgs(Objects.requireNonNull(defaults));
        }

        public Builder abortIncompleteMultipartUpload(@Nullable Output<BucketLifecycleConfigurationRuleAbortIncompleteMultipartUploadArgs> abortIncompleteMultipartUpload) {
            $.abortIncompleteMultipartUpload = abortIncompleteMultipartUpload;
            return this;
        }

        public Builder abortIncompleteMultipartUpload(BucketLifecycleConfigurationRuleAbortIncompleteMultipartUploadArgs abortIncompleteMultipartUpload) {
            return abortIncompleteMultipartUpload(Output.of(abortIncompleteMultipartUpload));
        }

        public Builder expiration(@Nullable Output<BucketLifecycleConfigurationRuleExpirationArgs> expiration) {
            $.expiration = expiration;
            return this;
        }

        public Builder expiration(BucketLifecycleConfigurationRuleExpirationArgs expiration) {
            return expiration(Output.of(expiration));
        }

        public Builder filter(@Nullable Output<BucketLifecycleConfigurationRuleFilterArgs> filter) {
            $.filter = filter;
            return this;
        }

        public Builder filter(BucketLifecycleConfigurationRuleFilterArgs filter) {
            return filter(Output.of(filter));
        }

        public Builder id(Output<String> id) {
            $.id = id;
            return this;
        }

        public Builder id(String id) {
            return id(Output.of(id));
        }

        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        public Builder status(String status) {
            return status(Output.of(status));
        }

        public BucketLifecycleConfigurationRuleArgs build() {
            $.id = Objects.requireNonNull($.id, "expected parameter 'id' to be non-null");
            return $;
        }
    }

}
