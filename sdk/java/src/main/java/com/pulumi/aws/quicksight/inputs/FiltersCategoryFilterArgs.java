// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.inputs;

import com.pulumi.aws.quicksight.inputs.ColumnArgs;
import com.pulumi.aws.quicksight.inputs.FiltersCategoryFilterConfigurationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class FiltersCategoryFilterArgs extends com.pulumi.resources.ResourceArgs {

    public static final FiltersCategoryFilterArgs Empty = new FiltersCategoryFilterArgs();

    @Import(name="column", required=true)
    private Output<ColumnArgs> column;

    public Output<ColumnArgs> column() {
        return this.column;
    }

    @Import(name="configuration", required=true)
    private Output<FiltersCategoryFilterConfigurationArgs> configuration;

    public Output<FiltersCategoryFilterConfigurationArgs> configuration() {
        return this.configuration;
    }

    @Import(name="filterId", required=true)
    private Output<String> filterId;

    public Output<String> filterId() {
        return this.filterId;
    }

    private FiltersCategoryFilterArgs() {}

    private FiltersCategoryFilterArgs(FiltersCategoryFilterArgs $) {
        this.column = $.column;
        this.configuration = $.configuration;
        this.filterId = $.filterId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FiltersCategoryFilterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FiltersCategoryFilterArgs $;

        public Builder() {
            $ = new FiltersCategoryFilterArgs();
        }

        public Builder(FiltersCategoryFilterArgs defaults) {
            $ = new FiltersCategoryFilterArgs(Objects.requireNonNull(defaults));
        }

        public Builder column(Output<ColumnArgs> column) {
            $.column = column;
            return this;
        }

        public Builder column(ColumnArgs column) {
            return column(Output.of(column));
        }

        public Builder configuration(Output<FiltersCategoryFilterConfigurationArgs> configuration) {
            $.configuration = configuration;
            return this;
        }

        public Builder configuration(FiltersCategoryFilterConfigurationArgs configuration) {
            return configuration(Output.of(configuration));
        }

        public Builder filterId(Output<String> filterId) {
            $.filterId = filterId;
            return this;
        }

        public Builder filterId(String filterId) {
            return filterId(Output.of(filterId));
        }

        public FiltersCategoryFilterArgs build() {
            if ($.column == null) {
                throw new MissingRequiredPropertyException("FiltersCategoryFilterArgs", "column");
            }
            if ($.configuration == null) {
                throw new MissingRequiredPropertyException("FiltersCategoryFilterArgs", "configuration");
            }
            if ($.filterId == null) {
                throw new MissingRequiredPropertyException("FiltersCategoryFilterArgs", "filterId");
            }
            return $;
        }
    }

}
