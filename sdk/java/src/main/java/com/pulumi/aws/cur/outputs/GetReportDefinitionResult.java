// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.cur.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetReportDefinitionResult {
    /**
     * @return A list of additional artifacts.
     * 
     */
    private @Nullable List<String> additionalArtifacts;
    /**
     * @return A list of schema elements.
     * 
     */
    private @Nullable List<String> additionalSchemaElements;
    /**
     * @return Preferred format for report.
     * 
     */
    private @Nullable String compression;
    /**
     * @return Preferred compression format for report.
     * 
     */
    private @Nullable String format;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private @Nullable String id;
    /**
     * @return If true reports are updated after they have been finalized.
     * 
     */
    private @Nullable Boolean refreshClosedReports;
    private String reportName;
    /**
     * @return Overwrite the previous version of each report or to deliver the report in addition to the previous versions.
     * 
     */
    private @Nullable String reportVersioning;
    /**
     * @return Name of customer S3 bucket.
     * 
     */
    private @Nullable String s3Bucket;
    /**
     * @return Preferred report path prefix.
     * 
     */
    private @Nullable String s3Prefix;
    /**
     * @return Region of customer S3 bucket.
     * 
     */
    private @Nullable String s3Region;
    /**
     * @return Frequency on which report data are measured and displayed.
     * 
     */
    private @Nullable String timeUnit;

    private GetReportDefinitionResult() {}
    /**
     * @return A list of additional artifacts.
     * 
     */
    public List<String> additionalArtifacts() {
        return this.additionalArtifacts == null ? List.of() : this.additionalArtifacts;
    }
    /**
     * @return A list of schema elements.
     * 
     */
    public List<String> additionalSchemaElements() {
        return this.additionalSchemaElements == null ? List.of() : this.additionalSchemaElements;
    }
    /**
     * @return Preferred format for report.
     * 
     */
    public Optional<String> compression() {
        return Optional.ofNullable(this.compression);
    }
    /**
     * @return Preferred compression format for report.
     * 
     */
    public Optional<String> format() {
        return Optional.ofNullable(this.format);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return If true reports are updated after they have been finalized.
     * 
     */
    public Optional<Boolean> refreshClosedReports() {
        return Optional.ofNullable(this.refreshClosedReports);
    }
    public String reportName() {
        return this.reportName;
    }
    /**
     * @return Overwrite the previous version of each report or to deliver the report in addition to the previous versions.
     * 
     */
    public Optional<String> reportVersioning() {
        return Optional.ofNullable(this.reportVersioning);
    }
    /**
     * @return Name of customer S3 bucket.
     * 
     */
    public Optional<String> s3Bucket() {
        return Optional.ofNullable(this.s3Bucket);
    }
    /**
     * @return Preferred report path prefix.
     * 
     */
    public Optional<String> s3Prefix() {
        return Optional.ofNullable(this.s3Prefix);
    }
    /**
     * @return Region of customer S3 bucket.
     * 
     */
    public Optional<String> s3Region() {
        return Optional.ofNullable(this.s3Region);
    }
    /**
     * @return Frequency on which report data are measured and displayed.
     * 
     */
    public Optional<String> timeUnit() {
        return Optional.ofNullable(this.timeUnit);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetReportDefinitionResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> additionalArtifacts;
        private @Nullable List<String> additionalSchemaElements;
        private @Nullable String compression;
        private @Nullable String format;
        private @Nullable String id;
        private @Nullable Boolean refreshClosedReports;
        private String reportName;
        private @Nullable String reportVersioning;
        private @Nullable String s3Bucket;
        private @Nullable String s3Prefix;
        private @Nullable String s3Region;
        private @Nullable String timeUnit;
        public Builder() {}
        public Builder(GetReportDefinitionResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.additionalArtifacts = defaults.additionalArtifacts;
    	      this.additionalSchemaElements = defaults.additionalSchemaElements;
    	      this.compression = defaults.compression;
    	      this.format = defaults.format;
    	      this.id = defaults.id;
    	      this.refreshClosedReports = defaults.refreshClosedReports;
    	      this.reportName = defaults.reportName;
    	      this.reportVersioning = defaults.reportVersioning;
    	      this.s3Bucket = defaults.s3Bucket;
    	      this.s3Prefix = defaults.s3Prefix;
    	      this.s3Region = defaults.s3Region;
    	      this.timeUnit = defaults.timeUnit;
        }

        @CustomType.Setter
        public Builder additionalArtifacts(@Nullable List<String> additionalArtifacts) {
            this.additionalArtifacts = additionalArtifacts;
            return this;
        }
        public Builder additionalArtifacts(String... additionalArtifacts) {
            return additionalArtifacts(List.of(additionalArtifacts));
        }
        @CustomType.Setter
        public Builder additionalSchemaElements(@Nullable List<String> additionalSchemaElements) {
            this.additionalSchemaElements = additionalSchemaElements;
            return this;
        }
        public Builder additionalSchemaElements(String... additionalSchemaElements) {
            return additionalSchemaElements(List.of(additionalSchemaElements));
        }
        @CustomType.Setter
        public Builder compression(@Nullable String compression) {
            this.compression = compression;
            return this;
        }
        @CustomType.Setter
        public Builder format(@Nullable String format) {
            this.format = format;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder refreshClosedReports(@Nullable Boolean refreshClosedReports) {
            this.refreshClosedReports = refreshClosedReports;
            return this;
        }
        @CustomType.Setter
        public Builder reportName(String reportName) {
            this.reportName = Objects.requireNonNull(reportName);
            return this;
        }
        @CustomType.Setter
        public Builder reportVersioning(@Nullable String reportVersioning) {
            this.reportVersioning = reportVersioning;
            return this;
        }
        @CustomType.Setter
        public Builder s3Bucket(@Nullable String s3Bucket) {
            this.s3Bucket = s3Bucket;
            return this;
        }
        @CustomType.Setter
        public Builder s3Prefix(@Nullable String s3Prefix) {
            this.s3Prefix = s3Prefix;
            return this;
        }
        @CustomType.Setter
        public Builder s3Region(@Nullable String s3Region) {
            this.s3Region = s3Region;
            return this;
        }
        @CustomType.Setter
        public Builder timeUnit(@Nullable String timeUnit) {
            this.timeUnit = timeUnit;
            return this;
        }
        public GetReportDefinitionResult build() {
            final var o = new GetReportDefinitionResult();
            o.additionalArtifacts = additionalArtifacts;
            o.additionalSchemaElements = additionalSchemaElements;
            o.compression = compression;
            o.format = format;
            o.id = id;
            o.refreshClosedReports = refreshClosedReports;
            o.reportName = reportName;
            o.reportVersioning = reportVersioning;
            o.s3Bucket = s3Bucket;
            o.s3Prefix = s3Prefix;
            o.s3Region = s3Region;
            o.timeUnit = timeUnit;
            return o;
        }
    }
}
