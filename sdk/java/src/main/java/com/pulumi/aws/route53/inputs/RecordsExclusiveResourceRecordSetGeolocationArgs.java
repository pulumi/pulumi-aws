// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.route53.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RecordsExclusiveResourceRecordSetGeolocationArgs extends com.pulumi.resources.ResourceArgs {

    public static final RecordsExclusiveResourceRecordSetGeolocationArgs Empty = new RecordsExclusiveResourceRecordSetGeolocationArgs();

    @Import(name="continentCode")
    private @Nullable Output<String> continentCode;

    public Optional<Output<String>> continentCode() {
        return Optional.ofNullable(this.continentCode);
    }

    @Import(name="countryCode")
    private @Nullable Output<String> countryCode;

    public Optional<Output<String>> countryCode() {
        return Optional.ofNullable(this.countryCode);
    }

    @Import(name="subdivisionCode")
    private @Nullable Output<String> subdivisionCode;

    public Optional<Output<String>> subdivisionCode() {
        return Optional.ofNullable(this.subdivisionCode);
    }

    private RecordsExclusiveResourceRecordSetGeolocationArgs() {}

    private RecordsExclusiveResourceRecordSetGeolocationArgs(RecordsExclusiveResourceRecordSetGeolocationArgs $) {
        this.continentCode = $.continentCode;
        this.countryCode = $.countryCode;
        this.subdivisionCode = $.subdivisionCode;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RecordsExclusiveResourceRecordSetGeolocationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RecordsExclusiveResourceRecordSetGeolocationArgs $;

        public Builder() {
            $ = new RecordsExclusiveResourceRecordSetGeolocationArgs();
        }

        public Builder(RecordsExclusiveResourceRecordSetGeolocationArgs defaults) {
            $ = new RecordsExclusiveResourceRecordSetGeolocationArgs(Objects.requireNonNull(defaults));
        }

        public Builder continentCode(@Nullable Output<String> continentCode) {
            $.continentCode = continentCode;
            return this;
        }

        public Builder continentCode(String continentCode) {
            return continentCode(Output.of(continentCode));
        }

        public Builder countryCode(@Nullable Output<String> countryCode) {
            $.countryCode = countryCode;
            return this;
        }

        public Builder countryCode(String countryCode) {
            return countryCode(Output.of(countryCode));
        }

        public Builder subdivisionCode(@Nullable Output<String> subdivisionCode) {
            $.subdivisionCode = subdivisionCode;
            return this;
        }

        public Builder subdivisionCode(String subdivisionCode) {
            return subdivisionCode(Output.of(subdivisionCode));
        }

        public RecordsExclusiveResourceRecordSetGeolocationArgs build() {
            return $;
        }
    }

}
