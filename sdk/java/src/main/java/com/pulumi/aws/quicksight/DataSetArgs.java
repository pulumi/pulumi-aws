// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight;

import com.pulumi.aws.quicksight.inputs.DataSetColumnGroupArgs;
import com.pulumi.aws.quicksight.inputs.DataSetColumnLevelPermissionRuleArgs;
import com.pulumi.aws.quicksight.inputs.DataSetDataSetUsageConfigurationArgs;
import com.pulumi.aws.quicksight.inputs.DataSetFieldFolderArgs;
import com.pulumi.aws.quicksight.inputs.DataSetLogicalTableMapArgs;
import com.pulumi.aws.quicksight.inputs.DataSetPermissionArgs;
import com.pulumi.aws.quicksight.inputs.DataSetPhysicalTableMapArgs;
import com.pulumi.aws.quicksight.inputs.DataSetRefreshPropertiesArgs;
import com.pulumi.aws.quicksight.inputs.DataSetRowLevelPermissionDataSetArgs;
import com.pulumi.aws.quicksight.inputs.DataSetRowLevelPermissionTagConfigurationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DataSetArgs extends com.pulumi.resources.ResourceArgs {

    public static final DataSetArgs Empty = new DataSetArgs();

    /**
     * AWS account ID.
     * 
     */
    @Import(name="awsAccountId")
    private @Nullable Output<String> awsAccountId;

    /**
     * @return AWS account ID.
     * 
     */
    public Optional<Output<String>> awsAccountId() {
        return Optional.ofNullable(this.awsAccountId);
    }

    /**
     * Groupings of columns that work together in certain Amazon QuickSight features. Currently, only geospatial hierarchy is supported. See column_groups.
     * 
     */
    @Import(name="columnGroups")
    private @Nullable Output<List<DataSetColumnGroupArgs>> columnGroups;

    /**
     * @return Groupings of columns that work together in certain Amazon QuickSight features. Currently, only geospatial hierarchy is supported. See column_groups.
     * 
     */
    public Optional<Output<List<DataSetColumnGroupArgs>>> columnGroups() {
        return Optional.ofNullable(this.columnGroups);
    }

    /**
     * A set of 1 or more definitions of a [ColumnLevelPermissionRule](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ColumnLevelPermissionRule.html). See column_level_permission_rules.
     * 
     */
    @Import(name="columnLevelPermissionRules")
    private @Nullable Output<List<DataSetColumnLevelPermissionRuleArgs>> columnLevelPermissionRules;

    /**
     * @return A set of 1 or more definitions of a [ColumnLevelPermissionRule](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ColumnLevelPermissionRule.html). See column_level_permission_rules.
     * 
     */
    public Optional<Output<List<DataSetColumnLevelPermissionRuleArgs>>> columnLevelPermissionRules() {
        return Optional.ofNullable(this.columnLevelPermissionRules);
    }

    /**
     * Identifier for the data set.
     * 
     */
    @Import(name="dataSetId", required=true)
    private Output<String> dataSetId;

    /**
     * @return Identifier for the data set.
     * 
     */
    public Output<String> dataSetId() {
        return this.dataSetId;
    }

    /**
     * The usage configuration to apply to child datasets that reference this dataset as a source. See data_set_usage_configuration.
     * 
     */
    @Import(name="dataSetUsageConfiguration")
    private @Nullable Output<DataSetDataSetUsageConfigurationArgs> dataSetUsageConfiguration;

    /**
     * @return The usage configuration to apply to child datasets that reference this dataset as a source. See data_set_usage_configuration.
     * 
     */
    public Optional<Output<DataSetDataSetUsageConfigurationArgs>> dataSetUsageConfiguration() {
        return Optional.ofNullable(this.dataSetUsageConfiguration);
    }

    /**
     * The folder that contains fields and nested subfolders for your dataset. See field_folders.
     * 
     */
    @Import(name="fieldFolders")
    private @Nullable Output<List<DataSetFieldFolderArgs>> fieldFolders;

    /**
     * @return The folder that contains fields and nested subfolders for your dataset. See field_folders.
     * 
     */
    public Optional<Output<List<DataSetFieldFolderArgs>>> fieldFolders() {
        return Optional.ofNullable(this.fieldFolders);
    }

    /**
     * Indicates whether you want to import the data into SPICE. Valid values are `SPICE` and `DIRECT_QUERY`.
     * 
     */
    @Import(name="importMode", required=true)
    private Output<String> importMode;

    /**
     * @return Indicates whether you want to import the data into SPICE. Valid values are `SPICE` and `DIRECT_QUERY`.
     * 
     */
    public Output<String> importMode() {
        return this.importMode;
    }

    /**
     * Configures the combination and transformation of the data from the physical tables. Maximum of 1 entry. See logical_table_map.
     * 
     */
    @Import(name="logicalTableMaps")
    private @Nullable Output<List<DataSetLogicalTableMapArgs>> logicalTableMaps;

    /**
     * @return Configures the combination and transformation of the data from the physical tables. Maximum of 1 entry. See logical_table_map.
     * 
     */
    public Optional<Output<List<DataSetLogicalTableMapArgs>>> logicalTableMaps() {
        return Optional.ofNullable(this.logicalTableMaps);
    }

    /**
     * Display name for the dataset.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Display name for the dataset.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * A set of resource permissions on the data source. Maximum of 64 items. See permissions.
     * 
     */
    @Import(name="permissions")
    private @Nullable Output<List<DataSetPermissionArgs>> permissions;

    /**
     * @return A set of resource permissions on the data source. Maximum of 64 items. See permissions.
     * 
     */
    public Optional<Output<List<DataSetPermissionArgs>>> permissions() {
        return Optional.ofNullable(this.permissions);
    }

    /**
     * Declares the physical tables that are available in the underlying data sources. See physical_table_map.
     * 
     * The following arguments are optional:
     * 
     */
    @Import(name="physicalTableMaps")
    private @Nullable Output<List<DataSetPhysicalTableMapArgs>> physicalTableMaps;

    /**
     * @return Declares the physical tables that are available in the underlying data sources. See physical_table_map.
     * 
     * The following arguments are optional:
     * 
     */
    public Optional<Output<List<DataSetPhysicalTableMapArgs>>> physicalTableMaps() {
        return Optional.ofNullable(this.physicalTableMaps);
    }

    /**
     * The refresh properties for the data set. **NOTE**: Only valid when `import_mode` is set to `SPICE`. See refresh_properties.
     * 
     */
    @Import(name="refreshProperties")
    private @Nullable Output<DataSetRefreshPropertiesArgs> refreshProperties;

    /**
     * @return The refresh properties for the data set. **NOTE**: Only valid when `import_mode` is set to `SPICE`. See refresh_properties.
     * 
     */
    public Optional<Output<DataSetRefreshPropertiesArgs>> refreshProperties() {
        return Optional.ofNullable(this.refreshProperties);
    }

    /**
     * The row-level security configuration for the data that you want to create. See row_level_permission_data_set.
     * 
     */
    @Import(name="rowLevelPermissionDataSet")
    private @Nullable Output<DataSetRowLevelPermissionDataSetArgs> rowLevelPermissionDataSet;

    /**
     * @return The row-level security configuration for the data that you want to create. See row_level_permission_data_set.
     * 
     */
    public Optional<Output<DataSetRowLevelPermissionDataSetArgs>> rowLevelPermissionDataSet() {
        return Optional.ofNullable(this.rowLevelPermissionDataSet);
    }

    /**
     * The configuration of tags on a dataset to set row-level security. Row-level security tags are currently supported for anonymous embedding only. See row_level_permission_tag_configuration.
     * 
     */
    @Import(name="rowLevelPermissionTagConfiguration")
    private @Nullable Output<DataSetRowLevelPermissionTagConfigurationArgs> rowLevelPermissionTagConfiguration;

    /**
     * @return The configuration of tags on a dataset to set row-level security. Row-level security tags are currently supported for anonymous embedding only. See row_level_permission_tag_configuration.
     * 
     */
    public Optional<Output<DataSetRowLevelPermissionTagConfigurationArgs>> rowLevelPermissionTagConfiguration() {
        return Optional.ofNullable(this.rowLevelPermissionTagConfiguration);
    }

    /**
     * Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private DataSetArgs() {}

    private DataSetArgs(DataSetArgs $) {
        this.awsAccountId = $.awsAccountId;
        this.columnGroups = $.columnGroups;
        this.columnLevelPermissionRules = $.columnLevelPermissionRules;
        this.dataSetId = $.dataSetId;
        this.dataSetUsageConfiguration = $.dataSetUsageConfiguration;
        this.fieldFolders = $.fieldFolders;
        this.importMode = $.importMode;
        this.logicalTableMaps = $.logicalTableMaps;
        this.name = $.name;
        this.permissions = $.permissions;
        this.physicalTableMaps = $.physicalTableMaps;
        this.refreshProperties = $.refreshProperties;
        this.rowLevelPermissionDataSet = $.rowLevelPermissionDataSet;
        this.rowLevelPermissionTagConfiguration = $.rowLevelPermissionTagConfiguration;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DataSetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DataSetArgs $;

        public Builder() {
            $ = new DataSetArgs();
        }

        public Builder(DataSetArgs defaults) {
            $ = new DataSetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param awsAccountId AWS account ID.
         * 
         * @return builder
         * 
         */
        public Builder awsAccountId(@Nullable Output<String> awsAccountId) {
            $.awsAccountId = awsAccountId;
            return this;
        }

        /**
         * @param awsAccountId AWS account ID.
         * 
         * @return builder
         * 
         */
        public Builder awsAccountId(String awsAccountId) {
            return awsAccountId(Output.of(awsAccountId));
        }

        /**
         * @param columnGroups Groupings of columns that work together in certain Amazon QuickSight features. Currently, only geospatial hierarchy is supported. See column_groups.
         * 
         * @return builder
         * 
         */
        public Builder columnGroups(@Nullable Output<List<DataSetColumnGroupArgs>> columnGroups) {
            $.columnGroups = columnGroups;
            return this;
        }

        /**
         * @param columnGroups Groupings of columns that work together in certain Amazon QuickSight features. Currently, only geospatial hierarchy is supported. See column_groups.
         * 
         * @return builder
         * 
         */
        public Builder columnGroups(List<DataSetColumnGroupArgs> columnGroups) {
            return columnGroups(Output.of(columnGroups));
        }

        /**
         * @param columnGroups Groupings of columns that work together in certain Amazon QuickSight features. Currently, only geospatial hierarchy is supported. See column_groups.
         * 
         * @return builder
         * 
         */
        public Builder columnGroups(DataSetColumnGroupArgs... columnGroups) {
            return columnGroups(List.of(columnGroups));
        }

        /**
         * @param columnLevelPermissionRules A set of 1 or more definitions of a [ColumnLevelPermissionRule](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ColumnLevelPermissionRule.html). See column_level_permission_rules.
         * 
         * @return builder
         * 
         */
        public Builder columnLevelPermissionRules(@Nullable Output<List<DataSetColumnLevelPermissionRuleArgs>> columnLevelPermissionRules) {
            $.columnLevelPermissionRules = columnLevelPermissionRules;
            return this;
        }

        /**
         * @param columnLevelPermissionRules A set of 1 or more definitions of a [ColumnLevelPermissionRule](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ColumnLevelPermissionRule.html). See column_level_permission_rules.
         * 
         * @return builder
         * 
         */
        public Builder columnLevelPermissionRules(List<DataSetColumnLevelPermissionRuleArgs> columnLevelPermissionRules) {
            return columnLevelPermissionRules(Output.of(columnLevelPermissionRules));
        }

        /**
         * @param columnLevelPermissionRules A set of 1 or more definitions of a [ColumnLevelPermissionRule](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ColumnLevelPermissionRule.html). See column_level_permission_rules.
         * 
         * @return builder
         * 
         */
        public Builder columnLevelPermissionRules(DataSetColumnLevelPermissionRuleArgs... columnLevelPermissionRules) {
            return columnLevelPermissionRules(List.of(columnLevelPermissionRules));
        }

        /**
         * @param dataSetId Identifier for the data set.
         * 
         * @return builder
         * 
         */
        public Builder dataSetId(Output<String> dataSetId) {
            $.dataSetId = dataSetId;
            return this;
        }

        /**
         * @param dataSetId Identifier for the data set.
         * 
         * @return builder
         * 
         */
        public Builder dataSetId(String dataSetId) {
            return dataSetId(Output.of(dataSetId));
        }

        /**
         * @param dataSetUsageConfiguration The usage configuration to apply to child datasets that reference this dataset as a source. See data_set_usage_configuration.
         * 
         * @return builder
         * 
         */
        public Builder dataSetUsageConfiguration(@Nullable Output<DataSetDataSetUsageConfigurationArgs> dataSetUsageConfiguration) {
            $.dataSetUsageConfiguration = dataSetUsageConfiguration;
            return this;
        }

        /**
         * @param dataSetUsageConfiguration The usage configuration to apply to child datasets that reference this dataset as a source. See data_set_usage_configuration.
         * 
         * @return builder
         * 
         */
        public Builder dataSetUsageConfiguration(DataSetDataSetUsageConfigurationArgs dataSetUsageConfiguration) {
            return dataSetUsageConfiguration(Output.of(dataSetUsageConfiguration));
        }

        /**
         * @param fieldFolders The folder that contains fields and nested subfolders for your dataset. See field_folders.
         * 
         * @return builder
         * 
         */
        public Builder fieldFolders(@Nullable Output<List<DataSetFieldFolderArgs>> fieldFolders) {
            $.fieldFolders = fieldFolders;
            return this;
        }

        /**
         * @param fieldFolders The folder that contains fields and nested subfolders for your dataset. See field_folders.
         * 
         * @return builder
         * 
         */
        public Builder fieldFolders(List<DataSetFieldFolderArgs> fieldFolders) {
            return fieldFolders(Output.of(fieldFolders));
        }

        /**
         * @param fieldFolders The folder that contains fields and nested subfolders for your dataset. See field_folders.
         * 
         * @return builder
         * 
         */
        public Builder fieldFolders(DataSetFieldFolderArgs... fieldFolders) {
            return fieldFolders(List.of(fieldFolders));
        }

        /**
         * @param importMode Indicates whether you want to import the data into SPICE. Valid values are `SPICE` and `DIRECT_QUERY`.
         * 
         * @return builder
         * 
         */
        public Builder importMode(Output<String> importMode) {
            $.importMode = importMode;
            return this;
        }

        /**
         * @param importMode Indicates whether you want to import the data into SPICE. Valid values are `SPICE` and `DIRECT_QUERY`.
         * 
         * @return builder
         * 
         */
        public Builder importMode(String importMode) {
            return importMode(Output.of(importMode));
        }

        /**
         * @param logicalTableMaps Configures the combination and transformation of the data from the physical tables. Maximum of 1 entry. See logical_table_map.
         * 
         * @return builder
         * 
         */
        public Builder logicalTableMaps(@Nullable Output<List<DataSetLogicalTableMapArgs>> logicalTableMaps) {
            $.logicalTableMaps = logicalTableMaps;
            return this;
        }

        /**
         * @param logicalTableMaps Configures the combination and transformation of the data from the physical tables. Maximum of 1 entry. See logical_table_map.
         * 
         * @return builder
         * 
         */
        public Builder logicalTableMaps(List<DataSetLogicalTableMapArgs> logicalTableMaps) {
            return logicalTableMaps(Output.of(logicalTableMaps));
        }

        /**
         * @param logicalTableMaps Configures the combination and transformation of the data from the physical tables. Maximum of 1 entry. See logical_table_map.
         * 
         * @return builder
         * 
         */
        public Builder logicalTableMaps(DataSetLogicalTableMapArgs... logicalTableMaps) {
            return logicalTableMaps(List.of(logicalTableMaps));
        }

        /**
         * @param name Display name for the dataset.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Display name for the dataset.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param permissions A set of resource permissions on the data source. Maximum of 64 items. See permissions.
         * 
         * @return builder
         * 
         */
        public Builder permissions(@Nullable Output<List<DataSetPermissionArgs>> permissions) {
            $.permissions = permissions;
            return this;
        }

        /**
         * @param permissions A set of resource permissions on the data source. Maximum of 64 items. See permissions.
         * 
         * @return builder
         * 
         */
        public Builder permissions(List<DataSetPermissionArgs> permissions) {
            return permissions(Output.of(permissions));
        }

        /**
         * @param permissions A set of resource permissions on the data source. Maximum of 64 items. See permissions.
         * 
         * @return builder
         * 
         */
        public Builder permissions(DataSetPermissionArgs... permissions) {
            return permissions(List.of(permissions));
        }

        /**
         * @param physicalTableMaps Declares the physical tables that are available in the underlying data sources. See physical_table_map.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder physicalTableMaps(@Nullable Output<List<DataSetPhysicalTableMapArgs>> physicalTableMaps) {
            $.physicalTableMaps = physicalTableMaps;
            return this;
        }

        /**
         * @param physicalTableMaps Declares the physical tables that are available in the underlying data sources. See physical_table_map.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder physicalTableMaps(List<DataSetPhysicalTableMapArgs> physicalTableMaps) {
            return physicalTableMaps(Output.of(physicalTableMaps));
        }

        /**
         * @param physicalTableMaps Declares the physical tables that are available in the underlying data sources. See physical_table_map.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder physicalTableMaps(DataSetPhysicalTableMapArgs... physicalTableMaps) {
            return physicalTableMaps(List.of(physicalTableMaps));
        }

        /**
         * @param refreshProperties The refresh properties for the data set. **NOTE**: Only valid when `import_mode` is set to `SPICE`. See refresh_properties.
         * 
         * @return builder
         * 
         */
        public Builder refreshProperties(@Nullable Output<DataSetRefreshPropertiesArgs> refreshProperties) {
            $.refreshProperties = refreshProperties;
            return this;
        }

        /**
         * @param refreshProperties The refresh properties for the data set. **NOTE**: Only valid when `import_mode` is set to `SPICE`. See refresh_properties.
         * 
         * @return builder
         * 
         */
        public Builder refreshProperties(DataSetRefreshPropertiesArgs refreshProperties) {
            return refreshProperties(Output.of(refreshProperties));
        }

        /**
         * @param rowLevelPermissionDataSet The row-level security configuration for the data that you want to create. See row_level_permission_data_set.
         * 
         * @return builder
         * 
         */
        public Builder rowLevelPermissionDataSet(@Nullable Output<DataSetRowLevelPermissionDataSetArgs> rowLevelPermissionDataSet) {
            $.rowLevelPermissionDataSet = rowLevelPermissionDataSet;
            return this;
        }

        /**
         * @param rowLevelPermissionDataSet The row-level security configuration for the data that you want to create. See row_level_permission_data_set.
         * 
         * @return builder
         * 
         */
        public Builder rowLevelPermissionDataSet(DataSetRowLevelPermissionDataSetArgs rowLevelPermissionDataSet) {
            return rowLevelPermissionDataSet(Output.of(rowLevelPermissionDataSet));
        }

        /**
         * @param rowLevelPermissionTagConfiguration The configuration of tags on a dataset to set row-level security. Row-level security tags are currently supported for anonymous embedding only. See row_level_permission_tag_configuration.
         * 
         * @return builder
         * 
         */
        public Builder rowLevelPermissionTagConfiguration(@Nullable Output<DataSetRowLevelPermissionTagConfigurationArgs> rowLevelPermissionTagConfiguration) {
            $.rowLevelPermissionTagConfiguration = rowLevelPermissionTagConfiguration;
            return this;
        }

        /**
         * @param rowLevelPermissionTagConfiguration The configuration of tags on a dataset to set row-level security. Row-level security tags are currently supported for anonymous embedding only. See row_level_permission_tag_configuration.
         * 
         * @return builder
         * 
         */
        public Builder rowLevelPermissionTagConfiguration(DataSetRowLevelPermissionTagConfigurationArgs rowLevelPermissionTagConfiguration) {
            return rowLevelPermissionTagConfiguration(Output.of(rowLevelPermissionTagConfiguration));
        }

        /**
         * @param tags Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public DataSetArgs build() {
            if ($.dataSetId == null) {
                throw new MissingRequiredPropertyException("DataSetArgs", "dataSetId");
            }
            if ($.importMode == null) {
                throw new MissingRequiredPropertyException("DataSetArgs", "importMode");
            }
            return $;
        }
    }

}
