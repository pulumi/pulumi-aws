// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ssm.inputs;

import com.pulumi.aws.ssm.enums.ParameterType;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ParameterState extends com.pulumi.resources.ResourceArgs {

    public static final ParameterState Empty = new ParameterState();

    @Import(name="allowedPattern")
    private @Nullable Output<String> allowedPattern;

    public Optional<Output<String>> allowedPattern() {
        return Optional.ofNullable(this.allowedPattern);
    }

    @Import(name="arn")
    private @Nullable Output<String> arn;

    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    @Import(name="dataType")
    private @Nullable Output<String> dataType;

    public Optional<Output<String>> dataType() {
        return Optional.ofNullable(this.dataType);
    }

    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="insecureValue")
    private @Nullable Output<String> insecureValue;

    public Optional<Output<String>> insecureValue() {
        return Optional.ofNullable(this.insecureValue);
    }

    @Import(name="keyId")
    private @Nullable Output<String> keyId;

    public Optional<Output<String>> keyId() {
        return Optional.ofNullable(this.keyId);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="overwrite")
    private @Nullable Output<Boolean> overwrite;

    public Optional<Output<Boolean>> overwrite() {
        return Optional.ofNullable(this.overwrite);
    }

    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    @Import(name="tier")
    private @Nullable Output<String> tier;

    public Optional<Output<String>> tier() {
        return Optional.ofNullable(this.tier);
    }

    @Import(name="type")
    private @Nullable Output<Either<String,ParameterType>> type;

    public Optional<Output<Either<String,ParameterType>>> type() {
        return Optional.ofNullable(this.type);
    }

    @Import(name="value")
    private @Nullable Output<String> value;

    public Optional<Output<String>> value() {
        return Optional.ofNullable(this.value);
    }

    @Import(name="version")
    private @Nullable Output<Integer> version;

    public Optional<Output<Integer>> version() {
        return Optional.ofNullable(this.version);
    }

    private ParameterState() {}

    private ParameterState(ParameterState $) {
        this.allowedPattern = $.allowedPattern;
        this.arn = $.arn;
        this.dataType = $.dataType;
        this.description = $.description;
        this.insecureValue = $.insecureValue;
        this.keyId = $.keyId;
        this.name = $.name;
        this.overwrite = $.overwrite;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
        this.tier = $.tier;
        this.type = $.type;
        this.value = $.value;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ParameterState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ParameterState $;

        public Builder() {
            $ = new ParameterState();
        }

        public Builder(ParameterState defaults) {
            $ = new ParameterState(Objects.requireNonNull(defaults));
        }

        public Builder allowedPattern(@Nullable Output<String> allowedPattern) {
            $.allowedPattern = allowedPattern;
            return this;
        }

        public Builder allowedPattern(String allowedPattern) {
            return allowedPattern(Output.of(allowedPattern));
        }

        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        public Builder dataType(@Nullable Output<String> dataType) {
            $.dataType = dataType;
            return this;
        }

        public Builder dataType(String dataType) {
            return dataType(Output.of(dataType));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder insecureValue(@Nullable Output<String> insecureValue) {
            $.insecureValue = insecureValue;
            return this;
        }

        public Builder insecureValue(String insecureValue) {
            return insecureValue(Output.of(insecureValue));
        }

        public Builder keyId(@Nullable Output<String> keyId) {
            $.keyId = keyId;
            return this;
        }

        public Builder keyId(String keyId) {
            return keyId(Output.of(keyId));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder overwrite(@Nullable Output<Boolean> overwrite) {
            $.overwrite = overwrite;
            return this;
        }

        public Builder overwrite(Boolean overwrite) {
            return overwrite(Output.of(overwrite));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        public Builder tier(@Nullable Output<String> tier) {
            $.tier = tier;
            return this;
        }

        public Builder tier(String tier) {
            return tier(Output.of(tier));
        }

        public Builder type(@Nullable Output<Either<String,ParameterType>> type) {
            $.type = type;
            return this;
        }

        public Builder type(Either<String,ParameterType> type) {
            return type(Output.of(type));
        }

        public Builder type(String type) {
            return type(Either.ofLeft(type));
        }

        public Builder type(ParameterType type) {
            return type(Either.ofRight(type));
        }

        public Builder value(@Nullable Output<String> value) {
            $.value = value;
            return this;
        }

        public Builder value(String value) {
            return value(Output.of(value));
        }

        public Builder version(@Nullable Output<Integer> version) {
            $.version = version;
            return this;
        }

        public Builder version(Integer version) {
            return version(Output.of(version));
        }

        public ParameterState build() {
            return $;
        }
    }

}
