// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.customerprofiles.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DomainRuleBasedMatchingConflictResolutionArgs extends com.pulumi.resources.ResourceArgs {

    public static final DomainRuleBasedMatchingConflictResolutionArgs Empty = new DomainRuleBasedMatchingConflictResolutionArgs();

    /**
     * How the auto-merging process should resolve conflicts between different profiles. Valid values are `RECENCY` and `SOURCE`
     * 
     */
    @Import(name="conflictResolvingModel", required=true)
    private Output<String> conflictResolvingModel;

    /**
     * @return How the auto-merging process should resolve conflicts between different profiles. Valid values are `RECENCY` and `SOURCE`
     * 
     */
    public Output<String> conflictResolvingModel() {
        return this.conflictResolvingModel;
    }

    /**
     * The `ObjectType` name that is used to resolve profile merging conflicts when choosing `SOURCE` as the `ConflictResolvingModel`.
     * 
     */
    @Import(name="sourceName")
    private @Nullable Output<String> sourceName;

    /**
     * @return The `ObjectType` name that is used to resolve profile merging conflicts when choosing `SOURCE` as the `ConflictResolvingModel`.
     * 
     */
    public Optional<Output<String>> sourceName() {
        return Optional.ofNullable(this.sourceName);
    }

    private DomainRuleBasedMatchingConflictResolutionArgs() {}

    private DomainRuleBasedMatchingConflictResolutionArgs(DomainRuleBasedMatchingConflictResolutionArgs $) {
        this.conflictResolvingModel = $.conflictResolvingModel;
        this.sourceName = $.sourceName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DomainRuleBasedMatchingConflictResolutionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DomainRuleBasedMatchingConflictResolutionArgs $;

        public Builder() {
            $ = new DomainRuleBasedMatchingConflictResolutionArgs();
        }

        public Builder(DomainRuleBasedMatchingConflictResolutionArgs defaults) {
            $ = new DomainRuleBasedMatchingConflictResolutionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param conflictResolvingModel How the auto-merging process should resolve conflicts between different profiles. Valid values are `RECENCY` and `SOURCE`
         * 
         * @return builder
         * 
         */
        public Builder conflictResolvingModel(Output<String> conflictResolvingModel) {
            $.conflictResolvingModel = conflictResolvingModel;
            return this;
        }

        /**
         * @param conflictResolvingModel How the auto-merging process should resolve conflicts between different profiles. Valid values are `RECENCY` and `SOURCE`
         * 
         * @return builder
         * 
         */
        public Builder conflictResolvingModel(String conflictResolvingModel) {
            return conflictResolvingModel(Output.of(conflictResolvingModel));
        }

        /**
         * @param sourceName The `ObjectType` name that is used to resolve profile merging conflicts when choosing `SOURCE` as the `ConflictResolvingModel`.
         * 
         * @return builder
         * 
         */
        public Builder sourceName(@Nullable Output<String> sourceName) {
            $.sourceName = sourceName;
            return this;
        }

        /**
         * @param sourceName The `ObjectType` name that is used to resolve profile merging conflicts when choosing `SOURCE` as the `ConflictResolvingModel`.
         * 
         * @return builder
         * 
         */
        public Builder sourceName(String sourceName) {
            return sourceName(Output.of(sourceName));
        }

        public DomainRuleBasedMatchingConflictResolutionArgs build() {
            if ($.conflictResolvingModel == null) {
                throw new MissingRequiredPropertyException("DomainRuleBasedMatchingConflictResolutionArgs", "conflictResolvingModel");
            }
            return $;
        }
    }

}
