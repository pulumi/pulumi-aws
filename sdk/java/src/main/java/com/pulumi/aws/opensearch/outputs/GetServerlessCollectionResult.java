// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.opensearch.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetServerlessCollectionResult {
    /**
     * @return Amazon Resource Name (ARN) of the collection.
     * 
     */
    private String arn;
    /**
     * @return Collection-specific endpoint used to submit index, search, and data upload requests to an OpenSearch Serverless collection.
     * 
     */
    private String collectionEndpoint;
    /**
     * @return Date the Collection was created.
     * 
     */
    private String createdDate;
    /**
     * @return Collection-specific endpoint used to access OpenSearch Dashboards.
     * 
     */
    private String dashboardEndpoint;
    /**
     * @return Description of the collection.
     * 
     */
    private String description;
    private String id;
    /**
     * @return The ARN of the Amazon Web Services KMS key used to encrypt the collection.
     * 
     */
    private String kmsKeyArn;
    /**
     * @return Date the Collection was last modified.
     * 
     */
    private String lastModifiedDate;
    private String name;
    /**
     * @return Indicates whether standby replicas should be used for a collection.
     * 
     */
    private String standbyReplicas;
    /**
     * @return A map of tags to assign to the collection.
     * 
     */
    private Map<String,String> tags;
    /**
     * @return Type of collection.
     * 
     */
    private String type;

    private GetServerlessCollectionResult() {}
    /**
     * @return Amazon Resource Name (ARN) of the collection.
     * 
     */
    public String arn() {
        return this.arn;
    }
    /**
     * @return Collection-specific endpoint used to submit index, search, and data upload requests to an OpenSearch Serverless collection.
     * 
     */
    public String collectionEndpoint() {
        return this.collectionEndpoint;
    }
    /**
     * @return Date the Collection was created.
     * 
     */
    public String createdDate() {
        return this.createdDate;
    }
    /**
     * @return Collection-specific endpoint used to access OpenSearch Dashboards.
     * 
     */
    public String dashboardEndpoint() {
        return this.dashboardEndpoint;
    }
    /**
     * @return Description of the collection.
     * 
     */
    public String description() {
        return this.description;
    }
    public String id() {
        return this.id;
    }
    /**
     * @return The ARN of the Amazon Web Services KMS key used to encrypt the collection.
     * 
     */
    public String kmsKeyArn() {
        return this.kmsKeyArn;
    }
    /**
     * @return Date the Collection was last modified.
     * 
     */
    public String lastModifiedDate() {
        return this.lastModifiedDate;
    }
    public String name() {
        return this.name;
    }
    /**
     * @return Indicates whether standby replicas should be used for a collection.
     * 
     */
    public String standbyReplicas() {
        return this.standbyReplicas;
    }
    /**
     * @return A map of tags to assign to the collection.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }
    /**
     * @return Type of collection.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServerlessCollectionResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String arn;
        private String collectionEndpoint;
        private String createdDate;
        private String dashboardEndpoint;
        private String description;
        private String id;
        private String kmsKeyArn;
        private String lastModifiedDate;
        private String name;
        private String standbyReplicas;
        private Map<String,String> tags;
        private String type;
        public Builder() {}
        public Builder(GetServerlessCollectionResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.collectionEndpoint = defaults.collectionEndpoint;
    	      this.createdDate = defaults.createdDate;
    	      this.dashboardEndpoint = defaults.dashboardEndpoint;
    	      this.description = defaults.description;
    	      this.id = defaults.id;
    	      this.kmsKeyArn = defaults.kmsKeyArn;
    	      this.lastModifiedDate = defaults.lastModifiedDate;
    	      this.name = defaults.name;
    	      this.standbyReplicas = defaults.standbyReplicas;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder arn(String arn) {
            if (arn == null) {
              throw new MissingRequiredPropertyException("GetServerlessCollectionResult", "arn");
            }
            this.arn = arn;
            return this;
        }
        @CustomType.Setter
        public Builder collectionEndpoint(String collectionEndpoint) {
            if (collectionEndpoint == null) {
              throw new MissingRequiredPropertyException("GetServerlessCollectionResult", "collectionEndpoint");
            }
            this.collectionEndpoint = collectionEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder createdDate(String createdDate) {
            if (createdDate == null) {
              throw new MissingRequiredPropertyException("GetServerlessCollectionResult", "createdDate");
            }
            this.createdDate = createdDate;
            return this;
        }
        @CustomType.Setter
        public Builder dashboardEndpoint(String dashboardEndpoint) {
            if (dashboardEndpoint == null) {
              throw new MissingRequiredPropertyException("GetServerlessCollectionResult", "dashboardEndpoint");
            }
            this.dashboardEndpoint = dashboardEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetServerlessCollectionResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetServerlessCollectionResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder kmsKeyArn(String kmsKeyArn) {
            if (kmsKeyArn == null) {
              throw new MissingRequiredPropertyException("GetServerlessCollectionResult", "kmsKeyArn");
            }
            this.kmsKeyArn = kmsKeyArn;
            return this;
        }
        @CustomType.Setter
        public Builder lastModifiedDate(String lastModifiedDate) {
            if (lastModifiedDate == null) {
              throw new MissingRequiredPropertyException("GetServerlessCollectionResult", "lastModifiedDate");
            }
            this.lastModifiedDate = lastModifiedDate;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetServerlessCollectionResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder standbyReplicas(String standbyReplicas) {
            if (standbyReplicas == null) {
              throw new MissingRequiredPropertyException("GetServerlessCollectionResult", "standbyReplicas");
            }
            this.standbyReplicas = standbyReplicas;
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetServerlessCollectionResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetServerlessCollectionResult", "type");
            }
            this.type = type;
            return this;
        }
        public GetServerlessCollectionResult build() {
            final var _resultValue = new GetServerlessCollectionResult();
            _resultValue.arn = arn;
            _resultValue.collectionEndpoint = collectionEndpoint;
            _resultValue.createdDate = createdDate;
            _resultValue.dashboardEndpoint = dashboardEndpoint;
            _resultValue.description = description;
            _resultValue.id = id;
            _resultValue.kmsKeyArn = kmsKeyArn;
            _resultValue.lastModifiedDate = lastModifiedDate;
            _resultValue.name = name;
            _resultValue.standbyReplicas = standbyReplicas;
            _resultValue.tags = tags;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
