// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.fms.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ResourceSetResourceSetArgs extends com.pulumi.resources.ResourceArgs {

    public static final ResourceSetResourceSetArgs Empty = new ResourceSetResourceSetArgs();

    /**
     * Description of the resource set.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the resource set.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Unique identifier for the resource set. It&#39;s returned in the responses to create and list commands. You provide it to operations like update and delete.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return Unique identifier for the resource set. It&#39;s returned in the responses to create and list commands. You provide it to operations like update and delete.
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Last time that the reosurce set was changed.
     * 
     */
    @Import(name="lastUpdateTime")
    private @Nullable Output<String> lastUpdateTime;

    /**
     * @return Last time that the reosurce set was changed.
     * 
     */
    public Optional<Output<String>> lastUpdateTime() {
        return Optional.ofNullable(this.lastUpdateTime);
    }

    /**
     * Descriptive name of the resource set. You can&#39;t change the name of a resource set after you create it.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Descriptive name of the resource set. You can&#39;t change the name of a resource set after you create it.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * Indicates whether the resource set is in or out of the admin&#39;s Region scope. Valid values are `ACTIVE` (Admin can manage and delete the resource set) or `OUT_OF_ADMIN_SCOPE` (Admin can view the resource set, but theyy can&#39;t edit or delete the resource set.)
     * 
     */
    @Import(name="resourceSetStatus")
    private @Nullable Output<String> resourceSetStatus;

    /**
     * @return Indicates whether the resource set is in or out of the admin&#39;s Region scope. Valid values are `ACTIVE` (Admin can manage and delete the resource set) or `OUT_OF_ADMIN_SCOPE` (Admin can view the resource set, but theyy can&#39;t edit or delete the resource set.)
     * 
     */
    public Optional<Output<String>> resourceSetStatus() {
        return Optional.ofNullable(this.resourceSetStatus);
    }

    /**
     * Determines the resources that can be associated to the resource set. Depending on your setting for max results and the number of resource sets, a single call might not return the full list.
     * 
     */
    @Import(name="resourceTypeLists")
    private @Nullable Output<List<String>> resourceTypeLists;

    /**
     * @return Determines the resources that can be associated to the resource set. Depending on your setting for max results and the number of resource sets, a single call might not return the full list.
     * 
     */
    public Optional<Output<List<String>>> resourceTypeLists() {
        return Optional.ofNullable(this.resourceTypeLists);
    }

    @Import(name="updateToken")
    private @Nullable Output<String> updateToken;

    public Optional<Output<String>> updateToken() {
        return Optional.ofNullable(this.updateToken);
    }

    private ResourceSetResourceSetArgs() {}

    private ResourceSetResourceSetArgs(ResourceSetResourceSetArgs $) {
        this.description = $.description;
        this.id = $.id;
        this.lastUpdateTime = $.lastUpdateTime;
        this.name = $.name;
        this.resourceSetStatus = $.resourceSetStatus;
        this.resourceTypeLists = $.resourceTypeLists;
        this.updateToken = $.updateToken;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ResourceSetResourceSetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ResourceSetResourceSetArgs $;

        public Builder() {
            $ = new ResourceSetResourceSetArgs();
        }

        public Builder(ResourceSetResourceSetArgs defaults) {
            $ = new ResourceSetResourceSetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Description of the resource set.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the resource set.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param id Unique identifier for the resource set. It&#39;s returned in the responses to create and list commands. You provide it to operations like update and delete.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id Unique identifier for the resource set. It&#39;s returned in the responses to create and list commands. You provide it to operations like update and delete.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param lastUpdateTime Last time that the reosurce set was changed.
         * 
         * @return builder
         * 
         */
        public Builder lastUpdateTime(@Nullable Output<String> lastUpdateTime) {
            $.lastUpdateTime = lastUpdateTime;
            return this;
        }

        /**
         * @param lastUpdateTime Last time that the reosurce set was changed.
         * 
         * @return builder
         * 
         */
        public Builder lastUpdateTime(String lastUpdateTime) {
            return lastUpdateTime(Output.of(lastUpdateTime));
        }

        /**
         * @param name Descriptive name of the resource set. You can&#39;t change the name of a resource set after you create it.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Descriptive name of the resource set. You can&#39;t change the name of a resource set after you create it.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param resourceSetStatus Indicates whether the resource set is in or out of the admin&#39;s Region scope. Valid values are `ACTIVE` (Admin can manage and delete the resource set) or `OUT_OF_ADMIN_SCOPE` (Admin can view the resource set, but theyy can&#39;t edit or delete the resource set.)
         * 
         * @return builder
         * 
         */
        public Builder resourceSetStatus(@Nullable Output<String> resourceSetStatus) {
            $.resourceSetStatus = resourceSetStatus;
            return this;
        }

        /**
         * @param resourceSetStatus Indicates whether the resource set is in or out of the admin&#39;s Region scope. Valid values are `ACTIVE` (Admin can manage and delete the resource set) or `OUT_OF_ADMIN_SCOPE` (Admin can view the resource set, but theyy can&#39;t edit or delete the resource set.)
         * 
         * @return builder
         * 
         */
        public Builder resourceSetStatus(String resourceSetStatus) {
            return resourceSetStatus(Output.of(resourceSetStatus));
        }

        /**
         * @param resourceTypeLists Determines the resources that can be associated to the resource set. Depending on your setting for max results and the number of resource sets, a single call might not return the full list.
         * 
         * @return builder
         * 
         */
        public Builder resourceTypeLists(@Nullable Output<List<String>> resourceTypeLists) {
            $.resourceTypeLists = resourceTypeLists;
            return this;
        }

        /**
         * @param resourceTypeLists Determines the resources that can be associated to the resource set. Depending on your setting for max results and the number of resource sets, a single call might not return the full list.
         * 
         * @return builder
         * 
         */
        public Builder resourceTypeLists(List<String> resourceTypeLists) {
            return resourceTypeLists(Output.of(resourceTypeLists));
        }

        /**
         * @param resourceTypeLists Determines the resources that can be associated to the resource set. Depending on your setting for max results and the number of resource sets, a single call might not return the full list.
         * 
         * @return builder
         * 
         */
        public Builder resourceTypeLists(String... resourceTypeLists) {
            return resourceTypeLists(List.of(resourceTypeLists));
        }

        public Builder updateToken(@Nullable Output<String> updateToken) {
            $.updateToken = updateToken;
            return this;
        }

        public Builder updateToken(String updateToken) {
            return updateToken(Output.of(updateToken));
        }

        public ResourceSetResourceSetArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("ResourceSetResourceSetArgs", "name");
            }
            return $;
        }
    }

}
