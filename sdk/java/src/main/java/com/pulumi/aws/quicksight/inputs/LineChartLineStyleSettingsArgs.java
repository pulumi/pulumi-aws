// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LineChartLineStyleSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final LineChartLineStyleSettingsArgs Empty = new LineChartLineStyleSettingsArgs();

    @Import(name="lineInterpolation")
    private @Nullable Output<String> lineInterpolation;

    public Optional<Output<String>> lineInterpolation() {
        return Optional.ofNullable(this.lineInterpolation);
    }

    @Import(name="lineStyle")
    private @Nullable Output<String> lineStyle;

    public Optional<Output<String>> lineStyle() {
        return Optional.ofNullable(this.lineStyle);
    }

    @Import(name="lineVisibility")
    private @Nullable Output<String> lineVisibility;

    public Optional<Output<String>> lineVisibility() {
        return Optional.ofNullable(this.lineVisibility);
    }

    @Import(name="lineWidth")
    private @Nullable Output<String> lineWidth;

    public Optional<Output<String>> lineWidth() {
        return Optional.ofNullable(this.lineWidth);
    }

    private LineChartLineStyleSettingsArgs() {}

    private LineChartLineStyleSettingsArgs(LineChartLineStyleSettingsArgs $) {
        this.lineInterpolation = $.lineInterpolation;
        this.lineStyle = $.lineStyle;
        this.lineVisibility = $.lineVisibility;
        this.lineWidth = $.lineWidth;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LineChartLineStyleSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LineChartLineStyleSettingsArgs $;

        public Builder() {
            $ = new LineChartLineStyleSettingsArgs();
        }

        public Builder(LineChartLineStyleSettingsArgs defaults) {
            $ = new LineChartLineStyleSettingsArgs(Objects.requireNonNull(defaults));
        }

        public Builder lineInterpolation(@Nullable Output<String> lineInterpolation) {
            $.lineInterpolation = lineInterpolation;
            return this;
        }

        public Builder lineInterpolation(String lineInterpolation) {
            return lineInterpolation(Output.of(lineInterpolation));
        }

        public Builder lineStyle(@Nullable Output<String> lineStyle) {
            $.lineStyle = lineStyle;
            return this;
        }

        public Builder lineStyle(String lineStyle) {
            return lineStyle(Output.of(lineStyle));
        }

        public Builder lineVisibility(@Nullable Output<String> lineVisibility) {
            $.lineVisibility = lineVisibility;
            return this;
        }

        public Builder lineVisibility(String lineVisibility) {
            return lineVisibility(Output.of(lineVisibility));
        }

        public Builder lineWidth(@Nullable Output<String> lineWidth) {
            $.lineWidth = lineWidth;
            return this;
        }

        public Builder lineWidth(String lineWidth) {
            return lineWidth(Output.of(lineWidth));
        }

        public LineChartLineStyleSettingsArgs build() {
            return $;
        }
    }

}
