// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.s3.inputs;

import com.pulumi.aws.s3.inputs.BucketReplicationConfigRuleDeleteMarkerReplicationArgs;
import com.pulumi.aws.s3.inputs.BucketReplicationConfigRuleDestinationArgs;
import com.pulumi.aws.s3.inputs.BucketReplicationConfigRuleExistingObjectReplicationArgs;
import com.pulumi.aws.s3.inputs.BucketReplicationConfigRuleFilterArgs;
import com.pulumi.aws.s3.inputs.BucketReplicationConfigRuleSourceSelectionCriteriaArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BucketReplicationConfigRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final BucketReplicationConfigRuleArgs Empty = new BucketReplicationConfigRuleArgs();

    @Import(name="deleteMarkerReplication")
    private @Nullable Output<BucketReplicationConfigRuleDeleteMarkerReplicationArgs> deleteMarkerReplication;

    public Optional<Output<BucketReplicationConfigRuleDeleteMarkerReplicationArgs>> deleteMarkerReplication() {
        return Optional.ofNullable(this.deleteMarkerReplication);
    }

    @Import(name="destination", required=true)
    private Output<BucketReplicationConfigRuleDestinationArgs> destination;

    public Output<BucketReplicationConfigRuleDestinationArgs> destination() {
        return this.destination;
    }

    @Import(name="existingObjectReplication")
    private @Nullable Output<BucketReplicationConfigRuleExistingObjectReplicationArgs> existingObjectReplication;

    public Optional<Output<BucketReplicationConfigRuleExistingObjectReplicationArgs>> existingObjectReplication() {
        return Optional.ofNullable(this.existingObjectReplication);
    }

    @Import(name="filter")
    private @Nullable Output<BucketReplicationConfigRuleFilterArgs> filter;

    public Optional<Output<BucketReplicationConfigRuleFilterArgs>> filter() {
        return Optional.ofNullable(this.filter);
    }

    @Import(name="id")
    private @Nullable Output<String> id;

    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * @deprecated
     * Use filter instead
     * 
     */
    @Deprecated /* Use filter instead */
    @Import(name="prefix")
    private @Nullable Output<String> prefix;

    /**
     * @deprecated
     * Use filter instead
     * 
     */
    @Deprecated /* Use filter instead */
    public Optional<Output<String>> prefix() {
        return Optional.ofNullable(this.prefix);
    }

    @Import(name="priority")
    private @Nullable Output<Integer> priority;

    public Optional<Output<Integer>> priority() {
        return Optional.ofNullable(this.priority);
    }

    @Import(name="sourceSelectionCriteria")
    private @Nullable Output<BucketReplicationConfigRuleSourceSelectionCriteriaArgs> sourceSelectionCriteria;

    public Optional<Output<BucketReplicationConfigRuleSourceSelectionCriteriaArgs>> sourceSelectionCriteria() {
        return Optional.ofNullable(this.sourceSelectionCriteria);
    }

    @Import(name="status", required=true)
    private Output<String> status;

    public Output<String> status() {
        return this.status;
    }

    private BucketReplicationConfigRuleArgs() {}

    private BucketReplicationConfigRuleArgs(BucketReplicationConfigRuleArgs $) {
        this.deleteMarkerReplication = $.deleteMarkerReplication;
        this.destination = $.destination;
        this.existingObjectReplication = $.existingObjectReplication;
        this.filter = $.filter;
        this.id = $.id;
        this.prefix = $.prefix;
        this.priority = $.priority;
        this.sourceSelectionCriteria = $.sourceSelectionCriteria;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BucketReplicationConfigRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BucketReplicationConfigRuleArgs $;

        public Builder() {
            $ = new BucketReplicationConfigRuleArgs();
        }

        public Builder(BucketReplicationConfigRuleArgs defaults) {
            $ = new BucketReplicationConfigRuleArgs(Objects.requireNonNull(defaults));
        }

        public Builder deleteMarkerReplication(@Nullable Output<BucketReplicationConfigRuleDeleteMarkerReplicationArgs> deleteMarkerReplication) {
            $.deleteMarkerReplication = deleteMarkerReplication;
            return this;
        }

        public Builder deleteMarkerReplication(BucketReplicationConfigRuleDeleteMarkerReplicationArgs deleteMarkerReplication) {
            return deleteMarkerReplication(Output.of(deleteMarkerReplication));
        }

        public Builder destination(Output<BucketReplicationConfigRuleDestinationArgs> destination) {
            $.destination = destination;
            return this;
        }

        public Builder destination(BucketReplicationConfigRuleDestinationArgs destination) {
            return destination(Output.of(destination));
        }

        public Builder existingObjectReplication(@Nullable Output<BucketReplicationConfigRuleExistingObjectReplicationArgs> existingObjectReplication) {
            $.existingObjectReplication = existingObjectReplication;
            return this;
        }

        public Builder existingObjectReplication(BucketReplicationConfigRuleExistingObjectReplicationArgs existingObjectReplication) {
            return existingObjectReplication(Output.of(existingObjectReplication));
        }

        public Builder filter(@Nullable Output<BucketReplicationConfigRuleFilterArgs> filter) {
            $.filter = filter;
            return this;
        }

        public Builder filter(BucketReplicationConfigRuleFilterArgs filter) {
            return filter(Output.of(filter));
        }

        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * Use filter instead
         * 
         */
        @Deprecated /* Use filter instead */
        public Builder prefix(@Nullable Output<String> prefix) {
            $.prefix = prefix;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * Use filter instead
         * 
         */
        @Deprecated /* Use filter instead */
        public Builder prefix(String prefix) {
            return prefix(Output.of(prefix));
        }

        public Builder priority(@Nullable Output<Integer> priority) {
            $.priority = priority;
            return this;
        }

        public Builder priority(Integer priority) {
            return priority(Output.of(priority));
        }

        public Builder sourceSelectionCriteria(@Nullable Output<BucketReplicationConfigRuleSourceSelectionCriteriaArgs> sourceSelectionCriteria) {
            $.sourceSelectionCriteria = sourceSelectionCriteria;
            return this;
        }

        public Builder sourceSelectionCriteria(BucketReplicationConfigRuleSourceSelectionCriteriaArgs sourceSelectionCriteria) {
            return sourceSelectionCriteria(Output.of(sourceSelectionCriteria));
        }

        public Builder status(Output<String> status) {
            $.status = status;
            return this;
        }

        public Builder status(String status) {
            return status(Output.of(status));
        }

        public BucketReplicationConfigRuleArgs build() {
            $.destination = Objects.requireNonNull($.destination, "expected parameter 'destination' to be non-null");
            $.status = Objects.requireNonNull($.status, "expected parameter 'status' to be non-null");
            return $;
        }
    }

}
