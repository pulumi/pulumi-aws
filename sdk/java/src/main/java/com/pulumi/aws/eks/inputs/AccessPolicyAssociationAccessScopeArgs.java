// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.eks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AccessPolicyAssociationAccessScopeArgs extends com.pulumi.resources.ResourceArgs {

    public static final AccessPolicyAssociationAccessScopeArgs Empty = new AccessPolicyAssociationAccessScopeArgs();

    /**
     * The namespaces to which the access scope applies when type is namespace.
     * 
     */
    @Import(name="namespaces")
    private @Nullable Output<List<String>> namespaces;

    /**
     * @return The namespaces to which the access scope applies when type is namespace.
     * 
     */
    public Optional<Output<List<String>>> namespaces() {
        return Optional.ofNullable(this.namespaces);
    }

    /**
     * Valid values are `namespace` or `cluster`.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Valid values are `namespace` or `cluster`.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private AccessPolicyAssociationAccessScopeArgs() {}

    private AccessPolicyAssociationAccessScopeArgs(AccessPolicyAssociationAccessScopeArgs $) {
        this.namespaces = $.namespaces;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AccessPolicyAssociationAccessScopeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AccessPolicyAssociationAccessScopeArgs $;

        public Builder() {
            $ = new AccessPolicyAssociationAccessScopeArgs();
        }

        public Builder(AccessPolicyAssociationAccessScopeArgs defaults) {
            $ = new AccessPolicyAssociationAccessScopeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param namespaces The namespaces to which the access scope applies when type is namespace.
         * 
         * @return builder
         * 
         */
        public Builder namespaces(@Nullable Output<List<String>> namespaces) {
            $.namespaces = namespaces;
            return this;
        }

        /**
         * @param namespaces The namespaces to which the access scope applies when type is namespace.
         * 
         * @return builder
         * 
         */
        public Builder namespaces(List<String> namespaces) {
            return namespaces(Output.of(namespaces));
        }

        /**
         * @param namespaces The namespaces to which the access scope applies when type is namespace.
         * 
         * @return builder
         * 
         */
        public Builder namespaces(String... namespaces) {
            return namespaces(List.of(namespaces));
        }

        /**
         * @param type Valid values are `namespace` or `cluster`.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Valid values are `namespace` or `cluster`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public AccessPolicyAssociationAccessScopeArgs build() {
            if ($.type == null) {
                throw new MissingRequiredPropertyException("AccessPolicyAssociationAccessScopeArgs", "type");
            }
            return $;
        }
    }

}
