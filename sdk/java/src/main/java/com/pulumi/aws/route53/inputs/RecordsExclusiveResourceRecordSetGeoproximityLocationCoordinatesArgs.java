// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.route53.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesArgs extends com.pulumi.resources.ResourceArgs {

    public static final RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesArgs Empty = new RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesArgs();

    /**
     * A coordinate of the north–south position of a geographic point on the surface of the Earth (`-90` - `90`).
     * 
     */
    @Import(name="latitude", required=true)
    private Output<String> latitude;

    /**
     * @return A coordinate of the north–south position of a geographic point on the surface of the Earth (`-90` - `90`).
     * 
     */
    public Output<String> latitude() {
        return this.latitude;
    }

    /**
     * A coordinate of the east–west position of a geographic point on the surface of the Earth (`-180` - `180`).
     * 
     */
    @Import(name="longitude", required=true)
    private Output<String> longitude;

    /**
     * @return A coordinate of the east–west position of a geographic point on the surface of the Earth (`-180` - `180`).
     * 
     */
    public Output<String> longitude() {
        return this.longitude;
    }

    private RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesArgs() {}

    private RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesArgs(RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesArgs $) {
        this.latitude = $.latitude;
        this.longitude = $.longitude;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesArgs $;

        public Builder() {
            $ = new RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesArgs();
        }

        public Builder(RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesArgs defaults) {
            $ = new RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param latitude A coordinate of the north–south position of a geographic point on the surface of the Earth (`-90` - `90`).
         * 
         * @return builder
         * 
         */
        public Builder latitude(Output<String> latitude) {
            $.latitude = latitude;
            return this;
        }

        /**
         * @param latitude A coordinate of the north–south position of a geographic point on the surface of the Earth (`-90` - `90`).
         * 
         * @return builder
         * 
         */
        public Builder latitude(String latitude) {
            return latitude(Output.of(latitude));
        }

        /**
         * @param longitude A coordinate of the east–west position of a geographic point on the surface of the Earth (`-180` - `180`).
         * 
         * @return builder
         * 
         */
        public Builder longitude(Output<String> longitude) {
            $.longitude = longitude;
            return this;
        }

        /**
         * @param longitude A coordinate of the east–west position of a geographic point on the surface of the Earth (`-180` - `180`).
         * 
         * @return builder
         * 
         */
        public Builder longitude(String longitude) {
            return longitude(Output.of(longitude));
        }

        public RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesArgs build() {
            if ($.latitude == null) {
                throw new MissingRequiredPropertyException("RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesArgs", "latitude");
            }
            if ($.longitude == null) {
                throw new MissingRequiredPropertyException("RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesArgs", "longitude");
            }
            return $;
        }
    }

}
