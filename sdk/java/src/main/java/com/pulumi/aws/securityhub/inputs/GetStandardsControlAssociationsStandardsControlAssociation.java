// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.securityhub.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class GetStandardsControlAssociationsStandardsControlAssociation extends com.pulumi.resources.InvokeArgs {

    public static final GetStandardsControlAssociationsStandardsControlAssociation Empty = new GetStandardsControlAssociationsStandardsControlAssociation();

    /**
     * Enablement status of a control in a specific standard.
     * 
     */
    @Import(name="associationStatus", required=true)
    private String associationStatus;

    /**
     * @return Enablement status of a control in a specific standard.
     * 
     */
    public String associationStatus() {
        return this.associationStatus;
    }

    /**
     * List of underlying requirements in the compliance framework related to the standard.
     * 
     */
    @Import(name="relatedRequirements", required=true)
    private List<String> relatedRequirements;

    /**
     * @return List of underlying requirements in the compliance framework related to the standard.
     * 
     */
    public List<String> relatedRequirements() {
        return this.relatedRequirements;
    }

    /**
     * ARN of the security control.
     * 
     */
    @Import(name="securityControlArn", required=true)
    private String securityControlArn;

    /**
     * @return ARN of the security control.
     * 
     */
    public String securityControlArn() {
        return this.securityControlArn;
    }

    /**
     * The identifier of the control (identified with `SecurityControlId`, `SecurityControlArn`, or a mix of both parameters).
     * 
     */
    @Import(name="securityControlId", required=true)
    private String securityControlId;

    /**
     * @return The identifier of the control (identified with `SecurityControlId`, `SecurityControlArn`, or a mix of both parameters).
     * 
     */
    public String securityControlId() {
        return this.securityControlId;
    }

    /**
     * ARN of the standard.
     * 
     */
    @Import(name="standardsArn", required=true)
    private String standardsArn;

    /**
     * @return ARN of the standard.
     * 
     */
    public String standardsArn() {
        return this.standardsArn;
    }

    /**
     * Description of the standard.
     * 
     */
    @Import(name="standardsControlDescription", required=true)
    private String standardsControlDescription;

    /**
     * @return Description of the standard.
     * 
     */
    public String standardsControlDescription() {
        return this.standardsControlDescription;
    }

    /**
     * Title of the standard.
     * 
     */
    @Import(name="standardsControlTitle", required=true)
    private String standardsControlTitle;

    /**
     * @return Title of the standard.
     * 
     */
    public String standardsControlTitle() {
        return this.standardsControlTitle;
    }

    /**
     * Last time that a control&#39;s enablement status in a specified standard was updated.
     * 
     */
    @Import(name="updatedAt", required=true)
    private String updatedAt;

    /**
     * @return Last time that a control&#39;s enablement status in a specified standard was updated.
     * 
     */
    public String updatedAt() {
        return this.updatedAt;
    }

    /**
     * Reason for updating a control&#39;s enablement status in a specified standard.
     * 
     */
    @Import(name="updatedReason", required=true)
    private String updatedReason;

    /**
     * @return Reason for updating a control&#39;s enablement status in a specified standard.
     * 
     */
    public String updatedReason() {
        return this.updatedReason;
    }

    private GetStandardsControlAssociationsStandardsControlAssociation() {}

    private GetStandardsControlAssociationsStandardsControlAssociation(GetStandardsControlAssociationsStandardsControlAssociation $) {
        this.associationStatus = $.associationStatus;
        this.relatedRequirements = $.relatedRequirements;
        this.securityControlArn = $.securityControlArn;
        this.securityControlId = $.securityControlId;
        this.standardsArn = $.standardsArn;
        this.standardsControlDescription = $.standardsControlDescription;
        this.standardsControlTitle = $.standardsControlTitle;
        this.updatedAt = $.updatedAt;
        this.updatedReason = $.updatedReason;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetStandardsControlAssociationsStandardsControlAssociation defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetStandardsControlAssociationsStandardsControlAssociation $;

        public Builder() {
            $ = new GetStandardsControlAssociationsStandardsControlAssociation();
        }

        public Builder(GetStandardsControlAssociationsStandardsControlAssociation defaults) {
            $ = new GetStandardsControlAssociationsStandardsControlAssociation(Objects.requireNonNull(defaults));
        }

        /**
         * @param associationStatus Enablement status of a control in a specific standard.
         * 
         * @return builder
         * 
         */
        public Builder associationStatus(String associationStatus) {
            $.associationStatus = associationStatus;
            return this;
        }

        /**
         * @param relatedRequirements List of underlying requirements in the compliance framework related to the standard.
         * 
         * @return builder
         * 
         */
        public Builder relatedRequirements(List<String> relatedRequirements) {
            $.relatedRequirements = relatedRequirements;
            return this;
        }

        /**
         * @param relatedRequirements List of underlying requirements in the compliance framework related to the standard.
         * 
         * @return builder
         * 
         */
        public Builder relatedRequirements(String... relatedRequirements) {
            return relatedRequirements(List.of(relatedRequirements));
        }

        /**
         * @param securityControlArn ARN of the security control.
         * 
         * @return builder
         * 
         */
        public Builder securityControlArn(String securityControlArn) {
            $.securityControlArn = securityControlArn;
            return this;
        }

        /**
         * @param securityControlId The identifier of the control (identified with `SecurityControlId`, `SecurityControlArn`, or a mix of both parameters).
         * 
         * @return builder
         * 
         */
        public Builder securityControlId(String securityControlId) {
            $.securityControlId = securityControlId;
            return this;
        }

        /**
         * @param standardsArn ARN of the standard.
         * 
         * @return builder
         * 
         */
        public Builder standardsArn(String standardsArn) {
            $.standardsArn = standardsArn;
            return this;
        }

        /**
         * @param standardsControlDescription Description of the standard.
         * 
         * @return builder
         * 
         */
        public Builder standardsControlDescription(String standardsControlDescription) {
            $.standardsControlDescription = standardsControlDescription;
            return this;
        }

        /**
         * @param standardsControlTitle Title of the standard.
         * 
         * @return builder
         * 
         */
        public Builder standardsControlTitle(String standardsControlTitle) {
            $.standardsControlTitle = standardsControlTitle;
            return this;
        }

        /**
         * @param updatedAt Last time that a control&#39;s enablement status in a specified standard was updated.
         * 
         * @return builder
         * 
         */
        public Builder updatedAt(String updatedAt) {
            $.updatedAt = updatedAt;
            return this;
        }

        /**
         * @param updatedReason Reason for updating a control&#39;s enablement status in a specified standard.
         * 
         * @return builder
         * 
         */
        public Builder updatedReason(String updatedReason) {
            $.updatedReason = updatedReason;
            return this;
        }

        public GetStandardsControlAssociationsStandardsControlAssociation build() {
            if ($.associationStatus == null) {
                throw new MissingRequiredPropertyException("GetStandardsControlAssociationsStandardsControlAssociation", "associationStatus");
            }
            if ($.relatedRequirements == null) {
                throw new MissingRequiredPropertyException("GetStandardsControlAssociationsStandardsControlAssociation", "relatedRequirements");
            }
            if ($.securityControlArn == null) {
                throw new MissingRequiredPropertyException("GetStandardsControlAssociationsStandardsControlAssociation", "securityControlArn");
            }
            if ($.securityControlId == null) {
                throw new MissingRequiredPropertyException("GetStandardsControlAssociationsStandardsControlAssociation", "securityControlId");
            }
            if ($.standardsArn == null) {
                throw new MissingRequiredPropertyException("GetStandardsControlAssociationsStandardsControlAssociation", "standardsArn");
            }
            if ($.standardsControlDescription == null) {
                throw new MissingRequiredPropertyException("GetStandardsControlAssociationsStandardsControlAssociation", "standardsControlDescription");
            }
            if ($.standardsControlTitle == null) {
                throw new MissingRequiredPropertyException("GetStandardsControlAssociationsStandardsControlAssociation", "standardsControlTitle");
            }
            if ($.updatedAt == null) {
                throw new MissingRequiredPropertyException("GetStandardsControlAssociationsStandardsControlAssociation", "updatedAt");
            }
            if ($.updatedReason == null) {
                throw new MissingRequiredPropertyException("GetStandardsControlAssociationsStandardsControlAssociation", "updatedReason");
            }
            return $;
        }
    }

}
