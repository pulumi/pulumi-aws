// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.iot.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DomainConfigurationAuthorizerConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final DomainConfigurationAuthorizerConfigArgs Empty = new DomainConfigurationAuthorizerConfigArgs();

    /**
     * A Boolean that specifies whether the domain configuration&#39;s authorization service can be overridden.
     * 
     */
    @Import(name="allowAuthorizerOverride")
    private @Nullable Output<Boolean> allowAuthorizerOverride;

    /**
     * @return A Boolean that specifies whether the domain configuration&#39;s authorization service can be overridden.
     * 
     */
    public Optional<Output<Boolean>> allowAuthorizerOverride() {
        return Optional.ofNullable(this.allowAuthorizerOverride);
    }

    /**
     * The name of the authorization service for a domain configuration.
     * 
     */
    @Import(name="defaultAuthorizerName")
    private @Nullable Output<String> defaultAuthorizerName;

    /**
     * @return The name of the authorization service for a domain configuration.
     * 
     */
    public Optional<Output<String>> defaultAuthorizerName() {
        return Optional.ofNullable(this.defaultAuthorizerName);
    }

    private DomainConfigurationAuthorizerConfigArgs() {}

    private DomainConfigurationAuthorizerConfigArgs(DomainConfigurationAuthorizerConfigArgs $) {
        this.allowAuthorizerOverride = $.allowAuthorizerOverride;
        this.defaultAuthorizerName = $.defaultAuthorizerName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DomainConfigurationAuthorizerConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DomainConfigurationAuthorizerConfigArgs $;

        public Builder() {
            $ = new DomainConfigurationAuthorizerConfigArgs();
        }

        public Builder(DomainConfigurationAuthorizerConfigArgs defaults) {
            $ = new DomainConfigurationAuthorizerConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowAuthorizerOverride A Boolean that specifies whether the domain configuration&#39;s authorization service can be overridden.
         * 
         * @return builder
         * 
         */
        public Builder allowAuthorizerOverride(@Nullable Output<Boolean> allowAuthorizerOverride) {
            $.allowAuthorizerOverride = allowAuthorizerOverride;
            return this;
        }

        /**
         * @param allowAuthorizerOverride A Boolean that specifies whether the domain configuration&#39;s authorization service can be overridden.
         * 
         * @return builder
         * 
         */
        public Builder allowAuthorizerOverride(Boolean allowAuthorizerOverride) {
            return allowAuthorizerOverride(Output.of(allowAuthorizerOverride));
        }

        /**
         * @param defaultAuthorizerName The name of the authorization service for a domain configuration.
         * 
         * @return builder
         * 
         */
        public Builder defaultAuthorizerName(@Nullable Output<String> defaultAuthorizerName) {
            $.defaultAuthorizerName = defaultAuthorizerName;
            return this;
        }

        /**
         * @param defaultAuthorizerName The name of the authorization service for a domain configuration.
         * 
         * @return builder
         * 
         */
        public Builder defaultAuthorizerName(String defaultAuthorizerName) {
            return defaultAuthorizerName(Output.of(defaultAuthorizerName));
        }

        public DomainConfigurationAuthorizerConfigArgs build() {
            return $;
        }
    }

}
