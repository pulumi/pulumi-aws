// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.outputs;

import com.pulumi.aws.quicksight.outputs.VisualsFilledMapVisualConditionalFormattingConditionalFormattingOption;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.util.List;
import java.util.Objects;

@CustomType
public final class VisualsFilledMapVisualConditionalFormatting {
    private List<VisualsFilledMapVisualConditionalFormattingConditionalFormattingOption> conditionalFormattingOptions;

    private VisualsFilledMapVisualConditionalFormatting() {}
    public List<VisualsFilledMapVisualConditionalFormattingConditionalFormattingOption> conditionalFormattingOptions() {
        return this.conditionalFormattingOptions;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VisualsFilledMapVisualConditionalFormatting defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<VisualsFilledMapVisualConditionalFormattingConditionalFormattingOption> conditionalFormattingOptions;
        public Builder() {}
        public Builder(VisualsFilledMapVisualConditionalFormatting defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.conditionalFormattingOptions = defaults.conditionalFormattingOptions;
        }

        @CustomType.Setter
        public Builder conditionalFormattingOptions(List<VisualsFilledMapVisualConditionalFormattingConditionalFormattingOption> conditionalFormattingOptions) {
            if (conditionalFormattingOptions == null) {
              throw new MissingRequiredPropertyException("VisualsFilledMapVisualConditionalFormatting", "conditionalFormattingOptions");
            }
            this.conditionalFormattingOptions = conditionalFormattingOptions;
            return this;
        }
        public Builder conditionalFormattingOptions(VisualsFilledMapVisualConditionalFormattingConditionalFormattingOption... conditionalFormattingOptions) {
            return conditionalFormattingOptions(List.of(conditionalFormattingOptions));
        }
        public VisualsFilledMapVisualConditionalFormatting build() {
            final var _resultValue = new VisualsFilledMapVisualConditionalFormatting();
            _resultValue.conditionalFormattingOptions = conditionalFormattingOptions;
            return _resultValue;
        }
    }
}
