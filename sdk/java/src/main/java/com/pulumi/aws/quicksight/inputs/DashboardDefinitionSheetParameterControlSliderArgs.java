// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.inputs;

import com.pulumi.aws.quicksight.inputs.DashboardDefinitionSheetParameterControlSliderDisplayOptionsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DashboardDefinitionSheetParameterControlSliderArgs extends com.pulumi.resources.ResourceArgs {

    public static final DashboardDefinitionSheetParameterControlSliderArgs Empty = new DashboardDefinitionSheetParameterControlSliderArgs();

    @Import(name="displayOptions")
    private @Nullable Output<DashboardDefinitionSheetParameterControlSliderDisplayOptionsArgs> displayOptions;

    public Optional<Output<DashboardDefinitionSheetParameterControlSliderDisplayOptionsArgs>> displayOptions() {
        return Optional.ofNullable(this.displayOptions);
    }

    @Import(name="maximumValue", required=true)
    private Output<Double> maximumValue;

    public Output<Double> maximumValue() {
        return this.maximumValue;
    }

    @Import(name="minimumValue", required=true)
    private Output<Double> minimumValue;

    public Output<Double> minimumValue() {
        return this.minimumValue;
    }

    @Import(name="parameterControlId", required=true)
    private Output<String> parameterControlId;

    public Output<String> parameterControlId() {
        return this.parameterControlId;
    }

    @Import(name="sourceParameterName", required=true)
    private Output<String> sourceParameterName;

    public Output<String> sourceParameterName() {
        return this.sourceParameterName;
    }

    @Import(name="stepSize", required=true)
    private Output<Double> stepSize;

    public Output<Double> stepSize() {
        return this.stepSize;
    }

    @Import(name="title", required=true)
    private Output<String> title;

    public Output<String> title() {
        return this.title;
    }

    private DashboardDefinitionSheetParameterControlSliderArgs() {}

    private DashboardDefinitionSheetParameterControlSliderArgs(DashboardDefinitionSheetParameterControlSliderArgs $) {
        this.displayOptions = $.displayOptions;
        this.maximumValue = $.maximumValue;
        this.minimumValue = $.minimumValue;
        this.parameterControlId = $.parameterControlId;
        this.sourceParameterName = $.sourceParameterName;
        this.stepSize = $.stepSize;
        this.title = $.title;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DashboardDefinitionSheetParameterControlSliderArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DashboardDefinitionSheetParameterControlSliderArgs $;

        public Builder() {
            $ = new DashboardDefinitionSheetParameterControlSliderArgs();
        }

        public Builder(DashboardDefinitionSheetParameterControlSliderArgs defaults) {
            $ = new DashboardDefinitionSheetParameterControlSliderArgs(Objects.requireNonNull(defaults));
        }

        public Builder displayOptions(@Nullable Output<DashboardDefinitionSheetParameterControlSliderDisplayOptionsArgs> displayOptions) {
            $.displayOptions = displayOptions;
            return this;
        }

        public Builder displayOptions(DashboardDefinitionSheetParameterControlSliderDisplayOptionsArgs displayOptions) {
            return displayOptions(Output.of(displayOptions));
        }

        public Builder maximumValue(Output<Double> maximumValue) {
            $.maximumValue = maximumValue;
            return this;
        }

        public Builder maximumValue(Double maximumValue) {
            return maximumValue(Output.of(maximumValue));
        }

        public Builder minimumValue(Output<Double> minimumValue) {
            $.minimumValue = minimumValue;
            return this;
        }

        public Builder minimumValue(Double minimumValue) {
            return minimumValue(Output.of(minimumValue));
        }

        public Builder parameterControlId(Output<String> parameterControlId) {
            $.parameterControlId = parameterControlId;
            return this;
        }

        public Builder parameterControlId(String parameterControlId) {
            return parameterControlId(Output.of(parameterControlId));
        }

        public Builder sourceParameterName(Output<String> sourceParameterName) {
            $.sourceParameterName = sourceParameterName;
            return this;
        }

        public Builder sourceParameterName(String sourceParameterName) {
            return sourceParameterName(Output.of(sourceParameterName));
        }

        public Builder stepSize(Output<Double> stepSize) {
            $.stepSize = stepSize;
            return this;
        }

        public Builder stepSize(Double stepSize) {
            return stepSize(Output.of(stepSize));
        }

        public Builder title(Output<String> title) {
            $.title = title;
            return this;
        }

        public Builder title(String title) {
            return title(Output.of(title));
        }

        public DashboardDefinitionSheetParameterControlSliderArgs build() {
            if ($.maximumValue == null) {
                throw new MissingRequiredPropertyException("DashboardDefinitionSheetParameterControlSliderArgs", "maximumValue");
            }
            if ($.minimumValue == null) {
                throw new MissingRequiredPropertyException("DashboardDefinitionSheetParameterControlSliderArgs", "minimumValue");
            }
            if ($.parameterControlId == null) {
                throw new MissingRequiredPropertyException("DashboardDefinitionSheetParameterControlSliderArgs", "parameterControlId");
            }
            if ($.sourceParameterName == null) {
                throw new MissingRequiredPropertyException("DashboardDefinitionSheetParameterControlSliderArgs", "sourceParameterName");
            }
            if ($.stepSize == null) {
                throw new MissingRequiredPropertyException("DashboardDefinitionSheetParameterControlSliderArgs", "stepSize");
            }
            if ($.title == null) {
                throw new MissingRequiredPropertyException("DashboardDefinitionSheetParameterControlSliderArgs", "title");
            }
            return $;
        }
    }

}
