// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.sagemaker.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class ModelContainerModelDataSourceS3DataSource {
    /**
     * @return How the model data is prepared. Allowed values are: `None` and `Gzip`.
     * 
     */
    private String compressionType;
    /**
     * @return The type of model data to deploy. Allowed values are: `S3Object` and `S3Prefix`.
     * 
     */
    private String s3DataType;
    /**
     * @return The S3 path of model data to deploy.
     * 
     */
    private String s3Uri;

    private ModelContainerModelDataSourceS3DataSource() {}
    /**
     * @return How the model data is prepared. Allowed values are: `None` and `Gzip`.
     * 
     */
    public String compressionType() {
        return this.compressionType;
    }
    /**
     * @return The type of model data to deploy. Allowed values are: `S3Object` and `S3Prefix`.
     * 
     */
    public String s3DataType() {
        return this.s3DataType;
    }
    /**
     * @return The S3 path of model data to deploy.
     * 
     */
    public String s3Uri() {
        return this.s3Uri;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ModelContainerModelDataSourceS3DataSource defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compressionType;
        private String s3DataType;
        private String s3Uri;
        public Builder() {}
        public Builder(ModelContainerModelDataSourceS3DataSource defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compressionType = defaults.compressionType;
    	      this.s3DataType = defaults.s3DataType;
    	      this.s3Uri = defaults.s3Uri;
        }

        @CustomType.Setter
        public Builder compressionType(String compressionType) {
            if (compressionType == null) {
              throw new MissingRequiredPropertyException("ModelContainerModelDataSourceS3DataSource", "compressionType");
            }
            this.compressionType = compressionType;
            return this;
        }
        @CustomType.Setter
        public Builder s3DataType(String s3DataType) {
            if (s3DataType == null) {
              throw new MissingRequiredPropertyException("ModelContainerModelDataSourceS3DataSource", "s3DataType");
            }
            this.s3DataType = s3DataType;
            return this;
        }
        @CustomType.Setter
        public Builder s3Uri(String s3Uri) {
            if (s3Uri == null) {
              throw new MissingRequiredPropertyException("ModelContainerModelDataSourceS3DataSource", "s3Uri");
            }
            this.s3Uri = s3Uri;
            return this;
        }
        public ModelContainerModelDataSourceS3DataSource build() {
            final var _resultValue = new ModelContainerModelDataSourceS3DataSource();
            _resultValue.compressionType = compressionType;
            _resultValue.s3DataType = s3DataType;
            _resultValue.s3Uri = s3Uri;
            return _resultValue;
        }
    }
}
