// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.datasync.inputs;

import com.pulumi.aws.datasync.inputs.NfsLocationMountOptionsArgs;
import com.pulumi.aws.datasync.inputs.NfsLocationOnPremConfigArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NfsLocationState extends com.pulumi.resources.ResourceArgs {

    public static final NfsLocationState Empty = new NfsLocationState();

    /**
     * Amazon Resource Name (ARN) of the DataSync Location.
     * 
     */
    @Import(name="arn")
    private @Nullable Output<String> arn;

    /**
     * @return Amazon Resource Name (ARN) of the DataSync Location.
     * 
     */
    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    /**
     * Configuration block containing mount options used by DataSync to access the NFS Server.
     * 
     */
    @Import(name="mountOptions")
    private @Nullable Output<NfsLocationMountOptionsArgs> mountOptions;

    /**
     * @return Configuration block containing mount options used by DataSync to access the NFS Server.
     * 
     */
    public Optional<Output<NfsLocationMountOptionsArgs>> mountOptions() {
        return Optional.ofNullable(this.mountOptions);
    }

    /**
     * Configuration block containing information for connecting to the NFS File System.
     * 
     */
    @Import(name="onPremConfig")
    private @Nullable Output<NfsLocationOnPremConfigArgs> onPremConfig;

    /**
     * @return Configuration block containing information for connecting to the NFS File System.
     * 
     */
    public Optional<Output<NfsLocationOnPremConfigArgs>> onPremConfig() {
        return Optional.ofNullable(this.onPremConfig);
    }

    /**
     * Specifies the IP address or DNS name of the NFS server. The DataSync Agent(s) use this to mount the NFS server.
     * 
     */
    @Import(name="serverHostname")
    private @Nullable Output<String> serverHostname;

    /**
     * @return Specifies the IP address or DNS name of the NFS server. The DataSync Agent(s) use this to mount the NFS server.
     * 
     */
    public Optional<Output<String>> serverHostname() {
        return Optional.ofNullable(this.serverHostname);
    }

    /**
     * Subdirectory to perform actions as source or destination. Should be exported by the NFS server.
     * 
     */
    @Import(name="subdirectory")
    private @Nullable Output<String> subdirectory;

    /**
     * @return Subdirectory to perform actions as source or destination. Should be exported by the NFS server.
     * 
     */
    public Optional<Output<String>> subdirectory() {
        return Optional.ofNullable(this.subdirectory);
    }

    /**
     * Key-value pairs of resource tags to assign to the DataSync Location. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Key-value pairs of resource tags to assign to the DataSync Location. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    /**
     * @return A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    @Import(name="uri")
    private @Nullable Output<String> uri;

    public Optional<Output<String>> uri() {
        return Optional.ofNullable(this.uri);
    }

    private NfsLocationState() {}

    private NfsLocationState(NfsLocationState $) {
        this.arn = $.arn;
        this.mountOptions = $.mountOptions;
        this.onPremConfig = $.onPremConfig;
        this.serverHostname = $.serverHostname;
        this.subdirectory = $.subdirectory;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
        this.uri = $.uri;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NfsLocationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NfsLocationState $;

        public Builder() {
            $ = new NfsLocationState();
        }

        public Builder(NfsLocationState defaults) {
            $ = new NfsLocationState(Objects.requireNonNull(defaults));
        }

        /**
         * @param arn Amazon Resource Name (ARN) of the DataSync Location.
         * 
         * @return builder
         * 
         */
        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        /**
         * @param arn Amazon Resource Name (ARN) of the DataSync Location.
         * 
         * @return builder
         * 
         */
        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        /**
         * @param mountOptions Configuration block containing mount options used by DataSync to access the NFS Server.
         * 
         * @return builder
         * 
         */
        public Builder mountOptions(@Nullable Output<NfsLocationMountOptionsArgs> mountOptions) {
            $.mountOptions = mountOptions;
            return this;
        }

        /**
         * @param mountOptions Configuration block containing mount options used by DataSync to access the NFS Server.
         * 
         * @return builder
         * 
         */
        public Builder mountOptions(NfsLocationMountOptionsArgs mountOptions) {
            return mountOptions(Output.of(mountOptions));
        }

        /**
         * @param onPremConfig Configuration block containing information for connecting to the NFS File System.
         * 
         * @return builder
         * 
         */
        public Builder onPremConfig(@Nullable Output<NfsLocationOnPremConfigArgs> onPremConfig) {
            $.onPremConfig = onPremConfig;
            return this;
        }

        /**
         * @param onPremConfig Configuration block containing information for connecting to the NFS File System.
         * 
         * @return builder
         * 
         */
        public Builder onPremConfig(NfsLocationOnPremConfigArgs onPremConfig) {
            return onPremConfig(Output.of(onPremConfig));
        }

        /**
         * @param serverHostname Specifies the IP address or DNS name of the NFS server. The DataSync Agent(s) use this to mount the NFS server.
         * 
         * @return builder
         * 
         */
        public Builder serverHostname(@Nullable Output<String> serverHostname) {
            $.serverHostname = serverHostname;
            return this;
        }

        /**
         * @param serverHostname Specifies the IP address or DNS name of the NFS server. The DataSync Agent(s) use this to mount the NFS server.
         * 
         * @return builder
         * 
         */
        public Builder serverHostname(String serverHostname) {
            return serverHostname(Output.of(serverHostname));
        }

        /**
         * @param subdirectory Subdirectory to perform actions as source or destination. Should be exported by the NFS server.
         * 
         * @return builder
         * 
         */
        public Builder subdirectory(@Nullable Output<String> subdirectory) {
            $.subdirectory = subdirectory;
            return this;
        }

        /**
         * @param subdirectory Subdirectory to perform actions as source or destination. Should be exported by the NFS server.
         * 
         * @return builder
         * 
         */
        public Builder subdirectory(String subdirectory) {
            return subdirectory(Output.of(subdirectory));
        }

        /**
         * @param tags Key-value pairs of resource tags to assign to the DataSync Location. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Key-value pairs of resource tags to assign to the DataSync Location. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tagsAll A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
         * 
         * @return builder
         * 
         * @deprecated
         * Please use `tags` instead.
         * 
         */
        @Deprecated /* Please use `tags` instead. */
        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        /**
         * @param tagsAll A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
         * 
         * @return builder
         * 
         * @deprecated
         * Please use `tags` instead.
         * 
         */
        @Deprecated /* Please use `tags` instead. */
        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        public Builder uri(@Nullable Output<String> uri) {
            $.uri = uri;
            return this;
        }

        public Builder uri(String uri) {
            return uri(Output.of(uri));
        }

        public NfsLocationState build() {
            return $;
        }
    }

}
