// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.inputs;

import com.pulumi.aws.quicksight.inputs.ColumnArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class CategoryFilterArgs extends com.pulumi.resources.ResourceArgs {

    public static final CategoryFilterArgs Empty = new CategoryFilterArgs();

    @Import(name="categoryValues", required=true)
    private Output<List<String>> categoryValues;

    public Output<List<String>> categoryValues() {
        return this.categoryValues;
    }

    @Import(name="column", required=true)
    private Output<ColumnArgs> column;

    public Output<ColumnArgs> column() {
        return this.column;
    }

    private CategoryFilterArgs() {}

    private CategoryFilterArgs(CategoryFilterArgs $) {
        this.categoryValues = $.categoryValues;
        this.column = $.column;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CategoryFilterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CategoryFilterArgs $;

        public Builder() {
            $ = new CategoryFilterArgs();
        }

        public Builder(CategoryFilterArgs defaults) {
            $ = new CategoryFilterArgs(Objects.requireNonNull(defaults));
        }

        public Builder categoryValues(Output<List<String>> categoryValues) {
            $.categoryValues = categoryValues;
            return this;
        }

        public Builder categoryValues(List<String> categoryValues) {
            return categoryValues(Output.of(categoryValues));
        }

        public Builder categoryValues(String... categoryValues) {
            return categoryValues(List.of(categoryValues));
        }

        public Builder column(Output<ColumnArgs> column) {
            $.column = column;
            return this;
        }

        public Builder column(ColumnArgs column) {
            return column(Output.of(column));
        }

        public CategoryFilterArgs build() {
            if ($.categoryValues == null) {
                throw new MissingRequiredPropertyException("CategoryFilterArgs", "categoryValues");
            }
            if ($.column == null) {
                throw new MissingRequiredPropertyException("CategoryFilterArgs", "column");
            }
            return $;
        }
    }

}
