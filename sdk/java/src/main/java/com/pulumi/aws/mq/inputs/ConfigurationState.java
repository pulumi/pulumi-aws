// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.mq.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConfigurationState extends com.pulumi.resources.ResourceArgs {

    public static final ConfigurationState Empty = new ConfigurationState();

    @Import(name="arn")
    private @Nullable Output<String> arn;

    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    @Import(name="authenticationStrategy")
    private @Nullable Output<String> authenticationStrategy;

    public Optional<Output<String>> authenticationStrategy() {
        return Optional.ofNullable(this.authenticationStrategy);
    }

    @Import(name="data")
    private @Nullable Output<String> data;

    public Optional<Output<String>> data() {
        return Optional.ofNullable(this.data);
    }

    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="engineType")
    private @Nullable Output<String> engineType;

    public Optional<Output<String>> engineType() {
        return Optional.ofNullable(this.engineType);
    }

    @Import(name="engineVersion")
    private @Nullable Output<String> engineVersion;

    public Optional<Output<String>> engineVersion() {
        return Optional.ofNullable(this.engineVersion);
    }

    @Import(name="latestRevision")
    private @Nullable Output<Integer> latestRevision;

    public Optional<Output<Integer>> latestRevision() {
        return Optional.ofNullable(this.latestRevision);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    private ConfigurationState() {}

    private ConfigurationState(ConfigurationState $) {
        this.arn = $.arn;
        this.authenticationStrategy = $.authenticationStrategy;
        this.data = $.data;
        this.description = $.description;
        this.engineType = $.engineType;
        this.engineVersion = $.engineVersion;
        this.latestRevision = $.latestRevision;
        this.name = $.name;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConfigurationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConfigurationState $;

        public Builder() {
            $ = new ConfigurationState();
        }

        public Builder(ConfigurationState defaults) {
            $ = new ConfigurationState(Objects.requireNonNull(defaults));
        }

        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        public Builder authenticationStrategy(@Nullable Output<String> authenticationStrategy) {
            $.authenticationStrategy = authenticationStrategy;
            return this;
        }

        public Builder authenticationStrategy(String authenticationStrategy) {
            return authenticationStrategy(Output.of(authenticationStrategy));
        }

        public Builder data(@Nullable Output<String> data) {
            $.data = data;
            return this;
        }

        public Builder data(String data) {
            return data(Output.of(data));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder engineType(@Nullable Output<String> engineType) {
            $.engineType = engineType;
            return this;
        }

        public Builder engineType(String engineType) {
            return engineType(Output.of(engineType));
        }

        public Builder engineVersion(@Nullable Output<String> engineVersion) {
            $.engineVersion = engineVersion;
            return this;
        }

        public Builder engineVersion(String engineVersion) {
            return engineVersion(Output.of(engineVersion));
        }

        public Builder latestRevision(@Nullable Output<Integer> latestRevision) {
            $.latestRevision = latestRevision;
            return this;
        }

        public Builder latestRevision(Integer latestRevision) {
            return latestRevision(Output.of(latestRevision));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        public ConfigurationState build() {
            return $;
        }
    }

}
