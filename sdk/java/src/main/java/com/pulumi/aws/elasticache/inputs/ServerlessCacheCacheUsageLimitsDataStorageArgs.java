// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.elasticache.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class ServerlessCacheCacheUsageLimitsDataStorageArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServerlessCacheCacheUsageLimitsDataStorageArgs Empty = new ServerlessCacheCacheUsageLimitsDataStorageArgs();

    /**
     * The upper limit for data storage the cache is set to use. Must be between 1 and 5,000.
     * 
     */
    @Import(name="maximum", required=true)
    private Output<Integer> maximum;

    /**
     * @return The upper limit for data storage the cache is set to use. Must be between 1 and 5,000.
     * 
     */
    public Output<Integer> maximum() {
        return this.maximum;
    }

    /**
     * The unit that the storage is measured in, in GB.
     * 
     */
    @Import(name="unit", required=true)
    private Output<String> unit;

    /**
     * @return The unit that the storage is measured in, in GB.
     * 
     */
    public Output<String> unit() {
        return this.unit;
    }

    private ServerlessCacheCacheUsageLimitsDataStorageArgs() {}

    private ServerlessCacheCacheUsageLimitsDataStorageArgs(ServerlessCacheCacheUsageLimitsDataStorageArgs $) {
        this.maximum = $.maximum;
        this.unit = $.unit;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServerlessCacheCacheUsageLimitsDataStorageArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServerlessCacheCacheUsageLimitsDataStorageArgs $;

        public Builder() {
            $ = new ServerlessCacheCacheUsageLimitsDataStorageArgs();
        }

        public Builder(ServerlessCacheCacheUsageLimitsDataStorageArgs defaults) {
            $ = new ServerlessCacheCacheUsageLimitsDataStorageArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param maximum The upper limit for data storage the cache is set to use. Must be between 1 and 5,000.
         * 
         * @return builder
         * 
         */
        public Builder maximum(Output<Integer> maximum) {
            $.maximum = maximum;
            return this;
        }

        /**
         * @param maximum The upper limit for data storage the cache is set to use. Must be between 1 and 5,000.
         * 
         * @return builder
         * 
         */
        public Builder maximum(Integer maximum) {
            return maximum(Output.of(maximum));
        }

        /**
         * @param unit The unit that the storage is measured in, in GB.
         * 
         * @return builder
         * 
         */
        public Builder unit(Output<String> unit) {
            $.unit = unit;
            return this;
        }

        /**
         * @param unit The unit that the storage is measured in, in GB.
         * 
         * @return builder
         * 
         */
        public Builder unit(String unit) {
            return unit(Output.of(unit));
        }

        public ServerlessCacheCacheUsageLimitsDataStorageArgs build() {
            if ($.maximum == null) {
                throw new MissingRequiredPropertyException("ServerlessCacheCacheUsageLimitsDataStorageArgs", "maximum");
            }
            if ($.unit == null) {
                throw new MissingRequiredPropertyException("ServerlessCacheCacheUsageLimitsDataStorageArgs", "unit");
            }
            return $;
        }
    }

}
