// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.bedrock.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.util.Objects;


public final class AgentDataSourceVectorIngestionConfigurationChunkingConfigurationHierarchicalChunkingConfigurationLevelConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final AgentDataSourceVectorIngestionConfigurationChunkingConfigurationHierarchicalChunkingConfigurationLevelConfigurationArgs Empty = new AgentDataSourceVectorIngestionConfigurationChunkingConfigurationHierarchicalChunkingConfigurationLevelConfigurationArgs();

    /**
     * The maximum number of tokens that a chunk can contain in this layer.
     * 
     */
    @Import(name="maxTokens", required=true)
    private Output<Integer> maxTokens;

    /**
     * @return The maximum number of tokens that a chunk can contain in this layer.
     * 
     */
    public Output<Integer> maxTokens() {
        return this.maxTokens;
    }

    private AgentDataSourceVectorIngestionConfigurationChunkingConfigurationHierarchicalChunkingConfigurationLevelConfigurationArgs() {}

    private AgentDataSourceVectorIngestionConfigurationChunkingConfigurationHierarchicalChunkingConfigurationLevelConfigurationArgs(AgentDataSourceVectorIngestionConfigurationChunkingConfigurationHierarchicalChunkingConfigurationLevelConfigurationArgs $) {
        this.maxTokens = $.maxTokens;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AgentDataSourceVectorIngestionConfigurationChunkingConfigurationHierarchicalChunkingConfigurationLevelConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AgentDataSourceVectorIngestionConfigurationChunkingConfigurationHierarchicalChunkingConfigurationLevelConfigurationArgs $;

        public Builder() {
            $ = new AgentDataSourceVectorIngestionConfigurationChunkingConfigurationHierarchicalChunkingConfigurationLevelConfigurationArgs();
        }

        public Builder(AgentDataSourceVectorIngestionConfigurationChunkingConfigurationHierarchicalChunkingConfigurationLevelConfigurationArgs defaults) {
            $ = new AgentDataSourceVectorIngestionConfigurationChunkingConfigurationHierarchicalChunkingConfigurationLevelConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param maxTokens The maximum number of tokens that a chunk can contain in this layer.
         * 
         * @return builder
         * 
         */
        public Builder maxTokens(Output<Integer> maxTokens) {
            $.maxTokens = maxTokens;
            return this;
        }

        /**
         * @param maxTokens The maximum number of tokens that a chunk can contain in this layer.
         * 
         * @return builder
         * 
         */
        public Builder maxTokens(Integer maxTokens) {
            return maxTokens(Output.of(maxTokens));
        }

        public AgentDataSourceVectorIngestionConfigurationChunkingConfigurationHierarchicalChunkingConfigurationLevelConfigurationArgs build() {
            if ($.maxTokens == null) {
                throw new MissingRequiredPropertyException("AgentDataSourceVectorIngestionConfigurationChunkingConfigurationHierarchicalChunkingConfigurationLevelConfigurationArgs", "maxTokens");
            }
            return $;
        }
    }

}
