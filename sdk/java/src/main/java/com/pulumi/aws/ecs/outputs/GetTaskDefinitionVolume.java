// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ecs.outputs;

import com.pulumi.aws.ecs.outputs.GetTaskDefinitionVolumeDockerVolumeConfiguration;
import com.pulumi.aws.ecs.outputs.GetTaskDefinitionVolumeEfsVolumeConfiguration;
import com.pulumi.aws.ecs.outputs.GetTaskDefinitionVolumeFsxWindowsFileServerVolumeConfiguration;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetTaskDefinitionVolume {
    /**
     * @return Whether the volume should be configured at launch time. This is used to create Amazon EBS volumes for standalone tasks or tasks created as part of a service. Each task definition revision may only have one volume configured at launch in the volume configuration.
     * 
     */
    private Boolean configureAtLaunch;
    /**
     * @return Configuration block to configure a docker volume. Detailed below.
     * 
     */
    private List<GetTaskDefinitionVolumeDockerVolumeConfiguration> dockerVolumeConfigurations;
    /**
     * @return Configuration block for an EFS volume. Detailed below.
     * 
     */
    private List<GetTaskDefinitionVolumeEfsVolumeConfiguration> efsVolumeConfigurations;
    /**
     * @return Configuration block for an FSX Windows File Server volume. Detailed below.
     * 
     */
    private List<GetTaskDefinitionVolumeFsxWindowsFileServerVolumeConfiguration> fsxWindowsFileServerVolumeConfigurations;
    /**
     * @return Path on the host container instance that is presented to the container. If not set, ECS will create a nonpersistent data volume that starts empty and is deleted after the task has finished.
     * 
     */
    private String hostPath;
    /**
     * @return Name of the volume. This name is referenced in the `sourceVolume`
     * parameter of container definition in the `mountPoints` section.
     * 
     */
    private String name;

    private GetTaskDefinitionVolume() {}
    /**
     * @return Whether the volume should be configured at launch time. This is used to create Amazon EBS volumes for standalone tasks or tasks created as part of a service. Each task definition revision may only have one volume configured at launch in the volume configuration.
     * 
     */
    public Boolean configureAtLaunch() {
        return this.configureAtLaunch;
    }
    /**
     * @return Configuration block to configure a docker volume. Detailed below.
     * 
     */
    public List<GetTaskDefinitionVolumeDockerVolumeConfiguration> dockerVolumeConfigurations() {
        return this.dockerVolumeConfigurations;
    }
    /**
     * @return Configuration block for an EFS volume. Detailed below.
     * 
     */
    public List<GetTaskDefinitionVolumeEfsVolumeConfiguration> efsVolumeConfigurations() {
        return this.efsVolumeConfigurations;
    }
    /**
     * @return Configuration block for an FSX Windows File Server volume. Detailed below.
     * 
     */
    public List<GetTaskDefinitionVolumeFsxWindowsFileServerVolumeConfiguration> fsxWindowsFileServerVolumeConfigurations() {
        return this.fsxWindowsFileServerVolumeConfigurations;
    }
    /**
     * @return Path on the host container instance that is presented to the container. If not set, ECS will create a nonpersistent data volume that starts empty and is deleted after the task has finished.
     * 
     */
    public String hostPath() {
        return this.hostPath;
    }
    /**
     * @return Name of the volume. This name is referenced in the `sourceVolume`
     * parameter of container definition in the `mountPoints` section.
     * 
     */
    public String name() {
        return this.name;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTaskDefinitionVolume defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean configureAtLaunch;
        private List<GetTaskDefinitionVolumeDockerVolumeConfiguration> dockerVolumeConfigurations;
        private List<GetTaskDefinitionVolumeEfsVolumeConfiguration> efsVolumeConfigurations;
        private List<GetTaskDefinitionVolumeFsxWindowsFileServerVolumeConfiguration> fsxWindowsFileServerVolumeConfigurations;
        private String hostPath;
        private String name;
        public Builder() {}
        public Builder(GetTaskDefinitionVolume defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.configureAtLaunch = defaults.configureAtLaunch;
    	      this.dockerVolumeConfigurations = defaults.dockerVolumeConfigurations;
    	      this.efsVolumeConfigurations = defaults.efsVolumeConfigurations;
    	      this.fsxWindowsFileServerVolumeConfigurations = defaults.fsxWindowsFileServerVolumeConfigurations;
    	      this.hostPath = defaults.hostPath;
    	      this.name = defaults.name;
        }

        @CustomType.Setter
        public Builder configureAtLaunch(Boolean configureAtLaunch) {
            if (configureAtLaunch == null) {
              throw new MissingRequiredPropertyException("GetTaskDefinitionVolume", "configureAtLaunch");
            }
            this.configureAtLaunch = configureAtLaunch;
            return this;
        }
        @CustomType.Setter
        public Builder dockerVolumeConfigurations(List<GetTaskDefinitionVolumeDockerVolumeConfiguration> dockerVolumeConfigurations) {
            if (dockerVolumeConfigurations == null) {
              throw new MissingRequiredPropertyException("GetTaskDefinitionVolume", "dockerVolumeConfigurations");
            }
            this.dockerVolumeConfigurations = dockerVolumeConfigurations;
            return this;
        }
        public Builder dockerVolumeConfigurations(GetTaskDefinitionVolumeDockerVolumeConfiguration... dockerVolumeConfigurations) {
            return dockerVolumeConfigurations(List.of(dockerVolumeConfigurations));
        }
        @CustomType.Setter
        public Builder efsVolumeConfigurations(List<GetTaskDefinitionVolumeEfsVolumeConfiguration> efsVolumeConfigurations) {
            if (efsVolumeConfigurations == null) {
              throw new MissingRequiredPropertyException("GetTaskDefinitionVolume", "efsVolumeConfigurations");
            }
            this.efsVolumeConfigurations = efsVolumeConfigurations;
            return this;
        }
        public Builder efsVolumeConfigurations(GetTaskDefinitionVolumeEfsVolumeConfiguration... efsVolumeConfigurations) {
            return efsVolumeConfigurations(List.of(efsVolumeConfigurations));
        }
        @CustomType.Setter
        public Builder fsxWindowsFileServerVolumeConfigurations(List<GetTaskDefinitionVolumeFsxWindowsFileServerVolumeConfiguration> fsxWindowsFileServerVolumeConfigurations) {
            if (fsxWindowsFileServerVolumeConfigurations == null) {
              throw new MissingRequiredPropertyException("GetTaskDefinitionVolume", "fsxWindowsFileServerVolumeConfigurations");
            }
            this.fsxWindowsFileServerVolumeConfigurations = fsxWindowsFileServerVolumeConfigurations;
            return this;
        }
        public Builder fsxWindowsFileServerVolumeConfigurations(GetTaskDefinitionVolumeFsxWindowsFileServerVolumeConfiguration... fsxWindowsFileServerVolumeConfigurations) {
            return fsxWindowsFileServerVolumeConfigurations(List.of(fsxWindowsFileServerVolumeConfigurations));
        }
        @CustomType.Setter
        public Builder hostPath(String hostPath) {
            if (hostPath == null) {
              throw new MissingRequiredPropertyException("GetTaskDefinitionVolume", "hostPath");
            }
            this.hostPath = hostPath;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetTaskDefinitionVolume", "name");
            }
            this.name = name;
            return this;
        }
        public GetTaskDefinitionVolume build() {
            final var _resultValue = new GetTaskDefinitionVolume();
            _resultValue.configureAtLaunch = configureAtLaunch;
            _resultValue.dockerVolumeConfigurations = dockerVolumeConfigurations;
            _resultValue.efsVolumeConfigurations = efsVolumeConfigurations;
            _resultValue.fsxWindowsFileServerVolumeConfigurations = fsxWindowsFileServerVolumeConfigurations;
            _resultValue.hostPath = hostPath;
            _resultValue.name = name;
            return _resultValue;
        }
    }
}
