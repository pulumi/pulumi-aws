// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.emrserverless.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ApplicationMaximumCapacityArgs extends com.pulumi.resources.ResourceArgs {

    public static final ApplicationMaximumCapacityArgs Empty = new ApplicationMaximumCapacityArgs();

    /**
     * The maximum allowed CPU for an application.
     * 
     */
    @Import(name="cpu", required=true)
    private Output<String> cpu;

    /**
     * @return The maximum allowed CPU for an application.
     * 
     */
    public Output<String> cpu() {
        return this.cpu;
    }

    /**
     * The maximum allowed disk for an application.
     * 
     */
    @Import(name="disk")
    private @Nullable Output<String> disk;

    /**
     * @return The maximum allowed disk for an application.
     * 
     */
    public Optional<Output<String>> disk() {
        return Optional.ofNullable(this.disk);
    }

    /**
     * The maximum allowed resources for an application.
     * 
     */
    @Import(name="memory", required=true)
    private Output<String> memory;

    /**
     * @return The maximum allowed resources for an application.
     * 
     */
    public Output<String> memory() {
        return this.memory;
    }

    private ApplicationMaximumCapacityArgs() {}

    private ApplicationMaximumCapacityArgs(ApplicationMaximumCapacityArgs $) {
        this.cpu = $.cpu;
        this.disk = $.disk;
        this.memory = $.memory;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApplicationMaximumCapacityArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApplicationMaximumCapacityArgs $;

        public Builder() {
            $ = new ApplicationMaximumCapacityArgs();
        }

        public Builder(ApplicationMaximumCapacityArgs defaults) {
            $ = new ApplicationMaximumCapacityArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cpu The maximum allowed CPU for an application.
         * 
         * @return builder
         * 
         */
        public Builder cpu(Output<String> cpu) {
            $.cpu = cpu;
            return this;
        }

        /**
         * @param cpu The maximum allowed CPU for an application.
         * 
         * @return builder
         * 
         */
        public Builder cpu(String cpu) {
            return cpu(Output.of(cpu));
        }

        /**
         * @param disk The maximum allowed disk for an application.
         * 
         * @return builder
         * 
         */
        public Builder disk(@Nullable Output<String> disk) {
            $.disk = disk;
            return this;
        }

        /**
         * @param disk The maximum allowed disk for an application.
         * 
         * @return builder
         * 
         */
        public Builder disk(String disk) {
            return disk(Output.of(disk));
        }

        /**
         * @param memory The maximum allowed resources for an application.
         * 
         * @return builder
         * 
         */
        public Builder memory(Output<String> memory) {
            $.memory = memory;
            return this;
        }

        /**
         * @param memory The maximum allowed resources for an application.
         * 
         * @return builder
         * 
         */
        public Builder memory(String memory) {
            return memory(Output.of(memory));
        }

        public ApplicationMaximumCapacityArgs build() {
            $.cpu = Objects.requireNonNull($.cpu, "expected parameter 'cpu' to be non-null");
            $.memory = Objects.requireNonNull($.memory, "expected parameter 'memory' to be non-null");
            return $;
        }
    }

}
