// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ec2;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VpcNetworkPerformanceMetricSubscriptionArgs extends com.pulumi.resources.ResourceArgs {

    public static final VpcNetworkPerformanceMetricSubscriptionArgs Empty = new VpcNetworkPerformanceMetricSubscriptionArgs();

    /**
     * The target Region or Availability Zone that the metric subscription is enabled for. For example, `eu-west-1`.
     * 
     */
    @Import(name="destination", required=true)
    private Output<String> destination;

    /**
     * @return The target Region or Availability Zone that the metric subscription is enabled for. For example, `eu-west-1`.
     * 
     */
    public Output<String> destination() {
        return this.destination;
    }

    /**
     * The metric used for the enabled subscription. Valid values: `aggregate-latency`. Default: `aggregate-latency`.
     * 
     */
    @Import(name="metric")
    private @Nullable Output<String> metric;

    /**
     * @return The metric used for the enabled subscription. Valid values: `aggregate-latency`. Default: `aggregate-latency`.
     * 
     */
    public Optional<Output<String>> metric() {
        return Optional.ofNullable(this.metric);
    }

    /**
     * The source Region or Availability Zone that the metric subscription is enabled for. For example, `us-east-1`.
     * 
     */
    @Import(name="source", required=true)
    private Output<String> source;

    /**
     * @return The source Region or Availability Zone that the metric subscription is enabled for. For example, `us-east-1`.
     * 
     */
    public Output<String> source() {
        return this.source;
    }

    /**
     * The statistic used for the enabled subscription. Valid values: `p50`. Default: `p50`.
     * 
     */
    @Import(name="statistic")
    private @Nullable Output<String> statistic;

    /**
     * @return The statistic used for the enabled subscription. Valid values: `p50`. Default: `p50`.
     * 
     */
    public Optional<Output<String>> statistic() {
        return Optional.ofNullable(this.statistic);
    }

    private VpcNetworkPerformanceMetricSubscriptionArgs() {}

    private VpcNetworkPerformanceMetricSubscriptionArgs(VpcNetworkPerformanceMetricSubscriptionArgs $) {
        this.destination = $.destination;
        this.metric = $.metric;
        this.source = $.source;
        this.statistic = $.statistic;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VpcNetworkPerformanceMetricSubscriptionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VpcNetworkPerformanceMetricSubscriptionArgs $;

        public Builder() {
            $ = new VpcNetworkPerformanceMetricSubscriptionArgs();
        }

        public Builder(VpcNetworkPerformanceMetricSubscriptionArgs defaults) {
            $ = new VpcNetworkPerformanceMetricSubscriptionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param destination The target Region or Availability Zone that the metric subscription is enabled for. For example, `eu-west-1`.
         * 
         * @return builder
         * 
         */
        public Builder destination(Output<String> destination) {
            $.destination = destination;
            return this;
        }

        /**
         * @param destination The target Region or Availability Zone that the metric subscription is enabled for. For example, `eu-west-1`.
         * 
         * @return builder
         * 
         */
        public Builder destination(String destination) {
            return destination(Output.of(destination));
        }

        /**
         * @param metric The metric used for the enabled subscription. Valid values: `aggregate-latency`. Default: `aggregate-latency`.
         * 
         * @return builder
         * 
         */
        public Builder metric(@Nullable Output<String> metric) {
            $.metric = metric;
            return this;
        }

        /**
         * @param metric The metric used for the enabled subscription. Valid values: `aggregate-latency`. Default: `aggregate-latency`.
         * 
         * @return builder
         * 
         */
        public Builder metric(String metric) {
            return metric(Output.of(metric));
        }

        /**
         * @param source The source Region or Availability Zone that the metric subscription is enabled for. For example, `us-east-1`.
         * 
         * @return builder
         * 
         */
        public Builder source(Output<String> source) {
            $.source = source;
            return this;
        }

        /**
         * @param source The source Region or Availability Zone that the metric subscription is enabled for. For example, `us-east-1`.
         * 
         * @return builder
         * 
         */
        public Builder source(String source) {
            return source(Output.of(source));
        }

        /**
         * @param statistic The statistic used for the enabled subscription. Valid values: `p50`. Default: `p50`.
         * 
         * @return builder
         * 
         */
        public Builder statistic(@Nullable Output<String> statistic) {
            $.statistic = statistic;
            return this;
        }

        /**
         * @param statistic The statistic used for the enabled subscription. Valid values: `p50`. Default: `p50`.
         * 
         * @return builder
         * 
         */
        public Builder statistic(String statistic) {
            return statistic(Output.of(statistic));
        }

        public VpcNetworkPerformanceMetricSubscriptionArgs build() {
            $.destination = Objects.requireNonNull($.destination, "expected parameter 'destination' to be non-null");
            $.source = Objects.requireNonNull($.source, "expected parameter 'source' to be non-null");
            return $;
        }
    }

}
