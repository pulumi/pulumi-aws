// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.imagebuilder.outputs;

import com.pulumi.aws.imagebuilder.outputs.GetImagePipelineImageScanningConfiguration;
import com.pulumi.aws.imagebuilder.outputs.GetImagePipelineImageTestsConfiguration;
import com.pulumi.aws.imagebuilder.outputs.GetImagePipelineSchedule;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetImagePipelineResult {
    private String arn;
    /**
     * @return ARN of the container recipe.
     * 
     */
    private String containerRecipeArn;
    /**
     * @return Date the image pipeline was created.
     * 
     */
    private String dateCreated;
    /**
     * @return Date the image pipeline was last run.
     * 
     */
    private String dateLastRun;
    /**
     * @return Date the image pipeline will run next.
     * 
     */
    private String dateNextRun;
    /**
     * @return Date the image pipeline was updated.
     * 
     */
    private String dateUpdated;
    /**
     * @return Description of the image pipeline.
     * 
     */
    private String description;
    /**
     * @return ARN of the Image Builder Distribution Configuration.
     * 
     */
    private String distributionConfigurationArn;
    /**
     * @return Whether additional information about the image being created is collected.
     * 
     */
    private Boolean enhancedImageMetadataEnabled;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return ARN of the image recipe.
     * 
     */
    private String imageRecipeArn;
    private List<GetImagePipelineImageScanningConfiguration> imageScanningConfigurations;
    /**
     * @return List of an object with image tests configuration.
     * 
     */
    private List<GetImagePipelineImageTestsConfiguration> imageTestsConfigurations;
    /**
     * @return ARN of the Image Builder Infrastructure Configuration.
     * 
     */
    private String infrastructureConfigurationArn;
    /**
     * @return Name of the image pipeline.
     * 
     */
    private String name;
    /**
     * @return Platform of the image pipeline.
     * 
     */
    private String platform;
    /**
     * @return List of an object with schedule settings.
     * 
     */
    private List<GetImagePipelineSchedule> schedules;
    /**
     * @return Status of the image pipeline.
     * 
     */
    private String status;
    /**
     * @return Key-value map of resource tags for the image pipeline.
     * 
     */
    private Map<String,String> tags;

    private GetImagePipelineResult() {}
    public String arn() {
        return this.arn;
    }
    /**
     * @return ARN of the container recipe.
     * 
     */
    public String containerRecipeArn() {
        return this.containerRecipeArn;
    }
    /**
     * @return Date the image pipeline was created.
     * 
     */
    public String dateCreated() {
        return this.dateCreated;
    }
    /**
     * @return Date the image pipeline was last run.
     * 
     */
    public String dateLastRun() {
        return this.dateLastRun;
    }
    /**
     * @return Date the image pipeline will run next.
     * 
     */
    public String dateNextRun() {
        return this.dateNextRun;
    }
    /**
     * @return Date the image pipeline was updated.
     * 
     */
    public String dateUpdated() {
        return this.dateUpdated;
    }
    /**
     * @return Description of the image pipeline.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return ARN of the Image Builder Distribution Configuration.
     * 
     */
    public String distributionConfigurationArn() {
        return this.distributionConfigurationArn;
    }
    /**
     * @return Whether additional information about the image being created is collected.
     * 
     */
    public Boolean enhancedImageMetadataEnabled() {
        return this.enhancedImageMetadataEnabled;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return ARN of the image recipe.
     * 
     */
    public String imageRecipeArn() {
        return this.imageRecipeArn;
    }
    public List<GetImagePipelineImageScanningConfiguration> imageScanningConfigurations() {
        return this.imageScanningConfigurations;
    }
    /**
     * @return List of an object with image tests configuration.
     * 
     */
    public List<GetImagePipelineImageTestsConfiguration> imageTestsConfigurations() {
        return this.imageTestsConfigurations;
    }
    /**
     * @return ARN of the Image Builder Infrastructure Configuration.
     * 
     */
    public String infrastructureConfigurationArn() {
        return this.infrastructureConfigurationArn;
    }
    /**
     * @return Name of the image pipeline.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Platform of the image pipeline.
     * 
     */
    public String platform() {
        return this.platform;
    }
    /**
     * @return List of an object with schedule settings.
     * 
     */
    public List<GetImagePipelineSchedule> schedules() {
        return this.schedules;
    }
    /**
     * @return Status of the image pipeline.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return Key-value map of resource tags for the image pipeline.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetImagePipelineResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String arn;
        private String containerRecipeArn;
        private String dateCreated;
        private String dateLastRun;
        private String dateNextRun;
        private String dateUpdated;
        private String description;
        private String distributionConfigurationArn;
        private Boolean enhancedImageMetadataEnabled;
        private String id;
        private String imageRecipeArn;
        private List<GetImagePipelineImageScanningConfiguration> imageScanningConfigurations;
        private List<GetImagePipelineImageTestsConfiguration> imageTestsConfigurations;
        private String infrastructureConfigurationArn;
        private String name;
        private String platform;
        private List<GetImagePipelineSchedule> schedules;
        private String status;
        private Map<String,String> tags;
        public Builder() {}
        public Builder(GetImagePipelineResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.containerRecipeArn = defaults.containerRecipeArn;
    	      this.dateCreated = defaults.dateCreated;
    	      this.dateLastRun = defaults.dateLastRun;
    	      this.dateNextRun = defaults.dateNextRun;
    	      this.dateUpdated = defaults.dateUpdated;
    	      this.description = defaults.description;
    	      this.distributionConfigurationArn = defaults.distributionConfigurationArn;
    	      this.enhancedImageMetadataEnabled = defaults.enhancedImageMetadataEnabled;
    	      this.id = defaults.id;
    	      this.imageRecipeArn = defaults.imageRecipeArn;
    	      this.imageScanningConfigurations = defaults.imageScanningConfigurations;
    	      this.imageTestsConfigurations = defaults.imageTestsConfigurations;
    	      this.infrastructureConfigurationArn = defaults.infrastructureConfigurationArn;
    	      this.name = defaults.name;
    	      this.platform = defaults.platform;
    	      this.schedules = defaults.schedules;
    	      this.status = defaults.status;
    	      this.tags = defaults.tags;
        }

        @CustomType.Setter
        public Builder arn(String arn) {
            if (arn == null) {
              throw new MissingRequiredPropertyException("GetImagePipelineResult", "arn");
            }
            this.arn = arn;
            return this;
        }
        @CustomType.Setter
        public Builder containerRecipeArn(String containerRecipeArn) {
            if (containerRecipeArn == null) {
              throw new MissingRequiredPropertyException("GetImagePipelineResult", "containerRecipeArn");
            }
            this.containerRecipeArn = containerRecipeArn;
            return this;
        }
        @CustomType.Setter
        public Builder dateCreated(String dateCreated) {
            if (dateCreated == null) {
              throw new MissingRequiredPropertyException("GetImagePipelineResult", "dateCreated");
            }
            this.dateCreated = dateCreated;
            return this;
        }
        @CustomType.Setter
        public Builder dateLastRun(String dateLastRun) {
            if (dateLastRun == null) {
              throw new MissingRequiredPropertyException("GetImagePipelineResult", "dateLastRun");
            }
            this.dateLastRun = dateLastRun;
            return this;
        }
        @CustomType.Setter
        public Builder dateNextRun(String dateNextRun) {
            if (dateNextRun == null) {
              throw new MissingRequiredPropertyException("GetImagePipelineResult", "dateNextRun");
            }
            this.dateNextRun = dateNextRun;
            return this;
        }
        @CustomType.Setter
        public Builder dateUpdated(String dateUpdated) {
            if (dateUpdated == null) {
              throw new MissingRequiredPropertyException("GetImagePipelineResult", "dateUpdated");
            }
            this.dateUpdated = dateUpdated;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetImagePipelineResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder distributionConfigurationArn(String distributionConfigurationArn) {
            if (distributionConfigurationArn == null) {
              throw new MissingRequiredPropertyException("GetImagePipelineResult", "distributionConfigurationArn");
            }
            this.distributionConfigurationArn = distributionConfigurationArn;
            return this;
        }
        @CustomType.Setter
        public Builder enhancedImageMetadataEnabled(Boolean enhancedImageMetadataEnabled) {
            if (enhancedImageMetadataEnabled == null) {
              throw new MissingRequiredPropertyException("GetImagePipelineResult", "enhancedImageMetadataEnabled");
            }
            this.enhancedImageMetadataEnabled = enhancedImageMetadataEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetImagePipelineResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder imageRecipeArn(String imageRecipeArn) {
            if (imageRecipeArn == null) {
              throw new MissingRequiredPropertyException("GetImagePipelineResult", "imageRecipeArn");
            }
            this.imageRecipeArn = imageRecipeArn;
            return this;
        }
        @CustomType.Setter
        public Builder imageScanningConfigurations(List<GetImagePipelineImageScanningConfiguration> imageScanningConfigurations) {
            if (imageScanningConfigurations == null) {
              throw new MissingRequiredPropertyException("GetImagePipelineResult", "imageScanningConfigurations");
            }
            this.imageScanningConfigurations = imageScanningConfigurations;
            return this;
        }
        public Builder imageScanningConfigurations(GetImagePipelineImageScanningConfiguration... imageScanningConfigurations) {
            return imageScanningConfigurations(List.of(imageScanningConfigurations));
        }
        @CustomType.Setter
        public Builder imageTestsConfigurations(List<GetImagePipelineImageTestsConfiguration> imageTestsConfigurations) {
            if (imageTestsConfigurations == null) {
              throw new MissingRequiredPropertyException("GetImagePipelineResult", "imageTestsConfigurations");
            }
            this.imageTestsConfigurations = imageTestsConfigurations;
            return this;
        }
        public Builder imageTestsConfigurations(GetImagePipelineImageTestsConfiguration... imageTestsConfigurations) {
            return imageTestsConfigurations(List.of(imageTestsConfigurations));
        }
        @CustomType.Setter
        public Builder infrastructureConfigurationArn(String infrastructureConfigurationArn) {
            if (infrastructureConfigurationArn == null) {
              throw new MissingRequiredPropertyException("GetImagePipelineResult", "infrastructureConfigurationArn");
            }
            this.infrastructureConfigurationArn = infrastructureConfigurationArn;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetImagePipelineResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder platform(String platform) {
            if (platform == null) {
              throw new MissingRequiredPropertyException("GetImagePipelineResult", "platform");
            }
            this.platform = platform;
            return this;
        }
        @CustomType.Setter
        public Builder schedules(List<GetImagePipelineSchedule> schedules) {
            if (schedules == null) {
              throw new MissingRequiredPropertyException("GetImagePipelineResult", "schedules");
            }
            this.schedules = schedules;
            return this;
        }
        public Builder schedules(GetImagePipelineSchedule... schedules) {
            return schedules(List.of(schedules));
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetImagePipelineResult", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetImagePipelineResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        public GetImagePipelineResult build() {
            final var _resultValue = new GetImagePipelineResult();
            _resultValue.arn = arn;
            _resultValue.containerRecipeArn = containerRecipeArn;
            _resultValue.dateCreated = dateCreated;
            _resultValue.dateLastRun = dateLastRun;
            _resultValue.dateNextRun = dateNextRun;
            _resultValue.dateUpdated = dateUpdated;
            _resultValue.description = description;
            _resultValue.distributionConfigurationArn = distributionConfigurationArn;
            _resultValue.enhancedImageMetadataEnabled = enhancedImageMetadataEnabled;
            _resultValue.id = id;
            _resultValue.imageRecipeArn = imageRecipeArn;
            _resultValue.imageScanningConfigurations = imageScanningConfigurations;
            _resultValue.imageTestsConfigurations = imageTestsConfigurations;
            _resultValue.infrastructureConfigurationArn = infrastructureConfigurationArn;
            _resultValue.name = name;
            _resultValue.platform = platform;
            _resultValue.schedules = schedules;
            _resultValue.status = status;
            _resultValue.tags = tags;
            return _resultValue;
        }
    }
}
