// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.vpclattice.inputs;

import com.pulumi.aws.vpclattice.inputs.ListenerRuleMatchHttpMatchHeaderMatchMatchArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ListenerRuleMatchHttpMatchHeaderMatchArgs extends com.pulumi.resources.ResourceArgs {

    public static final ListenerRuleMatchHttpMatchHeaderMatchArgs Empty = new ListenerRuleMatchHttpMatchHeaderMatchArgs();

    /**
     * Indicates whether the match is case sensitive. Defaults to false.
     * 
     */
    @Import(name="caseSensitive")
    private @Nullable Output<Boolean> caseSensitive;

    /**
     * @return Indicates whether the match is case sensitive. Defaults to false.
     * 
     */
    public Optional<Output<Boolean>> caseSensitive() {
        return Optional.ofNullable(this.caseSensitive);
    }

    /**
     * The header match type.
     * 
     */
    @Import(name="match", required=true)
    private Output<ListenerRuleMatchHttpMatchHeaderMatchMatchArgs> match;

    /**
     * @return The header match type.
     * 
     */
    public Output<ListenerRuleMatchHttpMatchHeaderMatchMatchArgs> match() {
        return this.match;
    }

    /**
     * The name of the header.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the header.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    private ListenerRuleMatchHttpMatchHeaderMatchArgs() {}

    private ListenerRuleMatchHttpMatchHeaderMatchArgs(ListenerRuleMatchHttpMatchHeaderMatchArgs $) {
        this.caseSensitive = $.caseSensitive;
        this.match = $.match;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ListenerRuleMatchHttpMatchHeaderMatchArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ListenerRuleMatchHttpMatchHeaderMatchArgs $;

        public Builder() {
            $ = new ListenerRuleMatchHttpMatchHeaderMatchArgs();
        }

        public Builder(ListenerRuleMatchHttpMatchHeaderMatchArgs defaults) {
            $ = new ListenerRuleMatchHttpMatchHeaderMatchArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param caseSensitive Indicates whether the match is case sensitive. Defaults to false.
         * 
         * @return builder
         * 
         */
        public Builder caseSensitive(@Nullable Output<Boolean> caseSensitive) {
            $.caseSensitive = caseSensitive;
            return this;
        }

        /**
         * @param caseSensitive Indicates whether the match is case sensitive. Defaults to false.
         * 
         * @return builder
         * 
         */
        public Builder caseSensitive(Boolean caseSensitive) {
            return caseSensitive(Output.of(caseSensitive));
        }

        /**
         * @param match The header match type.
         * 
         * @return builder
         * 
         */
        public Builder match(Output<ListenerRuleMatchHttpMatchHeaderMatchMatchArgs> match) {
            $.match = match;
            return this;
        }

        /**
         * @param match The header match type.
         * 
         * @return builder
         * 
         */
        public Builder match(ListenerRuleMatchHttpMatchHeaderMatchMatchArgs match) {
            return match(Output.of(match));
        }

        /**
         * @param name The name of the header.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the header.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public ListenerRuleMatchHttpMatchHeaderMatchArgs build() {
            $.match = Objects.requireNonNull($.match, "expected parameter 'match' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            return $;
        }
    }

}
