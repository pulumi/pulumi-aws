// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.amplify.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DomainAssociationSubDomainArgs extends com.pulumi.resources.ResourceArgs {

    public static final DomainAssociationSubDomainArgs Empty = new DomainAssociationSubDomainArgs();

    /**
     * Branch name setting for the subdomain.
     * 
     */
    @Import(name="branchName", required=true)
    private Output<String> branchName;

    /**
     * @return Branch name setting for the subdomain.
     * 
     */
    public Output<String> branchName() {
        return this.branchName;
    }

    /**
     * DNS record for the subdomain.
     * 
     */
    @Import(name="dnsRecord")
    private @Nullable Output<String> dnsRecord;

    /**
     * @return DNS record for the subdomain.
     * 
     */
    public Optional<Output<String>> dnsRecord() {
        return Optional.ofNullable(this.dnsRecord);
    }

    /**
     * Prefix setting for the subdomain.
     * 
     */
    @Import(name="prefix", required=true)
    private Output<String> prefix;

    /**
     * @return Prefix setting for the subdomain.
     * 
     */
    public Output<String> prefix() {
        return this.prefix;
    }

    /**
     * Verified status of the subdomain.
     * 
     */
    @Import(name="verified")
    private @Nullable Output<Boolean> verified;

    /**
     * @return Verified status of the subdomain.
     * 
     */
    public Optional<Output<Boolean>> verified() {
        return Optional.ofNullable(this.verified);
    }

    private DomainAssociationSubDomainArgs() {}

    private DomainAssociationSubDomainArgs(DomainAssociationSubDomainArgs $) {
        this.branchName = $.branchName;
        this.dnsRecord = $.dnsRecord;
        this.prefix = $.prefix;
        this.verified = $.verified;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DomainAssociationSubDomainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DomainAssociationSubDomainArgs $;

        public Builder() {
            $ = new DomainAssociationSubDomainArgs();
        }

        public Builder(DomainAssociationSubDomainArgs defaults) {
            $ = new DomainAssociationSubDomainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param branchName Branch name setting for the subdomain.
         * 
         * @return builder
         * 
         */
        public Builder branchName(Output<String> branchName) {
            $.branchName = branchName;
            return this;
        }

        /**
         * @param branchName Branch name setting for the subdomain.
         * 
         * @return builder
         * 
         */
        public Builder branchName(String branchName) {
            return branchName(Output.of(branchName));
        }

        /**
         * @param dnsRecord DNS record for the subdomain.
         * 
         * @return builder
         * 
         */
        public Builder dnsRecord(@Nullable Output<String> dnsRecord) {
            $.dnsRecord = dnsRecord;
            return this;
        }

        /**
         * @param dnsRecord DNS record for the subdomain.
         * 
         * @return builder
         * 
         */
        public Builder dnsRecord(String dnsRecord) {
            return dnsRecord(Output.of(dnsRecord));
        }

        /**
         * @param prefix Prefix setting for the subdomain.
         * 
         * @return builder
         * 
         */
        public Builder prefix(Output<String> prefix) {
            $.prefix = prefix;
            return this;
        }

        /**
         * @param prefix Prefix setting for the subdomain.
         * 
         * @return builder
         * 
         */
        public Builder prefix(String prefix) {
            return prefix(Output.of(prefix));
        }

        /**
         * @param verified Verified status of the subdomain.
         * 
         * @return builder
         * 
         */
        public Builder verified(@Nullable Output<Boolean> verified) {
            $.verified = verified;
            return this;
        }

        /**
         * @param verified Verified status of the subdomain.
         * 
         * @return builder
         * 
         */
        public Builder verified(Boolean verified) {
            return verified(Output.of(verified));
        }

        public DomainAssociationSubDomainArgs build() {
            if ($.branchName == null) {
                throw new MissingRequiredPropertyException("DomainAssociationSubDomainArgs", "branchName");
            }
            if ($.prefix == null) {
                throw new MissingRequiredPropertyException("DomainAssociationSubDomainArgs", "prefix");
            }
            return $;
        }
    }

}
