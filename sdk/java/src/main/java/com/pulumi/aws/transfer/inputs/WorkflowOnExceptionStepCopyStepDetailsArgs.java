// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.transfer.inputs;

import com.pulumi.aws.transfer.inputs.WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WorkflowOnExceptionStepCopyStepDetailsArgs extends com.pulumi.resources.ResourceArgs {

    public static final WorkflowOnExceptionStepCopyStepDetailsArgs Empty = new WorkflowOnExceptionStepCopyStepDetailsArgs();

    @Import(name="destinationFileLocation")
    private @Nullable Output<WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationArgs> destinationFileLocation;

    public Optional<Output<WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationArgs>> destinationFileLocation() {
        return Optional.ofNullable(this.destinationFileLocation);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="overwriteExisting")
    private @Nullable Output<String> overwriteExisting;

    public Optional<Output<String>> overwriteExisting() {
        return Optional.ofNullable(this.overwriteExisting);
    }

    @Import(name="sourceFileLocation")
    private @Nullable Output<String> sourceFileLocation;

    public Optional<Output<String>> sourceFileLocation() {
        return Optional.ofNullable(this.sourceFileLocation);
    }

    private WorkflowOnExceptionStepCopyStepDetailsArgs() {}

    private WorkflowOnExceptionStepCopyStepDetailsArgs(WorkflowOnExceptionStepCopyStepDetailsArgs $) {
        this.destinationFileLocation = $.destinationFileLocation;
        this.name = $.name;
        this.overwriteExisting = $.overwriteExisting;
        this.sourceFileLocation = $.sourceFileLocation;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WorkflowOnExceptionStepCopyStepDetailsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WorkflowOnExceptionStepCopyStepDetailsArgs $;

        public Builder() {
            $ = new WorkflowOnExceptionStepCopyStepDetailsArgs();
        }

        public Builder(WorkflowOnExceptionStepCopyStepDetailsArgs defaults) {
            $ = new WorkflowOnExceptionStepCopyStepDetailsArgs(Objects.requireNonNull(defaults));
        }

        public Builder destinationFileLocation(@Nullable Output<WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationArgs> destinationFileLocation) {
            $.destinationFileLocation = destinationFileLocation;
            return this;
        }

        public Builder destinationFileLocation(WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocationArgs destinationFileLocation) {
            return destinationFileLocation(Output.of(destinationFileLocation));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder overwriteExisting(@Nullable Output<String> overwriteExisting) {
            $.overwriteExisting = overwriteExisting;
            return this;
        }

        public Builder overwriteExisting(String overwriteExisting) {
            return overwriteExisting(Output.of(overwriteExisting));
        }

        public Builder sourceFileLocation(@Nullable Output<String> sourceFileLocation) {
            $.sourceFileLocation = sourceFileLocation;
            return this;
        }

        public Builder sourceFileLocation(String sourceFileLocation) {
            return sourceFileLocation(Output.of(sourceFileLocation));
        }

        public WorkflowOnExceptionStepCopyStepDetailsArgs build() {
            return $;
        }
    }

}
