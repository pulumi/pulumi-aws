// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.outputs;

import com.pulumi.aws.quicksight.outputs.DashboardDefinitionFilterGroupScopeConfiguration;
import com.pulumi.aws.quicksight.outputs.Filters;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DashboardDefinitionFilterGroup {
    private String crossDataset;
    private String filterGroupId;
    private List<Filters> filters;
    private DashboardDefinitionFilterGroupScopeConfiguration scopeConfiguration;
    /**
     * @return The dashboard creation status.
     * 
     */
    private @Nullable String status;

    private DashboardDefinitionFilterGroup() {}
    public String crossDataset() {
        return this.crossDataset;
    }
    public String filterGroupId() {
        return this.filterGroupId;
    }
    public List<Filters> filters() {
        return this.filters;
    }
    public DashboardDefinitionFilterGroupScopeConfiguration scopeConfiguration() {
        return this.scopeConfiguration;
    }
    /**
     * @return The dashboard creation status.
     * 
     */
    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DashboardDefinitionFilterGroup defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String crossDataset;
        private String filterGroupId;
        private List<Filters> filters;
        private DashboardDefinitionFilterGroupScopeConfiguration scopeConfiguration;
        private @Nullable String status;
        public Builder() {}
        public Builder(DashboardDefinitionFilterGroup defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.crossDataset = defaults.crossDataset;
    	      this.filterGroupId = defaults.filterGroupId;
    	      this.filters = defaults.filters;
    	      this.scopeConfiguration = defaults.scopeConfiguration;
    	      this.status = defaults.status;
        }

        @CustomType.Setter
        public Builder crossDataset(String crossDataset) {
            if (crossDataset == null) {
              throw new MissingRequiredPropertyException("DashboardDefinitionFilterGroup", "crossDataset");
            }
            this.crossDataset = crossDataset;
            return this;
        }
        @CustomType.Setter
        public Builder filterGroupId(String filterGroupId) {
            if (filterGroupId == null) {
              throw new MissingRequiredPropertyException("DashboardDefinitionFilterGroup", "filterGroupId");
            }
            this.filterGroupId = filterGroupId;
            return this;
        }
        @CustomType.Setter
        public Builder filters(List<Filters> filters) {
            if (filters == null) {
              throw new MissingRequiredPropertyException("DashboardDefinitionFilterGroup", "filters");
            }
            this.filters = filters;
            return this;
        }
        public Builder filters(Filters... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder scopeConfiguration(DashboardDefinitionFilterGroupScopeConfiguration scopeConfiguration) {
            if (scopeConfiguration == null) {
              throw new MissingRequiredPropertyException("DashboardDefinitionFilterGroup", "scopeConfiguration");
            }
            this.scopeConfiguration = scopeConfiguration;
            return this;
        }
        @CustomType.Setter
        public Builder status(@Nullable String status) {

            this.status = status;
            return this;
        }
        public DashboardDefinitionFilterGroup build() {
            final var _resultValue = new DashboardDefinitionFilterGroup();
            _resultValue.crossDataset = crossDataset;
            _resultValue.filterGroupId = filterGroupId;
            _resultValue.filters = filters;
            _resultValue.scopeConfiguration = scopeConfiguration;
            _resultValue.status = status;
            return _resultValue;
        }
    }
}
