// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.auditmanager.inputs;

import com.pulumi.aws.auditmanager.inputs.GetControlControlMappingSourceSourceKeyword;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetControlControlMappingSource extends com.pulumi.resources.InvokeArgs {

    public static final GetControlControlMappingSource Empty = new GetControlControlMappingSource();

    @Import(name="sourceDescription", required=true)
    private String sourceDescription;

    public String sourceDescription() {
        return this.sourceDescription;
    }

    @Import(name="sourceFrequency", required=true)
    private String sourceFrequency;

    public String sourceFrequency() {
        return this.sourceFrequency;
    }

    @Import(name="sourceId", required=true)
    private String sourceId;

    public String sourceId() {
        return this.sourceId;
    }

    @Import(name="sourceKeyword")
    private @Nullable GetControlControlMappingSourceSourceKeyword sourceKeyword;

    public Optional<GetControlControlMappingSourceSourceKeyword> sourceKeyword() {
        return Optional.ofNullable(this.sourceKeyword);
    }

    @Import(name="sourceName", required=true)
    private String sourceName;

    public String sourceName() {
        return this.sourceName;
    }

    @Import(name="sourceSetUpOption", required=true)
    private String sourceSetUpOption;

    public String sourceSetUpOption() {
        return this.sourceSetUpOption;
    }

    @Import(name="sourceType", required=true)
    private String sourceType;

    public String sourceType() {
        return this.sourceType;
    }

    @Import(name="troubleshootingText", required=true)
    private String troubleshootingText;

    public String troubleshootingText() {
        return this.troubleshootingText;
    }

    private GetControlControlMappingSource() {}

    private GetControlControlMappingSource(GetControlControlMappingSource $) {
        this.sourceDescription = $.sourceDescription;
        this.sourceFrequency = $.sourceFrequency;
        this.sourceId = $.sourceId;
        this.sourceKeyword = $.sourceKeyword;
        this.sourceName = $.sourceName;
        this.sourceSetUpOption = $.sourceSetUpOption;
        this.sourceType = $.sourceType;
        this.troubleshootingText = $.troubleshootingText;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetControlControlMappingSource defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetControlControlMappingSource $;

        public Builder() {
            $ = new GetControlControlMappingSource();
        }

        public Builder(GetControlControlMappingSource defaults) {
            $ = new GetControlControlMappingSource(Objects.requireNonNull(defaults));
        }

        public Builder sourceDescription(String sourceDescription) {
            $.sourceDescription = sourceDescription;
            return this;
        }

        public Builder sourceFrequency(String sourceFrequency) {
            $.sourceFrequency = sourceFrequency;
            return this;
        }

        public Builder sourceId(String sourceId) {
            $.sourceId = sourceId;
            return this;
        }

        public Builder sourceKeyword(@Nullable GetControlControlMappingSourceSourceKeyword sourceKeyword) {
            $.sourceKeyword = sourceKeyword;
            return this;
        }

        public Builder sourceName(String sourceName) {
            $.sourceName = sourceName;
            return this;
        }

        public Builder sourceSetUpOption(String sourceSetUpOption) {
            $.sourceSetUpOption = sourceSetUpOption;
            return this;
        }

        public Builder sourceType(String sourceType) {
            $.sourceType = sourceType;
            return this;
        }

        public Builder troubleshootingText(String troubleshootingText) {
            $.troubleshootingText = troubleshootingText;
            return this;
        }

        public GetControlControlMappingSource build() {
            if ($.sourceDescription == null) {
                throw new MissingRequiredPropertyException("GetControlControlMappingSource", "sourceDescription");
            }
            if ($.sourceFrequency == null) {
                throw new MissingRequiredPropertyException("GetControlControlMappingSource", "sourceFrequency");
            }
            if ($.sourceId == null) {
                throw new MissingRequiredPropertyException("GetControlControlMappingSource", "sourceId");
            }
            if ($.sourceName == null) {
                throw new MissingRequiredPropertyException("GetControlControlMappingSource", "sourceName");
            }
            if ($.sourceSetUpOption == null) {
                throw new MissingRequiredPropertyException("GetControlControlMappingSource", "sourceSetUpOption");
            }
            if ($.sourceType == null) {
                throw new MissingRequiredPropertyException("GetControlControlMappingSource", "sourceType");
            }
            if ($.troubleshootingText == null) {
                throw new MissingRequiredPropertyException("GetControlControlMappingSource", "troubleshootingText");
            }
            return $;
        }
    }

}
