// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.route53.outputs;

import com.pulumi.aws.route53.outputs.RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinates;
import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class RecordsExclusiveResourceRecordSetGeoproximityLocation {
    /**
     * @return AWS region of the resource where DNS traffic is directed to.
     * 
     */
    private @Nullable String awsRegion;
    /**
     * @return Increases or decreases the size of the geographic region from which Route 53 routes traffic to a resource.
     * To expand the size of the geographic region from which Route 53 routes traffic to a resource, specify a positive integer from `1` to `99`.
     * To shrink the size of the geographic region from which Route 53 routes traffic to a resource, specify a negative bias of `-1` to `-99`.
     * See the [AWS documentation](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy-geoproximity.html) for additional details.
     * 
     */
    private @Nullable Integer bias;
    /**
     * @return Coordinates for a geoproximity resource record.
     * See `coordinates` below.
     * 
     */
    private @Nullable RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinates coordinates;
    /**
     * @return AWS local zone group.
     * Identify the Local Zones Group for a specific Local Zone by using the [`describe-availability-zones` CLI command](https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-availability-zones.html).
     * 
     */
    private @Nullable String localZoneGroup;

    private RecordsExclusiveResourceRecordSetGeoproximityLocation() {}
    /**
     * @return AWS region of the resource where DNS traffic is directed to.
     * 
     */
    public Optional<String> awsRegion() {
        return Optional.ofNullable(this.awsRegion);
    }
    /**
     * @return Increases or decreases the size of the geographic region from which Route 53 routes traffic to a resource.
     * To expand the size of the geographic region from which Route 53 routes traffic to a resource, specify a positive integer from `1` to `99`.
     * To shrink the size of the geographic region from which Route 53 routes traffic to a resource, specify a negative bias of `-1` to `-99`.
     * See the [AWS documentation](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy-geoproximity.html) for additional details.
     * 
     */
    public Optional<Integer> bias() {
        return Optional.ofNullable(this.bias);
    }
    /**
     * @return Coordinates for a geoproximity resource record.
     * See `coordinates` below.
     * 
     */
    public Optional<RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinates> coordinates() {
        return Optional.ofNullable(this.coordinates);
    }
    /**
     * @return AWS local zone group.
     * Identify the Local Zones Group for a specific Local Zone by using the [`describe-availability-zones` CLI command](https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-availability-zones.html).
     * 
     */
    public Optional<String> localZoneGroup() {
        return Optional.ofNullable(this.localZoneGroup);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RecordsExclusiveResourceRecordSetGeoproximityLocation defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String awsRegion;
        private @Nullable Integer bias;
        private @Nullable RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinates coordinates;
        private @Nullable String localZoneGroup;
        public Builder() {}
        public Builder(RecordsExclusiveResourceRecordSetGeoproximityLocation defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.awsRegion = defaults.awsRegion;
    	      this.bias = defaults.bias;
    	      this.coordinates = defaults.coordinates;
    	      this.localZoneGroup = defaults.localZoneGroup;
        }

        @CustomType.Setter
        public Builder awsRegion(@Nullable String awsRegion) {

            this.awsRegion = awsRegion;
            return this;
        }
        @CustomType.Setter
        public Builder bias(@Nullable Integer bias) {

            this.bias = bias;
            return this;
        }
        @CustomType.Setter
        public Builder coordinates(@Nullable RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinates coordinates) {

            this.coordinates = coordinates;
            return this;
        }
        @CustomType.Setter
        public Builder localZoneGroup(@Nullable String localZoneGroup) {

            this.localZoneGroup = localZoneGroup;
            return this;
        }
        public RecordsExclusiveResourceRecordSetGeoproximityLocation build() {
            final var _resultValue = new RecordsExclusiveResourceRecordSetGeoproximityLocation();
            _resultValue.awsRegion = awsRegion;
            _resultValue.bias = bias;
            _resultValue.coordinates = coordinates;
            _resultValue.localZoneGroup = localZoneGroup;
            return _resultValue;
        }
    }
}
