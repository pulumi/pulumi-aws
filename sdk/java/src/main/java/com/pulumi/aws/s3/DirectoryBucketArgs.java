// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.s3;

import com.pulumi.aws.s3.inputs.DirectoryBucketLocationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DirectoryBucketArgs extends com.pulumi.resources.ResourceArgs {

    public static final DirectoryBucketArgs Empty = new DirectoryBucketArgs();

    /**
     * Name of the bucket. The name must be in the format `[bucket_name]--[azid]--x-s3`. Use the `aws.s3.BucketV2` resource to manage general purpose buckets.
     * 
     */
    @Import(name="bucket", required=true)
    private Output<String> bucket;

    /**
     * @return Name of the bucket. The name must be in the format `[bucket_name]--[azid]--x-s3`. Use the `aws.s3.BucketV2` resource to manage general purpose buckets.
     * 
     */
    public Output<String> bucket() {
        return this.bucket;
    }

    /**
     * Data redundancy. Valid values: `SingleAvailabilityZone`.
     * 
     */
    @Import(name="dataRedundancy")
    private @Nullable Output<String> dataRedundancy;

    /**
     * @return Data redundancy. Valid values: `SingleAvailabilityZone`.
     * 
     */
    public Optional<Output<String>> dataRedundancy() {
        return Optional.ofNullable(this.dataRedundancy);
    }

    /**
     * Boolean that indicates all objects should be deleted from the bucket *when the bucket is destroyed* so that the bucket can be destroyed without error. These objects are *not* recoverable. This only deletes objects when the bucket is destroyed, *not* when setting this parameter to `true`. Once this parameter is set to `true`, there must be a successful `pulumi up` run before a destroy is required to update this value in the resource state. Without a successful `pulumi up` after this parameter is set, this flag will have no effect. If setting this field in the same operation that would require replacing the bucket or destroying the bucket, this flag will not work. Additionally when importing a bucket, a successful `pulumi up` is required to set this value in state before it will take effect on a destroy operation.
     * 
     */
    @Import(name="forceDestroy")
    private @Nullable Output<Boolean> forceDestroy;

    /**
     * @return Boolean that indicates all objects should be deleted from the bucket *when the bucket is destroyed* so that the bucket can be destroyed without error. These objects are *not* recoverable. This only deletes objects when the bucket is destroyed, *not* when setting this parameter to `true`. Once this parameter is set to `true`, there must be a successful `pulumi up` run before a destroy is required to update this value in the resource state. Without a successful `pulumi up` after this parameter is set, this flag will have no effect. If setting this field in the same operation that would require replacing the bucket or destroying the bucket, this flag will not work. Additionally when importing a bucket, a successful `pulumi up` is required to set this value in state before it will take effect on a destroy operation.
     * 
     */
    public Optional<Output<Boolean>> forceDestroy() {
        return Optional.ofNullable(this.forceDestroy);
    }

    /**
     * Bucket location. See Location below for more details.
     * 
     */
    @Import(name="location")
    private @Nullable Output<DirectoryBucketLocationArgs> location;

    /**
     * @return Bucket location. See Location below for more details.
     * 
     */
    public Optional<Output<DirectoryBucketLocationArgs>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Bucket type. Valid values: `Directory`.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Bucket type. Valid values: `Directory`.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private DirectoryBucketArgs() {}

    private DirectoryBucketArgs(DirectoryBucketArgs $) {
        this.bucket = $.bucket;
        this.dataRedundancy = $.dataRedundancy;
        this.forceDestroy = $.forceDestroy;
        this.location = $.location;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DirectoryBucketArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DirectoryBucketArgs $;

        public Builder() {
            $ = new DirectoryBucketArgs();
        }

        public Builder(DirectoryBucketArgs defaults) {
            $ = new DirectoryBucketArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bucket Name of the bucket. The name must be in the format `[bucket_name]--[azid]--x-s3`. Use the `aws.s3.BucketV2` resource to manage general purpose buckets.
         * 
         * @return builder
         * 
         */
        public Builder bucket(Output<String> bucket) {
            $.bucket = bucket;
            return this;
        }

        /**
         * @param bucket Name of the bucket. The name must be in the format `[bucket_name]--[azid]--x-s3`. Use the `aws.s3.BucketV2` resource to manage general purpose buckets.
         * 
         * @return builder
         * 
         */
        public Builder bucket(String bucket) {
            return bucket(Output.of(bucket));
        }

        /**
         * @param dataRedundancy Data redundancy. Valid values: `SingleAvailabilityZone`.
         * 
         * @return builder
         * 
         */
        public Builder dataRedundancy(@Nullable Output<String> dataRedundancy) {
            $.dataRedundancy = dataRedundancy;
            return this;
        }

        /**
         * @param dataRedundancy Data redundancy. Valid values: `SingleAvailabilityZone`.
         * 
         * @return builder
         * 
         */
        public Builder dataRedundancy(String dataRedundancy) {
            return dataRedundancy(Output.of(dataRedundancy));
        }

        /**
         * @param forceDestroy Boolean that indicates all objects should be deleted from the bucket *when the bucket is destroyed* so that the bucket can be destroyed without error. These objects are *not* recoverable. This only deletes objects when the bucket is destroyed, *not* when setting this parameter to `true`. Once this parameter is set to `true`, there must be a successful `pulumi up` run before a destroy is required to update this value in the resource state. Without a successful `pulumi up` after this parameter is set, this flag will have no effect. If setting this field in the same operation that would require replacing the bucket or destroying the bucket, this flag will not work. Additionally when importing a bucket, a successful `pulumi up` is required to set this value in state before it will take effect on a destroy operation.
         * 
         * @return builder
         * 
         */
        public Builder forceDestroy(@Nullable Output<Boolean> forceDestroy) {
            $.forceDestroy = forceDestroy;
            return this;
        }

        /**
         * @param forceDestroy Boolean that indicates all objects should be deleted from the bucket *when the bucket is destroyed* so that the bucket can be destroyed without error. These objects are *not* recoverable. This only deletes objects when the bucket is destroyed, *not* when setting this parameter to `true`. Once this parameter is set to `true`, there must be a successful `pulumi up` run before a destroy is required to update this value in the resource state. Without a successful `pulumi up` after this parameter is set, this flag will have no effect. If setting this field in the same operation that would require replacing the bucket or destroying the bucket, this flag will not work. Additionally when importing a bucket, a successful `pulumi up` is required to set this value in state before it will take effect on a destroy operation.
         * 
         * @return builder
         * 
         */
        public Builder forceDestroy(Boolean forceDestroy) {
            return forceDestroy(Output.of(forceDestroy));
        }

        /**
         * @param location Bucket location. See Location below for more details.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<DirectoryBucketLocationArgs> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Bucket location. See Location below for more details.
         * 
         * @return builder
         * 
         */
        public Builder location(DirectoryBucketLocationArgs location) {
            return location(Output.of(location));
        }

        /**
         * @param type Bucket type. Valid values: `Directory`.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Bucket type. Valid values: `Directory`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public DirectoryBucketArgs build() {
            $.bucket = Objects.requireNonNull($.bucket, "expected parameter 'bucket' to be non-null");
            return $;
        }
    }

}
