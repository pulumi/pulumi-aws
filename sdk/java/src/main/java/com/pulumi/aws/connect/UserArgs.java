// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.connect;

import com.pulumi.aws.connect.inputs.UserIdentityInfoArgs;
import com.pulumi.aws.connect.inputs.UserPhoneConfigArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UserArgs extends com.pulumi.resources.ResourceArgs {

    public static final UserArgs Empty = new UserArgs();

    @Import(name="directoryUserId")
    private @Nullable Output<String> directoryUserId;

    public Optional<Output<String>> directoryUserId() {
        return Optional.ofNullable(this.directoryUserId);
    }

    @Import(name="hierarchyGroupId")
    private @Nullable Output<String> hierarchyGroupId;

    public Optional<Output<String>> hierarchyGroupId() {
        return Optional.ofNullable(this.hierarchyGroupId);
    }

    @Import(name="identityInfo")
    private @Nullable Output<UserIdentityInfoArgs> identityInfo;

    public Optional<Output<UserIdentityInfoArgs>> identityInfo() {
        return Optional.ofNullable(this.identityInfo);
    }

    @Import(name="instanceId", required=true)
    private Output<String> instanceId;

    public Output<String> instanceId() {
        return this.instanceId;
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="password")
    private @Nullable Output<String> password;

    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    @Import(name="phoneConfig", required=true)
    private Output<UserPhoneConfigArgs> phoneConfig;

    public Output<UserPhoneConfigArgs> phoneConfig() {
        return this.phoneConfig;
    }

    @Import(name="routingProfileId", required=true)
    private Output<String> routingProfileId;

    public Output<String> routingProfileId() {
        return this.routingProfileId;
    }

    @Import(name="securityProfileIds", required=true)
    private Output<List<String>> securityProfileIds;

    public Output<List<String>> securityProfileIds() {
        return this.securityProfileIds;
    }

    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private UserArgs() {}

    private UserArgs(UserArgs $) {
        this.directoryUserId = $.directoryUserId;
        this.hierarchyGroupId = $.hierarchyGroupId;
        this.identityInfo = $.identityInfo;
        this.instanceId = $.instanceId;
        this.name = $.name;
        this.password = $.password;
        this.phoneConfig = $.phoneConfig;
        this.routingProfileId = $.routingProfileId;
        this.securityProfileIds = $.securityProfileIds;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UserArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UserArgs $;

        public Builder() {
            $ = new UserArgs();
        }

        public Builder(UserArgs defaults) {
            $ = new UserArgs(Objects.requireNonNull(defaults));
        }

        public Builder directoryUserId(@Nullable Output<String> directoryUserId) {
            $.directoryUserId = directoryUserId;
            return this;
        }

        public Builder directoryUserId(String directoryUserId) {
            return directoryUserId(Output.of(directoryUserId));
        }

        public Builder hierarchyGroupId(@Nullable Output<String> hierarchyGroupId) {
            $.hierarchyGroupId = hierarchyGroupId;
            return this;
        }

        public Builder hierarchyGroupId(String hierarchyGroupId) {
            return hierarchyGroupId(Output.of(hierarchyGroupId));
        }

        public Builder identityInfo(@Nullable Output<UserIdentityInfoArgs> identityInfo) {
            $.identityInfo = identityInfo;
            return this;
        }

        public Builder identityInfo(UserIdentityInfoArgs identityInfo) {
            return identityInfo(Output.of(identityInfo));
        }

        public Builder instanceId(Output<String> instanceId) {
            $.instanceId = instanceId;
            return this;
        }

        public Builder instanceId(String instanceId) {
            return instanceId(Output.of(instanceId));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        public Builder password(String password) {
            return password(Output.of(password));
        }

        public Builder phoneConfig(Output<UserPhoneConfigArgs> phoneConfig) {
            $.phoneConfig = phoneConfig;
            return this;
        }

        public Builder phoneConfig(UserPhoneConfigArgs phoneConfig) {
            return phoneConfig(Output.of(phoneConfig));
        }

        public Builder routingProfileId(Output<String> routingProfileId) {
            $.routingProfileId = routingProfileId;
            return this;
        }

        public Builder routingProfileId(String routingProfileId) {
            return routingProfileId(Output.of(routingProfileId));
        }

        public Builder securityProfileIds(Output<List<String>> securityProfileIds) {
            $.securityProfileIds = securityProfileIds;
            return this;
        }

        public Builder securityProfileIds(List<String> securityProfileIds) {
            return securityProfileIds(Output.of(securityProfileIds));
        }

        public Builder securityProfileIds(String... securityProfileIds) {
            return securityProfileIds(List.of(securityProfileIds));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public UserArgs build() {
            $.instanceId = Objects.requireNonNull($.instanceId, "expected parameter 'instanceId' to be non-null");
            $.phoneConfig = Objects.requireNonNull($.phoneConfig, "expected parameter 'phoneConfig' to be non-null");
            $.routingProfileId = Objects.requireNonNull($.routingProfileId, "expected parameter 'routingProfileId' to be non-null");
            $.securityProfileIds = Objects.requireNonNull($.securityProfileIds, "expected parameter 'securityProfileIds' to be non-null");
            return $;
        }
    }

}
