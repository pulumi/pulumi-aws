// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ec2.inputs;

import com.pulumi.aws.ec2.inputs.GetVpcFilter;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetVpcPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetVpcPlainArgs Empty = new GetVpcPlainArgs();

    /**
     * Cidr block of the desired VPC.
     * 
     */
    @Import(name="cidrBlock")
    private @Nullable String cidrBlock;

    /**
     * @return Cidr block of the desired VPC.
     * 
     */
    public Optional<String> cidrBlock() {
        return Optional.ofNullable(this.cidrBlock);
    }

    /**
     * Boolean constraint on whether the desired VPC is
     * the default VPC for the region.
     * 
     */
    @Import(name="default")
    private @Nullable Boolean default_;

    /**
     * @return Boolean constraint on whether the desired VPC is
     * the default VPC for the region.
     * 
     */
    public Optional<Boolean> default_() {
        return Optional.ofNullable(this.default_);
    }

    /**
     * DHCP options id of the desired VPC.
     * 
     */
    @Import(name="dhcpOptionsId")
    private @Nullable String dhcpOptionsId;

    /**
     * @return DHCP options id of the desired VPC.
     * 
     */
    public Optional<String> dhcpOptionsId() {
        return Optional.ofNullable(this.dhcpOptionsId);
    }

    /**
     * Custom filter block as described below.
     * 
     */
    @Import(name="filters")
    private @Nullable List<GetVpcFilter> filters;

    /**
     * @return Custom filter block as described below.
     * 
     */
    public Optional<List<GetVpcFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * ID of the specific VPC to retrieve.
     * 
     */
    @Import(name="id")
    private @Nullable String id;

    /**
     * @return ID of the specific VPC to retrieve.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Current state of the desired VPC.
     * Can be either `&#34;pending&#34;` or `&#34;available&#34;`.
     * 
     */
    @Import(name="state")
    private @Nullable String state;

    /**
     * @return Current state of the desired VPC.
     * Can be either `&#34;pending&#34;` or `&#34;available&#34;`.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * Map of tags, each pair of which must exactly match
     * a pair on the desired VPC.
     * 
     */
    @Import(name="tags")
    private @Nullable Map<String,String> tags;

    /**
     * @return Map of tags, each pair of which must exactly match
     * a pair on the desired VPC.
     * 
     */
    public Optional<Map<String,String>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private GetVpcPlainArgs() {}

    private GetVpcPlainArgs(GetVpcPlainArgs $) {
        this.cidrBlock = $.cidrBlock;
        this.default_ = $.default_;
        this.dhcpOptionsId = $.dhcpOptionsId;
        this.filters = $.filters;
        this.id = $.id;
        this.state = $.state;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetVpcPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetVpcPlainArgs $;

        public Builder() {
            $ = new GetVpcPlainArgs();
        }

        public Builder(GetVpcPlainArgs defaults) {
            $ = new GetVpcPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cidrBlock Cidr block of the desired VPC.
         * 
         * @return builder
         * 
         */
        public Builder cidrBlock(@Nullable String cidrBlock) {
            $.cidrBlock = cidrBlock;
            return this;
        }

        /**
         * @param default_ Boolean constraint on whether the desired VPC is
         * the default VPC for the region.
         * 
         * @return builder
         * 
         */
        public Builder default_(@Nullable Boolean default_) {
            $.default_ = default_;
            return this;
        }

        /**
         * @param dhcpOptionsId DHCP options id of the desired VPC.
         * 
         * @return builder
         * 
         */
        public Builder dhcpOptionsId(@Nullable String dhcpOptionsId) {
            $.dhcpOptionsId = dhcpOptionsId;
            return this;
        }

        /**
         * @param filters Custom filter block as described below.
         * 
         * @return builder
         * 
         */
        public Builder filters(@Nullable List<GetVpcFilter> filters) {
            $.filters = filters;
            return this;
        }

        /**
         * @param filters Custom filter block as described below.
         * 
         * @return builder
         * 
         */
        public Builder filters(GetVpcFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param id ID of the specific VPC to retrieve.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable String id) {
            $.id = id;
            return this;
        }

        /**
         * @param state Current state of the desired VPC.
         * Can be either `&#34;pending&#34;` or `&#34;available&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable String state) {
            $.state = state;
            return this;
        }

        /**
         * @param tags Map of tags, each pair of which must exactly match
         * a pair on the desired VPC.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Map<String,String> tags) {
            $.tags = tags;
            return this;
        }

        public GetVpcPlainArgs build() {
            return $;
        }
    }

}
