// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.controltower;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class ControlTowerControlArgs extends com.pulumi.resources.ResourceArgs {

    public static final ControlTowerControlArgs Empty = new ControlTowerControlArgs();

    /**
     * The ARN of the control. Only Strongly recommended and Elective controls are permitted, with the exception of the Region deny guardrail.
     * 
     */
    @Import(name="controlIdentifier", required=true)
    private Output<String> controlIdentifier;

    /**
     * @return The ARN of the control. Only Strongly recommended and Elective controls are permitted, with the exception of the Region deny guardrail.
     * 
     */
    public Output<String> controlIdentifier() {
        return this.controlIdentifier;
    }

    /**
     * The ARN of the organizational unit.
     * 
     */
    @Import(name="targetIdentifier", required=true)
    private Output<String> targetIdentifier;

    /**
     * @return The ARN of the organizational unit.
     * 
     */
    public Output<String> targetIdentifier() {
        return this.targetIdentifier;
    }

    private ControlTowerControlArgs() {}

    private ControlTowerControlArgs(ControlTowerControlArgs $) {
        this.controlIdentifier = $.controlIdentifier;
        this.targetIdentifier = $.targetIdentifier;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ControlTowerControlArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ControlTowerControlArgs $;

        public Builder() {
            $ = new ControlTowerControlArgs();
        }

        public Builder(ControlTowerControlArgs defaults) {
            $ = new ControlTowerControlArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param controlIdentifier The ARN of the control. Only Strongly recommended and Elective controls are permitted, with the exception of the Region deny guardrail.
         * 
         * @return builder
         * 
         */
        public Builder controlIdentifier(Output<String> controlIdentifier) {
            $.controlIdentifier = controlIdentifier;
            return this;
        }

        /**
         * @param controlIdentifier The ARN of the control. Only Strongly recommended and Elective controls are permitted, with the exception of the Region deny guardrail.
         * 
         * @return builder
         * 
         */
        public Builder controlIdentifier(String controlIdentifier) {
            return controlIdentifier(Output.of(controlIdentifier));
        }

        /**
         * @param targetIdentifier The ARN of the organizational unit.
         * 
         * @return builder
         * 
         */
        public Builder targetIdentifier(Output<String> targetIdentifier) {
            $.targetIdentifier = targetIdentifier;
            return this;
        }

        /**
         * @param targetIdentifier The ARN of the organizational unit.
         * 
         * @return builder
         * 
         */
        public Builder targetIdentifier(String targetIdentifier) {
            return targetIdentifier(Output.of(targetIdentifier));
        }

        public ControlTowerControlArgs build() {
            $.controlIdentifier = Objects.requireNonNull($.controlIdentifier, "expected parameter 'controlIdentifier' to be non-null");
            $.targetIdentifier = Objects.requireNonNull($.targetIdentifier, "expected parameter 'targetIdentifier' to be non-null");
            return $;
        }
    }

}
