// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.controltower;

import com.pulumi.aws.controltower.inputs.ControlTowerControlParameterArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ControlTowerControlArgs extends com.pulumi.resources.ResourceArgs {

    public static final ControlTowerControlArgs Empty = new ControlTowerControlArgs();

    /**
     * The ARN of the control. Only Strongly recommended and Elective controls are permitted, with the exception of the Region deny guardrail.
     * 
     */
    @Import(name="controlIdentifier", required=true)
    private Output<String> controlIdentifier;

    /**
     * @return The ARN of the control. Only Strongly recommended and Elective controls are permitted, with the exception of the Region deny guardrail.
     * 
     */
    public Output<String> controlIdentifier() {
        return this.controlIdentifier;
    }

    /**
     * Parameter values which are specified to configure the control when you enable it. See Parameters for more details.
     * 
     */
    @Import(name="parameters")
    private @Nullable Output<List<ControlTowerControlParameterArgs>> parameters;

    /**
     * @return Parameter values which are specified to configure the control when you enable it. See Parameters for more details.
     * 
     */
    public Optional<Output<List<ControlTowerControlParameterArgs>>> parameters() {
        return Optional.ofNullable(this.parameters);
    }

    /**
     * The ARN of the organizational unit.
     * 
     * The following arguments are optional:
     * 
     */
    @Import(name="targetIdentifier", required=true)
    private Output<String> targetIdentifier;

    /**
     * @return The ARN of the organizational unit.
     * 
     * The following arguments are optional:
     * 
     */
    public Output<String> targetIdentifier() {
        return this.targetIdentifier;
    }

    private ControlTowerControlArgs() {}

    private ControlTowerControlArgs(ControlTowerControlArgs $) {
        this.controlIdentifier = $.controlIdentifier;
        this.parameters = $.parameters;
        this.targetIdentifier = $.targetIdentifier;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ControlTowerControlArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ControlTowerControlArgs $;

        public Builder() {
            $ = new ControlTowerControlArgs();
        }

        public Builder(ControlTowerControlArgs defaults) {
            $ = new ControlTowerControlArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param controlIdentifier The ARN of the control. Only Strongly recommended and Elective controls are permitted, with the exception of the Region deny guardrail.
         * 
         * @return builder
         * 
         */
        public Builder controlIdentifier(Output<String> controlIdentifier) {
            $.controlIdentifier = controlIdentifier;
            return this;
        }

        /**
         * @param controlIdentifier The ARN of the control. Only Strongly recommended and Elective controls are permitted, with the exception of the Region deny guardrail.
         * 
         * @return builder
         * 
         */
        public Builder controlIdentifier(String controlIdentifier) {
            return controlIdentifier(Output.of(controlIdentifier));
        }

        /**
         * @param parameters Parameter values which are specified to configure the control when you enable it. See Parameters for more details.
         * 
         * @return builder
         * 
         */
        public Builder parameters(@Nullable Output<List<ControlTowerControlParameterArgs>> parameters) {
            $.parameters = parameters;
            return this;
        }

        /**
         * @param parameters Parameter values which are specified to configure the control when you enable it. See Parameters for more details.
         * 
         * @return builder
         * 
         */
        public Builder parameters(List<ControlTowerControlParameterArgs> parameters) {
            return parameters(Output.of(parameters));
        }

        /**
         * @param parameters Parameter values which are specified to configure the control when you enable it. See Parameters for more details.
         * 
         * @return builder
         * 
         */
        public Builder parameters(ControlTowerControlParameterArgs... parameters) {
            return parameters(List.of(parameters));
        }

        /**
         * @param targetIdentifier The ARN of the organizational unit.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder targetIdentifier(Output<String> targetIdentifier) {
            $.targetIdentifier = targetIdentifier;
            return this;
        }

        /**
         * @param targetIdentifier The ARN of the organizational unit.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder targetIdentifier(String targetIdentifier) {
            return targetIdentifier(Output.of(targetIdentifier));
        }

        public ControlTowerControlArgs build() {
            if ($.controlIdentifier == null) {
                throw new MissingRequiredPropertyException("ControlTowerControlArgs", "controlIdentifier");
            }
            if ($.targetIdentifier == null) {
                throw new MissingRequiredPropertyException("ControlTowerControlArgs", "targetIdentifier");
            }
            return $;
        }
    }

}
