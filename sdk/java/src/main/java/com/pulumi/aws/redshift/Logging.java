// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.redshift;

import com.pulumi.aws.Utilities;
import com.pulumi.aws.redshift.LoggingArgs;
import com.pulumi.aws.redshift.inputs.LoggingState;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Resource for managing an AWS Redshift Logging configuration.
 * 
 * ## Example Usage
 * 
 * ### Basic Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.aws.redshift.Logging;
 * import com.pulumi.aws.redshift.LoggingArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new Logging(&#34;example&#34;, LoggingArgs.builder()        
 *             .clusterIdentifier(exampleAwsRedshiftCluster.id())
 *             .logDestinationType(&#34;cloudwatch&#34;)
 *             .logExports(            
 *                 &#34;connectionlog&#34;,
 *                 &#34;userlog&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ### S3 Destination Type
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.aws.redshift.Logging;
 * import com.pulumi.aws.redshift.LoggingArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new Logging(&#34;example&#34;, LoggingArgs.builder()        
 *             .clusterIdentifier(exampleAwsRedshiftCluster.id())
 *             .logDestinationType(&#34;s3&#34;)
 *             .bucketName(exampleAwsS3Bucket.id())
 *             .s3KeyPrefix(&#34;example-prefix/&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Using `pulumi import`, import Redshift Logging using the `id`. For example:
 * 
 * ```sh
 * $ pulumi import aws:redshift/logging:Logging example cluster-id-12345678
 * ```
 * 
 */
@ResourceType(type="aws:redshift/logging:Logging")
public class Logging extends com.pulumi.resources.CustomResource {
    /**
     * Name of an existing S3 bucket where the log files are to be stored. Required when `log_destination_type` is `s3`. Must be in the same region as the cluster and the cluster must have read bucket and put object permissions. For more information on the permissions required for the bucket, please read the AWS [documentation](http://docs.aws.amazon.com/redshift/latest/mgmt/db-auditing.html#db-auditing-enable-logging)
     * 
     */
    @Export(name="bucketName", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> bucketName;

    /**
     * @return Name of an existing S3 bucket where the log files are to be stored. Required when `log_destination_type` is `s3`. Must be in the same region as the cluster and the cluster must have read bucket and put object permissions. For more information on the permissions required for the bucket, please read the AWS [documentation](http://docs.aws.amazon.com/redshift/latest/mgmt/db-auditing.html#db-auditing-enable-logging)
     * 
     */
    public Output<Optional<String>> bucketName() {
        return Codegen.optional(this.bucketName);
    }
    /**
     * Identifier of the source cluster.
     * 
     * The following arguments are optional:
     * 
     */
    @Export(name="clusterIdentifier", refs={String.class}, tree="[0]")
    private Output<String> clusterIdentifier;

    /**
     * @return Identifier of the source cluster.
     * 
     * The following arguments are optional:
     * 
     */
    public Output<String> clusterIdentifier() {
        return this.clusterIdentifier;
    }
    /**
     * Log destination type. Valid values are `s3` and `cloudwatch`.
     * 
     */
    @Export(name="logDestinationType", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> logDestinationType;

    /**
     * @return Log destination type. Valid values are `s3` and `cloudwatch`.
     * 
     */
    public Output<Optional<String>> logDestinationType() {
        return Codegen.optional(this.logDestinationType);
    }
    /**
     * Collection of exported log types. Required when `log_destination_type` is `cloudwatch`. Valid values are `connectionlog`, `useractivitylog`, and `userlog`.
     * 
     */
    @Export(name="logExports", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> logExports;

    /**
     * @return Collection of exported log types. Required when `log_destination_type` is `cloudwatch`. Valid values are `connectionlog`, `useractivitylog`, and `userlog`.
     * 
     */
    public Output<Optional<List<String>>> logExports() {
        return Codegen.optional(this.logExports);
    }
    /**
     * Prefix applied to the log file names.
     * 
     */
    @Export(name="s3KeyPrefix", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> s3KeyPrefix;

    /**
     * @return Prefix applied to the log file names.
     * 
     */
    public Output<Optional<String>> s3KeyPrefix() {
        return Codegen.optional(this.s3KeyPrefix);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Logging(String name) {
        this(name, LoggingArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Logging(String name, LoggingArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Logging(String name, LoggingArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("aws:redshift/logging:Logging", name, args == null ? LoggingArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Logging(String name, Output<String> id, @Nullable LoggingState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("aws:redshift/logging:Logging", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Logging get(String name, Output<String> id, @Nullable LoggingState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Logging(name, id, state, options);
    }
}
