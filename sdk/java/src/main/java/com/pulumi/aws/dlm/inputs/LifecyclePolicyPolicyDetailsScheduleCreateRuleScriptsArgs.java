// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.dlm.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LifecyclePolicyPolicyDetailsScheduleCreateRuleScriptsArgs extends com.pulumi.resources.ResourceArgs {

    public static final LifecyclePolicyPolicyDetailsScheduleCreateRuleScriptsArgs Empty = new LifecyclePolicyPolicyDetailsScheduleCreateRuleScriptsArgs();

    /**
     * Indicates whether Amazon Data Lifecycle Manager should default to crash-consistent snapshots if the pre script fails. The default is `true`.
     * 
     */
    @Import(name="executeOperationOnScriptFailure")
    private @Nullable Output<Boolean> executeOperationOnScriptFailure;

    /**
     * @return Indicates whether Amazon Data Lifecycle Manager should default to crash-consistent snapshots if the pre script fails. The default is `true`.
     * 
     */
    public Optional<Output<Boolean>> executeOperationOnScriptFailure() {
        return Optional.ofNullable(this.executeOperationOnScriptFailure);
    }

    /**
     * The SSM document that includes the pre and/or post scripts to run. In case automating VSS backups, specify `AWS_VSS_BACKUP`. In case automating application-consistent snapshots for SAP HANA workloads, specify `AWSSystemsManagerSAP-CreateDLMSnapshotForSAPHANA`. If you are using a custom SSM document that you own, specify either the name or ARN of the SSM document.
     * 
     */
    @Import(name="executionHandler", required=true)
    private Output<String> executionHandler;

    /**
     * @return The SSM document that includes the pre and/or post scripts to run. In case automating VSS backups, specify `AWS_VSS_BACKUP`. In case automating application-consistent snapshots for SAP HANA workloads, specify `AWSSystemsManagerSAP-CreateDLMSnapshotForSAPHANA`. If you are using a custom SSM document that you own, specify either the name or ARN of the SSM document.
     * 
     */
    public Output<String> executionHandler() {
        return this.executionHandler;
    }

    /**
     * Indicates the service used to execute the pre and/or post scripts. If using custom SSM documents or automating application-consistent snapshots of SAP HANA workloads, specify `AWS_SYSTEMS_MANAGER`. In case automating VSS Backups, omit this parameter. The default is `AWS_SYSTEMS_MANAGER`.
     * 
     */
    @Import(name="executionHandlerService")
    private @Nullable Output<String> executionHandlerService;

    /**
     * @return Indicates the service used to execute the pre and/or post scripts. If using custom SSM documents or automating application-consistent snapshots of SAP HANA workloads, specify `AWS_SYSTEMS_MANAGER`. In case automating VSS Backups, omit this parameter. The default is `AWS_SYSTEMS_MANAGER`.
     * 
     */
    public Optional<Output<String>> executionHandlerService() {
        return Optional.ofNullable(this.executionHandlerService);
    }

    /**
     * Specifies a timeout period, in seconds, after which Amazon Data Lifecycle Manager fails the script run attempt if it has not completed. In case automating VSS Backups, omit this parameter. The default is `10`.
     * 
     */
    @Import(name="executionTimeout")
    private @Nullable Output<Integer> executionTimeout;

    /**
     * @return Specifies a timeout period, in seconds, after which Amazon Data Lifecycle Manager fails the script run attempt if it has not completed. In case automating VSS Backups, omit this parameter. The default is `10`.
     * 
     */
    public Optional<Output<Integer>> executionTimeout() {
        return Optional.ofNullable(this.executionTimeout);
    }

    /**
     * Specifies the number of times Amazon Data Lifecycle Manager should retry scripts that fail. Must be an integer between `0` and `3`. The default is `0`.
     * 
     */
    @Import(name="maximumRetryCount")
    private @Nullable Output<Integer> maximumRetryCount;

    /**
     * @return Specifies the number of times Amazon Data Lifecycle Manager should retry scripts that fail. Must be an integer between `0` and `3`. The default is `0`.
     * 
     */
    public Optional<Output<Integer>> maximumRetryCount() {
        return Optional.ofNullable(this.maximumRetryCount);
    }

    /**
     * List to indicate which scripts Amazon Data Lifecycle Manager should run on target instances. Pre scripts run before Amazon Data Lifecycle Manager initiates snapshot creation. Post scripts run after Amazon Data Lifecycle Manager initiates snapshot creation. Valid values: `PRE` and `POST`. The default is `PRE` and `POST`
     * 
     */
    @Import(name="stages")
    private @Nullable Output<List<String>> stages;

    /**
     * @return List to indicate which scripts Amazon Data Lifecycle Manager should run on target instances. Pre scripts run before Amazon Data Lifecycle Manager initiates snapshot creation. Post scripts run after Amazon Data Lifecycle Manager initiates snapshot creation. Valid values: `PRE` and `POST`. The default is `PRE` and `POST`
     * 
     */
    public Optional<Output<List<String>>> stages() {
        return Optional.ofNullable(this.stages);
    }

    private LifecyclePolicyPolicyDetailsScheduleCreateRuleScriptsArgs() {}

    private LifecyclePolicyPolicyDetailsScheduleCreateRuleScriptsArgs(LifecyclePolicyPolicyDetailsScheduleCreateRuleScriptsArgs $) {
        this.executeOperationOnScriptFailure = $.executeOperationOnScriptFailure;
        this.executionHandler = $.executionHandler;
        this.executionHandlerService = $.executionHandlerService;
        this.executionTimeout = $.executionTimeout;
        this.maximumRetryCount = $.maximumRetryCount;
        this.stages = $.stages;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LifecyclePolicyPolicyDetailsScheduleCreateRuleScriptsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LifecyclePolicyPolicyDetailsScheduleCreateRuleScriptsArgs $;

        public Builder() {
            $ = new LifecyclePolicyPolicyDetailsScheduleCreateRuleScriptsArgs();
        }

        public Builder(LifecyclePolicyPolicyDetailsScheduleCreateRuleScriptsArgs defaults) {
            $ = new LifecyclePolicyPolicyDetailsScheduleCreateRuleScriptsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param executeOperationOnScriptFailure Indicates whether Amazon Data Lifecycle Manager should default to crash-consistent snapshots if the pre script fails. The default is `true`.
         * 
         * @return builder
         * 
         */
        public Builder executeOperationOnScriptFailure(@Nullable Output<Boolean> executeOperationOnScriptFailure) {
            $.executeOperationOnScriptFailure = executeOperationOnScriptFailure;
            return this;
        }

        /**
         * @param executeOperationOnScriptFailure Indicates whether Amazon Data Lifecycle Manager should default to crash-consistent snapshots if the pre script fails. The default is `true`.
         * 
         * @return builder
         * 
         */
        public Builder executeOperationOnScriptFailure(Boolean executeOperationOnScriptFailure) {
            return executeOperationOnScriptFailure(Output.of(executeOperationOnScriptFailure));
        }

        /**
         * @param executionHandler The SSM document that includes the pre and/or post scripts to run. In case automating VSS backups, specify `AWS_VSS_BACKUP`. In case automating application-consistent snapshots for SAP HANA workloads, specify `AWSSystemsManagerSAP-CreateDLMSnapshotForSAPHANA`. If you are using a custom SSM document that you own, specify either the name or ARN of the SSM document.
         * 
         * @return builder
         * 
         */
        public Builder executionHandler(Output<String> executionHandler) {
            $.executionHandler = executionHandler;
            return this;
        }

        /**
         * @param executionHandler The SSM document that includes the pre and/or post scripts to run. In case automating VSS backups, specify `AWS_VSS_BACKUP`. In case automating application-consistent snapshots for SAP HANA workloads, specify `AWSSystemsManagerSAP-CreateDLMSnapshotForSAPHANA`. If you are using a custom SSM document that you own, specify either the name or ARN of the SSM document.
         * 
         * @return builder
         * 
         */
        public Builder executionHandler(String executionHandler) {
            return executionHandler(Output.of(executionHandler));
        }

        /**
         * @param executionHandlerService Indicates the service used to execute the pre and/or post scripts. If using custom SSM documents or automating application-consistent snapshots of SAP HANA workloads, specify `AWS_SYSTEMS_MANAGER`. In case automating VSS Backups, omit this parameter. The default is `AWS_SYSTEMS_MANAGER`.
         * 
         * @return builder
         * 
         */
        public Builder executionHandlerService(@Nullable Output<String> executionHandlerService) {
            $.executionHandlerService = executionHandlerService;
            return this;
        }

        /**
         * @param executionHandlerService Indicates the service used to execute the pre and/or post scripts. If using custom SSM documents or automating application-consistent snapshots of SAP HANA workloads, specify `AWS_SYSTEMS_MANAGER`. In case automating VSS Backups, omit this parameter. The default is `AWS_SYSTEMS_MANAGER`.
         * 
         * @return builder
         * 
         */
        public Builder executionHandlerService(String executionHandlerService) {
            return executionHandlerService(Output.of(executionHandlerService));
        }

        /**
         * @param executionTimeout Specifies a timeout period, in seconds, after which Amazon Data Lifecycle Manager fails the script run attempt if it has not completed. In case automating VSS Backups, omit this parameter. The default is `10`.
         * 
         * @return builder
         * 
         */
        public Builder executionTimeout(@Nullable Output<Integer> executionTimeout) {
            $.executionTimeout = executionTimeout;
            return this;
        }

        /**
         * @param executionTimeout Specifies a timeout period, in seconds, after which Amazon Data Lifecycle Manager fails the script run attempt if it has not completed. In case automating VSS Backups, omit this parameter. The default is `10`.
         * 
         * @return builder
         * 
         */
        public Builder executionTimeout(Integer executionTimeout) {
            return executionTimeout(Output.of(executionTimeout));
        }

        /**
         * @param maximumRetryCount Specifies the number of times Amazon Data Lifecycle Manager should retry scripts that fail. Must be an integer between `0` and `3`. The default is `0`.
         * 
         * @return builder
         * 
         */
        public Builder maximumRetryCount(@Nullable Output<Integer> maximumRetryCount) {
            $.maximumRetryCount = maximumRetryCount;
            return this;
        }

        /**
         * @param maximumRetryCount Specifies the number of times Amazon Data Lifecycle Manager should retry scripts that fail. Must be an integer between `0` and `3`. The default is `0`.
         * 
         * @return builder
         * 
         */
        public Builder maximumRetryCount(Integer maximumRetryCount) {
            return maximumRetryCount(Output.of(maximumRetryCount));
        }

        /**
         * @param stages List to indicate which scripts Amazon Data Lifecycle Manager should run on target instances. Pre scripts run before Amazon Data Lifecycle Manager initiates snapshot creation. Post scripts run after Amazon Data Lifecycle Manager initiates snapshot creation. Valid values: `PRE` and `POST`. The default is `PRE` and `POST`
         * 
         * @return builder
         * 
         */
        public Builder stages(@Nullable Output<List<String>> stages) {
            $.stages = stages;
            return this;
        }

        /**
         * @param stages List to indicate which scripts Amazon Data Lifecycle Manager should run on target instances. Pre scripts run before Amazon Data Lifecycle Manager initiates snapshot creation. Post scripts run after Amazon Data Lifecycle Manager initiates snapshot creation. Valid values: `PRE` and `POST`. The default is `PRE` and `POST`
         * 
         * @return builder
         * 
         */
        public Builder stages(List<String> stages) {
            return stages(Output.of(stages));
        }

        /**
         * @param stages List to indicate which scripts Amazon Data Lifecycle Manager should run on target instances. Pre scripts run before Amazon Data Lifecycle Manager initiates snapshot creation. Post scripts run after Amazon Data Lifecycle Manager initiates snapshot creation. Valid values: `PRE` and `POST`. The default is `PRE` and `POST`
         * 
         * @return builder
         * 
         */
        public Builder stages(String... stages) {
            return stages(List.of(stages));
        }

        public LifecyclePolicyPolicyDetailsScheduleCreateRuleScriptsArgs build() {
            if ($.executionHandler == null) {
                throw new MissingRequiredPropertyException("LifecyclePolicyPolicyDetailsScheduleCreateRuleScriptsArgs", "executionHandler");
            }
            return $;
        }
    }

}
