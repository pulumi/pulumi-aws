// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FolderMembershipArgs extends com.pulumi.resources.ResourceArgs {

    public static final FolderMembershipArgs Empty = new FolderMembershipArgs();

    /**
     * AWS account ID.
     * 
     */
    @Import(name="awsAccountId")
    private @Nullable Output<String> awsAccountId;

    /**
     * @return AWS account ID.
     * 
     */
    public Optional<Output<String>> awsAccountId() {
        return Optional.ofNullable(this.awsAccountId);
    }

    /**
     * Identifier for the folder.
     * 
     */
    @Import(name="folderId", required=true)
    private Output<String> folderId;

    /**
     * @return Identifier for the folder.
     * 
     */
    public Output<String> folderId() {
        return this.folderId;
    }

    /**
     * ID of the asset (the dashboard, analysis, or dataset).
     * 
     */
    @Import(name="memberId", required=true)
    private Output<String> memberId;

    /**
     * @return ID of the asset (the dashboard, analysis, or dataset).
     * 
     */
    public Output<String> memberId() {
        return this.memberId;
    }

    /**
     * Type of the member. Valid values are `ANALYSIS`, `DASHBOARD`, and `DATASET`.
     * 
     * The following arguments are optional:
     * 
     */
    @Import(name="memberType", required=true)
    private Output<String> memberType;

    /**
     * @return Type of the member. Valid values are `ANALYSIS`, `DASHBOARD`, and `DATASET`.
     * 
     * The following arguments are optional:
     * 
     */
    public Output<String> memberType() {
        return this.memberType;
    }

    private FolderMembershipArgs() {}

    private FolderMembershipArgs(FolderMembershipArgs $) {
        this.awsAccountId = $.awsAccountId;
        this.folderId = $.folderId;
        this.memberId = $.memberId;
        this.memberType = $.memberType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FolderMembershipArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FolderMembershipArgs $;

        public Builder() {
            $ = new FolderMembershipArgs();
        }

        public Builder(FolderMembershipArgs defaults) {
            $ = new FolderMembershipArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param awsAccountId AWS account ID.
         * 
         * @return builder
         * 
         */
        public Builder awsAccountId(@Nullable Output<String> awsAccountId) {
            $.awsAccountId = awsAccountId;
            return this;
        }

        /**
         * @param awsAccountId AWS account ID.
         * 
         * @return builder
         * 
         */
        public Builder awsAccountId(String awsAccountId) {
            return awsAccountId(Output.of(awsAccountId));
        }

        /**
         * @param folderId Identifier for the folder.
         * 
         * @return builder
         * 
         */
        public Builder folderId(Output<String> folderId) {
            $.folderId = folderId;
            return this;
        }

        /**
         * @param folderId Identifier for the folder.
         * 
         * @return builder
         * 
         */
        public Builder folderId(String folderId) {
            return folderId(Output.of(folderId));
        }

        /**
         * @param memberId ID of the asset (the dashboard, analysis, or dataset).
         * 
         * @return builder
         * 
         */
        public Builder memberId(Output<String> memberId) {
            $.memberId = memberId;
            return this;
        }

        /**
         * @param memberId ID of the asset (the dashboard, analysis, or dataset).
         * 
         * @return builder
         * 
         */
        public Builder memberId(String memberId) {
            return memberId(Output.of(memberId));
        }

        /**
         * @param memberType Type of the member. Valid values are `ANALYSIS`, `DASHBOARD`, and `DATASET`.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder memberType(Output<String> memberType) {
            $.memberType = memberType;
            return this;
        }

        /**
         * @param memberType Type of the member. Valid values are `ANALYSIS`, `DASHBOARD`, and `DATASET`.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder memberType(String memberType) {
            return memberType(Output.of(memberType));
        }

        public FolderMembershipArgs build() {
            if ($.folderId == null) {
                throw new MissingRequiredPropertyException("FolderMembershipArgs", "folderId");
            }
            if ($.memberId == null) {
                throw new MissingRequiredPropertyException("FolderMembershipArgs", "memberId");
            }
            if ($.memberType == null) {
                throw new MissingRequiredPropertyException("FolderMembershipArgs", "memberType");
            }
            return $;
        }
    }

}
