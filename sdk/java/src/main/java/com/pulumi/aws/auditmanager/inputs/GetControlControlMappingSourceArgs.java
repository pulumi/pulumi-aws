// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.auditmanager.inputs;

import com.pulumi.aws.auditmanager.inputs.GetControlControlMappingSourceSourceKeywordArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetControlControlMappingSourceArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetControlControlMappingSourceArgs Empty = new GetControlControlMappingSourceArgs();

    @Import(name="sourceDescription")
    private @Nullable Output<String> sourceDescription;

    public Optional<Output<String>> sourceDescription() {
        return Optional.ofNullable(this.sourceDescription);
    }

    @Import(name="sourceFrequency")
    private @Nullable Output<String> sourceFrequency;

    public Optional<Output<String>> sourceFrequency() {
        return Optional.ofNullable(this.sourceFrequency);
    }

    @Import(name="sourceId")
    private @Nullable Output<String> sourceId;

    public Optional<Output<String>> sourceId() {
        return Optional.ofNullable(this.sourceId);
    }

    @Import(name="sourceKeyword")
    private @Nullable Output<GetControlControlMappingSourceSourceKeywordArgs> sourceKeyword;

    public Optional<Output<GetControlControlMappingSourceSourceKeywordArgs>> sourceKeyword() {
        return Optional.ofNullable(this.sourceKeyword);
    }

    @Import(name="sourceName")
    private @Nullable Output<String> sourceName;

    public Optional<Output<String>> sourceName() {
        return Optional.ofNullable(this.sourceName);
    }

    @Import(name="sourceSetUpOption")
    private @Nullable Output<String> sourceSetUpOption;

    public Optional<Output<String>> sourceSetUpOption() {
        return Optional.ofNullable(this.sourceSetUpOption);
    }

    @Import(name="sourceType")
    private @Nullable Output<String> sourceType;

    public Optional<Output<String>> sourceType() {
        return Optional.ofNullable(this.sourceType);
    }

    @Import(name="troubleshootingText")
    private @Nullable Output<String> troubleshootingText;

    public Optional<Output<String>> troubleshootingText() {
        return Optional.ofNullable(this.troubleshootingText);
    }

    private GetControlControlMappingSourceArgs() {}

    private GetControlControlMappingSourceArgs(GetControlControlMappingSourceArgs $) {
        this.sourceDescription = $.sourceDescription;
        this.sourceFrequency = $.sourceFrequency;
        this.sourceId = $.sourceId;
        this.sourceKeyword = $.sourceKeyword;
        this.sourceName = $.sourceName;
        this.sourceSetUpOption = $.sourceSetUpOption;
        this.sourceType = $.sourceType;
        this.troubleshootingText = $.troubleshootingText;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetControlControlMappingSourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetControlControlMappingSourceArgs $;

        public Builder() {
            $ = new GetControlControlMappingSourceArgs();
        }

        public Builder(GetControlControlMappingSourceArgs defaults) {
            $ = new GetControlControlMappingSourceArgs(Objects.requireNonNull(defaults));
        }

        public Builder sourceDescription(@Nullable Output<String> sourceDescription) {
            $.sourceDescription = sourceDescription;
            return this;
        }

        public Builder sourceDescription(String sourceDescription) {
            return sourceDescription(Output.of(sourceDescription));
        }

        public Builder sourceFrequency(@Nullable Output<String> sourceFrequency) {
            $.sourceFrequency = sourceFrequency;
            return this;
        }

        public Builder sourceFrequency(String sourceFrequency) {
            return sourceFrequency(Output.of(sourceFrequency));
        }

        public Builder sourceId(@Nullable Output<String> sourceId) {
            $.sourceId = sourceId;
            return this;
        }

        public Builder sourceId(String sourceId) {
            return sourceId(Output.of(sourceId));
        }

        public Builder sourceKeyword(@Nullable Output<GetControlControlMappingSourceSourceKeywordArgs> sourceKeyword) {
            $.sourceKeyword = sourceKeyword;
            return this;
        }

        public Builder sourceKeyword(GetControlControlMappingSourceSourceKeywordArgs sourceKeyword) {
            return sourceKeyword(Output.of(sourceKeyword));
        }

        public Builder sourceName(@Nullable Output<String> sourceName) {
            $.sourceName = sourceName;
            return this;
        }

        public Builder sourceName(String sourceName) {
            return sourceName(Output.of(sourceName));
        }

        public Builder sourceSetUpOption(@Nullable Output<String> sourceSetUpOption) {
            $.sourceSetUpOption = sourceSetUpOption;
            return this;
        }

        public Builder sourceSetUpOption(String sourceSetUpOption) {
            return sourceSetUpOption(Output.of(sourceSetUpOption));
        }

        public Builder sourceType(@Nullable Output<String> sourceType) {
            $.sourceType = sourceType;
            return this;
        }

        public Builder sourceType(String sourceType) {
            return sourceType(Output.of(sourceType));
        }

        public Builder troubleshootingText(@Nullable Output<String> troubleshootingText) {
            $.troubleshootingText = troubleshootingText;
            return this;
        }

        public Builder troubleshootingText(String troubleshootingText) {
            return troubleshootingText(Output.of(troubleshootingText));
        }

        public GetControlControlMappingSourceArgs build() {
            return $;
        }
    }

}
