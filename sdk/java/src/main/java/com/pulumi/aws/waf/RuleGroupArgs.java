// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.waf;

import com.pulumi.aws.waf.inputs.RuleGroupActivatedRuleArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RuleGroupArgs extends com.pulumi.resources.ResourceArgs {

    public static final RuleGroupArgs Empty = new RuleGroupArgs();

    /**
     * A list of activated rules, see below
     * 
     */
    @Import(name="activatedRules")
    private @Nullable Output<List<RuleGroupActivatedRuleArgs>> activatedRules;

    /**
     * @return A list of activated rules, see below
     * 
     */
    public Optional<Output<List<RuleGroupActivatedRuleArgs>>> activatedRules() {
        return Optional.ofNullable(this.activatedRules);
    }

    /**
     * A friendly name for the metrics from the rule group
     * 
     */
    @Import(name="metricName", required=true)
    private Output<String> metricName;

    /**
     * @return A friendly name for the metrics from the rule group
     * 
     */
    public Output<String> metricName() {
        return this.metricName;
    }

    /**
     * Name of the rule group. If omitted, the provider will assign a random, unique name. Conflicts with `name_prefix`.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the rule group. If omitted, the provider will assign a random, unique name. Conflicts with `name_prefix`.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Key-value map of resource tags. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Key-value map of resource tags. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private RuleGroupArgs() {}

    private RuleGroupArgs(RuleGroupArgs $) {
        this.activatedRules = $.activatedRules;
        this.metricName = $.metricName;
        this.name = $.name;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RuleGroupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RuleGroupArgs $;

        public Builder() {
            $ = new RuleGroupArgs();
        }

        public Builder(RuleGroupArgs defaults) {
            $ = new RuleGroupArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param activatedRules A list of activated rules, see below
         * 
         * @return builder
         * 
         */
        public Builder activatedRules(@Nullable Output<List<RuleGroupActivatedRuleArgs>> activatedRules) {
            $.activatedRules = activatedRules;
            return this;
        }

        /**
         * @param activatedRules A list of activated rules, see below
         * 
         * @return builder
         * 
         */
        public Builder activatedRules(List<RuleGroupActivatedRuleArgs> activatedRules) {
            return activatedRules(Output.of(activatedRules));
        }

        /**
         * @param activatedRules A list of activated rules, see below
         * 
         * @return builder
         * 
         */
        public Builder activatedRules(RuleGroupActivatedRuleArgs... activatedRules) {
            return activatedRules(List.of(activatedRules));
        }

        /**
         * @param metricName A friendly name for the metrics from the rule group
         * 
         * @return builder
         * 
         */
        public Builder metricName(Output<String> metricName) {
            $.metricName = metricName;
            return this;
        }

        /**
         * @param metricName A friendly name for the metrics from the rule group
         * 
         * @return builder
         * 
         */
        public Builder metricName(String metricName) {
            return metricName(Output.of(metricName));
        }

        /**
         * @param name Name of the rule group. If omitted, the provider will assign a random, unique name. Conflicts with `name_prefix`.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the rule group. If omitted, the provider will assign a random, unique name. Conflicts with `name_prefix`.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param tags Key-value map of resource tags. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Key-value map of resource tags. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public RuleGroupArgs build() {
            $.metricName = Objects.requireNonNull($.metricName, "expected parameter 'metricName' to be non-null");
            return $;
        }
    }

}
