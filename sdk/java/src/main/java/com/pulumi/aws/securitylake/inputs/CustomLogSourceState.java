// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.securitylake.inputs;

import com.pulumi.aws.securitylake.inputs.CustomLogSourceAttributeArgs;
import com.pulumi.aws.securitylake.inputs.CustomLogSourceConfigurationArgs;
import com.pulumi.aws.securitylake.inputs.CustomLogSourceProviderDetailArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CustomLogSourceState extends com.pulumi.resources.ResourceArgs {

    public static final CustomLogSourceState Empty = new CustomLogSourceState();

    /**
     * The attributes of a third-party custom source.
     * 
     */
    @Import(name="attributes")
    private @Nullable Output<List<CustomLogSourceAttributeArgs>> attributes;

    /**
     * @return The attributes of a third-party custom source.
     * 
     */
    public Optional<Output<List<CustomLogSourceAttributeArgs>>> attributes() {
        return Optional.ofNullable(this.attributes);
    }

    /**
     * The configuration for the third-party custom source.
     * 
     */
    @Import(name="configuration")
    private @Nullable Output<CustomLogSourceConfigurationArgs> configuration;

    /**
     * @return The configuration for the third-party custom source.
     * 
     */
    public Optional<Output<CustomLogSourceConfigurationArgs>> configuration() {
        return Optional.ofNullable(this.configuration);
    }

    /**
     * The Open Cybersecurity Schema Framework (OCSF) event classes which describes the type of data that the custom source will send to Security Lake.
     * 
     */
    @Import(name="eventClasses")
    private @Nullable Output<List<String>> eventClasses;

    /**
     * @return The Open Cybersecurity Schema Framework (OCSF) event classes which describes the type of data that the custom source will send to Security Lake.
     * 
     */
    public Optional<Output<List<String>>> eventClasses() {
        return Optional.ofNullable(this.eventClasses);
    }

    /**
     * The details of the log provider for a third-party custom source.
     * 
     */
    @Import(name="providerDetails")
    private @Nullable Output<List<CustomLogSourceProviderDetailArgs>> providerDetails;

    /**
     * @return The details of the log provider for a third-party custom source.
     * 
     */
    public Optional<Output<List<CustomLogSourceProviderDetailArgs>>> providerDetails() {
        return Optional.ofNullable(this.providerDetails);
    }

    /**
     * Specify the name for a third-party custom source. This must be a Regionally unique value.
     * 
     */
    @Import(name="sourceName")
    private @Nullable Output<String> sourceName;

    /**
     * @return Specify the name for a third-party custom source. This must be a Regionally unique value.
     * 
     */
    public Optional<Output<String>> sourceName() {
        return Optional.ofNullable(this.sourceName);
    }

    /**
     * Specify the source version for the third-party custom source, to limit log collection to a specific version of custom data source.
     * 
     */
    @Import(name="sourceVersion")
    private @Nullable Output<String> sourceVersion;

    /**
     * @return Specify the source version for the third-party custom source, to limit log collection to a specific version of custom data source.
     * 
     */
    public Optional<Output<String>> sourceVersion() {
        return Optional.ofNullable(this.sourceVersion);
    }

    private CustomLogSourceState() {}

    private CustomLogSourceState(CustomLogSourceState $) {
        this.attributes = $.attributes;
        this.configuration = $.configuration;
        this.eventClasses = $.eventClasses;
        this.providerDetails = $.providerDetails;
        this.sourceName = $.sourceName;
        this.sourceVersion = $.sourceVersion;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CustomLogSourceState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CustomLogSourceState $;

        public Builder() {
            $ = new CustomLogSourceState();
        }

        public Builder(CustomLogSourceState defaults) {
            $ = new CustomLogSourceState(Objects.requireNonNull(defaults));
        }

        /**
         * @param attributes The attributes of a third-party custom source.
         * 
         * @return builder
         * 
         */
        public Builder attributes(@Nullable Output<List<CustomLogSourceAttributeArgs>> attributes) {
            $.attributes = attributes;
            return this;
        }

        /**
         * @param attributes The attributes of a third-party custom source.
         * 
         * @return builder
         * 
         */
        public Builder attributes(List<CustomLogSourceAttributeArgs> attributes) {
            return attributes(Output.of(attributes));
        }

        /**
         * @param attributes The attributes of a third-party custom source.
         * 
         * @return builder
         * 
         */
        public Builder attributes(CustomLogSourceAttributeArgs... attributes) {
            return attributes(List.of(attributes));
        }

        /**
         * @param configuration The configuration for the third-party custom source.
         * 
         * @return builder
         * 
         */
        public Builder configuration(@Nullable Output<CustomLogSourceConfigurationArgs> configuration) {
            $.configuration = configuration;
            return this;
        }

        /**
         * @param configuration The configuration for the third-party custom source.
         * 
         * @return builder
         * 
         */
        public Builder configuration(CustomLogSourceConfigurationArgs configuration) {
            return configuration(Output.of(configuration));
        }

        /**
         * @param eventClasses The Open Cybersecurity Schema Framework (OCSF) event classes which describes the type of data that the custom source will send to Security Lake.
         * 
         * @return builder
         * 
         */
        public Builder eventClasses(@Nullable Output<List<String>> eventClasses) {
            $.eventClasses = eventClasses;
            return this;
        }

        /**
         * @param eventClasses The Open Cybersecurity Schema Framework (OCSF) event classes which describes the type of data that the custom source will send to Security Lake.
         * 
         * @return builder
         * 
         */
        public Builder eventClasses(List<String> eventClasses) {
            return eventClasses(Output.of(eventClasses));
        }

        /**
         * @param eventClasses The Open Cybersecurity Schema Framework (OCSF) event classes which describes the type of data that the custom source will send to Security Lake.
         * 
         * @return builder
         * 
         */
        public Builder eventClasses(String... eventClasses) {
            return eventClasses(List.of(eventClasses));
        }

        /**
         * @param providerDetails The details of the log provider for a third-party custom source.
         * 
         * @return builder
         * 
         */
        public Builder providerDetails(@Nullable Output<List<CustomLogSourceProviderDetailArgs>> providerDetails) {
            $.providerDetails = providerDetails;
            return this;
        }

        /**
         * @param providerDetails The details of the log provider for a third-party custom source.
         * 
         * @return builder
         * 
         */
        public Builder providerDetails(List<CustomLogSourceProviderDetailArgs> providerDetails) {
            return providerDetails(Output.of(providerDetails));
        }

        /**
         * @param providerDetails The details of the log provider for a third-party custom source.
         * 
         * @return builder
         * 
         */
        public Builder providerDetails(CustomLogSourceProviderDetailArgs... providerDetails) {
            return providerDetails(List.of(providerDetails));
        }

        /**
         * @param sourceName Specify the name for a third-party custom source. This must be a Regionally unique value.
         * 
         * @return builder
         * 
         */
        public Builder sourceName(@Nullable Output<String> sourceName) {
            $.sourceName = sourceName;
            return this;
        }

        /**
         * @param sourceName Specify the name for a third-party custom source. This must be a Regionally unique value.
         * 
         * @return builder
         * 
         */
        public Builder sourceName(String sourceName) {
            return sourceName(Output.of(sourceName));
        }

        /**
         * @param sourceVersion Specify the source version for the third-party custom source, to limit log collection to a specific version of custom data source.
         * 
         * @return builder
         * 
         */
        public Builder sourceVersion(@Nullable Output<String> sourceVersion) {
            $.sourceVersion = sourceVersion;
            return this;
        }

        /**
         * @param sourceVersion Specify the source version for the third-party custom source, to limit log collection to a specific version of custom data source.
         * 
         * @return builder
         * 
         */
        public Builder sourceVersion(String sourceVersion) {
            return sourceVersion(Output.of(sourceVersion));
        }

        public CustomLogSourceState build() {
            return $;
        }
    }

}
