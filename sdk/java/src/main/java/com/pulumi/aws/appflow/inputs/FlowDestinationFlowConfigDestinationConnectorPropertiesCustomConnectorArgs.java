// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.appflow.inputs;

import com.pulumi.aws.appflow.inputs.FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorErrorHandlingConfigArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorArgs extends com.pulumi.resources.ResourceArgs {

    public static final FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorArgs Empty = new FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorArgs();

    /**
     * Custom properties that are specific to the connector when it&#39;s used as a destination in the flow. Maximum of 50 items.
     * 
     */
    @Import(name="customProperties")
    private @Nullable Output<Map<String,String>> customProperties;

    /**
     * @return Custom properties that are specific to the connector when it&#39;s used as a destination in the flow. Maximum of 50 items.
     * 
     */
    public Optional<Output<Map<String,String>>> customProperties() {
        return Optional.ofNullable(this.customProperties);
    }

    /**
     * Entity specified in the custom connector as a destination in the flow.
     * 
     */
    @Import(name="entityName", required=true)
    private Output<String> entityName;

    /**
     * @return Entity specified in the custom connector as a destination in the flow.
     * 
     */
    public Output<String> entityName() {
        return this.entityName;
    }

    /**
     * Settings that determine how Amazon AppFlow handles an error when placing data in the custom connector as destination. See Error Handling Config for more details.
     * 
     */
    @Import(name="errorHandlingConfig")
    private @Nullable Output<FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorErrorHandlingConfigArgs> errorHandlingConfig;

    /**
     * @return Settings that determine how Amazon AppFlow handles an error when placing data in the custom connector as destination. See Error Handling Config for more details.
     * 
     */
    public Optional<Output<FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorErrorHandlingConfigArgs>> errorHandlingConfig() {
        return Optional.ofNullable(this.errorHandlingConfig);
    }

    /**
     * Name of the field that Amazon AppFlow uses as an ID when performing a write operation such as update, delete, or upsert.
     * 
     */
    @Import(name="idFieldNames")
    private @Nullable Output<List<String>> idFieldNames;

    /**
     * @return Name of the field that Amazon AppFlow uses as an ID when performing a write operation such as update, delete, or upsert.
     * 
     */
    public Optional<Output<List<String>>> idFieldNames() {
        return Optional.ofNullable(this.idFieldNames);
    }

    /**
     * Type of write operation to be performed in the custom connector when it&#39;s used as destination. Valid values are `INSERT`, `UPSERT`, `UPDATE`, and `DELETE`.
     * 
     */
    @Import(name="writeOperationType")
    private @Nullable Output<String> writeOperationType;

    /**
     * @return Type of write operation to be performed in the custom connector when it&#39;s used as destination. Valid values are `INSERT`, `UPSERT`, `UPDATE`, and `DELETE`.
     * 
     */
    public Optional<Output<String>> writeOperationType() {
        return Optional.ofNullable(this.writeOperationType);
    }

    private FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorArgs() {}

    private FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorArgs(FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorArgs $) {
        this.customProperties = $.customProperties;
        this.entityName = $.entityName;
        this.errorHandlingConfig = $.errorHandlingConfig;
        this.idFieldNames = $.idFieldNames;
        this.writeOperationType = $.writeOperationType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorArgs $;

        public Builder() {
            $ = new FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorArgs();
        }

        public Builder(FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorArgs defaults) {
            $ = new FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param customProperties Custom properties that are specific to the connector when it&#39;s used as a destination in the flow. Maximum of 50 items.
         * 
         * @return builder
         * 
         */
        public Builder customProperties(@Nullable Output<Map<String,String>> customProperties) {
            $.customProperties = customProperties;
            return this;
        }

        /**
         * @param customProperties Custom properties that are specific to the connector when it&#39;s used as a destination in the flow. Maximum of 50 items.
         * 
         * @return builder
         * 
         */
        public Builder customProperties(Map<String,String> customProperties) {
            return customProperties(Output.of(customProperties));
        }

        /**
         * @param entityName Entity specified in the custom connector as a destination in the flow.
         * 
         * @return builder
         * 
         */
        public Builder entityName(Output<String> entityName) {
            $.entityName = entityName;
            return this;
        }

        /**
         * @param entityName Entity specified in the custom connector as a destination in the flow.
         * 
         * @return builder
         * 
         */
        public Builder entityName(String entityName) {
            return entityName(Output.of(entityName));
        }

        /**
         * @param errorHandlingConfig Settings that determine how Amazon AppFlow handles an error when placing data in the custom connector as destination. See Error Handling Config for more details.
         * 
         * @return builder
         * 
         */
        public Builder errorHandlingConfig(@Nullable Output<FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorErrorHandlingConfigArgs> errorHandlingConfig) {
            $.errorHandlingConfig = errorHandlingConfig;
            return this;
        }

        /**
         * @param errorHandlingConfig Settings that determine how Amazon AppFlow handles an error when placing data in the custom connector as destination. See Error Handling Config for more details.
         * 
         * @return builder
         * 
         */
        public Builder errorHandlingConfig(FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorErrorHandlingConfigArgs errorHandlingConfig) {
            return errorHandlingConfig(Output.of(errorHandlingConfig));
        }

        /**
         * @param idFieldNames Name of the field that Amazon AppFlow uses as an ID when performing a write operation such as update, delete, or upsert.
         * 
         * @return builder
         * 
         */
        public Builder idFieldNames(@Nullable Output<List<String>> idFieldNames) {
            $.idFieldNames = idFieldNames;
            return this;
        }

        /**
         * @param idFieldNames Name of the field that Amazon AppFlow uses as an ID when performing a write operation such as update, delete, or upsert.
         * 
         * @return builder
         * 
         */
        public Builder idFieldNames(List<String> idFieldNames) {
            return idFieldNames(Output.of(idFieldNames));
        }

        /**
         * @param idFieldNames Name of the field that Amazon AppFlow uses as an ID when performing a write operation such as update, delete, or upsert.
         * 
         * @return builder
         * 
         */
        public Builder idFieldNames(String... idFieldNames) {
            return idFieldNames(List.of(idFieldNames));
        }

        /**
         * @param writeOperationType Type of write operation to be performed in the custom connector when it&#39;s used as destination. Valid values are `INSERT`, `UPSERT`, `UPDATE`, and `DELETE`.
         * 
         * @return builder
         * 
         */
        public Builder writeOperationType(@Nullable Output<String> writeOperationType) {
            $.writeOperationType = writeOperationType;
            return this;
        }

        /**
         * @param writeOperationType Type of write operation to be performed in the custom connector when it&#39;s used as destination. Valid values are `INSERT`, `UPSERT`, `UPDATE`, and `DELETE`.
         * 
         * @return builder
         * 
         */
        public Builder writeOperationType(String writeOperationType) {
            return writeOperationType(Output.of(writeOperationType));
        }

        public FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorArgs build() {
            $.entityName = Objects.requireNonNull($.entityName, "expected parameter 'entityName' to be non-null");
            return $;
        }
    }

}
