// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.codedeploy.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DeploymentGroupAlarmConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final DeploymentGroupAlarmConfigurationArgs Empty = new DeploymentGroupAlarmConfigurationArgs();

    /**
     * A list of alarms configured for the deployment group. _A maximum of 10 alarms can be added to a deployment group_.
     * 
     */
    @Import(name="alarms")
    private @Nullable Output<List<String>> alarms;

    /**
     * @return A list of alarms configured for the deployment group. _A maximum of 10 alarms can be added to a deployment group_.
     * 
     */
    public Optional<Output<List<String>>> alarms() {
        return Optional.ofNullable(this.alarms);
    }

    /**
     * Indicates whether the alarm configuration is enabled. This option is useful when you want to temporarily deactivate alarm monitoring for a deployment group without having to add the same alarms again later.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Indicates whether the alarm configuration is enabled. This option is useful when you want to temporarily deactivate alarm monitoring for a deployment group without having to add the same alarms again later.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * Indicates whether a deployment should continue if information about the current state of alarms cannot be retrieved from CloudWatch. The default value is `false`.
     * 
     */
    @Import(name="ignorePollAlarmFailure")
    private @Nullable Output<Boolean> ignorePollAlarmFailure;

    /**
     * @return Indicates whether a deployment should continue if information about the current state of alarms cannot be retrieved from CloudWatch. The default value is `false`.
     * 
     */
    public Optional<Output<Boolean>> ignorePollAlarmFailure() {
        return Optional.ofNullable(this.ignorePollAlarmFailure);
    }

    private DeploymentGroupAlarmConfigurationArgs() {}

    private DeploymentGroupAlarmConfigurationArgs(DeploymentGroupAlarmConfigurationArgs $) {
        this.alarms = $.alarms;
        this.enabled = $.enabled;
        this.ignorePollAlarmFailure = $.ignorePollAlarmFailure;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DeploymentGroupAlarmConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DeploymentGroupAlarmConfigurationArgs $;

        public Builder() {
            $ = new DeploymentGroupAlarmConfigurationArgs();
        }

        public Builder(DeploymentGroupAlarmConfigurationArgs defaults) {
            $ = new DeploymentGroupAlarmConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param alarms A list of alarms configured for the deployment group. _A maximum of 10 alarms can be added to a deployment group_.
         * 
         * @return builder
         * 
         */
        public Builder alarms(@Nullable Output<List<String>> alarms) {
            $.alarms = alarms;
            return this;
        }

        /**
         * @param alarms A list of alarms configured for the deployment group. _A maximum of 10 alarms can be added to a deployment group_.
         * 
         * @return builder
         * 
         */
        public Builder alarms(List<String> alarms) {
            return alarms(Output.of(alarms));
        }

        /**
         * @param alarms A list of alarms configured for the deployment group. _A maximum of 10 alarms can be added to a deployment group_.
         * 
         * @return builder
         * 
         */
        public Builder alarms(String... alarms) {
            return alarms(List.of(alarms));
        }

        /**
         * @param enabled Indicates whether the alarm configuration is enabled. This option is useful when you want to temporarily deactivate alarm monitoring for a deployment group without having to add the same alarms again later.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Indicates whether the alarm configuration is enabled. This option is useful when you want to temporarily deactivate alarm monitoring for a deployment group without having to add the same alarms again later.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param ignorePollAlarmFailure Indicates whether a deployment should continue if information about the current state of alarms cannot be retrieved from CloudWatch. The default value is `false`.
         * 
         * @return builder
         * 
         */
        public Builder ignorePollAlarmFailure(@Nullable Output<Boolean> ignorePollAlarmFailure) {
            $.ignorePollAlarmFailure = ignorePollAlarmFailure;
            return this;
        }

        /**
         * @param ignorePollAlarmFailure Indicates whether a deployment should continue if information about the current state of alarms cannot be retrieved from CloudWatch. The default value is `false`.
         * 
         * @return builder
         * 
         */
        public Builder ignorePollAlarmFailure(Boolean ignorePollAlarmFailure) {
            return ignorePollAlarmFailure(Output.of(ignorePollAlarmFailure));
        }

        public DeploymentGroupAlarmConfigurationArgs build() {
            return $;
        }
    }

}
