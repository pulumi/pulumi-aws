// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.cleanrooms.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.util.Objects;


public final class CollaborationDataEncryptionMetadataArgs extends com.pulumi.resources.ResourceArgs {

    public static final CollaborationDataEncryptionMetadataArgs Empty = new CollaborationDataEncryptionMetadataArgs();

    /**
     * Indicates whether encrypted tables can contain cleartext data. This is a boolea
     * field.
     * 
     */
    @Import(name="allowClearText", required=true)
    private Output<Boolean> allowClearText;

    /**
     * @return Indicates whether encrypted tables can contain cleartext data. This is a boolea
     * field.
     * 
     */
    public Output<Boolean> allowClearText() {
        return this.allowClearText;
    }

    /**
     * Indicates whether Fingerprint columns can contain duplicate entries. This is a
     * boolean field.
     * 
     */
    @Import(name="allowDuplicates", required=true)
    private Output<Boolean> allowDuplicates;

    /**
     * @return Indicates whether Fingerprint columns can contain duplicate entries. This is a
     * boolean field.
     * 
     */
    public Output<Boolean> allowDuplicates() {
        return this.allowDuplicates;
    }

    /**
     * Indicates whether Fingerprint columns can be joined
     * n any other Fingerprint column with a different name. This is a boolean field.
     * 
     */
    @Import(name="allowJoinsOnColumnsWithDifferentNames", required=true)
    private Output<Boolean> allowJoinsOnColumnsWithDifferentNames;

    /**
     * @return Indicates whether Fingerprint columns can be joined
     * n any other Fingerprint column with a different name. This is a boolean field.
     * 
     */
    public Output<Boolean> allowJoinsOnColumnsWithDifferentNames() {
        return this.allowJoinsOnColumnsWithDifferentNames;
    }

    /**
     * Indicates whether NULL values are to be copied as NULL to encrypted tables (true)
     * or cryptographically processed (false).
     * 
     */
    @Import(name="preserveNulls", required=true)
    private Output<Boolean> preserveNulls;

    /**
     * @return Indicates whether NULL values are to be copied as NULL to encrypted tables (true)
     * or cryptographically processed (false).
     * 
     */
    public Output<Boolean> preserveNulls() {
        return this.preserveNulls;
    }

    private CollaborationDataEncryptionMetadataArgs() {}

    private CollaborationDataEncryptionMetadataArgs(CollaborationDataEncryptionMetadataArgs $) {
        this.allowClearText = $.allowClearText;
        this.allowDuplicates = $.allowDuplicates;
        this.allowJoinsOnColumnsWithDifferentNames = $.allowJoinsOnColumnsWithDifferentNames;
        this.preserveNulls = $.preserveNulls;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CollaborationDataEncryptionMetadataArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CollaborationDataEncryptionMetadataArgs $;

        public Builder() {
            $ = new CollaborationDataEncryptionMetadataArgs();
        }

        public Builder(CollaborationDataEncryptionMetadataArgs defaults) {
            $ = new CollaborationDataEncryptionMetadataArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowClearText Indicates whether encrypted tables can contain cleartext data. This is a boolea
         * field.
         * 
         * @return builder
         * 
         */
        public Builder allowClearText(Output<Boolean> allowClearText) {
            $.allowClearText = allowClearText;
            return this;
        }

        /**
         * @param allowClearText Indicates whether encrypted tables can contain cleartext data. This is a boolea
         * field.
         * 
         * @return builder
         * 
         */
        public Builder allowClearText(Boolean allowClearText) {
            return allowClearText(Output.of(allowClearText));
        }

        /**
         * @param allowDuplicates Indicates whether Fingerprint columns can contain duplicate entries. This is a
         * boolean field.
         * 
         * @return builder
         * 
         */
        public Builder allowDuplicates(Output<Boolean> allowDuplicates) {
            $.allowDuplicates = allowDuplicates;
            return this;
        }

        /**
         * @param allowDuplicates Indicates whether Fingerprint columns can contain duplicate entries. This is a
         * boolean field.
         * 
         * @return builder
         * 
         */
        public Builder allowDuplicates(Boolean allowDuplicates) {
            return allowDuplicates(Output.of(allowDuplicates));
        }

        /**
         * @param allowJoinsOnColumnsWithDifferentNames Indicates whether Fingerprint columns can be joined
         * n any other Fingerprint column with a different name. This is a boolean field.
         * 
         * @return builder
         * 
         */
        public Builder allowJoinsOnColumnsWithDifferentNames(Output<Boolean> allowJoinsOnColumnsWithDifferentNames) {
            $.allowJoinsOnColumnsWithDifferentNames = allowJoinsOnColumnsWithDifferentNames;
            return this;
        }

        /**
         * @param allowJoinsOnColumnsWithDifferentNames Indicates whether Fingerprint columns can be joined
         * n any other Fingerprint column with a different name. This is a boolean field.
         * 
         * @return builder
         * 
         */
        public Builder allowJoinsOnColumnsWithDifferentNames(Boolean allowJoinsOnColumnsWithDifferentNames) {
            return allowJoinsOnColumnsWithDifferentNames(Output.of(allowJoinsOnColumnsWithDifferentNames));
        }

        /**
         * @param preserveNulls Indicates whether NULL values are to be copied as NULL to encrypted tables (true)
         * or cryptographically processed (false).
         * 
         * @return builder
         * 
         */
        public Builder preserveNulls(Output<Boolean> preserveNulls) {
            $.preserveNulls = preserveNulls;
            return this;
        }

        /**
         * @param preserveNulls Indicates whether NULL values are to be copied as NULL to encrypted tables (true)
         * or cryptographically processed (false).
         * 
         * @return builder
         * 
         */
        public Builder preserveNulls(Boolean preserveNulls) {
            return preserveNulls(Output.of(preserveNulls));
        }

        public CollaborationDataEncryptionMetadataArgs build() {
            $.allowClearText = Objects.requireNonNull($.allowClearText, "expected parameter 'allowClearText' to be non-null");
            $.allowDuplicates = Objects.requireNonNull($.allowDuplicates, "expected parameter 'allowDuplicates' to be non-null");
            $.allowJoinsOnColumnsWithDifferentNames = Objects.requireNonNull($.allowJoinsOnColumnsWithDifferentNames, "expected parameter 'allowJoinsOnColumnsWithDifferentNames' to be non-null");
            $.preserveNulls = Objects.requireNonNull($.preserveNulls, "expected parameter 'preserveNulls' to be non-null");
            return $;
        }
    }

}
