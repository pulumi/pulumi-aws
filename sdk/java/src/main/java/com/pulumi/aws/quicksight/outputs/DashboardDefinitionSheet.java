// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.outputs;

import com.pulumi.aws.quicksight.outputs.DashboardDefinitionSheetParameterControl;
import com.pulumi.aws.quicksight.outputs.DashboardDefinitionSheetSheetControlLayouts;
import com.pulumi.aws.quicksight.outputs.DashboardDefinitionSheetTextBox;
import com.pulumi.aws.quicksight.outputs.FilterControls;
import com.pulumi.aws.quicksight.outputs.Layouts;
import com.pulumi.aws.quicksight.outputs.Visuals;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DashboardDefinitionSheet {
    private @Nullable String contentType;
    private @Nullable String description;
    private @Nullable List<FilterControls> filterControls;
    private @Nullable Layouts layouts;
    /**
     * @return Display name for the dashboard.
     * 
     */
    private @Nullable String name;
    private @Nullable List<DashboardDefinitionSheetParameterControl> parameterControls;
    private @Nullable DashboardDefinitionSheetSheetControlLayouts sheetControlLayouts;
    private String sheetId;
    private @Nullable List<DashboardDefinitionSheetTextBox> textBoxes;
    private @Nullable String title;
    private @Nullable List<Visuals> visuals;

    private DashboardDefinitionSheet() {}
    public Optional<String> contentType() {
        return Optional.ofNullable(this.contentType);
    }
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    public List<FilterControls> filterControls() {
        return this.filterControls == null ? List.of() : this.filterControls;
    }
    public Optional<Layouts> layouts() {
        return Optional.ofNullable(this.layouts);
    }
    /**
     * @return Display name for the dashboard.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    public List<DashboardDefinitionSheetParameterControl> parameterControls() {
        return this.parameterControls == null ? List.of() : this.parameterControls;
    }
    public Optional<DashboardDefinitionSheetSheetControlLayouts> sheetControlLayouts() {
        return Optional.ofNullable(this.sheetControlLayouts);
    }
    public String sheetId() {
        return this.sheetId;
    }
    public List<DashboardDefinitionSheetTextBox> textBoxes() {
        return this.textBoxes == null ? List.of() : this.textBoxes;
    }
    public Optional<String> title() {
        return Optional.ofNullable(this.title);
    }
    public List<Visuals> visuals() {
        return this.visuals == null ? List.of() : this.visuals;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DashboardDefinitionSheet defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String contentType;
        private @Nullable String description;
        private @Nullable List<FilterControls> filterControls;
        private @Nullable Layouts layouts;
        private @Nullable String name;
        private @Nullable List<DashboardDefinitionSheetParameterControl> parameterControls;
        private @Nullable DashboardDefinitionSheetSheetControlLayouts sheetControlLayouts;
        private String sheetId;
        private @Nullable List<DashboardDefinitionSheetTextBox> textBoxes;
        private @Nullable String title;
        private @Nullable List<Visuals> visuals;
        public Builder() {}
        public Builder(DashboardDefinitionSheet defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.contentType = defaults.contentType;
    	      this.description = defaults.description;
    	      this.filterControls = defaults.filterControls;
    	      this.layouts = defaults.layouts;
    	      this.name = defaults.name;
    	      this.parameterControls = defaults.parameterControls;
    	      this.sheetControlLayouts = defaults.sheetControlLayouts;
    	      this.sheetId = defaults.sheetId;
    	      this.textBoxes = defaults.textBoxes;
    	      this.title = defaults.title;
    	      this.visuals = defaults.visuals;
        }

        @CustomType.Setter
        public Builder contentType(@Nullable String contentType) {

            this.contentType = contentType;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {

            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder filterControls(@Nullable List<FilterControls> filterControls) {

            this.filterControls = filterControls;
            return this;
        }
        public Builder filterControls(FilterControls... filterControls) {
            return filterControls(List.of(filterControls));
        }
        @CustomType.Setter
        public Builder layouts(@Nullable Layouts layouts) {

            this.layouts = layouts;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder parameterControls(@Nullable List<DashboardDefinitionSheetParameterControl> parameterControls) {

            this.parameterControls = parameterControls;
            return this;
        }
        public Builder parameterControls(DashboardDefinitionSheetParameterControl... parameterControls) {
            return parameterControls(List.of(parameterControls));
        }
        @CustomType.Setter
        public Builder sheetControlLayouts(@Nullable DashboardDefinitionSheetSheetControlLayouts sheetControlLayouts) {

            this.sheetControlLayouts = sheetControlLayouts;
            return this;
        }
        @CustomType.Setter
        public Builder sheetId(String sheetId) {
            if (sheetId == null) {
              throw new MissingRequiredPropertyException("DashboardDefinitionSheet", "sheetId");
            }
            this.sheetId = sheetId;
            return this;
        }
        @CustomType.Setter
        public Builder textBoxes(@Nullable List<DashboardDefinitionSheetTextBox> textBoxes) {

            this.textBoxes = textBoxes;
            return this;
        }
        public Builder textBoxes(DashboardDefinitionSheetTextBox... textBoxes) {
            return textBoxes(List.of(textBoxes));
        }
        @CustomType.Setter
        public Builder title(@Nullable String title) {

            this.title = title;
            return this;
        }
        @CustomType.Setter
        public Builder visuals(@Nullable List<Visuals> visuals) {

            this.visuals = visuals;
            return this;
        }
        public Builder visuals(Visuals... visuals) {
            return visuals(List.of(visuals));
        }
        public DashboardDefinitionSheet build() {
            final var _resultValue = new DashboardDefinitionSheet();
            _resultValue.contentType = contentType;
            _resultValue.description = description;
            _resultValue.filterControls = filterControls;
            _resultValue.layouts = layouts;
            _resultValue.name = name;
            _resultValue.parameterControls = parameterControls;
            _resultValue.sheetControlLayouts = sheetControlLayouts;
            _resultValue.sheetId = sheetId;
            _resultValue.textBoxes = textBoxes;
            _resultValue.title = title;
            _resultValue.visuals = visuals;
            return _resultValue;
        }
    }
}
