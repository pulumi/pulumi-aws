// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.rds.inputs;

import com.pulumi.aws.rds.inputs.InstanceDesiredStateTimeoutsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstanceDesiredStateState extends com.pulumi.resources.ResourceArgs {

    public static final InstanceDesiredStateState Empty = new InstanceDesiredStateState();

    /**
     * DB Instance Identifier
     * 
     */
    @Import(name="identifier")
    private @Nullable Output<String> identifier;

    /**
     * @return DB Instance Identifier
     * 
     */
    public Optional<Output<String>> identifier() {
        return Optional.ofNullable(this.identifier);
    }

    /**
     * Configured state of the DB Instance. Valid values are `available` and `stopped`.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return Configured state of the DB Instance. Valid values are `available` and `stopped`.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    @Import(name="timeouts")
    private @Nullable Output<InstanceDesiredStateTimeoutsArgs> timeouts;

    public Optional<Output<InstanceDesiredStateTimeoutsArgs>> timeouts() {
        return Optional.ofNullable(this.timeouts);
    }

    private InstanceDesiredStateState() {}

    private InstanceDesiredStateState(InstanceDesiredStateState $) {
        this.identifier = $.identifier;
        this.state = $.state;
        this.timeouts = $.timeouts;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceDesiredStateState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceDesiredStateState $;

        public Builder() {
            $ = new InstanceDesiredStateState();
        }

        public Builder(InstanceDesiredStateState defaults) {
            $ = new InstanceDesiredStateState(Objects.requireNonNull(defaults));
        }

        /**
         * @param identifier DB Instance Identifier
         * 
         * @return builder
         * 
         */
        public Builder identifier(@Nullable Output<String> identifier) {
            $.identifier = identifier;
            return this;
        }

        /**
         * @param identifier DB Instance Identifier
         * 
         * @return builder
         * 
         */
        public Builder identifier(String identifier) {
            return identifier(Output.of(identifier));
        }

        /**
         * @param state Configured state of the DB Instance. Valid values are `available` and `stopped`.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state Configured state of the DB Instance. Valid values are `available` and `stopped`.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        public Builder timeouts(@Nullable Output<InstanceDesiredStateTimeoutsArgs> timeouts) {
            $.timeouts = timeouts;
            return this;
        }

        public Builder timeouts(InstanceDesiredStateTimeoutsArgs timeouts) {
            return timeouts(Output.of(timeouts));
        }

        public InstanceDesiredStateState build() {
            return $;
        }
    }

}
