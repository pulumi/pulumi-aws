// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.s3tables.inputs;

import com.pulumi.aws.s3tables.inputs.TableMaintenanceConfigurationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TableState extends com.pulumi.resources.ResourceArgs {

    public static final TableState Empty = new TableState();

    /**
     * ARN of the table.
     * 
     */
    @Import(name="arn")
    private @Nullable Output<String> arn;

    /**
     * @return ARN of the table.
     * 
     */
    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    /**
     * Date and time when the namespace was created.
     * 
     */
    @Import(name="createdAt")
    private @Nullable Output<String> createdAt;

    /**
     * @return Date and time when the namespace was created.
     * 
     */
    public Optional<Output<String>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    /**
     * Account ID of the account that created the namespace.
     * 
     */
    @Import(name="createdBy")
    private @Nullable Output<String> createdBy;

    /**
     * @return Account ID of the account that created the namespace.
     * 
     */
    public Optional<Output<String>> createdBy() {
        return Optional.ofNullable(this.createdBy);
    }

    /**
     * Format of the table.
     * Must be `ICEBERG`.
     * 
     */
    @Import(name="format")
    private @Nullable Output<String> format;

    /**
     * @return Format of the table.
     * Must be `ICEBERG`.
     * 
     */
    public Optional<Output<String>> format() {
        return Optional.ofNullable(this.format);
    }

    /**
     * A single table bucket maintenance configuration object.
     * See `maintenance_configuration` below.
     * 
     */
    @Import(name="maintenanceConfiguration")
    private @Nullable Output<TableMaintenanceConfigurationArgs> maintenanceConfiguration;

    /**
     * @return A single table bucket maintenance configuration object.
     * See `maintenance_configuration` below.
     * 
     */
    public Optional<Output<TableMaintenanceConfigurationArgs>> maintenanceConfiguration() {
        return Optional.ofNullable(this.maintenanceConfiguration);
    }

    /**
     * Location of table metadata.
     * 
     */
    @Import(name="metadataLocation")
    private @Nullable Output<String> metadataLocation;

    /**
     * @return Location of table metadata.
     * 
     */
    public Optional<Output<String>> metadataLocation() {
        return Optional.ofNullable(this.metadataLocation);
    }

    /**
     * Date and time when the namespace was last modified.
     * 
     */
    @Import(name="modifiedAt")
    private @Nullable Output<String> modifiedAt;

    /**
     * @return Date and time when the namespace was last modified.
     * 
     */
    public Optional<Output<String>> modifiedAt() {
        return Optional.ofNullable(this.modifiedAt);
    }

    /**
     * Account ID of the account that last modified the namespace.
     * 
     */
    @Import(name="modifiedBy")
    private @Nullable Output<String> modifiedBy;

    /**
     * @return Account ID of the account that last modified the namespace.
     * 
     */
    public Optional<Output<String>> modifiedBy() {
        return Optional.ofNullable(this.modifiedBy);
    }

    /**
     * Name of the table.
     * Must be between 1 and 255 characters in length.
     * Can consist of lowercase letters, numbers, and underscores, and must begin and end with a lowercase letter or number.
     * A full list of table naming rules can be found in the [S3 Tables documentation](https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-tables-buckets-naming.html#naming-rules-table).
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the table.
     * Must be between 1 and 255 characters in length.
     * Can consist of lowercase letters, numbers, and underscores, and must begin and end with a lowercase letter or number.
     * A full list of table naming rules can be found in the [S3 Tables documentation](https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-tables-buckets-naming.html#naming-rules-table).
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Name of the namespace for this table.
     * Must be between 1 and 255 characters in length.
     * Can consist of lowercase letters, numbers, and underscores, and must begin and end with a lowercase letter or number.
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return Name of the namespace for this table.
     * Must be between 1 and 255 characters in length.
     * Can consist of lowercase letters, numbers, and underscores, and must begin and end with a lowercase letter or number.
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * Account ID of the account that owns the namespace.
     * 
     */
    @Import(name="ownerAccountId")
    private @Nullable Output<String> ownerAccountId;

    /**
     * @return Account ID of the account that owns the namespace.
     * 
     */
    public Optional<Output<String>> ownerAccountId() {
        return Optional.ofNullable(this.ownerAccountId);
    }

    /**
     * ARN referencing the Table Bucket that contains this Namespace.
     * 
     * The following argument is optional:
     * 
     */
    @Import(name="tableBucketArn")
    private @Nullable Output<String> tableBucketArn;

    /**
     * @return ARN referencing the Table Bucket that contains this Namespace.
     * 
     * The following argument is optional:
     * 
     */
    public Optional<Output<String>> tableBucketArn() {
        return Optional.ofNullable(this.tableBucketArn);
    }

    /**
     * Type of the table.
     * One of `customer` or `aws`.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Type of the table.
     * One of `customer` or `aws`.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * Identifier for the current version of table data.
     * 
     */
    @Import(name="versionToken")
    private @Nullable Output<String> versionToken;

    /**
     * @return Identifier for the current version of table data.
     * 
     */
    public Optional<Output<String>> versionToken() {
        return Optional.ofNullable(this.versionToken);
    }

    /**
     * S3 URI pointing to the S3 Bucket that contains the table data.
     * 
     */
    @Import(name="warehouseLocation")
    private @Nullable Output<String> warehouseLocation;

    /**
     * @return S3 URI pointing to the S3 Bucket that contains the table data.
     * 
     */
    public Optional<Output<String>> warehouseLocation() {
        return Optional.ofNullable(this.warehouseLocation);
    }

    private TableState() {}

    private TableState(TableState $) {
        this.arn = $.arn;
        this.createdAt = $.createdAt;
        this.createdBy = $.createdBy;
        this.format = $.format;
        this.maintenanceConfiguration = $.maintenanceConfiguration;
        this.metadataLocation = $.metadataLocation;
        this.modifiedAt = $.modifiedAt;
        this.modifiedBy = $.modifiedBy;
        this.name = $.name;
        this.namespace = $.namespace;
        this.ownerAccountId = $.ownerAccountId;
        this.tableBucketArn = $.tableBucketArn;
        this.type = $.type;
        this.versionToken = $.versionToken;
        this.warehouseLocation = $.warehouseLocation;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TableState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TableState $;

        public Builder() {
            $ = new TableState();
        }

        public Builder(TableState defaults) {
            $ = new TableState(Objects.requireNonNull(defaults));
        }

        /**
         * @param arn ARN of the table.
         * 
         * @return builder
         * 
         */
        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        /**
         * @param arn ARN of the table.
         * 
         * @return builder
         * 
         */
        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        /**
         * @param createdAt Date and time when the namespace was created.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(@Nullable Output<String> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        /**
         * @param createdAt Date and time when the namespace was created.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(String createdAt) {
            return createdAt(Output.of(createdAt));
        }

        /**
         * @param createdBy Account ID of the account that created the namespace.
         * 
         * @return builder
         * 
         */
        public Builder createdBy(@Nullable Output<String> createdBy) {
            $.createdBy = createdBy;
            return this;
        }

        /**
         * @param createdBy Account ID of the account that created the namespace.
         * 
         * @return builder
         * 
         */
        public Builder createdBy(String createdBy) {
            return createdBy(Output.of(createdBy));
        }

        /**
         * @param format Format of the table.
         * Must be `ICEBERG`.
         * 
         * @return builder
         * 
         */
        public Builder format(@Nullable Output<String> format) {
            $.format = format;
            return this;
        }

        /**
         * @param format Format of the table.
         * Must be `ICEBERG`.
         * 
         * @return builder
         * 
         */
        public Builder format(String format) {
            return format(Output.of(format));
        }

        /**
         * @param maintenanceConfiguration A single table bucket maintenance configuration object.
         * See `maintenance_configuration` below.
         * 
         * @return builder
         * 
         */
        public Builder maintenanceConfiguration(@Nullable Output<TableMaintenanceConfigurationArgs> maintenanceConfiguration) {
            $.maintenanceConfiguration = maintenanceConfiguration;
            return this;
        }

        /**
         * @param maintenanceConfiguration A single table bucket maintenance configuration object.
         * See `maintenance_configuration` below.
         * 
         * @return builder
         * 
         */
        public Builder maintenanceConfiguration(TableMaintenanceConfigurationArgs maintenanceConfiguration) {
            return maintenanceConfiguration(Output.of(maintenanceConfiguration));
        }

        /**
         * @param metadataLocation Location of table metadata.
         * 
         * @return builder
         * 
         */
        public Builder metadataLocation(@Nullable Output<String> metadataLocation) {
            $.metadataLocation = metadataLocation;
            return this;
        }

        /**
         * @param metadataLocation Location of table metadata.
         * 
         * @return builder
         * 
         */
        public Builder metadataLocation(String metadataLocation) {
            return metadataLocation(Output.of(metadataLocation));
        }

        /**
         * @param modifiedAt Date and time when the namespace was last modified.
         * 
         * @return builder
         * 
         */
        public Builder modifiedAt(@Nullable Output<String> modifiedAt) {
            $.modifiedAt = modifiedAt;
            return this;
        }

        /**
         * @param modifiedAt Date and time when the namespace was last modified.
         * 
         * @return builder
         * 
         */
        public Builder modifiedAt(String modifiedAt) {
            return modifiedAt(Output.of(modifiedAt));
        }

        /**
         * @param modifiedBy Account ID of the account that last modified the namespace.
         * 
         * @return builder
         * 
         */
        public Builder modifiedBy(@Nullable Output<String> modifiedBy) {
            $.modifiedBy = modifiedBy;
            return this;
        }

        /**
         * @param modifiedBy Account ID of the account that last modified the namespace.
         * 
         * @return builder
         * 
         */
        public Builder modifiedBy(String modifiedBy) {
            return modifiedBy(Output.of(modifiedBy));
        }

        /**
         * @param name Name of the table.
         * Must be between 1 and 255 characters in length.
         * Can consist of lowercase letters, numbers, and underscores, and must begin and end with a lowercase letter or number.
         * A full list of table naming rules can be found in the [S3 Tables documentation](https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-tables-buckets-naming.html#naming-rules-table).
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the table.
         * Must be between 1 and 255 characters in length.
         * Can consist of lowercase letters, numbers, and underscores, and must begin and end with a lowercase letter or number.
         * A full list of table naming rules can be found in the [S3 Tables documentation](https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-tables-buckets-naming.html#naming-rules-table).
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param namespace Name of the namespace for this table.
         * Must be between 1 and 255 characters in length.
         * Can consist of lowercase letters, numbers, and underscores, and must begin and end with a lowercase letter or number.
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace Name of the namespace for this table.
         * Must be between 1 and 255 characters in length.
         * Can consist of lowercase letters, numbers, and underscores, and must begin and end with a lowercase letter or number.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param ownerAccountId Account ID of the account that owns the namespace.
         * 
         * @return builder
         * 
         */
        public Builder ownerAccountId(@Nullable Output<String> ownerAccountId) {
            $.ownerAccountId = ownerAccountId;
            return this;
        }

        /**
         * @param ownerAccountId Account ID of the account that owns the namespace.
         * 
         * @return builder
         * 
         */
        public Builder ownerAccountId(String ownerAccountId) {
            return ownerAccountId(Output.of(ownerAccountId));
        }

        /**
         * @param tableBucketArn ARN referencing the Table Bucket that contains this Namespace.
         * 
         * The following argument is optional:
         * 
         * @return builder
         * 
         */
        public Builder tableBucketArn(@Nullable Output<String> tableBucketArn) {
            $.tableBucketArn = tableBucketArn;
            return this;
        }

        /**
         * @param tableBucketArn ARN referencing the Table Bucket that contains this Namespace.
         * 
         * The following argument is optional:
         * 
         * @return builder
         * 
         */
        public Builder tableBucketArn(String tableBucketArn) {
            return tableBucketArn(Output.of(tableBucketArn));
        }

        /**
         * @param type Type of the table.
         * One of `customer` or `aws`.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of the table.
         * One of `customer` or `aws`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param versionToken Identifier for the current version of table data.
         * 
         * @return builder
         * 
         */
        public Builder versionToken(@Nullable Output<String> versionToken) {
            $.versionToken = versionToken;
            return this;
        }

        /**
         * @param versionToken Identifier for the current version of table data.
         * 
         * @return builder
         * 
         */
        public Builder versionToken(String versionToken) {
            return versionToken(Output.of(versionToken));
        }

        /**
         * @param warehouseLocation S3 URI pointing to the S3 Bucket that contains the table data.
         * 
         * @return builder
         * 
         */
        public Builder warehouseLocation(@Nullable Output<String> warehouseLocation) {
            $.warehouseLocation = warehouseLocation;
            return this;
        }

        /**
         * @param warehouseLocation S3 URI pointing to the S3 Bucket that contains the table data.
         * 
         * @return builder
         * 
         */
        public Builder warehouseLocation(String warehouseLocation) {
            return warehouseLocation(Output.of(warehouseLocation));
        }

        public TableState build() {
            return $;
        }
    }

}
