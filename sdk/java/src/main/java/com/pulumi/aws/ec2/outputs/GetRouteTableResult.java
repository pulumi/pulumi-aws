// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ec2.outputs;

import com.pulumi.aws.ec2.outputs.GetRouteTableAssociation;
import com.pulumi.aws.ec2.outputs.GetRouteTableFilter;
import com.pulumi.aws.ec2.outputs.GetRouteTableRoute;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class GetRouteTableResult {
    /**
     * @return ARN of the route table.
     * 
     */
    private String arn;
    /**
     * @return List of associations with attributes detailed below.
     * 
     */
    private List<GetRouteTableAssociation> associations;
    private @Nullable List<GetRouteTableFilter> filters;
    /**
     * @return Gateway ID. Only set when associated with an Internet Gateway or Virtual Private Gateway.
     * 
     */
    private String gatewayId;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return ID of the AWS account that owns the route table.
     * 
     */
    private String ownerId;
    /**
     * @return Route Table ID.
     * 
     */
    private String routeTableId;
    /**
     * @return List of routes with attributes detailed below.
     * 
     */
    private List<GetRouteTableRoute> routes;
    /**
     * @return Subnet ID. Only set when associated with a subnet.
     * 
     */
    private String subnetId;
    private Map<String,String> tags;
    private String vpcId;

    private GetRouteTableResult() {}
    /**
     * @return ARN of the route table.
     * 
     */
    public String arn() {
        return this.arn;
    }
    /**
     * @return List of associations with attributes detailed below.
     * 
     */
    public List<GetRouteTableAssociation> associations() {
        return this.associations;
    }
    public List<GetRouteTableFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return Gateway ID. Only set when associated with an Internet Gateway or Virtual Private Gateway.
     * 
     */
    public String gatewayId() {
        return this.gatewayId;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return ID of the AWS account that owns the route table.
     * 
     */
    public String ownerId() {
        return this.ownerId;
    }
    /**
     * @return Route Table ID.
     * 
     */
    public String routeTableId() {
        return this.routeTableId;
    }
    /**
     * @return List of routes with attributes detailed below.
     * 
     */
    public List<GetRouteTableRoute> routes() {
        return this.routes;
    }
    /**
     * @return Subnet ID. Only set when associated with a subnet.
     * 
     */
    public String subnetId() {
        return this.subnetId;
    }
    public Map<String,String> tags() {
        return this.tags;
    }
    public String vpcId() {
        return this.vpcId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRouteTableResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String arn;
        private List<GetRouteTableAssociation> associations;
        private @Nullable List<GetRouteTableFilter> filters;
        private String gatewayId;
        private String id;
        private String ownerId;
        private String routeTableId;
        private List<GetRouteTableRoute> routes;
        private String subnetId;
        private Map<String,String> tags;
        private String vpcId;
        public Builder() {}
        public Builder(GetRouteTableResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.associations = defaults.associations;
    	      this.filters = defaults.filters;
    	      this.gatewayId = defaults.gatewayId;
    	      this.id = defaults.id;
    	      this.ownerId = defaults.ownerId;
    	      this.routeTableId = defaults.routeTableId;
    	      this.routes = defaults.routes;
    	      this.subnetId = defaults.subnetId;
    	      this.tags = defaults.tags;
    	      this.vpcId = defaults.vpcId;
        }

        @CustomType.Setter
        public Builder arn(String arn) {
            if (arn == null) {
              throw new MissingRequiredPropertyException("GetRouteTableResult", "arn");
            }
            this.arn = arn;
            return this;
        }
        @CustomType.Setter
        public Builder associations(List<GetRouteTableAssociation> associations) {
            if (associations == null) {
              throw new MissingRequiredPropertyException("GetRouteTableResult", "associations");
            }
            this.associations = associations;
            return this;
        }
        public Builder associations(GetRouteTableAssociation... associations) {
            return associations(List.of(associations));
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetRouteTableFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GetRouteTableFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder gatewayId(String gatewayId) {
            if (gatewayId == null) {
              throw new MissingRequiredPropertyException("GetRouteTableResult", "gatewayId");
            }
            this.gatewayId = gatewayId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetRouteTableResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ownerId(String ownerId) {
            if (ownerId == null) {
              throw new MissingRequiredPropertyException("GetRouteTableResult", "ownerId");
            }
            this.ownerId = ownerId;
            return this;
        }
        @CustomType.Setter
        public Builder routeTableId(String routeTableId) {
            if (routeTableId == null) {
              throw new MissingRequiredPropertyException("GetRouteTableResult", "routeTableId");
            }
            this.routeTableId = routeTableId;
            return this;
        }
        @CustomType.Setter
        public Builder routes(List<GetRouteTableRoute> routes) {
            if (routes == null) {
              throw new MissingRequiredPropertyException("GetRouteTableResult", "routes");
            }
            this.routes = routes;
            return this;
        }
        public Builder routes(GetRouteTableRoute... routes) {
            return routes(List.of(routes));
        }
        @CustomType.Setter
        public Builder subnetId(String subnetId) {
            if (subnetId == null) {
              throw new MissingRequiredPropertyException("GetRouteTableResult", "subnetId");
            }
            this.subnetId = subnetId;
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetRouteTableResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder vpcId(String vpcId) {
            if (vpcId == null) {
              throw new MissingRequiredPropertyException("GetRouteTableResult", "vpcId");
            }
            this.vpcId = vpcId;
            return this;
        }
        public GetRouteTableResult build() {
            final var _resultValue = new GetRouteTableResult();
            _resultValue.arn = arn;
            _resultValue.associations = associations;
            _resultValue.filters = filters;
            _resultValue.gatewayId = gatewayId;
            _resultValue.id = id;
            _resultValue.ownerId = ownerId;
            _resultValue.routeTableId = routeTableId;
            _resultValue.routes = routes;
            _resultValue.subnetId = subnetId;
            _resultValue.tags = tags;
            _resultValue.vpcId = vpcId;
            return _resultValue;
        }
    }
}
