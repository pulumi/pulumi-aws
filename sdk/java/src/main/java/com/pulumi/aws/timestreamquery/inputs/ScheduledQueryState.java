// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.timestreamquery.inputs;

import com.pulumi.aws.timestreamquery.inputs.ScheduledQueryErrorReportConfigurationArgs;
import com.pulumi.aws.timestreamquery.inputs.ScheduledQueryLastRunSummaryArgs;
import com.pulumi.aws.timestreamquery.inputs.ScheduledQueryNotificationConfigurationArgs;
import com.pulumi.aws.timestreamquery.inputs.ScheduledQueryRecentlyFailedRunArgs;
import com.pulumi.aws.timestreamquery.inputs.ScheduledQueryScheduleConfigurationArgs;
import com.pulumi.aws.timestreamquery.inputs.ScheduledQueryTargetConfigurationArgs;
import com.pulumi.aws.timestreamquery.inputs.ScheduledQueryTimeoutsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ScheduledQueryState extends com.pulumi.resources.ResourceArgs {

    public static final ScheduledQueryState Empty = new ScheduledQueryState();

    /**
     * ARN of the Scheduled Query.
     * 
     */
    @Import(name="arn")
    private @Nullable Output<String> arn;

    /**
     * @return ARN of the Scheduled Query.
     * 
     */
    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    /**
     * Creation time for the scheduled query.
     * 
     */
    @Import(name="creationTime")
    private @Nullable Output<String> creationTime;

    /**
     * @return Creation time for the scheduled query.
     * 
     */
    public Optional<Output<String>> creationTime() {
        return Optional.ofNullable(this.creationTime);
    }

    /**
     * Configuration block for error reporting configuration. See below.
     * 
     */
    @Import(name="errorReportConfiguration")
    private @Nullable Output<ScheduledQueryErrorReportConfigurationArgs> errorReportConfiguration;

    /**
     * @return Configuration block for error reporting configuration. See below.
     * 
     */
    public Optional<Output<ScheduledQueryErrorReportConfigurationArgs>> errorReportConfiguration() {
        return Optional.ofNullable(this.errorReportConfiguration);
    }

    /**
     * ARN for the IAM role that Timestream will assume when running the scheduled query.
     * 
     */
    @Import(name="executionRoleArn")
    private @Nullable Output<String> executionRoleArn;

    /**
     * @return ARN for the IAM role that Timestream will assume when running the scheduled query.
     * 
     */
    public Optional<Output<String>> executionRoleArn() {
        return Optional.ofNullable(this.executionRoleArn);
    }

    /**
     * Amazon KMS key used to encrypt the scheduled query resource, at-rest. If not specified, the scheduled query resource will be encrypted with a Timestream owned Amazon KMS key. To specify a KMS key, use the key ID, key ARN, alias name, or alias ARN. When using an alias name, prefix the name with &#34;alias/&#34;. If `error_report_configuration` uses `SSE_KMS` as the encryption type, the same `kms_key_id` is used to encrypt the error report at rest.
     * 
     */
    @Import(name="kmsKeyId")
    private @Nullable Output<String> kmsKeyId;

    /**
     * @return Amazon KMS key used to encrypt the scheduled query resource, at-rest. If not specified, the scheduled query resource will be encrypted with a Timestream owned Amazon KMS key. To specify a KMS key, use the key ID, key ARN, alias name, or alias ARN. When using an alias name, prefix the name with &#34;alias/&#34;. If `error_report_configuration` uses `SSE_KMS` as the encryption type, the same `kms_key_id` is used to encrypt the error report at rest.
     * 
     */
    public Optional<Output<String>> kmsKeyId() {
        return Optional.ofNullable(this.kmsKeyId);
    }

    /**
     * Runtime summary for the last scheduled query run.
     * 
     */
    @Import(name="lastRunSummaries")
    private @Nullable Output<List<ScheduledQueryLastRunSummaryArgs>> lastRunSummaries;

    /**
     * @return Runtime summary for the last scheduled query run.
     * 
     */
    public Optional<Output<List<ScheduledQueryLastRunSummaryArgs>>> lastRunSummaries() {
        return Optional.ofNullable(this.lastRunSummaries);
    }

    /**
     * Name of the scheduled query.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the scheduled query.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Next time the scheduled query is scheduled to run.
     * 
     */
    @Import(name="nextInvocationTime")
    private @Nullable Output<String> nextInvocationTime;

    /**
     * @return Next time the scheduled query is scheduled to run.
     * 
     */
    public Optional<Output<String>> nextInvocationTime() {
        return Optional.ofNullable(this.nextInvocationTime);
    }

    /**
     * Configuration block for notification configuration for a scheduled query. A notification is sent by Timestream when a scheduled query is created, its state is updated, or when it is deleted. See below.
     * 
     */
    @Import(name="notificationConfiguration")
    private @Nullable Output<ScheduledQueryNotificationConfigurationArgs> notificationConfiguration;

    /**
     * @return Configuration block for notification configuration for a scheduled query. A notification is sent by Timestream when a scheduled query is created, its state is updated, or when it is deleted. See below.
     * 
     */
    public Optional<Output<ScheduledQueryNotificationConfigurationArgs>> notificationConfiguration() {
        return Optional.ofNullable(this.notificationConfiguration);
    }

    /**
     * Last time the scheduled query was run.
     * 
     */
    @Import(name="previousInvocationTime")
    private @Nullable Output<String> previousInvocationTime;

    /**
     * @return Last time the scheduled query was run.
     * 
     */
    public Optional<Output<String>> previousInvocationTime() {
        return Optional.ofNullable(this.previousInvocationTime);
    }

    /**
     * Query string to run. Parameter names can be specified in the query string using the `{@literal @}` character followed by an identifier. The named parameter `{@literal @}scheduled_runtime` is reserved and can be used in the query to get the time at which the query is scheduled to run. The timestamp calculated according to the `schedule_configuration` parameter, will be the value of `{@literal @}scheduled_runtime` paramater for each query run. For example, consider an instance of a scheduled query executing on 2021-12-01 00:00:00. For this instance, the `{@literal @}scheduled_runtime` parameter is initialized to the timestamp 2021-12-01 00:00:00 when invoking the query.
     * 
     */
    @Import(name="queryString")
    private @Nullable Output<String> queryString;

    /**
     * @return Query string to run. Parameter names can be specified in the query string using the `{@literal @}` character followed by an identifier. The named parameter `{@literal @}scheduled_runtime` is reserved and can be used in the query to get the time at which the query is scheduled to run. The timestamp calculated according to the `schedule_configuration` parameter, will be the value of `{@literal @}scheduled_runtime` paramater for each query run. For example, consider an instance of a scheduled query executing on 2021-12-01 00:00:00. For this instance, the `{@literal @}scheduled_runtime` parameter is initialized to the timestamp 2021-12-01 00:00:00 when invoking the query.
     * 
     */
    public Optional<Output<String>> queryString() {
        return Optional.ofNullable(this.queryString);
    }

    /**
     * Runtime summary for the last five failed scheduled query runs.
     * 
     */
    @Import(name="recentlyFailedRuns")
    private @Nullable Output<List<ScheduledQueryRecentlyFailedRunArgs>> recentlyFailedRuns;

    /**
     * @return Runtime summary for the last five failed scheduled query runs.
     * 
     */
    public Optional<Output<List<ScheduledQueryRecentlyFailedRunArgs>>> recentlyFailedRuns() {
        return Optional.ofNullable(this.recentlyFailedRuns);
    }

    /**
     * Configuration block for schedule configuration for the query. See below.
     * 
     */
    @Import(name="scheduleConfiguration")
    private @Nullable Output<ScheduledQueryScheduleConfigurationArgs> scheduleConfiguration;

    /**
     * @return Configuration block for schedule configuration for the query. See below.
     * 
     */
    public Optional<Output<ScheduledQueryScheduleConfigurationArgs>> scheduleConfiguration() {
        return Optional.ofNullable(this.scheduleConfiguration);
    }

    /**
     * State of the scheduled query, either `ENABLED` or `DISABLED`.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return State of the scheduled query, either `ENABLED` or `DISABLED`.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * Map of tags assigned to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Map of tags assigned to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    /**
     * @return Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    /**
     * Configuration block for writing the result of a query. See below.
     * 
     * The following arguments are optional:
     * 
     */
    @Import(name="targetConfiguration")
    private @Nullable Output<ScheduledQueryTargetConfigurationArgs> targetConfiguration;

    /**
     * @return Configuration block for writing the result of a query. See below.
     * 
     * The following arguments are optional:
     * 
     */
    public Optional<Output<ScheduledQueryTargetConfigurationArgs>> targetConfiguration() {
        return Optional.ofNullable(this.targetConfiguration);
    }

    @Import(name="timeouts")
    private @Nullable Output<ScheduledQueryTimeoutsArgs> timeouts;

    public Optional<Output<ScheduledQueryTimeoutsArgs>> timeouts() {
        return Optional.ofNullable(this.timeouts);
    }

    private ScheduledQueryState() {}

    private ScheduledQueryState(ScheduledQueryState $) {
        this.arn = $.arn;
        this.creationTime = $.creationTime;
        this.errorReportConfiguration = $.errorReportConfiguration;
        this.executionRoleArn = $.executionRoleArn;
        this.kmsKeyId = $.kmsKeyId;
        this.lastRunSummaries = $.lastRunSummaries;
        this.name = $.name;
        this.nextInvocationTime = $.nextInvocationTime;
        this.notificationConfiguration = $.notificationConfiguration;
        this.previousInvocationTime = $.previousInvocationTime;
        this.queryString = $.queryString;
        this.recentlyFailedRuns = $.recentlyFailedRuns;
        this.scheduleConfiguration = $.scheduleConfiguration;
        this.state = $.state;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
        this.targetConfiguration = $.targetConfiguration;
        this.timeouts = $.timeouts;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ScheduledQueryState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ScheduledQueryState $;

        public Builder() {
            $ = new ScheduledQueryState();
        }

        public Builder(ScheduledQueryState defaults) {
            $ = new ScheduledQueryState(Objects.requireNonNull(defaults));
        }

        /**
         * @param arn ARN of the Scheduled Query.
         * 
         * @return builder
         * 
         */
        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        /**
         * @param arn ARN of the Scheduled Query.
         * 
         * @return builder
         * 
         */
        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        /**
         * @param creationTime Creation time for the scheduled query.
         * 
         * @return builder
         * 
         */
        public Builder creationTime(@Nullable Output<String> creationTime) {
            $.creationTime = creationTime;
            return this;
        }

        /**
         * @param creationTime Creation time for the scheduled query.
         * 
         * @return builder
         * 
         */
        public Builder creationTime(String creationTime) {
            return creationTime(Output.of(creationTime));
        }

        /**
         * @param errorReportConfiguration Configuration block for error reporting configuration. See below.
         * 
         * @return builder
         * 
         */
        public Builder errorReportConfiguration(@Nullable Output<ScheduledQueryErrorReportConfigurationArgs> errorReportConfiguration) {
            $.errorReportConfiguration = errorReportConfiguration;
            return this;
        }

        /**
         * @param errorReportConfiguration Configuration block for error reporting configuration. See below.
         * 
         * @return builder
         * 
         */
        public Builder errorReportConfiguration(ScheduledQueryErrorReportConfigurationArgs errorReportConfiguration) {
            return errorReportConfiguration(Output.of(errorReportConfiguration));
        }

        /**
         * @param executionRoleArn ARN for the IAM role that Timestream will assume when running the scheduled query.
         * 
         * @return builder
         * 
         */
        public Builder executionRoleArn(@Nullable Output<String> executionRoleArn) {
            $.executionRoleArn = executionRoleArn;
            return this;
        }

        /**
         * @param executionRoleArn ARN for the IAM role that Timestream will assume when running the scheduled query.
         * 
         * @return builder
         * 
         */
        public Builder executionRoleArn(String executionRoleArn) {
            return executionRoleArn(Output.of(executionRoleArn));
        }

        /**
         * @param kmsKeyId Amazon KMS key used to encrypt the scheduled query resource, at-rest. If not specified, the scheduled query resource will be encrypted with a Timestream owned Amazon KMS key. To specify a KMS key, use the key ID, key ARN, alias name, or alias ARN. When using an alias name, prefix the name with &#34;alias/&#34;. If `error_report_configuration` uses `SSE_KMS` as the encryption type, the same `kms_key_id` is used to encrypt the error report at rest.
         * 
         * @return builder
         * 
         */
        public Builder kmsKeyId(@Nullable Output<String> kmsKeyId) {
            $.kmsKeyId = kmsKeyId;
            return this;
        }

        /**
         * @param kmsKeyId Amazon KMS key used to encrypt the scheduled query resource, at-rest. If not specified, the scheduled query resource will be encrypted with a Timestream owned Amazon KMS key. To specify a KMS key, use the key ID, key ARN, alias name, or alias ARN. When using an alias name, prefix the name with &#34;alias/&#34;. If `error_report_configuration` uses `SSE_KMS` as the encryption type, the same `kms_key_id` is used to encrypt the error report at rest.
         * 
         * @return builder
         * 
         */
        public Builder kmsKeyId(String kmsKeyId) {
            return kmsKeyId(Output.of(kmsKeyId));
        }

        /**
         * @param lastRunSummaries Runtime summary for the last scheduled query run.
         * 
         * @return builder
         * 
         */
        public Builder lastRunSummaries(@Nullable Output<List<ScheduledQueryLastRunSummaryArgs>> lastRunSummaries) {
            $.lastRunSummaries = lastRunSummaries;
            return this;
        }

        /**
         * @param lastRunSummaries Runtime summary for the last scheduled query run.
         * 
         * @return builder
         * 
         */
        public Builder lastRunSummaries(List<ScheduledQueryLastRunSummaryArgs> lastRunSummaries) {
            return lastRunSummaries(Output.of(lastRunSummaries));
        }

        /**
         * @param lastRunSummaries Runtime summary for the last scheduled query run.
         * 
         * @return builder
         * 
         */
        public Builder lastRunSummaries(ScheduledQueryLastRunSummaryArgs... lastRunSummaries) {
            return lastRunSummaries(List.of(lastRunSummaries));
        }

        /**
         * @param name Name of the scheduled query.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the scheduled query.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param nextInvocationTime Next time the scheduled query is scheduled to run.
         * 
         * @return builder
         * 
         */
        public Builder nextInvocationTime(@Nullable Output<String> nextInvocationTime) {
            $.nextInvocationTime = nextInvocationTime;
            return this;
        }

        /**
         * @param nextInvocationTime Next time the scheduled query is scheduled to run.
         * 
         * @return builder
         * 
         */
        public Builder nextInvocationTime(String nextInvocationTime) {
            return nextInvocationTime(Output.of(nextInvocationTime));
        }

        /**
         * @param notificationConfiguration Configuration block for notification configuration for a scheduled query. A notification is sent by Timestream when a scheduled query is created, its state is updated, or when it is deleted. See below.
         * 
         * @return builder
         * 
         */
        public Builder notificationConfiguration(@Nullable Output<ScheduledQueryNotificationConfigurationArgs> notificationConfiguration) {
            $.notificationConfiguration = notificationConfiguration;
            return this;
        }

        /**
         * @param notificationConfiguration Configuration block for notification configuration for a scheduled query. A notification is sent by Timestream when a scheduled query is created, its state is updated, or when it is deleted. See below.
         * 
         * @return builder
         * 
         */
        public Builder notificationConfiguration(ScheduledQueryNotificationConfigurationArgs notificationConfiguration) {
            return notificationConfiguration(Output.of(notificationConfiguration));
        }

        /**
         * @param previousInvocationTime Last time the scheduled query was run.
         * 
         * @return builder
         * 
         */
        public Builder previousInvocationTime(@Nullable Output<String> previousInvocationTime) {
            $.previousInvocationTime = previousInvocationTime;
            return this;
        }

        /**
         * @param previousInvocationTime Last time the scheduled query was run.
         * 
         * @return builder
         * 
         */
        public Builder previousInvocationTime(String previousInvocationTime) {
            return previousInvocationTime(Output.of(previousInvocationTime));
        }

        /**
         * @param queryString Query string to run. Parameter names can be specified in the query string using the `{@literal @}` character followed by an identifier. The named parameter `{@literal @}scheduled_runtime` is reserved and can be used in the query to get the time at which the query is scheduled to run. The timestamp calculated according to the `schedule_configuration` parameter, will be the value of `{@literal @}scheduled_runtime` paramater for each query run. For example, consider an instance of a scheduled query executing on 2021-12-01 00:00:00. For this instance, the `{@literal @}scheduled_runtime` parameter is initialized to the timestamp 2021-12-01 00:00:00 when invoking the query.
         * 
         * @return builder
         * 
         */
        public Builder queryString(@Nullable Output<String> queryString) {
            $.queryString = queryString;
            return this;
        }

        /**
         * @param queryString Query string to run. Parameter names can be specified in the query string using the `{@literal @}` character followed by an identifier. The named parameter `{@literal @}scheduled_runtime` is reserved and can be used in the query to get the time at which the query is scheduled to run. The timestamp calculated according to the `schedule_configuration` parameter, will be the value of `{@literal @}scheduled_runtime` paramater for each query run. For example, consider an instance of a scheduled query executing on 2021-12-01 00:00:00. For this instance, the `{@literal @}scheduled_runtime` parameter is initialized to the timestamp 2021-12-01 00:00:00 when invoking the query.
         * 
         * @return builder
         * 
         */
        public Builder queryString(String queryString) {
            return queryString(Output.of(queryString));
        }

        /**
         * @param recentlyFailedRuns Runtime summary for the last five failed scheduled query runs.
         * 
         * @return builder
         * 
         */
        public Builder recentlyFailedRuns(@Nullable Output<List<ScheduledQueryRecentlyFailedRunArgs>> recentlyFailedRuns) {
            $.recentlyFailedRuns = recentlyFailedRuns;
            return this;
        }

        /**
         * @param recentlyFailedRuns Runtime summary for the last five failed scheduled query runs.
         * 
         * @return builder
         * 
         */
        public Builder recentlyFailedRuns(List<ScheduledQueryRecentlyFailedRunArgs> recentlyFailedRuns) {
            return recentlyFailedRuns(Output.of(recentlyFailedRuns));
        }

        /**
         * @param recentlyFailedRuns Runtime summary for the last five failed scheduled query runs.
         * 
         * @return builder
         * 
         */
        public Builder recentlyFailedRuns(ScheduledQueryRecentlyFailedRunArgs... recentlyFailedRuns) {
            return recentlyFailedRuns(List.of(recentlyFailedRuns));
        }

        /**
         * @param scheduleConfiguration Configuration block for schedule configuration for the query. See below.
         * 
         * @return builder
         * 
         */
        public Builder scheduleConfiguration(@Nullable Output<ScheduledQueryScheduleConfigurationArgs> scheduleConfiguration) {
            $.scheduleConfiguration = scheduleConfiguration;
            return this;
        }

        /**
         * @param scheduleConfiguration Configuration block for schedule configuration for the query. See below.
         * 
         * @return builder
         * 
         */
        public Builder scheduleConfiguration(ScheduledQueryScheduleConfigurationArgs scheduleConfiguration) {
            return scheduleConfiguration(Output.of(scheduleConfiguration));
        }

        /**
         * @param state State of the scheduled query, either `ENABLED` or `DISABLED`.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state State of the scheduled query, either `ENABLED` or `DISABLED`.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param tags Map of tags assigned to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Map of tags assigned to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tagsAll Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
         * 
         * @return builder
         * 
         * @deprecated
         * Please use `tags` instead.
         * 
         */
        @Deprecated /* Please use `tags` instead. */
        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        /**
         * @param tagsAll Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
         * 
         * @return builder
         * 
         * @deprecated
         * Please use `tags` instead.
         * 
         */
        @Deprecated /* Please use `tags` instead. */
        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        /**
         * @param targetConfiguration Configuration block for writing the result of a query. See below.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder targetConfiguration(@Nullable Output<ScheduledQueryTargetConfigurationArgs> targetConfiguration) {
            $.targetConfiguration = targetConfiguration;
            return this;
        }

        /**
         * @param targetConfiguration Configuration block for writing the result of a query. See below.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder targetConfiguration(ScheduledQueryTargetConfigurationArgs targetConfiguration) {
            return targetConfiguration(Output.of(targetConfiguration));
        }

        public Builder timeouts(@Nullable Output<ScheduledQueryTimeoutsArgs> timeouts) {
            $.timeouts = timeouts;
            return this;
        }

        public Builder timeouts(ScheduledQueryTimeoutsArgs timeouts) {
            return timeouts(Output.of(timeouts));
        }

        public ScheduledQueryState build() {
            return $;
        }
    }

}
