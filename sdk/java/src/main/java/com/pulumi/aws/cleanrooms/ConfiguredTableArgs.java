// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.cleanrooms;

import com.pulumi.aws.cleanrooms.inputs.ConfiguredTableTableReferenceArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConfiguredTableArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConfiguredTableArgs Empty = new ConfiguredTableArgs();

    /**
     * The columns of the references table which will be included in the configured table.
     * 
     */
    @Import(name="allowedColumns", required=true)
    private Output<List<String>> allowedColumns;

    /**
     * @return The columns of the references table which will be included in the configured table.
     * 
     */
    public Output<List<String>> allowedColumns() {
        return this.allowedColumns;
    }

    /**
     * The analysis method for the configured table. The only valid value is currently `DIRECT_QUERY`.
     * 
     */
    @Import(name="analysisMethod", required=true)
    private Output<String> analysisMethod;

    /**
     * @return The analysis method for the configured table. The only valid value is currently `DIRECT_QUERY`.
     * 
     */
    public Output<String> analysisMethod() {
        return this.analysisMethod;
    }

    /**
     * A description for the configured table.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A description for the configured table.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The name of the configured table.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the configured table.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * A reference to the AWS Glue table which will be used to create the configured table.
     * * `table_reference.database_name` - (Required - Forces new resource) - The name of the AWS Glue database which contains the table.
     * * `table_reference.table_name` - (Required - Forces new resource) - The name of the AWS Glue table which will be used to create the configured table.
     * 
     */
    @Import(name="tableReference", required=true)
    private Output<ConfiguredTableTableReferenceArgs> tableReference;

    /**
     * @return A reference to the AWS Glue table which will be used to create the configured table.
     * * `table_reference.database_name` - (Required - Forces new resource) - The name of the AWS Glue database which contains the table.
     * * `table_reference.table_name` - (Required - Forces new resource) - The name of the AWS Glue table which will be used to create the configured table.
     * 
     */
    public Output<ConfiguredTableTableReferenceArgs> tableReference() {
        return this.tableReference;
    }

    /**
     * Key value pairs which tag the configured table.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Key value pairs which tag the configured table.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private ConfiguredTableArgs() {}

    private ConfiguredTableArgs(ConfiguredTableArgs $) {
        this.allowedColumns = $.allowedColumns;
        this.analysisMethod = $.analysisMethod;
        this.description = $.description;
        this.name = $.name;
        this.tableReference = $.tableReference;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConfiguredTableArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConfiguredTableArgs $;

        public Builder() {
            $ = new ConfiguredTableArgs();
        }

        public Builder(ConfiguredTableArgs defaults) {
            $ = new ConfiguredTableArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowedColumns The columns of the references table which will be included in the configured table.
         * 
         * @return builder
         * 
         */
        public Builder allowedColumns(Output<List<String>> allowedColumns) {
            $.allowedColumns = allowedColumns;
            return this;
        }

        /**
         * @param allowedColumns The columns of the references table which will be included in the configured table.
         * 
         * @return builder
         * 
         */
        public Builder allowedColumns(List<String> allowedColumns) {
            return allowedColumns(Output.of(allowedColumns));
        }

        /**
         * @param allowedColumns The columns of the references table which will be included in the configured table.
         * 
         * @return builder
         * 
         */
        public Builder allowedColumns(String... allowedColumns) {
            return allowedColumns(List.of(allowedColumns));
        }

        /**
         * @param analysisMethod The analysis method for the configured table. The only valid value is currently `DIRECT_QUERY`.
         * 
         * @return builder
         * 
         */
        public Builder analysisMethod(Output<String> analysisMethod) {
            $.analysisMethod = analysisMethod;
            return this;
        }

        /**
         * @param analysisMethod The analysis method for the configured table. The only valid value is currently `DIRECT_QUERY`.
         * 
         * @return builder
         * 
         */
        public Builder analysisMethod(String analysisMethod) {
            return analysisMethod(Output.of(analysisMethod));
        }

        /**
         * @param description A description for the configured table.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A description for the configured table.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param name The name of the configured table.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the configured table.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param tableReference A reference to the AWS Glue table which will be used to create the configured table.
         * * `table_reference.database_name` - (Required - Forces new resource) - The name of the AWS Glue database which contains the table.
         * * `table_reference.table_name` - (Required - Forces new resource) - The name of the AWS Glue table which will be used to create the configured table.
         * 
         * @return builder
         * 
         */
        public Builder tableReference(Output<ConfiguredTableTableReferenceArgs> tableReference) {
            $.tableReference = tableReference;
            return this;
        }

        /**
         * @param tableReference A reference to the AWS Glue table which will be used to create the configured table.
         * * `table_reference.database_name` - (Required - Forces new resource) - The name of the AWS Glue database which contains the table.
         * * `table_reference.table_name` - (Required - Forces new resource) - The name of the AWS Glue table which will be used to create the configured table.
         * 
         * @return builder
         * 
         */
        public Builder tableReference(ConfiguredTableTableReferenceArgs tableReference) {
            return tableReference(Output.of(tableReference));
        }

        /**
         * @param tags Key value pairs which tag the configured table.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Key value pairs which tag the configured table.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public ConfiguredTableArgs build() {
            if ($.allowedColumns == null) {
                throw new MissingRequiredPropertyException("ConfiguredTableArgs", "allowedColumns");
            }
            if ($.analysisMethod == null) {
                throw new MissingRequiredPropertyException("ConfiguredTableArgs", "analysisMethod");
            }
            if ($.tableReference == null) {
                throw new MissingRequiredPropertyException("ConfiguredTableArgs", "tableReference");
            }
            return $;
        }
    }

}
