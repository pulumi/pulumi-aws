// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.appmesh.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetVirtualRouterArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetVirtualRouterArgs Empty = new GetVirtualRouterArgs();

    /**
     * Name of the mesh in which the virtual router exists
     * 
     */
    @Import(name="meshName", required=true)
    private Output<String> meshName;

    /**
     * @return Name of the mesh in which the virtual router exists
     * 
     */
    public Output<String> meshName() {
        return this.meshName;
    }

    @Import(name="meshOwner")
    private @Nullable Output<String> meshOwner;

    public Optional<Output<String>> meshOwner() {
        return Optional.ofNullable(this.meshOwner);
    }

    /**
     * Name of the virtual router.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Name of the virtual router.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * Map of tags.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Map of tags.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private GetVirtualRouterArgs() {}

    private GetVirtualRouterArgs(GetVirtualRouterArgs $) {
        this.meshName = $.meshName;
        this.meshOwner = $.meshOwner;
        this.name = $.name;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetVirtualRouterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetVirtualRouterArgs $;

        public Builder() {
            $ = new GetVirtualRouterArgs();
        }

        public Builder(GetVirtualRouterArgs defaults) {
            $ = new GetVirtualRouterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param meshName Name of the mesh in which the virtual router exists
         * 
         * @return builder
         * 
         */
        public Builder meshName(Output<String> meshName) {
            $.meshName = meshName;
            return this;
        }

        /**
         * @param meshName Name of the mesh in which the virtual router exists
         * 
         * @return builder
         * 
         */
        public Builder meshName(String meshName) {
            return meshName(Output.of(meshName));
        }

        public Builder meshOwner(@Nullable Output<String> meshOwner) {
            $.meshOwner = meshOwner;
            return this;
        }

        public Builder meshOwner(String meshOwner) {
            return meshOwner(Output.of(meshOwner));
        }

        /**
         * @param name Name of the virtual router.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the virtual router.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param tags Map of tags.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Map of tags.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public GetVirtualRouterArgs build() {
            $.meshName = Objects.requireNonNull($.meshName, "expected parameter 'meshName' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            return $;
        }
    }

}
