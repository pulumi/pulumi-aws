// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.glue;

import com.pulumi.aws.glue.inputs.PartitionStorageDescriptorArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PartitionArgs extends com.pulumi.resources.ResourceArgs {

    public static final PartitionArgs Empty = new PartitionArgs();

    @Import(name="catalogId")
    private @Nullable Output<String> catalogId;

    public Optional<Output<String>> catalogId() {
        return Optional.ofNullable(this.catalogId);
    }

    @Import(name="databaseName", required=true)
    private Output<String> databaseName;

    public Output<String> databaseName() {
        return this.databaseName;
    }

    @Import(name="parameters")
    private @Nullable Output<Map<String,String>> parameters;

    public Optional<Output<Map<String,String>>> parameters() {
        return Optional.ofNullable(this.parameters);
    }

    @Import(name="partitionValues", required=true)
    private Output<List<String>> partitionValues;

    public Output<List<String>> partitionValues() {
        return this.partitionValues;
    }

    @Import(name="storageDescriptor")
    private @Nullable Output<PartitionStorageDescriptorArgs> storageDescriptor;

    public Optional<Output<PartitionStorageDescriptorArgs>> storageDescriptor() {
        return Optional.ofNullable(this.storageDescriptor);
    }

    @Import(name="tableName", required=true)
    private Output<String> tableName;

    public Output<String> tableName() {
        return this.tableName;
    }

    private PartitionArgs() {}

    private PartitionArgs(PartitionArgs $) {
        this.catalogId = $.catalogId;
        this.databaseName = $.databaseName;
        this.parameters = $.parameters;
        this.partitionValues = $.partitionValues;
        this.storageDescriptor = $.storageDescriptor;
        this.tableName = $.tableName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PartitionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PartitionArgs $;

        public Builder() {
            $ = new PartitionArgs();
        }

        public Builder(PartitionArgs defaults) {
            $ = new PartitionArgs(Objects.requireNonNull(defaults));
        }

        public Builder catalogId(@Nullable Output<String> catalogId) {
            $.catalogId = catalogId;
            return this;
        }

        public Builder catalogId(String catalogId) {
            return catalogId(Output.of(catalogId));
        }

        public Builder databaseName(Output<String> databaseName) {
            $.databaseName = databaseName;
            return this;
        }

        public Builder databaseName(String databaseName) {
            return databaseName(Output.of(databaseName));
        }

        public Builder parameters(@Nullable Output<Map<String,String>> parameters) {
            $.parameters = parameters;
            return this;
        }

        public Builder parameters(Map<String,String> parameters) {
            return parameters(Output.of(parameters));
        }

        public Builder partitionValues(Output<List<String>> partitionValues) {
            $.partitionValues = partitionValues;
            return this;
        }

        public Builder partitionValues(List<String> partitionValues) {
            return partitionValues(Output.of(partitionValues));
        }

        public Builder partitionValues(String... partitionValues) {
            return partitionValues(List.of(partitionValues));
        }

        public Builder storageDescriptor(@Nullable Output<PartitionStorageDescriptorArgs> storageDescriptor) {
            $.storageDescriptor = storageDescriptor;
            return this;
        }

        public Builder storageDescriptor(PartitionStorageDescriptorArgs storageDescriptor) {
            return storageDescriptor(Output.of(storageDescriptor));
        }

        public Builder tableName(Output<String> tableName) {
            $.tableName = tableName;
            return this;
        }

        public Builder tableName(String tableName) {
            return tableName(Output.of(tableName));
        }

        public PartitionArgs build() {
            $.databaseName = Objects.requireNonNull($.databaseName, "expected parameter 'databaseName' to be non-null");
            $.partitionValues = Objects.requireNonNull($.partitionValues, "expected parameter 'partitionValues' to be non-null");
            $.tableName = Objects.requireNonNull($.tableName, "expected parameter 'tableName' to be non-null");
            return $;
        }
    }

}
