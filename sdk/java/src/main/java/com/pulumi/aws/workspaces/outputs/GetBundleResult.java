// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.workspaces.outputs;

import com.pulumi.aws.workspaces.outputs.GetBundleComputeType;
import com.pulumi.aws.workspaces.outputs.GetBundleRootStorage;
import com.pulumi.aws.workspaces.outputs.GetBundleUserStorage;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetBundleResult {
    /**
     * @return The ID of the bundle.
     * 
     */
    private @Nullable String bundleId;
    /**
     * @return The compute type. See supported fields below.
     * 
     */
    private @Nullable List<GetBundleComputeType> computeTypes;
    /**
     * @return The description of the bundle.
     * 
     */
    private @Nullable String description;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private @Nullable String id;
    /**
     * @return Name of the compute type.
     * 
     */
    private @Nullable String name;
    /**
     * @return The owner of the bundle.
     * 
     */
    private @Nullable String owner;
    /**
     * @return The root volume. See supported fields below.
     * 
     */
    private @Nullable List<GetBundleRootStorage> rootStorages;
    /**
     * @return The user storage. See supported fields below.
     * 
     */
    private @Nullable List<GetBundleUserStorage> userStorages;

    private GetBundleResult() {}
    /**
     * @return The ID of the bundle.
     * 
     */
    public Optional<String> bundleId() {
        return Optional.ofNullable(this.bundleId);
    }
    /**
     * @return The compute type. See supported fields below.
     * 
     */
    public List<GetBundleComputeType> computeTypes() {
        return this.computeTypes == null ? List.of() : this.computeTypes;
    }
    /**
     * @return The description of the bundle.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Name of the compute type.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return The owner of the bundle.
     * 
     */
    public Optional<String> owner() {
        return Optional.ofNullable(this.owner);
    }
    /**
     * @return The root volume. See supported fields below.
     * 
     */
    public List<GetBundleRootStorage> rootStorages() {
        return this.rootStorages == null ? List.of() : this.rootStorages;
    }
    /**
     * @return The user storage. See supported fields below.
     * 
     */
    public List<GetBundleUserStorage> userStorages() {
        return this.userStorages == null ? List.of() : this.userStorages;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBundleResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String bundleId;
        private @Nullable List<GetBundleComputeType> computeTypes;
        private @Nullable String description;
        private @Nullable String id;
        private @Nullable String name;
        private @Nullable String owner;
        private @Nullable List<GetBundleRootStorage> rootStorages;
        private @Nullable List<GetBundleUserStorage> userStorages;
        public Builder() {}
        public Builder(GetBundleResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bundleId = defaults.bundleId;
    	      this.computeTypes = defaults.computeTypes;
    	      this.description = defaults.description;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.owner = defaults.owner;
    	      this.rootStorages = defaults.rootStorages;
    	      this.userStorages = defaults.userStorages;
        }

        @CustomType.Setter
        public Builder bundleId(@Nullable String bundleId) {
            this.bundleId = bundleId;
            return this;
        }
        @CustomType.Setter
        public Builder computeTypes(@Nullable List<GetBundleComputeType> computeTypes) {
            this.computeTypes = computeTypes;
            return this;
        }
        public Builder computeTypes(GetBundleComputeType... computeTypes) {
            return computeTypes(List.of(computeTypes));
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder owner(@Nullable String owner) {
            this.owner = owner;
            return this;
        }
        @CustomType.Setter
        public Builder rootStorages(@Nullable List<GetBundleRootStorage> rootStorages) {
            this.rootStorages = rootStorages;
            return this;
        }
        public Builder rootStorages(GetBundleRootStorage... rootStorages) {
            return rootStorages(List.of(rootStorages));
        }
        @CustomType.Setter
        public Builder userStorages(@Nullable List<GetBundleUserStorage> userStorages) {
            this.userStorages = userStorages;
            return this;
        }
        public Builder userStorages(GetBundleUserStorage... userStorages) {
            return userStorages(List.of(userStorages));
        }
        public GetBundleResult build() {
            final var o = new GetBundleResult();
            o.bundleId = bundleId;
            o.computeTypes = computeTypes;
            o.description = description;
            o.id = id;
            o.name = name;
            o.owner = owner;
            o.rootStorages = rootStorages;
            o.userStorages = userStorages;
            return o;
        }
    }
}
