// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.inputs;

import com.pulumi.aws.quicksight.inputs.SubtitleFormatTextArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SubtitleArgs extends com.pulumi.resources.ResourceArgs {

    public static final SubtitleArgs Empty = new SubtitleArgs();

    @Import(name="formatText")
    private @Nullable Output<SubtitleFormatTextArgs> formatText;

    public Optional<Output<SubtitleFormatTextArgs>> formatText() {
        return Optional.ofNullable(this.formatText);
    }

    @Import(name="visibility")
    private @Nullable Output<String> visibility;

    public Optional<Output<String>> visibility() {
        return Optional.ofNullable(this.visibility);
    }

    private SubtitleArgs() {}

    private SubtitleArgs(SubtitleArgs $) {
        this.formatText = $.formatText;
        this.visibility = $.visibility;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SubtitleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SubtitleArgs $;

        public Builder() {
            $ = new SubtitleArgs();
        }

        public Builder(SubtitleArgs defaults) {
            $ = new SubtitleArgs(Objects.requireNonNull(defaults));
        }

        public Builder formatText(@Nullable Output<SubtitleFormatTextArgs> formatText) {
            $.formatText = formatText;
            return this;
        }

        public Builder formatText(SubtitleFormatTextArgs formatText) {
            return formatText(Output.of(formatText));
        }

        public Builder visibility(@Nullable Output<String> visibility) {
            $.visibility = visibility;
            return this;
        }

        public Builder visibility(String visibility) {
            return visibility(Output.of(visibility));
        }

        public SubtitleArgs build() {
            return $;
        }
    }

}
