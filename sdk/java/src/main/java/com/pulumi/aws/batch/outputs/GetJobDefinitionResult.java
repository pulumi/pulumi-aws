// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.batch.outputs;

import com.pulumi.aws.batch.outputs.GetJobDefinitionEksProperty;
import com.pulumi.aws.batch.outputs.GetJobDefinitionNodeProperty;
import com.pulumi.aws.batch.outputs.GetJobDefinitionRetryStrategy;
import com.pulumi.aws.batch.outputs.GetJobDefinitionTimeout;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetJobDefinitionResult {
    private @Nullable String arn;
    private String arnPrefix;
    /**
     * @return The orchestration type of the compute environment.
     * 
     */
    private String containerOrchestrationType;
    /**
     * @return An object with various properties that are specific to Amazon EKS based jobs. This must not be specified for Amazon ECS based job definitions.
     * 
     */
    private List<GetJobDefinitionEksProperty> eksProperties;
    /**
     * @return The ARN
     * 
     */
    private String id;
    /**
     * @return The name of the volume.
     * 
     */
    private @Nullable String name;
    /**
     * @return An object with various properties specific to multi-node parallel jobs. If you specify node properties for a job, it becomes a multi-node parallel job. For more information, see Multi-node Parallel Jobs in the AWS Batch User Guide. If the job definition&#39;s type parameter is container, then you must specify either containerProperties or nodeProperties.
     * 
     */
    private List<GetJobDefinitionNodeProperty> nodeProperties;
    /**
     * @return The retry strategy to use for failed jobs that are submitted with this job definition. Any retry strategy that&#39;s specified during a SubmitJob operation overrides the retry strategy defined here. If a job is terminated due to a timeout, it isn&#39;t retried.
     * 
     */
    private List<GetJobDefinitionRetryStrategy> retryStrategies;
    private @Nullable Integer revision;
    /**
     * @return The scheduling priority for jobs that are submitted with this job definition. This only affects jobs in job queues with a fair share policy. Jobs with a higher scheduling priority are scheduled before jobs with a lower scheduling priority.
     * 
     */
    private Integer schedulingPriority;
    private @Nullable String status;
    private Map<String,String> tags;
    /**
     * @return The timeout configuration for jobs that are submitted with this job definition, after which AWS Batch terminates your jobs if they have not finished. If a job is terminated due to a timeout, it isn&#39;t retried. The minimum value for the timeout is 60 seconds.
     * 
     */
    private List<GetJobDefinitionTimeout> timeouts;
    /**
     * @return The type of resource to assign to a container. The supported resources include `GPU`, `MEMORY`, and `VCPU`.
     * 
     */
    private String type;

    private GetJobDefinitionResult() {}
    public Optional<String> arn() {
        return Optional.ofNullable(this.arn);
    }
    public String arnPrefix() {
        return this.arnPrefix;
    }
    /**
     * @return The orchestration type of the compute environment.
     * 
     */
    public String containerOrchestrationType() {
        return this.containerOrchestrationType;
    }
    /**
     * @return An object with various properties that are specific to Amazon EKS based jobs. This must not be specified for Amazon ECS based job definitions.
     * 
     */
    public List<GetJobDefinitionEksProperty> eksProperties() {
        return this.eksProperties;
    }
    /**
     * @return The ARN
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The name of the volume.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return An object with various properties specific to multi-node parallel jobs. If you specify node properties for a job, it becomes a multi-node parallel job. For more information, see Multi-node Parallel Jobs in the AWS Batch User Guide. If the job definition&#39;s type parameter is container, then you must specify either containerProperties or nodeProperties.
     * 
     */
    public List<GetJobDefinitionNodeProperty> nodeProperties() {
        return this.nodeProperties;
    }
    /**
     * @return The retry strategy to use for failed jobs that are submitted with this job definition. Any retry strategy that&#39;s specified during a SubmitJob operation overrides the retry strategy defined here. If a job is terminated due to a timeout, it isn&#39;t retried.
     * 
     */
    public List<GetJobDefinitionRetryStrategy> retryStrategies() {
        return this.retryStrategies;
    }
    public Optional<Integer> revision() {
        return Optional.ofNullable(this.revision);
    }
    /**
     * @return The scheduling priority for jobs that are submitted with this job definition. This only affects jobs in job queues with a fair share policy. Jobs with a higher scheduling priority are scheduled before jobs with a lower scheduling priority.
     * 
     */
    public Integer schedulingPriority() {
        return this.schedulingPriority;
    }
    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }
    public Map<String,String> tags() {
        return this.tags;
    }
    /**
     * @return The timeout configuration for jobs that are submitted with this job definition, after which AWS Batch terminates your jobs if they have not finished. If a job is terminated due to a timeout, it isn&#39;t retried. The minimum value for the timeout is 60 seconds.
     * 
     */
    public List<GetJobDefinitionTimeout> timeouts() {
        return this.timeouts;
    }
    /**
     * @return The type of resource to assign to a container. The supported resources include `GPU`, `MEMORY`, and `VCPU`.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetJobDefinitionResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String arn;
        private String arnPrefix;
        private String containerOrchestrationType;
        private List<GetJobDefinitionEksProperty> eksProperties;
        private String id;
        private @Nullable String name;
        private List<GetJobDefinitionNodeProperty> nodeProperties;
        private List<GetJobDefinitionRetryStrategy> retryStrategies;
        private @Nullable Integer revision;
        private Integer schedulingPriority;
        private @Nullable String status;
        private Map<String,String> tags;
        private List<GetJobDefinitionTimeout> timeouts;
        private String type;
        public Builder() {}
        public Builder(GetJobDefinitionResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.arnPrefix = defaults.arnPrefix;
    	      this.containerOrchestrationType = defaults.containerOrchestrationType;
    	      this.eksProperties = defaults.eksProperties;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.nodeProperties = defaults.nodeProperties;
    	      this.retryStrategies = defaults.retryStrategies;
    	      this.revision = defaults.revision;
    	      this.schedulingPriority = defaults.schedulingPriority;
    	      this.status = defaults.status;
    	      this.tags = defaults.tags;
    	      this.timeouts = defaults.timeouts;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder arn(@Nullable String arn) {

            this.arn = arn;
            return this;
        }
        @CustomType.Setter
        public Builder arnPrefix(String arnPrefix) {
            if (arnPrefix == null) {
              throw new MissingRequiredPropertyException("GetJobDefinitionResult", "arnPrefix");
            }
            this.arnPrefix = arnPrefix;
            return this;
        }
        @CustomType.Setter
        public Builder containerOrchestrationType(String containerOrchestrationType) {
            if (containerOrchestrationType == null) {
              throw new MissingRequiredPropertyException("GetJobDefinitionResult", "containerOrchestrationType");
            }
            this.containerOrchestrationType = containerOrchestrationType;
            return this;
        }
        @CustomType.Setter
        public Builder eksProperties(List<GetJobDefinitionEksProperty> eksProperties) {
            if (eksProperties == null) {
              throw new MissingRequiredPropertyException("GetJobDefinitionResult", "eksProperties");
            }
            this.eksProperties = eksProperties;
            return this;
        }
        public Builder eksProperties(GetJobDefinitionEksProperty... eksProperties) {
            return eksProperties(List.of(eksProperties));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetJobDefinitionResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder nodeProperties(List<GetJobDefinitionNodeProperty> nodeProperties) {
            if (nodeProperties == null) {
              throw new MissingRequiredPropertyException("GetJobDefinitionResult", "nodeProperties");
            }
            this.nodeProperties = nodeProperties;
            return this;
        }
        public Builder nodeProperties(GetJobDefinitionNodeProperty... nodeProperties) {
            return nodeProperties(List.of(nodeProperties));
        }
        @CustomType.Setter
        public Builder retryStrategies(List<GetJobDefinitionRetryStrategy> retryStrategies) {
            if (retryStrategies == null) {
              throw new MissingRequiredPropertyException("GetJobDefinitionResult", "retryStrategies");
            }
            this.retryStrategies = retryStrategies;
            return this;
        }
        public Builder retryStrategies(GetJobDefinitionRetryStrategy... retryStrategies) {
            return retryStrategies(List.of(retryStrategies));
        }
        @CustomType.Setter
        public Builder revision(@Nullable Integer revision) {

            this.revision = revision;
            return this;
        }
        @CustomType.Setter
        public Builder schedulingPriority(Integer schedulingPriority) {
            if (schedulingPriority == null) {
              throw new MissingRequiredPropertyException("GetJobDefinitionResult", "schedulingPriority");
            }
            this.schedulingPriority = schedulingPriority;
            return this;
        }
        @CustomType.Setter
        public Builder status(@Nullable String status) {

            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetJobDefinitionResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder timeouts(List<GetJobDefinitionTimeout> timeouts) {
            if (timeouts == null) {
              throw new MissingRequiredPropertyException("GetJobDefinitionResult", "timeouts");
            }
            this.timeouts = timeouts;
            return this;
        }
        public Builder timeouts(GetJobDefinitionTimeout... timeouts) {
            return timeouts(List.of(timeouts));
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetJobDefinitionResult", "type");
            }
            this.type = type;
            return this;
        }
        public GetJobDefinitionResult build() {
            final var _resultValue = new GetJobDefinitionResult();
            _resultValue.arn = arn;
            _resultValue.arnPrefix = arnPrefix;
            _resultValue.containerOrchestrationType = containerOrchestrationType;
            _resultValue.eksProperties = eksProperties;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.nodeProperties = nodeProperties;
            _resultValue.retryStrategies = retryStrategies;
            _resultValue.revision = revision;
            _resultValue.schedulingPriority = schedulingPriority;
            _resultValue.status = status;
            _resultValue.tags = tags;
            _resultValue.timeouts = timeouts;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
