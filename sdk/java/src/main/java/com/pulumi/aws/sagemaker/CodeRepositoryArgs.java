// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.sagemaker;

import com.pulumi.aws.sagemaker.inputs.CodeRepositoryGitConfigArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CodeRepositoryArgs extends com.pulumi.resources.ResourceArgs {

    public static final CodeRepositoryArgs Empty = new CodeRepositoryArgs();

    @Import(name="codeRepositoryName", required=true)
    private Output<String> codeRepositoryName;

    public Output<String> codeRepositoryName() {
        return this.codeRepositoryName;
    }

    @Import(name="gitConfig", required=true)
    private Output<CodeRepositoryGitConfigArgs> gitConfig;

    public Output<CodeRepositoryGitConfigArgs> gitConfig() {
        return this.gitConfig;
    }

    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private CodeRepositoryArgs() {}

    private CodeRepositoryArgs(CodeRepositoryArgs $) {
        this.codeRepositoryName = $.codeRepositoryName;
        this.gitConfig = $.gitConfig;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CodeRepositoryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CodeRepositoryArgs $;

        public Builder() {
            $ = new CodeRepositoryArgs();
        }

        public Builder(CodeRepositoryArgs defaults) {
            $ = new CodeRepositoryArgs(Objects.requireNonNull(defaults));
        }

        public Builder codeRepositoryName(Output<String> codeRepositoryName) {
            $.codeRepositoryName = codeRepositoryName;
            return this;
        }

        public Builder codeRepositoryName(String codeRepositoryName) {
            return codeRepositoryName(Output.of(codeRepositoryName));
        }

        public Builder gitConfig(Output<CodeRepositoryGitConfigArgs> gitConfig) {
            $.gitConfig = gitConfig;
            return this;
        }

        public Builder gitConfig(CodeRepositoryGitConfigArgs gitConfig) {
            return gitConfig(Output.of(gitConfig));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public CodeRepositoryArgs build() {
            $.codeRepositoryName = Objects.requireNonNull($.codeRepositoryName, "expected parameter 'codeRepositoryName' to be non-null");
            $.gitConfig = Objects.requireNonNull($.gitConfig, "expected parameter 'gitConfig' to be non-null");
            return $;
        }
    }

}
