// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.identitystore.inputs;

import com.pulumi.aws.identitystore.inputs.GetUserAlternateIdentifier;
import com.pulumi.aws.identitystore.inputs.GetUserFilter;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetUserPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetUserPlainArgs Empty = new GetUserPlainArgs();

    /**
     * A unique identifier for a user or group that is not the primary identifier. Conflicts with `user_id` and `filter`. Detailed below.
     * 
     */
    @Import(name="alternateIdentifier")
    private @Nullable GetUserAlternateIdentifier alternateIdentifier;

    /**
     * @return A unique identifier for a user or group that is not the primary identifier. Conflicts with `user_id` and `filter`. Detailed below.
     * 
     */
    public Optional<GetUserAlternateIdentifier> alternateIdentifier() {
        return Optional.ofNullable(this.alternateIdentifier);
    }

    /**
     * Configuration block for filtering by a unique attribute of the user. Detailed below.
     * 
     * @deprecated
     * Use the alternate_identifier attribute instead.
     * 
     */
    @Deprecated /* Use the alternate_identifier attribute instead. */
    @Import(name="filter")
    private @Nullable GetUserFilter filter;

    /**
     * @return Configuration block for filtering by a unique attribute of the user. Detailed below.
     * 
     * @deprecated
     * Use the alternate_identifier attribute instead.
     * 
     */
    @Deprecated /* Use the alternate_identifier attribute instead. */
    public Optional<GetUserFilter> filter() {
        return Optional.ofNullable(this.filter);
    }

    /**
     * Identity Store ID associated with the Single Sign-On Instance.
     * 
     * The following arguments are optional:
     * 
     */
    @Import(name="identityStoreId", required=true)
    private String identityStoreId;

    /**
     * @return Identity Store ID associated with the Single Sign-On Instance.
     * 
     * The following arguments are optional:
     * 
     */
    public String identityStoreId() {
        return this.identityStoreId;
    }

    /**
     * The identifier for a user in the Identity Store.
     * 
     * &gt; Exactly one of the above arguments must be provided. Passing both `filter` and `user_id` is allowed for backwards compatibility.
     * 
     */
    @Import(name="userId")
    private @Nullable String userId;

    /**
     * @return The identifier for a user in the Identity Store.
     * 
     * &gt; Exactly one of the above arguments must be provided. Passing both `filter` and `user_id` is allowed for backwards compatibility.
     * 
     */
    public Optional<String> userId() {
        return Optional.ofNullable(this.userId);
    }

    private GetUserPlainArgs() {}

    private GetUserPlainArgs(GetUserPlainArgs $) {
        this.alternateIdentifier = $.alternateIdentifier;
        this.filter = $.filter;
        this.identityStoreId = $.identityStoreId;
        this.userId = $.userId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetUserPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetUserPlainArgs $;

        public Builder() {
            $ = new GetUserPlainArgs();
        }

        public Builder(GetUserPlainArgs defaults) {
            $ = new GetUserPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param alternateIdentifier A unique identifier for a user or group that is not the primary identifier. Conflicts with `user_id` and `filter`. Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder alternateIdentifier(@Nullable GetUserAlternateIdentifier alternateIdentifier) {
            $.alternateIdentifier = alternateIdentifier;
            return this;
        }

        /**
         * @param filter Configuration block for filtering by a unique attribute of the user. Detailed below.
         * 
         * @return builder
         * 
         * @deprecated
         * Use the alternate_identifier attribute instead.
         * 
         */
        @Deprecated /* Use the alternate_identifier attribute instead. */
        public Builder filter(@Nullable GetUserFilter filter) {
            $.filter = filter;
            return this;
        }

        /**
         * @param identityStoreId Identity Store ID associated with the Single Sign-On Instance.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder identityStoreId(String identityStoreId) {
            $.identityStoreId = identityStoreId;
            return this;
        }

        /**
         * @param userId The identifier for a user in the Identity Store.
         * 
         * &gt; Exactly one of the above arguments must be provided. Passing both `filter` and `user_id` is allowed for backwards compatibility.
         * 
         * @return builder
         * 
         */
        public Builder userId(@Nullable String userId) {
            $.userId = userId;
            return this;
        }

        public GetUserPlainArgs build() {
            if ($.identityStoreId == null) {
                throw new MissingRequiredPropertyException("GetUserPlainArgs", "identityStoreId");
            }
            return $;
        }
    }

}
