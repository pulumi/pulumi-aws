// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.outputs;

import com.pulumi.aws.quicksight.outputs.AggregationFunction;
import com.pulumi.aws.quicksight.outputs.Column;
import com.pulumi.aws.quicksight.outputs.FiltersNumericRangeFilterRangeMaximum;
import com.pulumi.aws.quicksight.outputs.FiltersNumericRangeFilterRangeMinimum;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class FiltersNumericRangeFilter {
    private @Nullable AggregationFunction aggregationFunction;
    private Column column;
    private String filterId;
    private @Nullable Boolean includeMaximum;
    private @Nullable Boolean includeMinimum;
    private String nullOption;
    private @Nullable FiltersNumericRangeFilterRangeMaximum rangeMaximum;
    private @Nullable FiltersNumericRangeFilterRangeMinimum rangeMinimum;
    private @Nullable String selectAllOptions;

    private FiltersNumericRangeFilter() {}
    public Optional<AggregationFunction> aggregationFunction() {
        return Optional.ofNullable(this.aggregationFunction);
    }
    public Column column() {
        return this.column;
    }
    public String filterId() {
        return this.filterId;
    }
    public Optional<Boolean> includeMaximum() {
        return Optional.ofNullable(this.includeMaximum);
    }
    public Optional<Boolean> includeMinimum() {
        return Optional.ofNullable(this.includeMinimum);
    }
    public String nullOption() {
        return this.nullOption;
    }
    public Optional<FiltersNumericRangeFilterRangeMaximum> rangeMaximum() {
        return Optional.ofNullable(this.rangeMaximum);
    }
    public Optional<FiltersNumericRangeFilterRangeMinimum> rangeMinimum() {
        return Optional.ofNullable(this.rangeMinimum);
    }
    public Optional<String> selectAllOptions() {
        return Optional.ofNullable(this.selectAllOptions);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FiltersNumericRangeFilter defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable AggregationFunction aggregationFunction;
        private Column column;
        private String filterId;
        private @Nullable Boolean includeMaximum;
        private @Nullable Boolean includeMinimum;
        private String nullOption;
        private @Nullable FiltersNumericRangeFilterRangeMaximum rangeMaximum;
        private @Nullable FiltersNumericRangeFilterRangeMinimum rangeMinimum;
        private @Nullable String selectAllOptions;
        public Builder() {}
        public Builder(FiltersNumericRangeFilter defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aggregationFunction = defaults.aggregationFunction;
    	      this.column = defaults.column;
    	      this.filterId = defaults.filterId;
    	      this.includeMaximum = defaults.includeMaximum;
    	      this.includeMinimum = defaults.includeMinimum;
    	      this.nullOption = defaults.nullOption;
    	      this.rangeMaximum = defaults.rangeMaximum;
    	      this.rangeMinimum = defaults.rangeMinimum;
    	      this.selectAllOptions = defaults.selectAllOptions;
        }

        @CustomType.Setter
        public Builder aggregationFunction(@Nullable AggregationFunction aggregationFunction) {

            this.aggregationFunction = aggregationFunction;
            return this;
        }
        @CustomType.Setter
        public Builder column(Column column) {
            if (column == null) {
              throw new MissingRequiredPropertyException("FiltersNumericRangeFilter", "column");
            }
            this.column = column;
            return this;
        }
        @CustomType.Setter
        public Builder filterId(String filterId) {
            if (filterId == null) {
              throw new MissingRequiredPropertyException("FiltersNumericRangeFilter", "filterId");
            }
            this.filterId = filterId;
            return this;
        }
        @CustomType.Setter
        public Builder includeMaximum(@Nullable Boolean includeMaximum) {

            this.includeMaximum = includeMaximum;
            return this;
        }
        @CustomType.Setter
        public Builder includeMinimum(@Nullable Boolean includeMinimum) {

            this.includeMinimum = includeMinimum;
            return this;
        }
        @CustomType.Setter
        public Builder nullOption(String nullOption) {
            if (nullOption == null) {
              throw new MissingRequiredPropertyException("FiltersNumericRangeFilter", "nullOption");
            }
            this.nullOption = nullOption;
            return this;
        }
        @CustomType.Setter
        public Builder rangeMaximum(@Nullable FiltersNumericRangeFilterRangeMaximum rangeMaximum) {

            this.rangeMaximum = rangeMaximum;
            return this;
        }
        @CustomType.Setter
        public Builder rangeMinimum(@Nullable FiltersNumericRangeFilterRangeMinimum rangeMinimum) {

            this.rangeMinimum = rangeMinimum;
            return this;
        }
        @CustomType.Setter
        public Builder selectAllOptions(@Nullable String selectAllOptions) {

            this.selectAllOptions = selectAllOptions;
            return this;
        }
        public FiltersNumericRangeFilter build() {
            final var _resultValue = new FiltersNumericRangeFilter();
            _resultValue.aggregationFunction = aggregationFunction;
            _resultValue.column = column;
            _resultValue.filterId = filterId;
            _resultValue.includeMaximum = includeMaximum;
            _resultValue.includeMinimum = includeMinimum;
            _resultValue.nullOption = nullOption;
            _resultValue.rangeMaximum = rangeMaximum;
            _resultValue.rangeMinimum = rangeMinimum;
            _resultValue.selectAllOptions = selectAllOptions;
            return _resultValue;
        }
    }
}
