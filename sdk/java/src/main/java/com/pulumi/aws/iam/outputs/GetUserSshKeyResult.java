// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.iam.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetUserSshKeyResult {
    private String encoding;
    /**
     * @return MD5 message digest of the SSH public key.
     * 
     */
    private String fingerprint;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return SSH public key.
     * 
     */
    private String publicKey;
    private String sshPublicKeyId;
    /**
     * @return Status of the SSH public key. Active means that the key can be used for authentication with an CodeCommit repository. Inactive means that the key cannot be used.
     * 
     */
    private String status;
    private String username;

    private GetUserSshKeyResult() {}
    public String encoding() {
        return this.encoding;
    }
    /**
     * @return MD5 message digest of the SSH public key.
     * 
     */
    public String fingerprint() {
        return this.fingerprint;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return SSH public key.
     * 
     */
    public String publicKey() {
        return this.publicKey;
    }
    public String sshPublicKeyId() {
        return this.sshPublicKeyId;
    }
    /**
     * @return Status of the SSH public key. Active means that the key can be used for authentication with an CodeCommit repository. Inactive means that the key cannot be used.
     * 
     */
    public String status() {
        return this.status;
    }
    public String username() {
        return this.username;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetUserSshKeyResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String encoding;
        private String fingerprint;
        private String id;
        private String publicKey;
        private String sshPublicKeyId;
        private String status;
        private String username;
        public Builder() {}
        public Builder(GetUserSshKeyResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.encoding = defaults.encoding;
    	      this.fingerprint = defaults.fingerprint;
    	      this.id = defaults.id;
    	      this.publicKey = defaults.publicKey;
    	      this.sshPublicKeyId = defaults.sshPublicKeyId;
    	      this.status = defaults.status;
    	      this.username = defaults.username;
        }

        @CustomType.Setter
        public Builder encoding(String encoding) {
            if (encoding == null) {
              throw new MissingRequiredPropertyException("GetUserSshKeyResult", "encoding");
            }
            this.encoding = encoding;
            return this;
        }
        @CustomType.Setter
        public Builder fingerprint(String fingerprint) {
            if (fingerprint == null) {
              throw new MissingRequiredPropertyException("GetUserSshKeyResult", "fingerprint");
            }
            this.fingerprint = fingerprint;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetUserSshKeyResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder publicKey(String publicKey) {
            if (publicKey == null) {
              throw new MissingRequiredPropertyException("GetUserSshKeyResult", "publicKey");
            }
            this.publicKey = publicKey;
            return this;
        }
        @CustomType.Setter
        public Builder sshPublicKeyId(String sshPublicKeyId) {
            if (sshPublicKeyId == null) {
              throw new MissingRequiredPropertyException("GetUserSshKeyResult", "sshPublicKeyId");
            }
            this.sshPublicKeyId = sshPublicKeyId;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetUserSshKeyResult", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder username(String username) {
            if (username == null) {
              throw new MissingRequiredPropertyException("GetUserSshKeyResult", "username");
            }
            this.username = username;
            return this;
        }
        public GetUserSshKeyResult build() {
            final var _resultValue = new GetUserSshKeyResult();
            _resultValue.encoding = encoding;
            _resultValue.fingerprint = fingerprint;
            _resultValue.id = id;
            _resultValue.publicKey = publicKey;
            _resultValue.sshPublicKeyId = sshPublicKeyId;
            _resultValue.status = status;
            _resultValue.username = username;
            return _resultValue;
        }
    }
}
