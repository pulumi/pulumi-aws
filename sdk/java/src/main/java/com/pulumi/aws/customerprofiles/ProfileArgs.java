// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.customerprofiles;

import com.pulumi.aws.customerprofiles.inputs.ProfileAddressArgs;
import com.pulumi.aws.customerprofiles.inputs.ProfileBillingAddressArgs;
import com.pulumi.aws.customerprofiles.inputs.ProfileMailingAddressArgs;
import com.pulumi.aws.customerprofiles.inputs.ProfileShippingAddressArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProfileArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProfileArgs Empty = new ProfileArgs();

    /**
     * A unique account number that you have given to the customer.
     * 
     */
    @Import(name="accountNumber")
    private @Nullable Output<String> accountNumber;

    /**
     * @return A unique account number that you have given to the customer.
     * 
     */
    public Optional<Output<String>> accountNumber() {
        return Optional.ofNullable(this.accountNumber);
    }

    /**
     * Any additional information relevant to the customer’s profile.
     * 
     */
    @Import(name="additionalInformation")
    private @Nullable Output<String> additionalInformation;

    /**
     * @return Any additional information relevant to the customer’s profile.
     * 
     */
    public Optional<Output<String>> additionalInformation() {
        return Optional.ofNullable(this.additionalInformation);
    }

    /**
     * A block that specifies a generic address associated with the customer that is not mailing, shipping, or billing. Documented below.
     * 
     */
    @Import(name="address")
    private @Nullable Output<ProfileAddressArgs> address;

    /**
     * @return A block that specifies a generic address associated with the customer that is not mailing, shipping, or billing. Documented below.
     * 
     */
    public Optional<Output<ProfileAddressArgs>> address() {
        return Optional.ofNullable(this.address);
    }

    /**
     * A key value pair of attributes of a customer profile.
     * 
     */
    @Import(name="attributes")
    private @Nullable Output<Map<String,String>> attributes;

    /**
     * @return A key value pair of attributes of a customer profile.
     * 
     */
    public Optional<Output<Map<String,String>>> attributes() {
        return Optional.ofNullable(this.attributes);
    }

    /**
     * A block that specifies the customer’s billing address. Documented below.
     * 
     */
    @Import(name="billingAddress")
    private @Nullable Output<ProfileBillingAddressArgs> billingAddress;

    /**
     * @return A block that specifies the customer’s billing address. Documented below.
     * 
     */
    public Optional<Output<ProfileBillingAddressArgs>> billingAddress() {
        return Optional.ofNullable(this.billingAddress);
    }

    /**
     * The customer’s birth date.
     * 
     */
    @Import(name="birthDate")
    private @Nullable Output<String> birthDate;

    /**
     * @return The customer’s birth date.
     * 
     */
    public Optional<Output<String>> birthDate() {
        return Optional.ofNullable(this.birthDate);
    }

    /**
     * The customer’s business email address.
     * 
     */
    @Import(name="businessEmailAddress")
    private @Nullable Output<String> businessEmailAddress;

    /**
     * @return The customer’s business email address.
     * 
     */
    public Optional<Output<String>> businessEmailAddress() {
        return Optional.ofNullable(this.businessEmailAddress);
    }

    /**
     * The name of the customer’s business.
     * 
     */
    @Import(name="businessName")
    private @Nullable Output<String> businessName;

    /**
     * @return The name of the customer’s business.
     * 
     */
    public Optional<Output<String>> businessName() {
        return Optional.ofNullable(this.businessName);
    }

    /**
     * The customer’s business phone number.
     * 
     */
    @Import(name="businessPhoneNumber")
    private @Nullable Output<String> businessPhoneNumber;

    /**
     * @return The customer’s business phone number.
     * 
     */
    public Optional<Output<String>> businessPhoneNumber() {
        return Optional.ofNullable(this.businessPhoneNumber);
    }

    /**
     * The name of your Customer Profile domain. It must be unique for your AWS account.
     * 
     * The following arguments are optional:
     * 
     */
    @Import(name="domainName", required=true)
    private Output<String> domainName;

    /**
     * @return The name of your Customer Profile domain. It must be unique for your AWS account.
     * 
     * The following arguments are optional:
     * 
     */
    public Output<String> domainName() {
        return this.domainName;
    }

    /**
     * The customer’s email address, which has not been specified as a personal or business address.
     * 
     */
    @Import(name="emailAddress")
    private @Nullable Output<String> emailAddress;

    /**
     * @return The customer’s email address, which has not been specified as a personal or business address.
     * 
     */
    public Optional<Output<String>> emailAddress() {
        return Optional.ofNullable(this.emailAddress);
    }

    /**
     * The customer’s first name.
     * 
     */
    @Import(name="firstName")
    private @Nullable Output<String> firstName;

    /**
     * @return The customer’s first name.
     * 
     */
    public Optional<Output<String>> firstName() {
        return Optional.ofNullable(this.firstName);
    }

    /**
     * The gender with which the customer identifies.
     * 
     */
    @Import(name="genderString")
    private @Nullable Output<String> genderString;

    /**
     * @return The gender with which the customer identifies.
     * 
     */
    public Optional<Output<String>> genderString() {
        return Optional.ofNullable(this.genderString);
    }

    /**
     * The customer’s home phone number.
     * 
     */
    @Import(name="homePhoneNumber")
    private @Nullable Output<String> homePhoneNumber;

    /**
     * @return The customer’s home phone number.
     * 
     */
    public Optional<Output<String>> homePhoneNumber() {
        return Optional.ofNullable(this.homePhoneNumber);
    }

    /**
     * The customer’s last name.
     * 
     */
    @Import(name="lastName")
    private @Nullable Output<String> lastName;

    /**
     * @return The customer’s last name.
     * 
     */
    public Optional<Output<String>> lastName() {
        return Optional.ofNullable(this.lastName);
    }

    /**
     * A block that specifies the customer’s mailing address. Documented below.
     * 
     */
    @Import(name="mailingAddress")
    private @Nullable Output<ProfileMailingAddressArgs> mailingAddress;

    /**
     * @return A block that specifies the customer’s mailing address. Documented below.
     * 
     */
    public Optional<Output<ProfileMailingAddressArgs>> mailingAddress() {
        return Optional.ofNullable(this.mailingAddress);
    }

    /**
     * The customer’s middle name.
     * 
     */
    @Import(name="middleName")
    private @Nullable Output<String> middleName;

    /**
     * @return The customer’s middle name.
     * 
     */
    public Optional<Output<String>> middleName() {
        return Optional.ofNullable(this.middleName);
    }

    /**
     * The customer’s mobile phone number.
     * 
     */
    @Import(name="mobilePhoneNumber")
    private @Nullable Output<String> mobilePhoneNumber;

    /**
     * @return The customer’s mobile phone number.
     * 
     */
    public Optional<Output<String>> mobilePhoneNumber() {
        return Optional.ofNullable(this.mobilePhoneNumber);
    }

    /**
     * The type of profile used to describe the customer.
     * 
     */
    @Import(name="partyTypeString")
    private @Nullable Output<String> partyTypeString;

    /**
     * @return The type of profile used to describe the customer.
     * 
     */
    public Optional<Output<String>> partyTypeString() {
        return Optional.ofNullable(this.partyTypeString);
    }

    /**
     * The customer’s personal email address.
     * 
     */
    @Import(name="personalEmailAddress")
    private @Nullable Output<String> personalEmailAddress;

    /**
     * @return The customer’s personal email address.
     * 
     */
    public Optional<Output<String>> personalEmailAddress() {
        return Optional.ofNullable(this.personalEmailAddress);
    }

    /**
     * The customer’s phone number, which has not been specified as a mobile, home, or business number.
     * 
     */
    @Import(name="phoneNumber")
    private @Nullable Output<String> phoneNumber;

    /**
     * @return The customer’s phone number, which has not been specified as a mobile, home, or business number.
     * 
     */
    public Optional<Output<String>> phoneNumber() {
        return Optional.ofNullable(this.phoneNumber);
    }

    /**
     * A block that specifies the customer’s shipping address. Documented below.
     * 
     */
    @Import(name="shippingAddress")
    private @Nullable Output<ProfileShippingAddressArgs> shippingAddress;

    /**
     * @return A block that specifies the customer’s shipping address. Documented below.
     * 
     */
    public Optional<Output<ProfileShippingAddressArgs>> shippingAddress() {
        return Optional.ofNullable(this.shippingAddress);
    }

    private ProfileArgs() {}

    private ProfileArgs(ProfileArgs $) {
        this.accountNumber = $.accountNumber;
        this.additionalInformation = $.additionalInformation;
        this.address = $.address;
        this.attributes = $.attributes;
        this.billingAddress = $.billingAddress;
        this.birthDate = $.birthDate;
        this.businessEmailAddress = $.businessEmailAddress;
        this.businessName = $.businessName;
        this.businessPhoneNumber = $.businessPhoneNumber;
        this.domainName = $.domainName;
        this.emailAddress = $.emailAddress;
        this.firstName = $.firstName;
        this.genderString = $.genderString;
        this.homePhoneNumber = $.homePhoneNumber;
        this.lastName = $.lastName;
        this.mailingAddress = $.mailingAddress;
        this.middleName = $.middleName;
        this.mobilePhoneNumber = $.mobilePhoneNumber;
        this.partyTypeString = $.partyTypeString;
        this.personalEmailAddress = $.personalEmailAddress;
        this.phoneNumber = $.phoneNumber;
        this.shippingAddress = $.shippingAddress;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProfileArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProfileArgs $;

        public Builder() {
            $ = new ProfileArgs();
        }

        public Builder(ProfileArgs defaults) {
            $ = new ProfileArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountNumber A unique account number that you have given to the customer.
         * 
         * @return builder
         * 
         */
        public Builder accountNumber(@Nullable Output<String> accountNumber) {
            $.accountNumber = accountNumber;
            return this;
        }

        /**
         * @param accountNumber A unique account number that you have given to the customer.
         * 
         * @return builder
         * 
         */
        public Builder accountNumber(String accountNumber) {
            return accountNumber(Output.of(accountNumber));
        }

        /**
         * @param additionalInformation Any additional information relevant to the customer’s profile.
         * 
         * @return builder
         * 
         */
        public Builder additionalInformation(@Nullable Output<String> additionalInformation) {
            $.additionalInformation = additionalInformation;
            return this;
        }

        /**
         * @param additionalInformation Any additional information relevant to the customer’s profile.
         * 
         * @return builder
         * 
         */
        public Builder additionalInformation(String additionalInformation) {
            return additionalInformation(Output.of(additionalInformation));
        }

        /**
         * @param address A block that specifies a generic address associated with the customer that is not mailing, shipping, or billing. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder address(@Nullable Output<ProfileAddressArgs> address) {
            $.address = address;
            return this;
        }

        /**
         * @param address A block that specifies a generic address associated with the customer that is not mailing, shipping, or billing. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder address(ProfileAddressArgs address) {
            return address(Output.of(address));
        }

        /**
         * @param attributes A key value pair of attributes of a customer profile.
         * 
         * @return builder
         * 
         */
        public Builder attributes(@Nullable Output<Map<String,String>> attributes) {
            $.attributes = attributes;
            return this;
        }

        /**
         * @param attributes A key value pair of attributes of a customer profile.
         * 
         * @return builder
         * 
         */
        public Builder attributes(Map<String,String> attributes) {
            return attributes(Output.of(attributes));
        }

        /**
         * @param billingAddress A block that specifies the customer’s billing address. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder billingAddress(@Nullable Output<ProfileBillingAddressArgs> billingAddress) {
            $.billingAddress = billingAddress;
            return this;
        }

        /**
         * @param billingAddress A block that specifies the customer’s billing address. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder billingAddress(ProfileBillingAddressArgs billingAddress) {
            return billingAddress(Output.of(billingAddress));
        }

        /**
         * @param birthDate The customer’s birth date.
         * 
         * @return builder
         * 
         */
        public Builder birthDate(@Nullable Output<String> birthDate) {
            $.birthDate = birthDate;
            return this;
        }

        /**
         * @param birthDate The customer’s birth date.
         * 
         * @return builder
         * 
         */
        public Builder birthDate(String birthDate) {
            return birthDate(Output.of(birthDate));
        }

        /**
         * @param businessEmailAddress The customer’s business email address.
         * 
         * @return builder
         * 
         */
        public Builder businessEmailAddress(@Nullable Output<String> businessEmailAddress) {
            $.businessEmailAddress = businessEmailAddress;
            return this;
        }

        /**
         * @param businessEmailAddress The customer’s business email address.
         * 
         * @return builder
         * 
         */
        public Builder businessEmailAddress(String businessEmailAddress) {
            return businessEmailAddress(Output.of(businessEmailAddress));
        }

        /**
         * @param businessName The name of the customer’s business.
         * 
         * @return builder
         * 
         */
        public Builder businessName(@Nullable Output<String> businessName) {
            $.businessName = businessName;
            return this;
        }

        /**
         * @param businessName The name of the customer’s business.
         * 
         * @return builder
         * 
         */
        public Builder businessName(String businessName) {
            return businessName(Output.of(businessName));
        }

        /**
         * @param businessPhoneNumber The customer’s business phone number.
         * 
         * @return builder
         * 
         */
        public Builder businessPhoneNumber(@Nullable Output<String> businessPhoneNumber) {
            $.businessPhoneNumber = businessPhoneNumber;
            return this;
        }

        /**
         * @param businessPhoneNumber The customer’s business phone number.
         * 
         * @return builder
         * 
         */
        public Builder businessPhoneNumber(String businessPhoneNumber) {
            return businessPhoneNumber(Output.of(businessPhoneNumber));
        }

        /**
         * @param domainName The name of your Customer Profile domain. It must be unique for your AWS account.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder domainName(Output<String> domainName) {
            $.domainName = domainName;
            return this;
        }

        /**
         * @param domainName The name of your Customer Profile domain. It must be unique for your AWS account.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder domainName(String domainName) {
            return domainName(Output.of(domainName));
        }

        /**
         * @param emailAddress The customer’s email address, which has not been specified as a personal or business address.
         * 
         * @return builder
         * 
         */
        public Builder emailAddress(@Nullable Output<String> emailAddress) {
            $.emailAddress = emailAddress;
            return this;
        }

        /**
         * @param emailAddress The customer’s email address, which has not been specified as a personal or business address.
         * 
         * @return builder
         * 
         */
        public Builder emailAddress(String emailAddress) {
            return emailAddress(Output.of(emailAddress));
        }

        /**
         * @param firstName The customer’s first name.
         * 
         * @return builder
         * 
         */
        public Builder firstName(@Nullable Output<String> firstName) {
            $.firstName = firstName;
            return this;
        }

        /**
         * @param firstName The customer’s first name.
         * 
         * @return builder
         * 
         */
        public Builder firstName(String firstName) {
            return firstName(Output.of(firstName));
        }

        /**
         * @param genderString The gender with which the customer identifies.
         * 
         * @return builder
         * 
         */
        public Builder genderString(@Nullable Output<String> genderString) {
            $.genderString = genderString;
            return this;
        }

        /**
         * @param genderString The gender with which the customer identifies.
         * 
         * @return builder
         * 
         */
        public Builder genderString(String genderString) {
            return genderString(Output.of(genderString));
        }

        /**
         * @param homePhoneNumber The customer’s home phone number.
         * 
         * @return builder
         * 
         */
        public Builder homePhoneNumber(@Nullable Output<String> homePhoneNumber) {
            $.homePhoneNumber = homePhoneNumber;
            return this;
        }

        /**
         * @param homePhoneNumber The customer’s home phone number.
         * 
         * @return builder
         * 
         */
        public Builder homePhoneNumber(String homePhoneNumber) {
            return homePhoneNumber(Output.of(homePhoneNumber));
        }

        /**
         * @param lastName The customer’s last name.
         * 
         * @return builder
         * 
         */
        public Builder lastName(@Nullable Output<String> lastName) {
            $.lastName = lastName;
            return this;
        }

        /**
         * @param lastName The customer’s last name.
         * 
         * @return builder
         * 
         */
        public Builder lastName(String lastName) {
            return lastName(Output.of(lastName));
        }

        /**
         * @param mailingAddress A block that specifies the customer’s mailing address. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder mailingAddress(@Nullable Output<ProfileMailingAddressArgs> mailingAddress) {
            $.mailingAddress = mailingAddress;
            return this;
        }

        /**
         * @param mailingAddress A block that specifies the customer’s mailing address. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder mailingAddress(ProfileMailingAddressArgs mailingAddress) {
            return mailingAddress(Output.of(mailingAddress));
        }

        /**
         * @param middleName The customer’s middle name.
         * 
         * @return builder
         * 
         */
        public Builder middleName(@Nullable Output<String> middleName) {
            $.middleName = middleName;
            return this;
        }

        /**
         * @param middleName The customer’s middle name.
         * 
         * @return builder
         * 
         */
        public Builder middleName(String middleName) {
            return middleName(Output.of(middleName));
        }

        /**
         * @param mobilePhoneNumber The customer’s mobile phone number.
         * 
         * @return builder
         * 
         */
        public Builder mobilePhoneNumber(@Nullable Output<String> mobilePhoneNumber) {
            $.mobilePhoneNumber = mobilePhoneNumber;
            return this;
        }

        /**
         * @param mobilePhoneNumber The customer’s mobile phone number.
         * 
         * @return builder
         * 
         */
        public Builder mobilePhoneNumber(String mobilePhoneNumber) {
            return mobilePhoneNumber(Output.of(mobilePhoneNumber));
        }

        /**
         * @param partyTypeString The type of profile used to describe the customer.
         * 
         * @return builder
         * 
         */
        public Builder partyTypeString(@Nullable Output<String> partyTypeString) {
            $.partyTypeString = partyTypeString;
            return this;
        }

        /**
         * @param partyTypeString The type of profile used to describe the customer.
         * 
         * @return builder
         * 
         */
        public Builder partyTypeString(String partyTypeString) {
            return partyTypeString(Output.of(partyTypeString));
        }

        /**
         * @param personalEmailAddress The customer’s personal email address.
         * 
         * @return builder
         * 
         */
        public Builder personalEmailAddress(@Nullable Output<String> personalEmailAddress) {
            $.personalEmailAddress = personalEmailAddress;
            return this;
        }

        /**
         * @param personalEmailAddress The customer’s personal email address.
         * 
         * @return builder
         * 
         */
        public Builder personalEmailAddress(String personalEmailAddress) {
            return personalEmailAddress(Output.of(personalEmailAddress));
        }

        /**
         * @param phoneNumber The customer’s phone number, which has not been specified as a mobile, home, or business number.
         * 
         * @return builder
         * 
         */
        public Builder phoneNumber(@Nullable Output<String> phoneNumber) {
            $.phoneNumber = phoneNumber;
            return this;
        }

        /**
         * @param phoneNumber The customer’s phone number, which has not been specified as a mobile, home, or business number.
         * 
         * @return builder
         * 
         */
        public Builder phoneNumber(String phoneNumber) {
            return phoneNumber(Output.of(phoneNumber));
        }

        /**
         * @param shippingAddress A block that specifies the customer’s shipping address. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder shippingAddress(@Nullable Output<ProfileShippingAddressArgs> shippingAddress) {
            $.shippingAddress = shippingAddress;
            return this;
        }

        /**
         * @param shippingAddress A block that specifies the customer’s shipping address. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder shippingAddress(ProfileShippingAddressArgs shippingAddress) {
            return shippingAddress(Output.of(shippingAddress));
        }

        public ProfileArgs build() {
            $.domainName = Objects.requireNonNull($.domainName, "expected parameter 'domainName' to be non-null");
            return $;
        }
    }

}
