// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.medialive.outputs;

import com.pulumi.aws.medialive.outputs.ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettingsFont;
import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettings {
    /**
     * @return If no explicit xPosition or yPosition is provided, setting alignment to centered will place the captions at the bottom center of the output. Similarly, setting a left alignment will align captions to the bottom left of the output. If x and y positions are given in conjunction with the alignment parameter, the font will be justified (either left or centered) relative to those coordinates. Selecting “smart” justification will left-justify live subtitles and center-justify pre-recorded subtitles. This option is not valid for source captions that are STL or 608/embedded. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
     * 
     */
    private @Nullable String alignment;
    /**
     * @return Specifies the color of the rectangle behind the captions. All burn-in and DVB-Sub font settings must match.
     * 
     */
    private @Nullable String backgroundColor;
    /**
     * @return Specifies the opacity of the background rectangle. 255 is opaque; 0 is transparent. Leaving this parameter blank is equivalent to setting it to 0 (transparent). All burn-in and DVB-Sub font settings must match.
     * 
     */
    private @Nullable Integer backgroundOpacity;
    /**
     * @return External font file used for caption burn-in. File extension must be ‘ttf’ or ‘tte’. Although the user can select output fonts for many different types of input captions, embedded, STL and teletext sources use a strict grid system. Using external fonts with these caption sources could cause unexpected display of proportional fonts. All burn-in and DVB-Sub font settings must match. See Font for more details.
     * 
     */
    private @Nullable ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettingsFont font;
    /**
     * @return Specifies the color of the burned-in captions. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
     * 
     */
    private @Nullable String fontColor;
    /**
     * @return Specifies the opacity of the burned-in captions. 255 is opaque; 0 is transparent. All burn-in and DVB-Sub font settings must match.
     * 
     */
    private @Nullable Integer fontOpacity;
    /**
     * @return Font resolution in DPI (dots per inch); default is 96 dpi. All burn-in and DVB-Sub font settings must match.
     * 
     */
    private @Nullable Integer fontResolution;
    /**
     * @return When set to auto fontSize will scale depending on the size of the output. Giving a positive integer will specify the exact font size in points. All burn-in and DVB-Sub font settings must match.
     * 
     */
    private @Nullable String fontSize;
    /**
     * @return Specifies font outline color. This option is not valid for source captions that are either 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
     * 
     */
    private @Nullable String outlineColor;
    /**
     * @return Specifies font outline size in pixels. This option is not valid for source captions that are either 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
     * 
     */
    private @Nullable Integer outlineSize;
    /**
     * @return Specifies the color of the shadow cast by the captions. All burn-in and DVB-Sub font settings must match.
     * 
     */
    private @Nullable String shadowColor;
    /**
     * @return Specifies the opacity of the shadow. 255 is opaque; 0 is transparent. Leaving this parameter blank is equivalent to setting it to 0 (transparent). All burn-in and DVB-Sub font settings must match.
     * 
     */
    private @Nullable Integer shadowOpacity;
    /**
     * @return Specifies the horizontal offset of the shadow relative to the captions in pixels. A value of -2 would result in a shadow offset 2 pixels to the left. All burn-in and DVB-Sub font settings must match.
     * 
     */
    private @Nullable Integer shadowXOffset;
    /**
     * @return Specifies the vertical offset of the shadow relative to the captions in pixels. A value of -2 would result in a shadow offset 2 pixels above the text. All burn-in and DVB-Sub font settings must match.
     * 
     */
    private @Nullable Integer shadowYOffset;
    /**
     * @return Controls whether a fixed grid size will be used to generate the output subtitles bitmap. Only applicable for Teletext inputs and DVB-Sub/Burn-in outputs.
     * 
     */
    private @Nullable String teletextGridControl;
    /**
     * @return Specifies the horizontal position of the caption relative to the left side of the output in pixels. A value of 10 would result in the captions starting 10 pixels from the left of the output. If no explicit xPosition is provided, the horizontal caption position will be determined by the alignment parameter. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
     * 
     */
    private @Nullable Integer xPosition;
    /**
     * @return Specifies the vertical position of the caption relative to the top of the output in pixels. A value of 10 would result in the captions starting 10 pixels from the top of the output. If no explicit yPosition is provided, the caption will be positioned towards the bottom of the output. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
     * 
     */
    private @Nullable Integer yPosition;

    private ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettings() {}
    /**
     * @return If no explicit xPosition or yPosition is provided, setting alignment to centered will place the captions at the bottom center of the output. Similarly, setting a left alignment will align captions to the bottom left of the output. If x and y positions are given in conjunction with the alignment parameter, the font will be justified (either left or centered) relative to those coordinates. Selecting “smart” justification will left-justify live subtitles and center-justify pre-recorded subtitles. This option is not valid for source captions that are STL or 608/embedded. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
     * 
     */
    public Optional<String> alignment() {
        return Optional.ofNullable(this.alignment);
    }
    /**
     * @return Specifies the color of the rectangle behind the captions. All burn-in and DVB-Sub font settings must match.
     * 
     */
    public Optional<String> backgroundColor() {
        return Optional.ofNullable(this.backgroundColor);
    }
    /**
     * @return Specifies the opacity of the background rectangle. 255 is opaque; 0 is transparent. Leaving this parameter blank is equivalent to setting it to 0 (transparent). All burn-in and DVB-Sub font settings must match.
     * 
     */
    public Optional<Integer> backgroundOpacity() {
        return Optional.ofNullable(this.backgroundOpacity);
    }
    /**
     * @return External font file used for caption burn-in. File extension must be ‘ttf’ or ‘tte’. Although the user can select output fonts for many different types of input captions, embedded, STL and teletext sources use a strict grid system. Using external fonts with these caption sources could cause unexpected display of proportional fonts. All burn-in and DVB-Sub font settings must match. See Font for more details.
     * 
     */
    public Optional<ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettingsFont> font() {
        return Optional.ofNullable(this.font);
    }
    /**
     * @return Specifies the color of the burned-in captions. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
     * 
     */
    public Optional<String> fontColor() {
        return Optional.ofNullable(this.fontColor);
    }
    /**
     * @return Specifies the opacity of the burned-in captions. 255 is opaque; 0 is transparent. All burn-in and DVB-Sub font settings must match.
     * 
     */
    public Optional<Integer> fontOpacity() {
        return Optional.ofNullable(this.fontOpacity);
    }
    /**
     * @return Font resolution in DPI (dots per inch); default is 96 dpi. All burn-in and DVB-Sub font settings must match.
     * 
     */
    public Optional<Integer> fontResolution() {
        return Optional.ofNullable(this.fontResolution);
    }
    /**
     * @return When set to auto fontSize will scale depending on the size of the output. Giving a positive integer will specify the exact font size in points. All burn-in and DVB-Sub font settings must match.
     * 
     */
    public Optional<String> fontSize() {
        return Optional.ofNullable(this.fontSize);
    }
    /**
     * @return Specifies font outline color. This option is not valid for source captions that are either 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
     * 
     */
    public Optional<String> outlineColor() {
        return Optional.ofNullable(this.outlineColor);
    }
    /**
     * @return Specifies font outline size in pixels. This option is not valid for source captions that are either 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
     * 
     */
    public Optional<Integer> outlineSize() {
        return Optional.ofNullable(this.outlineSize);
    }
    /**
     * @return Specifies the color of the shadow cast by the captions. All burn-in and DVB-Sub font settings must match.
     * 
     */
    public Optional<String> shadowColor() {
        return Optional.ofNullable(this.shadowColor);
    }
    /**
     * @return Specifies the opacity of the shadow. 255 is opaque; 0 is transparent. Leaving this parameter blank is equivalent to setting it to 0 (transparent). All burn-in and DVB-Sub font settings must match.
     * 
     */
    public Optional<Integer> shadowOpacity() {
        return Optional.ofNullable(this.shadowOpacity);
    }
    /**
     * @return Specifies the horizontal offset of the shadow relative to the captions in pixels. A value of -2 would result in a shadow offset 2 pixels to the left. All burn-in and DVB-Sub font settings must match.
     * 
     */
    public Optional<Integer> shadowXOffset() {
        return Optional.ofNullable(this.shadowXOffset);
    }
    /**
     * @return Specifies the vertical offset of the shadow relative to the captions in pixels. A value of -2 would result in a shadow offset 2 pixels above the text. All burn-in and DVB-Sub font settings must match.
     * 
     */
    public Optional<Integer> shadowYOffset() {
        return Optional.ofNullable(this.shadowYOffset);
    }
    /**
     * @return Controls whether a fixed grid size will be used to generate the output subtitles bitmap. Only applicable for Teletext inputs and DVB-Sub/Burn-in outputs.
     * 
     */
    public Optional<String> teletextGridControl() {
        return Optional.ofNullable(this.teletextGridControl);
    }
    /**
     * @return Specifies the horizontal position of the caption relative to the left side of the output in pixels. A value of 10 would result in the captions starting 10 pixels from the left of the output. If no explicit xPosition is provided, the horizontal caption position will be determined by the alignment parameter. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
     * 
     */
    public Optional<Integer> xPosition() {
        return Optional.ofNullable(this.xPosition);
    }
    /**
     * @return Specifies the vertical position of the caption relative to the top of the output in pixels. A value of 10 would result in the captions starting 10 pixels from the top of the output. If no explicit yPosition is provided, the caption will be positioned towards the bottom of the output. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
     * 
     */
    public Optional<Integer> yPosition() {
        return Optional.ofNullable(this.yPosition);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettings defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String alignment;
        private @Nullable String backgroundColor;
        private @Nullable Integer backgroundOpacity;
        private @Nullable ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettingsFont font;
        private @Nullable String fontColor;
        private @Nullable Integer fontOpacity;
        private @Nullable Integer fontResolution;
        private @Nullable String fontSize;
        private @Nullable String outlineColor;
        private @Nullable Integer outlineSize;
        private @Nullable String shadowColor;
        private @Nullable Integer shadowOpacity;
        private @Nullable Integer shadowXOffset;
        private @Nullable Integer shadowYOffset;
        private @Nullable String teletextGridControl;
        private @Nullable Integer xPosition;
        private @Nullable Integer yPosition;
        public Builder() {}
        public Builder(ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettings defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.alignment = defaults.alignment;
    	      this.backgroundColor = defaults.backgroundColor;
    	      this.backgroundOpacity = defaults.backgroundOpacity;
    	      this.font = defaults.font;
    	      this.fontColor = defaults.fontColor;
    	      this.fontOpacity = defaults.fontOpacity;
    	      this.fontResolution = defaults.fontResolution;
    	      this.fontSize = defaults.fontSize;
    	      this.outlineColor = defaults.outlineColor;
    	      this.outlineSize = defaults.outlineSize;
    	      this.shadowColor = defaults.shadowColor;
    	      this.shadowOpacity = defaults.shadowOpacity;
    	      this.shadowXOffset = defaults.shadowXOffset;
    	      this.shadowYOffset = defaults.shadowYOffset;
    	      this.teletextGridControl = defaults.teletextGridControl;
    	      this.xPosition = defaults.xPosition;
    	      this.yPosition = defaults.yPosition;
        }

        @CustomType.Setter
        public Builder alignment(@Nullable String alignment) {

            this.alignment = alignment;
            return this;
        }
        @CustomType.Setter
        public Builder backgroundColor(@Nullable String backgroundColor) {

            this.backgroundColor = backgroundColor;
            return this;
        }
        @CustomType.Setter
        public Builder backgroundOpacity(@Nullable Integer backgroundOpacity) {

            this.backgroundOpacity = backgroundOpacity;
            return this;
        }
        @CustomType.Setter
        public Builder font(@Nullable ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettingsFont font) {

            this.font = font;
            return this;
        }
        @CustomType.Setter
        public Builder fontColor(@Nullable String fontColor) {

            this.fontColor = fontColor;
            return this;
        }
        @CustomType.Setter
        public Builder fontOpacity(@Nullable Integer fontOpacity) {

            this.fontOpacity = fontOpacity;
            return this;
        }
        @CustomType.Setter
        public Builder fontResolution(@Nullable Integer fontResolution) {

            this.fontResolution = fontResolution;
            return this;
        }
        @CustomType.Setter
        public Builder fontSize(@Nullable String fontSize) {

            this.fontSize = fontSize;
            return this;
        }
        @CustomType.Setter
        public Builder outlineColor(@Nullable String outlineColor) {

            this.outlineColor = outlineColor;
            return this;
        }
        @CustomType.Setter
        public Builder outlineSize(@Nullable Integer outlineSize) {

            this.outlineSize = outlineSize;
            return this;
        }
        @CustomType.Setter
        public Builder shadowColor(@Nullable String shadowColor) {

            this.shadowColor = shadowColor;
            return this;
        }
        @CustomType.Setter
        public Builder shadowOpacity(@Nullable Integer shadowOpacity) {

            this.shadowOpacity = shadowOpacity;
            return this;
        }
        @CustomType.Setter
        public Builder shadowXOffset(@Nullable Integer shadowXOffset) {

            this.shadowXOffset = shadowXOffset;
            return this;
        }
        @CustomType.Setter
        public Builder shadowYOffset(@Nullable Integer shadowYOffset) {

            this.shadowYOffset = shadowYOffset;
            return this;
        }
        @CustomType.Setter
        public Builder teletextGridControl(@Nullable String teletextGridControl) {

            this.teletextGridControl = teletextGridControl;
            return this;
        }
        @CustomType.Setter
        public Builder xPosition(@Nullable Integer xPosition) {

            this.xPosition = xPosition;
            return this;
        }
        @CustomType.Setter
        public Builder yPosition(@Nullable Integer yPosition) {

            this.yPosition = yPosition;
            return this;
        }
        public ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettings build() {
            final var _resultValue = new ChannelEncoderSettingsCaptionDescriptionDestinationSettingsDvbSubDestinationSettings();
            _resultValue.alignment = alignment;
            _resultValue.backgroundColor = backgroundColor;
            _resultValue.backgroundOpacity = backgroundOpacity;
            _resultValue.font = font;
            _resultValue.fontColor = fontColor;
            _resultValue.fontOpacity = fontOpacity;
            _resultValue.fontResolution = fontResolution;
            _resultValue.fontSize = fontSize;
            _resultValue.outlineColor = outlineColor;
            _resultValue.outlineSize = outlineSize;
            _resultValue.shadowColor = shadowColor;
            _resultValue.shadowOpacity = shadowOpacity;
            _resultValue.shadowXOffset = shadowXOffset;
            _resultValue.shadowYOffset = shadowYOffset;
            _resultValue.teletextGridControl = teletextGridControl;
            _resultValue.xPosition = xPosition;
            _resultValue.yPosition = yPosition;
            return _resultValue;
        }
    }
}
