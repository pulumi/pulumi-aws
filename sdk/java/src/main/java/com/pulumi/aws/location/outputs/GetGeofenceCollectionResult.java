// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.location.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetGeofenceCollectionResult {
    /**
     * @return ARN for the geofence collection resource. Used when you need to specify a resource across all AWS.
     * 
     */
    private String collectionArn;
    private String collectionName;
    /**
     * @return Timestamp for when the geofence collection resource was created in ISO 8601 format.
     * 
     */
    private String createTime;
    /**
     * @return Optional description of the geofence collection resource.
     * 
     */
    private String description;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Key identifier for an AWS KMS customer managed key assigned to the Amazon Location resource.
     * 
     */
    private String kmsKeyId;
    /**
     * @return Key-value map of resource tags for the geofence collection.
     * 
     */
    private Map<String,String> tags;
    /**
     * @return Timestamp for when the geofence collection resource was last updated in ISO 8601 format.
     * 
     */
    private String updateTime;

    private GetGeofenceCollectionResult() {}
    /**
     * @return ARN for the geofence collection resource. Used when you need to specify a resource across all AWS.
     * 
     */
    public String collectionArn() {
        return this.collectionArn;
    }
    public String collectionName() {
        return this.collectionName;
    }
    /**
     * @return Timestamp for when the geofence collection resource was created in ISO 8601 format.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return Optional description of the geofence collection resource.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Key identifier for an AWS KMS customer managed key assigned to the Amazon Location resource.
     * 
     */
    public String kmsKeyId() {
        return this.kmsKeyId;
    }
    /**
     * @return Key-value map of resource tags for the geofence collection.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }
    /**
     * @return Timestamp for when the geofence collection resource was last updated in ISO 8601 format.
     * 
     */
    public String updateTime() {
        return this.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetGeofenceCollectionResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String collectionArn;
        private String collectionName;
        private String createTime;
        private String description;
        private String id;
        private String kmsKeyId;
        private Map<String,String> tags;
        private String updateTime;
        public Builder() {}
        public Builder(GetGeofenceCollectionResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.collectionArn = defaults.collectionArn;
    	      this.collectionName = defaults.collectionName;
    	      this.createTime = defaults.createTime;
    	      this.description = defaults.description;
    	      this.id = defaults.id;
    	      this.kmsKeyId = defaults.kmsKeyId;
    	      this.tags = defaults.tags;
    	      this.updateTime = defaults.updateTime;
        }

        @CustomType.Setter
        public Builder collectionArn(String collectionArn) {
            if (collectionArn == null) {
              throw new MissingRequiredPropertyException("GetGeofenceCollectionResult", "collectionArn");
            }
            this.collectionArn = collectionArn;
            return this;
        }
        @CustomType.Setter
        public Builder collectionName(String collectionName) {
            if (collectionName == null) {
              throw new MissingRequiredPropertyException("GetGeofenceCollectionResult", "collectionName");
            }
            this.collectionName = collectionName;
            return this;
        }
        @CustomType.Setter
        public Builder createTime(String createTime) {
            if (createTime == null) {
              throw new MissingRequiredPropertyException("GetGeofenceCollectionResult", "createTime");
            }
            this.createTime = createTime;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetGeofenceCollectionResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetGeofenceCollectionResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder kmsKeyId(String kmsKeyId) {
            if (kmsKeyId == null) {
              throw new MissingRequiredPropertyException("GetGeofenceCollectionResult", "kmsKeyId");
            }
            this.kmsKeyId = kmsKeyId;
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetGeofenceCollectionResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder updateTime(String updateTime) {
            if (updateTime == null) {
              throw new MissingRequiredPropertyException("GetGeofenceCollectionResult", "updateTime");
            }
            this.updateTime = updateTime;
            return this;
        }
        public GetGeofenceCollectionResult build() {
            final var _resultValue = new GetGeofenceCollectionResult();
            _resultValue.collectionArn = collectionArn;
            _resultValue.collectionName = collectionName;
            _resultValue.createTime = createTime;
            _resultValue.description = description;
            _resultValue.id = id;
            _resultValue.kmsKeyId = kmsKeyId;
            _resultValue.tags = tags;
            _resultValue.updateTime = updateTime;
            return _resultValue;
        }
    }
}
