// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.inputs;

import com.pulumi.aws.quicksight.inputs.TooltipOptionsFieldBaseTooltipArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TooltipOptionsArgs extends com.pulumi.resources.ResourceArgs {

    public static final TooltipOptionsArgs Empty = new TooltipOptionsArgs();

    @Import(name="fieldBaseTooltip")
    private @Nullable Output<TooltipOptionsFieldBaseTooltipArgs> fieldBaseTooltip;

    public Optional<Output<TooltipOptionsFieldBaseTooltipArgs>> fieldBaseTooltip() {
        return Optional.ofNullable(this.fieldBaseTooltip);
    }

    @Import(name="selectedTooltipType")
    private @Nullable Output<String> selectedTooltipType;

    public Optional<Output<String>> selectedTooltipType() {
        return Optional.ofNullable(this.selectedTooltipType);
    }

    @Import(name="tooltipVisibility")
    private @Nullable Output<String> tooltipVisibility;

    public Optional<Output<String>> tooltipVisibility() {
        return Optional.ofNullable(this.tooltipVisibility);
    }

    private TooltipOptionsArgs() {}

    private TooltipOptionsArgs(TooltipOptionsArgs $) {
        this.fieldBaseTooltip = $.fieldBaseTooltip;
        this.selectedTooltipType = $.selectedTooltipType;
        this.tooltipVisibility = $.tooltipVisibility;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TooltipOptionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TooltipOptionsArgs $;

        public Builder() {
            $ = new TooltipOptionsArgs();
        }

        public Builder(TooltipOptionsArgs defaults) {
            $ = new TooltipOptionsArgs(Objects.requireNonNull(defaults));
        }

        public Builder fieldBaseTooltip(@Nullable Output<TooltipOptionsFieldBaseTooltipArgs> fieldBaseTooltip) {
            $.fieldBaseTooltip = fieldBaseTooltip;
            return this;
        }

        public Builder fieldBaseTooltip(TooltipOptionsFieldBaseTooltipArgs fieldBaseTooltip) {
            return fieldBaseTooltip(Output.of(fieldBaseTooltip));
        }

        public Builder selectedTooltipType(@Nullable Output<String> selectedTooltipType) {
            $.selectedTooltipType = selectedTooltipType;
            return this;
        }

        public Builder selectedTooltipType(String selectedTooltipType) {
            return selectedTooltipType(Output.of(selectedTooltipType));
        }

        public Builder tooltipVisibility(@Nullable Output<String> tooltipVisibility) {
            $.tooltipVisibility = tooltipVisibility;
            return this;
        }

        public Builder tooltipVisibility(String tooltipVisibility) {
            return tooltipVisibility(Output.of(tooltipVisibility));
        }

        public TooltipOptionsArgs build() {
            return $;
        }
    }

}
