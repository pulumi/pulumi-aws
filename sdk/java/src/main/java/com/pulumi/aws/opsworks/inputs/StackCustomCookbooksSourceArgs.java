// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.opsworks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class StackCustomCookbooksSourceArgs extends com.pulumi.resources.ResourceArgs {

    public static final StackCustomCookbooksSourceArgs Empty = new StackCustomCookbooksSourceArgs();

    /**
     * Password to use when authenticating to the source. The provider cannot perform drift detection of this configuration.
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return Password to use when authenticating to the source. The provider cannot perform drift detection of this configuration.
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * For sources that are version-aware, the revision to use.
     * 
     */
    @Import(name="revision")
    private @Nullable Output<String> revision;

    /**
     * @return For sources that are version-aware, the revision to use.
     * 
     */
    public Optional<Output<String>> revision() {
        return Optional.ofNullable(this.revision);
    }

    /**
     * SSH key to use when authenticating to the source. This provider cannot perform drift detection of this configuration.
     * 
     */
    @Import(name="sshKey")
    private @Nullable Output<String> sshKey;

    /**
     * @return SSH key to use when authenticating to the source. This provider cannot perform drift detection of this configuration.
     * 
     */
    public Optional<Output<String>> sshKey() {
        return Optional.ofNullable(this.sshKey);
    }

    /**
     * The type of source to use. For example, &#34;archive&#34;.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return The type of source to use. For example, &#34;archive&#34;.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     * The URL where the cookbooks resource can be found.
     * 
     */
    @Import(name="url", required=true)
    private Output<String> url;

    /**
     * @return The URL where the cookbooks resource can be found.
     * 
     */
    public Output<String> url() {
        return this.url;
    }

    /**
     * Username to use when authenticating to the source.
     * 
     */
    @Import(name="username")
    private @Nullable Output<String> username;

    /**
     * @return Username to use when authenticating to the source.
     * 
     */
    public Optional<Output<String>> username() {
        return Optional.ofNullable(this.username);
    }

    private StackCustomCookbooksSourceArgs() {}

    private StackCustomCookbooksSourceArgs(StackCustomCookbooksSourceArgs $) {
        this.password = $.password;
        this.revision = $.revision;
        this.sshKey = $.sshKey;
        this.type = $.type;
        this.url = $.url;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StackCustomCookbooksSourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StackCustomCookbooksSourceArgs $;

        public Builder() {
            $ = new StackCustomCookbooksSourceArgs();
        }

        public Builder(StackCustomCookbooksSourceArgs defaults) {
            $ = new StackCustomCookbooksSourceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param password Password to use when authenticating to the source. The provider cannot perform drift detection of this configuration.
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password Password to use when authenticating to the source. The provider cannot perform drift detection of this configuration.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param revision For sources that are version-aware, the revision to use.
         * 
         * @return builder
         * 
         */
        public Builder revision(@Nullable Output<String> revision) {
            $.revision = revision;
            return this;
        }

        /**
         * @param revision For sources that are version-aware, the revision to use.
         * 
         * @return builder
         * 
         */
        public Builder revision(String revision) {
            return revision(Output.of(revision));
        }

        /**
         * @param sshKey SSH key to use when authenticating to the source. This provider cannot perform drift detection of this configuration.
         * 
         * @return builder
         * 
         */
        public Builder sshKey(@Nullable Output<String> sshKey) {
            $.sshKey = sshKey;
            return this;
        }

        /**
         * @param sshKey SSH key to use when authenticating to the source. This provider cannot perform drift detection of this configuration.
         * 
         * @return builder
         * 
         */
        public Builder sshKey(String sshKey) {
            return sshKey(Output.of(sshKey));
        }

        /**
         * @param type The type of source to use. For example, &#34;archive&#34;.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of source to use. For example, &#34;archive&#34;.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param url The URL where the cookbooks resource can be found.
         * 
         * @return builder
         * 
         */
        public Builder url(Output<String> url) {
            $.url = url;
            return this;
        }

        /**
         * @param url The URL where the cookbooks resource can be found.
         * 
         * @return builder
         * 
         */
        public Builder url(String url) {
            return url(Output.of(url));
        }

        /**
         * @param username Username to use when authenticating to the source.
         * 
         * @return builder
         * 
         */
        public Builder username(@Nullable Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username Username to use when authenticating to the source.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public StackCustomCookbooksSourceArgs build() {
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            $.url = Objects.requireNonNull($.url, "expected parameter 'url' to be non-null");
            return $;
        }
    }

}
