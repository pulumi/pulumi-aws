// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VisualsLineChartVisualChartConfigurationForecastConfigurationForecastPropertiesArgs extends com.pulumi.resources.ResourceArgs {

    public static final VisualsLineChartVisualChartConfigurationForecastConfigurationForecastPropertiesArgs Empty = new VisualsLineChartVisualChartConfigurationForecastConfigurationForecastPropertiesArgs();

    @Import(name="lowerBoundary")
    private @Nullable Output<Double> lowerBoundary;

    public Optional<Output<Double>> lowerBoundary() {
        return Optional.ofNullable(this.lowerBoundary);
    }

    @Import(name="periodsBackward")
    private @Nullable Output<Integer> periodsBackward;

    public Optional<Output<Integer>> periodsBackward() {
        return Optional.ofNullable(this.periodsBackward);
    }

    @Import(name="periodsForward")
    private @Nullable Output<Integer> periodsForward;

    public Optional<Output<Integer>> periodsForward() {
        return Optional.ofNullable(this.periodsForward);
    }

    @Import(name="predictionInterval")
    private @Nullable Output<Integer> predictionInterval;

    public Optional<Output<Integer>> predictionInterval() {
        return Optional.ofNullable(this.predictionInterval);
    }

    @Import(name="seasonality")
    private @Nullable Output<Integer> seasonality;

    public Optional<Output<Integer>> seasonality() {
        return Optional.ofNullable(this.seasonality);
    }

    @Import(name="upperBoundary")
    private @Nullable Output<Double> upperBoundary;

    public Optional<Output<Double>> upperBoundary() {
        return Optional.ofNullable(this.upperBoundary);
    }

    private VisualsLineChartVisualChartConfigurationForecastConfigurationForecastPropertiesArgs() {}

    private VisualsLineChartVisualChartConfigurationForecastConfigurationForecastPropertiesArgs(VisualsLineChartVisualChartConfigurationForecastConfigurationForecastPropertiesArgs $) {
        this.lowerBoundary = $.lowerBoundary;
        this.periodsBackward = $.periodsBackward;
        this.periodsForward = $.periodsForward;
        this.predictionInterval = $.predictionInterval;
        this.seasonality = $.seasonality;
        this.upperBoundary = $.upperBoundary;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VisualsLineChartVisualChartConfigurationForecastConfigurationForecastPropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VisualsLineChartVisualChartConfigurationForecastConfigurationForecastPropertiesArgs $;

        public Builder() {
            $ = new VisualsLineChartVisualChartConfigurationForecastConfigurationForecastPropertiesArgs();
        }

        public Builder(VisualsLineChartVisualChartConfigurationForecastConfigurationForecastPropertiesArgs defaults) {
            $ = new VisualsLineChartVisualChartConfigurationForecastConfigurationForecastPropertiesArgs(Objects.requireNonNull(defaults));
        }

        public Builder lowerBoundary(@Nullable Output<Double> lowerBoundary) {
            $.lowerBoundary = lowerBoundary;
            return this;
        }

        public Builder lowerBoundary(Double lowerBoundary) {
            return lowerBoundary(Output.of(lowerBoundary));
        }

        public Builder periodsBackward(@Nullable Output<Integer> periodsBackward) {
            $.periodsBackward = periodsBackward;
            return this;
        }

        public Builder periodsBackward(Integer periodsBackward) {
            return periodsBackward(Output.of(periodsBackward));
        }

        public Builder periodsForward(@Nullable Output<Integer> periodsForward) {
            $.periodsForward = periodsForward;
            return this;
        }

        public Builder periodsForward(Integer periodsForward) {
            return periodsForward(Output.of(periodsForward));
        }

        public Builder predictionInterval(@Nullable Output<Integer> predictionInterval) {
            $.predictionInterval = predictionInterval;
            return this;
        }

        public Builder predictionInterval(Integer predictionInterval) {
            return predictionInterval(Output.of(predictionInterval));
        }

        public Builder seasonality(@Nullable Output<Integer> seasonality) {
            $.seasonality = seasonality;
            return this;
        }

        public Builder seasonality(Integer seasonality) {
            return seasonality(Output.of(seasonality));
        }

        public Builder upperBoundary(@Nullable Output<Double> upperBoundary) {
            $.upperBoundary = upperBoundary;
            return this;
        }

        public Builder upperBoundary(Double upperBoundary) {
            return upperBoundary(Output.of(upperBoundary));
        }

        public VisualsLineChartVisualChartConfigurationForecastConfigurationForecastPropertiesArgs build() {
            return $;
        }
    }

}
