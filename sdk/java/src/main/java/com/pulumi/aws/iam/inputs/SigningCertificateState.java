// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.iam.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SigningCertificateState extends com.pulumi.resources.ResourceArgs {

    public static final SigningCertificateState Empty = new SigningCertificateState();

    @Import(name="certificateBody")
    private @Nullable Output<String> certificateBody;

    public Optional<Output<String>> certificateBody() {
        return Optional.ofNullable(this.certificateBody);
    }

    @Import(name="certificateId")
    private @Nullable Output<String> certificateId;

    public Optional<Output<String>> certificateId() {
        return Optional.ofNullable(this.certificateId);
    }

    @Import(name="status")
    private @Nullable Output<String> status;

    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    @Import(name="userName")
    private @Nullable Output<String> userName;

    public Optional<Output<String>> userName() {
        return Optional.ofNullable(this.userName);
    }

    private SigningCertificateState() {}

    private SigningCertificateState(SigningCertificateState $) {
        this.certificateBody = $.certificateBody;
        this.certificateId = $.certificateId;
        this.status = $.status;
        this.userName = $.userName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SigningCertificateState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SigningCertificateState $;

        public Builder() {
            $ = new SigningCertificateState();
        }

        public Builder(SigningCertificateState defaults) {
            $ = new SigningCertificateState(Objects.requireNonNull(defaults));
        }

        public Builder certificateBody(@Nullable Output<String> certificateBody) {
            $.certificateBody = certificateBody;
            return this;
        }

        public Builder certificateBody(String certificateBody) {
            return certificateBody(Output.of(certificateBody));
        }

        public Builder certificateId(@Nullable Output<String> certificateId) {
            $.certificateId = certificateId;
            return this;
        }

        public Builder certificateId(String certificateId) {
            return certificateId(Output.of(certificateId));
        }

        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        public Builder status(String status) {
            return status(Output.of(status));
        }

        public Builder userName(@Nullable Output<String> userName) {
            $.userName = userName;
            return this;
        }

        public Builder userName(String userName) {
            return userName(Output.of(userName));
        }

        public SigningCertificateState build() {
            return $;
        }
    }

}
