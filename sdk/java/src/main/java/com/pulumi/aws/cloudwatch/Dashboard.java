// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.cloudwatch;

import com.pulumi.aws.Utilities;
import com.pulumi.aws.cloudwatch.DashboardArgs;
import com.pulumi.aws.cloudwatch.inputs.DashboardState;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * Provides a CloudWatch Dashboard resource.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.aws.cloudwatch.Dashboard;
 * import com.pulumi.aws.cloudwatch.DashboardArgs;
 * import static com.pulumi.codegen.internal.Serialization.*;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var main = new Dashboard("main", DashboardArgs.builder()
 *             .dashboardName("my-dashboard")
 *             .dashboardBody(serializeJson(
 *                 jsonObject(
 *                     jsonProperty("widgets", jsonArray(
 *                         jsonObject(
 *                             jsonProperty("type", "metric"),
 *                             jsonProperty("x", 0),
 *                             jsonProperty("y", 0),
 *                             jsonProperty("width", 12),
 *                             jsonProperty("height", 6),
 *                             jsonProperty("properties", jsonObject(
 *                                 jsonProperty("metrics", jsonArray(jsonArray(
 *                                     "AWS/EC2", 
 *                                     "CPUUtilization", 
 *                                     "InstanceId", 
 *                                     "i-012345"
 *                                 ))),
 *                                 jsonProperty("period", 300),
 *                                 jsonProperty("stat", "Average"),
 *                                 jsonProperty("region", "us-east-1"),
 *                                 jsonProperty("title", "EC2 Instance CPU")
 *                             ))
 *                         ), 
 *                         jsonObject(
 *                             jsonProperty("type", "text"),
 *                             jsonProperty("x", 0),
 *                             jsonProperty("y", 7),
 *                             jsonProperty("width", 3),
 *                             jsonProperty("height", 3),
 *                             jsonProperty("properties", jsonObject(
 *                                 jsonProperty("markdown", "Hello world")
 *                             ))
 *                         )
 *                     ))
 *                 )))
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Using `pulumi import`, import CloudWatch dashboards using the `dashboard_name`. For example:
 * 
 * ```sh
 * $ pulumi import aws:cloudwatch/dashboard:Dashboard sample dashboard_name
 * ```
 * 
 */
@ResourceType(type="aws:cloudwatch/dashboard:Dashboard")
public class Dashboard extends com.pulumi.resources.CustomResource {
    /**
     * The Amazon Resource Name (ARN) of the dashboard.
     * 
     */
    @Export(name="dashboardArn", refs={String.class}, tree="[0]")
    private Output<String> dashboardArn;

    /**
     * @return The Amazon Resource Name (ARN) of the dashboard.
     * 
     */
    public Output<String> dashboardArn() {
        return this.dashboardArn;
    }
    /**
     * The detailed information about the dashboard, including what widgets are included and their location on the dashboard. You can read more about the body structure in the [documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/CloudWatch-Dashboard-Body-Structure.html).
     * 
     */
    @Export(name="dashboardBody", refs={String.class}, tree="[0]")
    private Output<String> dashboardBody;

    /**
     * @return The detailed information about the dashboard, including what widgets are included and their location on the dashboard. You can read more about the body structure in the [documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/CloudWatch-Dashboard-Body-Structure.html).
     * 
     */
    public Output<String> dashboardBody() {
        return this.dashboardBody;
    }
    /**
     * The name of the dashboard.
     * 
     */
    @Export(name="dashboardName", refs={String.class}, tree="[0]")
    private Output<String> dashboardName;

    /**
     * @return The name of the dashboard.
     * 
     */
    public Output<String> dashboardName() {
        return this.dashboardName;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Dashboard(java.lang.String name) {
        this(name, DashboardArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Dashboard(java.lang.String name, DashboardArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Dashboard(java.lang.String name, DashboardArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("aws:cloudwatch/dashboard:Dashboard", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Dashboard(java.lang.String name, Output<java.lang.String> id, @Nullable DashboardState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("aws:cloudwatch/dashboard:Dashboard", name, state, makeResourceOptions(options, id), false);
    }

    private static DashboardArgs makeArgs(DashboardArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? DashboardArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Dashboard get(java.lang.String name, Output<java.lang.String> id, @Nullable DashboardState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Dashboard(name, id, state, options);
    }
}
