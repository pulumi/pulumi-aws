// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.qldb.inputs;

import com.pulumi.aws.qldb.inputs.StreamKinesisConfigurationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class StreamState extends com.pulumi.resources.ResourceArgs {

    public static final StreamState Empty = new StreamState();

    @Import(name="arn")
    private @Nullable Output<String> arn;

    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    @Import(name="exclusiveEndTime")
    private @Nullable Output<String> exclusiveEndTime;

    public Optional<Output<String>> exclusiveEndTime() {
        return Optional.ofNullable(this.exclusiveEndTime);
    }

    @Import(name="inclusiveStartTime")
    private @Nullable Output<String> inclusiveStartTime;

    public Optional<Output<String>> inclusiveStartTime() {
        return Optional.ofNullable(this.inclusiveStartTime);
    }

    @Import(name="kinesisConfiguration")
    private @Nullable Output<StreamKinesisConfigurationArgs> kinesisConfiguration;

    public Optional<Output<StreamKinesisConfigurationArgs>> kinesisConfiguration() {
        return Optional.ofNullable(this.kinesisConfiguration);
    }

    @Import(name="ledgerName")
    private @Nullable Output<String> ledgerName;

    public Optional<Output<String>> ledgerName() {
        return Optional.ofNullable(this.ledgerName);
    }

    @Import(name="roleArn")
    private @Nullable Output<String> roleArn;

    public Optional<Output<String>> roleArn() {
        return Optional.ofNullable(this.roleArn);
    }

    @Import(name="streamName")
    private @Nullable Output<String> streamName;

    public Optional<Output<String>> streamName() {
        return Optional.ofNullable(this.streamName);
    }

    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    private StreamState() {}

    private StreamState(StreamState $) {
        this.arn = $.arn;
        this.exclusiveEndTime = $.exclusiveEndTime;
        this.inclusiveStartTime = $.inclusiveStartTime;
        this.kinesisConfiguration = $.kinesisConfiguration;
        this.ledgerName = $.ledgerName;
        this.roleArn = $.roleArn;
        this.streamName = $.streamName;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StreamState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StreamState $;

        public Builder() {
            $ = new StreamState();
        }

        public Builder(StreamState defaults) {
            $ = new StreamState(Objects.requireNonNull(defaults));
        }

        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        public Builder exclusiveEndTime(@Nullable Output<String> exclusiveEndTime) {
            $.exclusiveEndTime = exclusiveEndTime;
            return this;
        }

        public Builder exclusiveEndTime(String exclusiveEndTime) {
            return exclusiveEndTime(Output.of(exclusiveEndTime));
        }

        public Builder inclusiveStartTime(@Nullable Output<String> inclusiveStartTime) {
            $.inclusiveStartTime = inclusiveStartTime;
            return this;
        }

        public Builder inclusiveStartTime(String inclusiveStartTime) {
            return inclusiveStartTime(Output.of(inclusiveStartTime));
        }

        public Builder kinesisConfiguration(@Nullable Output<StreamKinesisConfigurationArgs> kinesisConfiguration) {
            $.kinesisConfiguration = kinesisConfiguration;
            return this;
        }

        public Builder kinesisConfiguration(StreamKinesisConfigurationArgs kinesisConfiguration) {
            return kinesisConfiguration(Output.of(kinesisConfiguration));
        }

        public Builder ledgerName(@Nullable Output<String> ledgerName) {
            $.ledgerName = ledgerName;
            return this;
        }

        public Builder ledgerName(String ledgerName) {
            return ledgerName(Output.of(ledgerName));
        }

        public Builder roleArn(@Nullable Output<String> roleArn) {
            $.roleArn = roleArn;
            return this;
        }

        public Builder roleArn(String roleArn) {
            return roleArn(Output.of(roleArn));
        }

        public Builder streamName(@Nullable Output<String> streamName) {
            $.streamName = streamName;
            return this;
        }

        public Builder streamName(String streamName) {
            return streamName(Output.of(streamName));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        public StreamState build() {
            return $;
        }
    }

}
