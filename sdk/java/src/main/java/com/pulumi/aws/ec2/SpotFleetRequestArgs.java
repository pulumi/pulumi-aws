// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ec2;

import com.pulumi.aws.ec2.inputs.SpotFleetRequestLaunchSpecificationArgs;
import com.pulumi.aws.ec2.inputs.SpotFleetRequestLaunchTemplateConfigArgs;
import com.pulumi.aws.ec2.inputs.SpotFleetRequestSpotMaintenanceStrategiesArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SpotFleetRequestArgs extends com.pulumi.resources.ResourceArgs {

    public static final SpotFleetRequestArgs Empty = new SpotFleetRequestArgs();

    @Import(name="allocationStrategy")
    private @Nullable Output<String> allocationStrategy;

    public Optional<Output<String>> allocationStrategy() {
        return Optional.ofNullable(this.allocationStrategy);
    }

    @Import(name="excessCapacityTerminationPolicy")
    private @Nullable Output<String> excessCapacityTerminationPolicy;

    public Optional<Output<String>> excessCapacityTerminationPolicy() {
        return Optional.ofNullable(this.excessCapacityTerminationPolicy);
    }

    @Import(name="fleetType")
    private @Nullable Output<String> fleetType;

    public Optional<Output<String>> fleetType() {
        return Optional.ofNullable(this.fleetType);
    }

    @Import(name="iamFleetRole", required=true)
    private Output<String> iamFleetRole;

    public Output<String> iamFleetRole() {
        return this.iamFleetRole;
    }

    @Import(name="instanceInterruptionBehaviour")
    private @Nullable Output<String> instanceInterruptionBehaviour;

    public Optional<Output<String>> instanceInterruptionBehaviour() {
        return Optional.ofNullable(this.instanceInterruptionBehaviour);
    }

    @Import(name="instancePoolsToUseCount")
    private @Nullable Output<Integer> instancePoolsToUseCount;

    public Optional<Output<Integer>> instancePoolsToUseCount() {
        return Optional.ofNullable(this.instancePoolsToUseCount);
    }

    @Import(name="launchSpecifications")
    private @Nullable Output<List<SpotFleetRequestLaunchSpecificationArgs>> launchSpecifications;

    public Optional<Output<List<SpotFleetRequestLaunchSpecificationArgs>>> launchSpecifications() {
        return Optional.ofNullable(this.launchSpecifications);
    }

    @Import(name="launchTemplateConfigs")
    private @Nullable Output<List<SpotFleetRequestLaunchTemplateConfigArgs>> launchTemplateConfigs;

    public Optional<Output<List<SpotFleetRequestLaunchTemplateConfigArgs>>> launchTemplateConfigs() {
        return Optional.ofNullable(this.launchTemplateConfigs);
    }

    @Import(name="loadBalancers")
    private @Nullable Output<List<String>> loadBalancers;

    public Optional<Output<List<String>>> loadBalancers() {
        return Optional.ofNullable(this.loadBalancers);
    }

    @Import(name="onDemandAllocationStrategy")
    private @Nullable Output<String> onDemandAllocationStrategy;

    public Optional<Output<String>> onDemandAllocationStrategy() {
        return Optional.ofNullable(this.onDemandAllocationStrategy);
    }

    @Import(name="onDemandMaxTotalPrice")
    private @Nullable Output<String> onDemandMaxTotalPrice;

    public Optional<Output<String>> onDemandMaxTotalPrice() {
        return Optional.ofNullable(this.onDemandMaxTotalPrice);
    }

    @Import(name="onDemandTargetCapacity")
    private @Nullable Output<Integer> onDemandTargetCapacity;

    public Optional<Output<Integer>> onDemandTargetCapacity() {
        return Optional.ofNullable(this.onDemandTargetCapacity);
    }

    @Import(name="replaceUnhealthyInstances")
    private @Nullable Output<Boolean> replaceUnhealthyInstances;

    public Optional<Output<Boolean>> replaceUnhealthyInstances() {
        return Optional.ofNullable(this.replaceUnhealthyInstances);
    }

    @Import(name="spotMaintenanceStrategies")
    private @Nullable Output<SpotFleetRequestSpotMaintenanceStrategiesArgs> spotMaintenanceStrategies;

    public Optional<Output<SpotFleetRequestSpotMaintenanceStrategiesArgs>> spotMaintenanceStrategies() {
        return Optional.ofNullable(this.spotMaintenanceStrategies);
    }

    @Import(name="spotPrice")
    private @Nullable Output<String> spotPrice;

    public Optional<Output<String>> spotPrice() {
        return Optional.ofNullable(this.spotPrice);
    }

    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="targetCapacity", required=true)
    private Output<Integer> targetCapacity;

    public Output<Integer> targetCapacity() {
        return this.targetCapacity;
    }

    @Import(name="targetCapacityUnitType")
    private @Nullable Output<String> targetCapacityUnitType;

    public Optional<Output<String>> targetCapacityUnitType() {
        return Optional.ofNullable(this.targetCapacityUnitType);
    }

    @Import(name="targetGroupArns")
    private @Nullable Output<List<String>> targetGroupArns;

    public Optional<Output<List<String>>> targetGroupArns() {
        return Optional.ofNullable(this.targetGroupArns);
    }

    @Import(name="terminateInstancesOnDelete")
    private @Nullable Output<String> terminateInstancesOnDelete;

    public Optional<Output<String>> terminateInstancesOnDelete() {
        return Optional.ofNullable(this.terminateInstancesOnDelete);
    }

    @Import(name="terminateInstancesWithExpiration")
    private @Nullable Output<Boolean> terminateInstancesWithExpiration;

    public Optional<Output<Boolean>> terminateInstancesWithExpiration() {
        return Optional.ofNullable(this.terminateInstancesWithExpiration);
    }

    @Import(name="validFrom")
    private @Nullable Output<String> validFrom;

    public Optional<Output<String>> validFrom() {
        return Optional.ofNullable(this.validFrom);
    }

    @Import(name="validUntil")
    private @Nullable Output<String> validUntil;

    public Optional<Output<String>> validUntil() {
        return Optional.ofNullable(this.validUntil);
    }

    @Import(name="waitForFulfillment")
    private @Nullable Output<Boolean> waitForFulfillment;

    public Optional<Output<Boolean>> waitForFulfillment() {
        return Optional.ofNullable(this.waitForFulfillment);
    }

    private SpotFleetRequestArgs() {}

    private SpotFleetRequestArgs(SpotFleetRequestArgs $) {
        this.allocationStrategy = $.allocationStrategy;
        this.excessCapacityTerminationPolicy = $.excessCapacityTerminationPolicy;
        this.fleetType = $.fleetType;
        this.iamFleetRole = $.iamFleetRole;
        this.instanceInterruptionBehaviour = $.instanceInterruptionBehaviour;
        this.instancePoolsToUseCount = $.instancePoolsToUseCount;
        this.launchSpecifications = $.launchSpecifications;
        this.launchTemplateConfigs = $.launchTemplateConfigs;
        this.loadBalancers = $.loadBalancers;
        this.onDemandAllocationStrategy = $.onDemandAllocationStrategy;
        this.onDemandMaxTotalPrice = $.onDemandMaxTotalPrice;
        this.onDemandTargetCapacity = $.onDemandTargetCapacity;
        this.replaceUnhealthyInstances = $.replaceUnhealthyInstances;
        this.spotMaintenanceStrategies = $.spotMaintenanceStrategies;
        this.spotPrice = $.spotPrice;
        this.tags = $.tags;
        this.targetCapacity = $.targetCapacity;
        this.targetCapacityUnitType = $.targetCapacityUnitType;
        this.targetGroupArns = $.targetGroupArns;
        this.terminateInstancesOnDelete = $.terminateInstancesOnDelete;
        this.terminateInstancesWithExpiration = $.terminateInstancesWithExpiration;
        this.validFrom = $.validFrom;
        this.validUntil = $.validUntil;
        this.waitForFulfillment = $.waitForFulfillment;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SpotFleetRequestArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SpotFleetRequestArgs $;

        public Builder() {
            $ = new SpotFleetRequestArgs();
        }

        public Builder(SpotFleetRequestArgs defaults) {
            $ = new SpotFleetRequestArgs(Objects.requireNonNull(defaults));
        }

        public Builder allocationStrategy(@Nullable Output<String> allocationStrategy) {
            $.allocationStrategy = allocationStrategy;
            return this;
        }

        public Builder allocationStrategy(String allocationStrategy) {
            return allocationStrategy(Output.of(allocationStrategy));
        }

        public Builder excessCapacityTerminationPolicy(@Nullable Output<String> excessCapacityTerminationPolicy) {
            $.excessCapacityTerminationPolicy = excessCapacityTerminationPolicy;
            return this;
        }

        public Builder excessCapacityTerminationPolicy(String excessCapacityTerminationPolicy) {
            return excessCapacityTerminationPolicy(Output.of(excessCapacityTerminationPolicy));
        }

        public Builder fleetType(@Nullable Output<String> fleetType) {
            $.fleetType = fleetType;
            return this;
        }

        public Builder fleetType(String fleetType) {
            return fleetType(Output.of(fleetType));
        }

        public Builder iamFleetRole(Output<String> iamFleetRole) {
            $.iamFleetRole = iamFleetRole;
            return this;
        }

        public Builder iamFleetRole(String iamFleetRole) {
            return iamFleetRole(Output.of(iamFleetRole));
        }

        public Builder instanceInterruptionBehaviour(@Nullable Output<String> instanceInterruptionBehaviour) {
            $.instanceInterruptionBehaviour = instanceInterruptionBehaviour;
            return this;
        }

        public Builder instanceInterruptionBehaviour(String instanceInterruptionBehaviour) {
            return instanceInterruptionBehaviour(Output.of(instanceInterruptionBehaviour));
        }

        public Builder instancePoolsToUseCount(@Nullable Output<Integer> instancePoolsToUseCount) {
            $.instancePoolsToUseCount = instancePoolsToUseCount;
            return this;
        }

        public Builder instancePoolsToUseCount(Integer instancePoolsToUseCount) {
            return instancePoolsToUseCount(Output.of(instancePoolsToUseCount));
        }

        public Builder launchSpecifications(@Nullable Output<List<SpotFleetRequestLaunchSpecificationArgs>> launchSpecifications) {
            $.launchSpecifications = launchSpecifications;
            return this;
        }

        public Builder launchSpecifications(List<SpotFleetRequestLaunchSpecificationArgs> launchSpecifications) {
            return launchSpecifications(Output.of(launchSpecifications));
        }

        public Builder launchSpecifications(SpotFleetRequestLaunchSpecificationArgs... launchSpecifications) {
            return launchSpecifications(List.of(launchSpecifications));
        }

        public Builder launchTemplateConfigs(@Nullable Output<List<SpotFleetRequestLaunchTemplateConfigArgs>> launchTemplateConfigs) {
            $.launchTemplateConfigs = launchTemplateConfigs;
            return this;
        }

        public Builder launchTemplateConfigs(List<SpotFleetRequestLaunchTemplateConfigArgs> launchTemplateConfigs) {
            return launchTemplateConfigs(Output.of(launchTemplateConfigs));
        }

        public Builder launchTemplateConfigs(SpotFleetRequestLaunchTemplateConfigArgs... launchTemplateConfigs) {
            return launchTemplateConfigs(List.of(launchTemplateConfigs));
        }

        public Builder loadBalancers(@Nullable Output<List<String>> loadBalancers) {
            $.loadBalancers = loadBalancers;
            return this;
        }

        public Builder loadBalancers(List<String> loadBalancers) {
            return loadBalancers(Output.of(loadBalancers));
        }

        public Builder loadBalancers(String... loadBalancers) {
            return loadBalancers(List.of(loadBalancers));
        }

        public Builder onDemandAllocationStrategy(@Nullable Output<String> onDemandAllocationStrategy) {
            $.onDemandAllocationStrategy = onDemandAllocationStrategy;
            return this;
        }

        public Builder onDemandAllocationStrategy(String onDemandAllocationStrategy) {
            return onDemandAllocationStrategy(Output.of(onDemandAllocationStrategy));
        }

        public Builder onDemandMaxTotalPrice(@Nullable Output<String> onDemandMaxTotalPrice) {
            $.onDemandMaxTotalPrice = onDemandMaxTotalPrice;
            return this;
        }

        public Builder onDemandMaxTotalPrice(String onDemandMaxTotalPrice) {
            return onDemandMaxTotalPrice(Output.of(onDemandMaxTotalPrice));
        }

        public Builder onDemandTargetCapacity(@Nullable Output<Integer> onDemandTargetCapacity) {
            $.onDemandTargetCapacity = onDemandTargetCapacity;
            return this;
        }

        public Builder onDemandTargetCapacity(Integer onDemandTargetCapacity) {
            return onDemandTargetCapacity(Output.of(onDemandTargetCapacity));
        }

        public Builder replaceUnhealthyInstances(@Nullable Output<Boolean> replaceUnhealthyInstances) {
            $.replaceUnhealthyInstances = replaceUnhealthyInstances;
            return this;
        }

        public Builder replaceUnhealthyInstances(Boolean replaceUnhealthyInstances) {
            return replaceUnhealthyInstances(Output.of(replaceUnhealthyInstances));
        }

        public Builder spotMaintenanceStrategies(@Nullable Output<SpotFleetRequestSpotMaintenanceStrategiesArgs> spotMaintenanceStrategies) {
            $.spotMaintenanceStrategies = spotMaintenanceStrategies;
            return this;
        }

        public Builder spotMaintenanceStrategies(SpotFleetRequestSpotMaintenanceStrategiesArgs spotMaintenanceStrategies) {
            return spotMaintenanceStrategies(Output.of(spotMaintenanceStrategies));
        }

        public Builder spotPrice(@Nullable Output<String> spotPrice) {
            $.spotPrice = spotPrice;
            return this;
        }

        public Builder spotPrice(String spotPrice) {
            return spotPrice(Output.of(spotPrice));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder targetCapacity(Output<Integer> targetCapacity) {
            $.targetCapacity = targetCapacity;
            return this;
        }

        public Builder targetCapacity(Integer targetCapacity) {
            return targetCapacity(Output.of(targetCapacity));
        }

        public Builder targetCapacityUnitType(@Nullable Output<String> targetCapacityUnitType) {
            $.targetCapacityUnitType = targetCapacityUnitType;
            return this;
        }

        public Builder targetCapacityUnitType(String targetCapacityUnitType) {
            return targetCapacityUnitType(Output.of(targetCapacityUnitType));
        }

        public Builder targetGroupArns(@Nullable Output<List<String>> targetGroupArns) {
            $.targetGroupArns = targetGroupArns;
            return this;
        }

        public Builder targetGroupArns(List<String> targetGroupArns) {
            return targetGroupArns(Output.of(targetGroupArns));
        }

        public Builder targetGroupArns(String... targetGroupArns) {
            return targetGroupArns(List.of(targetGroupArns));
        }

        public Builder terminateInstancesOnDelete(@Nullable Output<String> terminateInstancesOnDelete) {
            $.terminateInstancesOnDelete = terminateInstancesOnDelete;
            return this;
        }

        public Builder terminateInstancesOnDelete(String terminateInstancesOnDelete) {
            return terminateInstancesOnDelete(Output.of(terminateInstancesOnDelete));
        }

        public Builder terminateInstancesWithExpiration(@Nullable Output<Boolean> terminateInstancesWithExpiration) {
            $.terminateInstancesWithExpiration = terminateInstancesWithExpiration;
            return this;
        }

        public Builder terminateInstancesWithExpiration(Boolean terminateInstancesWithExpiration) {
            return terminateInstancesWithExpiration(Output.of(terminateInstancesWithExpiration));
        }

        public Builder validFrom(@Nullable Output<String> validFrom) {
            $.validFrom = validFrom;
            return this;
        }

        public Builder validFrom(String validFrom) {
            return validFrom(Output.of(validFrom));
        }

        public Builder validUntil(@Nullable Output<String> validUntil) {
            $.validUntil = validUntil;
            return this;
        }

        public Builder validUntil(String validUntil) {
            return validUntil(Output.of(validUntil));
        }

        public Builder waitForFulfillment(@Nullable Output<Boolean> waitForFulfillment) {
            $.waitForFulfillment = waitForFulfillment;
            return this;
        }

        public Builder waitForFulfillment(Boolean waitForFulfillment) {
            return waitForFulfillment(Output.of(waitForFulfillment));
        }

        public SpotFleetRequestArgs build() {
            $.iamFleetRole = Objects.requireNonNull($.iamFleetRole, "expected parameter 'iamFleetRole' to be non-null");
            $.targetCapacity = Objects.requireNonNull($.targetCapacity, "expected parameter 'targetCapacity' to be non-null");
            return $;
        }
    }

}
