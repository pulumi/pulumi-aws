// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.outputs;

import com.pulumi.aws.quicksight.outputs.GetDataSetPhysicalTableMapRelationalTableInputColumn;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetDataSetPhysicalTableMapRelationalTable {
    private String catalog;
    private String dataSourceArn;
    private List<GetDataSetPhysicalTableMapRelationalTableInputColumn> inputColumns;
    private String name;
    private String schema;

    private GetDataSetPhysicalTableMapRelationalTable() {}
    public String catalog() {
        return this.catalog;
    }
    public String dataSourceArn() {
        return this.dataSourceArn;
    }
    public List<GetDataSetPhysicalTableMapRelationalTableInputColumn> inputColumns() {
        return this.inputColumns;
    }
    public String name() {
        return this.name;
    }
    public String schema() {
        return this.schema;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDataSetPhysicalTableMapRelationalTable defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String catalog;
        private String dataSourceArn;
        private List<GetDataSetPhysicalTableMapRelationalTableInputColumn> inputColumns;
        private String name;
        private String schema;
        public Builder() {}
        public Builder(GetDataSetPhysicalTableMapRelationalTable defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.catalog = defaults.catalog;
    	      this.dataSourceArn = defaults.dataSourceArn;
    	      this.inputColumns = defaults.inputColumns;
    	      this.name = defaults.name;
    	      this.schema = defaults.schema;
        }

        @CustomType.Setter
        public Builder catalog(String catalog) {
            if (catalog == null) {
              throw new MissingRequiredPropertyException("GetDataSetPhysicalTableMapRelationalTable", "catalog");
            }
            this.catalog = catalog;
            return this;
        }
        @CustomType.Setter
        public Builder dataSourceArn(String dataSourceArn) {
            if (dataSourceArn == null) {
              throw new MissingRequiredPropertyException("GetDataSetPhysicalTableMapRelationalTable", "dataSourceArn");
            }
            this.dataSourceArn = dataSourceArn;
            return this;
        }
        @CustomType.Setter
        public Builder inputColumns(List<GetDataSetPhysicalTableMapRelationalTableInputColumn> inputColumns) {
            if (inputColumns == null) {
              throw new MissingRequiredPropertyException("GetDataSetPhysicalTableMapRelationalTable", "inputColumns");
            }
            this.inputColumns = inputColumns;
            return this;
        }
        public Builder inputColumns(GetDataSetPhysicalTableMapRelationalTableInputColumn... inputColumns) {
            return inputColumns(List.of(inputColumns));
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetDataSetPhysicalTableMapRelationalTable", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder schema(String schema) {
            if (schema == null) {
              throw new MissingRequiredPropertyException("GetDataSetPhysicalTableMapRelationalTable", "schema");
            }
            this.schema = schema;
            return this;
        }
        public GetDataSetPhysicalTableMapRelationalTable build() {
            final var _resultValue = new GetDataSetPhysicalTableMapRelationalTable();
            _resultValue.catalog = catalog;
            _resultValue.dataSourceArn = dataSourceArn;
            _resultValue.inputColumns = inputColumns;
            _resultValue.name = name;
            _resultValue.schema = schema;
            return _resultValue;
        }
    }
}
