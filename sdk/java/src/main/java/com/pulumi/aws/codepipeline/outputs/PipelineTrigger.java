// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.codepipeline.outputs;

import com.pulumi.aws.codepipeline.outputs.PipelineTriggerGitConfiguration;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class PipelineTrigger {
    /**
     * @return Provides the filter criteria and the source stage for the repository event that starts the pipeline. For more information, refer to the [AWS documentation](https://docs.aws.amazon.com/codepipeline/latest/userguide/pipelines-filter.html). A `git_configuration` block is documented below.
     * 
     */
    private PipelineTriggerGitConfiguration gitConfiguration;
    /**
     * @return The source provider for the event. Possible value is `CodeStarSourceConnection`.
     * 
     */
    private String providerType;

    private PipelineTrigger() {}
    /**
     * @return Provides the filter criteria and the source stage for the repository event that starts the pipeline. For more information, refer to the [AWS documentation](https://docs.aws.amazon.com/codepipeline/latest/userguide/pipelines-filter.html). A `git_configuration` block is documented below.
     * 
     */
    public PipelineTriggerGitConfiguration gitConfiguration() {
        return this.gitConfiguration;
    }
    /**
     * @return The source provider for the event. Possible value is `CodeStarSourceConnection`.
     * 
     */
    public String providerType() {
        return this.providerType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PipelineTrigger defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private PipelineTriggerGitConfiguration gitConfiguration;
        private String providerType;
        public Builder() {}
        public Builder(PipelineTrigger defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.gitConfiguration = defaults.gitConfiguration;
    	      this.providerType = defaults.providerType;
        }

        @CustomType.Setter
        public Builder gitConfiguration(PipelineTriggerGitConfiguration gitConfiguration) {
            if (gitConfiguration == null) {
              throw new MissingRequiredPropertyException("PipelineTrigger", "gitConfiguration");
            }
            this.gitConfiguration = gitConfiguration;
            return this;
        }
        @CustomType.Setter
        public Builder providerType(String providerType) {
            if (providerType == null) {
              throw new MissingRequiredPropertyException("PipelineTrigger", "providerType");
            }
            this.providerType = providerType;
            return this;
        }
        public PipelineTrigger build() {
            final var _resultValue = new PipelineTrigger();
            _resultValue.gitConfiguration = gitConfiguration;
            _resultValue.providerType = providerType;
            return _resultValue;
        }
    }
}
