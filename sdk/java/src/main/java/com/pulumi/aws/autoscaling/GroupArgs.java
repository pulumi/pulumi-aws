// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.autoscaling;

import com.pulumi.aws.autoscaling.enums.MetricsGranularity;
import com.pulumi.aws.autoscaling.inputs.GroupInitialLifecycleHookArgs;
import com.pulumi.aws.autoscaling.inputs.GroupInstanceRefreshArgs;
import com.pulumi.aws.autoscaling.inputs.GroupLaunchTemplateArgs;
import com.pulumi.aws.autoscaling.inputs.GroupMixedInstancesPolicyArgs;
import com.pulumi.aws.autoscaling.inputs.GroupTagArgs;
import com.pulumi.aws.autoscaling.inputs.GroupWarmPoolArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GroupArgs extends com.pulumi.resources.ResourceArgs {

    public static final GroupArgs Empty = new GroupArgs();

    @Import(name="availabilityZones")
    private @Nullable Output<List<String>> availabilityZones;

    public Optional<Output<List<String>>> availabilityZones() {
        return Optional.ofNullable(this.availabilityZones);
    }

    @Import(name="capacityRebalance")
    private @Nullable Output<Boolean> capacityRebalance;

    public Optional<Output<Boolean>> capacityRebalance() {
        return Optional.ofNullable(this.capacityRebalance);
    }

    @Import(name="context")
    private @Nullable Output<String> context;

    public Optional<Output<String>> context() {
        return Optional.ofNullable(this.context);
    }

    @Import(name="defaultCooldown")
    private @Nullable Output<Integer> defaultCooldown;

    public Optional<Output<Integer>> defaultCooldown() {
        return Optional.ofNullable(this.defaultCooldown);
    }

    @Import(name="defaultInstanceWarmup")
    private @Nullable Output<Integer> defaultInstanceWarmup;

    public Optional<Output<Integer>> defaultInstanceWarmup() {
        return Optional.ofNullable(this.defaultInstanceWarmup);
    }

    @Import(name="desiredCapacity")
    private @Nullable Output<Integer> desiredCapacity;

    public Optional<Output<Integer>> desiredCapacity() {
        return Optional.ofNullable(this.desiredCapacity);
    }

    @Import(name="desiredCapacityType")
    private @Nullable Output<String> desiredCapacityType;

    public Optional<Output<String>> desiredCapacityType() {
        return Optional.ofNullable(this.desiredCapacityType);
    }

    @Import(name="enabledMetrics")
    private @Nullable Output<List<String>> enabledMetrics;

    public Optional<Output<List<String>>> enabledMetrics() {
        return Optional.ofNullable(this.enabledMetrics);
    }

    @Import(name="forceDelete")
    private @Nullable Output<Boolean> forceDelete;

    public Optional<Output<Boolean>> forceDelete() {
        return Optional.ofNullable(this.forceDelete);
    }

    @Import(name="forceDeleteWarmPool")
    private @Nullable Output<Boolean> forceDeleteWarmPool;

    public Optional<Output<Boolean>> forceDeleteWarmPool() {
        return Optional.ofNullable(this.forceDeleteWarmPool);
    }

    @Import(name="healthCheckGracePeriod")
    private @Nullable Output<Integer> healthCheckGracePeriod;

    public Optional<Output<Integer>> healthCheckGracePeriod() {
        return Optional.ofNullable(this.healthCheckGracePeriod);
    }

    @Import(name="healthCheckType")
    private @Nullable Output<String> healthCheckType;

    public Optional<Output<String>> healthCheckType() {
        return Optional.ofNullable(this.healthCheckType);
    }

    @Import(name="initialLifecycleHooks")
    private @Nullable Output<List<GroupInitialLifecycleHookArgs>> initialLifecycleHooks;

    public Optional<Output<List<GroupInitialLifecycleHookArgs>>> initialLifecycleHooks() {
        return Optional.ofNullable(this.initialLifecycleHooks);
    }

    @Import(name="instanceRefresh")
    private @Nullable Output<GroupInstanceRefreshArgs> instanceRefresh;

    public Optional<Output<GroupInstanceRefreshArgs>> instanceRefresh() {
        return Optional.ofNullable(this.instanceRefresh);
    }

    @Import(name="launchConfiguration")
    private @Nullable Output<String> launchConfiguration;

    public Optional<Output<String>> launchConfiguration() {
        return Optional.ofNullable(this.launchConfiguration);
    }

    @Import(name="launchTemplate")
    private @Nullable Output<GroupLaunchTemplateArgs> launchTemplate;

    public Optional<Output<GroupLaunchTemplateArgs>> launchTemplate() {
        return Optional.ofNullable(this.launchTemplate);
    }

    @Import(name="loadBalancers")
    private @Nullable Output<List<String>> loadBalancers;

    public Optional<Output<List<String>>> loadBalancers() {
        return Optional.ofNullable(this.loadBalancers);
    }

    @Import(name="maxInstanceLifetime")
    private @Nullable Output<Integer> maxInstanceLifetime;

    public Optional<Output<Integer>> maxInstanceLifetime() {
        return Optional.ofNullable(this.maxInstanceLifetime);
    }

    @Import(name="maxSize", required=true)
    private Output<Integer> maxSize;

    public Output<Integer> maxSize() {
        return this.maxSize;
    }

    @Import(name="metricsGranularity")
    private @Nullable Output<Either<String,MetricsGranularity>> metricsGranularity;

    public Optional<Output<Either<String,MetricsGranularity>>> metricsGranularity() {
        return Optional.ofNullable(this.metricsGranularity);
    }

    @Import(name="minElbCapacity")
    private @Nullable Output<Integer> minElbCapacity;

    public Optional<Output<Integer>> minElbCapacity() {
        return Optional.ofNullable(this.minElbCapacity);
    }

    @Import(name="minSize", required=true)
    private Output<Integer> minSize;

    public Output<Integer> minSize() {
        return this.minSize;
    }

    @Import(name="mixedInstancesPolicy")
    private @Nullable Output<GroupMixedInstancesPolicyArgs> mixedInstancesPolicy;

    public Optional<Output<GroupMixedInstancesPolicyArgs>> mixedInstancesPolicy() {
        return Optional.ofNullable(this.mixedInstancesPolicy);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="namePrefix")
    private @Nullable Output<String> namePrefix;

    public Optional<Output<String>> namePrefix() {
        return Optional.ofNullable(this.namePrefix);
    }

    @Import(name="placementGroup")
    private @Nullable Output<String> placementGroup;

    public Optional<Output<String>> placementGroup() {
        return Optional.ofNullable(this.placementGroup);
    }

    @Import(name="protectFromScaleIn")
    private @Nullable Output<Boolean> protectFromScaleIn;

    public Optional<Output<Boolean>> protectFromScaleIn() {
        return Optional.ofNullable(this.protectFromScaleIn);
    }

    @Import(name="serviceLinkedRoleArn")
    private @Nullable Output<String> serviceLinkedRoleArn;

    public Optional<Output<String>> serviceLinkedRoleArn() {
        return Optional.ofNullable(this.serviceLinkedRoleArn);
    }

    @Import(name="suspendedProcesses")
    private @Nullable Output<List<String>> suspendedProcesses;

    public Optional<Output<List<String>>> suspendedProcesses() {
        return Optional.ofNullable(this.suspendedProcesses);
    }

    @Import(name="tags")
    private @Nullable Output<List<GroupTagArgs>> tags;

    public Optional<Output<List<GroupTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * @deprecated
     * Use tag instead
     * 
     */
    @Deprecated /* Use tag instead */
    @Import(name="tagsCollection")
    private @Nullable Output<List<Map<String,String>>> tagsCollection;

    /**
     * @deprecated
     * Use tag instead
     * 
     */
    @Deprecated /* Use tag instead */
    public Optional<Output<List<Map<String,String>>>> tagsCollection() {
        return Optional.ofNullable(this.tagsCollection);
    }

    @Import(name="targetGroupArns")
    private @Nullable Output<List<String>> targetGroupArns;

    public Optional<Output<List<String>>> targetGroupArns() {
        return Optional.ofNullable(this.targetGroupArns);
    }

    @Import(name="terminationPolicies")
    private @Nullable Output<List<String>> terminationPolicies;

    public Optional<Output<List<String>>> terminationPolicies() {
        return Optional.ofNullable(this.terminationPolicies);
    }

    @Import(name="vpcZoneIdentifiers")
    private @Nullable Output<List<String>> vpcZoneIdentifiers;

    public Optional<Output<List<String>>> vpcZoneIdentifiers() {
        return Optional.ofNullable(this.vpcZoneIdentifiers);
    }

    @Import(name="waitForCapacityTimeout")
    private @Nullable Output<String> waitForCapacityTimeout;

    public Optional<Output<String>> waitForCapacityTimeout() {
        return Optional.ofNullable(this.waitForCapacityTimeout);
    }

    @Import(name="waitForElbCapacity")
    private @Nullable Output<Integer> waitForElbCapacity;

    public Optional<Output<Integer>> waitForElbCapacity() {
        return Optional.ofNullable(this.waitForElbCapacity);
    }

    @Import(name="warmPool")
    private @Nullable Output<GroupWarmPoolArgs> warmPool;

    public Optional<Output<GroupWarmPoolArgs>> warmPool() {
        return Optional.ofNullable(this.warmPool);
    }

    private GroupArgs() {}

    private GroupArgs(GroupArgs $) {
        this.availabilityZones = $.availabilityZones;
        this.capacityRebalance = $.capacityRebalance;
        this.context = $.context;
        this.defaultCooldown = $.defaultCooldown;
        this.defaultInstanceWarmup = $.defaultInstanceWarmup;
        this.desiredCapacity = $.desiredCapacity;
        this.desiredCapacityType = $.desiredCapacityType;
        this.enabledMetrics = $.enabledMetrics;
        this.forceDelete = $.forceDelete;
        this.forceDeleteWarmPool = $.forceDeleteWarmPool;
        this.healthCheckGracePeriod = $.healthCheckGracePeriod;
        this.healthCheckType = $.healthCheckType;
        this.initialLifecycleHooks = $.initialLifecycleHooks;
        this.instanceRefresh = $.instanceRefresh;
        this.launchConfiguration = $.launchConfiguration;
        this.launchTemplate = $.launchTemplate;
        this.loadBalancers = $.loadBalancers;
        this.maxInstanceLifetime = $.maxInstanceLifetime;
        this.maxSize = $.maxSize;
        this.metricsGranularity = $.metricsGranularity;
        this.minElbCapacity = $.minElbCapacity;
        this.minSize = $.minSize;
        this.mixedInstancesPolicy = $.mixedInstancesPolicy;
        this.name = $.name;
        this.namePrefix = $.namePrefix;
        this.placementGroup = $.placementGroup;
        this.protectFromScaleIn = $.protectFromScaleIn;
        this.serviceLinkedRoleArn = $.serviceLinkedRoleArn;
        this.suspendedProcesses = $.suspendedProcesses;
        this.tags = $.tags;
        this.tagsCollection = $.tagsCollection;
        this.targetGroupArns = $.targetGroupArns;
        this.terminationPolicies = $.terminationPolicies;
        this.vpcZoneIdentifiers = $.vpcZoneIdentifiers;
        this.waitForCapacityTimeout = $.waitForCapacityTimeout;
        this.waitForElbCapacity = $.waitForElbCapacity;
        this.warmPool = $.warmPool;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GroupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GroupArgs $;

        public Builder() {
            $ = new GroupArgs();
        }

        public Builder(GroupArgs defaults) {
            $ = new GroupArgs(Objects.requireNonNull(defaults));
        }

        public Builder availabilityZones(@Nullable Output<List<String>> availabilityZones) {
            $.availabilityZones = availabilityZones;
            return this;
        }

        public Builder availabilityZones(List<String> availabilityZones) {
            return availabilityZones(Output.of(availabilityZones));
        }

        public Builder availabilityZones(String... availabilityZones) {
            return availabilityZones(List.of(availabilityZones));
        }

        public Builder capacityRebalance(@Nullable Output<Boolean> capacityRebalance) {
            $.capacityRebalance = capacityRebalance;
            return this;
        }

        public Builder capacityRebalance(Boolean capacityRebalance) {
            return capacityRebalance(Output.of(capacityRebalance));
        }

        public Builder context(@Nullable Output<String> context) {
            $.context = context;
            return this;
        }

        public Builder context(String context) {
            return context(Output.of(context));
        }

        public Builder defaultCooldown(@Nullable Output<Integer> defaultCooldown) {
            $.defaultCooldown = defaultCooldown;
            return this;
        }

        public Builder defaultCooldown(Integer defaultCooldown) {
            return defaultCooldown(Output.of(defaultCooldown));
        }

        public Builder defaultInstanceWarmup(@Nullable Output<Integer> defaultInstanceWarmup) {
            $.defaultInstanceWarmup = defaultInstanceWarmup;
            return this;
        }

        public Builder defaultInstanceWarmup(Integer defaultInstanceWarmup) {
            return defaultInstanceWarmup(Output.of(defaultInstanceWarmup));
        }

        public Builder desiredCapacity(@Nullable Output<Integer> desiredCapacity) {
            $.desiredCapacity = desiredCapacity;
            return this;
        }

        public Builder desiredCapacity(Integer desiredCapacity) {
            return desiredCapacity(Output.of(desiredCapacity));
        }

        public Builder desiredCapacityType(@Nullable Output<String> desiredCapacityType) {
            $.desiredCapacityType = desiredCapacityType;
            return this;
        }

        public Builder desiredCapacityType(String desiredCapacityType) {
            return desiredCapacityType(Output.of(desiredCapacityType));
        }

        public Builder enabledMetrics(@Nullable Output<List<String>> enabledMetrics) {
            $.enabledMetrics = enabledMetrics;
            return this;
        }

        public Builder enabledMetrics(List<String> enabledMetrics) {
            return enabledMetrics(Output.of(enabledMetrics));
        }

        public Builder enabledMetrics(String... enabledMetrics) {
            return enabledMetrics(List.of(enabledMetrics));
        }

        public Builder forceDelete(@Nullable Output<Boolean> forceDelete) {
            $.forceDelete = forceDelete;
            return this;
        }

        public Builder forceDelete(Boolean forceDelete) {
            return forceDelete(Output.of(forceDelete));
        }

        public Builder forceDeleteWarmPool(@Nullable Output<Boolean> forceDeleteWarmPool) {
            $.forceDeleteWarmPool = forceDeleteWarmPool;
            return this;
        }

        public Builder forceDeleteWarmPool(Boolean forceDeleteWarmPool) {
            return forceDeleteWarmPool(Output.of(forceDeleteWarmPool));
        }

        public Builder healthCheckGracePeriod(@Nullable Output<Integer> healthCheckGracePeriod) {
            $.healthCheckGracePeriod = healthCheckGracePeriod;
            return this;
        }

        public Builder healthCheckGracePeriod(Integer healthCheckGracePeriod) {
            return healthCheckGracePeriod(Output.of(healthCheckGracePeriod));
        }

        public Builder healthCheckType(@Nullable Output<String> healthCheckType) {
            $.healthCheckType = healthCheckType;
            return this;
        }

        public Builder healthCheckType(String healthCheckType) {
            return healthCheckType(Output.of(healthCheckType));
        }

        public Builder initialLifecycleHooks(@Nullable Output<List<GroupInitialLifecycleHookArgs>> initialLifecycleHooks) {
            $.initialLifecycleHooks = initialLifecycleHooks;
            return this;
        }

        public Builder initialLifecycleHooks(List<GroupInitialLifecycleHookArgs> initialLifecycleHooks) {
            return initialLifecycleHooks(Output.of(initialLifecycleHooks));
        }

        public Builder initialLifecycleHooks(GroupInitialLifecycleHookArgs... initialLifecycleHooks) {
            return initialLifecycleHooks(List.of(initialLifecycleHooks));
        }

        public Builder instanceRefresh(@Nullable Output<GroupInstanceRefreshArgs> instanceRefresh) {
            $.instanceRefresh = instanceRefresh;
            return this;
        }

        public Builder instanceRefresh(GroupInstanceRefreshArgs instanceRefresh) {
            return instanceRefresh(Output.of(instanceRefresh));
        }

        public Builder launchConfiguration(@Nullable Output<String> launchConfiguration) {
            $.launchConfiguration = launchConfiguration;
            return this;
        }

        public Builder launchConfiguration(String launchConfiguration) {
            return launchConfiguration(Output.of(launchConfiguration));
        }

        public Builder launchTemplate(@Nullable Output<GroupLaunchTemplateArgs> launchTemplate) {
            $.launchTemplate = launchTemplate;
            return this;
        }

        public Builder launchTemplate(GroupLaunchTemplateArgs launchTemplate) {
            return launchTemplate(Output.of(launchTemplate));
        }

        public Builder loadBalancers(@Nullable Output<List<String>> loadBalancers) {
            $.loadBalancers = loadBalancers;
            return this;
        }

        public Builder loadBalancers(List<String> loadBalancers) {
            return loadBalancers(Output.of(loadBalancers));
        }

        public Builder loadBalancers(String... loadBalancers) {
            return loadBalancers(List.of(loadBalancers));
        }

        public Builder maxInstanceLifetime(@Nullable Output<Integer> maxInstanceLifetime) {
            $.maxInstanceLifetime = maxInstanceLifetime;
            return this;
        }

        public Builder maxInstanceLifetime(Integer maxInstanceLifetime) {
            return maxInstanceLifetime(Output.of(maxInstanceLifetime));
        }

        public Builder maxSize(Output<Integer> maxSize) {
            $.maxSize = maxSize;
            return this;
        }

        public Builder maxSize(Integer maxSize) {
            return maxSize(Output.of(maxSize));
        }

        public Builder metricsGranularity(@Nullable Output<Either<String,MetricsGranularity>> metricsGranularity) {
            $.metricsGranularity = metricsGranularity;
            return this;
        }

        public Builder metricsGranularity(Either<String,MetricsGranularity> metricsGranularity) {
            return metricsGranularity(Output.of(metricsGranularity));
        }

        public Builder metricsGranularity(String metricsGranularity) {
            return metricsGranularity(Either.ofLeft(metricsGranularity));
        }

        public Builder metricsGranularity(MetricsGranularity metricsGranularity) {
            return metricsGranularity(Either.ofRight(metricsGranularity));
        }

        public Builder minElbCapacity(@Nullable Output<Integer> minElbCapacity) {
            $.minElbCapacity = minElbCapacity;
            return this;
        }

        public Builder minElbCapacity(Integer minElbCapacity) {
            return minElbCapacity(Output.of(minElbCapacity));
        }

        public Builder minSize(Output<Integer> minSize) {
            $.minSize = minSize;
            return this;
        }

        public Builder minSize(Integer minSize) {
            return minSize(Output.of(minSize));
        }

        public Builder mixedInstancesPolicy(@Nullable Output<GroupMixedInstancesPolicyArgs> mixedInstancesPolicy) {
            $.mixedInstancesPolicy = mixedInstancesPolicy;
            return this;
        }

        public Builder mixedInstancesPolicy(GroupMixedInstancesPolicyArgs mixedInstancesPolicy) {
            return mixedInstancesPolicy(Output.of(mixedInstancesPolicy));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder namePrefix(@Nullable Output<String> namePrefix) {
            $.namePrefix = namePrefix;
            return this;
        }

        public Builder namePrefix(String namePrefix) {
            return namePrefix(Output.of(namePrefix));
        }

        public Builder placementGroup(@Nullable Output<String> placementGroup) {
            $.placementGroup = placementGroup;
            return this;
        }

        public Builder placementGroup(String placementGroup) {
            return placementGroup(Output.of(placementGroup));
        }

        public Builder protectFromScaleIn(@Nullable Output<Boolean> protectFromScaleIn) {
            $.protectFromScaleIn = protectFromScaleIn;
            return this;
        }

        public Builder protectFromScaleIn(Boolean protectFromScaleIn) {
            return protectFromScaleIn(Output.of(protectFromScaleIn));
        }

        public Builder serviceLinkedRoleArn(@Nullable Output<String> serviceLinkedRoleArn) {
            $.serviceLinkedRoleArn = serviceLinkedRoleArn;
            return this;
        }

        public Builder serviceLinkedRoleArn(String serviceLinkedRoleArn) {
            return serviceLinkedRoleArn(Output.of(serviceLinkedRoleArn));
        }

        public Builder suspendedProcesses(@Nullable Output<List<String>> suspendedProcesses) {
            $.suspendedProcesses = suspendedProcesses;
            return this;
        }

        public Builder suspendedProcesses(List<String> suspendedProcesses) {
            return suspendedProcesses(Output.of(suspendedProcesses));
        }

        public Builder suspendedProcesses(String... suspendedProcesses) {
            return suspendedProcesses(List.of(suspendedProcesses));
        }

        public Builder tags(@Nullable Output<List<GroupTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(List<GroupTagArgs> tags) {
            return tags(Output.of(tags));
        }

        public Builder tags(GroupTagArgs... tags) {
            return tags(List.of(tags));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * Use tag instead
         * 
         */
        @Deprecated /* Use tag instead */
        public Builder tagsCollection(@Nullable Output<List<Map<String,String>>> tagsCollection) {
            $.tagsCollection = tagsCollection;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * Use tag instead
         * 
         */
        @Deprecated /* Use tag instead */
        public Builder tagsCollection(List<Map<String,String>> tagsCollection) {
            return tagsCollection(Output.of(tagsCollection));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * Use tag instead
         * 
         */
        @Deprecated /* Use tag instead */
        public Builder tagsCollection(Map<String,String>... tagsCollection) {
            return tagsCollection(List.of(tagsCollection));
        }

        public Builder targetGroupArns(@Nullable Output<List<String>> targetGroupArns) {
            $.targetGroupArns = targetGroupArns;
            return this;
        }

        public Builder targetGroupArns(List<String> targetGroupArns) {
            return targetGroupArns(Output.of(targetGroupArns));
        }

        public Builder targetGroupArns(String... targetGroupArns) {
            return targetGroupArns(List.of(targetGroupArns));
        }

        public Builder terminationPolicies(@Nullable Output<List<String>> terminationPolicies) {
            $.terminationPolicies = terminationPolicies;
            return this;
        }

        public Builder terminationPolicies(List<String> terminationPolicies) {
            return terminationPolicies(Output.of(terminationPolicies));
        }

        public Builder terminationPolicies(String... terminationPolicies) {
            return terminationPolicies(List.of(terminationPolicies));
        }

        public Builder vpcZoneIdentifiers(@Nullable Output<List<String>> vpcZoneIdentifiers) {
            $.vpcZoneIdentifiers = vpcZoneIdentifiers;
            return this;
        }

        public Builder vpcZoneIdentifiers(List<String> vpcZoneIdentifiers) {
            return vpcZoneIdentifiers(Output.of(vpcZoneIdentifiers));
        }

        public Builder vpcZoneIdentifiers(String... vpcZoneIdentifiers) {
            return vpcZoneIdentifiers(List.of(vpcZoneIdentifiers));
        }

        public Builder waitForCapacityTimeout(@Nullable Output<String> waitForCapacityTimeout) {
            $.waitForCapacityTimeout = waitForCapacityTimeout;
            return this;
        }

        public Builder waitForCapacityTimeout(String waitForCapacityTimeout) {
            return waitForCapacityTimeout(Output.of(waitForCapacityTimeout));
        }

        public Builder waitForElbCapacity(@Nullable Output<Integer> waitForElbCapacity) {
            $.waitForElbCapacity = waitForElbCapacity;
            return this;
        }

        public Builder waitForElbCapacity(Integer waitForElbCapacity) {
            return waitForElbCapacity(Output.of(waitForElbCapacity));
        }

        public Builder warmPool(@Nullable Output<GroupWarmPoolArgs> warmPool) {
            $.warmPool = warmPool;
            return this;
        }

        public Builder warmPool(GroupWarmPoolArgs warmPool) {
            return warmPool(Output.of(warmPool));
        }

        public GroupArgs build() {
            $.maxSize = Objects.requireNonNull($.maxSize, "expected parameter 'maxSize' to be non-null");
            $.minSize = Objects.requireNonNull($.minSize, "expected parameter 'minSize' to be non-null");
            return $;
        }
    }

}
