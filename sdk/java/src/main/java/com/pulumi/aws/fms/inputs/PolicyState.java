// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.fms.inputs;

import com.pulumi.aws.fms.inputs.PolicyExcludeMapArgs;
import com.pulumi.aws.fms.inputs.PolicyIncludeMapArgs;
import com.pulumi.aws.fms.inputs.PolicySecurityServicePolicyDataArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PolicyState extends com.pulumi.resources.ResourceArgs {

    public static final PolicyState Empty = new PolicyState();

    @Import(name="arn")
    private @Nullable Output<String> arn;

    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    @Import(name="deleteAllPolicyResources")
    private @Nullable Output<Boolean> deleteAllPolicyResources;

    public Optional<Output<Boolean>> deleteAllPolicyResources() {
        return Optional.ofNullable(this.deleteAllPolicyResources);
    }

    @Import(name="deleteUnusedFmManagedResources")
    private @Nullable Output<Boolean> deleteUnusedFmManagedResources;

    public Optional<Output<Boolean>> deleteUnusedFmManagedResources() {
        return Optional.ofNullable(this.deleteUnusedFmManagedResources);
    }

    @Import(name="excludeMap")
    private @Nullable Output<PolicyExcludeMapArgs> excludeMap;

    public Optional<Output<PolicyExcludeMapArgs>> excludeMap() {
        return Optional.ofNullable(this.excludeMap);
    }

    @Import(name="excludeResourceTags")
    private @Nullable Output<Boolean> excludeResourceTags;

    public Optional<Output<Boolean>> excludeResourceTags() {
        return Optional.ofNullable(this.excludeResourceTags);
    }

    @Import(name="includeMap")
    private @Nullable Output<PolicyIncludeMapArgs> includeMap;

    public Optional<Output<PolicyIncludeMapArgs>> includeMap() {
        return Optional.ofNullable(this.includeMap);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="policyUpdateToken")
    private @Nullable Output<String> policyUpdateToken;

    public Optional<Output<String>> policyUpdateToken() {
        return Optional.ofNullable(this.policyUpdateToken);
    }

    @Import(name="remediationEnabled")
    private @Nullable Output<Boolean> remediationEnabled;

    public Optional<Output<Boolean>> remediationEnabled() {
        return Optional.ofNullable(this.remediationEnabled);
    }

    @Import(name="resourceTags")
    private @Nullable Output<Map<String,String>> resourceTags;

    public Optional<Output<Map<String,String>>> resourceTags() {
        return Optional.ofNullable(this.resourceTags);
    }

    @Import(name="resourceType")
    private @Nullable Output<String> resourceType;

    public Optional<Output<String>> resourceType() {
        return Optional.ofNullable(this.resourceType);
    }

    @Import(name="resourceTypeLists")
    private @Nullable Output<List<String>> resourceTypeLists;

    public Optional<Output<List<String>>> resourceTypeLists() {
        return Optional.ofNullable(this.resourceTypeLists);
    }

    @Import(name="securityServicePolicyData")
    private @Nullable Output<PolicySecurityServicePolicyDataArgs> securityServicePolicyData;

    public Optional<Output<PolicySecurityServicePolicyDataArgs>> securityServicePolicyData() {
        return Optional.ofNullable(this.securityServicePolicyData);
    }

    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    private PolicyState() {}

    private PolicyState(PolicyState $) {
        this.arn = $.arn;
        this.deleteAllPolicyResources = $.deleteAllPolicyResources;
        this.deleteUnusedFmManagedResources = $.deleteUnusedFmManagedResources;
        this.excludeMap = $.excludeMap;
        this.excludeResourceTags = $.excludeResourceTags;
        this.includeMap = $.includeMap;
        this.name = $.name;
        this.policyUpdateToken = $.policyUpdateToken;
        this.remediationEnabled = $.remediationEnabled;
        this.resourceTags = $.resourceTags;
        this.resourceType = $.resourceType;
        this.resourceTypeLists = $.resourceTypeLists;
        this.securityServicePolicyData = $.securityServicePolicyData;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PolicyState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PolicyState $;

        public Builder() {
            $ = new PolicyState();
        }

        public Builder(PolicyState defaults) {
            $ = new PolicyState(Objects.requireNonNull(defaults));
        }

        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        public Builder deleteAllPolicyResources(@Nullable Output<Boolean> deleteAllPolicyResources) {
            $.deleteAllPolicyResources = deleteAllPolicyResources;
            return this;
        }

        public Builder deleteAllPolicyResources(Boolean deleteAllPolicyResources) {
            return deleteAllPolicyResources(Output.of(deleteAllPolicyResources));
        }

        public Builder deleteUnusedFmManagedResources(@Nullable Output<Boolean> deleteUnusedFmManagedResources) {
            $.deleteUnusedFmManagedResources = deleteUnusedFmManagedResources;
            return this;
        }

        public Builder deleteUnusedFmManagedResources(Boolean deleteUnusedFmManagedResources) {
            return deleteUnusedFmManagedResources(Output.of(deleteUnusedFmManagedResources));
        }

        public Builder excludeMap(@Nullable Output<PolicyExcludeMapArgs> excludeMap) {
            $.excludeMap = excludeMap;
            return this;
        }

        public Builder excludeMap(PolicyExcludeMapArgs excludeMap) {
            return excludeMap(Output.of(excludeMap));
        }

        public Builder excludeResourceTags(@Nullable Output<Boolean> excludeResourceTags) {
            $.excludeResourceTags = excludeResourceTags;
            return this;
        }

        public Builder excludeResourceTags(Boolean excludeResourceTags) {
            return excludeResourceTags(Output.of(excludeResourceTags));
        }

        public Builder includeMap(@Nullable Output<PolicyIncludeMapArgs> includeMap) {
            $.includeMap = includeMap;
            return this;
        }

        public Builder includeMap(PolicyIncludeMapArgs includeMap) {
            return includeMap(Output.of(includeMap));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder policyUpdateToken(@Nullable Output<String> policyUpdateToken) {
            $.policyUpdateToken = policyUpdateToken;
            return this;
        }

        public Builder policyUpdateToken(String policyUpdateToken) {
            return policyUpdateToken(Output.of(policyUpdateToken));
        }

        public Builder remediationEnabled(@Nullable Output<Boolean> remediationEnabled) {
            $.remediationEnabled = remediationEnabled;
            return this;
        }

        public Builder remediationEnabled(Boolean remediationEnabled) {
            return remediationEnabled(Output.of(remediationEnabled));
        }

        public Builder resourceTags(@Nullable Output<Map<String,String>> resourceTags) {
            $.resourceTags = resourceTags;
            return this;
        }

        public Builder resourceTags(Map<String,String> resourceTags) {
            return resourceTags(Output.of(resourceTags));
        }

        public Builder resourceType(@Nullable Output<String> resourceType) {
            $.resourceType = resourceType;
            return this;
        }

        public Builder resourceType(String resourceType) {
            return resourceType(Output.of(resourceType));
        }

        public Builder resourceTypeLists(@Nullable Output<List<String>> resourceTypeLists) {
            $.resourceTypeLists = resourceTypeLists;
            return this;
        }

        public Builder resourceTypeLists(List<String> resourceTypeLists) {
            return resourceTypeLists(Output.of(resourceTypeLists));
        }

        public Builder resourceTypeLists(String... resourceTypeLists) {
            return resourceTypeLists(List.of(resourceTypeLists));
        }

        public Builder securityServicePolicyData(@Nullable Output<PolicySecurityServicePolicyDataArgs> securityServicePolicyData) {
            $.securityServicePolicyData = securityServicePolicyData;
            return this;
        }

        public Builder securityServicePolicyData(PolicySecurityServicePolicyDataArgs securityServicePolicyData) {
            return securityServicePolicyData(Output.of(securityServicePolicyData));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        public PolicyState build() {
            return $;
        }
    }

}
