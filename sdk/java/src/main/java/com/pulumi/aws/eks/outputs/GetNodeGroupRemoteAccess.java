// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.eks.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetNodeGroupRemoteAccess {
    /**
     * @return EC2 Key Pair name that provides access for SSH communication with the worker nodes in the EKS Node Group.
     * 
     */
    private String ec2SshKey;
    /**
     * @return Set of EC2 Security Group IDs to allow SSH access (port 22) from on the worker nodes.
     * 
     */
    private List<String> sourceSecurityGroupIds;

    private GetNodeGroupRemoteAccess() {}
    /**
     * @return EC2 Key Pair name that provides access for SSH communication with the worker nodes in the EKS Node Group.
     * 
     */
    public String ec2SshKey() {
        return this.ec2SshKey;
    }
    /**
     * @return Set of EC2 Security Group IDs to allow SSH access (port 22) from on the worker nodes.
     * 
     */
    public List<String> sourceSecurityGroupIds() {
        return this.sourceSecurityGroupIds;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNodeGroupRemoteAccess defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String ec2SshKey;
        private List<String> sourceSecurityGroupIds;
        public Builder() {}
        public Builder(GetNodeGroupRemoteAccess defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ec2SshKey = defaults.ec2SshKey;
    	      this.sourceSecurityGroupIds = defaults.sourceSecurityGroupIds;
        }

        @CustomType.Setter
        public Builder ec2SshKey(String ec2SshKey) {
            if (ec2SshKey == null) {
              throw new MissingRequiredPropertyException("GetNodeGroupRemoteAccess", "ec2SshKey");
            }
            this.ec2SshKey = ec2SshKey;
            return this;
        }
        @CustomType.Setter
        public Builder sourceSecurityGroupIds(List<String> sourceSecurityGroupIds) {
            if (sourceSecurityGroupIds == null) {
              throw new MissingRequiredPropertyException("GetNodeGroupRemoteAccess", "sourceSecurityGroupIds");
            }
            this.sourceSecurityGroupIds = sourceSecurityGroupIds;
            return this;
        }
        public Builder sourceSecurityGroupIds(String... sourceSecurityGroupIds) {
            return sourceSecurityGroupIds(List.of(sourceSecurityGroupIds));
        }
        public GetNodeGroupRemoteAccess build() {
            final var _resultValue = new GetNodeGroupRemoteAccess();
            _resultValue.ec2SshKey = ec2SshKey;
            _resultValue.sourceSecurityGroupIds = sourceSecurityGroupIds;
            return _resultValue;
        }
    }
}
