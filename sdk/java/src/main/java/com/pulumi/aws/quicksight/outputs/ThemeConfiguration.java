// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.outputs;

import com.pulumi.aws.quicksight.outputs.ThemeConfigurationDataColorPalette;
import com.pulumi.aws.quicksight.outputs.ThemeConfigurationSheet;
import com.pulumi.aws.quicksight.outputs.ThemeConfigurationTypography;
import com.pulumi.aws.quicksight.outputs.ThemeConfigurationUiColorPalette;
import com.pulumi.core.annotations.CustomType;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ThemeConfiguration {
    /**
     * @return Color properties that apply to chart data colors. See data_color_palette.
     * 
     */
    private @Nullable ThemeConfigurationDataColorPalette dataColorPalette;
    /**
     * @return Display options related to sheets. See sheet.
     * 
     */
    private @Nullable ThemeConfigurationSheet sheet;
    /**
     * @return Determines the typography options. See typography.
     * 
     */
    private @Nullable ThemeConfigurationTypography typography;
    /**
     * @return Color properties that apply to the UI and to charts, excluding the colors that apply to data. See ui_color_palette.
     * 
     */
    private @Nullable ThemeConfigurationUiColorPalette uiColorPalette;

    private ThemeConfiguration() {}
    /**
     * @return Color properties that apply to chart data colors. See data_color_palette.
     * 
     */
    public Optional<ThemeConfigurationDataColorPalette> dataColorPalette() {
        return Optional.ofNullable(this.dataColorPalette);
    }
    /**
     * @return Display options related to sheets. See sheet.
     * 
     */
    public Optional<ThemeConfigurationSheet> sheet() {
        return Optional.ofNullable(this.sheet);
    }
    /**
     * @return Determines the typography options. See typography.
     * 
     */
    public Optional<ThemeConfigurationTypography> typography() {
        return Optional.ofNullable(this.typography);
    }
    /**
     * @return Color properties that apply to the UI and to charts, excluding the colors that apply to data. See ui_color_palette.
     * 
     */
    public Optional<ThemeConfigurationUiColorPalette> uiColorPalette() {
        return Optional.ofNullable(this.uiColorPalette);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ThemeConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable ThemeConfigurationDataColorPalette dataColorPalette;
        private @Nullable ThemeConfigurationSheet sheet;
        private @Nullable ThemeConfigurationTypography typography;
        private @Nullable ThemeConfigurationUiColorPalette uiColorPalette;
        public Builder() {}
        public Builder(ThemeConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dataColorPalette = defaults.dataColorPalette;
    	      this.sheet = defaults.sheet;
    	      this.typography = defaults.typography;
    	      this.uiColorPalette = defaults.uiColorPalette;
        }

        @CustomType.Setter
        public Builder dataColorPalette(@Nullable ThemeConfigurationDataColorPalette dataColorPalette) {

            this.dataColorPalette = dataColorPalette;
            return this;
        }
        @CustomType.Setter
        public Builder sheet(@Nullable ThemeConfigurationSheet sheet) {

            this.sheet = sheet;
            return this;
        }
        @CustomType.Setter
        public Builder typography(@Nullable ThemeConfigurationTypography typography) {

            this.typography = typography;
            return this;
        }
        @CustomType.Setter
        public Builder uiColorPalette(@Nullable ThemeConfigurationUiColorPalette uiColorPalette) {

            this.uiColorPalette = uiColorPalette;
            return this;
        }
        public ThemeConfiguration build() {
            final var _resultValue = new ThemeConfiguration();
            _resultValue.dataColorPalette = dataColorPalette;
            _resultValue.sheet = sheet;
            _resultValue.typography = typography;
            _resultValue.uiColorPalette = uiColorPalette;
            return _resultValue;
        }
    }
}
