// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.outputs;

import com.pulumi.aws.quicksight.outputs.DataSetLogicalTableMapDataTransformCastColumnTypeOperation;
import com.pulumi.aws.quicksight.outputs.DataSetLogicalTableMapDataTransformCreateColumnsOperation;
import com.pulumi.aws.quicksight.outputs.DataSetLogicalTableMapDataTransformFilterOperation;
import com.pulumi.aws.quicksight.outputs.DataSetLogicalTableMapDataTransformProjectOperation;
import com.pulumi.aws.quicksight.outputs.DataSetLogicalTableMapDataTransformRenameColumnOperation;
import com.pulumi.aws.quicksight.outputs.DataSetLogicalTableMapDataTransformTagColumnOperation;
import com.pulumi.aws.quicksight.outputs.DataSetLogicalTableMapDataTransformUntagColumnOperation;
import com.pulumi.core.annotations.CustomType;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DataSetLogicalTableMapDataTransform {
    /**
     * @return A transform operation that casts a column to a different type. See cast_column_type_operation.
     * 
     */
    private @Nullable DataSetLogicalTableMapDataTransformCastColumnTypeOperation castColumnTypeOperation;
    /**
     * @return An operation that creates calculated columns. Columns created in one such operation form a lexical closure. See create_columns_operation.
     * 
     */
    private @Nullable DataSetLogicalTableMapDataTransformCreateColumnsOperation createColumnsOperation;
    /**
     * @return An operation that filters rows based on some condition. See filter_operation.
     * 
     */
    private @Nullable DataSetLogicalTableMapDataTransformFilterOperation filterOperation;
    /**
     * @return An operation that projects columns. Operations that come after a projection can only refer to projected columns. See project_operation.
     * 
     */
    private @Nullable DataSetLogicalTableMapDataTransformProjectOperation projectOperation;
    /**
     * @return An operation that renames a column. See rename_column_operation.
     * 
     */
    private @Nullable DataSetLogicalTableMapDataTransformRenameColumnOperation renameColumnOperation;
    /**
     * @return An operation that tags a column with additional information. See tag_column_operation.
     * 
     */
    private @Nullable DataSetLogicalTableMapDataTransformTagColumnOperation tagColumnOperation;
    /**
     * @return A transform operation that removes tags associated with a column. See untag_column_operation.
     * 
     */
    private @Nullable DataSetLogicalTableMapDataTransformUntagColumnOperation untagColumnOperation;

    private DataSetLogicalTableMapDataTransform() {}
    /**
     * @return A transform operation that casts a column to a different type. See cast_column_type_operation.
     * 
     */
    public Optional<DataSetLogicalTableMapDataTransformCastColumnTypeOperation> castColumnTypeOperation() {
        return Optional.ofNullable(this.castColumnTypeOperation);
    }
    /**
     * @return An operation that creates calculated columns. Columns created in one such operation form a lexical closure. See create_columns_operation.
     * 
     */
    public Optional<DataSetLogicalTableMapDataTransformCreateColumnsOperation> createColumnsOperation() {
        return Optional.ofNullable(this.createColumnsOperation);
    }
    /**
     * @return An operation that filters rows based on some condition. See filter_operation.
     * 
     */
    public Optional<DataSetLogicalTableMapDataTransformFilterOperation> filterOperation() {
        return Optional.ofNullable(this.filterOperation);
    }
    /**
     * @return An operation that projects columns. Operations that come after a projection can only refer to projected columns. See project_operation.
     * 
     */
    public Optional<DataSetLogicalTableMapDataTransformProjectOperation> projectOperation() {
        return Optional.ofNullable(this.projectOperation);
    }
    /**
     * @return An operation that renames a column. See rename_column_operation.
     * 
     */
    public Optional<DataSetLogicalTableMapDataTransformRenameColumnOperation> renameColumnOperation() {
        return Optional.ofNullable(this.renameColumnOperation);
    }
    /**
     * @return An operation that tags a column with additional information. See tag_column_operation.
     * 
     */
    public Optional<DataSetLogicalTableMapDataTransformTagColumnOperation> tagColumnOperation() {
        return Optional.ofNullable(this.tagColumnOperation);
    }
    /**
     * @return A transform operation that removes tags associated with a column. See untag_column_operation.
     * 
     */
    public Optional<DataSetLogicalTableMapDataTransformUntagColumnOperation> untagColumnOperation() {
        return Optional.ofNullable(this.untagColumnOperation);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DataSetLogicalTableMapDataTransform defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable DataSetLogicalTableMapDataTransformCastColumnTypeOperation castColumnTypeOperation;
        private @Nullable DataSetLogicalTableMapDataTransformCreateColumnsOperation createColumnsOperation;
        private @Nullable DataSetLogicalTableMapDataTransformFilterOperation filterOperation;
        private @Nullable DataSetLogicalTableMapDataTransformProjectOperation projectOperation;
        private @Nullable DataSetLogicalTableMapDataTransformRenameColumnOperation renameColumnOperation;
        private @Nullable DataSetLogicalTableMapDataTransformTagColumnOperation tagColumnOperation;
        private @Nullable DataSetLogicalTableMapDataTransformUntagColumnOperation untagColumnOperation;
        public Builder() {}
        public Builder(DataSetLogicalTableMapDataTransform defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.castColumnTypeOperation = defaults.castColumnTypeOperation;
    	      this.createColumnsOperation = defaults.createColumnsOperation;
    	      this.filterOperation = defaults.filterOperation;
    	      this.projectOperation = defaults.projectOperation;
    	      this.renameColumnOperation = defaults.renameColumnOperation;
    	      this.tagColumnOperation = defaults.tagColumnOperation;
    	      this.untagColumnOperation = defaults.untagColumnOperation;
        }

        @CustomType.Setter
        public Builder castColumnTypeOperation(@Nullable DataSetLogicalTableMapDataTransformCastColumnTypeOperation castColumnTypeOperation) {
            this.castColumnTypeOperation = castColumnTypeOperation;
            return this;
        }
        @CustomType.Setter
        public Builder createColumnsOperation(@Nullable DataSetLogicalTableMapDataTransformCreateColumnsOperation createColumnsOperation) {
            this.createColumnsOperation = createColumnsOperation;
            return this;
        }
        @CustomType.Setter
        public Builder filterOperation(@Nullable DataSetLogicalTableMapDataTransformFilterOperation filterOperation) {
            this.filterOperation = filterOperation;
            return this;
        }
        @CustomType.Setter
        public Builder projectOperation(@Nullable DataSetLogicalTableMapDataTransformProjectOperation projectOperation) {
            this.projectOperation = projectOperation;
            return this;
        }
        @CustomType.Setter
        public Builder renameColumnOperation(@Nullable DataSetLogicalTableMapDataTransformRenameColumnOperation renameColumnOperation) {
            this.renameColumnOperation = renameColumnOperation;
            return this;
        }
        @CustomType.Setter
        public Builder tagColumnOperation(@Nullable DataSetLogicalTableMapDataTransformTagColumnOperation tagColumnOperation) {
            this.tagColumnOperation = tagColumnOperation;
            return this;
        }
        @CustomType.Setter
        public Builder untagColumnOperation(@Nullable DataSetLogicalTableMapDataTransformUntagColumnOperation untagColumnOperation) {
            this.untagColumnOperation = untagColumnOperation;
            return this;
        }
        public DataSetLogicalTableMapDataTransform build() {
            final var _resultValue = new DataSetLogicalTableMapDataTransform();
            _resultValue.castColumnTypeOperation = castColumnTypeOperation;
            _resultValue.createColumnsOperation = createColumnsOperation;
            _resultValue.filterOperation = filterOperation;
            _resultValue.projectOperation = projectOperation;
            _resultValue.renameColumnOperation = renameColumnOperation;
            _resultValue.tagColumnOperation = tagColumnOperation;
            _resultValue.untagColumnOperation = untagColumnOperation;
            return _resultValue;
        }
    }
}
