// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.m2;

import com.pulumi.aws.m2.inputs.DeploymentTimeoutsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DeploymentArgs extends com.pulumi.resources.ResourceArgs {

    public static final DeploymentArgs Empty = new DeploymentArgs();

    /**
     * Application to deploy.
     * 
     */
    @Import(name="applicationId", required=true)
    private Output<String> applicationId;

    /**
     * @return Application to deploy.
     * 
     */
    public Output<String> applicationId() {
        return this.applicationId;
    }

    /**
     * Version to application to deploy
     * 
     */
    @Import(name="applicationVersion", required=true)
    private Output<Integer> applicationVersion;

    /**
     * @return Version to application to deploy
     * 
     */
    public Output<Integer> applicationVersion() {
        return this.applicationVersion;
    }

    /**
     * Environment to deploy application to.
     * 
     */
    @Import(name="environmentId", required=true)
    private Output<String> environmentId;

    /**
     * @return Environment to deploy application to.
     * 
     */
    public Output<String> environmentId() {
        return this.environmentId;
    }

    @Import(name="forceStop")
    private @Nullable Output<Boolean> forceStop;

    public Optional<Output<Boolean>> forceStop() {
        return Optional.ofNullable(this.forceStop);
    }

    /**
     * Start the application once deployed.
     * 
     */
    @Import(name="start", required=true)
    private Output<Boolean> start;

    /**
     * @return Start the application once deployed.
     * 
     */
    public Output<Boolean> start() {
        return this.start;
    }

    @Import(name="timeouts")
    private @Nullable Output<DeploymentTimeoutsArgs> timeouts;

    public Optional<Output<DeploymentTimeoutsArgs>> timeouts() {
        return Optional.ofNullable(this.timeouts);
    }

    private DeploymentArgs() {}

    private DeploymentArgs(DeploymentArgs $) {
        this.applicationId = $.applicationId;
        this.applicationVersion = $.applicationVersion;
        this.environmentId = $.environmentId;
        this.forceStop = $.forceStop;
        this.start = $.start;
        this.timeouts = $.timeouts;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DeploymentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DeploymentArgs $;

        public Builder() {
            $ = new DeploymentArgs();
        }

        public Builder(DeploymentArgs defaults) {
            $ = new DeploymentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param applicationId Application to deploy.
         * 
         * @return builder
         * 
         */
        public Builder applicationId(Output<String> applicationId) {
            $.applicationId = applicationId;
            return this;
        }

        /**
         * @param applicationId Application to deploy.
         * 
         * @return builder
         * 
         */
        public Builder applicationId(String applicationId) {
            return applicationId(Output.of(applicationId));
        }

        /**
         * @param applicationVersion Version to application to deploy
         * 
         * @return builder
         * 
         */
        public Builder applicationVersion(Output<Integer> applicationVersion) {
            $.applicationVersion = applicationVersion;
            return this;
        }

        /**
         * @param applicationVersion Version to application to deploy
         * 
         * @return builder
         * 
         */
        public Builder applicationVersion(Integer applicationVersion) {
            return applicationVersion(Output.of(applicationVersion));
        }

        /**
         * @param environmentId Environment to deploy application to.
         * 
         * @return builder
         * 
         */
        public Builder environmentId(Output<String> environmentId) {
            $.environmentId = environmentId;
            return this;
        }

        /**
         * @param environmentId Environment to deploy application to.
         * 
         * @return builder
         * 
         */
        public Builder environmentId(String environmentId) {
            return environmentId(Output.of(environmentId));
        }

        public Builder forceStop(@Nullable Output<Boolean> forceStop) {
            $.forceStop = forceStop;
            return this;
        }

        public Builder forceStop(Boolean forceStop) {
            return forceStop(Output.of(forceStop));
        }

        /**
         * @param start Start the application once deployed.
         * 
         * @return builder
         * 
         */
        public Builder start(Output<Boolean> start) {
            $.start = start;
            return this;
        }

        /**
         * @param start Start the application once deployed.
         * 
         * @return builder
         * 
         */
        public Builder start(Boolean start) {
            return start(Output.of(start));
        }

        public Builder timeouts(@Nullable Output<DeploymentTimeoutsArgs> timeouts) {
            $.timeouts = timeouts;
            return this;
        }

        public Builder timeouts(DeploymentTimeoutsArgs timeouts) {
            return timeouts(Output.of(timeouts));
        }

        public DeploymentArgs build() {
            if ($.applicationId == null) {
                throw new MissingRequiredPropertyException("DeploymentArgs", "applicationId");
            }
            if ($.applicationVersion == null) {
                throw new MissingRequiredPropertyException("DeploymentArgs", "applicationVersion");
            }
            if ($.environmentId == null) {
                throw new MissingRequiredPropertyException("DeploymentArgs", "environmentId");
            }
            if ($.start == null) {
                throw new MissingRequiredPropertyException("DeploymentArgs", "start");
            }
            return $;
        }
    }

}
