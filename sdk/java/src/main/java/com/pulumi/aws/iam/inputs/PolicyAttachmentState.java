// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.iam.inputs;

import com.pulumi.aws.iam.Group;
import com.pulumi.aws.iam.Role;
import com.pulumi.aws.iam.User;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PolicyAttachmentState extends com.pulumi.resources.ResourceArgs {

    public static final PolicyAttachmentState Empty = new PolicyAttachmentState();

    /**
     * Group(s) the policy should be applied to.
     * 
     */
    @Import(name="groups")
    private @Nullable Output<List<Either<String,Group>>> groups;

    /**
     * @return Group(s) the policy should be applied to.
     * 
     */
    public Optional<Output<List<Either<String,Group>>>> groups() {
        return Optional.ofNullable(this.groups);
    }

    /**
     * Name of the attachment. This cannot be an empty string.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the attachment. This cannot be an empty string.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * ARN of the policy you want to apply. Typically this should be a reference to the ARN of another resource to ensure dependency ordering, such as `aws_iam_policy.example.arn`.
     * 
     */
    @Import(name="policyArn")
    private @Nullable Output<String> policyArn;

    /**
     * @return ARN of the policy you want to apply. Typically this should be a reference to the ARN of another resource to ensure dependency ordering, such as `aws_iam_policy.example.arn`.
     * 
     */
    public Optional<Output<String>> policyArn() {
        return Optional.ofNullable(this.policyArn);
    }

    /**
     * Role(s) the policy should be applied to.
     * 
     */
    @Import(name="roles")
    private @Nullable Output<List<Either<String,Role>>> roles;

    /**
     * @return Role(s) the policy should be applied to.
     * 
     */
    public Optional<Output<List<Either<String,Role>>>> roles() {
        return Optional.ofNullable(this.roles);
    }

    /**
     * User(s) the policy should be applied to.
     * 
     */
    @Import(name="users")
    private @Nullable Output<List<Either<String,User>>> users;

    /**
     * @return User(s) the policy should be applied to.
     * 
     */
    public Optional<Output<List<Either<String,User>>>> users() {
        return Optional.ofNullable(this.users);
    }

    private PolicyAttachmentState() {}

    private PolicyAttachmentState(PolicyAttachmentState $) {
        this.groups = $.groups;
        this.name = $.name;
        this.policyArn = $.policyArn;
        this.roles = $.roles;
        this.users = $.users;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PolicyAttachmentState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PolicyAttachmentState $;

        public Builder() {
            $ = new PolicyAttachmentState();
        }

        public Builder(PolicyAttachmentState defaults) {
            $ = new PolicyAttachmentState(Objects.requireNonNull(defaults));
        }

        /**
         * @param groups Group(s) the policy should be applied to.
         * 
         * @return builder
         * 
         */
        public Builder groups(@Nullable Output<List<Either<String,Group>>> groups) {
            $.groups = groups;
            return this;
        }

        /**
         * @param groups Group(s) the policy should be applied to.
         * 
         * @return builder
         * 
         */
        public Builder groups(List<Either<String,Group>> groups) {
            return groups(Output.of(groups));
        }

        /**
         * @param groups Group(s) the policy should be applied to.
         * 
         * @return builder
         * 
         */
        public Builder groups(Either<String,Group>... groups) {
            return groups(List.of(groups));
        }

        /**
         * @param name Name of the attachment. This cannot be an empty string.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the attachment. This cannot be an empty string.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param policyArn ARN of the policy you want to apply. Typically this should be a reference to the ARN of another resource to ensure dependency ordering, such as `aws_iam_policy.example.arn`.
         * 
         * @return builder
         * 
         */
        public Builder policyArn(@Nullable Output<String> policyArn) {
            $.policyArn = policyArn;
            return this;
        }

        /**
         * @param policyArn ARN of the policy you want to apply. Typically this should be a reference to the ARN of another resource to ensure dependency ordering, such as `aws_iam_policy.example.arn`.
         * 
         * @return builder
         * 
         */
        public Builder policyArn(String policyArn) {
            return policyArn(Output.of(policyArn));
        }

        /**
         * @param roles Role(s) the policy should be applied to.
         * 
         * @return builder
         * 
         */
        public Builder roles(@Nullable Output<List<Either<String,Role>>> roles) {
            $.roles = roles;
            return this;
        }

        /**
         * @param roles Role(s) the policy should be applied to.
         * 
         * @return builder
         * 
         */
        public Builder roles(List<Either<String,Role>> roles) {
            return roles(Output.of(roles));
        }

        /**
         * @param roles Role(s) the policy should be applied to.
         * 
         * @return builder
         * 
         */
        public Builder roles(Either<String,Role>... roles) {
            return roles(List.of(roles));
        }

        /**
         * @param users User(s) the policy should be applied to.
         * 
         * @return builder
         * 
         */
        public Builder users(@Nullable Output<List<Either<String,User>>> users) {
            $.users = users;
            return this;
        }

        /**
         * @param users User(s) the policy should be applied to.
         * 
         * @return builder
         * 
         */
        public Builder users(List<Either<String,User>> users) {
            return users(Output.of(users));
        }

        /**
         * @param users User(s) the policy should be applied to.
         * 
         * @return builder
         * 
         */
        public Builder users(Either<String,User>... users) {
            return users(List.of(users));
        }

        public PolicyAttachmentState build() {
            return $;
        }
    }

}
