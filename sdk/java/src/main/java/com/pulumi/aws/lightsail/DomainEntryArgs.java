// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.lightsail;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DomainEntryArgs extends com.pulumi.resources.ResourceArgs {

    public static final DomainEntryArgs Empty = new DomainEntryArgs();

    @Import(name="domainName", required=true)
    private Output<String> domainName;

    public Output<String> domainName() {
        return this.domainName;
    }

    @Import(name="isAlias")
    private @Nullable Output<Boolean> isAlias;

    public Optional<Output<Boolean>> isAlias() {
        return Optional.ofNullable(this.isAlias);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="target", required=true)
    private Output<String> target;

    public Output<String> target() {
        return this.target;
    }

    @Import(name="type", required=true)
    private Output<String> type;

    public Output<String> type() {
        return this.type;
    }

    private DomainEntryArgs() {}

    private DomainEntryArgs(DomainEntryArgs $) {
        this.domainName = $.domainName;
        this.isAlias = $.isAlias;
        this.name = $.name;
        this.target = $.target;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DomainEntryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DomainEntryArgs $;

        public Builder() {
            $ = new DomainEntryArgs();
        }

        public Builder(DomainEntryArgs defaults) {
            $ = new DomainEntryArgs(Objects.requireNonNull(defaults));
        }

        public Builder domainName(Output<String> domainName) {
            $.domainName = domainName;
            return this;
        }

        public Builder domainName(String domainName) {
            return domainName(Output.of(domainName));
        }

        public Builder isAlias(@Nullable Output<Boolean> isAlias) {
            $.isAlias = isAlias;
            return this;
        }

        public Builder isAlias(Boolean isAlias) {
            return isAlias(Output.of(isAlias));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder target(Output<String> target) {
            $.target = target;
            return this;
        }

        public Builder target(String target) {
            return target(Output.of(target));
        }

        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        public Builder type(String type) {
            return type(Output.of(type));
        }

        public DomainEntryArgs build() {
            $.domainName = Objects.requireNonNull($.domainName, "expected parameter 'domainName' to be non-null");
            $.target = Objects.requireNonNull($.target, "expected parameter 'target' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
