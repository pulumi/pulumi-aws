// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.wafv2.inputs;

import com.pulumi.aws.wafv2.inputs.WebAclRuleStatementRuleGroupReferenceStatementRuleActionOverrideActionToUseAllowArgs;
import com.pulumi.aws.wafv2.inputs.WebAclRuleStatementRuleGroupReferenceStatementRuleActionOverrideActionToUseBlockArgs;
import com.pulumi.aws.wafv2.inputs.WebAclRuleStatementRuleGroupReferenceStatementRuleActionOverrideActionToUseCaptchaArgs;
import com.pulumi.aws.wafv2.inputs.WebAclRuleStatementRuleGroupReferenceStatementRuleActionOverrideActionToUseChallengeArgs;
import com.pulumi.aws.wafv2.inputs.WebAclRuleStatementRuleGroupReferenceStatementRuleActionOverrideActionToUseCountArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WebAclRuleStatementRuleGroupReferenceStatementRuleActionOverrideActionToUseArgs extends com.pulumi.resources.ResourceArgs {

    public static final WebAclRuleStatementRuleGroupReferenceStatementRuleActionOverrideActionToUseArgs Empty = new WebAclRuleStatementRuleGroupReferenceStatementRuleActionOverrideActionToUseArgs();

    @Import(name="allow")
    private @Nullable Output<WebAclRuleStatementRuleGroupReferenceStatementRuleActionOverrideActionToUseAllowArgs> allow;

    public Optional<Output<WebAclRuleStatementRuleGroupReferenceStatementRuleActionOverrideActionToUseAllowArgs>> allow() {
        return Optional.ofNullable(this.allow);
    }

    @Import(name="block")
    private @Nullable Output<WebAclRuleStatementRuleGroupReferenceStatementRuleActionOverrideActionToUseBlockArgs> block;

    public Optional<Output<WebAclRuleStatementRuleGroupReferenceStatementRuleActionOverrideActionToUseBlockArgs>> block() {
        return Optional.ofNullable(this.block);
    }

    @Import(name="captcha")
    private @Nullable Output<WebAclRuleStatementRuleGroupReferenceStatementRuleActionOverrideActionToUseCaptchaArgs> captcha;

    public Optional<Output<WebAclRuleStatementRuleGroupReferenceStatementRuleActionOverrideActionToUseCaptchaArgs>> captcha() {
        return Optional.ofNullable(this.captcha);
    }

    @Import(name="challenge")
    private @Nullable Output<WebAclRuleStatementRuleGroupReferenceStatementRuleActionOverrideActionToUseChallengeArgs> challenge;

    public Optional<Output<WebAclRuleStatementRuleGroupReferenceStatementRuleActionOverrideActionToUseChallengeArgs>> challenge() {
        return Optional.ofNullable(this.challenge);
    }

    @Import(name="count")
    private @Nullable Output<WebAclRuleStatementRuleGroupReferenceStatementRuleActionOverrideActionToUseCountArgs> count;

    public Optional<Output<WebAclRuleStatementRuleGroupReferenceStatementRuleActionOverrideActionToUseCountArgs>> count() {
        return Optional.ofNullable(this.count);
    }

    private WebAclRuleStatementRuleGroupReferenceStatementRuleActionOverrideActionToUseArgs() {}

    private WebAclRuleStatementRuleGroupReferenceStatementRuleActionOverrideActionToUseArgs(WebAclRuleStatementRuleGroupReferenceStatementRuleActionOverrideActionToUseArgs $) {
        this.allow = $.allow;
        this.block = $.block;
        this.captcha = $.captcha;
        this.challenge = $.challenge;
        this.count = $.count;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WebAclRuleStatementRuleGroupReferenceStatementRuleActionOverrideActionToUseArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WebAclRuleStatementRuleGroupReferenceStatementRuleActionOverrideActionToUseArgs $;

        public Builder() {
            $ = new WebAclRuleStatementRuleGroupReferenceStatementRuleActionOverrideActionToUseArgs();
        }

        public Builder(WebAclRuleStatementRuleGroupReferenceStatementRuleActionOverrideActionToUseArgs defaults) {
            $ = new WebAclRuleStatementRuleGroupReferenceStatementRuleActionOverrideActionToUseArgs(Objects.requireNonNull(defaults));
        }

        public Builder allow(@Nullable Output<WebAclRuleStatementRuleGroupReferenceStatementRuleActionOverrideActionToUseAllowArgs> allow) {
            $.allow = allow;
            return this;
        }

        public Builder allow(WebAclRuleStatementRuleGroupReferenceStatementRuleActionOverrideActionToUseAllowArgs allow) {
            return allow(Output.of(allow));
        }

        public Builder block(@Nullable Output<WebAclRuleStatementRuleGroupReferenceStatementRuleActionOverrideActionToUseBlockArgs> block) {
            $.block = block;
            return this;
        }

        public Builder block(WebAclRuleStatementRuleGroupReferenceStatementRuleActionOverrideActionToUseBlockArgs block) {
            return block(Output.of(block));
        }

        public Builder captcha(@Nullable Output<WebAclRuleStatementRuleGroupReferenceStatementRuleActionOverrideActionToUseCaptchaArgs> captcha) {
            $.captcha = captcha;
            return this;
        }

        public Builder captcha(WebAclRuleStatementRuleGroupReferenceStatementRuleActionOverrideActionToUseCaptchaArgs captcha) {
            return captcha(Output.of(captcha));
        }

        public Builder challenge(@Nullable Output<WebAclRuleStatementRuleGroupReferenceStatementRuleActionOverrideActionToUseChallengeArgs> challenge) {
            $.challenge = challenge;
            return this;
        }

        public Builder challenge(WebAclRuleStatementRuleGroupReferenceStatementRuleActionOverrideActionToUseChallengeArgs challenge) {
            return challenge(Output.of(challenge));
        }

        public Builder count(@Nullable Output<WebAclRuleStatementRuleGroupReferenceStatementRuleActionOverrideActionToUseCountArgs> count) {
            $.count = count;
            return this;
        }

        public Builder count(WebAclRuleStatementRuleGroupReferenceStatementRuleActionOverrideActionToUseCountArgs count) {
            return count(Output.of(count));
        }

        public WebAclRuleStatementRuleGroupReferenceStatementRuleActionOverrideActionToUseArgs build() {
            return $;
        }
    }

}
