// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.appflow;

import com.pulumi.aws.appflow.inputs.FlowDestinationFlowConfigArgs;
import com.pulumi.aws.appflow.inputs.FlowSourceFlowConfigArgs;
import com.pulumi.aws.appflow.inputs.FlowTaskArgs;
import com.pulumi.aws.appflow.inputs.FlowTriggerConfigArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FlowArgs extends com.pulumi.resources.ResourceArgs {

    public static final FlowArgs Empty = new FlowArgs();

    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="destinationFlowConfigs", required=true)
    private Output<List<FlowDestinationFlowConfigArgs>> destinationFlowConfigs;

    public Output<List<FlowDestinationFlowConfigArgs>> destinationFlowConfigs() {
        return this.destinationFlowConfigs;
    }

    @Import(name="kmsArn")
    private @Nullable Output<String> kmsArn;

    public Optional<Output<String>> kmsArn() {
        return Optional.ofNullable(this.kmsArn);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="sourceFlowConfig", required=true)
    private Output<FlowSourceFlowConfigArgs> sourceFlowConfig;

    public Output<FlowSourceFlowConfigArgs> sourceFlowConfig() {
        return this.sourceFlowConfig;
    }

    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="tasks", required=true)
    private Output<List<FlowTaskArgs>> tasks;

    public Output<List<FlowTaskArgs>> tasks() {
        return this.tasks;
    }

    @Import(name="triggerConfig", required=true)
    private Output<FlowTriggerConfigArgs> triggerConfig;

    public Output<FlowTriggerConfigArgs> triggerConfig() {
        return this.triggerConfig;
    }

    private FlowArgs() {}

    private FlowArgs(FlowArgs $) {
        this.description = $.description;
        this.destinationFlowConfigs = $.destinationFlowConfigs;
        this.kmsArn = $.kmsArn;
        this.name = $.name;
        this.sourceFlowConfig = $.sourceFlowConfig;
        this.tags = $.tags;
        this.tasks = $.tasks;
        this.triggerConfig = $.triggerConfig;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FlowArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FlowArgs $;

        public Builder() {
            $ = new FlowArgs();
        }

        public Builder(FlowArgs defaults) {
            $ = new FlowArgs(Objects.requireNonNull(defaults));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder destinationFlowConfigs(Output<List<FlowDestinationFlowConfigArgs>> destinationFlowConfigs) {
            $.destinationFlowConfigs = destinationFlowConfigs;
            return this;
        }

        public Builder destinationFlowConfigs(List<FlowDestinationFlowConfigArgs> destinationFlowConfigs) {
            return destinationFlowConfigs(Output.of(destinationFlowConfigs));
        }

        public Builder destinationFlowConfigs(FlowDestinationFlowConfigArgs... destinationFlowConfigs) {
            return destinationFlowConfigs(List.of(destinationFlowConfigs));
        }

        public Builder kmsArn(@Nullable Output<String> kmsArn) {
            $.kmsArn = kmsArn;
            return this;
        }

        public Builder kmsArn(String kmsArn) {
            return kmsArn(Output.of(kmsArn));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder sourceFlowConfig(Output<FlowSourceFlowConfigArgs> sourceFlowConfig) {
            $.sourceFlowConfig = sourceFlowConfig;
            return this;
        }

        public Builder sourceFlowConfig(FlowSourceFlowConfigArgs sourceFlowConfig) {
            return sourceFlowConfig(Output.of(sourceFlowConfig));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder tasks(Output<List<FlowTaskArgs>> tasks) {
            $.tasks = tasks;
            return this;
        }

        public Builder tasks(List<FlowTaskArgs> tasks) {
            return tasks(Output.of(tasks));
        }

        public Builder tasks(FlowTaskArgs... tasks) {
            return tasks(List.of(tasks));
        }

        public Builder triggerConfig(Output<FlowTriggerConfigArgs> triggerConfig) {
            $.triggerConfig = triggerConfig;
            return this;
        }

        public Builder triggerConfig(FlowTriggerConfigArgs triggerConfig) {
            return triggerConfig(Output.of(triggerConfig));
        }

        public FlowArgs build() {
            $.destinationFlowConfigs = Objects.requireNonNull($.destinationFlowConfigs, "expected parameter 'destinationFlowConfigs' to be non-null");
            $.sourceFlowConfig = Objects.requireNonNull($.sourceFlowConfig, "expected parameter 'sourceFlowConfig' to be non-null");
            $.tasks = Objects.requireNonNull($.tasks, "expected parameter 'tasks' to be non-null");
            $.triggerConfig = Objects.requireNonNull($.triggerConfig, "expected parameter 'triggerConfig' to be non-null");
            return $;
        }
    }

}
