// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.lambda.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LayerVersionPermissionState extends com.pulumi.resources.ResourceArgs {

    public static final LayerVersionPermissionState Empty = new LayerVersionPermissionState();

    /**
     * Action that will be allowed. `lambda:GetLayerVersion` is the standard value for layer access.
     * 
     */
    @Import(name="action")
    private @Nullable Output<String> action;

    /**
     * @return Action that will be allowed. `lambda:GetLayerVersion` is the standard value for layer access.
     * 
     */
    public Optional<Output<String>> action() {
        return Optional.ofNullable(this.action);
    }

    /**
     * Name or ARN of the Lambda Layer.
     * 
     */
    @Import(name="layerName")
    private @Nullable Output<String> layerName;

    /**
     * @return Name or ARN of the Lambda Layer.
     * 
     */
    public Optional<Output<String>> layerName() {
        return Optional.ofNullable(this.layerName);
    }

    /**
     * AWS Organization ID that should be able to use your Lambda Layer. `principal` should be set to `*` when `organization_id` is provided.
     * 
     */
    @Import(name="organizationId")
    private @Nullable Output<String> organizationId;

    /**
     * @return AWS Organization ID that should be able to use your Lambda Layer. `principal` should be set to `*` when `organization_id` is provided.
     * 
     */
    public Optional<Output<String>> organizationId() {
        return Optional.ofNullable(this.organizationId);
    }

    /**
     * Full Lambda Layer Permission policy.
     * 
     */
    @Import(name="policy")
    private @Nullable Output<String> policy;

    /**
     * @return Full Lambda Layer Permission policy.
     * 
     */
    public Optional<Output<String>> policy() {
        return Optional.ofNullable(this.policy);
    }

    /**
     * AWS account ID that should be able to use your Lambda Layer. Use `*` to share with all AWS accounts.
     * 
     */
    @Import(name="principal")
    private @Nullable Output<String> principal;

    /**
     * @return AWS account ID that should be able to use your Lambda Layer. Use `*` to share with all AWS accounts.
     * 
     */
    public Optional<Output<String>> principal() {
        return Optional.ofNullable(this.principal);
    }

    /**
     * Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * Unique identifier for the current revision of the policy.
     * 
     */
    @Import(name="revisionId")
    private @Nullable Output<String> revisionId;

    /**
     * @return Unique identifier for the current revision of the policy.
     * 
     */
    public Optional<Output<String>> revisionId() {
        return Optional.ofNullable(this.revisionId);
    }

    /**
     * Whether to retain the permission when the resource is destroyed. Default is `false`.
     * 
     */
    @Import(name="skipDestroy")
    private @Nullable Output<Boolean> skipDestroy;

    /**
     * @return Whether to retain the permission when the resource is destroyed. Default is `false`.
     * 
     */
    public Optional<Output<Boolean>> skipDestroy() {
        return Optional.ofNullable(this.skipDestroy);
    }

    /**
     * Unique identifier for the permission statement.
     * 
     */
    @Import(name="statementId")
    private @Nullable Output<String> statementId;

    /**
     * @return Unique identifier for the permission statement.
     * 
     */
    public Optional<Output<String>> statementId() {
        return Optional.ofNullable(this.statementId);
    }

    /**
     * Version of Lambda Layer to grant access to. Note: permissions only apply to a single version of a layer.
     * 
     * The following arguments are optional:
     * 
     */
    @Import(name="versionNumber")
    private @Nullable Output<Integer> versionNumber;

    /**
     * @return Version of Lambda Layer to grant access to. Note: permissions only apply to a single version of a layer.
     * 
     * The following arguments are optional:
     * 
     */
    public Optional<Output<Integer>> versionNumber() {
        return Optional.ofNullable(this.versionNumber);
    }

    private LayerVersionPermissionState() {}

    private LayerVersionPermissionState(LayerVersionPermissionState $) {
        this.action = $.action;
        this.layerName = $.layerName;
        this.organizationId = $.organizationId;
        this.policy = $.policy;
        this.principal = $.principal;
        this.region = $.region;
        this.revisionId = $.revisionId;
        this.skipDestroy = $.skipDestroy;
        this.statementId = $.statementId;
        this.versionNumber = $.versionNumber;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LayerVersionPermissionState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LayerVersionPermissionState $;

        public Builder() {
            $ = new LayerVersionPermissionState();
        }

        public Builder(LayerVersionPermissionState defaults) {
            $ = new LayerVersionPermissionState(Objects.requireNonNull(defaults));
        }

        /**
         * @param action Action that will be allowed. `lambda:GetLayerVersion` is the standard value for layer access.
         * 
         * @return builder
         * 
         */
        public Builder action(@Nullable Output<String> action) {
            $.action = action;
            return this;
        }

        /**
         * @param action Action that will be allowed. `lambda:GetLayerVersion` is the standard value for layer access.
         * 
         * @return builder
         * 
         */
        public Builder action(String action) {
            return action(Output.of(action));
        }

        /**
         * @param layerName Name or ARN of the Lambda Layer.
         * 
         * @return builder
         * 
         */
        public Builder layerName(@Nullable Output<String> layerName) {
            $.layerName = layerName;
            return this;
        }

        /**
         * @param layerName Name or ARN of the Lambda Layer.
         * 
         * @return builder
         * 
         */
        public Builder layerName(String layerName) {
            return layerName(Output.of(layerName));
        }

        /**
         * @param organizationId AWS Organization ID that should be able to use your Lambda Layer. `principal` should be set to `*` when `organization_id` is provided.
         * 
         * @return builder
         * 
         */
        public Builder organizationId(@Nullable Output<String> organizationId) {
            $.organizationId = organizationId;
            return this;
        }

        /**
         * @param organizationId AWS Organization ID that should be able to use your Lambda Layer. `principal` should be set to `*` when `organization_id` is provided.
         * 
         * @return builder
         * 
         */
        public Builder organizationId(String organizationId) {
            return organizationId(Output.of(organizationId));
        }

        /**
         * @param policy Full Lambda Layer Permission policy.
         * 
         * @return builder
         * 
         */
        public Builder policy(@Nullable Output<String> policy) {
            $.policy = policy;
            return this;
        }

        /**
         * @param policy Full Lambda Layer Permission policy.
         * 
         * @return builder
         * 
         */
        public Builder policy(String policy) {
            return policy(Output.of(policy));
        }

        /**
         * @param principal AWS account ID that should be able to use your Lambda Layer. Use `*` to share with all AWS accounts.
         * 
         * @return builder
         * 
         */
        public Builder principal(@Nullable Output<String> principal) {
            $.principal = principal;
            return this;
        }

        /**
         * @param principal AWS account ID that should be able to use your Lambda Layer. Use `*` to share with all AWS accounts.
         * 
         * @return builder
         * 
         */
        public Builder principal(String principal) {
            return principal(Output.of(principal));
        }

        /**
         * @param region Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param revisionId Unique identifier for the current revision of the policy.
         * 
         * @return builder
         * 
         */
        public Builder revisionId(@Nullable Output<String> revisionId) {
            $.revisionId = revisionId;
            return this;
        }

        /**
         * @param revisionId Unique identifier for the current revision of the policy.
         * 
         * @return builder
         * 
         */
        public Builder revisionId(String revisionId) {
            return revisionId(Output.of(revisionId));
        }

        /**
         * @param skipDestroy Whether to retain the permission when the resource is destroyed. Default is `false`.
         * 
         * @return builder
         * 
         */
        public Builder skipDestroy(@Nullable Output<Boolean> skipDestroy) {
            $.skipDestroy = skipDestroy;
            return this;
        }

        /**
         * @param skipDestroy Whether to retain the permission when the resource is destroyed. Default is `false`.
         * 
         * @return builder
         * 
         */
        public Builder skipDestroy(Boolean skipDestroy) {
            return skipDestroy(Output.of(skipDestroy));
        }

        /**
         * @param statementId Unique identifier for the permission statement.
         * 
         * @return builder
         * 
         */
        public Builder statementId(@Nullable Output<String> statementId) {
            $.statementId = statementId;
            return this;
        }

        /**
         * @param statementId Unique identifier for the permission statement.
         * 
         * @return builder
         * 
         */
        public Builder statementId(String statementId) {
            return statementId(Output.of(statementId));
        }

        /**
         * @param versionNumber Version of Lambda Layer to grant access to. Note: permissions only apply to a single version of a layer.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder versionNumber(@Nullable Output<Integer> versionNumber) {
            $.versionNumber = versionNumber;
            return this;
        }

        /**
         * @param versionNumber Version of Lambda Layer to grant access to. Note: permissions only apply to a single version of a layer.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder versionNumber(Integer versionNumber) {
            return versionNumber(Output.of(versionNumber));
        }

        public LayerVersionPermissionState build() {
            return $;
        }
    }

}
