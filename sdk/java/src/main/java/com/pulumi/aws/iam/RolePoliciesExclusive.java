// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.iam;

import com.pulumi.aws.Utilities;
import com.pulumi.aws.iam.RolePoliciesExclusiveArgs;
import com.pulumi.aws.iam.inputs.RolePoliciesExclusiveState;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * &gt; **NOTE:**: To reliably detect drift between customer managed inline policies listed in this resource and actual policies attached to the role in the cloud, you currently need to run Pulumi with `pulumi up --refresh`. See [#4766](https://github.com/pulumi/pulumi-aws/issues/4766) for tracking making this work with regular `pulumi up` invocations.
 * 
 * Resource for maintaining exclusive management of inline policies assigned to an AWS IAM (Identity &amp; Access Management) role.
 * 
 * !&gt; This resource takes exclusive ownership over inline policies assigned to a role. This includes removal of inline policies which are not explicitly configured. To prevent persistent drift, ensure any `aws.iam.RolePolicy` resources managed alongside this resource are included in the `policy_names` argument.
 * 
 * &gt; Destruction of this resource means Pulumi will no longer manage reconciliation of the configured inline policy assignments. It __will not__ delete the configured policies from the role.
 * 
 * ## Example Usage
 * 
 * ### Basic Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.aws.iam.RolePoliciesExclusive;
 * import com.pulumi.aws.iam.RolePoliciesExclusiveArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new RolePoliciesExclusive("example", RolePoliciesExclusiveArgs.builder()
 *             .roleName(exampleAwsIamRole.name())
 *             .policyNames(exampleAwsIamRolePolicy.name())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ### Disallow Inline Policies
 * 
 * To automatically remove any configured inline policies, set the `policy_names` argument to an empty list.
 * 
 * &gt; This will not __prevent__ inline policies from being assigned to a role via Pulumi (or any other interface). This resource enables bringing inline policy assignments into a configured state, however, this reconciliation happens only when `apply` is proactively run.
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.aws.iam.RolePoliciesExclusive;
 * import com.pulumi.aws.iam.RolePoliciesExclusiveArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new RolePoliciesExclusive("example", RolePoliciesExclusiveArgs.builder()
 *             .roleName(exampleAwsIamRole.name())
 *             .policyNames()
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Using `pulumi import`, import exclusive management of inline policy assignments using the `role_name`. For example:
 * 
 * ```sh
 * $ pulumi import aws:iam/rolePoliciesExclusive:RolePoliciesExclusive example MyRole
 * ```
 * 
 */
@ResourceType(type="aws:iam/rolePoliciesExclusive:RolePoliciesExclusive")
public class RolePoliciesExclusive extends com.pulumi.resources.CustomResource {
    /**
     * A list of inline policy names to be assigned to the role. Policies attached to this role but not configured in this argument will be removed.
     * 
     */
    @Export(name="policyNames", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> policyNames;

    /**
     * @return A list of inline policy names to be assigned to the role. Policies attached to this role but not configured in this argument will be removed.
     * 
     */
    public Output<List<String>> policyNames() {
        return this.policyNames;
    }
    /**
     * IAM role name.
     * 
     */
    @Export(name="roleName", refs={String.class}, tree="[0]")
    private Output<String> roleName;

    /**
     * @return IAM role name.
     * 
     */
    public Output<String> roleName() {
        return this.roleName;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public RolePoliciesExclusive(java.lang.String name) {
        this(name, RolePoliciesExclusiveArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public RolePoliciesExclusive(java.lang.String name, RolePoliciesExclusiveArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public RolePoliciesExclusive(java.lang.String name, RolePoliciesExclusiveArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("aws:iam/rolePoliciesExclusive:RolePoliciesExclusive", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private RolePoliciesExclusive(java.lang.String name, Output<java.lang.String> id, @Nullable RolePoliciesExclusiveState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("aws:iam/rolePoliciesExclusive:RolePoliciesExclusive", name, state, makeResourceOptions(options, id), false);
    }

    private static RolePoliciesExclusiveArgs makeArgs(RolePoliciesExclusiveArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? RolePoliciesExclusiveArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static RolePoliciesExclusive get(java.lang.String name, Output<java.lang.String> id, @Nullable RolePoliciesExclusiveState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new RolePoliciesExclusive(name, id, state, options);
    }
}
