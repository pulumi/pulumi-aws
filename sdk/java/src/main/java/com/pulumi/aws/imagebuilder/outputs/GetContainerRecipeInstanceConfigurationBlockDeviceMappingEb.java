// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.imagebuilder.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetContainerRecipeInstanceConfigurationBlockDeviceMappingEb {
    /**
     * @return Whether to delete the volume on termination. Defaults to unset, which is the value inherited from the parent image.
     * 
     */
    private Boolean deleteOnTermination;
    /**
     * @return Whether to encrypt the volume. Defaults to unset, which is the value inherited from the parent image.
     * 
     */
    private Boolean encrypted;
    /**
     * @return Number of Input/Output (I/O) operations per second to provision for an `io1` or `io2` volume.
     * 
     */
    private Integer iops;
    /**
     * @return KMS key used to encrypt the container image.
     * 
     */
    private String kmsKeyId;
    /**
     * @return Identifier of the EC2 Volume Snapshot.
     * 
     */
    private String snapshotId;
    /**
     * @return For GP3 volumes only. The throughput in MiB/s that the volume supports.
     * 
     */
    private Integer throughput;
    /**
     * @return Size of the volume, in GiB.
     * 
     */
    private Integer volumeSize;
    /**
     * @return Type of the volume. For example, `gp2` or `io2`.
     * 
     */
    private String volumeType;

    private GetContainerRecipeInstanceConfigurationBlockDeviceMappingEb() {}
    /**
     * @return Whether to delete the volume on termination. Defaults to unset, which is the value inherited from the parent image.
     * 
     */
    public Boolean deleteOnTermination() {
        return this.deleteOnTermination;
    }
    /**
     * @return Whether to encrypt the volume. Defaults to unset, which is the value inherited from the parent image.
     * 
     */
    public Boolean encrypted() {
        return this.encrypted;
    }
    /**
     * @return Number of Input/Output (I/O) operations per second to provision for an `io1` or `io2` volume.
     * 
     */
    public Integer iops() {
        return this.iops;
    }
    /**
     * @return KMS key used to encrypt the container image.
     * 
     */
    public String kmsKeyId() {
        return this.kmsKeyId;
    }
    /**
     * @return Identifier of the EC2 Volume Snapshot.
     * 
     */
    public String snapshotId() {
        return this.snapshotId;
    }
    /**
     * @return For GP3 volumes only. The throughput in MiB/s that the volume supports.
     * 
     */
    public Integer throughput() {
        return this.throughput;
    }
    /**
     * @return Size of the volume, in GiB.
     * 
     */
    public Integer volumeSize() {
        return this.volumeSize;
    }
    /**
     * @return Type of the volume. For example, `gp2` or `io2`.
     * 
     */
    public String volumeType() {
        return this.volumeType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetContainerRecipeInstanceConfigurationBlockDeviceMappingEb defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean deleteOnTermination;
        private Boolean encrypted;
        private Integer iops;
        private String kmsKeyId;
        private String snapshotId;
        private Integer throughput;
        private Integer volumeSize;
        private String volumeType;
        public Builder() {}
        public Builder(GetContainerRecipeInstanceConfigurationBlockDeviceMappingEb defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.deleteOnTermination = defaults.deleteOnTermination;
    	      this.encrypted = defaults.encrypted;
    	      this.iops = defaults.iops;
    	      this.kmsKeyId = defaults.kmsKeyId;
    	      this.snapshotId = defaults.snapshotId;
    	      this.throughput = defaults.throughput;
    	      this.volumeSize = defaults.volumeSize;
    	      this.volumeType = defaults.volumeType;
        }

        @CustomType.Setter
        public Builder deleteOnTermination(Boolean deleteOnTermination) {
            this.deleteOnTermination = Objects.requireNonNull(deleteOnTermination);
            return this;
        }
        @CustomType.Setter
        public Builder encrypted(Boolean encrypted) {
            this.encrypted = Objects.requireNonNull(encrypted);
            return this;
        }
        @CustomType.Setter
        public Builder iops(Integer iops) {
            this.iops = Objects.requireNonNull(iops);
            return this;
        }
        @CustomType.Setter
        public Builder kmsKeyId(String kmsKeyId) {
            this.kmsKeyId = Objects.requireNonNull(kmsKeyId);
            return this;
        }
        @CustomType.Setter
        public Builder snapshotId(String snapshotId) {
            this.snapshotId = Objects.requireNonNull(snapshotId);
            return this;
        }
        @CustomType.Setter
        public Builder throughput(Integer throughput) {
            this.throughput = Objects.requireNonNull(throughput);
            return this;
        }
        @CustomType.Setter
        public Builder volumeSize(Integer volumeSize) {
            this.volumeSize = Objects.requireNonNull(volumeSize);
            return this;
        }
        @CustomType.Setter
        public Builder volumeType(String volumeType) {
            this.volumeType = Objects.requireNonNull(volumeType);
            return this;
        }
        public GetContainerRecipeInstanceConfigurationBlockDeviceMappingEb build() {
            final var o = new GetContainerRecipeInstanceConfigurationBlockDeviceMappingEb();
            o.deleteOnTermination = deleteOnTermination;
            o.encrypted = encrypted;
            o.iops = iops;
            o.kmsKeyId = kmsKeyId;
            o.snapshotId = snapshotId;
            o.throughput = throughput;
            o.volumeSize = volumeSize;
            o.volumeType = volumeType;
            return o;
        }
    }
}
