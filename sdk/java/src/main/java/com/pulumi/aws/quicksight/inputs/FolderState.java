// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.inputs;

import com.pulumi.aws.quicksight.inputs.FolderPermissionArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FolderState extends com.pulumi.resources.ResourceArgs {

    public static final FolderState Empty = new FolderState();

    /**
     * ARN of the folder.
     * 
     */
    @Import(name="arn")
    private @Nullable Output<String> arn;

    /**
     * @return ARN of the folder.
     * 
     */
    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    /**
     * AWS account ID.
     * 
     */
    @Import(name="awsAccountId")
    private @Nullable Output<String> awsAccountId;

    /**
     * @return AWS account ID.
     * 
     */
    public Optional<Output<String>> awsAccountId() {
        return Optional.ofNullable(this.awsAccountId);
    }

    /**
     * The time that the folder was created.
     * 
     */
    @Import(name="createdTime")
    private @Nullable Output<String> createdTime;

    /**
     * @return The time that the folder was created.
     * 
     */
    public Optional<Output<String>> createdTime() {
        return Optional.ofNullable(this.createdTime);
    }

    /**
     * Identifier for the folder.
     * 
     */
    @Import(name="folderId")
    private @Nullable Output<String> folderId;

    /**
     * @return Identifier for the folder.
     * 
     */
    public Optional<Output<String>> folderId() {
        return Optional.ofNullable(this.folderId);
    }

    /**
     * An array of ancestor ARN strings for the folder. Empty for root-level folders.
     * 
     */
    @Import(name="folderPaths")
    private @Nullable Output<List<String>> folderPaths;

    /**
     * @return An array of ancestor ARN strings for the folder. Empty for root-level folders.
     * 
     */
    public Optional<Output<List<String>>> folderPaths() {
        return Optional.ofNullable(this.folderPaths);
    }

    /**
     * The type of folder. By default, it is `SHARED`. Valid values are: `SHARED`.
     * 
     */
    @Import(name="folderType")
    private @Nullable Output<String> folderType;

    /**
     * @return The type of folder. By default, it is `SHARED`. Valid values are: `SHARED`.
     * 
     */
    public Optional<Output<String>> folderType() {
        return Optional.ofNullable(this.folderType);
    }

    /**
     * The time that the folder was last updated.
     * 
     */
    @Import(name="lastUpdatedTime")
    private @Nullable Output<String> lastUpdatedTime;

    /**
     * @return The time that the folder was last updated.
     * 
     */
    public Optional<Output<String>> lastUpdatedTime() {
        return Optional.ofNullable(this.lastUpdatedTime);
    }

    /**
     * Display name for the folder.
     * 
     * The following arguments are optional:
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Display name for the folder.
     * 
     * The following arguments are optional:
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The Amazon Resource Name (ARN) for the parent folder. If not set, creates a root-level folder.
     * 
     */
    @Import(name="parentFolderArn")
    private @Nullable Output<String> parentFolderArn;

    /**
     * @return The Amazon Resource Name (ARN) for the parent folder. If not set, creates a root-level folder.
     * 
     */
    public Optional<Output<String>> parentFolderArn() {
        return Optional.ofNullable(this.parentFolderArn);
    }

    /**
     * A set of resource permissions on the folder. Maximum of 64 items. See permissions.
     * 
     */
    @Import(name="permissions")
    private @Nullable Output<List<FolderPermissionArgs>> permissions;

    /**
     * @return A set of resource permissions on the folder. Maximum of 64 items. See permissions.
     * 
     */
    public Optional<Output<List<FolderPermissionArgs>>> permissions() {
        return Optional.ofNullable(this.permissions);
    }

    /**
     * Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    /**
     * @return A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    private FolderState() {}

    private FolderState(FolderState $) {
        this.arn = $.arn;
        this.awsAccountId = $.awsAccountId;
        this.createdTime = $.createdTime;
        this.folderId = $.folderId;
        this.folderPaths = $.folderPaths;
        this.folderType = $.folderType;
        this.lastUpdatedTime = $.lastUpdatedTime;
        this.name = $.name;
        this.parentFolderArn = $.parentFolderArn;
        this.permissions = $.permissions;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FolderState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FolderState $;

        public Builder() {
            $ = new FolderState();
        }

        public Builder(FolderState defaults) {
            $ = new FolderState(Objects.requireNonNull(defaults));
        }

        /**
         * @param arn ARN of the folder.
         * 
         * @return builder
         * 
         */
        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        /**
         * @param arn ARN of the folder.
         * 
         * @return builder
         * 
         */
        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        /**
         * @param awsAccountId AWS account ID.
         * 
         * @return builder
         * 
         */
        public Builder awsAccountId(@Nullable Output<String> awsAccountId) {
            $.awsAccountId = awsAccountId;
            return this;
        }

        /**
         * @param awsAccountId AWS account ID.
         * 
         * @return builder
         * 
         */
        public Builder awsAccountId(String awsAccountId) {
            return awsAccountId(Output.of(awsAccountId));
        }

        /**
         * @param createdTime The time that the folder was created.
         * 
         * @return builder
         * 
         */
        public Builder createdTime(@Nullable Output<String> createdTime) {
            $.createdTime = createdTime;
            return this;
        }

        /**
         * @param createdTime The time that the folder was created.
         * 
         * @return builder
         * 
         */
        public Builder createdTime(String createdTime) {
            return createdTime(Output.of(createdTime));
        }

        /**
         * @param folderId Identifier for the folder.
         * 
         * @return builder
         * 
         */
        public Builder folderId(@Nullable Output<String> folderId) {
            $.folderId = folderId;
            return this;
        }

        /**
         * @param folderId Identifier for the folder.
         * 
         * @return builder
         * 
         */
        public Builder folderId(String folderId) {
            return folderId(Output.of(folderId));
        }

        /**
         * @param folderPaths An array of ancestor ARN strings for the folder. Empty for root-level folders.
         * 
         * @return builder
         * 
         */
        public Builder folderPaths(@Nullable Output<List<String>> folderPaths) {
            $.folderPaths = folderPaths;
            return this;
        }

        /**
         * @param folderPaths An array of ancestor ARN strings for the folder. Empty for root-level folders.
         * 
         * @return builder
         * 
         */
        public Builder folderPaths(List<String> folderPaths) {
            return folderPaths(Output.of(folderPaths));
        }

        /**
         * @param folderPaths An array of ancestor ARN strings for the folder. Empty for root-level folders.
         * 
         * @return builder
         * 
         */
        public Builder folderPaths(String... folderPaths) {
            return folderPaths(List.of(folderPaths));
        }

        /**
         * @param folderType The type of folder. By default, it is `SHARED`. Valid values are: `SHARED`.
         * 
         * @return builder
         * 
         */
        public Builder folderType(@Nullable Output<String> folderType) {
            $.folderType = folderType;
            return this;
        }

        /**
         * @param folderType The type of folder. By default, it is `SHARED`. Valid values are: `SHARED`.
         * 
         * @return builder
         * 
         */
        public Builder folderType(String folderType) {
            return folderType(Output.of(folderType));
        }

        /**
         * @param lastUpdatedTime The time that the folder was last updated.
         * 
         * @return builder
         * 
         */
        public Builder lastUpdatedTime(@Nullable Output<String> lastUpdatedTime) {
            $.lastUpdatedTime = lastUpdatedTime;
            return this;
        }

        /**
         * @param lastUpdatedTime The time that the folder was last updated.
         * 
         * @return builder
         * 
         */
        public Builder lastUpdatedTime(String lastUpdatedTime) {
            return lastUpdatedTime(Output.of(lastUpdatedTime));
        }

        /**
         * @param name Display name for the folder.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Display name for the folder.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param parentFolderArn The Amazon Resource Name (ARN) for the parent folder. If not set, creates a root-level folder.
         * 
         * @return builder
         * 
         */
        public Builder parentFolderArn(@Nullable Output<String> parentFolderArn) {
            $.parentFolderArn = parentFolderArn;
            return this;
        }

        /**
         * @param parentFolderArn The Amazon Resource Name (ARN) for the parent folder. If not set, creates a root-level folder.
         * 
         * @return builder
         * 
         */
        public Builder parentFolderArn(String parentFolderArn) {
            return parentFolderArn(Output.of(parentFolderArn));
        }

        /**
         * @param permissions A set of resource permissions on the folder. Maximum of 64 items. See permissions.
         * 
         * @return builder
         * 
         */
        public Builder permissions(@Nullable Output<List<FolderPermissionArgs>> permissions) {
            $.permissions = permissions;
            return this;
        }

        /**
         * @param permissions A set of resource permissions on the folder. Maximum of 64 items. See permissions.
         * 
         * @return builder
         * 
         */
        public Builder permissions(List<FolderPermissionArgs> permissions) {
            return permissions(Output.of(permissions));
        }

        /**
         * @param permissions A set of resource permissions on the folder. Maximum of 64 items. See permissions.
         * 
         * @return builder
         * 
         */
        public Builder permissions(FolderPermissionArgs... permissions) {
            return permissions(List.of(permissions));
        }

        /**
         * @param tags Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tagsAll A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
         * 
         * @return builder
         * 
         * @deprecated
         * Please use `tags` instead.
         * 
         */
        @Deprecated /* Please use `tags` instead. */
        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        /**
         * @param tagsAll A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
         * 
         * @return builder
         * 
         * @deprecated
         * Please use `tags` instead.
         * 
         */
        @Deprecated /* Please use `tags` instead. */
        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        public FolderState build() {
            return $;
        }
    }

}
