// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.cfg.inputs;

import com.pulumi.aws.cfg.inputs.RecorderRecordingModeRecordingModeOverrideArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RecorderRecordingModeArgs extends com.pulumi.resources.ResourceArgs {

    public static final RecorderRecordingModeArgs Empty = new RecorderRecordingModeArgs();

    /**
     * Default reecording frequency. `CONTINUOUS` or `DAILY`.
     * 
     */
    @Import(name="recordingFrequency")
    private @Nullable Output<String> recordingFrequency;

    /**
     * @return Default reecording frequency. `CONTINUOUS` or `DAILY`.
     * 
     */
    public Optional<Output<String>> recordingFrequency() {
        return Optional.ofNullable(this.recordingFrequency);
    }

    /**
     * Recording mode overrides. Detailed below.
     * 
     */
    @Import(name="recordingModeOverride")
    private @Nullable Output<RecorderRecordingModeRecordingModeOverrideArgs> recordingModeOverride;

    /**
     * @return Recording mode overrides. Detailed below.
     * 
     */
    public Optional<Output<RecorderRecordingModeRecordingModeOverrideArgs>> recordingModeOverride() {
        return Optional.ofNullable(this.recordingModeOverride);
    }

    private RecorderRecordingModeArgs() {}

    private RecorderRecordingModeArgs(RecorderRecordingModeArgs $) {
        this.recordingFrequency = $.recordingFrequency;
        this.recordingModeOverride = $.recordingModeOverride;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RecorderRecordingModeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RecorderRecordingModeArgs $;

        public Builder() {
            $ = new RecorderRecordingModeArgs();
        }

        public Builder(RecorderRecordingModeArgs defaults) {
            $ = new RecorderRecordingModeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param recordingFrequency Default reecording frequency. `CONTINUOUS` or `DAILY`.
         * 
         * @return builder
         * 
         */
        public Builder recordingFrequency(@Nullable Output<String> recordingFrequency) {
            $.recordingFrequency = recordingFrequency;
            return this;
        }

        /**
         * @param recordingFrequency Default reecording frequency. `CONTINUOUS` or `DAILY`.
         * 
         * @return builder
         * 
         */
        public Builder recordingFrequency(String recordingFrequency) {
            return recordingFrequency(Output.of(recordingFrequency));
        }

        /**
         * @param recordingModeOverride Recording mode overrides. Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder recordingModeOverride(@Nullable Output<RecorderRecordingModeRecordingModeOverrideArgs> recordingModeOverride) {
            $.recordingModeOverride = recordingModeOverride;
            return this;
        }

        /**
         * @param recordingModeOverride Recording mode overrides. Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder recordingModeOverride(RecorderRecordingModeRecordingModeOverrideArgs recordingModeOverride) {
            return recordingModeOverride(Output.of(recordingModeOverride));
        }

        public RecorderRecordingModeArgs build() {
            return $;
        }
    }

}
