// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.iam.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetPrincipalPolicySimulationContext {
    /**
     * @return The context _condition key_ to set.
     * 
     * If you have policies containing `Condition` elements or using dynamic interpolations then you will need to provide suitable values for each condition key your policies use. See [Actions, resources, and condition keys for AWS services](https://docs.aws.amazon.com/service-authorization/latest/reference/reference_policies_actions-resources-contextkeys.html) to find the various condition keys that are normally provided for real requests to each action of each AWS service.
     * 
     */
    private String key;
    /**
     * @return An IAM value type that determines how the policy simulator will interpret the strings given in `values`.
     * 
     * For more information, see the `ContextKeyType` field of [`iam.ContextEntry`](https://docs.aws.amazon.com/IAM/latest/APIReference/API_ContextEntry.html) in the underlying API.
     * 
     */
    private String type;
    /**
     * @return A set of one or more values for this context entry.
     * 
     */
    private List<String> values;

    private GetPrincipalPolicySimulationContext() {}
    /**
     * @return The context _condition key_ to set.
     * 
     * If you have policies containing `Condition` elements or using dynamic interpolations then you will need to provide suitable values for each condition key your policies use. See [Actions, resources, and condition keys for AWS services](https://docs.aws.amazon.com/service-authorization/latest/reference/reference_policies_actions-resources-contextkeys.html) to find the various condition keys that are normally provided for real requests to each action of each AWS service.
     * 
     */
    public String key() {
        return this.key;
    }
    /**
     * @return An IAM value type that determines how the policy simulator will interpret the strings given in `values`.
     * 
     * For more information, see the `ContextKeyType` field of [`iam.ContextEntry`](https://docs.aws.amazon.com/IAM/latest/APIReference/API_ContextEntry.html) in the underlying API.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return A set of one or more values for this context entry.
     * 
     */
    public List<String> values() {
        return this.values;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPrincipalPolicySimulationContext defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String key;
        private String type;
        private List<String> values;
        public Builder() {}
        public Builder(GetPrincipalPolicySimulationContext defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.key = defaults.key;
    	      this.type = defaults.type;
    	      this.values = defaults.values;
        }

        @CustomType.Setter
        public Builder key(String key) {
            this.key = Objects.requireNonNull(key);
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        @CustomType.Setter
        public Builder values(List<String> values) {
            this.values = Objects.requireNonNull(values);
            return this;
        }
        public Builder values(String... values) {
            return values(List.of(values));
        }
        public GetPrincipalPolicySimulationContext build() {
            final var _resultValue = new GetPrincipalPolicySimulationContext();
            _resultValue.key = key;
            _resultValue.type = type;
            _resultValue.values = values;
            return _resultValue;
        }
    }
}
