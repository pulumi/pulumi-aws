// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.apigateway.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DomainNameAccessAssociationState extends com.pulumi.resources.ResourceArgs {

    public static final DomainNameAccessAssociationState Empty = new DomainNameAccessAssociationState();

    /**
     * The identifier of the domain name access association source. For a `VPCE`, the value is the VPC endpoint ID.
     * 
     */
    @Import(name="accessAssociationSource")
    private @Nullable Output<String> accessAssociationSource;

    /**
     * @return The identifier of the domain name access association source. For a `VPCE`, the value is the VPC endpoint ID.
     * 
     */
    public Optional<Output<String>> accessAssociationSource() {
        return Optional.ofNullable(this.accessAssociationSource);
    }

    /**
     * The type of the domain name access association source. Valid values are `VPCE`.
     * 
     */
    @Import(name="accessAssociationSourceType")
    private @Nullable Output<String> accessAssociationSourceType;

    /**
     * @return The type of the domain name access association source. Valid values are `VPCE`.
     * 
     */
    public Optional<Output<String>> accessAssociationSourceType() {
        return Optional.ofNullable(this.accessAssociationSourceType);
    }

    /**
     * ARN of the domain name access association.
     * 
     */
    @Import(name="arn")
    private @Nullable Output<String> arn;

    /**
     * @return ARN of the domain name access association.
     * 
     */
    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    /**
     * The ARN of the domain name.
     * 
     */
    @Import(name="domainNameArn")
    private @Nullable Output<String> domainNameArn;

    /**
     * @return The ARN of the domain name.
     * 
     */
    public Optional<Output<String>> domainNameArn() {
        return Optional.ofNullable(this.domainNameArn);
    }

    /**
     * Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    /**
     * @return Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    private DomainNameAccessAssociationState() {}

    private DomainNameAccessAssociationState(DomainNameAccessAssociationState $) {
        this.accessAssociationSource = $.accessAssociationSource;
        this.accessAssociationSourceType = $.accessAssociationSourceType;
        this.arn = $.arn;
        this.domainNameArn = $.domainNameArn;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DomainNameAccessAssociationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DomainNameAccessAssociationState $;

        public Builder() {
            $ = new DomainNameAccessAssociationState();
        }

        public Builder(DomainNameAccessAssociationState defaults) {
            $ = new DomainNameAccessAssociationState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessAssociationSource The identifier of the domain name access association source. For a `VPCE`, the value is the VPC endpoint ID.
         * 
         * @return builder
         * 
         */
        public Builder accessAssociationSource(@Nullable Output<String> accessAssociationSource) {
            $.accessAssociationSource = accessAssociationSource;
            return this;
        }

        /**
         * @param accessAssociationSource The identifier of the domain name access association source. For a `VPCE`, the value is the VPC endpoint ID.
         * 
         * @return builder
         * 
         */
        public Builder accessAssociationSource(String accessAssociationSource) {
            return accessAssociationSource(Output.of(accessAssociationSource));
        }

        /**
         * @param accessAssociationSourceType The type of the domain name access association source. Valid values are `VPCE`.
         * 
         * @return builder
         * 
         */
        public Builder accessAssociationSourceType(@Nullable Output<String> accessAssociationSourceType) {
            $.accessAssociationSourceType = accessAssociationSourceType;
            return this;
        }

        /**
         * @param accessAssociationSourceType The type of the domain name access association source. Valid values are `VPCE`.
         * 
         * @return builder
         * 
         */
        public Builder accessAssociationSourceType(String accessAssociationSourceType) {
            return accessAssociationSourceType(Output.of(accessAssociationSourceType));
        }

        /**
         * @param arn ARN of the domain name access association.
         * 
         * @return builder
         * 
         */
        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        /**
         * @param arn ARN of the domain name access association.
         * 
         * @return builder
         * 
         */
        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        /**
         * @param domainNameArn The ARN of the domain name.
         * 
         * @return builder
         * 
         */
        public Builder domainNameArn(@Nullable Output<String> domainNameArn) {
            $.domainNameArn = domainNameArn;
            return this;
        }

        /**
         * @param domainNameArn The ARN of the domain name.
         * 
         * @return builder
         * 
         */
        public Builder domainNameArn(String domainNameArn) {
            return domainNameArn(Output.of(domainNameArn));
        }

        /**
         * @param tags Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tagsAll Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
         * 
         * @return builder
         * 
         * @deprecated
         * Please use `tags` instead.
         * 
         */
        @Deprecated /* Please use `tags` instead. */
        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        /**
         * @param tagsAll Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
         * 
         * @return builder
         * 
         * @deprecated
         * Please use `tags` instead.
         * 
         */
        @Deprecated /* Please use `tags` instead. */
        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        public DomainNameAccessAssociationState build() {
            return $;
        }
    }

}
