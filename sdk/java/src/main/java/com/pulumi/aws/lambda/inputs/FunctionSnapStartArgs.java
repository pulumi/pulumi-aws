// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.lambda.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FunctionSnapStartArgs extends com.pulumi.resources.ResourceArgs {

    public static final FunctionSnapStartArgs Empty = new FunctionSnapStartArgs();

    /**
     * When to apply snap start optimization. Valid value: `PublishedVersions`.
     * 
     */
    @Import(name="applyOn", required=true)
    private Output<String> applyOn;

    /**
     * @return When to apply snap start optimization. Valid value: `PublishedVersions`.
     * 
     */
    public Output<String> applyOn() {
        return this.applyOn;
    }

    /**
     * Optimization status of the snap start configuration. Valid values are `On` and `Off`.
     * 
     */
    @Import(name="optimizationStatus")
    private @Nullable Output<String> optimizationStatus;

    /**
     * @return Optimization status of the snap start configuration. Valid values are `On` and `Off`.
     * 
     */
    public Optional<Output<String>> optimizationStatus() {
        return Optional.ofNullable(this.optimizationStatus);
    }

    private FunctionSnapStartArgs() {}

    private FunctionSnapStartArgs(FunctionSnapStartArgs $) {
        this.applyOn = $.applyOn;
        this.optimizationStatus = $.optimizationStatus;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FunctionSnapStartArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FunctionSnapStartArgs $;

        public Builder() {
            $ = new FunctionSnapStartArgs();
        }

        public Builder(FunctionSnapStartArgs defaults) {
            $ = new FunctionSnapStartArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param applyOn When to apply snap start optimization. Valid value: `PublishedVersions`.
         * 
         * @return builder
         * 
         */
        public Builder applyOn(Output<String> applyOn) {
            $.applyOn = applyOn;
            return this;
        }

        /**
         * @param applyOn When to apply snap start optimization. Valid value: `PublishedVersions`.
         * 
         * @return builder
         * 
         */
        public Builder applyOn(String applyOn) {
            return applyOn(Output.of(applyOn));
        }

        /**
         * @param optimizationStatus Optimization status of the snap start configuration. Valid values are `On` and `Off`.
         * 
         * @return builder
         * 
         */
        public Builder optimizationStatus(@Nullable Output<String> optimizationStatus) {
            $.optimizationStatus = optimizationStatus;
            return this;
        }

        /**
         * @param optimizationStatus Optimization status of the snap start configuration. Valid values are `On` and `Off`.
         * 
         * @return builder
         * 
         */
        public Builder optimizationStatus(String optimizationStatus) {
            return optimizationStatus(Output.of(optimizationStatus));
        }

        public FunctionSnapStartArgs build() {
            if ($.applyOn == null) {
                throw new MissingRequiredPropertyException("FunctionSnapStartArgs", "applyOn");
            }
            return $;
        }
    }

}
