// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.route53recoverycontrol.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RoutingControlState extends com.pulumi.resources.ResourceArgs {

    public static final RoutingControlState Empty = new RoutingControlState();

    /**
     * ARN of the routing control.
     * 
     */
    @Import(name="arn")
    private @Nullable Output<String> arn;

    /**
     * @return ARN of the routing control.
     * 
     */
    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    /**
     * ARN of the cluster in which this routing control will reside.
     * 
     */
    @Import(name="clusterArn")
    private @Nullable Output<String> clusterArn;

    /**
     * @return ARN of the cluster in which this routing control will reside.
     * 
     */
    public Optional<Output<String>> clusterArn() {
        return Optional.ofNullable(this.clusterArn);
    }

    /**
     * ARN of the control panel in which this routing control will reside.
     * 
     */
    @Import(name="controlPanelArn")
    private @Nullable Output<String> controlPanelArn;

    /**
     * @return ARN of the control panel in which this routing control will reside.
     * 
     */
    public Optional<Output<String>> controlPanelArn() {
        return Optional.ofNullable(this.controlPanelArn);
    }

    /**
     * The name describing the routing control.
     * 
     * The following arguments are optional:
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name describing the routing control.
     * 
     * The following arguments are optional:
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Status of routing control. `PENDING` when it is being created/updated, `PENDING_DELETION` when it is being deleted, and `DEPLOYED` otherwise.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Status of routing control. `PENDING` when it is being created/updated, `PENDING_DELETION` when it is being deleted, and `DEPLOYED` otherwise.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private RoutingControlState() {}

    private RoutingControlState(RoutingControlState $) {
        this.arn = $.arn;
        this.clusterArn = $.clusterArn;
        this.controlPanelArn = $.controlPanelArn;
        this.name = $.name;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RoutingControlState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RoutingControlState $;

        public Builder() {
            $ = new RoutingControlState();
        }

        public Builder(RoutingControlState defaults) {
            $ = new RoutingControlState(Objects.requireNonNull(defaults));
        }

        /**
         * @param arn ARN of the routing control.
         * 
         * @return builder
         * 
         */
        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        /**
         * @param arn ARN of the routing control.
         * 
         * @return builder
         * 
         */
        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        /**
         * @param clusterArn ARN of the cluster in which this routing control will reside.
         * 
         * @return builder
         * 
         */
        public Builder clusterArn(@Nullable Output<String> clusterArn) {
            $.clusterArn = clusterArn;
            return this;
        }

        /**
         * @param clusterArn ARN of the cluster in which this routing control will reside.
         * 
         * @return builder
         * 
         */
        public Builder clusterArn(String clusterArn) {
            return clusterArn(Output.of(clusterArn));
        }

        /**
         * @param controlPanelArn ARN of the control panel in which this routing control will reside.
         * 
         * @return builder
         * 
         */
        public Builder controlPanelArn(@Nullable Output<String> controlPanelArn) {
            $.controlPanelArn = controlPanelArn;
            return this;
        }

        /**
         * @param controlPanelArn ARN of the control panel in which this routing control will reside.
         * 
         * @return builder
         * 
         */
        public Builder controlPanelArn(String controlPanelArn) {
            return controlPanelArn(Output.of(controlPanelArn));
        }

        /**
         * @param name The name describing the routing control.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name describing the routing control.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param status Status of routing control. `PENDING` when it is being created/updated, `PENDING_DELETION` when it is being deleted, and `DEPLOYED` otherwise.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Status of routing control. `PENDING` when it is being created/updated, `PENDING_DELETION` when it is being deleted, and `DEPLOYED` otherwise.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public RoutingControlState build() {
            return $;
        }
    }

}
