// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.appfabric.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IngestionState extends com.pulumi.resources.ResourceArgs {

    public static final IngestionState Empty = new IngestionState();

    /**
     * Name of the application.
     * Refer to the AWS Documentation for the [list of valid values](https://docs.aws.amazon.com/appfabric/latest/api/API_CreateIngestion.html#appfabric-CreateIngestion-request-app)
     * 
     */
    @Import(name="app")
    private @Nullable Output<String> app;

    /**
     * @return Name of the application.
     * Refer to the AWS Documentation for the [list of valid values](https://docs.aws.amazon.com/appfabric/latest/api/API_CreateIngestion.html#appfabric-CreateIngestion-request-app)
     * 
     */
    public Optional<Output<String>> app() {
        return Optional.ofNullable(this.app);
    }

    /**
     * Amazon Resource Name (ARN) of the app bundle to use for the request.
     * 
     */
    @Import(name="appBundleArn")
    private @Nullable Output<String> appBundleArn;

    /**
     * @return Amazon Resource Name (ARN) of the app bundle to use for the request.
     * 
     */
    public Optional<Output<String>> appBundleArn() {
        return Optional.ofNullable(this.appBundleArn);
    }

    /**
     * ARN of the Ingestion.
     * 
     */
    @Import(name="arn")
    private @Nullable Output<String> arn;

    /**
     * @return ARN of the Ingestion.
     * 
     */
    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    /**
     * Ingestion type. Valid values are `auditLog`.
     * 
     */
    @Import(name="ingestionType")
    private @Nullable Output<String> ingestionType;

    /**
     * @return Ingestion type. Valid values are `auditLog`.
     * 
     */
    public Optional<Output<String>> ingestionType() {
        return Optional.ofNullable(this.ingestionType);
    }

    /**
     * Map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    /**
     * @return Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    /**
     * ID of the application tenant.
     * 
     */
    @Import(name="tenantId")
    private @Nullable Output<String> tenantId;

    /**
     * @return ID of the application tenant.
     * 
     */
    public Optional<Output<String>> tenantId() {
        return Optional.ofNullable(this.tenantId);
    }

    private IngestionState() {}

    private IngestionState(IngestionState $) {
        this.app = $.app;
        this.appBundleArn = $.appBundleArn;
        this.arn = $.arn;
        this.ingestionType = $.ingestionType;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
        this.tenantId = $.tenantId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IngestionState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IngestionState $;

        public Builder() {
            $ = new IngestionState();
        }

        public Builder(IngestionState defaults) {
            $ = new IngestionState(Objects.requireNonNull(defaults));
        }

        /**
         * @param app Name of the application.
         * Refer to the AWS Documentation for the [list of valid values](https://docs.aws.amazon.com/appfabric/latest/api/API_CreateIngestion.html#appfabric-CreateIngestion-request-app)
         * 
         * @return builder
         * 
         */
        public Builder app(@Nullable Output<String> app) {
            $.app = app;
            return this;
        }

        /**
         * @param app Name of the application.
         * Refer to the AWS Documentation for the [list of valid values](https://docs.aws.amazon.com/appfabric/latest/api/API_CreateIngestion.html#appfabric-CreateIngestion-request-app)
         * 
         * @return builder
         * 
         */
        public Builder app(String app) {
            return app(Output.of(app));
        }

        /**
         * @param appBundleArn Amazon Resource Name (ARN) of the app bundle to use for the request.
         * 
         * @return builder
         * 
         */
        public Builder appBundleArn(@Nullable Output<String> appBundleArn) {
            $.appBundleArn = appBundleArn;
            return this;
        }

        /**
         * @param appBundleArn Amazon Resource Name (ARN) of the app bundle to use for the request.
         * 
         * @return builder
         * 
         */
        public Builder appBundleArn(String appBundleArn) {
            return appBundleArn(Output.of(appBundleArn));
        }

        /**
         * @param arn ARN of the Ingestion.
         * 
         * @return builder
         * 
         */
        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        /**
         * @param arn ARN of the Ingestion.
         * 
         * @return builder
         * 
         */
        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        /**
         * @param ingestionType Ingestion type. Valid values are `auditLog`.
         * 
         * @return builder
         * 
         */
        public Builder ingestionType(@Nullable Output<String> ingestionType) {
            $.ingestionType = ingestionType;
            return this;
        }

        /**
         * @param ingestionType Ingestion type. Valid values are `auditLog`.
         * 
         * @return builder
         * 
         */
        public Builder ingestionType(String ingestionType) {
            return ingestionType(Output.of(ingestionType));
        }

        /**
         * @param tags Map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tagsAll Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
         * 
         * @return builder
         * 
         * @deprecated
         * Please use `tags` instead.
         * 
         */
        @Deprecated /* Please use `tags` instead. */
        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        /**
         * @param tagsAll Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
         * 
         * @return builder
         * 
         * @deprecated
         * Please use `tags` instead.
         * 
         */
        @Deprecated /* Please use `tags` instead. */
        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        /**
         * @param tenantId ID of the application tenant.
         * 
         * @return builder
         * 
         */
        public Builder tenantId(@Nullable Output<String> tenantId) {
            $.tenantId = tenantId;
            return this;
        }

        /**
         * @param tenantId ID of the application tenant.
         * 
         * @return builder
         * 
         */
        public Builder tenantId(String tenantId) {
            return tenantId(Output.of(tenantId));
        }

        public IngestionState build() {
            return $;
        }
    }

}
