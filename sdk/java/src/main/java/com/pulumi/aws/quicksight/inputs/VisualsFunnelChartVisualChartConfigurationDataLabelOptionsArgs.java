// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.inputs;

import com.pulumi.aws.quicksight.inputs.FontConfigurationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VisualsFunnelChartVisualChartConfigurationDataLabelOptionsArgs extends com.pulumi.resources.ResourceArgs {

    public static final VisualsFunnelChartVisualChartConfigurationDataLabelOptionsArgs Empty = new VisualsFunnelChartVisualChartConfigurationDataLabelOptionsArgs();

    @Import(name="categoryLabelVisibility")
    private @Nullable Output<String> categoryLabelVisibility;

    public Optional<Output<String>> categoryLabelVisibility() {
        return Optional.ofNullable(this.categoryLabelVisibility);
    }

    @Import(name="labelColor")
    private @Nullable Output<String> labelColor;

    public Optional<Output<String>> labelColor() {
        return Optional.ofNullable(this.labelColor);
    }

    @Import(name="labelFontConfiguration")
    private @Nullable Output<FontConfigurationArgs> labelFontConfiguration;

    public Optional<Output<FontConfigurationArgs>> labelFontConfiguration() {
        return Optional.ofNullable(this.labelFontConfiguration);
    }

    @Import(name="measureDataLabelStyle")
    private @Nullable Output<String> measureDataLabelStyle;

    public Optional<Output<String>> measureDataLabelStyle() {
        return Optional.ofNullable(this.measureDataLabelStyle);
    }

    @Import(name="measureLabelVisibility")
    private @Nullable Output<String> measureLabelVisibility;

    public Optional<Output<String>> measureLabelVisibility() {
        return Optional.ofNullable(this.measureLabelVisibility);
    }

    @Import(name="position")
    private @Nullable Output<String> position;

    public Optional<Output<String>> position() {
        return Optional.ofNullable(this.position);
    }

    @Import(name="visibility")
    private @Nullable Output<String> visibility;

    public Optional<Output<String>> visibility() {
        return Optional.ofNullable(this.visibility);
    }

    private VisualsFunnelChartVisualChartConfigurationDataLabelOptionsArgs() {}

    private VisualsFunnelChartVisualChartConfigurationDataLabelOptionsArgs(VisualsFunnelChartVisualChartConfigurationDataLabelOptionsArgs $) {
        this.categoryLabelVisibility = $.categoryLabelVisibility;
        this.labelColor = $.labelColor;
        this.labelFontConfiguration = $.labelFontConfiguration;
        this.measureDataLabelStyle = $.measureDataLabelStyle;
        this.measureLabelVisibility = $.measureLabelVisibility;
        this.position = $.position;
        this.visibility = $.visibility;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VisualsFunnelChartVisualChartConfigurationDataLabelOptionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VisualsFunnelChartVisualChartConfigurationDataLabelOptionsArgs $;

        public Builder() {
            $ = new VisualsFunnelChartVisualChartConfigurationDataLabelOptionsArgs();
        }

        public Builder(VisualsFunnelChartVisualChartConfigurationDataLabelOptionsArgs defaults) {
            $ = new VisualsFunnelChartVisualChartConfigurationDataLabelOptionsArgs(Objects.requireNonNull(defaults));
        }

        public Builder categoryLabelVisibility(@Nullable Output<String> categoryLabelVisibility) {
            $.categoryLabelVisibility = categoryLabelVisibility;
            return this;
        }

        public Builder categoryLabelVisibility(String categoryLabelVisibility) {
            return categoryLabelVisibility(Output.of(categoryLabelVisibility));
        }

        public Builder labelColor(@Nullable Output<String> labelColor) {
            $.labelColor = labelColor;
            return this;
        }

        public Builder labelColor(String labelColor) {
            return labelColor(Output.of(labelColor));
        }

        public Builder labelFontConfiguration(@Nullable Output<FontConfigurationArgs> labelFontConfiguration) {
            $.labelFontConfiguration = labelFontConfiguration;
            return this;
        }

        public Builder labelFontConfiguration(FontConfigurationArgs labelFontConfiguration) {
            return labelFontConfiguration(Output.of(labelFontConfiguration));
        }

        public Builder measureDataLabelStyle(@Nullable Output<String> measureDataLabelStyle) {
            $.measureDataLabelStyle = measureDataLabelStyle;
            return this;
        }

        public Builder measureDataLabelStyle(String measureDataLabelStyle) {
            return measureDataLabelStyle(Output.of(measureDataLabelStyle));
        }

        public Builder measureLabelVisibility(@Nullable Output<String> measureLabelVisibility) {
            $.measureLabelVisibility = measureLabelVisibility;
            return this;
        }

        public Builder measureLabelVisibility(String measureLabelVisibility) {
            return measureLabelVisibility(Output.of(measureLabelVisibility));
        }

        public Builder position(@Nullable Output<String> position) {
            $.position = position;
            return this;
        }

        public Builder position(String position) {
            return position(Output.of(position));
        }

        public Builder visibility(@Nullable Output<String> visibility) {
            $.visibility = visibility;
            return this;
        }

        public Builder visibility(String visibility) {
            return visibility(Output.of(visibility));
        }

        public VisualsFunnelChartVisualChartConfigurationDataLabelOptionsArgs build() {
            return $;
        }
    }

}
