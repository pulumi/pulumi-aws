// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.lambda.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class FunctionLoggingConfig {
    /**
     * @return for JSON structured logs, choose the detail level of the logs your application sends to CloudWatch when using supported logging libraries.
     * 
     */
    private @Nullable String applicationLogLevel;
    /**
     * @return select between `Text` and structured `JSON` format for your function&#39;s logs.
     * 
     */
    private String logFormat;
    /**
     * @return the CloudWatch log group your function sends logs to.
     * 
     */
    private @Nullable String logGroup;
    /**
     * @return for JSON structured logs, choose the detail level of the Lambda platform event logs sent to CloudWatch, such as `ERROR`, `DEBUG`, or `INFO`.
     * 
     */
    private @Nullable String systemLogLevel;

    private FunctionLoggingConfig() {}
    /**
     * @return for JSON structured logs, choose the detail level of the logs your application sends to CloudWatch when using supported logging libraries.
     * 
     */
    public Optional<String> applicationLogLevel() {
        return Optional.ofNullable(this.applicationLogLevel);
    }
    /**
     * @return select between `Text` and structured `JSON` format for your function&#39;s logs.
     * 
     */
    public String logFormat() {
        return this.logFormat;
    }
    /**
     * @return the CloudWatch log group your function sends logs to.
     * 
     */
    public Optional<String> logGroup() {
        return Optional.ofNullable(this.logGroup);
    }
    /**
     * @return for JSON structured logs, choose the detail level of the Lambda platform event logs sent to CloudWatch, such as `ERROR`, `DEBUG`, or `INFO`.
     * 
     */
    public Optional<String> systemLogLevel() {
        return Optional.ofNullable(this.systemLogLevel);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FunctionLoggingConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String applicationLogLevel;
        private String logFormat;
        private @Nullable String logGroup;
        private @Nullable String systemLogLevel;
        public Builder() {}
        public Builder(FunctionLoggingConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applicationLogLevel = defaults.applicationLogLevel;
    	      this.logFormat = defaults.logFormat;
    	      this.logGroup = defaults.logGroup;
    	      this.systemLogLevel = defaults.systemLogLevel;
        }

        @CustomType.Setter
        public Builder applicationLogLevel(@Nullable String applicationLogLevel) {

            this.applicationLogLevel = applicationLogLevel;
            return this;
        }
        @CustomType.Setter
        public Builder logFormat(String logFormat) {
            if (logFormat == null) {
              throw new MissingRequiredPropertyException("FunctionLoggingConfig", "logFormat");
            }
            this.logFormat = logFormat;
            return this;
        }
        @CustomType.Setter
        public Builder logGroup(@Nullable String logGroup) {

            this.logGroup = logGroup;
            return this;
        }
        @CustomType.Setter
        public Builder systemLogLevel(@Nullable String systemLogLevel) {

            this.systemLogLevel = systemLogLevel;
            return this;
        }
        public FunctionLoggingConfig build() {
            final var _resultValue = new FunctionLoggingConfig();
            _resultValue.applicationLogLevel = applicationLogLevel;
            _resultValue.logFormat = logFormat;
            _resultValue.logGroup = logGroup;
            _resultValue.systemLogLevel = systemLogLevel;
            return _resultValue;
        }
    }
}
