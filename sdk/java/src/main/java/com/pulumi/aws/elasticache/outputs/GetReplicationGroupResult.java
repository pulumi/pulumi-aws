// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.elasticache.outputs;

import com.pulumi.aws.elasticache.outputs.GetReplicationGroupLogDeliveryConfiguration;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetReplicationGroupResult {
    /**
     * @return ARN of the created ElastiCache Replication Group.
     * 
     */
    private @Nullable String arn;
    /**
     * @return Whether an AuthToken (password) is enabled.
     * 
     */
    private @Nullable Boolean authTokenEnabled;
    /**
     * @return A flag whether a read-only replica will be automatically promoted to read/write primary if the existing primary fails.
     * 
     */
    private @Nullable Boolean automaticFailoverEnabled;
    /**
     * @return The configuration endpoint address to allow host discovery.
     * 
     */
    private @Nullable String configurationEndpointAddress;
    /**
     * @return Description of the replication group.
     * 
     */
    private @Nullable String description;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private @Nullable String id;
    /**
     * @return Redis [SLOWLOG](https://redis.io/commands/slowlog) or Redis [Engine Log](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Log_Delivery.html#Log_contents-engine-log) delivery settings.
     * 
     */
    private @Nullable List<GetReplicationGroupLogDeliveryConfiguration> logDeliveryConfigurations;
    /**
     * @return Identifiers of all the nodes that are part of this replication group.
     * 
     */
    private @Nullable List<String> memberClusters;
    /**
     * @return Whether Multi-AZ Support is enabled for the replication group.
     * 
     */
    private @Nullable Boolean multiAzEnabled;
    /**
     * @return The cluster node type.
     * 
     */
    private @Nullable String nodeType;
    /**
     * @return The number of cache clusters that the replication group has.
     * 
     */
    private @Nullable Integer numCacheClusters;
    /**
     * @return Number of node groups (shards) for the replication group.
     * 
     */
    private @Nullable Integer numNodeGroups;
    /**
     * @return The port number on which the configuration endpoint will accept connections.
     * 
     */
    private @Nullable Integer port;
    /**
     * @return The endpoint of the primary node in this node group (shard).
     * 
     */
    private @Nullable String primaryEndpointAddress;
    /**
     * @return The endpoint of the reader node in this node group (shard).
     * 
     */
    private @Nullable String readerEndpointAddress;
    /**
     * @return Number of replica nodes in each node group.
     * 
     */
    private @Nullable Integer replicasPerNodeGroup;
    private String replicationGroupId;
    /**
     * @return The number of days for which ElastiCache retains automatic cache cluster snapshots before deleting them.
     * 
     */
    private @Nullable Integer snapshotRetentionLimit;
    /**
     * @return Daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard).
     * 
     */
    private @Nullable String snapshotWindow;

    private GetReplicationGroupResult() {}
    /**
     * @return ARN of the created ElastiCache Replication Group.
     * 
     */
    public Optional<String> arn() {
        return Optional.ofNullable(this.arn);
    }
    /**
     * @return Whether an AuthToken (password) is enabled.
     * 
     */
    public Optional<Boolean> authTokenEnabled() {
        return Optional.ofNullable(this.authTokenEnabled);
    }
    /**
     * @return A flag whether a read-only replica will be automatically promoted to read/write primary if the existing primary fails.
     * 
     */
    public Optional<Boolean> automaticFailoverEnabled() {
        return Optional.ofNullable(this.automaticFailoverEnabled);
    }
    /**
     * @return The configuration endpoint address to allow host discovery.
     * 
     */
    public Optional<String> configurationEndpointAddress() {
        return Optional.ofNullable(this.configurationEndpointAddress);
    }
    /**
     * @return Description of the replication group.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Redis [SLOWLOG](https://redis.io/commands/slowlog) or Redis [Engine Log](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Log_Delivery.html#Log_contents-engine-log) delivery settings.
     * 
     */
    public List<GetReplicationGroupLogDeliveryConfiguration> logDeliveryConfigurations() {
        return this.logDeliveryConfigurations == null ? List.of() : this.logDeliveryConfigurations;
    }
    /**
     * @return Identifiers of all the nodes that are part of this replication group.
     * 
     */
    public List<String> memberClusters() {
        return this.memberClusters == null ? List.of() : this.memberClusters;
    }
    /**
     * @return Whether Multi-AZ Support is enabled for the replication group.
     * 
     */
    public Optional<Boolean> multiAzEnabled() {
        return Optional.ofNullable(this.multiAzEnabled);
    }
    /**
     * @return The cluster node type.
     * 
     */
    public Optional<String> nodeType() {
        return Optional.ofNullable(this.nodeType);
    }
    /**
     * @return The number of cache clusters that the replication group has.
     * 
     */
    public Optional<Integer> numCacheClusters() {
        return Optional.ofNullable(this.numCacheClusters);
    }
    /**
     * @return Number of node groups (shards) for the replication group.
     * 
     */
    public Optional<Integer> numNodeGroups() {
        return Optional.ofNullable(this.numNodeGroups);
    }
    /**
     * @return The port number on which the configuration endpoint will accept connections.
     * 
     */
    public Optional<Integer> port() {
        return Optional.ofNullable(this.port);
    }
    /**
     * @return The endpoint of the primary node in this node group (shard).
     * 
     */
    public Optional<String> primaryEndpointAddress() {
        return Optional.ofNullable(this.primaryEndpointAddress);
    }
    /**
     * @return The endpoint of the reader node in this node group (shard).
     * 
     */
    public Optional<String> readerEndpointAddress() {
        return Optional.ofNullable(this.readerEndpointAddress);
    }
    /**
     * @return Number of replica nodes in each node group.
     * 
     */
    public Optional<Integer> replicasPerNodeGroup() {
        return Optional.ofNullable(this.replicasPerNodeGroup);
    }
    public String replicationGroupId() {
        return this.replicationGroupId;
    }
    /**
     * @return The number of days for which ElastiCache retains automatic cache cluster snapshots before deleting them.
     * 
     */
    public Optional<Integer> snapshotRetentionLimit() {
        return Optional.ofNullable(this.snapshotRetentionLimit);
    }
    /**
     * @return Daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard).
     * 
     */
    public Optional<String> snapshotWindow() {
        return Optional.ofNullable(this.snapshotWindow);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetReplicationGroupResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String arn;
        private @Nullable Boolean authTokenEnabled;
        private @Nullable Boolean automaticFailoverEnabled;
        private @Nullable String configurationEndpointAddress;
        private @Nullable String description;
        private @Nullable String id;
        private @Nullable List<GetReplicationGroupLogDeliveryConfiguration> logDeliveryConfigurations;
        private @Nullable List<String> memberClusters;
        private @Nullable Boolean multiAzEnabled;
        private @Nullable String nodeType;
        private @Nullable Integer numCacheClusters;
        private @Nullable Integer numNodeGroups;
        private @Nullable Integer port;
        private @Nullable String primaryEndpointAddress;
        private @Nullable String readerEndpointAddress;
        private @Nullable Integer replicasPerNodeGroup;
        private String replicationGroupId;
        private @Nullable Integer snapshotRetentionLimit;
        private @Nullable String snapshotWindow;
        public Builder() {}
        public Builder(GetReplicationGroupResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.authTokenEnabled = defaults.authTokenEnabled;
    	      this.automaticFailoverEnabled = defaults.automaticFailoverEnabled;
    	      this.configurationEndpointAddress = defaults.configurationEndpointAddress;
    	      this.description = defaults.description;
    	      this.id = defaults.id;
    	      this.logDeliveryConfigurations = defaults.logDeliveryConfigurations;
    	      this.memberClusters = defaults.memberClusters;
    	      this.multiAzEnabled = defaults.multiAzEnabled;
    	      this.nodeType = defaults.nodeType;
    	      this.numCacheClusters = defaults.numCacheClusters;
    	      this.numNodeGroups = defaults.numNodeGroups;
    	      this.port = defaults.port;
    	      this.primaryEndpointAddress = defaults.primaryEndpointAddress;
    	      this.readerEndpointAddress = defaults.readerEndpointAddress;
    	      this.replicasPerNodeGroup = defaults.replicasPerNodeGroup;
    	      this.replicationGroupId = defaults.replicationGroupId;
    	      this.snapshotRetentionLimit = defaults.snapshotRetentionLimit;
    	      this.snapshotWindow = defaults.snapshotWindow;
        }

        @CustomType.Setter
        public Builder arn(@Nullable String arn) {
            this.arn = arn;
            return this;
        }
        @CustomType.Setter
        public Builder authTokenEnabled(@Nullable Boolean authTokenEnabled) {
            this.authTokenEnabled = authTokenEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder automaticFailoverEnabled(@Nullable Boolean automaticFailoverEnabled) {
            this.automaticFailoverEnabled = automaticFailoverEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder configurationEndpointAddress(@Nullable String configurationEndpointAddress) {
            this.configurationEndpointAddress = configurationEndpointAddress;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder logDeliveryConfigurations(@Nullable List<GetReplicationGroupLogDeliveryConfiguration> logDeliveryConfigurations) {
            this.logDeliveryConfigurations = logDeliveryConfigurations;
            return this;
        }
        public Builder logDeliveryConfigurations(GetReplicationGroupLogDeliveryConfiguration... logDeliveryConfigurations) {
            return logDeliveryConfigurations(List.of(logDeliveryConfigurations));
        }
        @CustomType.Setter
        public Builder memberClusters(@Nullable List<String> memberClusters) {
            this.memberClusters = memberClusters;
            return this;
        }
        public Builder memberClusters(String... memberClusters) {
            return memberClusters(List.of(memberClusters));
        }
        @CustomType.Setter
        public Builder multiAzEnabled(@Nullable Boolean multiAzEnabled) {
            this.multiAzEnabled = multiAzEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder nodeType(@Nullable String nodeType) {
            this.nodeType = nodeType;
            return this;
        }
        @CustomType.Setter
        public Builder numCacheClusters(@Nullable Integer numCacheClusters) {
            this.numCacheClusters = numCacheClusters;
            return this;
        }
        @CustomType.Setter
        public Builder numNodeGroups(@Nullable Integer numNodeGroups) {
            this.numNodeGroups = numNodeGroups;
            return this;
        }
        @CustomType.Setter
        public Builder port(@Nullable Integer port) {
            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder primaryEndpointAddress(@Nullable String primaryEndpointAddress) {
            this.primaryEndpointAddress = primaryEndpointAddress;
            return this;
        }
        @CustomType.Setter
        public Builder readerEndpointAddress(@Nullable String readerEndpointAddress) {
            this.readerEndpointAddress = readerEndpointAddress;
            return this;
        }
        @CustomType.Setter
        public Builder replicasPerNodeGroup(@Nullable Integer replicasPerNodeGroup) {
            this.replicasPerNodeGroup = replicasPerNodeGroup;
            return this;
        }
        @CustomType.Setter
        public Builder replicationGroupId(String replicationGroupId) {
            this.replicationGroupId = Objects.requireNonNull(replicationGroupId);
            return this;
        }
        @CustomType.Setter
        public Builder snapshotRetentionLimit(@Nullable Integer snapshotRetentionLimit) {
            this.snapshotRetentionLimit = snapshotRetentionLimit;
            return this;
        }
        @CustomType.Setter
        public Builder snapshotWindow(@Nullable String snapshotWindow) {
            this.snapshotWindow = snapshotWindow;
            return this;
        }
        public GetReplicationGroupResult build() {
            final var o = new GetReplicationGroupResult();
            o.arn = arn;
            o.authTokenEnabled = authTokenEnabled;
            o.automaticFailoverEnabled = automaticFailoverEnabled;
            o.configurationEndpointAddress = configurationEndpointAddress;
            o.description = description;
            o.id = id;
            o.logDeliveryConfigurations = logDeliveryConfigurations;
            o.memberClusters = memberClusters;
            o.multiAzEnabled = multiAzEnabled;
            o.nodeType = nodeType;
            o.numCacheClusters = numCacheClusters;
            o.numNodeGroups = numNodeGroups;
            o.port = port;
            o.primaryEndpointAddress = primaryEndpointAddress;
            o.readerEndpointAddress = readerEndpointAddress;
            o.replicasPerNodeGroup = replicasPerNodeGroup;
            o.replicationGroupId = replicationGroupId;
            o.snapshotRetentionLimit = snapshotRetentionLimit;
            o.snapshotWindow = snapshotWindow;
            return o;
        }
    }
}
