// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.rbin.inputs;

import com.pulumi.aws.rbin.inputs.RuleLockConfigurationArgs;
import com.pulumi.aws.rbin.inputs.RuleResourceTagArgs;
import com.pulumi.aws.rbin.inputs.RuleRetentionPeriodArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RuleState extends com.pulumi.resources.ResourceArgs {

    public static final RuleState Empty = new RuleState();

    @Import(name="arn")
    private @Nullable Output<String> arn;

    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    /**
     * The retention rule description.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The retention rule description.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Information about the retention rule lock configuration. See `lock_configuration` below.
     * 
     */
    @Import(name="lockConfiguration")
    private @Nullable Output<RuleLockConfigurationArgs> lockConfiguration;

    /**
     * @return Information about the retention rule lock configuration. See `lock_configuration` below.
     * 
     */
    public Optional<Output<RuleLockConfigurationArgs>> lockConfiguration() {
        return Optional.ofNullable(this.lockConfiguration);
    }

    /**
     * (Timestamp) The date and time at which the unlock delay is set to expire. Only returned for retention rules that have been unlocked and that are still within the unlock delay period.
     * 
     */
    @Import(name="lockEndTime")
    private @Nullable Output<String> lockEndTime;

    /**
     * @return (Timestamp) The date and time at which the unlock delay is set to expire. Only returned for retention rules that have been unlocked and that are still within the unlock delay period.
     * 
     */
    public Optional<Output<String>> lockEndTime() {
        return Optional.ofNullable(this.lockEndTime);
    }

    /**
     * (Optional) The lock state of the retention rules to list. Only retention rules with the specified lock state are returned. Valid values are `locked`, `pending_unlock`, `unlocked`.
     * 
     */
    @Import(name="lockState")
    private @Nullable Output<String> lockState;

    /**
     * @return (Optional) The lock state of the retention rules to list. Only retention rules with the specified lock state are returned. Valid values are `locked`, `pending_unlock`, `unlocked`.
     * 
     */
    public Optional<Output<String>> lockState() {
        return Optional.ofNullable(this.lockState);
    }

    /**
     * Specifies the resource tags to use to identify resources that are to be retained by a tag-level retention rule. See `resource_tags` below.
     * 
     */
    @Import(name="resourceTags")
    private @Nullable Output<List<RuleResourceTagArgs>> resourceTags;

    /**
     * @return Specifies the resource tags to use to identify resources that are to be retained by a tag-level retention rule. See `resource_tags` below.
     * 
     */
    public Optional<Output<List<RuleResourceTagArgs>>> resourceTags() {
        return Optional.ofNullable(this.resourceTags);
    }

    /**
     * The resource type to be retained by the retention rule. Valid values are `EBS_SNAPSHOT` and `EC2_IMAGE`.
     * 
     */
    @Import(name="resourceType")
    private @Nullable Output<String> resourceType;

    /**
     * @return The resource type to be retained by the retention rule. Valid values are `EBS_SNAPSHOT` and `EC2_IMAGE`.
     * 
     */
    public Optional<Output<String>> resourceType() {
        return Optional.ofNullable(this.resourceType);
    }

    /**
     * Information about the retention period for which the retention rule is to retain resources. See `retention_period` below.
     * 
     */
    @Import(name="retentionPeriod")
    private @Nullable Output<RuleRetentionPeriodArgs> retentionPeriod;

    /**
     * @return Information about the retention period for which the retention rule is to retain resources. See `retention_period` below.
     * 
     */
    public Optional<Output<RuleRetentionPeriodArgs>> retentionPeriod() {
        return Optional.ofNullable(this.retentionPeriod);
    }

    /**
     * (String) The state of the retention rule. Only retention rules that are in the `available` state retain resources. Valid values include `pending` and `available`.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return (String) The state of the retention rule. Only retention rules that are in the `available` state retain resources. Valid values include `pending` and `available`.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    private RuleState() {}

    private RuleState(RuleState $) {
        this.arn = $.arn;
        this.description = $.description;
        this.lockConfiguration = $.lockConfiguration;
        this.lockEndTime = $.lockEndTime;
        this.lockState = $.lockState;
        this.resourceTags = $.resourceTags;
        this.resourceType = $.resourceType;
        this.retentionPeriod = $.retentionPeriod;
        this.status = $.status;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RuleState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RuleState $;

        public Builder() {
            $ = new RuleState();
        }

        public Builder(RuleState defaults) {
            $ = new RuleState(Objects.requireNonNull(defaults));
        }

        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        /**
         * @param description The retention rule description.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The retention rule description.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param lockConfiguration Information about the retention rule lock configuration. See `lock_configuration` below.
         * 
         * @return builder
         * 
         */
        public Builder lockConfiguration(@Nullable Output<RuleLockConfigurationArgs> lockConfiguration) {
            $.lockConfiguration = lockConfiguration;
            return this;
        }

        /**
         * @param lockConfiguration Information about the retention rule lock configuration. See `lock_configuration` below.
         * 
         * @return builder
         * 
         */
        public Builder lockConfiguration(RuleLockConfigurationArgs lockConfiguration) {
            return lockConfiguration(Output.of(lockConfiguration));
        }

        /**
         * @param lockEndTime (Timestamp) The date and time at which the unlock delay is set to expire. Only returned for retention rules that have been unlocked and that are still within the unlock delay period.
         * 
         * @return builder
         * 
         */
        public Builder lockEndTime(@Nullable Output<String> lockEndTime) {
            $.lockEndTime = lockEndTime;
            return this;
        }

        /**
         * @param lockEndTime (Timestamp) The date and time at which the unlock delay is set to expire. Only returned for retention rules that have been unlocked and that are still within the unlock delay period.
         * 
         * @return builder
         * 
         */
        public Builder lockEndTime(String lockEndTime) {
            return lockEndTime(Output.of(lockEndTime));
        }

        /**
         * @param lockState (Optional) The lock state of the retention rules to list. Only retention rules with the specified lock state are returned. Valid values are `locked`, `pending_unlock`, `unlocked`.
         * 
         * @return builder
         * 
         */
        public Builder lockState(@Nullable Output<String> lockState) {
            $.lockState = lockState;
            return this;
        }

        /**
         * @param lockState (Optional) The lock state of the retention rules to list. Only retention rules with the specified lock state are returned. Valid values are `locked`, `pending_unlock`, `unlocked`.
         * 
         * @return builder
         * 
         */
        public Builder lockState(String lockState) {
            return lockState(Output.of(lockState));
        }

        /**
         * @param resourceTags Specifies the resource tags to use to identify resources that are to be retained by a tag-level retention rule. See `resource_tags` below.
         * 
         * @return builder
         * 
         */
        public Builder resourceTags(@Nullable Output<List<RuleResourceTagArgs>> resourceTags) {
            $.resourceTags = resourceTags;
            return this;
        }

        /**
         * @param resourceTags Specifies the resource tags to use to identify resources that are to be retained by a tag-level retention rule. See `resource_tags` below.
         * 
         * @return builder
         * 
         */
        public Builder resourceTags(List<RuleResourceTagArgs> resourceTags) {
            return resourceTags(Output.of(resourceTags));
        }

        /**
         * @param resourceTags Specifies the resource tags to use to identify resources that are to be retained by a tag-level retention rule. See `resource_tags` below.
         * 
         * @return builder
         * 
         */
        public Builder resourceTags(RuleResourceTagArgs... resourceTags) {
            return resourceTags(List.of(resourceTags));
        }

        /**
         * @param resourceType The resource type to be retained by the retention rule. Valid values are `EBS_SNAPSHOT` and `EC2_IMAGE`.
         * 
         * @return builder
         * 
         */
        public Builder resourceType(@Nullable Output<String> resourceType) {
            $.resourceType = resourceType;
            return this;
        }

        /**
         * @param resourceType The resource type to be retained by the retention rule. Valid values are `EBS_SNAPSHOT` and `EC2_IMAGE`.
         * 
         * @return builder
         * 
         */
        public Builder resourceType(String resourceType) {
            return resourceType(Output.of(resourceType));
        }

        /**
         * @param retentionPeriod Information about the retention period for which the retention rule is to retain resources. See `retention_period` below.
         * 
         * @return builder
         * 
         */
        public Builder retentionPeriod(@Nullable Output<RuleRetentionPeriodArgs> retentionPeriod) {
            $.retentionPeriod = retentionPeriod;
            return this;
        }

        /**
         * @param retentionPeriod Information about the retention period for which the retention rule is to retain resources. See `retention_period` below.
         * 
         * @return builder
         * 
         */
        public Builder retentionPeriod(RuleRetentionPeriodArgs retentionPeriod) {
            return retentionPeriod(Output.of(retentionPeriod));
        }

        /**
         * @param status (String) The state of the retention rule. Only retention rules that are in the `available` state retain resources. Valid values include `pending` and `available`.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status (String) The state of the retention rule. Only retention rules that are in the `available` state retain resources. Valid values include `pending` and `available`.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        public RuleState build() {
            return $;
        }
    }

}
