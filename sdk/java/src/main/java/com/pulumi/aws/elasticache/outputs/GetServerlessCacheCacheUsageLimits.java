// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.elasticache.outputs;

import com.pulumi.aws.elasticache.outputs.GetServerlessCacheCacheUsageLimitsDataStorage;
import com.pulumi.aws.elasticache.outputs.GetServerlessCacheCacheUsageLimitsEcpuPerSecond;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.util.Objects;

@CustomType
public final class GetServerlessCacheCacheUsageLimits {
    /**
     * @return The maximum data storage limit in the cache, expressed in Gigabytes. See `data_storage` Block for details.
     * 
     */
    private GetServerlessCacheCacheUsageLimitsDataStorage dataStorage;
    /**
     * @return The configured number of ElastiCache Processing Units (ECPU) the cache can consume per second. See `ecpu_per_second` Block for details.
     * 
     */
    private GetServerlessCacheCacheUsageLimitsEcpuPerSecond ecpuPerSecond;

    private GetServerlessCacheCacheUsageLimits() {}
    /**
     * @return The maximum data storage limit in the cache, expressed in Gigabytes. See `data_storage` Block for details.
     * 
     */
    public GetServerlessCacheCacheUsageLimitsDataStorage dataStorage() {
        return this.dataStorage;
    }
    /**
     * @return The configured number of ElastiCache Processing Units (ECPU) the cache can consume per second. See `ecpu_per_second` Block for details.
     * 
     */
    public GetServerlessCacheCacheUsageLimitsEcpuPerSecond ecpuPerSecond() {
        return this.ecpuPerSecond;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServerlessCacheCacheUsageLimits defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private GetServerlessCacheCacheUsageLimitsDataStorage dataStorage;
        private GetServerlessCacheCacheUsageLimitsEcpuPerSecond ecpuPerSecond;
        public Builder() {}
        public Builder(GetServerlessCacheCacheUsageLimits defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dataStorage = defaults.dataStorage;
    	      this.ecpuPerSecond = defaults.ecpuPerSecond;
        }

        @CustomType.Setter
        public Builder dataStorage(GetServerlessCacheCacheUsageLimitsDataStorage dataStorage) {
            if (dataStorage == null) {
              throw new MissingRequiredPropertyException("GetServerlessCacheCacheUsageLimits", "dataStorage");
            }
            this.dataStorage = dataStorage;
            return this;
        }
        @CustomType.Setter
        public Builder ecpuPerSecond(GetServerlessCacheCacheUsageLimitsEcpuPerSecond ecpuPerSecond) {
            if (ecpuPerSecond == null) {
              throw new MissingRequiredPropertyException("GetServerlessCacheCacheUsageLimits", "ecpuPerSecond");
            }
            this.ecpuPerSecond = ecpuPerSecond;
            return this;
        }
        public GetServerlessCacheCacheUsageLimits build() {
            final var _resultValue = new GetServerlessCacheCacheUsageLimits();
            _resultValue.dataStorage = dataStorage;
            _resultValue.ecpuPerSecond = ecpuPerSecond;
            return _resultValue;
        }
    }
}
