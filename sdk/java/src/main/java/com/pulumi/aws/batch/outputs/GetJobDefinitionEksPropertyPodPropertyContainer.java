// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.batch.outputs;

import com.pulumi.aws.batch.outputs.GetJobDefinitionEksPropertyPodPropertyContainerEnv;
import com.pulumi.aws.batch.outputs.GetJobDefinitionEksPropertyPodPropertyContainerResource;
import com.pulumi.aws.batch.outputs.GetJobDefinitionEksPropertyPodPropertyContainerSecurityContext;
import com.pulumi.aws.batch.outputs.GetJobDefinitionEksPropertyPodPropertyContainerVolumeMount;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetJobDefinitionEksPropertyPodPropertyContainer {
    /**
     * @return An array of arguments to the entrypoint
     * 
     */
    private List<String> args;
    /**
     * @return The command that&#39;s passed to the container.
     * 
     */
    private List<String> commands;
    /**
     * @return The environment variables to pass to a container.  Array of EksContainerEnvironmentVariable objects.
     * 
     */
    private List<GetJobDefinitionEksPropertyPodPropertyContainerEnv> envs;
    /**
     * @return The image used to start a container.
     * 
     */
    private String image;
    /**
     * @return The image pull policy for the container.
     * 
     */
    private String imagePullPolicy;
    /**
     * @return The name of the job definition to register. It can be up to 128 letters long. It can contain uppercase and lowercase letters, numbers, hyphens (-), and underscores (_).
     * 
     */
    private String name;
    /**
     * @return The type and amount of resources to assign to a container.
     * 
     */
    private List<GetJobDefinitionEksPropertyPodPropertyContainerResource> resources;
    /**
     * @return The security context for a job.
     * 
     */
    private List<GetJobDefinitionEksPropertyPodPropertyContainerSecurityContext> securityContexts;
    /**
     * @return The volume mounts for the container.
     * 
     */
    private List<GetJobDefinitionEksPropertyPodPropertyContainerVolumeMount> volumeMounts;

    private GetJobDefinitionEksPropertyPodPropertyContainer() {}
    /**
     * @return An array of arguments to the entrypoint
     * 
     */
    public List<String> args() {
        return this.args;
    }
    /**
     * @return The command that&#39;s passed to the container.
     * 
     */
    public List<String> commands() {
        return this.commands;
    }
    /**
     * @return The environment variables to pass to a container.  Array of EksContainerEnvironmentVariable objects.
     * 
     */
    public List<GetJobDefinitionEksPropertyPodPropertyContainerEnv> envs() {
        return this.envs;
    }
    /**
     * @return The image used to start a container.
     * 
     */
    public String image() {
        return this.image;
    }
    /**
     * @return The image pull policy for the container.
     * 
     */
    public String imagePullPolicy() {
        return this.imagePullPolicy;
    }
    /**
     * @return The name of the job definition to register. It can be up to 128 letters long. It can contain uppercase and lowercase letters, numbers, hyphens (-), and underscores (_).
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The type and amount of resources to assign to a container.
     * 
     */
    public List<GetJobDefinitionEksPropertyPodPropertyContainerResource> resources() {
        return this.resources;
    }
    /**
     * @return The security context for a job.
     * 
     */
    public List<GetJobDefinitionEksPropertyPodPropertyContainerSecurityContext> securityContexts() {
        return this.securityContexts;
    }
    /**
     * @return The volume mounts for the container.
     * 
     */
    public List<GetJobDefinitionEksPropertyPodPropertyContainerVolumeMount> volumeMounts() {
        return this.volumeMounts;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetJobDefinitionEksPropertyPodPropertyContainer defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> args;
        private List<String> commands;
        private List<GetJobDefinitionEksPropertyPodPropertyContainerEnv> envs;
        private String image;
        private String imagePullPolicy;
        private String name;
        private List<GetJobDefinitionEksPropertyPodPropertyContainerResource> resources;
        private List<GetJobDefinitionEksPropertyPodPropertyContainerSecurityContext> securityContexts;
        private List<GetJobDefinitionEksPropertyPodPropertyContainerVolumeMount> volumeMounts;
        public Builder() {}
        public Builder(GetJobDefinitionEksPropertyPodPropertyContainer defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.args = defaults.args;
    	      this.commands = defaults.commands;
    	      this.envs = defaults.envs;
    	      this.image = defaults.image;
    	      this.imagePullPolicy = defaults.imagePullPolicy;
    	      this.name = defaults.name;
    	      this.resources = defaults.resources;
    	      this.securityContexts = defaults.securityContexts;
    	      this.volumeMounts = defaults.volumeMounts;
        }

        @CustomType.Setter
        public Builder args(List<String> args) {
            if (args == null) {
              throw new MissingRequiredPropertyException("GetJobDefinitionEksPropertyPodPropertyContainer", "args");
            }
            this.args = args;
            return this;
        }
        public Builder args(String... args) {
            return args(List.of(args));
        }
        @CustomType.Setter
        public Builder commands(List<String> commands) {
            if (commands == null) {
              throw new MissingRequiredPropertyException("GetJobDefinitionEksPropertyPodPropertyContainer", "commands");
            }
            this.commands = commands;
            return this;
        }
        public Builder commands(String... commands) {
            return commands(List.of(commands));
        }
        @CustomType.Setter
        public Builder envs(List<GetJobDefinitionEksPropertyPodPropertyContainerEnv> envs) {
            if (envs == null) {
              throw new MissingRequiredPropertyException("GetJobDefinitionEksPropertyPodPropertyContainer", "envs");
            }
            this.envs = envs;
            return this;
        }
        public Builder envs(GetJobDefinitionEksPropertyPodPropertyContainerEnv... envs) {
            return envs(List.of(envs));
        }
        @CustomType.Setter
        public Builder image(String image) {
            if (image == null) {
              throw new MissingRequiredPropertyException("GetJobDefinitionEksPropertyPodPropertyContainer", "image");
            }
            this.image = image;
            return this;
        }
        @CustomType.Setter
        public Builder imagePullPolicy(String imagePullPolicy) {
            if (imagePullPolicy == null) {
              throw new MissingRequiredPropertyException("GetJobDefinitionEksPropertyPodPropertyContainer", "imagePullPolicy");
            }
            this.imagePullPolicy = imagePullPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetJobDefinitionEksPropertyPodPropertyContainer", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder resources(List<GetJobDefinitionEksPropertyPodPropertyContainerResource> resources) {
            if (resources == null) {
              throw new MissingRequiredPropertyException("GetJobDefinitionEksPropertyPodPropertyContainer", "resources");
            }
            this.resources = resources;
            return this;
        }
        public Builder resources(GetJobDefinitionEksPropertyPodPropertyContainerResource... resources) {
            return resources(List.of(resources));
        }
        @CustomType.Setter
        public Builder securityContexts(List<GetJobDefinitionEksPropertyPodPropertyContainerSecurityContext> securityContexts) {
            if (securityContexts == null) {
              throw new MissingRequiredPropertyException("GetJobDefinitionEksPropertyPodPropertyContainer", "securityContexts");
            }
            this.securityContexts = securityContexts;
            return this;
        }
        public Builder securityContexts(GetJobDefinitionEksPropertyPodPropertyContainerSecurityContext... securityContexts) {
            return securityContexts(List.of(securityContexts));
        }
        @CustomType.Setter
        public Builder volumeMounts(List<GetJobDefinitionEksPropertyPodPropertyContainerVolumeMount> volumeMounts) {
            if (volumeMounts == null) {
              throw new MissingRequiredPropertyException("GetJobDefinitionEksPropertyPodPropertyContainer", "volumeMounts");
            }
            this.volumeMounts = volumeMounts;
            return this;
        }
        public Builder volumeMounts(GetJobDefinitionEksPropertyPodPropertyContainerVolumeMount... volumeMounts) {
            return volumeMounts(List.of(volumeMounts));
        }
        public GetJobDefinitionEksPropertyPodPropertyContainer build() {
            final var _resultValue = new GetJobDefinitionEksPropertyPodPropertyContainer();
            _resultValue.args = args;
            _resultValue.commands = commands;
            _resultValue.envs = envs;
            _resultValue.image = image;
            _resultValue.imagePullPolicy = imagePullPolicy;
            _resultValue.name = name;
            _resultValue.resources = resources;
            _resultValue.securityContexts = securityContexts;
            _resultValue.volumeMounts = volumeMounts;
            return _resultValue;
        }
    }
}
