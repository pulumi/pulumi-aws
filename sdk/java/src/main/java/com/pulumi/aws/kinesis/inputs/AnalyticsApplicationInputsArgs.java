// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.kinesis.inputs;

import com.pulumi.aws.kinesis.inputs.AnalyticsApplicationInputsKinesisFirehoseArgs;
import com.pulumi.aws.kinesis.inputs.AnalyticsApplicationInputsKinesisStreamArgs;
import com.pulumi.aws.kinesis.inputs.AnalyticsApplicationInputsParallelismArgs;
import com.pulumi.aws.kinesis.inputs.AnalyticsApplicationInputsProcessingConfigurationArgs;
import com.pulumi.aws.kinesis.inputs.AnalyticsApplicationInputsSchemaArgs;
import com.pulumi.aws.kinesis.inputs.AnalyticsApplicationInputsStartingPositionConfigurationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AnalyticsApplicationInputsArgs extends com.pulumi.resources.ResourceArgs {

    public static final AnalyticsApplicationInputsArgs Empty = new AnalyticsApplicationInputsArgs();

    @Import(name="id")
    private @Nullable Output<String> id;

    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    @Import(name="kinesisFirehose")
    private @Nullable Output<AnalyticsApplicationInputsKinesisFirehoseArgs> kinesisFirehose;

    public Optional<Output<AnalyticsApplicationInputsKinesisFirehoseArgs>> kinesisFirehose() {
        return Optional.ofNullable(this.kinesisFirehose);
    }

    @Import(name="kinesisStream")
    private @Nullable Output<AnalyticsApplicationInputsKinesisStreamArgs> kinesisStream;

    public Optional<Output<AnalyticsApplicationInputsKinesisStreamArgs>> kinesisStream() {
        return Optional.ofNullable(this.kinesisStream);
    }

    @Import(name="namePrefix", required=true)
    private Output<String> namePrefix;

    public Output<String> namePrefix() {
        return this.namePrefix;
    }

    @Import(name="parallelism")
    private @Nullable Output<AnalyticsApplicationInputsParallelismArgs> parallelism;

    public Optional<Output<AnalyticsApplicationInputsParallelismArgs>> parallelism() {
        return Optional.ofNullable(this.parallelism);
    }

    @Import(name="processingConfiguration")
    private @Nullable Output<AnalyticsApplicationInputsProcessingConfigurationArgs> processingConfiguration;

    public Optional<Output<AnalyticsApplicationInputsProcessingConfigurationArgs>> processingConfiguration() {
        return Optional.ofNullable(this.processingConfiguration);
    }

    @Import(name="schema", required=true)
    private Output<AnalyticsApplicationInputsSchemaArgs> schema;

    public Output<AnalyticsApplicationInputsSchemaArgs> schema() {
        return this.schema;
    }

    @Import(name="startingPositionConfigurations")
    private @Nullable Output<List<AnalyticsApplicationInputsStartingPositionConfigurationArgs>> startingPositionConfigurations;

    public Optional<Output<List<AnalyticsApplicationInputsStartingPositionConfigurationArgs>>> startingPositionConfigurations() {
        return Optional.ofNullable(this.startingPositionConfigurations);
    }

    @Import(name="streamNames")
    private @Nullable Output<List<String>> streamNames;

    public Optional<Output<List<String>>> streamNames() {
        return Optional.ofNullable(this.streamNames);
    }

    private AnalyticsApplicationInputsArgs() {}

    private AnalyticsApplicationInputsArgs(AnalyticsApplicationInputsArgs $) {
        this.id = $.id;
        this.kinesisFirehose = $.kinesisFirehose;
        this.kinesisStream = $.kinesisStream;
        this.namePrefix = $.namePrefix;
        this.parallelism = $.parallelism;
        this.processingConfiguration = $.processingConfiguration;
        this.schema = $.schema;
        this.startingPositionConfigurations = $.startingPositionConfigurations;
        this.streamNames = $.streamNames;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AnalyticsApplicationInputsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AnalyticsApplicationInputsArgs $;

        public Builder() {
            $ = new AnalyticsApplicationInputsArgs();
        }

        public Builder(AnalyticsApplicationInputsArgs defaults) {
            $ = new AnalyticsApplicationInputsArgs(Objects.requireNonNull(defaults));
        }

        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        public Builder id(String id) {
            return id(Output.of(id));
        }

        public Builder kinesisFirehose(@Nullable Output<AnalyticsApplicationInputsKinesisFirehoseArgs> kinesisFirehose) {
            $.kinesisFirehose = kinesisFirehose;
            return this;
        }

        public Builder kinesisFirehose(AnalyticsApplicationInputsKinesisFirehoseArgs kinesisFirehose) {
            return kinesisFirehose(Output.of(kinesisFirehose));
        }

        public Builder kinesisStream(@Nullable Output<AnalyticsApplicationInputsKinesisStreamArgs> kinesisStream) {
            $.kinesisStream = kinesisStream;
            return this;
        }

        public Builder kinesisStream(AnalyticsApplicationInputsKinesisStreamArgs kinesisStream) {
            return kinesisStream(Output.of(kinesisStream));
        }

        public Builder namePrefix(Output<String> namePrefix) {
            $.namePrefix = namePrefix;
            return this;
        }

        public Builder namePrefix(String namePrefix) {
            return namePrefix(Output.of(namePrefix));
        }

        public Builder parallelism(@Nullable Output<AnalyticsApplicationInputsParallelismArgs> parallelism) {
            $.parallelism = parallelism;
            return this;
        }

        public Builder parallelism(AnalyticsApplicationInputsParallelismArgs parallelism) {
            return parallelism(Output.of(parallelism));
        }

        public Builder processingConfiguration(@Nullable Output<AnalyticsApplicationInputsProcessingConfigurationArgs> processingConfiguration) {
            $.processingConfiguration = processingConfiguration;
            return this;
        }

        public Builder processingConfiguration(AnalyticsApplicationInputsProcessingConfigurationArgs processingConfiguration) {
            return processingConfiguration(Output.of(processingConfiguration));
        }

        public Builder schema(Output<AnalyticsApplicationInputsSchemaArgs> schema) {
            $.schema = schema;
            return this;
        }

        public Builder schema(AnalyticsApplicationInputsSchemaArgs schema) {
            return schema(Output.of(schema));
        }

        public Builder startingPositionConfigurations(@Nullable Output<List<AnalyticsApplicationInputsStartingPositionConfigurationArgs>> startingPositionConfigurations) {
            $.startingPositionConfigurations = startingPositionConfigurations;
            return this;
        }

        public Builder startingPositionConfigurations(List<AnalyticsApplicationInputsStartingPositionConfigurationArgs> startingPositionConfigurations) {
            return startingPositionConfigurations(Output.of(startingPositionConfigurations));
        }

        public Builder startingPositionConfigurations(AnalyticsApplicationInputsStartingPositionConfigurationArgs... startingPositionConfigurations) {
            return startingPositionConfigurations(List.of(startingPositionConfigurations));
        }

        public Builder streamNames(@Nullable Output<List<String>> streamNames) {
            $.streamNames = streamNames;
            return this;
        }

        public Builder streamNames(List<String> streamNames) {
            return streamNames(Output.of(streamNames));
        }

        public Builder streamNames(String... streamNames) {
            return streamNames(List.of(streamNames));
        }

        public AnalyticsApplicationInputsArgs build() {
            $.namePrefix = Objects.requireNonNull($.namePrefix, "expected parameter 'namePrefix' to be non-null");
            $.schema = Objects.requireNonNull($.schema, "expected parameter 'schema' to be non-null");
            return $;
        }
    }

}
