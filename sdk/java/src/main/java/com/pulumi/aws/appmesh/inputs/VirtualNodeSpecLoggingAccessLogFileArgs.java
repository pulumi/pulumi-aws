// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.appmesh.inputs;

import com.pulumi.aws.appmesh.inputs.VirtualNodeSpecLoggingAccessLogFileFormatArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VirtualNodeSpecLoggingAccessLogFileArgs extends com.pulumi.resources.ResourceArgs {

    public static final VirtualNodeSpecLoggingAccessLogFileArgs Empty = new VirtualNodeSpecLoggingAccessLogFileArgs();

    /**
     * The specified format for the logs.
     * 
     */
    @Import(name="format")
    private @Nullable Output<VirtualNodeSpecLoggingAccessLogFileFormatArgs> format;

    /**
     * @return The specified format for the logs.
     * 
     */
    public Optional<Output<VirtualNodeSpecLoggingAccessLogFileFormatArgs>> format() {
        return Optional.ofNullable(this.format);
    }

    /**
     * File path to write access logs to. You can use `/dev/stdout` to send access logs to standard out. Must be between 1 and 255 characters in length.
     * 
     */
    @Import(name="path", required=true)
    private Output<String> path;

    /**
     * @return File path to write access logs to. You can use `/dev/stdout` to send access logs to standard out. Must be between 1 and 255 characters in length.
     * 
     */
    public Output<String> path() {
        return this.path;
    }

    private VirtualNodeSpecLoggingAccessLogFileArgs() {}

    private VirtualNodeSpecLoggingAccessLogFileArgs(VirtualNodeSpecLoggingAccessLogFileArgs $) {
        this.format = $.format;
        this.path = $.path;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VirtualNodeSpecLoggingAccessLogFileArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VirtualNodeSpecLoggingAccessLogFileArgs $;

        public Builder() {
            $ = new VirtualNodeSpecLoggingAccessLogFileArgs();
        }

        public Builder(VirtualNodeSpecLoggingAccessLogFileArgs defaults) {
            $ = new VirtualNodeSpecLoggingAccessLogFileArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param format The specified format for the logs.
         * 
         * @return builder
         * 
         */
        public Builder format(@Nullable Output<VirtualNodeSpecLoggingAccessLogFileFormatArgs> format) {
            $.format = format;
            return this;
        }

        /**
         * @param format The specified format for the logs.
         * 
         * @return builder
         * 
         */
        public Builder format(VirtualNodeSpecLoggingAccessLogFileFormatArgs format) {
            return format(Output.of(format));
        }

        /**
         * @param path File path to write access logs to. You can use `/dev/stdout` to send access logs to standard out. Must be between 1 and 255 characters in length.
         * 
         * @return builder
         * 
         */
        public Builder path(Output<String> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path File path to write access logs to. You can use `/dev/stdout` to send access logs to standard out. Must be between 1 and 255 characters in length.
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            return path(Output.of(path));
        }

        public VirtualNodeSpecLoggingAccessLogFileArgs build() {
            $.path = Objects.requireNonNull($.path, "expected parameter 'path' to be non-null");
            return $;
        }
    }

}
