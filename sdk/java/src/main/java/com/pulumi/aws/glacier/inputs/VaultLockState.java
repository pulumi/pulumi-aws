// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.glacier.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VaultLockState extends com.pulumi.resources.ResourceArgs {

    public static final VaultLockState Empty = new VaultLockState();

    @Import(name="completeLock")
    private @Nullable Output<Boolean> completeLock;

    public Optional<Output<Boolean>> completeLock() {
        return Optional.ofNullable(this.completeLock);
    }

    @Import(name="ignoreDeletionError")
    private @Nullable Output<Boolean> ignoreDeletionError;

    public Optional<Output<Boolean>> ignoreDeletionError() {
        return Optional.ofNullable(this.ignoreDeletionError);
    }

    @Import(name="policy")
    private @Nullable Output<String> policy;

    public Optional<Output<String>> policy() {
        return Optional.ofNullable(this.policy);
    }

    @Import(name="vaultName")
    private @Nullable Output<String> vaultName;

    public Optional<Output<String>> vaultName() {
        return Optional.ofNullable(this.vaultName);
    }

    private VaultLockState() {}

    private VaultLockState(VaultLockState $) {
        this.completeLock = $.completeLock;
        this.ignoreDeletionError = $.ignoreDeletionError;
        this.policy = $.policy;
        this.vaultName = $.vaultName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VaultLockState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VaultLockState $;

        public Builder() {
            $ = new VaultLockState();
        }

        public Builder(VaultLockState defaults) {
            $ = new VaultLockState(Objects.requireNonNull(defaults));
        }

        public Builder completeLock(@Nullable Output<Boolean> completeLock) {
            $.completeLock = completeLock;
            return this;
        }

        public Builder completeLock(Boolean completeLock) {
            return completeLock(Output.of(completeLock));
        }

        public Builder ignoreDeletionError(@Nullable Output<Boolean> ignoreDeletionError) {
            $.ignoreDeletionError = ignoreDeletionError;
            return this;
        }

        public Builder ignoreDeletionError(Boolean ignoreDeletionError) {
            return ignoreDeletionError(Output.of(ignoreDeletionError));
        }

        public Builder policy(@Nullable Output<String> policy) {
            $.policy = policy;
            return this;
        }

        public Builder policy(String policy) {
            return policy(Output.of(policy));
        }

        public Builder vaultName(@Nullable Output<String> vaultName) {
            $.vaultName = vaultName;
            return this;
        }

        public Builder vaultName(String vaultName) {
            return vaultName(Output.of(vaultName));
        }

        public VaultLockState build() {
            return $;
        }
    }

}
