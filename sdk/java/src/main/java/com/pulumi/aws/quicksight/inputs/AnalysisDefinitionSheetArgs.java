// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.inputs;

import com.pulumi.aws.quicksight.inputs.AnalysisDefinitionSheetParameterControlArgs;
import com.pulumi.aws.quicksight.inputs.AnalysisDefinitionSheetSheetControlLayoutsArgs;
import com.pulumi.aws.quicksight.inputs.AnalysisDefinitionSheetTextBoxArgs;
import com.pulumi.aws.quicksight.inputs.FilterControlsArgs;
import com.pulumi.aws.quicksight.inputs.LayoutsArgs;
import com.pulumi.aws.quicksight.inputs.VisualsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AnalysisDefinitionSheetArgs extends com.pulumi.resources.ResourceArgs {

    public static final AnalysisDefinitionSheetArgs Empty = new AnalysisDefinitionSheetArgs();

    @Import(name="contentType")
    private @Nullable Output<String> contentType;

    public Optional<Output<String>> contentType() {
        return Optional.ofNullable(this.contentType);
    }

    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="filterControls")
    private @Nullable Output<List<FilterControlsArgs>> filterControls;

    public Optional<Output<List<FilterControlsArgs>>> filterControls() {
        return Optional.ofNullable(this.filterControls);
    }

    @Import(name="layouts")
    private @Nullable Output<LayoutsArgs> layouts;

    public Optional<Output<LayoutsArgs>> layouts() {
        return Optional.ofNullable(this.layouts);
    }

    /**
     * Display name for the analysis.
     * 
     * The following arguments are optional:
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Display name for the analysis.
     * 
     * The following arguments are optional:
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="parameterControls")
    private @Nullable Output<List<AnalysisDefinitionSheetParameterControlArgs>> parameterControls;

    public Optional<Output<List<AnalysisDefinitionSheetParameterControlArgs>>> parameterControls() {
        return Optional.ofNullable(this.parameterControls);
    }

    @Import(name="sheetControlLayouts")
    private @Nullable Output<AnalysisDefinitionSheetSheetControlLayoutsArgs> sheetControlLayouts;

    public Optional<Output<AnalysisDefinitionSheetSheetControlLayoutsArgs>> sheetControlLayouts() {
        return Optional.ofNullable(this.sheetControlLayouts);
    }

    @Import(name="sheetId", required=true)
    private Output<String> sheetId;

    public Output<String> sheetId() {
        return this.sheetId;
    }

    @Import(name="textBoxes")
    private @Nullable Output<List<AnalysisDefinitionSheetTextBoxArgs>> textBoxes;

    public Optional<Output<List<AnalysisDefinitionSheetTextBoxArgs>>> textBoxes() {
        return Optional.ofNullable(this.textBoxes);
    }

    @Import(name="title")
    private @Nullable Output<String> title;

    public Optional<Output<String>> title() {
        return Optional.ofNullable(this.title);
    }

    @Import(name="visuals")
    private @Nullable Output<List<VisualsArgs>> visuals;

    public Optional<Output<List<VisualsArgs>>> visuals() {
        return Optional.ofNullable(this.visuals);
    }

    private AnalysisDefinitionSheetArgs() {}

    private AnalysisDefinitionSheetArgs(AnalysisDefinitionSheetArgs $) {
        this.contentType = $.contentType;
        this.description = $.description;
        this.filterControls = $.filterControls;
        this.layouts = $.layouts;
        this.name = $.name;
        this.parameterControls = $.parameterControls;
        this.sheetControlLayouts = $.sheetControlLayouts;
        this.sheetId = $.sheetId;
        this.textBoxes = $.textBoxes;
        this.title = $.title;
        this.visuals = $.visuals;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AnalysisDefinitionSheetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AnalysisDefinitionSheetArgs $;

        public Builder() {
            $ = new AnalysisDefinitionSheetArgs();
        }

        public Builder(AnalysisDefinitionSheetArgs defaults) {
            $ = new AnalysisDefinitionSheetArgs(Objects.requireNonNull(defaults));
        }

        public Builder contentType(@Nullable Output<String> contentType) {
            $.contentType = contentType;
            return this;
        }

        public Builder contentType(String contentType) {
            return contentType(Output.of(contentType));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder filterControls(@Nullable Output<List<FilterControlsArgs>> filterControls) {
            $.filterControls = filterControls;
            return this;
        }

        public Builder filterControls(List<FilterControlsArgs> filterControls) {
            return filterControls(Output.of(filterControls));
        }

        public Builder filterControls(FilterControlsArgs... filterControls) {
            return filterControls(List.of(filterControls));
        }

        public Builder layouts(@Nullable Output<LayoutsArgs> layouts) {
            $.layouts = layouts;
            return this;
        }

        public Builder layouts(LayoutsArgs layouts) {
            return layouts(Output.of(layouts));
        }

        /**
         * @param name Display name for the analysis.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Display name for the analysis.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder parameterControls(@Nullable Output<List<AnalysisDefinitionSheetParameterControlArgs>> parameterControls) {
            $.parameterControls = parameterControls;
            return this;
        }

        public Builder parameterControls(List<AnalysisDefinitionSheetParameterControlArgs> parameterControls) {
            return parameterControls(Output.of(parameterControls));
        }

        public Builder parameterControls(AnalysisDefinitionSheetParameterControlArgs... parameterControls) {
            return parameterControls(List.of(parameterControls));
        }

        public Builder sheetControlLayouts(@Nullable Output<AnalysisDefinitionSheetSheetControlLayoutsArgs> sheetControlLayouts) {
            $.sheetControlLayouts = sheetControlLayouts;
            return this;
        }

        public Builder sheetControlLayouts(AnalysisDefinitionSheetSheetControlLayoutsArgs sheetControlLayouts) {
            return sheetControlLayouts(Output.of(sheetControlLayouts));
        }

        public Builder sheetId(Output<String> sheetId) {
            $.sheetId = sheetId;
            return this;
        }

        public Builder sheetId(String sheetId) {
            return sheetId(Output.of(sheetId));
        }

        public Builder textBoxes(@Nullable Output<List<AnalysisDefinitionSheetTextBoxArgs>> textBoxes) {
            $.textBoxes = textBoxes;
            return this;
        }

        public Builder textBoxes(List<AnalysisDefinitionSheetTextBoxArgs> textBoxes) {
            return textBoxes(Output.of(textBoxes));
        }

        public Builder textBoxes(AnalysisDefinitionSheetTextBoxArgs... textBoxes) {
            return textBoxes(List.of(textBoxes));
        }

        public Builder title(@Nullable Output<String> title) {
            $.title = title;
            return this;
        }

        public Builder title(String title) {
            return title(Output.of(title));
        }

        public Builder visuals(@Nullable Output<List<VisualsArgs>> visuals) {
            $.visuals = visuals;
            return this;
        }

        public Builder visuals(List<VisualsArgs> visuals) {
            return visuals(Output.of(visuals));
        }

        public Builder visuals(VisualsArgs... visuals) {
            return visuals(List.of(visuals));
        }

        public AnalysisDefinitionSheetArgs build() {
            if ($.sheetId == null) {
                throw new MissingRequiredPropertyException("AnalysisDefinitionSheetArgs", "sheetId");
            }
            return $;
        }
    }

}
