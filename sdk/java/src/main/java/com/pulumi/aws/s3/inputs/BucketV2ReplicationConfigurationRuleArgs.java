// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.s3.inputs;

import com.pulumi.aws.s3.inputs.BucketV2ReplicationConfigurationRuleDestinationArgs;
import com.pulumi.aws.s3.inputs.BucketV2ReplicationConfigurationRuleFilterArgs;
import com.pulumi.aws.s3.inputs.BucketV2ReplicationConfigurationRuleSourceSelectionCriteriaArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BucketV2ReplicationConfigurationRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final BucketV2ReplicationConfigurationRuleArgs Empty = new BucketV2ReplicationConfigurationRuleArgs();

    /**
     * Whether delete markers are replicated. The only valid value is `Enabled`. To disable, omit this argument. This argument is only valid with V2 replication configurations (i.e., when `filter` is used).
     * 
     */
    @Import(name="deleteMarkerReplicationStatus")
    private @Nullable Output<String> deleteMarkerReplicationStatus;

    /**
     * @return Whether delete markers are replicated. The only valid value is `Enabled`. To disable, omit this argument. This argument is only valid with V2 replication configurations (i.e., when `filter` is used).
     * 
     */
    public Optional<Output<String>> deleteMarkerReplicationStatus() {
        return Optional.ofNullable(this.deleteMarkerReplicationStatus);
    }

    /**
     * Specifies the destination for the rule (documented below).
     * 
     */
    @Import(name="destinations", required=true)
    private Output<List<BucketV2ReplicationConfigurationRuleDestinationArgs>> destinations;

    /**
     * @return Specifies the destination for the rule (documented below).
     * 
     */
    public Output<List<BucketV2ReplicationConfigurationRuleDestinationArgs>> destinations() {
        return this.destinations;
    }

    /**
     * Filter that identifies subset of objects to which the replication rule applies (documented below).
     * 
     */
    @Import(name="filters")
    private @Nullable Output<List<BucketV2ReplicationConfigurationRuleFilterArgs>> filters;

    /**
     * @return Filter that identifies subset of objects to which the replication rule applies (documented below).
     * 
     */
    public Optional<Output<List<BucketV2ReplicationConfigurationRuleFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * Unique identifier for the rule. Must be less than or equal to 255 characters in length.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return Unique identifier for the rule. Must be less than or equal to 255 characters in length.
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Object keyname prefix identifying one or more objects to which the rule applies. Must be less than or equal to 1024 characters in length.
     * 
     */
    @Import(name="prefix")
    private @Nullable Output<String> prefix;

    /**
     * @return Object keyname prefix identifying one or more objects to which the rule applies. Must be less than or equal to 1024 characters in length.
     * 
     */
    public Optional<Output<String>> prefix() {
        return Optional.ofNullable(this.prefix);
    }

    /**
     * Priority associated with the rule. Priority should only be set if `filter` is configured. If not provided, defaults to `0`. Priority must be unique between multiple rules.
     * 
     */
    @Import(name="priority")
    private @Nullable Output<Integer> priority;

    /**
     * @return Priority associated with the rule. Priority should only be set if `filter` is configured. If not provided, defaults to `0`. Priority must be unique between multiple rules.
     * 
     */
    public Optional<Output<Integer>> priority() {
        return Optional.ofNullable(this.priority);
    }

    /**
     * Specifies special object selection criteria (documented below).
     * 
     */
    @Import(name="sourceSelectionCriterias")
    private @Nullable Output<List<BucketV2ReplicationConfigurationRuleSourceSelectionCriteriaArgs>> sourceSelectionCriterias;

    /**
     * @return Specifies special object selection criteria (documented below).
     * 
     */
    public Optional<Output<List<BucketV2ReplicationConfigurationRuleSourceSelectionCriteriaArgs>>> sourceSelectionCriterias() {
        return Optional.ofNullable(this.sourceSelectionCriterias);
    }

    /**
     * Status of the rule. Either `Enabled` or `Disabled`. The rule is ignored if status is not Enabled.
     * 
     */
    @Import(name="status", required=true)
    private Output<String> status;

    /**
     * @return Status of the rule. Either `Enabled` or `Disabled`. The rule is ignored if status is not Enabled.
     * 
     */
    public Output<String> status() {
        return this.status;
    }

    private BucketV2ReplicationConfigurationRuleArgs() {}

    private BucketV2ReplicationConfigurationRuleArgs(BucketV2ReplicationConfigurationRuleArgs $) {
        this.deleteMarkerReplicationStatus = $.deleteMarkerReplicationStatus;
        this.destinations = $.destinations;
        this.filters = $.filters;
        this.id = $.id;
        this.prefix = $.prefix;
        this.priority = $.priority;
        this.sourceSelectionCriterias = $.sourceSelectionCriterias;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BucketV2ReplicationConfigurationRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BucketV2ReplicationConfigurationRuleArgs $;

        public Builder() {
            $ = new BucketV2ReplicationConfigurationRuleArgs();
        }

        public Builder(BucketV2ReplicationConfigurationRuleArgs defaults) {
            $ = new BucketV2ReplicationConfigurationRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param deleteMarkerReplicationStatus Whether delete markers are replicated. The only valid value is `Enabled`. To disable, omit this argument. This argument is only valid with V2 replication configurations (i.e., when `filter` is used).
         * 
         * @return builder
         * 
         */
        public Builder deleteMarkerReplicationStatus(@Nullable Output<String> deleteMarkerReplicationStatus) {
            $.deleteMarkerReplicationStatus = deleteMarkerReplicationStatus;
            return this;
        }

        /**
         * @param deleteMarkerReplicationStatus Whether delete markers are replicated. The only valid value is `Enabled`. To disable, omit this argument. This argument is only valid with V2 replication configurations (i.e., when `filter` is used).
         * 
         * @return builder
         * 
         */
        public Builder deleteMarkerReplicationStatus(String deleteMarkerReplicationStatus) {
            return deleteMarkerReplicationStatus(Output.of(deleteMarkerReplicationStatus));
        }

        /**
         * @param destinations Specifies the destination for the rule (documented below).
         * 
         * @return builder
         * 
         */
        public Builder destinations(Output<List<BucketV2ReplicationConfigurationRuleDestinationArgs>> destinations) {
            $.destinations = destinations;
            return this;
        }

        /**
         * @param destinations Specifies the destination for the rule (documented below).
         * 
         * @return builder
         * 
         */
        public Builder destinations(List<BucketV2ReplicationConfigurationRuleDestinationArgs> destinations) {
            return destinations(Output.of(destinations));
        }

        /**
         * @param destinations Specifies the destination for the rule (documented below).
         * 
         * @return builder
         * 
         */
        public Builder destinations(BucketV2ReplicationConfigurationRuleDestinationArgs... destinations) {
            return destinations(List.of(destinations));
        }

        /**
         * @param filters Filter that identifies subset of objects to which the replication rule applies (documented below).
         * 
         * @return builder
         * 
         */
        public Builder filters(@Nullable Output<List<BucketV2ReplicationConfigurationRuleFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        /**
         * @param filters Filter that identifies subset of objects to which the replication rule applies (documented below).
         * 
         * @return builder
         * 
         */
        public Builder filters(List<BucketV2ReplicationConfigurationRuleFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        /**
         * @param filters Filter that identifies subset of objects to which the replication rule applies (documented below).
         * 
         * @return builder
         * 
         */
        public Builder filters(BucketV2ReplicationConfigurationRuleFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param id Unique identifier for the rule. Must be less than or equal to 255 characters in length.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id Unique identifier for the rule. Must be less than or equal to 255 characters in length.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param prefix Object keyname prefix identifying one or more objects to which the rule applies. Must be less than or equal to 1024 characters in length.
         * 
         * @return builder
         * 
         */
        public Builder prefix(@Nullable Output<String> prefix) {
            $.prefix = prefix;
            return this;
        }

        /**
         * @param prefix Object keyname prefix identifying one or more objects to which the rule applies. Must be less than or equal to 1024 characters in length.
         * 
         * @return builder
         * 
         */
        public Builder prefix(String prefix) {
            return prefix(Output.of(prefix));
        }

        /**
         * @param priority Priority associated with the rule. Priority should only be set if `filter` is configured. If not provided, defaults to `0`. Priority must be unique between multiple rules.
         * 
         * @return builder
         * 
         */
        public Builder priority(@Nullable Output<Integer> priority) {
            $.priority = priority;
            return this;
        }

        /**
         * @param priority Priority associated with the rule. Priority should only be set if `filter` is configured. If not provided, defaults to `0`. Priority must be unique between multiple rules.
         * 
         * @return builder
         * 
         */
        public Builder priority(Integer priority) {
            return priority(Output.of(priority));
        }

        /**
         * @param sourceSelectionCriterias Specifies special object selection criteria (documented below).
         * 
         * @return builder
         * 
         */
        public Builder sourceSelectionCriterias(@Nullable Output<List<BucketV2ReplicationConfigurationRuleSourceSelectionCriteriaArgs>> sourceSelectionCriterias) {
            $.sourceSelectionCriterias = sourceSelectionCriterias;
            return this;
        }

        /**
         * @param sourceSelectionCriterias Specifies special object selection criteria (documented below).
         * 
         * @return builder
         * 
         */
        public Builder sourceSelectionCriterias(List<BucketV2ReplicationConfigurationRuleSourceSelectionCriteriaArgs> sourceSelectionCriterias) {
            return sourceSelectionCriterias(Output.of(sourceSelectionCriterias));
        }

        /**
         * @param sourceSelectionCriterias Specifies special object selection criteria (documented below).
         * 
         * @return builder
         * 
         */
        public Builder sourceSelectionCriterias(BucketV2ReplicationConfigurationRuleSourceSelectionCriteriaArgs... sourceSelectionCriterias) {
            return sourceSelectionCriterias(List.of(sourceSelectionCriterias));
        }

        /**
         * @param status Status of the rule. Either `Enabled` or `Disabled`. The rule is ignored if status is not Enabled.
         * 
         * @return builder
         * 
         */
        public Builder status(Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Status of the rule. Either `Enabled` or `Disabled`. The rule is ignored if status is not Enabled.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public BucketV2ReplicationConfigurationRuleArgs build() {
            $.destinations = Objects.requireNonNull($.destinations, "expected parameter 'destinations' to be non-null");
            $.status = Objects.requireNonNull($.status, "expected parameter 'status' to be non-null");
            return $;
        }
    }

}
