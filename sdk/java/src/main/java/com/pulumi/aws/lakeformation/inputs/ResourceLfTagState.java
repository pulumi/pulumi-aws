// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.lakeformation.inputs;

import com.pulumi.aws.lakeformation.inputs.ResourceLfTagDatabaseArgs;
import com.pulumi.aws.lakeformation.inputs.ResourceLfTagLfTagArgs;
import com.pulumi.aws.lakeformation.inputs.ResourceLfTagTableArgs;
import com.pulumi.aws.lakeformation.inputs.ResourceLfTagTableWithColumnsArgs;
import com.pulumi.aws.lakeformation.inputs.ResourceLfTagTimeoutsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ResourceLfTagState extends com.pulumi.resources.ResourceArgs {

    public static final ResourceLfTagState Empty = new ResourceLfTagState();

    /**
     * Identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment.
     * 
     */
    @Import(name="catalogId")
    private @Nullable Output<String> catalogId;

    /**
     * @return Identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment.
     * 
     */
    public Optional<Output<String>> catalogId() {
        return Optional.ofNullable(this.catalogId);
    }

    /**
     * Configuration block for a database resource. See Database for more details.
     * 
     */
    @Import(name="database")
    private @Nullable Output<ResourceLfTagDatabaseArgs> database;

    /**
     * @return Configuration block for a database resource. See Database for more details.
     * 
     */
    public Optional<Output<ResourceLfTagDatabaseArgs>> database() {
        return Optional.ofNullable(this.database);
    }

    /**
     * Set of LF-tags to attach to the resource. See LF Tag for more details.
     * 
     * Exactly one of the following is required:
     * 
     */
    @Import(name="lfTag")
    private @Nullable Output<ResourceLfTagLfTagArgs> lfTag;

    /**
     * @return Set of LF-tags to attach to the resource. See LF Tag for more details.
     * 
     * Exactly one of the following is required:
     * 
     */
    public Optional<Output<ResourceLfTagLfTagArgs>> lfTag() {
        return Optional.ofNullable(this.lfTag);
    }

    /**
     * Configuration block for a table resource. See Table for more details.
     * 
     */
    @Import(name="table")
    private @Nullable Output<ResourceLfTagTableArgs> table;

    /**
     * @return Configuration block for a table resource. See Table for more details.
     * 
     */
    public Optional<Output<ResourceLfTagTableArgs>> table() {
        return Optional.ofNullable(this.table);
    }

    /**
     * Configuration block for a table with columns resource. See Table With Columns for more details.
     * 
     * The following arguments are optional:
     * 
     */
    @Import(name="tableWithColumns")
    private @Nullable Output<ResourceLfTagTableWithColumnsArgs> tableWithColumns;

    /**
     * @return Configuration block for a table with columns resource. See Table With Columns for more details.
     * 
     * The following arguments are optional:
     * 
     */
    public Optional<Output<ResourceLfTagTableWithColumnsArgs>> tableWithColumns() {
        return Optional.ofNullable(this.tableWithColumns);
    }

    @Import(name="timeouts")
    private @Nullable Output<ResourceLfTagTimeoutsArgs> timeouts;

    public Optional<Output<ResourceLfTagTimeoutsArgs>> timeouts() {
        return Optional.ofNullable(this.timeouts);
    }

    private ResourceLfTagState() {}

    private ResourceLfTagState(ResourceLfTagState $) {
        this.catalogId = $.catalogId;
        this.database = $.database;
        this.lfTag = $.lfTag;
        this.table = $.table;
        this.tableWithColumns = $.tableWithColumns;
        this.timeouts = $.timeouts;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ResourceLfTagState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ResourceLfTagState $;

        public Builder() {
            $ = new ResourceLfTagState();
        }

        public Builder(ResourceLfTagState defaults) {
            $ = new ResourceLfTagState(Objects.requireNonNull(defaults));
        }

        /**
         * @param catalogId Identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment.
         * 
         * @return builder
         * 
         */
        public Builder catalogId(@Nullable Output<String> catalogId) {
            $.catalogId = catalogId;
            return this;
        }

        /**
         * @param catalogId Identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment.
         * 
         * @return builder
         * 
         */
        public Builder catalogId(String catalogId) {
            return catalogId(Output.of(catalogId));
        }

        /**
         * @param database Configuration block for a database resource. See Database for more details.
         * 
         * @return builder
         * 
         */
        public Builder database(@Nullable Output<ResourceLfTagDatabaseArgs> database) {
            $.database = database;
            return this;
        }

        /**
         * @param database Configuration block for a database resource. See Database for more details.
         * 
         * @return builder
         * 
         */
        public Builder database(ResourceLfTagDatabaseArgs database) {
            return database(Output.of(database));
        }

        /**
         * @param lfTag Set of LF-tags to attach to the resource. See LF Tag for more details.
         * 
         * Exactly one of the following is required:
         * 
         * @return builder
         * 
         */
        public Builder lfTag(@Nullable Output<ResourceLfTagLfTagArgs> lfTag) {
            $.lfTag = lfTag;
            return this;
        }

        /**
         * @param lfTag Set of LF-tags to attach to the resource. See LF Tag for more details.
         * 
         * Exactly one of the following is required:
         * 
         * @return builder
         * 
         */
        public Builder lfTag(ResourceLfTagLfTagArgs lfTag) {
            return lfTag(Output.of(lfTag));
        }

        /**
         * @param table Configuration block for a table resource. See Table for more details.
         * 
         * @return builder
         * 
         */
        public Builder table(@Nullable Output<ResourceLfTagTableArgs> table) {
            $.table = table;
            return this;
        }

        /**
         * @param table Configuration block for a table resource. See Table for more details.
         * 
         * @return builder
         * 
         */
        public Builder table(ResourceLfTagTableArgs table) {
            return table(Output.of(table));
        }

        /**
         * @param tableWithColumns Configuration block for a table with columns resource. See Table With Columns for more details.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder tableWithColumns(@Nullable Output<ResourceLfTagTableWithColumnsArgs> tableWithColumns) {
            $.tableWithColumns = tableWithColumns;
            return this;
        }

        /**
         * @param tableWithColumns Configuration block for a table with columns resource. See Table With Columns for more details.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder tableWithColumns(ResourceLfTagTableWithColumnsArgs tableWithColumns) {
            return tableWithColumns(Output.of(tableWithColumns));
        }

        public Builder timeouts(@Nullable Output<ResourceLfTagTimeoutsArgs> timeouts) {
            $.timeouts = timeouts;
            return this;
        }

        public Builder timeouts(ResourceLfTagTimeoutsArgs timeouts) {
            return timeouts(Output.of(timeouts));
        }

        public ResourceLfTagState build() {
            return $;
        }
    }

}
