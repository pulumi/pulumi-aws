// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ec2.inputs;

import com.pulumi.aws.ec2.inputs.VpcIpamOperatingRegionArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VpcIpamState extends com.pulumi.resources.ResourceArgs {

    public static final VpcIpamState Empty = new VpcIpamState();

    @Import(name="arn")
    private @Nullable Output<String> arn;

    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    @Import(name="cascade")
    private @Nullable Output<Boolean> cascade;

    public Optional<Output<Boolean>> cascade() {
        return Optional.ofNullable(this.cascade);
    }

    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="operatingRegions")
    private @Nullable Output<List<VpcIpamOperatingRegionArgs>> operatingRegions;

    public Optional<Output<List<VpcIpamOperatingRegionArgs>>> operatingRegions() {
        return Optional.ofNullable(this.operatingRegions);
    }

    @Import(name="privateDefaultScopeId")
    private @Nullable Output<String> privateDefaultScopeId;

    public Optional<Output<String>> privateDefaultScopeId() {
        return Optional.ofNullable(this.privateDefaultScopeId);
    }

    @Import(name="publicDefaultScopeId")
    private @Nullable Output<String> publicDefaultScopeId;

    public Optional<Output<String>> publicDefaultScopeId() {
        return Optional.ofNullable(this.publicDefaultScopeId);
    }

    @Import(name="scopeCount")
    private @Nullable Output<Integer> scopeCount;

    public Optional<Output<Integer>> scopeCount() {
        return Optional.ofNullable(this.scopeCount);
    }

    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    private VpcIpamState() {}

    private VpcIpamState(VpcIpamState $) {
        this.arn = $.arn;
        this.cascade = $.cascade;
        this.description = $.description;
        this.operatingRegions = $.operatingRegions;
        this.privateDefaultScopeId = $.privateDefaultScopeId;
        this.publicDefaultScopeId = $.publicDefaultScopeId;
        this.scopeCount = $.scopeCount;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VpcIpamState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VpcIpamState $;

        public Builder() {
            $ = new VpcIpamState();
        }

        public Builder(VpcIpamState defaults) {
            $ = new VpcIpamState(Objects.requireNonNull(defaults));
        }

        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        public Builder cascade(@Nullable Output<Boolean> cascade) {
            $.cascade = cascade;
            return this;
        }

        public Builder cascade(Boolean cascade) {
            return cascade(Output.of(cascade));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder operatingRegions(@Nullable Output<List<VpcIpamOperatingRegionArgs>> operatingRegions) {
            $.operatingRegions = operatingRegions;
            return this;
        }

        public Builder operatingRegions(List<VpcIpamOperatingRegionArgs> operatingRegions) {
            return operatingRegions(Output.of(operatingRegions));
        }

        public Builder operatingRegions(VpcIpamOperatingRegionArgs... operatingRegions) {
            return operatingRegions(List.of(operatingRegions));
        }

        public Builder privateDefaultScopeId(@Nullable Output<String> privateDefaultScopeId) {
            $.privateDefaultScopeId = privateDefaultScopeId;
            return this;
        }

        public Builder privateDefaultScopeId(String privateDefaultScopeId) {
            return privateDefaultScopeId(Output.of(privateDefaultScopeId));
        }

        public Builder publicDefaultScopeId(@Nullable Output<String> publicDefaultScopeId) {
            $.publicDefaultScopeId = publicDefaultScopeId;
            return this;
        }

        public Builder publicDefaultScopeId(String publicDefaultScopeId) {
            return publicDefaultScopeId(Output.of(publicDefaultScopeId));
        }

        public Builder scopeCount(@Nullable Output<Integer> scopeCount) {
            $.scopeCount = scopeCount;
            return this;
        }

        public Builder scopeCount(Integer scopeCount) {
            return scopeCount(Output.of(scopeCount));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        public VpcIpamState build() {
            return $;
        }
    }

}
