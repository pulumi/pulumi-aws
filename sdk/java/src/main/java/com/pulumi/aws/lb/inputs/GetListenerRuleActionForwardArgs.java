// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.lb.inputs;

import com.pulumi.aws.lb.inputs.GetListenerRuleActionForwardStickinessArgs;
import com.pulumi.aws.lb.inputs.GetListenerRuleActionForwardTargetGroupArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetListenerRuleActionForwardArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetListenerRuleActionForwardArgs Empty = new GetListenerRuleActionForwardArgs();

    /**
     * Target group stickiness for the rule.
     * Detailed below.
     * 
     */
    @Import(name="stickinesses")
    private @Nullable Output<List<GetListenerRuleActionForwardStickinessArgs>> stickinesses;

    /**
     * @return Target group stickiness for the rule.
     * Detailed below.
     * 
     */
    public Optional<Output<List<GetListenerRuleActionForwardStickinessArgs>>> stickinesses() {
        return Optional.ofNullable(this.stickinesses);
    }

    /**
     * Set of target groups for the action.
     * Detailed below.
     * 
     */
    @Import(name="targetGroups")
    private @Nullable Output<List<GetListenerRuleActionForwardTargetGroupArgs>> targetGroups;

    /**
     * @return Set of target groups for the action.
     * Detailed below.
     * 
     */
    public Optional<Output<List<GetListenerRuleActionForwardTargetGroupArgs>>> targetGroups() {
        return Optional.ofNullable(this.targetGroups);
    }

    private GetListenerRuleActionForwardArgs() {}

    private GetListenerRuleActionForwardArgs(GetListenerRuleActionForwardArgs $) {
        this.stickinesses = $.stickinesses;
        this.targetGroups = $.targetGroups;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetListenerRuleActionForwardArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetListenerRuleActionForwardArgs $;

        public Builder() {
            $ = new GetListenerRuleActionForwardArgs();
        }

        public Builder(GetListenerRuleActionForwardArgs defaults) {
            $ = new GetListenerRuleActionForwardArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param stickinesses Target group stickiness for the rule.
         * Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder stickinesses(@Nullable Output<List<GetListenerRuleActionForwardStickinessArgs>> stickinesses) {
            $.stickinesses = stickinesses;
            return this;
        }

        /**
         * @param stickinesses Target group stickiness for the rule.
         * Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder stickinesses(List<GetListenerRuleActionForwardStickinessArgs> stickinesses) {
            return stickinesses(Output.of(stickinesses));
        }

        /**
         * @param stickinesses Target group stickiness for the rule.
         * Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder stickinesses(GetListenerRuleActionForwardStickinessArgs... stickinesses) {
            return stickinesses(List.of(stickinesses));
        }

        /**
         * @param targetGroups Set of target groups for the action.
         * Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder targetGroups(@Nullable Output<List<GetListenerRuleActionForwardTargetGroupArgs>> targetGroups) {
            $.targetGroups = targetGroups;
            return this;
        }

        /**
         * @param targetGroups Set of target groups for the action.
         * Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder targetGroups(List<GetListenerRuleActionForwardTargetGroupArgs> targetGroups) {
            return targetGroups(Output.of(targetGroups));
        }

        /**
         * @param targetGroups Set of target groups for the action.
         * Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder targetGroups(GetListenerRuleActionForwardTargetGroupArgs... targetGroups) {
            return targetGroups(List.of(targetGroups));
        }

        public GetListenerRuleActionForwardArgs build() {
            return $;
        }
    }

}
