// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.route53.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetResolverRuleArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetResolverRuleArgs Empty = new GetResolverRuleArgs();

    @Import(name="domainName")
    private @Nullable Output<String> domainName;

    public Optional<Output<String>> domainName() {
        return Optional.ofNullable(this.domainName);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="resolverEndpointId")
    private @Nullable Output<String> resolverEndpointId;

    public Optional<Output<String>> resolverEndpointId() {
        return Optional.ofNullable(this.resolverEndpointId);
    }

    @Import(name="resolverRuleId")
    private @Nullable Output<String> resolverRuleId;

    public Optional<Output<String>> resolverRuleId() {
        return Optional.ofNullable(this.resolverRuleId);
    }

    @Import(name="ruleType")
    private @Nullable Output<String> ruleType;

    public Optional<Output<String>> ruleType() {
        return Optional.ofNullable(this.ruleType);
    }

    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private GetResolverRuleArgs() {}

    private GetResolverRuleArgs(GetResolverRuleArgs $) {
        this.domainName = $.domainName;
        this.name = $.name;
        this.resolverEndpointId = $.resolverEndpointId;
        this.resolverRuleId = $.resolverRuleId;
        this.ruleType = $.ruleType;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetResolverRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetResolverRuleArgs $;

        public Builder() {
            $ = new GetResolverRuleArgs();
        }

        public Builder(GetResolverRuleArgs defaults) {
            $ = new GetResolverRuleArgs(Objects.requireNonNull(defaults));
        }

        public Builder domainName(@Nullable Output<String> domainName) {
            $.domainName = domainName;
            return this;
        }

        public Builder domainName(String domainName) {
            return domainName(Output.of(domainName));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder resolverEndpointId(@Nullable Output<String> resolverEndpointId) {
            $.resolverEndpointId = resolverEndpointId;
            return this;
        }

        public Builder resolverEndpointId(String resolverEndpointId) {
            return resolverEndpointId(Output.of(resolverEndpointId));
        }

        public Builder resolverRuleId(@Nullable Output<String> resolverRuleId) {
            $.resolverRuleId = resolverRuleId;
            return this;
        }

        public Builder resolverRuleId(String resolverRuleId) {
            return resolverRuleId(Output.of(resolverRuleId));
        }

        public Builder ruleType(@Nullable Output<String> ruleType) {
            $.ruleType = ruleType;
            return this;
        }

        public Builder ruleType(String ruleType) {
            return ruleType(Output.of(ruleType));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public GetResolverRuleArgs build() {
            return $;
        }
    }

}
