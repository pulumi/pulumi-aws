// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.cloudwatch;

import com.pulumi.aws.cloudwatch.inputs.LogDeliveryDestinationDeliveryDestinationConfigurationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LogDeliveryDestinationArgs extends com.pulumi.resources.ResourceArgs {

    public static final LogDeliveryDestinationArgs Empty = new LogDeliveryDestinationArgs();

    /**
     * The AWS resource that will receive the logs.
     * 
     */
    @Import(name="deliveryDestinationConfiguration")
    private @Nullable Output<LogDeliveryDestinationDeliveryDestinationConfigurationArgs> deliveryDestinationConfiguration;

    /**
     * @return The AWS resource that will receive the logs.
     * 
     */
    public Optional<Output<LogDeliveryDestinationDeliveryDestinationConfigurationArgs>> deliveryDestinationConfiguration() {
        return Optional.ofNullable(this.deliveryDestinationConfiguration);
    }

    /**
     * The name for this delivery destination.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name for this delivery destination.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The format of the logs that are sent to this delivery destination. Valid values: `json`, `plain`, `w3c`, `raw`, `parquet`.
     * 
     */
    @Import(name="outputFormat")
    private @Nullable Output<String> outputFormat;

    /**
     * @return The format of the logs that are sent to this delivery destination. Valid values: `json`, `plain`, `w3c`, `raw`, `parquet`.
     * 
     */
    public Optional<Output<String>> outputFormat() {
        return Optional.ofNullable(this.outputFormat);
    }

    /**
     * A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private LogDeliveryDestinationArgs() {}

    private LogDeliveryDestinationArgs(LogDeliveryDestinationArgs $) {
        this.deliveryDestinationConfiguration = $.deliveryDestinationConfiguration;
        this.name = $.name;
        this.outputFormat = $.outputFormat;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LogDeliveryDestinationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LogDeliveryDestinationArgs $;

        public Builder() {
            $ = new LogDeliveryDestinationArgs();
        }

        public Builder(LogDeliveryDestinationArgs defaults) {
            $ = new LogDeliveryDestinationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param deliveryDestinationConfiguration The AWS resource that will receive the logs.
         * 
         * @return builder
         * 
         */
        public Builder deliveryDestinationConfiguration(@Nullable Output<LogDeliveryDestinationDeliveryDestinationConfigurationArgs> deliveryDestinationConfiguration) {
            $.deliveryDestinationConfiguration = deliveryDestinationConfiguration;
            return this;
        }

        /**
         * @param deliveryDestinationConfiguration The AWS resource that will receive the logs.
         * 
         * @return builder
         * 
         */
        public Builder deliveryDestinationConfiguration(LogDeliveryDestinationDeliveryDestinationConfigurationArgs deliveryDestinationConfiguration) {
            return deliveryDestinationConfiguration(Output.of(deliveryDestinationConfiguration));
        }

        /**
         * @param name The name for this delivery destination.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name for this delivery destination.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param outputFormat The format of the logs that are sent to this delivery destination. Valid values: `json`, `plain`, `w3c`, `raw`, `parquet`.
         * 
         * @return builder
         * 
         */
        public Builder outputFormat(@Nullable Output<String> outputFormat) {
            $.outputFormat = outputFormat;
            return this;
        }

        /**
         * @param outputFormat The format of the logs that are sent to this delivery destination. Valid values: `json`, `plain`, `w3c`, `raw`, `parquet`.
         * 
         * @return builder
         * 
         */
        public Builder outputFormat(String outputFormat) {
            return outputFormat(Output.of(outputFormat));
        }

        /**
         * @param tags A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public LogDeliveryDestinationArgs build() {
            return $;
        }
    }

}
