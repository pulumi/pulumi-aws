// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.batch.outputs;

import com.pulumi.aws.batch.outputs.JobDefinitionEksPropertiesPodPropertiesContainersEnv;
import com.pulumi.aws.batch.outputs.JobDefinitionEksPropertiesPodPropertiesContainersResources;
import com.pulumi.aws.batch.outputs.JobDefinitionEksPropertiesPodPropertiesContainersSecurityContext;
import com.pulumi.aws.batch.outputs.JobDefinitionEksPropertiesPodPropertiesContainersVolumeMount;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class JobDefinitionEksPropertiesPodPropertiesContainers {
    /**
     * @return An array of arguments to the entrypoint. If this isn&#39;t specified, the CMD of the container image is used. This corresponds to the args member in the Entrypoint portion of the Pod in Kubernetes. Environment variable references are expanded using the container&#39;s environment.
     * 
     */
    private @Nullable List<String> args;
    /**
     * @return The entrypoint for the container. This isn&#39;t run within a shell. If this isn&#39;t specified, the ENTRYPOINT of the container image is used. Environment variable references are expanded using the container&#39;s environment.
     * 
     */
    private @Nullable List<String> commands;
    /**
     * @return The environment variables to pass to a container. See EKS Environment below.
     * 
     */
    private @Nullable List<JobDefinitionEksPropertiesPodPropertiesContainersEnv> envs;
    /**
     * @return The Docker image used to start the container.
     * 
     */
    private String image;
    /**
     * @return The image pull policy for the container. Supported values are `Always`, `IfNotPresent`, and `Never`.
     * 
     */
    private @Nullable String imagePullPolicy;
    /**
     * @return The name of the container. If the name isn&#39;t specified, the default name &#34;Default&#34; is used. Each container in a pod must have a unique name.
     * 
     */
    private @Nullable String name;
    /**
     * @return The type and amount of resources to assign to a container. The supported resources include `memory`, `cpu`, and `nvidia.com/gpu`.
     * 
     */
    private @Nullable JobDefinitionEksPropertiesPodPropertiesContainersResources resources;
    /**
     * @return The security context for a job.
     * 
     */
    private @Nullable JobDefinitionEksPropertiesPodPropertiesContainersSecurityContext securityContext;
    /**
     * @return The volume mounts for the container.
     * 
     */
    private @Nullable List<JobDefinitionEksPropertiesPodPropertiesContainersVolumeMount> volumeMounts;

    private JobDefinitionEksPropertiesPodPropertiesContainers() {}
    /**
     * @return An array of arguments to the entrypoint. If this isn&#39;t specified, the CMD of the container image is used. This corresponds to the args member in the Entrypoint portion of the Pod in Kubernetes. Environment variable references are expanded using the container&#39;s environment.
     * 
     */
    public List<String> args() {
        return this.args == null ? List.of() : this.args;
    }
    /**
     * @return The entrypoint for the container. This isn&#39;t run within a shell. If this isn&#39;t specified, the ENTRYPOINT of the container image is used. Environment variable references are expanded using the container&#39;s environment.
     * 
     */
    public List<String> commands() {
        return this.commands == null ? List.of() : this.commands;
    }
    /**
     * @return The environment variables to pass to a container. See EKS Environment below.
     * 
     */
    public List<JobDefinitionEksPropertiesPodPropertiesContainersEnv> envs() {
        return this.envs == null ? List.of() : this.envs;
    }
    /**
     * @return The Docker image used to start the container.
     * 
     */
    public String image() {
        return this.image;
    }
    /**
     * @return The image pull policy for the container. Supported values are `Always`, `IfNotPresent`, and `Never`.
     * 
     */
    public Optional<String> imagePullPolicy() {
        return Optional.ofNullable(this.imagePullPolicy);
    }
    /**
     * @return The name of the container. If the name isn&#39;t specified, the default name &#34;Default&#34; is used. Each container in a pod must have a unique name.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return The type and amount of resources to assign to a container. The supported resources include `memory`, `cpu`, and `nvidia.com/gpu`.
     * 
     */
    public Optional<JobDefinitionEksPropertiesPodPropertiesContainersResources> resources() {
        return Optional.ofNullable(this.resources);
    }
    /**
     * @return The security context for a job.
     * 
     */
    public Optional<JobDefinitionEksPropertiesPodPropertiesContainersSecurityContext> securityContext() {
        return Optional.ofNullable(this.securityContext);
    }
    /**
     * @return The volume mounts for the container.
     * 
     */
    public List<JobDefinitionEksPropertiesPodPropertiesContainersVolumeMount> volumeMounts() {
        return this.volumeMounts == null ? List.of() : this.volumeMounts;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(JobDefinitionEksPropertiesPodPropertiesContainers defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> args;
        private @Nullable List<String> commands;
        private @Nullable List<JobDefinitionEksPropertiesPodPropertiesContainersEnv> envs;
        private String image;
        private @Nullable String imagePullPolicy;
        private @Nullable String name;
        private @Nullable JobDefinitionEksPropertiesPodPropertiesContainersResources resources;
        private @Nullable JobDefinitionEksPropertiesPodPropertiesContainersSecurityContext securityContext;
        private @Nullable List<JobDefinitionEksPropertiesPodPropertiesContainersVolumeMount> volumeMounts;
        public Builder() {}
        public Builder(JobDefinitionEksPropertiesPodPropertiesContainers defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.args = defaults.args;
    	      this.commands = defaults.commands;
    	      this.envs = defaults.envs;
    	      this.image = defaults.image;
    	      this.imagePullPolicy = defaults.imagePullPolicy;
    	      this.name = defaults.name;
    	      this.resources = defaults.resources;
    	      this.securityContext = defaults.securityContext;
    	      this.volumeMounts = defaults.volumeMounts;
        }

        @CustomType.Setter
        public Builder args(@Nullable List<String> args) {

            this.args = args;
            return this;
        }
        public Builder args(String... args) {
            return args(List.of(args));
        }
        @CustomType.Setter
        public Builder commands(@Nullable List<String> commands) {

            this.commands = commands;
            return this;
        }
        public Builder commands(String... commands) {
            return commands(List.of(commands));
        }
        @CustomType.Setter
        public Builder envs(@Nullable List<JobDefinitionEksPropertiesPodPropertiesContainersEnv> envs) {

            this.envs = envs;
            return this;
        }
        public Builder envs(JobDefinitionEksPropertiesPodPropertiesContainersEnv... envs) {
            return envs(List.of(envs));
        }
        @CustomType.Setter
        public Builder image(String image) {
            if (image == null) {
              throw new MissingRequiredPropertyException("JobDefinitionEksPropertiesPodPropertiesContainers", "image");
            }
            this.image = image;
            return this;
        }
        @CustomType.Setter
        public Builder imagePullPolicy(@Nullable String imagePullPolicy) {

            this.imagePullPolicy = imagePullPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder resources(@Nullable JobDefinitionEksPropertiesPodPropertiesContainersResources resources) {

            this.resources = resources;
            return this;
        }
        @CustomType.Setter
        public Builder securityContext(@Nullable JobDefinitionEksPropertiesPodPropertiesContainersSecurityContext securityContext) {

            this.securityContext = securityContext;
            return this;
        }
        @CustomType.Setter
        public Builder volumeMounts(@Nullable List<JobDefinitionEksPropertiesPodPropertiesContainersVolumeMount> volumeMounts) {

            this.volumeMounts = volumeMounts;
            return this;
        }
        public Builder volumeMounts(JobDefinitionEksPropertiesPodPropertiesContainersVolumeMount... volumeMounts) {
            return volumeMounts(List.of(volumeMounts));
        }
        public JobDefinitionEksPropertiesPodPropertiesContainers build() {
            final var _resultValue = new JobDefinitionEksPropertiesPodPropertiesContainers();
            _resultValue.args = args;
            _resultValue.commands = commands;
            _resultValue.envs = envs;
            _resultValue.image = image;
            _resultValue.imagePullPolicy = imagePullPolicy;
            _resultValue.name = name;
            _resultValue.resources = resources;
            _resultValue.securityContext = securityContext;
            _resultValue.volumeMounts = volumeMounts;
            return _resultValue;
        }
    }
}
