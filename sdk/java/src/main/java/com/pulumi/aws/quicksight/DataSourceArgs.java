// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight;

import com.pulumi.aws.quicksight.inputs.DataSourceCredentialsArgs;
import com.pulumi.aws.quicksight.inputs.DataSourceParametersArgs;
import com.pulumi.aws.quicksight.inputs.DataSourcePermissionArgs;
import com.pulumi.aws.quicksight.inputs.DataSourceSslPropertiesArgs;
import com.pulumi.aws.quicksight.inputs.DataSourceVpcConnectionPropertiesArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DataSourceArgs extends com.pulumi.resources.ResourceArgs {

    public static final DataSourceArgs Empty = new DataSourceArgs();

    @Import(name="awsAccountId")
    private @Nullable Output<String> awsAccountId;

    public Optional<Output<String>> awsAccountId() {
        return Optional.ofNullable(this.awsAccountId);
    }

    @Import(name="credentials")
    private @Nullable Output<DataSourceCredentialsArgs> credentials;

    public Optional<Output<DataSourceCredentialsArgs>> credentials() {
        return Optional.ofNullable(this.credentials);
    }

    @Import(name="dataSourceId", required=true)
    private Output<String> dataSourceId;

    public Output<String> dataSourceId() {
        return this.dataSourceId;
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="parameters", required=true)
    private Output<DataSourceParametersArgs> parameters;

    public Output<DataSourceParametersArgs> parameters() {
        return this.parameters;
    }

    @Import(name="permissions")
    private @Nullable Output<List<DataSourcePermissionArgs>> permissions;

    public Optional<Output<List<DataSourcePermissionArgs>>> permissions() {
        return Optional.ofNullable(this.permissions);
    }

    @Import(name="sslProperties")
    private @Nullable Output<DataSourceSslPropertiesArgs> sslProperties;

    public Optional<Output<DataSourceSslPropertiesArgs>> sslProperties() {
        return Optional.ofNullable(this.sslProperties);
    }

    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="type", required=true)
    private Output<String> type;

    public Output<String> type() {
        return this.type;
    }

    @Import(name="vpcConnectionProperties")
    private @Nullable Output<DataSourceVpcConnectionPropertiesArgs> vpcConnectionProperties;

    public Optional<Output<DataSourceVpcConnectionPropertiesArgs>> vpcConnectionProperties() {
        return Optional.ofNullable(this.vpcConnectionProperties);
    }

    private DataSourceArgs() {}

    private DataSourceArgs(DataSourceArgs $) {
        this.awsAccountId = $.awsAccountId;
        this.credentials = $.credentials;
        this.dataSourceId = $.dataSourceId;
        this.name = $.name;
        this.parameters = $.parameters;
        this.permissions = $.permissions;
        this.sslProperties = $.sslProperties;
        this.tags = $.tags;
        this.type = $.type;
        this.vpcConnectionProperties = $.vpcConnectionProperties;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DataSourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DataSourceArgs $;

        public Builder() {
            $ = new DataSourceArgs();
        }

        public Builder(DataSourceArgs defaults) {
            $ = new DataSourceArgs(Objects.requireNonNull(defaults));
        }

        public Builder awsAccountId(@Nullable Output<String> awsAccountId) {
            $.awsAccountId = awsAccountId;
            return this;
        }

        public Builder awsAccountId(String awsAccountId) {
            return awsAccountId(Output.of(awsAccountId));
        }

        public Builder credentials(@Nullable Output<DataSourceCredentialsArgs> credentials) {
            $.credentials = credentials;
            return this;
        }

        public Builder credentials(DataSourceCredentialsArgs credentials) {
            return credentials(Output.of(credentials));
        }

        public Builder dataSourceId(Output<String> dataSourceId) {
            $.dataSourceId = dataSourceId;
            return this;
        }

        public Builder dataSourceId(String dataSourceId) {
            return dataSourceId(Output.of(dataSourceId));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder parameters(Output<DataSourceParametersArgs> parameters) {
            $.parameters = parameters;
            return this;
        }

        public Builder parameters(DataSourceParametersArgs parameters) {
            return parameters(Output.of(parameters));
        }

        public Builder permissions(@Nullable Output<List<DataSourcePermissionArgs>> permissions) {
            $.permissions = permissions;
            return this;
        }

        public Builder permissions(List<DataSourcePermissionArgs> permissions) {
            return permissions(Output.of(permissions));
        }

        public Builder permissions(DataSourcePermissionArgs... permissions) {
            return permissions(List.of(permissions));
        }

        public Builder sslProperties(@Nullable Output<DataSourceSslPropertiesArgs> sslProperties) {
            $.sslProperties = sslProperties;
            return this;
        }

        public Builder sslProperties(DataSourceSslPropertiesArgs sslProperties) {
            return sslProperties(Output.of(sslProperties));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        public Builder type(String type) {
            return type(Output.of(type));
        }

        public Builder vpcConnectionProperties(@Nullable Output<DataSourceVpcConnectionPropertiesArgs> vpcConnectionProperties) {
            $.vpcConnectionProperties = vpcConnectionProperties;
            return this;
        }

        public Builder vpcConnectionProperties(DataSourceVpcConnectionPropertiesArgs vpcConnectionProperties) {
            return vpcConnectionProperties(Output.of(vpcConnectionProperties));
        }

        public DataSourceArgs build() {
            $.dataSourceId = Objects.requireNonNull($.dataSourceId, "expected parameter 'dataSourceId' to be non-null");
            $.parameters = Objects.requireNonNull($.parameters, "expected parameter 'parameters' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
