// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.iot.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TopicRuleCloudwatchLogArgs extends com.pulumi.resources.ResourceArgs {

    public static final TopicRuleCloudwatchLogArgs Empty = new TopicRuleCloudwatchLogArgs();

    /**
     * The payload that contains a JSON array of records will be sent to CloudWatch via a batch call.
     * 
     */
    @Import(name="batchMode")
    private @Nullable Output<Boolean> batchMode;

    /**
     * @return The payload that contains a JSON array of records will be sent to CloudWatch via a batch call.
     * 
     */
    public Optional<Output<Boolean>> batchMode() {
        return Optional.ofNullable(this.batchMode);
    }

    /**
     * The CloudWatch log group name.
     * 
     */
    @Import(name="logGroupName", required=true)
    private Output<String> logGroupName;

    /**
     * @return The CloudWatch log group name.
     * 
     */
    public Output<String> logGroupName() {
        return this.logGroupName;
    }

    /**
     * The IAM role ARN that allows access to the CloudWatch alarm.
     * 
     */
    @Import(name="roleArn", required=true)
    private Output<String> roleArn;

    /**
     * @return The IAM role ARN that allows access to the CloudWatch alarm.
     * 
     */
    public Output<String> roleArn() {
        return this.roleArn;
    }

    private TopicRuleCloudwatchLogArgs() {}

    private TopicRuleCloudwatchLogArgs(TopicRuleCloudwatchLogArgs $) {
        this.batchMode = $.batchMode;
        this.logGroupName = $.logGroupName;
        this.roleArn = $.roleArn;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TopicRuleCloudwatchLogArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TopicRuleCloudwatchLogArgs $;

        public Builder() {
            $ = new TopicRuleCloudwatchLogArgs();
        }

        public Builder(TopicRuleCloudwatchLogArgs defaults) {
            $ = new TopicRuleCloudwatchLogArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param batchMode The payload that contains a JSON array of records will be sent to CloudWatch via a batch call.
         * 
         * @return builder
         * 
         */
        public Builder batchMode(@Nullable Output<Boolean> batchMode) {
            $.batchMode = batchMode;
            return this;
        }

        /**
         * @param batchMode The payload that contains a JSON array of records will be sent to CloudWatch via a batch call.
         * 
         * @return builder
         * 
         */
        public Builder batchMode(Boolean batchMode) {
            return batchMode(Output.of(batchMode));
        }

        /**
         * @param logGroupName The CloudWatch log group name.
         * 
         * @return builder
         * 
         */
        public Builder logGroupName(Output<String> logGroupName) {
            $.logGroupName = logGroupName;
            return this;
        }

        /**
         * @param logGroupName The CloudWatch log group name.
         * 
         * @return builder
         * 
         */
        public Builder logGroupName(String logGroupName) {
            return logGroupName(Output.of(logGroupName));
        }

        /**
         * @param roleArn The IAM role ARN that allows access to the CloudWatch alarm.
         * 
         * @return builder
         * 
         */
        public Builder roleArn(Output<String> roleArn) {
            $.roleArn = roleArn;
            return this;
        }

        /**
         * @param roleArn The IAM role ARN that allows access to the CloudWatch alarm.
         * 
         * @return builder
         * 
         */
        public Builder roleArn(String roleArn) {
            return roleArn(Output.of(roleArn));
        }

        public TopicRuleCloudwatchLogArgs build() {
            if ($.logGroupName == null) {
                throw new MissingRequiredPropertyException("TopicRuleCloudwatchLogArgs", "logGroupName");
            }
            if ($.roleArn == null) {
                throw new MissingRequiredPropertyException("TopicRuleCloudwatchLogArgs", "roleArn");
            }
            return $;
        }
    }

}
