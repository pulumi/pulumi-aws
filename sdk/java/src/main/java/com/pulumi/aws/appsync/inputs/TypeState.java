// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.appsync.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TypeState extends com.pulumi.resources.ResourceArgs {

    public static final TypeState Empty = new TypeState();

    @Import(name="apiId")
    private @Nullable Output<String> apiId;

    public Optional<Output<String>> apiId() {
        return Optional.ofNullable(this.apiId);
    }

    @Import(name="arn")
    private @Nullable Output<String> arn;

    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    @Import(name="definition")
    private @Nullable Output<String> definition;

    public Optional<Output<String>> definition() {
        return Optional.ofNullable(this.definition);
    }

    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="format")
    private @Nullable Output<String> format;

    public Optional<Output<String>> format() {
        return Optional.ofNullable(this.format);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    private TypeState() {}

    private TypeState(TypeState $) {
        this.apiId = $.apiId;
        this.arn = $.arn;
        this.definition = $.definition;
        this.description = $.description;
        this.format = $.format;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TypeState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TypeState $;

        public Builder() {
            $ = new TypeState();
        }

        public Builder(TypeState defaults) {
            $ = new TypeState(Objects.requireNonNull(defaults));
        }

        public Builder apiId(@Nullable Output<String> apiId) {
            $.apiId = apiId;
            return this;
        }

        public Builder apiId(String apiId) {
            return apiId(Output.of(apiId));
        }

        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        public Builder definition(@Nullable Output<String> definition) {
            $.definition = definition;
            return this;
        }

        public Builder definition(String definition) {
            return definition(Output.of(definition));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder format(@Nullable Output<String> format) {
            $.format = format;
            return this;
        }

        public Builder format(String format) {
            return format(Output.of(format));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public TypeState build() {
            return $;
        }
    }

}
