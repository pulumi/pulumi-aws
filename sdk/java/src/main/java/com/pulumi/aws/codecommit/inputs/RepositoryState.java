// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.codecommit.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RepositoryState extends com.pulumi.resources.ResourceArgs {

    public static final RepositoryState Empty = new RepositoryState();

    @Import(name="arn")
    private @Nullable Output<String> arn;

    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    @Import(name="cloneUrlHttp")
    private @Nullable Output<String> cloneUrlHttp;

    public Optional<Output<String>> cloneUrlHttp() {
        return Optional.ofNullable(this.cloneUrlHttp);
    }

    @Import(name="cloneUrlSsh")
    private @Nullable Output<String> cloneUrlSsh;

    public Optional<Output<String>> cloneUrlSsh() {
        return Optional.ofNullable(this.cloneUrlSsh);
    }

    @Import(name="defaultBranch")
    private @Nullable Output<String> defaultBranch;

    public Optional<Output<String>> defaultBranch() {
        return Optional.ofNullable(this.defaultBranch);
    }

    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="repositoryId")
    private @Nullable Output<String> repositoryId;

    public Optional<Output<String>> repositoryId() {
        return Optional.ofNullable(this.repositoryId);
    }

    @Import(name="repositoryName")
    private @Nullable Output<String> repositoryName;

    public Optional<Output<String>> repositoryName() {
        return Optional.ofNullable(this.repositoryName);
    }

    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    private RepositoryState() {}

    private RepositoryState(RepositoryState $) {
        this.arn = $.arn;
        this.cloneUrlHttp = $.cloneUrlHttp;
        this.cloneUrlSsh = $.cloneUrlSsh;
        this.defaultBranch = $.defaultBranch;
        this.description = $.description;
        this.repositoryId = $.repositoryId;
        this.repositoryName = $.repositoryName;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RepositoryState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RepositoryState $;

        public Builder() {
            $ = new RepositoryState();
        }

        public Builder(RepositoryState defaults) {
            $ = new RepositoryState(Objects.requireNonNull(defaults));
        }

        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        public Builder cloneUrlHttp(@Nullable Output<String> cloneUrlHttp) {
            $.cloneUrlHttp = cloneUrlHttp;
            return this;
        }

        public Builder cloneUrlHttp(String cloneUrlHttp) {
            return cloneUrlHttp(Output.of(cloneUrlHttp));
        }

        public Builder cloneUrlSsh(@Nullable Output<String> cloneUrlSsh) {
            $.cloneUrlSsh = cloneUrlSsh;
            return this;
        }

        public Builder cloneUrlSsh(String cloneUrlSsh) {
            return cloneUrlSsh(Output.of(cloneUrlSsh));
        }

        public Builder defaultBranch(@Nullable Output<String> defaultBranch) {
            $.defaultBranch = defaultBranch;
            return this;
        }

        public Builder defaultBranch(String defaultBranch) {
            return defaultBranch(Output.of(defaultBranch));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder repositoryId(@Nullable Output<String> repositoryId) {
            $.repositoryId = repositoryId;
            return this;
        }

        public Builder repositoryId(String repositoryId) {
            return repositoryId(Output.of(repositoryId));
        }

        public Builder repositoryName(@Nullable Output<String> repositoryName) {
            $.repositoryName = repositoryName;
            return this;
        }

        public Builder repositoryName(String repositoryName) {
            return repositoryName(Output.of(repositoryName));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        public RepositoryState build() {
            return $;
        }
    }

}
