// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.lakeformation.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LfTagState extends com.pulumi.resources.ResourceArgs {

    public static final LfTagState Empty = new LfTagState();

    /**
     * ID of the Data Catalog to create the tag in. If omitted, this defaults to the AWS Account ID.
     * 
     */
    @Import(name="catalogId")
    private @Nullable Output<String> catalogId;

    /**
     * @return ID of the Data Catalog to create the tag in. If omitted, this defaults to the AWS Account ID.
     * 
     */
    public Optional<Output<String>> catalogId() {
        return Optional.ofNullable(this.catalogId);
    }

    /**
     * Key-name for the tag.
     * 
     */
    @Import(name="key")
    private @Nullable Output<String> key;

    /**
     * @return Key-name for the tag.
     * 
     */
    public Optional<Output<String>> key() {
        return Optional.ofNullable(this.key);
    }

    /**
     * List of possible values an attribute can take.
     * 
     */
    @Import(name="values")
    private @Nullable Output<List<String>> values;

    /**
     * @return List of possible values an attribute can take.
     * 
     */
    public Optional<Output<List<String>>> values() {
        return Optional.ofNullable(this.values);
    }

    private LfTagState() {}

    private LfTagState(LfTagState $) {
        this.catalogId = $.catalogId;
        this.key = $.key;
        this.values = $.values;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LfTagState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LfTagState $;

        public Builder() {
            $ = new LfTagState();
        }

        public Builder(LfTagState defaults) {
            $ = new LfTagState(Objects.requireNonNull(defaults));
        }

        /**
         * @param catalogId ID of the Data Catalog to create the tag in. If omitted, this defaults to the AWS Account ID.
         * 
         * @return builder
         * 
         */
        public Builder catalogId(@Nullable Output<String> catalogId) {
            $.catalogId = catalogId;
            return this;
        }

        /**
         * @param catalogId ID of the Data Catalog to create the tag in. If omitted, this defaults to the AWS Account ID.
         * 
         * @return builder
         * 
         */
        public Builder catalogId(String catalogId) {
            return catalogId(Output.of(catalogId));
        }

        /**
         * @param key Key-name for the tag.
         * 
         * @return builder
         * 
         */
        public Builder key(@Nullable Output<String> key) {
            $.key = key;
            return this;
        }

        /**
         * @param key Key-name for the tag.
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            return key(Output.of(key));
        }

        /**
         * @param values List of possible values an attribute can take.
         * 
         * @return builder
         * 
         */
        public Builder values(@Nullable Output<List<String>> values) {
            $.values = values;
            return this;
        }

        /**
         * @param values List of possible values an attribute can take.
         * 
         * @return builder
         * 
         */
        public Builder values(List<String> values) {
            return values(Output.of(values));
        }

        /**
         * @param values List of possible values an attribute can take.
         * 
         * @return builder
         * 
         */
        public Builder values(String... values) {
            return values(List.of(values));
        }

        public LfTagState build() {
            return $;
        }
    }

}
