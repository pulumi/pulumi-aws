// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.imagebuilder;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WorkflowArgs extends com.pulumi.resources.ResourceArgs {

    public static final WorkflowArgs Empty = new WorkflowArgs();

    /**
     * Change description of the workflow.
     * 
     */
    @Import(name="changeDescription")
    private @Nullable Output<String> changeDescription;

    /**
     * @return Change description of the workflow.
     * 
     */
    public Optional<Output<String>> changeDescription() {
        return Optional.ofNullable(this.changeDescription);
    }

    /**
     * Inline YAML string with data of the workflow. Exactly one of `data` and `uri` can be specified.
     * 
     */
    @Import(name="data")
    private @Nullable Output<String> data;

    /**
     * @return Inline YAML string with data of the workflow. Exactly one of `data` and `uri` can be specified.
     * 
     */
    public Optional<Output<String>> data() {
        return Optional.ofNullable(this.data);
    }

    /**
     * Description of the workflow.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the workflow.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Amazon Resource Name (ARN) of the Key Management Service (KMS) Key used to encrypt the workflow.
     * 
     */
    @Import(name="kmsKeyId")
    private @Nullable Output<String> kmsKeyId;

    /**
     * @return Amazon Resource Name (ARN) of the Key Management Service (KMS) Key used to encrypt the workflow.
     * 
     */
    public Optional<Output<String>> kmsKeyId() {
        return Optional.ofNullable(this.kmsKeyId);
    }

    /**
     * Name of the workflow.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the workflow.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Key-value map of resource tags for the workflow. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Key-value map of resource tags for the workflow. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Type of the workflow. Valid values: `BUILD`, `TEST`, `DISTRIBUTION`.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Type of the workflow. Valid values: `BUILD`, `TEST`, `DISTRIBUTION`.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     * S3 URI with data of the workflow. Exactly one of `data` and `uri` can be specified.
     * 
     */
    @Import(name="uri")
    private @Nullable Output<String> uri;

    /**
     * @return S3 URI with data of the workflow. Exactly one of `data` and `uri` can be specified.
     * 
     */
    public Optional<Output<String>> uri() {
        return Optional.ofNullable(this.uri);
    }

    /**
     * Version of the workflow.
     * 
     * The following arguments are optional:
     * 
     */
    @Import(name="version", required=true)
    private Output<String> version;

    /**
     * @return Version of the workflow.
     * 
     * The following arguments are optional:
     * 
     */
    public Output<String> version() {
        return this.version;
    }

    private WorkflowArgs() {}

    private WorkflowArgs(WorkflowArgs $) {
        this.changeDescription = $.changeDescription;
        this.data = $.data;
        this.description = $.description;
        this.kmsKeyId = $.kmsKeyId;
        this.name = $.name;
        this.tags = $.tags;
        this.type = $.type;
        this.uri = $.uri;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WorkflowArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WorkflowArgs $;

        public Builder() {
            $ = new WorkflowArgs();
        }

        public Builder(WorkflowArgs defaults) {
            $ = new WorkflowArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param changeDescription Change description of the workflow.
         * 
         * @return builder
         * 
         */
        public Builder changeDescription(@Nullable Output<String> changeDescription) {
            $.changeDescription = changeDescription;
            return this;
        }

        /**
         * @param changeDescription Change description of the workflow.
         * 
         * @return builder
         * 
         */
        public Builder changeDescription(String changeDescription) {
            return changeDescription(Output.of(changeDescription));
        }

        /**
         * @param data Inline YAML string with data of the workflow. Exactly one of `data` and `uri` can be specified.
         * 
         * @return builder
         * 
         */
        public Builder data(@Nullable Output<String> data) {
            $.data = data;
            return this;
        }

        /**
         * @param data Inline YAML string with data of the workflow. Exactly one of `data` and `uri` can be specified.
         * 
         * @return builder
         * 
         */
        public Builder data(String data) {
            return data(Output.of(data));
        }

        /**
         * @param description Description of the workflow.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the workflow.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param kmsKeyId Amazon Resource Name (ARN) of the Key Management Service (KMS) Key used to encrypt the workflow.
         * 
         * @return builder
         * 
         */
        public Builder kmsKeyId(@Nullable Output<String> kmsKeyId) {
            $.kmsKeyId = kmsKeyId;
            return this;
        }

        /**
         * @param kmsKeyId Amazon Resource Name (ARN) of the Key Management Service (KMS) Key used to encrypt the workflow.
         * 
         * @return builder
         * 
         */
        public Builder kmsKeyId(String kmsKeyId) {
            return kmsKeyId(Output.of(kmsKeyId));
        }

        /**
         * @param name Name of the workflow.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the workflow.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param tags Key-value map of resource tags for the workflow. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Key-value map of resource tags for the workflow. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param type Type of the workflow. Valid values: `BUILD`, `TEST`, `DISTRIBUTION`.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of the workflow. Valid values: `BUILD`, `TEST`, `DISTRIBUTION`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param uri S3 URI with data of the workflow. Exactly one of `data` and `uri` can be specified.
         * 
         * @return builder
         * 
         */
        public Builder uri(@Nullable Output<String> uri) {
            $.uri = uri;
            return this;
        }

        /**
         * @param uri S3 URI with data of the workflow. Exactly one of `data` and `uri` can be specified.
         * 
         * @return builder
         * 
         */
        public Builder uri(String uri) {
            return uri(Output.of(uri));
        }

        /**
         * @param version Version of the workflow.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder version(Output<String> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version Version of the workflow.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder version(String version) {
            return version(Output.of(version));
        }

        public WorkflowArgs build() {
            if ($.type == null) {
                throw new MissingRequiredPropertyException("WorkflowArgs", "type");
            }
            if ($.version == null) {
                throw new MissingRequiredPropertyException("WorkflowArgs", "version");
            }
            return $;
        }
    }

}
