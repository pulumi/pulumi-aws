// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ssm.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ActivationState extends com.pulumi.resources.ResourceArgs {

    public static final ActivationState Empty = new ActivationState();

    @Import(name="activationCode")
    private @Nullable Output<String> activationCode;

    public Optional<Output<String>> activationCode() {
        return Optional.ofNullable(this.activationCode);
    }

    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="expirationDate")
    private @Nullable Output<String> expirationDate;

    public Optional<Output<String>> expirationDate() {
        return Optional.ofNullable(this.expirationDate);
    }

    @Import(name="expired")
    private @Nullable Output<Boolean> expired;

    public Optional<Output<Boolean>> expired() {
        return Optional.ofNullable(this.expired);
    }

    @Import(name="iamRole")
    private @Nullable Output<String> iamRole;

    public Optional<Output<String>> iamRole() {
        return Optional.ofNullable(this.iamRole);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="registrationCount")
    private @Nullable Output<Integer> registrationCount;

    public Optional<Output<Integer>> registrationCount() {
        return Optional.ofNullable(this.registrationCount);
    }

    @Import(name="registrationLimit")
    private @Nullable Output<Integer> registrationLimit;

    public Optional<Output<Integer>> registrationLimit() {
        return Optional.ofNullable(this.registrationLimit);
    }

    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    private ActivationState() {}

    private ActivationState(ActivationState $) {
        this.activationCode = $.activationCode;
        this.description = $.description;
        this.expirationDate = $.expirationDate;
        this.expired = $.expired;
        this.iamRole = $.iamRole;
        this.name = $.name;
        this.registrationCount = $.registrationCount;
        this.registrationLimit = $.registrationLimit;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ActivationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ActivationState $;

        public Builder() {
            $ = new ActivationState();
        }

        public Builder(ActivationState defaults) {
            $ = new ActivationState(Objects.requireNonNull(defaults));
        }

        public Builder activationCode(@Nullable Output<String> activationCode) {
            $.activationCode = activationCode;
            return this;
        }

        public Builder activationCode(String activationCode) {
            return activationCode(Output.of(activationCode));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder expirationDate(@Nullable Output<String> expirationDate) {
            $.expirationDate = expirationDate;
            return this;
        }

        public Builder expirationDate(String expirationDate) {
            return expirationDate(Output.of(expirationDate));
        }

        public Builder expired(@Nullable Output<Boolean> expired) {
            $.expired = expired;
            return this;
        }

        public Builder expired(Boolean expired) {
            return expired(Output.of(expired));
        }

        public Builder iamRole(@Nullable Output<String> iamRole) {
            $.iamRole = iamRole;
            return this;
        }

        public Builder iamRole(String iamRole) {
            return iamRole(Output.of(iamRole));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder registrationCount(@Nullable Output<Integer> registrationCount) {
            $.registrationCount = registrationCount;
            return this;
        }

        public Builder registrationCount(Integer registrationCount) {
            return registrationCount(Output.of(registrationCount));
        }

        public Builder registrationLimit(@Nullable Output<Integer> registrationLimit) {
            $.registrationLimit = registrationLimit;
            return this;
        }

        public Builder registrationLimit(Integer registrationLimit) {
            return registrationLimit(Output.of(registrationLimit));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        public ActivationState build() {
            return $;
        }
    }

}
