// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.mskconnect.inputs;

import com.pulumi.aws.mskconnect.inputs.ConnectorCapacityArgs;
import com.pulumi.aws.mskconnect.inputs.ConnectorKafkaClusterArgs;
import com.pulumi.aws.mskconnect.inputs.ConnectorKafkaClusterClientAuthenticationArgs;
import com.pulumi.aws.mskconnect.inputs.ConnectorKafkaClusterEncryptionInTransitArgs;
import com.pulumi.aws.mskconnect.inputs.ConnectorLogDeliveryArgs;
import com.pulumi.aws.mskconnect.inputs.ConnectorPluginArgs;
import com.pulumi.aws.mskconnect.inputs.ConnectorWorkerConfigurationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConnectorState extends com.pulumi.resources.ResourceArgs {

    public static final ConnectorState Empty = new ConnectorState();

    /**
     * The Amazon Resource Name (ARN) of the custom plugin.
     * 
     */
    @Import(name="arn")
    private @Nullable Output<String> arn;

    /**
     * @return The Amazon Resource Name (ARN) of the custom plugin.
     * 
     */
    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    /**
     * Information about the capacity allocated to the connector. See below.
     * 
     */
    @Import(name="capacity")
    private @Nullable Output<ConnectorCapacityArgs> capacity;

    /**
     * @return Information about the capacity allocated to the connector. See below.
     * 
     */
    public Optional<Output<ConnectorCapacityArgs>> capacity() {
        return Optional.ofNullable(this.capacity);
    }

    /**
     * A map of keys to values that represent the configuration for the connector.
     * 
     */
    @Import(name="connectorConfiguration")
    private @Nullable Output<Map<String,String>> connectorConfiguration;

    /**
     * @return A map of keys to values that represent the configuration for the connector.
     * 
     */
    public Optional<Output<Map<String,String>>> connectorConfiguration() {
        return Optional.ofNullable(this.connectorConfiguration);
    }

    /**
     * A summary description of the connector.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A summary description of the connector.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Specifies which Apache Kafka cluster to connect to. See below.
     * 
     */
    @Import(name="kafkaCluster")
    private @Nullable Output<ConnectorKafkaClusterArgs> kafkaCluster;

    /**
     * @return Specifies which Apache Kafka cluster to connect to. See below.
     * 
     */
    public Optional<Output<ConnectorKafkaClusterArgs>> kafkaCluster() {
        return Optional.ofNullable(this.kafkaCluster);
    }

    /**
     * Details of the client authentication used by the Apache Kafka cluster. See below.
     * 
     */
    @Import(name="kafkaClusterClientAuthentication")
    private @Nullable Output<ConnectorKafkaClusterClientAuthenticationArgs> kafkaClusterClientAuthentication;

    /**
     * @return Details of the client authentication used by the Apache Kafka cluster. See below.
     * 
     */
    public Optional<Output<ConnectorKafkaClusterClientAuthenticationArgs>> kafkaClusterClientAuthentication() {
        return Optional.ofNullable(this.kafkaClusterClientAuthentication);
    }

    /**
     * Details of encryption in transit to the Apache Kafka cluster. See below.
     * 
     */
    @Import(name="kafkaClusterEncryptionInTransit")
    private @Nullable Output<ConnectorKafkaClusterEncryptionInTransitArgs> kafkaClusterEncryptionInTransit;

    /**
     * @return Details of encryption in transit to the Apache Kafka cluster. See below.
     * 
     */
    public Optional<Output<ConnectorKafkaClusterEncryptionInTransitArgs>> kafkaClusterEncryptionInTransit() {
        return Optional.ofNullable(this.kafkaClusterEncryptionInTransit);
    }

    /**
     * The version of Kafka Connect. It has to be compatible with both the Apache Kafka cluster&#39;s version and the plugins.
     * 
     */
    @Import(name="kafkaconnectVersion")
    private @Nullable Output<String> kafkaconnectVersion;

    /**
     * @return The version of Kafka Connect. It has to be compatible with both the Apache Kafka cluster&#39;s version and the plugins.
     * 
     */
    public Optional<Output<String>> kafkaconnectVersion() {
        return Optional.ofNullable(this.kafkaconnectVersion);
    }

    /**
     * Details about log delivery. See below.
     * 
     */
    @Import(name="logDelivery")
    private @Nullable Output<ConnectorLogDeliveryArgs> logDelivery;

    /**
     * @return Details about log delivery. See below.
     * 
     */
    public Optional<Output<ConnectorLogDeliveryArgs>> logDelivery() {
        return Optional.ofNullable(this.logDelivery);
    }

    /**
     * The name of the connector.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the connector.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Specifies which plugins to use for the connector. See below.
     * 
     */
    @Import(name="plugins")
    private @Nullable Output<List<ConnectorPluginArgs>> plugins;

    /**
     * @return Specifies which plugins to use for the connector. See below.
     * 
     */
    public Optional<Output<List<ConnectorPluginArgs>>> plugins() {
        return Optional.ofNullable(this.plugins);
    }

    /**
     * The Amazon Resource Name (ARN) of the IAM role used by the connector to access the Amazon Web Services resources that it needs. The types of resources depends on the logic of the connector. For example, a connector that has Amazon S3 as a destination must have permissions that allow it to write to the S3 destination bucket.
     * 
     */
    @Import(name="serviceExecutionRoleArn")
    private @Nullable Output<String> serviceExecutionRoleArn;

    /**
     * @return The Amazon Resource Name (ARN) of the IAM role used by the connector to access the Amazon Web Services resources that it needs. The types of resources depends on the logic of the connector. For example, a connector that has Amazon S3 as a destination must have permissions that allow it to write to the S3 destination bucket.
     * 
     */
    public Optional<Output<String>> serviceExecutionRoleArn() {
        return Optional.ofNullable(this.serviceExecutionRoleArn);
    }

    /**
     * The current version of the connector.
     * 
     */
    @Import(name="version")
    private @Nullable Output<String> version;

    /**
     * @return The current version of the connector.
     * 
     */
    public Optional<Output<String>> version() {
        return Optional.ofNullable(this.version);
    }

    /**
     * Specifies which worker configuration to use with the connector. See below.
     * 
     */
    @Import(name="workerConfiguration")
    private @Nullable Output<ConnectorWorkerConfigurationArgs> workerConfiguration;

    /**
     * @return Specifies which worker configuration to use with the connector. See below.
     * 
     */
    public Optional<Output<ConnectorWorkerConfigurationArgs>> workerConfiguration() {
        return Optional.ofNullable(this.workerConfiguration);
    }

    private ConnectorState() {}

    private ConnectorState(ConnectorState $) {
        this.arn = $.arn;
        this.capacity = $.capacity;
        this.connectorConfiguration = $.connectorConfiguration;
        this.description = $.description;
        this.kafkaCluster = $.kafkaCluster;
        this.kafkaClusterClientAuthentication = $.kafkaClusterClientAuthentication;
        this.kafkaClusterEncryptionInTransit = $.kafkaClusterEncryptionInTransit;
        this.kafkaconnectVersion = $.kafkaconnectVersion;
        this.logDelivery = $.logDelivery;
        this.name = $.name;
        this.plugins = $.plugins;
        this.serviceExecutionRoleArn = $.serviceExecutionRoleArn;
        this.version = $.version;
        this.workerConfiguration = $.workerConfiguration;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectorState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectorState $;

        public Builder() {
            $ = new ConnectorState();
        }

        public Builder(ConnectorState defaults) {
            $ = new ConnectorState(Objects.requireNonNull(defaults));
        }

        /**
         * @param arn The Amazon Resource Name (ARN) of the custom plugin.
         * 
         * @return builder
         * 
         */
        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        /**
         * @param arn The Amazon Resource Name (ARN) of the custom plugin.
         * 
         * @return builder
         * 
         */
        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        /**
         * @param capacity Information about the capacity allocated to the connector. See below.
         * 
         * @return builder
         * 
         */
        public Builder capacity(@Nullable Output<ConnectorCapacityArgs> capacity) {
            $.capacity = capacity;
            return this;
        }

        /**
         * @param capacity Information about the capacity allocated to the connector. See below.
         * 
         * @return builder
         * 
         */
        public Builder capacity(ConnectorCapacityArgs capacity) {
            return capacity(Output.of(capacity));
        }

        /**
         * @param connectorConfiguration A map of keys to values that represent the configuration for the connector.
         * 
         * @return builder
         * 
         */
        public Builder connectorConfiguration(@Nullable Output<Map<String,String>> connectorConfiguration) {
            $.connectorConfiguration = connectorConfiguration;
            return this;
        }

        /**
         * @param connectorConfiguration A map of keys to values that represent the configuration for the connector.
         * 
         * @return builder
         * 
         */
        public Builder connectorConfiguration(Map<String,String> connectorConfiguration) {
            return connectorConfiguration(Output.of(connectorConfiguration));
        }

        /**
         * @param description A summary description of the connector.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A summary description of the connector.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param kafkaCluster Specifies which Apache Kafka cluster to connect to. See below.
         * 
         * @return builder
         * 
         */
        public Builder kafkaCluster(@Nullable Output<ConnectorKafkaClusterArgs> kafkaCluster) {
            $.kafkaCluster = kafkaCluster;
            return this;
        }

        /**
         * @param kafkaCluster Specifies which Apache Kafka cluster to connect to. See below.
         * 
         * @return builder
         * 
         */
        public Builder kafkaCluster(ConnectorKafkaClusterArgs kafkaCluster) {
            return kafkaCluster(Output.of(kafkaCluster));
        }

        /**
         * @param kafkaClusterClientAuthentication Details of the client authentication used by the Apache Kafka cluster. See below.
         * 
         * @return builder
         * 
         */
        public Builder kafkaClusterClientAuthentication(@Nullable Output<ConnectorKafkaClusterClientAuthenticationArgs> kafkaClusterClientAuthentication) {
            $.kafkaClusterClientAuthentication = kafkaClusterClientAuthentication;
            return this;
        }

        /**
         * @param kafkaClusterClientAuthentication Details of the client authentication used by the Apache Kafka cluster. See below.
         * 
         * @return builder
         * 
         */
        public Builder kafkaClusterClientAuthentication(ConnectorKafkaClusterClientAuthenticationArgs kafkaClusterClientAuthentication) {
            return kafkaClusterClientAuthentication(Output.of(kafkaClusterClientAuthentication));
        }

        /**
         * @param kafkaClusterEncryptionInTransit Details of encryption in transit to the Apache Kafka cluster. See below.
         * 
         * @return builder
         * 
         */
        public Builder kafkaClusterEncryptionInTransit(@Nullable Output<ConnectorKafkaClusterEncryptionInTransitArgs> kafkaClusterEncryptionInTransit) {
            $.kafkaClusterEncryptionInTransit = kafkaClusterEncryptionInTransit;
            return this;
        }

        /**
         * @param kafkaClusterEncryptionInTransit Details of encryption in transit to the Apache Kafka cluster. See below.
         * 
         * @return builder
         * 
         */
        public Builder kafkaClusterEncryptionInTransit(ConnectorKafkaClusterEncryptionInTransitArgs kafkaClusterEncryptionInTransit) {
            return kafkaClusterEncryptionInTransit(Output.of(kafkaClusterEncryptionInTransit));
        }

        /**
         * @param kafkaconnectVersion The version of Kafka Connect. It has to be compatible with both the Apache Kafka cluster&#39;s version and the plugins.
         * 
         * @return builder
         * 
         */
        public Builder kafkaconnectVersion(@Nullable Output<String> kafkaconnectVersion) {
            $.kafkaconnectVersion = kafkaconnectVersion;
            return this;
        }

        /**
         * @param kafkaconnectVersion The version of Kafka Connect. It has to be compatible with both the Apache Kafka cluster&#39;s version and the plugins.
         * 
         * @return builder
         * 
         */
        public Builder kafkaconnectVersion(String kafkaconnectVersion) {
            return kafkaconnectVersion(Output.of(kafkaconnectVersion));
        }

        /**
         * @param logDelivery Details about log delivery. See below.
         * 
         * @return builder
         * 
         */
        public Builder logDelivery(@Nullable Output<ConnectorLogDeliveryArgs> logDelivery) {
            $.logDelivery = logDelivery;
            return this;
        }

        /**
         * @param logDelivery Details about log delivery. See below.
         * 
         * @return builder
         * 
         */
        public Builder logDelivery(ConnectorLogDeliveryArgs logDelivery) {
            return logDelivery(Output.of(logDelivery));
        }

        /**
         * @param name The name of the connector.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the connector.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param plugins Specifies which plugins to use for the connector. See below.
         * 
         * @return builder
         * 
         */
        public Builder plugins(@Nullable Output<List<ConnectorPluginArgs>> plugins) {
            $.plugins = plugins;
            return this;
        }

        /**
         * @param plugins Specifies which plugins to use for the connector. See below.
         * 
         * @return builder
         * 
         */
        public Builder plugins(List<ConnectorPluginArgs> plugins) {
            return plugins(Output.of(plugins));
        }

        /**
         * @param plugins Specifies which plugins to use for the connector. See below.
         * 
         * @return builder
         * 
         */
        public Builder plugins(ConnectorPluginArgs... plugins) {
            return plugins(List.of(plugins));
        }

        /**
         * @param serviceExecutionRoleArn The Amazon Resource Name (ARN) of the IAM role used by the connector to access the Amazon Web Services resources that it needs. The types of resources depends on the logic of the connector. For example, a connector that has Amazon S3 as a destination must have permissions that allow it to write to the S3 destination bucket.
         * 
         * @return builder
         * 
         */
        public Builder serviceExecutionRoleArn(@Nullable Output<String> serviceExecutionRoleArn) {
            $.serviceExecutionRoleArn = serviceExecutionRoleArn;
            return this;
        }

        /**
         * @param serviceExecutionRoleArn The Amazon Resource Name (ARN) of the IAM role used by the connector to access the Amazon Web Services resources that it needs. The types of resources depends on the logic of the connector. For example, a connector that has Amazon S3 as a destination must have permissions that allow it to write to the S3 destination bucket.
         * 
         * @return builder
         * 
         */
        public Builder serviceExecutionRoleArn(String serviceExecutionRoleArn) {
            return serviceExecutionRoleArn(Output.of(serviceExecutionRoleArn));
        }

        /**
         * @param version The current version of the connector.
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable Output<String> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version The current version of the connector.
         * 
         * @return builder
         * 
         */
        public Builder version(String version) {
            return version(Output.of(version));
        }

        /**
         * @param workerConfiguration Specifies which worker configuration to use with the connector. See below.
         * 
         * @return builder
         * 
         */
        public Builder workerConfiguration(@Nullable Output<ConnectorWorkerConfigurationArgs> workerConfiguration) {
            $.workerConfiguration = workerConfiguration;
            return this;
        }

        /**
         * @param workerConfiguration Specifies which worker configuration to use with the connector. See below.
         * 
         * @return builder
         * 
         */
        public Builder workerConfiguration(ConnectorWorkerConfigurationArgs workerConfiguration) {
            return workerConfiguration(Output.of(workerConfiguration));
        }

        public ConnectorState build() {
            return $;
        }
    }

}
