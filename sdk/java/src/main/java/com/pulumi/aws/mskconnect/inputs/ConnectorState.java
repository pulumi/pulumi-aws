// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.mskconnect.inputs;

import com.pulumi.aws.mskconnect.inputs.ConnectorCapacityArgs;
import com.pulumi.aws.mskconnect.inputs.ConnectorKafkaClusterArgs;
import com.pulumi.aws.mskconnect.inputs.ConnectorKafkaClusterClientAuthenticationArgs;
import com.pulumi.aws.mskconnect.inputs.ConnectorKafkaClusterEncryptionInTransitArgs;
import com.pulumi.aws.mskconnect.inputs.ConnectorLogDeliveryArgs;
import com.pulumi.aws.mskconnect.inputs.ConnectorPluginArgs;
import com.pulumi.aws.mskconnect.inputs.ConnectorWorkerConfigurationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConnectorState extends com.pulumi.resources.ResourceArgs {

    public static final ConnectorState Empty = new ConnectorState();

    @Import(name="arn")
    private @Nullable Output<String> arn;

    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    @Import(name="capacity")
    private @Nullable Output<ConnectorCapacityArgs> capacity;

    public Optional<Output<ConnectorCapacityArgs>> capacity() {
        return Optional.ofNullable(this.capacity);
    }

    @Import(name="connectorConfiguration")
    private @Nullable Output<Map<String,String>> connectorConfiguration;

    public Optional<Output<Map<String,String>>> connectorConfiguration() {
        return Optional.ofNullable(this.connectorConfiguration);
    }

    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="kafkaCluster")
    private @Nullable Output<ConnectorKafkaClusterArgs> kafkaCluster;

    public Optional<Output<ConnectorKafkaClusterArgs>> kafkaCluster() {
        return Optional.ofNullable(this.kafkaCluster);
    }

    @Import(name="kafkaClusterClientAuthentication")
    private @Nullable Output<ConnectorKafkaClusterClientAuthenticationArgs> kafkaClusterClientAuthentication;

    public Optional<Output<ConnectorKafkaClusterClientAuthenticationArgs>> kafkaClusterClientAuthentication() {
        return Optional.ofNullable(this.kafkaClusterClientAuthentication);
    }

    @Import(name="kafkaClusterEncryptionInTransit")
    private @Nullable Output<ConnectorKafkaClusterEncryptionInTransitArgs> kafkaClusterEncryptionInTransit;

    public Optional<Output<ConnectorKafkaClusterEncryptionInTransitArgs>> kafkaClusterEncryptionInTransit() {
        return Optional.ofNullable(this.kafkaClusterEncryptionInTransit);
    }

    @Import(name="kafkaconnectVersion")
    private @Nullable Output<String> kafkaconnectVersion;

    public Optional<Output<String>> kafkaconnectVersion() {
        return Optional.ofNullable(this.kafkaconnectVersion);
    }

    @Import(name="logDelivery")
    private @Nullable Output<ConnectorLogDeliveryArgs> logDelivery;

    public Optional<Output<ConnectorLogDeliveryArgs>> logDelivery() {
        return Optional.ofNullable(this.logDelivery);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="plugins")
    private @Nullable Output<List<ConnectorPluginArgs>> plugins;

    public Optional<Output<List<ConnectorPluginArgs>>> plugins() {
        return Optional.ofNullable(this.plugins);
    }

    @Import(name="serviceExecutionRoleArn")
    private @Nullable Output<String> serviceExecutionRoleArn;

    public Optional<Output<String>> serviceExecutionRoleArn() {
        return Optional.ofNullable(this.serviceExecutionRoleArn);
    }

    @Import(name="version")
    private @Nullable Output<String> version;

    public Optional<Output<String>> version() {
        return Optional.ofNullable(this.version);
    }

    @Import(name="workerConfiguration")
    private @Nullable Output<ConnectorWorkerConfigurationArgs> workerConfiguration;

    public Optional<Output<ConnectorWorkerConfigurationArgs>> workerConfiguration() {
        return Optional.ofNullable(this.workerConfiguration);
    }

    private ConnectorState() {}

    private ConnectorState(ConnectorState $) {
        this.arn = $.arn;
        this.capacity = $.capacity;
        this.connectorConfiguration = $.connectorConfiguration;
        this.description = $.description;
        this.kafkaCluster = $.kafkaCluster;
        this.kafkaClusterClientAuthentication = $.kafkaClusterClientAuthentication;
        this.kafkaClusterEncryptionInTransit = $.kafkaClusterEncryptionInTransit;
        this.kafkaconnectVersion = $.kafkaconnectVersion;
        this.logDelivery = $.logDelivery;
        this.name = $.name;
        this.plugins = $.plugins;
        this.serviceExecutionRoleArn = $.serviceExecutionRoleArn;
        this.version = $.version;
        this.workerConfiguration = $.workerConfiguration;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectorState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectorState $;

        public Builder() {
            $ = new ConnectorState();
        }

        public Builder(ConnectorState defaults) {
            $ = new ConnectorState(Objects.requireNonNull(defaults));
        }

        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        public Builder capacity(@Nullable Output<ConnectorCapacityArgs> capacity) {
            $.capacity = capacity;
            return this;
        }

        public Builder capacity(ConnectorCapacityArgs capacity) {
            return capacity(Output.of(capacity));
        }

        public Builder connectorConfiguration(@Nullable Output<Map<String,String>> connectorConfiguration) {
            $.connectorConfiguration = connectorConfiguration;
            return this;
        }

        public Builder connectorConfiguration(Map<String,String> connectorConfiguration) {
            return connectorConfiguration(Output.of(connectorConfiguration));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder kafkaCluster(@Nullable Output<ConnectorKafkaClusterArgs> kafkaCluster) {
            $.kafkaCluster = kafkaCluster;
            return this;
        }

        public Builder kafkaCluster(ConnectorKafkaClusterArgs kafkaCluster) {
            return kafkaCluster(Output.of(kafkaCluster));
        }

        public Builder kafkaClusterClientAuthentication(@Nullable Output<ConnectorKafkaClusterClientAuthenticationArgs> kafkaClusterClientAuthentication) {
            $.kafkaClusterClientAuthentication = kafkaClusterClientAuthentication;
            return this;
        }

        public Builder kafkaClusterClientAuthentication(ConnectorKafkaClusterClientAuthenticationArgs kafkaClusterClientAuthentication) {
            return kafkaClusterClientAuthentication(Output.of(kafkaClusterClientAuthentication));
        }

        public Builder kafkaClusterEncryptionInTransit(@Nullable Output<ConnectorKafkaClusterEncryptionInTransitArgs> kafkaClusterEncryptionInTransit) {
            $.kafkaClusterEncryptionInTransit = kafkaClusterEncryptionInTransit;
            return this;
        }

        public Builder kafkaClusterEncryptionInTransit(ConnectorKafkaClusterEncryptionInTransitArgs kafkaClusterEncryptionInTransit) {
            return kafkaClusterEncryptionInTransit(Output.of(kafkaClusterEncryptionInTransit));
        }

        public Builder kafkaconnectVersion(@Nullable Output<String> kafkaconnectVersion) {
            $.kafkaconnectVersion = kafkaconnectVersion;
            return this;
        }

        public Builder kafkaconnectVersion(String kafkaconnectVersion) {
            return kafkaconnectVersion(Output.of(kafkaconnectVersion));
        }

        public Builder logDelivery(@Nullable Output<ConnectorLogDeliveryArgs> logDelivery) {
            $.logDelivery = logDelivery;
            return this;
        }

        public Builder logDelivery(ConnectorLogDeliveryArgs logDelivery) {
            return logDelivery(Output.of(logDelivery));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder plugins(@Nullable Output<List<ConnectorPluginArgs>> plugins) {
            $.plugins = plugins;
            return this;
        }

        public Builder plugins(List<ConnectorPluginArgs> plugins) {
            return plugins(Output.of(plugins));
        }

        public Builder plugins(ConnectorPluginArgs... plugins) {
            return plugins(List.of(plugins));
        }

        public Builder serviceExecutionRoleArn(@Nullable Output<String> serviceExecutionRoleArn) {
            $.serviceExecutionRoleArn = serviceExecutionRoleArn;
            return this;
        }

        public Builder serviceExecutionRoleArn(String serviceExecutionRoleArn) {
            return serviceExecutionRoleArn(Output.of(serviceExecutionRoleArn));
        }

        public Builder version(@Nullable Output<String> version) {
            $.version = version;
            return this;
        }

        public Builder version(String version) {
            return version(Output.of(version));
        }

        public Builder workerConfiguration(@Nullable Output<ConnectorWorkerConfigurationArgs> workerConfiguration) {
            $.workerConfiguration = workerConfiguration;
            return this;
        }

        public Builder workerConfiguration(ConnectorWorkerConfigurationArgs workerConfiguration) {
            return workerConfiguration(Output.of(workerConfiguration));
        }

        public ConnectorState build() {
            return $;
        }
    }

}
