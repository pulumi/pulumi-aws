// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ec2.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class InstanceInstanceMarketOptionsSpotOptions {
    /**
     * @return The behavior when a Spot Instance is interrupted. Valid values include `hibernate`, `stop`, `terminate` . The default is `terminate`.
     * 
     */
    private @Nullable String instanceInterruptionBehavior;
    /**
     * @return The maximum hourly price that you&#39;re willing to pay for a Spot Instance.
     * 
     */
    private @Nullable String maxPrice;
    /**
     * @return The Spot Instance request type. Valid values include `one-time`, `persistent`. Persistent Spot Instance requests are only supported when the instance interruption behavior is either hibernate or stop. The default is `one-time`.
     * 
     */
    private @Nullable String spotInstanceType;
    /**
     * @return The end date of the request, in UTC format (YYYY-MM-DDTHH:MM:SSZ). Supported only for persistent requests.
     * 
     */
    private @Nullable String validUntil;

    private InstanceInstanceMarketOptionsSpotOptions() {}
    /**
     * @return The behavior when a Spot Instance is interrupted. Valid values include `hibernate`, `stop`, `terminate` . The default is `terminate`.
     * 
     */
    public Optional<String> instanceInterruptionBehavior() {
        return Optional.ofNullable(this.instanceInterruptionBehavior);
    }
    /**
     * @return The maximum hourly price that you&#39;re willing to pay for a Spot Instance.
     * 
     */
    public Optional<String> maxPrice() {
        return Optional.ofNullable(this.maxPrice);
    }
    /**
     * @return The Spot Instance request type. Valid values include `one-time`, `persistent`. Persistent Spot Instance requests are only supported when the instance interruption behavior is either hibernate or stop. The default is `one-time`.
     * 
     */
    public Optional<String> spotInstanceType() {
        return Optional.ofNullable(this.spotInstanceType);
    }
    /**
     * @return The end date of the request, in UTC format (YYYY-MM-DDTHH:MM:SSZ). Supported only for persistent requests.
     * 
     */
    public Optional<String> validUntil() {
        return Optional.ofNullable(this.validUntil);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(InstanceInstanceMarketOptionsSpotOptions defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String instanceInterruptionBehavior;
        private @Nullable String maxPrice;
        private @Nullable String spotInstanceType;
        private @Nullable String validUntil;
        public Builder() {}
        public Builder(InstanceInstanceMarketOptionsSpotOptions defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.instanceInterruptionBehavior = defaults.instanceInterruptionBehavior;
    	      this.maxPrice = defaults.maxPrice;
    	      this.spotInstanceType = defaults.spotInstanceType;
    	      this.validUntil = defaults.validUntil;
        }

        @CustomType.Setter
        public Builder instanceInterruptionBehavior(@Nullable String instanceInterruptionBehavior) {

            this.instanceInterruptionBehavior = instanceInterruptionBehavior;
            return this;
        }
        @CustomType.Setter
        public Builder maxPrice(@Nullable String maxPrice) {

            this.maxPrice = maxPrice;
            return this;
        }
        @CustomType.Setter
        public Builder spotInstanceType(@Nullable String spotInstanceType) {

            this.spotInstanceType = spotInstanceType;
            return this;
        }
        @CustomType.Setter
        public Builder validUntil(@Nullable String validUntil) {

            this.validUntil = validUntil;
            return this;
        }
        public InstanceInstanceMarketOptionsSpotOptions build() {
            final var _resultValue = new InstanceInstanceMarketOptionsSpotOptions();
            _resultValue.instanceInterruptionBehavior = instanceInterruptionBehavior;
            _resultValue.maxPrice = maxPrice;
            _resultValue.spotInstanceType = spotInstanceType;
            _resultValue.validUntil = validUntil;
            return _resultValue;
        }
    }
}
