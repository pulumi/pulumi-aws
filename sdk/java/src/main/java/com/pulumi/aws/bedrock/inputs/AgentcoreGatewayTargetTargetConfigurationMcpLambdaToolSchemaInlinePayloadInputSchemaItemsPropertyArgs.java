// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.bedrock.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AgentcoreGatewayTargetTargetConfigurationMcpLambdaToolSchemaInlinePayloadInputSchemaItemsPropertyArgs extends com.pulumi.resources.ResourceArgs {

    public static final AgentcoreGatewayTargetTargetConfigurationMcpLambdaToolSchemaInlinePayloadInputSchemaItemsPropertyArgs Empty = new AgentcoreGatewayTargetTargetConfigurationMcpLambdaToolSchemaInlinePayloadInputSchemaItemsPropertyArgs();

    /**
     * Description of the property.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the property.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * JSON-encoded schema definition for array items. Used for complex nested structures. Cannot be used with `propertiesJson`.
     * 
     */
    @Import(name="itemsJson")
    private @Nullable Output<String> itemsJson;

    /**
     * @return JSON-encoded schema definition for array items. Used for complex nested structures. Cannot be used with `propertiesJson`.
     * 
     */
    public Optional<Output<String>> itemsJson() {
        return Optional.ofNullable(this.itemsJson);
    }

    /**
     * Name of the property.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Name of the property.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * JSON-encoded schema definition for object properties. Used for complex nested structures. Cannot be used with `itemsJson`.
     * 
     */
    @Import(name="propertiesJson")
    private @Nullable Output<String> propertiesJson;

    /**
     * @return JSON-encoded schema definition for object properties. Used for complex nested structures. Cannot be used with `itemsJson`.
     * 
     */
    public Optional<Output<String>> propertiesJson() {
        return Optional.ofNullable(this.propertiesJson);
    }

    /**
     * Whether this property is required. Defaults to `false`.
     * 
     */
    @Import(name="required")
    private @Nullable Output<Boolean> required;

    /**
     * @return Whether this property is required. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> required() {
        return Optional.ofNullable(this.required);
    }

    /**
     * Data type of the property.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Data type of the property.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private AgentcoreGatewayTargetTargetConfigurationMcpLambdaToolSchemaInlinePayloadInputSchemaItemsPropertyArgs() {}

    private AgentcoreGatewayTargetTargetConfigurationMcpLambdaToolSchemaInlinePayloadInputSchemaItemsPropertyArgs(AgentcoreGatewayTargetTargetConfigurationMcpLambdaToolSchemaInlinePayloadInputSchemaItemsPropertyArgs $) {
        this.description = $.description;
        this.itemsJson = $.itemsJson;
        this.name = $.name;
        this.propertiesJson = $.propertiesJson;
        this.required = $.required;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AgentcoreGatewayTargetTargetConfigurationMcpLambdaToolSchemaInlinePayloadInputSchemaItemsPropertyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AgentcoreGatewayTargetTargetConfigurationMcpLambdaToolSchemaInlinePayloadInputSchemaItemsPropertyArgs $;

        public Builder() {
            $ = new AgentcoreGatewayTargetTargetConfigurationMcpLambdaToolSchemaInlinePayloadInputSchemaItemsPropertyArgs();
        }

        public Builder(AgentcoreGatewayTargetTargetConfigurationMcpLambdaToolSchemaInlinePayloadInputSchemaItemsPropertyArgs defaults) {
            $ = new AgentcoreGatewayTargetTargetConfigurationMcpLambdaToolSchemaInlinePayloadInputSchemaItemsPropertyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Description of the property.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the property.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param itemsJson JSON-encoded schema definition for array items. Used for complex nested structures. Cannot be used with `propertiesJson`.
         * 
         * @return builder
         * 
         */
        public Builder itemsJson(@Nullable Output<String> itemsJson) {
            $.itemsJson = itemsJson;
            return this;
        }

        /**
         * @param itemsJson JSON-encoded schema definition for array items. Used for complex nested structures. Cannot be used with `propertiesJson`.
         * 
         * @return builder
         * 
         */
        public Builder itemsJson(String itemsJson) {
            return itemsJson(Output.of(itemsJson));
        }

        /**
         * @param name Name of the property.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the property.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param propertiesJson JSON-encoded schema definition for object properties. Used for complex nested structures. Cannot be used with `itemsJson`.
         * 
         * @return builder
         * 
         */
        public Builder propertiesJson(@Nullable Output<String> propertiesJson) {
            $.propertiesJson = propertiesJson;
            return this;
        }

        /**
         * @param propertiesJson JSON-encoded schema definition for object properties. Used for complex nested structures. Cannot be used with `itemsJson`.
         * 
         * @return builder
         * 
         */
        public Builder propertiesJson(String propertiesJson) {
            return propertiesJson(Output.of(propertiesJson));
        }

        /**
         * @param required Whether this property is required. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder required(@Nullable Output<Boolean> required) {
            $.required = required;
            return this;
        }

        /**
         * @param required Whether this property is required. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder required(Boolean required) {
            return required(Output.of(required));
        }

        /**
         * @param type Data type of the property.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Data type of the property.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public AgentcoreGatewayTargetTargetConfigurationMcpLambdaToolSchemaInlinePayloadInputSchemaItemsPropertyArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("AgentcoreGatewayTargetTargetConfigurationMcpLambdaToolSchemaInlinePayloadInputSchemaItemsPropertyArgs", "name");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("AgentcoreGatewayTargetTargetConfigurationMcpLambdaToolSchemaInlinePayloadInputSchemaItemsPropertyArgs", "type");
            }
            return $;
        }
    }

}
