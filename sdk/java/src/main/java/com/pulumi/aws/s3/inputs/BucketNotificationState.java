// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.s3.inputs;

import com.pulumi.aws.s3.inputs.BucketNotificationLambdaFunctionArgs;
import com.pulumi.aws.s3.inputs.BucketNotificationQueueArgs;
import com.pulumi.aws.s3.inputs.BucketNotificationTopicArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BucketNotificationState extends com.pulumi.resources.ResourceArgs {

    public static final BucketNotificationState Empty = new BucketNotificationState();

    @Import(name="bucket")
    private @Nullable Output<String> bucket;

    public Optional<Output<String>> bucket() {
        return Optional.ofNullable(this.bucket);
    }

    @Import(name="eventbridge")
    private @Nullable Output<Boolean> eventbridge;

    public Optional<Output<Boolean>> eventbridge() {
        return Optional.ofNullable(this.eventbridge);
    }

    @Import(name="lambdaFunctions")
    private @Nullable Output<List<BucketNotificationLambdaFunctionArgs>> lambdaFunctions;

    public Optional<Output<List<BucketNotificationLambdaFunctionArgs>>> lambdaFunctions() {
        return Optional.ofNullable(this.lambdaFunctions);
    }

    @Import(name="queues")
    private @Nullable Output<List<BucketNotificationQueueArgs>> queues;

    public Optional<Output<List<BucketNotificationQueueArgs>>> queues() {
        return Optional.ofNullable(this.queues);
    }

    @Import(name="topics")
    private @Nullable Output<List<BucketNotificationTopicArgs>> topics;

    public Optional<Output<List<BucketNotificationTopicArgs>>> topics() {
        return Optional.ofNullable(this.topics);
    }

    private BucketNotificationState() {}

    private BucketNotificationState(BucketNotificationState $) {
        this.bucket = $.bucket;
        this.eventbridge = $.eventbridge;
        this.lambdaFunctions = $.lambdaFunctions;
        this.queues = $.queues;
        this.topics = $.topics;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BucketNotificationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BucketNotificationState $;

        public Builder() {
            $ = new BucketNotificationState();
        }

        public Builder(BucketNotificationState defaults) {
            $ = new BucketNotificationState(Objects.requireNonNull(defaults));
        }

        public Builder bucket(@Nullable Output<String> bucket) {
            $.bucket = bucket;
            return this;
        }

        public Builder bucket(String bucket) {
            return bucket(Output.of(bucket));
        }

        public Builder eventbridge(@Nullable Output<Boolean> eventbridge) {
            $.eventbridge = eventbridge;
            return this;
        }

        public Builder eventbridge(Boolean eventbridge) {
            return eventbridge(Output.of(eventbridge));
        }

        public Builder lambdaFunctions(@Nullable Output<List<BucketNotificationLambdaFunctionArgs>> lambdaFunctions) {
            $.lambdaFunctions = lambdaFunctions;
            return this;
        }

        public Builder lambdaFunctions(List<BucketNotificationLambdaFunctionArgs> lambdaFunctions) {
            return lambdaFunctions(Output.of(lambdaFunctions));
        }

        public Builder lambdaFunctions(BucketNotificationLambdaFunctionArgs... lambdaFunctions) {
            return lambdaFunctions(List.of(lambdaFunctions));
        }

        public Builder queues(@Nullable Output<List<BucketNotificationQueueArgs>> queues) {
            $.queues = queues;
            return this;
        }

        public Builder queues(List<BucketNotificationQueueArgs> queues) {
            return queues(Output.of(queues));
        }

        public Builder queues(BucketNotificationQueueArgs... queues) {
            return queues(List.of(queues));
        }

        public Builder topics(@Nullable Output<List<BucketNotificationTopicArgs>> topics) {
            $.topics = topics;
            return this;
        }

        public Builder topics(List<BucketNotificationTopicArgs> topics) {
            return topics(Output.of(topics));
        }

        public Builder topics(BucketNotificationTopicArgs... topics) {
            return topics(List.of(topics));
        }

        public BucketNotificationState build() {
            return $;
        }
    }

}
