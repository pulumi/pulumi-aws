// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.wafregional.inputs;

import com.pulumi.aws.wafregional.inputs.SizeConstraintSetSizeConstraintFieldToMatchArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class SizeConstraintSetSizeConstraintArgs extends com.pulumi.resources.ResourceArgs {

    public static final SizeConstraintSetSizeConstraintArgs Empty = new SizeConstraintSetSizeConstraintArgs();

    @Import(name="comparisonOperator", required=true)
    private Output<String> comparisonOperator;

    public Output<String> comparisonOperator() {
        return this.comparisonOperator;
    }

    @Import(name="fieldToMatch", required=true)
    private Output<SizeConstraintSetSizeConstraintFieldToMatchArgs> fieldToMatch;

    public Output<SizeConstraintSetSizeConstraintFieldToMatchArgs> fieldToMatch() {
        return this.fieldToMatch;
    }

    @Import(name="size", required=true)
    private Output<Integer> size;

    public Output<Integer> size() {
        return this.size;
    }

    @Import(name="textTransformation", required=true)
    private Output<String> textTransformation;

    public Output<String> textTransformation() {
        return this.textTransformation;
    }

    private SizeConstraintSetSizeConstraintArgs() {}

    private SizeConstraintSetSizeConstraintArgs(SizeConstraintSetSizeConstraintArgs $) {
        this.comparisonOperator = $.comparisonOperator;
        this.fieldToMatch = $.fieldToMatch;
        this.size = $.size;
        this.textTransformation = $.textTransformation;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SizeConstraintSetSizeConstraintArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SizeConstraintSetSizeConstraintArgs $;

        public Builder() {
            $ = new SizeConstraintSetSizeConstraintArgs();
        }

        public Builder(SizeConstraintSetSizeConstraintArgs defaults) {
            $ = new SizeConstraintSetSizeConstraintArgs(Objects.requireNonNull(defaults));
        }

        public Builder comparisonOperator(Output<String> comparisonOperator) {
            $.comparisonOperator = comparisonOperator;
            return this;
        }

        public Builder comparisonOperator(String comparisonOperator) {
            return comparisonOperator(Output.of(comparisonOperator));
        }

        public Builder fieldToMatch(Output<SizeConstraintSetSizeConstraintFieldToMatchArgs> fieldToMatch) {
            $.fieldToMatch = fieldToMatch;
            return this;
        }

        public Builder fieldToMatch(SizeConstraintSetSizeConstraintFieldToMatchArgs fieldToMatch) {
            return fieldToMatch(Output.of(fieldToMatch));
        }

        public Builder size(Output<Integer> size) {
            $.size = size;
            return this;
        }

        public Builder size(Integer size) {
            return size(Output.of(size));
        }

        public Builder textTransformation(Output<String> textTransformation) {
            $.textTransformation = textTransformation;
            return this;
        }

        public Builder textTransformation(String textTransformation) {
            return textTransformation(Output.of(textTransformation));
        }

        public SizeConstraintSetSizeConstraintArgs build() {
            if ($.comparisonOperator == null) {
                throw new MissingRequiredPropertyException("SizeConstraintSetSizeConstraintArgs", "comparisonOperator");
            }
            if ($.fieldToMatch == null) {
                throw new MissingRequiredPropertyException("SizeConstraintSetSizeConstraintArgs", "fieldToMatch");
            }
            if ($.size == null) {
                throw new MissingRequiredPropertyException("SizeConstraintSetSizeConstraintArgs", "size");
            }
            if ($.textTransformation == null) {
                throw new MissingRequiredPropertyException("SizeConstraintSetSizeConstraintArgs", "textTransformation");
            }
            return $;
        }
    }

}
