// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.s3.outputs;

import com.pulumi.aws.s3.outputs.Condition;
import com.pulumi.aws.s3.outputs.Redirect;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class RoutingRule {
    /**
     * @return A condition that must be met for the specified redirect to be applied. If not included, the rule is applied to all requests.
     * 
     */
    private @Nullable Condition Condition;
    /**
     * @return Provides instructions for redirecting the request. You can redirect requests to another host or another page, or you can specify another protocol to use.
     * 
     */
    private Redirect Redirect;

    private RoutingRule() {}
    /**
     * @return A condition that must be met for the specified redirect to be applied. If not included, the rule is applied to all requests.
     * 
     */
    public Optional<Condition> Condition() {
        return Optional.ofNullable(this.Condition);
    }
    /**
     * @return Provides instructions for redirecting the request. You can redirect requests to another host or another page, or you can specify another protocol to use.
     * 
     */
    public Redirect Redirect() {
        return this.Redirect;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RoutingRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Condition Condition;
        private Redirect Redirect;
        public Builder() {}
        public Builder(RoutingRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.Condition = defaults.Condition;
    	      this.Redirect = defaults.Redirect;
        }

        @CustomType.Setter
        public Builder Condition(@Nullable Condition Condition) {

            this.Condition = Condition;
            return this;
        }
        @CustomType.Setter
        public Builder Redirect(Redirect Redirect) {
            if (Redirect == null) {
              throw new MissingRequiredPropertyException("RoutingRule", "Redirect");
            }
            this.Redirect = Redirect;
            return this;
        }
        public RoutingRule build() {
            final var _resultValue = new RoutingRule();
            _resultValue.Condition = Condition;
            _resultValue.Redirect = Redirect;
            return _resultValue;
        }
    }
}
