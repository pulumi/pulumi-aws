// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.serverlessrepository;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CloudFormationStackArgs extends com.pulumi.resources.ResourceArgs {

    public static final CloudFormationStackArgs Empty = new CloudFormationStackArgs();

    @Import(name="applicationId", required=true)
    private Output<String> applicationId;

    public Output<String> applicationId() {
        return this.applicationId;
    }

    @Import(name="capabilities", required=true)
    private Output<List<String>> capabilities;

    public Output<List<String>> capabilities() {
        return this.capabilities;
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="parameters")
    private @Nullable Output<Map<String,String>> parameters;

    public Optional<Output<Map<String,String>>> parameters() {
        return Optional.ofNullable(this.parameters);
    }

    @Import(name="semanticVersion")
    private @Nullable Output<String> semanticVersion;

    public Optional<Output<String>> semanticVersion() {
        return Optional.ofNullable(this.semanticVersion);
    }

    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private CloudFormationStackArgs() {}

    private CloudFormationStackArgs(CloudFormationStackArgs $) {
        this.applicationId = $.applicationId;
        this.capabilities = $.capabilities;
        this.name = $.name;
        this.parameters = $.parameters;
        this.semanticVersion = $.semanticVersion;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CloudFormationStackArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CloudFormationStackArgs $;

        public Builder() {
            $ = new CloudFormationStackArgs();
        }

        public Builder(CloudFormationStackArgs defaults) {
            $ = new CloudFormationStackArgs(Objects.requireNonNull(defaults));
        }

        public Builder applicationId(Output<String> applicationId) {
            $.applicationId = applicationId;
            return this;
        }

        public Builder applicationId(String applicationId) {
            return applicationId(Output.of(applicationId));
        }

        public Builder capabilities(Output<List<String>> capabilities) {
            $.capabilities = capabilities;
            return this;
        }

        public Builder capabilities(List<String> capabilities) {
            return capabilities(Output.of(capabilities));
        }

        public Builder capabilities(String... capabilities) {
            return capabilities(List.of(capabilities));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder parameters(@Nullable Output<Map<String,String>> parameters) {
            $.parameters = parameters;
            return this;
        }

        public Builder parameters(Map<String,String> parameters) {
            return parameters(Output.of(parameters));
        }

        public Builder semanticVersion(@Nullable Output<String> semanticVersion) {
            $.semanticVersion = semanticVersion;
            return this;
        }

        public Builder semanticVersion(String semanticVersion) {
            return semanticVersion(Output.of(semanticVersion));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public CloudFormationStackArgs build() {
            $.applicationId = Objects.requireNonNull($.applicationId, "expected parameter 'applicationId' to be non-null");
            $.capabilities = Objects.requireNonNull($.capabilities, "expected parameter 'capabilities' to be non-null");
            return $;
        }
    }

}
