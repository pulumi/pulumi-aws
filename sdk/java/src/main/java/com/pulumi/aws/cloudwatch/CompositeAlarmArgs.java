// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.cloudwatch;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CompositeAlarmArgs extends com.pulumi.resources.ResourceArgs {

    public static final CompositeAlarmArgs Empty = new CompositeAlarmArgs();

    @Import(name="actionsEnabled")
    private @Nullable Output<Boolean> actionsEnabled;

    public Optional<Output<Boolean>> actionsEnabled() {
        return Optional.ofNullable(this.actionsEnabled);
    }

    @Import(name="alarmActions")
    private @Nullable Output<List<String>> alarmActions;

    public Optional<Output<List<String>>> alarmActions() {
        return Optional.ofNullable(this.alarmActions);
    }

    @Import(name="alarmDescription")
    private @Nullable Output<String> alarmDescription;

    public Optional<Output<String>> alarmDescription() {
        return Optional.ofNullable(this.alarmDescription);
    }

    @Import(name="alarmName", required=true)
    private Output<String> alarmName;

    public Output<String> alarmName() {
        return this.alarmName;
    }

    @Import(name="alarmRule", required=true)
    private Output<String> alarmRule;

    public Output<String> alarmRule() {
        return this.alarmRule;
    }

    @Import(name="insufficientDataActions")
    private @Nullable Output<List<String>> insufficientDataActions;

    public Optional<Output<List<String>>> insufficientDataActions() {
        return Optional.ofNullable(this.insufficientDataActions);
    }

    @Import(name="okActions")
    private @Nullable Output<List<String>> okActions;

    public Optional<Output<List<String>>> okActions() {
        return Optional.ofNullable(this.okActions);
    }

    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private CompositeAlarmArgs() {}

    private CompositeAlarmArgs(CompositeAlarmArgs $) {
        this.actionsEnabled = $.actionsEnabled;
        this.alarmActions = $.alarmActions;
        this.alarmDescription = $.alarmDescription;
        this.alarmName = $.alarmName;
        this.alarmRule = $.alarmRule;
        this.insufficientDataActions = $.insufficientDataActions;
        this.okActions = $.okActions;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CompositeAlarmArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CompositeAlarmArgs $;

        public Builder() {
            $ = new CompositeAlarmArgs();
        }

        public Builder(CompositeAlarmArgs defaults) {
            $ = new CompositeAlarmArgs(Objects.requireNonNull(defaults));
        }

        public Builder actionsEnabled(@Nullable Output<Boolean> actionsEnabled) {
            $.actionsEnabled = actionsEnabled;
            return this;
        }

        public Builder actionsEnabled(Boolean actionsEnabled) {
            return actionsEnabled(Output.of(actionsEnabled));
        }

        public Builder alarmActions(@Nullable Output<List<String>> alarmActions) {
            $.alarmActions = alarmActions;
            return this;
        }

        public Builder alarmActions(List<String> alarmActions) {
            return alarmActions(Output.of(alarmActions));
        }

        public Builder alarmActions(String... alarmActions) {
            return alarmActions(List.of(alarmActions));
        }

        public Builder alarmDescription(@Nullable Output<String> alarmDescription) {
            $.alarmDescription = alarmDescription;
            return this;
        }

        public Builder alarmDescription(String alarmDescription) {
            return alarmDescription(Output.of(alarmDescription));
        }

        public Builder alarmName(Output<String> alarmName) {
            $.alarmName = alarmName;
            return this;
        }

        public Builder alarmName(String alarmName) {
            return alarmName(Output.of(alarmName));
        }

        public Builder alarmRule(Output<String> alarmRule) {
            $.alarmRule = alarmRule;
            return this;
        }

        public Builder alarmRule(String alarmRule) {
            return alarmRule(Output.of(alarmRule));
        }

        public Builder insufficientDataActions(@Nullable Output<List<String>> insufficientDataActions) {
            $.insufficientDataActions = insufficientDataActions;
            return this;
        }

        public Builder insufficientDataActions(List<String> insufficientDataActions) {
            return insufficientDataActions(Output.of(insufficientDataActions));
        }

        public Builder insufficientDataActions(String... insufficientDataActions) {
            return insufficientDataActions(List.of(insufficientDataActions));
        }

        public Builder okActions(@Nullable Output<List<String>> okActions) {
            $.okActions = okActions;
            return this;
        }

        public Builder okActions(List<String> okActions) {
            return okActions(Output.of(okActions));
        }

        public Builder okActions(String... okActions) {
            return okActions(List.of(okActions));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public CompositeAlarmArgs build() {
            $.alarmName = Objects.requireNonNull($.alarmName, "expected parameter 'alarmName' to be non-null");
            $.alarmRule = Objects.requireNonNull($.alarmRule, "expected parameter 'alarmRule' to be non-null");
            return $;
        }
    }

}
