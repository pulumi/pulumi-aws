// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ebs.outputs;

import com.pulumi.aws.ebs.outputs.GetSnapshotFilter;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetSnapshotResult {
    /**
     * @return ARN of the EBS Snapshot.
     * 
     */
    private String arn;
    /**
     * @return The data encryption key identifier for the snapshot.
     * 
     */
    private String dataEncryptionKeyId;
    /**
     * @return Description for the snapshot
     * 
     */
    private String description;
    /**
     * @return Whether the snapshot is encrypted.
     * 
     */
    private Boolean encrypted;
    private @Nullable List<GetSnapshotFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return ARN for the KMS encryption key.
     * 
     */
    private String kmsKeyId;
    private @Nullable Boolean mostRecent;
    /**
     * @return ARN of the Outpost on which the snapshot is stored.
     * 
     */
    private String outpostArn;
    /**
     * @return Value from an Amazon-maintained list (`amazon`, `aws-marketplace`, `microsoft`) of snapshot owners.
     * 
     */
    private String ownerAlias;
    /**
     * @return AWS account ID of the EBS snapshot owner.
     * 
     */
    private String ownerId;
    private @Nullable List<String> owners;
    private @Nullable List<String> restorableByUserIds;
    /**
     * @return Snapshot ID (e.g., snap-59fcb34e).
     * 
     */
    private String snapshotId;
    private @Nullable List<String> snapshotIds;
    /**
     * @return Snapshot state.
     * 
     */
    private String state;
    /**
     * @return Storage tier in which the snapshot is stored.
     * 
     */
    private String storageTier;
    /**
     * @return Map of tags for the resource.
     * 
     */
    private Map<String,String> tags;
    /**
     * @return Volume ID (e.g., vol-59fcb34e).
     * 
     */
    private String volumeId;
    /**
     * @return Size of the drive in GiBs.
     * 
     */
    private Integer volumeSize;

    private GetSnapshotResult() {}
    /**
     * @return ARN of the EBS Snapshot.
     * 
     */
    public String arn() {
        return this.arn;
    }
    /**
     * @return The data encryption key identifier for the snapshot.
     * 
     */
    public String dataEncryptionKeyId() {
        return this.dataEncryptionKeyId;
    }
    /**
     * @return Description for the snapshot
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Whether the snapshot is encrypted.
     * 
     */
    public Boolean encrypted() {
        return this.encrypted;
    }
    public List<GetSnapshotFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return ARN for the KMS encryption key.
     * 
     */
    public String kmsKeyId() {
        return this.kmsKeyId;
    }
    public Optional<Boolean> mostRecent() {
        return Optional.ofNullable(this.mostRecent);
    }
    /**
     * @return ARN of the Outpost on which the snapshot is stored.
     * 
     */
    public String outpostArn() {
        return this.outpostArn;
    }
    /**
     * @return Value from an Amazon-maintained list (`amazon`, `aws-marketplace`, `microsoft`) of snapshot owners.
     * 
     */
    public String ownerAlias() {
        return this.ownerAlias;
    }
    /**
     * @return AWS account ID of the EBS snapshot owner.
     * 
     */
    public String ownerId() {
        return this.ownerId;
    }
    public List<String> owners() {
        return this.owners == null ? List.of() : this.owners;
    }
    public List<String> restorableByUserIds() {
        return this.restorableByUserIds == null ? List.of() : this.restorableByUserIds;
    }
    /**
     * @return Snapshot ID (e.g., snap-59fcb34e).
     * 
     */
    public String snapshotId() {
        return this.snapshotId;
    }
    public List<String> snapshotIds() {
        return this.snapshotIds == null ? List.of() : this.snapshotIds;
    }
    /**
     * @return Snapshot state.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Storage tier in which the snapshot is stored.
     * 
     */
    public String storageTier() {
        return this.storageTier;
    }
    /**
     * @return Map of tags for the resource.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }
    /**
     * @return Volume ID (e.g., vol-59fcb34e).
     * 
     */
    public String volumeId() {
        return this.volumeId;
    }
    /**
     * @return Size of the drive in GiBs.
     * 
     */
    public Integer volumeSize() {
        return this.volumeSize;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSnapshotResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String arn;
        private String dataEncryptionKeyId;
        private String description;
        private Boolean encrypted;
        private @Nullable List<GetSnapshotFilter> filters;
        private String id;
        private String kmsKeyId;
        private @Nullable Boolean mostRecent;
        private String outpostArn;
        private String ownerAlias;
        private String ownerId;
        private @Nullable List<String> owners;
        private @Nullable List<String> restorableByUserIds;
        private String snapshotId;
        private @Nullable List<String> snapshotIds;
        private String state;
        private String storageTier;
        private Map<String,String> tags;
        private String volumeId;
        private Integer volumeSize;
        public Builder() {}
        public Builder(GetSnapshotResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.dataEncryptionKeyId = defaults.dataEncryptionKeyId;
    	      this.description = defaults.description;
    	      this.encrypted = defaults.encrypted;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.kmsKeyId = defaults.kmsKeyId;
    	      this.mostRecent = defaults.mostRecent;
    	      this.outpostArn = defaults.outpostArn;
    	      this.ownerAlias = defaults.ownerAlias;
    	      this.ownerId = defaults.ownerId;
    	      this.owners = defaults.owners;
    	      this.restorableByUserIds = defaults.restorableByUserIds;
    	      this.snapshotId = defaults.snapshotId;
    	      this.snapshotIds = defaults.snapshotIds;
    	      this.state = defaults.state;
    	      this.storageTier = defaults.storageTier;
    	      this.tags = defaults.tags;
    	      this.volumeId = defaults.volumeId;
    	      this.volumeSize = defaults.volumeSize;
        }

        @CustomType.Setter
        public Builder arn(String arn) {
            this.arn = Objects.requireNonNull(arn);
            return this;
        }
        @CustomType.Setter
        public Builder dataEncryptionKeyId(String dataEncryptionKeyId) {
            this.dataEncryptionKeyId = Objects.requireNonNull(dataEncryptionKeyId);
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder encrypted(Boolean encrypted) {
            this.encrypted = Objects.requireNonNull(encrypted);
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetSnapshotFilter> filters) {
            this.filters = filters;
            return this;
        }
        public Builder filters(GetSnapshotFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder kmsKeyId(String kmsKeyId) {
            this.kmsKeyId = Objects.requireNonNull(kmsKeyId);
            return this;
        }
        @CustomType.Setter
        public Builder mostRecent(@Nullable Boolean mostRecent) {
            this.mostRecent = mostRecent;
            return this;
        }
        @CustomType.Setter
        public Builder outpostArn(String outpostArn) {
            this.outpostArn = Objects.requireNonNull(outpostArn);
            return this;
        }
        @CustomType.Setter
        public Builder ownerAlias(String ownerAlias) {
            this.ownerAlias = Objects.requireNonNull(ownerAlias);
            return this;
        }
        @CustomType.Setter
        public Builder ownerId(String ownerId) {
            this.ownerId = Objects.requireNonNull(ownerId);
            return this;
        }
        @CustomType.Setter
        public Builder owners(@Nullable List<String> owners) {
            this.owners = owners;
            return this;
        }
        public Builder owners(String... owners) {
            return owners(List.of(owners));
        }
        @CustomType.Setter
        public Builder restorableByUserIds(@Nullable List<String> restorableByUserIds) {
            this.restorableByUserIds = restorableByUserIds;
            return this;
        }
        public Builder restorableByUserIds(String... restorableByUserIds) {
            return restorableByUserIds(List.of(restorableByUserIds));
        }
        @CustomType.Setter
        public Builder snapshotId(String snapshotId) {
            this.snapshotId = Objects.requireNonNull(snapshotId);
            return this;
        }
        @CustomType.Setter
        public Builder snapshotIds(@Nullable List<String> snapshotIds) {
            this.snapshotIds = snapshotIds;
            return this;
        }
        public Builder snapshotIds(String... snapshotIds) {
            return snapshotIds(List.of(snapshotIds));
        }
        @CustomType.Setter
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        @CustomType.Setter
        public Builder storageTier(String storageTier) {
            this.storageTier = Objects.requireNonNull(storageTier);
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        @CustomType.Setter
        public Builder volumeId(String volumeId) {
            this.volumeId = Objects.requireNonNull(volumeId);
            return this;
        }
        @CustomType.Setter
        public Builder volumeSize(Integer volumeSize) {
            this.volumeSize = Objects.requireNonNull(volumeSize);
            return this;
        }
        public GetSnapshotResult build() {
            final var _resultValue = new GetSnapshotResult();
            _resultValue.arn = arn;
            _resultValue.dataEncryptionKeyId = dataEncryptionKeyId;
            _resultValue.description = description;
            _resultValue.encrypted = encrypted;
            _resultValue.filters = filters;
            _resultValue.id = id;
            _resultValue.kmsKeyId = kmsKeyId;
            _resultValue.mostRecent = mostRecent;
            _resultValue.outpostArn = outpostArn;
            _resultValue.ownerAlias = ownerAlias;
            _resultValue.ownerId = ownerId;
            _resultValue.owners = owners;
            _resultValue.restorableByUserIds = restorableByUserIds;
            _resultValue.snapshotId = snapshotId;
            _resultValue.snapshotIds = snapshotIds;
            _resultValue.state = state;
            _resultValue.storageTier = storageTier;
            _resultValue.tags = tags;
            _resultValue.volumeId = volumeId;
            _resultValue.volumeSize = volumeSize;
            return _resultValue;
        }
    }
}
