// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.licensemanager;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LicenseConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final LicenseConfigurationArgs Empty = new LicenseConfigurationArgs();

    /**
     * Description of the license configuration.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the license configuration.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Number of licenses managed by the license configuration.
     * 
     */
    @Import(name="licenseCount")
    private @Nullable Output<Integer> licenseCount;

    /**
     * @return Number of licenses managed by the license configuration.
     * 
     */
    public Optional<Output<Integer>> licenseCount() {
        return Optional.ofNullable(this.licenseCount);
    }

    /**
     * Sets the number of available licenses as a hard limit.
     * 
     */
    @Import(name="licenseCountHardLimit")
    private @Nullable Output<Boolean> licenseCountHardLimit;

    /**
     * @return Sets the number of available licenses as a hard limit.
     * 
     */
    public Optional<Output<Boolean>> licenseCountHardLimit() {
        return Optional.ofNullable(this.licenseCountHardLimit);
    }

    /**
     * Dimension to use to track license inventory. Specify either `vCPU`, `Instance`, `Core` or `Socket`.
     * 
     */
    @Import(name="licenseCountingType", required=true)
    private Output<String> licenseCountingType;

    /**
     * @return Dimension to use to track license inventory. Specify either `vCPU`, `Instance`, `Core` or `Socket`.
     * 
     */
    public Output<String> licenseCountingType() {
        return this.licenseCountingType;
    }

    /**
     * Array of configured License Manager rules.
     * 
     */
    @Import(name="licenseRules")
    private @Nullable Output<List<String>> licenseRules;

    /**
     * @return Array of configured License Manager rules.
     * 
     */
    public Optional<Output<List<String>>> licenseRules() {
        return Optional.ofNullable(this.licenseRules);
    }

    /**
     * Name of the license configuration.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the license configuration.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private LicenseConfigurationArgs() {}

    private LicenseConfigurationArgs(LicenseConfigurationArgs $) {
        this.description = $.description;
        this.licenseCount = $.licenseCount;
        this.licenseCountHardLimit = $.licenseCountHardLimit;
        this.licenseCountingType = $.licenseCountingType;
        this.licenseRules = $.licenseRules;
        this.name = $.name;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LicenseConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LicenseConfigurationArgs $;

        public Builder() {
            $ = new LicenseConfigurationArgs();
        }

        public Builder(LicenseConfigurationArgs defaults) {
            $ = new LicenseConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Description of the license configuration.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the license configuration.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param licenseCount Number of licenses managed by the license configuration.
         * 
         * @return builder
         * 
         */
        public Builder licenseCount(@Nullable Output<Integer> licenseCount) {
            $.licenseCount = licenseCount;
            return this;
        }

        /**
         * @param licenseCount Number of licenses managed by the license configuration.
         * 
         * @return builder
         * 
         */
        public Builder licenseCount(Integer licenseCount) {
            return licenseCount(Output.of(licenseCount));
        }

        /**
         * @param licenseCountHardLimit Sets the number of available licenses as a hard limit.
         * 
         * @return builder
         * 
         */
        public Builder licenseCountHardLimit(@Nullable Output<Boolean> licenseCountHardLimit) {
            $.licenseCountHardLimit = licenseCountHardLimit;
            return this;
        }

        /**
         * @param licenseCountHardLimit Sets the number of available licenses as a hard limit.
         * 
         * @return builder
         * 
         */
        public Builder licenseCountHardLimit(Boolean licenseCountHardLimit) {
            return licenseCountHardLimit(Output.of(licenseCountHardLimit));
        }

        /**
         * @param licenseCountingType Dimension to use to track license inventory. Specify either `vCPU`, `Instance`, `Core` or `Socket`.
         * 
         * @return builder
         * 
         */
        public Builder licenseCountingType(Output<String> licenseCountingType) {
            $.licenseCountingType = licenseCountingType;
            return this;
        }

        /**
         * @param licenseCountingType Dimension to use to track license inventory. Specify either `vCPU`, `Instance`, `Core` or `Socket`.
         * 
         * @return builder
         * 
         */
        public Builder licenseCountingType(String licenseCountingType) {
            return licenseCountingType(Output.of(licenseCountingType));
        }

        /**
         * @param licenseRules Array of configured License Manager rules.
         * 
         * @return builder
         * 
         */
        public Builder licenseRules(@Nullable Output<List<String>> licenseRules) {
            $.licenseRules = licenseRules;
            return this;
        }

        /**
         * @param licenseRules Array of configured License Manager rules.
         * 
         * @return builder
         * 
         */
        public Builder licenseRules(List<String> licenseRules) {
            return licenseRules(Output.of(licenseRules));
        }

        /**
         * @param licenseRules Array of configured License Manager rules.
         * 
         * @return builder
         * 
         */
        public Builder licenseRules(String... licenseRules) {
            return licenseRules(List.of(licenseRules));
        }

        /**
         * @param name Name of the license configuration.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the license configuration.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param tags A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public LicenseConfigurationArgs build() {
            $.licenseCountingType = Objects.requireNonNull($.licenseCountingType, "expected parameter 'licenseCountingType' to be non-null");
            return $;
        }
    }

}
