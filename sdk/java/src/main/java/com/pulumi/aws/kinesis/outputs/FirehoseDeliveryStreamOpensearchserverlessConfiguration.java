// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.kinesis.outputs;

import com.pulumi.aws.kinesis.outputs.FirehoseDeliveryStreamOpensearchserverlessConfigurationCloudwatchLoggingOptions;
import com.pulumi.aws.kinesis.outputs.FirehoseDeliveryStreamOpensearchserverlessConfigurationProcessingConfiguration;
import com.pulumi.aws.kinesis.outputs.FirehoseDeliveryStreamOpensearchserverlessConfigurationS3Configuration;
import com.pulumi.aws.kinesis.outputs.FirehoseDeliveryStreamOpensearchserverlessConfigurationVpcConfig;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class FirehoseDeliveryStreamOpensearchserverlessConfiguration {
    /**
     * @return Buffer incoming data for the specified period of time, in seconds between 60 to 900, before delivering it to the destination.  The default value is 300s.
     * 
     */
    private @Nullable Integer bufferingInterval;
    /**
     * @return Buffer incoming data to the specified size, in MBs between 1 to 100, before delivering it to the destination.  The default value is 5MB.
     * 
     */
    private @Nullable Integer bufferingSize;
    /**
     * @return The CloudWatch Logging Options for the delivery stream. More details are given below
     * 
     */
    private @Nullable FirehoseDeliveryStreamOpensearchserverlessConfigurationCloudwatchLoggingOptions cloudwatchLoggingOptions;
    /**
     * @return The endpoint to use when communicating with the collection in the Serverless offering for Amazon OpenSearch Service.
     * 
     */
    private String collectionEndpoint;
    /**
     * @return The Serverless offering for Amazon OpenSearch Service index name.
     * 
     */
    private String indexName;
    /**
     * @return The data processing configuration.  More details are given below.
     * 
     */
    private @Nullable FirehoseDeliveryStreamOpensearchserverlessConfigurationProcessingConfiguration processingConfiguration;
    /**
     * @return After an initial failure to deliver to the Serverless offering for Amazon OpenSearch Service, the total amount of time, in seconds between 0 to 7200, during which Kinesis Data Firehose retries delivery (including the first attempt).  After this time has elapsed, the failed documents are written to Amazon S3.  The default value is 300s.  There will be no retry if the value is 0.
     * 
     */
    private @Nullable Integer retryDuration;
    /**
     * @return The Amazon Resource Name (ARN) of the IAM role to be assumed by Kinesis Data Firehose for calling the Serverless offering for Amazon OpenSearch Service Configuration API and for indexing documents.  The pattern needs to be `arn:.*`.
     * 
     */
    private String roleArn;
    /**
     * @return Defines how documents should be delivered to Amazon S3.  Valid values are `FailedDocumentsOnly` and `AllDocuments`.  Default value is `FailedDocumentsOnly`.
     * 
     */
    private @Nullable String s3BackupMode;
    /**
     * @return The S3 Configuration. See s3_configuration for more details.
     * 
     */
    private FirehoseDeliveryStreamOpensearchserverlessConfigurationS3Configuration s3Configuration;
    /**
     * @return The VPC configuration for the delivery stream to connect to OpenSearch Serverless associated with the VPC. More details are given below
     * 
     */
    private @Nullable FirehoseDeliveryStreamOpensearchserverlessConfigurationVpcConfig vpcConfig;

    private FirehoseDeliveryStreamOpensearchserverlessConfiguration() {}
    /**
     * @return Buffer incoming data for the specified period of time, in seconds between 60 to 900, before delivering it to the destination.  The default value is 300s.
     * 
     */
    public Optional<Integer> bufferingInterval() {
        return Optional.ofNullable(this.bufferingInterval);
    }
    /**
     * @return Buffer incoming data to the specified size, in MBs between 1 to 100, before delivering it to the destination.  The default value is 5MB.
     * 
     */
    public Optional<Integer> bufferingSize() {
        return Optional.ofNullable(this.bufferingSize);
    }
    /**
     * @return The CloudWatch Logging Options for the delivery stream. More details are given below
     * 
     */
    public Optional<FirehoseDeliveryStreamOpensearchserverlessConfigurationCloudwatchLoggingOptions> cloudwatchLoggingOptions() {
        return Optional.ofNullable(this.cloudwatchLoggingOptions);
    }
    /**
     * @return The endpoint to use when communicating with the collection in the Serverless offering for Amazon OpenSearch Service.
     * 
     */
    public String collectionEndpoint() {
        return this.collectionEndpoint;
    }
    /**
     * @return The Serverless offering for Amazon OpenSearch Service index name.
     * 
     */
    public String indexName() {
        return this.indexName;
    }
    /**
     * @return The data processing configuration.  More details are given below.
     * 
     */
    public Optional<FirehoseDeliveryStreamOpensearchserverlessConfigurationProcessingConfiguration> processingConfiguration() {
        return Optional.ofNullable(this.processingConfiguration);
    }
    /**
     * @return After an initial failure to deliver to the Serverless offering for Amazon OpenSearch Service, the total amount of time, in seconds between 0 to 7200, during which Kinesis Data Firehose retries delivery (including the first attempt).  After this time has elapsed, the failed documents are written to Amazon S3.  The default value is 300s.  There will be no retry if the value is 0.
     * 
     */
    public Optional<Integer> retryDuration() {
        return Optional.ofNullable(this.retryDuration);
    }
    /**
     * @return The Amazon Resource Name (ARN) of the IAM role to be assumed by Kinesis Data Firehose for calling the Serverless offering for Amazon OpenSearch Service Configuration API and for indexing documents.  The pattern needs to be `arn:.*`.
     * 
     */
    public String roleArn() {
        return this.roleArn;
    }
    /**
     * @return Defines how documents should be delivered to Amazon S3.  Valid values are `FailedDocumentsOnly` and `AllDocuments`.  Default value is `FailedDocumentsOnly`.
     * 
     */
    public Optional<String> s3BackupMode() {
        return Optional.ofNullable(this.s3BackupMode);
    }
    /**
     * @return The S3 Configuration. See s3_configuration for more details.
     * 
     */
    public FirehoseDeliveryStreamOpensearchserverlessConfigurationS3Configuration s3Configuration() {
        return this.s3Configuration;
    }
    /**
     * @return The VPC configuration for the delivery stream to connect to OpenSearch Serverless associated with the VPC. More details are given below
     * 
     */
    public Optional<FirehoseDeliveryStreamOpensearchserverlessConfigurationVpcConfig> vpcConfig() {
        return Optional.ofNullable(this.vpcConfig);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FirehoseDeliveryStreamOpensearchserverlessConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer bufferingInterval;
        private @Nullable Integer bufferingSize;
        private @Nullable FirehoseDeliveryStreamOpensearchserverlessConfigurationCloudwatchLoggingOptions cloudwatchLoggingOptions;
        private String collectionEndpoint;
        private String indexName;
        private @Nullable FirehoseDeliveryStreamOpensearchserverlessConfigurationProcessingConfiguration processingConfiguration;
        private @Nullable Integer retryDuration;
        private String roleArn;
        private @Nullable String s3BackupMode;
        private FirehoseDeliveryStreamOpensearchserverlessConfigurationS3Configuration s3Configuration;
        private @Nullable FirehoseDeliveryStreamOpensearchserverlessConfigurationVpcConfig vpcConfig;
        public Builder() {}
        public Builder(FirehoseDeliveryStreamOpensearchserverlessConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bufferingInterval = defaults.bufferingInterval;
    	      this.bufferingSize = defaults.bufferingSize;
    	      this.cloudwatchLoggingOptions = defaults.cloudwatchLoggingOptions;
    	      this.collectionEndpoint = defaults.collectionEndpoint;
    	      this.indexName = defaults.indexName;
    	      this.processingConfiguration = defaults.processingConfiguration;
    	      this.retryDuration = defaults.retryDuration;
    	      this.roleArn = defaults.roleArn;
    	      this.s3BackupMode = defaults.s3BackupMode;
    	      this.s3Configuration = defaults.s3Configuration;
    	      this.vpcConfig = defaults.vpcConfig;
        }

        @CustomType.Setter
        public Builder bufferingInterval(@Nullable Integer bufferingInterval) {

            this.bufferingInterval = bufferingInterval;
            return this;
        }
        @CustomType.Setter
        public Builder bufferingSize(@Nullable Integer bufferingSize) {

            this.bufferingSize = bufferingSize;
            return this;
        }
        @CustomType.Setter
        public Builder cloudwatchLoggingOptions(@Nullable FirehoseDeliveryStreamOpensearchserverlessConfigurationCloudwatchLoggingOptions cloudwatchLoggingOptions) {

            this.cloudwatchLoggingOptions = cloudwatchLoggingOptions;
            return this;
        }
        @CustomType.Setter
        public Builder collectionEndpoint(String collectionEndpoint) {
            if (collectionEndpoint == null) {
              throw new MissingRequiredPropertyException("FirehoseDeliveryStreamOpensearchserverlessConfiguration", "collectionEndpoint");
            }
            this.collectionEndpoint = collectionEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder indexName(String indexName) {
            if (indexName == null) {
              throw new MissingRequiredPropertyException("FirehoseDeliveryStreamOpensearchserverlessConfiguration", "indexName");
            }
            this.indexName = indexName;
            return this;
        }
        @CustomType.Setter
        public Builder processingConfiguration(@Nullable FirehoseDeliveryStreamOpensearchserverlessConfigurationProcessingConfiguration processingConfiguration) {

            this.processingConfiguration = processingConfiguration;
            return this;
        }
        @CustomType.Setter
        public Builder retryDuration(@Nullable Integer retryDuration) {

            this.retryDuration = retryDuration;
            return this;
        }
        @CustomType.Setter
        public Builder roleArn(String roleArn) {
            if (roleArn == null) {
              throw new MissingRequiredPropertyException("FirehoseDeliveryStreamOpensearchserverlessConfiguration", "roleArn");
            }
            this.roleArn = roleArn;
            return this;
        }
        @CustomType.Setter
        public Builder s3BackupMode(@Nullable String s3BackupMode) {

            this.s3BackupMode = s3BackupMode;
            return this;
        }
        @CustomType.Setter
        public Builder s3Configuration(FirehoseDeliveryStreamOpensearchserverlessConfigurationS3Configuration s3Configuration) {
            if (s3Configuration == null) {
              throw new MissingRequiredPropertyException("FirehoseDeliveryStreamOpensearchserverlessConfiguration", "s3Configuration");
            }
            this.s3Configuration = s3Configuration;
            return this;
        }
        @CustomType.Setter
        public Builder vpcConfig(@Nullable FirehoseDeliveryStreamOpensearchserverlessConfigurationVpcConfig vpcConfig) {

            this.vpcConfig = vpcConfig;
            return this;
        }
        public FirehoseDeliveryStreamOpensearchserverlessConfiguration build() {
            final var _resultValue = new FirehoseDeliveryStreamOpensearchserverlessConfiguration();
            _resultValue.bufferingInterval = bufferingInterval;
            _resultValue.bufferingSize = bufferingSize;
            _resultValue.cloudwatchLoggingOptions = cloudwatchLoggingOptions;
            _resultValue.collectionEndpoint = collectionEndpoint;
            _resultValue.indexName = indexName;
            _resultValue.processingConfiguration = processingConfiguration;
            _resultValue.retryDuration = retryDuration;
            _resultValue.roleArn = roleArn;
            _resultValue.s3BackupMode = s3BackupMode;
            _resultValue.s3Configuration = s3Configuration;
            _resultValue.vpcConfig = vpcConfig;
            return _resultValue;
        }
    }
}
