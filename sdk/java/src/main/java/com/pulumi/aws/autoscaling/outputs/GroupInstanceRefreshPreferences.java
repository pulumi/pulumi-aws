// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.autoscaling.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GroupInstanceRefreshPreferences {
    private @Nullable String checkpointDelay;
    private @Nullable List<Integer> checkpointPercentages;
    private @Nullable String instanceWarmup;
    private @Nullable Integer minHealthyPercentage;
    private @Nullable Boolean skipMatching;

    private GroupInstanceRefreshPreferences() {}
    public Optional<String> checkpointDelay() {
        return Optional.ofNullable(this.checkpointDelay);
    }
    public List<Integer> checkpointPercentages() {
        return this.checkpointPercentages == null ? List.of() : this.checkpointPercentages;
    }
    public Optional<String> instanceWarmup() {
        return Optional.ofNullable(this.instanceWarmup);
    }
    public Optional<Integer> minHealthyPercentage() {
        return Optional.ofNullable(this.minHealthyPercentage);
    }
    public Optional<Boolean> skipMatching() {
        return Optional.ofNullable(this.skipMatching);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GroupInstanceRefreshPreferences defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String checkpointDelay;
        private @Nullable List<Integer> checkpointPercentages;
        private @Nullable String instanceWarmup;
        private @Nullable Integer minHealthyPercentage;
        private @Nullable Boolean skipMatching;
        public Builder() {}
        public Builder(GroupInstanceRefreshPreferences defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.checkpointDelay = defaults.checkpointDelay;
    	      this.checkpointPercentages = defaults.checkpointPercentages;
    	      this.instanceWarmup = defaults.instanceWarmup;
    	      this.minHealthyPercentage = defaults.minHealthyPercentage;
    	      this.skipMatching = defaults.skipMatching;
        }

        @CustomType.Setter
        public Builder checkpointDelay(@Nullable String checkpointDelay) {
            this.checkpointDelay = checkpointDelay;
            return this;
        }
        @CustomType.Setter
        public Builder checkpointPercentages(@Nullable List<Integer> checkpointPercentages) {
            this.checkpointPercentages = checkpointPercentages;
            return this;
        }
        public Builder checkpointPercentages(Integer... checkpointPercentages) {
            return checkpointPercentages(List.of(checkpointPercentages));
        }
        @CustomType.Setter
        public Builder instanceWarmup(@Nullable String instanceWarmup) {
            this.instanceWarmup = instanceWarmup;
            return this;
        }
        @CustomType.Setter
        public Builder minHealthyPercentage(@Nullable Integer minHealthyPercentage) {
            this.minHealthyPercentage = minHealthyPercentage;
            return this;
        }
        @CustomType.Setter
        public Builder skipMatching(@Nullable Boolean skipMatching) {
            this.skipMatching = skipMatching;
            return this;
        }
        public GroupInstanceRefreshPreferences build() {
            final var o = new GroupInstanceRefreshPreferences();
            o.checkpointDelay = checkpointDelay;
            o.checkpointPercentages = checkpointPercentages;
            o.instanceWarmup = instanceWarmup;
            o.minHealthyPercentage = minHealthyPercentage;
            o.skipMatching = skipMatching;
            return o;
        }
    }
}
