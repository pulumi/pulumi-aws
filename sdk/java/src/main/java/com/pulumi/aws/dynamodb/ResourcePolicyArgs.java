// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.dynamodb;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ResourcePolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final ResourcePolicyArgs Empty = new ResourcePolicyArgs();

    /**
     * Set this parameter to true to confirm that you want to remove your permissions to change the policy of this resource in the future.
     * 
     */
    @Import(name="confirmRemoveSelfResourceAccess")
    private @Nullable Output<Boolean> confirmRemoveSelfResourceAccess;

    /**
     * @return Set this parameter to true to confirm that you want to remove your permissions to change the policy of this resource in the future.
     * 
     */
    public Optional<Output<Boolean>> confirmRemoveSelfResourceAccess() {
        return Optional.ofNullable(this.confirmRemoveSelfResourceAccess);
    }

    /**
     * n Amazon Web Services resource-based policy document in JSON format. The maximum size supported for a resource-based policy document is 20 KB. DynamoDB counts whitespaces when calculating the size of a policy against this limit. For a full list of all considerations that you should keep in mind while attaching a resource-based policy, see Resource-based policy considerations.
     * 
     * The following arguments are optional:
     * 
     */
    @Import(name="policy", required=true)
    private Output<String> policy;

    /**
     * @return n Amazon Web Services resource-based policy document in JSON format. The maximum size supported for a resource-based policy document is 20 KB. DynamoDB counts whitespaces when calculating the size of a policy against this limit. For a full list of all considerations that you should keep in mind while attaching a resource-based policy, see Resource-based policy considerations.
     * 
     * The following arguments are optional:
     * 
     */
    public Output<String> policy() {
        return this.policy;
    }

    /**
     * The Amazon Resource Name (ARN) of the DynamoDB resource to which the policy will be attached. The resources you can specify include tables and streams. You can control index permissions using the base table&#39;s policy. To specify the same permission level for your table and its indexes, you can provide both the table and index Amazon Resource Name (ARN)s in the Resource field of a given Statement in your policy document. Alternatively, to specify different permissions for your table, indexes, or both, you can define multiple Statement fields in your policy document.
     * 
     */
    @Import(name="resourceArn", required=true)
    private Output<String> resourceArn;

    /**
     * @return The Amazon Resource Name (ARN) of the DynamoDB resource to which the policy will be attached. The resources you can specify include tables and streams. You can control index permissions using the base table&#39;s policy. To specify the same permission level for your table and its indexes, you can provide both the table and index Amazon Resource Name (ARN)s in the Resource field of a given Statement in your policy document. Alternatively, to specify different permissions for your table, indexes, or both, you can define multiple Statement fields in your policy document.
     * 
     */
    public Output<String> resourceArn() {
        return this.resourceArn;
    }

    private ResourcePolicyArgs() {}

    private ResourcePolicyArgs(ResourcePolicyArgs $) {
        this.confirmRemoveSelfResourceAccess = $.confirmRemoveSelfResourceAccess;
        this.policy = $.policy;
        this.resourceArn = $.resourceArn;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ResourcePolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ResourcePolicyArgs $;

        public Builder() {
            $ = new ResourcePolicyArgs();
        }

        public Builder(ResourcePolicyArgs defaults) {
            $ = new ResourcePolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param confirmRemoveSelfResourceAccess Set this parameter to true to confirm that you want to remove your permissions to change the policy of this resource in the future.
         * 
         * @return builder
         * 
         */
        public Builder confirmRemoveSelfResourceAccess(@Nullable Output<Boolean> confirmRemoveSelfResourceAccess) {
            $.confirmRemoveSelfResourceAccess = confirmRemoveSelfResourceAccess;
            return this;
        }

        /**
         * @param confirmRemoveSelfResourceAccess Set this parameter to true to confirm that you want to remove your permissions to change the policy of this resource in the future.
         * 
         * @return builder
         * 
         */
        public Builder confirmRemoveSelfResourceAccess(Boolean confirmRemoveSelfResourceAccess) {
            return confirmRemoveSelfResourceAccess(Output.of(confirmRemoveSelfResourceAccess));
        }

        /**
         * @param policy n Amazon Web Services resource-based policy document in JSON format. The maximum size supported for a resource-based policy document is 20 KB. DynamoDB counts whitespaces when calculating the size of a policy against this limit. For a full list of all considerations that you should keep in mind while attaching a resource-based policy, see Resource-based policy considerations.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder policy(Output<String> policy) {
            $.policy = policy;
            return this;
        }

        /**
         * @param policy n Amazon Web Services resource-based policy document in JSON format. The maximum size supported for a resource-based policy document is 20 KB. DynamoDB counts whitespaces when calculating the size of a policy against this limit. For a full list of all considerations that you should keep in mind while attaching a resource-based policy, see Resource-based policy considerations.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder policy(String policy) {
            return policy(Output.of(policy));
        }

        /**
         * @param resourceArn The Amazon Resource Name (ARN) of the DynamoDB resource to which the policy will be attached. The resources you can specify include tables and streams. You can control index permissions using the base table&#39;s policy. To specify the same permission level for your table and its indexes, you can provide both the table and index Amazon Resource Name (ARN)s in the Resource field of a given Statement in your policy document. Alternatively, to specify different permissions for your table, indexes, or both, you can define multiple Statement fields in your policy document.
         * 
         * @return builder
         * 
         */
        public Builder resourceArn(Output<String> resourceArn) {
            $.resourceArn = resourceArn;
            return this;
        }

        /**
         * @param resourceArn The Amazon Resource Name (ARN) of the DynamoDB resource to which the policy will be attached. The resources you can specify include tables and streams. You can control index permissions using the base table&#39;s policy. To specify the same permission level for your table and its indexes, you can provide both the table and index Amazon Resource Name (ARN)s in the Resource field of a given Statement in your policy document. Alternatively, to specify different permissions for your table, indexes, or both, you can define multiple Statement fields in your policy document.
         * 
         * @return builder
         * 
         */
        public Builder resourceArn(String resourceArn) {
            return resourceArn(Output.of(resourceArn));
        }

        public ResourcePolicyArgs build() {
            if ($.policy == null) {
                throw new MissingRequiredPropertyException("ResourcePolicyArgs", "policy");
            }
            if ($.resourceArn == null) {
                throw new MissingRequiredPropertyException("ResourcePolicyArgs", "resourceArn");
            }
            return $;
        }
    }

}
