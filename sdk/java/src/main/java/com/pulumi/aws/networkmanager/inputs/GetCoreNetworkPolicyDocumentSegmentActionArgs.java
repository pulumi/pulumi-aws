// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.networkmanager.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetCoreNetworkPolicyDocumentSegmentActionArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetCoreNetworkPolicyDocumentSegmentActionArgs Empty = new GetCoreNetworkPolicyDocumentSegmentActionArgs();

    /**
     * Action to take for the chosen segment. Valid values `create-route` or `share`.
     * 
     */
    @Import(name="action", required=true)
    private Output<String> action;

    /**
     * @return Action to take for the chosen segment. Valid values `create-route` or `share`.
     * 
     */
    public Output<String> action() {
        return this.action;
    }

    /**
     * A user-defined string describing the segment action.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A user-defined string describing the segment action.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * List of strings containing CIDRs. You can define the IPv4 and IPv6 CIDR notation for each AWS Region. For example, `10.1.0.0/16` or `2001:db8::/56`. This is an array of CIDR notation strings.
     * 
     */
    @Import(name="destinationCidrBlocks")
    private @Nullable Output<List<String>> destinationCidrBlocks;

    /**
     * @return List of strings containing CIDRs. You can define the IPv4 and IPv6 CIDR notation for each AWS Region. For example, `10.1.0.0/16` or `2001:db8::/56`. This is an array of CIDR notation strings.
     * 
     */
    public Optional<Output<List<String>>> destinationCidrBlocks() {
        return Optional.ofNullable(this.destinationCidrBlocks);
    }

    /**
     * A list of strings. Valid values include `[&#34;blackhole&#34;]` or a list of attachment ids.
     * 
     */
    @Import(name="destinations")
    private @Nullable Output<List<String>> destinations;

    /**
     * @return A list of strings. Valid values include `[&#34;blackhole&#34;]` or a list of attachment ids.
     * 
     */
    public Optional<Output<List<String>>> destinations() {
        return Optional.ofNullable(this.destinations);
    }

    /**
     * String. This mode places the attachment and return routes in each of the `share_with` segments. Valid values include: `attachment-route`.
     * 
     */
    @Import(name="mode")
    private @Nullable Output<String> mode;

    /**
     * @return String. This mode places the attachment and return routes in each of the `share_with` segments. Valid values include: `attachment-route`.
     * 
     */
    public Optional<Output<String>> mode() {
        return Optional.ofNullable(this.mode);
    }

    /**
     * Name of the segment.
     * 
     */
    @Import(name="segment", required=true)
    private Output<String> segment;

    /**
     * @return Name of the segment.
     * 
     */
    public Output<String> segment() {
        return this.segment;
    }

    /**
     * A set subtraction of segments to not share with.
     * 
     */
    @Import(name="shareWithExcepts")
    private @Nullable Output<List<String>> shareWithExcepts;

    /**
     * @return A set subtraction of segments to not share with.
     * 
     */
    public Optional<Output<List<String>>> shareWithExcepts() {
        return Optional.ofNullable(this.shareWithExcepts);
    }

    /**
     * A list of strings to share with. Must be a substring is all segments. Valid values include: `[&#34;*&#34;]` or `[&#34;&lt;segment-names&gt;&#34;]`.
     * 
     */
    @Import(name="shareWiths")
    private @Nullable Output<List<String>> shareWiths;

    /**
     * @return A list of strings to share with. Must be a substring is all segments. Valid values include: `[&#34;*&#34;]` or `[&#34;&lt;segment-names&gt;&#34;]`.
     * 
     */
    public Optional<Output<List<String>>> shareWiths() {
        return Optional.ofNullable(this.shareWiths);
    }

    private GetCoreNetworkPolicyDocumentSegmentActionArgs() {}

    private GetCoreNetworkPolicyDocumentSegmentActionArgs(GetCoreNetworkPolicyDocumentSegmentActionArgs $) {
        this.action = $.action;
        this.description = $.description;
        this.destinationCidrBlocks = $.destinationCidrBlocks;
        this.destinations = $.destinations;
        this.mode = $.mode;
        this.segment = $.segment;
        this.shareWithExcepts = $.shareWithExcepts;
        this.shareWiths = $.shareWiths;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetCoreNetworkPolicyDocumentSegmentActionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetCoreNetworkPolicyDocumentSegmentActionArgs $;

        public Builder() {
            $ = new GetCoreNetworkPolicyDocumentSegmentActionArgs();
        }

        public Builder(GetCoreNetworkPolicyDocumentSegmentActionArgs defaults) {
            $ = new GetCoreNetworkPolicyDocumentSegmentActionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param action Action to take for the chosen segment. Valid values `create-route` or `share`.
         * 
         * @return builder
         * 
         */
        public Builder action(Output<String> action) {
            $.action = action;
            return this;
        }

        /**
         * @param action Action to take for the chosen segment. Valid values `create-route` or `share`.
         * 
         * @return builder
         * 
         */
        public Builder action(String action) {
            return action(Output.of(action));
        }

        /**
         * @param description A user-defined string describing the segment action.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A user-defined string describing the segment action.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param destinationCidrBlocks List of strings containing CIDRs. You can define the IPv4 and IPv6 CIDR notation for each AWS Region. For example, `10.1.0.0/16` or `2001:db8::/56`. This is an array of CIDR notation strings.
         * 
         * @return builder
         * 
         */
        public Builder destinationCidrBlocks(@Nullable Output<List<String>> destinationCidrBlocks) {
            $.destinationCidrBlocks = destinationCidrBlocks;
            return this;
        }

        /**
         * @param destinationCidrBlocks List of strings containing CIDRs. You can define the IPv4 and IPv6 CIDR notation for each AWS Region. For example, `10.1.0.0/16` or `2001:db8::/56`. This is an array of CIDR notation strings.
         * 
         * @return builder
         * 
         */
        public Builder destinationCidrBlocks(List<String> destinationCidrBlocks) {
            return destinationCidrBlocks(Output.of(destinationCidrBlocks));
        }

        /**
         * @param destinationCidrBlocks List of strings containing CIDRs. You can define the IPv4 and IPv6 CIDR notation for each AWS Region. For example, `10.1.0.0/16` or `2001:db8::/56`. This is an array of CIDR notation strings.
         * 
         * @return builder
         * 
         */
        public Builder destinationCidrBlocks(String... destinationCidrBlocks) {
            return destinationCidrBlocks(List.of(destinationCidrBlocks));
        }

        /**
         * @param destinations A list of strings. Valid values include `[&#34;blackhole&#34;]` or a list of attachment ids.
         * 
         * @return builder
         * 
         */
        public Builder destinations(@Nullable Output<List<String>> destinations) {
            $.destinations = destinations;
            return this;
        }

        /**
         * @param destinations A list of strings. Valid values include `[&#34;blackhole&#34;]` or a list of attachment ids.
         * 
         * @return builder
         * 
         */
        public Builder destinations(List<String> destinations) {
            return destinations(Output.of(destinations));
        }

        /**
         * @param destinations A list of strings. Valid values include `[&#34;blackhole&#34;]` or a list of attachment ids.
         * 
         * @return builder
         * 
         */
        public Builder destinations(String... destinations) {
            return destinations(List.of(destinations));
        }

        /**
         * @param mode String. This mode places the attachment and return routes in each of the `share_with` segments. Valid values include: `attachment-route`.
         * 
         * @return builder
         * 
         */
        public Builder mode(@Nullable Output<String> mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param mode String. This mode places the attachment and return routes in each of the `share_with` segments. Valid values include: `attachment-route`.
         * 
         * @return builder
         * 
         */
        public Builder mode(String mode) {
            return mode(Output.of(mode));
        }

        /**
         * @param segment Name of the segment.
         * 
         * @return builder
         * 
         */
        public Builder segment(Output<String> segment) {
            $.segment = segment;
            return this;
        }

        /**
         * @param segment Name of the segment.
         * 
         * @return builder
         * 
         */
        public Builder segment(String segment) {
            return segment(Output.of(segment));
        }

        /**
         * @param shareWithExcepts A set subtraction of segments to not share with.
         * 
         * @return builder
         * 
         */
        public Builder shareWithExcepts(@Nullable Output<List<String>> shareWithExcepts) {
            $.shareWithExcepts = shareWithExcepts;
            return this;
        }

        /**
         * @param shareWithExcepts A set subtraction of segments to not share with.
         * 
         * @return builder
         * 
         */
        public Builder shareWithExcepts(List<String> shareWithExcepts) {
            return shareWithExcepts(Output.of(shareWithExcepts));
        }

        /**
         * @param shareWithExcepts A set subtraction of segments to not share with.
         * 
         * @return builder
         * 
         */
        public Builder shareWithExcepts(String... shareWithExcepts) {
            return shareWithExcepts(List.of(shareWithExcepts));
        }

        /**
         * @param shareWiths A list of strings to share with. Must be a substring is all segments. Valid values include: `[&#34;*&#34;]` or `[&#34;&lt;segment-names&gt;&#34;]`.
         * 
         * @return builder
         * 
         */
        public Builder shareWiths(@Nullable Output<List<String>> shareWiths) {
            $.shareWiths = shareWiths;
            return this;
        }

        /**
         * @param shareWiths A list of strings to share with. Must be a substring is all segments. Valid values include: `[&#34;*&#34;]` or `[&#34;&lt;segment-names&gt;&#34;]`.
         * 
         * @return builder
         * 
         */
        public Builder shareWiths(List<String> shareWiths) {
            return shareWiths(Output.of(shareWiths));
        }

        /**
         * @param shareWiths A list of strings to share with. Must be a substring is all segments. Valid values include: `[&#34;*&#34;]` or `[&#34;&lt;segment-names&gt;&#34;]`.
         * 
         * @return builder
         * 
         */
        public Builder shareWiths(String... shareWiths) {
            return shareWiths(List.of(shareWiths));
        }

        public GetCoreNetworkPolicyDocumentSegmentActionArgs build() {
            if ($.action == null) {
                throw new MissingRequiredPropertyException("GetCoreNetworkPolicyDocumentSegmentActionArgs", "action");
            }
            if ($.segment == null) {
                throw new MissingRequiredPropertyException("GetCoreNetworkPolicyDocumentSegmentActionArgs", "segment");
            }
            return $;
        }
    }

}
