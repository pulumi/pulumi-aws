// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.dlm.outputs;

import com.pulumi.aws.dlm.outputs.LifecyclePolicyPolicyDetailsScheduleCreateRule;
import com.pulumi.aws.dlm.outputs.LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRule;
import com.pulumi.aws.dlm.outputs.LifecyclePolicyPolicyDetailsScheduleDeprecateRule;
import com.pulumi.aws.dlm.outputs.LifecyclePolicyPolicyDetailsScheduleFastRestoreRule;
import com.pulumi.aws.dlm.outputs.LifecyclePolicyPolicyDetailsScheduleRetainRule;
import com.pulumi.aws.dlm.outputs.LifecyclePolicyPolicyDetailsScheduleShareRule;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class LifecyclePolicyPolicyDetailsSchedule {
    /**
     * @return Whether to copy all user-defined tags from the source snapshot to the cross-region snapshot copy.
     * 
     */
    private @Nullable Boolean copyTags;
    /**
     * @return See the `create_rule` block. Max of 1 per schedule.
     * 
     */
    private LifecyclePolicyPolicyDetailsScheduleCreateRule createRule;
    /**
     * @return See the `cross_region_copy_rule` block. Max of 3 per schedule.
     * 
     */
    private @Nullable List<LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRule> crossRegionCopyRules;
    /**
     * @return The AMI deprecation rule for cross-Region AMI copies created by the rule. See the `deprecate_rule` block.
     * 
     */
    private @Nullable LifecyclePolicyPolicyDetailsScheduleDeprecateRule deprecateRule;
    /**
     * @return See the `fast_restore_rule` block. Max of 1 per schedule.
     * 
     */
    private @Nullable LifecyclePolicyPolicyDetailsScheduleFastRestoreRule fastRestoreRule;
    /**
     * @return A descriptive name for the action.
     * 
     */
    private String name;
    /**
     * @return Specifies the retention rule for cross-Region snapshot copies. See the `retain_rule` block. Max of 1 per action.
     * 
     */
    private LifecyclePolicyPolicyDetailsScheduleRetainRule retainRule;
    /**
     * @return See the `share_rule` block. Max of 1 per schedule.
     * 
     */
    private @Nullable LifecyclePolicyPolicyDetailsScheduleShareRule shareRule;
    /**
     * @return A map of tag keys and their values. DLM lifecycle policies will already tag the snapshot with the tags on the volume. This configuration adds extra tags on top of these.
     * 
     */
    private @Nullable Map<String,String> tagsToAdd;
    /**
     * @return A map of tag keys and variable values, where the values are determined when the policy is executed. Only `$(instance-id)` or `$(timestamp)` are valid values. Can only be used when `resource_types` is `INSTANCE`.
     * 
     */
    private @Nullable Map<String,String> variableTags;

    private LifecyclePolicyPolicyDetailsSchedule() {}
    /**
     * @return Whether to copy all user-defined tags from the source snapshot to the cross-region snapshot copy.
     * 
     */
    public Optional<Boolean> copyTags() {
        return Optional.ofNullable(this.copyTags);
    }
    /**
     * @return See the `create_rule` block. Max of 1 per schedule.
     * 
     */
    public LifecyclePolicyPolicyDetailsScheduleCreateRule createRule() {
        return this.createRule;
    }
    /**
     * @return See the `cross_region_copy_rule` block. Max of 3 per schedule.
     * 
     */
    public List<LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRule> crossRegionCopyRules() {
        return this.crossRegionCopyRules == null ? List.of() : this.crossRegionCopyRules;
    }
    /**
     * @return The AMI deprecation rule for cross-Region AMI copies created by the rule. See the `deprecate_rule` block.
     * 
     */
    public Optional<LifecyclePolicyPolicyDetailsScheduleDeprecateRule> deprecateRule() {
        return Optional.ofNullable(this.deprecateRule);
    }
    /**
     * @return See the `fast_restore_rule` block. Max of 1 per schedule.
     * 
     */
    public Optional<LifecyclePolicyPolicyDetailsScheduleFastRestoreRule> fastRestoreRule() {
        return Optional.ofNullable(this.fastRestoreRule);
    }
    /**
     * @return A descriptive name for the action.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Specifies the retention rule for cross-Region snapshot copies. See the `retain_rule` block. Max of 1 per action.
     * 
     */
    public LifecyclePolicyPolicyDetailsScheduleRetainRule retainRule() {
        return this.retainRule;
    }
    /**
     * @return See the `share_rule` block. Max of 1 per schedule.
     * 
     */
    public Optional<LifecyclePolicyPolicyDetailsScheduleShareRule> shareRule() {
        return Optional.ofNullable(this.shareRule);
    }
    /**
     * @return A map of tag keys and their values. DLM lifecycle policies will already tag the snapshot with the tags on the volume. This configuration adds extra tags on top of these.
     * 
     */
    public Map<String,String> tagsToAdd() {
        return this.tagsToAdd == null ? Map.of() : this.tagsToAdd;
    }
    /**
     * @return A map of tag keys and variable values, where the values are determined when the policy is executed. Only `$(instance-id)` or `$(timestamp)` are valid values. Can only be used when `resource_types` is `INSTANCE`.
     * 
     */
    public Map<String,String> variableTags() {
        return this.variableTags == null ? Map.of() : this.variableTags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LifecyclePolicyPolicyDetailsSchedule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean copyTags;
        private LifecyclePolicyPolicyDetailsScheduleCreateRule createRule;
        private @Nullable List<LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRule> crossRegionCopyRules;
        private @Nullable LifecyclePolicyPolicyDetailsScheduleDeprecateRule deprecateRule;
        private @Nullable LifecyclePolicyPolicyDetailsScheduleFastRestoreRule fastRestoreRule;
        private String name;
        private LifecyclePolicyPolicyDetailsScheduleRetainRule retainRule;
        private @Nullable LifecyclePolicyPolicyDetailsScheduleShareRule shareRule;
        private @Nullable Map<String,String> tagsToAdd;
        private @Nullable Map<String,String> variableTags;
        public Builder() {}
        public Builder(LifecyclePolicyPolicyDetailsSchedule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.copyTags = defaults.copyTags;
    	      this.createRule = defaults.createRule;
    	      this.crossRegionCopyRules = defaults.crossRegionCopyRules;
    	      this.deprecateRule = defaults.deprecateRule;
    	      this.fastRestoreRule = defaults.fastRestoreRule;
    	      this.name = defaults.name;
    	      this.retainRule = defaults.retainRule;
    	      this.shareRule = defaults.shareRule;
    	      this.tagsToAdd = defaults.tagsToAdd;
    	      this.variableTags = defaults.variableTags;
        }

        @CustomType.Setter
        public Builder copyTags(@Nullable Boolean copyTags) {
            this.copyTags = copyTags;
            return this;
        }
        @CustomType.Setter
        public Builder createRule(LifecyclePolicyPolicyDetailsScheduleCreateRule createRule) {
            this.createRule = Objects.requireNonNull(createRule);
            return this;
        }
        @CustomType.Setter
        public Builder crossRegionCopyRules(@Nullable List<LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRule> crossRegionCopyRules) {
            this.crossRegionCopyRules = crossRegionCopyRules;
            return this;
        }
        public Builder crossRegionCopyRules(LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRule... crossRegionCopyRules) {
            return crossRegionCopyRules(List.of(crossRegionCopyRules));
        }
        @CustomType.Setter
        public Builder deprecateRule(@Nullable LifecyclePolicyPolicyDetailsScheduleDeprecateRule deprecateRule) {
            this.deprecateRule = deprecateRule;
            return this;
        }
        @CustomType.Setter
        public Builder fastRestoreRule(@Nullable LifecyclePolicyPolicyDetailsScheduleFastRestoreRule fastRestoreRule) {
            this.fastRestoreRule = fastRestoreRule;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder retainRule(LifecyclePolicyPolicyDetailsScheduleRetainRule retainRule) {
            this.retainRule = Objects.requireNonNull(retainRule);
            return this;
        }
        @CustomType.Setter
        public Builder shareRule(@Nullable LifecyclePolicyPolicyDetailsScheduleShareRule shareRule) {
            this.shareRule = shareRule;
            return this;
        }
        @CustomType.Setter
        public Builder tagsToAdd(@Nullable Map<String,String> tagsToAdd) {
            this.tagsToAdd = tagsToAdd;
            return this;
        }
        @CustomType.Setter
        public Builder variableTags(@Nullable Map<String,String> variableTags) {
            this.variableTags = variableTags;
            return this;
        }
        public LifecyclePolicyPolicyDetailsSchedule build() {
            final var o = new LifecyclePolicyPolicyDetailsSchedule();
            o.copyTags = copyTags;
            o.createRule = createRule;
            o.crossRegionCopyRules = crossRegionCopyRules;
            o.deprecateRule = deprecateRule;
            o.fastRestoreRule = fastRestoreRule;
            o.name = name;
            o.retainRule = retainRule;
            o.shareRule = shareRule;
            o.tagsToAdd = tagsToAdd;
            o.variableTags = variableTags;
            return o;
        }
    }
}
