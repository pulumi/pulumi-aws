// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.wafv2.inputs;

import com.pulumi.aws.wafv2.inputs.RuleGroupRuleStatementNotStatementStatementOrStatementStatementGeoMatchStatementForwardedIpConfigArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RuleGroupRuleStatementNotStatementStatementOrStatementStatementGeoMatchStatementArgs extends com.pulumi.resources.ResourceArgs {

    public static final RuleGroupRuleStatementNotStatementStatementOrStatementStatementGeoMatchStatementArgs Empty = new RuleGroupRuleStatementNotStatementStatementOrStatementStatementGeoMatchStatementArgs();

    @Import(name="countryCodes", required=true)
    private Output<List<String>> countryCodes;

    public Output<List<String>> countryCodes() {
        return this.countryCodes;
    }

    @Import(name="forwardedIpConfig")
    private @Nullable Output<RuleGroupRuleStatementNotStatementStatementOrStatementStatementGeoMatchStatementForwardedIpConfigArgs> forwardedIpConfig;

    public Optional<Output<RuleGroupRuleStatementNotStatementStatementOrStatementStatementGeoMatchStatementForwardedIpConfigArgs>> forwardedIpConfig() {
        return Optional.ofNullable(this.forwardedIpConfig);
    }

    private RuleGroupRuleStatementNotStatementStatementOrStatementStatementGeoMatchStatementArgs() {}

    private RuleGroupRuleStatementNotStatementStatementOrStatementStatementGeoMatchStatementArgs(RuleGroupRuleStatementNotStatementStatementOrStatementStatementGeoMatchStatementArgs $) {
        this.countryCodes = $.countryCodes;
        this.forwardedIpConfig = $.forwardedIpConfig;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RuleGroupRuleStatementNotStatementStatementOrStatementStatementGeoMatchStatementArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RuleGroupRuleStatementNotStatementStatementOrStatementStatementGeoMatchStatementArgs $;

        public Builder() {
            $ = new RuleGroupRuleStatementNotStatementStatementOrStatementStatementGeoMatchStatementArgs();
        }

        public Builder(RuleGroupRuleStatementNotStatementStatementOrStatementStatementGeoMatchStatementArgs defaults) {
            $ = new RuleGroupRuleStatementNotStatementStatementOrStatementStatementGeoMatchStatementArgs(Objects.requireNonNull(defaults));
        }

        public Builder countryCodes(Output<List<String>> countryCodes) {
            $.countryCodes = countryCodes;
            return this;
        }

        public Builder countryCodes(List<String> countryCodes) {
            return countryCodes(Output.of(countryCodes));
        }

        public Builder countryCodes(String... countryCodes) {
            return countryCodes(List.of(countryCodes));
        }

        public Builder forwardedIpConfig(@Nullable Output<RuleGroupRuleStatementNotStatementStatementOrStatementStatementGeoMatchStatementForwardedIpConfigArgs> forwardedIpConfig) {
            $.forwardedIpConfig = forwardedIpConfig;
            return this;
        }

        public Builder forwardedIpConfig(RuleGroupRuleStatementNotStatementStatementOrStatementStatementGeoMatchStatementForwardedIpConfigArgs forwardedIpConfig) {
            return forwardedIpConfig(Output.of(forwardedIpConfig));
        }

        public RuleGroupRuleStatementNotStatementStatementOrStatementStatementGeoMatchStatementArgs build() {
            $.countryCodes = Objects.requireNonNull($.countryCodes, "expected parameter 'countryCodes' to be non-null");
            return $;
        }
    }

}
