// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.sesv2;

import com.pulumi.aws.sesv2.inputs.ContactListTopicArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ContactListArgs extends com.pulumi.resources.ResourceArgs {

    public static final ContactListArgs Empty = new ContactListArgs();

    /**
     * The name of the contact list.
     * 
     * The following arguments are optional:
     * 
     */
    @Import(name="contactListName", required=true)
    private Output<String> contactListName;

    /**
     * @return The name of the contact list.
     * 
     * The following arguments are optional:
     * 
     */
    public Output<String> contactListName() {
        return this.contactListName;
    }

    /**
     * A description of what the contact list is about.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A description of what the contact list is about.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Key-value map of resource tags for the contact list. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Key-value map of resource tags for the contact list. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Configuration block(s) with topic for the contact list. Detailed below.
     * 
     */
    @Import(name="topics")
    private @Nullable Output<List<ContactListTopicArgs>> topics;

    /**
     * @return Configuration block(s) with topic for the contact list. Detailed below.
     * 
     */
    public Optional<Output<List<ContactListTopicArgs>>> topics() {
        return Optional.ofNullable(this.topics);
    }

    private ContactListArgs() {}

    private ContactListArgs(ContactListArgs $) {
        this.contactListName = $.contactListName;
        this.description = $.description;
        this.tags = $.tags;
        this.topics = $.topics;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ContactListArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ContactListArgs $;

        public Builder() {
            $ = new ContactListArgs();
        }

        public Builder(ContactListArgs defaults) {
            $ = new ContactListArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param contactListName The name of the contact list.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder contactListName(Output<String> contactListName) {
            $.contactListName = contactListName;
            return this;
        }

        /**
         * @param contactListName The name of the contact list.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder contactListName(String contactListName) {
            return contactListName(Output.of(contactListName));
        }

        /**
         * @param description A description of what the contact list is about.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A description of what the contact list is about.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param tags Key-value map of resource tags for the contact list. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Key-value map of resource tags for the contact list. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param topics Configuration block(s) with topic for the contact list. Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder topics(@Nullable Output<List<ContactListTopicArgs>> topics) {
            $.topics = topics;
            return this;
        }

        /**
         * @param topics Configuration block(s) with topic for the contact list. Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder topics(List<ContactListTopicArgs> topics) {
            return topics(Output.of(topics));
        }

        /**
         * @param topics Configuration block(s) with topic for the contact list. Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder topics(ContactListTopicArgs... topics) {
            return topics(List.of(topics));
        }

        public ContactListArgs build() {
            $.contactListName = Objects.requireNonNull($.contactListName, "expected parameter 'contactListName' to be non-null");
            return $;
        }
    }

}
