// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ecs.outputs;

import com.pulumi.aws.ecs.outputs.GetTaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfig;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetTaskDefinitionVolumeEfsVolumeConfiguration {
    /**
     * @return Configuration block for authorization for the Amazon FSx for Windows File Server file system detailed below.
     * 
     */
    private List<GetTaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfig> authorizationConfigs;
    /**
     * @return The Amazon FSx for Windows File Server file system ID to use.
     * 
     */
    private String fileSystemId;
    /**
     * @return The directory within the Amazon FSx for Windows File Server file system to mount as the root directory inside the host.
     * 
     */
    private String rootDirectory;
    /**
     * @return Whether or not to enable encryption for Amazon EFS data in transit between the Amazon ECS host and the Amazon EFS server. Transit encryption must be enabled if Amazon EFS IAM authorization is used. Valid values: `ENABLED`, `DISABLED`. If this parameter is omitted, the default value of `DISABLED` is used.
     * 
     */
    private String transitEncryption;
    /**
     * @return Port to use for transit encryption. If you do not specify a transit encryption port, it will use the port selection strategy that the Amazon EFS mount helper uses.
     * 
     */
    private Integer transitEncryptionPort;

    private GetTaskDefinitionVolumeEfsVolumeConfiguration() {}
    /**
     * @return Configuration block for authorization for the Amazon FSx for Windows File Server file system detailed below.
     * 
     */
    public List<GetTaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfig> authorizationConfigs() {
        return this.authorizationConfigs;
    }
    /**
     * @return The Amazon FSx for Windows File Server file system ID to use.
     * 
     */
    public String fileSystemId() {
        return this.fileSystemId;
    }
    /**
     * @return The directory within the Amazon FSx for Windows File Server file system to mount as the root directory inside the host.
     * 
     */
    public String rootDirectory() {
        return this.rootDirectory;
    }
    /**
     * @return Whether or not to enable encryption for Amazon EFS data in transit between the Amazon ECS host and the Amazon EFS server. Transit encryption must be enabled if Amazon EFS IAM authorization is used. Valid values: `ENABLED`, `DISABLED`. If this parameter is omitted, the default value of `DISABLED` is used.
     * 
     */
    public String transitEncryption() {
        return this.transitEncryption;
    }
    /**
     * @return Port to use for transit encryption. If you do not specify a transit encryption port, it will use the port selection strategy that the Amazon EFS mount helper uses.
     * 
     */
    public Integer transitEncryptionPort() {
        return this.transitEncryptionPort;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTaskDefinitionVolumeEfsVolumeConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetTaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfig> authorizationConfigs;
        private String fileSystemId;
        private String rootDirectory;
        private String transitEncryption;
        private Integer transitEncryptionPort;
        public Builder() {}
        public Builder(GetTaskDefinitionVolumeEfsVolumeConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authorizationConfigs = defaults.authorizationConfigs;
    	      this.fileSystemId = defaults.fileSystemId;
    	      this.rootDirectory = defaults.rootDirectory;
    	      this.transitEncryption = defaults.transitEncryption;
    	      this.transitEncryptionPort = defaults.transitEncryptionPort;
        }

        @CustomType.Setter
        public Builder authorizationConfigs(List<GetTaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfig> authorizationConfigs) {
            if (authorizationConfigs == null) {
              throw new MissingRequiredPropertyException("GetTaskDefinitionVolumeEfsVolumeConfiguration", "authorizationConfigs");
            }
            this.authorizationConfigs = authorizationConfigs;
            return this;
        }
        public Builder authorizationConfigs(GetTaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfig... authorizationConfigs) {
            return authorizationConfigs(List.of(authorizationConfigs));
        }
        @CustomType.Setter
        public Builder fileSystemId(String fileSystemId) {
            if (fileSystemId == null) {
              throw new MissingRequiredPropertyException("GetTaskDefinitionVolumeEfsVolumeConfiguration", "fileSystemId");
            }
            this.fileSystemId = fileSystemId;
            return this;
        }
        @CustomType.Setter
        public Builder rootDirectory(String rootDirectory) {
            if (rootDirectory == null) {
              throw new MissingRequiredPropertyException("GetTaskDefinitionVolumeEfsVolumeConfiguration", "rootDirectory");
            }
            this.rootDirectory = rootDirectory;
            return this;
        }
        @CustomType.Setter
        public Builder transitEncryption(String transitEncryption) {
            if (transitEncryption == null) {
              throw new MissingRequiredPropertyException("GetTaskDefinitionVolumeEfsVolumeConfiguration", "transitEncryption");
            }
            this.transitEncryption = transitEncryption;
            return this;
        }
        @CustomType.Setter
        public Builder transitEncryptionPort(Integer transitEncryptionPort) {
            if (transitEncryptionPort == null) {
              throw new MissingRequiredPropertyException("GetTaskDefinitionVolumeEfsVolumeConfiguration", "transitEncryptionPort");
            }
            this.transitEncryptionPort = transitEncryptionPort;
            return this;
        }
        public GetTaskDefinitionVolumeEfsVolumeConfiguration build() {
            final var _resultValue = new GetTaskDefinitionVolumeEfsVolumeConfiguration();
            _resultValue.authorizationConfigs = authorizationConfigs;
            _resultValue.fileSystemId = fileSystemId;
            _resultValue.rootDirectory = rootDirectory;
            _resultValue.transitEncryption = transitEncryption;
            _resultValue.transitEncryptionPort = transitEncryptionPort;
            return _resultValue;
        }
    }
}
