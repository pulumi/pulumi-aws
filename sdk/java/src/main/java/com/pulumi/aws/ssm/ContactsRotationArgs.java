// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ssm;

import com.pulumi.aws.ssm.inputs.ContactsRotationRecurrenceArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ContactsRotationArgs extends com.pulumi.resources.ResourceArgs {

    public static final ContactsRotationArgs Empty = new ContactsRotationArgs();

    /**
     * Amazon Resource Names (ARNs) of the contacts to add to the rotation. The order in which you list the contacts is their shift order in the rotation schedule.
     * 
     */
    @Import(name="contactIds", required=true)
    private Output<List<String>> contactIds;

    /**
     * @return Amazon Resource Names (ARNs) of the contacts to add to the rotation. The order in which you list the contacts is their shift order in the rotation schedule.
     * 
     */
    public Output<List<String>> contactIds() {
        return this.contactIds;
    }

    /**
     * The name for the rotation.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name for the rotation.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Information about when an on-call rotation is in effect and how long the rotation period lasts. Exactly one of either `daily_settings`, `monthly_settings`, or `weekly_settings` must be populated. See Recurrence for more details.
     * 
     * The following arguments are optional:
     * 
     */
    @Import(name="recurrence")
    private @Nullable Output<ContactsRotationRecurrenceArgs> recurrence;

    /**
     * @return Information about when an on-call rotation is in effect and how long the rotation period lasts. Exactly one of either `daily_settings`, `monthly_settings`, or `weekly_settings` must be populated. See Recurrence for more details.
     * 
     * The following arguments are optional:
     * 
     */
    public Optional<Output<ContactsRotationRecurrenceArgs>> recurrence() {
        return Optional.ofNullable(this.recurrence);
    }

    /**
     * The date and time, in RFC 3339 format, that the rotation goes into effect.
     * 
     */
    @Import(name="startTime")
    private @Nullable Output<String> startTime;

    /**
     * @return The date and time, in RFC 3339 format, that the rotation goes into effect.
     * 
     */
    public Optional<Output<String>> startTime() {
        return Optional.ofNullable(this.startTime);
    }

    /**
     * A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The time zone to base the rotation’s activity on in Internet Assigned Numbers Authority (IANA) format.
     * 
     */
    @Import(name="timeZoneId", required=true)
    private Output<String> timeZoneId;

    /**
     * @return The time zone to base the rotation’s activity on in Internet Assigned Numbers Authority (IANA) format.
     * 
     */
    public Output<String> timeZoneId() {
        return this.timeZoneId;
    }

    private ContactsRotationArgs() {}

    private ContactsRotationArgs(ContactsRotationArgs $) {
        this.contactIds = $.contactIds;
        this.name = $.name;
        this.recurrence = $.recurrence;
        this.startTime = $.startTime;
        this.tags = $.tags;
        this.timeZoneId = $.timeZoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ContactsRotationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ContactsRotationArgs $;

        public Builder() {
            $ = new ContactsRotationArgs();
        }

        public Builder(ContactsRotationArgs defaults) {
            $ = new ContactsRotationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param contactIds Amazon Resource Names (ARNs) of the contacts to add to the rotation. The order in which you list the contacts is their shift order in the rotation schedule.
         * 
         * @return builder
         * 
         */
        public Builder contactIds(Output<List<String>> contactIds) {
            $.contactIds = contactIds;
            return this;
        }

        /**
         * @param contactIds Amazon Resource Names (ARNs) of the contacts to add to the rotation. The order in which you list the contacts is their shift order in the rotation schedule.
         * 
         * @return builder
         * 
         */
        public Builder contactIds(List<String> contactIds) {
            return contactIds(Output.of(contactIds));
        }

        /**
         * @param contactIds Amazon Resource Names (ARNs) of the contacts to add to the rotation. The order in which you list the contacts is their shift order in the rotation schedule.
         * 
         * @return builder
         * 
         */
        public Builder contactIds(String... contactIds) {
            return contactIds(List.of(contactIds));
        }

        /**
         * @param name The name for the rotation.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name for the rotation.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param recurrence Information about when an on-call rotation is in effect and how long the rotation period lasts. Exactly one of either `daily_settings`, `monthly_settings`, or `weekly_settings` must be populated. See Recurrence for more details.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder recurrence(@Nullable Output<ContactsRotationRecurrenceArgs> recurrence) {
            $.recurrence = recurrence;
            return this;
        }

        /**
         * @param recurrence Information about when an on-call rotation is in effect and how long the rotation period lasts. Exactly one of either `daily_settings`, `monthly_settings`, or `weekly_settings` must be populated. See Recurrence for more details.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder recurrence(ContactsRotationRecurrenceArgs recurrence) {
            return recurrence(Output.of(recurrence));
        }

        /**
         * @param startTime The date and time, in RFC 3339 format, that the rotation goes into effect.
         * 
         * @return builder
         * 
         */
        public Builder startTime(@Nullable Output<String> startTime) {
            $.startTime = startTime;
            return this;
        }

        /**
         * @param startTime The date and time, in RFC 3339 format, that the rotation goes into effect.
         * 
         * @return builder
         * 
         */
        public Builder startTime(String startTime) {
            return startTime(Output.of(startTime));
        }

        /**
         * @param tags A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param timeZoneId The time zone to base the rotation’s activity on in Internet Assigned Numbers Authority (IANA) format.
         * 
         * @return builder
         * 
         */
        public Builder timeZoneId(Output<String> timeZoneId) {
            $.timeZoneId = timeZoneId;
            return this;
        }

        /**
         * @param timeZoneId The time zone to base the rotation’s activity on in Internet Assigned Numbers Authority (IANA) format.
         * 
         * @return builder
         * 
         */
        public Builder timeZoneId(String timeZoneId) {
            return timeZoneId(Output.of(timeZoneId));
        }

        public ContactsRotationArgs build() {
            if ($.contactIds == null) {
                throw new MissingRequiredPropertyException("ContactsRotationArgs", "contactIds");
            }
            if ($.timeZoneId == null) {
                throw new MissingRequiredPropertyException("ContactsRotationArgs", "timeZoneId");
            }
            return $;
        }
    }

}
