// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.inputs;

import com.pulumi.aws.quicksight.inputs.ConditionalFormattingColorGradientArgs;
import com.pulumi.aws.quicksight.inputs.ConditionalFormattingColorSolidArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConditionalFormattingColorArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConditionalFormattingColorArgs Empty = new ConditionalFormattingColorArgs();

    @Import(name="gradient")
    private @Nullable Output<ConditionalFormattingColorGradientArgs> gradient;

    public Optional<Output<ConditionalFormattingColorGradientArgs>> gradient() {
        return Optional.ofNullable(this.gradient);
    }

    @Import(name="solid")
    private @Nullable Output<ConditionalFormattingColorSolidArgs> solid;

    public Optional<Output<ConditionalFormattingColorSolidArgs>> solid() {
        return Optional.ofNullable(this.solid);
    }

    private ConditionalFormattingColorArgs() {}

    private ConditionalFormattingColorArgs(ConditionalFormattingColorArgs $) {
        this.gradient = $.gradient;
        this.solid = $.solid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConditionalFormattingColorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConditionalFormattingColorArgs $;

        public Builder() {
            $ = new ConditionalFormattingColorArgs();
        }

        public Builder(ConditionalFormattingColorArgs defaults) {
            $ = new ConditionalFormattingColorArgs(Objects.requireNonNull(defaults));
        }

        public Builder gradient(@Nullable Output<ConditionalFormattingColorGradientArgs> gradient) {
            $.gradient = gradient;
            return this;
        }

        public Builder gradient(ConditionalFormattingColorGradientArgs gradient) {
            return gradient(Output.of(gradient));
        }

        public Builder solid(@Nullable Output<ConditionalFormattingColorSolidArgs> solid) {
            $.solid = solid;
            return this;
        }

        public Builder solid(ConditionalFormattingColorSolidArgs solid) {
            return solid(Output.of(solid));
        }

        public ConditionalFormattingColorArgs build() {
            return $;
        }
    }

}
