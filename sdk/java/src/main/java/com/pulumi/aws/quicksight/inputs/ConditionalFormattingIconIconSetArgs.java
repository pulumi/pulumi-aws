// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConditionalFormattingIconIconSetArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConditionalFormattingIconIconSetArgs Empty = new ConditionalFormattingIconIconSetArgs();

    @Import(name="expression", required=true)
    private Output<String> expression;

    public Output<String> expression() {
        return this.expression;
    }

    @Import(name="iconSetType")
    private @Nullable Output<String> iconSetType;

    public Optional<Output<String>> iconSetType() {
        return Optional.ofNullable(this.iconSetType);
    }

    private ConditionalFormattingIconIconSetArgs() {}

    private ConditionalFormattingIconIconSetArgs(ConditionalFormattingIconIconSetArgs $) {
        this.expression = $.expression;
        this.iconSetType = $.iconSetType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConditionalFormattingIconIconSetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConditionalFormattingIconIconSetArgs $;

        public Builder() {
            $ = new ConditionalFormattingIconIconSetArgs();
        }

        public Builder(ConditionalFormattingIconIconSetArgs defaults) {
            $ = new ConditionalFormattingIconIconSetArgs(Objects.requireNonNull(defaults));
        }

        public Builder expression(Output<String> expression) {
            $.expression = expression;
            return this;
        }

        public Builder expression(String expression) {
            return expression(Output.of(expression));
        }

        public Builder iconSetType(@Nullable Output<String> iconSetType) {
            $.iconSetType = iconSetType;
            return this;
        }

        public Builder iconSetType(String iconSetType) {
            return iconSetType(Output.of(iconSetType));
        }

        public ConditionalFormattingIconIconSetArgs build() {
            if ($.expression == null) {
                throw new MissingRequiredPropertyException("ConditionalFormattingIconIconSetArgs", "expression");
            }
            return $;
        }
    }

}
