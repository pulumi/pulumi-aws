// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.s3.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetAccountPublicAccessBlockResult {
    private @Nullable String accountId;
    /**
     * @return Whether or not Amazon S3 should block public ACLs for buckets in this account is enabled. Returns as `true` or `false`.
     * 
     */
    private Boolean blockPublicAcls;
    /**
     * @return Whether or not Amazon S3 should block public bucket policies for buckets in this account is enabled. Returns as `true` or `false`.
     * 
     */
    private Boolean blockPublicPolicy;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Whether or not Amazon S3 should ignore public ACLs for buckets in this account is enabled. Returns as `true` or `false`.
     * 
     */
    private Boolean ignorePublicAcls;
    /**
     * @return Whether or not Amazon S3 should restrict public bucket policies for buckets in this account is enabled. Returns as `true` or `false`.
     * 
     */
    private Boolean restrictPublicBuckets;

    private GetAccountPublicAccessBlockResult() {}
    public Optional<String> accountId() {
        return Optional.ofNullable(this.accountId);
    }
    /**
     * @return Whether or not Amazon S3 should block public ACLs for buckets in this account is enabled. Returns as `true` or `false`.
     * 
     */
    public Boolean blockPublicAcls() {
        return this.blockPublicAcls;
    }
    /**
     * @return Whether or not Amazon S3 should block public bucket policies for buckets in this account is enabled. Returns as `true` or `false`.
     * 
     */
    public Boolean blockPublicPolicy() {
        return this.blockPublicPolicy;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Whether or not Amazon S3 should ignore public ACLs for buckets in this account is enabled. Returns as `true` or `false`.
     * 
     */
    public Boolean ignorePublicAcls() {
        return this.ignorePublicAcls;
    }
    /**
     * @return Whether or not Amazon S3 should restrict public bucket policies for buckets in this account is enabled. Returns as `true` or `false`.
     * 
     */
    public Boolean restrictPublicBuckets() {
        return this.restrictPublicBuckets;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAccountPublicAccessBlockResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String accountId;
        private Boolean blockPublicAcls;
        private Boolean blockPublicPolicy;
        private String id;
        private Boolean ignorePublicAcls;
        private Boolean restrictPublicBuckets;
        public Builder() {}
        public Builder(GetAccountPublicAccessBlockResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountId = defaults.accountId;
    	      this.blockPublicAcls = defaults.blockPublicAcls;
    	      this.blockPublicPolicy = defaults.blockPublicPolicy;
    	      this.id = defaults.id;
    	      this.ignorePublicAcls = defaults.ignorePublicAcls;
    	      this.restrictPublicBuckets = defaults.restrictPublicBuckets;
        }

        @CustomType.Setter
        public Builder accountId(@Nullable String accountId) {
            this.accountId = accountId;
            return this;
        }
        @CustomType.Setter
        public Builder blockPublicAcls(Boolean blockPublicAcls) {
            this.blockPublicAcls = Objects.requireNonNull(blockPublicAcls);
            return this;
        }
        @CustomType.Setter
        public Builder blockPublicPolicy(Boolean blockPublicPolicy) {
            this.blockPublicPolicy = Objects.requireNonNull(blockPublicPolicy);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder ignorePublicAcls(Boolean ignorePublicAcls) {
            this.ignorePublicAcls = Objects.requireNonNull(ignorePublicAcls);
            return this;
        }
        @CustomType.Setter
        public Builder restrictPublicBuckets(Boolean restrictPublicBuckets) {
            this.restrictPublicBuckets = Objects.requireNonNull(restrictPublicBuckets);
            return this;
        }
        public GetAccountPublicAccessBlockResult build() {
            final var o = new GetAccountPublicAccessBlockResult();
            o.accountId = accountId;
            o.blockPublicAcls = blockPublicAcls;
            o.blockPublicPolicy = blockPublicPolicy;
            o.id = id;
            o.ignorePublicAcls = ignorePublicAcls;
            o.restrictPublicBuckets = restrictPublicBuckets;
            return o;
        }
    }
}
