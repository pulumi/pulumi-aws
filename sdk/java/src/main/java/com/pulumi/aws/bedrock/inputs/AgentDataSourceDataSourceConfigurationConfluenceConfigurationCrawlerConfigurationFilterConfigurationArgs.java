// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.bedrock.inputs;

import com.pulumi.aws.bedrock.inputs.AgentDataSourceDataSourceConfigurationConfluenceConfigurationCrawlerConfigurationFilterConfigurationPatternObjectFilterArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AgentDataSourceDataSourceConfigurationConfluenceConfigurationCrawlerConfigurationFilterConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final AgentDataSourceDataSourceConfigurationConfluenceConfigurationCrawlerConfigurationFilterConfigurationArgs Empty = new AgentDataSourceDataSourceConfigurationConfluenceConfigurationCrawlerConfigurationFilterConfigurationArgs();

    /**
     * The configuration of filtering certain objects or content types of the data source. See `pattern_object_filter` block for details.
     * 
     */
    @Import(name="patternObjectFilters")
    private @Nullable Output<List<AgentDataSourceDataSourceConfigurationConfluenceConfigurationCrawlerConfigurationFilterConfigurationPatternObjectFilterArgs>> patternObjectFilters;

    /**
     * @return The configuration of filtering certain objects or content types of the data source. See `pattern_object_filter` block for details.
     * 
     */
    public Optional<Output<List<AgentDataSourceDataSourceConfigurationConfluenceConfigurationCrawlerConfigurationFilterConfigurationPatternObjectFilterArgs>>> patternObjectFilters() {
        return Optional.ofNullable(this.patternObjectFilters);
    }

    /**
     * The type of filtering that you want to apply to certain objects or content of the data source. For example, the PATTERN type is regular expression patterns you can apply to filter your content.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return The type of filtering that you want to apply to certain objects or content of the data source. For example, the PATTERN type is regular expression patterns you can apply to filter your content.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private AgentDataSourceDataSourceConfigurationConfluenceConfigurationCrawlerConfigurationFilterConfigurationArgs() {}

    private AgentDataSourceDataSourceConfigurationConfluenceConfigurationCrawlerConfigurationFilterConfigurationArgs(AgentDataSourceDataSourceConfigurationConfluenceConfigurationCrawlerConfigurationFilterConfigurationArgs $) {
        this.patternObjectFilters = $.patternObjectFilters;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AgentDataSourceDataSourceConfigurationConfluenceConfigurationCrawlerConfigurationFilterConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AgentDataSourceDataSourceConfigurationConfluenceConfigurationCrawlerConfigurationFilterConfigurationArgs $;

        public Builder() {
            $ = new AgentDataSourceDataSourceConfigurationConfluenceConfigurationCrawlerConfigurationFilterConfigurationArgs();
        }

        public Builder(AgentDataSourceDataSourceConfigurationConfluenceConfigurationCrawlerConfigurationFilterConfigurationArgs defaults) {
            $ = new AgentDataSourceDataSourceConfigurationConfluenceConfigurationCrawlerConfigurationFilterConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param patternObjectFilters The configuration of filtering certain objects or content types of the data source. See `pattern_object_filter` block for details.
         * 
         * @return builder
         * 
         */
        public Builder patternObjectFilters(@Nullable Output<List<AgentDataSourceDataSourceConfigurationConfluenceConfigurationCrawlerConfigurationFilterConfigurationPatternObjectFilterArgs>> patternObjectFilters) {
            $.patternObjectFilters = patternObjectFilters;
            return this;
        }

        /**
         * @param patternObjectFilters The configuration of filtering certain objects or content types of the data source. See `pattern_object_filter` block for details.
         * 
         * @return builder
         * 
         */
        public Builder patternObjectFilters(List<AgentDataSourceDataSourceConfigurationConfluenceConfigurationCrawlerConfigurationFilterConfigurationPatternObjectFilterArgs> patternObjectFilters) {
            return patternObjectFilters(Output.of(patternObjectFilters));
        }

        /**
         * @param patternObjectFilters The configuration of filtering certain objects or content types of the data source. See `pattern_object_filter` block for details.
         * 
         * @return builder
         * 
         */
        public Builder patternObjectFilters(AgentDataSourceDataSourceConfigurationConfluenceConfigurationCrawlerConfigurationFilterConfigurationPatternObjectFilterArgs... patternObjectFilters) {
            return patternObjectFilters(List.of(patternObjectFilters));
        }

        /**
         * @param type The type of filtering that you want to apply to certain objects or content of the data source. For example, the PATTERN type is regular expression patterns you can apply to filter your content.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of filtering that you want to apply to certain objects or content of the data source. For example, the PATTERN type is regular expression patterns you can apply to filter your content.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public AgentDataSourceDataSourceConfigurationConfluenceConfigurationCrawlerConfigurationFilterConfigurationArgs build() {
            if ($.type == null) {
                throw new MissingRequiredPropertyException("AgentDataSourceDataSourceConfigurationConfluenceConfigurationCrawlerConfigurationFilterConfigurationArgs", "type");
            }
            return $;
        }
    }

}
