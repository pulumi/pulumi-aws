// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.outputs;

import com.pulumi.aws.quicksight.outputs.ConditionalFormattingIconCustomCondition;
import com.pulumi.aws.quicksight.outputs.ConditionalFormattingIconIconSet;
import com.pulumi.core.annotations.CustomType;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ConditionalFormattingIcon {
    private @Nullable ConditionalFormattingIconCustomCondition customCondition;
    private @Nullable ConditionalFormattingIconIconSet iconSet;

    private ConditionalFormattingIcon() {}
    public Optional<ConditionalFormattingIconCustomCondition> customCondition() {
        return Optional.ofNullable(this.customCondition);
    }
    public Optional<ConditionalFormattingIconIconSet> iconSet() {
        return Optional.ofNullable(this.iconSet);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConditionalFormattingIcon defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable ConditionalFormattingIconCustomCondition customCondition;
        private @Nullable ConditionalFormattingIconIconSet iconSet;
        public Builder() {}
        public Builder(ConditionalFormattingIcon defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.customCondition = defaults.customCondition;
    	      this.iconSet = defaults.iconSet;
        }

        @CustomType.Setter
        public Builder customCondition(@Nullable ConditionalFormattingIconCustomCondition customCondition) {

            this.customCondition = customCondition;
            return this;
        }
        @CustomType.Setter
        public Builder iconSet(@Nullable ConditionalFormattingIconIconSet iconSet) {

            this.iconSet = iconSet;
            return this;
        }
        public ConditionalFormattingIcon build() {
            final var _resultValue = new ConditionalFormattingIcon();
            _resultValue.customCondition = customCondition;
            _resultValue.iconSet = iconSet;
            return _resultValue;
        }
    }
}
