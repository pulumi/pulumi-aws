// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.sesv2.outputs;

import com.pulumi.aws.sesv2.outputs.GetEmailIdentityDkimSigningAttribute;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetEmailIdentityResult {
    /**
     * @return ARN of the Email Identity.
     * 
     */
    private String arn;
    private String configurationSetName;
    /**
     * @return A list of objects that contains at most one element with information about the private key and selector that you want to use to configure DKIM for the identity for Bring Your Own DKIM (BYODKIM) for the identity, or, configures the key length to be used for Easy DKIM.
     * 
     */
    private List<GetEmailIdentityDkimSigningAttribute> dkimSigningAttributes;
    private String emailIdentity;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The email identity type. Valid values: `EMAIL_ADDRESS`, `DOMAIN`.
     * 
     */
    private String identityType;
    /**
     * @return Key-value mapping of resource tags.
     * 
     */
    private Map<String,String> tags;
    /**
     * @return Specifies whether or not the identity is verified.
     * 
     */
    private Boolean verifiedForSendingStatus;

    private GetEmailIdentityResult() {}
    /**
     * @return ARN of the Email Identity.
     * 
     */
    public String arn() {
        return this.arn;
    }
    public String configurationSetName() {
        return this.configurationSetName;
    }
    /**
     * @return A list of objects that contains at most one element with information about the private key and selector that you want to use to configure DKIM for the identity for Bring Your Own DKIM (BYODKIM) for the identity, or, configures the key length to be used for Easy DKIM.
     * 
     */
    public List<GetEmailIdentityDkimSigningAttribute> dkimSigningAttributes() {
        return this.dkimSigningAttributes;
    }
    public String emailIdentity() {
        return this.emailIdentity;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The email identity type. Valid values: `EMAIL_ADDRESS`, `DOMAIN`.
     * 
     */
    public String identityType() {
        return this.identityType;
    }
    /**
     * @return Key-value mapping of resource tags.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }
    /**
     * @return Specifies whether or not the identity is verified.
     * 
     */
    public Boolean verifiedForSendingStatus() {
        return this.verifiedForSendingStatus;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetEmailIdentityResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String arn;
        private String configurationSetName;
        private List<GetEmailIdentityDkimSigningAttribute> dkimSigningAttributes;
        private String emailIdentity;
        private String id;
        private String identityType;
        private Map<String,String> tags;
        private Boolean verifiedForSendingStatus;
        public Builder() {}
        public Builder(GetEmailIdentityResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.configurationSetName = defaults.configurationSetName;
    	      this.dkimSigningAttributes = defaults.dkimSigningAttributes;
    	      this.emailIdentity = defaults.emailIdentity;
    	      this.id = defaults.id;
    	      this.identityType = defaults.identityType;
    	      this.tags = defaults.tags;
    	      this.verifiedForSendingStatus = defaults.verifiedForSendingStatus;
        }

        @CustomType.Setter
        public Builder arn(String arn) {
            if (arn == null) {
              throw new MissingRequiredPropertyException("GetEmailIdentityResult", "arn");
            }
            this.arn = arn;
            return this;
        }
        @CustomType.Setter
        public Builder configurationSetName(String configurationSetName) {
            if (configurationSetName == null) {
              throw new MissingRequiredPropertyException("GetEmailIdentityResult", "configurationSetName");
            }
            this.configurationSetName = configurationSetName;
            return this;
        }
        @CustomType.Setter
        public Builder dkimSigningAttributes(List<GetEmailIdentityDkimSigningAttribute> dkimSigningAttributes) {
            if (dkimSigningAttributes == null) {
              throw new MissingRequiredPropertyException("GetEmailIdentityResult", "dkimSigningAttributes");
            }
            this.dkimSigningAttributes = dkimSigningAttributes;
            return this;
        }
        public Builder dkimSigningAttributes(GetEmailIdentityDkimSigningAttribute... dkimSigningAttributes) {
            return dkimSigningAttributes(List.of(dkimSigningAttributes));
        }
        @CustomType.Setter
        public Builder emailIdentity(String emailIdentity) {
            if (emailIdentity == null) {
              throw new MissingRequiredPropertyException("GetEmailIdentityResult", "emailIdentity");
            }
            this.emailIdentity = emailIdentity;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetEmailIdentityResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder identityType(String identityType) {
            if (identityType == null) {
              throw new MissingRequiredPropertyException("GetEmailIdentityResult", "identityType");
            }
            this.identityType = identityType;
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetEmailIdentityResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder verifiedForSendingStatus(Boolean verifiedForSendingStatus) {
            if (verifiedForSendingStatus == null) {
              throw new MissingRequiredPropertyException("GetEmailIdentityResult", "verifiedForSendingStatus");
            }
            this.verifiedForSendingStatus = verifiedForSendingStatus;
            return this;
        }
        public GetEmailIdentityResult build() {
            final var _resultValue = new GetEmailIdentityResult();
            _resultValue.arn = arn;
            _resultValue.configurationSetName = configurationSetName;
            _resultValue.dkimSigningAttributes = dkimSigningAttributes;
            _resultValue.emailIdentity = emailIdentity;
            _resultValue.id = id;
            _resultValue.identityType = identityType;
            _resultValue.tags = tags;
            _resultValue.verifiedForSendingStatus = verifiedForSendingStatus;
            return _resultValue;
        }
    }
}
