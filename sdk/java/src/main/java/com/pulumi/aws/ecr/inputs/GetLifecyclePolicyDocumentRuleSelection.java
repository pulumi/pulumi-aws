// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ecr.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetLifecyclePolicyDocumentRuleSelection extends com.pulumi.resources.InvokeArgs {

    public static final GetLifecyclePolicyDocumentRuleSelection Empty = new GetLifecyclePolicyDocumentRuleSelection();

    /**
     * Specify a count number. If the `count_type` used is imageCountMoreThan, then the value is the maximum number of images that you want to retain in your repository. If the `count_type` used is sinceImagePushed, then the value is the maximum age limit for your images.
     * 
     */
    @Import(name="countNumber", required=true)
    private Integer countNumber;

    /**
     * @return Specify a count number. If the `count_type` used is imageCountMoreThan, then the value is the maximum number of images that you want to retain in your repository. If the `count_type` used is sinceImagePushed, then the value is the maximum age limit for your images.
     * 
     */
    public Integer countNumber() {
        return this.countNumber;
    }

    /**
     * Specify a count type to apply to the images. If `count_type` is set to imageCountMoreThan, you also specify `count_number` to create a rule that sets a limit on the number of images that exist in your repository. If `count_type` is set to sinceImagePushed, you also specify `count_unit` and `count_number` to specify a time limit on the images that exist in your repository.
     * 
     */
    @Import(name="countType", required=true)
    private String countType;

    /**
     * @return Specify a count type to apply to the images. If `count_type` is set to imageCountMoreThan, you also specify `count_number` to create a rule that sets a limit on the number of images that exist in your repository. If `count_type` is set to sinceImagePushed, you also specify `count_unit` and `count_number` to specify a time limit on the images that exist in your repository.
     * 
     */
    public String countType() {
        return this.countType;
    }

    /**
     * Specify a count unit of days to indicate that as the unit of time, in addition to `count_number`, which is the number of days.
     * 
     */
    @Import(name="countUnit")
    private @Nullable String countUnit;

    /**
     * @return Specify a count unit of days to indicate that as the unit of time, in addition to `count_number`, which is the number of days.
     * 
     */
    public Optional<String> countUnit() {
        return Optional.ofNullable(this.countUnit);
    }

    @Import(name="tagPatternLists")
    private @Nullable List<String> tagPatternLists;

    public Optional<List<String>> tagPatternLists() {
        return Optional.ofNullable(this.tagPatternLists);
    }

    /**
     * You must specify a comma-separated list of image tag prefixes on which to take action with your lifecycle policy. For example, if your images are tagged as prod, prod1, prod2, and so on, you would use the tag prefix prod to specify all of them. If you specify multiple tags, only images with all specified tags are selected.
     * 
     */
    @Import(name="tagPrefixLists")
    private @Nullable List<String> tagPrefixLists;

    /**
     * @return You must specify a comma-separated list of image tag prefixes on which to take action with your lifecycle policy. For example, if your images are tagged as prod, prod1, prod2, and so on, you would use the tag prefix prod to specify all of them. If you specify multiple tags, only images with all specified tags are selected.
     * 
     */
    public Optional<List<String>> tagPrefixLists() {
        return Optional.ofNullable(this.tagPrefixLists);
    }

    /**
     * Determines whether the lifecycle policy rule that you are adding specifies a tag for an image. Acceptable options are tagged, untagged, or any. If you specify any, then all images have the rule applied to them. If you specify tagged, then you must also specify a `tag_prefix_list` value. If you specify untagged, then you must omit `tag_prefix_list`.
     * 
     */
    @Import(name="tagStatus", required=true)
    private String tagStatus;

    /**
     * @return Determines whether the lifecycle policy rule that you are adding specifies a tag for an image. Acceptable options are tagged, untagged, or any. If you specify any, then all images have the rule applied to them. If you specify tagged, then you must also specify a `tag_prefix_list` value. If you specify untagged, then you must omit `tag_prefix_list`.
     * 
     */
    public String tagStatus() {
        return this.tagStatus;
    }

    private GetLifecyclePolicyDocumentRuleSelection() {}

    private GetLifecyclePolicyDocumentRuleSelection(GetLifecyclePolicyDocumentRuleSelection $) {
        this.countNumber = $.countNumber;
        this.countType = $.countType;
        this.countUnit = $.countUnit;
        this.tagPatternLists = $.tagPatternLists;
        this.tagPrefixLists = $.tagPrefixLists;
        this.tagStatus = $.tagStatus;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetLifecyclePolicyDocumentRuleSelection defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetLifecyclePolicyDocumentRuleSelection $;

        public Builder() {
            $ = new GetLifecyclePolicyDocumentRuleSelection();
        }

        public Builder(GetLifecyclePolicyDocumentRuleSelection defaults) {
            $ = new GetLifecyclePolicyDocumentRuleSelection(Objects.requireNonNull(defaults));
        }

        /**
         * @param countNumber Specify a count number. If the `count_type` used is imageCountMoreThan, then the value is the maximum number of images that you want to retain in your repository. If the `count_type` used is sinceImagePushed, then the value is the maximum age limit for your images.
         * 
         * @return builder
         * 
         */
        public Builder countNumber(Integer countNumber) {
            $.countNumber = countNumber;
            return this;
        }

        /**
         * @param countType Specify a count type to apply to the images. If `count_type` is set to imageCountMoreThan, you also specify `count_number` to create a rule that sets a limit on the number of images that exist in your repository. If `count_type` is set to sinceImagePushed, you also specify `count_unit` and `count_number` to specify a time limit on the images that exist in your repository.
         * 
         * @return builder
         * 
         */
        public Builder countType(String countType) {
            $.countType = countType;
            return this;
        }

        /**
         * @param countUnit Specify a count unit of days to indicate that as the unit of time, in addition to `count_number`, which is the number of days.
         * 
         * @return builder
         * 
         */
        public Builder countUnit(@Nullable String countUnit) {
            $.countUnit = countUnit;
            return this;
        }

        public Builder tagPatternLists(@Nullable List<String> tagPatternLists) {
            $.tagPatternLists = tagPatternLists;
            return this;
        }

        public Builder tagPatternLists(String... tagPatternLists) {
            return tagPatternLists(List.of(tagPatternLists));
        }

        /**
         * @param tagPrefixLists You must specify a comma-separated list of image tag prefixes on which to take action with your lifecycle policy. For example, if your images are tagged as prod, prod1, prod2, and so on, you would use the tag prefix prod to specify all of them. If you specify multiple tags, only images with all specified tags are selected.
         * 
         * @return builder
         * 
         */
        public Builder tagPrefixLists(@Nullable List<String> tagPrefixLists) {
            $.tagPrefixLists = tagPrefixLists;
            return this;
        }

        /**
         * @param tagPrefixLists You must specify a comma-separated list of image tag prefixes on which to take action with your lifecycle policy. For example, if your images are tagged as prod, prod1, prod2, and so on, you would use the tag prefix prod to specify all of them. If you specify multiple tags, only images with all specified tags are selected.
         * 
         * @return builder
         * 
         */
        public Builder tagPrefixLists(String... tagPrefixLists) {
            return tagPrefixLists(List.of(tagPrefixLists));
        }

        /**
         * @param tagStatus Determines whether the lifecycle policy rule that you are adding specifies a tag for an image. Acceptable options are tagged, untagged, or any. If you specify any, then all images have the rule applied to them. If you specify tagged, then you must also specify a `tag_prefix_list` value. If you specify untagged, then you must omit `tag_prefix_list`.
         * 
         * @return builder
         * 
         */
        public Builder tagStatus(String tagStatus) {
            $.tagStatus = tagStatus;
            return this;
        }

        public GetLifecyclePolicyDocumentRuleSelection build() {
            if ($.countNumber == null) {
                throw new MissingRequiredPropertyException("GetLifecyclePolicyDocumentRuleSelection", "countNumber");
            }
            if ($.countType == null) {
                throw new MissingRequiredPropertyException("GetLifecyclePolicyDocumentRuleSelection", "countType");
            }
            if ($.tagStatus == null) {
                throw new MissingRequiredPropertyException("GetLifecyclePolicyDocumentRuleSelection", "tagStatus");
            }
            return $;
        }
    }

}
