// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.dms;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class S3EndpointArgs extends com.pulumi.resources.ResourceArgs {

    public static final S3EndpointArgs Empty = new S3EndpointArgs();

    @Import(name="addColumnName")
    private @Nullable Output<Boolean> addColumnName;

    public Optional<Output<Boolean>> addColumnName() {
        return Optional.ofNullable(this.addColumnName);
    }

    @Import(name="addTrailingPaddingCharacter")
    private @Nullable Output<Boolean> addTrailingPaddingCharacter;

    public Optional<Output<Boolean>> addTrailingPaddingCharacter() {
        return Optional.ofNullable(this.addTrailingPaddingCharacter);
    }

    @Import(name="bucketFolder")
    private @Nullable Output<String> bucketFolder;

    public Optional<Output<String>> bucketFolder() {
        return Optional.ofNullable(this.bucketFolder);
    }

    @Import(name="bucketName", required=true)
    private Output<String> bucketName;

    public Output<String> bucketName() {
        return this.bucketName;
    }

    @Import(name="cannedAclForObjects")
    private @Nullable Output<String> cannedAclForObjects;

    public Optional<Output<String>> cannedAclForObjects() {
        return Optional.ofNullable(this.cannedAclForObjects);
    }

    @Import(name="cdcInsertsAndUpdates")
    private @Nullable Output<Boolean> cdcInsertsAndUpdates;

    public Optional<Output<Boolean>> cdcInsertsAndUpdates() {
        return Optional.ofNullable(this.cdcInsertsAndUpdates);
    }

    @Import(name="cdcInsertsOnly")
    private @Nullable Output<Boolean> cdcInsertsOnly;

    public Optional<Output<Boolean>> cdcInsertsOnly() {
        return Optional.ofNullable(this.cdcInsertsOnly);
    }

    @Import(name="cdcMaxBatchInterval")
    private @Nullable Output<Integer> cdcMaxBatchInterval;

    public Optional<Output<Integer>> cdcMaxBatchInterval() {
        return Optional.ofNullable(this.cdcMaxBatchInterval);
    }

    @Import(name="cdcMinFileSize")
    private @Nullable Output<Integer> cdcMinFileSize;

    public Optional<Output<Integer>> cdcMinFileSize() {
        return Optional.ofNullable(this.cdcMinFileSize);
    }

    @Import(name="cdcPath")
    private @Nullable Output<String> cdcPath;

    public Optional<Output<String>> cdcPath() {
        return Optional.ofNullable(this.cdcPath);
    }

    @Import(name="certificateArn")
    private @Nullable Output<String> certificateArn;

    public Optional<Output<String>> certificateArn() {
        return Optional.ofNullable(this.certificateArn);
    }

    @Import(name="compressionType")
    private @Nullable Output<String> compressionType;

    public Optional<Output<String>> compressionType() {
        return Optional.ofNullable(this.compressionType);
    }

    @Import(name="csvDelimiter")
    private @Nullable Output<String> csvDelimiter;

    public Optional<Output<String>> csvDelimiter() {
        return Optional.ofNullable(this.csvDelimiter);
    }

    @Import(name="csvNoSupValue")
    private @Nullable Output<String> csvNoSupValue;

    public Optional<Output<String>> csvNoSupValue() {
        return Optional.ofNullable(this.csvNoSupValue);
    }

    @Import(name="csvNullValue")
    private @Nullable Output<String> csvNullValue;

    public Optional<Output<String>> csvNullValue() {
        return Optional.ofNullable(this.csvNullValue);
    }

    @Import(name="csvRowDelimiter")
    private @Nullable Output<String> csvRowDelimiter;

    public Optional<Output<String>> csvRowDelimiter() {
        return Optional.ofNullable(this.csvRowDelimiter);
    }

    @Import(name="dataFormat")
    private @Nullable Output<String> dataFormat;

    public Optional<Output<String>> dataFormat() {
        return Optional.ofNullable(this.dataFormat);
    }

    @Import(name="dataPageSize")
    private @Nullable Output<Integer> dataPageSize;

    public Optional<Output<Integer>> dataPageSize() {
        return Optional.ofNullable(this.dataPageSize);
    }

    @Import(name="datePartitionDelimiter")
    private @Nullable Output<String> datePartitionDelimiter;

    public Optional<Output<String>> datePartitionDelimiter() {
        return Optional.ofNullable(this.datePartitionDelimiter);
    }

    @Import(name="datePartitionEnabled")
    private @Nullable Output<Boolean> datePartitionEnabled;

    public Optional<Output<Boolean>> datePartitionEnabled() {
        return Optional.ofNullable(this.datePartitionEnabled);
    }

    @Import(name="datePartitionSequence")
    private @Nullable Output<String> datePartitionSequence;

    public Optional<Output<String>> datePartitionSequence() {
        return Optional.ofNullable(this.datePartitionSequence);
    }

    @Import(name="datePartitionTimezone")
    private @Nullable Output<String> datePartitionTimezone;

    public Optional<Output<String>> datePartitionTimezone() {
        return Optional.ofNullable(this.datePartitionTimezone);
    }

    @Import(name="dictPageSizeLimit")
    private @Nullable Output<Integer> dictPageSizeLimit;

    public Optional<Output<Integer>> dictPageSizeLimit() {
        return Optional.ofNullable(this.dictPageSizeLimit);
    }

    @Import(name="enableStatistics")
    private @Nullable Output<Boolean> enableStatistics;

    public Optional<Output<Boolean>> enableStatistics() {
        return Optional.ofNullable(this.enableStatistics);
    }

    @Import(name="encodingType")
    private @Nullable Output<String> encodingType;

    public Optional<Output<String>> encodingType() {
        return Optional.ofNullable(this.encodingType);
    }

    @Import(name="encryptionMode")
    private @Nullable Output<String> encryptionMode;

    public Optional<Output<String>> encryptionMode() {
        return Optional.ofNullable(this.encryptionMode);
    }

    @Import(name="endpointId", required=true)
    private Output<String> endpointId;

    public Output<String> endpointId() {
        return this.endpointId;
    }

    @Import(name="endpointType", required=true)
    private Output<String> endpointType;

    public Output<String> endpointType() {
        return this.endpointType;
    }

    @Import(name="expectedBucketOwner")
    private @Nullable Output<String> expectedBucketOwner;

    public Optional<Output<String>> expectedBucketOwner() {
        return Optional.ofNullable(this.expectedBucketOwner);
    }

    @Import(name="externalTableDefinition")
    private @Nullable Output<String> externalTableDefinition;

    public Optional<Output<String>> externalTableDefinition() {
        return Optional.ofNullable(this.externalTableDefinition);
    }

    @Import(name="ignoreHeaderRows")
    private @Nullable Output<Integer> ignoreHeaderRows;

    public Optional<Output<Integer>> ignoreHeaderRows() {
        return Optional.ofNullable(this.ignoreHeaderRows);
    }

    @Import(name="includeOpForFullLoad")
    private @Nullable Output<Boolean> includeOpForFullLoad;

    public Optional<Output<Boolean>> includeOpForFullLoad() {
        return Optional.ofNullable(this.includeOpForFullLoad);
    }

    @Import(name="kmsKeyArn")
    private @Nullable Output<String> kmsKeyArn;

    public Optional<Output<String>> kmsKeyArn() {
        return Optional.ofNullable(this.kmsKeyArn);
    }

    @Import(name="maxFileSize")
    private @Nullable Output<Integer> maxFileSize;

    public Optional<Output<Integer>> maxFileSize() {
        return Optional.ofNullable(this.maxFileSize);
    }

    @Import(name="parquetTimestampInMillisecond")
    private @Nullable Output<Boolean> parquetTimestampInMillisecond;

    public Optional<Output<Boolean>> parquetTimestampInMillisecond() {
        return Optional.ofNullable(this.parquetTimestampInMillisecond);
    }

    @Import(name="parquetVersion")
    private @Nullable Output<String> parquetVersion;

    public Optional<Output<String>> parquetVersion() {
        return Optional.ofNullable(this.parquetVersion);
    }

    @Import(name="preserveTransactions")
    private @Nullable Output<Boolean> preserveTransactions;

    public Optional<Output<Boolean>> preserveTransactions() {
        return Optional.ofNullable(this.preserveTransactions);
    }

    @Import(name="rfc4180")
    private @Nullable Output<Boolean> rfc4180;

    public Optional<Output<Boolean>> rfc4180() {
        return Optional.ofNullable(this.rfc4180);
    }

    @Import(name="rowGroupLength")
    private @Nullable Output<Integer> rowGroupLength;

    public Optional<Output<Integer>> rowGroupLength() {
        return Optional.ofNullable(this.rowGroupLength);
    }

    @Import(name="serverSideEncryptionKmsKeyId")
    private @Nullable Output<String> serverSideEncryptionKmsKeyId;

    public Optional<Output<String>> serverSideEncryptionKmsKeyId() {
        return Optional.ofNullable(this.serverSideEncryptionKmsKeyId);
    }

    @Import(name="serviceAccessRoleArn", required=true)
    private Output<String> serviceAccessRoleArn;

    public Output<String> serviceAccessRoleArn() {
        return this.serviceAccessRoleArn;
    }

    @Import(name="sslMode")
    private @Nullable Output<String> sslMode;

    public Optional<Output<String>> sslMode() {
        return Optional.ofNullable(this.sslMode);
    }

    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="timestampColumnName")
    private @Nullable Output<String> timestampColumnName;

    public Optional<Output<String>> timestampColumnName() {
        return Optional.ofNullable(this.timestampColumnName);
    }

    @Import(name="useCsvNoSupValue")
    private @Nullable Output<Boolean> useCsvNoSupValue;

    public Optional<Output<Boolean>> useCsvNoSupValue() {
        return Optional.ofNullable(this.useCsvNoSupValue);
    }

    @Import(name="useTaskStartTimeForFullLoadTimestamp")
    private @Nullable Output<Boolean> useTaskStartTimeForFullLoadTimestamp;

    public Optional<Output<Boolean>> useTaskStartTimeForFullLoadTimestamp() {
        return Optional.ofNullable(this.useTaskStartTimeForFullLoadTimestamp);
    }

    private S3EndpointArgs() {}

    private S3EndpointArgs(S3EndpointArgs $) {
        this.addColumnName = $.addColumnName;
        this.addTrailingPaddingCharacter = $.addTrailingPaddingCharacter;
        this.bucketFolder = $.bucketFolder;
        this.bucketName = $.bucketName;
        this.cannedAclForObjects = $.cannedAclForObjects;
        this.cdcInsertsAndUpdates = $.cdcInsertsAndUpdates;
        this.cdcInsertsOnly = $.cdcInsertsOnly;
        this.cdcMaxBatchInterval = $.cdcMaxBatchInterval;
        this.cdcMinFileSize = $.cdcMinFileSize;
        this.cdcPath = $.cdcPath;
        this.certificateArn = $.certificateArn;
        this.compressionType = $.compressionType;
        this.csvDelimiter = $.csvDelimiter;
        this.csvNoSupValue = $.csvNoSupValue;
        this.csvNullValue = $.csvNullValue;
        this.csvRowDelimiter = $.csvRowDelimiter;
        this.dataFormat = $.dataFormat;
        this.dataPageSize = $.dataPageSize;
        this.datePartitionDelimiter = $.datePartitionDelimiter;
        this.datePartitionEnabled = $.datePartitionEnabled;
        this.datePartitionSequence = $.datePartitionSequence;
        this.datePartitionTimezone = $.datePartitionTimezone;
        this.dictPageSizeLimit = $.dictPageSizeLimit;
        this.enableStatistics = $.enableStatistics;
        this.encodingType = $.encodingType;
        this.encryptionMode = $.encryptionMode;
        this.endpointId = $.endpointId;
        this.endpointType = $.endpointType;
        this.expectedBucketOwner = $.expectedBucketOwner;
        this.externalTableDefinition = $.externalTableDefinition;
        this.ignoreHeaderRows = $.ignoreHeaderRows;
        this.includeOpForFullLoad = $.includeOpForFullLoad;
        this.kmsKeyArn = $.kmsKeyArn;
        this.maxFileSize = $.maxFileSize;
        this.parquetTimestampInMillisecond = $.parquetTimestampInMillisecond;
        this.parquetVersion = $.parquetVersion;
        this.preserveTransactions = $.preserveTransactions;
        this.rfc4180 = $.rfc4180;
        this.rowGroupLength = $.rowGroupLength;
        this.serverSideEncryptionKmsKeyId = $.serverSideEncryptionKmsKeyId;
        this.serviceAccessRoleArn = $.serviceAccessRoleArn;
        this.sslMode = $.sslMode;
        this.tags = $.tags;
        this.timestampColumnName = $.timestampColumnName;
        this.useCsvNoSupValue = $.useCsvNoSupValue;
        this.useTaskStartTimeForFullLoadTimestamp = $.useTaskStartTimeForFullLoadTimestamp;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(S3EndpointArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private S3EndpointArgs $;

        public Builder() {
            $ = new S3EndpointArgs();
        }

        public Builder(S3EndpointArgs defaults) {
            $ = new S3EndpointArgs(Objects.requireNonNull(defaults));
        }

        public Builder addColumnName(@Nullable Output<Boolean> addColumnName) {
            $.addColumnName = addColumnName;
            return this;
        }

        public Builder addColumnName(Boolean addColumnName) {
            return addColumnName(Output.of(addColumnName));
        }

        public Builder addTrailingPaddingCharacter(@Nullable Output<Boolean> addTrailingPaddingCharacter) {
            $.addTrailingPaddingCharacter = addTrailingPaddingCharacter;
            return this;
        }

        public Builder addTrailingPaddingCharacter(Boolean addTrailingPaddingCharacter) {
            return addTrailingPaddingCharacter(Output.of(addTrailingPaddingCharacter));
        }

        public Builder bucketFolder(@Nullable Output<String> bucketFolder) {
            $.bucketFolder = bucketFolder;
            return this;
        }

        public Builder bucketFolder(String bucketFolder) {
            return bucketFolder(Output.of(bucketFolder));
        }

        public Builder bucketName(Output<String> bucketName) {
            $.bucketName = bucketName;
            return this;
        }

        public Builder bucketName(String bucketName) {
            return bucketName(Output.of(bucketName));
        }

        public Builder cannedAclForObjects(@Nullable Output<String> cannedAclForObjects) {
            $.cannedAclForObjects = cannedAclForObjects;
            return this;
        }

        public Builder cannedAclForObjects(String cannedAclForObjects) {
            return cannedAclForObjects(Output.of(cannedAclForObjects));
        }

        public Builder cdcInsertsAndUpdates(@Nullable Output<Boolean> cdcInsertsAndUpdates) {
            $.cdcInsertsAndUpdates = cdcInsertsAndUpdates;
            return this;
        }

        public Builder cdcInsertsAndUpdates(Boolean cdcInsertsAndUpdates) {
            return cdcInsertsAndUpdates(Output.of(cdcInsertsAndUpdates));
        }

        public Builder cdcInsertsOnly(@Nullable Output<Boolean> cdcInsertsOnly) {
            $.cdcInsertsOnly = cdcInsertsOnly;
            return this;
        }

        public Builder cdcInsertsOnly(Boolean cdcInsertsOnly) {
            return cdcInsertsOnly(Output.of(cdcInsertsOnly));
        }

        public Builder cdcMaxBatchInterval(@Nullable Output<Integer> cdcMaxBatchInterval) {
            $.cdcMaxBatchInterval = cdcMaxBatchInterval;
            return this;
        }

        public Builder cdcMaxBatchInterval(Integer cdcMaxBatchInterval) {
            return cdcMaxBatchInterval(Output.of(cdcMaxBatchInterval));
        }

        public Builder cdcMinFileSize(@Nullable Output<Integer> cdcMinFileSize) {
            $.cdcMinFileSize = cdcMinFileSize;
            return this;
        }

        public Builder cdcMinFileSize(Integer cdcMinFileSize) {
            return cdcMinFileSize(Output.of(cdcMinFileSize));
        }

        public Builder cdcPath(@Nullable Output<String> cdcPath) {
            $.cdcPath = cdcPath;
            return this;
        }

        public Builder cdcPath(String cdcPath) {
            return cdcPath(Output.of(cdcPath));
        }

        public Builder certificateArn(@Nullable Output<String> certificateArn) {
            $.certificateArn = certificateArn;
            return this;
        }

        public Builder certificateArn(String certificateArn) {
            return certificateArn(Output.of(certificateArn));
        }

        public Builder compressionType(@Nullable Output<String> compressionType) {
            $.compressionType = compressionType;
            return this;
        }

        public Builder compressionType(String compressionType) {
            return compressionType(Output.of(compressionType));
        }

        public Builder csvDelimiter(@Nullable Output<String> csvDelimiter) {
            $.csvDelimiter = csvDelimiter;
            return this;
        }

        public Builder csvDelimiter(String csvDelimiter) {
            return csvDelimiter(Output.of(csvDelimiter));
        }

        public Builder csvNoSupValue(@Nullable Output<String> csvNoSupValue) {
            $.csvNoSupValue = csvNoSupValue;
            return this;
        }

        public Builder csvNoSupValue(String csvNoSupValue) {
            return csvNoSupValue(Output.of(csvNoSupValue));
        }

        public Builder csvNullValue(@Nullable Output<String> csvNullValue) {
            $.csvNullValue = csvNullValue;
            return this;
        }

        public Builder csvNullValue(String csvNullValue) {
            return csvNullValue(Output.of(csvNullValue));
        }

        public Builder csvRowDelimiter(@Nullable Output<String> csvRowDelimiter) {
            $.csvRowDelimiter = csvRowDelimiter;
            return this;
        }

        public Builder csvRowDelimiter(String csvRowDelimiter) {
            return csvRowDelimiter(Output.of(csvRowDelimiter));
        }

        public Builder dataFormat(@Nullable Output<String> dataFormat) {
            $.dataFormat = dataFormat;
            return this;
        }

        public Builder dataFormat(String dataFormat) {
            return dataFormat(Output.of(dataFormat));
        }

        public Builder dataPageSize(@Nullable Output<Integer> dataPageSize) {
            $.dataPageSize = dataPageSize;
            return this;
        }

        public Builder dataPageSize(Integer dataPageSize) {
            return dataPageSize(Output.of(dataPageSize));
        }

        public Builder datePartitionDelimiter(@Nullable Output<String> datePartitionDelimiter) {
            $.datePartitionDelimiter = datePartitionDelimiter;
            return this;
        }

        public Builder datePartitionDelimiter(String datePartitionDelimiter) {
            return datePartitionDelimiter(Output.of(datePartitionDelimiter));
        }

        public Builder datePartitionEnabled(@Nullable Output<Boolean> datePartitionEnabled) {
            $.datePartitionEnabled = datePartitionEnabled;
            return this;
        }

        public Builder datePartitionEnabled(Boolean datePartitionEnabled) {
            return datePartitionEnabled(Output.of(datePartitionEnabled));
        }

        public Builder datePartitionSequence(@Nullable Output<String> datePartitionSequence) {
            $.datePartitionSequence = datePartitionSequence;
            return this;
        }

        public Builder datePartitionSequence(String datePartitionSequence) {
            return datePartitionSequence(Output.of(datePartitionSequence));
        }

        public Builder datePartitionTimezone(@Nullable Output<String> datePartitionTimezone) {
            $.datePartitionTimezone = datePartitionTimezone;
            return this;
        }

        public Builder datePartitionTimezone(String datePartitionTimezone) {
            return datePartitionTimezone(Output.of(datePartitionTimezone));
        }

        public Builder dictPageSizeLimit(@Nullable Output<Integer> dictPageSizeLimit) {
            $.dictPageSizeLimit = dictPageSizeLimit;
            return this;
        }

        public Builder dictPageSizeLimit(Integer dictPageSizeLimit) {
            return dictPageSizeLimit(Output.of(dictPageSizeLimit));
        }

        public Builder enableStatistics(@Nullable Output<Boolean> enableStatistics) {
            $.enableStatistics = enableStatistics;
            return this;
        }

        public Builder enableStatistics(Boolean enableStatistics) {
            return enableStatistics(Output.of(enableStatistics));
        }

        public Builder encodingType(@Nullable Output<String> encodingType) {
            $.encodingType = encodingType;
            return this;
        }

        public Builder encodingType(String encodingType) {
            return encodingType(Output.of(encodingType));
        }

        public Builder encryptionMode(@Nullable Output<String> encryptionMode) {
            $.encryptionMode = encryptionMode;
            return this;
        }

        public Builder encryptionMode(String encryptionMode) {
            return encryptionMode(Output.of(encryptionMode));
        }

        public Builder endpointId(Output<String> endpointId) {
            $.endpointId = endpointId;
            return this;
        }

        public Builder endpointId(String endpointId) {
            return endpointId(Output.of(endpointId));
        }

        public Builder endpointType(Output<String> endpointType) {
            $.endpointType = endpointType;
            return this;
        }

        public Builder endpointType(String endpointType) {
            return endpointType(Output.of(endpointType));
        }

        public Builder expectedBucketOwner(@Nullable Output<String> expectedBucketOwner) {
            $.expectedBucketOwner = expectedBucketOwner;
            return this;
        }

        public Builder expectedBucketOwner(String expectedBucketOwner) {
            return expectedBucketOwner(Output.of(expectedBucketOwner));
        }

        public Builder externalTableDefinition(@Nullable Output<String> externalTableDefinition) {
            $.externalTableDefinition = externalTableDefinition;
            return this;
        }

        public Builder externalTableDefinition(String externalTableDefinition) {
            return externalTableDefinition(Output.of(externalTableDefinition));
        }

        public Builder ignoreHeaderRows(@Nullable Output<Integer> ignoreHeaderRows) {
            $.ignoreHeaderRows = ignoreHeaderRows;
            return this;
        }

        public Builder ignoreHeaderRows(Integer ignoreHeaderRows) {
            return ignoreHeaderRows(Output.of(ignoreHeaderRows));
        }

        public Builder includeOpForFullLoad(@Nullable Output<Boolean> includeOpForFullLoad) {
            $.includeOpForFullLoad = includeOpForFullLoad;
            return this;
        }

        public Builder includeOpForFullLoad(Boolean includeOpForFullLoad) {
            return includeOpForFullLoad(Output.of(includeOpForFullLoad));
        }

        public Builder kmsKeyArn(@Nullable Output<String> kmsKeyArn) {
            $.kmsKeyArn = kmsKeyArn;
            return this;
        }

        public Builder kmsKeyArn(String kmsKeyArn) {
            return kmsKeyArn(Output.of(kmsKeyArn));
        }

        public Builder maxFileSize(@Nullable Output<Integer> maxFileSize) {
            $.maxFileSize = maxFileSize;
            return this;
        }

        public Builder maxFileSize(Integer maxFileSize) {
            return maxFileSize(Output.of(maxFileSize));
        }

        public Builder parquetTimestampInMillisecond(@Nullable Output<Boolean> parquetTimestampInMillisecond) {
            $.parquetTimestampInMillisecond = parquetTimestampInMillisecond;
            return this;
        }

        public Builder parquetTimestampInMillisecond(Boolean parquetTimestampInMillisecond) {
            return parquetTimestampInMillisecond(Output.of(parquetTimestampInMillisecond));
        }

        public Builder parquetVersion(@Nullable Output<String> parquetVersion) {
            $.parquetVersion = parquetVersion;
            return this;
        }

        public Builder parquetVersion(String parquetVersion) {
            return parquetVersion(Output.of(parquetVersion));
        }

        public Builder preserveTransactions(@Nullable Output<Boolean> preserveTransactions) {
            $.preserveTransactions = preserveTransactions;
            return this;
        }

        public Builder preserveTransactions(Boolean preserveTransactions) {
            return preserveTransactions(Output.of(preserveTransactions));
        }

        public Builder rfc4180(@Nullable Output<Boolean> rfc4180) {
            $.rfc4180 = rfc4180;
            return this;
        }

        public Builder rfc4180(Boolean rfc4180) {
            return rfc4180(Output.of(rfc4180));
        }

        public Builder rowGroupLength(@Nullable Output<Integer> rowGroupLength) {
            $.rowGroupLength = rowGroupLength;
            return this;
        }

        public Builder rowGroupLength(Integer rowGroupLength) {
            return rowGroupLength(Output.of(rowGroupLength));
        }

        public Builder serverSideEncryptionKmsKeyId(@Nullable Output<String> serverSideEncryptionKmsKeyId) {
            $.serverSideEncryptionKmsKeyId = serverSideEncryptionKmsKeyId;
            return this;
        }

        public Builder serverSideEncryptionKmsKeyId(String serverSideEncryptionKmsKeyId) {
            return serverSideEncryptionKmsKeyId(Output.of(serverSideEncryptionKmsKeyId));
        }

        public Builder serviceAccessRoleArn(Output<String> serviceAccessRoleArn) {
            $.serviceAccessRoleArn = serviceAccessRoleArn;
            return this;
        }

        public Builder serviceAccessRoleArn(String serviceAccessRoleArn) {
            return serviceAccessRoleArn(Output.of(serviceAccessRoleArn));
        }

        public Builder sslMode(@Nullable Output<String> sslMode) {
            $.sslMode = sslMode;
            return this;
        }

        public Builder sslMode(String sslMode) {
            return sslMode(Output.of(sslMode));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder timestampColumnName(@Nullable Output<String> timestampColumnName) {
            $.timestampColumnName = timestampColumnName;
            return this;
        }

        public Builder timestampColumnName(String timestampColumnName) {
            return timestampColumnName(Output.of(timestampColumnName));
        }

        public Builder useCsvNoSupValue(@Nullable Output<Boolean> useCsvNoSupValue) {
            $.useCsvNoSupValue = useCsvNoSupValue;
            return this;
        }

        public Builder useCsvNoSupValue(Boolean useCsvNoSupValue) {
            return useCsvNoSupValue(Output.of(useCsvNoSupValue));
        }

        public Builder useTaskStartTimeForFullLoadTimestamp(@Nullable Output<Boolean> useTaskStartTimeForFullLoadTimestamp) {
            $.useTaskStartTimeForFullLoadTimestamp = useTaskStartTimeForFullLoadTimestamp;
            return this;
        }

        public Builder useTaskStartTimeForFullLoadTimestamp(Boolean useTaskStartTimeForFullLoadTimestamp) {
            return useTaskStartTimeForFullLoadTimestamp(Output.of(useTaskStartTimeForFullLoadTimestamp));
        }

        public S3EndpointArgs build() {
            $.bucketName = Objects.requireNonNull($.bucketName, "expected parameter 'bucketName' to be non-null");
            $.endpointId = Objects.requireNonNull($.endpointId, "expected parameter 'endpointId' to be non-null");
            $.endpointType = Objects.requireNonNull($.endpointType, "expected parameter 'endpointType' to be non-null");
            $.serviceAccessRoleArn = Objects.requireNonNull($.serviceAccessRoleArn, "expected parameter 'serviceAccessRoleArn' to be non-null");
            return $;
        }
    }

}
