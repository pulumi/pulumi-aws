// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.inputs;

import com.pulumi.aws.quicksight.inputs.DataSetLogicalTableMapDataTransformTagColumnOperationTagArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class DataSetLogicalTableMapDataTransformTagColumnOperationArgs extends com.pulumi.resources.ResourceArgs {

    public static final DataSetLogicalTableMapDataTransformTagColumnOperationArgs Empty = new DataSetLogicalTableMapDataTransformTagColumnOperationArgs();

    /**
     * Column name.
     * 
     */
    @Import(name="columnName", required=true)
    private Output<String> columnName;

    /**
     * @return Column name.
     * 
     */
    public Output<String> columnName() {
        return this.columnName;
    }

    /**
     * The dataset column tag, currently only used for geospatial type tagging. See tags.
     * 
     */
    @Import(name="tags", required=true)
    private Output<List<DataSetLogicalTableMapDataTransformTagColumnOperationTagArgs>> tags;

    /**
     * @return The dataset column tag, currently only used for geospatial type tagging. See tags.
     * 
     */
    public Output<List<DataSetLogicalTableMapDataTransformTagColumnOperationTagArgs>> tags() {
        return this.tags;
    }

    private DataSetLogicalTableMapDataTransformTagColumnOperationArgs() {}

    private DataSetLogicalTableMapDataTransformTagColumnOperationArgs(DataSetLogicalTableMapDataTransformTagColumnOperationArgs $) {
        this.columnName = $.columnName;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DataSetLogicalTableMapDataTransformTagColumnOperationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DataSetLogicalTableMapDataTransformTagColumnOperationArgs $;

        public Builder() {
            $ = new DataSetLogicalTableMapDataTransformTagColumnOperationArgs();
        }

        public Builder(DataSetLogicalTableMapDataTransformTagColumnOperationArgs defaults) {
            $ = new DataSetLogicalTableMapDataTransformTagColumnOperationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param columnName Column name.
         * 
         * @return builder
         * 
         */
        public Builder columnName(Output<String> columnName) {
            $.columnName = columnName;
            return this;
        }

        /**
         * @param columnName Column name.
         * 
         * @return builder
         * 
         */
        public Builder columnName(String columnName) {
            return columnName(Output.of(columnName));
        }

        /**
         * @param tags The dataset column tag, currently only used for geospatial type tagging. See tags.
         * 
         * @return builder
         * 
         */
        public Builder tags(Output<List<DataSetLogicalTableMapDataTransformTagColumnOperationTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags The dataset column tag, currently only used for geospatial type tagging. See tags.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<DataSetLogicalTableMapDataTransformTagColumnOperationTagArgs> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags The dataset column tag, currently only used for geospatial type tagging. See tags.
         * 
         * @return builder
         * 
         */
        public Builder tags(DataSetLogicalTableMapDataTransformTagColumnOperationTagArgs... tags) {
            return tags(List.of(tags));
        }

        public DataSetLogicalTableMapDataTransformTagColumnOperationArgs build() {
            if ($.columnName == null) {
                throw new MissingRequiredPropertyException("DataSetLogicalTableMapDataTransformTagColumnOperationArgs", "columnName");
            }
            if ($.tags == null) {
                throw new MissingRequiredPropertyException("DataSetLogicalTableMapDataTransformTagColumnOperationArgs", "tags");
            }
            return $;
        }
    }

}
