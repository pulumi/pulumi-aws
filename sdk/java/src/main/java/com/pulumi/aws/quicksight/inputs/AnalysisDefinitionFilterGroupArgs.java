// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.inputs;

import com.pulumi.aws.quicksight.inputs.AnalysisDefinitionFilterGroupScopeConfigurationArgs;
import com.pulumi.aws.quicksight.inputs.FiltersArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AnalysisDefinitionFilterGroupArgs extends com.pulumi.resources.ResourceArgs {

    public static final AnalysisDefinitionFilterGroupArgs Empty = new AnalysisDefinitionFilterGroupArgs();

    @Import(name="crossDataset", required=true)
    private Output<String> crossDataset;

    public Output<String> crossDataset() {
        return this.crossDataset;
    }

    @Import(name="filterGroupId", required=true)
    private Output<String> filterGroupId;

    public Output<String> filterGroupId() {
        return this.filterGroupId;
    }

    @Import(name="filters", required=true)
    private Output<List<FiltersArgs>> filters;

    public Output<List<FiltersArgs>> filters() {
        return this.filters;
    }

    @Import(name="scopeConfiguration", required=true)
    private Output<AnalysisDefinitionFilterGroupScopeConfigurationArgs> scopeConfiguration;

    public Output<AnalysisDefinitionFilterGroupScopeConfigurationArgs> scopeConfiguration() {
        return this.scopeConfiguration;
    }

    /**
     * The analysis creation status.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The analysis creation status.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private AnalysisDefinitionFilterGroupArgs() {}

    private AnalysisDefinitionFilterGroupArgs(AnalysisDefinitionFilterGroupArgs $) {
        this.crossDataset = $.crossDataset;
        this.filterGroupId = $.filterGroupId;
        this.filters = $.filters;
        this.scopeConfiguration = $.scopeConfiguration;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AnalysisDefinitionFilterGroupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AnalysisDefinitionFilterGroupArgs $;

        public Builder() {
            $ = new AnalysisDefinitionFilterGroupArgs();
        }

        public Builder(AnalysisDefinitionFilterGroupArgs defaults) {
            $ = new AnalysisDefinitionFilterGroupArgs(Objects.requireNonNull(defaults));
        }

        public Builder crossDataset(Output<String> crossDataset) {
            $.crossDataset = crossDataset;
            return this;
        }

        public Builder crossDataset(String crossDataset) {
            return crossDataset(Output.of(crossDataset));
        }

        public Builder filterGroupId(Output<String> filterGroupId) {
            $.filterGroupId = filterGroupId;
            return this;
        }

        public Builder filterGroupId(String filterGroupId) {
            return filterGroupId(Output.of(filterGroupId));
        }

        public Builder filters(Output<List<FiltersArgs>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<FiltersArgs> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(FiltersArgs... filters) {
            return filters(List.of(filters));
        }

        public Builder scopeConfiguration(Output<AnalysisDefinitionFilterGroupScopeConfigurationArgs> scopeConfiguration) {
            $.scopeConfiguration = scopeConfiguration;
            return this;
        }

        public Builder scopeConfiguration(AnalysisDefinitionFilterGroupScopeConfigurationArgs scopeConfiguration) {
            return scopeConfiguration(Output.of(scopeConfiguration));
        }

        /**
         * @param status The analysis creation status.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The analysis creation status.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public AnalysisDefinitionFilterGroupArgs build() {
            if ($.crossDataset == null) {
                throw new MissingRequiredPropertyException("AnalysisDefinitionFilterGroupArgs", "crossDataset");
            }
            if ($.filterGroupId == null) {
                throw new MissingRequiredPropertyException("AnalysisDefinitionFilterGroupArgs", "filterGroupId");
            }
            if ($.filters == null) {
                throw new MissingRequiredPropertyException("AnalysisDefinitionFilterGroupArgs", "filters");
            }
            if ($.scopeConfiguration == null) {
                throw new MissingRequiredPropertyException("AnalysisDefinitionFilterGroupArgs", "scopeConfiguration");
            }
            return $;
        }
    }

}
