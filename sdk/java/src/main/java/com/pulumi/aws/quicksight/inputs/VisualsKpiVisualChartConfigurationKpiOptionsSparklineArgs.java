// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VisualsKpiVisualChartConfigurationKpiOptionsSparklineArgs extends com.pulumi.resources.ResourceArgs {

    public static final VisualsKpiVisualChartConfigurationKpiOptionsSparklineArgs Empty = new VisualsKpiVisualChartConfigurationKpiOptionsSparklineArgs();

    @Import(name="color")
    private @Nullable Output<String> color;

    public Optional<Output<String>> color() {
        return Optional.ofNullable(this.color);
    }

    @Import(name="tooltipVisibility")
    private @Nullable Output<String> tooltipVisibility;

    public Optional<Output<String>> tooltipVisibility() {
        return Optional.ofNullable(this.tooltipVisibility);
    }

    @Import(name="type", required=true)
    private Output<String> type;

    public Output<String> type() {
        return this.type;
    }

    @Import(name="visibility")
    private @Nullable Output<String> visibility;

    public Optional<Output<String>> visibility() {
        return Optional.ofNullable(this.visibility);
    }

    private VisualsKpiVisualChartConfigurationKpiOptionsSparklineArgs() {}

    private VisualsKpiVisualChartConfigurationKpiOptionsSparklineArgs(VisualsKpiVisualChartConfigurationKpiOptionsSparklineArgs $) {
        this.color = $.color;
        this.tooltipVisibility = $.tooltipVisibility;
        this.type = $.type;
        this.visibility = $.visibility;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VisualsKpiVisualChartConfigurationKpiOptionsSparklineArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VisualsKpiVisualChartConfigurationKpiOptionsSparklineArgs $;

        public Builder() {
            $ = new VisualsKpiVisualChartConfigurationKpiOptionsSparklineArgs();
        }

        public Builder(VisualsKpiVisualChartConfigurationKpiOptionsSparklineArgs defaults) {
            $ = new VisualsKpiVisualChartConfigurationKpiOptionsSparklineArgs(Objects.requireNonNull(defaults));
        }

        public Builder color(@Nullable Output<String> color) {
            $.color = color;
            return this;
        }

        public Builder color(String color) {
            return color(Output.of(color));
        }

        public Builder tooltipVisibility(@Nullable Output<String> tooltipVisibility) {
            $.tooltipVisibility = tooltipVisibility;
            return this;
        }

        public Builder tooltipVisibility(String tooltipVisibility) {
            return tooltipVisibility(Output.of(tooltipVisibility));
        }

        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        public Builder type(String type) {
            return type(Output.of(type));
        }

        public Builder visibility(@Nullable Output<String> visibility) {
            $.visibility = visibility;
            return this;
        }

        public Builder visibility(String visibility) {
            return visibility(Output.of(visibility));
        }

        public VisualsKpiVisualChartConfigurationKpiOptionsSparklineArgs build() {
            if ($.type == null) {
                throw new MissingRequiredPropertyException("VisualsKpiVisualChartConfigurationKpiOptionsSparklineArgs", "type");
            }
            return $;
        }
    }

}
