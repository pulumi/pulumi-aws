// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight;

import com.pulumi.aws.Utilities;
import com.pulumi.aws.quicksight.DataSourceArgs;
import com.pulumi.aws.quicksight.inputs.DataSourceState;
import com.pulumi.aws.quicksight.outputs.DataSourceCredentials;
import com.pulumi.aws.quicksight.outputs.DataSourceParameters;
import com.pulumi.aws.quicksight.outputs.DataSourcePermission;
import com.pulumi.aws.quicksight.outputs.DataSourceSslProperties;
import com.pulumi.aws.quicksight.outputs.DataSourceVpcConnectionProperties;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Resource for managing QuickSight Data Source
 * 
 * ## Example Usage
 * 
 * ### S3 Data Source
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.aws.quicksight.DataSource;
 * import com.pulumi.aws.quicksight.DataSourceArgs;
 * import com.pulumi.aws.quicksight.inputs.DataSourceParametersArgs;
 * import com.pulumi.aws.quicksight.inputs.DataSourceParametersS3Args;
 * import com.pulumi.aws.quicksight.inputs.DataSourceParametersS3ManifestFileLocationArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var default_ = new DataSource("default", DataSourceArgs.builder()
 *             .dataSourceId("example-id")
 *             .name("My Cool Data in S3")
 *             .parameters(DataSourceParametersArgs.builder()
 *                 .s3(DataSourceParametersS3Args.builder()
 *                     .manifestFileLocation(DataSourceParametersS3ManifestFileLocationArgs.builder()
 *                         .bucket("my-bucket")
 *                         .key("path/to/manifest.json")
 *                         .build())
 *                     .build())
 *                 .build())
 *             .type("S3")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ### S3 Data Source with IAM Role ARN
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.aws.AwsFunctions;
 * import com.pulumi.aws.inputs.GetCallerIdentityArgs;
 * import com.pulumi.aws.inputs.GetPartitionArgs;
 * import com.pulumi.aws.inputs.GetRegionArgs;
 * import com.pulumi.aws.s3.BucketV2;
 * import com.pulumi.aws.s3.BucketObjectv2;
 * import com.pulumi.aws.s3.BucketObjectv2Args;
 * import com.pulumi.aws.iam.Role;
 * import com.pulumi.aws.iam.RoleArgs;
 * import com.pulumi.aws.iam.Policy;
 * import com.pulumi.aws.iam.PolicyArgs;
 * import com.pulumi.aws.iam.RolePolicyAttachment;
 * import com.pulumi.aws.iam.RolePolicyAttachmentArgs;
 * import com.pulumi.aws.quicksight.DataSource;
 * import com.pulumi.aws.quicksight.DataSourceArgs;
 * import com.pulumi.aws.quicksight.inputs.DataSourceParametersArgs;
 * import com.pulumi.aws.quicksight.inputs.DataSourceParametersS3Args;
 * import com.pulumi.aws.quicksight.inputs.DataSourceParametersS3ManifestFileLocationArgs;
 * import static com.pulumi.codegen.internal.Serialization.*;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var current = AwsFunctions.getCallerIdentity();
 * 
 *         final var currentGetPartition = AwsFunctions.getPartition();
 * 
 *         final var currentGetRegion = AwsFunctions.getRegion();
 * 
 *         var example = new BucketV2("example");
 * 
 *         var exampleBucketObjectv2 = new BucketObjectv2("exampleBucketObjectv2", BucketObjectv2Args.builder()
 *             .bucket(example.bucket())
 *             .key("manifest.json")
 *             .content(example.id().applyValue(id -> serializeJson(
 *                 jsonObject(
 *                     jsonProperty("fileLocations", jsonArray(jsonObject(
 *                         jsonProperty("URIPrefixes", jsonArray(String.format("https://%s.s3-%s.%s", id,currentGetRegion.applyValue(getRegionResult -> getRegionResult.name()),currentGetPartition.applyValue(getPartitionResult -> getPartitionResult.dnsSuffix()))))
 *                     ))),
 *                     jsonProperty("globalUploadSettings", jsonObject(
 *                         jsonProperty("format", "CSV"),
 *                         jsonProperty("delimiter", ","),
 *                         jsonProperty("textqualifier", "\""),
 *                         jsonProperty("containsHeader", true)
 *                     ))
 *                 ))))
 *             .build());
 * 
 *         var exampleRole = new Role("exampleRole", RoleArgs.builder()
 *             .name("example")
 *             .assumeRolePolicy(serializeJson(
 *                 jsonObject(
 *                     jsonProperty("Version", "2012-10-17"),
 *                     jsonProperty("Statement", jsonArray(jsonObject(
 *                         jsonProperty("Action", "sts:AssumeRole"),
 *                         jsonProperty("Effect", "Allow"),
 *                         jsonProperty("Principal", jsonObject(
 *                             jsonProperty("Service", "quicksight.amazonaws.com")
 *                         )),
 *                         jsonProperty("Condition", jsonObject(
 *                             jsonProperty("StringEquals", jsonObject(
 *                                 jsonProperty("aws:SourceAccount", current.applyValue(getCallerIdentityResult -> getCallerIdentityResult.accountId()))
 *                             ))
 *                         ))
 *                     )))
 *                 )))
 *             .build());
 * 
 *         var examplePolicy = new Policy("examplePolicy", PolicyArgs.builder()
 *             .name("example")
 *             .description("Policy to allow QuickSight access to S3 bucket")
 *             .policy(Output.tuple(example.arn(), exampleBucketObjectv2.key(), example.arn()).applyValue(values -> {
 *                 var exampleArn = values.t1;
 *                 var key = values.t2;
 *                 var exampleArn1 = values.t3;
 *                 return serializeJson(
 *                     jsonObject(
 *                         jsonProperty("Version", "2012-10-17"),
 *                         jsonProperty("Statement", jsonArray(
 *                             jsonObject(
 *                                 jsonProperty("Action", jsonArray("s3:GetObject")),
 *                                 jsonProperty("Effect", "Allow"),
 *                                 jsonProperty("Resource", String.format("%s/%s", exampleArn,key))
 *                             ), 
 *                             jsonObject(
 *                                 jsonProperty("Action", jsonArray("s3:ListBucket")),
 *                                 jsonProperty("Effect", "Allow"),
 *                                 jsonProperty("Resource", exampleArn1)
 *                             )
 *                         ))
 *                     ));
 *             }))
 *             .build());
 * 
 *         var exampleRolePolicyAttachment = new RolePolicyAttachment("exampleRolePolicyAttachment", RolePolicyAttachmentArgs.builder()
 *             .policyArn(examplePolicy.arn())
 *             .role(exampleRole.name())
 *             .build());
 * 
 *         var exampleDataSource = new DataSource("exampleDataSource", DataSourceArgs.builder()
 *             .dataSourceId("example-id")
 *             .name("manifest in S3")
 *             .parameters(DataSourceParametersArgs.builder()
 *                 .s3(DataSourceParametersS3Args.builder()
 *                     .manifestFileLocation(DataSourceParametersS3ManifestFileLocationArgs.builder()
 *                         .bucket(example.arn())
 *                         .key(exampleBucketObjectv2.key())
 *                         .build())
 *                     .roleArn(exampleRole.arn())
 *                     .build())
 *                 .build())
 *             .type("S3")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Using `pulumi import`, import a QuickSight data source using the AWS account ID, and data source ID separated by a slash (`/`). For example:
 * 
 * ```sh
 * $ pulumi import aws:quicksight/dataSource:DataSource example 123456789123/my-data-source-id
 * ```
 * 
 */
@ResourceType(type="aws:quicksight/dataSource:DataSource")
public class DataSource extends com.pulumi.resources.CustomResource {
    /**
     * Amazon Resource Name (ARN) of the data source
     * 
     */
    @Export(name="arn", refs={String.class}, tree="[0]")
    private Output<String> arn;

    /**
     * @return Amazon Resource Name (ARN) of the data source
     * 
     */
    public Output<String> arn() {
        return this.arn;
    }
    /**
     * The ID for the AWS account that the data source is in. Currently, you use the ID for the AWS account that contains your Amazon QuickSight account.
     * 
     */
    @Export(name="awsAccountId", refs={String.class}, tree="[0]")
    private Output<String> awsAccountId;

    /**
     * @return The ID for the AWS account that the data source is in. Currently, you use the ID for the AWS account that contains your Amazon QuickSight account.
     * 
     */
    public Output<String> awsAccountId() {
        return this.awsAccountId;
    }
    /**
     * The credentials Amazon QuickSight uses to connect to your underlying source. See Credentials below for more details.
     * 
     */
    @Export(name="credentials", refs={DataSourceCredentials.class}, tree="[0]")
    private Output</* @Nullable */ DataSourceCredentials> credentials;

    /**
     * @return The credentials Amazon QuickSight uses to connect to your underlying source. See Credentials below for more details.
     * 
     */
    public Output<Optional<DataSourceCredentials>> credentials() {
        return Codegen.optional(this.credentials);
    }
    /**
     * An identifier for the data source.
     * 
     */
    @Export(name="dataSourceId", refs={String.class}, tree="[0]")
    private Output<String> dataSourceId;

    /**
     * @return An identifier for the data source.
     * 
     */
    public Output<String> dataSourceId() {
        return this.dataSourceId;
    }
    /**
     * A name for the data source, maximum of 128 characters.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return A name for the data source, maximum of 128 characters.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The parameters used to connect to this data source (exactly one).
     * 
     */
    @Export(name="parameters", refs={DataSourceParameters.class}, tree="[0]")
    private Output<DataSourceParameters> parameters;

    /**
     * @return The parameters used to connect to this data source (exactly one).
     * 
     */
    public Output<DataSourceParameters> parameters() {
        return this.parameters;
    }
    /**
     * A set of resource permissions on the data source. Maximum of 64 items. See Permission below for more details.
     * 
     */
    @Export(name="permissions", refs={List.class,DataSourcePermission.class}, tree="[0,1]")
    private Output</* @Nullable */ List<DataSourcePermission>> permissions;

    /**
     * @return A set of resource permissions on the data source. Maximum of 64 items. See Permission below for more details.
     * 
     */
    public Output<Optional<List<DataSourcePermission>>> permissions() {
        return Codegen.optional(this.permissions);
    }
    /**
     * Secure Socket Layer (SSL) properties that apply when Amazon QuickSight connects to your underlying source. See SSL Properties below for more details.
     * 
     */
    @Export(name="sslProperties", refs={DataSourceSslProperties.class}, tree="[0]")
    private Output<DataSourceSslProperties> sslProperties;

    /**
     * @return Secure Socket Layer (SSL) properties that apply when Amazon QuickSight connects to your underlying source. See SSL Properties below for more details.
     * 
     */
    public Output<DataSourceSslProperties> sslProperties() {
        return this.sslProperties;
    }
    /**
     * Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Export(name="tags", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Output<Optional<Map<String,String>>> tags() {
        return Codegen.optional(this.tags);
    }
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @Export(name="tagsAll", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> tagsAll;

    /**
     * @return A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     */
    public Output<Map<String,String>> tagsAll() {
        return this.tagsAll;
    }
    /**
     * The type of the data source. See the [AWS Documentation](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_CreateDataSource.html#QS-CreateDataSource-request-Type) for the complete list of valid values.
     * 
     * The following arguments are optional:
     * 
     */
    @Export(name="type", refs={String.class}, tree="[0]")
    private Output<String> type;

    /**
     * @return The type of the data source. See the [AWS Documentation](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_CreateDataSource.html#QS-CreateDataSource-request-Type) for the complete list of valid values.
     * 
     * The following arguments are optional:
     * 
     */
    public Output<String> type() {
        return this.type;
    }
    /**
     * Use this parameter only when you want Amazon QuickSight to use a VPC connection when connecting to your underlying source. See VPC Connection Properties below for more details.
     * 
     */
    @Export(name="vpcConnectionProperties", refs={DataSourceVpcConnectionProperties.class}, tree="[0]")
    private Output</* @Nullable */ DataSourceVpcConnectionProperties> vpcConnectionProperties;

    /**
     * @return Use this parameter only when you want Amazon QuickSight to use a VPC connection when connecting to your underlying source. See VPC Connection Properties below for more details.
     * 
     */
    public Output<Optional<DataSourceVpcConnectionProperties>> vpcConnectionProperties() {
        return Codegen.optional(this.vpcConnectionProperties);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public DataSource(java.lang.String name) {
        this(name, DataSourceArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public DataSource(java.lang.String name, DataSourceArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public DataSource(java.lang.String name, DataSourceArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("aws:quicksight/dataSource:DataSource", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private DataSource(java.lang.String name, Output<java.lang.String> id, @Nullable DataSourceState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("aws:quicksight/dataSource:DataSource", name, state, makeResourceOptions(options, id), false);
    }

    private static DataSourceArgs makeArgs(DataSourceArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? DataSourceArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static DataSource get(java.lang.String name, Output<java.lang.String> id, @Nullable DataSourceState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new DataSource(name, id, state, options);
    }
}
