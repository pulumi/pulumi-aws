// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.lightsail;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LbCertificateArgs extends com.pulumi.resources.ResourceArgs {

    public static final LbCertificateArgs Empty = new LbCertificateArgs();

    @Import(name="domainName")
    private @Nullable Output<String> domainName;

    public Optional<Output<String>> domainName() {
        return Optional.ofNullable(this.domainName);
    }

    @Import(name="lbName", required=true)
    private Output<String> lbName;

    public Output<String> lbName() {
        return this.lbName;
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="subjectAlternativeNames")
    private @Nullable Output<List<String>> subjectAlternativeNames;

    public Optional<Output<List<String>>> subjectAlternativeNames() {
        return Optional.ofNullable(this.subjectAlternativeNames);
    }

    private LbCertificateArgs() {}

    private LbCertificateArgs(LbCertificateArgs $) {
        this.domainName = $.domainName;
        this.lbName = $.lbName;
        this.name = $.name;
        this.subjectAlternativeNames = $.subjectAlternativeNames;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LbCertificateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LbCertificateArgs $;

        public Builder() {
            $ = new LbCertificateArgs();
        }

        public Builder(LbCertificateArgs defaults) {
            $ = new LbCertificateArgs(Objects.requireNonNull(defaults));
        }

        public Builder domainName(@Nullable Output<String> domainName) {
            $.domainName = domainName;
            return this;
        }

        public Builder domainName(String domainName) {
            return domainName(Output.of(domainName));
        }

        public Builder lbName(Output<String> lbName) {
            $.lbName = lbName;
            return this;
        }

        public Builder lbName(String lbName) {
            return lbName(Output.of(lbName));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder subjectAlternativeNames(@Nullable Output<List<String>> subjectAlternativeNames) {
            $.subjectAlternativeNames = subjectAlternativeNames;
            return this;
        }

        public Builder subjectAlternativeNames(List<String> subjectAlternativeNames) {
            return subjectAlternativeNames(Output.of(subjectAlternativeNames));
        }

        public Builder subjectAlternativeNames(String... subjectAlternativeNames) {
            return subjectAlternativeNames(List.of(subjectAlternativeNames));
        }

        public LbCertificateArgs build() {
            $.lbName = Objects.requireNonNull($.lbName, "expected parameter 'lbName' to be non-null");
            return $;
        }
    }

}
