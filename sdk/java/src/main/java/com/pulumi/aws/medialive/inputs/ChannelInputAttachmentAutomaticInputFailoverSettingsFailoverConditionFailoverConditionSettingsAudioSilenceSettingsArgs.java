// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.medialive.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettingsArgs Empty = new ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettingsArgs();

    @Import(name="audioSelectorName", required=true)
    private Output<String> audioSelectorName;

    public Output<String> audioSelectorName() {
        return this.audioSelectorName;
    }

    @Import(name="audioSilenceThresholdMsec")
    private @Nullable Output<Integer> audioSilenceThresholdMsec;

    public Optional<Output<Integer>> audioSilenceThresholdMsec() {
        return Optional.ofNullable(this.audioSilenceThresholdMsec);
    }

    private ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettingsArgs() {}

    private ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettingsArgs(ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettingsArgs $) {
        this.audioSelectorName = $.audioSelectorName;
        this.audioSilenceThresholdMsec = $.audioSilenceThresholdMsec;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettingsArgs $;

        public Builder() {
            $ = new ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettingsArgs();
        }

        public Builder(ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettingsArgs defaults) {
            $ = new ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettingsArgs(Objects.requireNonNull(defaults));
        }

        public Builder audioSelectorName(Output<String> audioSelectorName) {
            $.audioSelectorName = audioSelectorName;
            return this;
        }

        public Builder audioSelectorName(String audioSelectorName) {
            return audioSelectorName(Output.of(audioSelectorName));
        }

        public Builder audioSilenceThresholdMsec(@Nullable Output<Integer> audioSilenceThresholdMsec) {
            $.audioSilenceThresholdMsec = audioSilenceThresholdMsec;
            return this;
        }

        public Builder audioSilenceThresholdMsec(Integer audioSilenceThresholdMsec) {
            return audioSilenceThresholdMsec(Output.of(audioSilenceThresholdMsec));
        }

        public ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettingsArgs build() {
            if ($.audioSelectorName == null) {
                throw new MissingRequiredPropertyException("ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettingsArgs", "audioSelectorName");
            }
            return $;
        }
    }

}
