// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArgs extends com.pulumi.resources.ResourceArgs {

    public static final DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArgs Empty = new DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArgs();

    /**
     * A unique ID to identify a calculated column. During a dataset update, if the column ID of a calculated column matches that of an existing calculated column, Amazon QuickSight preserves the existing calculated column.
     * 
     */
    @Import(name="columnId", required=true)
    private Output<String> columnId;

    /**
     * @return A unique ID to identify a calculated column. During a dataset update, if the column ID of a calculated column matches that of an existing calculated column, Amazon QuickSight preserves the existing calculated column.
     * 
     */
    public Output<String> columnId() {
        return this.columnId;
    }

    /**
     * Column name.
     * 
     */
    @Import(name="columnName", required=true)
    private Output<String> columnName;

    /**
     * @return Column name.
     * 
     */
    public Output<String> columnName() {
        return this.columnName;
    }

    /**
     * An expression that defines the calculated column.
     * 
     */
    @Import(name="expression", required=true)
    private Output<String> expression;

    /**
     * @return An expression that defines the calculated column.
     * 
     */
    public Output<String> expression() {
        return this.expression;
    }

    private DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArgs() {}

    private DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArgs(DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArgs $) {
        this.columnId = $.columnId;
        this.columnName = $.columnName;
        this.expression = $.expression;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArgs $;

        public Builder() {
            $ = new DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArgs();
        }

        public Builder(DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArgs defaults) {
            $ = new DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param columnId A unique ID to identify a calculated column. During a dataset update, if the column ID of a calculated column matches that of an existing calculated column, Amazon QuickSight preserves the existing calculated column.
         * 
         * @return builder
         * 
         */
        public Builder columnId(Output<String> columnId) {
            $.columnId = columnId;
            return this;
        }

        /**
         * @param columnId A unique ID to identify a calculated column. During a dataset update, if the column ID of a calculated column matches that of an existing calculated column, Amazon QuickSight preserves the existing calculated column.
         * 
         * @return builder
         * 
         */
        public Builder columnId(String columnId) {
            return columnId(Output.of(columnId));
        }

        /**
         * @param columnName Column name.
         * 
         * @return builder
         * 
         */
        public Builder columnName(Output<String> columnName) {
            $.columnName = columnName;
            return this;
        }

        /**
         * @param columnName Column name.
         * 
         * @return builder
         * 
         */
        public Builder columnName(String columnName) {
            return columnName(Output.of(columnName));
        }

        /**
         * @param expression An expression that defines the calculated column.
         * 
         * @return builder
         * 
         */
        public Builder expression(Output<String> expression) {
            $.expression = expression;
            return this;
        }

        /**
         * @param expression An expression that defines the calculated column.
         * 
         * @return builder
         * 
         */
        public Builder expression(String expression) {
            return expression(Output.of(expression));
        }

        public DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArgs build() {
            $.columnId = Objects.requireNonNull($.columnId, "expected parameter 'columnId' to be non-null");
            $.columnName = Objects.requireNonNull($.columnName, "expected parameter 'columnName' to be non-null");
            $.expression = Objects.requireNonNull($.expression, "expected parameter 'expression' to be non-null");
            return $;
        }
    }

}
