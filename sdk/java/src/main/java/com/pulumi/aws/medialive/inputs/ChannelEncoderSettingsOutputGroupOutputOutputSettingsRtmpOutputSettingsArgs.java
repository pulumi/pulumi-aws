// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.medialive.inputs;

import com.pulumi.aws.medialive.inputs.ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettingsDestinationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettingsArgs Empty = new ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettingsArgs();

    @Import(name="certficateMode")
    private @Nullable Output<String> certficateMode;

    public Optional<Output<String>> certficateMode() {
        return Optional.ofNullable(this.certficateMode);
    }

    /**
     * Number of seconds to wait before retrying connection to the flash media server if the connection is lost.
     * 
     */
    @Import(name="connectionRetryInterval")
    private @Nullable Output<Integer> connectionRetryInterval;

    /**
     * @return Number of seconds to wait before retrying connection to the flash media server if the connection is lost.
     * 
     */
    public Optional<Output<Integer>> connectionRetryInterval() {
        return Optional.ofNullable(this.connectionRetryInterval);
    }

    /**
     * The RTMP endpoint excluding the stream name. See Destination for more details.
     * 
     */
    @Import(name="destination", required=true)
    private Output<ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettingsDestinationArgs> destination;

    /**
     * @return The RTMP endpoint excluding the stream name. See Destination for more details.
     * 
     */
    public Output<ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettingsDestinationArgs> destination() {
        return this.destination;
    }

    /**
     * Number of retry attempts.
     * 
     */
    @Import(name="numRetries")
    private @Nullable Output<Integer> numRetries;

    /**
     * @return Number of retry attempts.
     * 
     */
    public Optional<Output<Integer>> numRetries() {
        return Optional.ofNullable(this.numRetries);
    }

    private ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettingsArgs() {}

    private ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettingsArgs(ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettingsArgs $) {
        this.certficateMode = $.certficateMode;
        this.connectionRetryInterval = $.connectionRetryInterval;
        this.destination = $.destination;
        this.numRetries = $.numRetries;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettingsArgs $;

        public Builder() {
            $ = new ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettingsArgs();
        }

        public Builder(ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettingsArgs defaults) {
            $ = new ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettingsArgs(Objects.requireNonNull(defaults));
        }

        public Builder certficateMode(@Nullable Output<String> certficateMode) {
            $.certficateMode = certficateMode;
            return this;
        }

        public Builder certficateMode(String certficateMode) {
            return certficateMode(Output.of(certficateMode));
        }

        /**
         * @param connectionRetryInterval Number of seconds to wait before retrying connection to the flash media server if the connection is lost.
         * 
         * @return builder
         * 
         */
        public Builder connectionRetryInterval(@Nullable Output<Integer> connectionRetryInterval) {
            $.connectionRetryInterval = connectionRetryInterval;
            return this;
        }

        /**
         * @param connectionRetryInterval Number of seconds to wait before retrying connection to the flash media server if the connection is lost.
         * 
         * @return builder
         * 
         */
        public Builder connectionRetryInterval(Integer connectionRetryInterval) {
            return connectionRetryInterval(Output.of(connectionRetryInterval));
        }

        /**
         * @param destination The RTMP endpoint excluding the stream name. See Destination for more details.
         * 
         * @return builder
         * 
         */
        public Builder destination(Output<ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettingsDestinationArgs> destination) {
            $.destination = destination;
            return this;
        }

        /**
         * @param destination The RTMP endpoint excluding the stream name. See Destination for more details.
         * 
         * @return builder
         * 
         */
        public Builder destination(ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettingsDestinationArgs destination) {
            return destination(Output.of(destination));
        }

        /**
         * @param numRetries Number of retry attempts.
         * 
         * @return builder
         * 
         */
        public Builder numRetries(@Nullable Output<Integer> numRetries) {
            $.numRetries = numRetries;
            return this;
        }

        /**
         * @param numRetries Number of retry attempts.
         * 
         * @return builder
         * 
         */
        public Builder numRetries(Integer numRetries) {
            return numRetries(Output.of(numRetries));
        }

        public ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettingsArgs build() {
            $.destination = Objects.requireNonNull($.destination, "expected parameter 'destination' to be non-null");
            return $;
        }
    }

}
