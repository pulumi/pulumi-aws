// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ec2transitgateway.outputs;

import com.pulumi.aws.ec2transitgateway.outputs.GetTransitGatewayFilter;
import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetTransitGatewayResult {
    /**
     * @return Private Autonomous System Number (ASN) for the Amazon side of a BGP session
     * 
     */
    private @Nullable Integer amazonSideAsn;
    /**
     * @return EC2 Transit Gateway ARN
     * 
     */
    private @Nullable String arn;
    /**
     * @return Identifier of the default association route table
     * 
     */
    private @Nullable String associationDefaultRouteTableId;
    /**
     * @return Whether resource attachment requests are automatically accepted
     * 
     */
    private @Nullable String autoAcceptSharedAttachments;
    /**
     * @return Whether resource attachments are automatically associated with the default association route table
     * 
     */
    private @Nullable String defaultRouteTableAssociation;
    /**
     * @return Whether resource attachments automatically propagate routes to the default propagation route table
     * 
     */
    private @Nullable String defaultRouteTablePropagation;
    /**
     * @return Description of the EC2 Transit Gateway
     * 
     */
    private @Nullable String description;
    /**
     * @return Whether DNS support is enabled
     * 
     */
    private @Nullable String dnsSupport;
    private @Nullable List<GetTransitGatewayFilter> filters;
    /**
     * @return EC2 Transit Gateway identifier
     * 
     */
    private @Nullable String id;
    /**
     * @return Whether Multicast support is enabled
     * 
     */
    private @Nullable String multicastSupport;
    /**
     * @return Identifier of the AWS account that owns the EC2 Transit Gateway
     * 
     */
    private @Nullable String ownerId;
    /**
     * @return Identifier of the default propagation route table
     * 
     */
    private @Nullable String propagationDefaultRouteTableId;
    /**
     * @return Key-value tags for the EC2 Transit Gateway
     * 
     */
    private @Nullable Map<String,String> tags;
    /**
     * @return The list of associated CIDR blocks
     * 
     */
    private @Nullable List<String> transitGatewayCidrBlocks;
    /**
     * @return Whether VPN Equal Cost Multipath Protocol support is enabled
     * 
     */
    private @Nullable String vpnEcmpSupport;

    private GetTransitGatewayResult() {}
    /**
     * @return Private Autonomous System Number (ASN) for the Amazon side of a BGP session
     * 
     */
    public Optional<Integer> amazonSideAsn() {
        return Optional.ofNullable(this.amazonSideAsn);
    }
    /**
     * @return EC2 Transit Gateway ARN
     * 
     */
    public Optional<String> arn() {
        return Optional.ofNullable(this.arn);
    }
    /**
     * @return Identifier of the default association route table
     * 
     */
    public Optional<String> associationDefaultRouteTableId() {
        return Optional.ofNullable(this.associationDefaultRouteTableId);
    }
    /**
     * @return Whether resource attachment requests are automatically accepted
     * 
     */
    public Optional<String> autoAcceptSharedAttachments() {
        return Optional.ofNullable(this.autoAcceptSharedAttachments);
    }
    /**
     * @return Whether resource attachments are automatically associated with the default association route table
     * 
     */
    public Optional<String> defaultRouteTableAssociation() {
        return Optional.ofNullable(this.defaultRouteTableAssociation);
    }
    /**
     * @return Whether resource attachments automatically propagate routes to the default propagation route table
     * 
     */
    public Optional<String> defaultRouteTablePropagation() {
        return Optional.ofNullable(this.defaultRouteTablePropagation);
    }
    /**
     * @return Description of the EC2 Transit Gateway
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return Whether DNS support is enabled
     * 
     */
    public Optional<String> dnsSupport() {
        return Optional.ofNullable(this.dnsSupport);
    }
    public List<GetTransitGatewayFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return EC2 Transit Gateway identifier
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Whether Multicast support is enabled
     * 
     */
    public Optional<String> multicastSupport() {
        return Optional.ofNullable(this.multicastSupport);
    }
    /**
     * @return Identifier of the AWS account that owns the EC2 Transit Gateway
     * 
     */
    public Optional<String> ownerId() {
        return Optional.ofNullable(this.ownerId);
    }
    /**
     * @return Identifier of the default propagation route table
     * 
     */
    public Optional<String> propagationDefaultRouteTableId() {
        return Optional.ofNullable(this.propagationDefaultRouteTableId);
    }
    /**
     * @return Key-value tags for the EC2 Transit Gateway
     * 
     */
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * @return The list of associated CIDR blocks
     * 
     */
    public List<String> transitGatewayCidrBlocks() {
        return this.transitGatewayCidrBlocks == null ? List.of() : this.transitGatewayCidrBlocks;
    }
    /**
     * @return Whether VPN Equal Cost Multipath Protocol support is enabled
     * 
     */
    public Optional<String> vpnEcmpSupport() {
        return Optional.ofNullable(this.vpnEcmpSupport);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTransitGatewayResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer amazonSideAsn;
        private @Nullable String arn;
        private @Nullable String associationDefaultRouteTableId;
        private @Nullable String autoAcceptSharedAttachments;
        private @Nullable String defaultRouteTableAssociation;
        private @Nullable String defaultRouteTablePropagation;
        private @Nullable String description;
        private @Nullable String dnsSupport;
        private @Nullable List<GetTransitGatewayFilter> filters;
        private @Nullable String id;
        private @Nullable String multicastSupport;
        private @Nullable String ownerId;
        private @Nullable String propagationDefaultRouteTableId;
        private @Nullable Map<String,String> tags;
        private @Nullable List<String> transitGatewayCidrBlocks;
        private @Nullable String vpnEcmpSupport;
        public Builder() {}
        public Builder(GetTransitGatewayResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.amazonSideAsn = defaults.amazonSideAsn;
    	      this.arn = defaults.arn;
    	      this.associationDefaultRouteTableId = defaults.associationDefaultRouteTableId;
    	      this.autoAcceptSharedAttachments = defaults.autoAcceptSharedAttachments;
    	      this.defaultRouteTableAssociation = defaults.defaultRouteTableAssociation;
    	      this.defaultRouteTablePropagation = defaults.defaultRouteTablePropagation;
    	      this.description = defaults.description;
    	      this.dnsSupport = defaults.dnsSupport;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.multicastSupport = defaults.multicastSupport;
    	      this.ownerId = defaults.ownerId;
    	      this.propagationDefaultRouteTableId = defaults.propagationDefaultRouteTableId;
    	      this.tags = defaults.tags;
    	      this.transitGatewayCidrBlocks = defaults.transitGatewayCidrBlocks;
    	      this.vpnEcmpSupport = defaults.vpnEcmpSupport;
        }

        @CustomType.Setter
        public Builder amazonSideAsn(@Nullable Integer amazonSideAsn) {
            this.amazonSideAsn = amazonSideAsn;
            return this;
        }
        @CustomType.Setter
        public Builder arn(@Nullable String arn) {
            this.arn = arn;
            return this;
        }
        @CustomType.Setter
        public Builder associationDefaultRouteTableId(@Nullable String associationDefaultRouteTableId) {
            this.associationDefaultRouteTableId = associationDefaultRouteTableId;
            return this;
        }
        @CustomType.Setter
        public Builder autoAcceptSharedAttachments(@Nullable String autoAcceptSharedAttachments) {
            this.autoAcceptSharedAttachments = autoAcceptSharedAttachments;
            return this;
        }
        @CustomType.Setter
        public Builder defaultRouteTableAssociation(@Nullable String defaultRouteTableAssociation) {
            this.defaultRouteTableAssociation = defaultRouteTableAssociation;
            return this;
        }
        @CustomType.Setter
        public Builder defaultRouteTablePropagation(@Nullable String defaultRouteTablePropagation) {
            this.defaultRouteTablePropagation = defaultRouteTablePropagation;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder dnsSupport(@Nullable String dnsSupport) {
            this.dnsSupport = dnsSupport;
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetTransitGatewayFilter> filters) {
            this.filters = filters;
            return this;
        }
        public Builder filters(GetTransitGatewayFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder multicastSupport(@Nullable String multicastSupport) {
            this.multicastSupport = multicastSupport;
            return this;
        }
        @CustomType.Setter
        public Builder ownerId(@Nullable String ownerId) {
            this.ownerId = ownerId;
            return this;
        }
        @CustomType.Setter
        public Builder propagationDefaultRouteTableId(@Nullable String propagationDefaultRouteTableId) {
            this.propagationDefaultRouteTableId = propagationDefaultRouteTableId;
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder transitGatewayCidrBlocks(@Nullable List<String> transitGatewayCidrBlocks) {
            this.transitGatewayCidrBlocks = transitGatewayCidrBlocks;
            return this;
        }
        public Builder transitGatewayCidrBlocks(String... transitGatewayCidrBlocks) {
            return transitGatewayCidrBlocks(List.of(transitGatewayCidrBlocks));
        }
        @CustomType.Setter
        public Builder vpnEcmpSupport(@Nullable String vpnEcmpSupport) {
            this.vpnEcmpSupport = vpnEcmpSupport;
            return this;
        }
        public GetTransitGatewayResult build() {
            final var o = new GetTransitGatewayResult();
            o.amazonSideAsn = amazonSideAsn;
            o.arn = arn;
            o.associationDefaultRouteTableId = associationDefaultRouteTableId;
            o.autoAcceptSharedAttachments = autoAcceptSharedAttachments;
            o.defaultRouteTableAssociation = defaultRouteTableAssociation;
            o.defaultRouteTablePropagation = defaultRouteTablePropagation;
            o.description = description;
            o.dnsSupport = dnsSupport;
            o.filters = filters;
            o.id = id;
            o.multicastSupport = multicastSupport;
            o.ownerId = ownerId;
            o.propagationDefaultRouteTableId = propagationDefaultRouteTableId;
            o.tags = tags;
            o.transitGatewayCidrBlocks = transitGatewayCidrBlocks;
            o.vpnEcmpSupport = vpnEcmpSupport;
            return o;
        }
    }
}
