// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.s3.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Provides instructions for redirecting the request. You can redirect requests to another host or another page, or you can specify another protocol to use. At least one property must be set.
 * 
 */
public final class RedirectArgs extends com.pulumi.resources.ResourceArgs {

    public static final RedirectArgs Empty = new RedirectArgs();

    /**
     * The hostname to be used in the Location header that is returned in the response. If another property is set, `HostName` is not required.
     * 
     */
    @Import(name="HostName")
    private @Nullable Output<String> HostName;

    /**
     * @return The hostname to be used in the Location header that is returned in the response. If another property is set, `HostName` is not required.
     * 
     */
    public Optional<Output<String>> HostName() {
        return Optional.ofNullable(this.HostName);
    }

    /**
     * The HTTP redirect code to be used in the Location header that is returned in the response. If another property is set, `HttpRedirectCode` is not required.
     * 
     */
    @Import(name="HttpRedirectCode")
    private @Nullable Output<String> HttpRedirectCode;

    /**
     * @return The HTTP redirect code to be used in the Location header that is returned in the response. If another property is set, `HttpRedirectCode` is not required.
     * 
     */
    public Optional<Output<String>> HttpRedirectCode() {
        return Optional.ofNullable(this.HttpRedirectCode);
    }

    /**
     * The protocol, http or https, to be used in the Location header that is returned in the response. If another property is set, `Protocol` is not required.
     * 
     */
    @Import(name="Protocol")
    private @Nullable Output<String> Protocol;

    /**
     * @return The protocol, http or https, to be used in the Location header that is returned in the response. If another property is set, `Protocol` is not required.
     * 
     */
    public Optional<Output<String>> Protocol() {
        return Optional.ofNullable(this.Protocol);
    }

    /**
     * The prefix of the object key name that replaces the value of `KeyPrefixEquals` in the redirect request. If another property is set, `ReplaceKeyPrefixWith` is not required. It can be set only if `ReplaceKeyWith` is not set.
     * 
     */
    @Import(name="ReplaceKeyPrefixWith")
    private @Nullable Output<String> ReplaceKeyPrefixWith;

    /**
     * @return The prefix of the object key name that replaces the value of `KeyPrefixEquals` in the redirect request. If another property is set, `ReplaceKeyPrefixWith` is not required. It can be set only if `ReplaceKeyWith` is not set.
     * 
     */
    public Optional<Output<String>> ReplaceKeyPrefixWith() {
        return Optional.ofNullable(this.ReplaceKeyPrefixWith);
    }

    /**
     * The object key to be used in the Location header that is returned in the response. If another property is set, `ReplaceKeyWith` is not required. It can be set only if `ReplaceKeyPrefixWith` is not set.
     * 
     */
    @Import(name="ReplaceKeyWith")
    private @Nullable Output<String> ReplaceKeyWith;

    /**
     * @return The object key to be used in the Location header that is returned in the response. If another property is set, `ReplaceKeyWith` is not required. It can be set only if `ReplaceKeyPrefixWith` is not set.
     * 
     */
    public Optional<Output<String>> ReplaceKeyWith() {
        return Optional.ofNullable(this.ReplaceKeyWith);
    }

    private RedirectArgs() {}

    private RedirectArgs(RedirectArgs $) {
        this.HostName = $.HostName;
        this.HttpRedirectCode = $.HttpRedirectCode;
        this.Protocol = $.Protocol;
        this.ReplaceKeyPrefixWith = $.ReplaceKeyPrefixWith;
        this.ReplaceKeyWith = $.ReplaceKeyWith;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RedirectArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RedirectArgs $;

        public Builder() {
            $ = new RedirectArgs();
        }

        public Builder(RedirectArgs defaults) {
            $ = new RedirectArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param HostName The hostname to be used in the Location header that is returned in the response. If another property is set, `HostName` is not required.
         * 
         * @return builder
         * 
         */
        public Builder HostName(@Nullable Output<String> HostName) {
            $.HostName = HostName;
            return this;
        }

        /**
         * @param HostName The hostname to be used in the Location header that is returned in the response. If another property is set, `HostName` is not required.
         * 
         * @return builder
         * 
         */
        public Builder HostName(String HostName) {
            return HostName(Output.of(HostName));
        }

        /**
         * @param HttpRedirectCode The HTTP redirect code to be used in the Location header that is returned in the response. If another property is set, `HttpRedirectCode` is not required.
         * 
         * @return builder
         * 
         */
        public Builder HttpRedirectCode(@Nullable Output<String> HttpRedirectCode) {
            $.HttpRedirectCode = HttpRedirectCode;
            return this;
        }

        /**
         * @param HttpRedirectCode The HTTP redirect code to be used in the Location header that is returned in the response. If another property is set, `HttpRedirectCode` is not required.
         * 
         * @return builder
         * 
         */
        public Builder HttpRedirectCode(String HttpRedirectCode) {
            return HttpRedirectCode(Output.of(HttpRedirectCode));
        }

        /**
         * @param Protocol The protocol, http or https, to be used in the Location header that is returned in the response. If another property is set, `Protocol` is not required.
         * 
         * @return builder
         * 
         */
        public Builder Protocol(@Nullable Output<String> Protocol) {
            $.Protocol = Protocol;
            return this;
        }

        /**
         * @param Protocol The protocol, http or https, to be used in the Location header that is returned in the response. If another property is set, `Protocol` is not required.
         * 
         * @return builder
         * 
         */
        public Builder Protocol(String Protocol) {
            return Protocol(Output.of(Protocol));
        }

        /**
         * @param ReplaceKeyPrefixWith The prefix of the object key name that replaces the value of `KeyPrefixEquals` in the redirect request. If another property is set, `ReplaceKeyPrefixWith` is not required. It can be set only if `ReplaceKeyWith` is not set.
         * 
         * @return builder
         * 
         */
        public Builder ReplaceKeyPrefixWith(@Nullable Output<String> ReplaceKeyPrefixWith) {
            $.ReplaceKeyPrefixWith = ReplaceKeyPrefixWith;
            return this;
        }

        /**
         * @param ReplaceKeyPrefixWith The prefix of the object key name that replaces the value of `KeyPrefixEquals` in the redirect request. If another property is set, `ReplaceKeyPrefixWith` is not required. It can be set only if `ReplaceKeyWith` is not set.
         * 
         * @return builder
         * 
         */
        public Builder ReplaceKeyPrefixWith(String ReplaceKeyPrefixWith) {
            return ReplaceKeyPrefixWith(Output.of(ReplaceKeyPrefixWith));
        }

        /**
         * @param ReplaceKeyWith The object key to be used in the Location header that is returned in the response. If another property is set, `ReplaceKeyWith` is not required. It can be set only if `ReplaceKeyPrefixWith` is not set.
         * 
         * @return builder
         * 
         */
        public Builder ReplaceKeyWith(@Nullable Output<String> ReplaceKeyWith) {
            $.ReplaceKeyWith = ReplaceKeyWith;
            return this;
        }

        /**
         * @param ReplaceKeyWith The object key to be used in the Location header that is returned in the response. If another property is set, `ReplaceKeyWith` is not required. It can be set only if `ReplaceKeyPrefixWith` is not set.
         * 
         * @return builder
         * 
         */
        public Builder ReplaceKeyWith(String ReplaceKeyWith) {
            return ReplaceKeyWith(Output.of(ReplaceKeyWith));
        }

        public RedirectArgs build() {
            return $;
        }
    }

}
