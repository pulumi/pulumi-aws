// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.msk.outputs;

import com.pulumi.aws.msk.outputs.ReplicatorReplicationInfoListConsumerGroupReplication;
import com.pulumi.aws.msk.outputs.ReplicatorReplicationInfoListTopicReplication;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ReplicatorReplicationInfoList {
    /**
     * @return Confguration relating to consumer group replication.
     * 
     */
    private List<ReplicatorReplicationInfoListConsumerGroupReplication> consumerGroupReplications;
    private @Nullable String sourceKafkaClusterAlias;
    /**
     * @return The ARN of the source Kafka cluster.
     * 
     */
    private String sourceKafkaClusterArn;
    /**
     * @return The type of compression to use writing records to target Kafka cluster.
     * 
     */
    private String targetCompressionType;
    private @Nullable String targetKafkaClusterAlias;
    /**
     * @return The ARN of the target Kafka cluster.
     * 
     */
    private String targetKafkaClusterArn;
    /**
     * @return Configuration relating to topic replication.
     * 
     */
    private List<ReplicatorReplicationInfoListTopicReplication> topicReplications;

    private ReplicatorReplicationInfoList() {}
    /**
     * @return Confguration relating to consumer group replication.
     * 
     */
    public List<ReplicatorReplicationInfoListConsumerGroupReplication> consumerGroupReplications() {
        return this.consumerGroupReplications;
    }
    public Optional<String> sourceKafkaClusterAlias() {
        return Optional.ofNullable(this.sourceKafkaClusterAlias);
    }
    /**
     * @return The ARN of the source Kafka cluster.
     * 
     */
    public String sourceKafkaClusterArn() {
        return this.sourceKafkaClusterArn;
    }
    /**
     * @return The type of compression to use writing records to target Kafka cluster.
     * 
     */
    public String targetCompressionType() {
        return this.targetCompressionType;
    }
    public Optional<String> targetKafkaClusterAlias() {
        return Optional.ofNullable(this.targetKafkaClusterAlias);
    }
    /**
     * @return The ARN of the target Kafka cluster.
     * 
     */
    public String targetKafkaClusterArn() {
        return this.targetKafkaClusterArn;
    }
    /**
     * @return Configuration relating to topic replication.
     * 
     */
    public List<ReplicatorReplicationInfoListTopicReplication> topicReplications() {
        return this.topicReplications;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ReplicatorReplicationInfoList defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<ReplicatorReplicationInfoListConsumerGroupReplication> consumerGroupReplications;
        private @Nullable String sourceKafkaClusterAlias;
        private String sourceKafkaClusterArn;
        private String targetCompressionType;
        private @Nullable String targetKafkaClusterAlias;
        private String targetKafkaClusterArn;
        private List<ReplicatorReplicationInfoListTopicReplication> topicReplications;
        public Builder() {}
        public Builder(ReplicatorReplicationInfoList defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.consumerGroupReplications = defaults.consumerGroupReplications;
    	      this.sourceKafkaClusterAlias = defaults.sourceKafkaClusterAlias;
    	      this.sourceKafkaClusterArn = defaults.sourceKafkaClusterArn;
    	      this.targetCompressionType = defaults.targetCompressionType;
    	      this.targetKafkaClusterAlias = defaults.targetKafkaClusterAlias;
    	      this.targetKafkaClusterArn = defaults.targetKafkaClusterArn;
    	      this.topicReplications = defaults.topicReplications;
        }

        @CustomType.Setter
        public Builder consumerGroupReplications(List<ReplicatorReplicationInfoListConsumerGroupReplication> consumerGroupReplications) {
            if (consumerGroupReplications == null) {
              throw new MissingRequiredPropertyException("ReplicatorReplicationInfoList", "consumerGroupReplications");
            }
            this.consumerGroupReplications = consumerGroupReplications;
            return this;
        }
        public Builder consumerGroupReplications(ReplicatorReplicationInfoListConsumerGroupReplication... consumerGroupReplications) {
            return consumerGroupReplications(List.of(consumerGroupReplications));
        }
        @CustomType.Setter
        public Builder sourceKafkaClusterAlias(@Nullable String sourceKafkaClusterAlias) {

            this.sourceKafkaClusterAlias = sourceKafkaClusterAlias;
            return this;
        }
        @CustomType.Setter
        public Builder sourceKafkaClusterArn(String sourceKafkaClusterArn) {
            if (sourceKafkaClusterArn == null) {
              throw new MissingRequiredPropertyException("ReplicatorReplicationInfoList", "sourceKafkaClusterArn");
            }
            this.sourceKafkaClusterArn = sourceKafkaClusterArn;
            return this;
        }
        @CustomType.Setter
        public Builder targetCompressionType(String targetCompressionType) {
            if (targetCompressionType == null) {
              throw new MissingRequiredPropertyException("ReplicatorReplicationInfoList", "targetCompressionType");
            }
            this.targetCompressionType = targetCompressionType;
            return this;
        }
        @CustomType.Setter
        public Builder targetKafkaClusterAlias(@Nullable String targetKafkaClusterAlias) {

            this.targetKafkaClusterAlias = targetKafkaClusterAlias;
            return this;
        }
        @CustomType.Setter
        public Builder targetKafkaClusterArn(String targetKafkaClusterArn) {
            if (targetKafkaClusterArn == null) {
              throw new MissingRequiredPropertyException("ReplicatorReplicationInfoList", "targetKafkaClusterArn");
            }
            this.targetKafkaClusterArn = targetKafkaClusterArn;
            return this;
        }
        @CustomType.Setter
        public Builder topicReplications(List<ReplicatorReplicationInfoListTopicReplication> topicReplications) {
            if (topicReplications == null) {
              throw new MissingRequiredPropertyException("ReplicatorReplicationInfoList", "topicReplications");
            }
            this.topicReplications = topicReplications;
            return this;
        }
        public Builder topicReplications(ReplicatorReplicationInfoListTopicReplication... topicReplications) {
            return topicReplications(List.of(topicReplications));
        }
        public ReplicatorReplicationInfoList build() {
            final var _resultValue = new ReplicatorReplicationInfoList();
            _resultValue.consumerGroupReplications = consumerGroupReplications;
            _resultValue.sourceKafkaClusterAlias = sourceKafkaClusterAlias;
            _resultValue.sourceKafkaClusterArn = sourceKafkaClusterArn;
            _resultValue.targetCompressionType = targetCompressionType;
            _resultValue.targetKafkaClusterAlias = targetKafkaClusterAlias;
            _resultValue.targetKafkaClusterArn = targetKafkaClusterArn;
            _resultValue.topicReplications = topicReplications;
            return _resultValue;
        }
    }
}
