// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.licensemanager.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LicenseGrantAccepterState extends com.pulumi.resources.ResourceArgs {

    public static final LicenseGrantAccepterState Empty = new LicenseGrantAccepterState();

    /**
     * A list of the allowed operations for the grant.
     * 
     */
    @Import(name="allowedOperations")
    private @Nullable Output<List<String>> allowedOperations;

    /**
     * @return A list of the allowed operations for the grant.
     * 
     */
    public Optional<Output<List<String>>> allowedOperations() {
        return Optional.ofNullable(this.allowedOperations);
    }

    /**
     * The ARN of the grant to accept.
     * 
     */
    @Import(name="grantArn")
    private @Nullable Output<String> grantArn;

    /**
     * @return The ARN of the grant to accept.
     * 
     */
    public Optional<Output<String>> grantArn() {
        return Optional.ofNullable(this.grantArn);
    }

    /**
     * The home region for the license.
     * 
     */
    @Import(name="homeRegion")
    private @Nullable Output<String> homeRegion;

    /**
     * @return The home region for the license.
     * 
     */
    public Optional<Output<String>> homeRegion() {
        return Optional.ofNullable(this.homeRegion);
    }

    /**
     * The ARN of the license for the grant.
     * 
     */
    @Import(name="licenseArn")
    private @Nullable Output<String> licenseArn;

    /**
     * @return The ARN of the license for the grant.
     * 
     */
    public Optional<Output<String>> licenseArn() {
        return Optional.ofNullable(this.licenseArn);
    }

    /**
     * The Name of the grant.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The Name of the grant.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The parent ARN.
     * 
     */
    @Import(name="parentArn")
    private @Nullable Output<String> parentArn;

    /**
     * @return The parent ARN.
     * 
     */
    public Optional<Output<String>> parentArn() {
        return Optional.ofNullable(this.parentArn);
    }

    /**
     * The target account for the grant.
     * 
     */
    @Import(name="principal")
    private @Nullable Output<String> principal;

    /**
     * @return The target account for the grant.
     * 
     */
    public Optional<Output<String>> principal() {
        return Optional.ofNullable(this.principal);
    }

    /**
     * The grant status.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The grant status.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The grant version.
     * 
     */
    @Import(name="version")
    private @Nullable Output<String> version;

    /**
     * @return The grant version.
     * 
     */
    public Optional<Output<String>> version() {
        return Optional.ofNullable(this.version);
    }

    private LicenseGrantAccepterState() {}

    private LicenseGrantAccepterState(LicenseGrantAccepterState $) {
        this.allowedOperations = $.allowedOperations;
        this.grantArn = $.grantArn;
        this.homeRegion = $.homeRegion;
        this.licenseArn = $.licenseArn;
        this.name = $.name;
        this.parentArn = $.parentArn;
        this.principal = $.principal;
        this.status = $.status;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LicenseGrantAccepterState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LicenseGrantAccepterState $;

        public Builder() {
            $ = new LicenseGrantAccepterState();
        }

        public Builder(LicenseGrantAccepterState defaults) {
            $ = new LicenseGrantAccepterState(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowedOperations A list of the allowed operations for the grant.
         * 
         * @return builder
         * 
         */
        public Builder allowedOperations(@Nullable Output<List<String>> allowedOperations) {
            $.allowedOperations = allowedOperations;
            return this;
        }

        /**
         * @param allowedOperations A list of the allowed operations for the grant.
         * 
         * @return builder
         * 
         */
        public Builder allowedOperations(List<String> allowedOperations) {
            return allowedOperations(Output.of(allowedOperations));
        }

        /**
         * @param allowedOperations A list of the allowed operations for the grant.
         * 
         * @return builder
         * 
         */
        public Builder allowedOperations(String... allowedOperations) {
            return allowedOperations(List.of(allowedOperations));
        }

        /**
         * @param grantArn The ARN of the grant to accept.
         * 
         * @return builder
         * 
         */
        public Builder grantArn(@Nullable Output<String> grantArn) {
            $.grantArn = grantArn;
            return this;
        }

        /**
         * @param grantArn The ARN of the grant to accept.
         * 
         * @return builder
         * 
         */
        public Builder grantArn(String grantArn) {
            return grantArn(Output.of(grantArn));
        }

        /**
         * @param homeRegion The home region for the license.
         * 
         * @return builder
         * 
         */
        public Builder homeRegion(@Nullable Output<String> homeRegion) {
            $.homeRegion = homeRegion;
            return this;
        }

        /**
         * @param homeRegion The home region for the license.
         * 
         * @return builder
         * 
         */
        public Builder homeRegion(String homeRegion) {
            return homeRegion(Output.of(homeRegion));
        }

        /**
         * @param licenseArn The ARN of the license for the grant.
         * 
         * @return builder
         * 
         */
        public Builder licenseArn(@Nullable Output<String> licenseArn) {
            $.licenseArn = licenseArn;
            return this;
        }

        /**
         * @param licenseArn The ARN of the license for the grant.
         * 
         * @return builder
         * 
         */
        public Builder licenseArn(String licenseArn) {
            return licenseArn(Output.of(licenseArn));
        }

        /**
         * @param name The Name of the grant.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The Name of the grant.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param parentArn The parent ARN.
         * 
         * @return builder
         * 
         */
        public Builder parentArn(@Nullable Output<String> parentArn) {
            $.parentArn = parentArn;
            return this;
        }

        /**
         * @param parentArn The parent ARN.
         * 
         * @return builder
         * 
         */
        public Builder parentArn(String parentArn) {
            return parentArn(Output.of(parentArn));
        }

        /**
         * @param principal The target account for the grant.
         * 
         * @return builder
         * 
         */
        public Builder principal(@Nullable Output<String> principal) {
            $.principal = principal;
            return this;
        }

        /**
         * @param principal The target account for the grant.
         * 
         * @return builder
         * 
         */
        public Builder principal(String principal) {
            return principal(Output.of(principal));
        }

        /**
         * @param status The grant status.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The grant status.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param version The grant version.
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable Output<String> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version The grant version.
         * 
         * @return builder
         * 
         */
        public Builder version(String version) {
            return version(Output.of(version));
        }

        public LicenseGrantAccepterState build() {
            return $;
        }
    }

}
