// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.bedrock.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.util.Objects;

@CustomType
public final class AgentDataSourceVectorIngestionConfigurationChunkingConfigurationFixedSizeChunkingConfiguration {
    private Integer maxTokens;
    private Integer overlapPercentage;

    private AgentDataSourceVectorIngestionConfigurationChunkingConfigurationFixedSizeChunkingConfiguration() {}
    public Integer maxTokens() {
        return this.maxTokens;
    }
    public Integer overlapPercentage() {
        return this.overlapPercentage;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AgentDataSourceVectorIngestionConfigurationChunkingConfigurationFixedSizeChunkingConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer maxTokens;
        private Integer overlapPercentage;
        public Builder() {}
        public Builder(AgentDataSourceVectorIngestionConfigurationChunkingConfigurationFixedSizeChunkingConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.maxTokens = defaults.maxTokens;
    	      this.overlapPercentage = defaults.overlapPercentage;
        }

        @CustomType.Setter
        public Builder maxTokens(Integer maxTokens) {
            if (maxTokens == null) {
              throw new MissingRequiredPropertyException("AgentDataSourceVectorIngestionConfigurationChunkingConfigurationFixedSizeChunkingConfiguration", "maxTokens");
            }
            this.maxTokens = maxTokens;
            return this;
        }
        @CustomType.Setter
        public Builder overlapPercentage(Integer overlapPercentage) {
            if (overlapPercentage == null) {
              throw new MissingRequiredPropertyException("AgentDataSourceVectorIngestionConfigurationChunkingConfigurationFixedSizeChunkingConfiguration", "overlapPercentage");
            }
            this.overlapPercentage = overlapPercentage;
            return this;
        }
        public AgentDataSourceVectorIngestionConfigurationChunkingConfigurationFixedSizeChunkingConfiguration build() {
            final var _resultValue = new AgentDataSourceVectorIngestionConfigurationChunkingConfigurationFixedSizeChunkingConfiguration();
            _resultValue.maxTokens = maxTokens;
            _resultValue.overlapPercentage = overlapPercentage;
            return _resultValue;
        }
    }
}
