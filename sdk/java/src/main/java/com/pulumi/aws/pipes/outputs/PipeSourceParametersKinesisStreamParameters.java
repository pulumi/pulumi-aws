// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.pipes.outputs;

import com.pulumi.aws.pipes.outputs.PipeSourceParametersKinesisStreamParametersDeadLetterConfig;
import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class PipeSourceParametersKinesisStreamParameters {
    /**
     * @return The maximum number of records to include in each batch. Maximum value of 10000.
     * 
     */
    private @Nullable Integer batchSize;
    /**
     * @return Define the target queue to send dead-letter queue events to. Detailed below.
     * 
     */
    private @Nullable PipeSourceParametersKinesisStreamParametersDeadLetterConfig deadLetterConfig;
    /**
     * @return The maximum length of a time to wait for events. Maximum value of 300.
     * 
     */
    private @Nullable Integer maximumBatchingWindowInSeconds;
    /**
     * @return Discard records older than the specified age. The default value is -1, which sets the maximum age to infinite. When the value is set to infinite, EventBridge never discards old records. Maximum value of 604,800.
     * 
     */
    private @Nullable Integer maximumRecordAgeInSeconds;
    /**
     * @return Discard records after the specified number of retries. The default value is -1, which sets the maximum number of retries to infinite. When MaximumRetryAttempts is infinite, EventBridge retries failed records until the record expires in the event source. Maximum value of 10,000.
     * 
     */
    private @Nullable Integer maximumRetryAttempts;
    /**
     * @return Define how to handle item process failures. AUTOMATIC_BISECT halves each batch and retry each half until all the records are processed or there is one failed message left in the batch. Valid values: AUTOMATIC_BISECT.
     * 
     */
    private @Nullable String onPartialBatchItemFailure;
    /**
     * @return The number of batches to process concurrently from each shard. The default value is 1. Maximum value of 10.
     * 
     */
    private @Nullable Integer parallelizationFactor;
    /**
     * @return The position in a stream from which to start reading. Valid values: TRIM_HORIZON, LATEST.
     * 
     */
    private String startingPosition;
    /**
     * @return With StartingPosition set to AT_TIMESTAMP, the time from which to start reading, in Unix time seconds.
     * 
     */
    private @Nullable String startingPositionTimestamp;

    private PipeSourceParametersKinesisStreamParameters() {}
    /**
     * @return The maximum number of records to include in each batch. Maximum value of 10000.
     * 
     */
    public Optional<Integer> batchSize() {
        return Optional.ofNullable(this.batchSize);
    }
    /**
     * @return Define the target queue to send dead-letter queue events to. Detailed below.
     * 
     */
    public Optional<PipeSourceParametersKinesisStreamParametersDeadLetterConfig> deadLetterConfig() {
        return Optional.ofNullable(this.deadLetterConfig);
    }
    /**
     * @return The maximum length of a time to wait for events. Maximum value of 300.
     * 
     */
    public Optional<Integer> maximumBatchingWindowInSeconds() {
        return Optional.ofNullable(this.maximumBatchingWindowInSeconds);
    }
    /**
     * @return Discard records older than the specified age. The default value is -1, which sets the maximum age to infinite. When the value is set to infinite, EventBridge never discards old records. Maximum value of 604,800.
     * 
     */
    public Optional<Integer> maximumRecordAgeInSeconds() {
        return Optional.ofNullable(this.maximumRecordAgeInSeconds);
    }
    /**
     * @return Discard records after the specified number of retries. The default value is -1, which sets the maximum number of retries to infinite. When MaximumRetryAttempts is infinite, EventBridge retries failed records until the record expires in the event source. Maximum value of 10,000.
     * 
     */
    public Optional<Integer> maximumRetryAttempts() {
        return Optional.ofNullable(this.maximumRetryAttempts);
    }
    /**
     * @return Define how to handle item process failures. AUTOMATIC_BISECT halves each batch and retry each half until all the records are processed or there is one failed message left in the batch. Valid values: AUTOMATIC_BISECT.
     * 
     */
    public Optional<String> onPartialBatchItemFailure() {
        return Optional.ofNullable(this.onPartialBatchItemFailure);
    }
    /**
     * @return The number of batches to process concurrently from each shard. The default value is 1. Maximum value of 10.
     * 
     */
    public Optional<Integer> parallelizationFactor() {
        return Optional.ofNullable(this.parallelizationFactor);
    }
    /**
     * @return The position in a stream from which to start reading. Valid values: TRIM_HORIZON, LATEST.
     * 
     */
    public String startingPosition() {
        return this.startingPosition;
    }
    /**
     * @return With StartingPosition set to AT_TIMESTAMP, the time from which to start reading, in Unix time seconds.
     * 
     */
    public Optional<String> startingPositionTimestamp() {
        return Optional.ofNullable(this.startingPositionTimestamp);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PipeSourceParametersKinesisStreamParameters defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer batchSize;
        private @Nullable PipeSourceParametersKinesisStreamParametersDeadLetterConfig deadLetterConfig;
        private @Nullable Integer maximumBatchingWindowInSeconds;
        private @Nullable Integer maximumRecordAgeInSeconds;
        private @Nullable Integer maximumRetryAttempts;
        private @Nullable String onPartialBatchItemFailure;
        private @Nullable Integer parallelizationFactor;
        private String startingPosition;
        private @Nullable String startingPositionTimestamp;
        public Builder() {}
        public Builder(PipeSourceParametersKinesisStreamParameters defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.batchSize = defaults.batchSize;
    	      this.deadLetterConfig = defaults.deadLetterConfig;
    	      this.maximumBatchingWindowInSeconds = defaults.maximumBatchingWindowInSeconds;
    	      this.maximumRecordAgeInSeconds = defaults.maximumRecordAgeInSeconds;
    	      this.maximumRetryAttempts = defaults.maximumRetryAttempts;
    	      this.onPartialBatchItemFailure = defaults.onPartialBatchItemFailure;
    	      this.parallelizationFactor = defaults.parallelizationFactor;
    	      this.startingPosition = defaults.startingPosition;
    	      this.startingPositionTimestamp = defaults.startingPositionTimestamp;
        }

        @CustomType.Setter
        public Builder batchSize(@Nullable Integer batchSize) {
            this.batchSize = batchSize;
            return this;
        }
        @CustomType.Setter
        public Builder deadLetterConfig(@Nullable PipeSourceParametersKinesisStreamParametersDeadLetterConfig deadLetterConfig) {
            this.deadLetterConfig = deadLetterConfig;
            return this;
        }
        @CustomType.Setter
        public Builder maximumBatchingWindowInSeconds(@Nullable Integer maximumBatchingWindowInSeconds) {
            this.maximumBatchingWindowInSeconds = maximumBatchingWindowInSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder maximumRecordAgeInSeconds(@Nullable Integer maximumRecordAgeInSeconds) {
            this.maximumRecordAgeInSeconds = maximumRecordAgeInSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder maximumRetryAttempts(@Nullable Integer maximumRetryAttempts) {
            this.maximumRetryAttempts = maximumRetryAttempts;
            return this;
        }
        @CustomType.Setter
        public Builder onPartialBatchItemFailure(@Nullable String onPartialBatchItemFailure) {
            this.onPartialBatchItemFailure = onPartialBatchItemFailure;
            return this;
        }
        @CustomType.Setter
        public Builder parallelizationFactor(@Nullable Integer parallelizationFactor) {
            this.parallelizationFactor = parallelizationFactor;
            return this;
        }
        @CustomType.Setter
        public Builder startingPosition(String startingPosition) {
            this.startingPosition = Objects.requireNonNull(startingPosition);
            return this;
        }
        @CustomType.Setter
        public Builder startingPositionTimestamp(@Nullable String startingPositionTimestamp) {
            this.startingPositionTimestamp = startingPositionTimestamp;
            return this;
        }
        public PipeSourceParametersKinesisStreamParameters build() {
            final var o = new PipeSourceParametersKinesisStreamParameters();
            o.batchSize = batchSize;
            o.deadLetterConfig = deadLetterConfig;
            o.maximumBatchingWindowInSeconds = maximumBatchingWindowInSeconds;
            o.maximumRecordAgeInSeconds = maximumRecordAgeInSeconds;
            o.maximumRetryAttempts = maximumRetryAttempts;
            o.onPartialBatchItemFailure = onPartialBatchItemFailure;
            o.parallelizationFactor = parallelizationFactor;
            o.startingPosition = startingPosition;
            o.startingPositionTimestamp = startingPositionTimestamp;
            return o;
        }
    }
}
