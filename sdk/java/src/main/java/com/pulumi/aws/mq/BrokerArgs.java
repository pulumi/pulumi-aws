// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.mq;

import com.pulumi.aws.mq.inputs.BrokerConfigurationArgs;
import com.pulumi.aws.mq.inputs.BrokerEncryptionOptionsArgs;
import com.pulumi.aws.mq.inputs.BrokerLdapServerMetadataArgs;
import com.pulumi.aws.mq.inputs.BrokerLogsArgs;
import com.pulumi.aws.mq.inputs.BrokerMaintenanceWindowStartTimeArgs;
import com.pulumi.aws.mq.inputs.BrokerUserArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BrokerArgs extends com.pulumi.resources.ResourceArgs {

    public static final BrokerArgs Empty = new BrokerArgs();

    @Import(name="applyImmediately")
    private @Nullable Output<Boolean> applyImmediately;

    public Optional<Output<Boolean>> applyImmediately() {
        return Optional.ofNullable(this.applyImmediately);
    }

    @Import(name="authenticationStrategy")
    private @Nullable Output<String> authenticationStrategy;

    public Optional<Output<String>> authenticationStrategy() {
        return Optional.ofNullable(this.authenticationStrategy);
    }

    @Import(name="autoMinorVersionUpgrade")
    private @Nullable Output<Boolean> autoMinorVersionUpgrade;

    public Optional<Output<Boolean>> autoMinorVersionUpgrade() {
        return Optional.ofNullable(this.autoMinorVersionUpgrade);
    }

    @Import(name="brokerName")
    private @Nullable Output<String> brokerName;

    public Optional<Output<String>> brokerName() {
        return Optional.ofNullable(this.brokerName);
    }

    @Import(name="configuration")
    private @Nullable Output<BrokerConfigurationArgs> configuration;

    public Optional<Output<BrokerConfigurationArgs>> configuration() {
        return Optional.ofNullable(this.configuration);
    }

    @Import(name="deploymentMode")
    private @Nullable Output<String> deploymentMode;

    public Optional<Output<String>> deploymentMode() {
        return Optional.ofNullable(this.deploymentMode);
    }

    @Import(name="encryptionOptions")
    private @Nullable Output<BrokerEncryptionOptionsArgs> encryptionOptions;

    public Optional<Output<BrokerEncryptionOptionsArgs>> encryptionOptions() {
        return Optional.ofNullable(this.encryptionOptions);
    }

    @Import(name="engineType", required=true)
    private Output<String> engineType;

    public Output<String> engineType() {
        return this.engineType;
    }

    @Import(name="engineVersion", required=true)
    private Output<String> engineVersion;

    public Output<String> engineVersion() {
        return this.engineVersion;
    }

    @Import(name="hostInstanceType", required=true)
    private Output<String> hostInstanceType;

    public Output<String> hostInstanceType() {
        return this.hostInstanceType;
    }

    @Import(name="ldapServerMetadata")
    private @Nullable Output<BrokerLdapServerMetadataArgs> ldapServerMetadata;

    public Optional<Output<BrokerLdapServerMetadataArgs>> ldapServerMetadata() {
        return Optional.ofNullable(this.ldapServerMetadata);
    }

    @Import(name="logs")
    private @Nullable Output<BrokerLogsArgs> logs;

    public Optional<Output<BrokerLogsArgs>> logs() {
        return Optional.ofNullable(this.logs);
    }

    @Import(name="maintenanceWindowStartTime")
    private @Nullable Output<BrokerMaintenanceWindowStartTimeArgs> maintenanceWindowStartTime;

    public Optional<Output<BrokerMaintenanceWindowStartTimeArgs>> maintenanceWindowStartTime() {
        return Optional.ofNullable(this.maintenanceWindowStartTime);
    }

    @Import(name="publiclyAccessible")
    private @Nullable Output<Boolean> publiclyAccessible;

    public Optional<Output<Boolean>> publiclyAccessible() {
        return Optional.ofNullable(this.publiclyAccessible);
    }

    @Import(name="securityGroups")
    private @Nullable Output<List<String>> securityGroups;

    public Optional<Output<List<String>>> securityGroups() {
        return Optional.ofNullable(this.securityGroups);
    }

    @Import(name="storageType")
    private @Nullable Output<String> storageType;

    public Optional<Output<String>> storageType() {
        return Optional.ofNullable(this.storageType);
    }

    @Import(name="subnetIds")
    private @Nullable Output<List<String>> subnetIds;

    public Optional<Output<List<String>>> subnetIds() {
        return Optional.ofNullable(this.subnetIds);
    }

    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="users", required=true)
    private Output<List<BrokerUserArgs>> users;

    public Output<List<BrokerUserArgs>> users() {
        return this.users;
    }

    private BrokerArgs() {}

    private BrokerArgs(BrokerArgs $) {
        this.applyImmediately = $.applyImmediately;
        this.authenticationStrategy = $.authenticationStrategy;
        this.autoMinorVersionUpgrade = $.autoMinorVersionUpgrade;
        this.brokerName = $.brokerName;
        this.configuration = $.configuration;
        this.deploymentMode = $.deploymentMode;
        this.encryptionOptions = $.encryptionOptions;
        this.engineType = $.engineType;
        this.engineVersion = $.engineVersion;
        this.hostInstanceType = $.hostInstanceType;
        this.ldapServerMetadata = $.ldapServerMetadata;
        this.logs = $.logs;
        this.maintenanceWindowStartTime = $.maintenanceWindowStartTime;
        this.publiclyAccessible = $.publiclyAccessible;
        this.securityGroups = $.securityGroups;
        this.storageType = $.storageType;
        this.subnetIds = $.subnetIds;
        this.tags = $.tags;
        this.users = $.users;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BrokerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BrokerArgs $;

        public Builder() {
            $ = new BrokerArgs();
        }

        public Builder(BrokerArgs defaults) {
            $ = new BrokerArgs(Objects.requireNonNull(defaults));
        }

        public Builder applyImmediately(@Nullable Output<Boolean> applyImmediately) {
            $.applyImmediately = applyImmediately;
            return this;
        }

        public Builder applyImmediately(Boolean applyImmediately) {
            return applyImmediately(Output.of(applyImmediately));
        }

        public Builder authenticationStrategy(@Nullable Output<String> authenticationStrategy) {
            $.authenticationStrategy = authenticationStrategy;
            return this;
        }

        public Builder authenticationStrategy(String authenticationStrategy) {
            return authenticationStrategy(Output.of(authenticationStrategy));
        }

        public Builder autoMinorVersionUpgrade(@Nullable Output<Boolean> autoMinorVersionUpgrade) {
            $.autoMinorVersionUpgrade = autoMinorVersionUpgrade;
            return this;
        }

        public Builder autoMinorVersionUpgrade(Boolean autoMinorVersionUpgrade) {
            return autoMinorVersionUpgrade(Output.of(autoMinorVersionUpgrade));
        }

        public Builder brokerName(@Nullable Output<String> brokerName) {
            $.brokerName = brokerName;
            return this;
        }

        public Builder brokerName(String brokerName) {
            return brokerName(Output.of(brokerName));
        }

        public Builder configuration(@Nullable Output<BrokerConfigurationArgs> configuration) {
            $.configuration = configuration;
            return this;
        }

        public Builder configuration(BrokerConfigurationArgs configuration) {
            return configuration(Output.of(configuration));
        }

        public Builder deploymentMode(@Nullable Output<String> deploymentMode) {
            $.deploymentMode = deploymentMode;
            return this;
        }

        public Builder deploymentMode(String deploymentMode) {
            return deploymentMode(Output.of(deploymentMode));
        }

        public Builder encryptionOptions(@Nullable Output<BrokerEncryptionOptionsArgs> encryptionOptions) {
            $.encryptionOptions = encryptionOptions;
            return this;
        }

        public Builder encryptionOptions(BrokerEncryptionOptionsArgs encryptionOptions) {
            return encryptionOptions(Output.of(encryptionOptions));
        }

        public Builder engineType(Output<String> engineType) {
            $.engineType = engineType;
            return this;
        }

        public Builder engineType(String engineType) {
            return engineType(Output.of(engineType));
        }

        public Builder engineVersion(Output<String> engineVersion) {
            $.engineVersion = engineVersion;
            return this;
        }

        public Builder engineVersion(String engineVersion) {
            return engineVersion(Output.of(engineVersion));
        }

        public Builder hostInstanceType(Output<String> hostInstanceType) {
            $.hostInstanceType = hostInstanceType;
            return this;
        }

        public Builder hostInstanceType(String hostInstanceType) {
            return hostInstanceType(Output.of(hostInstanceType));
        }

        public Builder ldapServerMetadata(@Nullable Output<BrokerLdapServerMetadataArgs> ldapServerMetadata) {
            $.ldapServerMetadata = ldapServerMetadata;
            return this;
        }

        public Builder ldapServerMetadata(BrokerLdapServerMetadataArgs ldapServerMetadata) {
            return ldapServerMetadata(Output.of(ldapServerMetadata));
        }

        public Builder logs(@Nullable Output<BrokerLogsArgs> logs) {
            $.logs = logs;
            return this;
        }

        public Builder logs(BrokerLogsArgs logs) {
            return logs(Output.of(logs));
        }

        public Builder maintenanceWindowStartTime(@Nullable Output<BrokerMaintenanceWindowStartTimeArgs> maintenanceWindowStartTime) {
            $.maintenanceWindowStartTime = maintenanceWindowStartTime;
            return this;
        }

        public Builder maintenanceWindowStartTime(BrokerMaintenanceWindowStartTimeArgs maintenanceWindowStartTime) {
            return maintenanceWindowStartTime(Output.of(maintenanceWindowStartTime));
        }

        public Builder publiclyAccessible(@Nullable Output<Boolean> publiclyAccessible) {
            $.publiclyAccessible = publiclyAccessible;
            return this;
        }

        public Builder publiclyAccessible(Boolean publiclyAccessible) {
            return publiclyAccessible(Output.of(publiclyAccessible));
        }

        public Builder securityGroups(@Nullable Output<List<String>> securityGroups) {
            $.securityGroups = securityGroups;
            return this;
        }

        public Builder securityGroups(List<String> securityGroups) {
            return securityGroups(Output.of(securityGroups));
        }

        public Builder securityGroups(String... securityGroups) {
            return securityGroups(List.of(securityGroups));
        }

        public Builder storageType(@Nullable Output<String> storageType) {
            $.storageType = storageType;
            return this;
        }

        public Builder storageType(String storageType) {
            return storageType(Output.of(storageType));
        }

        public Builder subnetIds(@Nullable Output<List<String>> subnetIds) {
            $.subnetIds = subnetIds;
            return this;
        }

        public Builder subnetIds(List<String> subnetIds) {
            return subnetIds(Output.of(subnetIds));
        }

        public Builder subnetIds(String... subnetIds) {
            return subnetIds(List.of(subnetIds));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder users(Output<List<BrokerUserArgs>> users) {
            $.users = users;
            return this;
        }

        public Builder users(List<BrokerUserArgs> users) {
            return users(Output.of(users));
        }

        public Builder users(BrokerUserArgs... users) {
            return users(List.of(users));
        }

        public BrokerArgs build() {
            $.engineType = Objects.requireNonNull($.engineType, "expected parameter 'engineType' to be non-null");
            $.engineVersion = Objects.requireNonNull($.engineVersion, "expected parameter 'engineVersion' to be non-null");
            $.hostInstanceType = Objects.requireNonNull($.hostInstanceType, "expected parameter 'hostInstanceType' to be non-null");
            $.users = Objects.requireNonNull($.users, "expected parameter 'users' to be non-null");
            return $;
        }
    }

}
