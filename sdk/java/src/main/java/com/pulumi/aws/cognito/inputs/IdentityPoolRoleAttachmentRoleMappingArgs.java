// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.cognito.inputs;

import com.pulumi.aws.cognito.inputs.IdentityPoolRoleAttachmentRoleMappingMappingRuleArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IdentityPoolRoleAttachmentRoleMappingArgs extends com.pulumi.resources.ResourceArgs {

    public static final IdentityPoolRoleAttachmentRoleMappingArgs Empty = new IdentityPoolRoleAttachmentRoleMappingArgs();

    @Import(name="ambiguousRoleResolution")
    private @Nullable Output<String> ambiguousRoleResolution;

    public Optional<Output<String>> ambiguousRoleResolution() {
        return Optional.ofNullable(this.ambiguousRoleResolution);
    }

    @Import(name="identityProvider", required=true)
    private Output<String> identityProvider;

    public Output<String> identityProvider() {
        return this.identityProvider;
    }

    @Import(name="mappingRules")
    private @Nullable Output<List<IdentityPoolRoleAttachmentRoleMappingMappingRuleArgs>> mappingRules;

    public Optional<Output<List<IdentityPoolRoleAttachmentRoleMappingMappingRuleArgs>>> mappingRules() {
        return Optional.ofNullable(this.mappingRules);
    }

    @Import(name="type", required=true)
    private Output<String> type;

    public Output<String> type() {
        return this.type;
    }

    private IdentityPoolRoleAttachmentRoleMappingArgs() {}

    private IdentityPoolRoleAttachmentRoleMappingArgs(IdentityPoolRoleAttachmentRoleMappingArgs $) {
        this.ambiguousRoleResolution = $.ambiguousRoleResolution;
        this.identityProvider = $.identityProvider;
        this.mappingRules = $.mappingRules;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IdentityPoolRoleAttachmentRoleMappingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IdentityPoolRoleAttachmentRoleMappingArgs $;

        public Builder() {
            $ = new IdentityPoolRoleAttachmentRoleMappingArgs();
        }

        public Builder(IdentityPoolRoleAttachmentRoleMappingArgs defaults) {
            $ = new IdentityPoolRoleAttachmentRoleMappingArgs(Objects.requireNonNull(defaults));
        }

        public Builder ambiguousRoleResolution(@Nullable Output<String> ambiguousRoleResolution) {
            $.ambiguousRoleResolution = ambiguousRoleResolution;
            return this;
        }

        public Builder ambiguousRoleResolution(String ambiguousRoleResolution) {
            return ambiguousRoleResolution(Output.of(ambiguousRoleResolution));
        }

        public Builder identityProvider(Output<String> identityProvider) {
            $.identityProvider = identityProvider;
            return this;
        }

        public Builder identityProvider(String identityProvider) {
            return identityProvider(Output.of(identityProvider));
        }

        public Builder mappingRules(@Nullable Output<List<IdentityPoolRoleAttachmentRoleMappingMappingRuleArgs>> mappingRules) {
            $.mappingRules = mappingRules;
            return this;
        }

        public Builder mappingRules(List<IdentityPoolRoleAttachmentRoleMappingMappingRuleArgs> mappingRules) {
            return mappingRules(Output.of(mappingRules));
        }

        public Builder mappingRules(IdentityPoolRoleAttachmentRoleMappingMappingRuleArgs... mappingRules) {
            return mappingRules(List.of(mappingRules));
        }

        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        public Builder type(String type) {
            return type(Output.of(type));
        }

        public IdentityPoolRoleAttachmentRoleMappingArgs build() {
            if ($.identityProvider == null) {
                throw new MissingRequiredPropertyException("IdentityPoolRoleAttachmentRoleMappingArgs", "identityProvider");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("IdentityPoolRoleAttachmentRoleMappingArgs", "type");
            }
            return $;
        }
    }

}
