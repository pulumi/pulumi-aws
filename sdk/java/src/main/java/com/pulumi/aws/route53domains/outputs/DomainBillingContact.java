// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.route53domains.outputs;

import com.pulumi.aws.route53domains.outputs.DomainBillingContactExtraParam;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class DomainBillingContact {
    /**
     * @return First line of the contact&#39;s address.
     * 
     */
    private String addressLine1;
    /**
     * @return Second line of contact&#39;s address, if any.
     * 
     */
    private String addressLine2;
    /**
     * @return The city of the contact&#39;s address.
     * 
     */
    private String city;
    /**
     * @return Indicates whether the contact is a person, company, association, or public organization. See the [AWS API documentation](https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_ContactDetail.html#Route53Domains-Type-domains_ContactDetail-ContactType) for valid values.
     * 
     */
    private String contactType;
    /**
     * @return Code for the country of the contact&#39;s address. See the [AWS API documentation](https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_ContactDetail.html#Route53Domains-Type-domains_ContactDetail-CountryCode) for valid values.
     * 
     */
    private String countryCode;
    /**
     * @return Email address of the contact.
     * 
     */
    private String email;
    /**
     * @return A list of name-value pairs for parameters required by certain top-level domains.
     * 
     */
    private List<DomainBillingContactExtraParam> extraParams;
    /**
     * @return Fax number of the contact. Phone number must be specified in the format &#34;+[country dialing code].[number including any area code]&#34;.
     * 
     */
    private String fax;
    /**
     * @return First name of contact.
     * 
     */
    private String firstName;
    /**
     * @return Last name of contact.
     * 
     */
    private String lastName;
    /**
     * @return Name of the organization for contact types other than `PERSON`.
     * 
     */
    private String organizationName;
    /**
     * @return The phone number of the contact. Phone number must be specified in the format &#34;+[country dialing code].[number including any area code]&#34;.
     * 
     */
    private String phoneNumber;
    /**
     * @return The state or province of the contact&#39;s city.
     * 
     */
    private String state;
    /**
     * @return The zip or postal code of the contact&#39;s address.
     * 
     */
    private String zipCode;

    private DomainBillingContact() {}
    /**
     * @return First line of the contact&#39;s address.
     * 
     */
    public String addressLine1() {
        return this.addressLine1;
    }
    /**
     * @return Second line of contact&#39;s address, if any.
     * 
     */
    public String addressLine2() {
        return this.addressLine2;
    }
    /**
     * @return The city of the contact&#39;s address.
     * 
     */
    public String city() {
        return this.city;
    }
    /**
     * @return Indicates whether the contact is a person, company, association, or public organization. See the [AWS API documentation](https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_ContactDetail.html#Route53Domains-Type-domains_ContactDetail-ContactType) for valid values.
     * 
     */
    public String contactType() {
        return this.contactType;
    }
    /**
     * @return Code for the country of the contact&#39;s address. See the [AWS API documentation](https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_ContactDetail.html#Route53Domains-Type-domains_ContactDetail-CountryCode) for valid values.
     * 
     */
    public String countryCode() {
        return this.countryCode;
    }
    /**
     * @return Email address of the contact.
     * 
     */
    public String email() {
        return this.email;
    }
    /**
     * @return A list of name-value pairs for parameters required by certain top-level domains.
     * 
     */
    public List<DomainBillingContactExtraParam> extraParams() {
        return this.extraParams;
    }
    /**
     * @return Fax number of the contact. Phone number must be specified in the format &#34;+[country dialing code].[number including any area code]&#34;.
     * 
     */
    public String fax() {
        return this.fax;
    }
    /**
     * @return First name of contact.
     * 
     */
    public String firstName() {
        return this.firstName;
    }
    /**
     * @return Last name of contact.
     * 
     */
    public String lastName() {
        return this.lastName;
    }
    /**
     * @return Name of the organization for contact types other than `PERSON`.
     * 
     */
    public String organizationName() {
        return this.organizationName;
    }
    /**
     * @return The phone number of the contact. Phone number must be specified in the format &#34;+[country dialing code].[number including any area code]&#34;.
     * 
     */
    public String phoneNumber() {
        return this.phoneNumber;
    }
    /**
     * @return The state or province of the contact&#39;s city.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The zip or postal code of the contact&#39;s address.
     * 
     */
    public String zipCode() {
        return this.zipCode;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DomainBillingContact defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String addressLine1;
        private String addressLine2;
        private String city;
        private String contactType;
        private String countryCode;
        private String email;
        private List<DomainBillingContactExtraParam> extraParams;
        private String fax;
        private String firstName;
        private String lastName;
        private String organizationName;
        private String phoneNumber;
        private String state;
        private String zipCode;
        public Builder() {}
        public Builder(DomainBillingContact defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.addressLine1 = defaults.addressLine1;
    	      this.addressLine2 = defaults.addressLine2;
    	      this.city = defaults.city;
    	      this.contactType = defaults.contactType;
    	      this.countryCode = defaults.countryCode;
    	      this.email = defaults.email;
    	      this.extraParams = defaults.extraParams;
    	      this.fax = defaults.fax;
    	      this.firstName = defaults.firstName;
    	      this.lastName = defaults.lastName;
    	      this.organizationName = defaults.organizationName;
    	      this.phoneNumber = defaults.phoneNumber;
    	      this.state = defaults.state;
    	      this.zipCode = defaults.zipCode;
        }

        @CustomType.Setter
        public Builder addressLine1(String addressLine1) {
            if (addressLine1 == null) {
              throw new MissingRequiredPropertyException("DomainBillingContact", "addressLine1");
            }
            this.addressLine1 = addressLine1;
            return this;
        }
        @CustomType.Setter
        public Builder addressLine2(String addressLine2) {
            if (addressLine2 == null) {
              throw new MissingRequiredPropertyException("DomainBillingContact", "addressLine2");
            }
            this.addressLine2 = addressLine2;
            return this;
        }
        @CustomType.Setter
        public Builder city(String city) {
            if (city == null) {
              throw new MissingRequiredPropertyException("DomainBillingContact", "city");
            }
            this.city = city;
            return this;
        }
        @CustomType.Setter
        public Builder contactType(String contactType) {
            if (contactType == null) {
              throw new MissingRequiredPropertyException("DomainBillingContact", "contactType");
            }
            this.contactType = contactType;
            return this;
        }
        @CustomType.Setter
        public Builder countryCode(String countryCode) {
            if (countryCode == null) {
              throw new MissingRequiredPropertyException("DomainBillingContact", "countryCode");
            }
            this.countryCode = countryCode;
            return this;
        }
        @CustomType.Setter
        public Builder email(String email) {
            if (email == null) {
              throw new MissingRequiredPropertyException("DomainBillingContact", "email");
            }
            this.email = email;
            return this;
        }
        @CustomType.Setter
        public Builder extraParams(List<DomainBillingContactExtraParam> extraParams) {
            if (extraParams == null) {
              throw new MissingRequiredPropertyException("DomainBillingContact", "extraParams");
            }
            this.extraParams = extraParams;
            return this;
        }
        public Builder extraParams(DomainBillingContactExtraParam... extraParams) {
            return extraParams(List.of(extraParams));
        }
        @CustomType.Setter
        public Builder fax(String fax) {
            if (fax == null) {
              throw new MissingRequiredPropertyException("DomainBillingContact", "fax");
            }
            this.fax = fax;
            return this;
        }
        @CustomType.Setter
        public Builder firstName(String firstName) {
            if (firstName == null) {
              throw new MissingRequiredPropertyException("DomainBillingContact", "firstName");
            }
            this.firstName = firstName;
            return this;
        }
        @CustomType.Setter
        public Builder lastName(String lastName) {
            if (lastName == null) {
              throw new MissingRequiredPropertyException("DomainBillingContact", "lastName");
            }
            this.lastName = lastName;
            return this;
        }
        @CustomType.Setter
        public Builder organizationName(String organizationName) {
            if (organizationName == null) {
              throw new MissingRequiredPropertyException("DomainBillingContact", "organizationName");
            }
            this.organizationName = organizationName;
            return this;
        }
        @CustomType.Setter
        public Builder phoneNumber(String phoneNumber) {
            if (phoneNumber == null) {
              throw new MissingRequiredPropertyException("DomainBillingContact", "phoneNumber");
            }
            this.phoneNumber = phoneNumber;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("DomainBillingContact", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder zipCode(String zipCode) {
            if (zipCode == null) {
              throw new MissingRequiredPropertyException("DomainBillingContact", "zipCode");
            }
            this.zipCode = zipCode;
            return this;
        }
        public DomainBillingContact build() {
            final var _resultValue = new DomainBillingContact();
            _resultValue.addressLine1 = addressLine1;
            _resultValue.addressLine2 = addressLine2;
            _resultValue.city = city;
            _resultValue.contactType = contactType;
            _resultValue.countryCode = countryCode;
            _resultValue.email = email;
            _resultValue.extraParams = extraParams;
            _resultValue.fax = fax;
            _resultValue.firstName = firstName;
            _resultValue.lastName = lastName;
            _resultValue.organizationName = organizationName;
            _resultValue.phoneNumber = phoneNumber;
            _resultValue.state = state;
            _resultValue.zipCode = zipCode;
            return _resultValue;
        }
    }
}
