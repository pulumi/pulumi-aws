// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.budgets.outputs;

import com.pulumi.aws.budgets.outputs.GetBudgetAutoAdjustData;
import com.pulumi.aws.budgets.outputs.GetBudgetBudgetLimit;
import com.pulumi.aws.budgets.outputs.GetBudgetCalculatedSpend;
import com.pulumi.aws.budgets.outputs.GetBudgetCostFilter;
import com.pulumi.aws.budgets.outputs.GetBudgetCostType;
import com.pulumi.aws.budgets.outputs.GetBudgetNotification;
import com.pulumi.aws.budgets.outputs.GetBudgetPlannedLimit;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetBudgetResult {
    private @Nullable String accountId;
    private @Nullable String arn;
    /**
     * @return Object containing [AutoAdjustData] which determines the budget amount for an auto-adjusting budget.
     * 
     */
    private @Nullable List<GetBudgetAutoAdjustData> autoAdjustDatas;
    /**
     * @return Boolean indicating whether this budget has been exceeded.
     * 
     */
    private @Nullable Boolean budgetExceeded;
    /**
     * @return The total amount of cost, usage, RI utilization, RI coverage, Savings Plans utilization, or Savings Plans coverage that you want to track with your budget. Contains object Spend.
     * 
     */
    private @Nullable List<GetBudgetBudgetLimit> budgetLimits;
    /**
     * @return Whether this budget tracks monetary cost or usage.
     * 
     */
    private @Nullable String budgetType;
    /**
     * @return The spend objects that are associated with this budget. The actualSpend tracks how much you&#39;ve used, cost, usage, RI units, or Savings Plans units and the forecastedSpend tracks how much that you&#39;re predicted to spend based on your historical usage profile.
     * 
     */
    private @Nullable List<GetBudgetCalculatedSpend> calculatedSpends;
    /**
     * @return A list of CostFilter name/values pair to apply to budget.
     * 
     */
    private @Nullable List<GetBudgetCostFilter> costFilters;
    /**
     * @return Object containing CostTypes The types of cost included in a budget, such as tax and subscriptions.
     * 
     */
    private @Nullable List<GetBudgetCostType> costTypes;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private @Nullable String id;
    private String name;
    private @Nullable String namePrefix;
    /**
     * @return Object containing Budget Notifications. Can be used multiple times to define more than one budget notification.
     * 
     */
    private @Nullable List<GetBudgetNotification> notifications;
    /**
     * @return Object containing Planned Budget Limits. Can be used multiple times to plan more than one budget limit. See [PlannedBudgetLimits](https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_budgets_Budget.html#awscostmanagement-Type-budgets_Budget-PlannedBudgetLimits) documentation.
     * 
     */
    private @Nullable List<GetBudgetPlannedLimit> plannedLimits;
    /**
     * @return The end of the time period covered by the budget. There are no restrictions on the end date. Format: `2017-01-01_12:00`.
     * 
     */
    private @Nullable String timePeriodEnd;
    /**
     * @return The start of the time period covered by the budget. If you don&#39;t specify a start date, AWS defaults to the start of your chosen time period. The start date must come before the end date. Format: `2017-01-01_12:00`.
     * 
     */
    private @Nullable String timePeriodStart;
    /**
     * @return The length of time until a budget resets the actual and forecasted spend. Valid values: `MONTHLY`, `QUARTERLY`, `ANNUALLY`, and `DAILY`.
     * 
     */
    private @Nullable String timeUnit;

    private GetBudgetResult() {}
    public Optional<String> accountId() {
        return Optional.ofNullable(this.accountId);
    }
    public Optional<String> arn() {
        return Optional.ofNullable(this.arn);
    }
    /**
     * @return Object containing [AutoAdjustData] which determines the budget amount for an auto-adjusting budget.
     * 
     */
    public List<GetBudgetAutoAdjustData> autoAdjustDatas() {
        return this.autoAdjustDatas == null ? List.of() : this.autoAdjustDatas;
    }
    /**
     * @return Boolean indicating whether this budget has been exceeded.
     * 
     */
    public Optional<Boolean> budgetExceeded() {
        return Optional.ofNullable(this.budgetExceeded);
    }
    /**
     * @return The total amount of cost, usage, RI utilization, RI coverage, Savings Plans utilization, or Savings Plans coverage that you want to track with your budget. Contains object Spend.
     * 
     */
    public List<GetBudgetBudgetLimit> budgetLimits() {
        return this.budgetLimits == null ? List.of() : this.budgetLimits;
    }
    /**
     * @return Whether this budget tracks monetary cost or usage.
     * 
     */
    public Optional<String> budgetType() {
        return Optional.ofNullable(this.budgetType);
    }
    /**
     * @return The spend objects that are associated with this budget. The actualSpend tracks how much you&#39;ve used, cost, usage, RI units, or Savings Plans units and the forecastedSpend tracks how much that you&#39;re predicted to spend based on your historical usage profile.
     * 
     */
    public List<GetBudgetCalculatedSpend> calculatedSpends() {
        return this.calculatedSpends == null ? List.of() : this.calculatedSpends;
    }
    /**
     * @return A list of CostFilter name/values pair to apply to budget.
     * 
     */
    public List<GetBudgetCostFilter> costFilters() {
        return this.costFilters == null ? List.of() : this.costFilters;
    }
    /**
     * @return Object containing CostTypes The types of cost included in a budget, such as tax and subscriptions.
     * 
     */
    public List<GetBudgetCostType> costTypes() {
        return this.costTypes == null ? List.of() : this.costTypes;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    public String name() {
        return this.name;
    }
    public Optional<String> namePrefix() {
        return Optional.ofNullable(this.namePrefix);
    }
    /**
     * @return Object containing Budget Notifications. Can be used multiple times to define more than one budget notification.
     * 
     */
    public List<GetBudgetNotification> notifications() {
        return this.notifications == null ? List.of() : this.notifications;
    }
    /**
     * @return Object containing Planned Budget Limits. Can be used multiple times to plan more than one budget limit. See [PlannedBudgetLimits](https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_budgets_Budget.html#awscostmanagement-Type-budgets_Budget-PlannedBudgetLimits) documentation.
     * 
     */
    public List<GetBudgetPlannedLimit> plannedLimits() {
        return this.plannedLimits == null ? List.of() : this.plannedLimits;
    }
    /**
     * @return The end of the time period covered by the budget. There are no restrictions on the end date. Format: `2017-01-01_12:00`.
     * 
     */
    public Optional<String> timePeriodEnd() {
        return Optional.ofNullable(this.timePeriodEnd);
    }
    /**
     * @return The start of the time period covered by the budget. If you don&#39;t specify a start date, AWS defaults to the start of your chosen time period. The start date must come before the end date. Format: `2017-01-01_12:00`.
     * 
     */
    public Optional<String> timePeriodStart() {
        return Optional.ofNullable(this.timePeriodStart);
    }
    /**
     * @return The length of time until a budget resets the actual and forecasted spend. Valid values: `MONTHLY`, `QUARTERLY`, `ANNUALLY`, and `DAILY`.
     * 
     */
    public Optional<String> timeUnit() {
        return Optional.ofNullable(this.timeUnit);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBudgetResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String accountId;
        private @Nullable String arn;
        private @Nullable List<GetBudgetAutoAdjustData> autoAdjustDatas;
        private @Nullable Boolean budgetExceeded;
        private @Nullable List<GetBudgetBudgetLimit> budgetLimits;
        private @Nullable String budgetType;
        private @Nullable List<GetBudgetCalculatedSpend> calculatedSpends;
        private @Nullable List<GetBudgetCostFilter> costFilters;
        private @Nullable List<GetBudgetCostType> costTypes;
        private @Nullable String id;
        private String name;
        private @Nullable String namePrefix;
        private @Nullable List<GetBudgetNotification> notifications;
        private @Nullable List<GetBudgetPlannedLimit> plannedLimits;
        private @Nullable String timePeriodEnd;
        private @Nullable String timePeriodStart;
        private @Nullable String timeUnit;
        public Builder() {}
        public Builder(GetBudgetResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountId = defaults.accountId;
    	      this.arn = defaults.arn;
    	      this.autoAdjustDatas = defaults.autoAdjustDatas;
    	      this.budgetExceeded = defaults.budgetExceeded;
    	      this.budgetLimits = defaults.budgetLimits;
    	      this.budgetType = defaults.budgetType;
    	      this.calculatedSpends = defaults.calculatedSpends;
    	      this.costFilters = defaults.costFilters;
    	      this.costTypes = defaults.costTypes;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.namePrefix = defaults.namePrefix;
    	      this.notifications = defaults.notifications;
    	      this.plannedLimits = defaults.plannedLimits;
    	      this.timePeriodEnd = defaults.timePeriodEnd;
    	      this.timePeriodStart = defaults.timePeriodStart;
    	      this.timeUnit = defaults.timeUnit;
        }

        @CustomType.Setter
        public Builder accountId(@Nullable String accountId) {
            this.accountId = accountId;
            return this;
        }
        @CustomType.Setter
        public Builder arn(@Nullable String arn) {
            this.arn = arn;
            return this;
        }
        @CustomType.Setter
        public Builder autoAdjustDatas(@Nullable List<GetBudgetAutoAdjustData> autoAdjustDatas) {
            this.autoAdjustDatas = autoAdjustDatas;
            return this;
        }
        public Builder autoAdjustDatas(GetBudgetAutoAdjustData... autoAdjustDatas) {
            return autoAdjustDatas(List.of(autoAdjustDatas));
        }
        @CustomType.Setter
        public Builder budgetExceeded(@Nullable Boolean budgetExceeded) {
            this.budgetExceeded = budgetExceeded;
            return this;
        }
        @CustomType.Setter
        public Builder budgetLimits(@Nullable List<GetBudgetBudgetLimit> budgetLimits) {
            this.budgetLimits = budgetLimits;
            return this;
        }
        public Builder budgetLimits(GetBudgetBudgetLimit... budgetLimits) {
            return budgetLimits(List.of(budgetLimits));
        }
        @CustomType.Setter
        public Builder budgetType(@Nullable String budgetType) {
            this.budgetType = budgetType;
            return this;
        }
        @CustomType.Setter
        public Builder calculatedSpends(@Nullable List<GetBudgetCalculatedSpend> calculatedSpends) {
            this.calculatedSpends = calculatedSpends;
            return this;
        }
        public Builder calculatedSpends(GetBudgetCalculatedSpend... calculatedSpends) {
            return calculatedSpends(List.of(calculatedSpends));
        }
        @CustomType.Setter
        public Builder costFilters(@Nullable List<GetBudgetCostFilter> costFilters) {
            this.costFilters = costFilters;
            return this;
        }
        public Builder costFilters(GetBudgetCostFilter... costFilters) {
            return costFilters(List.of(costFilters));
        }
        @CustomType.Setter
        public Builder costTypes(@Nullable List<GetBudgetCostType> costTypes) {
            this.costTypes = costTypes;
            return this;
        }
        public Builder costTypes(GetBudgetCostType... costTypes) {
            return costTypes(List.of(costTypes));
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder namePrefix(@Nullable String namePrefix) {
            this.namePrefix = namePrefix;
            return this;
        }
        @CustomType.Setter
        public Builder notifications(@Nullable List<GetBudgetNotification> notifications) {
            this.notifications = notifications;
            return this;
        }
        public Builder notifications(GetBudgetNotification... notifications) {
            return notifications(List.of(notifications));
        }
        @CustomType.Setter
        public Builder plannedLimits(@Nullable List<GetBudgetPlannedLimit> plannedLimits) {
            this.plannedLimits = plannedLimits;
            return this;
        }
        public Builder plannedLimits(GetBudgetPlannedLimit... plannedLimits) {
            return plannedLimits(List.of(plannedLimits));
        }
        @CustomType.Setter
        public Builder timePeriodEnd(@Nullable String timePeriodEnd) {
            this.timePeriodEnd = timePeriodEnd;
            return this;
        }
        @CustomType.Setter
        public Builder timePeriodStart(@Nullable String timePeriodStart) {
            this.timePeriodStart = timePeriodStart;
            return this;
        }
        @CustomType.Setter
        public Builder timeUnit(@Nullable String timeUnit) {
            this.timeUnit = timeUnit;
            return this;
        }
        public GetBudgetResult build() {
            final var o = new GetBudgetResult();
            o.accountId = accountId;
            o.arn = arn;
            o.autoAdjustDatas = autoAdjustDatas;
            o.budgetExceeded = budgetExceeded;
            o.budgetLimits = budgetLimits;
            o.budgetType = budgetType;
            o.calculatedSpends = calculatedSpends;
            o.costFilters = costFilters;
            o.costTypes = costTypes;
            o.id = id;
            o.name = name;
            o.namePrefix = namePrefix;
            o.notifications = notifications;
            o.plannedLimits = plannedLimits;
            o.timePeriodEnd = timePeriodEnd;
            o.timePeriodStart = timePeriodStart;
            o.timeUnit = timeUnit;
            return o;
        }
    }
}
