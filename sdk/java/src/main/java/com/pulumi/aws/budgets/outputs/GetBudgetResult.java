// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.budgets.outputs;

import com.pulumi.aws.budgets.outputs.GetBudgetAutoAdjustData;
import com.pulumi.aws.budgets.outputs.GetBudgetBudgetLimit;
import com.pulumi.aws.budgets.outputs.GetBudgetCalculatedSpend;
import com.pulumi.aws.budgets.outputs.GetBudgetCostFilter;
import com.pulumi.aws.budgets.outputs.GetBudgetCostType;
import com.pulumi.aws.budgets.outputs.GetBudgetNotification;
import com.pulumi.aws.budgets.outputs.GetBudgetPlannedLimit;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetBudgetResult {
    private String accountId;
    private String arn;
    /**
     * @return Object containing [AutoAdjustData] which determines the budget amount for an auto-adjusting budget.
     * 
     */
    private List<GetBudgetAutoAdjustData> autoAdjustDatas;
    /**
     * @return Boolean indicating whether this budget has been exceeded.
     * 
     */
    private Boolean budgetExceeded;
    /**
     * @return The total amount of cost, usage, RI utilization, RI coverage, Savings Plans utilization, or Savings Plans coverage that you want to track with your budget. Contains object Spend.
     * 
     */
    private List<GetBudgetBudgetLimit> budgetLimits;
    /**
     * @return Whether this budget tracks monetary cost or usage.
     * 
     */
    private String budgetType;
    /**
     * @return The spend objects that are associated with this budget. The actualSpend tracks how much you&#39;ve used, cost, usage, RI units, or Savings Plans units and the forecastedSpend tracks how much that you&#39;re predicted to spend based on your historical usage profile.
     * 
     */
    private List<GetBudgetCalculatedSpend> calculatedSpends;
    /**
     * @return A list of CostFilter name/values pair to apply to budget.
     * 
     */
    private List<GetBudgetCostFilter> costFilters;
    /**
     * @return Object containing CostTypes The types of cost included in a budget, such as tax and subscriptions.
     * 
     */
    private List<GetBudgetCostType> costTypes;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String name;
    private @Nullable String namePrefix;
    /**
     * @return Object containing Budget Notifications. Can be used multiple times to define more than one budget notification.
     * 
     */
    private List<GetBudgetNotification> notifications;
    /**
     * @return Object containing Planned Budget Limits. Can be used multiple times to plan more than one budget limit. See [PlannedBudgetLimits](https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_budgets_Budget.html#awscostmanagement-Type-budgets_Budget-PlannedBudgetLimits) documentation.
     * 
     */
    private List<GetBudgetPlannedLimit> plannedLimits;
    /**
     * @return The end of the time period covered by the budget. There are no restrictions on the end date. Format: `2017-01-01_12:00`.
     * 
     */
    private String timePeriodEnd;
    /**
     * @return The start of the time period covered by the budget. If you don&#39;t specify a start date, AWS defaults to the start of your chosen time period. The start date must come before the end date. Format: `2017-01-01_12:00`.
     * 
     */
    private String timePeriodStart;
    /**
     * @return The length of time until a budget resets the actual and forecasted spend. Valid values: `MONTHLY`, `QUARTERLY`, `ANNUALLY`, and `DAILY`.
     * 
     */
    private String timeUnit;

    private GetBudgetResult() {}
    public String accountId() {
        return this.accountId;
    }
    public String arn() {
        return this.arn;
    }
    /**
     * @return Object containing [AutoAdjustData] which determines the budget amount for an auto-adjusting budget.
     * 
     */
    public List<GetBudgetAutoAdjustData> autoAdjustDatas() {
        return this.autoAdjustDatas;
    }
    /**
     * @return Boolean indicating whether this budget has been exceeded.
     * 
     */
    public Boolean budgetExceeded() {
        return this.budgetExceeded;
    }
    /**
     * @return The total amount of cost, usage, RI utilization, RI coverage, Savings Plans utilization, or Savings Plans coverage that you want to track with your budget. Contains object Spend.
     * 
     */
    public List<GetBudgetBudgetLimit> budgetLimits() {
        return this.budgetLimits;
    }
    /**
     * @return Whether this budget tracks monetary cost or usage.
     * 
     */
    public String budgetType() {
        return this.budgetType;
    }
    /**
     * @return The spend objects that are associated with this budget. The actualSpend tracks how much you&#39;ve used, cost, usage, RI units, or Savings Plans units and the forecastedSpend tracks how much that you&#39;re predicted to spend based on your historical usage profile.
     * 
     */
    public List<GetBudgetCalculatedSpend> calculatedSpends() {
        return this.calculatedSpends;
    }
    /**
     * @return A list of CostFilter name/values pair to apply to budget.
     * 
     */
    public List<GetBudgetCostFilter> costFilters() {
        return this.costFilters;
    }
    /**
     * @return Object containing CostTypes The types of cost included in a budget, such as tax and subscriptions.
     * 
     */
    public List<GetBudgetCostType> costTypes() {
        return this.costTypes;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String name() {
        return this.name;
    }
    public Optional<String> namePrefix() {
        return Optional.ofNullable(this.namePrefix);
    }
    /**
     * @return Object containing Budget Notifications. Can be used multiple times to define more than one budget notification.
     * 
     */
    public List<GetBudgetNotification> notifications() {
        return this.notifications;
    }
    /**
     * @return Object containing Planned Budget Limits. Can be used multiple times to plan more than one budget limit. See [PlannedBudgetLimits](https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_budgets_Budget.html#awscostmanagement-Type-budgets_Budget-PlannedBudgetLimits) documentation.
     * 
     */
    public List<GetBudgetPlannedLimit> plannedLimits() {
        return this.plannedLimits;
    }
    /**
     * @return The end of the time period covered by the budget. There are no restrictions on the end date. Format: `2017-01-01_12:00`.
     * 
     */
    public String timePeriodEnd() {
        return this.timePeriodEnd;
    }
    /**
     * @return The start of the time period covered by the budget. If you don&#39;t specify a start date, AWS defaults to the start of your chosen time period. The start date must come before the end date. Format: `2017-01-01_12:00`.
     * 
     */
    public String timePeriodStart() {
        return this.timePeriodStart;
    }
    /**
     * @return The length of time until a budget resets the actual and forecasted spend. Valid values: `MONTHLY`, `QUARTERLY`, `ANNUALLY`, and `DAILY`.
     * 
     */
    public String timeUnit() {
        return this.timeUnit;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBudgetResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accountId;
        private String arn;
        private List<GetBudgetAutoAdjustData> autoAdjustDatas;
        private Boolean budgetExceeded;
        private List<GetBudgetBudgetLimit> budgetLimits;
        private String budgetType;
        private List<GetBudgetCalculatedSpend> calculatedSpends;
        private List<GetBudgetCostFilter> costFilters;
        private List<GetBudgetCostType> costTypes;
        private String id;
        private String name;
        private @Nullable String namePrefix;
        private List<GetBudgetNotification> notifications;
        private List<GetBudgetPlannedLimit> plannedLimits;
        private String timePeriodEnd;
        private String timePeriodStart;
        private String timeUnit;
        public Builder() {}
        public Builder(GetBudgetResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountId = defaults.accountId;
    	      this.arn = defaults.arn;
    	      this.autoAdjustDatas = defaults.autoAdjustDatas;
    	      this.budgetExceeded = defaults.budgetExceeded;
    	      this.budgetLimits = defaults.budgetLimits;
    	      this.budgetType = defaults.budgetType;
    	      this.calculatedSpends = defaults.calculatedSpends;
    	      this.costFilters = defaults.costFilters;
    	      this.costTypes = defaults.costTypes;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.namePrefix = defaults.namePrefix;
    	      this.notifications = defaults.notifications;
    	      this.plannedLimits = defaults.plannedLimits;
    	      this.timePeriodEnd = defaults.timePeriodEnd;
    	      this.timePeriodStart = defaults.timePeriodStart;
    	      this.timeUnit = defaults.timeUnit;
        }

        @CustomType.Setter
        public Builder accountId(String accountId) {
            if (accountId == null) {
              throw new MissingRequiredPropertyException("GetBudgetResult", "accountId");
            }
            this.accountId = accountId;
            return this;
        }
        @CustomType.Setter
        public Builder arn(String arn) {
            if (arn == null) {
              throw new MissingRequiredPropertyException("GetBudgetResult", "arn");
            }
            this.arn = arn;
            return this;
        }
        @CustomType.Setter
        public Builder autoAdjustDatas(List<GetBudgetAutoAdjustData> autoAdjustDatas) {
            if (autoAdjustDatas == null) {
              throw new MissingRequiredPropertyException("GetBudgetResult", "autoAdjustDatas");
            }
            this.autoAdjustDatas = autoAdjustDatas;
            return this;
        }
        public Builder autoAdjustDatas(GetBudgetAutoAdjustData... autoAdjustDatas) {
            return autoAdjustDatas(List.of(autoAdjustDatas));
        }
        @CustomType.Setter
        public Builder budgetExceeded(Boolean budgetExceeded) {
            if (budgetExceeded == null) {
              throw new MissingRequiredPropertyException("GetBudgetResult", "budgetExceeded");
            }
            this.budgetExceeded = budgetExceeded;
            return this;
        }
        @CustomType.Setter
        public Builder budgetLimits(List<GetBudgetBudgetLimit> budgetLimits) {
            if (budgetLimits == null) {
              throw new MissingRequiredPropertyException("GetBudgetResult", "budgetLimits");
            }
            this.budgetLimits = budgetLimits;
            return this;
        }
        public Builder budgetLimits(GetBudgetBudgetLimit... budgetLimits) {
            return budgetLimits(List.of(budgetLimits));
        }
        @CustomType.Setter
        public Builder budgetType(String budgetType) {
            if (budgetType == null) {
              throw new MissingRequiredPropertyException("GetBudgetResult", "budgetType");
            }
            this.budgetType = budgetType;
            return this;
        }
        @CustomType.Setter
        public Builder calculatedSpends(List<GetBudgetCalculatedSpend> calculatedSpends) {
            if (calculatedSpends == null) {
              throw new MissingRequiredPropertyException("GetBudgetResult", "calculatedSpends");
            }
            this.calculatedSpends = calculatedSpends;
            return this;
        }
        public Builder calculatedSpends(GetBudgetCalculatedSpend... calculatedSpends) {
            return calculatedSpends(List.of(calculatedSpends));
        }
        @CustomType.Setter
        public Builder costFilters(List<GetBudgetCostFilter> costFilters) {
            if (costFilters == null) {
              throw new MissingRequiredPropertyException("GetBudgetResult", "costFilters");
            }
            this.costFilters = costFilters;
            return this;
        }
        public Builder costFilters(GetBudgetCostFilter... costFilters) {
            return costFilters(List.of(costFilters));
        }
        @CustomType.Setter
        public Builder costTypes(List<GetBudgetCostType> costTypes) {
            if (costTypes == null) {
              throw new MissingRequiredPropertyException("GetBudgetResult", "costTypes");
            }
            this.costTypes = costTypes;
            return this;
        }
        public Builder costTypes(GetBudgetCostType... costTypes) {
            return costTypes(List.of(costTypes));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetBudgetResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetBudgetResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder namePrefix(@Nullable String namePrefix) {

            this.namePrefix = namePrefix;
            return this;
        }
        @CustomType.Setter
        public Builder notifications(List<GetBudgetNotification> notifications) {
            if (notifications == null) {
              throw new MissingRequiredPropertyException("GetBudgetResult", "notifications");
            }
            this.notifications = notifications;
            return this;
        }
        public Builder notifications(GetBudgetNotification... notifications) {
            return notifications(List.of(notifications));
        }
        @CustomType.Setter
        public Builder plannedLimits(List<GetBudgetPlannedLimit> plannedLimits) {
            if (plannedLimits == null) {
              throw new MissingRequiredPropertyException("GetBudgetResult", "plannedLimits");
            }
            this.plannedLimits = plannedLimits;
            return this;
        }
        public Builder plannedLimits(GetBudgetPlannedLimit... plannedLimits) {
            return plannedLimits(List.of(plannedLimits));
        }
        @CustomType.Setter
        public Builder timePeriodEnd(String timePeriodEnd) {
            if (timePeriodEnd == null) {
              throw new MissingRequiredPropertyException("GetBudgetResult", "timePeriodEnd");
            }
            this.timePeriodEnd = timePeriodEnd;
            return this;
        }
        @CustomType.Setter
        public Builder timePeriodStart(String timePeriodStart) {
            if (timePeriodStart == null) {
              throw new MissingRequiredPropertyException("GetBudgetResult", "timePeriodStart");
            }
            this.timePeriodStart = timePeriodStart;
            return this;
        }
        @CustomType.Setter
        public Builder timeUnit(String timeUnit) {
            if (timeUnit == null) {
              throw new MissingRequiredPropertyException("GetBudgetResult", "timeUnit");
            }
            this.timeUnit = timeUnit;
            return this;
        }
        public GetBudgetResult build() {
            final var _resultValue = new GetBudgetResult();
            _resultValue.accountId = accountId;
            _resultValue.arn = arn;
            _resultValue.autoAdjustDatas = autoAdjustDatas;
            _resultValue.budgetExceeded = budgetExceeded;
            _resultValue.budgetLimits = budgetLimits;
            _resultValue.budgetType = budgetType;
            _resultValue.calculatedSpends = calculatedSpends;
            _resultValue.costFilters = costFilters;
            _resultValue.costTypes = costTypes;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.namePrefix = namePrefix;
            _resultValue.notifications = notifications;
            _resultValue.plannedLimits = plannedLimits;
            _resultValue.timePeriodEnd = timePeriodEnd;
            _resultValue.timePeriodStart = timePeriodStart;
            _resultValue.timeUnit = timeUnit;
            return _resultValue;
        }
    }
}
