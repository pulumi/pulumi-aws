// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.acmpca.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class CertificateValidityArgs extends com.pulumi.resources.ResourceArgs {

    public static final CertificateValidityArgs Empty = new CertificateValidityArgs();

    /**
     * Determines how `value` is interpreted. Valid values: `DAYS`, `MONTHS`, `YEARS`, `ABSOLUTE`, `END_DATE`.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Determines how `value` is interpreted. Valid values: `DAYS`, `MONTHS`, `YEARS`, `ABSOLUTE`, `END_DATE`.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     * If `type` is `DAYS`, `MONTHS`, or `YEARS`, the relative time until the certificate expires. If `type` is `ABSOLUTE`, the date in seconds since the Unix epoch. If `type` is `END_DATE`, the  date in RFC 3339 format.
     * 
     */
    @Import(name="value", required=true)
    private Output<String> value;

    /**
     * @return If `type` is `DAYS`, `MONTHS`, or `YEARS`, the relative time until the certificate expires. If `type` is `ABSOLUTE`, the date in seconds since the Unix epoch. If `type` is `END_DATE`, the  date in RFC 3339 format.
     * 
     */
    public Output<String> value() {
        return this.value;
    }

    private CertificateValidityArgs() {}

    private CertificateValidityArgs(CertificateValidityArgs $) {
        this.type = $.type;
        this.value = $.value;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CertificateValidityArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CertificateValidityArgs $;

        public Builder() {
            $ = new CertificateValidityArgs();
        }

        public Builder(CertificateValidityArgs defaults) {
            $ = new CertificateValidityArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param type Determines how `value` is interpreted. Valid values: `DAYS`, `MONTHS`, `YEARS`, `ABSOLUTE`, `END_DATE`.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Determines how `value` is interpreted. Valid values: `DAYS`, `MONTHS`, `YEARS`, `ABSOLUTE`, `END_DATE`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param value If `type` is `DAYS`, `MONTHS`, or `YEARS`, the relative time until the certificate expires. If `type` is `ABSOLUTE`, the date in seconds since the Unix epoch. If `type` is `END_DATE`, the  date in RFC 3339 format.
         * 
         * @return builder
         * 
         */
        public Builder value(Output<String> value) {
            $.value = value;
            return this;
        }

        /**
         * @param value If `type` is `DAYS`, `MONTHS`, or `YEARS`, the relative time until the certificate expires. If `type` is `ABSOLUTE`, the date in seconds since the Unix epoch. If `type` is `END_DATE`, the  date in RFC 3339 format.
         * 
         * @return builder
         * 
         */
        public Builder value(String value) {
            return value(Output.of(value));
        }

        public CertificateValidityArgs build() {
            if ($.type == null) {
                throw new MissingRequiredPropertyException("CertificateValidityArgs", "type");
            }
            if ($.value == null) {
                throw new MissingRequiredPropertyException("CertificateValidityArgs", "value");
            }
            return $;
        }
    }

}
