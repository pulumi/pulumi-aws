// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.auditmanager.inputs;

import com.pulumi.aws.auditmanager.inputs.FrameworkControlSetControlArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FrameworkControlSetArgs extends com.pulumi.resources.ResourceArgs {

    public static final FrameworkControlSetArgs Empty = new FrameworkControlSetArgs();

    /**
     * List of controls within the control set. See `controls` below.
     * 
     */
    @Import(name="controls")
    private @Nullable Output<List<FrameworkControlSetControlArgs>> controls;

    /**
     * @return List of controls within the control set. See `controls` below.
     * 
     */
    public Optional<Output<List<FrameworkControlSetControlArgs>>> controls() {
        return Optional.ofNullable(this.controls);
    }

    /**
     * Unique identifier of the control.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return Unique identifier of the control.
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Name of the control set.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Name of the control set.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    private FrameworkControlSetArgs() {}

    private FrameworkControlSetArgs(FrameworkControlSetArgs $) {
        this.controls = $.controls;
        this.id = $.id;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FrameworkControlSetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FrameworkControlSetArgs $;

        public Builder() {
            $ = new FrameworkControlSetArgs();
        }

        public Builder(FrameworkControlSetArgs defaults) {
            $ = new FrameworkControlSetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param controls List of controls within the control set. See `controls` below.
         * 
         * @return builder
         * 
         */
        public Builder controls(@Nullable Output<List<FrameworkControlSetControlArgs>> controls) {
            $.controls = controls;
            return this;
        }

        /**
         * @param controls List of controls within the control set. See `controls` below.
         * 
         * @return builder
         * 
         */
        public Builder controls(List<FrameworkControlSetControlArgs> controls) {
            return controls(Output.of(controls));
        }

        /**
         * @param controls List of controls within the control set. See `controls` below.
         * 
         * @return builder
         * 
         */
        public Builder controls(FrameworkControlSetControlArgs... controls) {
            return controls(List.of(controls));
        }

        /**
         * @param id Unique identifier of the control.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id Unique identifier of the control.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param name Name of the control set.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the control set.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public FrameworkControlSetArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("FrameworkControlSetArgs", "name");
            }
            return $;
        }
    }

}
