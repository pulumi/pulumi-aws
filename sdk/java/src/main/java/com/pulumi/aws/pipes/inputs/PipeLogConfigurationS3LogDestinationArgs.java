// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.pipes.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PipeLogConfigurationS3LogDestinationArgs extends com.pulumi.resources.ResourceArgs {

    public static final PipeLogConfigurationS3LogDestinationArgs Empty = new PipeLogConfigurationS3LogDestinationArgs();

    /**
     * Name of the Amazon S3 bucket to which EventBridge delivers the log records for the pipe.
     * 
     */
    @Import(name="bucketName", required=true)
    private Output<String> bucketName;

    /**
     * @return Name of the Amazon S3 bucket to which EventBridge delivers the log records for the pipe.
     * 
     */
    public Output<String> bucketName() {
        return this.bucketName;
    }

    /**
     * Amazon Web Services account that owns the Amazon S3 bucket to which EventBridge delivers the log records for the pipe.
     * 
     */
    @Import(name="bucketOwner", required=true)
    private Output<String> bucketOwner;

    /**
     * @return Amazon Web Services account that owns the Amazon S3 bucket to which EventBridge delivers the log records for the pipe.
     * 
     */
    public Output<String> bucketOwner() {
        return this.bucketOwner;
    }

    /**
     * EventBridge format for the log records. Valid values `json`, `plain` and `w3c`.
     * 
     */
    @Import(name="outputFormat")
    private @Nullable Output<String> outputFormat;

    /**
     * @return EventBridge format for the log records. Valid values `json`, `plain` and `w3c`.
     * 
     */
    public Optional<Output<String>> outputFormat() {
        return Optional.ofNullable(this.outputFormat);
    }

    /**
     * Prefix text with which to begin Amazon S3 log object names.
     * 
     */
    @Import(name="prefix")
    private @Nullable Output<String> prefix;

    /**
     * @return Prefix text with which to begin Amazon S3 log object names.
     * 
     */
    public Optional<Output<String>> prefix() {
        return Optional.ofNullable(this.prefix);
    }

    private PipeLogConfigurationS3LogDestinationArgs() {}

    private PipeLogConfigurationS3LogDestinationArgs(PipeLogConfigurationS3LogDestinationArgs $) {
        this.bucketName = $.bucketName;
        this.bucketOwner = $.bucketOwner;
        this.outputFormat = $.outputFormat;
        this.prefix = $.prefix;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PipeLogConfigurationS3LogDestinationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PipeLogConfigurationS3LogDestinationArgs $;

        public Builder() {
            $ = new PipeLogConfigurationS3LogDestinationArgs();
        }

        public Builder(PipeLogConfigurationS3LogDestinationArgs defaults) {
            $ = new PipeLogConfigurationS3LogDestinationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bucketName Name of the Amazon S3 bucket to which EventBridge delivers the log records for the pipe.
         * 
         * @return builder
         * 
         */
        public Builder bucketName(Output<String> bucketName) {
            $.bucketName = bucketName;
            return this;
        }

        /**
         * @param bucketName Name of the Amazon S3 bucket to which EventBridge delivers the log records for the pipe.
         * 
         * @return builder
         * 
         */
        public Builder bucketName(String bucketName) {
            return bucketName(Output.of(bucketName));
        }

        /**
         * @param bucketOwner Amazon Web Services account that owns the Amazon S3 bucket to which EventBridge delivers the log records for the pipe.
         * 
         * @return builder
         * 
         */
        public Builder bucketOwner(Output<String> bucketOwner) {
            $.bucketOwner = bucketOwner;
            return this;
        }

        /**
         * @param bucketOwner Amazon Web Services account that owns the Amazon S3 bucket to which EventBridge delivers the log records for the pipe.
         * 
         * @return builder
         * 
         */
        public Builder bucketOwner(String bucketOwner) {
            return bucketOwner(Output.of(bucketOwner));
        }

        /**
         * @param outputFormat EventBridge format for the log records. Valid values `json`, `plain` and `w3c`.
         * 
         * @return builder
         * 
         */
        public Builder outputFormat(@Nullable Output<String> outputFormat) {
            $.outputFormat = outputFormat;
            return this;
        }

        /**
         * @param outputFormat EventBridge format for the log records. Valid values `json`, `plain` and `w3c`.
         * 
         * @return builder
         * 
         */
        public Builder outputFormat(String outputFormat) {
            return outputFormat(Output.of(outputFormat));
        }

        /**
         * @param prefix Prefix text with which to begin Amazon S3 log object names.
         * 
         * @return builder
         * 
         */
        public Builder prefix(@Nullable Output<String> prefix) {
            $.prefix = prefix;
            return this;
        }

        /**
         * @param prefix Prefix text with which to begin Amazon S3 log object names.
         * 
         * @return builder
         * 
         */
        public Builder prefix(String prefix) {
            return prefix(Output.of(prefix));
        }

        public PipeLogConfigurationS3LogDestinationArgs build() {
            if ($.bucketName == null) {
                throw new MissingRequiredPropertyException("PipeLogConfigurationS3LogDestinationArgs", "bucketName");
            }
            if ($.bucketOwner == null) {
                throw new MissingRequiredPropertyException("PipeLogConfigurationS3LogDestinationArgs", "bucketOwner");
            }
            return $;
        }
    }

}
