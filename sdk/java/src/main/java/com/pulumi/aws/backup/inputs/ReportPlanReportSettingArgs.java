// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.backup.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ReportPlanReportSettingArgs extends com.pulumi.resources.ResourceArgs {

    public static final ReportPlanReportSettingArgs Empty = new ReportPlanReportSettingArgs();

    /**
     * Specifies the list of accounts a report covers.
     * 
     */
    @Import(name="accounts")
    private @Nullable Output<List<String>> accounts;

    /**
     * @return Specifies the list of accounts a report covers.
     * 
     */
    public Optional<Output<List<String>>> accounts() {
        return Optional.ofNullable(this.accounts);
    }

    /**
     * Specifies the Amazon Resource Names (ARNs) of the frameworks a report covers.
     * 
     */
    @Import(name="frameworkArns")
    private @Nullable Output<List<String>> frameworkArns;

    /**
     * @return Specifies the Amazon Resource Names (ARNs) of the frameworks a report covers.
     * 
     */
    public Optional<Output<List<String>>> frameworkArns() {
        return Optional.ofNullable(this.frameworkArns);
    }

    /**
     * Specifies the number of frameworks a report covers.
     * 
     */
    @Import(name="numberOfFrameworks")
    private @Nullable Output<Integer> numberOfFrameworks;

    /**
     * @return Specifies the number of frameworks a report covers.
     * 
     */
    public Optional<Output<Integer>> numberOfFrameworks() {
        return Optional.ofNullable(this.numberOfFrameworks);
    }

    /**
     * Specifies the list of Organizational Units a report covers.
     * 
     */
    @Import(name="organizationUnits")
    private @Nullable Output<List<String>> organizationUnits;

    /**
     * @return Specifies the list of Organizational Units a report covers.
     * 
     */
    public Optional<Output<List<String>>> organizationUnits() {
        return Optional.ofNullable(this.organizationUnits);
    }

    /**
     * Specifies the list of regions a report covers.
     * 
     */
    @Import(name="regions")
    private @Nullable Output<List<String>> regions;

    /**
     * @return Specifies the list of regions a report covers.
     * 
     */
    public Optional<Output<List<String>>> regions() {
        return Optional.ofNullable(this.regions);
    }

    /**
     * Identifies the report template for the report. Reports are built using a report template. The report templates are: `RESOURCE_COMPLIANCE_REPORT` | `CONTROL_COMPLIANCE_REPORT` | `BACKUP_JOB_REPORT` | `COPY_JOB_REPORT` | `RESTORE_JOB_REPORT`.
     * 
     */
    @Import(name="reportTemplate", required=true)
    private Output<String> reportTemplate;

    /**
     * @return Identifies the report template for the report. Reports are built using a report template. The report templates are: `RESOURCE_COMPLIANCE_REPORT` | `CONTROL_COMPLIANCE_REPORT` | `BACKUP_JOB_REPORT` | `COPY_JOB_REPORT` | `RESTORE_JOB_REPORT`.
     * 
     */
    public Output<String> reportTemplate() {
        return this.reportTemplate;
    }

    private ReportPlanReportSettingArgs() {}

    private ReportPlanReportSettingArgs(ReportPlanReportSettingArgs $) {
        this.accounts = $.accounts;
        this.frameworkArns = $.frameworkArns;
        this.numberOfFrameworks = $.numberOfFrameworks;
        this.organizationUnits = $.organizationUnits;
        this.regions = $.regions;
        this.reportTemplate = $.reportTemplate;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ReportPlanReportSettingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ReportPlanReportSettingArgs $;

        public Builder() {
            $ = new ReportPlanReportSettingArgs();
        }

        public Builder(ReportPlanReportSettingArgs defaults) {
            $ = new ReportPlanReportSettingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accounts Specifies the list of accounts a report covers.
         * 
         * @return builder
         * 
         */
        public Builder accounts(@Nullable Output<List<String>> accounts) {
            $.accounts = accounts;
            return this;
        }

        /**
         * @param accounts Specifies the list of accounts a report covers.
         * 
         * @return builder
         * 
         */
        public Builder accounts(List<String> accounts) {
            return accounts(Output.of(accounts));
        }

        /**
         * @param accounts Specifies the list of accounts a report covers.
         * 
         * @return builder
         * 
         */
        public Builder accounts(String... accounts) {
            return accounts(List.of(accounts));
        }

        /**
         * @param frameworkArns Specifies the Amazon Resource Names (ARNs) of the frameworks a report covers.
         * 
         * @return builder
         * 
         */
        public Builder frameworkArns(@Nullable Output<List<String>> frameworkArns) {
            $.frameworkArns = frameworkArns;
            return this;
        }

        /**
         * @param frameworkArns Specifies the Amazon Resource Names (ARNs) of the frameworks a report covers.
         * 
         * @return builder
         * 
         */
        public Builder frameworkArns(List<String> frameworkArns) {
            return frameworkArns(Output.of(frameworkArns));
        }

        /**
         * @param frameworkArns Specifies the Amazon Resource Names (ARNs) of the frameworks a report covers.
         * 
         * @return builder
         * 
         */
        public Builder frameworkArns(String... frameworkArns) {
            return frameworkArns(List.of(frameworkArns));
        }

        /**
         * @param numberOfFrameworks Specifies the number of frameworks a report covers.
         * 
         * @return builder
         * 
         */
        public Builder numberOfFrameworks(@Nullable Output<Integer> numberOfFrameworks) {
            $.numberOfFrameworks = numberOfFrameworks;
            return this;
        }

        /**
         * @param numberOfFrameworks Specifies the number of frameworks a report covers.
         * 
         * @return builder
         * 
         */
        public Builder numberOfFrameworks(Integer numberOfFrameworks) {
            return numberOfFrameworks(Output.of(numberOfFrameworks));
        }

        /**
         * @param organizationUnits Specifies the list of Organizational Units a report covers.
         * 
         * @return builder
         * 
         */
        public Builder organizationUnits(@Nullable Output<List<String>> organizationUnits) {
            $.organizationUnits = organizationUnits;
            return this;
        }

        /**
         * @param organizationUnits Specifies the list of Organizational Units a report covers.
         * 
         * @return builder
         * 
         */
        public Builder organizationUnits(List<String> organizationUnits) {
            return organizationUnits(Output.of(organizationUnits));
        }

        /**
         * @param organizationUnits Specifies the list of Organizational Units a report covers.
         * 
         * @return builder
         * 
         */
        public Builder organizationUnits(String... organizationUnits) {
            return organizationUnits(List.of(organizationUnits));
        }

        /**
         * @param regions Specifies the list of regions a report covers.
         * 
         * @return builder
         * 
         */
        public Builder regions(@Nullable Output<List<String>> regions) {
            $.regions = regions;
            return this;
        }

        /**
         * @param regions Specifies the list of regions a report covers.
         * 
         * @return builder
         * 
         */
        public Builder regions(List<String> regions) {
            return regions(Output.of(regions));
        }

        /**
         * @param regions Specifies the list of regions a report covers.
         * 
         * @return builder
         * 
         */
        public Builder regions(String... regions) {
            return regions(List.of(regions));
        }

        /**
         * @param reportTemplate Identifies the report template for the report. Reports are built using a report template. The report templates are: `RESOURCE_COMPLIANCE_REPORT` | `CONTROL_COMPLIANCE_REPORT` | `BACKUP_JOB_REPORT` | `COPY_JOB_REPORT` | `RESTORE_JOB_REPORT`.
         * 
         * @return builder
         * 
         */
        public Builder reportTemplate(Output<String> reportTemplate) {
            $.reportTemplate = reportTemplate;
            return this;
        }

        /**
         * @param reportTemplate Identifies the report template for the report. Reports are built using a report template. The report templates are: `RESOURCE_COMPLIANCE_REPORT` | `CONTROL_COMPLIANCE_REPORT` | `BACKUP_JOB_REPORT` | `COPY_JOB_REPORT` | `RESTORE_JOB_REPORT`.
         * 
         * @return builder
         * 
         */
        public Builder reportTemplate(String reportTemplate) {
            return reportTemplate(Output.of(reportTemplate));
        }

        public ReportPlanReportSettingArgs build() {
            $.reportTemplate = Objects.requireNonNull($.reportTemplate, "expected parameter 'reportTemplate' to be non-null");
            return $;
        }
    }

}
