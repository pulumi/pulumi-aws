// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.location.outputs;

import com.pulumi.aws.location.outputs.GetPlaceIndexDataSourceConfiguration;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetPlaceIndexResult {
    /**
     * @return Timestamp for when the place index resource was created in ISO 8601 format.
     * 
     */
    private String createTime;
    /**
     * @return Data provider of geospatial data.
     * 
     */
    private String dataSource;
    /**
     * @return List of configurations that specify data storage option for requesting Places.
     * 
     */
    private List<GetPlaceIndexDataSourceConfiguration> dataSourceConfigurations;
    /**
     * @return Optional description for the place index resource.
     * 
     */
    private String description;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return ARN for the place index resource.
     * 
     */
    private String indexArn;
    private String indexName;
    /**
     * @return Key-value map of resource tags for the place index.
     * 
     */
    private Map<String,String> tags;
    /**
     * @return Timestamp for when the place index resource was last updated in ISO 8601 format.
     * 
     */
    private String updateTime;

    private GetPlaceIndexResult() {}
    /**
     * @return Timestamp for when the place index resource was created in ISO 8601 format.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return Data provider of geospatial data.
     * 
     */
    public String dataSource() {
        return this.dataSource;
    }
    /**
     * @return List of configurations that specify data storage option for requesting Places.
     * 
     */
    public List<GetPlaceIndexDataSourceConfiguration> dataSourceConfigurations() {
        return this.dataSourceConfigurations;
    }
    /**
     * @return Optional description for the place index resource.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return ARN for the place index resource.
     * 
     */
    public String indexArn() {
        return this.indexArn;
    }
    public String indexName() {
        return this.indexName;
    }
    /**
     * @return Key-value map of resource tags for the place index.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }
    /**
     * @return Timestamp for when the place index resource was last updated in ISO 8601 format.
     * 
     */
    public String updateTime() {
        return this.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPlaceIndexResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String createTime;
        private String dataSource;
        private List<GetPlaceIndexDataSourceConfiguration> dataSourceConfigurations;
        private String description;
        private String id;
        private String indexArn;
        private String indexName;
        private Map<String,String> tags;
        private String updateTime;
        public Builder() {}
        public Builder(GetPlaceIndexResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createTime = defaults.createTime;
    	      this.dataSource = defaults.dataSource;
    	      this.dataSourceConfigurations = defaults.dataSourceConfigurations;
    	      this.description = defaults.description;
    	      this.id = defaults.id;
    	      this.indexArn = defaults.indexArn;
    	      this.indexName = defaults.indexName;
    	      this.tags = defaults.tags;
    	      this.updateTime = defaults.updateTime;
        }

        @CustomType.Setter
        public Builder createTime(String createTime) {
            if (createTime == null) {
              throw new MissingRequiredPropertyException("GetPlaceIndexResult", "createTime");
            }
            this.createTime = createTime;
            return this;
        }
        @CustomType.Setter
        public Builder dataSource(String dataSource) {
            if (dataSource == null) {
              throw new MissingRequiredPropertyException("GetPlaceIndexResult", "dataSource");
            }
            this.dataSource = dataSource;
            return this;
        }
        @CustomType.Setter
        public Builder dataSourceConfigurations(List<GetPlaceIndexDataSourceConfiguration> dataSourceConfigurations) {
            if (dataSourceConfigurations == null) {
              throw new MissingRequiredPropertyException("GetPlaceIndexResult", "dataSourceConfigurations");
            }
            this.dataSourceConfigurations = dataSourceConfigurations;
            return this;
        }
        public Builder dataSourceConfigurations(GetPlaceIndexDataSourceConfiguration... dataSourceConfigurations) {
            return dataSourceConfigurations(List.of(dataSourceConfigurations));
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetPlaceIndexResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetPlaceIndexResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder indexArn(String indexArn) {
            if (indexArn == null) {
              throw new MissingRequiredPropertyException("GetPlaceIndexResult", "indexArn");
            }
            this.indexArn = indexArn;
            return this;
        }
        @CustomType.Setter
        public Builder indexName(String indexName) {
            if (indexName == null) {
              throw new MissingRequiredPropertyException("GetPlaceIndexResult", "indexName");
            }
            this.indexName = indexName;
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetPlaceIndexResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder updateTime(String updateTime) {
            if (updateTime == null) {
              throw new MissingRequiredPropertyException("GetPlaceIndexResult", "updateTime");
            }
            this.updateTime = updateTime;
            return this;
        }
        public GetPlaceIndexResult build() {
            final var _resultValue = new GetPlaceIndexResult();
            _resultValue.createTime = createTime;
            _resultValue.dataSource = dataSource;
            _resultValue.dataSourceConfigurations = dataSourceConfigurations;
            _resultValue.description = description;
            _resultValue.id = id;
            _resultValue.indexArn = indexArn;
            _resultValue.indexName = indexName;
            _resultValue.tags = tags;
            _resultValue.updateTime = updateTime;
            return _resultValue;
        }
    }
}
