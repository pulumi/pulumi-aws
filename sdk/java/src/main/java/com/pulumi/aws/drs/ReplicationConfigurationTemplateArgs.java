// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.drs;

import com.pulumi.aws.drs.inputs.ReplicationConfigurationTemplatePitPolicyArgs;
import com.pulumi.aws.drs.inputs.ReplicationConfigurationTemplateTimeoutsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ReplicationConfigurationTemplateArgs extends com.pulumi.resources.ResourceArgs {

    public static final ReplicationConfigurationTemplateArgs Empty = new ReplicationConfigurationTemplateArgs();

    /**
     * Whether to associate the default Elastic Disaster Recovery Security group with the Replication Configuration Template.
     * 
     */
    @Import(name="associateDefaultSecurityGroup", required=true)
    private Output<Boolean> associateDefaultSecurityGroup;

    /**
     * @return Whether to associate the default Elastic Disaster Recovery Security group with the Replication Configuration Template.
     * 
     */
    public Output<Boolean> associateDefaultSecurityGroup() {
        return this.associateDefaultSecurityGroup;
    }

    /**
     * Whether to allow the AWS replication agent to automatically replicate newly added disks.
     * 
     */
    @Import(name="autoReplicateNewDisks")
    private @Nullable Output<Boolean> autoReplicateNewDisks;

    /**
     * @return Whether to allow the AWS replication agent to automatically replicate newly added disks.
     * 
     */
    public Optional<Output<Boolean>> autoReplicateNewDisks() {
        return Optional.ofNullable(this.autoReplicateNewDisks);
    }

    /**
     * Configure bandwidth throttling for the outbound data transfer rate of the Source Server in Mbps.
     * 
     */
    @Import(name="bandwidthThrottling", required=true)
    private Output<Integer> bandwidthThrottling;

    /**
     * @return Configure bandwidth throttling for the outbound data transfer rate of the Source Server in Mbps.
     * 
     */
    public Output<Integer> bandwidthThrottling() {
        return this.bandwidthThrottling;
    }

    /**
     * Whether to create a Public IP for the Recovery Instance by default.
     * 
     */
    @Import(name="createPublicIp", required=true)
    private Output<Boolean> createPublicIp;

    /**
     * @return Whether to create a Public IP for the Recovery Instance by default.
     * 
     */
    public Output<Boolean> createPublicIp() {
        return this.createPublicIp;
    }

    /**
     * Data plane routing mechanism that will be used for replication. Valid values are `PUBLIC_IP` and `PRIVATE_IP`.
     * 
     */
    @Import(name="dataPlaneRouting", required=true)
    private Output<String> dataPlaneRouting;

    /**
     * @return Data plane routing mechanism that will be used for replication. Valid values are `PUBLIC_IP` and `PRIVATE_IP`.
     * 
     */
    public Output<String> dataPlaneRouting() {
        return this.dataPlaneRouting;
    }

    /**
     * Staging Disk EBS volume type to be used during replication. Valid values are `GP2`, `GP3`, `ST1`, or `AUTO`.
     * 
     */
    @Import(name="defaultLargeStagingDiskType", required=true)
    private Output<String> defaultLargeStagingDiskType;

    /**
     * @return Staging Disk EBS volume type to be used during replication. Valid values are `GP2`, `GP3`, `ST1`, or `AUTO`.
     * 
     */
    public Output<String> defaultLargeStagingDiskType() {
        return this.defaultLargeStagingDiskType;
    }

    /**
     * Type of EBS encryption to be used during replication. Valid values are `DEFAULT` and `CUSTOM`.
     * 
     */
    @Import(name="ebsEncryption", required=true)
    private Output<String> ebsEncryption;

    /**
     * @return Type of EBS encryption to be used during replication. Valid values are `DEFAULT` and `CUSTOM`.
     * 
     */
    public Output<String> ebsEncryption() {
        return this.ebsEncryption;
    }

    /**
     * ARN of the EBS encryption key to be used during replication.
     * 
     */
    @Import(name="ebsEncryptionKeyArn")
    private @Nullable Output<String> ebsEncryptionKeyArn;

    /**
     * @return ARN of the EBS encryption key to be used during replication.
     * 
     */
    public Optional<Output<String>> ebsEncryptionKeyArn() {
        return Optional.ofNullable(this.ebsEncryptionKeyArn);
    }

    /**
     * Configuration block for Point in time (PIT) policy to manage snapshots taken during replication. See below.
     * 
     */
    @Import(name="pitPolicies")
    private @Nullable Output<List<ReplicationConfigurationTemplatePitPolicyArgs>> pitPolicies;

    /**
     * @return Configuration block for Point in time (PIT) policy to manage snapshots taken during replication. See below.
     * 
     */
    public Optional<Output<List<ReplicationConfigurationTemplatePitPolicyArgs>>> pitPolicies() {
        return Optional.ofNullable(this.pitPolicies);
    }

    /**
     * Instance type to be used for the replication server.
     * 
     */
    @Import(name="replicationServerInstanceType", required=true)
    private Output<String> replicationServerInstanceType;

    /**
     * @return Instance type to be used for the replication server.
     * 
     */
    public Output<String> replicationServerInstanceType() {
        return this.replicationServerInstanceType;
    }

    /**
     * Security group IDs that will be used by the replication server.
     * 
     */
    @Import(name="replicationServersSecurityGroupsIds", required=true)
    private Output<List<String>> replicationServersSecurityGroupsIds;

    /**
     * @return Security group IDs that will be used by the replication server.
     * 
     */
    public Output<List<String>> replicationServersSecurityGroupsIds() {
        return this.replicationServersSecurityGroupsIds;
    }

    /**
     * Subnet to be used by the replication staging area.
     * 
     */
    @Import(name="stagingAreaSubnetId", required=true)
    private Output<String> stagingAreaSubnetId;

    /**
     * @return Subnet to be used by the replication staging area.
     * 
     */
    public Output<String> stagingAreaSubnetId() {
        return this.stagingAreaSubnetId;
    }

    /**
     * Set of tags to be associated with all resources created in the replication staging area: EC2 replication server, EBS volumes, EBS snapshots, etc.
     * 
     */
    @Import(name="stagingAreaTags", required=true)
    private Output<Map<String,String>> stagingAreaTags;

    /**
     * @return Set of tags to be associated with all resources created in the replication staging area: EC2 replication server, EBS volumes, EBS snapshots, etc.
     * 
     */
    public Output<Map<String,String>> stagingAreaTags() {
        return this.stagingAreaTags;
    }

    /**
     * Set of tags to be associated with the Replication Configuration Template resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Set of tags to be associated with the Replication Configuration Template resource.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="timeouts")
    private @Nullable Output<ReplicationConfigurationTemplateTimeoutsArgs> timeouts;

    public Optional<Output<ReplicationConfigurationTemplateTimeoutsArgs>> timeouts() {
        return Optional.ofNullable(this.timeouts);
    }

    /**
     * Whether to use a dedicated Replication Server in the replication staging area.
     * 
     * The following arguments are optional:
     * 
     */
    @Import(name="useDedicatedReplicationServer", required=true)
    private Output<Boolean> useDedicatedReplicationServer;

    /**
     * @return Whether to use a dedicated Replication Server in the replication staging area.
     * 
     * The following arguments are optional:
     * 
     */
    public Output<Boolean> useDedicatedReplicationServer() {
        return this.useDedicatedReplicationServer;
    }

    private ReplicationConfigurationTemplateArgs() {}

    private ReplicationConfigurationTemplateArgs(ReplicationConfigurationTemplateArgs $) {
        this.associateDefaultSecurityGroup = $.associateDefaultSecurityGroup;
        this.autoReplicateNewDisks = $.autoReplicateNewDisks;
        this.bandwidthThrottling = $.bandwidthThrottling;
        this.createPublicIp = $.createPublicIp;
        this.dataPlaneRouting = $.dataPlaneRouting;
        this.defaultLargeStagingDiskType = $.defaultLargeStagingDiskType;
        this.ebsEncryption = $.ebsEncryption;
        this.ebsEncryptionKeyArn = $.ebsEncryptionKeyArn;
        this.pitPolicies = $.pitPolicies;
        this.replicationServerInstanceType = $.replicationServerInstanceType;
        this.replicationServersSecurityGroupsIds = $.replicationServersSecurityGroupsIds;
        this.stagingAreaSubnetId = $.stagingAreaSubnetId;
        this.stagingAreaTags = $.stagingAreaTags;
        this.tags = $.tags;
        this.timeouts = $.timeouts;
        this.useDedicatedReplicationServer = $.useDedicatedReplicationServer;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ReplicationConfigurationTemplateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ReplicationConfigurationTemplateArgs $;

        public Builder() {
            $ = new ReplicationConfigurationTemplateArgs();
        }

        public Builder(ReplicationConfigurationTemplateArgs defaults) {
            $ = new ReplicationConfigurationTemplateArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param associateDefaultSecurityGroup Whether to associate the default Elastic Disaster Recovery Security group with the Replication Configuration Template.
         * 
         * @return builder
         * 
         */
        public Builder associateDefaultSecurityGroup(Output<Boolean> associateDefaultSecurityGroup) {
            $.associateDefaultSecurityGroup = associateDefaultSecurityGroup;
            return this;
        }

        /**
         * @param associateDefaultSecurityGroup Whether to associate the default Elastic Disaster Recovery Security group with the Replication Configuration Template.
         * 
         * @return builder
         * 
         */
        public Builder associateDefaultSecurityGroup(Boolean associateDefaultSecurityGroup) {
            return associateDefaultSecurityGroup(Output.of(associateDefaultSecurityGroup));
        }

        /**
         * @param autoReplicateNewDisks Whether to allow the AWS replication agent to automatically replicate newly added disks.
         * 
         * @return builder
         * 
         */
        public Builder autoReplicateNewDisks(@Nullable Output<Boolean> autoReplicateNewDisks) {
            $.autoReplicateNewDisks = autoReplicateNewDisks;
            return this;
        }

        /**
         * @param autoReplicateNewDisks Whether to allow the AWS replication agent to automatically replicate newly added disks.
         * 
         * @return builder
         * 
         */
        public Builder autoReplicateNewDisks(Boolean autoReplicateNewDisks) {
            return autoReplicateNewDisks(Output.of(autoReplicateNewDisks));
        }

        /**
         * @param bandwidthThrottling Configure bandwidth throttling for the outbound data transfer rate of the Source Server in Mbps.
         * 
         * @return builder
         * 
         */
        public Builder bandwidthThrottling(Output<Integer> bandwidthThrottling) {
            $.bandwidthThrottling = bandwidthThrottling;
            return this;
        }

        /**
         * @param bandwidthThrottling Configure bandwidth throttling for the outbound data transfer rate of the Source Server in Mbps.
         * 
         * @return builder
         * 
         */
        public Builder bandwidthThrottling(Integer bandwidthThrottling) {
            return bandwidthThrottling(Output.of(bandwidthThrottling));
        }

        /**
         * @param createPublicIp Whether to create a Public IP for the Recovery Instance by default.
         * 
         * @return builder
         * 
         */
        public Builder createPublicIp(Output<Boolean> createPublicIp) {
            $.createPublicIp = createPublicIp;
            return this;
        }

        /**
         * @param createPublicIp Whether to create a Public IP for the Recovery Instance by default.
         * 
         * @return builder
         * 
         */
        public Builder createPublicIp(Boolean createPublicIp) {
            return createPublicIp(Output.of(createPublicIp));
        }

        /**
         * @param dataPlaneRouting Data plane routing mechanism that will be used for replication. Valid values are `PUBLIC_IP` and `PRIVATE_IP`.
         * 
         * @return builder
         * 
         */
        public Builder dataPlaneRouting(Output<String> dataPlaneRouting) {
            $.dataPlaneRouting = dataPlaneRouting;
            return this;
        }

        /**
         * @param dataPlaneRouting Data plane routing mechanism that will be used for replication. Valid values are `PUBLIC_IP` and `PRIVATE_IP`.
         * 
         * @return builder
         * 
         */
        public Builder dataPlaneRouting(String dataPlaneRouting) {
            return dataPlaneRouting(Output.of(dataPlaneRouting));
        }

        /**
         * @param defaultLargeStagingDiskType Staging Disk EBS volume type to be used during replication. Valid values are `GP2`, `GP3`, `ST1`, or `AUTO`.
         * 
         * @return builder
         * 
         */
        public Builder defaultLargeStagingDiskType(Output<String> defaultLargeStagingDiskType) {
            $.defaultLargeStagingDiskType = defaultLargeStagingDiskType;
            return this;
        }

        /**
         * @param defaultLargeStagingDiskType Staging Disk EBS volume type to be used during replication. Valid values are `GP2`, `GP3`, `ST1`, or `AUTO`.
         * 
         * @return builder
         * 
         */
        public Builder defaultLargeStagingDiskType(String defaultLargeStagingDiskType) {
            return defaultLargeStagingDiskType(Output.of(defaultLargeStagingDiskType));
        }

        /**
         * @param ebsEncryption Type of EBS encryption to be used during replication. Valid values are `DEFAULT` and `CUSTOM`.
         * 
         * @return builder
         * 
         */
        public Builder ebsEncryption(Output<String> ebsEncryption) {
            $.ebsEncryption = ebsEncryption;
            return this;
        }

        /**
         * @param ebsEncryption Type of EBS encryption to be used during replication. Valid values are `DEFAULT` and `CUSTOM`.
         * 
         * @return builder
         * 
         */
        public Builder ebsEncryption(String ebsEncryption) {
            return ebsEncryption(Output.of(ebsEncryption));
        }

        /**
         * @param ebsEncryptionKeyArn ARN of the EBS encryption key to be used during replication.
         * 
         * @return builder
         * 
         */
        public Builder ebsEncryptionKeyArn(@Nullable Output<String> ebsEncryptionKeyArn) {
            $.ebsEncryptionKeyArn = ebsEncryptionKeyArn;
            return this;
        }

        /**
         * @param ebsEncryptionKeyArn ARN of the EBS encryption key to be used during replication.
         * 
         * @return builder
         * 
         */
        public Builder ebsEncryptionKeyArn(String ebsEncryptionKeyArn) {
            return ebsEncryptionKeyArn(Output.of(ebsEncryptionKeyArn));
        }

        /**
         * @param pitPolicies Configuration block for Point in time (PIT) policy to manage snapshots taken during replication. See below.
         * 
         * @return builder
         * 
         */
        public Builder pitPolicies(@Nullable Output<List<ReplicationConfigurationTemplatePitPolicyArgs>> pitPolicies) {
            $.pitPolicies = pitPolicies;
            return this;
        }

        /**
         * @param pitPolicies Configuration block for Point in time (PIT) policy to manage snapshots taken during replication. See below.
         * 
         * @return builder
         * 
         */
        public Builder pitPolicies(List<ReplicationConfigurationTemplatePitPolicyArgs> pitPolicies) {
            return pitPolicies(Output.of(pitPolicies));
        }

        /**
         * @param pitPolicies Configuration block for Point in time (PIT) policy to manage snapshots taken during replication. See below.
         * 
         * @return builder
         * 
         */
        public Builder pitPolicies(ReplicationConfigurationTemplatePitPolicyArgs... pitPolicies) {
            return pitPolicies(List.of(pitPolicies));
        }

        /**
         * @param replicationServerInstanceType Instance type to be used for the replication server.
         * 
         * @return builder
         * 
         */
        public Builder replicationServerInstanceType(Output<String> replicationServerInstanceType) {
            $.replicationServerInstanceType = replicationServerInstanceType;
            return this;
        }

        /**
         * @param replicationServerInstanceType Instance type to be used for the replication server.
         * 
         * @return builder
         * 
         */
        public Builder replicationServerInstanceType(String replicationServerInstanceType) {
            return replicationServerInstanceType(Output.of(replicationServerInstanceType));
        }

        /**
         * @param replicationServersSecurityGroupsIds Security group IDs that will be used by the replication server.
         * 
         * @return builder
         * 
         */
        public Builder replicationServersSecurityGroupsIds(Output<List<String>> replicationServersSecurityGroupsIds) {
            $.replicationServersSecurityGroupsIds = replicationServersSecurityGroupsIds;
            return this;
        }

        /**
         * @param replicationServersSecurityGroupsIds Security group IDs that will be used by the replication server.
         * 
         * @return builder
         * 
         */
        public Builder replicationServersSecurityGroupsIds(List<String> replicationServersSecurityGroupsIds) {
            return replicationServersSecurityGroupsIds(Output.of(replicationServersSecurityGroupsIds));
        }

        /**
         * @param replicationServersSecurityGroupsIds Security group IDs that will be used by the replication server.
         * 
         * @return builder
         * 
         */
        public Builder replicationServersSecurityGroupsIds(String... replicationServersSecurityGroupsIds) {
            return replicationServersSecurityGroupsIds(List.of(replicationServersSecurityGroupsIds));
        }

        /**
         * @param stagingAreaSubnetId Subnet to be used by the replication staging area.
         * 
         * @return builder
         * 
         */
        public Builder stagingAreaSubnetId(Output<String> stagingAreaSubnetId) {
            $.stagingAreaSubnetId = stagingAreaSubnetId;
            return this;
        }

        /**
         * @param stagingAreaSubnetId Subnet to be used by the replication staging area.
         * 
         * @return builder
         * 
         */
        public Builder stagingAreaSubnetId(String stagingAreaSubnetId) {
            return stagingAreaSubnetId(Output.of(stagingAreaSubnetId));
        }

        /**
         * @param stagingAreaTags Set of tags to be associated with all resources created in the replication staging area: EC2 replication server, EBS volumes, EBS snapshots, etc.
         * 
         * @return builder
         * 
         */
        public Builder stagingAreaTags(Output<Map<String,String>> stagingAreaTags) {
            $.stagingAreaTags = stagingAreaTags;
            return this;
        }

        /**
         * @param stagingAreaTags Set of tags to be associated with all resources created in the replication staging area: EC2 replication server, EBS volumes, EBS snapshots, etc.
         * 
         * @return builder
         * 
         */
        public Builder stagingAreaTags(Map<String,String> stagingAreaTags) {
            return stagingAreaTags(Output.of(stagingAreaTags));
        }

        /**
         * @param tags Set of tags to be associated with the Replication Configuration Template resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Set of tags to be associated with the Replication Configuration Template resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder timeouts(@Nullable Output<ReplicationConfigurationTemplateTimeoutsArgs> timeouts) {
            $.timeouts = timeouts;
            return this;
        }

        public Builder timeouts(ReplicationConfigurationTemplateTimeoutsArgs timeouts) {
            return timeouts(Output.of(timeouts));
        }

        /**
         * @param useDedicatedReplicationServer Whether to use a dedicated Replication Server in the replication staging area.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder useDedicatedReplicationServer(Output<Boolean> useDedicatedReplicationServer) {
            $.useDedicatedReplicationServer = useDedicatedReplicationServer;
            return this;
        }

        /**
         * @param useDedicatedReplicationServer Whether to use a dedicated Replication Server in the replication staging area.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder useDedicatedReplicationServer(Boolean useDedicatedReplicationServer) {
            return useDedicatedReplicationServer(Output.of(useDedicatedReplicationServer));
        }

        public ReplicationConfigurationTemplateArgs build() {
            if ($.associateDefaultSecurityGroup == null) {
                throw new MissingRequiredPropertyException("ReplicationConfigurationTemplateArgs", "associateDefaultSecurityGroup");
            }
            if ($.bandwidthThrottling == null) {
                throw new MissingRequiredPropertyException("ReplicationConfigurationTemplateArgs", "bandwidthThrottling");
            }
            if ($.createPublicIp == null) {
                throw new MissingRequiredPropertyException("ReplicationConfigurationTemplateArgs", "createPublicIp");
            }
            if ($.dataPlaneRouting == null) {
                throw new MissingRequiredPropertyException("ReplicationConfigurationTemplateArgs", "dataPlaneRouting");
            }
            if ($.defaultLargeStagingDiskType == null) {
                throw new MissingRequiredPropertyException("ReplicationConfigurationTemplateArgs", "defaultLargeStagingDiskType");
            }
            if ($.ebsEncryption == null) {
                throw new MissingRequiredPropertyException("ReplicationConfigurationTemplateArgs", "ebsEncryption");
            }
            if ($.replicationServerInstanceType == null) {
                throw new MissingRequiredPropertyException("ReplicationConfigurationTemplateArgs", "replicationServerInstanceType");
            }
            if ($.replicationServersSecurityGroupsIds == null) {
                throw new MissingRequiredPropertyException("ReplicationConfigurationTemplateArgs", "replicationServersSecurityGroupsIds");
            }
            if ($.stagingAreaSubnetId == null) {
                throw new MissingRequiredPropertyException("ReplicationConfigurationTemplateArgs", "stagingAreaSubnetId");
            }
            if ($.stagingAreaTags == null) {
                throw new MissingRequiredPropertyException("ReplicationConfigurationTemplateArgs", "stagingAreaTags");
            }
            if ($.useDedicatedReplicationServer == null) {
                throw new MissingRequiredPropertyException("ReplicationConfigurationTemplateArgs", "useDedicatedReplicationServer");
            }
            return $;
        }
    }

}
