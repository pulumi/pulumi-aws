// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.route53.inputs;

import com.pulumi.aws.route53.inputs.ResolverRuleTargetIpArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ResolverRuleState extends com.pulumi.resources.ResourceArgs {

    public static final ResolverRuleState Empty = new ResolverRuleState();

    @Import(name="arn")
    private @Nullable Output<String> arn;

    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    @Import(name="domainName")
    private @Nullable Output<String> domainName;

    public Optional<Output<String>> domainName() {
        return Optional.ofNullable(this.domainName);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="ownerId")
    private @Nullable Output<String> ownerId;

    public Optional<Output<String>> ownerId() {
        return Optional.ofNullable(this.ownerId);
    }

    @Import(name="resolverEndpointId")
    private @Nullable Output<String> resolverEndpointId;

    public Optional<Output<String>> resolverEndpointId() {
        return Optional.ofNullable(this.resolverEndpointId);
    }

    @Import(name="ruleType")
    private @Nullable Output<String> ruleType;

    public Optional<Output<String>> ruleType() {
        return Optional.ofNullable(this.ruleType);
    }

    @Import(name="shareStatus")
    private @Nullable Output<String> shareStatus;

    public Optional<Output<String>> shareStatus() {
        return Optional.ofNullable(this.shareStatus);
    }

    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    @Import(name="targetIps")
    private @Nullable Output<List<ResolverRuleTargetIpArgs>> targetIps;

    public Optional<Output<List<ResolverRuleTargetIpArgs>>> targetIps() {
        return Optional.ofNullable(this.targetIps);
    }

    private ResolverRuleState() {}

    private ResolverRuleState(ResolverRuleState $) {
        this.arn = $.arn;
        this.domainName = $.domainName;
        this.name = $.name;
        this.ownerId = $.ownerId;
        this.resolverEndpointId = $.resolverEndpointId;
        this.ruleType = $.ruleType;
        this.shareStatus = $.shareStatus;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
        this.targetIps = $.targetIps;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ResolverRuleState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ResolverRuleState $;

        public Builder() {
            $ = new ResolverRuleState();
        }

        public Builder(ResolverRuleState defaults) {
            $ = new ResolverRuleState(Objects.requireNonNull(defaults));
        }

        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        public Builder domainName(@Nullable Output<String> domainName) {
            $.domainName = domainName;
            return this;
        }

        public Builder domainName(String domainName) {
            return domainName(Output.of(domainName));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder ownerId(@Nullable Output<String> ownerId) {
            $.ownerId = ownerId;
            return this;
        }

        public Builder ownerId(String ownerId) {
            return ownerId(Output.of(ownerId));
        }

        public Builder resolverEndpointId(@Nullable Output<String> resolverEndpointId) {
            $.resolverEndpointId = resolverEndpointId;
            return this;
        }

        public Builder resolverEndpointId(String resolverEndpointId) {
            return resolverEndpointId(Output.of(resolverEndpointId));
        }

        public Builder ruleType(@Nullable Output<String> ruleType) {
            $.ruleType = ruleType;
            return this;
        }

        public Builder ruleType(String ruleType) {
            return ruleType(Output.of(ruleType));
        }

        public Builder shareStatus(@Nullable Output<String> shareStatus) {
            $.shareStatus = shareStatus;
            return this;
        }

        public Builder shareStatus(String shareStatus) {
            return shareStatus(Output.of(shareStatus));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        public Builder targetIps(@Nullable Output<List<ResolverRuleTargetIpArgs>> targetIps) {
            $.targetIps = targetIps;
            return this;
        }

        public Builder targetIps(List<ResolverRuleTargetIpArgs> targetIps) {
            return targetIps(Output.of(targetIps));
        }

        public Builder targetIps(ResolverRuleTargetIpArgs... targetIps) {
            return targetIps(List.of(targetIps));
        }

        public ResolverRuleState build() {
            return $;
        }
    }

}
