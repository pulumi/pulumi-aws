// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.s3.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BucketLifecycleConfigurationV2RuleNoncurrentVersionTransitionArgs extends com.pulumi.resources.ResourceArgs {

    public static final BucketLifecycleConfigurationV2RuleNoncurrentVersionTransitionArgs Empty = new BucketLifecycleConfigurationV2RuleNoncurrentVersionTransitionArgs();

    /**
     * The number of noncurrent versions Amazon S3 will retain. Must be a non-zero positive integer.
     * 
     */
    @Import(name="newerNoncurrentVersions")
    private @Nullable Output<String> newerNoncurrentVersions;

    /**
     * @return The number of noncurrent versions Amazon S3 will retain. Must be a non-zero positive integer.
     * 
     */
    public Optional<Output<String>> newerNoncurrentVersions() {
        return Optional.ofNullable(this.newerNoncurrentVersions);
    }

    /**
     * The number of days an object is noncurrent before Amazon S3 can perform the associated action.
     * 
     */
    @Import(name="noncurrentDays")
    private @Nullable Output<Integer> noncurrentDays;

    /**
     * @return The number of days an object is noncurrent before Amazon S3 can perform the associated action.
     * 
     */
    public Optional<Output<Integer>> noncurrentDays() {
        return Optional.ofNullable(this.noncurrentDays);
    }

    /**
     * The class of storage used to store the object. Valid Values: `GLACIER`, `STANDARD_IA`, `ONEZONE_IA`, `INTELLIGENT_TIERING`, `DEEP_ARCHIVE`, `GLACIER_IR`.
     * 
     */
    @Import(name="storageClass", required=true)
    private Output<String> storageClass;

    /**
     * @return The class of storage used to store the object. Valid Values: `GLACIER`, `STANDARD_IA`, `ONEZONE_IA`, `INTELLIGENT_TIERING`, `DEEP_ARCHIVE`, `GLACIER_IR`.
     * 
     */
    public Output<String> storageClass() {
        return this.storageClass;
    }

    private BucketLifecycleConfigurationV2RuleNoncurrentVersionTransitionArgs() {}

    private BucketLifecycleConfigurationV2RuleNoncurrentVersionTransitionArgs(BucketLifecycleConfigurationV2RuleNoncurrentVersionTransitionArgs $) {
        this.newerNoncurrentVersions = $.newerNoncurrentVersions;
        this.noncurrentDays = $.noncurrentDays;
        this.storageClass = $.storageClass;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BucketLifecycleConfigurationV2RuleNoncurrentVersionTransitionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BucketLifecycleConfigurationV2RuleNoncurrentVersionTransitionArgs $;

        public Builder() {
            $ = new BucketLifecycleConfigurationV2RuleNoncurrentVersionTransitionArgs();
        }

        public Builder(BucketLifecycleConfigurationV2RuleNoncurrentVersionTransitionArgs defaults) {
            $ = new BucketLifecycleConfigurationV2RuleNoncurrentVersionTransitionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param newerNoncurrentVersions The number of noncurrent versions Amazon S3 will retain. Must be a non-zero positive integer.
         * 
         * @return builder
         * 
         */
        public Builder newerNoncurrentVersions(@Nullable Output<String> newerNoncurrentVersions) {
            $.newerNoncurrentVersions = newerNoncurrentVersions;
            return this;
        }

        /**
         * @param newerNoncurrentVersions The number of noncurrent versions Amazon S3 will retain. Must be a non-zero positive integer.
         * 
         * @return builder
         * 
         */
        public Builder newerNoncurrentVersions(String newerNoncurrentVersions) {
            return newerNoncurrentVersions(Output.of(newerNoncurrentVersions));
        }

        /**
         * @param noncurrentDays The number of days an object is noncurrent before Amazon S3 can perform the associated action.
         * 
         * @return builder
         * 
         */
        public Builder noncurrentDays(@Nullable Output<Integer> noncurrentDays) {
            $.noncurrentDays = noncurrentDays;
            return this;
        }

        /**
         * @param noncurrentDays The number of days an object is noncurrent before Amazon S3 can perform the associated action.
         * 
         * @return builder
         * 
         */
        public Builder noncurrentDays(Integer noncurrentDays) {
            return noncurrentDays(Output.of(noncurrentDays));
        }

        /**
         * @param storageClass The class of storage used to store the object. Valid Values: `GLACIER`, `STANDARD_IA`, `ONEZONE_IA`, `INTELLIGENT_TIERING`, `DEEP_ARCHIVE`, `GLACIER_IR`.
         * 
         * @return builder
         * 
         */
        public Builder storageClass(Output<String> storageClass) {
            $.storageClass = storageClass;
            return this;
        }

        /**
         * @param storageClass The class of storage used to store the object. Valid Values: `GLACIER`, `STANDARD_IA`, `ONEZONE_IA`, `INTELLIGENT_TIERING`, `DEEP_ARCHIVE`, `GLACIER_IR`.
         * 
         * @return builder
         * 
         */
        public Builder storageClass(String storageClass) {
            return storageClass(Output.of(storageClass));
        }

        public BucketLifecycleConfigurationV2RuleNoncurrentVersionTransitionArgs build() {
            $.storageClass = Objects.requireNonNull($.storageClass, "expected parameter 'storageClass' to be non-null");
            return $;
        }
    }

}
