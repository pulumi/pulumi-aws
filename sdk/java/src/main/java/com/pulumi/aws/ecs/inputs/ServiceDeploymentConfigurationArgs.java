// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ecs.inputs;

import com.pulumi.aws.ecs.inputs.ServiceDeploymentConfigurationLifecycleHookArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceDeploymentConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceDeploymentConfigurationArgs Empty = new ServiceDeploymentConfigurationArgs();

    /**
     * Number of minutes to wait after a new deployment is fully provisioned before terminating the old deployment. Only used when `strategy` is set to `BLUE_GREEN`.
     * 
     */
    @Import(name="bakeTimeInMinutes")
    private @Nullable Output<String> bakeTimeInMinutes;

    /**
     * @return Number of minutes to wait after a new deployment is fully provisioned before terminating the old deployment. Only used when `strategy` is set to `BLUE_GREEN`.
     * 
     */
    public Optional<Output<String>> bakeTimeInMinutes() {
        return Optional.ofNullable(this.bakeTimeInMinutes);
    }

    /**
     * Configuration block for lifecycle hooks that are invoked during deployments. See below.
     * 
     */
    @Import(name="lifecycleHooks")
    private @Nullable Output<List<ServiceDeploymentConfigurationLifecycleHookArgs>> lifecycleHooks;

    /**
     * @return Configuration block for lifecycle hooks that are invoked during deployments. See below.
     * 
     */
    public Optional<Output<List<ServiceDeploymentConfigurationLifecycleHookArgs>>> lifecycleHooks() {
        return Optional.ofNullable(this.lifecycleHooks);
    }

    /**
     * Type of deployment strategy. Valid values: `ROLLING`, `BLUE_GREEN`. Default: `ROLLING`.
     * 
     */
    @Import(name="strategy")
    private @Nullable Output<String> strategy;

    /**
     * @return Type of deployment strategy. Valid values: `ROLLING`, `BLUE_GREEN`. Default: `ROLLING`.
     * 
     */
    public Optional<Output<String>> strategy() {
        return Optional.ofNullable(this.strategy);
    }

    private ServiceDeploymentConfigurationArgs() {}

    private ServiceDeploymentConfigurationArgs(ServiceDeploymentConfigurationArgs $) {
        this.bakeTimeInMinutes = $.bakeTimeInMinutes;
        this.lifecycleHooks = $.lifecycleHooks;
        this.strategy = $.strategy;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceDeploymentConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceDeploymentConfigurationArgs $;

        public Builder() {
            $ = new ServiceDeploymentConfigurationArgs();
        }

        public Builder(ServiceDeploymentConfigurationArgs defaults) {
            $ = new ServiceDeploymentConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bakeTimeInMinutes Number of minutes to wait after a new deployment is fully provisioned before terminating the old deployment. Only used when `strategy` is set to `BLUE_GREEN`.
         * 
         * @return builder
         * 
         */
        public Builder bakeTimeInMinutes(@Nullable Output<String> bakeTimeInMinutes) {
            $.bakeTimeInMinutes = bakeTimeInMinutes;
            return this;
        }

        /**
         * @param bakeTimeInMinutes Number of minutes to wait after a new deployment is fully provisioned before terminating the old deployment. Only used when `strategy` is set to `BLUE_GREEN`.
         * 
         * @return builder
         * 
         */
        public Builder bakeTimeInMinutes(String bakeTimeInMinutes) {
            return bakeTimeInMinutes(Output.of(bakeTimeInMinutes));
        }

        /**
         * @param lifecycleHooks Configuration block for lifecycle hooks that are invoked during deployments. See below.
         * 
         * @return builder
         * 
         */
        public Builder lifecycleHooks(@Nullable Output<List<ServiceDeploymentConfigurationLifecycleHookArgs>> lifecycleHooks) {
            $.lifecycleHooks = lifecycleHooks;
            return this;
        }

        /**
         * @param lifecycleHooks Configuration block for lifecycle hooks that are invoked during deployments. See below.
         * 
         * @return builder
         * 
         */
        public Builder lifecycleHooks(List<ServiceDeploymentConfigurationLifecycleHookArgs> lifecycleHooks) {
            return lifecycleHooks(Output.of(lifecycleHooks));
        }

        /**
         * @param lifecycleHooks Configuration block for lifecycle hooks that are invoked during deployments. See below.
         * 
         * @return builder
         * 
         */
        public Builder lifecycleHooks(ServiceDeploymentConfigurationLifecycleHookArgs... lifecycleHooks) {
            return lifecycleHooks(List.of(lifecycleHooks));
        }

        /**
         * @param strategy Type of deployment strategy. Valid values: `ROLLING`, `BLUE_GREEN`. Default: `ROLLING`.
         * 
         * @return builder
         * 
         */
        public Builder strategy(@Nullable Output<String> strategy) {
            $.strategy = strategy;
            return this;
        }

        /**
         * @param strategy Type of deployment strategy. Valid values: `ROLLING`, `BLUE_GREEN`. Default: `ROLLING`.
         * 
         * @return builder
         * 
         */
        public Builder strategy(String strategy) {
            return strategy(Output.of(strategy));
        }

        public ServiceDeploymentConfigurationArgs build() {
            return $;
        }
    }

}
