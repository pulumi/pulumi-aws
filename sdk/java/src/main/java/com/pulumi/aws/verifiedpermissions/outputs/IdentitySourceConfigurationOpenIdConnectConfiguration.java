// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.verifiedpermissions.outputs;

import com.pulumi.aws.verifiedpermissions.outputs.IdentitySourceConfigurationOpenIdConnectConfigurationGroupConfiguration;
import com.pulumi.aws.verifiedpermissions.outputs.IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelection;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class IdentitySourceConfigurationOpenIdConnectConfiguration {
    /**
     * @return A descriptive string that you want to prefix to user entities from your OIDC identity provider.
     * 
     */
    private @Nullable String entityIdPrefix;
    /**
     * @return The type of entity that a policy store maps to groups from an Amazon Cognito user pool identity source. See Group Configuration below.
     * 
     */
    private @Nullable IdentitySourceConfigurationOpenIdConnectConfigurationGroupConfiguration groupConfiguration;
    /**
     * @return The issuer URL of an OIDC identity provider. This URL must have an OIDC discovery endpoint at the path `.well-known/openid-configuration`.
     * 
     */
    private String issuer;
    /**
     * @return The token type that you want to process from your OIDC identity provider. Your policy store can process either identity (ID) or access tokens from a given OIDC identity source. See Token Selection below.
     * 
     */
    private @Nullable IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelection tokenSelection;

    private IdentitySourceConfigurationOpenIdConnectConfiguration() {}
    /**
     * @return A descriptive string that you want to prefix to user entities from your OIDC identity provider.
     * 
     */
    public Optional<String> entityIdPrefix() {
        return Optional.ofNullable(this.entityIdPrefix);
    }
    /**
     * @return The type of entity that a policy store maps to groups from an Amazon Cognito user pool identity source. See Group Configuration below.
     * 
     */
    public Optional<IdentitySourceConfigurationOpenIdConnectConfigurationGroupConfiguration> groupConfiguration() {
        return Optional.ofNullable(this.groupConfiguration);
    }
    /**
     * @return The issuer URL of an OIDC identity provider. This URL must have an OIDC discovery endpoint at the path `.well-known/openid-configuration`.
     * 
     */
    public String issuer() {
        return this.issuer;
    }
    /**
     * @return The token type that you want to process from your OIDC identity provider. Your policy store can process either identity (ID) or access tokens from a given OIDC identity source. See Token Selection below.
     * 
     */
    public Optional<IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelection> tokenSelection() {
        return Optional.ofNullable(this.tokenSelection);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(IdentitySourceConfigurationOpenIdConnectConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String entityIdPrefix;
        private @Nullable IdentitySourceConfigurationOpenIdConnectConfigurationGroupConfiguration groupConfiguration;
        private String issuer;
        private @Nullable IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelection tokenSelection;
        public Builder() {}
        public Builder(IdentitySourceConfigurationOpenIdConnectConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.entityIdPrefix = defaults.entityIdPrefix;
    	      this.groupConfiguration = defaults.groupConfiguration;
    	      this.issuer = defaults.issuer;
    	      this.tokenSelection = defaults.tokenSelection;
        }

        @CustomType.Setter
        public Builder entityIdPrefix(@Nullable String entityIdPrefix) {

            this.entityIdPrefix = entityIdPrefix;
            return this;
        }
        @CustomType.Setter
        public Builder groupConfiguration(@Nullable IdentitySourceConfigurationOpenIdConnectConfigurationGroupConfiguration groupConfiguration) {

            this.groupConfiguration = groupConfiguration;
            return this;
        }
        @CustomType.Setter
        public Builder issuer(String issuer) {
            if (issuer == null) {
              throw new MissingRequiredPropertyException("IdentitySourceConfigurationOpenIdConnectConfiguration", "issuer");
            }
            this.issuer = issuer;
            return this;
        }
        @CustomType.Setter
        public Builder tokenSelection(@Nullable IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelection tokenSelection) {

            this.tokenSelection = tokenSelection;
            return this;
        }
        public IdentitySourceConfigurationOpenIdConnectConfiguration build() {
            final var _resultValue = new IdentitySourceConfigurationOpenIdConnectConfiguration();
            _resultValue.entityIdPrefix = entityIdPrefix;
            _resultValue.groupConfiguration = groupConfiguration;
            _resultValue.issuer = issuer;
            _resultValue.tokenSelection = tokenSelection;
            return _resultValue;
        }
    }
}
