// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.opensearch.inputs;

import com.pulumi.aws.opensearch.inputs.OutboundConnectionConnectionPropertiesCrossClusterSearchArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OutboundConnectionConnectionPropertiesArgs extends com.pulumi.resources.ResourceArgs {

    public static final OutboundConnectionConnectionPropertiesArgs Empty = new OutboundConnectionConnectionPropertiesArgs();

    /**
     * Configuration block for cross cluster search.
     * 
     */
    @Import(name="crossClusterSearch")
    private @Nullable Output<OutboundConnectionConnectionPropertiesCrossClusterSearchArgs> crossClusterSearch;

    /**
     * @return Configuration block for cross cluster search.
     * 
     */
    public Optional<Output<OutboundConnectionConnectionPropertiesCrossClusterSearchArgs>> crossClusterSearch() {
        return Optional.ofNullable(this.crossClusterSearch);
    }

    /**
     * The endpoint of the remote domain, is only set when `connection_mode` is `VPC_ENDPOINT` and `accept_connection` is `TRUE`.
     * 
     */
    @Import(name="endpoint")
    private @Nullable Output<String> endpoint;

    /**
     * @return The endpoint of the remote domain, is only set when `connection_mode` is `VPC_ENDPOINT` and `accept_connection` is `TRUE`.
     * 
     */
    public Optional<Output<String>> endpoint() {
        return Optional.ofNullable(this.endpoint);
    }

    private OutboundConnectionConnectionPropertiesArgs() {}

    private OutboundConnectionConnectionPropertiesArgs(OutboundConnectionConnectionPropertiesArgs $) {
        this.crossClusterSearch = $.crossClusterSearch;
        this.endpoint = $.endpoint;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OutboundConnectionConnectionPropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OutboundConnectionConnectionPropertiesArgs $;

        public Builder() {
            $ = new OutboundConnectionConnectionPropertiesArgs();
        }

        public Builder(OutboundConnectionConnectionPropertiesArgs defaults) {
            $ = new OutboundConnectionConnectionPropertiesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param crossClusterSearch Configuration block for cross cluster search.
         * 
         * @return builder
         * 
         */
        public Builder crossClusterSearch(@Nullable Output<OutboundConnectionConnectionPropertiesCrossClusterSearchArgs> crossClusterSearch) {
            $.crossClusterSearch = crossClusterSearch;
            return this;
        }

        /**
         * @param crossClusterSearch Configuration block for cross cluster search.
         * 
         * @return builder
         * 
         */
        public Builder crossClusterSearch(OutboundConnectionConnectionPropertiesCrossClusterSearchArgs crossClusterSearch) {
            return crossClusterSearch(Output.of(crossClusterSearch));
        }

        /**
         * @param endpoint The endpoint of the remote domain, is only set when `connection_mode` is `VPC_ENDPOINT` and `accept_connection` is `TRUE`.
         * 
         * @return builder
         * 
         */
        public Builder endpoint(@Nullable Output<String> endpoint) {
            $.endpoint = endpoint;
            return this;
        }

        /**
         * @param endpoint The endpoint of the remote domain, is only set when `connection_mode` is `VPC_ENDPOINT` and `accept_connection` is `TRUE`.
         * 
         * @return builder
         * 
         */
        public Builder endpoint(String endpoint) {
            return endpoint(Output.of(endpoint));
        }

        public OutboundConnectionConnectionPropertiesArgs build() {
            return $;
        }
    }

}
