// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.transfer.inputs;

import com.pulumi.aws.transfer.inputs.ServerEndpointDetailsArgs;
import com.pulumi.aws.transfer.inputs.ServerWorkflowDetailsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServerState extends com.pulumi.resources.ResourceArgs {

    public static final ServerState Empty = new ServerState();

    @Import(name="arn")
    private @Nullable Output<String> arn;

    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    @Import(name="certificate")
    private @Nullable Output<String> certificate;

    public Optional<Output<String>> certificate() {
        return Optional.ofNullable(this.certificate);
    }

    @Import(name="directoryId")
    private @Nullable Output<String> directoryId;

    public Optional<Output<String>> directoryId() {
        return Optional.ofNullable(this.directoryId);
    }

    @Import(name="domain")
    private @Nullable Output<String> domain;

    public Optional<Output<String>> domain() {
        return Optional.ofNullable(this.domain);
    }

    @Import(name="endpoint")
    private @Nullable Output<String> endpoint;

    public Optional<Output<String>> endpoint() {
        return Optional.ofNullable(this.endpoint);
    }

    @Import(name="endpointDetails")
    private @Nullable Output<ServerEndpointDetailsArgs> endpointDetails;

    public Optional<Output<ServerEndpointDetailsArgs>> endpointDetails() {
        return Optional.ofNullable(this.endpointDetails);
    }

    @Import(name="endpointType")
    private @Nullable Output<String> endpointType;

    public Optional<Output<String>> endpointType() {
        return Optional.ofNullable(this.endpointType);
    }

    @Import(name="forceDestroy")
    private @Nullable Output<Boolean> forceDestroy;

    public Optional<Output<Boolean>> forceDestroy() {
        return Optional.ofNullable(this.forceDestroy);
    }

    @Import(name="function")
    private @Nullable Output<String> function;

    public Optional<Output<String>> function() {
        return Optional.ofNullable(this.function);
    }

    @Import(name="hostKey")
    private @Nullable Output<String> hostKey;

    public Optional<Output<String>> hostKey() {
        return Optional.ofNullable(this.hostKey);
    }

    @Import(name="hostKeyFingerprint")
    private @Nullable Output<String> hostKeyFingerprint;

    public Optional<Output<String>> hostKeyFingerprint() {
        return Optional.ofNullable(this.hostKeyFingerprint);
    }

    @Import(name="identityProviderType")
    private @Nullable Output<String> identityProviderType;

    public Optional<Output<String>> identityProviderType() {
        return Optional.ofNullable(this.identityProviderType);
    }

    @Import(name="invocationRole")
    private @Nullable Output<String> invocationRole;

    public Optional<Output<String>> invocationRole() {
        return Optional.ofNullable(this.invocationRole);
    }

    @Import(name="loggingRole")
    private @Nullable Output<String> loggingRole;

    public Optional<Output<String>> loggingRole() {
        return Optional.ofNullable(this.loggingRole);
    }

    @Import(name="postAuthenticationLoginBanner")
    private @Nullable Output<String> postAuthenticationLoginBanner;

    public Optional<Output<String>> postAuthenticationLoginBanner() {
        return Optional.ofNullable(this.postAuthenticationLoginBanner);
    }

    @Import(name="preAuthenticationLoginBanner")
    private @Nullable Output<String> preAuthenticationLoginBanner;

    public Optional<Output<String>> preAuthenticationLoginBanner() {
        return Optional.ofNullable(this.preAuthenticationLoginBanner);
    }

    @Import(name="protocols")
    private @Nullable Output<List<String>> protocols;

    public Optional<Output<List<String>>> protocols() {
        return Optional.ofNullable(this.protocols);
    }

    @Import(name="securityPolicyName")
    private @Nullable Output<String> securityPolicyName;

    public Optional<Output<String>> securityPolicyName() {
        return Optional.ofNullable(this.securityPolicyName);
    }

    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    @Import(name="url")
    private @Nullable Output<String> url;

    public Optional<Output<String>> url() {
        return Optional.ofNullable(this.url);
    }

    @Import(name="workflowDetails")
    private @Nullable Output<ServerWorkflowDetailsArgs> workflowDetails;

    public Optional<Output<ServerWorkflowDetailsArgs>> workflowDetails() {
        return Optional.ofNullable(this.workflowDetails);
    }

    private ServerState() {}

    private ServerState(ServerState $) {
        this.arn = $.arn;
        this.certificate = $.certificate;
        this.directoryId = $.directoryId;
        this.domain = $.domain;
        this.endpoint = $.endpoint;
        this.endpointDetails = $.endpointDetails;
        this.endpointType = $.endpointType;
        this.forceDestroy = $.forceDestroy;
        this.function = $.function;
        this.hostKey = $.hostKey;
        this.hostKeyFingerprint = $.hostKeyFingerprint;
        this.identityProviderType = $.identityProviderType;
        this.invocationRole = $.invocationRole;
        this.loggingRole = $.loggingRole;
        this.postAuthenticationLoginBanner = $.postAuthenticationLoginBanner;
        this.preAuthenticationLoginBanner = $.preAuthenticationLoginBanner;
        this.protocols = $.protocols;
        this.securityPolicyName = $.securityPolicyName;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
        this.url = $.url;
        this.workflowDetails = $.workflowDetails;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServerState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServerState $;

        public Builder() {
            $ = new ServerState();
        }

        public Builder(ServerState defaults) {
            $ = new ServerState(Objects.requireNonNull(defaults));
        }

        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        public Builder certificate(@Nullable Output<String> certificate) {
            $.certificate = certificate;
            return this;
        }

        public Builder certificate(String certificate) {
            return certificate(Output.of(certificate));
        }

        public Builder directoryId(@Nullable Output<String> directoryId) {
            $.directoryId = directoryId;
            return this;
        }

        public Builder directoryId(String directoryId) {
            return directoryId(Output.of(directoryId));
        }

        public Builder domain(@Nullable Output<String> domain) {
            $.domain = domain;
            return this;
        }

        public Builder domain(String domain) {
            return domain(Output.of(domain));
        }

        public Builder endpoint(@Nullable Output<String> endpoint) {
            $.endpoint = endpoint;
            return this;
        }

        public Builder endpoint(String endpoint) {
            return endpoint(Output.of(endpoint));
        }

        public Builder endpointDetails(@Nullable Output<ServerEndpointDetailsArgs> endpointDetails) {
            $.endpointDetails = endpointDetails;
            return this;
        }

        public Builder endpointDetails(ServerEndpointDetailsArgs endpointDetails) {
            return endpointDetails(Output.of(endpointDetails));
        }

        public Builder endpointType(@Nullable Output<String> endpointType) {
            $.endpointType = endpointType;
            return this;
        }

        public Builder endpointType(String endpointType) {
            return endpointType(Output.of(endpointType));
        }

        public Builder forceDestroy(@Nullable Output<Boolean> forceDestroy) {
            $.forceDestroy = forceDestroy;
            return this;
        }

        public Builder forceDestroy(Boolean forceDestroy) {
            return forceDestroy(Output.of(forceDestroy));
        }

        public Builder function(@Nullable Output<String> function) {
            $.function = function;
            return this;
        }

        public Builder function(String function) {
            return function(Output.of(function));
        }

        public Builder hostKey(@Nullable Output<String> hostKey) {
            $.hostKey = hostKey;
            return this;
        }

        public Builder hostKey(String hostKey) {
            return hostKey(Output.of(hostKey));
        }

        public Builder hostKeyFingerprint(@Nullable Output<String> hostKeyFingerprint) {
            $.hostKeyFingerprint = hostKeyFingerprint;
            return this;
        }

        public Builder hostKeyFingerprint(String hostKeyFingerprint) {
            return hostKeyFingerprint(Output.of(hostKeyFingerprint));
        }

        public Builder identityProviderType(@Nullable Output<String> identityProviderType) {
            $.identityProviderType = identityProviderType;
            return this;
        }

        public Builder identityProviderType(String identityProviderType) {
            return identityProviderType(Output.of(identityProviderType));
        }

        public Builder invocationRole(@Nullable Output<String> invocationRole) {
            $.invocationRole = invocationRole;
            return this;
        }

        public Builder invocationRole(String invocationRole) {
            return invocationRole(Output.of(invocationRole));
        }

        public Builder loggingRole(@Nullable Output<String> loggingRole) {
            $.loggingRole = loggingRole;
            return this;
        }

        public Builder loggingRole(String loggingRole) {
            return loggingRole(Output.of(loggingRole));
        }

        public Builder postAuthenticationLoginBanner(@Nullable Output<String> postAuthenticationLoginBanner) {
            $.postAuthenticationLoginBanner = postAuthenticationLoginBanner;
            return this;
        }

        public Builder postAuthenticationLoginBanner(String postAuthenticationLoginBanner) {
            return postAuthenticationLoginBanner(Output.of(postAuthenticationLoginBanner));
        }

        public Builder preAuthenticationLoginBanner(@Nullable Output<String> preAuthenticationLoginBanner) {
            $.preAuthenticationLoginBanner = preAuthenticationLoginBanner;
            return this;
        }

        public Builder preAuthenticationLoginBanner(String preAuthenticationLoginBanner) {
            return preAuthenticationLoginBanner(Output.of(preAuthenticationLoginBanner));
        }

        public Builder protocols(@Nullable Output<List<String>> protocols) {
            $.protocols = protocols;
            return this;
        }

        public Builder protocols(List<String> protocols) {
            return protocols(Output.of(protocols));
        }

        public Builder protocols(String... protocols) {
            return protocols(List.of(protocols));
        }

        public Builder securityPolicyName(@Nullable Output<String> securityPolicyName) {
            $.securityPolicyName = securityPolicyName;
            return this;
        }

        public Builder securityPolicyName(String securityPolicyName) {
            return securityPolicyName(Output.of(securityPolicyName));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        public Builder url(@Nullable Output<String> url) {
            $.url = url;
            return this;
        }

        public Builder url(String url) {
            return url(Output.of(url));
        }

        public Builder workflowDetails(@Nullable Output<ServerWorkflowDetailsArgs> workflowDetails) {
            $.workflowDetails = workflowDetails;
            return this;
        }

        public Builder workflowDetails(ServerWorkflowDetailsArgs workflowDetails) {
            return workflowDetails(Output.of(workflowDetails));
        }

        public ServerState build() {
            return $;
        }
    }

}
