// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ec2.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetRouteTableRoute {
    /**
     * @return ID of the Carrier Gateway.
     * 
     */
    private String carrierGatewayId;
    /**
     * @return CIDR block of the route.
     * 
     */
    private String cidrBlock;
    /**
     * @return ARN of the core network.
     * 
     */
    private String coreNetworkArn;
    /**
     * @return The ID of a managed prefix list destination of the route.
     * 
     */
    private String destinationPrefixListId;
    /**
     * @return ID of the Egress Only Internet Gateway.
     * 
     */
    private String egressOnlyGatewayId;
    /**
     * @return ID of an Internet Gateway or Virtual Private Gateway which is connected to the Route Table (not exported if not passed as a parameter).
     * 
     */
    private String gatewayId;
    /**
     * @return EC2 instance ID.
     * 
     */
    private String instanceId;
    /**
     * @return IPv6 CIDR block of the route.
     * 
     */
    private String ipv6CidrBlock;
    /**
     * @return Local Gateway ID.
     * 
     */
    private String localGatewayId;
    /**
     * @return NAT Gateway ID.
     * 
     */
    private String natGatewayId;
    /**
     * @return ID of the elastic network interface (eni) to use.
     * 
     */
    private String networkInterfaceId;
    /**
     * @return EC2 Transit Gateway ID.
     * 
     */
    private String transitGatewayId;
    /**
     * @return VPC Endpoint ID.
     * 
     */
    private String vpcEndpointId;
    /**
     * @return VPC Peering ID.
     * 
     */
    private String vpcPeeringConnectionId;

    private GetRouteTableRoute() {}
    /**
     * @return ID of the Carrier Gateway.
     * 
     */
    public String carrierGatewayId() {
        return this.carrierGatewayId;
    }
    /**
     * @return CIDR block of the route.
     * 
     */
    public String cidrBlock() {
        return this.cidrBlock;
    }
    /**
     * @return ARN of the core network.
     * 
     */
    public String coreNetworkArn() {
        return this.coreNetworkArn;
    }
    /**
     * @return The ID of a managed prefix list destination of the route.
     * 
     */
    public String destinationPrefixListId() {
        return this.destinationPrefixListId;
    }
    /**
     * @return ID of the Egress Only Internet Gateway.
     * 
     */
    public String egressOnlyGatewayId() {
        return this.egressOnlyGatewayId;
    }
    /**
     * @return ID of an Internet Gateway or Virtual Private Gateway which is connected to the Route Table (not exported if not passed as a parameter).
     * 
     */
    public String gatewayId() {
        return this.gatewayId;
    }
    /**
     * @return EC2 instance ID.
     * 
     */
    public String instanceId() {
        return this.instanceId;
    }
    /**
     * @return IPv6 CIDR block of the route.
     * 
     */
    public String ipv6CidrBlock() {
        return this.ipv6CidrBlock;
    }
    /**
     * @return Local Gateway ID.
     * 
     */
    public String localGatewayId() {
        return this.localGatewayId;
    }
    /**
     * @return NAT Gateway ID.
     * 
     */
    public String natGatewayId() {
        return this.natGatewayId;
    }
    /**
     * @return ID of the elastic network interface (eni) to use.
     * 
     */
    public String networkInterfaceId() {
        return this.networkInterfaceId;
    }
    /**
     * @return EC2 Transit Gateway ID.
     * 
     */
    public String transitGatewayId() {
        return this.transitGatewayId;
    }
    /**
     * @return VPC Endpoint ID.
     * 
     */
    public String vpcEndpointId() {
        return this.vpcEndpointId;
    }
    /**
     * @return VPC Peering ID.
     * 
     */
    public String vpcPeeringConnectionId() {
        return this.vpcPeeringConnectionId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRouteTableRoute defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String carrierGatewayId;
        private String cidrBlock;
        private String coreNetworkArn;
        private String destinationPrefixListId;
        private String egressOnlyGatewayId;
        private String gatewayId;
        private String instanceId;
        private String ipv6CidrBlock;
        private String localGatewayId;
        private String natGatewayId;
        private String networkInterfaceId;
        private String transitGatewayId;
        private String vpcEndpointId;
        private String vpcPeeringConnectionId;
        public Builder() {}
        public Builder(GetRouteTableRoute defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.carrierGatewayId = defaults.carrierGatewayId;
    	      this.cidrBlock = defaults.cidrBlock;
    	      this.coreNetworkArn = defaults.coreNetworkArn;
    	      this.destinationPrefixListId = defaults.destinationPrefixListId;
    	      this.egressOnlyGatewayId = defaults.egressOnlyGatewayId;
    	      this.gatewayId = defaults.gatewayId;
    	      this.instanceId = defaults.instanceId;
    	      this.ipv6CidrBlock = defaults.ipv6CidrBlock;
    	      this.localGatewayId = defaults.localGatewayId;
    	      this.natGatewayId = defaults.natGatewayId;
    	      this.networkInterfaceId = defaults.networkInterfaceId;
    	      this.transitGatewayId = defaults.transitGatewayId;
    	      this.vpcEndpointId = defaults.vpcEndpointId;
    	      this.vpcPeeringConnectionId = defaults.vpcPeeringConnectionId;
        }

        @CustomType.Setter
        public Builder carrierGatewayId(String carrierGatewayId) {
            this.carrierGatewayId = Objects.requireNonNull(carrierGatewayId);
            return this;
        }
        @CustomType.Setter
        public Builder cidrBlock(String cidrBlock) {
            this.cidrBlock = Objects.requireNonNull(cidrBlock);
            return this;
        }
        @CustomType.Setter
        public Builder coreNetworkArn(String coreNetworkArn) {
            this.coreNetworkArn = Objects.requireNonNull(coreNetworkArn);
            return this;
        }
        @CustomType.Setter
        public Builder destinationPrefixListId(String destinationPrefixListId) {
            this.destinationPrefixListId = Objects.requireNonNull(destinationPrefixListId);
            return this;
        }
        @CustomType.Setter
        public Builder egressOnlyGatewayId(String egressOnlyGatewayId) {
            this.egressOnlyGatewayId = Objects.requireNonNull(egressOnlyGatewayId);
            return this;
        }
        @CustomType.Setter
        public Builder gatewayId(String gatewayId) {
            this.gatewayId = Objects.requireNonNull(gatewayId);
            return this;
        }
        @CustomType.Setter
        public Builder instanceId(String instanceId) {
            this.instanceId = Objects.requireNonNull(instanceId);
            return this;
        }
        @CustomType.Setter
        public Builder ipv6CidrBlock(String ipv6CidrBlock) {
            this.ipv6CidrBlock = Objects.requireNonNull(ipv6CidrBlock);
            return this;
        }
        @CustomType.Setter
        public Builder localGatewayId(String localGatewayId) {
            this.localGatewayId = Objects.requireNonNull(localGatewayId);
            return this;
        }
        @CustomType.Setter
        public Builder natGatewayId(String natGatewayId) {
            this.natGatewayId = Objects.requireNonNull(natGatewayId);
            return this;
        }
        @CustomType.Setter
        public Builder networkInterfaceId(String networkInterfaceId) {
            this.networkInterfaceId = Objects.requireNonNull(networkInterfaceId);
            return this;
        }
        @CustomType.Setter
        public Builder transitGatewayId(String transitGatewayId) {
            this.transitGatewayId = Objects.requireNonNull(transitGatewayId);
            return this;
        }
        @CustomType.Setter
        public Builder vpcEndpointId(String vpcEndpointId) {
            this.vpcEndpointId = Objects.requireNonNull(vpcEndpointId);
            return this;
        }
        @CustomType.Setter
        public Builder vpcPeeringConnectionId(String vpcPeeringConnectionId) {
            this.vpcPeeringConnectionId = Objects.requireNonNull(vpcPeeringConnectionId);
            return this;
        }
        public GetRouteTableRoute build() {
            final var o = new GetRouteTableRoute();
            o.carrierGatewayId = carrierGatewayId;
            o.cidrBlock = cidrBlock;
            o.coreNetworkArn = coreNetworkArn;
            o.destinationPrefixListId = destinationPrefixListId;
            o.egressOnlyGatewayId = egressOnlyGatewayId;
            o.gatewayId = gatewayId;
            o.instanceId = instanceId;
            o.ipv6CidrBlock = ipv6CidrBlock;
            o.localGatewayId = localGatewayId;
            o.natGatewayId = natGatewayId;
            o.networkInterfaceId = networkInterfaceId;
            o.transitGatewayId = transitGatewayId;
            o.vpcEndpointId = vpcEndpointId;
            o.vpcPeeringConnectionId = vpcPeeringConnectionId;
            return o;
        }
    }
}
