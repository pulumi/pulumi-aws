// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ec2.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class GetSubnetsFilter extends com.pulumi.resources.InvokeArgs {

    public static final GetSubnetsFilter Empty = new GetSubnetsFilter();

    /**
     * Name of the field to filter by, as defined by
     * [the underlying AWS API](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeSubnets.html).
     * For example, if matching against tag `Name`, use:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.ec2.Ec2Functions;
     * import com.pulumi.aws.ec2.inputs.GetSubnetsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var selected = Ec2Functions.getSubnets(GetSubnetsArgs.builder()
     *             .filters(GetSubnetsFilterArgs.builder()
     *                 .name(&#34;tag:Name&#34;)
     *                 .values(&#34;&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return Name of the field to filter by, as defined by
     * [the underlying AWS API](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeSubnets.html).
     * For example, if matching against tag `Name`, use:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.ec2.Ec2Functions;
     * import com.pulumi.aws.ec2.inputs.GetSubnetsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var selected = Ec2Functions.getSubnets(GetSubnetsArgs.builder()
     *             .filters(GetSubnetsFilterArgs.builder()
     *                 .name(&#34;tag:Name&#34;)
     *                 .values(&#34;&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public String name() {
        return this.name;
    }

    /**
     * Set of values that are accepted for the given field.
     * Subnet IDs will be selected if any one of the given values match.
     * 
     */
    @Import(name="values", required=true)
    private List<String> values;

    /**
     * @return Set of values that are accepted for the given field.
     * Subnet IDs will be selected if any one of the given values match.
     * 
     */
    public List<String> values() {
        return this.values;
    }

    private GetSubnetsFilter() {}

    private GetSubnetsFilter(GetSubnetsFilter $) {
        this.name = $.name;
        this.values = $.values;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetSubnetsFilter defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetSubnetsFilter $;

        public Builder() {
            $ = new GetSubnetsFilter();
        }

        public Builder(GetSubnetsFilter defaults) {
            $ = new GetSubnetsFilter(Objects.requireNonNull(defaults));
        }

        /**
         * @param name Name of the field to filter by, as defined by
         * [the underlying AWS API](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeSubnets.html).
         * For example, if matching against tag `Name`, use:
         * ```java
         * package generated_program;
         * 
         * import com.pulumi.Context;
         * import com.pulumi.Pulumi;
         * import com.pulumi.core.Output;
         * import com.pulumi.aws.ec2.Ec2Functions;
         * import com.pulumi.aws.ec2.inputs.GetSubnetsArgs;
         * import java.util.List;
         * import java.util.ArrayList;
         * import java.util.Map;
         * import java.io.File;
         * import java.nio.file.Files;
         * import java.nio.file.Paths;
         * 
         * public class App {
         *     public static void main(String[] args) {
         *         Pulumi.run(App::stack);
         *     }
         * 
         *     public static void stack(Context ctx) {
         *         final var selected = Ec2Functions.getSubnets(GetSubnetsArgs.builder()
         *             .filters(GetSubnetsFilterArgs.builder()
         *                 .name(&#34;tag:Name&#34;)
         *                 .values(&#34;&#34;)
         *                 .build())
         *             .build());
         * 
         *     }
         * }
         * ```
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        /**
         * @param values Set of values that are accepted for the given field.
         * Subnet IDs will be selected if any one of the given values match.
         * 
         * @return builder
         * 
         */
        public Builder values(List<String> values) {
            $.values = values;
            return this;
        }

        /**
         * @param values Set of values that are accepted for the given field.
         * Subnet IDs will be selected if any one of the given values match.
         * 
         * @return builder
         * 
         */
        public Builder values(String... values) {
            return values(List.of(values));
        }

        public GetSubnetsFilter build() {
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.values = Objects.requireNonNull($.values, "expected parameter 'values' to be non-null");
            return $;
        }
    }

}
