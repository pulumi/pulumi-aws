// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConditionalFormattingColorSolidArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConditionalFormattingColorSolidArgs Empty = new ConditionalFormattingColorSolidArgs();

    @Import(name="color")
    private @Nullable Output<String> color;

    public Optional<Output<String>> color() {
        return Optional.ofNullable(this.color);
    }

    @Import(name="expression", required=true)
    private Output<String> expression;

    public Output<String> expression() {
        return this.expression;
    }

    private ConditionalFormattingColorSolidArgs() {}

    private ConditionalFormattingColorSolidArgs(ConditionalFormattingColorSolidArgs $) {
        this.color = $.color;
        this.expression = $.expression;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConditionalFormattingColorSolidArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConditionalFormattingColorSolidArgs $;

        public Builder() {
            $ = new ConditionalFormattingColorSolidArgs();
        }

        public Builder(ConditionalFormattingColorSolidArgs defaults) {
            $ = new ConditionalFormattingColorSolidArgs(Objects.requireNonNull(defaults));
        }

        public Builder color(@Nullable Output<String> color) {
            $.color = color;
            return this;
        }

        public Builder color(String color) {
            return color(Output.of(color));
        }

        public Builder expression(Output<String> expression) {
            $.expression = expression;
            return this;
        }

        public Builder expression(String expression) {
            return expression(Output.of(expression));
        }

        public ConditionalFormattingColorSolidArgs build() {
            if ($.expression == null) {
                throw new MissingRequiredPropertyException("ConditionalFormattingColorSolidArgs", "expression");
            }
            return $;
        }
    }

}
