// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.sagemaker;

import com.pulumi.aws.sagemaker.inputs.FeatureGroupFeatureDefinitionArgs;
import com.pulumi.aws.sagemaker.inputs.FeatureGroupOfflineStoreConfigArgs;
import com.pulumi.aws.sagemaker.inputs.FeatureGroupOnlineStoreConfigArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FeatureGroupArgs extends com.pulumi.resources.ResourceArgs {

    public static final FeatureGroupArgs Empty = new FeatureGroupArgs();

    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="eventTimeFeatureName", required=true)
    private Output<String> eventTimeFeatureName;

    public Output<String> eventTimeFeatureName() {
        return this.eventTimeFeatureName;
    }

    @Import(name="featureDefinitions", required=true)
    private Output<List<FeatureGroupFeatureDefinitionArgs>> featureDefinitions;

    public Output<List<FeatureGroupFeatureDefinitionArgs>> featureDefinitions() {
        return this.featureDefinitions;
    }

    @Import(name="featureGroupName", required=true)
    private Output<String> featureGroupName;

    public Output<String> featureGroupName() {
        return this.featureGroupName;
    }

    @Import(name="offlineStoreConfig")
    private @Nullable Output<FeatureGroupOfflineStoreConfigArgs> offlineStoreConfig;

    public Optional<Output<FeatureGroupOfflineStoreConfigArgs>> offlineStoreConfig() {
        return Optional.ofNullable(this.offlineStoreConfig);
    }

    @Import(name="onlineStoreConfig")
    private @Nullable Output<FeatureGroupOnlineStoreConfigArgs> onlineStoreConfig;

    public Optional<Output<FeatureGroupOnlineStoreConfigArgs>> onlineStoreConfig() {
        return Optional.ofNullable(this.onlineStoreConfig);
    }

    @Import(name="recordIdentifierFeatureName", required=true)
    private Output<String> recordIdentifierFeatureName;

    public Output<String> recordIdentifierFeatureName() {
        return this.recordIdentifierFeatureName;
    }

    @Import(name="roleArn", required=true)
    private Output<String> roleArn;

    public Output<String> roleArn() {
        return this.roleArn;
    }

    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private FeatureGroupArgs() {}

    private FeatureGroupArgs(FeatureGroupArgs $) {
        this.description = $.description;
        this.eventTimeFeatureName = $.eventTimeFeatureName;
        this.featureDefinitions = $.featureDefinitions;
        this.featureGroupName = $.featureGroupName;
        this.offlineStoreConfig = $.offlineStoreConfig;
        this.onlineStoreConfig = $.onlineStoreConfig;
        this.recordIdentifierFeatureName = $.recordIdentifierFeatureName;
        this.roleArn = $.roleArn;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FeatureGroupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FeatureGroupArgs $;

        public Builder() {
            $ = new FeatureGroupArgs();
        }

        public Builder(FeatureGroupArgs defaults) {
            $ = new FeatureGroupArgs(Objects.requireNonNull(defaults));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder eventTimeFeatureName(Output<String> eventTimeFeatureName) {
            $.eventTimeFeatureName = eventTimeFeatureName;
            return this;
        }

        public Builder eventTimeFeatureName(String eventTimeFeatureName) {
            return eventTimeFeatureName(Output.of(eventTimeFeatureName));
        }

        public Builder featureDefinitions(Output<List<FeatureGroupFeatureDefinitionArgs>> featureDefinitions) {
            $.featureDefinitions = featureDefinitions;
            return this;
        }

        public Builder featureDefinitions(List<FeatureGroupFeatureDefinitionArgs> featureDefinitions) {
            return featureDefinitions(Output.of(featureDefinitions));
        }

        public Builder featureDefinitions(FeatureGroupFeatureDefinitionArgs... featureDefinitions) {
            return featureDefinitions(List.of(featureDefinitions));
        }

        public Builder featureGroupName(Output<String> featureGroupName) {
            $.featureGroupName = featureGroupName;
            return this;
        }

        public Builder featureGroupName(String featureGroupName) {
            return featureGroupName(Output.of(featureGroupName));
        }

        public Builder offlineStoreConfig(@Nullable Output<FeatureGroupOfflineStoreConfigArgs> offlineStoreConfig) {
            $.offlineStoreConfig = offlineStoreConfig;
            return this;
        }

        public Builder offlineStoreConfig(FeatureGroupOfflineStoreConfigArgs offlineStoreConfig) {
            return offlineStoreConfig(Output.of(offlineStoreConfig));
        }

        public Builder onlineStoreConfig(@Nullable Output<FeatureGroupOnlineStoreConfigArgs> onlineStoreConfig) {
            $.onlineStoreConfig = onlineStoreConfig;
            return this;
        }

        public Builder onlineStoreConfig(FeatureGroupOnlineStoreConfigArgs onlineStoreConfig) {
            return onlineStoreConfig(Output.of(onlineStoreConfig));
        }

        public Builder recordIdentifierFeatureName(Output<String> recordIdentifierFeatureName) {
            $.recordIdentifierFeatureName = recordIdentifierFeatureName;
            return this;
        }

        public Builder recordIdentifierFeatureName(String recordIdentifierFeatureName) {
            return recordIdentifierFeatureName(Output.of(recordIdentifierFeatureName));
        }

        public Builder roleArn(Output<String> roleArn) {
            $.roleArn = roleArn;
            return this;
        }

        public Builder roleArn(String roleArn) {
            return roleArn(Output.of(roleArn));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public FeatureGroupArgs build() {
            $.eventTimeFeatureName = Objects.requireNonNull($.eventTimeFeatureName, "expected parameter 'eventTimeFeatureName' to be non-null");
            $.featureDefinitions = Objects.requireNonNull($.featureDefinitions, "expected parameter 'featureDefinitions' to be non-null");
            $.featureGroupName = Objects.requireNonNull($.featureGroupName, "expected parameter 'featureGroupName' to be non-null");
            $.recordIdentifierFeatureName = Objects.requireNonNull($.recordIdentifierFeatureName, "expected parameter 'recordIdentifierFeatureName' to be non-null");
            $.roleArn = Objects.requireNonNull($.roleArn, "expected parameter 'roleArn' to be non-null");
            return $;
        }
    }

}
