// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.util.Objects;

@CustomType
public final class VisualsGeospatialMapVisualChartConfigurationWindowOptionsBounds {
    private Double east;
    private Double north;
    private Double south;
    private Double west;

    private VisualsGeospatialMapVisualChartConfigurationWindowOptionsBounds() {}
    public Double east() {
        return this.east;
    }
    public Double north() {
        return this.north;
    }
    public Double south() {
        return this.south;
    }
    public Double west() {
        return this.west;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VisualsGeospatialMapVisualChartConfigurationWindowOptionsBounds defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Double east;
        private Double north;
        private Double south;
        private Double west;
        public Builder() {}
        public Builder(VisualsGeospatialMapVisualChartConfigurationWindowOptionsBounds defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.east = defaults.east;
    	      this.north = defaults.north;
    	      this.south = defaults.south;
    	      this.west = defaults.west;
        }

        @CustomType.Setter
        public Builder east(Double east) {
            if (east == null) {
              throw new MissingRequiredPropertyException("VisualsGeospatialMapVisualChartConfigurationWindowOptionsBounds", "east");
            }
            this.east = east;
            return this;
        }
        @CustomType.Setter
        public Builder north(Double north) {
            if (north == null) {
              throw new MissingRequiredPropertyException("VisualsGeospatialMapVisualChartConfigurationWindowOptionsBounds", "north");
            }
            this.north = north;
            return this;
        }
        @CustomType.Setter
        public Builder south(Double south) {
            if (south == null) {
              throw new MissingRequiredPropertyException("VisualsGeospatialMapVisualChartConfigurationWindowOptionsBounds", "south");
            }
            this.south = south;
            return this;
        }
        @CustomType.Setter
        public Builder west(Double west) {
            if (west == null) {
              throw new MissingRequiredPropertyException("VisualsGeospatialMapVisualChartConfigurationWindowOptionsBounds", "west");
            }
            this.west = west;
            return this;
        }
        public VisualsGeospatialMapVisualChartConfigurationWindowOptionsBounds build() {
            final var _resultValue = new VisualsGeospatialMapVisualChartConfigurationWindowOptionsBounds();
            _resultValue.east = east;
            _resultValue.north = north;
            _resultValue.south = south;
            _resultValue.west = west;
            return _resultValue;
        }
    }
}
