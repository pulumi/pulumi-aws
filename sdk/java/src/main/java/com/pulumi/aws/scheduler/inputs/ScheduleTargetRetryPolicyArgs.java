// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.scheduler.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ScheduleTargetRetryPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final ScheduleTargetRetryPolicyArgs Empty = new ScheduleTargetRetryPolicyArgs();

    /**
     * Maximum amount of time, in seconds, to continue to make retry attempts. Ranges from `60` to `86400` (default).
     * 
     */
    @Import(name="maximumEventAgeInSeconds")
    private @Nullable Output<Integer> maximumEventAgeInSeconds;

    /**
     * @return Maximum amount of time, in seconds, to continue to make retry attempts. Ranges from `60` to `86400` (default).
     * 
     */
    public Optional<Output<Integer>> maximumEventAgeInSeconds() {
        return Optional.ofNullable(this.maximumEventAgeInSeconds);
    }

    /**
     * Maximum number of retry attempts to make before the request fails. Ranges from `0` to `185` (default).
     * 
     */
    @Import(name="maximumRetryAttempts")
    private @Nullable Output<Integer> maximumRetryAttempts;

    /**
     * @return Maximum number of retry attempts to make before the request fails. Ranges from `0` to `185` (default).
     * 
     */
    public Optional<Output<Integer>> maximumRetryAttempts() {
        return Optional.ofNullable(this.maximumRetryAttempts);
    }

    private ScheduleTargetRetryPolicyArgs() {}

    private ScheduleTargetRetryPolicyArgs(ScheduleTargetRetryPolicyArgs $) {
        this.maximumEventAgeInSeconds = $.maximumEventAgeInSeconds;
        this.maximumRetryAttempts = $.maximumRetryAttempts;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ScheduleTargetRetryPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ScheduleTargetRetryPolicyArgs $;

        public Builder() {
            $ = new ScheduleTargetRetryPolicyArgs();
        }

        public Builder(ScheduleTargetRetryPolicyArgs defaults) {
            $ = new ScheduleTargetRetryPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param maximumEventAgeInSeconds Maximum amount of time, in seconds, to continue to make retry attempts. Ranges from `60` to `86400` (default).
         * 
         * @return builder
         * 
         */
        public Builder maximumEventAgeInSeconds(@Nullable Output<Integer> maximumEventAgeInSeconds) {
            $.maximumEventAgeInSeconds = maximumEventAgeInSeconds;
            return this;
        }

        /**
         * @param maximumEventAgeInSeconds Maximum amount of time, in seconds, to continue to make retry attempts. Ranges from `60` to `86400` (default).
         * 
         * @return builder
         * 
         */
        public Builder maximumEventAgeInSeconds(Integer maximumEventAgeInSeconds) {
            return maximumEventAgeInSeconds(Output.of(maximumEventAgeInSeconds));
        }

        /**
         * @param maximumRetryAttempts Maximum number of retry attempts to make before the request fails. Ranges from `0` to `185` (default).
         * 
         * @return builder
         * 
         */
        public Builder maximumRetryAttempts(@Nullable Output<Integer> maximumRetryAttempts) {
            $.maximumRetryAttempts = maximumRetryAttempts;
            return this;
        }

        /**
         * @param maximumRetryAttempts Maximum number of retry attempts to make before the request fails. Ranges from `0` to `185` (default).
         * 
         * @return builder
         * 
         */
        public Builder maximumRetryAttempts(Integer maximumRetryAttempts) {
            return maximumRetryAttempts(Output.of(maximumRetryAttempts));
        }

        public ScheduleTargetRetryPolicyArgs build() {
            return $;
        }
    }

}
