// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.inputs;

import com.pulumi.aws.quicksight.inputs.DataLabelsOptionsDataLabelTypeArgs;
import com.pulumi.aws.quicksight.inputs.FontConfigurationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DataLabelsOptionsArgs extends com.pulumi.resources.ResourceArgs {

    public static final DataLabelsOptionsArgs Empty = new DataLabelsOptionsArgs();

    @Import(name="categoryLabelVisibility")
    private @Nullable Output<String> categoryLabelVisibility;

    public Optional<Output<String>> categoryLabelVisibility() {
        return Optional.ofNullable(this.categoryLabelVisibility);
    }

    @Import(name="dataLabelTypes")
    private @Nullable Output<List<DataLabelsOptionsDataLabelTypeArgs>> dataLabelTypes;

    public Optional<Output<List<DataLabelsOptionsDataLabelTypeArgs>>> dataLabelTypes() {
        return Optional.ofNullable(this.dataLabelTypes);
    }

    @Import(name="labelColor")
    private @Nullable Output<String> labelColor;

    public Optional<Output<String>> labelColor() {
        return Optional.ofNullable(this.labelColor);
    }

    @Import(name="labelContent")
    private @Nullable Output<String> labelContent;

    public Optional<Output<String>> labelContent() {
        return Optional.ofNullable(this.labelContent);
    }

    @Import(name="labelFontConfiguration")
    private @Nullable Output<FontConfigurationArgs> labelFontConfiguration;

    public Optional<Output<FontConfigurationArgs>> labelFontConfiguration() {
        return Optional.ofNullable(this.labelFontConfiguration);
    }

    @Import(name="measureLabelVisibility")
    private @Nullable Output<String> measureLabelVisibility;

    public Optional<Output<String>> measureLabelVisibility() {
        return Optional.ofNullable(this.measureLabelVisibility);
    }

    @Import(name="overlap")
    private @Nullable Output<String> overlap;

    public Optional<Output<String>> overlap() {
        return Optional.ofNullable(this.overlap);
    }

    @Import(name="position")
    private @Nullable Output<String> position;

    public Optional<Output<String>> position() {
        return Optional.ofNullable(this.position);
    }

    @Import(name="visibility")
    private @Nullable Output<String> visibility;

    public Optional<Output<String>> visibility() {
        return Optional.ofNullable(this.visibility);
    }

    private DataLabelsOptionsArgs() {}

    private DataLabelsOptionsArgs(DataLabelsOptionsArgs $) {
        this.categoryLabelVisibility = $.categoryLabelVisibility;
        this.dataLabelTypes = $.dataLabelTypes;
        this.labelColor = $.labelColor;
        this.labelContent = $.labelContent;
        this.labelFontConfiguration = $.labelFontConfiguration;
        this.measureLabelVisibility = $.measureLabelVisibility;
        this.overlap = $.overlap;
        this.position = $.position;
        this.visibility = $.visibility;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DataLabelsOptionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DataLabelsOptionsArgs $;

        public Builder() {
            $ = new DataLabelsOptionsArgs();
        }

        public Builder(DataLabelsOptionsArgs defaults) {
            $ = new DataLabelsOptionsArgs(Objects.requireNonNull(defaults));
        }

        public Builder categoryLabelVisibility(@Nullable Output<String> categoryLabelVisibility) {
            $.categoryLabelVisibility = categoryLabelVisibility;
            return this;
        }

        public Builder categoryLabelVisibility(String categoryLabelVisibility) {
            return categoryLabelVisibility(Output.of(categoryLabelVisibility));
        }

        public Builder dataLabelTypes(@Nullable Output<List<DataLabelsOptionsDataLabelTypeArgs>> dataLabelTypes) {
            $.dataLabelTypes = dataLabelTypes;
            return this;
        }

        public Builder dataLabelTypes(List<DataLabelsOptionsDataLabelTypeArgs> dataLabelTypes) {
            return dataLabelTypes(Output.of(dataLabelTypes));
        }

        public Builder dataLabelTypes(DataLabelsOptionsDataLabelTypeArgs... dataLabelTypes) {
            return dataLabelTypes(List.of(dataLabelTypes));
        }

        public Builder labelColor(@Nullable Output<String> labelColor) {
            $.labelColor = labelColor;
            return this;
        }

        public Builder labelColor(String labelColor) {
            return labelColor(Output.of(labelColor));
        }

        public Builder labelContent(@Nullable Output<String> labelContent) {
            $.labelContent = labelContent;
            return this;
        }

        public Builder labelContent(String labelContent) {
            return labelContent(Output.of(labelContent));
        }

        public Builder labelFontConfiguration(@Nullable Output<FontConfigurationArgs> labelFontConfiguration) {
            $.labelFontConfiguration = labelFontConfiguration;
            return this;
        }

        public Builder labelFontConfiguration(FontConfigurationArgs labelFontConfiguration) {
            return labelFontConfiguration(Output.of(labelFontConfiguration));
        }

        public Builder measureLabelVisibility(@Nullable Output<String> measureLabelVisibility) {
            $.measureLabelVisibility = measureLabelVisibility;
            return this;
        }

        public Builder measureLabelVisibility(String measureLabelVisibility) {
            return measureLabelVisibility(Output.of(measureLabelVisibility));
        }

        public Builder overlap(@Nullable Output<String> overlap) {
            $.overlap = overlap;
            return this;
        }

        public Builder overlap(String overlap) {
            return overlap(Output.of(overlap));
        }

        public Builder position(@Nullable Output<String> position) {
            $.position = position;
            return this;
        }

        public Builder position(String position) {
            return position(Output.of(position));
        }

        public Builder visibility(@Nullable Output<String> visibility) {
            $.visibility = visibility;
            return this;
        }

        public Builder visibility(String visibility) {
            return visibility(Output.of(visibility));
        }

        public DataLabelsOptionsArgs build() {
            return $;
        }
    }

}
