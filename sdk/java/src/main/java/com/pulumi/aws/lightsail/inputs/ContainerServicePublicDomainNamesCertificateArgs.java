// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.lightsail.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class ContainerServicePublicDomainNamesCertificateArgs extends com.pulumi.resources.ResourceArgs {

    public static final ContainerServicePublicDomainNamesCertificateArgs Empty = new ContainerServicePublicDomainNamesCertificateArgs();

    /**
     * Name of the certificate.
     * 
     */
    @Import(name="certificateName", required=true)
    private Output<String> certificateName;

    /**
     * @return Name of the certificate.
     * 
     */
    public Output<String> certificateName() {
        return this.certificateName;
    }

    /**
     * List of domain names for the certificate.
     * 
     */
    @Import(name="domainNames", required=true)
    private Output<List<String>> domainNames;

    /**
     * @return List of domain names for the certificate.
     * 
     */
    public Output<List<String>> domainNames() {
        return this.domainNames;
    }

    private ContainerServicePublicDomainNamesCertificateArgs() {}

    private ContainerServicePublicDomainNamesCertificateArgs(ContainerServicePublicDomainNamesCertificateArgs $) {
        this.certificateName = $.certificateName;
        this.domainNames = $.domainNames;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ContainerServicePublicDomainNamesCertificateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ContainerServicePublicDomainNamesCertificateArgs $;

        public Builder() {
            $ = new ContainerServicePublicDomainNamesCertificateArgs();
        }

        public Builder(ContainerServicePublicDomainNamesCertificateArgs defaults) {
            $ = new ContainerServicePublicDomainNamesCertificateArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificateName Name of the certificate.
         * 
         * @return builder
         * 
         */
        public Builder certificateName(Output<String> certificateName) {
            $.certificateName = certificateName;
            return this;
        }

        /**
         * @param certificateName Name of the certificate.
         * 
         * @return builder
         * 
         */
        public Builder certificateName(String certificateName) {
            return certificateName(Output.of(certificateName));
        }

        /**
         * @param domainNames List of domain names for the certificate.
         * 
         * @return builder
         * 
         */
        public Builder domainNames(Output<List<String>> domainNames) {
            $.domainNames = domainNames;
            return this;
        }

        /**
         * @param domainNames List of domain names for the certificate.
         * 
         * @return builder
         * 
         */
        public Builder domainNames(List<String> domainNames) {
            return domainNames(Output.of(domainNames));
        }

        /**
         * @param domainNames List of domain names for the certificate.
         * 
         * @return builder
         * 
         */
        public Builder domainNames(String... domainNames) {
            return domainNames(List.of(domainNames));
        }

        public ContainerServicePublicDomainNamesCertificateArgs build() {
            if ($.certificateName == null) {
                throw new MissingRequiredPropertyException("ContainerServicePublicDomainNamesCertificateArgs", "certificateName");
            }
            if ($.domainNames == null) {
                throw new MissingRequiredPropertyException("ContainerServicePublicDomainNamesCertificateArgs", "domainNames");
            }
            return $;
        }
    }

}
