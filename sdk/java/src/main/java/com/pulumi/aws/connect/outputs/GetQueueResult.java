// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.connect.outputs;

import com.pulumi.aws.connect.outputs.GetQueueOutboundCallerConfig;
import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetQueueResult {
    /**
     * @return ARN of the Queue.
     * 
     */
    private @Nullable String arn;
    /**
     * @return Description of the Queue.
     * 
     */
    private @Nullable String description;
    /**
     * @return Specifies the identifier of the Hours of Operation.
     * 
     */
    private @Nullable String hoursOfOperationId;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private @Nullable String id;
    private String instanceId;
    /**
     * @return Maximum number of contacts that can be in the queue before it is considered full. Minimum value of 0.
     * 
     */
    private @Nullable Integer maxContacts;
    private @Nullable String name;
    /**
     * @return A block that defines the outbound caller ID name, number, and outbound whisper flow. The Outbound Caller Config block is documented below.
     * 
     */
    private @Nullable List<GetQueueOutboundCallerConfig> outboundCallerConfigs;
    /**
     * @return Identifier for the Queue.
     * 
     */
    private @Nullable String queueId;
    /**
     * @return Description of the Queue. Values are `ENABLED` or `DISABLED`.
     * 
     */
    private @Nullable String status;
    /**
     * @return Map of tags assigned to the Queue.
     * 
     */
    private @Nullable Map<String,String> tags;

    private GetQueueResult() {}
    /**
     * @return ARN of the Queue.
     * 
     */
    public Optional<String> arn() {
        return Optional.ofNullable(this.arn);
    }
    /**
     * @return Description of the Queue.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return Specifies the identifier of the Hours of Operation.
     * 
     */
    public Optional<String> hoursOfOperationId() {
        return Optional.ofNullable(this.hoursOfOperationId);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    public String instanceId() {
        return this.instanceId;
    }
    /**
     * @return Maximum number of contacts that can be in the queue before it is considered full. Minimum value of 0.
     * 
     */
    public Optional<Integer> maxContacts() {
        return Optional.ofNullable(this.maxContacts);
    }
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return A block that defines the outbound caller ID name, number, and outbound whisper flow. The Outbound Caller Config block is documented below.
     * 
     */
    public List<GetQueueOutboundCallerConfig> outboundCallerConfigs() {
        return this.outboundCallerConfigs == null ? List.of() : this.outboundCallerConfigs;
    }
    /**
     * @return Identifier for the Queue.
     * 
     */
    public Optional<String> queueId() {
        return Optional.ofNullable(this.queueId);
    }
    /**
     * @return Description of the Queue. Values are `ENABLED` or `DISABLED`.
     * 
     */
    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }
    /**
     * @return Map of tags assigned to the Queue.
     * 
     */
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetQueueResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String arn;
        private @Nullable String description;
        private @Nullable String hoursOfOperationId;
        private @Nullable String id;
        private String instanceId;
        private @Nullable Integer maxContacts;
        private @Nullable String name;
        private @Nullable List<GetQueueOutboundCallerConfig> outboundCallerConfigs;
        private @Nullable String queueId;
        private @Nullable String status;
        private @Nullable Map<String,String> tags;
        public Builder() {}
        public Builder(GetQueueResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.description = defaults.description;
    	      this.hoursOfOperationId = defaults.hoursOfOperationId;
    	      this.id = defaults.id;
    	      this.instanceId = defaults.instanceId;
    	      this.maxContacts = defaults.maxContacts;
    	      this.name = defaults.name;
    	      this.outboundCallerConfigs = defaults.outboundCallerConfigs;
    	      this.queueId = defaults.queueId;
    	      this.status = defaults.status;
    	      this.tags = defaults.tags;
        }

        @CustomType.Setter
        public Builder arn(@Nullable String arn) {
            this.arn = arn;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder hoursOfOperationId(@Nullable String hoursOfOperationId) {
            this.hoursOfOperationId = hoursOfOperationId;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder instanceId(String instanceId) {
            this.instanceId = Objects.requireNonNull(instanceId);
            return this;
        }
        @CustomType.Setter
        public Builder maxContacts(@Nullable Integer maxContacts) {
            this.maxContacts = maxContacts;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder outboundCallerConfigs(@Nullable List<GetQueueOutboundCallerConfig> outboundCallerConfigs) {
            this.outboundCallerConfigs = outboundCallerConfigs;
            return this;
        }
        public Builder outboundCallerConfigs(GetQueueOutboundCallerConfig... outboundCallerConfigs) {
            return outboundCallerConfigs(List.of(outboundCallerConfigs));
        }
        @CustomType.Setter
        public Builder queueId(@Nullable String queueId) {
            this.queueId = queueId;
            return this;
        }
        @CustomType.Setter
        public Builder status(@Nullable String status) {
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        public GetQueueResult build() {
            final var o = new GetQueueResult();
            o.arn = arn;
            o.description = description;
            o.hoursOfOperationId = hoursOfOperationId;
            o.id = id;
            o.instanceId = instanceId;
            o.maxContacts = maxContacts;
            o.name = name;
            o.outboundCallerConfigs = outboundCallerConfigs;
            o.queueId = queueId;
            o.status = status;
            o.tags = tags;
            return o;
        }
    }
}
