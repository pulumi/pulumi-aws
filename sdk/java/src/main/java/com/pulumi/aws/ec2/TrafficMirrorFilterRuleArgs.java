// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ec2;

import com.pulumi.aws.ec2.inputs.TrafficMirrorFilterRuleDestinationPortRangeArgs;
import com.pulumi.aws.ec2.inputs.TrafficMirrorFilterRuleSourcePortRangeArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TrafficMirrorFilterRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final TrafficMirrorFilterRuleArgs Empty = new TrafficMirrorFilterRuleArgs();

    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="destinationCidrBlock", required=true)
    private Output<String> destinationCidrBlock;

    public Output<String> destinationCidrBlock() {
        return this.destinationCidrBlock;
    }

    @Import(name="destinationPortRange")
    private @Nullable Output<TrafficMirrorFilterRuleDestinationPortRangeArgs> destinationPortRange;

    public Optional<Output<TrafficMirrorFilterRuleDestinationPortRangeArgs>> destinationPortRange() {
        return Optional.ofNullable(this.destinationPortRange);
    }

    @Import(name="protocol")
    private @Nullable Output<Integer> protocol;

    public Optional<Output<Integer>> protocol() {
        return Optional.ofNullable(this.protocol);
    }

    @Import(name="ruleAction", required=true)
    private Output<String> ruleAction;

    public Output<String> ruleAction() {
        return this.ruleAction;
    }

    @Import(name="ruleNumber", required=true)
    private Output<Integer> ruleNumber;

    public Output<Integer> ruleNumber() {
        return this.ruleNumber;
    }

    @Import(name="sourceCidrBlock", required=true)
    private Output<String> sourceCidrBlock;

    public Output<String> sourceCidrBlock() {
        return this.sourceCidrBlock;
    }

    @Import(name="sourcePortRange")
    private @Nullable Output<TrafficMirrorFilterRuleSourcePortRangeArgs> sourcePortRange;

    public Optional<Output<TrafficMirrorFilterRuleSourcePortRangeArgs>> sourcePortRange() {
        return Optional.ofNullable(this.sourcePortRange);
    }

    @Import(name="trafficDirection", required=true)
    private Output<String> trafficDirection;

    public Output<String> trafficDirection() {
        return this.trafficDirection;
    }

    @Import(name="trafficMirrorFilterId", required=true)
    private Output<String> trafficMirrorFilterId;

    public Output<String> trafficMirrorFilterId() {
        return this.trafficMirrorFilterId;
    }

    private TrafficMirrorFilterRuleArgs() {}

    private TrafficMirrorFilterRuleArgs(TrafficMirrorFilterRuleArgs $) {
        this.description = $.description;
        this.destinationCidrBlock = $.destinationCidrBlock;
        this.destinationPortRange = $.destinationPortRange;
        this.protocol = $.protocol;
        this.ruleAction = $.ruleAction;
        this.ruleNumber = $.ruleNumber;
        this.sourceCidrBlock = $.sourceCidrBlock;
        this.sourcePortRange = $.sourcePortRange;
        this.trafficDirection = $.trafficDirection;
        this.trafficMirrorFilterId = $.trafficMirrorFilterId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TrafficMirrorFilterRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TrafficMirrorFilterRuleArgs $;

        public Builder() {
            $ = new TrafficMirrorFilterRuleArgs();
        }

        public Builder(TrafficMirrorFilterRuleArgs defaults) {
            $ = new TrafficMirrorFilterRuleArgs(Objects.requireNonNull(defaults));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder destinationCidrBlock(Output<String> destinationCidrBlock) {
            $.destinationCidrBlock = destinationCidrBlock;
            return this;
        }

        public Builder destinationCidrBlock(String destinationCidrBlock) {
            return destinationCidrBlock(Output.of(destinationCidrBlock));
        }

        public Builder destinationPortRange(@Nullable Output<TrafficMirrorFilterRuleDestinationPortRangeArgs> destinationPortRange) {
            $.destinationPortRange = destinationPortRange;
            return this;
        }

        public Builder destinationPortRange(TrafficMirrorFilterRuleDestinationPortRangeArgs destinationPortRange) {
            return destinationPortRange(Output.of(destinationPortRange));
        }

        public Builder protocol(@Nullable Output<Integer> protocol) {
            $.protocol = protocol;
            return this;
        }

        public Builder protocol(Integer protocol) {
            return protocol(Output.of(protocol));
        }

        public Builder ruleAction(Output<String> ruleAction) {
            $.ruleAction = ruleAction;
            return this;
        }

        public Builder ruleAction(String ruleAction) {
            return ruleAction(Output.of(ruleAction));
        }

        public Builder ruleNumber(Output<Integer> ruleNumber) {
            $.ruleNumber = ruleNumber;
            return this;
        }

        public Builder ruleNumber(Integer ruleNumber) {
            return ruleNumber(Output.of(ruleNumber));
        }

        public Builder sourceCidrBlock(Output<String> sourceCidrBlock) {
            $.sourceCidrBlock = sourceCidrBlock;
            return this;
        }

        public Builder sourceCidrBlock(String sourceCidrBlock) {
            return sourceCidrBlock(Output.of(sourceCidrBlock));
        }

        public Builder sourcePortRange(@Nullable Output<TrafficMirrorFilterRuleSourcePortRangeArgs> sourcePortRange) {
            $.sourcePortRange = sourcePortRange;
            return this;
        }

        public Builder sourcePortRange(TrafficMirrorFilterRuleSourcePortRangeArgs sourcePortRange) {
            return sourcePortRange(Output.of(sourcePortRange));
        }

        public Builder trafficDirection(Output<String> trafficDirection) {
            $.trafficDirection = trafficDirection;
            return this;
        }

        public Builder trafficDirection(String trafficDirection) {
            return trafficDirection(Output.of(trafficDirection));
        }

        public Builder trafficMirrorFilterId(Output<String> trafficMirrorFilterId) {
            $.trafficMirrorFilterId = trafficMirrorFilterId;
            return this;
        }

        public Builder trafficMirrorFilterId(String trafficMirrorFilterId) {
            return trafficMirrorFilterId(Output.of(trafficMirrorFilterId));
        }

        public TrafficMirrorFilterRuleArgs build() {
            $.destinationCidrBlock = Objects.requireNonNull($.destinationCidrBlock, "expected parameter 'destinationCidrBlock' to be non-null");
            $.ruleAction = Objects.requireNonNull($.ruleAction, "expected parameter 'ruleAction' to be non-null");
            $.ruleNumber = Objects.requireNonNull($.ruleNumber, "expected parameter 'ruleNumber' to be non-null");
            $.sourceCidrBlock = Objects.requireNonNull($.sourceCidrBlock, "expected parameter 'sourceCidrBlock' to be non-null");
            $.trafficDirection = Objects.requireNonNull($.trafficDirection, "expected parameter 'trafficDirection' to be non-null");
            $.trafficMirrorFilterId = Objects.requireNonNull($.trafficMirrorFilterId, "expected parameter 'trafficMirrorFilterId' to be non-null");
            return $;
        }
    }

}
