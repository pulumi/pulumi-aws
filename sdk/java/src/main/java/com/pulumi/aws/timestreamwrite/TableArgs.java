// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.timestreamwrite;

import com.pulumi.aws.timestreamwrite.inputs.TableMagneticStoreWritePropertiesArgs;
import com.pulumi.aws.timestreamwrite.inputs.TableRetentionPropertiesArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TableArgs extends com.pulumi.resources.ResourceArgs {

    public static final TableArgs Empty = new TableArgs();

    @Import(name="databaseName", required=true)
    private Output<String> databaseName;

    public Output<String> databaseName() {
        return this.databaseName;
    }

    @Import(name="magneticStoreWriteProperties")
    private @Nullable Output<TableMagneticStoreWritePropertiesArgs> magneticStoreWriteProperties;

    public Optional<Output<TableMagneticStoreWritePropertiesArgs>> magneticStoreWriteProperties() {
        return Optional.ofNullable(this.magneticStoreWriteProperties);
    }

    @Import(name="retentionProperties")
    private @Nullable Output<TableRetentionPropertiesArgs> retentionProperties;

    public Optional<Output<TableRetentionPropertiesArgs>> retentionProperties() {
        return Optional.ofNullable(this.retentionProperties);
    }

    @Import(name="tableName", required=true)
    private Output<String> tableName;

    public Output<String> tableName() {
        return this.tableName;
    }

    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private TableArgs() {}

    private TableArgs(TableArgs $) {
        this.databaseName = $.databaseName;
        this.magneticStoreWriteProperties = $.magneticStoreWriteProperties;
        this.retentionProperties = $.retentionProperties;
        this.tableName = $.tableName;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TableArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TableArgs $;

        public Builder() {
            $ = new TableArgs();
        }

        public Builder(TableArgs defaults) {
            $ = new TableArgs(Objects.requireNonNull(defaults));
        }

        public Builder databaseName(Output<String> databaseName) {
            $.databaseName = databaseName;
            return this;
        }

        public Builder databaseName(String databaseName) {
            return databaseName(Output.of(databaseName));
        }

        public Builder magneticStoreWriteProperties(@Nullable Output<TableMagneticStoreWritePropertiesArgs> magneticStoreWriteProperties) {
            $.magneticStoreWriteProperties = magneticStoreWriteProperties;
            return this;
        }

        public Builder magneticStoreWriteProperties(TableMagneticStoreWritePropertiesArgs magneticStoreWriteProperties) {
            return magneticStoreWriteProperties(Output.of(magneticStoreWriteProperties));
        }

        public Builder retentionProperties(@Nullable Output<TableRetentionPropertiesArgs> retentionProperties) {
            $.retentionProperties = retentionProperties;
            return this;
        }

        public Builder retentionProperties(TableRetentionPropertiesArgs retentionProperties) {
            return retentionProperties(Output.of(retentionProperties));
        }

        public Builder tableName(Output<String> tableName) {
            $.tableName = tableName;
            return this;
        }

        public Builder tableName(String tableName) {
            return tableName(Output.of(tableName));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public TableArgs build() {
            $.databaseName = Objects.requireNonNull($.databaseName, "expected parameter 'databaseName' to be non-null");
            $.tableName = Objects.requireNonNull($.tableName, "expected parameter 'tableName' to be non-null");
            return $;
        }
    }

}
