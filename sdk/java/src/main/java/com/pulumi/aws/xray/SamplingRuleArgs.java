// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.xray;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SamplingRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final SamplingRuleArgs Empty = new SamplingRuleArgs();

    @Import(name="attributes")
    private @Nullable Output<Map<String,String>> attributes;

    public Optional<Output<Map<String,String>>> attributes() {
        return Optional.ofNullable(this.attributes);
    }

    @Import(name="fixedRate", required=true)
    private Output<Double> fixedRate;

    public Output<Double> fixedRate() {
        return this.fixedRate;
    }

    @Import(name="host", required=true)
    private Output<String> host;

    public Output<String> host() {
        return this.host;
    }

    @Import(name="httpMethod", required=true)
    private Output<String> httpMethod;

    public Output<String> httpMethod() {
        return this.httpMethod;
    }

    @Import(name="priority", required=true)
    private Output<Integer> priority;

    public Output<Integer> priority() {
        return this.priority;
    }

    @Import(name="reservoirSize", required=true)
    private Output<Integer> reservoirSize;

    public Output<Integer> reservoirSize() {
        return this.reservoirSize;
    }

    @Import(name="resourceArn", required=true)
    private Output<String> resourceArn;

    public Output<String> resourceArn() {
        return this.resourceArn;
    }

    @Import(name="ruleName")
    private @Nullable Output<String> ruleName;

    public Optional<Output<String>> ruleName() {
        return Optional.ofNullable(this.ruleName);
    }

    @Import(name="serviceName", required=true)
    private Output<String> serviceName;

    public Output<String> serviceName() {
        return this.serviceName;
    }

    @Import(name="serviceType", required=true)
    private Output<String> serviceType;

    public Output<String> serviceType() {
        return this.serviceType;
    }

    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="urlPath", required=true)
    private Output<String> urlPath;

    public Output<String> urlPath() {
        return this.urlPath;
    }

    @Import(name="version", required=true)
    private Output<Integer> version;

    public Output<Integer> version() {
        return this.version;
    }

    private SamplingRuleArgs() {}

    private SamplingRuleArgs(SamplingRuleArgs $) {
        this.attributes = $.attributes;
        this.fixedRate = $.fixedRate;
        this.host = $.host;
        this.httpMethod = $.httpMethod;
        this.priority = $.priority;
        this.reservoirSize = $.reservoirSize;
        this.resourceArn = $.resourceArn;
        this.ruleName = $.ruleName;
        this.serviceName = $.serviceName;
        this.serviceType = $.serviceType;
        this.tags = $.tags;
        this.urlPath = $.urlPath;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SamplingRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SamplingRuleArgs $;

        public Builder() {
            $ = new SamplingRuleArgs();
        }

        public Builder(SamplingRuleArgs defaults) {
            $ = new SamplingRuleArgs(Objects.requireNonNull(defaults));
        }

        public Builder attributes(@Nullable Output<Map<String,String>> attributes) {
            $.attributes = attributes;
            return this;
        }

        public Builder attributes(Map<String,String> attributes) {
            return attributes(Output.of(attributes));
        }

        public Builder fixedRate(Output<Double> fixedRate) {
            $.fixedRate = fixedRate;
            return this;
        }

        public Builder fixedRate(Double fixedRate) {
            return fixedRate(Output.of(fixedRate));
        }

        public Builder host(Output<String> host) {
            $.host = host;
            return this;
        }

        public Builder host(String host) {
            return host(Output.of(host));
        }

        public Builder httpMethod(Output<String> httpMethod) {
            $.httpMethod = httpMethod;
            return this;
        }

        public Builder httpMethod(String httpMethod) {
            return httpMethod(Output.of(httpMethod));
        }

        public Builder priority(Output<Integer> priority) {
            $.priority = priority;
            return this;
        }

        public Builder priority(Integer priority) {
            return priority(Output.of(priority));
        }

        public Builder reservoirSize(Output<Integer> reservoirSize) {
            $.reservoirSize = reservoirSize;
            return this;
        }

        public Builder reservoirSize(Integer reservoirSize) {
            return reservoirSize(Output.of(reservoirSize));
        }

        public Builder resourceArn(Output<String> resourceArn) {
            $.resourceArn = resourceArn;
            return this;
        }

        public Builder resourceArn(String resourceArn) {
            return resourceArn(Output.of(resourceArn));
        }

        public Builder ruleName(@Nullable Output<String> ruleName) {
            $.ruleName = ruleName;
            return this;
        }

        public Builder ruleName(String ruleName) {
            return ruleName(Output.of(ruleName));
        }

        public Builder serviceName(Output<String> serviceName) {
            $.serviceName = serviceName;
            return this;
        }

        public Builder serviceName(String serviceName) {
            return serviceName(Output.of(serviceName));
        }

        public Builder serviceType(Output<String> serviceType) {
            $.serviceType = serviceType;
            return this;
        }

        public Builder serviceType(String serviceType) {
            return serviceType(Output.of(serviceType));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder urlPath(Output<String> urlPath) {
            $.urlPath = urlPath;
            return this;
        }

        public Builder urlPath(String urlPath) {
            return urlPath(Output.of(urlPath));
        }

        public Builder version(Output<Integer> version) {
            $.version = version;
            return this;
        }

        public Builder version(Integer version) {
            return version(Output.of(version));
        }

        public SamplingRuleArgs build() {
            $.fixedRate = Objects.requireNonNull($.fixedRate, "expected parameter 'fixedRate' to be non-null");
            $.host = Objects.requireNonNull($.host, "expected parameter 'host' to be non-null");
            $.httpMethod = Objects.requireNonNull($.httpMethod, "expected parameter 'httpMethod' to be non-null");
            $.priority = Objects.requireNonNull($.priority, "expected parameter 'priority' to be non-null");
            $.reservoirSize = Objects.requireNonNull($.reservoirSize, "expected parameter 'reservoirSize' to be non-null");
            $.resourceArn = Objects.requireNonNull($.resourceArn, "expected parameter 'resourceArn' to be non-null");
            $.serviceName = Objects.requireNonNull($.serviceName, "expected parameter 'serviceName' to be non-null");
            $.serviceType = Objects.requireNonNull($.serviceType, "expected parameter 'serviceType' to be non-null");
            $.urlPath = Objects.requireNonNull($.urlPath, "expected parameter 'urlPath' to be non-null");
            $.version = Objects.requireNonNull($.version, "expected parameter 'version' to be non-null");
            return $;
        }
    }

}
