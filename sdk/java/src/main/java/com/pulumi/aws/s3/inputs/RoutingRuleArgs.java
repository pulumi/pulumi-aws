// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.s3.inputs;

import com.pulumi.aws.s3.inputs.ConditionArgs;
import com.pulumi.aws.s3.inputs.RedirectArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A rule that identifies a condition and the redirect that is applied when the condition is met. If a condition is not included, the rule is applied to all requests.
 * 
 */
public final class RoutingRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final RoutingRuleArgs Empty = new RoutingRuleArgs();

    /**
     * A condition that must be met for the specified redirect to be applied. If not included, the rule is applied to all requests.
     * 
     */
    @Import(name="Condition")
    private @Nullable Output<ConditionArgs> Condition;

    /**
     * @return A condition that must be met for the specified redirect to be applied. If not included, the rule is applied to all requests.
     * 
     */
    public Optional<Output<ConditionArgs>> Condition() {
        return Optional.ofNullable(this.Condition);
    }

    /**
     * Provides instructions for redirecting the request. You can redirect requests to another host or another page, or you can specify another protocol to use.
     * 
     */
    @Import(name="Redirect", required=true)
    private Output<RedirectArgs> Redirect;

    /**
     * @return Provides instructions for redirecting the request. You can redirect requests to another host or another page, or you can specify another protocol to use.
     * 
     */
    public Output<RedirectArgs> Redirect() {
        return this.Redirect;
    }

    private RoutingRuleArgs() {}

    private RoutingRuleArgs(RoutingRuleArgs $) {
        this.Condition = $.Condition;
        this.Redirect = $.Redirect;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RoutingRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RoutingRuleArgs $;

        public Builder() {
            $ = new RoutingRuleArgs();
        }

        public Builder(RoutingRuleArgs defaults) {
            $ = new RoutingRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param Condition A condition that must be met for the specified redirect to be applied. If not included, the rule is applied to all requests.
         * 
         * @return builder
         * 
         */
        public Builder Condition(@Nullable Output<ConditionArgs> Condition) {
            $.Condition = Condition;
            return this;
        }

        /**
         * @param Condition A condition that must be met for the specified redirect to be applied. If not included, the rule is applied to all requests.
         * 
         * @return builder
         * 
         */
        public Builder Condition(ConditionArgs Condition) {
            return Condition(Output.of(Condition));
        }

        /**
         * @param Redirect Provides instructions for redirecting the request. You can redirect requests to another host or another page, or you can specify another protocol to use.
         * 
         * @return builder
         * 
         */
        public Builder Redirect(Output<RedirectArgs> Redirect) {
            $.Redirect = Redirect;
            return this;
        }

        /**
         * @param Redirect Provides instructions for redirecting the request. You can redirect requests to another host or another page, or you can specify another protocol to use.
         * 
         * @return builder
         * 
         */
        public Builder Redirect(RedirectArgs Redirect) {
            return Redirect(Output.of(Redirect));
        }

        public RoutingRuleArgs build() {
            if ($.Redirect == null) {
                throw new MissingRequiredPropertyException("RoutingRuleArgs", "Redirect");
            }
            return $;
        }
    }

}
