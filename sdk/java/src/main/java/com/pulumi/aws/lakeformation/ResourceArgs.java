// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.lakeformation;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ResourceArgs extends com.pulumi.resources.ResourceArgs {

    public static final ResourceArgs Empty = new ResourceArgs();

    /**
     * Amazon Resource Name (ARN) of the resource.
     * 
     * The following arguments are optional:
     * 
     */
    @Import(name="arn", required=true)
    private Output<String> arn;

    /**
     * @return Amazon Resource Name (ARN) of the resource.
     * 
     * The following arguments are optional:
     * 
     */
    public Output<String> arn() {
        return this.arn;
    }

    /**
     * Flag to enable AWS LakeFormation hybrid access permission mode.
     * 
     */
    @Import(name="hybridAccessEnabled")
    private @Nullable Output<Boolean> hybridAccessEnabled;

    /**
     * @return Flag to enable AWS LakeFormation hybrid access permission mode.
     * 
     */
    public Optional<Output<Boolean>> hybridAccessEnabled() {
        return Optional.ofNullable(this.hybridAccessEnabled);
    }

    /**
     * Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * Role that has read/write access to the resource.
     * 
     */
    @Import(name="roleArn")
    private @Nullable Output<String> roleArn;

    /**
     * @return Role that has read/write access to the resource.
     * 
     */
    public Optional<Output<String>> roleArn() {
        return Optional.ofNullable(this.roleArn);
    }

    /**
     * Designates an AWS Identity and Access Management (IAM) service-linked role by registering this role with the Data Catalog.
     * 
     */
    @Import(name="useServiceLinkedRole")
    private @Nullable Output<Boolean> useServiceLinkedRole;

    /**
     * @return Designates an AWS Identity and Access Management (IAM) service-linked role by registering this role with the Data Catalog.
     * 
     */
    public Optional<Output<Boolean>> useServiceLinkedRole() {
        return Optional.ofNullable(this.useServiceLinkedRole);
    }

    /**
     * Whether or not the resource is a federated resource. Set to true when registering AWS Glue connections for federated catalog functionality.
     * 
     */
    @Import(name="withFederation")
    private @Nullable Output<Boolean> withFederation;

    /**
     * @return Whether or not the resource is a federated resource. Set to true when registering AWS Glue connections for federated catalog functionality.
     * 
     */
    public Optional<Output<Boolean>> withFederation() {
        return Optional.ofNullable(this.withFederation);
    }

    /**
     * Boolean to grant the calling principal the permissions to perform all supported Lake Formation operations on the registered data location.
     * 
     * &gt; **NOTE:** AWS does not support registering an S3 location with an IAM role and subsequently updating the S3 location registration to a service-linked role.
     * 
     */
    @Import(name="withPrivilegedAccess")
    private @Nullable Output<Boolean> withPrivilegedAccess;

    /**
     * @return Boolean to grant the calling principal the permissions to perform all supported Lake Formation operations on the registered data location.
     * 
     * &gt; **NOTE:** AWS does not support registering an S3 location with an IAM role and subsequently updating the S3 location registration to a service-linked role.
     * 
     */
    public Optional<Output<Boolean>> withPrivilegedAccess() {
        return Optional.ofNullable(this.withPrivilegedAccess);
    }

    private ResourceArgs() {}

    private ResourceArgs(ResourceArgs $) {
        this.arn = $.arn;
        this.hybridAccessEnabled = $.hybridAccessEnabled;
        this.region = $.region;
        this.roleArn = $.roleArn;
        this.useServiceLinkedRole = $.useServiceLinkedRole;
        this.withFederation = $.withFederation;
        this.withPrivilegedAccess = $.withPrivilegedAccess;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ResourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ResourceArgs $;

        public Builder() {
            $ = new ResourceArgs();
        }

        public Builder(ResourceArgs defaults) {
            $ = new ResourceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param arn Amazon Resource Name (ARN) of the resource.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder arn(Output<String> arn) {
            $.arn = arn;
            return this;
        }

        /**
         * @param arn Amazon Resource Name (ARN) of the resource.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        /**
         * @param hybridAccessEnabled Flag to enable AWS LakeFormation hybrid access permission mode.
         * 
         * @return builder
         * 
         */
        public Builder hybridAccessEnabled(@Nullable Output<Boolean> hybridAccessEnabled) {
            $.hybridAccessEnabled = hybridAccessEnabled;
            return this;
        }

        /**
         * @param hybridAccessEnabled Flag to enable AWS LakeFormation hybrid access permission mode.
         * 
         * @return builder
         * 
         */
        public Builder hybridAccessEnabled(Boolean hybridAccessEnabled) {
            return hybridAccessEnabled(Output.of(hybridAccessEnabled));
        }

        /**
         * @param region Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param roleArn Role that has read/write access to the resource.
         * 
         * @return builder
         * 
         */
        public Builder roleArn(@Nullable Output<String> roleArn) {
            $.roleArn = roleArn;
            return this;
        }

        /**
         * @param roleArn Role that has read/write access to the resource.
         * 
         * @return builder
         * 
         */
        public Builder roleArn(String roleArn) {
            return roleArn(Output.of(roleArn));
        }

        /**
         * @param useServiceLinkedRole Designates an AWS Identity and Access Management (IAM) service-linked role by registering this role with the Data Catalog.
         * 
         * @return builder
         * 
         */
        public Builder useServiceLinkedRole(@Nullable Output<Boolean> useServiceLinkedRole) {
            $.useServiceLinkedRole = useServiceLinkedRole;
            return this;
        }

        /**
         * @param useServiceLinkedRole Designates an AWS Identity and Access Management (IAM) service-linked role by registering this role with the Data Catalog.
         * 
         * @return builder
         * 
         */
        public Builder useServiceLinkedRole(Boolean useServiceLinkedRole) {
            return useServiceLinkedRole(Output.of(useServiceLinkedRole));
        }

        /**
         * @param withFederation Whether or not the resource is a federated resource. Set to true when registering AWS Glue connections for federated catalog functionality.
         * 
         * @return builder
         * 
         */
        public Builder withFederation(@Nullable Output<Boolean> withFederation) {
            $.withFederation = withFederation;
            return this;
        }

        /**
         * @param withFederation Whether or not the resource is a federated resource. Set to true when registering AWS Glue connections for federated catalog functionality.
         * 
         * @return builder
         * 
         */
        public Builder withFederation(Boolean withFederation) {
            return withFederation(Output.of(withFederation));
        }

        /**
         * @param withPrivilegedAccess Boolean to grant the calling principal the permissions to perform all supported Lake Formation operations on the registered data location.
         * 
         * &gt; **NOTE:** AWS does not support registering an S3 location with an IAM role and subsequently updating the S3 location registration to a service-linked role.
         * 
         * @return builder
         * 
         */
        public Builder withPrivilegedAccess(@Nullable Output<Boolean> withPrivilegedAccess) {
            $.withPrivilegedAccess = withPrivilegedAccess;
            return this;
        }

        /**
         * @param withPrivilegedAccess Boolean to grant the calling principal the permissions to perform all supported Lake Formation operations on the registered data location.
         * 
         * &gt; **NOTE:** AWS does not support registering an S3 location with an IAM role and subsequently updating the S3 location registration to a service-linked role.
         * 
         * @return builder
         * 
         */
        public Builder withPrivilegedAccess(Boolean withPrivilegedAccess) {
            return withPrivilegedAccess(Output.of(withPrivilegedAccess));
        }

        public ResourceArgs build() {
            if ($.arn == null) {
                throw new MissingRequiredPropertyException("ResourceArgs", "arn");
            }
            return $;
        }
    }

}
