// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.workspaces.inputs;

import com.pulumi.aws.workspaces.inputs.WebUserSettingsCookieSynchronizationConfigurationArgs;
import com.pulumi.aws.workspaces.inputs.WebUserSettingsToolbarConfigurationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WebUserSettingsState extends com.pulumi.resources.ResourceArgs {

    public static final WebUserSettingsState Empty = new WebUserSettingsState();

    /**
     * Additional encryption context for the user settings.
     * 
     */
    @Import(name="additionalEncryptionContext")
    private @Nullable Output<Map<String,String>> additionalEncryptionContext;

    /**
     * @return Additional encryption context for the user settings.
     * 
     */
    public Optional<Output<Map<String,String>>> additionalEncryptionContext() {
        return Optional.ofNullable(this.additionalEncryptionContext);
    }

    /**
     * List of web portal ARNs to associate with the user settings.
     * 
     */
    @Import(name="associatedPortalArns")
    private @Nullable Output<List<String>> associatedPortalArns;

    /**
     * @return List of web portal ARNs to associate with the user settings.
     * 
     */
    public Optional<Output<List<String>>> associatedPortalArns() {
        return Optional.ofNullable(this.associatedPortalArns);
    }

    /**
     * Configuration that specifies which cookies should be synchronized from the end user&#39;s local browser to the remote browser. Detailed below.
     * 
     */
    @Import(name="cookieSynchronizationConfiguration")
    private @Nullable Output<WebUserSettingsCookieSynchronizationConfigurationArgs> cookieSynchronizationConfiguration;

    /**
     * @return Configuration that specifies which cookies should be synchronized from the end user&#39;s local browser to the remote browser. Detailed below.
     * 
     */
    public Optional<Output<WebUserSettingsCookieSynchronizationConfigurationArgs>> cookieSynchronizationConfiguration() {
        return Optional.ofNullable(this.cookieSynchronizationConfiguration);
    }

    /**
     * Specifies whether the user can copy text from the streaming session to the local device. Valid values are `Enabled` or `Disabled`.
     * 
     */
    @Import(name="copyAllowed")
    private @Nullable Output<String> copyAllowed;

    /**
     * @return Specifies whether the user can copy text from the streaming session to the local device. Valid values are `Enabled` or `Disabled`.
     * 
     */
    public Optional<Output<String>> copyAllowed() {
        return Optional.ofNullable(this.copyAllowed);
    }

    /**
     * ARN of the customer managed KMS key.
     * 
     */
    @Import(name="customerManagedKey")
    private @Nullable Output<String> customerManagedKey;

    /**
     * @return ARN of the customer managed KMS key.
     * 
     */
    public Optional<Output<String>> customerManagedKey() {
        return Optional.ofNullable(this.customerManagedKey);
    }

    /**
     * Specifies whether the user can use deep links that open automatically when connecting to a session. Valid values are `Enabled` or `Disabled`.
     * 
     */
    @Import(name="deepLinkAllowed")
    private @Nullable Output<String> deepLinkAllowed;

    /**
     * @return Specifies whether the user can use deep links that open automatically when connecting to a session. Valid values are `Enabled` or `Disabled`.
     * 
     */
    public Optional<Output<String>> deepLinkAllowed() {
        return Optional.ofNullable(this.deepLinkAllowed);
    }

    /**
     * Amount of time that a streaming session remains active after users disconnect. Value must be between 1 and 600 minutes.
     * 
     */
    @Import(name="disconnectTimeoutInMinutes")
    private @Nullable Output<Integer> disconnectTimeoutInMinutes;

    /**
     * @return Amount of time that a streaming session remains active after users disconnect. Value must be between 1 and 600 minutes.
     * 
     */
    public Optional<Output<Integer>> disconnectTimeoutInMinutes() {
        return Optional.ofNullable(this.disconnectTimeoutInMinutes);
    }

    /**
     * Specifies whether the user can download files from the streaming session to the local device. Valid values are `Enabled` or `Disabled`.
     * 
     */
    @Import(name="downloadAllowed")
    private @Nullable Output<String> downloadAllowed;

    /**
     * @return Specifies whether the user can download files from the streaming session to the local device. Valid values are `Enabled` or `Disabled`.
     * 
     */
    public Optional<Output<String>> downloadAllowed() {
        return Optional.ofNullable(this.downloadAllowed);
    }

    /**
     * Amount of time that users can be idle before they are disconnected from their streaming session. Value must be between 0 and 60 minutes.
     * 
     */
    @Import(name="idleDisconnectTimeoutInMinutes")
    private @Nullable Output<Integer> idleDisconnectTimeoutInMinutes;

    /**
     * @return Amount of time that users can be idle before they are disconnected from their streaming session. Value must be between 0 and 60 minutes.
     * 
     */
    public Optional<Output<Integer>> idleDisconnectTimeoutInMinutes() {
        return Optional.ofNullable(this.idleDisconnectTimeoutInMinutes);
    }

    /**
     * Specifies whether the user can paste text from the local device to the streaming session. Valid values are `Enabled` or `Disabled`.
     * 
     */
    @Import(name="pasteAllowed")
    private @Nullable Output<String> pasteAllowed;

    /**
     * @return Specifies whether the user can paste text from the local device to the streaming session. Valid values are `Enabled` or `Disabled`.
     * 
     */
    public Optional<Output<String>> pasteAllowed() {
        return Optional.ofNullable(this.pasteAllowed);
    }

    /**
     * Specifies whether the user can print to the local device. Valid values are `Enabled` or `Disabled`.
     * 
     */
    @Import(name="printAllowed")
    private @Nullable Output<String> printAllowed;

    /**
     * @return Specifies whether the user can print to the local device. Valid values are `Enabled` or `Disabled`.
     * 
     */
    public Optional<Output<String>> printAllowed() {
        return Optional.ofNullable(this.printAllowed);
    }

    /**
     * Map of tags assigned to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Map of tags assigned to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    /**
     * @return Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    /**
     * Configuration of the toolbar. Detailed below.
     * 
     */
    @Import(name="toolbarConfiguration")
    private @Nullable Output<WebUserSettingsToolbarConfigurationArgs> toolbarConfiguration;

    /**
     * @return Configuration of the toolbar. Detailed below.
     * 
     */
    public Optional<Output<WebUserSettingsToolbarConfigurationArgs>> toolbarConfiguration() {
        return Optional.ofNullable(this.toolbarConfiguration);
    }

    /**
     * Specifies whether the user can upload files from the local device to the streaming session. Valid values are `Enabled` or `Disabled`.
     * 
     * The following arguments are optional:
     * 
     */
    @Import(name="uploadAllowed")
    private @Nullable Output<String> uploadAllowed;

    /**
     * @return Specifies whether the user can upload files from the local device to the streaming session. Valid values are `Enabled` or `Disabled`.
     * 
     * The following arguments are optional:
     * 
     */
    public Optional<Output<String>> uploadAllowed() {
        return Optional.ofNullable(this.uploadAllowed);
    }

    /**
     * ARN of the user settings resource.
     * 
     */
    @Import(name="userSettingsArn")
    private @Nullable Output<String> userSettingsArn;

    /**
     * @return ARN of the user settings resource.
     * 
     */
    public Optional<Output<String>> userSettingsArn() {
        return Optional.ofNullable(this.userSettingsArn);
    }

    private WebUserSettingsState() {}

    private WebUserSettingsState(WebUserSettingsState $) {
        this.additionalEncryptionContext = $.additionalEncryptionContext;
        this.associatedPortalArns = $.associatedPortalArns;
        this.cookieSynchronizationConfiguration = $.cookieSynchronizationConfiguration;
        this.copyAllowed = $.copyAllowed;
        this.customerManagedKey = $.customerManagedKey;
        this.deepLinkAllowed = $.deepLinkAllowed;
        this.disconnectTimeoutInMinutes = $.disconnectTimeoutInMinutes;
        this.downloadAllowed = $.downloadAllowed;
        this.idleDisconnectTimeoutInMinutes = $.idleDisconnectTimeoutInMinutes;
        this.pasteAllowed = $.pasteAllowed;
        this.printAllowed = $.printAllowed;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
        this.toolbarConfiguration = $.toolbarConfiguration;
        this.uploadAllowed = $.uploadAllowed;
        this.userSettingsArn = $.userSettingsArn;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WebUserSettingsState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WebUserSettingsState $;

        public Builder() {
            $ = new WebUserSettingsState();
        }

        public Builder(WebUserSettingsState defaults) {
            $ = new WebUserSettingsState(Objects.requireNonNull(defaults));
        }

        /**
         * @param additionalEncryptionContext Additional encryption context for the user settings.
         * 
         * @return builder
         * 
         */
        public Builder additionalEncryptionContext(@Nullable Output<Map<String,String>> additionalEncryptionContext) {
            $.additionalEncryptionContext = additionalEncryptionContext;
            return this;
        }

        /**
         * @param additionalEncryptionContext Additional encryption context for the user settings.
         * 
         * @return builder
         * 
         */
        public Builder additionalEncryptionContext(Map<String,String> additionalEncryptionContext) {
            return additionalEncryptionContext(Output.of(additionalEncryptionContext));
        }

        /**
         * @param associatedPortalArns List of web portal ARNs to associate with the user settings.
         * 
         * @return builder
         * 
         */
        public Builder associatedPortalArns(@Nullable Output<List<String>> associatedPortalArns) {
            $.associatedPortalArns = associatedPortalArns;
            return this;
        }

        /**
         * @param associatedPortalArns List of web portal ARNs to associate with the user settings.
         * 
         * @return builder
         * 
         */
        public Builder associatedPortalArns(List<String> associatedPortalArns) {
            return associatedPortalArns(Output.of(associatedPortalArns));
        }

        /**
         * @param associatedPortalArns List of web portal ARNs to associate with the user settings.
         * 
         * @return builder
         * 
         */
        public Builder associatedPortalArns(String... associatedPortalArns) {
            return associatedPortalArns(List.of(associatedPortalArns));
        }

        /**
         * @param cookieSynchronizationConfiguration Configuration that specifies which cookies should be synchronized from the end user&#39;s local browser to the remote browser. Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder cookieSynchronizationConfiguration(@Nullable Output<WebUserSettingsCookieSynchronizationConfigurationArgs> cookieSynchronizationConfiguration) {
            $.cookieSynchronizationConfiguration = cookieSynchronizationConfiguration;
            return this;
        }

        /**
         * @param cookieSynchronizationConfiguration Configuration that specifies which cookies should be synchronized from the end user&#39;s local browser to the remote browser. Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder cookieSynchronizationConfiguration(WebUserSettingsCookieSynchronizationConfigurationArgs cookieSynchronizationConfiguration) {
            return cookieSynchronizationConfiguration(Output.of(cookieSynchronizationConfiguration));
        }

        /**
         * @param copyAllowed Specifies whether the user can copy text from the streaming session to the local device. Valid values are `Enabled` or `Disabled`.
         * 
         * @return builder
         * 
         */
        public Builder copyAllowed(@Nullable Output<String> copyAllowed) {
            $.copyAllowed = copyAllowed;
            return this;
        }

        /**
         * @param copyAllowed Specifies whether the user can copy text from the streaming session to the local device. Valid values are `Enabled` or `Disabled`.
         * 
         * @return builder
         * 
         */
        public Builder copyAllowed(String copyAllowed) {
            return copyAllowed(Output.of(copyAllowed));
        }

        /**
         * @param customerManagedKey ARN of the customer managed KMS key.
         * 
         * @return builder
         * 
         */
        public Builder customerManagedKey(@Nullable Output<String> customerManagedKey) {
            $.customerManagedKey = customerManagedKey;
            return this;
        }

        /**
         * @param customerManagedKey ARN of the customer managed KMS key.
         * 
         * @return builder
         * 
         */
        public Builder customerManagedKey(String customerManagedKey) {
            return customerManagedKey(Output.of(customerManagedKey));
        }

        /**
         * @param deepLinkAllowed Specifies whether the user can use deep links that open automatically when connecting to a session. Valid values are `Enabled` or `Disabled`.
         * 
         * @return builder
         * 
         */
        public Builder deepLinkAllowed(@Nullable Output<String> deepLinkAllowed) {
            $.deepLinkAllowed = deepLinkAllowed;
            return this;
        }

        /**
         * @param deepLinkAllowed Specifies whether the user can use deep links that open automatically when connecting to a session. Valid values are `Enabled` or `Disabled`.
         * 
         * @return builder
         * 
         */
        public Builder deepLinkAllowed(String deepLinkAllowed) {
            return deepLinkAllowed(Output.of(deepLinkAllowed));
        }

        /**
         * @param disconnectTimeoutInMinutes Amount of time that a streaming session remains active after users disconnect. Value must be between 1 and 600 minutes.
         * 
         * @return builder
         * 
         */
        public Builder disconnectTimeoutInMinutes(@Nullable Output<Integer> disconnectTimeoutInMinutes) {
            $.disconnectTimeoutInMinutes = disconnectTimeoutInMinutes;
            return this;
        }

        /**
         * @param disconnectTimeoutInMinutes Amount of time that a streaming session remains active after users disconnect. Value must be between 1 and 600 minutes.
         * 
         * @return builder
         * 
         */
        public Builder disconnectTimeoutInMinutes(Integer disconnectTimeoutInMinutes) {
            return disconnectTimeoutInMinutes(Output.of(disconnectTimeoutInMinutes));
        }

        /**
         * @param downloadAllowed Specifies whether the user can download files from the streaming session to the local device. Valid values are `Enabled` or `Disabled`.
         * 
         * @return builder
         * 
         */
        public Builder downloadAllowed(@Nullable Output<String> downloadAllowed) {
            $.downloadAllowed = downloadAllowed;
            return this;
        }

        /**
         * @param downloadAllowed Specifies whether the user can download files from the streaming session to the local device. Valid values are `Enabled` or `Disabled`.
         * 
         * @return builder
         * 
         */
        public Builder downloadAllowed(String downloadAllowed) {
            return downloadAllowed(Output.of(downloadAllowed));
        }

        /**
         * @param idleDisconnectTimeoutInMinutes Amount of time that users can be idle before they are disconnected from their streaming session. Value must be between 0 and 60 minutes.
         * 
         * @return builder
         * 
         */
        public Builder idleDisconnectTimeoutInMinutes(@Nullable Output<Integer> idleDisconnectTimeoutInMinutes) {
            $.idleDisconnectTimeoutInMinutes = idleDisconnectTimeoutInMinutes;
            return this;
        }

        /**
         * @param idleDisconnectTimeoutInMinutes Amount of time that users can be idle before they are disconnected from their streaming session. Value must be between 0 and 60 minutes.
         * 
         * @return builder
         * 
         */
        public Builder idleDisconnectTimeoutInMinutes(Integer idleDisconnectTimeoutInMinutes) {
            return idleDisconnectTimeoutInMinutes(Output.of(idleDisconnectTimeoutInMinutes));
        }

        /**
         * @param pasteAllowed Specifies whether the user can paste text from the local device to the streaming session. Valid values are `Enabled` or `Disabled`.
         * 
         * @return builder
         * 
         */
        public Builder pasteAllowed(@Nullable Output<String> pasteAllowed) {
            $.pasteAllowed = pasteAllowed;
            return this;
        }

        /**
         * @param pasteAllowed Specifies whether the user can paste text from the local device to the streaming session. Valid values are `Enabled` or `Disabled`.
         * 
         * @return builder
         * 
         */
        public Builder pasteAllowed(String pasteAllowed) {
            return pasteAllowed(Output.of(pasteAllowed));
        }

        /**
         * @param printAllowed Specifies whether the user can print to the local device. Valid values are `Enabled` or `Disabled`.
         * 
         * @return builder
         * 
         */
        public Builder printAllowed(@Nullable Output<String> printAllowed) {
            $.printAllowed = printAllowed;
            return this;
        }

        /**
         * @param printAllowed Specifies whether the user can print to the local device. Valid values are `Enabled` or `Disabled`.
         * 
         * @return builder
         * 
         */
        public Builder printAllowed(String printAllowed) {
            return printAllowed(Output.of(printAllowed));
        }

        /**
         * @param tags Map of tags assigned to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Map of tags assigned to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tagsAll Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
         * 
         * @return builder
         * 
         * @deprecated
         * Please use `tags` instead.
         * 
         */
        @Deprecated /* Please use `tags` instead. */
        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        /**
         * @param tagsAll Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
         * 
         * @return builder
         * 
         * @deprecated
         * Please use `tags` instead.
         * 
         */
        @Deprecated /* Please use `tags` instead. */
        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        /**
         * @param toolbarConfiguration Configuration of the toolbar. Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder toolbarConfiguration(@Nullable Output<WebUserSettingsToolbarConfigurationArgs> toolbarConfiguration) {
            $.toolbarConfiguration = toolbarConfiguration;
            return this;
        }

        /**
         * @param toolbarConfiguration Configuration of the toolbar. Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder toolbarConfiguration(WebUserSettingsToolbarConfigurationArgs toolbarConfiguration) {
            return toolbarConfiguration(Output.of(toolbarConfiguration));
        }

        /**
         * @param uploadAllowed Specifies whether the user can upload files from the local device to the streaming session. Valid values are `Enabled` or `Disabled`.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder uploadAllowed(@Nullable Output<String> uploadAllowed) {
            $.uploadAllowed = uploadAllowed;
            return this;
        }

        /**
         * @param uploadAllowed Specifies whether the user can upload files from the local device to the streaming session. Valid values are `Enabled` or `Disabled`.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder uploadAllowed(String uploadAllowed) {
            return uploadAllowed(Output.of(uploadAllowed));
        }

        /**
         * @param userSettingsArn ARN of the user settings resource.
         * 
         * @return builder
         * 
         */
        public Builder userSettingsArn(@Nullable Output<String> userSettingsArn) {
            $.userSettingsArn = userSettingsArn;
            return this;
        }

        /**
         * @param userSettingsArn ARN of the user settings resource.
         * 
         * @return builder
         * 
         */
        public Builder userSettingsArn(String userSettingsArn) {
            return userSettingsArn(Output.of(userSettingsArn));
        }

        public WebUserSettingsState build() {
            return $;
        }
    }

}
