// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.bedrock.inputs;

import com.pulumi.aws.bedrock.inputs.AgentcoreOauth2CredentialProviderOauth2ProviderConfigSalesforceOauth2ProviderConfigOauthDiscoveryAuthorizationServerMetadataArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class AgentcoreOauth2CredentialProviderOauth2ProviderConfigSalesforceOauth2ProviderConfigOauthDiscoveryArgs extends com.pulumi.resources.ResourceArgs {

    public static final AgentcoreOauth2CredentialProviderOauth2ProviderConfigSalesforceOauth2ProviderConfigOauthDiscoveryArgs Empty = new AgentcoreOauth2CredentialProviderOauth2ProviderConfigSalesforceOauth2ProviderConfigOauthDiscoveryArgs();

    /**
     * Manual OAuth2 authorization server metadata configuration. Cannot be used together with `discoveryUrl`. See `authorizationServerMetadata` below.
     * 
     */
    @Import(name="authorizationServerMetadatas", required=true)
    private Output<List<AgentcoreOauth2CredentialProviderOauth2ProviderConfigSalesforceOauth2ProviderConfigOauthDiscoveryAuthorizationServerMetadataArgs>> authorizationServerMetadatas;

    /**
     * @return Manual OAuth2 authorization server metadata configuration. Cannot be used together with `discoveryUrl`. See `authorizationServerMetadata` below.
     * 
     */
    public Output<List<AgentcoreOauth2CredentialProviderOauth2ProviderConfigSalesforceOauth2ProviderConfigOauthDiscoveryAuthorizationServerMetadataArgs>> authorizationServerMetadatas() {
        return this.authorizationServerMetadatas;
    }

    /**
     * OpenID Connect discovery URL (e.g., `https://provider.com/.well-known/openid-configuration`). Cannot be used together with `authorizationServerMetadata`.
     * 
     */
    @Import(name="discoveryUrl", required=true)
    private Output<String> discoveryUrl;

    /**
     * @return OpenID Connect discovery URL (e.g., `https://provider.com/.well-known/openid-configuration`). Cannot be used together with `authorizationServerMetadata`.
     * 
     */
    public Output<String> discoveryUrl() {
        return this.discoveryUrl;
    }

    private AgentcoreOauth2CredentialProviderOauth2ProviderConfigSalesforceOauth2ProviderConfigOauthDiscoveryArgs() {}

    private AgentcoreOauth2CredentialProviderOauth2ProviderConfigSalesforceOauth2ProviderConfigOauthDiscoveryArgs(AgentcoreOauth2CredentialProviderOauth2ProviderConfigSalesforceOauth2ProviderConfigOauthDiscoveryArgs $) {
        this.authorizationServerMetadatas = $.authorizationServerMetadatas;
        this.discoveryUrl = $.discoveryUrl;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AgentcoreOauth2CredentialProviderOauth2ProviderConfigSalesforceOauth2ProviderConfigOauthDiscoveryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AgentcoreOauth2CredentialProviderOauth2ProviderConfigSalesforceOauth2ProviderConfigOauthDiscoveryArgs $;

        public Builder() {
            $ = new AgentcoreOauth2CredentialProviderOauth2ProviderConfigSalesforceOauth2ProviderConfigOauthDiscoveryArgs();
        }

        public Builder(AgentcoreOauth2CredentialProviderOauth2ProviderConfigSalesforceOauth2ProviderConfigOauthDiscoveryArgs defaults) {
            $ = new AgentcoreOauth2CredentialProviderOauth2ProviderConfigSalesforceOauth2ProviderConfigOauthDiscoveryArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param authorizationServerMetadatas Manual OAuth2 authorization server metadata configuration. Cannot be used together with `discoveryUrl`. See `authorizationServerMetadata` below.
         * 
         * @return builder
         * 
         */
        public Builder authorizationServerMetadatas(Output<List<AgentcoreOauth2CredentialProviderOauth2ProviderConfigSalesforceOauth2ProviderConfigOauthDiscoveryAuthorizationServerMetadataArgs>> authorizationServerMetadatas) {
            $.authorizationServerMetadatas = authorizationServerMetadatas;
            return this;
        }

        /**
         * @param authorizationServerMetadatas Manual OAuth2 authorization server metadata configuration. Cannot be used together with `discoveryUrl`. See `authorizationServerMetadata` below.
         * 
         * @return builder
         * 
         */
        public Builder authorizationServerMetadatas(List<AgentcoreOauth2CredentialProviderOauth2ProviderConfigSalesforceOauth2ProviderConfigOauthDiscoveryAuthorizationServerMetadataArgs> authorizationServerMetadatas) {
            return authorizationServerMetadatas(Output.of(authorizationServerMetadatas));
        }

        /**
         * @param authorizationServerMetadatas Manual OAuth2 authorization server metadata configuration. Cannot be used together with `discoveryUrl`. See `authorizationServerMetadata` below.
         * 
         * @return builder
         * 
         */
        public Builder authorizationServerMetadatas(AgentcoreOauth2CredentialProviderOauth2ProviderConfigSalesforceOauth2ProviderConfigOauthDiscoveryAuthorizationServerMetadataArgs... authorizationServerMetadatas) {
            return authorizationServerMetadatas(List.of(authorizationServerMetadatas));
        }

        /**
         * @param discoveryUrl OpenID Connect discovery URL (e.g., `https://provider.com/.well-known/openid-configuration`). Cannot be used together with `authorizationServerMetadata`.
         * 
         * @return builder
         * 
         */
        public Builder discoveryUrl(Output<String> discoveryUrl) {
            $.discoveryUrl = discoveryUrl;
            return this;
        }

        /**
         * @param discoveryUrl OpenID Connect discovery URL (e.g., `https://provider.com/.well-known/openid-configuration`). Cannot be used together with `authorizationServerMetadata`.
         * 
         * @return builder
         * 
         */
        public Builder discoveryUrl(String discoveryUrl) {
            return discoveryUrl(Output.of(discoveryUrl));
        }

        public AgentcoreOauth2CredentialProviderOauth2ProviderConfigSalesforceOauth2ProviderConfigOauthDiscoveryArgs build() {
            if ($.authorizationServerMetadatas == null) {
                throw new MissingRequiredPropertyException("AgentcoreOauth2CredentialProviderOauth2ProviderConfigSalesforceOauth2ProviderConfigOauthDiscoveryArgs", "authorizationServerMetadatas");
            }
            if ($.discoveryUrl == null) {
                throw new MissingRequiredPropertyException("AgentcoreOauth2CredentialProviderOauth2ProviderConfigSalesforceOauth2ProviderConfigOauthDiscoveryArgs", "discoveryUrl");
            }
            return $;
        }
    }

}
