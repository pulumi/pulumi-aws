// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.util.Objects;


public final class VisualsFilledMapVisualChartConfigurationWindowOptionsBoundsArgs extends com.pulumi.resources.ResourceArgs {

    public static final VisualsFilledMapVisualChartConfigurationWindowOptionsBoundsArgs Empty = new VisualsFilledMapVisualChartConfigurationWindowOptionsBoundsArgs();

    @Import(name="east", required=true)
    private Output<Double> east;

    public Output<Double> east() {
        return this.east;
    }

    @Import(name="north", required=true)
    private Output<Double> north;

    public Output<Double> north() {
        return this.north;
    }

    @Import(name="south", required=true)
    private Output<Double> south;

    public Output<Double> south() {
        return this.south;
    }

    @Import(name="west", required=true)
    private Output<Double> west;

    public Output<Double> west() {
        return this.west;
    }

    private VisualsFilledMapVisualChartConfigurationWindowOptionsBoundsArgs() {}

    private VisualsFilledMapVisualChartConfigurationWindowOptionsBoundsArgs(VisualsFilledMapVisualChartConfigurationWindowOptionsBoundsArgs $) {
        this.east = $.east;
        this.north = $.north;
        this.south = $.south;
        this.west = $.west;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VisualsFilledMapVisualChartConfigurationWindowOptionsBoundsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VisualsFilledMapVisualChartConfigurationWindowOptionsBoundsArgs $;

        public Builder() {
            $ = new VisualsFilledMapVisualChartConfigurationWindowOptionsBoundsArgs();
        }

        public Builder(VisualsFilledMapVisualChartConfigurationWindowOptionsBoundsArgs defaults) {
            $ = new VisualsFilledMapVisualChartConfigurationWindowOptionsBoundsArgs(Objects.requireNonNull(defaults));
        }

        public Builder east(Output<Double> east) {
            $.east = east;
            return this;
        }

        public Builder east(Double east) {
            return east(Output.of(east));
        }

        public Builder north(Output<Double> north) {
            $.north = north;
            return this;
        }

        public Builder north(Double north) {
            return north(Output.of(north));
        }

        public Builder south(Output<Double> south) {
            $.south = south;
            return this;
        }

        public Builder south(Double south) {
            return south(Output.of(south));
        }

        public Builder west(Output<Double> west) {
            $.west = west;
            return this;
        }

        public Builder west(Double west) {
            return west(Output.of(west));
        }

        public VisualsFilledMapVisualChartConfigurationWindowOptionsBoundsArgs build() {
            if ($.east == null) {
                throw new MissingRequiredPropertyException("VisualsFilledMapVisualChartConfigurationWindowOptionsBoundsArgs", "east");
            }
            if ($.north == null) {
                throw new MissingRequiredPropertyException("VisualsFilledMapVisualChartConfigurationWindowOptionsBoundsArgs", "north");
            }
            if ($.south == null) {
                throw new MissingRequiredPropertyException("VisualsFilledMapVisualChartConfigurationWindowOptionsBoundsArgs", "south");
            }
            if ($.west == null) {
                throw new MissingRequiredPropertyException("VisualsFilledMapVisualChartConfigurationWindowOptionsBoundsArgs", "west");
            }
            return $;
        }
    }

}
