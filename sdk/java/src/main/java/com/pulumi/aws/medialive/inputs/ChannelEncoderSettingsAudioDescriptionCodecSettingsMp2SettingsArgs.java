// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.medialive.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ChannelEncoderSettingsAudioDescriptionCodecSettingsMp2SettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final ChannelEncoderSettingsAudioDescriptionCodecSettingsMp2SettingsArgs Empty = new ChannelEncoderSettingsAudioDescriptionCodecSettingsMp2SettingsArgs();

    /**
     * Average bitrate in bits/second.
     * 
     */
    @Import(name="bitrate")
    private @Nullable Output<Double> bitrate;

    /**
     * @return Average bitrate in bits/second.
     * 
     */
    public Optional<Output<Double>> bitrate() {
        return Optional.ofNullable(this.bitrate);
    }

    /**
     * Mono, Stereo, or 5.1 channel layout.
     * 
     */
    @Import(name="codingMode")
    private @Nullable Output<String> codingMode;

    /**
     * @return Mono, Stereo, or 5.1 channel layout.
     * 
     */
    public Optional<Output<String>> codingMode() {
        return Optional.ofNullable(this.codingMode);
    }

    /**
     * Sample rate in Hz.
     * 
     */
    @Import(name="sampleRate")
    private @Nullable Output<Double> sampleRate;

    /**
     * @return Sample rate in Hz.
     * 
     */
    public Optional<Output<Double>> sampleRate() {
        return Optional.ofNullable(this.sampleRate);
    }

    private ChannelEncoderSettingsAudioDescriptionCodecSettingsMp2SettingsArgs() {}

    private ChannelEncoderSettingsAudioDescriptionCodecSettingsMp2SettingsArgs(ChannelEncoderSettingsAudioDescriptionCodecSettingsMp2SettingsArgs $) {
        this.bitrate = $.bitrate;
        this.codingMode = $.codingMode;
        this.sampleRate = $.sampleRate;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ChannelEncoderSettingsAudioDescriptionCodecSettingsMp2SettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ChannelEncoderSettingsAudioDescriptionCodecSettingsMp2SettingsArgs $;

        public Builder() {
            $ = new ChannelEncoderSettingsAudioDescriptionCodecSettingsMp2SettingsArgs();
        }

        public Builder(ChannelEncoderSettingsAudioDescriptionCodecSettingsMp2SettingsArgs defaults) {
            $ = new ChannelEncoderSettingsAudioDescriptionCodecSettingsMp2SettingsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bitrate Average bitrate in bits/second.
         * 
         * @return builder
         * 
         */
        public Builder bitrate(@Nullable Output<Double> bitrate) {
            $.bitrate = bitrate;
            return this;
        }

        /**
         * @param bitrate Average bitrate in bits/second.
         * 
         * @return builder
         * 
         */
        public Builder bitrate(Double bitrate) {
            return bitrate(Output.of(bitrate));
        }

        /**
         * @param codingMode Mono, Stereo, or 5.1 channel layout.
         * 
         * @return builder
         * 
         */
        public Builder codingMode(@Nullable Output<String> codingMode) {
            $.codingMode = codingMode;
            return this;
        }

        /**
         * @param codingMode Mono, Stereo, or 5.1 channel layout.
         * 
         * @return builder
         * 
         */
        public Builder codingMode(String codingMode) {
            return codingMode(Output.of(codingMode));
        }

        /**
         * @param sampleRate Sample rate in Hz.
         * 
         * @return builder
         * 
         */
        public Builder sampleRate(@Nullable Output<Double> sampleRate) {
            $.sampleRate = sampleRate;
            return this;
        }

        /**
         * @param sampleRate Sample rate in Hz.
         * 
         * @return builder
         * 
         */
        public Builder sampleRate(Double sampleRate) {
            return sampleRate(Output.of(sampleRate));
        }

        public ChannelEncoderSettingsAudioDescriptionCodecSettingsMp2SettingsArgs build() {
            return $;
        }
    }

}
