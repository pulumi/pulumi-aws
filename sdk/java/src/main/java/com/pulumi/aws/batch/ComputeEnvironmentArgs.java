// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.batch;

import com.pulumi.aws.batch.inputs.ComputeEnvironmentComputeResourcesArgs;
import com.pulumi.aws.batch.inputs.ComputeEnvironmentEksConfigurationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ComputeEnvironmentArgs extends com.pulumi.resources.ResourceArgs {

    public static final ComputeEnvironmentArgs Empty = new ComputeEnvironmentArgs();

    @Import(name="computeEnvironmentName")
    private @Nullable Output<String> computeEnvironmentName;

    public Optional<Output<String>> computeEnvironmentName() {
        return Optional.ofNullable(this.computeEnvironmentName);
    }

    @Import(name="computeEnvironmentNamePrefix")
    private @Nullable Output<String> computeEnvironmentNamePrefix;

    public Optional<Output<String>> computeEnvironmentNamePrefix() {
        return Optional.ofNullable(this.computeEnvironmentNamePrefix);
    }

    @Import(name="computeResources")
    private @Nullable Output<ComputeEnvironmentComputeResourcesArgs> computeResources;

    public Optional<Output<ComputeEnvironmentComputeResourcesArgs>> computeResources() {
        return Optional.ofNullable(this.computeResources);
    }

    @Import(name="eksConfiguration")
    private @Nullable Output<ComputeEnvironmentEksConfigurationArgs> eksConfiguration;

    public Optional<Output<ComputeEnvironmentEksConfigurationArgs>> eksConfiguration() {
        return Optional.ofNullable(this.eksConfiguration);
    }

    @Import(name="serviceRole")
    private @Nullable Output<String> serviceRole;

    public Optional<Output<String>> serviceRole() {
        return Optional.ofNullable(this.serviceRole);
    }

    @Import(name="state")
    private @Nullable Output<String> state;

    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="type", required=true)
    private Output<String> type;

    public Output<String> type() {
        return this.type;
    }

    private ComputeEnvironmentArgs() {}

    private ComputeEnvironmentArgs(ComputeEnvironmentArgs $) {
        this.computeEnvironmentName = $.computeEnvironmentName;
        this.computeEnvironmentNamePrefix = $.computeEnvironmentNamePrefix;
        this.computeResources = $.computeResources;
        this.eksConfiguration = $.eksConfiguration;
        this.serviceRole = $.serviceRole;
        this.state = $.state;
        this.tags = $.tags;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ComputeEnvironmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ComputeEnvironmentArgs $;

        public Builder() {
            $ = new ComputeEnvironmentArgs();
        }

        public Builder(ComputeEnvironmentArgs defaults) {
            $ = new ComputeEnvironmentArgs(Objects.requireNonNull(defaults));
        }

        public Builder computeEnvironmentName(@Nullable Output<String> computeEnvironmentName) {
            $.computeEnvironmentName = computeEnvironmentName;
            return this;
        }

        public Builder computeEnvironmentName(String computeEnvironmentName) {
            return computeEnvironmentName(Output.of(computeEnvironmentName));
        }

        public Builder computeEnvironmentNamePrefix(@Nullable Output<String> computeEnvironmentNamePrefix) {
            $.computeEnvironmentNamePrefix = computeEnvironmentNamePrefix;
            return this;
        }

        public Builder computeEnvironmentNamePrefix(String computeEnvironmentNamePrefix) {
            return computeEnvironmentNamePrefix(Output.of(computeEnvironmentNamePrefix));
        }

        public Builder computeResources(@Nullable Output<ComputeEnvironmentComputeResourcesArgs> computeResources) {
            $.computeResources = computeResources;
            return this;
        }

        public Builder computeResources(ComputeEnvironmentComputeResourcesArgs computeResources) {
            return computeResources(Output.of(computeResources));
        }

        public Builder eksConfiguration(@Nullable Output<ComputeEnvironmentEksConfigurationArgs> eksConfiguration) {
            $.eksConfiguration = eksConfiguration;
            return this;
        }

        public Builder eksConfiguration(ComputeEnvironmentEksConfigurationArgs eksConfiguration) {
            return eksConfiguration(Output.of(eksConfiguration));
        }

        public Builder serviceRole(@Nullable Output<String> serviceRole) {
            $.serviceRole = serviceRole;
            return this;
        }

        public Builder serviceRole(String serviceRole) {
            return serviceRole(Output.of(serviceRole));
        }

        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        public Builder state(String state) {
            return state(Output.of(state));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        public Builder type(String type) {
            return type(Output.of(type));
        }

        public ComputeEnvironmentArgs build() {
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
