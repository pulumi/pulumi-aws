// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.lambda.inputs;

import com.pulumi.aws.lambda.inputs.EventSourceMappingAmazonManagedKafkaEventSourceConfigSchemaRegistryConfigAccessConfigArgs;
import com.pulumi.aws.lambda.inputs.EventSourceMappingAmazonManagedKafkaEventSourceConfigSchemaRegistryConfigSchemaValidationConfigArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EventSourceMappingAmazonManagedKafkaEventSourceConfigSchemaRegistryConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final EventSourceMappingAmazonManagedKafkaEventSourceConfigSchemaRegistryConfigArgs Empty = new EventSourceMappingAmazonManagedKafkaEventSourceConfigSchemaRegistryConfigArgs();

    /**
     * Configuration block for authentication Lambda uses to access the schema registry.
     * 
     */
    @Import(name="accessConfigs")
    private @Nullable Output<List<EventSourceMappingAmazonManagedKafkaEventSourceConfigSchemaRegistryConfigAccessConfigArgs>> accessConfigs;

    /**
     * @return Configuration block for authentication Lambda uses to access the schema registry.
     * 
     */
    public Optional<Output<List<EventSourceMappingAmazonManagedKafkaEventSourceConfigSchemaRegistryConfigAccessConfigArgs>>> accessConfigs() {
        return Optional.ofNullable(this.accessConfigs);
    }

    /**
     * Record format that Lambda delivers to the function after schema validation. Valid values: `JSON`, `SOURCE`.
     * 
     */
    @Import(name="eventRecordFormat")
    private @Nullable Output<String> eventRecordFormat;

    /**
     * @return Record format that Lambda delivers to the function after schema validation. Valid values: `JSON`, `SOURCE`.
     * 
     */
    public Optional<Output<String>> eventRecordFormat() {
        return Optional.ofNullable(this.eventRecordFormat);
    }

    /**
     * URI of the schema registry. For AWS Glue schema registries, use the ARN of the registry. For Confluent schema registries, use the registry URL.
     * 
     */
    @Import(name="schemaRegistryUri")
    private @Nullable Output<String> schemaRegistryUri;

    /**
     * @return URI of the schema registry. For AWS Glue schema registries, use the ARN of the registry. For Confluent schema registries, use the registry URL.
     * 
     */
    public Optional<Output<String>> schemaRegistryUri() {
        return Optional.ofNullable(this.schemaRegistryUri);
    }

    /**
     * Repeatable block that defines schema validation settings. These specify the message attributes that Lambda should validate and filter using the schema registry.
     * 
     */
    @Import(name="schemaValidationConfigs")
    private @Nullable Output<List<EventSourceMappingAmazonManagedKafkaEventSourceConfigSchemaRegistryConfigSchemaValidationConfigArgs>> schemaValidationConfigs;

    /**
     * @return Repeatable block that defines schema validation settings. These specify the message attributes that Lambda should validate and filter using the schema registry.
     * 
     */
    public Optional<Output<List<EventSourceMappingAmazonManagedKafkaEventSourceConfigSchemaRegistryConfigSchemaValidationConfigArgs>>> schemaValidationConfigs() {
        return Optional.ofNullable(this.schemaValidationConfigs);
    }

    private EventSourceMappingAmazonManagedKafkaEventSourceConfigSchemaRegistryConfigArgs() {}

    private EventSourceMappingAmazonManagedKafkaEventSourceConfigSchemaRegistryConfigArgs(EventSourceMappingAmazonManagedKafkaEventSourceConfigSchemaRegistryConfigArgs $) {
        this.accessConfigs = $.accessConfigs;
        this.eventRecordFormat = $.eventRecordFormat;
        this.schemaRegistryUri = $.schemaRegistryUri;
        this.schemaValidationConfigs = $.schemaValidationConfigs;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EventSourceMappingAmazonManagedKafkaEventSourceConfigSchemaRegistryConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EventSourceMappingAmazonManagedKafkaEventSourceConfigSchemaRegistryConfigArgs $;

        public Builder() {
            $ = new EventSourceMappingAmazonManagedKafkaEventSourceConfigSchemaRegistryConfigArgs();
        }

        public Builder(EventSourceMappingAmazonManagedKafkaEventSourceConfigSchemaRegistryConfigArgs defaults) {
            $ = new EventSourceMappingAmazonManagedKafkaEventSourceConfigSchemaRegistryConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessConfigs Configuration block for authentication Lambda uses to access the schema registry.
         * 
         * @return builder
         * 
         */
        public Builder accessConfigs(@Nullable Output<List<EventSourceMappingAmazonManagedKafkaEventSourceConfigSchemaRegistryConfigAccessConfigArgs>> accessConfigs) {
            $.accessConfigs = accessConfigs;
            return this;
        }

        /**
         * @param accessConfigs Configuration block for authentication Lambda uses to access the schema registry.
         * 
         * @return builder
         * 
         */
        public Builder accessConfigs(List<EventSourceMappingAmazonManagedKafkaEventSourceConfigSchemaRegistryConfigAccessConfigArgs> accessConfigs) {
            return accessConfigs(Output.of(accessConfigs));
        }

        /**
         * @param accessConfigs Configuration block for authentication Lambda uses to access the schema registry.
         * 
         * @return builder
         * 
         */
        public Builder accessConfigs(EventSourceMappingAmazonManagedKafkaEventSourceConfigSchemaRegistryConfigAccessConfigArgs... accessConfigs) {
            return accessConfigs(List.of(accessConfigs));
        }

        /**
         * @param eventRecordFormat Record format that Lambda delivers to the function after schema validation. Valid values: `JSON`, `SOURCE`.
         * 
         * @return builder
         * 
         */
        public Builder eventRecordFormat(@Nullable Output<String> eventRecordFormat) {
            $.eventRecordFormat = eventRecordFormat;
            return this;
        }

        /**
         * @param eventRecordFormat Record format that Lambda delivers to the function after schema validation. Valid values: `JSON`, `SOURCE`.
         * 
         * @return builder
         * 
         */
        public Builder eventRecordFormat(String eventRecordFormat) {
            return eventRecordFormat(Output.of(eventRecordFormat));
        }

        /**
         * @param schemaRegistryUri URI of the schema registry. For AWS Glue schema registries, use the ARN of the registry. For Confluent schema registries, use the registry URL.
         * 
         * @return builder
         * 
         */
        public Builder schemaRegistryUri(@Nullable Output<String> schemaRegistryUri) {
            $.schemaRegistryUri = schemaRegistryUri;
            return this;
        }

        /**
         * @param schemaRegistryUri URI of the schema registry. For AWS Glue schema registries, use the ARN of the registry. For Confluent schema registries, use the registry URL.
         * 
         * @return builder
         * 
         */
        public Builder schemaRegistryUri(String schemaRegistryUri) {
            return schemaRegistryUri(Output.of(schemaRegistryUri));
        }

        /**
         * @param schemaValidationConfigs Repeatable block that defines schema validation settings. These specify the message attributes that Lambda should validate and filter using the schema registry.
         * 
         * @return builder
         * 
         */
        public Builder schemaValidationConfigs(@Nullable Output<List<EventSourceMappingAmazonManagedKafkaEventSourceConfigSchemaRegistryConfigSchemaValidationConfigArgs>> schemaValidationConfigs) {
            $.schemaValidationConfigs = schemaValidationConfigs;
            return this;
        }

        /**
         * @param schemaValidationConfigs Repeatable block that defines schema validation settings. These specify the message attributes that Lambda should validate and filter using the schema registry.
         * 
         * @return builder
         * 
         */
        public Builder schemaValidationConfigs(List<EventSourceMappingAmazonManagedKafkaEventSourceConfigSchemaRegistryConfigSchemaValidationConfigArgs> schemaValidationConfigs) {
            return schemaValidationConfigs(Output.of(schemaValidationConfigs));
        }

        /**
         * @param schemaValidationConfigs Repeatable block that defines schema validation settings. These specify the message attributes that Lambda should validate and filter using the schema registry.
         * 
         * @return builder
         * 
         */
        public Builder schemaValidationConfigs(EventSourceMappingAmazonManagedKafkaEventSourceConfigSchemaRegistryConfigSchemaValidationConfigArgs... schemaValidationConfigs) {
            return schemaValidationConfigs(List.of(schemaValidationConfigs));
        }

        public EventSourceMappingAmazonManagedKafkaEventSourceConfigSchemaRegistryConfigArgs build() {
            return $;
        }
    }

}
