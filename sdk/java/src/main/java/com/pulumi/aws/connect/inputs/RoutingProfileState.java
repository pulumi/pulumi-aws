// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.connect.inputs;

import com.pulumi.aws.connect.inputs.RoutingProfileMediaConcurrencyArgs;
import com.pulumi.aws.connect.inputs.RoutingProfileQueueConfigArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RoutingProfileState extends com.pulumi.resources.ResourceArgs {

    public static final RoutingProfileState Empty = new RoutingProfileState();

    /**
     * The Amazon Resource Name (ARN) of the Routing Profile.
     * 
     */
    @Import(name="arn")
    private @Nullable Output<String> arn;

    /**
     * @return The Amazon Resource Name (ARN) of the Routing Profile.
     * 
     */
    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    /**
     * Specifies the default outbound queue for the Routing Profile.
     * 
     */
    @Import(name="defaultOutboundQueueId")
    private @Nullable Output<String> defaultOutboundQueueId;

    /**
     * @return Specifies the default outbound queue for the Routing Profile.
     * 
     */
    public Optional<Output<String>> defaultOutboundQueueId() {
        return Optional.ofNullable(this.defaultOutboundQueueId);
    }

    /**
     * Specifies the description of the Routing Profile.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Specifies the description of the Routing Profile.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Specifies the identifier of the hosting Amazon Connect Instance.
     * 
     */
    @Import(name="instanceId")
    private @Nullable Output<String> instanceId;

    /**
     * @return Specifies the identifier of the hosting Amazon Connect Instance.
     * 
     */
    public Optional<Output<String>> instanceId() {
        return Optional.ofNullable(this.instanceId);
    }

    /**
     * One or more `media_concurrencies` blocks that specify the channels that agents can handle in the Contact Control Panel (CCP) for this Routing Profile. The `media_concurrencies` block is documented below.
     * 
     */
    @Import(name="mediaConcurrencies")
    private @Nullable Output<List<RoutingProfileMediaConcurrencyArgs>> mediaConcurrencies;

    /**
     * @return One or more `media_concurrencies` blocks that specify the channels that agents can handle in the Contact Control Panel (CCP) for this Routing Profile. The `media_concurrencies` block is documented below.
     * 
     */
    public Optional<Output<List<RoutingProfileMediaConcurrencyArgs>>> mediaConcurrencies() {
        return Optional.ofNullable(this.mediaConcurrencies);
    }

    /**
     * Specifies the name of the Routing Profile.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Specifies the name of the Routing Profile.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * One or more `queue_configs` blocks that specify the inbound queues associated with the routing profile. If no queue is added, the agent only can make outbound calls. The `queue_configs` block is documented below.
     * 
     */
    @Import(name="queueConfigs")
    private @Nullable Output<List<RoutingProfileQueueConfigArgs>> queueConfigs;

    /**
     * @return One or more `queue_configs` blocks that specify the inbound queues associated with the routing profile. If no queue is added, the agent only can make outbound calls. The `queue_configs` block is documented below.
     * 
     */
    public Optional<Output<List<RoutingProfileQueueConfigArgs>>> queueConfigs() {
        return Optional.ofNullable(this.queueConfigs);
    }

    /**
     * The identifier for the Routing Profile.
     * 
     */
    @Import(name="routingProfileId")
    private @Nullable Output<String> routingProfileId;

    /**
     * @return The identifier for the Routing Profile.
     * 
     */
    public Optional<Output<String>> routingProfileId() {
        return Optional.ofNullable(this.routingProfileId);
    }

    /**
     * Tags to apply to the Routing Profile. If configured with a provider
     * `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Tags to apply to the Routing Profile. If configured with a provider
     * `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    /**
     * @return A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    private RoutingProfileState() {}

    private RoutingProfileState(RoutingProfileState $) {
        this.arn = $.arn;
        this.defaultOutboundQueueId = $.defaultOutboundQueueId;
        this.description = $.description;
        this.instanceId = $.instanceId;
        this.mediaConcurrencies = $.mediaConcurrencies;
        this.name = $.name;
        this.queueConfigs = $.queueConfigs;
        this.routingProfileId = $.routingProfileId;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RoutingProfileState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RoutingProfileState $;

        public Builder() {
            $ = new RoutingProfileState();
        }

        public Builder(RoutingProfileState defaults) {
            $ = new RoutingProfileState(Objects.requireNonNull(defaults));
        }

        /**
         * @param arn The Amazon Resource Name (ARN) of the Routing Profile.
         * 
         * @return builder
         * 
         */
        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        /**
         * @param arn The Amazon Resource Name (ARN) of the Routing Profile.
         * 
         * @return builder
         * 
         */
        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        /**
         * @param defaultOutboundQueueId Specifies the default outbound queue for the Routing Profile.
         * 
         * @return builder
         * 
         */
        public Builder defaultOutboundQueueId(@Nullable Output<String> defaultOutboundQueueId) {
            $.defaultOutboundQueueId = defaultOutboundQueueId;
            return this;
        }

        /**
         * @param defaultOutboundQueueId Specifies the default outbound queue for the Routing Profile.
         * 
         * @return builder
         * 
         */
        public Builder defaultOutboundQueueId(String defaultOutboundQueueId) {
            return defaultOutboundQueueId(Output.of(defaultOutboundQueueId));
        }

        /**
         * @param description Specifies the description of the Routing Profile.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Specifies the description of the Routing Profile.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param instanceId Specifies the identifier of the hosting Amazon Connect Instance.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(@Nullable Output<String> instanceId) {
            $.instanceId = instanceId;
            return this;
        }

        /**
         * @param instanceId Specifies the identifier of the hosting Amazon Connect Instance.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(String instanceId) {
            return instanceId(Output.of(instanceId));
        }

        /**
         * @param mediaConcurrencies One or more `media_concurrencies` blocks that specify the channels that agents can handle in the Contact Control Panel (CCP) for this Routing Profile. The `media_concurrencies` block is documented below.
         * 
         * @return builder
         * 
         */
        public Builder mediaConcurrencies(@Nullable Output<List<RoutingProfileMediaConcurrencyArgs>> mediaConcurrencies) {
            $.mediaConcurrencies = mediaConcurrencies;
            return this;
        }

        /**
         * @param mediaConcurrencies One or more `media_concurrencies` blocks that specify the channels that agents can handle in the Contact Control Panel (CCP) for this Routing Profile. The `media_concurrencies` block is documented below.
         * 
         * @return builder
         * 
         */
        public Builder mediaConcurrencies(List<RoutingProfileMediaConcurrencyArgs> mediaConcurrencies) {
            return mediaConcurrencies(Output.of(mediaConcurrencies));
        }

        /**
         * @param mediaConcurrencies One or more `media_concurrencies` blocks that specify the channels that agents can handle in the Contact Control Panel (CCP) for this Routing Profile. The `media_concurrencies` block is documented below.
         * 
         * @return builder
         * 
         */
        public Builder mediaConcurrencies(RoutingProfileMediaConcurrencyArgs... mediaConcurrencies) {
            return mediaConcurrencies(List.of(mediaConcurrencies));
        }

        /**
         * @param name Specifies the name of the Routing Profile.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Specifies the name of the Routing Profile.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param queueConfigs One or more `queue_configs` blocks that specify the inbound queues associated with the routing profile. If no queue is added, the agent only can make outbound calls. The `queue_configs` block is documented below.
         * 
         * @return builder
         * 
         */
        public Builder queueConfigs(@Nullable Output<List<RoutingProfileQueueConfigArgs>> queueConfigs) {
            $.queueConfigs = queueConfigs;
            return this;
        }

        /**
         * @param queueConfigs One or more `queue_configs` blocks that specify the inbound queues associated with the routing profile. If no queue is added, the agent only can make outbound calls. The `queue_configs` block is documented below.
         * 
         * @return builder
         * 
         */
        public Builder queueConfigs(List<RoutingProfileQueueConfigArgs> queueConfigs) {
            return queueConfigs(Output.of(queueConfigs));
        }

        /**
         * @param queueConfigs One or more `queue_configs` blocks that specify the inbound queues associated with the routing profile. If no queue is added, the agent only can make outbound calls. The `queue_configs` block is documented below.
         * 
         * @return builder
         * 
         */
        public Builder queueConfigs(RoutingProfileQueueConfigArgs... queueConfigs) {
            return queueConfigs(List.of(queueConfigs));
        }

        /**
         * @param routingProfileId The identifier for the Routing Profile.
         * 
         * @return builder
         * 
         */
        public Builder routingProfileId(@Nullable Output<String> routingProfileId) {
            $.routingProfileId = routingProfileId;
            return this;
        }

        /**
         * @param routingProfileId The identifier for the Routing Profile.
         * 
         * @return builder
         * 
         */
        public Builder routingProfileId(String routingProfileId) {
            return routingProfileId(Output.of(routingProfileId));
        }

        /**
         * @param tags Tags to apply to the Routing Profile. If configured with a provider
         * `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Tags to apply to the Routing Profile. If configured with a provider
         * `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tagsAll A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
         * 
         * @return builder
         * 
         * @deprecated
         * Please use `tags` instead.
         * 
         */
        @Deprecated /* Please use `tags` instead. */
        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        /**
         * @param tagsAll A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
         * 
         * @return builder
         * 
         * @deprecated
         * Please use `tags` instead.
         * 
         */
        @Deprecated /* Please use `tags` instead. */
        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        public RoutingProfileState build() {
            return $;
        }
    }

}
