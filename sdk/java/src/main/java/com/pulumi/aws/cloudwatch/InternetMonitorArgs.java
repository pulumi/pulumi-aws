// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.cloudwatch;

import com.pulumi.aws.cloudwatch.inputs.InternetMonitorInternetMeasurementsLogDeliveryArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InternetMonitorArgs extends com.pulumi.resources.ResourceArgs {

    public static final InternetMonitorArgs Empty = new InternetMonitorArgs();

    /**
     * Publish internet measurements for Internet Monitor to an Amazon S3 bucket in addition to CloudWatch Logs.
     * 
     */
    @Import(name="internetMeasurementsLogDelivery")
    private @Nullable Output<InternetMonitorInternetMeasurementsLogDeliveryArgs> internetMeasurementsLogDelivery;

    /**
     * @return Publish internet measurements for Internet Monitor to an Amazon S3 bucket in addition to CloudWatch Logs.
     * 
     */
    public Optional<Output<InternetMonitorInternetMeasurementsLogDeliveryArgs>> internetMeasurementsLogDelivery() {
        return Optional.ofNullable(this.internetMeasurementsLogDelivery);
    }

    /**
     * The maximum number of city-networks to monitor for your resources. A city-network is the location (city) where clients access your application resources from and the network or ASN, such as an internet service provider (ISP), that clients access the resources through. This limit helps control billing costs.
     * 
     */
    @Import(name="maxCityNetworksToMonitor")
    private @Nullable Output<Integer> maxCityNetworksToMonitor;

    /**
     * @return The maximum number of city-networks to monitor for your resources. A city-network is the location (city) where clients access your application resources from and the network or ASN, such as an internet service provider (ISP), that clients access the resources through. This limit helps control billing costs.
     * 
     */
    public Optional<Output<Integer>> maxCityNetworksToMonitor() {
        return Optional.ofNullable(this.maxCityNetworksToMonitor);
    }

    /**
     * The name of the monitor.
     * 
     */
    @Import(name="monitorName", required=true)
    private Output<String> monitorName;

    /**
     * @return The name of the monitor.
     * 
     */
    public Output<String> monitorName() {
        return this.monitorName;
    }

    /**
     * The resources to include in a monitor, which you provide as a set of Amazon Resource Names (ARNs).
     * 
     */
    @Import(name="resources")
    private @Nullable Output<List<String>> resources;

    /**
     * @return The resources to include in a monitor, which you provide as a set of Amazon Resource Names (ARNs).
     * 
     */
    public Optional<Output<List<String>>> resources() {
        return Optional.ofNullable(this.resources);
    }

    /**
     * The status for a monitor. The accepted values for Status with the UpdateMonitor API call are the following: `ACTIVE` and `INACTIVE`.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status for a monitor. The accepted values for Status with the UpdateMonitor API call are the following: `ACTIVE` and `INACTIVE`.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     */
    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    /**
     * @return Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     */
    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    /**
     * The percentage of the internet-facing traffic for your application that you want to monitor with this monitor.
     * 
     */
    @Import(name="trafficPercentageToMonitor")
    private @Nullable Output<Integer> trafficPercentageToMonitor;

    /**
     * @return The percentage of the internet-facing traffic for your application that you want to monitor with this monitor.
     * 
     */
    public Optional<Output<Integer>> trafficPercentageToMonitor() {
        return Optional.ofNullable(this.trafficPercentageToMonitor);
    }

    private InternetMonitorArgs() {}

    private InternetMonitorArgs(InternetMonitorArgs $) {
        this.internetMeasurementsLogDelivery = $.internetMeasurementsLogDelivery;
        this.maxCityNetworksToMonitor = $.maxCityNetworksToMonitor;
        this.monitorName = $.monitorName;
        this.resources = $.resources;
        this.status = $.status;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
        this.trafficPercentageToMonitor = $.trafficPercentageToMonitor;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InternetMonitorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InternetMonitorArgs $;

        public Builder() {
            $ = new InternetMonitorArgs();
        }

        public Builder(InternetMonitorArgs defaults) {
            $ = new InternetMonitorArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param internetMeasurementsLogDelivery Publish internet measurements for Internet Monitor to an Amazon S3 bucket in addition to CloudWatch Logs.
         * 
         * @return builder
         * 
         */
        public Builder internetMeasurementsLogDelivery(@Nullable Output<InternetMonitorInternetMeasurementsLogDeliveryArgs> internetMeasurementsLogDelivery) {
            $.internetMeasurementsLogDelivery = internetMeasurementsLogDelivery;
            return this;
        }

        /**
         * @param internetMeasurementsLogDelivery Publish internet measurements for Internet Monitor to an Amazon S3 bucket in addition to CloudWatch Logs.
         * 
         * @return builder
         * 
         */
        public Builder internetMeasurementsLogDelivery(InternetMonitorInternetMeasurementsLogDeliveryArgs internetMeasurementsLogDelivery) {
            return internetMeasurementsLogDelivery(Output.of(internetMeasurementsLogDelivery));
        }

        /**
         * @param maxCityNetworksToMonitor The maximum number of city-networks to monitor for your resources. A city-network is the location (city) where clients access your application resources from and the network or ASN, such as an internet service provider (ISP), that clients access the resources through. This limit helps control billing costs.
         * 
         * @return builder
         * 
         */
        public Builder maxCityNetworksToMonitor(@Nullable Output<Integer> maxCityNetworksToMonitor) {
            $.maxCityNetworksToMonitor = maxCityNetworksToMonitor;
            return this;
        }

        /**
         * @param maxCityNetworksToMonitor The maximum number of city-networks to monitor for your resources. A city-network is the location (city) where clients access your application resources from and the network or ASN, such as an internet service provider (ISP), that clients access the resources through. This limit helps control billing costs.
         * 
         * @return builder
         * 
         */
        public Builder maxCityNetworksToMonitor(Integer maxCityNetworksToMonitor) {
            return maxCityNetworksToMonitor(Output.of(maxCityNetworksToMonitor));
        }

        /**
         * @param monitorName The name of the monitor.
         * 
         * @return builder
         * 
         */
        public Builder monitorName(Output<String> monitorName) {
            $.monitorName = monitorName;
            return this;
        }

        /**
         * @param monitorName The name of the monitor.
         * 
         * @return builder
         * 
         */
        public Builder monitorName(String monitorName) {
            return monitorName(Output.of(monitorName));
        }

        /**
         * @param resources The resources to include in a monitor, which you provide as a set of Amazon Resource Names (ARNs).
         * 
         * @return builder
         * 
         */
        public Builder resources(@Nullable Output<List<String>> resources) {
            $.resources = resources;
            return this;
        }

        /**
         * @param resources The resources to include in a monitor, which you provide as a set of Amazon Resource Names (ARNs).
         * 
         * @return builder
         * 
         */
        public Builder resources(List<String> resources) {
            return resources(Output.of(resources));
        }

        /**
         * @param resources The resources to include in a monitor, which you provide as a set of Amazon Resource Names (ARNs).
         * 
         * @return builder
         * 
         */
        public Builder resources(String... resources) {
            return resources(List.of(resources));
        }

        /**
         * @param status The status for a monitor. The accepted values for Status with the UpdateMonitor API call are the following: `ACTIVE` and `INACTIVE`.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status for a monitor. The accepted values for Status with the UpdateMonitor API call are the following: `ACTIVE` and `INACTIVE`.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param tags Map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tagsAll Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
         * 
         * @return builder
         * 
         */
        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        /**
         * @param tagsAll Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
         * 
         * @return builder
         * 
         */
        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        /**
         * @param trafficPercentageToMonitor The percentage of the internet-facing traffic for your application that you want to monitor with this monitor.
         * 
         * @return builder
         * 
         */
        public Builder trafficPercentageToMonitor(@Nullable Output<Integer> trafficPercentageToMonitor) {
            $.trafficPercentageToMonitor = trafficPercentageToMonitor;
            return this;
        }

        /**
         * @param trafficPercentageToMonitor The percentage of the internet-facing traffic for your application that you want to monitor with this monitor.
         * 
         * @return builder
         * 
         */
        public Builder trafficPercentageToMonitor(Integer trafficPercentageToMonitor) {
            return trafficPercentageToMonitor(Output.of(trafficPercentageToMonitor));
        }

        public InternetMonitorArgs build() {
            $.monitorName = Objects.requireNonNull($.monitorName, "expected parameter 'monitorName' to be non-null");
            return $;
        }
    }

}
