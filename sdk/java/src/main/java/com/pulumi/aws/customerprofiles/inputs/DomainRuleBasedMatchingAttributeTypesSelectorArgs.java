// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.customerprofiles.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DomainRuleBasedMatchingAttributeTypesSelectorArgs extends com.pulumi.resources.ResourceArgs {

    public static final DomainRuleBasedMatchingAttributeTypesSelectorArgs Empty = new DomainRuleBasedMatchingAttributeTypesSelectorArgs();

    /**
     * The `Address` type. You can choose from `Address`, `BusinessAddress`, `MaillingAddress`, and `ShippingAddress`.
     * 
     */
    @Import(name="addresses")
    private @Nullable Output<List<String>> addresses;

    /**
     * @return The `Address` type. You can choose from `Address`, `BusinessAddress`, `MaillingAddress`, and `ShippingAddress`.
     * 
     */
    public Optional<Output<List<String>>> addresses() {
        return Optional.ofNullable(this.addresses);
    }

    /**
     * Configures the `AttributeMatchingModel`, you can either choose `ONE_TO_ONE` or `MANY_TO_MANY`.
     * 
     */
    @Import(name="attributeMatchingModel", required=true)
    private Output<String> attributeMatchingModel;

    /**
     * @return Configures the `AttributeMatchingModel`, you can either choose `ONE_TO_ONE` or `MANY_TO_MANY`.
     * 
     */
    public Output<String> attributeMatchingModel() {
        return this.attributeMatchingModel;
    }

    /**
     * The `Email` type. You can choose from `EmailAddress`, `BusinessEmailAddress` and `PersonalEmailAddress`.
     * 
     */
    @Import(name="emailAddresses")
    private @Nullable Output<List<String>> emailAddresses;

    /**
     * @return The `Email` type. You can choose from `EmailAddress`, `BusinessEmailAddress` and `PersonalEmailAddress`.
     * 
     */
    public Optional<Output<List<String>>> emailAddresses() {
        return Optional.ofNullable(this.emailAddresses);
    }

    /**
     * The `PhoneNumber` type. You can choose from `PhoneNumber`, `HomePhoneNumber`, and `MobilePhoneNumber`.
     * 
     */
    @Import(name="phoneNumbers")
    private @Nullable Output<List<String>> phoneNumbers;

    /**
     * @return The `PhoneNumber` type. You can choose from `PhoneNumber`, `HomePhoneNumber`, and `MobilePhoneNumber`.
     * 
     */
    public Optional<Output<List<String>>> phoneNumbers() {
        return Optional.ofNullable(this.phoneNumbers);
    }

    private DomainRuleBasedMatchingAttributeTypesSelectorArgs() {}

    private DomainRuleBasedMatchingAttributeTypesSelectorArgs(DomainRuleBasedMatchingAttributeTypesSelectorArgs $) {
        this.addresses = $.addresses;
        this.attributeMatchingModel = $.attributeMatchingModel;
        this.emailAddresses = $.emailAddresses;
        this.phoneNumbers = $.phoneNumbers;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DomainRuleBasedMatchingAttributeTypesSelectorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DomainRuleBasedMatchingAttributeTypesSelectorArgs $;

        public Builder() {
            $ = new DomainRuleBasedMatchingAttributeTypesSelectorArgs();
        }

        public Builder(DomainRuleBasedMatchingAttributeTypesSelectorArgs defaults) {
            $ = new DomainRuleBasedMatchingAttributeTypesSelectorArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param addresses The `Address` type. You can choose from `Address`, `BusinessAddress`, `MaillingAddress`, and `ShippingAddress`.
         * 
         * @return builder
         * 
         */
        public Builder addresses(@Nullable Output<List<String>> addresses) {
            $.addresses = addresses;
            return this;
        }

        /**
         * @param addresses The `Address` type. You can choose from `Address`, `BusinessAddress`, `MaillingAddress`, and `ShippingAddress`.
         * 
         * @return builder
         * 
         */
        public Builder addresses(List<String> addresses) {
            return addresses(Output.of(addresses));
        }

        /**
         * @param addresses The `Address` type. You can choose from `Address`, `BusinessAddress`, `MaillingAddress`, and `ShippingAddress`.
         * 
         * @return builder
         * 
         */
        public Builder addresses(String... addresses) {
            return addresses(List.of(addresses));
        }

        /**
         * @param attributeMatchingModel Configures the `AttributeMatchingModel`, you can either choose `ONE_TO_ONE` or `MANY_TO_MANY`.
         * 
         * @return builder
         * 
         */
        public Builder attributeMatchingModel(Output<String> attributeMatchingModel) {
            $.attributeMatchingModel = attributeMatchingModel;
            return this;
        }

        /**
         * @param attributeMatchingModel Configures the `AttributeMatchingModel`, you can either choose `ONE_TO_ONE` or `MANY_TO_MANY`.
         * 
         * @return builder
         * 
         */
        public Builder attributeMatchingModel(String attributeMatchingModel) {
            return attributeMatchingModel(Output.of(attributeMatchingModel));
        }

        /**
         * @param emailAddresses The `Email` type. You can choose from `EmailAddress`, `BusinessEmailAddress` and `PersonalEmailAddress`.
         * 
         * @return builder
         * 
         */
        public Builder emailAddresses(@Nullable Output<List<String>> emailAddresses) {
            $.emailAddresses = emailAddresses;
            return this;
        }

        /**
         * @param emailAddresses The `Email` type. You can choose from `EmailAddress`, `BusinessEmailAddress` and `PersonalEmailAddress`.
         * 
         * @return builder
         * 
         */
        public Builder emailAddresses(List<String> emailAddresses) {
            return emailAddresses(Output.of(emailAddresses));
        }

        /**
         * @param emailAddresses The `Email` type. You can choose from `EmailAddress`, `BusinessEmailAddress` and `PersonalEmailAddress`.
         * 
         * @return builder
         * 
         */
        public Builder emailAddresses(String... emailAddresses) {
            return emailAddresses(List.of(emailAddresses));
        }

        /**
         * @param phoneNumbers The `PhoneNumber` type. You can choose from `PhoneNumber`, `HomePhoneNumber`, and `MobilePhoneNumber`.
         * 
         * @return builder
         * 
         */
        public Builder phoneNumbers(@Nullable Output<List<String>> phoneNumbers) {
            $.phoneNumbers = phoneNumbers;
            return this;
        }

        /**
         * @param phoneNumbers The `PhoneNumber` type. You can choose from `PhoneNumber`, `HomePhoneNumber`, and `MobilePhoneNumber`.
         * 
         * @return builder
         * 
         */
        public Builder phoneNumbers(List<String> phoneNumbers) {
            return phoneNumbers(Output.of(phoneNumbers));
        }

        /**
         * @param phoneNumbers The `PhoneNumber` type. You can choose from `PhoneNumber`, `HomePhoneNumber`, and `MobilePhoneNumber`.
         * 
         * @return builder
         * 
         */
        public Builder phoneNumbers(String... phoneNumbers) {
            return phoneNumbers(List.of(phoneNumbers));
        }

        public DomainRuleBasedMatchingAttributeTypesSelectorArgs build() {
            $.attributeMatchingModel = Objects.requireNonNull($.attributeMatchingModel, "expected parameter 'attributeMatchingModel' to be non-null");
            return $;
        }
    }

}
