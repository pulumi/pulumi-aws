// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.elasticbeanstalk;

import com.pulumi.aws.Utilities;
import com.pulumi.aws.elasticbeanstalk.EnvironmentArgs;
import com.pulumi.aws.elasticbeanstalk.inputs.EnvironmentState;
import com.pulumi.aws.elasticbeanstalk.outputs.EnvironmentAllSetting;
import com.pulumi.aws.elasticbeanstalk.outputs.EnvironmentSetting;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

@ResourceType(type="aws:elasticbeanstalk/environment:Environment")
public class Environment extends com.pulumi.resources.CustomResource {
    @Export(name="allSettings", refs={List.class,EnvironmentAllSetting.class}, tree="[0,1]")
    private Output<List<EnvironmentAllSetting>> allSettings;

    public Output<List<EnvironmentAllSetting>> allSettings() {
        return this.allSettings;
    }
    @Export(name="application", refs={String.class}, tree="[0]")
    private Output<String> application;

    public Output<String> application() {
        return this.application;
    }
    @Export(name="arn", refs={String.class}, tree="[0]")
    private Output<String> arn;

    public Output<String> arn() {
        return this.arn;
    }
    @Export(name="autoscalingGroups", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> autoscalingGroups;

    public Output<List<String>> autoscalingGroups() {
        return this.autoscalingGroups;
    }
    @Export(name="cname", refs={String.class}, tree="[0]")
    private Output<String> cname;

    public Output<String> cname() {
        return this.cname;
    }
    @Export(name="cnamePrefix", refs={String.class}, tree="[0]")
    private Output<String> cnamePrefix;

    public Output<String> cnamePrefix() {
        return this.cnamePrefix;
    }
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    @Export(name="endpointUrl", refs={String.class}, tree="[0]")
    private Output<String> endpointUrl;

    public Output<String> endpointUrl() {
        return this.endpointUrl;
    }
    @Export(name="instances", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> instances;

    public Output<List<String>> instances() {
        return this.instances;
    }
    @Export(name="launchConfigurations", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> launchConfigurations;

    public Output<List<String>> launchConfigurations() {
        return this.launchConfigurations;
    }
    @Export(name="loadBalancers", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> loadBalancers;

    public Output<List<String>> loadBalancers() {
        return this.loadBalancers;
    }
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    public Output<String> name() {
        return this.name;
    }
    @Export(name="platformArn", refs={String.class}, tree="[0]")
    private Output<String> platformArn;

    public Output<String> platformArn() {
        return this.platformArn;
    }
    @Export(name="pollInterval", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> pollInterval;

    public Output<Optional<String>> pollInterval() {
        return Codegen.optional(this.pollInterval);
    }
    @Export(name="queues", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> queues;

    public Output<List<String>> queues() {
        return this.queues;
    }
    @Export(name="settings", refs={List.class,EnvironmentSetting.class}, tree="[0,1]")
    private Output</* @Nullable */ List<EnvironmentSetting>> settings;

    public Output<Optional<List<EnvironmentSetting>>> settings() {
        return Codegen.optional(this.settings);
    }
    @Export(name="solutionStackName", refs={String.class}, tree="[0]")
    private Output<String> solutionStackName;

    public Output<String> solutionStackName() {
        return this.solutionStackName;
    }
    @Export(name="tags", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> tags;

    public Output<Optional<Map<String,String>>> tags() {
        return Codegen.optional(this.tags);
    }
    @Export(name="tagsAll", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> tagsAll;

    public Output<Map<String,String>> tagsAll() {
        return this.tagsAll;
    }
    @Export(name="templateName", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> templateName;

    public Output<Optional<String>> templateName() {
        return Codegen.optional(this.templateName);
    }
    @Export(name="tier", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tier;

    public Output<Optional<String>> tier() {
        return Codegen.optional(this.tier);
    }
    @Export(name="triggers", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> triggers;

    public Output<List<String>> triggers() {
        return this.triggers;
    }
    @Export(name="version", refs={String.class}, tree="[0]")
    private Output<String> version;

    public Output<String> version() {
        return this.version;
    }
    @Export(name="waitForReadyTimeout", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> waitForReadyTimeout;

    public Output<Optional<String>> waitForReadyTimeout() {
        return Codegen.optional(this.waitForReadyTimeout);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Environment(String name) {
        this(name, EnvironmentArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Environment(String name, EnvironmentArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Environment(String name, EnvironmentArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("aws:elasticbeanstalk/environment:Environment", name, args == null ? EnvironmentArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Environment(String name, Output<String> id, @Nullable EnvironmentState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("aws:elasticbeanstalk/environment:Environment", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Environment get(String name, Output<String> id, @Nullable EnvironmentState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Environment(name, id, state, options);
    }
}
