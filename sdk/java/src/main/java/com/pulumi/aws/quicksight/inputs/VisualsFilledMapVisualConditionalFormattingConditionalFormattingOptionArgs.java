// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.inputs;

import com.pulumi.aws.quicksight.inputs.VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionShapeArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.util.Objects;


public final class VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionArgs extends com.pulumi.resources.ResourceArgs {

    public static final VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionArgs Empty = new VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionArgs();

    @Import(name="shape", required=true)
    private Output<VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionShapeArgs> shape;

    public Output<VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionShapeArgs> shape() {
        return this.shape;
    }

    private VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionArgs() {}

    private VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionArgs(VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionArgs $) {
        this.shape = $.shape;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionArgs $;

        public Builder() {
            $ = new VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionArgs();
        }

        public Builder(VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionArgs defaults) {
            $ = new VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionArgs(Objects.requireNonNull(defaults));
        }

        public Builder shape(Output<VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionShapeArgs> shape) {
            $.shape = shape;
            return this;
        }

        public Builder shape(VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionShapeArgs shape) {
            return shape(Output.of(shape));
        }

        public VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionArgs build() {
            if ($.shape == null) {
                throw new MissingRequiredPropertyException("VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionArgs", "shape");
            }
            return $;
        }
    }

}
