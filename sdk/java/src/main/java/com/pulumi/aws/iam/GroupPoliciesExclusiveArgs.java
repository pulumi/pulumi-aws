// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.iam;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class GroupPoliciesExclusiveArgs extends com.pulumi.resources.ResourceArgs {

    public static final GroupPoliciesExclusiveArgs Empty = new GroupPoliciesExclusiveArgs();

    /**
     * IAM group name.
     * 
     */
    @Import(name="groupName", required=true)
    private Output<String> groupName;

    /**
     * @return IAM group name.
     * 
     */
    public Output<String> groupName() {
        return this.groupName;
    }

    /**
     * A list of inline policy names to be assigned to the group. Policies attached to this group but not configured in this argument will be removed.
     * 
     */
    @Import(name="policyNames", required=true)
    private Output<List<String>> policyNames;

    /**
     * @return A list of inline policy names to be assigned to the group. Policies attached to this group but not configured in this argument will be removed.
     * 
     */
    public Output<List<String>> policyNames() {
        return this.policyNames;
    }

    private GroupPoliciesExclusiveArgs() {}

    private GroupPoliciesExclusiveArgs(GroupPoliciesExclusiveArgs $) {
        this.groupName = $.groupName;
        this.policyNames = $.policyNames;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GroupPoliciesExclusiveArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GroupPoliciesExclusiveArgs $;

        public Builder() {
            $ = new GroupPoliciesExclusiveArgs();
        }

        public Builder(GroupPoliciesExclusiveArgs defaults) {
            $ = new GroupPoliciesExclusiveArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param groupName IAM group name.
         * 
         * @return builder
         * 
         */
        public Builder groupName(Output<String> groupName) {
            $.groupName = groupName;
            return this;
        }

        /**
         * @param groupName IAM group name.
         * 
         * @return builder
         * 
         */
        public Builder groupName(String groupName) {
            return groupName(Output.of(groupName));
        }

        /**
         * @param policyNames A list of inline policy names to be assigned to the group. Policies attached to this group but not configured in this argument will be removed.
         * 
         * @return builder
         * 
         */
        public Builder policyNames(Output<List<String>> policyNames) {
            $.policyNames = policyNames;
            return this;
        }

        /**
         * @param policyNames A list of inline policy names to be assigned to the group. Policies attached to this group but not configured in this argument will be removed.
         * 
         * @return builder
         * 
         */
        public Builder policyNames(List<String> policyNames) {
            return policyNames(Output.of(policyNames));
        }

        /**
         * @param policyNames A list of inline policy names to be assigned to the group. Policies attached to this group but not configured in this argument will be removed.
         * 
         * @return builder
         * 
         */
        public Builder policyNames(String... policyNames) {
            return policyNames(List.of(policyNames));
        }

        public GroupPoliciesExclusiveArgs build() {
            if ($.groupName == null) {
                throw new MissingRequiredPropertyException("GroupPoliciesExclusiveArgs", "groupName");
            }
            if ($.policyNames == null) {
                throw new MissingRequiredPropertyException("GroupPoliciesExclusiveArgs", "policyNames");
            }
            return $;
        }
    }

}
