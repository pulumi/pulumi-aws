// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.inputs;

import com.pulumi.aws.quicksight.inputs.AggregationFunctionArgs;
import com.pulumi.aws.quicksight.inputs.ColumnArgs;
import com.pulumi.aws.quicksight.inputs.FiltersNumericRangeFilterRangeMaximumArgs;
import com.pulumi.aws.quicksight.inputs.FiltersNumericRangeFilterRangeMinimumArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FiltersNumericRangeFilterArgs extends com.pulumi.resources.ResourceArgs {

    public static final FiltersNumericRangeFilterArgs Empty = new FiltersNumericRangeFilterArgs();

    @Import(name="aggregationFunction")
    private @Nullable Output<AggregationFunctionArgs> aggregationFunction;

    public Optional<Output<AggregationFunctionArgs>> aggregationFunction() {
        return Optional.ofNullable(this.aggregationFunction);
    }

    @Import(name="column", required=true)
    private Output<ColumnArgs> column;

    public Output<ColumnArgs> column() {
        return this.column;
    }

    @Import(name="filterId", required=true)
    private Output<String> filterId;

    public Output<String> filterId() {
        return this.filterId;
    }

    @Import(name="includeMaximum")
    private @Nullable Output<Boolean> includeMaximum;

    public Optional<Output<Boolean>> includeMaximum() {
        return Optional.ofNullable(this.includeMaximum);
    }

    @Import(name="includeMinimum")
    private @Nullable Output<Boolean> includeMinimum;

    public Optional<Output<Boolean>> includeMinimum() {
        return Optional.ofNullable(this.includeMinimum);
    }

    @Import(name="nullOption", required=true)
    private Output<String> nullOption;

    public Output<String> nullOption() {
        return this.nullOption;
    }

    @Import(name="rangeMaximum")
    private @Nullable Output<FiltersNumericRangeFilterRangeMaximumArgs> rangeMaximum;

    public Optional<Output<FiltersNumericRangeFilterRangeMaximumArgs>> rangeMaximum() {
        return Optional.ofNullable(this.rangeMaximum);
    }

    @Import(name="rangeMinimum")
    private @Nullable Output<FiltersNumericRangeFilterRangeMinimumArgs> rangeMinimum;

    public Optional<Output<FiltersNumericRangeFilterRangeMinimumArgs>> rangeMinimum() {
        return Optional.ofNullable(this.rangeMinimum);
    }

    @Import(name="selectAllOptions")
    private @Nullable Output<String> selectAllOptions;

    public Optional<Output<String>> selectAllOptions() {
        return Optional.ofNullable(this.selectAllOptions);
    }

    private FiltersNumericRangeFilterArgs() {}

    private FiltersNumericRangeFilterArgs(FiltersNumericRangeFilterArgs $) {
        this.aggregationFunction = $.aggregationFunction;
        this.column = $.column;
        this.filterId = $.filterId;
        this.includeMaximum = $.includeMaximum;
        this.includeMinimum = $.includeMinimum;
        this.nullOption = $.nullOption;
        this.rangeMaximum = $.rangeMaximum;
        this.rangeMinimum = $.rangeMinimum;
        this.selectAllOptions = $.selectAllOptions;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FiltersNumericRangeFilterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FiltersNumericRangeFilterArgs $;

        public Builder() {
            $ = new FiltersNumericRangeFilterArgs();
        }

        public Builder(FiltersNumericRangeFilterArgs defaults) {
            $ = new FiltersNumericRangeFilterArgs(Objects.requireNonNull(defaults));
        }

        public Builder aggregationFunction(@Nullable Output<AggregationFunctionArgs> aggregationFunction) {
            $.aggregationFunction = aggregationFunction;
            return this;
        }

        public Builder aggregationFunction(AggregationFunctionArgs aggregationFunction) {
            return aggregationFunction(Output.of(aggregationFunction));
        }

        public Builder column(Output<ColumnArgs> column) {
            $.column = column;
            return this;
        }

        public Builder column(ColumnArgs column) {
            return column(Output.of(column));
        }

        public Builder filterId(Output<String> filterId) {
            $.filterId = filterId;
            return this;
        }

        public Builder filterId(String filterId) {
            return filterId(Output.of(filterId));
        }

        public Builder includeMaximum(@Nullable Output<Boolean> includeMaximum) {
            $.includeMaximum = includeMaximum;
            return this;
        }

        public Builder includeMaximum(Boolean includeMaximum) {
            return includeMaximum(Output.of(includeMaximum));
        }

        public Builder includeMinimum(@Nullable Output<Boolean> includeMinimum) {
            $.includeMinimum = includeMinimum;
            return this;
        }

        public Builder includeMinimum(Boolean includeMinimum) {
            return includeMinimum(Output.of(includeMinimum));
        }

        public Builder nullOption(Output<String> nullOption) {
            $.nullOption = nullOption;
            return this;
        }

        public Builder nullOption(String nullOption) {
            return nullOption(Output.of(nullOption));
        }

        public Builder rangeMaximum(@Nullable Output<FiltersNumericRangeFilterRangeMaximumArgs> rangeMaximum) {
            $.rangeMaximum = rangeMaximum;
            return this;
        }

        public Builder rangeMaximum(FiltersNumericRangeFilterRangeMaximumArgs rangeMaximum) {
            return rangeMaximum(Output.of(rangeMaximum));
        }

        public Builder rangeMinimum(@Nullable Output<FiltersNumericRangeFilterRangeMinimumArgs> rangeMinimum) {
            $.rangeMinimum = rangeMinimum;
            return this;
        }

        public Builder rangeMinimum(FiltersNumericRangeFilterRangeMinimumArgs rangeMinimum) {
            return rangeMinimum(Output.of(rangeMinimum));
        }

        public Builder selectAllOptions(@Nullable Output<String> selectAllOptions) {
            $.selectAllOptions = selectAllOptions;
            return this;
        }

        public Builder selectAllOptions(String selectAllOptions) {
            return selectAllOptions(Output.of(selectAllOptions));
        }

        public FiltersNumericRangeFilterArgs build() {
            if ($.column == null) {
                throw new MissingRequiredPropertyException("FiltersNumericRangeFilterArgs", "column");
            }
            if ($.filterId == null) {
                throw new MissingRequiredPropertyException("FiltersNumericRangeFilterArgs", "filterId");
            }
            if ($.nullOption == null) {
                throw new MissingRequiredPropertyException("FiltersNumericRangeFilterArgs", "nullOption");
            }
            return $;
        }
    }

}
