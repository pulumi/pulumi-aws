// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.rds.inputs;

import com.pulumi.aws.rds.inputs.ShardGroupTimeoutsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ShardGroupState extends com.pulumi.resources.ResourceArgs {

    public static final ShardGroupState Empty = new ShardGroupState();

    /**
     * ARN of the shard group.
     * 
     */
    @Import(name="arn")
    private @Nullable Output<String> arn;

    /**
     * @return ARN of the shard group.
     * 
     */
    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    /**
     * Specifies whether to create standby DB shard groups for the DB shard group. Valid values are:
     * 
     */
    @Import(name="computeRedundancy")
    private @Nullable Output<Integer> computeRedundancy;

    /**
     * @return Specifies whether to create standby DB shard groups for the DB shard group. Valid values are:
     * 
     */
    public Optional<Output<Integer>> computeRedundancy() {
        return Optional.ofNullable(this.computeRedundancy);
    }

    /**
     * The name of the primary DB cluster for the DB shard group.
     * 
     */
    @Import(name="dbClusterIdentifier")
    private @Nullable Output<String> dbClusterIdentifier;

    /**
     * @return The name of the primary DB cluster for the DB shard group.
     * 
     */
    public Optional<Output<String>> dbClusterIdentifier() {
        return Optional.ofNullable(this.dbClusterIdentifier);
    }

    /**
     * The name of the DB shard group.
     * 
     */
    @Import(name="dbShardGroupIdentifier")
    private @Nullable Output<String> dbShardGroupIdentifier;

    /**
     * @return The name of the DB shard group.
     * 
     */
    public Optional<Output<String>> dbShardGroupIdentifier() {
        return Optional.ofNullable(this.dbShardGroupIdentifier);
    }

    /**
     * The AWS Region-unique, immutable identifier for the DB shard group.
     * 
     */
    @Import(name="dbShardGroupResourceId")
    private @Nullable Output<String> dbShardGroupResourceId;

    /**
     * @return The AWS Region-unique, immutable identifier for the DB shard group.
     * 
     */
    public Optional<Output<String>> dbShardGroupResourceId() {
        return Optional.ofNullable(this.dbShardGroupResourceId);
    }

    /**
     * The connection endpoint for the DB shard group.
     * 
     */
    @Import(name="endpoint")
    private @Nullable Output<String> endpoint;

    /**
     * @return The connection endpoint for the DB shard group.
     * 
     */
    public Optional<Output<String>> endpoint() {
        return Optional.ofNullable(this.endpoint);
    }

    /**
     * The maximum capacity of the DB shard group in Aurora capacity units (ACUs).
     * 
     */
    @Import(name="maxAcu")
    private @Nullable Output<Double> maxAcu;

    /**
     * @return The maximum capacity of the DB shard group in Aurora capacity units (ACUs).
     * 
     */
    public Optional<Output<Double>> maxAcu() {
        return Optional.ofNullable(this.maxAcu);
    }

    /**
     * The minimum capacity of the DB shard group in Aurora capacity units (ACUs).
     * 
     */
    @Import(name="minAcu")
    private @Nullable Output<Double> minAcu;

    /**
     * @return The minimum capacity of the DB shard group in Aurora capacity units (ACUs).
     * 
     */
    public Optional<Output<Double>> minAcu() {
        return Optional.ofNullable(this.minAcu);
    }

    /**
     * Indicates whether the DB shard group is publicly accessible.
     * 
     */
    @Import(name="publiclyAccessible")
    private @Nullable Output<Boolean> publiclyAccessible;

    /**
     * @return Indicates whether the DB shard group is publicly accessible.
     * 
     */
    public Optional<Output<Boolean>> publiclyAccessible() {
        return Optional.ofNullable(this.publiclyAccessible);
    }

    /**
     * Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     * For more detailed documentation about each argument, refer to the [AWS official documentation](https://docs.aws.amazon.com/cli/latest/reference/rds/create-shard-group.html).
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     * For more detailed documentation about each argument, refer to the [AWS official documentation](https://docs.aws.amazon.com/cli/latest/reference/rds/create-shard-group.html).
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    /**
     * @return A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    @Import(name="timeouts")
    private @Nullable Output<ShardGroupTimeoutsArgs> timeouts;

    public Optional<Output<ShardGroupTimeoutsArgs>> timeouts() {
        return Optional.ofNullable(this.timeouts);
    }

    private ShardGroupState() {}

    private ShardGroupState(ShardGroupState $) {
        this.arn = $.arn;
        this.computeRedundancy = $.computeRedundancy;
        this.dbClusterIdentifier = $.dbClusterIdentifier;
        this.dbShardGroupIdentifier = $.dbShardGroupIdentifier;
        this.dbShardGroupResourceId = $.dbShardGroupResourceId;
        this.endpoint = $.endpoint;
        this.maxAcu = $.maxAcu;
        this.minAcu = $.minAcu;
        this.publiclyAccessible = $.publiclyAccessible;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
        this.timeouts = $.timeouts;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ShardGroupState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ShardGroupState $;

        public Builder() {
            $ = new ShardGroupState();
        }

        public Builder(ShardGroupState defaults) {
            $ = new ShardGroupState(Objects.requireNonNull(defaults));
        }

        /**
         * @param arn ARN of the shard group.
         * 
         * @return builder
         * 
         */
        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        /**
         * @param arn ARN of the shard group.
         * 
         * @return builder
         * 
         */
        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        /**
         * @param computeRedundancy Specifies whether to create standby DB shard groups for the DB shard group. Valid values are:
         * 
         * @return builder
         * 
         */
        public Builder computeRedundancy(@Nullable Output<Integer> computeRedundancy) {
            $.computeRedundancy = computeRedundancy;
            return this;
        }

        /**
         * @param computeRedundancy Specifies whether to create standby DB shard groups for the DB shard group. Valid values are:
         * 
         * @return builder
         * 
         */
        public Builder computeRedundancy(Integer computeRedundancy) {
            return computeRedundancy(Output.of(computeRedundancy));
        }

        /**
         * @param dbClusterIdentifier The name of the primary DB cluster for the DB shard group.
         * 
         * @return builder
         * 
         */
        public Builder dbClusterIdentifier(@Nullable Output<String> dbClusterIdentifier) {
            $.dbClusterIdentifier = dbClusterIdentifier;
            return this;
        }

        /**
         * @param dbClusterIdentifier The name of the primary DB cluster for the DB shard group.
         * 
         * @return builder
         * 
         */
        public Builder dbClusterIdentifier(String dbClusterIdentifier) {
            return dbClusterIdentifier(Output.of(dbClusterIdentifier));
        }

        /**
         * @param dbShardGroupIdentifier The name of the DB shard group.
         * 
         * @return builder
         * 
         */
        public Builder dbShardGroupIdentifier(@Nullable Output<String> dbShardGroupIdentifier) {
            $.dbShardGroupIdentifier = dbShardGroupIdentifier;
            return this;
        }

        /**
         * @param dbShardGroupIdentifier The name of the DB shard group.
         * 
         * @return builder
         * 
         */
        public Builder dbShardGroupIdentifier(String dbShardGroupIdentifier) {
            return dbShardGroupIdentifier(Output.of(dbShardGroupIdentifier));
        }

        /**
         * @param dbShardGroupResourceId The AWS Region-unique, immutable identifier for the DB shard group.
         * 
         * @return builder
         * 
         */
        public Builder dbShardGroupResourceId(@Nullable Output<String> dbShardGroupResourceId) {
            $.dbShardGroupResourceId = dbShardGroupResourceId;
            return this;
        }

        /**
         * @param dbShardGroupResourceId The AWS Region-unique, immutable identifier for the DB shard group.
         * 
         * @return builder
         * 
         */
        public Builder dbShardGroupResourceId(String dbShardGroupResourceId) {
            return dbShardGroupResourceId(Output.of(dbShardGroupResourceId));
        }

        /**
         * @param endpoint The connection endpoint for the DB shard group.
         * 
         * @return builder
         * 
         */
        public Builder endpoint(@Nullable Output<String> endpoint) {
            $.endpoint = endpoint;
            return this;
        }

        /**
         * @param endpoint The connection endpoint for the DB shard group.
         * 
         * @return builder
         * 
         */
        public Builder endpoint(String endpoint) {
            return endpoint(Output.of(endpoint));
        }

        /**
         * @param maxAcu The maximum capacity of the DB shard group in Aurora capacity units (ACUs).
         * 
         * @return builder
         * 
         */
        public Builder maxAcu(@Nullable Output<Double> maxAcu) {
            $.maxAcu = maxAcu;
            return this;
        }

        /**
         * @param maxAcu The maximum capacity of the DB shard group in Aurora capacity units (ACUs).
         * 
         * @return builder
         * 
         */
        public Builder maxAcu(Double maxAcu) {
            return maxAcu(Output.of(maxAcu));
        }

        /**
         * @param minAcu The minimum capacity of the DB shard group in Aurora capacity units (ACUs).
         * 
         * @return builder
         * 
         */
        public Builder minAcu(@Nullable Output<Double> minAcu) {
            $.minAcu = minAcu;
            return this;
        }

        /**
         * @param minAcu The minimum capacity of the DB shard group in Aurora capacity units (ACUs).
         * 
         * @return builder
         * 
         */
        public Builder minAcu(Double minAcu) {
            return minAcu(Output.of(minAcu));
        }

        /**
         * @param publiclyAccessible Indicates whether the DB shard group is publicly accessible.
         * 
         * @return builder
         * 
         */
        public Builder publiclyAccessible(@Nullable Output<Boolean> publiclyAccessible) {
            $.publiclyAccessible = publiclyAccessible;
            return this;
        }

        /**
         * @param publiclyAccessible Indicates whether the DB shard group is publicly accessible.
         * 
         * @return builder
         * 
         */
        public Builder publiclyAccessible(Boolean publiclyAccessible) {
            return publiclyAccessible(Output.of(publiclyAccessible));
        }

        /**
         * @param tags Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * For more detailed documentation about each argument, refer to the [AWS official documentation](https://docs.aws.amazon.com/cli/latest/reference/rds/create-shard-group.html).
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * For more detailed documentation about each argument, refer to the [AWS official documentation](https://docs.aws.amazon.com/cli/latest/reference/rds/create-shard-group.html).
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tagsAll A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
         * 
         * @return builder
         * 
         * @deprecated
         * Please use `tags` instead.
         * 
         */
        @Deprecated /* Please use `tags` instead. */
        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        /**
         * @param tagsAll A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
         * 
         * @return builder
         * 
         * @deprecated
         * Please use `tags` instead.
         * 
         */
        @Deprecated /* Please use `tags` instead. */
        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        public Builder timeouts(@Nullable Output<ShardGroupTimeoutsArgs> timeouts) {
            $.timeouts = timeouts;
            return this;
        }

        public Builder timeouts(ShardGroupTimeoutsArgs timeouts) {
            return timeouts(Output.of(timeouts));
        }

        public ShardGroupState build() {
            return $;
        }
    }

}
