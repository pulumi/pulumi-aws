// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.securityhub.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetStandardsControlAssociationsStandardsControlAssociation {
    /**
     * @return Enablement status of a control in a specific standard.
     * 
     */
    private String associationStatus;
    /**
     * @return List of underlying requirements in the compliance framework related to the standard.
     * 
     */
    private List<String> relatedRequirements;
    /**
     * @return ARN of the security control.
     * 
     */
    private String securityControlArn;
    /**
     * @return The identifier of the control (identified with `SecurityControlId`, `SecurityControlArn`, or a mix of both parameters).
     * 
     */
    private String securityControlId;
    /**
     * @return ARN of the standard.
     * 
     */
    private String standardsArn;
    /**
     * @return Description of the standard.
     * 
     */
    private String standardsControlDescription;
    /**
     * @return Title of the standard.
     * 
     */
    private String standardsControlTitle;
    /**
     * @return Last time that a control&#39;s enablement status in a specified standard was updated.
     * 
     */
    private String updatedAt;
    /**
     * @return Reason for updating a control&#39;s enablement status in a specified standard.
     * 
     */
    private String updatedReason;

    private GetStandardsControlAssociationsStandardsControlAssociation() {}
    /**
     * @return Enablement status of a control in a specific standard.
     * 
     */
    public String associationStatus() {
        return this.associationStatus;
    }
    /**
     * @return List of underlying requirements in the compliance framework related to the standard.
     * 
     */
    public List<String> relatedRequirements() {
        return this.relatedRequirements;
    }
    /**
     * @return ARN of the security control.
     * 
     */
    public String securityControlArn() {
        return this.securityControlArn;
    }
    /**
     * @return The identifier of the control (identified with `SecurityControlId`, `SecurityControlArn`, or a mix of both parameters).
     * 
     */
    public String securityControlId() {
        return this.securityControlId;
    }
    /**
     * @return ARN of the standard.
     * 
     */
    public String standardsArn() {
        return this.standardsArn;
    }
    /**
     * @return Description of the standard.
     * 
     */
    public String standardsControlDescription() {
        return this.standardsControlDescription;
    }
    /**
     * @return Title of the standard.
     * 
     */
    public String standardsControlTitle() {
        return this.standardsControlTitle;
    }
    /**
     * @return Last time that a control&#39;s enablement status in a specified standard was updated.
     * 
     */
    public String updatedAt() {
        return this.updatedAt;
    }
    /**
     * @return Reason for updating a control&#39;s enablement status in a specified standard.
     * 
     */
    public String updatedReason() {
        return this.updatedReason;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetStandardsControlAssociationsStandardsControlAssociation defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String associationStatus;
        private List<String> relatedRequirements;
        private String securityControlArn;
        private String securityControlId;
        private String standardsArn;
        private String standardsControlDescription;
        private String standardsControlTitle;
        private String updatedAt;
        private String updatedReason;
        public Builder() {}
        public Builder(GetStandardsControlAssociationsStandardsControlAssociation defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.associationStatus = defaults.associationStatus;
    	      this.relatedRequirements = defaults.relatedRequirements;
    	      this.securityControlArn = defaults.securityControlArn;
    	      this.securityControlId = defaults.securityControlId;
    	      this.standardsArn = defaults.standardsArn;
    	      this.standardsControlDescription = defaults.standardsControlDescription;
    	      this.standardsControlTitle = defaults.standardsControlTitle;
    	      this.updatedAt = defaults.updatedAt;
    	      this.updatedReason = defaults.updatedReason;
        }

        @CustomType.Setter
        public Builder associationStatus(String associationStatus) {
            if (associationStatus == null) {
              throw new MissingRequiredPropertyException("GetStandardsControlAssociationsStandardsControlAssociation", "associationStatus");
            }
            this.associationStatus = associationStatus;
            return this;
        }
        @CustomType.Setter
        public Builder relatedRequirements(List<String> relatedRequirements) {
            if (relatedRequirements == null) {
              throw new MissingRequiredPropertyException("GetStandardsControlAssociationsStandardsControlAssociation", "relatedRequirements");
            }
            this.relatedRequirements = relatedRequirements;
            return this;
        }
        public Builder relatedRequirements(String... relatedRequirements) {
            return relatedRequirements(List.of(relatedRequirements));
        }
        @CustomType.Setter
        public Builder securityControlArn(String securityControlArn) {
            if (securityControlArn == null) {
              throw new MissingRequiredPropertyException("GetStandardsControlAssociationsStandardsControlAssociation", "securityControlArn");
            }
            this.securityControlArn = securityControlArn;
            return this;
        }
        @CustomType.Setter
        public Builder securityControlId(String securityControlId) {
            if (securityControlId == null) {
              throw new MissingRequiredPropertyException("GetStandardsControlAssociationsStandardsControlAssociation", "securityControlId");
            }
            this.securityControlId = securityControlId;
            return this;
        }
        @CustomType.Setter
        public Builder standardsArn(String standardsArn) {
            if (standardsArn == null) {
              throw new MissingRequiredPropertyException("GetStandardsControlAssociationsStandardsControlAssociation", "standardsArn");
            }
            this.standardsArn = standardsArn;
            return this;
        }
        @CustomType.Setter
        public Builder standardsControlDescription(String standardsControlDescription) {
            if (standardsControlDescription == null) {
              throw new MissingRequiredPropertyException("GetStandardsControlAssociationsStandardsControlAssociation", "standardsControlDescription");
            }
            this.standardsControlDescription = standardsControlDescription;
            return this;
        }
        @CustomType.Setter
        public Builder standardsControlTitle(String standardsControlTitle) {
            if (standardsControlTitle == null) {
              throw new MissingRequiredPropertyException("GetStandardsControlAssociationsStandardsControlAssociation", "standardsControlTitle");
            }
            this.standardsControlTitle = standardsControlTitle;
            return this;
        }
        @CustomType.Setter
        public Builder updatedAt(String updatedAt) {
            if (updatedAt == null) {
              throw new MissingRequiredPropertyException("GetStandardsControlAssociationsStandardsControlAssociation", "updatedAt");
            }
            this.updatedAt = updatedAt;
            return this;
        }
        @CustomType.Setter
        public Builder updatedReason(String updatedReason) {
            if (updatedReason == null) {
              throw new MissingRequiredPropertyException("GetStandardsControlAssociationsStandardsControlAssociation", "updatedReason");
            }
            this.updatedReason = updatedReason;
            return this;
        }
        public GetStandardsControlAssociationsStandardsControlAssociation build() {
            final var _resultValue = new GetStandardsControlAssociationsStandardsControlAssociation();
            _resultValue.associationStatus = associationStatus;
            _resultValue.relatedRequirements = relatedRequirements;
            _resultValue.securityControlArn = securityControlArn;
            _resultValue.securityControlId = securityControlId;
            _resultValue.standardsArn = standardsArn;
            _resultValue.standardsControlDescription = standardsControlDescription;
            _resultValue.standardsControlTitle = standardsControlTitle;
            _resultValue.updatedAt = updatedAt;
            _resultValue.updatedReason = updatedReason;
            return _resultValue;
        }
    }
}
