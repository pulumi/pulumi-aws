// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.bedrock.outputs;

import com.pulumi.aws.bedrock.outputs.AgentAgentPromptOverrideConfigurationPromptConfigurationInferenceConfiguration;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class AgentAgentPromptOverrideConfigurationPromptConfiguration {
    /**
     * @return prompt template with which to replace the default prompt template. You can use placeholder variables in the base prompt template to customize the prompt. For more information, see [Prompt template placeholder variables](https://docs.aws.amazon.com/bedrock/latest/userguide/prompt-placeholders.html).
     * 
     */
    private String basePromptTemplate;
    /**
     * @return Inference parameters to use when the agent invokes a foundation model in the part of the agent sequence defined by the `prompt_type`. For more information, see [Inference parameters for foundation models](https://docs.aws.amazon.com/bedrock/latest/userguide/model-parameters.html). See `inference_configuration` block for details.
     * 
     */
    private List<AgentAgentPromptOverrideConfigurationPromptConfigurationInferenceConfiguration> inferenceConfigurations;
    /**
     * @return Whether to override the default parser Lambda function when parsing the raw foundation model output in the part of the agent sequence defined by the `prompt_type`. If you set the argument as `OVERRIDDEN`, the `override_lambda` argument in the `prompt_override_configuration` block must be specified with the ARN of a Lambda function. Valid values: `DEFAULT`, `OVERRIDDEN`.
     * 
     */
    private String parserMode;
    /**
     * @return Whether to override the default prompt template for this `prompt_type`. Set this argument to `OVERRIDDEN` to use the prompt that you provide in the `base_prompt_template`. If you leave it as `DEFAULT`, the agent uses a default prompt template. Valid values: `DEFAULT`, `OVERRIDDEN`.
     * 
     */
    private String promptCreationMode;
    /**
     * @return Whether to allow the agent to carry out the step specified in the `prompt_type`. If you set this argument to `DISABLED`, the agent skips that step. Valid Values: `ENABLED`, `DISABLED`.
     * 
     */
    private String promptState;
    /**
     * @return Step in the agent sequence that this prompt configuration applies to. Valid values: `PRE_PROCESSING`, `ORCHESTRATION`, `POST_PROCESSING`, `KNOWLEDGE_BASE_RESPONSE_GENERATION`.
     * 
     */
    private String promptType;

    private AgentAgentPromptOverrideConfigurationPromptConfiguration() {}
    /**
     * @return prompt template with which to replace the default prompt template. You can use placeholder variables in the base prompt template to customize the prompt. For more information, see [Prompt template placeholder variables](https://docs.aws.amazon.com/bedrock/latest/userguide/prompt-placeholders.html).
     * 
     */
    public String basePromptTemplate() {
        return this.basePromptTemplate;
    }
    /**
     * @return Inference parameters to use when the agent invokes a foundation model in the part of the agent sequence defined by the `prompt_type`. For more information, see [Inference parameters for foundation models](https://docs.aws.amazon.com/bedrock/latest/userguide/model-parameters.html). See `inference_configuration` block for details.
     * 
     */
    public List<AgentAgentPromptOverrideConfigurationPromptConfigurationInferenceConfiguration> inferenceConfigurations() {
        return this.inferenceConfigurations;
    }
    /**
     * @return Whether to override the default parser Lambda function when parsing the raw foundation model output in the part of the agent sequence defined by the `prompt_type`. If you set the argument as `OVERRIDDEN`, the `override_lambda` argument in the `prompt_override_configuration` block must be specified with the ARN of a Lambda function. Valid values: `DEFAULT`, `OVERRIDDEN`.
     * 
     */
    public String parserMode() {
        return this.parserMode;
    }
    /**
     * @return Whether to override the default prompt template for this `prompt_type`. Set this argument to `OVERRIDDEN` to use the prompt that you provide in the `base_prompt_template`. If you leave it as `DEFAULT`, the agent uses a default prompt template. Valid values: `DEFAULT`, `OVERRIDDEN`.
     * 
     */
    public String promptCreationMode() {
        return this.promptCreationMode;
    }
    /**
     * @return Whether to allow the agent to carry out the step specified in the `prompt_type`. If you set this argument to `DISABLED`, the agent skips that step. Valid Values: `ENABLED`, `DISABLED`.
     * 
     */
    public String promptState() {
        return this.promptState;
    }
    /**
     * @return Step in the agent sequence that this prompt configuration applies to. Valid values: `PRE_PROCESSING`, `ORCHESTRATION`, `POST_PROCESSING`, `KNOWLEDGE_BASE_RESPONSE_GENERATION`.
     * 
     */
    public String promptType() {
        return this.promptType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AgentAgentPromptOverrideConfigurationPromptConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String basePromptTemplate;
        private List<AgentAgentPromptOverrideConfigurationPromptConfigurationInferenceConfiguration> inferenceConfigurations;
        private String parserMode;
        private String promptCreationMode;
        private String promptState;
        private String promptType;
        public Builder() {}
        public Builder(AgentAgentPromptOverrideConfigurationPromptConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.basePromptTemplate = defaults.basePromptTemplate;
    	      this.inferenceConfigurations = defaults.inferenceConfigurations;
    	      this.parserMode = defaults.parserMode;
    	      this.promptCreationMode = defaults.promptCreationMode;
    	      this.promptState = defaults.promptState;
    	      this.promptType = defaults.promptType;
        }

        @CustomType.Setter
        public Builder basePromptTemplate(String basePromptTemplate) {
            if (basePromptTemplate == null) {
              throw new MissingRequiredPropertyException("AgentAgentPromptOverrideConfigurationPromptConfiguration", "basePromptTemplate");
            }
            this.basePromptTemplate = basePromptTemplate;
            return this;
        }
        @CustomType.Setter
        public Builder inferenceConfigurations(List<AgentAgentPromptOverrideConfigurationPromptConfigurationInferenceConfiguration> inferenceConfigurations) {
            if (inferenceConfigurations == null) {
              throw new MissingRequiredPropertyException("AgentAgentPromptOverrideConfigurationPromptConfiguration", "inferenceConfigurations");
            }
            this.inferenceConfigurations = inferenceConfigurations;
            return this;
        }
        public Builder inferenceConfigurations(AgentAgentPromptOverrideConfigurationPromptConfigurationInferenceConfiguration... inferenceConfigurations) {
            return inferenceConfigurations(List.of(inferenceConfigurations));
        }
        @CustomType.Setter
        public Builder parserMode(String parserMode) {
            if (parserMode == null) {
              throw new MissingRequiredPropertyException("AgentAgentPromptOverrideConfigurationPromptConfiguration", "parserMode");
            }
            this.parserMode = parserMode;
            return this;
        }
        @CustomType.Setter
        public Builder promptCreationMode(String promptCreationMode) {
            if (promptCreationMode == null) {
              throw new MissingRequiredPropertyException("AgentAgentPromptOverrideConfigurationPromptConfiguration", "promptCreationMode");
            }
            this.promptCreationMode = promptCreationMode;
            return this;
        }
        @CustomType.Setter
        public Builder promptState(String promptState) {
            if (promptState == null) {
              throw new MissingRequiredPropertyException("AgentAgentPromptOverrideConfigurationPromptConfiguration", "promptState");
            }
            this.promptState = promptState;
            return this;
        }
        @CustomType.Setter
        public Builder promptType(String promptType) {
            if (promptType == null) {
              throw new MissingRequiredPropertyException("AgentAgentPromptOverrideConfigurationPromptConfiguration", "promptType");
            }
            this.promptType = promptType;
            return this;
        }
        public AgentAgentPromptOverrideConfigurationPromptConfiguration build() {
            final var _resultValue = new AgentAgentPromptOverrideConfigurationPromptConfiguration();
            _resultValue.basePromptTemplate = basePromptTemplate;
            _resultValue.inferenceConfigurations = inferenceConfigurations;
            _resultValue.parserMode = parserMode;
            _resultValue.promptCreationMode = promptCreationMode;
            _resultValue.promptState = promptState;
            _resultValue.promptType = promptType;
            return _resultValue;
        }
    }
}
