// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.elasticache.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UserAuthenticationModeArgs extends com.pulumi.resources.ResourceArgs {

    public static final UserAuthenticationModeArgs Empty = new UserAuthenticationModeArgs();

    @Import(name="passwordCount")
    private @Nullable Output<Integer> passwordCount;

    public Optional<Output<Integer>> passwordCount() {
        return Optional.ofNullable(this.passwordCount);
    }

    /**
     * Specifies the passwords to use for authentication if `type` is set to `password`.
     * 
     */
    @Import(name="passwords")
    private @Nullable Output<List<String>> passwords;

    /**
     * @return Specifies the passwords to use for authentication if `type` is set to `password`.
     * 
     */
    public Optional<Output<List<String>>> passwords() {
        return Optional.ofNullable(this.passwords);
    }

    /**
     * Specifies the authentication type. Possible options are: `password`, `no-password-required` or `iam`.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Specifies the authentication type. Possible options are: `password`, `no-password-required` or `iam`.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private UserAuthenticationModeArgs() {}

    private UserAuthenticationModeArgs(UserAuthenticationModeArgs $) {
        this.passwordCount = $.passwordCount;
        this.passwords = $.passwords;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UserAuthenticationModeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UserAuthenticationModeArgs $;

        public Builder() {
            $ = new UserAuthenticationModeArgs();
        }

        public Builder(UserAuthenticationModeArgs defaults) {
            $ = new UserAuthenticationModeArgs(Objects.requireNonNull(defaults));
        }

        public Builder passwordCount(@Nullable Output<Integer> passwordCount) {
            $.passwordCount = passwordCount;
            return this;
        }

        public Builder passwordCount(Integer passwordCount) {
            return passwordCount(Output.of(passwordCount));
        }

        /**
         * @param passwords Specifies the passwords to use for authentication if `type` is set to `password`.
         * 
         * @return builder
         * 
         */
        public Builder passwords(@Nullable Output<List<String>> passwords) {
            $.passwords = passwords;
            return this;
        }

        /**
         * @param passwords Specifies the passwords to use for authentication if `type` is set to `password`.
         * 
         * @return builder
         * 
         */
        public Builder passwords(List<String> passwords) {
            return passwords(Output.of(passwords));
        }

        /**
         * @param passwords Specifies the passwords to use for authentication if `type` is set to `password`.
         * 
         * @return builder
         * 
         */
        public Builder passwords(String... passwords) {
            return passwords(List.of(passwords));
        }

        /**
         * @param type Specifies the authentication type. Possible options are: `password`, `no-password-required` or `iam`.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Specifies the authentication type. Possible options are: `password`, `no-password-required` or `iam`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public UserAuthenticationModeArgs build() {
            if ($.type == null) {
                throw new MissingRequiredPropertyException("UserAuthenticationModeArgs", "type");
            }
            return $;
        }
    }

}
