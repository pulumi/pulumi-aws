// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.dynamodb.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TableImportTableS3BucketSourceArgs extends com.pulumi.resources.ResourceArgs {

    public static final TableImportTableS3BucketSourceArgs Empty = new TableImportTableS3BucketSourceArgs();

    /**
     * The S3 bucket that is being imported from.
     * 
     */
    @Import(name="bucket", required=true)
    private Output<String> bucket;

    /**
     * @return The S3 bucket that is being imported from.
     * 
     */
    public Output<String> bucket() {
        return this.bucket;
    }

    /**
     * The account number of the S3 bucket that is being imported from.
     * 
     */
    @Import(name="bucketOwner")
    private @Nullable Output<String> bucketOwner;

    /**
     * @return The account number of the S3 bucket that is being imported from.
     * 
     */
    public Optional<Output<String>> bucketOwner() {
        return Optional.ofNullable(this.bucketOwner);
    }

    /**
     * The key prefix shared by all S3 Objects that are being imported.
     * 
     */
    @Import(name="keyPrefix")
    private @Nullable Output<String> keyPrefix;

    /**
     * @return The key prefix shared by all S3 Objects that are being imported.
     * 
     */
    public Optional<Output<String>> keyPrefix() {
        return Optional.ofNullable(this.keyPrefix);
    }

    private TableImportTableS3BucketSourceArgs() {}

    private TableImportTableS3BucketSourceArgs(TableImportTableS3BucketSourceArgs $) {
        this.bucket = $.bucket;
        this.bucketOwner = $.bucketOwner;
        this.keyPrefix = $.keyPrefix;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TableImportTableS3BucketSourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TableImportTableS3BucketSourceArgs $;

        public Builder() {
            $ = new TableImportTableS3BucketSourceArgs();
        }

        public Builder(TableImportTableS3BucketSourceArgs defaults) {
            $ = new TableImportTableS3BucketSourceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bucket The S3 bucket that is being imported from.
         * 
         * @return builder
         * 
         */
        public Builder bucket(Output<String> bucket) {
            $.bucket = bucket;
            return this;
        }

        /**
         * @param bucket The S3 bucket that is being imported from.
         * 
         * @return builder
         * 
         */
        public Builder bucket(String bucket) {
            return bucket(Output.of(bucket));
        }

        /**
         * @param bucketOwner The account number of the S3 bucket that is being imported from.
         * 
         * @return builder
         * 
         */
        public Builder bucketOwner(@Nullable Output<String> bucketOwner) {
            $.bucketOwner = bucketOwner;
            return this;
        }

        /**
         * @param bucketOwner The account number of the S3 bucket that is being imported from.
         * 
         * @return builder
         * 
         */
        public Builder bucketOwner(String bucketOwner) {
            return bucketOwner(Output.of(bucketOwner));
        }

        /**
         * @param keyPrefix The key prefix shared by all S3 Objects that are being imported.
         * 
         * @return builder
         * 
         */
        public Builder keyPrefix(@Nullable Output<String> keyPrefix) {
            $.keyPrefix = keyPrefix;
            return this;
        }

        /**
         * @param keyPrefix The key prefix shared by all S3 Objects that are being imported.
         * 
         * @return builder
         * 
         */
        public Builder keyPrefix(String keyPrefix) {
            return keyPrefix(Output.of(keyPrefix));
        }

        public TableImportTableS3BucketSourceArgs build() {
            $.bucket = Objects.requireNonNull($.bucket, "expected parameter 'bucket' to be non-null");
            return $;
        }
    }

}
