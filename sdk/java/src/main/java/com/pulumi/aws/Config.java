// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws;

import com.pulumi.aws.config.inputs.AssumeRole;
import com.pulumi.aws.config.inputs.AssumeRoleWithWebIdentity;
import com.pulumi.aws.config.inputs.DefaultTags;
import com.pulumi.aws.config.inputs.Endpoints;
import com.pulumi.aws.config.inputs.IgnoreTags;
import com.pulumi.core.TypeShape;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;

public final class Config {

    private static final com.pulumi.Config config = com.pulumi.Config.of("aws");
/**
 * The access key for API operations. You can retrieve this from the &#39;Security &amp; Credentials&#39; section of the AWS console.
 * 
 */
    public Optional<String> accessKey() {
        return Codegen.stringProp("accessKey").config(config).get();
    }
    public Optional<List<String>> allowedAccountIds() {
        return Codegen.objectProp("allowedAccountIds", TypeShape.<List<String>>builder(List.class).addParameter(String.class).build()).config(config).get();
    }
    public Optional<AssumeRole> assumeRole() {
        return Codegen.objectProp("assumeRole", AssumeRole.class).config(config).get();
    }
    public Optional<AssumeRoleWithWebIdentity> assumeRoleWithWebIdentity() {
        return Codegen.objectProp("assumeRoleWithWebIdentity", AssumeRoleWithWebIdentity.class).config(config).get();
    }
/**
 * File containing custom root and intermediate certificates. Can also be configured using the `AWS_CA_BUNDLE` environment
 * variable. (Setting `ca_bundle` in the shared config file is not supported.)
 * 
 */
    public Optional<String> customCaBundle() {
        return Codegen.stringProp("customCaBundle").config(config).get();
    }
/**
 * Configuration block with settings to default resource tags across all resources.
 * 
 */
    public Optional<DefaultTags> defaultTags() {
        return Codegen.objectProp("defaultTags", DefaultTags.class).config(config).get();
    }
/**
 * Address of the EC2 metadata service endpoint to use. Can also be configured using the
 * `AWS_EC2_METADATA_SERVICE_ENDPOINT` environment variable.
 * 
 */
    public Optional<String> ec2MetadataServiceEndpoint() {
        return Codegen.stringProp("ec2MetadataServiceEndpoint").config(config).get();
    }
/**
 * Protocol to use with EC2 metadata service endpoint.Valid values are `IPv4` and `IPv6`. Can also be configured using the
 * `AWS_EC2_METADATA_SERVICE_ENDPOINT_MODE` environment variable.
 * 
 */
    public Optional<String> ec2MetadataServiceEndpointMode() {
        return Codegen.stringProp("ec2MetadataServiceEndpointMode").config(config).get();
    }
    public Optional<List<Endpoints>> endpoints() {
        return Codegen.objectProp("endpoints", TypeShape.<List<Endpoints>>builder(List.class).addParameter(Endpoints.class).build()).config(config).get();
    }
    public Optional<List<String>> forbiddenAccountIds() {
        return Codegen.objectProp("forbiddenAccountIds", TypeShape.<List<String>>builder(List.class).addParameter(String.class).build()).config(config).get();
    }
/**
 * The address of an HTTP proxy to use when accessing the AWS API. Can also be configured using the `HTTP_PROXY` or
 * `HTTPS_PROXY` environment variables.
 * 
 */
    public Optional<String> httpProxy() {
        return Codegen.stringProp("httpProxy").config(config).get();
    }
/**
 * Configuration block with settings to ignore resource tags across all resources.
 * 
 */
    public Optional<IgnoreTags> ignoreTags() {
        return Codegen.objectProp("ignoreTags", IgnoreTags.class).config(config).get();
    }
/**
 * Explicitly allow the provider to perform &#34;insecure&#34; SSL requests. If omitted, default value is `false`
 * 
 */
    public Optional<Boolean> insecure() {
        return Codegen.booleanProp("insecure").config(config).get();
    }
/**
 * The maximum number of times an AWS API request is being executed. If the API request still fails, an error is thrown.
 * 
 */
    public Optional<Integer> maxRetries() {
        return Codegen.integerProp("maxRetries").config(config).get();
    }
/**
 * The profile for API operations. If not set, the default profile created with `aws configure` will be used.
 * 
 */
    public Optional<String> profile() {
        return Codegen.stringProp("profile").config(config).get();
    }
/**
 * The region where AWS operations will take place. Examples are us-east-1, us-west-2, etc.
 * 
 */
    public Optional<String> region() {
        return Codegen.stringProp("region").config(config).env("AWS_REGION", "AWS_DEFAULT_REGION").get();
    }
/**
 * Specifies how retries are attempted. Valid values are `standard` and `adaptive`. Can also be configured using the
 * `AWS_RETRY_MODE` environment variable.
 * 
 */
    public Optional<String> retryMode() {
        return Codegen.stringProp("retryMode").config(config).get();
    }
/**
 * Specifies whether S3 API calls in the `us-east-1` region use the legacy global endpoint or a regional endpoint. Valid
 * values are `legacy` or `regional`. Can also be configured using the `AWS_S3_US_EAST_1_REGIONAL_ENDPOINT` environment
 * variable or the `s3_us_east_1_regional_endpoint` shared config file parameter
 * 
 */
    public Optional<String> s3UsEast1RegionalEndpoint() {
        return Codegen.stringProp("s3UsEast1RegionalEndpoint").config(config).get();
    }
/**
 * Set this to true to enable the request to use path-style addressing, i.e., https://s3.amazonaws.com/BUCKET/KEY. By
 * default, the S3 client will use virtual hosted bucket addressing when possible (https://BUCKET.s3.amazonaws.com/KEY).
 * Specific to the Amazon S3 service.
 * 
 */
    public Optional<Boolean> s3UsePathStyle() {
        return Codegen.booleanProp("s3UsePathStyle").config(config).get();
    }
/**
 * The secret key for API operations. You can retrieve this from the &#39;Security &amp; Credentials&#39; section of the AWS console.
 * 
 */
    public Optional<String> secretKey() {
        return Codegen.stringProp("secretKey").config(config).get();
    }
/**
 * List of paths to shared config files. If not set, defaults to [~/.aws/config].
 * 
 */
    public Optional<List<String>> sharedConfigFiles() {
        return Codegen.objectProp("sharedConfigFiles", TypeShape.<List<String>>builder(List.class).addParameter(String.class).build()).config(config).get();
    }
/**
 * List of paths to shared credentials files. If not set, defaults to [~/.aws/credentials].
 * 
 */
    public Optional<List<String>> sharedCredentialsFiles() {
        return Codegen.objectProp("sharedCredentialsFiles", TypeShape.<List<String>>builder(List.class).addParameter(String.class).build()).config(config).get();
    }
/**
 * Skip the credentials validation via STS API. Used for AWS API implementations that do not have STS
 * available/implemented.
 * 
 */
    public Optional<Boolean> skipCredentialsValidation() {
        return Codegen.booleanProp("skipCredentialsValidation").config(config).def(false).get();
    }
/**
 * Skip the AWS Metadata API check. Used for AWS API implementations that do not have a metadata api endpoint.
 * 
 */
    public Optional<Boolean> skipMetadataApiCheck() {
        return Codegen.booleanProp("skipMetadataApiCheck").config(config).def(true).get();
    }
/**
 * Skip static validation of region name. Used by users of alternative AWS-like APIs or users w/ access to regions that are
 * not public (yet).
 * 
 */
    public Optional<Boolean> skipRegionValidation() {
        return Codegen.booleanProp("skipRegionValidation").config(config).def(true).get();
    }
/**
 * Skip requesting the account ID. Used for AWS API implementations that do not have IAM/STS API and/or metadata API.
 * 
 */
    public Optional<Boolean> skipRequestingAccountId() {
        return Codegen.booleanProp("skipRequestingAccountId").config(config).get();
    }
/**
 * The region where AWS STS operations will take place. Examples are us-east-1 and us-west-2.
 * 
 */
    public Optional<String> stsRegion() {
        return Codegen.stringProp("stsRegion").config(config).get();
    }
/**
 * session token. A session token is only required if you are using temporary security credentials.
 * 
 */
    public Optional<String> token() {
        return Codegen.stringProp("token").config(config).get();
    }
/**
 * Resolve an endpoint with DualStack capability
 * 
 */
    public Optional<Boolean> useDualstackEndpoint() {
        return Codegen.booleanProp("useDualstackEndpoint").config(config).get();
    }
/**
 * Resolve an endpoint with FIPS capability
 * 
 */
    public Optional<Boolean> useFipsEndpoint() {
        return Codegen.booleanProp("useFipsEndpoint").config(config).get();
    }
}
