// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ssoadmin.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class GetApplicationProvidersApplicationProviderDisplayDataArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetApplicationProvidersApplicationProviderDisplayDataArgs Empty = new GetApplicationProvidersApplicationProviderDisplayDataArgs();

    /**
     * Description of the application provider.
     * 
     */
    @Import(name="description", required=true)
    private Output<String> description;

    /**
     * @return Description of the application provider.
     * 
     */
    public Output<String> description() {
        return this.description;
    }

    /**
     * Name of the application provider.
     * 
     */
    @Import(name="displayName", required=true)
    private Output<String> displayName;

    /**
     * @return Name of the application provider.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * URL that points to an icon that represents the application provider.
     * 
     */
    @Import(name="iconUrl", required=true)
    private Output<String> iconUrl;

    /**
     * @return URL that points to an icon that represents the application provider.
     * 
     */
    public Output<String> iconUrl() {
        return this.iconUrl;
    }

    private GetApplicationProvidersApplicationProviderDisplayDataArgs() {}

    private GetApplicationProvidersApplicationProviderDisplayDataArgs(GetApplicationProvidersApplicationProviderDisplayDataArgs $) {
        this.description = $.description;
        this.displayName = $.displayName;
        this.iconUrl = $.iconUrl;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetApplicationProvidersApplicationProviderDisplayDataArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetApplicationProvidersApplicationProviderDisplayDataArgs $;

        public Builder() {
            $ = new GetApplicationProvidersApplicationProviderDisplayDataArgs();
        }

        public Builder(GetApplicationProvidersApplicationProviderDisplayDataArgs defaults) {
            $ = new GetApplicationProvidersApplicationProviderDisplayDataArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Description of the application provider.
         * 
         * @return builder
         * 
         */
        public Builder description(Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the application provider.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName Name of the application provider.
         * 
         * @return builder
         * 
         */
        public Builder displayName(Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName Name of the application provider.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param iconUrl URL that points to an icon that represents the application provider.
         * 
         * @return builder
         * 
         */
        public Builder iconUrl(Output<String> iconUrl) {
            $.iconUrl = iconUrl;
            return this;
        }

        /**
         * @param iconUrl URL that points to an icon that represents the application provider.
         * 
         * @return builder
         * 
         */
        public Builder iconUrl(String iconUrl) {
            return iconUrl(Output.of(iconUrl));
        }

        public GetApplicationProvidersApplicationProviderDisplayDataArgs build() {
            if ($.description == null) {
                throw new MissingRequiredPropertyException("GetApplicationProvidersApplicationProviderDisplayDataArgs", "description");
            }
            if ($.displayName == null) {
                throw new MissingRequiredPropertyException("GetApplicationProvidersApplicationProviderDisplayDataArgs", "displayName");
            }
            if ($.iconUrl == null) {
                throw new MissingRequiredPropertyException("GetApplicationProvidersApplicationProviderDisplayDataArgs", "iconUrl");
            }
            return $;
        }
    }

}
