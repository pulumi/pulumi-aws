// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ec2.outputs;

import com.pulumi.aws.ec2.outputs.GetVpcCidrBlockAssociation;
import com.pulumi.aws.ec2.outputs.GetVpcFilter;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class GetVpcResult {
    /**
     * @return ARN of VPC
     * 
     */
    private String arn;
    /**
     * @return CIDR block for the association.
     * 
     */
    private String cidrBlock;
    private List<GetVpcCidrBlockAssociation> cidrBlockAssociations;
    private Boolean default_;
    private String dhcpOptionsId;
    /**
     * @return Whether or not the VPC has DNS hostname support
     * 
     */
    private Boolean enableDnsHostnames;
    /**
     * @return Whether or not the VPC has DNS support
     * 
     */
    private Boolean enableDnsSupport;
    /**
     * @return Whether Network Address Usage metrics are enabled for your VPC
     * 
     */
    private Boolean enableNetworkAddressUsageMetrics;
    private @Nullable List<GetVpcFilter> filters;
    private String id;
    /**
     * @return Allowed tenancy of instances launched into the
     * selected VPC. May be any of `&#34;default&#34;`, `&#34;dedicated&#34;`, or `&#34;host&#34;`.
     * 
     */
    private String instanceTenancy;
    /**
     * @return Association ID for the IPv6 CIDR block.
     * 
     */
    private String ipv6AssociationId;
    /**
     * @return IPv6 CIDR block.
     * 
     */
    private String ipv6CidrBlock;
    /**
     * @return ID of the main route table associated with this VPC.
     * 
     */
    private String mainRouteTableId;
    /**
     * @return ID of the AWS account that owns the VPC.
     * 
     */
    private String ownerId;
    /**
     * @return State of the association.
     * 
     */
    private String state;
    private Map<String,String> tags;

    private GetVpcResult() {}
    /**
     * @return ARN of VPC
     * 
     */
    public String arn() {
        return this.arn;
    }
    /**
     * @return CIDR block for the association.
     * 
     */
    public String cidrBlock() {
        return this.cidrBlock;
    }
    public List<GetVpcCidrBlockAssociation> cidrBlockAssociations() {
        return this.cidrBlockAssociations;
    }
    public Boolean default_() {
        return this.default_;
    }
    public String dhcpOptionsId() {
        return this.dhcpOptionsId;
    }
    /**
     * @return Whether or not the VPC has DNS hostname support
     * 
     */
    public Boolean enableDnsHostnames() {
        return this.enableDnsHostnames;
    }
    /**
     * @return Whether or not the VPC has DNS support
     * 
     */
    public Boolean enableDnsSupport() {
        return this.enableDnsSupport;
    }
    /**
     * @return Whether Network Address Usage metrics are enabled for your VPC
     * 
     */
    public Boolean enableNetworkAddressUsageMetrics() {
        return this.enableNetworkAddressUsageMetrics;
    }
    public List<GetVpcFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    public String id() {
        return this.id;
    }
    /**
     * @return Allowed tenancy of instances launched into the
     * selected VPC. May be any of `&#34;default&#34;`, `&#34;dedicated&#34;`, or `&#34;host&#34;`.
     * 
     */
    public String instanceTenancy() {
        return this.instanceTenancy;
    }
    /**
     * @return Association ID for the IPv6 CIDR block.
     * 
     */
    public String ipv6AssociationId() {
        return this.ipv6AssociationId;
    }
    /**
     * @return IPv6 CIDR block.
     * 
     */
    public String ipv6CidrBlock() {
        return this.ipv6CidrBlock;
    }
    /**
     * @return ID of the main route table associated with this VPC.
     * 
     */
    public String mainRouteTableId() {
        return this.mainRouteTableId;
    }
    /**
     * @return ID of the AWS account that owns the VPC.
     * 
     */
    public String ownerId() {
        return this.ownerId;
    }
    /**
     * @return State of the association.
     * 
     */
    public String state() {
        return this.state;
    }
    public Map<String,String> tags() {
        return this.tags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetVpcResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String arn;
        private String cidrBlock;
        private List<GetVpcCidrBlockAssociation> cidrBlockAssociations;
        private Boolean default_;
        private String dhcpOptionsId;
        private Boolean enableDnsHostnames;
        private Boolean enableDnsSupport;
        private Boolean enableNetworkAddressUsageMetrics;
        private @Nullable List<GetVpcFilter> filters;
        private String id;
        private String instanceTenancy;
        private String ipv6AssociationId;
        private String ipv6CidrBlock;
        private String mainRouteTableId;
        private String ownerId;
        private String state;
        private Map<String,String> tags;
        public Builder() {}
        public Builder(GetVpcResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.cidrBlock = defaults.cidrBlock;
    	      this.cidrBlockAssociations = defaults.cidrBlockAssociations;
    	      this.default_ = defaults.default_;
    	      this.dhcpOptionsId = defaults.dhcpOptionsId;
    	      this.enableDnsHostnames = defaults.enableDnsHostnames;
    	      this.enableDnsSupport = defaults.enableDnsSupport;
    	      this.enableNetworkAddressUsageMetrics = defaults.enableNetworkAddressUsageMetrics;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.instanceTenancy = defaults.instanceTenancy;
    	      this.ipv6AssociationId = defaults.ipv6AssociationId;
    	      this.ipv6CidrBlock = defaults.ipv6CidrBlock;
    	      this.mainRouteTableId = defaults.mainRouteTableId;
    	      this.ownerId = defaults.ownerId;
    	      this.state = defaults.state;
    	      this.tags = defaults.tags;
        }

        @CustomType.Setter
        public Builder arn(String arn) {
            if (arn == null) {
              throw new MissingRequiredPropertyException("GetVpcResult", "arn");
            }
            this.arn = arn;
            return this;
        }
        @CustomType.Setter
        public Builder cidrBlock(String cidrBlock) {
            if (cidrBlock == null) {
              throw new MissingRequiredPropertyException("GetVpcResult", "cidrBlock");
            }
            this.cidrBlock = cidrBlock;
            return this;
        }
        @CustomType.Setter
        public Builder cidrBlockAssociations(List<GetVpcCidrBlockAssociation> cidrBlockAssociations) {
            if (cidrBlockAssociations == null) {
              throw new MissingRequiredPropertyException("GetVpcResult", "cidrBlockAssociations");
            }
            this.cidrBlockAssociations = cidrBlockAssociations;
            return this;
        }
        public Builder cidrBlockAssociations(GetVpcCidrBlockAssociation... cidrBlockAssociations) {
            return cidrBlockAssociations(List.of(cidrBlockAssociations));
        }
        @CustomType.Setter("default")
        public Builder default_(Boolean default_) {
            if (default_ == null) {
              throw new MissingRequiredPropertyException("GetVpcResult", "default_");
            }
            this.default_ = default_;
            return this;
        }
        @CustomType.Setter
        public Builder dhcpOptionsId(String dhcpOptionsId) {
            if (dhcpOptionsId == null) {
              throw new MissingRequiredPropertyException("GetVpcResult", "dhcpOptionsId");
            }
            this.dhcpOptionsId = dhcpOptionsId;
            return this;
        }
        @CustomType.Setter
        public Builder enableDnsHostnames(Boolean enableDnsHostnames) {
            if (enableDnsHostnames == null) {
              throw new MissingRequiredPropertyException("GetVpcResult", "enableDnsHostnames");
            }
            this.enableDnsHostnames = enableDnsHostnames;
            return this;
        }
        @CustomType.Setter
        public Builder enableDnsSupport(Boolean enableDnsSupport) {
            if (enableDnsSupport == null) {
              throw new MissingRequiredPropertyException("GetVpcResult", "enableDnsSupport");
            }
            this.enableDnsSupport = enableDnsSupport;
            return this;
        }
        @CustomType.Setter
        public Builder enableNetworkAddressUsageMetrics(Boolean enableNetworkAddressUsageMetrics) {
            if (enableNetworkAddressUsageMetrics == null) {
              throw new MissingRequiredPropertyException("GetVpcResult", "enableNetworkAddressUsageMetrics");
            }
            this.enableNetworkAddressUsageMetrics = enableNetworkAddressUsageMetrics;
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetVpcFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GetVpcFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetVpcResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder instanceTenancy(String instanceTenancy) {
            if (instanceTenancy == null) {
              throw new MissingRequiredPropertyException("GetVpcResult", "instanceTenancy");
            }
            this.instanceTenancy = instanceTenancy;
            return this;
        }
        @CustomType.Setter
        public Builder ipv6AssociationId(String ipv6AssociationId) {
            if (ipv6AssociationId == null) {
              throw new MissingRequiredPropertyException("GetVpcResult", "ipv6AssociationId");
            }
            this.ipv6AssociationId = ipv6AssociationId;
            return this;
        }
        @CustomType.Setter
        public Builder ipv6CidrBlock(String ipv6CidrBlock) {
            if (ipv6CidrBlock == null) {
              throw new MissingRequiredPropertyException("GetVpcResult", "ipv6CidrBlock");
            }
            this.ipv6CidrBlock = ipv6CidrBlock;
            return this;
        }
        @CustomType.Setter
        public Builder mainRouteTableId(String mainRouteTableId) {
            if (mainRouteTableId == null) {
              throw new MissingRequiredPropertyException("GetVpcResult", "mainRouteTableId");
            }
            this.mainRouteTableId = mainRouteTableId;
            return this;
        }
        @CustomType.Setter
        public Builder ownerId(String ownerId) {
            if (ownerId == null) {
              throw new MissingRequiredPropertyException("GetVpcResult", "ownerId");
            }
            this.ownerId = ownerId;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetVpcResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetVpcResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        public GetVpcResult build() {
            final var _resultValue = new GetVpcResult();
            _resultValue.arn = arn;
            _resultValue.cidrBlock = cidrBlock;
            _resultValue.cidrBlockAssociations = cidrBlockAssociations;
            _resultValue.default_ = default_;
            _resultValue.dhcpOptionsId = dhcpOptionsId;
            _resultValue.enableDnsHostnames = enableDnsHostnames;
            _resultValue.enableDnsSupport = enableDnsSupport;
            _resultValue.enableNetworkAddressUsageMetrics = enableNetworkAddressUsageMetrics;
            _resultValue.filters = filters;
            _resultValue.id = id;
            _resultValue.instanceTenancy = instanceTenancy;
            _resultValue.ipv6AssociationId = ipv6AssociationId;
            _resultValue.ipv6CidrBlock = ipv6CidrBlock;
            _resultValue.mainRouteTableId = mainRouteTableId;
            _resultValue.ownerId = ownerId;
            _resultValue.state = state;
            _resultValue.tags = tags;
            return _resultValue;
        }
    }
}
