// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.dynamodb.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TableTtlArgs extends com.pulumi.resources.ResourceArgs {

    public static final TableTtlArgs Empty = new TableTtlArgs();

    /**
     * Name of the table attribute to store the TTL timestamp in.
     * Required if `enabled` is `true`, must not be set otherwise.
     * 
     */
    @Import(name="attributeName")
    private @Nullable Output<String> attributeName;

    /**
     * @return Name of the table attribute to store the TTL timestamp in.
     * Required if `enabled` is `true`, must not be set otherwise.
     * 
     */
    public Optional<Output<String>> attributeName() {
        return Optional.ofNullable(this.attributeName);
    }

    /**
     * Whether TTL is enabled.
     * Default value is `false`.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Whether TTL is enabled.
     * Default value is `false`.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    private TableTtlArgs() {}

    private TableTtlArgs(TableTtlArgs $) {
        this.attributeName = $.attributeName;
        this.enabled = $.enabled;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TableTtlArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TableTtlArgs $;

        public Builder() {
            $ = new TableTtlArgs();
        }

        public Builder(TableTtlArgs defaults) {
            $ = new TableTtlArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param attributeName Name of the table attribute to store the TTL timestamp in.
         * Required if `enabled` is `true`, must not be set otherwise.
         * 
         * @return builder
         * 
         */
        public Builder attributeName(@Nullable Output<String> attributeName) {
            $.attributeName = attributeName;
            return this;
        }

        /**
         * @param attributeName Name of the table attribute to store the TTL timestamp in.
         * Required if `enabled` is `true`, must not be set otherwise.
         * 
         * @return builder
         * 
         */
        public Builder attributeName(String attributeName) {
            return attributeName(Output.of(attributeName));
        }

        /**
         * @param enabled Whether TTL is enabled.
         * Default value is `false`.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Whether TTL is enabled.
         * Default value is `false`.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        public TableTtlArgs build() {
            return $;
        }
    }

}
