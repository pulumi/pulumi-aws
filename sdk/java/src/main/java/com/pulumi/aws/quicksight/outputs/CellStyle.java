// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.outputs;

import com.pulumi.aws.quicksight.outputs.CellStyleBorder;
import com.pulumi.aws.quicksight.outputs.FontConfiguration;
import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class CellStyle {
    private @Nullable String backgroundColor;
    private @Nullable CellStyleBorder border;
    private @Nullable FontConfiguration fontConfiguration;
    private @Nullable Integer height;
    private @Nullable String horizontalTextAlignment;
    private @Nullable String textWrap;
    private @Nullable String verticalTextAlignment;
    private @Nullable String visibility;

    private CellStyle() {}
    public Optional<String> backgroundColor() {
        return Optional.ofNullable(this.backgroundColor);
    }
    public Optional<CellStyleBorder> border() {
        return Optional.ofNullable(this.border);
    }
    public Optional<FontConfiguration> fontConfiguration() {
        return Optional.ofNullable(this.fontConfiguration);
    }
    public Optional<Integer> height() {
        return Optional.ofNullable(this.height);
    }
    public Optional<String> horizontalTextAlignment() {
        return Optional.ofNullable(this.horizontalTextAlignment);
    }
    public Optional<String> textWrap() {
        return Optional.ofNullable(this.textWrap);
    }
    public Optional<String> verticalTextAlignment() {
        return Optional.ofNullable(this.verticalTextAlignment);
    }
    public Optional<String> visibility() {
        return Optional.ofNullable(this.visibility);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CellStyle defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String backgroundColor;
        private @Nullable CellStyleBorder border;
        private @Nullable FontConfiguration fontConfiguration;
        private @Nullable Integer height;
        private @Nullable String horizontalTextAlignment;
        private @Nullable String textWrap;
        private @Nullable String verticalTextAlignment;
        private @Nullable String visibility;
        public Builder() {}
        public Builder(CellStyle defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backgroundColor = defaults.backgroundColor;
    	      this.border = defaults.border;
    	      this.fontConfiguration = defaults.fontConfiguration;
    	      this.height = defaults.height;
    	      this.horizontalTextAlignment = defaults.horizontalTextAlignment;
    	      this.textWrap = defaults.textWrap;
    	      this.verticalTextAlignment = defaults.verticalTextAlignment;
    	      this.visibility = defaults.visibility;
        }

        @CustomType.Setter
        public Builder backgroundColor(@Nullable String backgroundColor) {

            this.backgroundColor = backgroundColor;
            return this;
        }
        @CustomType.Setter
        public Builder border(@Nullable CellStyleBorder border) {

            this.border = border;
            return this;
        }
        @CustomType.Setter
        public Builder fontConfiguration(@Nullable FontConfiguration fontConfiguration) {

            this.fontConfiguration = fontConfiguration;
            return this;
        }
        @CustomType.Setter
        public Builder height(@Nullable Integer height) {

            this.height = height;
            return this;
        }
        @CustomType.Setter
        public Builder horizontalTextAlignment(@Nullable String horizontalTextAlignment) {

            this.horizontalTextAlignment = horizontalTextAlignment;
            return this;
        }
        @CustomType.Setter
        public Builder textWrap(@Nullable String textWrap) {

            this.textWrap = textWrap;
            return this;
        }
        @CustomType.Setter
        public Builder verticalTextAlignment(@Nullable String verticalTextAlignment) {

            this.verticalTextAlignment = verticalTextAlignment;
            return this;
        }
        @CustomType.Setter
        public Builder visibility(@Nullable String visibility) {

            this.visibility = visibility;
            return this;
        }
        public CellStyle build() {
            final var _resultValue = new CellStyle();
            _resultValue.backgroundColor = backgroundColor;
            _resultValue.border = border;
            _resultValue.fontConfiguration = fontConfiguration;
            _resultValue.height = height;
            _resultValue.horizontalTextAlignment = horizontalTextAlignment;
            _resultValue.textWrap = textWrap;
            _resultValue.verticalTextAlignment = verticalTextAlignment;
            _resultValue.visibility = visibility;
            return _resultValue;
        }
    }
}
