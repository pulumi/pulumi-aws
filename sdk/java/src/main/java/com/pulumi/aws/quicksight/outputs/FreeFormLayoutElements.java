// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.outputs;

import com.pulumi.aws.quicksight.outputs.FreeFormLayoutElementsBackgroundStyle;
import com.pulumi.aws.quicksight.outputs.FreeFormLayoutElementsBorderStyle;
import com.pulumi.aws.quicksight.outputs.FreeFormLayoutElementsRenderingRule;
import com.pulumi.aws.quicksight.outputs.FreeFormLayoutElementsSelectedBorderStyle;
import com.pulumi.aws.quicksight.outputs.SelectAllOptions;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class FreeFormLayoutElements {
    private @Nullable FreeFormLayoutElementsBackgroundStyle backgroundStyle;
    private @Nullable FreeFormLayoutElementsBorderStyle borderStyle;
    private String elementId;
    private String elementType;
    private String height;
    private @Nullable SelectAllOptions loadingAnimation;
    private @Nullable List<FreeFormLayoutElementsRenderingRule> renderingRules;
    private @Nullable FreeFormLayoutElementsSelectedBorderStyle selectedBorderStyle;
    private @Nullable String visibility;
    private String width;
    private String xAxisLocation;
    private String yAxisLocation;

    private FreeFormLayoutElements() {}
    public Optional<FreeFormLayoutElementsBackgroundStyle> backgroundStyle() {
        return Optional.ofNullable(this.backgroundStyle);
    }
    public Optional<FreeFormLayoutElementsBorderStyle> borderStyle() {
        return Optional.ofNullable(this.borderStyle);
    }
    public String elementId() {
        return this.elementId;
    }
    public String elementType() {
        return this.elementType;
    }
    public String height() {
        return this.height;
    }
    public Optional<SelectAllOptions> loadingAnimation() {
        return Optional.ofNullable(this.loadingAnimation);
    }
    public List<FreeFormLayoutElementsRenderingRule> renderingRules() {
        return this.renderingRules == null ? List.of() : this.renderingRules;
    }
    public Optional<FreeFormLayoutElementsSelectedBorderStyle> selectedBorderStyle() {
        return Optional.ofNullable(this.selectedBorderStyle);
    }
    public Optional<String> visibility() {
        return Optional.ofNullable(this.visibility);
    }
    public String width() {
        return this.width;
    }
    public String xAxisLocation() {
        return this.xAxisLocation;
    }
    public String yAxisLocation() {
        return this.yAxisLocation;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FreeFormLayoutElements defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable FreeFormLayoutElementsBackgroundStyle backgroundStyle;
        private @Nullable FreeFormLayoutElementsBorderStyle borderStyle;
        private String elementId;
        private String elementType;
        private String height;
        private @Nullable SelectAllOptions loadingAnimation;
        private @Nullable List<FreeFormLayoutElementsRenderingRule> renderingRules;
        private @Nullable FreeFormLayoutElementsSelectedBorderStyle selectedBorderStyle;
        private @Nullable String visibility;
        private String width;
        private String xAxisLocation;
        private String yAxisLocation;
        public Builder() {}
        public Builder(FreeFormLayoutElements defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backgroundStyle = defaults.backgroundStyle;
    	      this.borderStyle = defaults.borderStyle;
    	      this.elementId = defaults.elementId;
    	      this.elementType = defaults.elementType;
    	      this.height = defaults.height;
    	      this.loadingAnimation = defaults.loadingAnimation;
    	      this.renderingRules = defaults.renderingRules;
    	      this.selectedBorderStyle = defaults.selectedBorderStyle;
    	      this.visibility = defaults.visibility;
    	      this.width = defaults.width;
    	      this.xAxisLocation = defaults.xAxisLocation;
    	      this.yAxisLocation = defaults.yAxisLocation;
        }

        @CustomType.Setter
        public Builder backgroundStyle(@Nullable FreeFormLayoutElementsBackgroundStyle backgroundStyle) {

            this.backgroundStyle = backgroundStyle;
            return this;
        }
        @CustomType.Setter
        public Builder borderStyle(@Nullable FreeFormLayoutElementsBorderStyle borderStyle) {

            this.borderStyle = borderStyle;
            return this;
        }
        @CustomType.Setter
        public Builder elementId(String elementId) {
            if (elementId == null) {
              throw new MissingRequiredPropertyException("FreeFormLayoutElements", "elementId");
            }
            this.elementId = elementId;
            return this;
        }
        @CustomType.Setter
        public Builder elementType(String elementType) {
            if (elementType == null) {
              throw new MissingRequiredPropertyException("FreeFormLayoutElements", "elementType");
            }
            this.elementType = elementType;
            return this;
        }
        @CustomType.Setter
        public Builder height(String height) {
            if (height == null) {
              throw new MissingRequiredPropertyException("FreeFormLayoutElements", "height");
            }
            this.height = height;
            return this;
        }
        @CustomType.Setter
        public Builder loadingAnimation(@Nullable SelectAllOptions loadingAnimation) {

            this.loadingAnimation = loadingAnimation;
            return this;
        }
        @CustomType.Setter
        public Builder renderingRules(@Nullable List<FreeFormLayoutElementsRenderingRule> renderingRules) {

            this.renderingRules = renderingRules;
            return this;
        }
        public Builder renderingRules(FreeFormLayoutElementsRenderingRule... renderingRules) {
            return renderingRules(List.of(renderingRules));
        }
        @CustomType.Setter
        public Builder selectedBorderStyle(@Nullable FreeFormLayoutElementsSelectedBorderStyle selectedBorderStyle) {

            this.selectedBorderStyle = selectedBorderStyle;
            return this;
        }
        @CustomType.Setter
        public Builder visibility(@Nullable String visibility) {

            this.visibility = visibility;
            return this;
        }
        @CustomType.Setter
        public Builder width(String width) {
            if (width == null) {
              throw new MissingRequiredPropertyException("FreeFormLayoutElements", "width");
            }
            this.width = width;
            return this;
        }
        @CustomType.Setter
        public Builder xAxisLocation(String xAxisLocation) {
            if (xAxisLocation == null) {
              throw new MissingRequiredPropertyException("FreeFormLayoutElements", "xAxisLocation");
            }
            this.xAxisLocation = xAxisLocation;
            return this;
        }
        @CustomType.Setter
        public Builder yAxisLocation(String yAxisLocation) {
            if (yAxisLocation == null) {
              throw new MissingRequiredPropertyException("FreeFormLayoutElements", "yAxisLocation");
            }
            this.yAxisLocation = yAxisLocation;
            return this;
        }
        public FreeFormLayoutElements build() {
            final var _resultValue = new FreeFormLayoutElements();
            _resultValue.backgroundStyle = backgroundStyle;
            _resultValue.borderStyle = borderStyle;
            _resultValue.elementId = elementId;
            _resultValue.elementType = elementType;
            _resultValue.height = height;
            _resultValue.loadingAnimation = loadingAnimation;
            _resultValue.renderingRules = renderingRules;
            _resultValue.selectedBorderStyle = selectedBorderStyle;
            _resultValue.visibility = visibility;
            _resultValue.width = width;
            _resultValue.xAxisLocation = xAxisLocation;
            _resultValue.yAxisLocation = yAxisLocation;
            return _resultValue;
        }
    }
}
