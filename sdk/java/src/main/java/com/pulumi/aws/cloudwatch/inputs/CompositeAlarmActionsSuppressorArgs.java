// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.cloudwatch.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class CompositeAlarmActionsSuppressorArgs extends com.pulumi.resources.ResourceArgs {

    public static final CompositeAlarmActionsSuppressorArgs Empty = new CompositeAlarmActionsSuppressorArgs();

    /**
     * Can be an AlarmName or an Amazon Resource Name (ARN) from an existing alarm.
     * 
     */
    @Import(name="alarm", required=true)
    private Output<String> alarm;

    /**
     * @return Can be an AlarmName or an Amazon Resource Name (ARN) from an existing alarm.
     * 
     */
    public Output<String> alarm() {
        return this.alarm;
    }

    /**
     * The maximum time in seconds that the composite alarm waits after suppressor alarm goes out of the `ALARM` state. After this time, the composite alarm performs its actions.
     * 
     */
    @Import(name="extensionPeriod", required=true)
    private Output<Integer> extensionPeriod;

    /**
     * @return The maximum time in seconds that the composite alarm waits after suppressor alarm goes out of the `ALARM` state. After this time, the composite alarm performs its actions.
     * 
     */
    public Output<Integer> extensionPeriod() {
        return this.extensionPeriod;
    }

    /**
     * The maximum time in seconds that the composite alarm waits for the suppressor alarm to go into the `ALARM` state. After this time, the composite alarm performs its actions.
     * 
     */
    @Import(name="waitPeriod", required=true)
    private Output<Integer> waitPeriod;

    /**
     * @return The maximum time in seconds that the composite alarm waits for the suppressor alarm to go into the `ALARM` state. After this time, the composite alarm performs its actions.
     * 
     */
    public Output<Integer> waitPeriod() {
        return this.waitPeriod;
    }

    private CompositeAlarmActionsSuppressorArgs() {}

    private CompositeAlarmActionsSuppressorArgs(CompositeAlarmActionsSuppressorArgs $) {
        this.alarm = $.alarm;
        this.extensionPeriod = $.extensionPeriod;
        this.waitPeriod = $.waitPeriod;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CompositeAlarmActionsSuppressorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CompositeAlarmActionsSuppressorArgs $;

        public Builder() {
            $ = new CompositeAlarmActionsSuppressorArgs();
        }

        public Builder(CompositeAlarmActionsSuppressorArgs defaults) {
            $ = new CompositeAlarmActionsSuppressorArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param alarm Can be an AlarmName or an Amazon Resource Name (ARN) from an existing alarm.
         * 
         * @return builder
         * 
         */
        public Builder alarm(Output<String> alarm) {
            $.alarm = alarm;
            return this;
        }

        /**
         * @param alarm Can be an AlarmName or an Amazon Resource Name (ARN) from an existing alarm.
         * 
         * @return builder
         * 
         */
        public Builder alarm(String alarm) {
            return alarm(Output.of(alarm));
        }

        /**
         * @param extensionPeriod The maximum time in seconds that the composite alarm waits after suppressor alarm goes out of the `ALARM` state. After this time, the composite alarm performs its actions.
         * 
         * @return builder
         * 
         */
        public Builder extensionPeriod(Output<Integer> extensionPeriod) {
            $.extensionPeriod = extensionPeriod;
            return this;
        }

        /**
         * @param extensionPeriod The maximum time in seconds that the composite alarm waits after suppressor alarm goes out of the `ALARM` state. After this time, the composite alarm performs its actions.
         * 
         * @return builder
         * 
         */
        public Builder extensionPeriod(Integer extensionPeriod) {
            return extensionPeriod(Output.of(extensionPeriod));
        }

        /**
         * @param waitPeriod The maximum time in seconds that the composite alarm waits for the suppressor alarm to go into the `ALARM` state. After this time, the composite alarm performs its actions.
         * 
         * @return builder
         * 
         */
        public Builder waitPeriod(Output<Integer> waitPeriod) {
            $.waitPeriod = waitPeriod;
            return this;
        }

        /**
         * @param waitPeriod The maximum time in seconds that the composite alarm waits for the suppressor alarm to go into the `ALARM` state. After this time, the composite alarm performs its actions.
         * 
         * @return builder
         * 
         */
        public Builder waitPeriod(Integer waitPeriod) {
            return waitPeriod(Output.of(waitPeriod));
        }

        public CompositeAlarmActionsSuppressorArgs build() {
            if ($.alarm == null) {
                throw new MissingRequiredPropertyException("CompositeAlarmActionsSuppressorArgs", "alarm");
            }
            if ($.extensionPeriod == null) {
                throw new MissingRequiredPropertyException("CompositeAlarmActionsSuppressorArgs", "extensionPeriod");
            }
            if ($.waitPeriod == null) {
                throw new MissingRequiredPropertyException("CompositeAlarmActionsSuppressorArgs", "waitPeriod");
            }
            return $;
        }
    }

}
