// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.rds.outputs;

import com.pulumi.aws.rds.outputs.GetClusterMasterUserSecret;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetClusterResult {
    private String arn;
    private List<String> availabilityZones;
    private Integer backtrackWindow;
    private Integer backupRetentionPeriod;
    private String clusterIdentifier;
    private List<String> clusterMembers;
    private String clusterResourceId;
    private String databaseName;
    private String dbClusterParameterGroupName;
    private String dbSubnetGroupName;
    private String dbSystemId;
    private List<String> enabledCloudwatchLogsExports;
    private String endpoint;
    private String engine;
    private String engineMode;
    private String engineVersion;
    private String finalSnapshotIdentifier;
    private String hostedZoneId;
    private Boolean iamDatabaseAuthenticationEnabled;
    private List<String> iamRoles;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String kmsKeyId;
    private List<GetClusterMasterUserSecret> masterUserSecrets;
    private String masterUsername;
    private String networkType;
    private Integer port;
    private String preferredBackupWindow;
    private String preferredMaintenanceWindow;
    private String readerEndpoint;
    private String replicationSourceIdentifier;
    private Boolean storageEncrypted;
    /**
     * @return A map of tags assigned to the resource.
     * 
     */
    private Map<String,String> tags;
    private List<String> vpcSecurityGroupIds;

    private GetClusterResult() {}
    public String arn() {
        return this.arn;
    }
    public List<String> availabilityZones() {
        return this.availabilityZones;
    }
    public Integer backtrackWindow() {
        return this.backtrackWindow;
    }
    public Integer backupRetentionPeriod() {
        return this.backupRetentionPeriod;
    }
    public String clusterIdentifier() {
        return this.clusterIdentifier;
    }
    public List<String> clusterMembers() {
        return this.clusterMembers;
    }
    public String clusterResourceId() {
        return this.clusterResourceId;
    }
    public String databaseName() {
        return this.databaseName;
    }
    public String dbClusterParameterGroupName() {
        return this.dbClusterParameterGroupName;
    }
    public String dbSubnetGroupName() {
        return this.dbSubnetGroupName;
    }
    public String dbSystemId() {
        return this.dbSystemId;
    }
    public List<String> enabledCloudwatchLogsExports() {
        return this.enabledCloudwatchLogsExports;
    }
    public String endpoint() {
        return this.endpoint;
    }
    public String engine() {
        return this.engine;
    }
    public String engineMode() {
        return this.engineMode;
    }
    public String engineVersion() {
        return this.engineVersion;
    }
    public String finalSnapshotIdentifier() {
        return this.finalSnapshotIdentifier;
    }
    public String hostedZoneId() {
        return this.hostedZoneId;
    }
    public Boolean iamDatabaseAuthenticationEnabled() {
        return this.iamDatabaseAuthenticationEnabled;
    }
    public List<String> iamRoles() {
        return this.iamRoles;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String kmsKeyId() {
        return this.kmsKeyId;
    }
    public List<GetClusterMasterUserSecret> masterUserSecrets() {
        return this.masterUserSecrets;
    }
    public String masterUsername() {
        return this.masterUsername;
    }
    public String networkType() {
        return this.networkType;
    }
    public Integer port() {
        return this.port;
    }
    public String preferredBackupWindow() {
        return this.preferredBackupWindow;
    }
    public String preferredMaintenanceWindow() {
        return this.preferredMaintenanceWindow;
    }
    public String readerEndpoint() {
        return this.readerEndpoint;
    }
    public String replicationSourceIdentifier() {
        return this.replicationSourceIdentifier;
    }
    public Boolean storageEncrypted() {
        return this.storageEncrypted;
    }
    /**
     * @return A map of tags assigned to the resource.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }
    public List<String> vpcSecurityGroupIds() {
        return this.vpcSecurityGroupIds;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetClusterResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String arn;
        private List<String> availabilityZones;
        private Integer backtrackWindow;
        private Integer backupRetentionPeriod;
        private String clusterIdentifier;
        private List<String> clusterMembers;
        private String clusterResourceId;
        private String databaseName;
        private String dbClusterParameterGroupName;
        private String dbSubnetGroupName;
        private String dbSystemId;
        private List<String> enabledCloudwatchLogsExports;
        private String endpoint;
        private String engine;
        private String engineMode;
        private String engineVersion;
        private String finalSnapshotIdentifier;
        private String hostedZoneId;
        private Boolean iamDatabaseAuthenticationEnabled;
        private List<String> iamRoles;
        private String id;
        private String kmsKeyId;
        private List<GetClusterMasterUserSecret> masterUserSecrets;
        private String masterUsername;
        private String networkType;
        private Integer port;
        private String preferredBackupWindow;
        private String preferredMaintenanceWindow;
        private String readerEndpoint;
        private String replicationSourceIdentifier;
        private Boolean storageEncrypted;
        private Map<String,String> tags;
        private List<String> vpcSecurityGroupIds;
        public Builder() {}
        public Builder(GetClusterResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.availabilityZones = defaults.availabilityZones;
    	      this.backtrackWindow = defaults.backtrackWindow;
    	      this.backupRetentionPeriod = defaults.backupRetentionPeriod;
    	      this.clusterIdentifier = defaults.clusterIdentifier;
    	      this.clusterMembers = defaults.clusterMembers;
    	      this.clusterResourceId = defaults.clusterResourceId;
    	      this.databaseName = defaults.databaseName;
    	      this.dbClusterParameterGroupName = defaults.dbClusterParameterGroupName;
    	      this.dbSubnetGroupName = defaults.dbSubnetGroupName;
    	      this.dbSystemId = defaults.dbSystemId;
    	      this.enabledCloudwatchLogsExports = defaults.enabledCloudwatchLogsExports;
    	      this.endpoint = defaults.endpoint;
    	      this.engine = defaults.engine;
    	      this.engineMode = defaults.engineMode;
    	      this.engineVersion = defaults.engineVersion;
    	      this.finalSnapshotIdentifier = defaults.finalSnapshotIdentifier;
    	      this.hostedZoneId = defaults.hostedZoneId;
    	      this.iamDatabaseAuthenticationEnabled = defaults.iamDatabaseAuthenticationEnabled;
    	      this.iamRoles = defaults.iamRoles;
    	      this.id = defaults.id;
    	      this.kmsKeyId = defaults.kmsKeyId;
    	      this.masterUserSecrets = defaults.masterUserSecrets;
    	      this.masterUsername = defaults.masterUsername;
    	      this.networkType = defaults.networkType;
    	      this.port = defaults.port;
    	      this.preferredBackupWindow = defaults.preferredBackupWindow;
    	      this.preferredMaintenanceWindow = defaults.preferredMaintenanceWindow;
    	      this.readerEndpoint = defaults.readerEndpoint;
    	      this.replicationSourceIdentifier = defaults.replicationSourceIdentifier;
    	      this.storageEncrypted = defaults.storageEncrypted;
    	      this.tags = defaults.tags;
    	      this.vpcSecurityGroupIds = defaults.vpcSecurityGroupIds;
        }

        @CustomType.Setter
        public Builder arn(String arn) {
            if (arn == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "arn");
            }
            this.arn = arn;
            return this;
        }
        @CustomType.Setter
        public Builder availabilityZones(List<String> availabilityZones) {
            if (availabilityZones == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "availabilityZones");
            }
            this.availabilityZones = availabilityZones;
            return this;
        }
        public Builder availabilityZones(String... availabilityZones) {
            return availabilityZones(List.of(availabilityZones));
        }
        @CustomType.Setter
        public Builder backtrackWindow(Integer backtrackWindow) {
            if (backtrackWindow == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "backtrackWindow");
            }
            this.backtrackWindow = backtrackWindow;
            return this;
        }
        @CustomType.Setter
        public Builder backupRetentionPeriod(Integer backupRetentionPeriod) {
            if (backupRetentionPeriod == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "backupRetentionPeriod");
            }
            this.backupRetentionPeriod = backupRetentionPeriod;
            return this;
        }
        @CustomType.Setter
        public Builder clusterIdentifier(String clusterIdentifier) {
            if (clusterIdentifier == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "clusterIdentifier");
            }
            this.clusterIdentifier = clusterIdentifier;
            return this;
        }
        @CustomType.Setter
        public Builder clusterMembers(List<String> clusterMembers) {
            if (clusterMembers == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "clusterMembers");
            }
            this.clusterMembers = clusterMembers;
            return this;
        }
        public Builder clusterMembers(String... clusterMembers) {
            return clusterMembers(List.of(clusterMembers));
        }
        @CustomType.Setter
        public Builder clusterResourceId(String clusterResourceId) {
            if (clusterResourceId == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "clusterResourceId");
            }
            this.clusterResourceId = clusterResourceId;
            return this;
        }
        @CustomType.Setter
        public Builder databaseName(String databaseName) {
            if (databaseName == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "databaseName");
            }
            this.databaseName = databaseName;
            return this;
        }
        @CustomType.Setter
        public Builder dbClusterParameterGroupName(String dbClusterParameterGroupName) {
            if (dbClusterParameterGroupName == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "dbClusterParameterGroupName");
            }
            this.dbClusterParameterGroupName = dbClusterParameterGroupName;
            return this;
        }
        @CustomType.Setter
        public Builder dbSubnetGroupName(String dbSubnetGroupName) {
            if (dbSubnetGroupName == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "dbSubnetGroupName");
            }
            this.dbSubnetGroupName = dbSubnetGroupName;
            return this;
        }
        @CustomType.Setter
        public Builder dbSystemId(String dbSystemId) {
            if (dbSystemId == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "dbSystemId");
            }
            this.dbSystemId = dbSystemId;
            return this;
        }
        @CustomType.Setter
        public Builder enabledCloudwatchLogsExports(List<String> enabledCloudwatchLogsExports) {
            if (enabledCloudwatchLogsExports == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "enabledCloudwatchLogsExports");
            }
            this.enabledCloudwatchLogsExports = enabledCloudwatchLogsExports;
            return this;
        }
        public Builder enabledCloudwatchLogsExports(String... enabledCloudwatchLogsExports) {
            return enabledCloudwatchLogsExports(List.of(enabledCloudwatchLogsExports));
        }
        @CustomType.Setter
        public Builder endpoint(String endpoint) {
            if (endpoint == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "endpoint");
            }
            this.endpoint = endpoint;
            return this;
        }
        @CustomType.Setter
        public Builder engine(String engine) {
            if (engine == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "engine");
            }
            this.engine = engine;
            return this;
        }
        @CustomType.Setter
        public Builder engineMode(String engineMode) {
            if (engineMode == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "engineMode");
            }
            this.engineMode = engineMode;
            return this;
        }
        @CustomType.Setter
        public Builder engineVersion(String engineVersion) {
            if (engineVersion == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "engineVersion");
            }
            this.engineVersion = engineVersion;
            return this;
        }
        @CustomType.Setter
        public Builder finalSnapshotIdentifier(String finalSnapshotIdentifier) {
            if (finalSnapshotIdentifier == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "finalSnapshotIdentifier");
            }
            this.finalSnapshotIdentifier = finalSnapshotIdentifier;
            return this;
        }
        @CustomType.Setter
        public Builder hostedZoneId(String hostedZoneId) {
            if (hostedZoneId == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "hostedZoneId");
            }
            this.hostedZoneId = hostedZoneId;
            return this;
        }
        @CustomType.Setter
        public Builder iamDatabaseAuthenticationEnabled(Boolean iamDatabaseAuthenticationEnabled) {
            if (iamDatabaseAuthenticationEnabled == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "iamDatabaseAuthenticationEnabled");
            }
            this.iamDatabaseAuthenticationEnabled = iamDatabaseAuthenticationEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder iamRoles(List<String> iamRoles) {
            if (iamRoles == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "iamRoles");
            }
            this.iamRoles = iamRoles;
            return this;
        }
        public Builder iamRoles(String... iamRoles) {
            return iamRoles(List.of(iamRoles));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder kmsKeyId(String kmsKeyId) {
            if (kmsKeyId == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "kmsKeyId");
            }
            this.kmsKeyId = kmsKeyId;
            return this;
        }
        @CustomType.Setter
        public Builder masterUserSecrets(List<GetClusterMasterUserSecret> masterUserSecrets) {
            if (masterUserSecrets == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "masterUserSecrets");
            }
            this.masterUserSecrets = masterUserSecrets;
            return this;
        }
        public Builder masterUserSecrets(GetClusterMasterUserSecret... masterUserSecrets) {
            return masterUserSecrets(List.of(masterUserSecrets));
        }
        @CustomType.Setter
        public Builder masterUsername(String masterUsername) {
            if (masterUsername == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "masterUsername");
            }
            this.masterUsername = masterUsername;
            return this;
        }
        @CustomType.Setter
        public Builder networkType(String networkType) {
            if (networkType == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "networkType");
            }
            this.networkType = networkType;
            return this;
        }
        @CustomType.Setter
        public Builder port(Integer port) {
            if (port == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "port");
            }
            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder preferredBackupWindow(String preferredBackupWindow) {
            if (preferredBackupWindow == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "preferredBackupWindow");
            }
            this.preferredBackupWindow = preferredBackupWindow;
            return this;
        }
        @CustomType.Setter
        public Builder preferredMaintenanceWindow(String preferredMaintenanceWindow) {
            if (preferredMaintenanceWindow == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "preferredMaintenanceWindow");
            }
            this.preferredMaintenanceWindow = preferredMaintenanceWindow;
            return this;
        }
        @CustomType.Setter
        public Builder readerEndpoint(String readerEndpoint) {
            if (readerEndpoint == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "readerEndpoint");
            }
            this.readerEndpoint = readerEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder replicationSourceIdentifier(String replicationSourceIdentifier) {
            if (replicationSourceIdentifier == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "replicationSourceIdentifier");
            }
            this.replicationSourceIdentifier = replicationSourceIdentifier;
            return this;
        }
        @CustomType.Setter
        public Builder storageEncrypted(Boolean storageEncrypted) {
            if (storageEncrypted == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "storageEncrypted");
            }
            this.storageEncrypted = storageEncrypted;
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder vpcSecurityGroupIds(List<String> vpcSecurityGroupIds) {
            if (vpcSecurityGroupIds == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "vpcSecurityGroupIds");
            }
            this.vpcSecurityGroupIds = vpcSecurityGroupIds;
            return this;
        }
        public Builder vpcSecurityGroupIds(String... vpcSecurityGroupIds) {
            return vpcSecurityGroupIds(List.of(vpcSecurityGroupIds));
        }
        public GetClusterResult build() {
            final var _resultValue = new GetClusterResult();
            _resultValue.arn = arn;
            _resultValue.availabilityZones = availabilityZones;
            _resultValue.backtrackWindow = backtrackWindow;
            _resultValue.backupRetentionPeriod = backupRetentionPeriod;
            _resultValue.clusterIdentifier = clusterIdentifier;
            _resultValue.clusterMembers = clusterMembers;
            _resultValue.clusterResourceId = clusterResourceId;
            _resultValue.databaseName = databaseName;
            _resultValue.dbClusterParameterGroupName = dbClusterParameterGroupName;
            _resultValue.dbSubnetGroupName = dbSubnetGroupName;
            _resultValue.dbSystemId = dbSystemId;
            _resultValue.enabledCloudwatchLogsExports = enabledCloudwatchLogsExports;
            _resultValue.endpoint = endpoint;
            _resultValue.engine = engine;
            _resultValue.engineMode = engineMode;
            _resultValue.engineVersion = engineVersion;
            _resultValue.finalSnapshotIdentifier = finalSnapshotIdentifier;
            _resultValue.hostedZoneId = hostedZoneId;
            _resultValue.iamDatabaseAuthenticationEnabled = iamDatabaseAuthenticationEnabled;
            _resultValue.iamRoles = iamRoles;
            _resultValue.id = id;
            _resultValue.kmsKeyId = kmsKeyId;
            _resultValue.masterUserSecrets = masterUserSecrets;
            _resultValue.masterUsername = masterUsername;
            _resultValue.networkType = networkType;
            _resultValue.port = port;
            _resultValue.preferredBackupWindow = preferredBackupWindow;
            _resultValue.preferredMaintenanceWindow = preferredMaintenanceWindow;
            _resultValue.readerEndpoint = readerEndpoint;
            _resultValue.replicationSourceIdentifier = replicationSourceIdentifier;
            _resultValue.storageEncrypted = storageEncrypted;
            _resultValue.tags = tags;
            _resultValue.vpcSecurityGroupIds = vpcSecurityGroupIds;
            return _resultValue;
        }
    }
}
