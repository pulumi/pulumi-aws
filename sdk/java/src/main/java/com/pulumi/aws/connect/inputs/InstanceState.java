// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.connect.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstanceState extends com.pulumi.resources.ResourceArgs {

    public static final InstanceState Empty = new InstanceState();

    /**
     * Amazon Resource Name (ARN) of the instance.
     * 
     */
    @Import(name="arn")
    private @Nullable Output<String> arn;

    /**
     * @return Amazon Resource Name (ARN) of the instance.
     * 
     */
    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    /**
     * Specifies whether auto resolve best voices is enabled. Defaults to `true`.
     * 
     */
    @Import(name="autoResolveBestVoicesEnabled")
    private @Nullable Output<Boolean> autoResolveBestVoicesEnabled;

    /**
     * @return Specifies whether auto resolve best voices is enabled. Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> autoResolveBestVoicesEnabled() {
        return Optional.ofNullable(this.autoResolveBestVoicesEnabled);
    }

    /**
     * Specifies whether contact flow logs are enabled. Defaults to `false`.
     * 
     */
    @Import(name="contactFlowLogsEnabled")
    private @Nullable Output<Boolean> contactFlowLogsEnabled;

    /**
     * @return Specifies whether contact flow logs are enabled. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> contactFlowLogsEnabled() {
        return Optional.ofNullable(this.contactFlowLogsEnabled);
    }

    /**
     * Specifies whether contact lens is enabled. Defaults to `true`.
     * 
     */
    @Import(name="contactLensEnabled")
    private @Nullable Output<Boolean> contactLensEnabled;

    /**
     * @return Specifies whether contact lens is enabled. Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> contactLensEnabled() {
        return Optional.ofNullable(this.contactLensEnabled);
    }

    /**
     * When the instance was created.
     * 
     */
    @Import(name="createdTime")
    private @Nullable Output<String> createdTime;

    /**
     * @return When the instance was created.
     * 
     */
    public Optional<Output<String>> createdTime() {
        return Optional.ofNullable(this.createdTime);
    }

    /**
     * The identifier for the directory if identity_management_type is `EXISTING_DIRECTORY`.
     * 
     */
    @Import(name="directoryId")
    private @Nullable Output<String> directoryId;

    /**
     * @return The identifier for the directory if identity_management_type is `EXISTING_DIRECTORY`.
     * 
     */
    public Optional<Output<String>> directoryId() {
        return Optional.ofNullable(this.directoryId);
    }

    /**
     * Specifies whether early media for outbound calls is enabled . Defaults to `true` if outbound calls is enabled.
     * 
     */
    @Import(name="earlyMediaEnabled")
    private @Nullable Output<Boolean> earlyMediaEnabled;

    /**
     * @return Specifies whether early media for outbound calls is enabled . Defaults to `true` if outbound calls is enabled.
     * 
     */
    public Optional<Output<Boolean>> earlyMediaEnabled() {
        return Optional.ofNullable(this.earlyMediaEnabled);
    }

    /**
     * Specifies the identity management type attached to the instance. Allowed Values are: `SAML`, `CONNECT_MANAGED`, `EXISTING_DIRECTORY`.
     * 
     */
    @Import(name="identityManagementType")
    private @Nullable Output<String> identityManagementType;

    /**
     * @return Specifies the identity management type attached to the instance. Allowed Values are: `SAML`, `CONNECT_MANAGED`, `EXISTING_DIRECTORY`.
     * 
     */
    public Optional<Output<String>> identityManagementType() {
        return Optional.ofNullable(this.identityManagementType);
    }

    /**
     * Specifies whether inbound calls are enabled.
     * 
     */
    @Import(name="inboundCallsEnabled")
    private @Nullable Output<Boolean> inboundCallsEnabled;

    /**
     * @return Specifies whether inbound calls are enabled.
     * 
     */
    public Optional<Output<Boolean>> inboundCallsEnabled() {
        return Optional.ofNullable(this.inboundCallsEnabled);
    }

    /**
     * Specifies the name of the instance. Required if `directory_id` not specified.
     * 
     */
    @Import(name="instanceAlias")
    private @Nullable Output<String> instanceAlias;

    /**
     * @return Specifies the name of the instance. Required if `directory_id` not specified.
     * 
     */
    public Optional<Output<String>> instanceAlias() {
        return Optional.ofNullable(this.instanceAlias);
    }

    /**
     * Specifies whether multi-party calls/conference is enabled. Defaults to `false`.
     * 
     */
    @Import(name="multiPartyConferenceEnabled")
    private @Nullable Output<Boolean> multiPartyConferenceEnabled;

    /**
     * @return Specifies whether multi-party calls/conference is enabled. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> multiPartyConferenceEnabled() {
        return Optional.ofNullable(this.multiPartyConferenceEnabled);
    }

    /**
     * Specifies whether outbound calls are enabled.
     * 
     */
    @Import(name="outboundCallsEnabled")
    private @Nullable Output<Boolean> outboundCallsEnabled;

    /**
     * @return Specifies whether outbound calls are enabled.
     * 
     */
    public Optional<Output<Boolean>> outboundCallsEnabled() {
        return Optional.ofNullable(this.outboundCallsEnabled);
    }

    /**
     * The service role of the instance.
     * 
     */
    @Import(name="serviceRole")
    private @Nullable Output<String> serviceRole;

    /**
     * @return The service role of the instance.
     * 
     */
    public Optional<Output<String>> serviceRole() {
        return Optional.ofNullable(this.serviceRole);
    }

    /**
     * The state of the instance.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The state of the instance.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Tags to apply to the Instance. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * &lt;!-- * `use_custom_tts_voices` - (Optional) Whether use custom tts voices is enabled. Defaults to `false` --&gt;
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Tags to apply to the Instance. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * &lt;!-- * `use_custom_tts_voices` - (Optional) Whether use custom tts voices is enabled. Defaults to `false` --&gt;
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    /**
     * @return A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    private InstanceState() {}

    private InstanceState(InstanceState $) {
        this.arn = $.arn;
        this.autoResolveBestVoicesEnabled = $.autoResolveBestVoicesEnabled;
        this.contactFlowLogsEnabled = $.contactFlowLogsEnabled;
        this.contactLensEnabled = $.contactLensEnabled;
        this.createdTime = $.createdTime;
        this.directoryId = $.directoryId;
        this.earlyMediaEnabled = $.earlyMediaEnabled;
        this.identityManagementType = $.identityManagementType;
        this.inboundCallsEnabled = $.inboundCallsEnabled;
        this.instanceAlias = $.instanceAlias;
        this.multiPartyConferenceEnabled = $.multiPartyConferenceEnabled;
        this.outboundCallsEnabled = $.outboundCallsEnabled;
        this.serviceRole = $.serviceRole;
        this.status = $.status;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceState $;

        public Builder() {
            $ = new InstanceState();
        }

        public Builder(InstanceState defaults) {
            $ = new InstanceState(Objects.requireNonNull(defaults));
        }

        /**
         * @param arn Amazon Resource Name (ARN) of the instance.
         * 
         * @return builder
         * 
         */
        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        /**
         * @param arn Amazon Resource Name (ARN) of the instance.
         * 
         * @return builder
         * 
         */
        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        /**
         * @param autoResolveBestVoicesEnabled Specifies whether auto resolve best voices is enabled. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder autoResolveBestVoicesEnabled(@Nullable Output<Boolean> autoResolveBestVoicesEnabled) {
            $.autoResolveBestVoicesEnabled = autoResolveBestVoicesEnabled;
            return this;
        }

        /**
         * @param autoResolveBestVoicesEnabled Specifies whether auto resolve best voices is enabled. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder autoResolveBestVoicesEnabled(Boolean autoResolveBestVoicesEnabled) {
            return autoResolveBestVoicesEnabled(Output.of(autoResolveBestVoicesEnabled));
        }

        /**
         * @param contactFlowLogsEnabled Specifies whether contact flow logs are enabled. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder contactFlowLogsEnabled(@Nullable Output<Boolean> contactFlowLogsEnabled) {
            $.contactFlowLogsEnabled = contactFlowLogsEnabled;
            return this;
        }

        /**
         * @param contactFlowLogsEnabled Specifies whether contact flow logs are enabled. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder contactFlowLogsEnabled(Boolean contactFlowLogsEnabled) {
            return contactFlowLogsEnabled(Output.of(contactFlowLogsEnabled));
        }

        /**
         * @param contactLensEnabled Specifies whether contact lens is enabled. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder contactLensEnabled(@Nullable Output<Boolean> contactLensEnabled) {
            $.contactLensEnabled = contactLensEnabled;
            return this;
        }

        /**
         * @param contactLensEnabled Specifies whether contact lens is enabled. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder contactLensEnabled(Boolean contactLensEnabled) {
            return contactLensEnabled(Output.of(contactLensEnabled));
        }

        /**
         * @param createdTime When the instance was created.
         * 
         * @return builder
         * 
         */
        public Builder createdTime(@Nullable Output<String> createdTime) {
            $.createdTime = createdTime;
            return this;
        }

        /**
         * @param createdTime When the instance was created.
         * 
         * @return builder
         * 
         */
        public Builder createdTime(String createdTime) {
            return createdTime(Output.of(createdTime));
        }

        /**
         * @param directoryId The identifier for the directory if identity_management_type is `EXISTING_DIRECTORY`.
         * 
         * @return builder
         * 
         */
        public Builder directoryId(@Nullable Output<String> directoryId) {
            $.directoryId = directoryId;
            return this;
        }

        /**
         * @param directoryId The identifier for the directory if identity_management_type is `EXISTING_DIRECTORY`.
         * 
         * @return builder
         * 
         */
        public Builder directoryId(String directoryId) {
            return directoryId(Output.of(directoryId));
        }

        /**
         * @param earlyMediaEnabled Specifies whether early media for outbound calls is enabled . Defaults to `true` if outbound calls is enabled.
         * 
         * @return builder
         * 
         */
        public Builder earlyMediaEnabled(@Nullable Output<Boolean> earlyMediaEnabled) {
            $.earlyMediaEnabled = earlyMediaEnabled;
            return this;
        }

        /**
         * @param earlyMediaEnabled Specifies whether early media for outbound calls is enabled . Defaults to `true` if outbound calls is enabled.
         * 
         * @return builder
         * 
         */
        public Builder earlyMediaEnabled(Boolean earlyMediaEnabled) {
            return earlyMediaEnabled(Output.of(earlyMediaEnabled));
        }

        /**
         * @param identityManagementType Specifies the identity management type attached to the instance. Allowed Values are: `SAML`, `CONNECT_MANAGED`, `EXISTING_DIRECTORY`.
         * 
         * @return builder
         * 
         */
        public Builder identityManagementType(@Nullable Output<String> identityManagementType) {
            $.identityManagementType = identityManagementType;
            return this;
        }

        /**
         * @param identityManagementType Specifies the identity management type attached to the instance. Allowed Values are: `SAML`, `CONNECT_MANAGED`, `EXISTING_DIRECTORY`.
         * 
         * @return builder
         * 
         */
        public Builder identityManagementType(String identityManagementType) {
            return identityManagementType(Output.of(identityManagementType));
        }

        /**
         * @param inboundCallsEnabled Specifies whether inbound calls are enabled.
         * 
         * @return builder
         * 
         */
        public Builder inboundCallsEnabled(@Nullable Output<Boolean> inboundCallsEnabled) {
            $.inboundCallsEnabled = inboundCallsEnabled;
            return this;
        }

        /**
         * @param inboundCallsEnabled Specifies whether inbound calls are enabled.
         * 
         * @return builder
         * 
         */
        public Builder inboundCallsEnabled(Boolean inboundCallsEnabled) {
            return inboundCallsEnabled(Output.of(inboundCallsEnabled));
        }

        /**
         * @param instanceAlias Specifies the name of the instance. Required if `directory_id` not specified.
         * 
         * @return builder
         * 
         */
        public Builder instanceAlias(@Nullable Output<String> instanceAlias) {
            $.instanceAlias = instanceAlias;
            return this;
        }

        /**
         * @param instanceAlias Specifies the name of the instance. Required if `directory_id` not specified.
         * 
         * @return builder
         * 
         */
        public Builder instanceAlias(String instanceAlias) {
            return instanceAlias(Output.of(instanceAlias));
        }

        /**
         * @param multiPartyConferenceEnabled Specifies whether multi-party calls/conference is enabled. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder multiPartyConferenceEnabled(@Nullable Output<Boolean> multiPartyConferenceEnabled) {
            $.multiPartyConferenceEnabled = multiPartyConferenceEnabled;
            return this;
        }

        /**
         * @param multiPartyConferenceEnabled Specifies whether multi-party calls/conference is enabled. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder multiPartyConferenceEnabled(Boolean multiPartyConferenceEnabled) {
            return multiPartyConferenceEnabled(Output.of(multiPartyConferenceEnabled));
        }

        /**
         * @param outboundCallsEnabled Specifies whether outbound calls are enabled.
         * 
         * @return builder
         * 
         */
        public Builder outboundCallsEnabled(@Nullable Output<Boolean> outboundCallsEnabled) {
            $.outboundCallsEnabled = outboundCallsEnabled;
            return this;
        }

        /**
         * @param outboundCallsEnabled Specifies whether outbound calls are enabled.
         * 
         * @return builder
         * 
         */
        public Builder outboundCallsEnabled(Boolean outboundCallsEnabled) {
            return outboundCallsEnabled(Output.of(outboundCallsEnabled));
        }

        /**
         * @param serviceRole The service role of the instance.
         * 
         * @return builder
         * 
         */
        public Builder serviceRole(@Nullable Output<String> serviceRole) {
            $.serviceRole = serviceRole;
            return this;
        }

        /**
         * @param serviceRole The service role of the instance.
         * 
         * @return builder
         * 
         */
        public Builder serviceRole(String serviceRole) {
            return serviceRole(Output.of(serviceRole));
        }

        /**
         * @param status The state of the instance.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The state of the instance.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param tags Tags to apply to the Instance. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * &lt;!-- * `use_custom_tts_voices` - (Optional) Whether use custom tts voices is enabled. Defaults to `false` --&gt;
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Tags to apply to the Instance. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * &lt;!-- * `use_custom_tts_voices` - (Optional) Whether use custom tts voices is enabled. Defaults to `false` --&gt;
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tagsAll A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
         * 
         * @return builder
         * 
         * @deprecated
         * Please use `tags` instead.
         * 
         */
        @Deprecated /* Please use `tags` instead. */
        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        /**
         * @param tagsAll A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
         * 
         * @return builder
         * 
         * @deprecated
         * Please use `tags` instead.
         * 
         */
        @Deprecated /* Please use `tags` instead. */
        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        public InstanceState build() {
            return $;
        }
    }

}
