// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.msk;

import com.pulumi.aws.msk.inputs.ReplicatorKafkaClusterArgs;
import com.pulumi.aws.msk.inputs.ReplicatorReplicationInfoListArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ReplicatorArgs extends com.pulumi.resources.ResourceArgs {

    public static final ReplicatorArgs Empty = new ReplicatorArgs();

    /**
     * A summary description of the replicator.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A summary description of the replicator.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * A list of Kafka clusters which are targets of the replicator.
     * 
     */
    @Import(name="kafkaClusters", required=true)
    private Output<List<ReplicatorKafkaClusterArgs>> kafkaClusters;

    /**
     * @return A list of Kafka clusters which are targets of the replicator.
     * 
     */
    public Output<List<ReplicatorKafkaClusterArgs>> kafkaClusters() {
        return this.kafkaClusters;
    }

    /**
     * A list of replication configurations, where each configuration targets a given source cluster to target cluster replication flow.
     * 
     */
    @Import(name="replicationInfoList", required=true)
    private Output<ReplicatorReplicationInfoListArgs> replicationInfoList;

    /**
     * @return A list of replication configurations, where each configuration targets a given source cluster to target cluster replication flow.
     * 
     */
    public Output<ReplicatorReplicationInfoListArgs> replicationInfoList() {
        return this.replicationInfoList;
    }

    /**
     * The name of the replicator.
     * 
     */
    @Import(name="replicatorName", required=true)
    private Output<String> replicatorName;

    /**
     * @return The name of the replicator.
     * 
     */
    public Output<String> replicatorName() {
        return this.replicatorName;
    }

    /**
     * The ARN of the IAM role used by the replicator to access resources in the customer&#39;s account (e.g source and target clusters).
     * 
     */
    @Import(name="serviceExecutionRoleArn", required=true)
    private Output<String> serviceExecutionRoleArn;

    /**
     * @return The ARN of the IAM role used by the replicator to access resources in the customer&#39;s account (e.g source and target clusters).
     * 
     */
    public Output<String> serviceExecutionRoleArn() {
        return this.serviceExecutionRoleArn;
    }

    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private ReplicatorArgs() {}

    private ReplicatorArgs(ReplicatorArgs $) {
        this.description = $.description;
        this.kafkaClusters = $.kafkaClusters;
        this.replicationInfoList = $.replicationInfoList;
        this.replicatorName = $.replicatorName;
        this.serviceExecutionRoleArn = $.serviceExecutionRoleArn;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ReplicatorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ReplicatorArgs $;

        public Builder() {
            $ = new ReplicatorArgs();
        }

        public Builder(ReplicatorArgs defaults) {
            $ = new ReplicatorArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description A summary description of the replicator.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A summary description of the replicator.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param kafkaClusters A list of Kafka clusters which are targets of the replicator.
         * 
         * @return builder
         * 
         */
        public Builder kafkaClusters(Output<List<ReplicatorKafkaClusterArgs>> kafkaClusters) {
            $.kafkaClusters = kafkaClusters;
            return this;
        }

        /**
         * @param kafkaClusters A list of Kafka clusters which are targets of the replicator.
         * 
         * @return builder
         * 
         */
        public Builder kafkaClusters(List<ReplicatorKafkaClusterArgs> kafkaClusters) {
            return kafkaClusters(Output.of(kafkaClusters));
        }

        /**
         * @param kafkaClusters A list of Kafka clusters which are targets of the replicator.
         * 
         * @return builder
         * 
         */
        public Builder kafkaClusters(ReplicatorKafkaClusterArgs... kafkaClusters) {
            return kafkaClusters(List.of(kafkaClusters));
        }

        /**
         * @param replicationInfoList A list of replication configurations, where each configuration targets a given source cluster to target cluster replication flow.
         * 
         * @return builder
         * 
         */
        public Builder replicationInfoList(Output<ReplicatorReplicationInfoListArgs> replicationInfoList) {
            $.replicationInfoList = replicationInfoList;
            return this;
        }

        /**
         * @param replicationInfoList A list of replication configurations, where each configuration targets a given source cluster to target cluster replication flow.
         * 
         * @return builder
         * 
         */
        public Builder replicationInfoList(ReplicatorReplicationInfoListArgs replicationInfoList) {
            return replicationInfoList(Output.of(replicationInfoList));
        }

        /**
         * @param replicatorName The name of the replicator.
         * 
         * @return builder
         * 
         */
        public Builder replicatorName(Output<String> replicatorName) {
            $.replicatorName = replicatorName;
            return this;
        }

        /**
         * @param replicatorName The name of the replicator.
         * 
         * @return builder
         * 
         */
        public Builder replicatorName(String replicatorName) {
            return replicatorName(Output.of(replicatorName));
        }

        /**
         * @param serviceExecutionRoleArn The ARN of the IAM role used by the replicator to access resources in the customer&#39;s account (e.g source and target clusters).
         * 
         * @return builder
         * 
         */
        public Builder serviceExecutionRoleArn(Output<String> serviceExecutionRoleArn) {
            $.serviceExecutionRoleArn = serviceExecutionRoleArn;
            return this;
        }

        /**
         * @param serviceExecutionRoleArn The ARN of the IAM role used by the replicator to access resources in the customer&#39;s account (e.g source and target clusters).
         * 
         * @return builder
         * 
         */
        public Builder serviceExecutionRoleArn(String serviceExecutionRoleArn) {
            return serviceExecutionRoleArn(Output.of(serviceExecutionRoleArn));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public ReplicatorArgs build() {
            $.kafkaClusters = Objects.requireNonNull($.kafkaClusters, "expected parameter 'kafkaClusters' to be non-null");
            $.replicationInfoList = Objects.requireNonNull($.replicationInfoList, "expected parameter 'replicationInfoList' to be non-null");
            $.replicatorName = Objects.requireNonNull($.replicatorName, "expected parameter 'replicatorName' to be non-null");
            $.serviceExecutionRoleArn = Objects.requireNonNull($.serviceExecutionRoleArn, "expected parameter 'serviceExecutionRoleArn' to be non-null");
            return $;
        }
    }

}
