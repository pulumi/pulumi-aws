// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.outputs;

import com.pulumi.aws.quicksight.outputs.Column;
import com.pulumi.aws.quicksight.outputs.FiltersTimeRangeFilterExcludePeriodConfiguration;
import com.pulumi.aws.quicksight.outputs.FiltersTimeRangeFilterRangeMaximumValue;
import com.pulumi.aws.quicksight.outputs.FiltersTimeRangeFilterRangeMinimumValue;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class FiltersTimeRangeFilter {
    private Column column;
    private @Nullable FiltersTimeRangeFilterExcludePeriodConfiguration excludePeriodConfiguration;
    private String filterId;
    private @Nullable Boolean includeMaximum;
    private @Nullable Boolean includeMinimum;
    private String nullOption;
    private @Nullable FiltersTimeRangeFilterRangeMaximumValue rangeMaximumValue;
    private @Nullable FiltersTimeRangeFilterRangeMinimumValue rangeMinimumValue;
    private String timeGranularity;

    private FiltersTimeRangeFilter() {}
    public Column column() {
        return this.column;
    }
    public Optional<FiltersTimeRangeFilterExcludePeriodConfiguration> excludePeriodConfiguration() {
        return Optional.ofNullable(this.excludePeriodConfiguration);
    }
    public String filterId() {
        return this.filterId;
    }
    public Optional<Boolean> includeMaximum() {
        return Optional.ofNullable(this.includeMaximum);
    }
    public Optional<Boolean> includeMinimum() {
        return Optional.ofNullable(this.includeMinimum);
    }
    public String nullOption() {
        return this.nullOption;
    }
    public Optional<FiltersTimeRangeFilterRangeMaximumValue> rangeMaximumValue() {
        return Optional.ofNullable(this.rangeMaximumValue);
    }
    public Optional<FiltersTimeRangeFilterRangeMinimumValue> rangeMinimumValue() {
        return Optional.ofNullable(this.rangeMinimumValue);
    }
    public String timeGranularity() {
        return this.timeGranularity;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FiltersTimeRangeFilter defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Column column;
        private @Nullable FiltersTimeRangeFilterExcludePeriodConfiguration excludePeriodConfiguration;
        private String filterId;
        private @Nullable Boolean includeMaximum;
        private @Nullable Boolean includeMinimum;
        private String nullOption;
        private @Nullable FiltersTimeRangeFilterRangeMaximumValue rangeMaximumValue;
        private @Nullable FiltersTimeRangeFilterRangeMinimumValue rangeMinimumValue;
        private String timeGranularity;
        public Builder() {}
        public Builder(FiltersTimeRangeFilter defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.column = defaults.column;
    	      this.excludePeriodConfiguration = defaults.excludePeriodConfiguration;
    	      this.filterId = defaults.filterId;
    	      this.includeMaximum = defaults.includeMaximum;
    	      this.includeMinimum = defaults.includeMinimum;
    	      this.nullOption = defaults.nullOption;
    	      this.rangeMaximumValue = defaults.rangeMaximumValue;
    	      this.rangeMinimumValue = defaults.rangeMinimumValue;
    	      this.timeGranularity = defaults.timeGranularity;
        }

        @CustomType.Setter
        public Builder column(Column column) {
            if (column == null) {
              throw new MissingRequiredPropertyException("FiltersTimeRangeFilter", "column");
            }
            this.column = column;
            return this;
        }
        @CustomType.Setter
        public Builder excludePeriodConfiguration(@Nullable FiltersTimeRangeFilterExcludePeriodConfiguration excludePeriodConfiguration) {

            this.excludePeriodConfiguration = excludePeriodConfiguration;
            return this;
        }
        @CustomType.Setter
        public Builder filterId(String filterId) {
            if (filterId == null) {
              throw new MissingRequiredPropertyException("FiltersTimeRangeFilter", "filterId");
            }
            this.filterId = filterId;
            return this;
        }
        @CustomType.Setter
        public Builder includeMaximum(@Nullable Boolean includeMaximum) {

            this.includeMaximum = includeMaximum;
            return this;
        }
        @CustomType.Setter
        public Builder includeMinimum(@Nullable Boolean includeMinimum) {

            this.includeMinimum = includeMinimum;
            return this;
        }
        @CustomType.Setter
        public Builder nullOption(String nullOption) {
            if (nullOption == null) {
              throw new MissingRequiredPropertyException("FiltersTimeRangeFilter", "nullOption");
            }
            this.nullOption = nullOption;
            return this;
        }
        @CustomType.Setter
        public Builder rangeMaximumValue(@Nullable FiltersTimeRangeFilterRangeMaximumValue rangeMaximumValue) {

            this.rangeMaximumValue = rangeMaximumValue;
            return this;
        }
        @CustomType.Setter
        public Builder rangeMinimumValue(@Nullable FiltersTimeRangeFilterRangeMinimumValue rangeMinimumValue) {

            this.rangeMinimumValue = rangeMinimumValue;
            return this;
        }
        @CustomType.Setter
        public Builder timeGranularity(String timeGranularity) {
            if (timeGranularity == null) {
              throw new MissingRequiredPropertyException("FiltersTimeRangeFilter", "timeGranularity");
            }
            this.timeGranularity = timeGranularity;
            return this;
        }
        public FiltersTimeRangeFilter build() {
            final var _resultValue = new FiltersTimeRangeFilter();
            _resultValue.column = column;
            _resultValue.excludePeriodConfiguration = excludePeriodConfiguration;
            _resultValue.filterId = filterId;
            _resultValue.includeMaximum = includeMaximum;
            _resultValue.includeMinimum = includeMinimum;
            _resultValue.nullOption = nullOption;
            _resultValue.rangeMaximumValue = rangeMaximumValue;
            _resultValue.rangeMinimumValue = rangeMinimumValue;
            _resultValue.timeGranularity = timeGranularity;
            return _resultValue;
        }
    }
}
