// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.inputs;

import com.pulumi.aws.quicksight.inputs.VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionShapeFormatArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionShapeArgs extends com.pulumi.resources.ResourceArgs {

    public static final VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionShapeArgs Empty = new VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionShapeArgs();

    @Import(name="fieldId", required=true)
    private Output<String> fieldId;

    public Output<String> fieldId() {
        return this.fieldId;
    }

    @Import(name="format")
    private @Nullable Output<VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionShapeFormatArgs> format;

    public Optional<Output<VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionShapeFormatArgs>> format() {
        return Optional.ofNullable(this.format);
    }

    private VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionShapeArgs() {}

    private VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionShapeArgs(VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionShapeArgs $) {
        this.fieldId = $.fieldId;
        this.format = $.format;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionShapeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionShapeArgs $;

        public Builder() {
            $ = new VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionShapeArgs();
        }

        public Builder(VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionShapeArgs defaults) {
            $ = new VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionShapeArgs(Objects.requireNonNull(defaults));
        }

        public Builder fieldId(Output<String> fieldId) {
            $.fieldId = fieldId;
            return this;
        }

        public Builder fieldId(String fieldId) {
            return fieldId(Output.of(fieldId));
        }

        public Builder format(@Nullable Output<VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionShapeFormatArgs> format) {
            $.format = format;
            return this;
        }

        public Builder format(VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionShapeFormatArgs format) {
            return format(Output.of(format));
        }

        public VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionShapeArgs build() {
            if ($.fieldId == null) {
                throw new MissingRequiredPropertyException("VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionShapeArgs", "fieldId");
            }
            return $;
        }
    }

}
