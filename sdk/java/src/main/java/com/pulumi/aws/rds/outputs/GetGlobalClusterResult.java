// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.rds.outputs;

import com.pulumi.aws.rds.outputs.GetGlobalClusterMember;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetGlobalClusterResult {
    /**
     * @return RDS Global Cluster Amazon Resource Name (ARN)
     * 
     */
    private String arn;
    /**
     * @return Name of the automatically created database on cluster creation.
     * 
     */
    private String databaseName;
    /**
     * @return If the Global Cluster should have deletion protection enabled. The database can&#39;t be deleted when this value is set to `true`.
     * 
     */
    private Boolean deletionProtection;
    /**
     * @return The endpoint for the Global Cluster.
     * 
     */
    private String endpoint;
    /**
     * @return Name of the database engine.
     * 
     */
    private String engine;
    /**
     * @return The current lifecycle support status of the database engine for this Global Cluster.
     * 
     */
    private String engineLifecycleSupport;
    /**
     * @return Version of the database engine for this Global Cluster.
     * 
     */
    private String engineVersion;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String identifier;
    /**
     * @return Set of objects containing Global Cluster members.
     * 
     */
    private List<GetGlobalClusterMember> members;
    private String region;
    /**
     * @return AWS Region-unique, immutable identifier for the global database cluster.
     * 
     */
    private String resourceId;
    /**
     * @return Whether the DB cluster is encrypted.
     * 
     */
    private Boolean storageEncrypted;
    /**
     * @return A map of tags to assigned to the Global Cluster.
     * 
     */
    private Map<String,String> tags;

    private GetGlobalClusterResult() {}
    /**
     * @return RDS Global Cluster Amazon Resource Name (ARN)
     * 
     */
    public String arn() {
        return this.arn;
    }
    /**
     * @return Name of the automatically created database on cluster creation.
     * 
     */
    public String databaseName() {
        return this.databaseName;
    }
    /**
     * @return If the Global Cluster should have deletion protection enabled. The database can&#39;t be deleted when this value is set to `true`.
     * 
     */
    public Boolean deletionProtection() {
        return this.deletionProtection;
    }
    /**
     * @return The endpoint for the Global Cluster.
     * 
     */
    public String endpoint() {
        return this.endpoint;
    }
    /**
     * @return Name of the database engine.
     * 
     */
    public String engine() {
        return this.engine;
    }
    /**
     * @return The current lifecycle support status of the database engine for this Global Cluster.
     * 
     */
    public String engineLifecycleSupport() {
        return this.engineLifecycleSupport;
    }
    /**
     * @return Version of the database engine for this Global Cluster.
     * 
     */
    public String engineVersion() {
        return this.engineVersion;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String identifier() {
        return this.identifier;
    }
    /**
     * @return Set of objects containing Global Cluster members.
     * 
     */
    public List<GetGlobalClusterMember> members() {
        return this.members;
    }
    public String region() {
        return this.region;
    }
    /**
     * @return AWS Region-unique, immutable identifier for the global database cluster.
     * 
     */
    public String resourceId() {
        return this.resourceId;
    }
    /**
     * @return Whether the DB cluster is encrypted.
     * 
     */
    public Boolean storageEncrypted() {
        return this.storageEncrypted;
    }
    /**
     * @return A map of tags to assigned to the Global Cluster.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetGlobalClusterResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String arn;
        private String databaseName;
        private Boolean deletionProtection;
        private String endpoint;
        private String engine;
        private String engineLifecycleSupport;
        private String engineVersion;
        private String id;
        private String identifier;
        private List<GetGlobalClusterMember> members;
        private String region;
        private String resourceId;
        private Boolean storageEncrypted;
        private Map<String,String> tags;
        public Builder() {}
        public Builder(GetGlobalClusterResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.databaseName = defaults.databaseName;
    	      this.deletionProtection = defaults.deletionProtection;
    	      this.endpoint = defaults.endpoint;
    	      this.engine = defaults.engine;
    	      this.engineLifecycleSupport = defaults.engineLifecycleSupport;
    	      this.engineVersion = defaults.engineVersion;
    	      this.id = defaults.id;
    	      this.identifier = defaults.identifier;
    	      this.members = defaults.members;
    	      this.region = defaults.region;
    	      this.resourceId = defaults.resourceId;
    	      this.storageEncrypted = defaults.storageEncrypted;
    	      this.tags = defaults.tags;
        }

        @CustomType.Setter
        public Builder arn(String arn) {
            if (arn == null) {
              throw new MissingRequiredPropertyException("GetGlobalClusterResult", "arn");
            }
            this.arn = arn;
            return this;
        }
        @CustomType.Setter
        public Builder databaseName(String databaseName) {
            if (databaseName == null) {
              throw new MissingRequiredPropertyException("GetGlobalClusterResult", "databaseName");
            }
            this.databaseName = databaseName;
            return this;
        }
        @CustomType.Setter
        public Builder deletionProtection(Boolean deletionProtection) {
            if (deletionProtection == null) {
              throw new MissingRequiredPropertyException("GetGlobalClusterResult", "deletionProtection");
            }
            this.deletionProtection = deletionProtection;
            return this;
        }
        @CustomType.Setter
        public Builder endpoint(String endpoint) {
            if (endpoint == null) {
              throw new MissingRequiredPropertyException("GetGlobalClusterResult", "endpoint");
            }
            this.endpoint = endpoint;
            return this;
        }
        @CustomType.Setter
        public Builder engine(String engine) {
            if (engine == null) {
              throw new MissingRequiredPropertyException("GetGlobalClusterResult", "engine");
            }
            this.engine = engine;
            return this;
        }
        @CustomType.Setter
        public Builder engineLifecycleSupport(String engineLifecycleSupport) {
            if (engineLifecycleSupport == null) {
              throw new MissingRequiredPropertyException("GetGlobalClusterResult", "engineLifecycleSupport");
            }
            this.engineLifecycleSupport = engineLifecycleSupport;
            return this;
        }
        @CustomType.Setter
        public Builder engineVersion(String engineVersion) {
            if (engineVersion == null) {
              throw new MissingRequiredPropertyException("GetGlobalClusterResult", "engineVersion");
            }
            this.engineVersion = engineVersion;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetGlobalClusterResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder identifier(String identifier) {
            if (identifier == null) {
              throw new MissingRequiredPropertyException("GetGlobalClusterResult", "identifier");
            }
            this.identifier = identifier;
            return this;
        }
        @CustomType.Setter
        public Builder members(List<GetGlobalClusterMember> members) {
            if (members == null) {
              throw new MissingRequiredPropertyException("GetGlobalClusterResult", "members");
            }
            this.members = members;
            return this;
        }
        public Builder members(GetGlobalClusterMember... members) {
            return members(List.of(members));
        }
        @CustomType.Setter
        public Builder region(String region) {
            if (region == null) {
              throw new MissingRequiredPropertyException("GetGlobalClusterResult", "region");
            }
            this.region = region;
            return this;
        }
        @CustomType.Setter
        public Builder resourceId(String resourceId) {
            if (resourceId == null) {
              throw new MissingRequiredPropertyException("GetGlobalClusterResult", "resourceId");
            }
            this.resourceId = resourceId;
            return this;
        }
        @CustomType.Setter
        public Builder storageEncrypted(Boolean storageEncrypted) {
            if (storageEncrypted == null) {
              throw new MissingRequiredPropertyException("GetGlobalClusterResult", "storageEncrypted");
            }
            this.storageEncrypted = storageEncrypted;
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetGlobalClusterResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        public GetGlobalClusterResult build() {
            final var _resultValue = new GetGlobalClusterResult();
            _resultValue.arn = arn;
            _resultValue.databaseName = databaseName;
            _resultValue.deletionProtection = deletionProtection;
            _resultValue.endpoint = endpoint;
            _resultValue.engine = engine;
            _resultValue.engineLifecycleSupport = engineLifecycleSupport;
            _resultValue.engineVersion = engineVersion;
            _resultValue.id = id;
            _resultValue.identifier = identifier;
            _resultValue.members = members;
            _resultValue.region = region;
            _resultValue.resourceId = resourceId;
            _resultValue.storageEncrypted = storageEncrypted;
            _resultValue.tags = tags;
            return _resultValue;
        }
    }
}
