// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.route53domains;

import com.pulumi.aws.route53domains.inputs.RegisteredDomainAdminContactArgs;
import com.pulumi.aws.route53domains.inputs.RegisteredDomainNameServerArgs;
import com.pulumi.aws.route53domains.inputs.RegisteredDomainRegistrantContactArgs;
import com.pulumi.aws.route53domains.inputs.RegisteredDomainTechContactArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RegisteredDomainArgs extends com.pulumi.resources.ResourceArgs {

    public static final RegisteredDomainArgs Empty = new RegisteredDomainArgs();

    @Import(name="adminContact")
    private @Nullable Output<RegisteredDomainAdminContactArgs> adminContact;

    public Optional<Output<RegisteredDomainAdminContactArgs>> adminContact() {
        return Optional.ofNullable(this.adminContact);
    }

    @Import(name="adminPrivacy")
    private @Nullable Output<Boolean> adminPrivacy;

    public Optional<Output<Boolean>> adminPrivacy() {
        return Optional.ofNullable(this.adminPrivacy);
    }

    @Import(name="autoRenew")
    private @Nullable Output<Boolean> autoRenew;

    public Optional<Output<Boolean>> autoRenew() {
        return Optional.ofNullable(this.autoRenew);
    }

    @Import(name="domainName", required=true)
    private Output<String> domainName;

    public Output<String> domainName() {
        return this.domainName;
    }

    @Import(name="nameServers")
    private @Nullable Output<List<RegisteredDomainNameServerArgs>> nameServers;

    public Optional<Output<List<RegisteredDomainNameServerArgs>>> nameServers() {
        return Optional.ofNullable(this.nameServers);
    }

    @Import(name="registrantContact")
    private @Nullable Output<RegisteredDomainRegistrantContactArgs> registrantContact;

    public Optional<Output<RegisteredDomainRegistrantContactArgs>> registrantContact() {
        return Optional.ofNullable(this.registrantContact);
    }

    @Import(name="registrantPrivacy")
    private @Nullable Output<Boolean> registrantPrivacy;

    public Optional<Output<Boolean>> registrantPrivacy() {
        return Optional.ofNullable(this.registrantPrivacy);
    }

    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="techContact")
    private @Nullable Output<RegisteredDomainTechContactArgs> techContact;

    public Optional<Output<RegisteredDomainTechContactArgs>> techContact() {
        return Optional.ofNullable(this.techContact);
    }

    @Import(name="techPrivacy")
    private @Nullable Output<Boolean> techPrivacy;

    public Optional<Output<Boolean>> techPrivacy() {
        return Optional.ofNullable(this.techPrivacy);
    }

    @Import(name="transferLock")
    private @Nullable Output<Boolean> transferLock;

    public Optional<Output<Boolean>> transferLock() {
        return Optional.ofNullable(this.transferLock);
    }

    private RegisteredDomainArgs() {}

    private RegisteredDomainArgs(RegisteredDomainArgs $) {
        this.adminContact = $.adminContact;
        this.adminPrivacy = $.adminPrivacy;
        this.autoRenew = $.autoRenew;
        this.domainName = $.domainName;
        this.nameServers = $.nameServers;
        this.registrantContact = $.registrantContact;
        this.registrantPrivacy = $.registrantPrivacy;
        this.tags = $.tags;
        this.techContact = $.techContact;
        this.techPrivacy = $.techPrivacy;
        this.transferLock = $.transferLock;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RegisteredDomainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RegisteredDomainArgs $;

        public Builder() {
            $ = new RegisteredDomainArgs();
        }

        public Builder(RegisteredDomainArgs defaults) {
            $ = new RegisteredDomainArgs(Objects.requireNonNull(defaults));
        }

        public Builder adminContact(@Nullable Output<RegisteredDomainAdminContactArgs> adminContact) {
            $.adminContact = adminContact;
            return this;
        }

        public Builder adminContact(RegisteredDomainAdminContactArgs adminContact) {
            return adminContact(Output.of(adminContact));
        }

        public Builder adminPrivacy(@Nullable Output<Boolean> adminPrivacy) {
            $.adminPrivacy = adminPrivacy;
            return this;
        }

        public Builder adminPrivacy(Boolean adminPrivacy) {
            return adminPrivacy(Output.of(adminPrivacy));
        }

        public Builder autoRenew(@Nullable Output<Boolean> autoRenew) {
            $.autoRenew = autoRenew;
            return this;
        }

        public Builder autoRenew(Boolean autoRenew) {
            return autoRenew(Output.of(autoRenew));
        }

        public Builder domainName(Output<String> domainName) {
            $.domainName = domainName;
            return this;
        }

        public Builder domainName(String domainName) {
            return domainName(Output.of(domainName));
        }

        public Builder nameServers(@Nullable Output<List<RegisteredDomainNameServerArgs>> nameServers) {
            $.nameServers = nameServers;
            return this;
        }

        public Builder nameServers(List<RegisteredDomainNameServerArgs> nameServers) {
            return nameServers(Output.of(nameServers));
        }

        public Builder nameServers(RegisteredDomainNameServerArgs... nameServers) {
            return nameServers(List.of(nameServers));
        }

        public Builder registrantContact(@Nullable Output<RegisteredDomainRegistrantContactArgs> registrantContact) {
            $.registrantContact = registrantContact;
            return this;
        }

        public Builder registrantContact(RegisteredDomainRegistrantContactArgs registrantContact) {
            return registrantContact(Output.of(registrantContact));
        }

        public Builder registrantPrivacy(@Nullable Output<Boolean> registrantPrivacy) {
            $.registrantPrivacy = registrantPrivacy;
            return this;
        }

        public Builder registrantPrivacy(Boolean registrantPrivacy) {
            return registrantPrivacy(Output.of(registrantPrivacy));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder techContact(@Nullable Output<RegisteredDomainTechContactArgs> techContact) {
            $.techContact = techContact;
            return this;
        }

        public Builder techContact(RegisteredDomainTechContactArgs techContact) {
            return techContact(Output.of(techContact));
        }

        public Builder techPrivacy(@Nullable Output<Boolean> techPrivacy) {
            $.techPrivacy = techPrivacy;
            return this;
        }

        public Builder techPrivacy(Boolean techPrivacy) {
            return techPrivacy(Output.of(techPrivacy));
        }

        public Builder transferLock(@Nullable Output<Boolean> transferLock) {
            $.transferLock = transferLock;
            return this;
        }

        public Builder transferLock(Boolean transferLock) {
            return transferLock(Output.of(transferLock));
        }

        public RegisteredDomainArgs build() {
            $.domainName = Objects.requireNonNull($.domainName, "expected parameter 'domainName' to be non-null");
            return $;
        }
    }

}
