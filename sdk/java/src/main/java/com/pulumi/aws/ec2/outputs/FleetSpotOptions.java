// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ec2.outputs;

import com.pulumi.aws.ec2.outputs.FleetSpotOptionsMaintenanceStrategies;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class FleetSpotOptions {
    /**
     * @return How to allocate the target capacity across the Spot pools. Valid values: `diversified`, `lowestPrice`, `capacity-optimized`, `capacity-optimized-prioritized` and `price-capacity-optimized`. Default: `lowestPrice`.
     * 
     */
    private @Nullable String allocationStrategy;
    /**
     * @return Behavior when a Spot Instance is interrupted. Valid values: `hibernate`, `stop`, `terminate`. Default: `terminate`.
     * 
     */
    private @Nullable String instanceInterruptionBehavior;
    /**
     * @return Number of Spot pools across which to allocate your target Spot capacity. Valid only when Spot `allocation_strategy` is set to `lowestPrice`. Default: `1`.
     * 
     */
    private @Nullable Integer instancePoolsToUseCount;
    /**
     * @return Nested argument containing maintenance strategies for managing your Spot Instances that are at an elevated risk of being interrupted. Defined below.
     * 
     */
    private @Nullable FleetSpotOptionsMaintenanceStrategies maintenanceStrategies;
    /**
     * @return The maximum amount per hour for Spot Instances that you&#39;re willing to pay.
     * 
     */
    private @Nullable String maxTotalPrice;
    /**
     * @return The minimum target capacity for Spot Instances in the fleet. If the minimum target capacity is not reached, the fleet launches no instances. Supported only for fleets of type `instant`.
     * 
     */
    private @Nullable Integer minTargetCapacity;
    /**
     * @return Indicates that the fleet launches all Spot Instances into a single Availability Zone. Supported only for fleets of type `instant`.
     * 
     */
    private @Nullable Boolean singleAvailabilityZone;
    /**
     * @return Indicates that the fleet uses a single instance type to launch all Spot Instances in the fleet. Supported only for fleets of type `instant`.
     * 
     */
    private @Nullable Boolean singleInstanceType;

    private FleetSpotOptions() {}
    /**
     * @return How to allocate the target capacity across the Spot pools. Valid values: `diversified`, `lowestPrice`, `capacity-optimized`, `capacity-optimized-prioritized` and `price-capacity-optimized`. Default: `lowestPrice`.
     * 
     */
    public Optional<String> allocationStrategy() {
        return Optional.ofNullable(this.allocationStrategy);
    }
    /**
     * @return Behavior when a Spot Instance is interrupted. Valid values: `hibernate`, `stop`, `terminate`. Default: `terminate`.
     * 
     */
    public Optional<String> instanceInterruptionBehavior() {
        return Optional.ofNullable(this.instanceInterruptionBehavior);
    }
    /**
     * @return Number of Spot pools across which to allocate your target Spot capacity. Valid only when Spot `allocation_strategy` is set to `lowestPrice`. Default: `1`.
     * 
     */
    public Optional<Integer> instancePoolsToUseCount() {
        return Optional.ofNullable(this.instancePoolsToUseCount);
    }
    /**
     * @return Nested argument containing maintenance strategies for managing your Spot Instances that are at an elevated risk of being interrupted. Defined below.
     * 
     */
    public Optional<FleetSpotOptionsMaintenanceStrategies> maintenanceStrategies() {
        return Optional.ofNullable(this.maintenanceStrategies);
    }
    /**
     * @return The maximum amount per hour for Spot Instances that you&#39;re willing to pay.
     * 
     */
    public Optional<String> maxTotalPrice() {
        return Optional.ofNullable(this.maxTotalPrice);
    }
    /**
     * @return The minimum target capacity for Spot Instances in the fleet. If the minimum target capacity is not reached, the fleet launches no instances. Supported only for fleets of type `instant`.
     * 
     */
    public Optional<Integer> minTargetCapacity() {
        return Optional.ofNullable(this.minTargetCapacity);
    }
    /**
     * @return Indicates that the fleet launches all Spot Instances into a single Availability Zone. Supported only for fleets of type `instant`.
     * 
     */
    public Optional<Boolean> singleAvailabilityZone() {
        return Optional.ofNullable(this.singleAvailabilityZone);
    }
    /**
     * @return Indicates that the fleet uses a single instance type to launch all Spot Instances in the fleet. Supported only for fleets of type `instant`.
     * 
     */
    public Optional<Boolean> singleInstanceType() {
        return Optional.ofNullable(this.singleInstanceType);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FleetSpotOptions defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String allocationStrategy;
        private @Nullable String instanceInterruptionBehavior;
        private @Nullable Integer instancePoolsToUseCount;
        private @Nullable FleetSpotOptionsMaintenanceStrategies maintenanceStrategies;
        private @Nullable String maxTotalPrice;
        private @Nullable Integer minTargetCapacity;
        private @Nullable Boolean singleAvailabilityZone;
        private @Nullable Boolean singleInstanceType;
        public Builder() {}
        public Builder(FleetSpotOptions defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allocationStrategy = defaults.allocationStrategy;
    	      this.instanceInterruptionBehavior = defaults.instanceInterruptionBehavior;
    	      this.instancePoolsToUseCount = defaults.instancePoolsToUseCount;
    	      this.maintenanceStrategies = defaults.maintenanceStrategies;
    	      this.maxTotalPrice = defaults.maxTotalPrice;
    	      this.minTargetCapacity = defaults.minTargetCapacity;
    	      this.singleAvailabilityZone = defaults.singleAvailabilityZone;
    	      this.singleInstanceType = defaults.singleInstanceType;
        }

        @CustomType.Setter
        public Builder allocationStrategy(@Nullable String allocationStrategy) {

            this.allocationStrategy = allocationStrategy;
            return this;
        }
        @CustomType.Setter
        public Builder instanceInterruptionBehavior(@Nullable String instanceInterruptionBehavior) {

            this.instanceInterruptionBehavior = instanceInterruptionBehavior;
            return this;
        }
        @CustomType.Setter
        public Builder instancePoolsToUseCount(@Nullable Integer instancePoolsToUseCount) {

            this.instancePoolsToUseCount = instancePoolsToUseCount;
            return this;
        }
        @CustomType.Setter
        public Builder maintenanceStrategies(@Nullable FleetSpotOptionsMaintenanceStrategies maintenanceStrategies) {

            this.maintenanceStrategies = maintenanceStrategies;
            return this;
        }
        @CustomType.Setter
        public Builder maxTotalPrice(@Nullable String maxTotalPrice) {

            this.maxTotalPrice = maxTotalPrice;
            return this;
        }
        @CustomType.Setter
        public Builder minTargetCapacity(@Nullable Integer minTargetCapacity) {

            this.minTargetCapacity = minTargetCapacity;
            return this;
        }
        @CustomType.Setter
        public Builder singleAvailabilityZone(@Nullable Boolean singleAvailabilityZone) {

            this.singleAvailabilityZone = singleAvailabilityZone;
            return this;
        }
        @CustomType.Setter
        public Builder singleInstanceType(@Nullable Boolean singleInstanceType) {

            this.singleInstanceType = singleInstanceType;
            return this;
        }
        public FleetSpotOptions build() {
            final var _resultValue = new FleetSpotOptions();
            _resultValue.allocationStrategy = allocationStrategy;
            _resultValue.instanceInterruptionBehavior = instanceInterruptionBehavior;
            _resultValue.instancePoolsToUseCount = instancePoolsToUseCount;
            _resultValue.maintenanceStrategies = maintenanceStrategies;
            _resultValue.maxTotalPrice = maxTotalPrice;
            _resultValue.minTargetCapacity = minTargetCapacity;
            _resultValue.singleAvailabilityZone = singleAvailabilityZone;
            _resultValue.singleInstanceType = singleInstanceType;
            return _resultValue;
        }
    }
}
