// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.inputs;

import com.pulumi.aws.quicksight.inputs.VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionCellArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionArgs extends com.pulumi.resources.ResourceArgs {

    public static final VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionArgs Empty = new VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionArgs();

    @Import(name="cell")
    private @Nullable Output<VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionCellArgs> cell;

    public Optional<Output<VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionCellArgs>> cell() {
        return Optional.ofNullable(this.cell);
    }

    private VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionArgs() {}

    private VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionArgs(VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionArgs $) {
        this.cell = $.cell;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionArgs $;

        public Builder() {
            $ = new VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionArgs();
        }

        public Builder(VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionArgs defaults) {
            $ = new VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionArgs(Objects.requireNonNull(defaults));
        }

        public Builder cell(@Nullable Output<VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionCellArgs> cell) {
            $.cell = cell;
            return this;
        }

        public Builder cell(VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionCellArgs cell) {
            return cell(Output.of(cell));
        }

        public VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionArgs build() {
            return $;
        }
    }

}
