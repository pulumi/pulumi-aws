// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ecs.inputs;

import com.pulumi.aws.ecs.inputs.ServiceServiceConnectConfigurationLogConfigurationSecretOptionArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceServiceConnectConfigurationLogConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceServiceConnectConfigurationLogConfigurationArgs Empty = new ServiceServiceConnectConfigurationLogConfigurationArgs();

    /**
     * The log driver to use for the container.
     * 
     */
    @Import(name="logDriver", required=true)
    private Output<String> logDriver;

    /**
     * @return The log driver to use for the container.
     * 
     */
    public Output<String> logDriver() {
        return this.logDriver;
    }

    /**
     * The configuration options to send to the log driver.
     * 
     */
    @Import(name="options")
    private @Nullable Output<Map<String,String>> options;

    /**
     * @return The configuration options to send to the log driver.
     * 
     */
    public Optional<Output<Map<String,String>>> options() {
        return Optional.ofNullable(this.options);
    }

    /**
     * The secrets to pass to the log configuration. See below.
     * 
     */
    @Import(name="secretOptions")
    private @Nullable Output<List<ServiceServiceConnectConfigurationLogConfigurationSecretOptionArgs>> secretOptions;

    /**
     * @return The secrets to pass to the log configuration. See below.
     * 
     */
    public Optional<Output<List<ServiceServiceConnectConfigurationLogConfigurationSecretOptionArgs>>> secretOptions() {
        return Optional.ofNullable(this.secretOptions);
    }

    private ServiceServiceConnectConfigurationLogConfigurationArgs() {}

    private ServiceServiceConnectConfigurationLogConfigurationArgs(ServiceServiceConnectConfigurationLogConfigurationArgs $) {
        this.logDriver = $.logDriver;
        this.options = $.options;
        this.secretOptions = $.secretOptions;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceServiceConnectConfigurationLogConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceServiceConnectConfigurationLogConfigurationArgs $;

        public Builder() {
            $ = new ServiceServiceConnectConfigurationLogConfigurationArgs();
        }

        public Builder(ServiceServiceConnectConfigurationLogConfigurationArgs defaults) {
            $ = new ServiceServiceConnectConfigurationLogConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param logDriver The log driver to use for the container.
         * 
         * @return builder
         * 
         */
        public Builder logDriver(Output<String> logDriver) {
            $.logDriver = logDriver;
            return this;
        }

        /**
         * @param logDriver The log driver to use for the container.
         * 
         * @return builder
         * 
         */
        public Builder logDriver(String logDriver) {
            return logDriver(Output.of(logDriver));
        }

        /**
         * @param options The configuration options to send to the log driver.
         * 
         * @return builder
         * 
         */
        public Builder options(@Nullable Output<Map<String,String>> options) {
            $.options = options;
            return this;
        }

        /**
         * @param options The configuration options to send to the log driver.
         * 
         * @return builder
         * 
         */
        public Builder options(Map<String,String> options) {
            return options(Output.of(options));
        }

        /**
         * @param secretOptions The secrets to pass to the log configuration. See below.
         * 
         * @return builder
         * 
         */
        public Builder secretOptions(@Nullable Output<List<ServiceServiceConnectConfigurationLogConfigurationSecretOptionArgs>> secretOptions) {
            $.secretOptions = secretOptions;
            return this;
        }

        /**
         * @param secretOptions The secrets to pass to the log configuration. See below.
         * 
         * @return builder
         * 
         */
        public Builder secretOptions(List<ServiceServiceConnectConfigurationLogConfigurationSecretOptionArgs> secretOptions) {
            return secretOptions(Output.of(secretOptions));
        }

        /**
         * @param secretOptions The secrets to pass to the log configuration. See below.
         * 
         * @return builder
         * 
         */
        public Builder secretOptions(ServiceServiceConnectConfigurationLogConfigurationSecretOptionArgs... secretOptions) {
            return secretOptions(List.of(secretOptions));
        }

        public ServiceServiceConnectConfigurationLogConfigurationArgs build() {
            if ($.logDriver == null) {
                throw new MissingRequiredPropertyException("ServiceServiceConnectConfigurationLogConfigurationArgs", "logDriver");
            }
            return $;
        }
    }

}
