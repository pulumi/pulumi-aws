// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.bedrockfoundation.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class GetModelsModelSummary extends com.pulumi.resources.InvokeArgs {

    public static final GetModelsModelSummary Empty = new GetModelsModelSummary();

    /**
     * Customizations that the model supports.
     * 
     */
    @Import(name="customizationsSupporteds", required=true)
    private List<String> customizationsSupporteds;

    /**
     * @return Customizations that the model supports.
     * 
     */
    public List<String> customizationsSupporteds() {
        return this.customizationsSupporteds;
    }

    /**
     * Inference types that the model supports.
     * 
     */
    @Import(name="inferenceTypesSupporteds", required=true)
    private List<String> inferenceTypesSupporteds;

    /**
     * @return Inference types that the model supports.
     * 
     */
    public List<String> inferenceTypesSupporteds() {
        return this.inferenceTypesSupporteds;
    }

    /**
     * Input modalities that the model supports.
     * 
     */
    @Import(name="inputModalities", required=true)
    private List<String> inputModalities;

    /**
     * @return Input modalities that the model supports.
     * 
     */
    public List<String> inputModalities() {
        return this.inputModalities;
    }

    /**
     * Model ARN.
     * 
     */
    @Import(name="modelArn", required=true)
    private String modelArn;

    /**
     * @return Model ARN.
     * 
     */
    public String modelArn() {
        return this.modelArn;
    }

    /**
     * Model identifier.
     * 
     */
    @Import(name="modelId", required=true)
    private String modelId;

    /**
     * @return Model identifier.
     * 
     */
    public String modelId() {
        return this.modelId;
    }

    /**
     * Model name.
     * 
     */
    @Import(name="modelName", required=true)
    private String modelName;

    /**
     * @return Model name.
     * 
     */
    public String modelName() {
        return this.modelName;
    }

    /**
     * Output modalities that the model supports.
     * 
     */
    @Import(name="outputModalities", required=true)
    private List<String> outputModalities;

    /**
     * @return Output modalities that the model supports.
     * 
     */
    public List<String> outputModalities() {
        return this.outputModalities;
    }

    /**
     * Model provider name.
     * 
     */
    @Import(name="providerName", required=true)
    private String providerName;

    /**
     * @return Model provider name.
     * 
     */
    public String providerName() {
        return this.providerName;
    }

    /**
     * Indicates whether the model supports streaming.
     * 
     */
    @Import(name="responseStreamingSupported", required=true)
    private Boolean responseStreamingSupported;

    /**
     * @return Indicates whether the model supports streaming.
     * 
     */
    public Boolean responseStreamingSupported() {
        return this.responseStreamingSupported;
    }

    private GetModelsModelSummary() {}

    private GetModelsModelSummary(GetModelsModelSummary $) {
        this.customizationsSupporteds = $.customizationsSupporteds;
        this.inferenceTypesSupporteds = $.inferenceTypesSupporteds;
        this.inputModalities = $.inputModalities;
        this.modelArn = $.modelArn;
        this.modelId = $.modelId;
        this.modelName = $.modelName;
        this.outputModalities = $.outputModalities;
        this.providerName = $.providerName;
        this.responseStreamingSupported = $.responseStreamingSupported;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetModelsModelSummary defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetModelsModelSummary $;

        public Builder() {
            $ = new GetModelsModelSummary();
        }

        public Builder(GetModelsModelSummary defaults) {
            $ = new GetModelsModelSummary(Objects.requireNonNull(defaults));
        }

        /**
         * @param customizationsSupporteds Customizations that the model supports.
         * 
         * @return builder
         * 
         */
        public Builder customizationsSupporteds(List<String> customizationsSupporteds) {
            $.customizationsSupporteds = customizationsSupporteds;
            return this;
        }

        /**
         * @param customizationsSupporteds Customizations that the model supports.
         * 
         * @return builder
         * 
         */
        public Builder customizationsSupporteds(String... customizationsSupporteds) {
            return customizationsSupporteds(List.of(customizationsSupporteds));
        }

        /**
         * @param inferenceTypesSupporteds Inference types that the model supports.
         * 
         * @return builder
         * 
         */
        public Builder inferenceTypesSupporteds(List<String> inferenceTypesSupporteds) {
            $.inferenceTypesSupporteds = inferenceTypesSupporteds;
            return this;
        }

        /**
         * @param inferenceTypesSupporteds Inference types that the model supports.
         * 
         * @return builder
         * 
         */
        public Builder inferenceTypesSupporteds(String... inferenceTypesSupporteds) {
            return inferenceTypesSupporteds(List.of(inferenceTypesSupporteds));
        }

        /**
         * @param inputModalities Input modalities that the model supports.
         * 
         * @return builder
         * 
         */
        public Builder inputModalities(List<String> inputModalities) {
            $.inputModalities = inputModalities;
            return this;
        }

        /**
         * @param inputModalities Input modalities that the model supports.
         * 
         * @return builder
         * 
         */
        public Builder inputModalities(String... inputModalities) {
            return inputModalities(List.of(inputModalities));
        }

        /**
         * @param modelArn Model ARN.
         * 
         * @return builder
         * 
         */
        public Builder modelArn(String modelArn) {
            $.modelArn = modelArn;
            return this;
        }

        /**
         * @param modelId Model identifier.
         * 
         * @return builder
         * 
         */
        public Builder modelId(String modelId) {
            $.modelId = modelId;
            return this;
        }

        /**
         * @param modelName Model name.
         * 
         * @return builder
         * 
         */
        public Builder modelName(String modelName) {
            $.modelName = modelName;
            return this;
        }

        /**
         * @param outputModalities Output modalities that the model supports.
         * 
         * @return builder
         * 
         */
        public Builder outputModalities(List<String> outputModalities) {
            $.outputModalities = outputModalities;
            return this;
        }

        /**
         * @param outputModalities Output modalities that the model supports.
         * 
         * @return builder
         * 
         */
        public Builder outputModalities(String... outputModalities) {
            return outputModalities(List.of(outputModalities));
        }

        /**
         * @param providerName Model provider name.
         * 
         * @return builder
         * 
         */
        public Builder providerName(String providerName) {
            $.providerName = providerName;
            return this;
        }

        /**
         * @param responseStreamingSupported Indicates whether the model supports streaming.
         * 
         * @return builder
         * 
         */
        public Builder responseStreamingSupported(Boolean responseStreamingSupported) {
            $.responseStreamingSupported = responseStreamingSupported;
            return this;
        }

        public GetModelsModelSummary build() {
            $.customizationsSupporteds = Objects.requireNonNull($.customizationsSupporteds, "expected parameter 'customizationsSupporteds' to be non-null");
            $.inferenceTypesSupporteds = Objects.requireNonNull($.inferenceTypesSupporteds, "expected parameter 'inferenceTypesSupporteds' to be non-null");
            $.inputModalities = Objects.requireNonNull($.inputModalities, "expected parameter 'inputModalities' to be non-null");
            $.modelArn = Objects.requireNonNull($.modelArn, "expected parameter 'modelArn' to be non-null");
            $.modelId = Objects.requireNonNull($.modelId, "expected parameter 'modelId' to be non-null");
            $.modelName = Objects.requireNonNull($.modelName, "expected parameter 'modelName' to be non-null");
            $.outputModalities = Objects.requireNonNull($.outputModalities, "expected parameter 'outputModalities' to be non-null");
            $.providerName = Objects.requireNonNull($.providerName, "expected parameter 'providerName' to be non-null");
            $.responseStreamingSupported = Objects.requireNonNull($.responseStreamingSupported, "expected parameter 'responseStreamingSupported' to be non-null");
            return $;
        }
    }

}
