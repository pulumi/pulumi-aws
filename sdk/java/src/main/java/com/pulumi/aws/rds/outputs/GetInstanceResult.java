// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.rds.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetInstanceResult {
    private String address;
    private Integer allocatedStorage;
    private Boolean autoMinorVersionUpgrade;
    private String availabilityZone;
    private Integer backupRetentionPeriod;
    private String caCertIdentifier;
    private String dbClusterIdentifier;
    private String dbInstanceArn;
    private String dbInstanceClass;
    private String dbInstanceIdentifier;
    private Integer dbInstancePort;
    private String dbName;
    private List<String> dbParameterGroups;
    private List<String> dbSecurityGroups;
    private String dbSubnetGroup;
    private List<String> enabledCloudwatchLogsExports;
    private String endpoint;
    private String engine;
    private String engineVersion;
    private String hostedZoneId;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private Integer iops;
    private String kmsKeyId;
    private String licenseModel;
    private String masterUsername;
    private Integer monitoringInterval;
    private String monitoringRoleArn;
    private Boolean multiAz;
    private String networkType;
    private List<String> optionGroupMemberships;
    private Integer port;
    private String preferredBackupWindow;
    private String preferredMaintenanceWindow;
    private Boolean publiclyAccessible;
    private String replicateSourceDb;
    private String resourceId;
    private Boolean storageEncrypted;
    private Integer storageThroughput;
    private String storageType;
    private Map<String,String> tags;
    private String timezone;
    private List<String> vpcSecurityGroups;

    private GetInstanceResult() {}
    public String address() {
        return this.address;
    }
    public Integer allocatedStorage() {
        return this.allocatedStorage;
    }
    public Boolean autoMinorVersionUpgrade() {
        return this.autoMinorVersionUpgrade;
    }
    public String availabilityZone() {
        return this.availabilityZone;
    }
    public Integer backupRetentionPeriod() {
        return this.backupRetentionPeriod;
    }
    public String caCertIdentifier() {
        return this.caCertIdentifier;
    }
    public String dbClusterIdentifier() {
        return this.dbClusterIdentifier;
    }
    public String dbInstanceArn() {
        return this.dbInstanceArn;
    }
    public String dbInstanceClass() {
        return this.dbInstanceClass;
    }
    public String dbInstanceIdentifier() {
        return this.dbInstanceIdentifier;
    }
    public Integer dbInstancePort() {
        return this.dbInstancePort;
    }
    public String dbName() {
        return this.dbName;
    }
    public List<String> dbParameterGroups() {
        return this.dbParameterGroups;
    }
    public List<String> dbSecurityGroups() {
        return this.dbSecurityGroups;
    }
    public String dbSubnetGroup() {
        return this.dbSubnetGroup;
    }
    public List<String> enabledCloudwatchLogsExports() {
        return this.enabledCloudwatchLogsExports;
    }
    public String endpoint() {
        return this.endpoint;
    }
    public String engine() {
        return this.engine;
    }
    public String engineVersion() {
        return this.engineVersion;
    }
    public String hostedZoneId() {
        return this.hostedZoneId;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Integer iops() {
        return this.iops;
    }
    public String kmsKeyId() {
        return this.kmsKeyId;
    }
    public String licenseModel() {
        return this.licenseModel;
    }
    public String masterUsername() {
        return this.masterUsername;
    }
    public Integer monitoringInterval() {
        return this.monitoringInterval;
    }
    public String monitoringRoleArn() {
        return this.monitoringRoleArn;
    }
    public Boolean multiAz() {
        return this.multiAz;
    }
    public String networkType() {
        return this.networkType;
    }
    public List<String> optionGroupMemberships() {
        return this.optionGroupMemberships;
    }
    public Integer port() {
        return this.port;
    }
    public String preferredBackupWindow() {
        return this.preferredBackupWindow;
    }
    public String preferredMaintenanceWindow() {
        return this.preferredMaintenanceWindow;
    }
    public Boolean publiclyAccessible() {
        return this.publiclyAccessible;
    }
    public String replicateSourceDb() {
        return this.replicateSourceDb;
    }
    public String resourceId() {
        return this.resourceId;
    }
    public Boolean storageEncrypted() {
        return this.storageEncrypted;
    }
    public Integer storageThroughput() {
        return this.storageThroughput;
    }
    public String storageType() {
        return this.storageType;
    }
    public Map<String,String> tags() {
        return this.tags;
    }
    public String timezone() {
        return this.timezone;
    }
    public List<String> vpcSecurityGroups() {
        return this.vpcSecurityGroups;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInstanceResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String address;
        private Integer allocatedStorage;
        private Boolean autoMinorVersionUpgrade;
        private String availabilityZone;
        private Integer backupRetentionPeriod;
        private String caCertIdentifier;
        private String dbClusterIdentifier;
        private String dbInstanceArn;
        private String dbInstanceClass;
        private String dbInstanceIdentifier;
        private Integer dbInstancePort;
        private String dbName;
        private List<String> dbParameterGroups;
        private List<String> dbSecurityGroups;
        private String dbSubnetGroup;
        private List<String> enabledCloudwatchLogsExports;
        private String endpoint;
        private String engine;
        private String engineVersion;
        private String hostedZoneId;
        private String id;
        private Integer iops;
        private String kmsKeyId;
        private String licenseModel;
        private String masterUsername;
        private Integer monitoringInterval;
        private String monitoringRoleArn;
        private Boolean multiAz;
        private String networkType;
        private List<String> optionGroupMemberships;
        private Integer port;
        private String preferredBackupWindow;
        private String preferredMaintenanceWindow;
        private Boolean publiclyAccessible;
        private String replicateSourceDb;
        private String resourceId;
        private Boolean storageEncrypted;
        private Integer storageThroughput;
        private String storageType;
        private Map<String,String> tags;
        private String timezone;
        private List<String> vpcSecurityGroups;
        public Builder() {}
        public Builder(GetInstanceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.address = defaults.address;
    	      this.allocatedStorage = defaults.allocatedStorage;
    	      this.autoMinorVersionUpgrade = defaults.autoMinorVersionUpgrade;
    	      this.availabilityZone = defaults.availabilityZone;
    	      this.backupRetentionPeriod = defaults.backupRetentionPeriod;
    	      this.caCertIdentifier = defaults.caCertIdentifier;
    	      this.dbClusterIdentifier = defaults.dbClusterIdentifier;
    	      this.dbInstanceArn = defaults.dbInstanceArn;
    	      this.dbInstanceClass = defaults.dbInstanceClass;
    	      this.dbInstanceIdentifier = defaults.dbInstanceIdentifier;
    	      this.dbInstancePort = defaults.dbInstancePort;
    	      this.dbName = defaults.dbName;
    	      this.dbParameterGroups = defaults.dbParameterGroups;
    	      this.dbSecurityGroups = defaults.dbSecurityGroups;
    	      this.dbSubnetGroup = defaults.dbSubnetGroup;
    	      this.enabledCloudwatchLogsExports = defaults.enabledCloudwatchLogsExports;
    	      this.endpoint = defaults.endpoint;
    	      this.engine = defaults.engine;
    	      this.engineVersion = defaults.engineVersion;
    	      this.hostedZoneId = defaults.hostedZoneId;
    	      this.id = defaults.id;
    	      this.iops = defaults.iops;
    	      this.kmsKeyId = defaults.kmsKeyId;
    	      this.licenseModel = defaults.licenseModel;
    	      this.masterUsername = defaults.masterUsername;
    	      this.monitoringInterval = defaults.monitoringInterval;
    	      this.monitoringRoleArn = defaults.monitoringRoleArn;
    	      this.multiAz = defaults.multiAz;
    	      this.networkType = defaults.networkType;
    	      this.optionGroupMemberships = defaults.optionGroupMemberships;
    	      this.port = defaults.port;
    	      this.preferredBackupWindow = defaults.preferredBackupWindow;
    	      this.preferredMaintenanceWindow = defaults.preferredMaintenanceWindow;
    	      this.publiclyAccessible = defaults.publiclyAccessible;
    	      this.replicateSourceDb = defaults.replicateSourceDb;
    	      this.resourceId = defaults.resourceId;
    	      this.storageEncrypted = defaults.storageEncrypted;
    	      this.storageThroughput = defaults.storageThroughput;
    	      this.storageType = defaults.storageType;
    	      this.tags = defaults.tags;
    	      this.timezone = defaults.timezone;
    	      this.vpcSecurityGroups = defaults.vpcSecurityGroups;
        }

        @CustomType.Setter
        public Builder address(String address) {
            this.address = Objects.requireNonNull(address);
            return this;
        }
        @CustomType.Setter
        public Builder allocatedStorage(Integer allocatedStorage) {
            this.allocatedStorage = Objects.requireNonNull(allocatedStorage);
            return this;
        }
        @CustomType.Setter
        public Builder autoMinorVersionUpgrade(Boolean autoMinorVersionUpgrade) {
            this.autoMinorVersionUpgrade = Objects.requireNonNull(autoMinorVersionUpgrade);
            return this;
        }
        @CustomType.Setter
        public Builder availabilityZone(String availabilityZone) {
            this.availabilityZone = Objects.requireNonNull(availabilityZone);
            return this;
        }
        @CustomType.Setter
        public Builder backupRetentionPeriod(Integer backupRetentionPeriod) {
            this.backupRetentionPeriod = Objects.requireNonNull(backupRetentionPeriod);
            return this;
        }
        @CustomType.Setter
        public Builder caCertIdentifier(String caCertIdentifier) {
            this.caCertIdentifier = Objects.requireNonNull(caCertIdentifier);
            return this;
        }
        @CustomType.Setter
        public Builder dbClusterIdentifier(String dbClusterIdentifier) {
            this.dbClusterIdentifier = Objects.requireNonNull(dbClusterIdentifier);
            return this;
        }
        @CustomType.Setter
        public Builder dbInstanceArn(String dbInstanceArn) {
            this.dbInstanceArn = Objects.requireNonNull(dbInstanceArn);
            return this;
        }
        @CustomType.Setter
        public Builder dbInstanceClass(String dbInstanceClass) {
            this.dbInstanceClass = Objects.requireNonNull(dbInstanceClass);
            return this;
        }
        @CustomType.Setter
        public Builder dbInstanceIdentifier(String dbInstanceIdentifier) {
            this.dbInstanceIdentifier = Objects.requireNonNull(dbInstanceIdentifier);
            return this;
        }
        @CustomType.Setter
        public Builder dbInstancePort(Integer dbInstancePort) {
            this.dbInstancePort = Objects.requireNonNull(dbInstancePort);
            return this;
        }
        @CustomType.Setter
        public Builder dbName(String dbName) {
            this.dbName = Objects.requireNonNull(dbName);
            return this;
        }
        @CustomType.Setter
        public Builder dbParameterGroups(List<String> dbParameterGroups) {
            this.dbParameterGroups = Objects.requireNonNull(dbParameterGroups);
            return this;
        }
        public Builder dbParameterGroups(String... dbParameterGroups) {
            return dbParameterGroups(List.of(dbParameterGroups));
        }
        @CustomType.Setter
        public Builder dbSecurityGroups(List<String> dbSecurityGroups) {
            this.dbSecurityGroups = Objects.requireNonNull(dbSecurityGroups);
            return this;
        }
        public Builder dbSecurityGroups(String... dbSecurityGroups) {
            return dbSecurityGroups(List.of(dbSecurityGroups));
        }
        @CustomType.Setter
        public Builder dbSubnetGroup(String dbSubnetGroup) {
            this.dbSubnetGroup = Objects.requireNonNull(dbSubnetGroup);
            return this;
        }
        @CustomType.Setter
        public Builder enabledCloudwatchLogsExports(List<String> enabledCloudwatchLogsExports) {
            this.enabledCloudwatchLogsExports = Objects.requireNonNull(enabledCloudwatchLogsExports);
            return this;
        }
        public Builder enabledCloudwatchLogsExports(String... enabledCloudwatchLogsExports) {
            return enabledCloudwatchLogsExports(List.of(enabledCloudwatchLogsExports));
        }
        @CustomType.Setter
        public Builder endpoint(String endpoint) {
            this.endpoint = Objects.requireNonNull(endpoint);
            return this;
        }
        @CustomType.Setter
        public Builder engine(String engine) {
            this.engine = Objects.requireNonNull(engine);
            return this;
        }
        @CustomType.Setter
        public Builder engineVersion(String engineVersion) {
            this.engineVersion = Objects.requireNonNull(engineVersion);
            return this;
        }
        @CustomType.Setter
        public Builder hostedZoneId(String hostedZoneId) {
            this.hostedZoneId = Objects.requireNonNull(hostedZoneId);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder iops(Integer iops) {
            this.iops = Objects.requireNonNull(iops);
            return this;
        }
        @CustomType.Setter
        public Builder kmsKeyId(String kmsKeyId) {
            this.kmsKeyId = Objects.requireNonNull(kmsKeyId);
            return this;
        }
        @CustomType.Setter
        public Builder licenseModel(String licenseModel) {
            this.licenseModel = Objects.requireNonNull(licenseModel);
            return this;
        }
        @CustomType.Setter
        public Builder masterUsername(String masterUsername) {
            this.masterUsername = Objects.requireNonNull(masterUsername);
            return this;
        }
        @CustomType.Setter
        public Builder monitoringInterval(Integer monitoringInterval) {
            this.monitoringInterval = Objects.requireNonNull(monitoringInterval);
            return this;
        }
        @CustomType.Setter
        public Builder monitoringRoleArn(String monitoringRoleArn) {
            this.monitoringRoleArn = Objects.requireNonNull(monitoringRoleArn);
            return this;
        }
        @CustomType.Setter
        public Builder multiAz(Boolean multiAz) {
            this.multiAz = Objects.requireNonNull(multiAz);
            return this;
        }
        @CustomType.Setter
        public Builder networkType(String networkType) {
            this.networkType = Objects.requireNonNull(networkType);
            return this;
        }
        @CustomType.Setter
        public Builder optionGroupMemberships(List<String> optionGroupMemberships) {
            this.optionGroupMemberships = Objects.requireNonNull(optionGroupMemberships);
            return this;
        }
        public Builder optionGroupMemberships(String... optionGroupMemberships) {
            return optionGroupMemberships(List.of(optionGroupMemberships));
        }
        @CustomType.Setter
        public Builder port(Integer port) {
            this.port = Objects.requireNonNull(port);
            return this;
        }
        @CustomType.Setter
        public Builder preferredBackupWindow(String preferredBackupWindow) {
            this.preferredBackupWindow = Objects.requireNonNull(preferredBackupWindow);
            return this;
        }
        @CustomType.Setter
        public Builder preferredMaintenanceWindow(String preferredMaintenanceWindow) {
            this.preferredMaintenanceWindow = Objects.requireNonNull(preferredMaintenanceWindow);
            return this;
        }
        @CustomType.Setter
        public Builder publiclyAccessible(Boolean publiclyAccessible) {
            this.publiclyAccessible = Objects.requireNonNull(publiclyAccessible);
            return this;
        }
        @CustomType.Setter
        public Builder replicateSourceDb(String replicateSourceDb) {
            this.replicateSourceDb = Objects.requireNonNull(replicateSourceDb);
            return this;
        }
        @CustomType.Setter
        public Builder resourceId(String resourceId) {
            this.resourceId = Objects.requireNonNull(resourceId);
            return this;
        }
        @CustomType.Setter
        public Builder storageEncrypted(Boolean storageEncrypted) {
            this.storageEncrypted = Objects.requireNonNull(storageEncrypted);
            return this;
        }
        @CustomType.Setter
        public Builder storageThroughput(Integer storageThroughput) {
            this.storageThroughput = Objects.requireNonNull(storageThroughput);
            return this;
        }
        @CustomType.Setter
        public Builder storageType(String storageType) {
            this.storageType = Objects.requireNonNull(storageType);
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        @CustomType.Setter
        public Builder timezone(String timezone) {
            this.timezone = Objects.requireNonNull(timezone);
            return this;
        }
        @CustomType.Setter
        public Builder vpcSecurityGroups(List<String> vpcSecurityGroups) {
            this.vpcSecurityGroups = Objects.requireNonNull(vpcSecurityGroups);
            return this;
        }
        public Builder vpcSecurityGroups(String... vpcSecurityGroups) {
            return vpcSecurityGroups(List.of(vpcSecurityGroups));
        }
        public GetInstanceResult build() {
            final var o = new GetInstanceResult();
            o.address = address;
            o.allocatedStorage = allocatedStorage;
            o.autoMinorVersionUpgrade = autoMinorVersionUpgrade;
            o.availabilityZone = availabilityZone;
            o.backupRetentionPeriod = backupRetentionPeriod;
            o.caCertIdentifier = caCertIdentifier;
            o.dbClusterIdentifier = dbClusterIdentifier;
            o.dbInstanceArn = dbInstanceArn;
            o.dbInstanceClass = dbInstanceClass;
            o.dbInstanceIdentifier = dbInstanceIdentifier;
            o.dbInstancePort = dbInstancePort;
            o.dbName = dbName;
            o.dbParameterGroups = dbParameterGroups;
            o.dbSecurityGroups = dbSecurityGroups;
            o.dbSubnetGroup = dbSubnetGroup;
            o.enabledCloudwatchLogsExports = enabledCloudwatchLogsExports;
            o.endpoint = endpoint;
            o.engine = engine;
            o.engineVersion = engineVersion;
            o.hostedZoneId = hostedZoneId;
            o.id = id;
            o.iops = iops;
            o.kmsKeyId = kmsKeyId;
            o.licenseModel = licenseModel;
            o.masterUsername = masterUsername;
            o.monitoringInterval = monitoringInterval;
            o.monitoringRoleArn = monitoringRoleArn;
            o.multiAz = multiAz;
            o.networkType = networkType;
            o.optionGroupMemberships = optionGroupMemberships;
            o.port = port;
            o.preferredBackupWindow = preferredBackupWindow;
            o.preferredMaintenanceWindow = preferredMaintenanceWindow;
            o.publiclyAccessible = publiclyAccessible;
            o.replicateSourceDb = replicateSourceDb;
            o.resourceId = resourceId;
            o.storageEncrypted = storageEncrypted;
            o.storageThroughput = storageThroughput;
            o.storageType = storageType;
            o.tags = tags;
            o.timezone = timezone;
            o.vpcSecurityGroups = vpcSecurityGroups;
            return o;
        }
    }
}
