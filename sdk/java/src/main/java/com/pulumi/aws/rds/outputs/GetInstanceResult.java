// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.rds.outputs;

import com.pulumi.aws.rds.outputs.GetInstanceMasterUserSecret;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetInstanceResult {
    /**
     * @return Hostname of the RDS instance. See also `endpoint` and `port`.
     * 
     */
    private @Nullable String address;
    /**
     * @return Allocated storage size specified in gigabytes.
     * 
     */
    private @Nullable Integer allocatedStorage;
    /**
     * @return Indicates that minor version patches are applied automatically.
     * 
     */
    private @Nullable Boolean autoMinorVersionUpgrade;
    /**
     * @return Name of the Availability Zone the DB instance is located in.
     * 
     */
    private @Nullable String availabilityZone;
    /**
     * @return Specifies the number of days for which automatic DB snapshots are retained.
     * 
     */
    private @Nullable Integer backupRetentionPeriod;
    /**
     * @return Identifier of the CA certificate for the DB instance.
     * 
     */
    private @Nullable String caCertIdentifier;
    /**
     * @return If the DB instance is a member of a DB cluster, contains the name of the DB cluster that the DB instance is a member of.
     * 
     */
    private @Nullable String dbClusterIdentifier;
    /**
     * @return ARN for the DB instance.
     * 
     */
    private @Nullable String dbInstanceArn;
    /**
     * @return Contains the name of the compute and memory capacity class of the DB instance.
     * 
     */
    private @Nullable String dbInstanceClass;
    private @Nullable String dbInstanceIdentifier;
    /**
     * @return Port that the DB instance listens on.
     * 
     */
    private @Nullable Integer dbInstancePort;
    /**
     * @return Contains the name of the initial database of this instance that was provided at create time, if one was specified when the DB instance was created. This same name is returned for the life of the DB instance.
     * 
     */
    private @Nullable String dbName;
    /**
     * @return Provides the list of DB parameter groups applied to this DB instance.
     * 
     */
    private @Nullable List<String> dbParameterGroups;
    /**
     * @return Name of the subnet group associated with the DB instance.
     * 
     */
    private @Nullable String dbSubnetGroup;
    /**
     * @return List of log types to export to cloudwatch.
     * 
     */
    private @Nullable List<String> enabledCloudwatchLogsExports;
    /**
     * @return Connection endpoint in `address:port` format.
     * 
     */
    private @Nullable String endpoint;
    /**
     * @return Provides the name of the database engine to be used for this DB instance.
     * 
     */
    private @Nullable String engine;
    /**
     * @return Database engine version.
     * 
     */
    private @Nullable String engineVersion;
    /**
     * @return Canonical hosted zone ID of the DB instance (to be used in a Route 53 Alias record).
     * 
     */
    private @Nullable String hostedZoneId;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private @Nullable String id;
    /**
     * @return Provisioned IOPS (I/O operations per second) value.
     * 
     */
    private @Nullable Integer iops;
    /**
     * @return The Amazon Web Services KMS key identifier that is used to encrypt the secret.
     * 
     */
    private @Nullable String kmsKeyId;
    /**
     * @return License model information for this DB instance.
     * 
     */
    private @Nullable String licenseModel;
    /**
     * @return Provides the master user secret. Only available when `manage_master_user_password` is set to true. Documented below.
     * 
     */
    private @Nullable List<GetInstanceMasterUserSecret> masterUserSecrets;
    /**
     * @return Contains the master username for the DB instance.
     * 
     */
    private @Nullable String masterUsername;
    /**
     * @return The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.
     * 
     */
    private @Nullable Integer maxAllocatedStorage;
    /**
     * @return Interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance.
     * 
     */
    private @Nullable Integer monitoringInterval;
    /**
     * @return ARN for the IAM role that permits RDS to send Enhanced Monitoring metrics to CloudWatch Logs.
     * 
     */
    private @Nullable String monitoringRoleArn;
    /**
     * @return If the DB instance is a Multi-AZ deployment.
     * 
     */
    private @Nullable Boolean multiAz;
    /**
     * @return Network type of the DB instance.
     * 
     */
    private @Nullable String networkType;
    /**
     * @return Provides the list of option group memberships for this DB instance.
     * 
     */
    private @Nullable List<String> optionGroupMemberships;
    /**
     * @return Database endpoint port, primarily used by an Aurora DB cluster. For a conventional RDS DB instance, the `db_instance_port` is typically the preferred choice.
     * 
     */
    private @Nullable Integer port;
    /**
     * @return Specifies the daily time range during which automated backups are created.
     * 
     */
    private @Nullable String preferredBackupWindow;
    /**
     * @return Specifies the weekly time range during which system maintenance can occur in UTC.
     * 
     */
    private @Nullable String preferredMaintenanceWindow;
    /**
     * @return Accessibility options for the DB instance.
     * 
     */
    private @Nullable Boolean publiclyAccessible;
    /**
     * @return Identifier of the source DB that this is a replica of.
     * 
     */
    private @Nullable String replicateSourceDb;
    /**
     * @return RDS Resource ID of this instance.
     * 
     */
    private @Nullable String resourceId;
    /**
     * @return Whether the DB instance is encrypted.
     * 
     */
    private @Nullable Boolean storageEncrypted;
    /**
     * @return Storage throughput value for the DB instance.
     * 
     */
    private @Nullable Integer storageThroughput;
    /**
     * @return Storage type associated with DB instance.
     * 
     */
    private @Nullable String storageType;
    private @Nullable Map<String,String> tags;
    /**
     * @return Time zone of the DB instance.
     * 
     */
    private @Nullable String timezone;
    /**
     * @return Provides a list of VPC security group elements that the DB instance belongs to.
     * 
     */
    private @Nullable List<String> vpcSecurityGroups;

    private GetInstanceResult() {}
    /**
     * @return Hostname of the RDS instance. See also `endpoint` and `port`.
     * 
     */
    public Optional<String> address() {
        return Optional.ofNullable(this.address);
    }
    /**
     * @return Allocated storage size specified in gigabytes.
     * 
     */
    public Optional<Integer> allocatedStorage() {
        return Optional.ofNullable(this.allocatedStorage);
    }
    /**
     * @return Indicates that minor version patches are applied automatically.
     * 
     */
    public Optional<Boolean> autoMinorVersionUpgrade() {
        return Optional.ofNullable(this.autoMinorVersionUpgrade);
    }
    /**
     * @return Name of the Availability Zone the DB instance is located in.
     * 
     */
    public Optional<String> availabilityZone() {
        return Optional.ofNullable(this.availabilityZone);
    }
    /**
     * @return Specifies the number of days for which automatic DB snapshots are retained.
     * 
     */
    public Optional<Integer> backupRetentionPeriod() {
        return Optional.ofNullable(this.backupRetentionPeriod);
    }
    /**
     * @return Identifier of the CA certificate for the DB instance.
     * 
     */
    public Optional<String> caCertIdentifier() {
        return Optional.ofNullable(this.caCertIdentifier);
    }
    /**
     * @return If the DB instance is a member of a DB cluster, contains the name of the DB cluster that the DB instance is a member of.
     * 
     */
    public Optional<String> dbClusterIdentifier() {
        return Optional.ofNullable(this.dbClusterIdentifier);
    }
    /**
     * @return ARN for the DB instance.
     * 
     */
    public Optional<String> dbInstanceArn() {
        return Optional.ofNullable(this.dbInstanceArn);
    }
    /**
     * @return Contains the name of the compute and memory capacity class of the DB instance.
     * 
     */
    public Optional<String> dbInstanceClass() {
        return Optional.ofNullable(this.dbInstanceClass);
    }
    public Optional<String> dbInstanceIdentifier() {
        return Optional.ofNullable(this.dbInstanceIdentifier);
    }
    /**
     * @return Port that the DB instance listens on.
     * 
     */
    public Optional<Integer> dbInstancePort() {
        return Optional.ofNullable(this.dbInstancePort);
    }
    /**
     * @return Contains the name of the initial database of this instance that was provided at create time, if one was specified when the DB instance was created. This same name is returned for the life of the DB instance.
     * 
     */
    public Optional<String> dbName() {
        return Optional.ofNullable(this.dbName);
    }
    /**
     * @return Provides the list of DB parameter groups applied to this DB instance.
     * 
     */
    public List<String> dbParameterGroups() {
        return this.dbParameterGroups == null ? List.of() : this.dbParameterGroups;
    }
    /**
     * @return Name of the subnet group associated with the DB instance.
     * 
     */
    public Optional<String> dbSubnetGroup() {
        return Optional.ofNullable(this.dbSubnetGroup);
    }
    /**
     * @return List of log types to export to cloudwatch.
     * 
     */
    public List<String> enabledCloudwatchLogsExports() {
        return this.enabledCloudwatchLogsExports == null ? List.of() : this.enabledCloudwatchLogsExports;
    }
    /**
     * @return Connection endpoint in `address:port` format.
     * 
     */
    public Optional<String> endpoint() {
        return Optional.ofNullable(this.endpoint);
    }
    /**
     * @return Provides the name of the database engine to be used for this DB instance.
     * 
     */
    public Optional<String> engine() {
        return Optional.ofNullable(this.engine);
    }
    /**
     * @return Database engine version.
     * 
     */
    public Optional<String> engineVersion() {
        return Optional.ofNullable(this.engineVersion);
    }
    /**
     * @return Canonical hosted zone ID of the DB instance (to be used in a Route 53 Alias record).
     * 
     */
    public Optional<String> hostedZoneId() {
        return Optional.ofNullable(this.hostedZoneId);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Provisioned IOPS (I/O operations per second) value.
     * 
     */
    public Optional<Integer> iops() {
        return Optional.ofNullable(this.iops);
    }
    /**
     * @return The Amazon Web Services KMS key identifier that is used to encrypt the secret.
     * 
     */
    public Optional<String> kmsKeyId() {
        return Optional.ofNullable(this.kmsKeyId);
    }
    /**
     * @return License model information for this DB instance.
     * 
     */
    public Optional<String> licenseModel() {
        return Optional.ofNullable(this.licenseModel);
    }
    /**
     * @return Provides the master user secret. Only available when `manage_master_user_password` is set to true. Documented below.
     * 
     */
    public List<GetInstanceMasterUserSecret> masterUserSecrets() {
        return this.masterUserSecrets == null ? List.of() : this.masterUserSecrets;
    }
    /**
     * @return Contains the master username for the DB instance.
     * 
     */
    public Optional<String> masterUsername() {
        return Optional.ofNullable(this.masterUsername);
    }
    /**
     * @return The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.
     * 
     */
    public Optional<Integer> maxAllocatedStorage() {
        return Optional.ofNullable(this.maxAllocatedStorage);
    }
    /**
     * @return Interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance.
     * 
     */
    public Optional<Integer> monitoringInterval() {
        return Optional.ofNullable(this.monitoringInterval);
    }
    /**
     * @return ARN for the IAM role that permits RDS to send Enhanced Monitoring metrics to CloudWatch Logs.
     * 
     */
    public Optional<String> monitoringRoleArn() {
        return Optional.ofNullable(this.monitoringRoleArn);
    }
    /**
     * @return If the DB instance is a Multi-AZ deployment.
     * 
     */
    public Optional<Boolean> multiAz() {
        return Optional.ofNullable(this.multiAz);
    }
    /**
     * @return Network type of the DB instance.
     * 
     */
    public Optional<String> networkType() {
        return Optional.ofNullable(this.networkType);
    }
    /**
     * @return Provides the list of option group memberships for this DB instance.
     * 
     */
    public List<String> optionGroupMemberships() {
        return this.optionGroupMemberships == null ? List.of() : this.optionGroupMemberships;
    }
    /**
     * @return Database endpoint port, primarily used by an Aurora DB cluster. For a conventional RDS DB instance, the `db_instance_port` is typically the preferred choice.
     * 
     */
    public Optional<Integer> port() {
        return Optional.ofNullable(this.port);
    }
    /**
     * @return Specifies the daily time range during which automated backups are created.
     * 
     */
    public Optional<String> preferredBackupWindow() {
        return Optional.ofNullable(this.preferredBackupWindow);
    }
    /**
     * @return Specifies the weekly time range during which system maintenance can occur in UTC.
     * 
     */
    public Optional<String> preferredMaintenanceWindow() {
        return Optional.ofNullable(this.preferredMaintenanceWindow);
    }
    /**
     * @return Accessibility options for the DB instance.
     * 
     */
    public Optional<Boolean> publiclyAccessible() {
        return Optional.ofNullable(this.publiclyAccessible);
    }
    /**
     * @return Identifier of the source DB that this is a replica of.
     * 
     */
    public Optional<String> replicateSourceDb() {
        return Optional.ofNullable(this.replicateSourceDb);
    }
    /**
     * @return RDS Resource ID of this instance.
     * 
     */
    public Optional<String> resourceId() {
        return Optional.ofNullable(this.resourceId);
    }
    /**
     * @return Whether the DB instance is encrypted.
     * 
     */
    public Optional<Boolean> storageEncrypted() {
        return Optional.ofNullable(this.storageEncrypted);
    }
    /**
     * @return Storage throughput value for the DB instance.
     * 
     */
    public Optional<Integer> storageThroughput() {
        return Optional.ofNullable(this.storageThroughput);
    }
    /**
     * @return Storage type associated with DB instance.
     * 
     */
    public Optional<String> storageType() {
        return Optional.ofNullable(this.storageType);
    }
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * @return Time zone of the DB instance.
     * 
     */
    public Optional<String> timezone() {
        return Optional.ofNullable(this.timezone);
    }
    /**
     * @return Provides a list of VPC security group elements that the DB instance belongs to.
     * 
     */
    public List<String> vpcSecurityGroups() {
        return this.vpcSecurityGroups == null ? List.of() : this.vpcSecurityGroups;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInstanceResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String address;
        private @Nullable Integer allocatedStorage;
        private @Nullable Boolean autoMinorVersionUpgrade;
        private @Nullable String availabilityZone;
        private @Nullable Integer backupRetentionPeriod;
        private @Nullable String caCertIdentifier;
        private @Nullable String dbClusterIdentifier;
        private @Nullable String dbInstanceArn;
        private @Nullable String dbInstanceClass;
        private @Nullable String dbInstanceIdentifier;
        private @Nullable Integer dbInstancePort;
        private @Nullable String dbName;
        private @Nullable List<String> dbParameterGroups;
        private @Nullable String dbSubnetGroup;
        private @Nullable List<String> enabledCloudwatchLogsExports;
        private @Nullable String endpoint;
        private @Nullable String engine;
        private @Nullable String engineVersion;
        private @Nullable String hostedZoneId;
        private @Nullable String id;
        private @Nullable Integer iops;
        private @Nullable String kmsKeyId;
        private @Nullable String licenseModel;
        private @Nullable List<GetInstanceMasterUserSecret> masterUserSecrets;
        private @Nullable String masterUsername;
        private @Nullable Integer maxAllocatedStorage;
        private @Nullable Integer monitoringInterval;
        private @Nullable String monitoringRoleArn;
        private @Nullable Boolean multiAz;
        private @Nullable String networkType;
        private @Nullable List<String> optionGroupMemberships;
        private @Nullable Integer port;
        private @Nullable String preferredBackupWindow;
        private @Nullable String preferredMaintenanceWindow;
        private @Nullable Boolean publiclyAccessible;
        private @Nullable String replicateSourceDb;
        private @Nullable String resourceId;
        private @Nullable Boolean storageEncrypted;
        private @Nullable Integer storageThroughput;
        private @Nullable String storageType;
        private @Nullable Map<String,String> tags;
        private @Nullable String timezone;
        private @Nullable List<String> vpcSecurityGroups;
        public Builder() {}
        public Builder(GetInstanceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.address = defaults.address;
    	      this.allocatedStorage = defaults.allocatedStorage;
    	      this.autoMinorVersionUpgrade = defaults.autoMinorVersionUpgrade;
    	      this.availabilityZone = defaults.availabilityZone;
    	      this.backupRetentionPeriod = defaults.backupRetentionPeriod;
    	      this.caCertIdentifier = defaults.caCertIdentifier;
    	      this.dbClusterIdentifier = defaults.dbClusterIdentifier;
    	      this.dbInstanceArn = defaults.dbInstanceArn;
    	      this.dbInstanceClass = defaults.dbInstanceClass;
    	      this.dbInstanceIdentifier = defaults.dbInstanceIdentifier;
    	      this.dbInstancePort = defaults.dbInstancePort;
    	      this.dbName = defaults.dbName;
    	      this.dbParameterGroups = defaults.dbParameterGroups;
    	      this.dbSubnetGroup = defaults.dbSubnetGroup;
    	      this.enabledCloudwatchLogsExports = defaults.enabledCloudwatchLogsExports;
    	      this.endpoint = defaults.endpoint;
    	      this.engine = defaults.engine;
    	      this.engineVersion = defaults.engineVersion;
    	      this.hostedZoneId = defaults.hostedZoneId;
    	      this.id = defaults.id;
    	      this.iops = defaults.iops;
    	      this.kmsKeyId = defaults.kmsKeyId;
    	      this.licenseModel = defaults.licenseModel;
    	      this.masterUserSecrets = defaults.masterUserSecrets;
    	      this.masterUsername = defaults.masterUsername;
    	      this.maxAllocatedStorage = defaults.maxAllocatedStorage;
    	      this.monitoringInterval = defaults.monitoringInterval;
    	      this.monitoringRoleArn = defaults.monitoringRoleArn;
    	      this.multiAz = defaults.multiAz;
    	      this.networkType = defaults.networkType;
    	      this.optionGroupMemberships = defaults.optionGroupMemberships;
    	      this.port = defaults.port;
    	      this.preferredBackupWindow = defaults.preferredBackupWindow;
    	      this.preferredMaintenanceWindow = defaults.preferredMaintenanceWindow;
    	      this.publiclyAccessible = defaults.publiclyAccessible;
    	      this.replicateSourceDb = defaults.replicateSourceDb;
    	      this.resourceId = defaults.resourceId;
    	      this.storageEncrypted = defaults.storageEncrypted;
    	      this.storageThroughput = defaults.storageThroughput;
    	      this.storageType = defaults.storageType;
    	      this.tags = defaults.tags;
    	      this.timezone = defaults.timezone;
    	      this.vpcSecurityGroups = defaults.vpcSecurityGroups;
        }

        @CustomType.Setter
        public Builder address(@Nullable String address) {
            this.address = address;
            return this;
        }
        @CustomType.Setter
        public Builder allocatedStorage(@Nullable Integer allocatedStorage) {
            this.allocatedStorage = allocatedStorage;
            return this;
        }
        @CustomType.Setter
        public Builder autoMinorVersionUpgrade(@Nullable Boolean autoMinorVersionUpgrade) {
            this.autoMinorVersionUpgrade = autoMinorVersionUpgrade;
            return this;
        }
        @CustomType.Setter
        public Builder availabilityZone(@Nullable String availabilityZone) {
            this.availabilityZone = availabilityZone;
            return this;
        }
        @CustomType.Setter
        public Builder backupRetentionPeriod(@Nullable Integer backupRetentionPeriod) {
            this.backupRetentionPeriod = backupRetentionPeriod;
            return this;
        }
        @CustomType.Setter
        public Builder caCertIdentifier(@Nullable String caCertIdentifier) {
            this.caCertIdentifier = caCertIdentifier;
            return this;
        }
        @CustomType.Setter
        public Builder dbClusterIdentifier(@Nullable String dbClusterIdentifier) {
            this.dbClusterIdentifier = dbClusterIdentifier;
            return this;
        }
        @CustomType.Setter
        public Builder dbInstanceArn(@Nullable String dbInstanceArn) {
            this.dbInstanceArn = dbInstanceArn;
            return this;
        }
        @CustomType.Setter
        public Builder dbInstanceClass(@Nullable String dbInstanceClass) {
            this.dbInstanceClass = dbInstanceClass;
            return this;
        }
        @CustomType.Setter
        public Builder dbInstanceIdentifier(@Nullable String dbInstanceIdentifier) {
            this.dbInstanceIdentifier = dbInstanceIdentifier;
            return this;
        }
        @CustomType.Setter
        public Builder dbInstancePort(@Nullable Integer dbInstancePort) {
            this.dbInstancePort = dbInstancePort;
            return this;
        }
        @CustomType.Setter
        public Builder dbName(@Nullable String dbName) {
            this.dbName = dbName;
            return this;
        }
        @CustomType.Setter
        public Builder dbParameterGroups(@Nullable List<String> dbParameterGroups) {
            this.dbParameterGroups = dbParameterGroups;
            return this;
        }
        public Builder dbParameterGroups(String... dbParameterGroups) {
            return dbParameterGroups(List.of(dbParameterGroups));
        }
        @CustomType.Setter
        public Builder dbSubnetGroup(@Nullable String dbSubnetGroup) {
            this.dbSubnetGroup = dbSubnetGroup;
            return this;
        }
        @CustomType.Setter
        public Builder enabledCloudwatchLogsExports(@Nullable List<String> enabledCloudwatchLogsExports) {
            this.enabledCloudwatchLogsExports = enabledCloudwatchLogsExports;
            return this;
        }
        public Builder enabledCloudwatchLogsExports(String... enabledCloudwatchLogsExports) {
            return enabledCloudwatchLogsExports(List.of(enabledCloudwatchLogsExports));
        }
        @CustomType.Setter
        public Builder endpoint(@Nullable String endpoint) {
            this.endpoint = endpoint;
            return this;
        }
        @CustomType.Setter
        public Builder engine(@Nullable String engine) {
            this.engine = engine;
            return this;
        }
        @CustomType.Setter
        public Builder engineVersion(@Nullable String engineVersion) {
            this.engineVersion = engineVersion;
            return this;
        }
        @CustomType.Setter
        public Builder hostedZoneId(@Nullable String hostedZoneId) {
            this.hostedZoneId = hostedZoneId;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder iops(@Nullable Integer iops) {
            this.iops = iops;
            return this;
        }
        @CustomType.Setter
        public Builder kmsKeyId(@Nullable String kmsKeyId) {
            this.kmsKeyId = kmsKeyId;
            return this;
        }
        @CustomType.Setter
        public Builder licenseModel(@Nullable String licenseModel) {
            this.licenseModel = licenseModel;
            return this;
        }
        @CustomType.Setter
        public Builder masterUserSecrets(@Nullable List<GetInstanceMasterUserSecret> masterUserSecrets) {
            this.masterUserSecrets = masterUserSecrets;
            return this;
        }
        public Builder masterUserSecrets(GetInstanceMasterUserSecret... masterUserSecrets) {
            return masterUserSecrets(List.of(masterUserSecrets));
        }
        @CustomType.Setter
        public Builder masterUsername(@Nullable String masterUsername) {
            this.masterUsername = masterUsername;
            return this;
        }
        @CustomType.Setter
        public Builder maxAllocatedStorage(@Nullable Integer maxAllocatedStorage) {
            this.maxAllocatedStorage = maxAllocatedStorage;
            return this;
        }
        @CustomType.Setter
        public Builder monitoringInterval(@Nullable Integer monitoringInterval) {
            this.monitoringInterval = monitoringInterval;
            return this;
        }
        @CustomType.Setter
        public Builder monitoringRoleArn(@Nullable String monitoringRoleArn) {
            this.monitoringRoleArn = monitoringRoleArn;
            return this;
        }
        @CustomType.Setter
        public Builder multiAz(@Nullable Boolean multiAz) {
            this.multiAz = multiAz;
            return this;
        }
        @CustomType.Setter
        public Builder networkType(@Nullable String networkType) {
            this.networkType = networkType;
            return this;
        }
        @CustomType.Setter
        public Builder optionGroupMemberships(@Nullable List<String> optionGroupMemberships) {
            this.optionGroupMemberships = optionGroupMemberships;
            return this;
        }
        public Builder optionGroupMemberships(String... optionGroupMemberships) {
            return optionGroupMemberships(List.of(optionGroupMemberships));
        }
        @CustomType.Setter
        public Builder port(@Nullable Integer port) {
            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder preferredBackupWindow(@Nullable String preferredBackupWindow) {
            this.preferredBackupWindow = preferredBackupWindow;
            return this;
        }
        @CustomType.Setter
        public Builder preferredMaintenanceWindow(@Nullable String preferredMaintenanceWindow) {
            this.preferredMaintenanceWindow = preferredMaintenanceWindow;
            return this;
        }
        @CustomType.Setter
        public Builder publiclyAccessible(@Nullable Boolean publiclyAccessible) {
            this.publiclyAccessible = publiclyAccessible;
            return this;
        }
        @CustomType.Setter
        public Builder replicateSourceDb(@Nullable String replicateSourceDb) {
            this.replicateSourceDb = replicateSourceDb;
            return this;
        }
        @CustomType.Setter
        public Builder resourceId(@Nullable String resourceId) {
            this.resourceId = resourceId;
            return this;
        }
        @CustomType.Setter
        public Builder storageEncrypted(@Nullable Boolean storageEncrypted) {
            this.storageEncrypted = storageEncrypted;
            return this;
        }
        @CustomType.Setter
        public Builder storageThroughput(@Nullable Integer storageThroughput) {
            this.storageThroughput = storageThroughput;
            return this;
        }
        @CustomType.Setter
        public Builder storageType(@Nullable String storageType) {
            this.storageType = storageType;
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder timezone(@Nullable String timezone) {
            this.timezone = timezone;
            return this;
        }
        @CustomType.Setter
        public Builder vpcSecurityGroups(@Nullable List<String> vpcSecurityGroups) {
            this.vpcSecurityGroups = vpcSecurityGroups;
            return this;
        }
        public Builder vpcSecurityGroups(String... vpcSecurityGroups) {
            return vpcSecurityGroups(List.of(vpcSecurityGroups));
        }
        public GetInstanceResult build() {
            final var o = new GetInstanceResult();
            o.address = address;
            o.allocatedStorage = allocatedStorage;
            o.autoMinorVersionUpgrade = autoMinorVersionUpgrade;
            o.availabilityZone = availabilityZone;
            o.backupRetentionPeriod = backupRetentionPeriod;
            o.caCertIdentifier = caCertIdentifier;
            o.dbClusterIdentifier = dbClusterIdentifier;
            o.dbInstanceArn = dbInstanceArn;
            o.dbInstanceClass = dbInstanceClass;
            o.dbInstanceIdentifier = dbInstanceIdentifier;
            o.dbInstancePort = dbInstancePort;
            o.dbName = dbName;
            o.dbParameterGroups = dbParameterGroups;
            o.dbSubnetGroup = dbSubnetGroup;
            o.enabledCloudwatchLogsExports = enabledCloudwatchLogsExports;
            o.endpoint = endpoint;
            o.engine = engine;
            o.engineVersion = engineVersion;
            o.hostedZoneId = hostedZoneId;
            o.id = id;
            o.iops = iops;
            o.kmsKeyId = kmsKeyId;
            o.licenseModel = licenseModel;
            o.masterUserSecrets = masterUserSecrets;
            o.masterUsername = masterUsername;
            o.maxAllocatedStorage = maxAllocatedStorage;
            o.monitoringInterval = monitoringInterval;
            o.monitoringRoleArn = monitoringRoleArn;
            o.multiAz = multiAz;
            o.networkType = networkType;
            o.optionGroupMemberships = optionGroupMemberships;
            o.port = port;
            o.preferredBackupWindow = preferredBackupWindow;
            o.preferredMaintenanceWindow = preferredMaintenanceWindow;
            o.publiclyAccessible = publiclyAccessible;
            o.replicateSourceDb = replicateSourceDb;
            o.resourceId = resourceId;
            o.storageEncrypted = storageEncrypted;
            o.storageThroughput = storageThroughput;
            o.storageType = storageType;
            o.tags = tags;
            o.timezone = timezone;
            o.vpcSecurityGroups = vpcSecurityGroups;
            return o;
        }
    }
}
