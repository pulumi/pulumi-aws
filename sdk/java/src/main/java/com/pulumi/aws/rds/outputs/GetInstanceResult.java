// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.rds.outputs;

import com.pulumi.aws.rds.outputs.GetInstanceMasterUserSecret;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetInstanceResult {
    /**
     * @return Hostname of the RDS instance. See also `endpoint` and `port`.
     * 
     */
    private String address;
    /**
     * @return Allocated storage size specified in gigabytes.
     * 
     */
    private Integer allocatedStorage;
    /**
     * @return Indicates that minor version patches are applied automatically.
     * 
     */
    private Boolean autoMinorVersionUpgrade;
    /**
     * @return Name of the Availability Zone the DB instance is located in.
     * 
     */
    private String availabilityZone;
    /**
     * @return Specifies the number of days for which automatic DB snapshots are retained.
     * 
     */
    private Integer backupRetentionPeriod;
    /**
     * @return Identifier of the CA certificate for the DB instance.
     * 
     */
    private String caCertIdentifier;
    /**
     * @return If the DB instance is a member of a DB cluster, contains the name of the DB cluster that the DB instance is a member of.
     * 
     */
    private String dbClusterIdentifier;
    /**
     * @return ARN for the DB instance.
     * 
     */
    private String dbInstanceArn;
    /**
     * @return Contains the name of the compute and memory capacity class of the DB instance.
     * 
     */
    private String dbInstanceClass;
    private String dbInstanceIdentifier;
    /**
     * @return Port that the DB instance listens on.
     * 
     */
    private Integer dbInstancePort;
    /**
     * @return Contains the name of the initial database of this instance that was provided at create time, if one was specified when the DB instance was created. This same name is returned for the life of the DB instance.
     * 
     */
    private String dbName;
    /**
     * @return Provides the list of DB parameter groups applied to this DB instance.
     * 
     */
    private List<String> dbParameterGroups;
    /**
     * @return Name of the subnet group associated with the DB instance.
     * 
     */
    private String dbSubnetGroup;
    /**
     * @return List of log types to export to cloudwatch.
     * 
     */
    private List<String> enabledCloudwatchLogsExports;
    /**
     * @return Connection endpoint in `address:port` format.
     * 
     */
    private String endpoint;
    /**
     * @return Provides the name of the database engine to be used for this DB instance.
     * 
     */
    private String engine;
    /**
     * @return Database engine version.
     * 
     */
    private String engineVersion;
    /**
     * @return Canonical hosted zone ID of the DB instance (to be used in a Route 53 Alias record).
     * 
     */
    private String hostedZoneId;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Provisioned IOPS (I/O operations per second) value.
     * 
     */
    private Integer iops;
    /**
     * @return The Amazon Web Services KMS key identifier that is used to encrypt the secret.
     * 
     */
    private String kmsKeyId;
    /**
     * @return License model information for this DB instance.
     * 
     */
    private String licenseModel;
    /**
     * @return Provides the master user secret. Only available when `manage_master_user_password` is set to true. Documented below.
     * 
     */
    private List<GetInstanceMasterUserSecret> masterUserSecrets;
    /**
     * @return Contains the master username for the DB instance.
     * 
     */
    private String masterUsername;
    /**
     * @return Interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance.
     * 
     */
    private Integer monitoringInterval;
    /**
     * @return ARN for the IAM role that permits RDS to send Enhanced Monitoring metrics to CloudWatch Logs.
     * 
     */
    private String monitoringRoleArn;
    /**
     * @return If the DB instance is a Multi-AZ deployment.
     * 
     */
    private Boolean multiAz;
    /**
     * @return Network type of the DB instance.
     * 
     */
    private String networkType;
    /**
     * @return Provides the list of option group memberships for this DB instance.
     * 
     */
    private List<String> optionGroupMemberships;
    /**
     * @return Database port.
     * 
     */
    private Integer port;
    /**
     * @return Specifies the daily time range during which automated backups are created.
     * 
     */
    private String preferredBackupWindow;
    /**
     * @return Specifies the weekly time range during which system maintenance can occur in UTC.
     * 
     */
    private String preferredMaintenanceWindow;
    /**
     * @return Accessibility options for the DB instance.
     * 
     */
    private Boolean publiclyAccessible;
    /**
     * @return Identifier of the source DB that this is a replica of.
     * 
     */
    private String replicateSourceDb;
    /**
     * @return RDS Resource ID of this instance.
     * 
     */
    private String resourceId;
    /**
     * @return Whether the DB instance is encrypted.
     * 
     */
    private Boolean storageEncrypted;
    /**
     * @return Storage throughput value for the DB instance.
     * 
     */
    private Integer storageThroughput;
    /**
     * @return Storage type associated with DB instance.
     * 
     */
    private String storageType;
    private Map<String,String> tags;
    /**
     * @return Time zone of the DB instance.
     * 
     */
    private String timezone;
    /**
     * @return Provides a list of VPC security group elements that the DB instance belongs to.
     * 
     */
    private List<String> vpcSecurityGroups;

    private GetInstanceResult() {}
    /**
     * @return Hostname of the RDS instance. See also `endpoint` and `port`.
     * 
     */
    public String address() {
        return this.address;
    }
    /**
     * @return Allocated storage size specified in gigabytes.
     * 
     */
    public Integer allocatedStorage() {
        return this.allocatedStorage;
    }
    /**
     * @return Indicates that minor version patches are applied automatically.
     * 
     */
    public Boolean autoMinorVersionUpgrade() {
        return this.autoMinorVersionUpgrade;
    }
    /**
     * @return Name of the Availability Zone the DB instance is located in.
     * 
     */
    public String availabilityZone() {
        return this.availabilityZone;
    }
    /**
     * @return Specifies the number of days for which automatic DB snapshots are retained.
     * 
     */
    public Integer backupRetentionPeriod() {
        return this.backupRetentionPeriod;
    }
    /**
     * @return Identifier of the CA certificate for the DB instance.
     * 
     */
    public String caCertIdentifier() {
        return this.caCertIdentifier;
    }
    /**
     * @return If the DB instance is a member of a DB cluster, contains the name of the DB cluster that the DB instance is a member of.
     * 
     */
    public String dbClusterIdentifier() {
        return this.dbClusterIdentifier;
    }
    /**
     * @return ARN for the DB instance.
     * 
     */
    public String dbInstanceArn() {
        return this.dbInstanceArn;
    }
    /**
     * @return Contains the name of the compute and memory capacity class of the DB instance.
     * 
     */
    public String dbInstanceClass() {
        return this.dbInstanceClass;
    }
    public String dbInstanceIdentifier() {
        return this.dbInstanceIdentifier;
    }
    /**
     * @return Port that the DB instance listens on.
     * 
     */
    public Integer dbInstancePort() {
        return this.dbInstancePort;
    }
    /**
     * @return Contains the name of the initial database of this instance that was provided at create time, if one was specified when the DB instance was created. This same name is returned for the life of the DB instance.
     * 
     */
    public String dbName() {
        return this.dbName;
    }
    /**
     * @return Provides the list of DB parameter groups applied to this DB instance.
     * 
     */
    public List<String> dbParameterGroups() {
        return this.dbParameterGroups;
    }
    /**
     * @return Name of the subnet group associated with the DB instance.
     * 
     */
    public String dbSubnetGroup() {
        return this.dbSubnetGroup;
    }
    /**
     * @return List of log types to export to cloudwatch.
     * 
     */
    public List<String> enabledCloudwatchLogsExports() {
        return this.enabledCloudwatchLogsExports;
    }
    /**
     * @return Connection endpoint in `address:port` format.
     * 
     */
    public String endpoint() {
        return this.endpoint;
    }
    /**
     * @return Provides the name of the database engine to be used for this DB instance.
     * 
     */
    public String engine() {
        return this.engine;
    }
    /**
     * @return Database engine version.
     * 
     */
    public String engineVersion() {
        return this.engineVersion;
    }
    /**
     * @return Canonical hosted zone ID of the DB instance (to be used in a Route 53 Alias record).
     * 
     */
    public String hostedZoneId() {
        return this.hostedZoneId;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Provisioned IOPS (I/O operations per second) value.
     * 
     */
    public Integer iops() {
        return this.iops;
    }
    /**
     * @return The Amazon Web Services KMS key identifier that is used to encrypt the secret.
     * 
     */
    public String kmsKeyId() {
        return this.kmsKeyId;
    }
    /**
     * @return License model information for this DB instance.
     * 
     */
    public String licenseModel() {
        return this.licenseModel;
    }
    /**
     * @return Provides the master user secret. Only available when `manage_master_user_password` is set to true. Documented below.
     * 
     */
    public List<GetInstanceMasterUserSecret> masterUserSecrets() {
        return this.masterUserSecrets;
    }
    /**
     * @return Contains the master username for the DB instance.
     * 
     */
    public String masterUsername() {
        return this.masterUsername;
    }
    /**
     * @return Interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance.
     * 
     */
    public Integer monitoringInterval() {
        return this.monitoringInterval;
    }
    /**
     * @return ARN for the IAM role that permits RDS to send Enhanced Monitoring metrics to CloudWatch Logs.
     * 
     */
    public String monitoringRoleArn() {
        return this.monitoringRoleArn;
    }
    /**
     * @return If the DB instance is a Multi-AZ deployment.
     * 
     */
    public Boolean multiAz() {
        return this.multiAz;
    }
    /**
     * @return Network type of the DB instance.
     * 
     */
    public String networkType() {
        return this.networkType;
    }
    /**
     * @return Provides the list of option group memberships for this DB instance.
     * 
     */
    public List<String> optionGroupMemberships() {
        return this.optionGroupMemberships;
    }
    /**
     * @return Database port.
     * 
     */
    public Integer port() {
        return this.port;
    }
    /**
     * @return Specifies the daily time range during which automated backups are created.
     * 
     */
    public String preferredBackupWindow() {
        return this.preferredBackupWindow;
    }
    /**
     * @return Specifies the weekly time range during which system maintenance can occur in UTC.
     * 
     */
    public String preferredMaintenanceWindow() {
        return this.preferredMaintenanceWindow;
    }
    /**
     * @return Accessibility options for the DB instance.
     * 
     */
    public Boolean publiclyAccessible() {
        return this.publiclyAccessible;
    }
    /**
     * @return Identifier of the source DB that this is a replica of.
     * 
     */
    public String replicateSourceDb() {
        return this.replicateSourceDb;
    }
    /**
     * @return RDS Resource ID of this instance.
     * 
     */
    public String resourceId() {
        return this.resourceId;
    }
    /**
     * @return Whether the DB instance is encrypted.
     * 
     */
    public Boolean storageEncrypted() {
        return this.storageEncrypted;
    }
    /**
     * @return Storage throughput value for the DB instance.
     * 
     */
    public Integer storageThroughput() {
        return this.storageThroughput;
    }
    /**
     * @return Storage type associated with DB instance.
     * 
     */
    public String storageType() {
        return this.storageType;
    }
    public Map<String,String> tags() {
        return this.tags;
    }
    /**
     * @return Time zone of the DB instance.
     * 
     */
    public String timezone() {
        return this.timezone;
    }
    /**
     * @return Provides a list of VPC security group elements that the DB instance belongs to.
     * 
     */
    public List<String> vpcSecurityGroups() {
        return this.vpcSecurityGroups;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInstanceResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String address;
        private Integer allocatedStorage;
        private Boolean autoMinorVersionUpgrade;
        private String availabilityZone;
        private Integer backupRetentionPeriod;
        private String caCertIdentifier;
        private String dbClusterIdentifier;
        private String dbInstanceArn;
        private String dbInstanceClass;
        private String dbInstanceIdentifier;
        private Integer dbInstancePort;
        private String dbName;
        private List<String> dbParameterGroups;
        private String dbSubnetGroup;
        private List<String> enabledCloudwatchLogsExports;
        private String endpoint;
        private String engine;
        private String engineVersion;
        private String hostedZoneId;
        private String id;
        private Integer iops;
        private String kmsKeyId;
        private String licenseModel;
        private List<GetInstanceMasterUserSecret> masterUserSecrets;
        private String masterUsername;
        private Integer monitoringInterval;
        private String monitoringRoleArn;
        private Boolean multiAz;
        private String networkType;
        private List<String> optionGroupMemberships;
        private Integer port;
        private String preferredBackupWindow;
        private String preferredMaintenanceWindow;
        private Boolean publiclyAccessible;
        private String replicateSourceDb;
        private String resourceId;
        private Boolean storageEncrypted;
        private Integer storageThroughput;
        private String storageType;
        private Map<String,String> tags;
        private String timezone;
        private List<String> vpcSecurityGroups;
        public Builder() {}
        public Builder(GetInstanceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.address = defaults.address;
    	      this.allocatedStorage = defaults.allocatedStorage;
    	      this.autoMinorVersionUpgrade = defaults.autoMinorVersionUpgrade;
    	      this.availabilityZone = defaults.availabilityZone;
    	      this.backupRetentionPeriod = defaults.backupRetentionPeriod;
    	      this.caCertIdentifier = defaults.caCertIdentifier;
    	      this.dbClusterIdentifier = defaults.dbClusterIdentifier;
    	      this.dbInstanceArn = defaults.dbInstanceArn;
    	      this.dbInstanceClass = defaults.dbInstanceClass;
    	      this.dbInstanceIdentifier = defaults.dbInstanceIdentifier;
    	      this.dbInstancePort = defaults.dbInstancePort;
    	      this.dbName = defaults.dbName;
    	      this.dbParameterGroups = defaults.dbParameterGroups;
    	      this.dbSubnetGroup = defaults.dbSubnetGroup;
    	      this.enabledCloudwatchLogsExports = defaults.enabledCloudwatchLogsExports;
    	      this.endpoint = defaults.endpoint;
    	      this.engine = defaults.engine;
    	      this.engineVersion = defaults.engineVersion;
    	      this.hostedZoneId = defaults.hostedZoneId;
    	      this.id = defaults.id;
    	      this.iops = defaults.iops;
    	      this.kmsKeyId = defaults.kmsKeyId;
    	      this.licenseModel = defaults.licenseModel;
    	      this.masterUserSecrets = defaults.masterUserSecrets;
    	      this.masterUsername = defaults.masterUsername;
    	      this.monitoringInterval = defaults.monitoringInterval;
    	      this.monitoringRoleArn = defaults.monitoringRoleArn;
    	      this.multiAz = defaults.multiAz;
    	      this.networkType = defaults.networkType;
    	      this.optionGroupMemberships = defaults.optionGroupMemberships;
    	      this.port = defaults.port;
    	      this.preferredBackupWindow = defaults.preferredBackupWindow;
    	      this.preferredMaintenanceWindow = defaults.preferredMaintenanceWindow;
    	      this.publiclyAccessible = defaults.publiclyAccessible;
    	      this.replicateSourceDb = defaults.replicateSourceDb;
    	      this.resourceId = defaults.resourceId;
    	      this.storageEncrypted = defaults.storageEncrypted;
    	      this.storageThroughput = defaults.storageThroughput;
    	      this.storageType = defaults.storageType;
    	      this.tags = defaults.tags;
    	      this.timezone = defaults.timezone;
    	      this.vpcSecurityGroups = defaults.vpcSecurityGroups;
        }

        @CustomType.Setter
        public Builder address(String address) {
            this.address = Objects.requireNonNull(address);
            return this;
        }
        @CustomType.Setter
        public Builder allocatedStorage(Integer allocatedStorage) {
            this.allocatedStorage = Objects.requireNonNull(allocatedStorage);
            return this;
        }
        @CustomType.Setter
        public Builder autoMinorVersionUpgrade(Boolean autoMinorVersionUpgrade) {
            this.autoMinorVersionUpgrade = Objects.requireNonNull(autoMinorVersionUpgrade);
            return this;
        }
        @CustomType.Setter
        public Builder availabilityZone(String availabilityZone) {
            this.availabilityZone = Objects.requireNonNull(availabilityZone);
            return this;
        }
        @CustomType.Setter
        public Builder backupRetentionPeriod(Integer backupRetentionPeriod) {
            this.backupRetentionPeriod = Objects.requireNonNull(backupRetentionPeriod);
            return this;
        }
        @CustomType.Setter
        public Builder caCertIdentifier(String caCertIdentifier) {
            this.caCertIdentifier = Objects.requireNonNull(caCertIdentifier);
            return this;
        }
        @CustomType.Setter
        public Builder dbClusterIdentifier(String dbClusterIdentifier) {
            this.dbClusterIdentifier = Objects.requireNonNull(dbClusterIdentifier);
            return this;
        }
        @CustomType.Setter
        public Builder dbInstanceArn(String dbInstanceArn) {
            this.dbInstanceArn = Objects.requireNonNull(dbInstanceArn);
            return this;
        }
        @CustomType.Setter
        public Builder dbInstanceClass(String dbInstanceClass) {
            this.dbInstanceClass = Objects.requireNonNull(dbInstanceClass);
            return this;
        }
        @CustomType.Setter
        public Builder dbInstanceIdentifier(String dbInstanceIdentifier) {
            this.dbInstanceIdentifier = Objects.requireNonNull(dbInstanceIdentifier);
            return this;
        }
        @CustomType.Setter
        public Builder dbInstancePort(Integer dbInstancePort) {
            this.dbInstancePort = Objects.requireNonNull(dbInstancePort);
            return this;
        }
        @CustomType.Setter
        public Builder dbName(String dbName) {
            this.dbName = Objects.requireNonNull(dbName);
            return this;
        }
        @CustomType.Setter
        public Builder dbParameterGroups(List<String> dbParameterGroups) {
            this.dbParameterGroups = Objects.requireNonNull(dbParameterGroups);
            return this;
        }
        public Builder dbParameterGroups(String... dbParameterGroups) {
            return dbParameterGroups(List.of(dbParameterGroups));
        }
        @CustomType.Setter
        public Builder dbSubnetGroup(String dbSubnetGroup) {
            this.dbSubnetGroup = Objects.requireNonNull(dbSubnetGroup);
            return this;
        }
        @CustomType.Setter
        public Builder enabledCloudwatchLogsExports(List<String> enabledCloudwatchLogsExports) {
            this.enabledCloudwatchLogsExports = Objects.requireNonNull(enabledCloudwatchLogsExports);
            return this;
        }
        public Builder enabledCloudwatchLogsExports(String... enabledCloudwatchLogsExports) {
            return enabledCloudwatchLogsExports(List.of(enabledCloudwatchLogsExports));
        }
        @CustomType.Setter
        public Builder endpoint(String endpoint) {
            this.endpoint = Objects.requireNonNull(endpoint);
            return this;
        }
        @CustomType.Setter
        public Builder engine(String engine) {
            this.engine = Objects.requireNonNull(engine);
            return this;
        }
        @CustomType.Setter
        public Builder engineVersion(String engineVersion) {
            this.engineVersion = Objects.requireNonNull(engineVersion);
            return this;
        }
        @CustomType.Setter
        public Builder hostedZoneId(String hostedZoneId) {
            this.hostedZoneId = Objects.requireNonNull(hostedZoneId);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder iops(Integer iops) {
            this.iops = Objects.requireNonNull(iops);
            return this;
        }
        @CustomType.Setter
        public Builder kmsKeyId(String kmsKeyId) {
            this.kmsKeyId = Objects.requireNonNull(kmsKeyId);
            return this;
        }
        @CustomType.Setter
        public Builder licenseModel(String licenseModel) {
            this.licenseModel = Objects.requireNonNull(licenseModel);
            return this;
        }
        @CustomType.Setter
        public Builder masterUserSecrets(List<GetInstanceMasterUserSecret> masterUserSecrets) {
            this.masterUserSecrets = Objects.requireNonNull(masterUserSecrets);
            return this;
        }
        public Builder masterUserSecrets(GetInstanceMasterUserSecret... masterUserSecrets) {
            return masterUserSecrets(List.of(masterUserSecrets));
        }
        @CustomType.Setter
        public Builder masterUsername(String masterUsername) {
            this.masterUsername = Objects.requireNonNull(masterUsername);
            return this;
        }
        @CustomType.Setter
        public Builder monitoringInterval(Integer monitoringInterval) {
            this.monitoringInterval = Objects.requireNonNull(monitoringInterval);
            return this;
        }
        @CustomType.Setter
        public Builder monitoringRoleArn(String monitoringRoleArn) {
            this.monitoringRoleArn = Objects.requireNonNull(monitoringRoleArn);
            return this;
        }
        @CustomType.Setter
        public Builder multiAz(Boolean multiAz) {
            this.multiAz = Objects.requireNonNull(multiAz);
            return this;
        }
        @CustomType.Setter
        public Builder networkType(String networkType) {
            this.networkType = Objects.requireNonNull(networkType);
            return this;
        }
        @CustomType.Setter
        public Builder optionGroupMemberships(List<String> optionGroupMemberships) {
            this.optionGroupMemberships = Objects.requireNonNull(optionGroupMemberships);
            return this;
        }
        public Builder optionGroupMemberships(String... optionGroupMemberships) {
            return optionGroupMemberships(List.of(optionGroupMemberships));
        }
        @CustomType.Setter
        public Builder port(Integer port) {
            this.port = Objects.requireNonNull(port);
            return this;
        }
        @CustomType.Setter
        public Builder preferredBackupWindow(String preferredBackupWindow) {
            this.preferredBackupWindow = Objects.requireNonNull(preferredBackupWindow);
            return this;
        }
        @CustomType.Setter
        public Builder preferredMaintenanceWindow(String preferredMaintenanceWindow) {
            this.preferredMaintenanceWindow = Objects.requireNonNull(preferredMaintenanceWindow);
            return this;
        }
        @CustomType.Setter
        public Builder publiclyAccessible(Boolean publiclyAccessible) {
            this.publiclyAccessible = Objects.requireNonNull(publiclyAccessible);
            return this;
        }
        @CustomType.Setter
        public Builder replicateSourceDb(String replicateSourceDb) {
            this.replicateSourceDb = Objects.requireNonNull(replicateSourceDb);
            return this;
        }
        @CustomType.Setter
        public Builder resourceId(String resourceId) {
            this.resourceId = Objects.requireNonNull(resourceId);
            return this;
        }
        @CustomType.Setter
        public Builder storageEncrypted(Boolean storageEncrypted) {
            this.storageEncrypted = Objects.requireNonNull(storageEncrypted);
            return this;
        }
        @CustomType.Setter
        public Builder storageThroughput(Integer storageThroughput) {
            this.storageThroughput = Objects.requireNonNull(storageThroughput);
            return this;
        }
        @CustomType.Setter
        public Builder storageType(String storageType) {
            this.storageType = Objects.requireNonNull(storageType);
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        @CustomType.Setter
        public Builder timezone(String timezone) {
            this.timezone = Objects.requireNonNull(timezone);
            return this;
        }
        @CustomType.Setter
        public Builder vpcSecurityGroups(List<String> vpcSecurityGroups) {
            this.vpcSecurityGroups = Objects.requireNonNull(vpcSecurityGroups);
            return this;
        }
        public Builder vpcSecurityGroups(String... vpcSecurityGroups) {
            return vpcSecurityGroups(List.of(vpcSecurityGroups));
        }
        public GetInstanceResult build() {
            final var o = new GetInstanceResult();
            o.address = address;
            o.allocatedStorage = allocatedStorage;
            o.autoMinorVersionUpgrade = autoMinorVersionUpgrade;
            o.availabilityZone = availabilityZone;
            o.backupRetentionPeriod = backupRetentionPeriod;
            o.caCertIdentifier = caCertIdentifier;
            o.dbClusterIdentifier = dbClusterIdentifier;
            o.dbInstanceArn = dbInstanceArn;
            o.dbInstanceClass = dbInstanceClass;
            o.dbInstanceIdentifier = dbInstanceIdentifier;
            o.dbInstancePort = dbInstancePort;
            o.dbName = dbName;
            o.dbParameterGroups = dbParameterGroups;
            o.dbSubnetGroup = dbSubnetGroup;
            o.enabledCloudwatchLogsExports = enabledCloudwatchLogsExports;
            o.endpoint = endpoint;
            o.engine = engine;
            o.engineVersion = engineVersion;
            o.hostedZoneId = hostedZoneId;
            o.id = id;
            o.iops = iops;
            o.kmsKeyId = kmsKeyId;
            o.licenseModel = licenseModel;
            o.masterUserSecrets = masterUserSecrets;
            o.masterUsername = masterUsername;
            o.monitoringInterval = monitoringInterval;
            o.monitoringRoleArn = monitoringRoleArn;
            o.multiAz = multiAz;
            o.networkType = networkType;
            o.optionGroupMemberships = optionGroupMemberships;
            o.port = port;
            o.preferredBackupWindow = preferredBackupWindow;
            o.preferredMaintenanceWindow = preferredMaintenanceWindow;
            o.publiclyAccessible = publiclyAccessible;
            o.replicateSourceDb = replicateSourceDb;
            o.resourceId = resourceId;
            o.storageEncrypted = storageEncrypted;
            o.storageThroughput = storageThroughput;
            o.storageType = storageType;
            o.tags = tags;
            o.timezone = timezone;
            o.vpcSecurityGroups = vpcSecurityGroups;
            return o;
        }
    }
}
