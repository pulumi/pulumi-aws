// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VisualsTableVisualChartConfigurationTableOptionsRowAlternateColorOptionsArgs extends com.pulumi.resources.ResourceArgs {

    public static final VisualsTableVisualChartConfigurationTableOptionsRowAlternateColorOptionsArgs Empty = new VisualsTableVisualChartConfigurationTableOptionsRowAlternateColorOptionsArgs();

    @Import(name="rowAlternateColors")
    private @Nullable Output<String> rowAlternateColors;

    public Optional<Output<String>> rowAlternateColors() {
        return Optional.ofNullable(this.rowAlternateColors);
    }

    /**
     * The dashboard creation status.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The dashboard creation status.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private VisualsTableVisualChartConfigurationTableOptionsRowAlternateColorOptionsArgs() {}

    private VisualsTableVisualChartConfigurationTableOptionsRowAlternateColorOptionsArgs(VisualsTableVisualChartConfigurationTableOptionsRowAlternateColorOptionsArgs $) {
        this.rowAlternateColors = $.rowAlternateColors;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VisualsTableVisualChartConfigurationTableOptionsRowAlternateColorOptionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VisualsTableVisualChartConfigurationTableOptionsRowAlternateColorOptionsArgs $;

        public Builder() {
            $ = new VisualsTableVisualChartConfigurationTableOptionsRowAlternateColorOptionsArgs();
        }

        public Builder(VisualsTableVisualChartConfigurationTableOptionsRowAlternateColorOptionsArgs defaults) {
            $ = new VisualsTableVisualChartConfigurationTableOptionsRowAlternateColorOptionsArgs(Objects.requireNonNull(defaults));
        }

        public Builder rowAlternateColors(@Nullable Output<String> rowAlternateColors) {
            $.rowAlternateColors = rowAlternateColors;
            return this;
        }

        public Builder rowAlternateColors(String rowAlternateColors) {
            return rowAlternateColors(Output.of(rowAlternateColors));
        }

        /**
         * @param status The dashboard creation status.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The dashboard creation status.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public VisualsTableVisualChartConfigurationTableOptionsRowAlternateColorOptionsArgs build() {
            return $;
        }
    }

}
