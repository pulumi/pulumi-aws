// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.computeoptimizer.inputs;

import com.pulumi.aws.computeoptimizer.inputs.RecommendationPreferencesExternalMetricsPreferenceArgs;
import com.pulumi.aws.computeoptimizer.inputs.RecommendationPreferencesPreferredResourceArgs;
import com.pulumi.aws.computeoptimizer.inputs.RecommendationPreferencesScopeArgs;
import com.pulumi.aws.computeoptimizer.inputs.RecommendationPreferencesUtilizationPreferenceArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RecommendationPreferencesState extends com.pulumi.resources.ResourceArgs {

    public static final RecommendationPreferencesState Empty = new RecommendationPreferencesState();

    /**
     * The status of the enhanced infrastructure metrics recommendation preference. Valid values: `Active`, `Inactive`.
     * 
     */
    @Import(name="enhancedInfrastructureMetrics")
    private @Nullable Output<String> enhancedInfrastructureMetrics;

    /**
     * @return The status of the enhanced infrastructure metrics recommendation preference. Valid values: `Active`, `Inactive`.
     * 
     */
    public Optional<Output<String>> enhancedInfrastructureMetrics() {
        return Optional.ofNullable(this.enhancedInfrastructureMetrics);
    }

    /**
     * The provider of the external metrics recommendation preference. See External Metrics Preference below.
     * 
     */
    @Import(name="externalMetricsPreference")
    private @Nullable Output<RecommendationPreferencesExternalMetricsPreferenceArgs> externalMetricsPreference;

    /**
     * @return The provider of the external metrics recommendation preference. See External Metrics Preference below.
     * 
     */
    public Optional<Output<RecommendationPreferencesExternalMetricsPreferenceArgs>> externalMetricsPreference() {
        return Optional.ofNullable(this.externalMetricsPreference);
    }

    /**
     * The status of the inferred workload types recommendation preference. Valid values: `Active`, `Inactive`.
     * 
     */
    @Import(name="inferredWorkloadTypes")
    private @Nullable Output<String> inferredWorkloadTypes;

    /**
     * @return The status of the inferred workload types recommendation preference. Valid values: `Active`, `Inactive`.
     * 
     */
    public Optional<Output<String>> inferredWorkloadTypes() {
        return Optional.ofNullable(this.inferredWorkloadTypes);
    }

    /**
     * The preference to control the number of days the utilization metrics of the AWS resource are analyzed. Valid values: `DAYS_14`, `DAYS_32`, `DAYS_93`.
     * 
     */
    @Import(name="lookBackPeriod")
    private @Nullable Output<String> lookBackPeriod;

    /**
     * @return The preference to control the number of days the utilization metrics of the AWS resource are analyzed. Valid values: `DAYS_14`, `DAYS_32`, `DAYS_93`.
     * 
     */
    public Optional<Output<String>> lookBackPeriod() {
        return Optional.ofNullable(this.lookBackPeriod);
    }

    /**
     * The preference to control which resource type values are considered when generating rightsizing recommendations. See Preferred Resources below.
     * 
     */
    @Import(name="preferredResources")
    private @Nullable Output<List<RecommendationPreferencesPreferredResourceArgs>> preferredResources;

    /**
     * @return The preference to control which resource type values are considered when generating rightsizing recommendations. See Preferred Resources below.
     * 
     */
    public Optional<Output<List<RecommendationPreferencesPreferredResourceArgs>>> preferredResources() {
        return Optional.ofNullable(this.preferredResources);
    }

    /**
     * The target resource type of the recommendation preferences. Valid values: `Ec2Instance`, `AutoScalingGroup`, `RdsDBInstance`.
     * 
     */
    @Import(name="resourceType")
    private @Nullable Output<String> resourceType;

    /**
     * @return The target resource type of the recommendation preferences. Valid values: `Ec2Instance`, `AutoScalingGroup`, `RdsDBInstance`.
     * 
     */
    public Optional<Output<String>> resourceType() {
        return Optional.ofNullable(this.resourceType);
    }

    /**
     * The status of the savings estimation mode preference. Valid values: `AfterDiscounts`, `BeforeDiscounts`.
     * 
     */
    @Import(name="savingsEstimationMode")
    private @Nullable Output<String> savingsEstimationMode;

    /**
     * @return The status of the savings estimation mode preference. Valid values: `AfterDiscounts`, `BeforeDiscounts`.
     * 
     */
    public Optional<Output<String>> savingsEstimationMode() {
        return Optional.ofNullable(this.savingsEstimationMode);
    }

    /**
     * The scope of the recommendation preferences. See Scope below.
     * 
     */
    @Import(name="scope")
    private @Nullable Output<RecommendationPreferencesScopeArgs> scope;

    /**
     * @return The scope of the recommendation preferences. See Scope below.
     * 
     */
    public Optional<Output<RecommendationPreferencesScopeArgs>> scope() {
        return Optional.ofNullable(this.scope);
    }

    /**
     * The preference to control the resource’s CPU utilization threshold, CPU utilization headroom, and memory utilization headroom. See Utilization Preferences below.
     * 
     */
    @Import(name="utilizationPreferences")
    private @Nullable Output<List<RecommendationPreferencesUtilizationPreferenceArgs>> utilizationPreferences;

    /**
     * @return The preference to control the resource’s CPU utilization threshold, CPU utilization headroom, and memory utilization headroom. See Utilization Preferences below.
     * 
     */
    public Optional<Output<List<RecommendationPreferencesUtilizationPreferenceArgs>>> utilizationPreferences() {
        return Optional.ofNullable(this.utilizationPreferences);
    }

    private RecommendationPreferencesState() {}

    private RecommendationPreferencesState(RecommendationPreferencesState $) {
        this.enhancedInfrastructureMetrics = $.enhancedInfrastructureMetrics;
        this.externalMetricsPreference = $.externalMetricsPreference;
        this.inferredWorkloadTypes = $.inferredWorkloadTypes;
        this.lookBackPeriod = $.lookBackPeriod;
        this.preferredResources = $.preferredResources;
        this.resourceType = $.resourceType;
        this.savingsEstimationMode = $.savingsEstimationMode;
        this.scope = $.scope;
        this.utilizationPreferences = $.utilizationPreferences;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RecommendationPreferencesState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RecommendationPreferencesState $;

        public Builder() {
            $ = new RecommendationPreferencesState();
        }

        public Builder(RecommendationPreferencesState defaults) {
            $ = new RecommendationPreferencesState(Objects.requireNonNull(defaults));
        }

        /**
         * @param enhancedInfrastructureMetrics The status of the enhanced infrastructure metrics recommendation preference. Valid values: `Active`, `Inactive`.
         * 
         * @return builder
         * 
         */
        public Builder enhancedInfrastructureMetrics(@Nullable Output<String> enhancedInfrastructureMetrics) {
            $.enhancedInfrastructureMetrics = enhancedInfrastructureMetrics;
            return this;
        }

        /**
         * @param enhancedInfrastructureMetrics The status of the enhanced infrastructure metrics recommendation preference. Valid values: `Active`, `Inactive`.
         * 
         * @return builder
         * 
         */
        public Builder enhancedInfrastructureMetrics(String enhancedInfrastructureMetrics) {
            return enhancedInfrastructureMetrics(Output.of(enhancedInfrastructureMetrics));
        }

        /**
         * @param externalMetricsPreference The provider of the external metrics recommendation preference. See External Metrics Preference below.
         * 
         * @return builder
         * 
         */
        public Builder externalMetricsPreference(@Nullable Output<RecommendationPreferencesExternalMetricsPreferenceArgs> externalMetricsPreference) {
            $.externalMetricsPreference = externalMetricsPreference;
            return this;
        }

        /**
         * @param externalMetricsPreference The provider of the external metrics recommendation preference. See External Metrics Preference below.
         * 
         * @return builder
         * 
         */
        public Builder externalMetricsPreference(RecommendationPreferencesExternalMetricsPreferenceArgs externalMetricsPreference) {
            return externalMetricsPreference(Output.of(externalMetricsPreference));
        }

        /**
         * @param inferredWorkloadTypes The status of the inferred workload types recommendation preference. Valid values: `Active`, `Inactive`.
         * 
         * @return builder
         * 
         */
        public Builder inferredWorkloadTypes(@Nullable Output<String> inferredWorkloadTypes) {
            $.inferredWorkloadTypes = inferredWorkloadTypes;
            return this;
        }

        /**
         * @param inferredWorkloadTypes The status of the inferred workload types recommendation preference. Valid values: `Active`, `Inactive`.
         * 
         * @return builder
         * 
         */
        public Builder inferredWorkloadTypes(String inferredWorkloadTypes) {
            return inferredWorkloadTypes(Output.of(inferredWorkloadTypes));
        }

        /**
         * @param lookBackPeriod The preference to control the number of days the utilization metrics of the AWS resource are analyzed. Valid values: `DAYS_14`, `DAYS_32`, `DAYS_93`.
         * 
         * @return builder
         * 
         */
        public Builder lookBackPeriod(@Nullable Output<String> lookBackPeriod) {
            $.lookBackPeriod = lookBackPeriod;
            return this;
        }

        /**
         * @param lookBackPeriod The preference to control the number of days the utilization metrics of the AWS resource are analyzed. Valid values: `DAYS_14`, `DAYS_32`, `DAYS_93`.
         * 
         * @return builder
         * 
         */
        public Builder lookBackPeriod(String lookBackPeriod) {
            return lookBackPeriod(Output.of(lookBackPeriod));
        }

        /**
         * @param preferredResources The preference to control which resource type values are considered when generating rightsizing recommendations. See Preferred Resources below.
         * 
         * @return builder
         * 
         */
        public Builder preferredResources(@Nullable Output<List<RecommendationPreferencesPreferredResourceArgs>> preferredResources) {
            $.preferredResources = preferredResources;
            return this;
        }

        /**
         * @param preferredResources The preference to control which resource type values are considered when generating rightsizing recommendations. See Preferred Resources below.
         * 
         * @return builder
         * 
         */
        public Builder preferredResources(List<RecommendationPreferencesPreferredResourceArgs> preferredResources) {
            return preferredResources(Output.of(preferredResources));
        }

        /**
         * @param preferredResources The preference to control which resource type values are considered when generating rightsizing recommendations. See Preferred Resources below.
         * 
         * @return builder
         * 
         */
        public Builder preferredResources(RecommendationPreferencesPreferredResourceArgs... preferredResources) {
            return preferredResources(List.of(preferredResources));
        }

        /**
         * @param resourceType The target resource type of the recommendation preferences. Valid values: `Ec2Instance`, `AutoScalingGroup`, `RdsDBInstance`.
         * 
         * @return builder
         * 
         */
        public Builder resourceType(@Nullable Output<String> resourceType) {
            $.resourceType = resourceType;
            return this;
        }

        /**
         * @param resourceType The target resource type of the recommendation preferences. Valid values: `Ec2Instance`, `AutoScalingGroup`, `RdsDBInstance`.
         * 
         * @return builder
         * 
         */
        public Builder resourceType(String resourceType) {
            return resourceType(Output.of(resourceType));
        }

        /**
         * @param savingsEstimationMode The status of the savings estimation mode preference. Valid values: `AfterDiscounts`, `BeforeDiscounts`.
         * 
         * @return builder
         * 
         */
        public Builder savingsEstimationMode(@Nullable Output<String> savingsEstimationMode) {
            $.savingsEstimationMode = savingsEstimationMode;
            return this;
        }

        /**
         * @param savingsEstimationMode The status of the savings estimation mode preference. Valid values: `AfterDiscounts`, `BeforeDiscounts`.
         * 
         * @return builder
         * 
         */
        public Builder savingsEstimationMode(String savingsEstimationMode) {
            return savingsEstimationMode(Output.of(savingsEstimationMode));
        }

        /**
         * @param scope The scope of the recommendation preferences. See Scope below.
         * 
         * @return builder
         * 
         */
        public Builder scope(@Nullable Output<RecommendationPreferencesScopeArgs> scope) {
            $.scope = scope;
            return this;
        }

        /**
         * @param scope The scope of the recommendation preferences. See Scope below.
         * 
         * @return builder
         * 
         */
        public Builder scope(RecommendationPreferencesScopeArgs scope) {
            return scope(Output.of(scope));
        }

        /**
         * @param utilizationPreferences The preference to control the resource’s CPU utilization threshold, CPU utilization headroom, and memory utilization headroom. See Utilization Preferences below.
         * 
         * @return builder
         * 
         */
        public Builder utilizationPreferences(@Nullable Output<List<RecommendationPreferencesUtilizationPreferenceArgs>> utilizationPreferences) {
            $.utilizationPreferences = utilizationPreferences;
            return this;
        }

        /**
         * @param utilizationPreferences The preference to control the resource’s CPU utilization threshold, CPU utilization headroom, and memory utilization headroom. See Utilization Preferences below.
         * 
         * @return builder
         * 
         */
        public Builder utilizationPreferences(List<RecommendationPreferencesUtilizationPreferenceArgs> utilizationPreferences) {
            return utilizationPreferences(Output.of(utilizationPreferences));
        }

        /**
         * @param utilizationPreferences The preference to control the resource’s CPU utilization threshold, CPU utilization headroom, and memory utilization headroom. See Utilization Preferences below.
         * 
         * @return builder
         * 
         */
        public Builder utilizationPreferences(RecommendationPreferencesUtilizationPreferenceArgs... utilizationPreferences) {
            return utilizationPreferences(List.of(utilizationPreferences));
        }

        public RecommendationPreferencesState build() {
            return $;
        }
    }

}
