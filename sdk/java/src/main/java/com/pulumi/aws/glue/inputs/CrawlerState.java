// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.glue.inputs;

import com.pulumi.aws.glue.inputs.CrawlerCatalogTargetArgs;
import com.pulumi.aws.glue.inputs.CrawlerDeltaTargetArgs;
import com.pulumi.aws.glue.inputs.CrawlerDynamodbTargetArgs;
import com.pulumi.aws.glue.inputs.CrawlerHudiTargetArgs;
import com.pulumi.aws.glue.inputs.CrawlerIcebergTargetArgs;
import com.pulumi.aws.glue.inputs.CrawlerJdbcTargetArgs;
import com.pulumi.aws.glue.inputs.CrawlerLakeFormationConfigurationArgs;
import com.pulumi.aws.glue.inputs.CrawlerLineageConfigurationArgs;
import com.pulumi.aws.glue.inputs.CrawlerMongodbTargetArgs;
import com.pulumi.aws.glue.inputs.CrawlerRecrawlPolicyArgs;
import com.pulumi.aws.glue.inputs.CrawlerS3TargetArgs;
import com.pulumi.aws.glue.inputs.CrawlerSchemaChangePolicyArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CrawlerState extends com.pulumi.resources.ResourceArgs {

    public static final CrawlerState Empty = new CrawlerState();

    /**
     * The ARN of the crawler
     * 
     */
    @Import(name="arn")
    private @Nullable Output<String> arn;

    /**
     * @return The ARN of the crawler
     * 
     */
    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    @Import(name="catalogTargets")
    private @Nullable Output<List<CrawlerCatalogTargetArgs>> catalogTargets;

    public Optional<Output<List<CrawlerCatalogTargetArgs>>> catalogTargets() {
        return Optional.ofNullable(this.catalogTargets);
    }

    /**
     * List of custom classifiers. By default, all AWS classifiers are included in a crawl, but these custom classifiers always override the default classifiers for a given classification.
     * 
     */
    @Import(name="classifiers")
    private @Nullable Output<List<String>> classifiers;

    /**
     * @return List of custom classifiers. By default, all AWS classifiers are included in a crawl, but these custom classifiers always override the default classifiers for a given classification.
     * 
     */
    public Optional<Output<List<String>>> classifiers() {
        return Optional.ofNullable(this.classifiers);
    }

    /**
     * JSON string of configuration information. For more details see [Setting Crawler Configuration Options](https://docs.aws.amazon.com/glue/latest/dg/crawler-configuration.html).
     * 
     */
    @Import(name="configuration")
    private @Nullable Output<String> configuration;

    /**
     * @return JSON string of configuration information. For more details see [Setting Crawler Configuration Options](https://docs.aws.amazon.com/glue/latest/dg/crawler-configuration.html).
     * 
     */
    public Optional<Output<String>> configuration() {
        return Optional.ofNullable(this.configuration);
    }

    /**
     * Glue database where results are written.
     * 
     */
    @Import(name="databaseName")
    private @Nullable Output<String> databaseName;

    /**
     * @return Glue database where results are written.
     * 
     */
    public Optional<Output<String>> databaseName() {
        return Optional.ofNullable(this.databaseName);
    }

    /**
     * List of nested Delta Lake target arguments. See Delta Target below.
     * 
     */
    @Import(name="deltaTargets")
    private @Nullable Output<List<CrawlerDeltaTargetArgs>> deltaTargets;

    /**
     * @return List of nested Delta Lake target arguments. See Delta Target below.
     * 
     */
    public Optional<Output<List<CrawlerDeltaTargetArgs>>> deltaTargets() {
        return Optional.ofNullable(this.deltaTargets);
    }

    /**
     * Description of the crawler.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the crawler.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * List of nested DynamoDB target arguments. See Dynamodb Target below.
     * 
     */
    @Import(name="dynamodbTargets")
    private @Nullable Output<List<CrawlerDynamodbTargetArgs>> dynamodbTargets;

    /**
     * @return List of nested DynamoDB target arguments. See Dynamodb Target below.
     * 
     */
    public Optional<Output<List<CrawlerDynamodbTargetArgs>>> dynamodbTargets() {
        return Optional.ofNullable(this.dynamodbTargets);
    }

    /**
     * List nested Hudi target arguments. See Iceberg Target below.
     * 
     */
    @Import(name="hudiTargets")
    private @Nullable Output<List<CrawlerHudiTargetArgs>> hudiTargets;

    /**
     * @return List nested Hudi target arguments. See Iceberg Target below.
     * 
     */
    public Optional<Output<List<CrawlerHudiTargetArgs>>> hudiTargets() {
        return Optional.ofNullable(this.hudiTargets);
    }

    /**
     * List nested Iceberg target arguments. See Iceberg Target below.
     * 
     */
    @Import(name="icebergTargets")
    private @Nullable Output<List<CrawlerIcebergTargetArgs>> icebergTargets;

    /**
     * @return List nested Iceberg target arguments. See Iceberg Target below.
     * 
     */
    public Optional<Output<List<CrawlerIcebergTargetArgs>>> icebergTargets() {
        return Optional.ofNullable(this.icebergTargets);
    }

    /**
     * List of nested JBDC target arguments. See JDBC Target below.
     * 
     */
    @Import(name="jdbcTargets")
    private @Nullable Output<List<CrawlerJdbcTargetArgs>> jdbcTargets;

    /**
     * @return List of nested JBDC target arguments. See JDBC Target below.
     * 
     */
    public Optional<Output<List<CrawlerJdbcTargetArgs>>> jdbcTargets() {
        return Optional.ofNullable(this.jdbcTargets);
    }

    /**
     * Specifies Lake Formation configuration settings for the crawler. See Lake Formation Configuration below.
     * 
     */
    @Import(name="lakeFormationConfiguration")
    private @Nullable Output<CrawlerLakeFormationConfigurationArgs> lakeFormationConfiguration;

    /**
     * @return Specifies Lake Formation configuration settings for the crawler. See Lake Formation Configuration below.
     * 
     */
    public Optional<Output<CrawlerLakeFormationConfigurationArgs>> lakeFormationConfiguration() {
        return Optional.ofNullable(this.lakeFormationConfiguration);
    }

    /**
     * Specifies data lineage configuration settings for the crawler. See Lineage Configuration below.
     * 
     */
    @Import(name="lineageConfiguration")
    private @Nullable Output<CrawlerLineageConfigurationArgs> lineageConfiguration;

    /**
     * @return Specifies data lineage configuration settings for the crawler. See Lineage Configuration below.
     * 
     */
    public Optional<Output<CrawlerLineageConfigurationArgs>> lineageConfiguration() {
        return Optional.ofNullable(this.lineageConfiguration);
    }

    /**
     * List nested MongoDB target arguments. See MongoDB Target below.
     * 
     */
    @Import(name="mongodbTargets")
    private @Nullable Output<List<CrawlerMongodbTargetArgs>> mongodbTargets;

    /**
     * @return List nested MongoDB target arguments. See MongoDB Target below.
     * 
     */
    public Optional<Output<List<CrawlerMongodbTargetArgs>>> mongodbTargets() {
        return Optional.ofNullable(this.mongodbTargets);
    }

    /**
     * Name of the crawler.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the crawler.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * A policy that specifies whether to crawl the entire dataset again, or to crawl only folders that were added since the last crawler run.. See Recrawl Policy below.
     * 
     */
    @Import(name="recrawlPolicy")
    private @Nullable Output<CrawlerRecrawlPolicyArgs> recrawlPolicy;

    /**
     * @return A policy that specifies whether to crawl the entire dataset again, or to crawl only folders that were added since the last crawler run.. See Recrawl Policy below.
     * 
     */
    public Optional<Output<CrawlerRecrawlPolicyArgs>> recrawlPolicy() {
        return Optional.ofNullable(this.recrawlPolicy);
    }

    /**
     * The IAM role friendly name (including path without leading slash), or ARN of an IAM role, used by the crawler to access other resources.
     * 
     */
    @Import(name="role")
    private @Nullable Output<String> role;

    /**
     * @return The IAM role friendly name (including path without leading slash), or ARN of an IAM role, used by the crawler to access other resources.
     * 
     */
    public Optional<Output<String>> role() {
        return Optional.ofNullable(this.role);
    }

    /**
     * List nested Amazon S3 target arguments. See S3 Target below.
     * 
     */
    @Import(name="s3Targets")
    private @Nullable Output<List<CrawlerS3TargetArgs>> s3Targets;

    /**
     * @return List nested Amazon S3 target arguments. See S3 Target below.
     * 
     */
    public Optional<Output<List<CrawlerS3TargetArgs>>> s3Targets() {
        return Optional.ofNullable(this.s3Targets);
    }

    /**
     * A cron expression used to specify the schedule. For more information, see [Time-Based Schedules for Jobs and Crawlers](https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html). For example, to run something every day at 12:15 UTC, you would specify: `cron(15 12 * * ? *)`.
     * 
     */
    @Import(name="schedule")
    private @Nullable Output<String> schedule;

    /**
     * @return A cron expression used to specify the schedule. For more information, see [Time-Based Schedules for Jobs and Crawlers](https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html). For example, to run something every day at 12:15 UTC, you would specify: `cron(15 12 * * ? *)`.
     * 
     */
    public Optional<Output<String>> schedule() {
        return Optional.ofNullable(this.schedule);
    }

    /**
     * Policy for the crawler&#39;s update and deletion behavior. See Schema Change Policy below.
     * 
     */
    @Import(name="schemaChangePolicy")
    private @Nullable Output<CrawlerSchemaChangePolicyArgs> schemaChangePolicy;

    /**
     * @return Policy for the crawler&#39;s update and deletion behavior. See Schema Change Policy below.
     * 
     */
    public Optional<Output<CrawlerSchemaChangePolicyArgs>> schemaChangePolicy() {
        return Optional.ofNullable(this.schemaChangePolicy);
    }

    /**
     * The name of Security Configuration to be used by the crawler
     * 
     */
    @Import(name="securityConfiguration")
    private @Nullable Output<String> securityConfiguration;

    /**
     * @return The name of Security Configuration to be used by the crawler
     * 
     */
    public Optional<Output<String>> securityConfiguration() {
        return Optional.ofNullable(this.securityConfiguration);
    }

    /**
     * The table prefix used for catalog tables that are created.
     * 
     */
    @Import(name="tablePrefix")
    private @Nullable Output<String> tablePrefix;

    /**
     * @return The table prefix used for catalog tables that are created.
     * 
     */
    public Optional<Output<String>> tablePrefix() {
        return Optional.ofNullable(this.tablePrefix);
    }

    /**
     * Key-value map of resource tags. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Key-value map of resource tags. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     */
    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    /**
     * @return A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     */
    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    private CrawlerState() {}

    private CrawlerState(CrawlerState $) {
        this.arn = $.arn;
        this.catalogTargets = $.catalogTargets;
        this.classifiers = $.classifiers;
        this.configuration = $.configuration;
        this.databaseName = $.databaseName;
        this.deltaTargets = $.deltaTargets;
        this.description = $.description;
        this.dynamodbTargets = $.dynamodbTargets;
        this.hudiTargets = $.hudiTargets;
        this.icebergTargets = $.icebergTargets;
        this.jdbcTargets = $.jdbcTargets;
        this.lakeFormationConfiguration = $.lakeFormationConfiguration;
        this.lineageConfiguration = $.lineageConfiguration;
        this.mongodbTargets = $.mongodbTargets;
        this.name = $.name;
        this.recrawlPolicy = $.recrawlPolicy;
        this.role = $.role;
        this.s3Targets = $.s3Targets;
        this.schedule = $.schedule;
        this.schemaChangePolicy = $.schemaChangePolicy;
        this.securityConfiguration = $.securityConfiguration;
        this.tablePrefix = $.tablePrefix;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CrawlerState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CrawlerState $;

        public Builder() {
            $ = new CrawlerState();
        }

        public Builder(CrawlerState defaults) {
            $ = new CrawlerState(Objects.requireNonNull(defaults));
        }

        /**
         * @param arn The ARN of the crawler
         * 
         * @return builder
         * 
         */
        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        /**
         * @param arn The ARN of the crawler
         * 
         * @return builder
         * 
         */
        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        public Builder catalogTargets(@Nullable Output<List<CrawlerCatalogTargetArgs>> catalogTargets) {
            $.catalogTargets = catalogTargets;
            return this;
        }

        public Builder catalogTargets(List<CrawlerCatalogTargetArgs> catalogTargets) {
            return catalogTargets(Output.of(catalogTargets));
        }

        public Builder catalogTargets(CrawlerCatalogTargetArgs... catalogTargets) {
            return catalogTargets(List.of(catalogTargets));
        }

        /**
         * @param classifiers List of custom classifiers. By default, all AWS classifiers are included in a crawl, but these custom classifiers always override the default classifiers for a given classification.
         * 
         * @return builder
         * 
         */
        public Builder classifiers(@Nullable Output<List<String>> classifiers) {
            $.classifiers = classifiers;
            return this;
        }

        /**
         * @param classifiers List of custom classifiers. By default, all AWS classifiers are included in a crawl, but these custom classifiers always override the default classifiers for a given classification.
         * 
         * @return builder
         * 
         */
        public Builder classifiers(List<String> classifiers) {
            return classifiers(Output.of(classifiers));
        }

        /**
         * @param classifiers List of custom classifiers. By default, all AWS classifiers are included in a crawl, but these custom classifiers always override the default classifiers for a given classification.
         * 
         * @return builder
         * 
         */
        public Builder classifiers(String... classifiers) {
            return classifiers(List.of(classifiers));
        }

        /**
         * @param configuration JSON string of configuration information. For more details see [Setting Crawler Configuration Options](https://docs.aws.amazon.com/glue/latest/dg/crawler-configuration.html).
         * 
         * @return builder
         * 
         */
        public Builder configuration(@Nullable Output<String> configuration) {
            $.configuration = configuration;
            return this;
        }

        /**
         * @param configuration JSON string of configuration information. For more details see [Setting Crawler Configuration Options](https://docs.aws.amazon.com/glue/latest/dg/crawler-configuration.html).
         * 
         * @return builder
         * 
         */
        public Builder configuration(String configuration) {
            return configuration(Output.of(configuration));
        }

        /**
         * @param databaseName Glue database where results are written.
         * 
         * @return builder
         * 
         */
        public Builder databaseName(@Nullable Output<String> databaseName) {
            $.databaseName = databaseName;
            return this;
        }

        /**
         * @param databaseName Glue database where results are written.
         * 
         * @return builder
         * 
         */
        public Builder databaseName(String databaseName) {
            return databaseName(Output.of(databaseName));
        }

        /**
         * @param deltaTargets List of nested Delta Lake target arguments. See Delta Target below.
         * 
         * @return builder
         * 
         */
        public Builder deltaTargets(@Nullable Output<List<CrawlerDeltaTargetArgs>> deltaTargets) {
            $.deltaTargets = deltaTargets;
            return this;
        }

        /**
         * @param deltaTargets List of nested Delta Lake target arguments. See Delta Target below.
         * 
         * @return builder
         * 
         */
        public Builder deltaTargets(List<CrawlerDeltaTargetArgs> deltaTargets) {
            return deltaTargets(Output.of(deltaTargets));
        }

        /**
         * @param deltaTargets List of nested Delta Lake target arguments. See Delta Target below.
         * 
         * @return builder
         * 
         */
        public Builder deltaTargets(CrawlerDeltaTargetArgs... deltaTargets) {
            return deltaTargets(List.of(deltaTargets));
        }

        /**
         * @param description Description of the crawler.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the crawler.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param dynamodbTargets List of nested DynamoDB target arguments. See Dynamodb Target below.
         * 
         * @return builder
         * 
         */
        public Builder dynamodbTargets(@Nullable Output<List<CrawlerDynamodbTargetArgs>> dynamodbTargets) {
            $.dynamodbTargets = dynamodbTargets;
            return this;
        }

        /**
         * @param dynamodbTargets List of nested DynamoDB target arguments. See Dynamodb Target below.
         * 
         * @return builder
         * 
         */
        public Builder dynamodbTargets(List<CrawlerDynamodbTargetArgs> dynamodbTargets) {
            return dynamodbTargets(Output.of(dynamodbTargets));
        }

        /**
         * @param dynamodbTargets List of nested DynamoDB target arguments. See Dynamodb Target below.
         * 
         * @return builder
         * 
         */
        public Builder dynamodbTargets(CrawlerDynamodbTargetArgs... dynamodbTargets) {
            return dynamodbTargets(List.of(dynamodbTargets));
        }

        /**
         * @param hudiTargets List nested Hudi target arguments. See Iceberg Target below.
         * 
         * @return builder
         * 
         */
        public Builder hudiTargets(@Nullable Output<List<CrawlerHudiTargetArgs>> hudiTargets) {
            $.hudiTargets = hudiTargets;
            return this;
        }

        /**
         * @param hudiTargets List nested Hudi target arguments. See Iceberg Target below.
         * 
         * @return builder
         * 
         */
        public Builder hudiTargets(List<CrawlerHudiTargetArgs> hudiTargets) {
            return hudiTargets(Output.of(hudiTargets));
        }

        /**
         * @param hudiTargets List nested Hudi target arguments. See Iceberg Target below.
         * 
         * @return builder
         * 
         */
        public Builder hudiTargets(CrawlerHudiTargetArgs... hudiTargets) {
            return hudiTargets(List.of(hudiTargets));
        }

        /**
         * @param icebergTargets List nested Iceberg target arguments. See Iceberg Target below.
         * 
         * @return builder
         * 
         */
        public Builder icebergTargets(@Nullable Output<List<CrawlerIcebergTargetArgs>> icebergTargets) {
            $.icebergTargets = icebergTargets;
            return this;
        }

        /**
         * @param icebergTargets List nested Iceberg target arguments. See Iceberg Target below.
         * 
         * @return builder
         * 
         */
        public Builder icebergTargets(List<CrawlerIcebergTargetArgs> icebergTargets) {
            return icebergTargets(Output.of(icebergTargets));
        }

        /**
         * @param icebergTargets List nested Iceberg target arguments. See Iceberg Target below.
         * 
         * @return builder
         * 
         */
        public Builder icebergTargets(CrawlerIcebergTargetArgs... icebergTargets) {
            return icebergTargets(List.of(icebergTargets));
        }

        /**
         * @param jdbcTargets List of nested JBDC target arguments. See JDBC Target below.
         * 
         * @return builder
         * 
         */
        public Builder jdbcTargets(@Nullable Output<List<CrawlerJdbcTargetArgs>> jdbcTargets) {
            $.jdbcTargets = jdbcTargets;
            return this;
        }

        /**
         * @param jdbcTargets List of nested JBDC target arguments. See JDBC Target below.
         * 
         * @return builder
         * 
         */
        public Builder jdbcTargets(List<CrawlerJdbcTargetArgs> jdbcTargets) {
            return jdbcTargets(Output.of(jdbcTargets));
        }

        /**
         * @param jdbcTargets List of nested JBDC target arguments. See JDBC Target below.
         * 
         * @return builder
         * 
         */
        public Builder jdbcTargets(CrawlerJdbcTargetArgs... jdbcTargets) {
            return jdbcTargets(List.of(jdbcTargets));
        }

        /**
         * @param lakeFormationConfiguration Specifies Lake Formation configuration settings for the crawler. See Lake Formation Configuration below.
         * 
         * @return builder
         * 
         */
        public Builder lakeFormationConfiguration(@Nullable Output<CrawlerLakeFormationConfigurationArgs> lakeFormationConfiguration) {
            $.lakeFormationConfiguration = lakeFormationConfiguration;
            return this;
        }

        /**
         * @param lakeFormationConfiguration Specifies Lake Formation configuration settings for the crawler. See Lake Formation Configuration below.
         * 
         * @return builder
         * 
         */
        public Builder lakeFormationConfiguration(CrawlerLakeFormationConfigurationArgs lakeFormationConfiguration) {
            return lakeFormationConfiguration(Output.of(lakeFormationConfiguration));
        }

        /**
         * @param lineageConfiguration Specifies data lineage configuration settings for the crawler. See Lineage Configuration below.
         * 
         * @return builder
         * 
         */
        public Builder lineageConfiguration(@Nullable Output<CrawlerLineageConfigurationArgs> lineageConfiguration) {
            $.lineageConfiguration = lineageConfiguration;
            return this;
        }

        /**
         * @param lineageConfiguration Specifies data lineage configuration settings for the crawler. See Lineage Configuration below.
         * 
         * @return builder
         * 
         */
        public Builder lineageConfiguration(CrawlerLineageConfigurationArgs lineageConfiguration) {
            return lineageConfiguration(Output.of(lineageConfiguration));
        }

        /**
         * @param mongodbTargets List nested MongoDB target arguments. See MongoDB Target below.
         * 
         * @return builder
         * 
         */
        public Builder mongodbTargets(@Nullable Output<List<CrawlerMongodbTargetArgs>> mongodbTargets) {
            $.mongodbTargets = mongodbTargets;
            return this;
        }

        /**
         * @param mongodbTargets List nested MongoDB target arguments. See MongoDB Target below.
         * 
         * @return builder
         * 
         */
        public Builder mongodbTargets(List<CrawlerMongodbTargetArgs> mongodbTargets) {
            return mongodbTargets(Output.of(mongodbTargets));
        }

        /**
         * @param mongodbTargets List nested MongoDB target arguments. See MongoDB Target below.
         * 
         * @return builder
         * 
         */
        public Builder mongodbTargets(CrawlerMongodbTargetArgs... mongodbTargets) {
            return mongodbTargets(List.of(mongodbTargets));
        }

        /**
         * @param name Name of the crawler.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the crawler.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param recrawlPolicy A policy that specifies whether to crawl the entire dataset again, or to crawl only folders that were added since the last crawler run.. See Recrawl Policy below.
         * 
         * @return builder
         * 
         */
        public Builder recrawlPolicy(@Nullable Output<CrawlerRecrawlPolicyArgs> recrawlPolicy) {
            $.recrawlPolicy = recrawlPolicy;
            return this;
        }

        /**
         * @param recrawlPolicy A policy that specifies whether to crawl the entire dataset again, or to crawl only folders that were added since the last crawler run.. See Recrawl Policy below.
         * 
         * @return builder
         * 
         */
        public Builder recrawlPolicy(CrawlerRecrawlPolicyArgs recrawlPolicy) {
            return recrawlPolicy(Output.of(recrawlPolicy));
        }

        /**
         * @param role The IAM role friendly name (including path without leading slash), or ARN of an IAM role, used by the crawler to access other resources.
         * 
         * @return builder
         * 
         */
        public Builder role(@Nullable Output<String> role) {
            $.role = role;
            return this;
        }

        /**
         * @param role The IAM role friendly name (including path without leading slash), or ARN of an IAM role, used by the crawler to access other resources.
         * 
         * @return builder
         * 
         */
        public Builder role(String role) {
            return role(Output.of(role));
        }

        /**
         * @param s3Targets List nested Amazon S3 target arguments. See S3 Target below.
         * 
         * @return builder
         * 
         */
        public Builder s3Targets(@Nullable Output<List<CrawlerS3TargetArgs>> s3Targets) {
            $.s3Targets = s3Targets;
            return this;
        }

        /**
         * @param s3Targets List nested Amazon S3 target arguments. See S3 Target below.
         * 
         * @return builder
         * 
         */
        public Builder s3Targets(List<CrawlerS3TargetArgs> s3Targets) {
            return s3Targets(Output.of(s3Targets));
        }

        /**
         * @param s3Targets List nested Amazon S3 target arguments. See S3 Target below.
         * 
         * @return builder
         * 
         */
        public Builder s3Targets(CrawlerS3TargetArgs... s3Targets) {
            return s3Targets(List.of(s3Targets));
        }

        /**
         * @param schedule A cron expression used to specify the schedule. For more information, see [Time-Based Schedules for Jobs and Crawlers](https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html). For example, to run something every day at 12:15 UTC, you would specify: `cron(15 12 * * ? *)`.
         * 
         * @return builder
         * 
         */
        public Builder schedule(@Nullable Output<String> schedule) {
            $.schedule = schedule;
            return this;
        }

        /**
         * @param schedule A cron expression used to specify the schedule. For more information, see [Time-Based Schedules for Jobs and Crawlers](https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html). For example, to run something every day at 12:15 UTC, you would specify: `cron(15 12 * * ? *)`.
         * 
         * @return builder
         * 
         */
        public Builder schedule(String schedule) {
            return schedule(Output.of(schedule));
        }

        /**
         * @param schemaChangePolicy Policy for the crawler&#39;s update and deletion behavior. See Schema Change Policy below.
         * 
         * @return builder
         * 
         */
        public Builder schemaChangePolicy(@Nullable Output<CrawlerSchemaChangePolicyArgs> schemaChangePolicy) {
            $.schemaChangePolicy = schemaChangePolicy;
            return this;
        }

        /**
         * @param schemaChangePolicy Policy for the crawler&#39;s update and deletion behavior. See Schema Change Policy below.
         * 
         * @return builder
         * 
         */
        public Builder schemaChangePolicy(CrawlerSchemaChangePolicyArgs schemaChangePolicy) {
            return schemaChangePolicy(Output.of(schemaChangePolicy));
        }

        /**
         * @param securityConfiguration The name of Security Configuration to be used by the crawler
         * 
         * @return builder
         * 
         */
        public Builder securityConfiguration(@Nullable Output<String> securityConfiguration) {
            $.securityConfiguration = securityConfiguration;
            return this;
        }

        /**
         * @param securityConfiguration The name of Security Configuration to be used by the crawler
         * 
         * @return builder
         * 
         */
        public Builder securityConfiguration(String securityConfiguration) {
            return securityConfiguration(Output.of(securityConfiguration));
        }

        /**
         * @param tablePrefix The table prefix used for catalog tables that are created.
         * 
         * @return builder
         * 
         */
        public Builder tablePrefix(@Nullable Output<String> tablePrefix) {
            $.tablePrefix = tablePrefix;
            return this;
        }

        /**
         * @param tablePrefix The table prefix used for catalog tables that are created.
         * 
         * @return builder
         * 
         */
        public Builder tablePrefix(String tablePrefix) {
            return tablePrefix(Output.of(tablePrefix));
        }

        /**
         * @param tags Key-value map of resource tags. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Key-value map of resource tags. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tagsAll A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
         * 
         * @return builder
         * 
         */
        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        /**
         * @param tagsAll A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
         * 
         * @return builder
         * 
         */
        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        public CrawlerState build() {
            return $;
        }
    }

}
