// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ecrpublic.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetAuthorizationTokenResult {
    /**
     * @return Temporary IAM authentication credentials to access the ECR repository encoded in base64 in the form of `user_name:password`.
     * 
     */
    private @Nullable String authorizationToken;
    /**
     * @return Time in UTC RFC3339 format when the authorization token expires.
     * 
     */
    private @Nullable String expiresAt;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private @Nullable String id;
    /**
     * @return Password decoded from the authorization token.
     * 
     */
    private @Nullable String password;
    /**
     * @return User name decoded from the authorization token.
     * 
     */
    private @Nullable String userName;

    private GetAuthorizationTokenResult() {}
    /**
     * @return Temporary IAM authentication credentials to access the ECR repository encoded in base64 in the form of `user_name:password`.
     * 
     */
    public Optional<String> authorizationToken() {
        return Optional.ofNullable(this.authorizationToken);
    }
    /**
     * @return Time in UTC RFC3339 format when the authorization token expires.
     * 
     */
    public Optional<String> expiresAt() {
        return Optional.ofNullable(this.expiresAt);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Password decoded from the authorization token.
     * 
     */
    public Optional<String> password() {
        return Optional.ofNullable(this.password);
    }
    /**
     * @return User name decoded from the authorization token.
     * 
     */
    public Optional<String> userName() {
        return Optional.ofNullable(this.userName);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAuthorizationTokenResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String authorizationToken;
        private @Nullable String expiresAt;
        private @Nullable String id;
        private @Nullable String password;
        private @Nullable String userName;
        public Builder() {}
        public Builder(GetAuthorizationTokenResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authorizationToken = defaults.authorizationToken;
    	      this.expiresAt = defaults.expiresAt;
    	      this.id = defaults.id;
    	      this.password = defaults.password;
    	      this.userName = defaults.userName;
        }

        @CustomType.Setter
        public Builder authorizationToken(@Nullable String authorizationToken) {
            this.authorizationToken = authorizationToken;
            return this;
        }
        @CustomType.Setter
        public Builder expiresAt(@Nullable String expiresAt) {
            this.expiresAt = expiresAt;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder password(@Nullable String password) {
            this.password = password;
            return this;
        }
        @CustomType.Setter
        public Builder userName(@Nullable String userName) {
            this.userName = userName;
            return this;
        }
        public GetAuthorizationTokenResult build() {
            final var o = new GetAuthorizationTokenResult();
            o.authorizationToken = authorizationToken;
            o.expiresAt = expiresAt;
            o.id = id;
            o.password = password;
            o.userName = userName;
            return o;
        }
    }
}
