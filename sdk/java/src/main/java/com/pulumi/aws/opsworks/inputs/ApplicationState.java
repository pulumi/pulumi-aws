// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.opsworks.inputs;

import com.pulumi.aws.opsworks.inputs.ApplicationAppSourceArgs;
import com.pulumi.aws.opsworks.inputs.ApplicationEnvironmentArgs;
import com.pulumi.aws.opsworks.inputs.ApplicationSslConfigurationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ApplicationState extends com.pulumi.resources.ResourceArgs {

    public static final ApplicationState Empty = new ApplicationState();

    @Import(name="appSources")
    private @Nullable Output<List<ApplicationAppSourceArgs>> appSources;

    public Optional<Output<List<ApplicationAppSourceArgs>>> appSources() {
        return Optional.ofNullable(this.appSources);
    }

    @Import(name="autoBundleOnDeploy")
    private @Nullable Output<String> autoBundleOnDeploy;

    public Optional<Output<String>> autoBundleOnDeploy() {
        return Optional.ofNullable(this.autoBundleOnDeploy);
    }

    @Import(name="awsFlowRubySettings")
    private @Nullable Output<String> awsFlowRubySettings;

    public Optional<Output<String>> awsFlowRubySettings() {
        return Optional.ofNullable(this.awsFlowRubySettings);
    }

    @Import(name="dataSourceArn")
    private @Nullable Output<String> dataSourceArn;

    public Optional<Output<String>> dataSourceArn() {
        return Optional.ofNullable(this.dataSourceArn);
    }

    @Import(name="dataSourceDatabaseName")
    private @Nullable Output<String> dataSourceDatabaseName;

    public Optional<Output<String>> dataSourceDatabaseName() {
        return Optional.ofNullable(this.dataSourceDatabaseName);
    }

    @Import(name="dataSourceType")
    private @Nullable Output<String> dataSourceType;

    public Optional<Output<String>> dataSourceType() {
        return Optional.ofNullable(this.dataSourceType);
    }

    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="documentRoot")
    private @Nullable Output<String> documentRoot;

    public Optional<Output<String>> documentRoot() {
        return Optional.ofNullable(this.documentRoot);
    }

    @Import(name="domains")
    private @Nullable Output<List<String>> domains;

    public Optional<Output<List<String>>> domains() {
        return Optional.ofNullable(this.domains);
    }

    @Import(name="enableSsl")
    private @Nullable Output<Boolean> enableSsl;

    public Optional<Output<Boolean>> enableSsl() {
        return Optional.ofNullable(this.enableSsl);
    }

    @Import(name="environments")
    private @Nullable Output<List<ApplicationEnvironmentArgs>> environments;

    public Optional<Output<List<ApplicationEnvironmentArgs>>> environments() {
        return Optional.ofNullable(this.environments);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="railsEnv")
    private @Nullable Output<String> railsEnv;

    public Optional<Output<String>> railsEnv() {
        return Optional.ofNullable(this.railsEnv);
    }

    @Import(name="shortName")
    private @Nullable Output<String> shortName;

    public Optional<Output<String>> shortName() {
        return Optional.ofNullable(this.shortName);
    }

    @Import(name="sslConfigurations")
    private @Nullable Output<List<ApplicationSslConfigurationArgs>> sslConfigurations;

    public Optional<Output<List<ApplicationSslConfigurationArgs>>> sslConfigurations() {
        return Optional.ofNullable(this.sslConfigurations);
    }

    @Import(name="stackId")
    private @Nullable Output<String> stackId;

    public Optional<Output<String>> stackId() {
        return Optional.ofNullable(this.stackId);
    }

    @Import(name="type")
    private @Nullable Output<String> type;

    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private ApplicationState() {}

    private ApplicationState(ApplicationState $) {
        this.appSources = $.appSources;
        this.autoBundleOnDeploy = $.autoBundleOnDeploy;
        this.awsFlowRubySettings = $.awsFlowRubySettings;
        this.dataSourceArn = $.dataSourceArn;
        this.dataSourceDatabaseName = $.dataSourceDatabaseName;
        this.dataSourceType = $.dataSourceType;
        this.description = $.description;
        this.documentRoot = $.documentRoot;
        this.domains = $.domains;
        this.enableSsl = $.enableSsl;
        this.environments = $.environments;
        this.name = $.name;
        this.railsEnv = $.railsEnv;
        this.shortName = $.shortName;
        this.sslConfigurations = $.sslConfigurations;
        this.stackId = $.stackId;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApplicationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApplicationState $;

        public Builder() {
            $ = new ApplicationState();
        }

        public Builder(ApplicationState defaults) {
            $ = new ApplicationState(Objects.requireNonNull(defaults));
        }

        public Builder appSources(@Nullable Output<List<ApplicationAppSourceArgs>> appSources) {
            $.appSources = appSources;
            return this;
        }

        public Builder appSources(List<ApplicationAppSourceArgs> appSources) {
            return appSources(Output.of(appSources));
        }

        public Builder appSources(ApplicationAppSourceArgs... appSources) {
            return appSources(List.of(appSources));
        }

        public Builder autoBundleOnDeploy(@Nullable Output<String> autoBundleOnDeploy) {
            $.autoBundleOnDeploy = autoBundleOnDeploy;
            return this;
        }

        public Builder autoBundleOnDeploy(String autoBundleOnDeploy) {
            return autoBundleOnDeploy(Output.of(autoBundleOnDeploy));
        }

        public Builder awsFlowRubySettings(@Nullable Output<String> awsFlowRubySettings) {
            $.awsFlowRubySettings = awsFlowRubySettings;
            return this;
        }

        public Builder awsFlowRubySettings(String awsFlowRubySettings) {
            return awsFlowRubySettings(Output.of(awsFlowRubySettings));
        }

        public Builder dataSourceArn(@Nullable Output<String> dataSourceArn) {
            $.dataSourceArn = dataSourceArn;
            return this;
        }

        public Builder dataSourceArn(String dataSourceArn) {
            return dataSourceArn(Output.of(dataSourceArn));
        }

        public Builder dataSourceDatabaseName(@Nullable Output<String> dataSourceDatabaseName) {
            $.dataSourceDatabaseName = dataSourceDatabaseName;
            return this;
        }

        public Builder dataSourceDatabaseName(String dataSourceDatabaseName) {
            return dataSourceDatabaseName(Output.of(dataSourceDatabaseName));
        }

        public Builder dataSourceType(@Nullable Output<String> dataSourceType) {
            $.dataSourceType = dataSourceType;
            return this;
        }

        public Builder dataSourceType(String dataSourceType) {
            return dataSourceType(Output.of(dataSourceType));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder documentRoot(@Nullable Output<String> documentRoot) {
            $.documentRoot = documentRoot;
            return this;
        }

        public Builder documentRoot(String documentRoot) {
            return documentRoot(Output.of(documentRoot));
        }

        public Builder domains(@Nullable Output<List<String>> domains) {
            $.domains = domains;
            return this;
        }

        public Builder domains(List<String> domains) {
            return domains(Output.of(domains));
        }

        public Builder domains(String... domains) {
            return domains(List.of(domains));
        }

        public Builder enableSsl(@Nullable Output<Boolean> enableSsl) {
            $.enableSsl = enableSsl;
            return this;
        }

        public Builder enableSsl(Boolean enableSsl) {
            return enableSsl(Output.of(enableSsl));
        }

        public Builder environments(@Nullable Output<List<ApplicationEnvironmentArgs>> environments) {
            $.environments = environments;
            return this;
        }

        public Builder environments(List<ApplicationEnvironmentArgs> environments) {
            return environments(Output.of(environments));
        }

        public Builder environments(ApplicationEnvironmentArgs... environments) {
            return environments(List.of(environments));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder railsEnv(@Nullable Output<String> railsEnv) {
            $.railsEnv = railsEnv;
            return this;
        }

        public Builder railsEnv(String railsEnv) {
            return railsEnv(Output.of(railsEnv));
        }

        public Builder shortName(@Nullable Output<String> shortName) {
            $.shortName = shortName;
            return this;
        }

        public Builder shortName(String shortName) {
            return shortName(Output.of(shortName));
        }

        public Builder sslConfigurations(@Nullable Output<List<ApplicationSslConfigurationArgs>> sslConfigurations) {
            $.sslConfigurations = sslConfigurations;
            return this;
        }

        public Builder sslConfigurations(List<ApplicationSslConfigurationArgs> sslConfigurations) {
            return sslConfigurations(Output.of(sslConfigurations));
        }

        public Builder sslConfigurations(ApplicationSslConfigurationArgs... sslConfigurations) {
            return sslConfigurations(List.of(sslConfigurations));
        }

        public Builder stackId(@Nullable Output<String> stackId) {
            $.stackId = stackId;
            return this;
        }

        public Builder stackId(String stackId) {
            return stackId(Output.of(stackId));
        }

        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        public Builder type(String type) {
            return type(Output.of(type));
        }

        public ApplicationState build() {
            return $;
        }
    }

}
