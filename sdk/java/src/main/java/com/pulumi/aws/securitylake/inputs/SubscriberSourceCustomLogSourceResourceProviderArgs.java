// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.securitylake.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class SubscriberSourceCustomLogSourceResourceProviderArgs extends com.pulumi.resources.ResourceArgs {

    public static final SubscriberSourceCustomLogSourceResourceProviderArgs Empty = new SubscriberSourceCustomLogSourceResourceProviderArgs();

    /**
     * The location of the partition in the Amazon S3 bucket for Security Lake.
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    /**
     * @return The location of the partition in the Amazon S3 bucket for Security Lake.
     * 
     */
    public Output<String> location() {
        return this.location;
    }

    /**
     * The ARN of the IAM role to be used by the entity putting logs into your custom source partition.
     * 
     */
    @Import(name="roleArn", required=true)
    private Output<String> roleArn;

    /**
     * @return The ARN of the IAM role to be used by the entity putting logs into your custom source partition.
     * 
     */
    public Output<String> roleArn() {
        return this.roleArn;
    }

    private SubscriberSourceCustomLogSourceResourceProviderArgs() {}

    private SubscriberSourceCustomLogSourceResourceProviderArgs(SubscriberSourceCustomLogSourceResourceProviderArgs $) {
        this.location = $.location;
        this.roleArn = $.roleArn;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SubscriberSourceCustomLogSourceResourceProviderArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SubscriberSourceCustomLogSourceResourceProviderArgs $;

        public Builder() {
            $ = new SubscriberSourceCustomLogSourceResourceProviderArgs();
        }

        public Builder(SubscriberSourceCustomLogSourceResourceProviderArgs defaults) {
            $ = new SubscriberSourceCustomLogSourceResourceProviderArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param location The location of the partition in the Amazon S3 bucket for Security Lake.
         * 
         * @return builder
         * 
         */
        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The location of the partition in the Amazon S3 bucket for Security Lake.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param roleArn The ARN of the IAM role to be used by the entity putting logs into your custom source partition.
         * 
         * @return builder
         * 
         */
        public Builder roleArn(Output<String> roleArn) {
            $.roleArn = roleArn;
            return this;
        }

        /**
         * @param roleArn The ARN of the IAM role to be used by the entity putting logs into your custom source partition.
         * 
         * @return builder
         * 
         */
        public Builder roleArn(String roleArn) {
            return roleArn(Output.of(roleArn));
        }

        public SubscriberSourceCustomLogSourceResourceProviderArgs build() {
            if ($.location == null) {
                throw new MissingRequiredPropertyException("SubscriberSourceCustomLogSourceResourceProviderArgs", "location");
            }
            if ($.roleArn == null) {
                throw new MissingRequiredPropertyException("SubscriberSourceCustomLogSourceResourceProviderArgs", "roleArn");
            }
            return $;
        }
    }

}
