// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.secretsmanager;

import com.pulumi.aws.secretsmanager.inputs.SecretRotationRotationRulesArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SecretRotationArgs extends com.pulumi.resources.ResourceArgs {

    public static final SecretRotationArgs Empty = new SecretRotationArgs();

    /**
     * Specifies the ARN of the Lambda function that can rotate the secret. Must be supplied if the secret is not managed by AWS.
     * 
     */
    @Import(name="rotationLambdaArn")
    private @Nullable Output<String> rotationLambdaArn;

    /**
     * @return Specifies the ARN of the Lambda function that can rotate the secret. Must be supplied if the secret is not managed by AWS.
     * 
     */
    public Optional<Output<String>> rotationLambdaArn() {
        return Optional.ofNullable(this.rotationLambdaArn);
    }

    /**
     * A structure that defines the rotation configuration for this secret. Defined below.
     * 
     */
    @Import(name="rotationRules", required=true)
    private Output<SecretRotationRotationRulesArgs> rotationRules;

    /**
     * @return A structure that defines the rotation configuration for this secret. Defined below.
     * 
     */
    public Output<SecretRotationRotationRulesArgs> rotationRules() {
        return this.rotationRules;
    }

    /**
     * Specifies the secret to which you want to add a new version. You can specify either the Amazon Resource Name (ARN) or the friendly name of the secret. The secret must already exist.
     * 
     */
    @Import(name="secretId", required=true)
    private Output<String> secretId;

    /**
     * @return Specifies the secret to which you want to add a new version. You can specify either the Amazon Resource Name (ARN) or the friendly name of the secret. The secret must already exist.
     * 
     */
    public Output<String> secretId() {
        return this.secretId;
    }

    private SecretRotationArgs() {}

    private SecretRotationArgs(SecretRotationArgs $) {
        this.rotationLambdaArn = $.rotationLambdaArn;
        this.rotationRules = $.rotationRules;
        this.secretId = $.secretId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SecretRotationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SecretRotationArgs $;

        public Builder() {
            $ = new SecretRotationArgs();
        }

        public Builder(SecretRotationArgs defaults) {
            $ = new SecretRotationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param rotationLambdaArn Specifies the ARN of the Lambda function that can rotate the secret. Must be supplied if the secret is not managed by AWS.
         * 
         * @return builder
         * 
         */
        public Builder rotationLambdaArn(@Nullable Output<String> rotationLambdaArn) {
            $.rotationLambdaArn = rotationLambdaArn;
            return this;
        }

        /**
         * @param rotationLambdaArn Specifies the ARN of the Lambda function that can rotate the secret. Must be supplied if the secret is not managed by AWS.
         * 
         * @return builder
         * 
         */
        public Builder rotationLambdaArn(String rotationLambdaArn) {
            return rotationLambdaArn(Output.of(rotationLambdaArn));
        }

        /**
         * @param rotationRules A structure that defines the rotation configuration for this secret. Defined below.
         * 
         * @return builder
         * 
         */
        public Builder rotationRules(Output<SecretRotationRotationRulesArgs> rotationRules) {
            $.rotationRules = rotationRules;
            return this;
        }

        /**
         * @param rotationRules A structure that defines the rotation configuration for this secret. Defined below.
         * 
         * @return builder
         * 
         */
        public Builder rotationRules(SecretRotationRotationRulesArgs rotationRules) {
            return rotationRules(Output.of(rotationRules));
        }

        /**
         * @param secretId Specifies the secret to which you want to add a new version. You can specify either the Amazon Resource Name (ARN) or the friendly name of the secret. The secret must already exist.
         * 
         * @return builder
         * 
         */
        public Builder secretId(Output<String> secretId) {
            $.secretId = secretId;
            return this;
        }

        /**
         * @param secretId Specifies the secret to which you want to add a new version. You can specify either the Amazon Resource Name (ARN) or the friendly name of the secret. The secret must already exist.
         * 
         * @return builder
         * 
         */
        public Builder secretId(String secretId) {
            return secretId(Output.of(secretId));
        }

        public SecretRotationArgs build() {
            if ($.rotationRules == null) {
                throw new MissingRequiredPropertyException("SecretRotationArgs", "rotationRules");
            }
            if ($.secretId == null) {
                throw new MissingRequiredPropertyException("SecretRotationArgs", "secretId");
            }
            return $;
        }
    }

}
