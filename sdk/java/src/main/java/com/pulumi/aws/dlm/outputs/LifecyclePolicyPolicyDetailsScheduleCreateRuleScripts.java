// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.dlm.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class LifecyclePolicyPolicyDetailsScheduleCreateRuleScripts {
    /**
     * @return Indicates whether Amazon Data Lifecycle Manager should default to crash-consistent snapshots if the pre script fails. The default is `true`.
     * 
     */
    private @Nullable Boolean executeOperationOnScriptFailure;
    /**
     * @return The SSM document that includes the pre and/or post scripts to run. In case automating VSS backups, specify `AWS_VSS_BACKUP`. In case automating application-consistent snapshots for SAP HANA workloads, specify `AWSSystemsManagerSAP-CreateDLMSnapshotForSAPHANA`. If you are using a custom SSM document that you own, specify either the name or ARN of the SSM document.
     * 
     */
    private String executionHandler;
    /**
     * @return Indicates the service used to execute the pre and/or post scripts. If using custom SSM documents or automating application-consistent snapshots of SAP HANA workloads, specify `AWS_SYSTEMS_MANAGER`. In case automating VSS Backups, omit this parameter. The default is `AWS_SYSTEMS_MANAGER`.
     * 
     */
    private @Nullable String executionHandlerService;
    /**
     * @return Specifies a timeout period, in seconds, after which Amazon Data Lifecycle Manager fails the script run attempt if it has not completed. In case automating VSS Backups, omit this parameter. The default is `10`.
     * 
     */
    private @Nullable Integer executionTimeout;
    /**
     * @return Specifies the number of times Amazon Data Lifecycle Manager should retry scripts that fail. Must be an integer between `0` and `3`. The default is `0`.
     * 
     */
    private @Nullable Integer maximumRetryCount;
    /**
     * @return List to indicate which scripts Amazon Data Lifecycle Manager should run on target instances. Pre scripts run before Amazon Data Lifecycle Manager initiates snapshot creation. Post scripts run after Amazon Data Lifecycle Manager initiates snapshot creation. Valid values: `PRE` and `POST`. The default is `PRE` and `POST`
     * 
     */
    private @Nullable List<String> stages;

    private LifecyclePolicyPolicyDetailsScheduleCreateRuleScripts() {}
    /**
     * @return Indicates whether Amazon Data Lifecycle Manager should default to crash-consistent snapshots if the pre script fails. The default is `true`.
     * 
     */
    public Optional<Boolean> executeOperationOnScriptFailure() {
        return Optional.ofNullable(this.executeOperationOnScriptFailure);
    }
    /**
     * @return The SSM document that includes the pre and/or post scripts to run. In case automating VSS backups, specify `AWS_VSS_BACKUP`. In case automating application-consistent snapshots for SAP HANA workloads, specify `AWSSystemsManagerSAP-CreateDLMSnapshotForSAPHANA`. If you are using a custom SSM document that you own, specify either the name or ARN of the SSM document.
     * 
     */
    public String executionHandler() {
        return this.executionHandler;
    }
    /**
     * @return Indicates the service used to execute the pre and/or post scripts. If using custom SSM documents or automating application-consistent snapshots of SAP HANA workloads, specify `AWS_SYSTEMS_MANAGER`. In case automating VSS Backups, omit this parameter. The default is `AWS_SYSTEMS_MANAGER`.
     * 
     */
    public Optional<String> executionHandlerService() {
        return Optional.ofNullable(this.executionHandlerService);
    }
    /**
     * @return Specifies a timeout period, in seconds, after which Amazon Data Lifecycle Manager fails the script run attempt if it has not completed. In case automating VSS Backups, omit this parameter. The default is `10`.
     * 
     */
    public Optional<Integer> executionTimeout() {
        return Optional.ofNullable(this.executionTimeout);
    }
    /**
     * @return Specifies the number of times Amazon Data Lifecycle Manager should retry scripts that fail. Must be an integer between `0` and `3`. The default is `0`.
     * 
     */
    public Optional<Integer> maximumRetryCount() {
        return Optional.ofNullable(this.maximumRetryCount);
    }
    /**
     * @return List to indicate which scripts Amazon Data Lifecycle Manager should run on target instances. Pre scripts run before Amazon Data Lifecycle Manager initiates snapshot creation. Post scripts run after Amazon Data Lifecycle Manager initiates snapshot creation. Valid values: `PRE` and `POST`. The default is `PRE` and `POST`
     * 
     */
    public List<String> stages() {
        return this.stages == null ? List.of() : this.stages;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LifecyclePolicyPolicyDetailsScheduleCreateRuleScripts defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean executeOperationOnScriptFailure;
        private String executionHandler;
        private @Nullable String executionHandlerService;
        private @Nullable Integer executionTimeout;
        private @Nullable Integer maximumRetryCount;
        private @Nullable List<String> stages;
        public Builder() {}
        public Builder(LifecyclePolicyPolicyDetailsScheduleCreateRuleScripts defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.executeOperationOnScriptFailure = defaults.executeOperationOnScriptFailure;
    	      this.executionHandler = defaults.executionHandler;
    	      this.executionHandlerService = defaults.executionHandlerService;
    	      this.executionTimeout = defaults.executionTimeout;
    	      this.maximumRetryCount = defaults.maximumRetryCount;
    	      this.stages = defaults.stages;
        }

        @CustomType.Setter
        public Builder executeOperationOnScriptFailure(@Nullable Boolean executeOperationOnScriptFailure) {

            this.executeOperationOnScriptFailure = executeOperationOnScriptFailure;
            return this;
        }
        @CustomType.Setter
        public Builder executionHandler(String executionHandler) {
            if (executionHandler == null) {
              throw new MissingRequiredPropertyException("LifecyclePolicyPolicyDetailsScheduleCreateRuleScripts", "executionHandler");
            }
            this.executionHandler = executionHandler;
            return this;
        }
        @CustomType.Setter
        public Builder executionHandlerService(@Nullable String executionHandlerService) {

            this.executionHandlerService = executionHandlerService;
            return this;
        }
        @CustomType.Setter
        public Builder executionTimeout(@Nullable Integer executionTimeout) {

            this.executionTimeout = executionTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder maximumRetryCount(@Nullable Integer maximumRetryCount) {

            this.maximumRetryCount = maximumRetryCount;
            return this;
        }
        @CustomType.Setter
        public Builder stages(@Nullable List<String> stages) {

            this.stages = stages;
            return this;
        }
        public Builder stages(String... stages) {
            return stages(List.of(stages));
        }
        public LifecyclePolicyPolicyDetailsScheduleCreateRuleScripts build() {
            final var _resultValue = new LifecyclePolicyPolicyDetailsScheduleCreateRuleScripts();
            _resultValue.executeOperationOnScriptFailure = executeOperationOnScriptFailure;
            _resultValue.executionHandler = executionHandler;
            _resultValue.executionHandlerService = executionHandlerService;
            _resultValue.executionTimeout = executionTimeout;
            _resultValue.maximumRetryCount = maximumRetryCount;
            _resultValue.stages = stages;
            return _resultValue;
        }
    }
}
