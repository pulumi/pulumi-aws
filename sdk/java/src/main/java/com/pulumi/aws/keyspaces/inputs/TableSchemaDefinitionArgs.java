// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.keyspaces.inputs;

import com.pulumi.aws.keyspaces.inputs.TableSchemaDefinitionClusteringKeyArgs;
import com.pulumi.aws.keyspaces.inputs.TableSchemaDefinitionColumnArgs;
import com.pulumi.aws.keyspaces.inputs.TableSchemaDefinitionPartitionKeyArgs;
import com.pulumi.aws.keyspaces.inputs.TableSchemaDefinitionStaticColumnArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TableSchemaDefinitionArgs extends com.pulumi.resources.ResourceArgs {

    public static final TableSchemaDefinitionArgs Empty = new TableSchemaDefinitionArgs();

    /**
     * The columns that are part of the clustering key of the table.
     * 
     */
    @Import(name="clusteringKeys")
    private @Nullable Output<List<TableSchemaDefinitionClusteringKeyArgs>> clusteringKeys;

    /**
     * @return The columns that are part of the clustering key of the table.
     * 
     */
    public Optional<Output<List<TableSchemaDefinitionClusteringKeyArgs>>> clusteringKeys() {
        return Optional.ofNullable(this.clusteringKeys);
    }

    /**
     * The regular columns of the table.
     * 
     */
    @Import(name="columns", required=true)
    private Output<List<TableSchemaDefinitionColumnArgs>> columns;

    /**
     * @return The regular columns of the table.
     * 
     */
    public Output<List<TableSchemaDefinitionColumnArgs>> columns() {
        return this.columns;
    }

    /**
     * The columns that are part of the partition key of the table .
     * 
     */
    @Import(name="partitionKeys", required=true)
    private Output<List<TableSchemaDefinitionPartitionKeyArgs>> partitionKeys;

    /**
     * @return The columns that are part of the partition key of the table .
     * 
     */
    public Output<List<TableSchemaDefinitionPartitionKeyArgs>> partitionKeys() {
        return this.partitionKeys;
    }

    /**
     * The columns that have been defined as `STATIC`. Static columns store values that are shared by all rows in the same partition.
     * 
     */
    @Import(name="staticColumns")
    private @Nullable Output<List<TableSchemaDefinitionStaticColumnArgs>> staticColumns;

    /**
     * @return The columns that have been defined as `STATIC`. Static columns store values that are shared by all rows in the same partition.
     * 
     */
    public Optional<Output<List<TableSchemaDefinitionStaticColumnArgs>>> staticColumns() {
        return Optional.ofNullable(this.staticColumns);
    }

    private TableSchemaDefinitionArgs() {}

    private TableSchemaDefinitionArgs(TableSchemaDefinitionArgs $) {
        this.clusteringKeys = $.clusteringKeys;
        this.columns = $.columns;
        this.partitionKeys = $.partitionKeys;
        this.staticColumns = $.staticColumns;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TableSchemaDefinitionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TableSchemaDefinitionArgs $;

        public Builder() {
            $ = new TableSchemaDefinitionArgs();
        }

        public Builder(TableSchemaDefinitionArgs defaults) {
            $ = new TableSchemaDefinitionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clusteringKeys The columns that are part of the clustering key of the table.
         * 
         * @return builder
         * 
         */
        public Builder clusteringKeys(@Nullable Output<List<TableSchemaDefinitionClusteringKeyArgs>> clusteringKeys) {
            $.clusteringKeys = clusteringKeys;
            return this;
        }

        /**
         * @param clusteringKeys The columns that are part of the clustering key of the table.
         * 
         * @return builder
         * 
         */
        public Builder clusteringKeys(List<TableSchemaDefinitionClusteringKeyArgs> clusteringKeys) {
            return clusteringKeys(Output.of(clusteringKeys));
        }

        /**
         * @param clusteringKeys The columns that are part of the clustering key of the table.
         * 
         * @return builder
         * 
         */
        public Builder clusteringKeys(TableSchemaDefinitionClusteringKeyArgs... clusteringKeys) {
            return clusteringKeys(List.of(clusteringKeys));
        }

        /**
         * @param columns The regular columns of the table.
         * 
         * @return builder
         * 
         */
        public Builder columns(Output<List<TableSchemaDefinitionColumnArgs>> columns) {
            $.columns = columns;
            return this;
        }

        /**
         * @param columns The regular columns of the table.
         * 
         * @return builder
         * 
         */
        public Builder columns(List<TableSchemaDefinitionColumnArgs> columns) {
            return columns(Output.of(columns));
        }

        /**
         * @param columns The regular columns of the table.
         * 
         * @return builder
         * 
         */
        public Builder columns(TableSchemaDefinitionColumnArgs... columns) {
            return columns(List.of(columns));
        }

        /**
         * @param partitionKeys The columns that are part of the partition key of the table .
         * 
         * @return builder
         * 
         */
        public Builder partitionKeys(Output<List<TableSchemaDefinitionPartitionKeyArgs>> partitionKeys) {
            $.partitionKeys = partitionKeys;
            return this;
        }

        /**
         * @param partitionKeys The columns that are part of the partition key of the table .
         * 
         * @return builder
         * 
         */
        public Builder partitionKeys(List<TableSchemaDefinitionPartitionKeyArgs> partitionKeys) {
            return partitionKeys(Output.of(partitionKeys));
        }

        /**
         * @param partitionKeys The columns that are part of the partition key of the table .
         * 
         * @return builder
         * 
         */
        public Builder partitionKeys(TableSchemaDefinitionPartitionKeyArgs... partitionKeys) {
            return partitionKeys(List.of(partitionKeys));
        }

        /**
         * @param staticColumns The columns that have been defined as `STATIC`. Static columns store values that are shared by all rows in the same partition.
         * 
         * @return builder
         * 
         */
        public Builder staticColumns(@Nullable Output<List<TableSchemaDefinitionStaticColumnArgs>> staticColumns) {
            $.staticColumns = staticColumns;
            return this;
        }

        /**
         * @param staticColumns The columns that have been defined as `STATIC`. Static columns store values that are shared by all rows in the same partition.
         * 
         * @return builder
         * 
         */
        public Builder staticColumns(List<TableSchemaDefinitionStaticColumnArgs> staticColumns) {
            return staticColumns(Output.of(staticColumns));
        }

        /**
         * @param staticColumns The columns that have been defined as `STATIC`. Static columns store values that are shared by all rows in the same partition.
         * 
         * @return builder
         * 
         */
        public Builder staticColumns(TableSchemaDefinitionStaticColumnArgs... staticColumns) {
            return staticColumns(List.of(staticColumns));
        }

        public TableSchemaDefinitionArgs build() {
            if ($.columns == null) {
                throw new MissingRequiredPropertyException("TableSchemaDefinitionArgs", "columns");
            }
            if ($.partitionKeys == null) {
                throw new MissingRequiredPropertyException("TableSchemaDefinitionArgs", "partitionKeys");
            }
            return $;
        }
    }

}
