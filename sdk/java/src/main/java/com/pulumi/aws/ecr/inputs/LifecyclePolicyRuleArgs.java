// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ecr.inputs;

import com.pulumi.aws.ecr.inputs.LifecyclePolicyActionArgs;
import com.pulumi.aws.ecr.inputs.LifecyclePolicySelectionArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Represents a rule in an ECR lifecycle policy.
 * 
 */
public final class LifecyclePolicyRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final LifecyclePolicyRuleArgs Empty = new LifecyclePolicyRuleArgs();

    /**
     * The action to take when the rule is triggered.
     * 
     */
    @Import(name="action", required=true)
    private Output<LifecyclePolicyActionArgs> action;

    /**
     * @return The action to take when the rule is triggered.
     * 
     */
    public Output<LifecyclePolicyActionArgs> action() {
        return this.action;
    }

    /**
     * A description of the rule.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A description of the rule.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The priority of the rule, must be unique within the policy.
     * 
     */
    @Import(name="rulePriority", required=true)
    private Output<Integer> rulePriority;

    /**
     * @return The priority of the rule, must be unique within the policy.
     * 
     */
    public Output<Integer> rulePriority() {
        return this.rulePriority;
    }

    /**
     * The selection criteria for the rule.
     * 
     */
    @Import(name="selection", required=true)
    private Output<LifecyclePolicySelectionArgs> selection;

    /**
     * @return The selection criteria for the rule.
     * 
     */
    public Output<LifecyclePolicySelectionArgs> selection() {
        return this.selection;
    }

    private LifecyclePolicyRuleArgs() {}

    private LifecyclePolicyRuleArgs(LifecyclePolicyRuleArgs $) {
        this.action = $.action;
        this.description = $.description;
        this.rulePriority = $.rulePriority;
        this.selection = $.selection;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LifecyclePolicyRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LifecyclePolicyRuleArgs $;

        public Builder() {
            $ = new LifecyclePolicyRuleArgs();
        }

        public Builder(LifecyclePolicyRuleArgs defaults) {
            $ = new LifecyclePolicyRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param action The action to take when the rule is triggered.
         * 
         * @return builder
         * 
         */
        public Builder action(Output<LifecyclePolicyActionArgs> action) {
            $.action = action;
            return this;
        }

        /**
         * @param action The action to take when the rule is triggered.
         * 
         * @return builder
         * 
         */
        public Builder action(LifecyclePolicyActionArgs action) {
            return action(Output.of(action));
        }

        /**
         * @param description A description of the rule.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A description of the rule.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param rulePriority The priority of the rule, must be unique within the policy.
         * 
         * @return builder
         * 
         */
        public Builder rulePriority(Output<Integer> rulePriority) {
            $.rulePriority = rulePriority;
            return this;
        }

        /**
         * @param rulePriority The priority of the rule, must be unique within the policy.
         * 
         * @return builder
         * 
         */
        public Builder rulePriority(Integer rulePriority) {
            return rulePriority(Output.of(rulePriority));
        }

        /**
         * @param selection The selection criteria for the rule.
         * 
         * @return builder
         * 
         */
        public Builder selection(Output<LifecyclePolicySelectionArgs> selection) {
            $.selection = selection;
            return this;
        }

        /**
         * @param selection The selection criteria for the rule.
         * 
         * @return builder
         * 
         */
        public Builder selection(LifecyclePolicySelectionArgs selection) {
            return selection(Output.of(selection));
        }

        public LifecyclePolicyRuleArgs build() {
            if ($.action == null) {
                throw new MissingRequiredPropertyException("LifecyclePolicyRuleArgs", "action");
            }
            if ($.rulePriority == null) {
                throw new MissingRequiredPropertyException("LifecyclePolicyRuleArgs", "rulePriority");
            }
            if ($.selection == null) {
                throw new MissingRequiredPropertyException("LifecyclePolicyRuleArgs", "selection");
            }
            return $;
        }
    }

}
