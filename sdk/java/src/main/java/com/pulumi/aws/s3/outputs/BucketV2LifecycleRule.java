// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.s3.outputs;

import com.pulumi.aws.s3.outputs.BucketV2LifecycleRuleExpiration;
import com.pulumi.aws.s3.outputs.BucketV2LifecycleRuleNoncurrentVersionExpiration;
import com.pulumi.aws.s3.outputs.BucketV2LifecycleRuleNoncurrentVersionTransition;
import com.pulumi.aws.s3.outputs.BucketV2LifecycleRuleTransition;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class BucketV2LifecycleRule {
    /**
     * @return Specifies the number of days after initiating a multipart upload when the multipart upload must be completed.
     * 
     */
    private @Nullable Integer abortIncompleteMultipartUploadDays;
    /**
     * @return Specifies lifecycle rule status.
     * 
     */
    private Boolean enabled;
    /**
     * @return Specifies a period in the object&#39;s expire. See Expiration below for details.
     * 
     */
    private @Nullable List<BucketV2LifecycleRuleExpiration> expirations;
    /**
     * @return Unique identifier for the rule. Must be less than or equal to 255 characters in length.
     * 
     */
    private @Nullable String id;
    /**
     * @return Specifies when noncurrent object versions expire. See Noncurrent Version Expiration below for details.
     * 
     */
    private @Nullable List<BucketV2LifecycleRuleNoncurrentVersionExpiration> noncurrentVersionExpirations;
    /**
     * @return Specifies when noncurrent object versions transitions. See Noncurrent Version Transition below for details.
     * 
     */
    private @Nullable List<BucketV2LifecycleRuleNoncurrentVersionTransition> noncurrentVersionTransitions;
    /**
     * @return Object key prefix identifying one or more objects to which the rule applies.
     * 
     */
    private @Nullable String prefix;
    /**
     * @return Specifies object tags key and value.
     * 
     */
    private @Nullable Map<String,String> tags;
    /**
     * @return Specifies a period in the object&#39;s transitions. See Transition below for details.
     * 
     */
    private @Nullable List<BucketV2LifecycleRuleTransition> transitions;

    private BucketV2LifecycleRule() {}
    /**
     * @return Specifies the number of days after initiating a multipart upload when the multipart upload must be completed.
     * 
     */
    public Optional<Integer> abortIncompleteMultipartUploadDays() {
        return Optional.ofNullable(this.abortIncompleteMultipartUploadDays);
    }
    /**
     * @return Specifies lifecycle rule status.
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }
    /**
     * @return Specifies a period in the object&#39;s expire. See Expiration below for details.
     * 
     */
    public List<BucketV2LifecycleRuleExpiration> expirations() {
        return this.expirations == null ? List.of() : this.expirations;
    }
    /**
     * @return Unique identifier for the rule. Must be less than or equal to 255 characters in length.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Specifies when noncurrent object versions expire. See Noncurrent Version Expiration below for details.
     * 
     */
    public List<BucketV2LifecycleRuleNoncurrentVersionExpiration> noncurrentVersionExpirations() {
        return this.noncurrentVersionExpirations == null ? List.of() : this.noncurrentVersionExpirations;
    }
    /**
     * @return Specifies when noncurrent object versions transitions. See Noncurrent Version Transition below for details.
     * 
     */
    public List<BucketV2LifecycleRuleNoncurrentVersionTransition> noncurrentVersionTransitions() {
        return this.noncurrentVersionTransitions == null ? List.of() : this.noncurrentVersionTransitions;
    }
    /**
     * @return Object key prefix identifying one or more objects to which the rule applies.
     * 
     */
    public Optional<String> prefix() {
        return Optional.ofNullable(this.prefix);
    }
    /**
     * @return Specifies object tags key and value.
     * 
     */
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * @return Specifies a period in the object&#39;s transitions. See Transition below for details.
     * 
     */
    public List<BucketV2LifecycleRuleTransition> transitions() {
        return this.transitions == null ? List.of() : this.transitions;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BucketV2LifecycleRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer abortIncompleteMultipartUploadDays;
        private Boolean enabled;
        private @Nullable List<BucketV2LifecycleRuleExpiration> expirations;
        private @Nullable String id;
        private @Nullable List<BucketV2LifecycleRuleNoncurrentVersionExpiration> noncurrentVersionExpirations;
        private @Nullable List<BucketV2LifecycleRuleNoncurrentVersionTransition> noncurrentVersionTransitions;
        private @Nullable String prefix;
        private @Nullable Map<String,String> tags;
        private @Nullable List<BucketV2LifecycleRuleTransition> transitions;
        public Builder() {}
        public Builder(BucketV2LifecycleRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.abortIncompleteMultipartUploadDays = defaults.abortIncompleteMultipartUploadDays;
    	      this.enabled = defaults.enabled;
    	      this.expirations = defaults.expirations;
    	      this.id = defaults.id;
    	      this.noncurrentVersionExpirations = defaults.noncurrentVersionExpirations;
    	      this.noncurrentVersionTransitions = defaults.noncurrentVersionTransitions;
    	      this.prefix = defaults.prefix;
    	      this.tags = defaults.tags;
    	      this.transitions = defaults.transitions;
        }

        @CustomType.Setter
        public Builder abortIncompleteMultipartUploadDays(@Nullable Integer abortIncompleteMultipartUploadDays) {

            this.abortIncompleteMultipartUploadDays = abortIncompleteMultipartUploadDays;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            if (enabled == null) {
              throw new MissingRequiredPropertyException("BucketV2LifecycleRule", "enabled");
            }
            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder expirations(@Nullable List<BucketV2LifecycleRuleExpiration> expirations) {

            this.expirations = expirations;
            return this;
        }
        public Builder expirations(BucketV2LifecycleRuleExpiration... expirations) {
            return expirations(List.of(expirations));
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {

            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder noncurrentVersionExpirations(@Nullable List<BucketV2LifecycleRuleNoncurrentVersionExpiration> noncurrentVersionExpirations) {

            this.noncurrentVersionExpirations = noncurrentVersionExpirations;
            return this;
        }
        public Builder noncurrentVersionExpirations(BucketV2LifecycleRuleNoncurrentVersionExpiration... noncurrentVersionExpirations) {
            return noncurrentVersionExpirations(List.of(noncurrentVersionExpirations));
        }
        @CustomType.Setter
        public Builder noncurrentVersionTransitions(@Nullable List<BucketV2LifecycleRuleNoncurrentVersionTransition> noncurrentVersionTransitions) {

            this.noncurrentVersionTransitions = noncurrentVersionTransitions;
            return this;
        }
        public Builder noncurrentVersionTransitions(BucketV2LifecycleRuleNoncurrentVersionTransition... noncurrentVersionTransitions) {
            return noncurrentVersionTransitions(List.of(noncurrentVersionTransitions));
        }
        @CustomType.Setter
        public Builder prefix(@Nullable String prefix) {

            this.prefix = prefix;
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,String> tags) {

            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder transitions(@Nullable List<BucketV2LifecycleRuleTransition> transitions) {

            this.transitions = transitions;
            return this;
        }
        public Builder transitions(BucketV2LifecycleRuleTransition... transitions) {
            return transitions(List.of(transitions));
        }
        public BucketV2LifecycleRule build() {
            final var _resultValue = new BucketV2LifecycleRule();
            _resultValue.abortIncompleteMultipartUploadDays = abortIncompleteMultipartUploadDays;
            _resultValue.enabled = enabled;
            _resultValue.expirations = expirations;
            _resultValue.id = id;
            _resultValue.noncurrentVersionExpirations = noncurrentVersionExpirations;
            _resultValue.noncurrentVersionTransitions = noncurrentVersionTransitions;
            _resultValue.prefix = prefix;
            _resultValue.tags = tags;
            _resultValue.transitions = transitions;
            return _resultValue;
        }
    }
}
