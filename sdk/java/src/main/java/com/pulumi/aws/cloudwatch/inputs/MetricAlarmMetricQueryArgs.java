// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.cloudwatch.inputs;

import com.pulumi.aws.cloudwatch.inputs.MetricAlarmMetricQueryMetricArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MetricAlarmMetricQueryArgs extends com.pulumi.resources.ResourceArgs {

    public static final MetricAlarmMetricQueryArgs Empty = new MetricAlarmMetricQueryArgs();

    @Import(name="accountId")
    private @Nullable Output<String> accountId;

    public Optional<Output<String>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    @Import(name="expression")
    private @Nullable Output<String> expression;

    public Optional<Output<String>> expression() {
        return Optional.ofNullable(this.expression);
    }

    @Import(name="id", required=true)
    private Output<String> id;

    public Output<String> id() {
        return this.id;
    }

    @Import(name="label")
    private @Nullable Output<String> label;

    public Optional<Output<String>> label() {
        return Optional.ofNullable(this.label);
    }

    @Import(name="metric")
    private @Nullable Output<MetricAlarmMetricQueryMetricArgs> metric;

    public Optional<Output<MetricAlarmMetricQueryMetricArgs>> metric() {
        return Optional.ofNullable(this.metric);
    }

    @Import(name="returnData")
    private @Nullable Output<Boolean> returnData;

    public Optional<Output<Boolean>> returnData() {
        return Optional.ofNullable(this.returnData);
    }

    private MetricAlarmMetricQueryArgs() {}

    private MetricAlarmMetricQueryArgs(MetricAlarmMetricQueryArgs $) {
        this.accountId = $.accountId;
        this.expression = $.expression;
        this.id = $.id;
        this.label = $.label;
        this.metric = $.metric;
        this.returnData = $.returnData;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MetricAlarmMetricQueryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MetricAlarmMetricQueryArgs $;

        public Builder() {
            $ = new MetricAlarmMetricQueryArgs();
        }

        public Builder(MetricAlarmMetricQueryArgs defaults) {
            $ = new MetricAlarmMetricQueryArgs(Objects.requireNonNull(defaults));
        }

        public Builder accountId(@Nullable Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        public Builder expression(@Nullable Output<String> expression) {
            $.expression = expression;
            return this;
        }

        public Builder expression(String expression) {
            return expression(Output.of(expression));
        }

        public Builder id(Output<String> id) {
            $.id = id;
            return this;
        }

        public Builder id(String id) {
            return id(Output.of(id));
        }

        public Builder label(@Nullable Output<String> label) {
            $.label = label;
            return this;
        }

        public Builder label(String label) {
            return label(Output.of(label));
        }

        public Builder metric(@Nullable Output<MetricAlarmMetricQueryMetricArgs> metric) {
            $.metric = metric;
            return this;
        }

        public Builder metric(MetricAlarmMetricQueryMetricArgs metric) {
            return metric(Output.of(metric));
        }

        public Builder returnData(@Nullable Output<Boolean> returnData) {
            $.returnData = returnData;
            return this;
        }

        public Builder returnData(Boolean returnData) {
            return returnData(Output.of(returnData));
        }

        public MetricAlarmMetricQueryArgs build() {
            $.id = Objects.requireNonNull($.id, "expected parameter 'id' to be non-null");
            return $;
        }
    }

}
