// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.appflow.outputs;

import com.pulumi.aws.appflow.outputs.ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOauthProperties;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoData {
    /**
     * @return The location of the SAPOData resource.
     * 
     */
    private String applicationHostUrl;
    /**
     * @return The application path to catalog service.
     * 
     */
    private String applicationServicePath;
    /**
     * @return The client number for the client creating the connection.
     * 
     */
    private String clientNumber;
    /**
     * @return The logon language of SAPOData instance.
     * 
     */
    private @Nullable String logonLanguage;
    /**
     * @return The SAPOData OAuth properties required for OAuth type authentication.
     * 
     */
    private @Nullable ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOauthProperties oauthProperties;
    /**
     * @return The port number of the SAPOData instance.
     * 
     */
    private Integer portNumber;
    /**
     * @return The SAPOData Private Link service name to be used for private data transfers.
     * 
     */
    private @Nullable String privateLinkServiceName;

    private ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoData() {}
    /**
     * @return The location of the SAPOData resource.
     * 
     */
    public String applicationHostUrl() {
        return this.applicationHostUrl;
    }
    /**
     * @return The application path to catalog service.
     * 
     */
    public String applicationServicePath() {
        return this.applicationServicePath;
    }
    /**
     * @return The client number for the client creating the connection.
     * 
     */
    public String clientNumber() {
        return this.clientNumber;
    }
    /**
     * @return The logon language of SAPOData instance.
     * 
     */
    public Optional<String> logonLanguage() {
        return Optional.ofNullable(this.logonLanguage);
    }
    /**
     * @return The SAPOData OAuth properties required for OAuth type authentication.
     * 
     */
    public Optional<ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOauthProperties> oauthProperties() {
        return Optional.ofNullable(this.oauthProperties);
    }
    /**
     * @return The port number of the SAPOData instance.
     * 
     */
    public Integer portNumber() {
        return this.portNumber;
    }
    /**
     * @return The SAPOData Private Link service name to be used for private data transfers.
     * 
     */
    public Optional<String> privateLinkServiceName() {
        return Optional.ofNullable(this.privateLinkServiceName);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoData defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String applicationHostUrl;
        private String applicationServicePath;
        private String clientNumber;
        private @Nullable String logonLanguage;
        private @Nullable ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOauthProperties oauthProperties;
        private Integer portNumber;
        private @Nullable String privateLinkServiceName;
        public Builder() {}
        public Builder(ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoData defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applicationHostUrl = defaults.applicationHostUrl;
    	      this.applicationServicePath = defaults.applicationServicePath;
    	      this.clientNumber = defaults.clientNumber;
    	      this.logonLanguage = defaults.logonLanguage;
    	      this.oauthProperties = defaults.oauthProperties;
    	      this.portNumber = defaults.portNumber;
    	      this.privateLinkServiceName = defaults.privateLinkServiceName;
        }

        @CustomType.Setter
        public Builder applicationHostUrl(String applicationHostUrl) {
            if (applicationHostUrl == null) {
              throw new MissingRequiredPropertyException("ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoData", "applicationHostUrl");
            }
            this.applicationHostUrl = applicationHostUrl;
            return this;
        }
        @CustomType.Setter
        public Builder applicationServicePath(String applicationServicePath) {
            if (applicationServicePath == null) {
              throw new MissingRequiredPropertyException("ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoData", "applicationServicePath");
            }
            this.applicationServicePath = applicationServicePath;
            return this;
        }
        @CustomType.Setter
        public Builder clientNumber(String clientNumber) {
            if (clientNumber == null) {
              throw new MissingRequiredPropertyException("ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoData", "clientNumber");
            }
            this.clientNumber = clientNumber;
            return this;
        }
        @CustomType.Setter
        public Builder logonLanguage(@Nullable String logonLanguage) {

            this.logonLanguage = logonLanguage;
            return this;
        }
        @CustomType.Setter
        public Builder oauthProperties(@Nullable ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOauthProperties oauthProperties) {

            this.oauthProperties = oauthProperties;
            return this;
        }
        @CustomType.Setter
        public Builder portNumber(Integer portNumber) {
            if (portNumber == null) {
              throw new MissingRequiredPropertyException("ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoData", "portNumber");
            }
            this.portNumber = portNumber;
            return this;
        }
        @CustomType.Setter
        public Builder privateLinkServiceName(@Nullable String privateLinkServiceName) {

            this.privateLinkServiceName = privateLinkServiceName;
            return this;
        }
        public ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoData build() {
            final var _resultValue = new ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoData();
            _resultValue.applicationHostUrl = applicationHostUrl;
            _resultValue.applicationServicePath = applicationServicePath;
            _resultValue.clientNumber = clientNumber;
            _resultValue.logonLanguage = logonLanguage;
            _resultValue.oauthProperties = oauthProperties;
            _resultValue.portNumber = portNumber;
            _resultValue.privateLinkServiceName = privateLinkServiceName;
            return _resultValue;
        }
    }
}
