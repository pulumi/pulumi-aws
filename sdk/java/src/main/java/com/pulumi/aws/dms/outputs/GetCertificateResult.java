// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.dms.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetCertificateResult {
    /**
     * @return The Amazon Resource Name (ARN) for the certificate.
     * 
     */
    private @Nullable String certificateArn;
    /**
     * @return The date that the certificate was created.
     * 
     */
    private @Nullable String certificateCreationDate;
    private String certificateId;
    /**
     * @return The owner of the certificate.
     * 
     */
    private @Nullable String certificateOwner;
    /**
     * @return The contents of a .pem file, which contains an X.509 certificate.
     * 
     */
    private @Nullable String certificatePem;
    /**
     * @return The owner of the certificate.
     * 
     */
    private @Nullable String certificateWallet;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private @Nullable String id;
    /**
     * @return The key length of the cryptographic algorithm being used.
     * 
     */
    private @Nullable Integer keyLength;
    /**
     * @return The algorithm for the certificate.
     * 
     */
    private @Nullable String signingAlgorithm;
    private @Nullable Map<String,String> tags;
    /**
     * @return The beginning date that the certificate is valid.
     * 
     */
    private @Nullable String validFromDate;
    /**
     * @return The final date that the certificate is valid.
     * 
     */
    private @Nullable String validToDate;

    private GetCertificateResult() {}
    /**
     * @return The Amazon Resource Name (ARN) for the certificate.
     * 
     */
    public Optional<String> certificateArn() {
        return Optional.ofNullable(this.certificateArn);
    }
    /**
     * @return The date that the certificate was created.
     * 
     */
    public Optional<String> certificateCreationDate() {
        return Optional.ofNullable(this.certificateCreationDate);
    }
    public String certificateId() {
        return this.certificateId;
    }
    /**
     * @return The owner of the certificate.
     * 
     */
    public Optional<String> certificateOwner() {
        return Optional.ofNullable(this.certificateOwner);
    }
    /**
     * @return The contents of a .pem file, which contains an X.509 certificate.
     * 
     */
    public Optional<String> certificatePem() {
        return Optional.ofNullable(this.certificatePem);
    }
    /**
     * @return The owner of the certificate.
     * 
     */
    public Optional<String> certificateWallet() {
        return Optional.ofNullable(this.certificateWallet);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return The key length of the cryptographic algorithm being used.
     * 
     */
    public Optional<Integer> keyLength() {
        return Optional.ofNullable(this.keyLength);
    }
    /**
     * @return The algorithm for the certificate.
     * 
     */
    public Optional<String> signingAlgorithm() {
        return Optional.ofNullable(this.signingAlgorithm);
    }
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * @return The beginning date that the certificate is valid.
     * 
     */
    public Optional<String> validFromDate() {
        return Optional.ofNullable(this.validFromDate);
    }
    /**
     * @return The final date that the certificate is valid.
     * 
     */
    public Optional<String> validToDate() {
        return Optional.ofNullable(this.validToDate);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCertificateResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String certificateArn;
        private @Nullable String certificateCreationDate;
        private String certificateId;
        private @Nullable String certificateOwner;
        private @Nullable String certificatePem;
        private @Nullable String certificateWallet;
        private @Nullable String id;
        private @Nullable Integer keyLength;
        private @Nullable String signingAlgorithm;
        private @Nullable Map<String,String> tags;
        private @Nullable String validFromDate;
        private @Nullable String validToDate;
        public Builder() {}
        public Builder(GetCertificateResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.certificateArn = defaults.certificateArn;
    	      this.certificateCreationDate = defaults.certificateCreationDate;
    	      this.certificateId = defaults.certificateId;
    	      this.certificateOwner = defaults.certificateOwner;
    	      this.certificatePem = defaults.certificatePem;
    	      this.certificateWallet = defaults.certificateWallet;
    	      this.id = defaults.id;
    	      this.keyLength = defaults.keyLength;
    	      this.signingAlgorithm = defaults.signingAlgorithm;
    	      this.tags = defaults.tags;
    	      this.validFromDate = defaults.validFromDate;
    	      this.validToDate = defaults.validToDate;
        }

        @CustomType.Setter
        public Builder certificateArn(@Nullable String certificateArn) {
            this.certificateArn = certificateArn;
            return this;
        }
        @CustomType.Setter
        public Builder certificateCreationDate(@Nullable String certificateCreationDate) {
            this.certificateCreationDate = certificateCreationDate;
            return this;
        }
        @CustomType.Setter
        public Builder certificateId(String certificateId) {
            this.certificateId = Objects.requireNonNull(certificateId);
            return this;
        }
        @CustomType.Setter
        public Builder certificateOwner(@Nullable String certificateOwner) {
            this.certificateOwner = certificateOwner;
            return this;
        }
        @CustomType.Setter
        public Builder certificatePem(@Nullable String certificatePem) {
            this.certificatePem = certificatePem;
            return this;
        }
        @CustomType.Setter
        public Builder certificateWallet(@Nullable String certificateWallet) {
            this.certificateWallet = certificateWallet;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder keyLength(@Nullable Integer keyLength) {
            this.keyLength = keyLength;
            return this;
        }
        @CustomType.Setter
        public Builder signingAlgorithm(@Nullable String signingAlgorithm) {
            this.signingAlgorithm = signingAlgorithm;
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder validFromDate(@Nullable String validFromDate) {
            this.validFromDate = validFromDate;
            return this;
        }
        @CustomType.Setter
        public Builder validToDate(@Nullable String validToDate) {
            this.validToDate = validToDate;
            return this;
        }
        public GetCertificateResult build() {
            final var o = new GetCertificateResult();
            o.certificateArn = certificateArn;
            o.certificateCreationDate = certificateCreationDate;
            o.certificateId = certificateId;
            o.certificateOwner = certificateOwner;
            o.certificatePem = certificatePem;
            o.certificateWallet = certificateWallet;
            o.id = id;
            o.keyLength = keyLength;
            o.signingAlgorithm = signingAlgorithm;
            o.tags = tags;
            o.validFromDate = validFromDate;
            o.validToDate = validToDate;
            return o;
        }
    }
}
