// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.odb.outputs;

import com.pulumi.aws.odb.outputs.GetCloudExadataInfrastructureCustomerContactsToSendToOci;
import com.pulumi.aws.odb.outputs.GetCloudExadataInfrastructureMaintenanceWindow;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetCloudExadataInfrastructureResult {
    /**
     * @return The number of storage servers requested for the Exadata infrastructure.
     * 
     */
    private Integer activatedStorageCount;
    /**
     * @return The number of storage servers requested for the Exadata infrastructure.
     * 
     */
    private Integer additionalStorageCount;
    /**
     * @return The Amazon Resource Name (ARN) for the Exadata infrastructure.
     * 
     */
    private String arn;
    /**
     * @return The name of the Availability Zone (AZ) where the Exadata infrastructure is located.
     * 
     */
    private String availabilityZone;
    /**
     * @return The AZ ID of the AZ where the Exadata infrastructure is located.
     * 
     */
    private String availabilityZoneId;
    private Integer availableStorageSizeInGbs;
    /**
     * @return The number of database servers for the Exadata infrastructure.
     * 
     */
    private Integer computeCount;
    /**
     * @return The OCI compute model used when you create or clone an instance: ECPU or OCPU. An ECPU is an abstracted measure of compute resources. ECPUs are based on the number of cores elastically allocated from a pool of compute and storage servers. An OCPU is a legacy physical measure of compute resources. OCPUs are based on the physical core of a processor with hyper-threading enabled.
     * 
     */
    private String computeModel;
    /**
     * @return The total number of CPU cores that are allocated to the Exadata infrastructure.
     * 
     */
    private Integer cpuCount;
    /**
     * @return The time when the Exadata infrastructure was created.
     * 
     */
    private String createdAt;
    private List<GetCloudExadataInfrastructureCustomerContactsToSendToOci> customerContactsToSendToOcis;
    /**
     * @return The size of the Exadata infrastructure&#39;s data disk group, in terabytes (TB).
     * 
     */
    private Double dataStorageSizeInTbs;
    /**
     * @return The database server model type of the Exadata infrastructure. For the list of valid model names, use the ListDbSystemShapes operation.
     * 
     */
    private String databaseServerType;
    /**
     * @return The size of the storage available on each database node, in gigabytes (GB).
     * 
     */
    private Integer dbNodeStorageSizeInGbs;
    /**
     * @return The version of the Exadata infrastructure.
     * 
     */
    private String dbServerVersion;
    /**
     * @return The display name of the Exadata infrastructure.
     * 
     */
    private String displayName;
    /**
     * @return The unique identifier of the Exadata infrastructure.
     * 
     */
    private String id;
    /**
     * @return The Oracle Cloud Identifier (OCID) of the last maintenance run for the Exadata infrastructure.
     * 
     */
    private String lastMaintenanceRunId;
    /**
     * @return The scheduling details of the maintenance window. Patching and system updates take place during the maintenance window.
     * 
     */
    private List<GetCloudExadataInfrastructureMaintenanceWindow> maintenanceWindows;
    /**
     * @return The total number of CPU cores available on the Exadata infrastructure.
     * 
     */
    private Integer maxCpuCount;
    /**
     * @return The total amount of data disk group storage, in terabytes (TB), that&#39;s available on the Exadata infrastructure.
     * 
     */
    private Double maxDataStorageInTbs;
    /**
     * @return The total amount of local node storage, in gigabytes (GB), that&#39;s available on the Exadata infrastructure.
     * 
     */
    private Integer maxDbNodeStorageSizeInGbs;
    /**
     * @return The total amount of memory, in gigabytes (GB), that&#39;s available on the Exadata infrastructure.
     * 
     */
    private Integer maxMemoryInGbs;
    /**
     * @return The amount of memory, in gigabytes (GB), that&#39;s allocated on the Exadata infrastructure.
     * 
     */
    private Integer memorySizeInGbs;
    /**
     * @return The monthly software version of the database servers installed on the Exadata infrastructure.
     * 
     */
    private String monthlyDbServerVersion;
    /**
     * @return The monthly software version of the storage servers installed on the Exadata infrastructure.
     * 
     */
    private String monthlyStorageServerVersion;
    /**
     * @return The OCID of the next maintenance run for the Exadata infrastructure.
     * 
     */
    private String nextMaintenanceRunId;
    /**
     * @return The name of the OCI resource anchor for the Exadata infrastructure.
     * 
     */
    private String ociResourceAnchorName;
    /**
     * @return The HTTPS link to the Exadata infrastructure in OCI.
     * 
     */
    private String ociUrl;
    /**
     * @return The OCID of the Exadata infrastructure in OCI.
     * 
     */
    private String ocid;
    /**
     * @return The amount of progress made on the current operation on the Exadata infrastructure expressed as a percentage.
     * 
     */
    private Double percentProgress;
    private String region;
    /**
     * @return The model name of the Exadata infrastructure.
     * 
     */
    private String shape;
    /**
     * @return The status of the Exadata infrastructure.
     * 
     */
    private String status;
    /**
     * @return Additional information about the status of the Exadata infrastructure.
     * 
     */
    private String statusReason;
    /**
     * @return The number of storage servers that are activated for the Exadata infrastructure.
     * 
     */
    private Integer storageCount;
    /**
     * @return The storage server model type of the Exadata infrastructure. For the list of valid model names, use the ListDbSystemShapes operation.
     * 
     */
    private String storageServerType;
    /**
     * @return The software version of the storage servers on the Exadata infrastructure.
     * 
     */
    private String storageServerVersion;
    /**
     * @return (Optional) A map of tags to assign to the exadata infrastructure. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private Map<String,String> tags;
    /**
     * @return The total amount of storage, in gigabytes (GB), on the Exadata infrastructure.
     * 
     */
    private Integer totalStorageSizeInGbs;

    private GetCloudExadataInfrastructureResult() {}
    /**
     * @return The number of storage servers requested for the Exadata infrastructure.
     * 
     */
    public Integer activatedStorageCount() {
        return this.activatedStorageCount;
    }
    /**
     * @return The number of storage servers requested for the Exadata infrastructure.
     * 
     */
    public Integer additionalStorageCount() {
        return this.additionalStorageCount;
    }
    /**
     * @return The Amazon Resource Name (ARN) for the Exadata infrastructure.
     * 
     */
    public String arn() {
        return this.arn;
    }
    /**
     * @return The name of the Availability Zone (AZ) where the Exadata infrastructure is located.
     * 
     */
    public String availabilityZone() {
        return this.availabilityZone;
    }
    /**
     * @return The AZ ID of the AZ where the Exadata infrastructure is located.
     * 
     */
    public String availabilityZoneId() {
        return this.availabilityZoneId;
    }
    public Integer availableStorageSizeInGbs() {
        return this.availableStorageSizeInGbs;
    }
    /**
     * @return The number of database servers for the Exadata infrastructure.
     * 
     */
    public Integer computeCount() {
        return this.computeCount;
    }
    /**
     * @return The OCI compute model used when you create or clone an instance: ECPU or OCPU. An ECPU is an abstracted measure of compute resources. ECPUs are based on the number of cores elastically allocated from a pool of compute and storage servers. An OCPU is a legacy physical measure of compute resources. OCPUs are based on the physical core of a processor with hyper-threading enabled.
     * 
     */
    public String computeModel() {
        return this.computeModel;
    }
    /**
     * @return The total number of CPU cores that are allocated to the Exadata infrastructure.
     * 
     */
    public Integer cpuCount() {
        return this.cpuCount;
    }
    /**
     * @return The time when the Exadata infrastructure was created.
     * 
     */
    public String createdAt() {
        return this.createdAt;
    }
    public List<GetCloudExadataInfrastructureCustomerContactsToSendToOci> customerContactsToSendToOcis() {
        return this.customerContactsToSendToOcis;
    }
    /**
     * @return The size of the Exadata infrastructure&#39;s data disk group, in terabytes (TB).
     * 
     */
    public Double dataStorageSizeInTbs() {
        return this.dataStorageSizeInTbs;
    }
    /**
     * @return The database server model type of the Exadata infrastructure. For the list of valid model names, use the ListDbSystemShapes operation.
     * 
     */
    public String databaseServerType() {
        return this.databaseServerType;
    }
    /**
     * @return The size of the storage available on each database node, in gigabytes (GB).
     * 
     */
    public Integer dbNodeStorageSizeInGbs() {
        return this.dbNodeStorageSizeInGbs;
    }
    /**
     * @return The version of the Exadata infrastructure.
     * 
     */
    public String dbServerVersion() {
        return this.dbServerVersion;
    }
    /**
     * @return The display name of the Exadata infrastructure.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return The unique identifier of the Exadata infrastructure.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The Oracle Cloud Identifier (OCID) of the last maintenance run for the Exadata infrastructure.
     * 
     */
    public String lastMaintenanceRunId() {
        return this.lastMaintenanceRunId;
    }
    /**
     * @return The scheduling details of the maintenance window. Patching and system updates take place during the maintenance window.
     * 
     */
    public List<GetCloudExadataInfrastructureMaintenanceWindow> maintenanceWindows() {
        return this.maintenanceWindows;
    }
    /**
     * @return The total number of CPU cores available on the Exadata infrastructure.
     * 
     */
    public Integer maxCpuCount() {
        return this.maxCpuCount;
    }
    /**
     * @return The total amount of data disk group storage, in terabytes (TB), that&#39;s available on the Exadata infrastructure.
     * 
     */
    public Double maxDataStorageInTbs() {
        return this.maxDataStorageInTbs;
    }
    /**
     * @return The total amount of local node storage, in gigabytes (GB), that&#39;s available on the Exadata infrastructure.
     * 
     */
    public Integer maxDbNodeStorageSizeInGbs() {
        return this.maxDbNodeStorageSizeInGbs;
    }
    /**
     * @return The total amount of memory, in gigabytes (GB), that&#39;s available on the Exadata infrastructure.
     * 
     */
    public Integer maxMemoryInGbs() {
        return this.maxMemoryInGbs;
    }
    /**
     * @return The amount of memory, in gigabytes (GB), that&#39;s allocated on the Exadata infrastructure.
     * 
     */
    public Integer memorySizeInGbs() {
        return this.memorySizeInGbs;
    }
    /**
     * @return The monthly software version of the database servers installed on the Exadata infrastructure.
     * 
     */
    public String monthlyDbServerVersion() {
        return this.monthlyDbServerVersion;
    }
    /**
     * @return The monthly software version of the storage servers installed on the Exadata infrastructure.
     * 
     */
    public String monthlyStorageServerVersion() {
        return this.monthlyStorageServerVersion;
    }
    /**
     * @return The OCID of the next maintenance run for the Exadata infrastructure.
     * 
     */
    public String nextMaintenanceRunId() {
        return this.nextMaintenanceRunId;
    }
    /**
     * @return The name of the OCI resource anchor for the Exadata infrastructure.
     * 
     */
    public String ociResourceAnchorName() {
        return this.ociResourceAnchorName;
    }
    /**
     * @return The HTTPS link to the Exadata infrastructure in OCI.
     * 
     */
    public String ociUrl() {
        return this.ociUrl;
    }
    /**
     * @return The OCID of the Exadata infrastructure in OCI.
     * 
     */
    public String ocid() {
        return this.ocid;
    }
    /**
     * @return The amount of progress made on the current operation on the Exadata infrastructure expressed as a percentage.
     * 
     */
    public Double percentProgress() {
        return this.percentProgress;
    }
    public String region() {
        return this.region;
    }
    /**
     * @return The model name of the Exadata infrastructure.
     * 
     */
    public String shape() {
        return this.shape;
    }
    /**
     * @return The status of the Exadata infrastructure.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return Additional information about the status of the Exadata infrastructure.
     * 
     */
    public String statusReason() {
        return this.statusReason;
    }
    /**
     * @return The number of storage servers that are activated for the Exadata infrastructure.
     * 
     */
    public Integer storageCount() {
        return this.storageCount;
    }
    /**
     * @return The storage server model type of the Exadata infrastructure. For the list of valid model names, use the ListDbSystemShapes operation.
     * 
     */
    public String storageServerType() {
        return this.storageServerType;
    }
    /**
     * @return The software version of the storage servers on the Exadata infrastructure.
     * 
     */
    public String storageServerVersion() {
        return this.storageServerVersion;
    }
    /**
     * @return (Optional) A map of tags to assign to the exadata infrastructure. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }
    /**
     * @return The total amount of storage, in gigabytes (GB), on the Exadata infrastructure.
     * 
     */
    public Integer totalStorageSizeInGbs() {
        return this.totalStorageSizeInGbs;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCloudExadataInfrastructureResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer activatedStorageCount;
        private Integer additionalStorageCount;
        private String arn;
        private String availabilityZone;
        private String availabilityZoneId;
        private Integer availableStorageSizeInGbs;
        private Integer computeCount;
        private String computeModel;
        private Integer cpuCount;
        private String createdAt;
        private List<GetCloudExadataInfrastructureCustomerContactsToSendToOci> customerContactsToSendToOcis;
        private Double dataStorageSizeInTbs;
        private String databaseServerType;
        private Integer dbNodeStorageSizeInGbs;
        private String dbServerVersion;
        private String displayName;
        private String id;
        private String lastMaintenanceRunId;
        private List<GetCloudExadataInfrastructureMaintenanceWindow> maintenanceWindows;
        private Integer maxCpuCount;
        private Double maxDataStorageInTbs;
        private Integer maxDbNodeStorageSizeInGbs;
        private Integer maxMemoryInGbs;
        private Integer memorySizeInGbs;
        private String monthlyDbServerVersion;
        private String monthlyStorageServerVersion;
        private String nextMaintenanceRunId;
        private String ociResourceAnchorName;
        private String ociUrl;
        private String ocid;
        private Double percentProgress;
        private String region;
        private String shape;
        private String status;
        private String statusReason;
        private Integer storageCount;
        private String storageServerType;
        private String storageServerVersion;
        private Map<String,String> tags;
        private Integer totalStorageSizeInGbs;
        public Builder() {}
        public Builder(GetCloudExadataInfrastructureResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.activatedStorageCount = defaults.activatedStorageCount;
    	      this.additionalStorageCount = defaults.additionalStorageCount;
    	      this.arn = defaults.arn;
    	      this.availabilityZone = defaults.availabilityZone;
    	      this.availabilityZoneId = defaults.availabilityZoneId;
    	      this.availableStorageSizeInGbs = defaults.availableStorageSizeInGbs;
    	      this.computeCount = defaults.computeCount;
    	      this.computeModel = defaults.computeModel;
    	      this.cpuCount = defaults.cpuCount;
    	      this.createdAt = defaults.createdAt;
    	      this.customerContactsToSendToOcis = defaults.customerContactsToSendToOcis;
    	      this.dataStorageSizeInTbs = defaults.dataStorageSizeInTbs;
    	      this.databaseServerType = defaults.databaseServerType;
    	      this.dbNodeStorageSizeInGbs = defaults.dbNodeStorageSizeInGbs;
    	      this.dbServerVersion = defaults.dbServerVersion;
    	      this.displayName = defaults.displayName;
    	      this.id = defaults.id;
    	      this.lastMaintenanceRunId = defaults.lastMaintenanceRunId;
    	      this.maintenanceWindows = defaults.maintenanceWindows;
    	      this.maxCpuCount = defaults.maxCpuCount;
    	      this.maxDataStorageInTbs = defaults.maxDataStorageInTbs;
    	      this.maxDbNodeStorageSizeInGbs = defaults.maxDbNodeStorageSizeInGbs;
    	      this.maxMemoryInGbs = defaults.maxMemoryInGbs;
    	      this.memorySizeInGbs = defaults.memorySizeInGbs;
    	      this.monthlyDbServerVersion = defaults.monthlyDbServerVersion;
    	      this.monthlyStorageServerVersion = defaults.monthlyStorageServerVersion;
    	      this.nextMaintenanceRunId = defaults.nextMaintenanceRunId;
    	      this.ociResourceAnchorName = defaults.ociResourceAnchorName;
    	      this.ociUrl = defaults.ociUrl;
    	      this.ocid = defaults.ocid;
    	      this.percentProgress = defaults.percentProgress;
    	      this.region = defaults.region;
    	      this.shape = defaults.shape;
    	      this.status = defaults.status;
    	      this.statusReason = defaults.statusReason;
    	      this.storageCount = defaults.storageCount;
    	      this.storageServerType = defaults.storageServerType;
    	      this.storageServerVersion = defaults.storageServerVersion;
    	      this.tags = defaults.tags;
    	      this.totalStorageSizeInGbs = defaults.totalStorageSizeInGbs;
        }

        @CustomType.Setter
        public Builder activatedStorageCount(Integer activatedStorageCount) {
            if (activatedStorageCount == null) {
              throw new MissingRequiredPropertyException("GetCloudExadataInfrastructureResult", "activatedStorageCount");
            }
            this.activatedStorageCount = activatedStorageCount;
            return this;
        }
        @CustomType.Setter
        public Builder additionalStorageCount(Integer additionalStorageCount) {
            if (additionalStorageCount == null) {
              throw new MissingRequiredPropertyException("GetCloudExadataInfrastructureResult", "additionalStorageCount");
            }
            this.additionalStorageCount = additionalStorageCount;
            return this;
        }
        @CustomType.Setter
        public Builder arn(String arn) {
            if (arn == null) {
              throw new MissingRequiredPropertyException("GetCloudExadataInfrastructureResult", "arn");
            }
            this.arn = arn;
            return this;
        }
        @CustomType.Setter
        public Builder availabilityZone(String availabilityZone) {
            if (availabilityZone == null) {
              throw new MissingRequiredPropertyException("GetCloudExadataInfrastructureResult", "availabilityZone");
            }
            this.availabilityZone = availabilityZone;
            return this;
        }
        @CustomType.Setter
        public Builder availabilityZoneId(String availabilityZoneId) {
            if (availabilityZoneId == null) {
              throw new MissingRequiredPropertyException("GetCloudExadataInfrastructureResult", "availabilityZoneId");
            }
            this.availabilityZoneId = availabilityZoneId;
            return this;
        }
        @CustomType.Setter
        public Builder availableStorageSizeInGbs(Integer availableStorageSizeInGbs) {
            if (availableStorageSizeInGbs == null) {
              throw new MissingRequiredPropertyException("GetCloudExadataInfrastructureResult", "availableStorageSizeInGbs");
            }
            this.availableStorageSizeInGbs = availableStorageSizeInGbs;
            return this;
        }
        @CustomType.Setter
        public Builder computeCount(Integer computeCount) {
            if (computeCount == null) {
              throw new MissingRequiredPropertyException("GetCloudExadataInfrastructureResult", "computeCount");
            }
            this.computeCount = computeCount;
            return this;
        }
        @CustomType.Setter
        public Builder computeModel(String computeModel) {
            if (computeModel == null) {
              throw new MissingRequiredPropertyException("GetCloudExadataInfrastructureResult", "computeModel");
            }
            this.computeModel = computeModel;
            return this;
        }
        @CustomType.Setter
        public Builder cpuCount(Integer cpuCount) {
            if (cpuCount == null) {
              throw new MissingRequiredPropertyException("GetCloudExadataInfrastructureResult", "cpuCount");
            }
            this.cpuCount = cpuCount;
            return this;
        }
        @CustomType.Setter
        public Builder createdAt(String createdAt) {
            if (createdAt == null) {
              throw new MissingRequiredPropertyException("GetCloudExadataInfrastructureResult", "createdAt");
            }
            this.createdAt = createdAt;
            return this;
        }
        @CustomType.Setter
        public Builder customerContactsToSendToOcis(List<GetCloudExadataInfrastructureCustomerContactsToSendToOci> customerContactsToSendToOcis) {
            if (customerContactsToSendToOcis == null) {
              throw new MissingRequiredPropertyException("GetCloudExadataInfrastructureResult", "customerContactsToSendToOcis");
            }
            this.customerContactsToSendToOcis = customerContactsToSendToOcis;
            return this;
        }
        public Builder customerContactsToSendToOcis(GetCloudExadataInfrastructureCustomerContactsToSendToOci... customerContactsToSendToOcis) {
            return customerContactsToSendToOcis(List.of(customerContactsToSendToOcis));
        }
        @CustomType.Setter
        public Builder dataStorageSizeInTbs(Double dataStorageSizeInTbs) {
            if (dataStorageSizeInTbs == null) {
              throw new MissingRequiredPropertyException("GetCloudExadataInfrastructureResult", "dataStorageSizeInTbs");
            }
            this.dataStorageSizeInTbs = dataStorageSizeInTbs;
            return this;
        }
        @CustomType.Setter
        public Builder databaseServerType(String databaseServerType) {
            if (databaseServerType == null) {
              throw new MissingRequiredPropertyException("GetCloudExadataInfrastructureResult", "databaseServerType");
            }
            this.databaseServerType = databaseServerType;
            return this;
        }
        @CustomType.Setter
        public Builder dbNodeStorageSizeInGbs(Integer dbNodeStorageSizeInGbs) {
            if (dbNodeStorageSizeInGbs == null) {
              throw new MissingRequiredPropertyException("GetCloudExadataInfrastructureResult", "dbNodeStorageSizeInGbs");
            }
            this.dbNodeStorageSizeInGbs = dbNodeStorageSizeInGbs;
            return this;
        }
        @CustomType.Setter
        public Builder dbServerVersion(String dbServerVersion) {
            if (dbServerVersion == null) {
              throw new MissingRequiredPropertyException("GetCloudExadataInfrastructureResult", "dbServerVersion");
            }
            this.dbServerVersion = dbServerVersion;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetCloudExadataInfrastructureResult", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetCloudExadataInfrastructureResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder lastMaintenanceRunId(String lastMaintenanceRunId) {
            if (lastMaintenanceRunId == null) {
              throw new MissingRequiredPropertyException("GetCloudExadataInfrastructureResult", "lastMaintenanceRunId");
            }
            this.lastMaintenanceRunId = lastMaintenanceRunId;
            return this;
        }
        @CustomType.Setter
        public Builder maintenanceWindows(List<GetCloudExadataInfrastructureMaintenanceWindow> maintenanceWindows) {
            if (maintenanceWindows == null) {
              throw new MissingRequiredPropertyException("GetCloudExadataInfrastructureResult", "maintenanceWindows");
            }
            this.maintenanceWindows = maintenanceWindows;
            return this;
        }
        public Builder maintenanceWindows(GetCloudExadataInfrastructureMaintenanceWindow... maintenanceWindows) {
            return maintenanceWindows(List.of(maintenanceWindows));
        }
        @CustomType.Setter
        public Builder maxCpuCount(Integer maxCpuCount) {
            if (maxCpuCount == null) {
              throw new MissingRequiredPropertyException("GetCloudExadataInfrastructureResult", "maxCpuCount");
            }
            this.maxCpuCount = maxCpuCount;
            return this;
        }
        @CustomType.Setter
        public Builder maxDataStorageInTbs(Double maxDataStorageInTbs) {
            if (maxDataStorageInTbs == null) {
              throw new MissingRequiredPropertyException("GetCloudExadataInfrastructureResult", "maxDataStorageInTbs");
            }
            this.maxDataStorageInTbs = maxDataStorageInTbs;
            return this;
        }
        @CustomType.Setter
        public Builder maxDbNodeStorageSizeInGbs(Integer maxDbNodeStorageSizeInGbs) {
            if (maxDbNodeStorageSizeInGbs == null) {
              throw new MissingRequiredPropertyException("GetCloudExadataInfrastructureResult", "maxDbNodeStorageSizeInGbs");
            }
            this.maxDbNodeStorageSizeInGbs = maxDbNodeStorageSizeInGbs;
            return this;
        }
        @CustomType.Setter
        public Builder maxMemoryInGbs(Integer maxMemoryInGbs) {
            if (maxMemoryInGbs == null) {
              throw new MissingRequiredPropertyException("GetCloudExadataInfrastructureResult", "maxMemoryInGbs");
            }
            this.maxMemoryInGbs = maxMemoryInGbs;
            return this;
        }
        @CustomType.Setter
        public Builder memorySizeInGbs(Integer memorySizeInGbs) {
            if (memorySizeInGbs == null) {
              throw new MissingRequiredPropertyException("GetCloudExadataInfrastructureResult", "memorySizeInGbs");
            }
            this.memorySizeInGbs = memorySizeInGbs;
            return this;
        }
        @CustomType.Setter
        public Builder monthlyDbServerVersion(String monthlyDbServerVersion) {
            if (monthlyDbServerVersion == null) {
              throw new MissingRequiredPropertyException("GetCloudExadataInfrastructureResult", "monthlyDbServerVersion");
            }
            this.monthlyDbServerVersion = monthlyDbServerVersion;
            return this;
        }
        @CustomType.Setter
        public Builder monthlyStorageServerVersion(String monthlyStorageServerVersion) {
            if (monthlyStorageServerVersion == null) {
              throw new MissingRequiredPropertyException("GetCloudExadataInfrastructureResult", "monthlyStorageServerVersion");
            }
            this.monthlyStorageServerVersion = monthlyStorageServerVersion;
            return this;
        }
        @CustomType.Setter
        public Builder nextMaintenanceRunId(String nextMaintenanceRunId) {
            if (nextMaintenanceRunId == null) {
              throw new MissingRequiredPropertyException("GetCloudExadataInfrastructureResult", "nextMaintenanceRunId");
            }
            this.nextMaintenanceRunId = nextMaintenanceRunId;
            return this;
        }
        @CustomType.Setter
        public Builder ociResourceAnchorName(String ociResourceAnchorName) {
            if (ociResourceAnchorName == null) {
              throw new MissingRequiredPropertyException("GetCloudExadataInfrastructureResult", "ociResourceAnchorName");
            }
            this.ociResourceAnchorName = ociResourceAnchorName;
            return this;
        }
        @CustomType.Setter
        public Builder ociUrl(String ociUrl) {
            if (ociUrl == null) {
              throw new MissingRequiredPropertyException("GetCloudExadataInfrastructureResult", "ociUrl");
            }
            this.ociUrl = ociUrl;
            return this;
        }
        @CustomType.Setter
        public Builder ocid(String ocid) {
            if (ocid == null) {
              throw new MissingRequiredPropertyException("GetCloudExadataInfrastructureResult", "ocid");
            }
            this.ocid = ocid;
            return this;
        }
        @CustomType.Setter
        public Builder percentProgress(Double percentProgress) {
            if (percentProgress == null) {
              throw new MissingRequiredPropertyException("GetCloudExadataInfrastructureResult", "percentProgress");
            }
            this.percentProgress = percentProgress;
            return this;
        }
        @CustomType.Setter
        public Builder region(String region) {
            if (region == null) {
              throw new MissingRequiredPropertyException("GetCloudExadataInfrastructureResult", "region");
            }
            this.region = region;
            return this;
        }
        @CustomType.Setter
        public Builder shape(String shape) {
            if (shape == null) {
              throw new MissingRequiredPropertyException("GetCloudExadataInfrastructureResult", "shape");
            }
            this.shape = shape;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetCloudExadataInfrastructureResult", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder statusReason(String statusReason) {
            if (statusReason == null) {
              throw new MissingRequiredPropertyException("GetCloudExadataInfrastructureResult", "statusReason");
            }
            this.statusReason = statusReason;
            return this;
        }
        @CustomType.Setter
        public Builder storageCount(Integer storageCount) {
            if (storageCount == null) {
              throw new MissingRequiredPropertyException("GetCloudExadataInfrastructureResult", "storageCount");
            }
            this.storageCount = storageCount;
            return this;
        }
        @CustomType.Setter
        public Builder storageServerType(String storageServerType) {
            if (storageServerType == null) {
              throw new MissingRequiredPropertyException("GetCloudExadataInfrastructureResult", "storageServerType");
            }
            this.storageServerType = storageServerType;
            return this;
        }
        @CustomType.Setter
        public Builder storageServerVersion(String storageServerVersion) {
            if (storageServerVersion == null) {
              throw new MissingRequiredPropertyException("GetCloudExadataInfrastructureResult", "storageServerVersion");
            }
            this.storageServerVersion = storageServerVersion;
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetCloudExadataInfrastructureResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder totalStorageSizeInGbs(Integer totalStorageSizeInGbs) {
            if (totalStorageSizeInGbs == null) {
              throw new MissingRequiredPropertyException("GetCloudExadataInfrastructureResult", "totalStorageSizeInGbs");
            }
            this.totalStorageSizeInGbs = totalStorageSizeInGbs;
            return this;
        }
        public GetCloudExadataInfrastructureResult build() {
            final var _resultValue = new GetCloudExadataInfrastructureResult();
            _resultValue.activatedStorageCount = activatedStorageCount;
            _resultValue.additionalStorageCount = additionalStorageCount;
            _resultValue.arn = arn;
            _resultValue.availabilityZone = availabilityZone;
            _resultValue.availabilityZoneId = availabilityZoneId;
            _resultValue.availableStorageSizeInGbs = availableStorageSizeInGbs;
            _resultValue.computeCount = computeCount;
            _resultValue.computeModel = computeModel;
            _resultValue.cpuCount = cpuCount;
            _resultValue.createdAt = createdAt;
            _resultValue.customerContactsToSendToOcis = customerContactsToSendToOcis;
            _resultValue.dataStorageSizeInTbs = dataStorageSizeInTbs;
            _resultValue.databaseServerType = databaseServerType;
            _resultValue.dbNodeStorageSizeInGbs = dbNodeStorageSizeInGbs;
            _resultValue.dbServerVersion = dbServerVersion;
            _resultValue.displayName = displayName;
            _resultValue.id = id;
            _resultValue.lastMaintenanceRunId = lastMaintenanceRunId;
            _resultValue.maintenanceWindows = maintenanceWindows;
            _resultValue.maxCpuCount = maxCpuCount;
            _resultValue.maxDataStorageInTbs = maxDataStorageInTbs;
            _resultValue.maxDbNodeStorageSizeInGbs = maxDbNodeStorageSizeInGbs;
            _resultValue.maxMemoryInGbs = maxMemoryInGbs;
            _resultValue.memorySizeInGbs = memorySizeInGbs;
            _resultValue.monthlyDbServerVersion = monthlyDbServerVersion;
            _resultValue.monthlyStorageServerVersion = monthlyStorageServerVersion;
            _resultValue.nextMaintenanceRunId = nextMaintenanceRunId;
            _resultValue.ociResourceAnchorName = ociResourceAnchorName;
            _resultValue.ociUrl = ociUrl;
            _resultValue.ocid = ocid;
            _resultValue.percentProgress = percentProgress;
            _resultValue.region = region;
            _resultValue.shape = shape;
            _resultValue.status = status;
            _resultValue.statusReason = statusReason;
            _resultValue.storageCount = storageCount;
            _resultValue.storageServerType = storageServerType;
            _resultValue.storageServerVersion = storageServerVersion;
            _resultValue.tags = tags;
            _resultValue.totalStorageSizeInGbs = totalStorageSizeInGbs;
            return _resultValue;
        }
    }
}
