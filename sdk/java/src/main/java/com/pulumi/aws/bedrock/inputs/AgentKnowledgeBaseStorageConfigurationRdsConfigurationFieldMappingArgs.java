// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.bedrock.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class AgentKnowledgeBaseStorageConfigurationRdsConfigurationFieldMappingArgs extends com.pulumi.resources.ResourceArgs {

    public static final AgentKnowledgeBaseStorageConfigurationRdsConfigurationFieldMappingArgs Empty = new AgentKnowledgeBaseStorageConfigurationRdsConfigurationFieldMappingArgs();

    /**
     * Name of the field in which Amazon Bedrock stores metadata about the vector store.
     * 
     */
    @Import(name="metadataField", required=true)
    private Output<String> metadataField;

    /**
     * @return Name of the field in which Amazon Bedrock stores metadata about the vector store.
     * 
     */
    public Output<String> metadataField() {
        return this.metadataField;
    }

    /**
     * Name of the field in which Amazon Bedrock stores the ID for each entry.
     * 
     */
    @Import(name="primaryKeyField", required=true)
    private Output<String> primaryKeyField;

    /**
     * @return Name of the field in which Amazon Bedrock stores the ID for each entry.
     * 
     */
    public Output<String> primaryKeyField() {
        return this.primaryKeyField;
    }

    /**
     * Name of the field in which Amazon Bedrock stores the raw text from your data. The text is split according to the chunking strategy you choose.
     * 
     */
    @Import(name="textField", required=true)
    private Output<String> textField;

    /**
     * @return Name of the field in which Amazon Bedrock stores the raw text from your data. The text is split according to the chunking strategy you choose.
     * 
     */
    public Output<String> textField() {
        return this.textField;
    }

    /**
     * Name of the field in which Amazon Bedrock stores the vector embeddings for your data sources.
     * 
     */
    @Import(name="vectorField", required=true)
    private Output<String> vectorField;

    /**
     * @return Name of the field in which Amazon Bedrock stores the vector embeddings for your data sources.
     * 
     */
    public Output<String> vectorField() {
        return this.vectorField;
    }

    private AgentKnowledgeBaseStorageConfigurationRdsConfigurationFieldMappingArgs() {}

    private AgentKnowledgeBaseStorageConfigurationRdsConfigurationFieldMappingArgs(AgentKnowledgeBaseStorageConfigurationRdsConfigurationFieldMappingArgs $) {
        this.metadataField = $.metadataField;
        this.primaryKeyField = $.primaryKeyField;
        this.textField = $.textField;
        this.vectorField = $.vectorField;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AgentKnowledgeBaseStorageConfigurationRdsConfigurationFieldMappingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AgentKnowledgeBaseStorageConfigurationRdsConfigurationFieldMappingArgs $;

        public Builder() {
            $ = new AgentKnowledgeBaseStorageConfigurationRdsConfigurationFieldMappingArgs();
        }

        public Builder(AgentKnowledgeBaseStorageConfigurationRdsConfigurationFieldMappingArgs defaults) {
            $ = new AgentKnowledgeBaseStorageConfigurationRdsConfigurationFieldMappingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param metadataField Name of the field in which Amazon Bedrock stores metadata about the vector store.
         * 
         * @return builder
         * 
         */
        public Builder metadataField(Output<String> metadataField) {
            $.metadataField = metadataField;
            return this;
        }

        /**
         * @param metadataField Name of the field in which Amazon Bedrock stores metadata about the vector store.
         * 
         * @return builder
         * 
         */
        public Builder metadataField(String metadataField) {
            return metadataField(Output.of(metadataField));
        }

        /**
         * @param primaryKeyField Name of the field in which Amazon Bedrock stores the ID for each entry.
         * 
         * @return builder
         * 
         */
        public Builder primaryKeyField(Output<String> primaryKeyField) {
            $.primaryKeyField = primaryKeyField;
            return this;
        }

        /**
         * @param primaryKeyField Name of the field in which Amazon Bedrock stores the ID for each entry.
         * 
         * @return builder
         * 
         */
        public Builder primaryKeyField(String primaryKeyField) {
            return primaryKeyField(Output.of(primaryKeyField));
        }

        /**
         * @param textField Name of the field in which Amazon Bedrock stores the raw text from your data. The text is split according to the chunking strategy you choose.
         * 
         * @return builder
         * 
         */
        public Builder textField(Output<String> textField) {
            $.textField = textField;
            return this;
        }

        /**
         * @param textField Name of the field in which Amazon Bedrock stores the raw text from your data. The text is split according to the chunking strategy you choose.
         * 
         * @return builder
         * 
         */
        public Builder textField(String textField) {
            return textField(Output.of(textField));
        }

        /**
         * @param vectorField Name of the field in which Amazon Bedrock stores the vector embeddings for your data sources.
         * 
         * @return builder
         * 
         */
        public Builder vectorField(Output<String> vectorField) {
            $.vectorField = vectorField;
            return this;
        }

        /**
         * @param vectorField Name of the field in which Amazon Bedrock stores the vector embeddings for your data sources.
         * 
         * @return builder
         * 
         */
        public Builder vectorField(String vectorField) {
            return vectorField(Output.of(vectorField));
        }

        public AgentKnowledgeBaseStorageConfigurationRdsConfigurationFieldMappingArgs build() {
            if ($.metadataField == null) {
                throw new MissingRequiredPropertyException("AgentKnowledgeBaseStorageConfigurationRdsConfigurationFieldMappingArgs", "metadataField");
            }
            if ($.primaryKeyField == null) {
                throw new MissingRequiredPropertyException("AgentKnowledgeBaseStorageConfigurationRdsConfigurationFieldMappingArgs", "primaryKeyField");
            }
            if ($.textField == null) {
                throw new MissingRequiredPropertyException("AgentKnowledgeBaseStorageConfigurationRdsConfigurationFieldMappingArgs", "textField");
            }
            if ($.vectorField == null) {
                throw new MissingRequiredPropertyException("AgentKnowledgeBaseStorageConfigurationRdsConfigurationFieldMappingArgs", "vectorField");
            }
            return $;
        }
    }

}
