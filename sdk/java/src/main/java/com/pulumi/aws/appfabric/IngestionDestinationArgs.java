// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.appfabric;

import com.pulumi.aws.appfabric.inputs.IngestionDestinationDestinationConfigurationArgs;
import com.pulumi.aws.appfabric.inputs.IngestionDestinationProcessingConfigurationArgs;
import com.pulumi.aws.appfabric.inputs.IngestionDestinationTimeoutsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IngestionDestinationArgs extends com.pulumi.resources.ResourceArgs {

    public static final IngestionDestinationArgs Empty = new IngestionDestinationArgs();

    /**
     * The Amazon Resource Name (ARN) of the app bundle to use for the request.
     * 
     */
    @Import(name="appBundleArn", required=true)
    private Output<String> appBundleArn;

    /**
     * @return The Amazon Resource Name (ARN) of the app bundle to use for the request.
     * 
     */
    public Output<String> appBundleArn() {
        return this.appBundleArn;
    }

    /**
     * Contains information about the destination of ingested data.
     * 
     */
    @Import(name="destinationConfiguration")
    private @Nullable Output<IngestionDestinationDestinationConfigurationArgs> destinationConfiguration;

    /**
     * @return Contains information about the destination of ingested data.
     * 
     */
    public Optional<Output<IngestionDestinationDestinationConfigurationArgs>> destinationConfiguration() {
        return Optional.ofNullable(this.destinationConfiguration);
    }

    /**
     * The Amazon Resource Name (ARN) of the ingestion to use for the request.
     * 
     */
    @Import(name="ingestionArn", required=true)
    private Output<String> ingestionArn;

    /**
     * @return The Amazon Resource Name (ARN) of the ingestion to use for the request.
     * 
     */
    public Output<String> ingestionArn() {
        return this.ingestionArn;
    }

    /**
     * Contains information about how ingested data is processed.
     * 
     */
    @Import(name="processingConfiguration")
    private @Nullable Output<IngestionDestinationProcessingConfigurationArgs> processingConfiguration;

    /**
     * @return Contains information about how ingested data is processed.
     * 
     */
    public Optional<Output<IngestionDestinationProcessingConfigurationArgs>> processingConfiguration() {
        return Optional.ofNullable(this.processingConfiguration);
    }

    /**
     * Map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="timeouts")
    private @Nullable Output<IngestionDestinationTimeoutsArgs> timeouts;

    public Optional<Output<IngestionDestinationTimeoutsArgs>> timeouts() {
        return Optional.ofNullable(this.timeouts);
    }

    private IngestionDestinationArgs() {}

    private IngestionDestinationArgs(IngestionDestinationArgs $) {
        this.appBundleArn = $.appBundleArn;
        this.destinationConfiguration = $.destinationConfiguration;
        this.ingestionArn = $.ingestionArn;
        this.processingConfiguration = $.processingConfiguration;
        this.tags = $.tags;
        this.timeouts = $.timeouts;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IngestionDestinationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IngestionDestinationArgs $;

        public Builder() {
            $ = new IngestionDestinationArgs();
        }

        public Builder(IngestionDestinationArgs defaults) {
            $ = new IngestionDestinationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param appBundleArn The Amazon Resource Name (ARN) of the app bundle to use for the request.
         * 
         * @return builder
         * 
         */
        public Builder appBundleArn(Output<String> appBundleArn) {
            $.appBundleArn = appBundleArn;
            return this;
        }

        /**
         * @param appBundleArn The Amazon Resource Name (ARN) of the app bundle to use for the request.
         * 
         * @return builder
         * 
         */
        public Builder appBundleArn(String appBundleArn) {
            return appBundleArn(Output.of(appBundleArn));
        }

        /**
         * @param destinationConfiguration Contains information about the destination of ingested data.
         * 
         * @return builder
         * 
         */
        public Builder destinationConfiguration(@Nullable Output<IngestionDestinationDestinationConfigurationArgs> destinationConfiguration) {
            $.destinationConfiguration = destinationConfiguration;
            return this;
        }

        /**
         * @param destinationConfiguration Contains information about the destination of ingested data.
         * 
         * @return builder
         * 
         */
        public Builder destinationConfiguration(IngestionDestinationDestinationConfigurationArgs destinationConfiguration) {
            return destinationConfiguration(Output.of(destinationConfiguration));
        }

        /**
         * @param ingestionArn The Amazon Resource Name (ARN) of the ingestion to use for the request.
         * 
         * @return builder
         * 
         */
        public Builder ingestionArn(Output<String> ingestionArn) {
            $.ingestionArn = ingestionArn;
            return this;
        }

        /**
         * @param ingestionArn The Amazon Resource Name (ARN) of the ingestion to use for the request.
         * 
         * @return builder
         * 
         */
        public Builder ingestionArn(String ingestionArn) {
            return ingestionArn(Output.of(ingestionArn));
        }

        /**
         * @param processingConfiguration Contains information about how ingested data is processed.
         * 
         * @return builder
         * 
         */
        public Builder processingConfiguration(@Nullable Output<IngestionDestinationProcessingConfigurationArgs> processingConfiguration) {
            $.processingConfiguration = processingConfiguration;
            return this;
        }

        /**
         * @param processingConfiguration Contains information about how ingested data is processed.
         * 
         * @return builder
         * 
         */
        public Builder processingConfiguration(IngestionDestinationProcessingConfigurationArgs processingConfiguration) {
            return processingConfiguration(Output.of(processingConfiguration));
        }

        /**
         * @param tags Map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder timeouts(@Nullable Output<IngestionDestinationTimeoutsArgs> timeouts) {
            $.timeouts = timeouts;
            return this;
        }

        public Builder timeouts(IngestionDestinationTimeoutsArgs timeouts) {
            return timeouts(Output.of(timeouts));
        }

        public IngestionDestinationArgs build() {
            if ($.appBundleArn == null) {
                throw new MissingRequiredPropertyException("IngestionDestinationArgs", "appBundleArn");
            }
            if ($.ingestionArn == null) {
                throw new MissingRequiredPropertyException("IngestionDestinationArgs", "ingestionArn");
            }
            return $;
        }
    }

}
