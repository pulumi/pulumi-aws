// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.iam;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceSpecificCredentialArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceSpecificCredentialArgs Empty = new ServiceSpecificCredentialArgs();

    /**
     * The number of days until the service specific credential expires. This field is only valid for Bedrock API keys and must be between 1 and 36600 (approximately 100 years). When not specified, the credential will not expire.
     * 
     */
    @Import(name="credentialAgeDays")
    private @Nullable Output<Integer> credentialAgeDays;

    /**
     * @return The number of days until the service specific credential expires. This field is only valid for Bedrock API keys and must be between 1 and 36600 (approximately 100 years). When not specified, the credential will not expire.
     * 
     */
    public Optional<Output<Integer>> credentialAgeDays() {
        return Optional.ofNullable(this.credentialAgeDays);
    }

    /**
     * The name of the AWS service that is to be associated with the credentials. The service you specify here is the only service that can be accessed using these credentials. Supported services are `codecommit.amazonaws.com`, `bedrock.amazonaws.com`, and `cassandra.amazonaws.com`.
     * 
     */
    @Import(name="serviceName", required=true)
    private Output<String> serviceName;

    /**
     * @return The name of the AWS service that is to be associated with the credentials. The service you specify here is the only service that can be accessed using these credentials. Supported services are `codecommit.amazonaws.com`, `bedrock.amazonaws.com`, and `cassandra.amazonaws.com`.
     * 
     */
    public Output<String> serviceName() {
        return this.serviceName;
    }

    /**
     * The status to be assigned to the service-specific credential. Valid values are `Active`, `Inactive`, and `Expired`. Default value is `Active`. Note that `Expired` is only used for read operations and cannot be set manually.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status to be assigned to the service-specific credential. Valid values are `Active`, `Inactive`, and `Expired`. Default value is `Active`. Note that `Expired` is only used for read operations and cannot be set manually.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The name of the IAM user that is to be associated with the credentials. The new service-specific credentials have the same permissions as the associated user except that they can be used only to access the specified service.
     * 
     */
    @Import(name="userName", required=true)
    private Output<String> userName;

    /**
     * @return The name of the IAM user that is to be associated with the credentials. The new service-specific credentials have the same permissions as the associated user except that they can be used only to access the specified service.
     * 
     */
    public Output<String> userName() {
        return this.userName;
    }

    private ServiceSpecificCredentialArgs() {}

    private ServiceSpecificCredentialArgs(ServiceSpecificCredentialArgs $) {
        this.credentialAgeDays = $.credentialAgeDays;
        this.serviceName = $.serviceName;
        this.status = $.status;
        this.userName = $.userName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceSpecificCredentialArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceSpecificCredentialArgs $;

        public Builder() {
            $ = new ServiceSpecificCredentialArgs();
        }

        public Builder(ServiceSpecificCredentialArgs defaults) {
            $ = new ServiceSpecificCredentialArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param credentialAgeDays The number of days until the service specific credential expires. This field is only valid for Bedrock API keys and must be between 1 and 36600 (approximately 100 years). When not specified, the credential will not expire.
         * 
         * @return builder
         * 
         */
        public Builder credentialAgeDays(@Nullable Output<Integer> credentialAgeDays) {
            $.credentialAgeDays = credentialAgeDays;
            return this;
        }

        /**
         * @param credentialAgeDays The number of days until the service specific credential expires. This field is only valid for Bedrock API keys and must be between 1 and 36600 (approximately 100 years). When not specified, the credential will not expire.
         * 
         * @return builder
         * 
         */
        public Builder credentialAgeDays(Integer credentialAgeDays) {
            return credentialAgeDays(Output.of(credentialAgeDays));
        }

        /**
         * @param serviceName The name of the AWS service that is to be associated with the credentials. The service you specify here is the only service that can be accessed using these credentials. Supported services are `codecommit.amazonaws.com`, `bedrock.amazonaws.com`, and `cassandra.amazonaws.com`.
         * 
         * @return builder
         * 
         */
        public Builder serviceName(Output<String> serviceName) {
            $.serviceName = serviceName;
            return this;
        }

        /**
         * @param serviceName The name of the AWS service that is to be associated with the credentials. The service you specify here is the only service that can be accessed using these credentials. Supported services are `codecommit.amazonaws.com`, `bedrock.amazonaws.com`, and `cassandra.amazonaws.com`.
         * 
         * @return builder
         * 
         */
        public Builder serviceName(String serviceName) {
            return serviceName(Output.of(serviceName));
        }

        /**
         * @param status The status to be assigned to the service-specific credential. Valid values are `Active`, `Inactive`, and `Expired`. Default value is `Active`. Note that `Expired` is only used for read operations and cannot be set manually.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status to be assigned to the service-specific credential. Valid values are `Active`, `Inactive`, and `Expired`. Default value is `Active`. Note that `Expired` is only used for read operations and cannot be set manually.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param userName The name of the IAM user that is to be associated with the credentials. The new service-specific credentials have the same permissions as the associated user except that they can be used only to access the specified service.
         * 
         * @return builder
         * 
         */
        public Builder userName(Output<String> userName) {
            $.userName = userName;
            return this;
        }

        /**
         * @param userName The name of the IAM user that is to be associated with the credentials. The new service-specific credentials have the same permissions as the associated user except that they can be used only to access the specified service.
         * 
         * @return builder
         * 
         */
        public Builder userName(String userName) {
            return userName(Output.of(userName));
        }

        public ServiceSpecificCredentialArgs build() {
            if ($.serviceName == null) {
                throw new MissingRequiredPropertyException("ServiceSpecificCredentialArgs", "serviceName");
            }
            if ($.userName == null) {
                throw new MissingRequiredPropertyException("ServiceSpecificCredentialArgs", "userName");
            }
            return $;
        }
    }

}
