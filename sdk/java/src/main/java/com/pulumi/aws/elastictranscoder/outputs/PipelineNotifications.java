// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.elastictranscoder.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class PipelineNotifications {
    /**
     * @return The topic ARN for the Amazon SNS topic that you want to notify when Elastic Transcoder has finished processing a job in this pipeline.
     * 
     */
    private @Nullable String completed;
    /**
     * @return The topic ARN for the Amazon SNS topic that you want to notify when Elastic Transcoder encounters an error condition while processing a job in this pipeline.
     * 
     */
    private @Nullable String error;
    /**
     * @return The topic ARN for the Amazon Simple Notification Service (Amazon SNS) topic that you want to notify when Elastic Transcoder has started to process a job in this pipeline.
     * 
     */
    private @Nullable String progressing;
    /**
     * @return The topic ARN for the Amazon SNS topic that you want to notify when Elastic Transcoder encounters a warning condition while processing a job in this pipeline.
     * 
     * The `thumbnail_config` object specifies information about the Amazon S3 bucket in
     * which you want Elastic Transcoder to save thumbnail files: which bucket to use,
     * which users you want to have access to the files, the type of access you want
     * users to have, and the storage class that you want to assign to the files. If
     * you specify values for `content_config`, you must also specify values for
     * `thumbnail_config` even if you don&#39;t want to create thumbnails. (You control
     * whether to create thumbnails when you create a job. For more information, see
     * ThumbnailPattern in the topic Create Job.) If you specify values for
     * `content_config` and `thumbnail_config`, omit the OutputBucket object.
     * 
     */
    private @Nullable String warning;

    private PipelineNotifications() {}
    /**
     * @return The topic ARN for the Amazon SNS topic that you want to notify when Elastic Transcoder has finished processing a job in this pipeline.
     * 
     */
    public Optional<String> completed() {
        return Optional.ofNullable(this.completed);
    }
    /**
     * @return The topic ARN for the Amazon SNS topic that you want to notify when Elastic Transcoder encounters an error condition while processing a job in this pipeline.
     * 
     */
    public Optional<String> error() {
        return Optional.ofNullable(this.error);
    }
    /**
     * @return The topic ARN for the Amazon Simple Notification Service (Amazon SNS) topic that you want to notify when Elastic Transcoder has started to process a job in this pipeline.
     * 
     */
    public Optional<String> progressing() {
        return Optional.ofNullable(this.progressing);
    }
    /**
     * @return The topic ARN for the Amazon SNS topic that you want to notify when Elastic Transcoder encounters a warning condition while processing a job in this pipeline.
     * 
     * The `thumbnail_config` object specifies information about the Amazon S3 bucket in
     * which you want Elastic Transcoder to save thumbnail files: which bucket to use,
     * which users you want to have access to the files, the type of access you want
     * users to have, and the storage class that you want to assign to the files. If
     * you specify values for `content_config`, you must also specify values for
     * `thumbnail_config` even if you don&#39;t want to create thumbnails. (You control
     * whether to create thumbnails when you create a job. For more information, see
     * ThumbnailPattern in the topic Create Job.) If you specify values for
     * `content_config` and `thumbnail_config`, omit the OutputBucket object.
     * 
     */
    public Optional<String> warning() {
        return Optional.ofNullable(this.warning);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PipelineNotifications defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String completed;
        private @Nullable String error;
        private @Nullable String progressing;
        private @Nullable String warning;
        public Builder() {}
        public Builder(PipelineNotifications defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.completed = defaults.completed;
    	      this.error = defaults.error;
    	      this.progressing = defaults.progressing;
    	      this.warning = defaults.warning;
        }

        @CustomType.Setter
        public Builder completed(@Nullable String completed) {
            this.completed = completed;
            return this;
        }
        @CustomType.Setter
        public Builder error(@Nullable String error) {
            this.error = error;
            return this;
        }
        @CustomType.Setter
        public Builder progressing(@Nullable String progressing) {
            this.progressing = progressing;
            return this;
        }
        @CustomType.Setter
        public Builder warning(@Nullable String warning) {
            this.warning = warning;
            return this;
        }
        public PipelineNotifications build() {
            final var o = new PipelineNotifications();
            o.completed = completed;
            o.error = error;
            o.progressing = progressing;
            o.warning = warning;
            return o;
        }
    }
}
