// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.networkmonitor;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProbeArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProbeArgs Empty = new ProbeArgs();

    /**
     * The destination IP address. This must be either IPV4 or IPV6.
     * 
     */
    @Import(name="destination", required=true)
    private Output<String> destination;

    /**
     * @return The destination IP address. This must be either IPV4 or IPV6.
     * 
     */
    public Output<String> destination() {
        return this.destination;
    }

    /**
     * The port associated with the destination. This is required only if the protocol is TCP and must be a number between 1 and 65536.
     * 
     */
    @Import(name="destinationPort")
    private @Nullable Output<Integer> destinationPort;

    /**
     * @return The port associated with the destination. This is required only if the protocol is TCP and must be a number between 1 and 65536.
     * 
     */
    public Optional<Output<Integer>> destinationPort() {
        return Optional.ofNullable(this.destinationPort);
    }

    /**
     * The name of the monitor.
     * 
     */
    @Import(name="monitorName", required=true)
    private Output<String> monitorName;

    /**
     * @return The name of the monitor.
     * 
     */
    public Output<String> monitorName() {
        return this.monitorName;
    }

    /**
     * The size of the packets sent between the source and destination. This must be a number between 56 and 8500.
     * 
     */
    @Import(name="packetSize")
    private @Nullable Output<Integer> packetSize;

    /**
     * @return The size of the packets sent between the source and destination. This must be a number between 56 and 8500.
     * 
     */
    public Optional<Output<Integer>> packetSize() {
        return Optional.ofNullable(this.packetSize);
    }

    /**
     * The protocol used for the network traffic between the source and destination. This must be either TCP or ICMP.
     * 
     */
    @Import(name="protocol", required=true)
    private Output<String> protocol;

    /**
     * @return The protocol used for the network traffic between the source and destination. This must be either TCP or ICMP.
     * 
     */
    public Output<String> protocol() {
        return this.protocol;
    }

    /**
     * The ARN of the subnet.
     * 
     */
    @Import(name="sourceArn", required=true)
    private Output<String> sourceArn;

    /**
     * @return The ARN of the subnet.
     * 
     */
    public Output<String> sourceArn() {
        return this.sourceArn;
    }

    /**
     * Key-value tags for the monitor. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Key-value tags for the monitor. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private ProbeArgs() {}

    private ProbeArgs(ProbeArgs $) {
        this.destination = $.destination;
        this.destinationPort = $.destinationPort;
        this.monitorName = $.monitorName;
        this.packetSize = $.packetSize;
        this.protocol = $.protocol;
        this.sourceArn = $.sourceArn;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProbeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProbeArgs $;

        public Builder() {
            $ = new ProbeArgs();
        }

        public Builder(ProbeArgs defaults) {
            $ = new ProbeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param destination The destination IP address. This must be either IPV4 or IPV6.
         * 
         * @return builder
         * 
         */
        public Builder destination(Output<String> destination) {
            $.destination = destination;
            return this;
        }

        /**
         * @param destination The destination IP address. This must be either IPV4 or IPV6.
         * 
         * @return builder
         * 
         */
        public Builder destination(String destination) {
            return destination(Output.of(destination));
        }

        /**
         * @param destinationPort The port associated with the destination. This is required only if the protocol is TCP and must be a number between 1 and 65536.
         * 
         * @return builder
         * 
         */
        public Builder destinationPort(@Nullable Output<Integer> destinationPort) {
            $.destinationPort = destinationPort;
            return this;
        }

        /**
         * @param destinationPort The port associated with the destination. This is required only if the protocol is TCP and must be a number between 1 and 65536.
         * 
         * @return builder
         * 
         */
        public Builder destinationPort(Integer destinationPort) {
            return destinationPort(Output.of(destinationPort));
        }

        /**
         * @param monitorName The name of the monitor.
         * 
         * @return builder
         * 
         */
        public Builder monitorName(Output<String> monitorName) {
            $.monitorName = monitorName;
            return this;
        }

        /**
         * @param monitorName The name of the monitor.
         * 
         * @return builder
         * 
         */
        public Builder monitorName(String monitorName) {
            return monitorName(Output.of(monitorName));
        }

        /**
         * @param packetSize The size of the packets sent between the source and destination. This must be a number between 56 and 8500.
         * 
         * @return builder
         * 
         */
        public Builder packetSize(@Nullable Output<Integer> packetSize) {
            $.packetSize = packetSize;
            return this;
        }

        /**
         * @param packetSize The size of the packets sent between the source and destination. This must be a number between 56 and 8500.
         * 
         * @return builder
         * 
         */
        public Builder packetSize(Integer packetSize) {
            return packetSize(Output.of(packetSize));
        }

        /**
         * @param protocol The protocol used for the network traffic between the source and destination. This must be either TCP or ICMP.
         * 
         * @return builder
         * 
         */
        public Builder protocol(Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol The protocol used for the network traffic between the source and destination. This must be either TCP or ICMP.
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        /**
         * @param sourceArn The ARN of the subnet.
         * 
         * @return builder
         * 
         */
        public Builder sourceArn(Output<String> sourceArn) {
            $.sourceArn = sourceArn;
            return this;
        }

        /**
         * @param sourceArn The ARN of the subnet.
         * 
         * @return builder
         * 
         */
        public Builder sourceArn(String sourceArn) {
            return sourceArn(Output.of(sourceArn));
        }

        /**
         * @param tags Key-value tags for the monitor. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Key-value tags for the monitor. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public ProbeArgs build() {
            if ($.destination == null) {
                throw new MissingRequiredPropertyException("ProbeArgs", "destination");
            }
            if ($.monitorName == null) {
                throw new MissingRequiredPropertyException("ProbeArgs", "monitorName");
            }
            if ($.protocol == null) {
                throw new MissingRequiredPropertyException("ProbeArgs", "protocol");
            }
            if ($.sourceArn == null) {
                throw new MissingRequiredPropertyException("ProbeArgs", "sourceArn");
            }
            return $;
        }
    }

}
