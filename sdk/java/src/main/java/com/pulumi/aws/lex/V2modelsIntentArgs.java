// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.lex;

import com.pulumi.aws.lex.inputs.V2modelsIntentClosingSettingArgs;
import com.pulumi.aws.lex.inputs.V2modelsIntentConfirmationSettingArgs;
import com.pulumi.aws.lex.inputs.V2modelsIntentDialogCodeHookArgs;
import com.pulumi.aws.lex.inputs.V2modelsIntentFulfillmentCodeHookArgs;
import com.pulumi.aws.lex.inputs.V2modelsIntentInitialResponseSettingArgs;
import com.pulumi.aws.lex.inputs.V2modelsIntentInputContextArgs;
import com.pulumi.aws.lex.inputs.V2modelsIntentKendraConfigurationArgs;
import com.pulumi.aws.lex.inputs.V2modelsIntentOutputContextArgs;
import com.pulumi.aws.lex.inputs.V2modelsIntentSampleUtteranceArgs;
import com.pulumi.aws.lex.inputs.V2modelsIntentSlotPriorityArgs;
import com.pulumi.aws.lex.inputs.V2modelsIntentTimeoutsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class V2modelsIntentArgs extends com.pulumi.resources.ResourceArgs {

    public static final V2modelsIntentArgs Empty = new V2modelsIntentArgs();

    /**
     * Identifier of the bot associated with this intent.
     * 
     */
    @Import(name="botId", required=true)
    private Output<String> botId;

    /**
     * @return Identifier of the bot associated with this intent.
     * 
     */
    public Output<String> botId() {
        return this.botId;
    }

    /**
     * Version of the bot associated with this intent.
     * 
     */
    @Import(name="botVersion", required=true)
    private Output<String> botVersion;

    /**
     * @return Version of the bot associated with this intent.
     * 
     */
    public Output<String> botVersion() {
        return this.botVersion;
    }

    /**
     * Configuration block for the response that Amazon Lex sends to the user when the intent is closed. See `closing_setting`.
     * 
     */
    @Import(name="closingSetting")
    private @Nullable Output<V2modelsIntentClosingSettingArgs> closingSetting;

    /**
     * @return Configuration block for the response that Amazon Lex sends to the user when the intent is closed. See `closing_setting`.
     * 
     */
    public Optional<Output<V2modelsIntentClosingSettingArgs>> closingSetting() {
        return Optional.ofNullable(this.closingSetting);
    }

    @Import(name="confirmationSetting")
    private @Nullable Output<V2modelsIntentConfirmationSettingArgs> confirmationSetting;

    public Optional<Output<V2modelsIntentConfirmationSettingArgs>> confirmationSetting() {
        return Optional.ofNullable(this.confirmationSetting);
    }

    /**
     * Description of the intent. Use the description to help identify the intent in lists.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the intent. Use the description to help identify the intent in lists.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Configuration block for invoking the alias Lambda function for each user input. You can invoke this Lambda function to personalize user interaction. See `dialog_code_hook`.
     * 
     */
    @Import(name="dialogCodeHook")
    private @Nullable Output<V2modelsIntentDialogCodeHookArgs> dialogCodeHook;

    /**
     * @return Configuration block for invoking the alias Lambda function for each user input. You can invoke this Lambda function to personalize user interaction. See `dialog_code_hook`.
     * 
     */
    public Optional<Output<V2modelsIntentDialogCodeHookArgs>> dialogCodeHook() {
        return Optional.ofNullable(this.dialogCodeHook);
    }

    /**
     * Configuration block for invoking the alias Lambda function when the intent is ready for fulfillment. You can invoke this function to complete the bot&#39;s transaction with the user. See `fulfillment_code_hook`.
     * 
     */
    @Import(name="fulfillmentCodeHook")
    private @Nullable Output<V2modelsIntentFulfillmentCodeHookArgs> fulfillmentCodeHook;

    /**
     * @return Configuration block for invoking the alias Lambda function when the intent is ready for fulfillment. You can invoke this function to complete the bot&#39;s transaction with the user. See `fulfillment_code_hook`.
     * 
     */
    public Optional<Output<V2modelsIntentFulfillmentCodeHookArgs>> fulfillmentCodeHook() {
        return Optional.ofNullable(this.fulfillmentCodeHook);
    }

    /**
     * Configuration block for the response that is sent to the user at the beginning of a conversation, before eliciting slot values. See `initial_response_setting`.
     * 
     */
    @Import(name="initialResponseSetting")
    private @Nullable Output<V2modelsIntentInitialResponseSettingArgs> initialResponseSetting;

    /**
     * @return Configuration block for the response that is sent to the user at the beginning of a conversation, before eliciting slot values. See `initial_response_setting`.
     * 
     */
    public Optional<Output<V2modelsIntentInitialResponseSettingArgs>> initialResponseSetting() {
        return Optional.ofNullable(this.initialResponseSetting);
    }

    /**
     * Configuration blocks for contexts that must be active for this intent to be considered by Amazon Lex. When an intent has an input context list, Amazon Lex only considers using the intent in an interaction with the user when the specified contexts are included in the active context list for the session. If the contexts are not active, then Amazon Lex will not use the intent. A context can be automatically activated using the outputContexts property or it can be set at runtime. See `input_context`.
     * 
     */
    @Import(name="inputContexts")
    private @Nullable Output<List<V2modelsIntentInputContextArgs>> inputContexts;

    /**
     * @return Configuration blocks for contexts that must be active for this intent to be considered by Amazon Lex. When an intent has an input context list, Amazon Lex only considers using the intent in an interaction with the user when the specified contexts are included in the active context list for the session. If the contexts are not active, then Amazon Lex will not use the intent. A context can be automatically activated using the outputContexts property or it can be set at runtime. See `input_context`.
     * 
     */
    public Optional<Output<List<V2modelsIntentInputContextArgs>>> inputContexts() {
        return Optional.ofNullable(this.inputContexts);
    }

    /**
     * Configuration block for information required to use the AMAZON.KendraSearchIntent intent to connect to an Amazon Kendra index. The AMAZON.KendraSearchIntent intent is called when Amazon Lex can&#39;t determine another intent to invoke. See `kendra_configuration`.
     * 
     */
    @Import(name="kendraConfiguration")
    private @Nullable Output<V2modelsIntentKendraConfigurationArgs> kendraConfiguration;

    /**
     * @return Configuration block for information required to use the AMAZON.KendraSearchIntent intent to connect to an Amazon Kendra index. The AMAZON.KendraSearchIntent intent is called when Amazon Lex can&#39;t determine another intent to invoke. See `kendra_configuration`.
     * 
     */
    public Optional<Output<V2modelsIntentKendraConfigurationArgs>> kendraConfiguration() {
        return Optional.ofNullable(this.kendraConfiguration);
    }

    /**
     * Identifier of the language and locale where this intent is used. All of the bots, slot types, and slots used by the intent must have the same locale.
     * 
     */
    @Import(name="localeId", required=true)
    private Output<String> localeId;

    /**
     * @return Identifier of the language and locale where this intent is used. All of the bots, slot types, and slots used by the intent must have the same locale.
     * 
     */
    public Output<String> localeId() {
        return this.localeId;
    }

    /**
     * Name of the intent. Intent names must be unique in the locale that contains the intent and cannot match the name of any built-in intent.
     * 
     * The following arguments are optional:
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the intent. Intent names must be unique in the locale that contains the intent and cannot match the name of any built-in intent.
     * 
     * The following arguments are optional:
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Configuration blocks for contexts that the intent activates when it is fulfilled. You can use an output context to indicate the intents that Amazon Lex should consider for the next turn of the conversation with a customer. When you use the outputContextsList property, all of the contexts specified in the list are activated when the intent is fulfilled. You can set up to 10 output contexts. You can also set the number of conversation turns that the context should be active, or the length of time that the context should be active. See `output_context`.
     * 
     */
    @Import(name="outputContexts")
    private @Nullable Output<List<V2modelsIntentOutputContextArgs>> outputContexts;

    /**
     * @return Configuration blocks for contexts that the intent activates when it is fulfilled. You can use an output context to indicate the intents that Amazon Lex should consider for the next turn of the conversation with a customer. When you use the outputContextsList property, all of the contexts specified in the list are activated when the intent is fulfilled. You can set up to 10 output contexts. You can also set the number of conversation turns that the context should be active, or the length of time that the context should be active. See `output_context`.
     * 
     */
    public Optional<Output<List<V2modelsIntentOutputContextArgs>>> outputContexts() {
        return Optional.ofNullable(this.outputContexts);
    }

    /**
     * Identifier for the built-in intent to base this intent on.
     * 
     */
    @Import(name="parentIntentSignature")
    private @Nullable Output<String> parentIntentSignature;

    /**
     * @return Identifier for the built-in intent to base this intent on.
     * 
     */
    public Optional<Output<String>> parentIntentSignature() {
        return Optional.ofNullable(this.parentIntentSignature);
    }

    /**
     * Configuration block for strings that a user might say to signal the intent. See `sample_utterance`.
     * 
     */
    @Import(name="sampleUtterances")
    private @Nullable Output<List<V2modelsIntentSampleUtteranceArgs>> sampleUtterances;

    /**
     * @return Configuration block for strings that a user might say to signal the intent. See `sample_utterance`.
     * 
     */
    public Optional<Output<List<V2modelsIntentSampleUtteranceArgs>>> sampleUtterances() {
        return Optional.ofNullable(this.sampleUtterances);
    }

    /**
     * Configuration block for a new list of slots and their priorities that are contained by the intent. This is ignored on create and only valid for updates. See `slot_priority`.
     * 
     */
    @Import(name="slotPriorities")
    private @Nullable Output<List<V2modelsIntentSlotPriorityArgs>> slotPriorities;

    /**
     * @return Configuration block for a new list of slots and their priorities that are contained by the intent. This is ignored on create and only valid for updates. See `slot_priority`.
     * 
     */
    public Optional<Output<List<V2modelsIntentSlotPriorityArgs>>> slotPriorities() {
        return Optional.ofNullable(this.slotPriorities);
    }

    @Import(name="timeouts")
    private @Nullable Output<V2modelsIntentTimeoutsArgs> timeouts;

    public Optional<Output<V2modelsIntentTimeoutsArgs>> timeouts() {
        return Optional.ofNullable(this.timeouts);
    }

    private V2modelsIntentArgs() {}

    private V2modelsIntentArgs(V2modelsIntentArgs $) {
        this.botId = $.botId;
        this.botVersion = $.botVersion;
        this.closingSetting = $.closingSetting;
        this.confirmationSetting = $.confirmationSetting;
        this.description = $.description;
        this.dialogCodeHook = $.dialogCodeHook;
        this.fulfillmentCodeHook = $.fulfillmentCodeHook;
        this.initialResponseSetting = $.initialResponseSetting;
        this.inputContexts = $.inputContexts;
        this.kendraConfiguration = $.kendraConfiguration;
        this.localeId = $.localeId;
        this.name = $.name;
        this.outputContexts = $.outputContexts;
        this.parentIntentSignature = $.parentIntentSignature;
        this.sampleUtterances = $.sampleUtterances;
        this.slotPriorities = $.slotPriorities;
        this.timeouts = $.timeouts;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(V2modelsIntentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private V2modelsIntentArgs $;

        public Builder() {
            $ = new V2modelsIntentArgs();
        }

        public Builder(V2modelsIntentArgs defaults) {
            $ = new V2modelsIntentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param botId Identifier of the bot associated with this intent.
         * 
         * @return builder
         * 
         */
        public Builder botId(Output<String> botId) {
            $.botId = botId;
            return this;
        }

        /**
         * @param botId Identifier of the bot associated with this intent.
         * 
         * @return builder
         * 
         */
        public Builder botId(String botId) {
            return botId(Output.of(botId));
        }

        /**
         * @param botVersion Version of the bot associated with this intent.
         * 
         * @return builder
         * 
         */
        public Builder botVersion(Output<String> botVersion) {
            $.botVersion = botVersion;
            return this;
        }

        /**
         * @param botVersion Version of the bot associated with this intent.
         * 
         * @return builder
         * 
         */
        public Builder botVersion(String botVersion) {
            return botVersion(Output.of(botVersion));
        }

        /**
         * @param closingSetting Configuration block for the response that Amazon Lex sends to the user when the intent is closed. See `closing_setting`.
         * 
         * @return builder
         * 
         */
        public Builder closingSetting(@Nullable Output<V2modelsIntentClosingSettingArgs> closingSetting) {
            $.closingSetting = closingSetting;
            return this;
        }

        /**
         * @param closingSetting Configuration block for the response that Amazon Lex sends to the user when the intent is closed. See `closing_setting`.
         * 
         * @return builder
         * 
         */
        public Builder closingSetting(V2modelsIntentClosingSettingArgs closingSetting) {
            return closingSetting(Output.of(closingSetting));
        }

        public Builder confirmationSetting(@Nullable Output<V2modelsIntentConfirmationSettingArgs> confirmationSetting) {
            $.confirmationSetting = confirmationSetting;
            return this;
        }

        public Builder confirmationSetting(V2modelsIntentConfirmationSettingArgs confirmationSetting) {
            return confirmationSetting(Output.of(confirmationSetting));
        }

        /**
         * @param description Description of the intent. Use the description to help identify the intent in lists.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the intent. Use the description to help identify the intent in lists.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param dialogCodeHook Configuration block for invoking the alias Lambda function for each user input. You can invoke this Lambda function to personalize user interaction. See `dialog_code_hook`.
         * 
         * @return builder
         * 
         */
        public Builder dialogCodeHook(@Nullable Output<V2modelsIntentDialogCodeHookArgs> dialogCodeHook) {
            $.dialogCodeHook = dialogCodeHook;
            return this;
        }

        /**
         * @param dialogCodeHook Configuration block for invoking the alias Lambda function for each user input. You can invoke this Lambda function to personalize user interaction. See `dialog_code_hook`.
         * 
         * @return builder
         * 
         */
        public Builder dialogCodeHook(V2modelsIntentDialogCodeHookArgs dialogCodeHook) {
            return dialogCodeHook(Output.of(dialogCodeHook));
        }

        /**
         * @param fulfillmentCodeHook Configuration block for invoking the alias Lambda function when the intent is ready for fulfillment. You can invoke this function to complete the bot&#39;s transaction with the user. See `fulfillment_code_hook`.
         * 
         * @return builder
         * 
         */
        public Builder fulfillmentCodeHook(@Nullable Output<V2modelsIntentFulfillmentCodeHookArgs> fulfillmentCodeHook) {
            $.fulfillmentCodeHook = fulfillmentCodeHook;
            return this;
        }

        /**
         * @param fulfillmentCodeHook Configuration block for invoking the alias Lambda function when the intent is ready for fulfillment. You can invoke this function to complete the bot&#39;s transaction with the user. See `fulfillment_code_hook`.
         * 
         * @return builder
         * 
         */
        public Builder fulfillmentCodeHook(V2modelsIntentFulfillmentCodeHookArgs fulfillmentCodeHook) {
            return fulfillmentCodeHook(Output.of(fulfillmentCodeHook));
        }

        /**
         * @param initialResponseSetting Configuration block for the response that is sent to the user at the beginning of a conversation, before eliciting slot values. See `initial_response_setting`.
         * 
         * @return builder
         * 
         */
        public Builder initialResponseSetting(@Nullable Output<V2modelsIntentInitialResponseSettingArgs> initialResponseSetting) {
            $.initialResponseSetting = initialResponseSetting;
            return this;
        }

        /**
         * @param initialResponseSetting Configuration block for the response that is sent to the user at the beginning of a conversation, before eliciting slot values. See `initial_response_setting`.
         * 
         * @return builder
         * 
         */
        public Builder initialResponseSetting(V2modelsIntentInitialResponseSettingArgs initialResponseSetting) {
            return initialResponseSetting(Output.of(initialResponseSetting));
        }

        /**
         * @param inputContexts Configuration blocks for contexts that must be active for this intent to be considered by Amazon Lex. When an intent has an input context list, Amazon Lex only considers using the intent in an interaction with the user when the specified contexts are included in the active context list for the session. If the contexts are not active, then Amazon Lex will not use the intent. A context can be automatically activated using the outputContexts property or it can be set at runtime. See `input_context`.
         * 
         * @return builder
         * 
         */
        public Builder inputContexts(@Nullable Output<List<V2modelsIntentInputContextArgs>> inputContexts) {
            $.inputContexts = inputContexts;
            return this;
        }

        /**
         * @param inputContexts Configuration blocks for contexts that must be active for this intent to be considered by Amazon Lex. When an intent has an input context list, Amazon Lex only considers using the intent in an interaction with the user when the specified contexts are included in the active context list for the session. If the contexts are not active, then Amazon Lex will not use the intent. A context can be automatically activated using the outputContexts property or it can be set at runtime. See `input_context`.
         * 
         * @return builder
         * 
         */
        public Builder inputContexts(List<V2modelsIntentInputContextArgs> inputContexts) {
            return inputContexts(Output.of(inputContexts));
        }

        /**
         * @param inputContexts Configuration blocks for contexts that must be active for this intent to be considered by Amazon Lex. When an intent has an input context list, Amazon Lex only considers using the intent in an interaction with the user when the specified contexts are included in the active context list for the session. If the contexts are not active, then Amazon Lex will not use the intent. A context can be automatically activated using the outputContexts property or it can be set at runtime. See `input_context`.
         * 
         * @return builder
         * 
         */
        public Builder inputContexts(V2modelsIntentInputContextArgs... inputContexts) {
            return inputContexts(List.of(inputContexts));
        }

        /**
         * @param kendraConfiguration Configuration block for information required to use the AMAZON.KendraSearchIntent intent to connect to an Amazon Kendra index. The AMAZON.KendraSearchIntent intent is called when Amazon Lex can&#39;t determine another intent to invoke. See `kendra_configuration`.
         * 
         * @return builder
         * 
         */
        public Builder kendraConfiguration(@Nullable Output<V2modelsIntentKendraConfigurationArgs> kendraConfiguration) {
            $.kendraConfiguration = kendraConfiguration;
            return this;
        }

        /**
         * @param kendraConfiguration Configuration block for information required to use the AMAZON.KendraSearchIntent intent to connect to an Amazon Kendra index. The AMAZON.KendraSearchIntent intent is called when Amazon Lex can&#39;t determine another intent to invoke. See `kendra_configuration`.
         * 
         * @return builder
         * 
         */
        public Builder kendraConfiguration(V2modelsIntentKendraConfigurationArgs kendraConfiguration) {
            return kendraConfiguration(Output.of(kendraConfiguration));
        }

        /**
         * @param localeId Identifier of the language and locale where this intent is used. All of the bots, slot types, and slots used by the intent must have the same locale.
         * 
         * @return builder
         * 
         */
        public Builder localeId(Output<String> localeId) {
            $.localeId = localeId;
            return this;
        }

        /**
         * @param localeId Identifier of the language and locale where this intent is used. All of the bots, slot types, and slots used by the intent must have the same locale.
         * 
         * @return builder
         * 
         */
        public Builder localeId(String localeId) {
            return localeId(Output.of(localeId));
        }

        /**
         * @param name Name of the intent. Intent names must be unique in the locale that contains the intent and cannot match the name of any built-in intent.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the intent. Intent names must be unique in the locale that contains the intent and cannot match the name of any built-in intent.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param outputContexts Configuration blocks for contexts that the intent activates when it is fulfilled. You can use an output context to indicate the intents that Amazon Lex should consider for the next turn of the conversation with a customer. When you use the outputContextsList property, all of the contexts specified in the list are activated when the intent is fulfilled. You can set up to 10 output contexts. You can also set the number of conversation turns that the context should be active, or the length of time that the context should be active. See `output_context`.
         * 
         * @return builder
         * 
         */
        public Builder outputContexts(@Nullable Output<List<V2modelsIntentOutputContextArgs>> outputContexts) {
            $.outputContexts = outputContexts;
            return this;
        }

        /**
         * @param outputContexts Configuration blocks for contexts that the intent activates when it is fulfilled. You can use an output context to indicate the intents that Amazon Lex should consider for the next turn of the conversation with a customer. When you use the outputContextsList property, all of the contexts specified in the list are activated when the intent is fulfilled. You can set up to 10 output contexts. You can also set the number of conversation turns that the context should be active, or the length of time that the context should be active. See `output_context`.
         * 
         * @return builder
         * 
         */
        public Builder outputContexts(List<V2modelsIntentOutputContextArgs> outputContexts) {
            return outputContexts(Output.of(outputContexts));
        }

        /**
         * @param outputContexts Configuration blocks for contexts that the intent activates when it is fulfilled. You can use an output context to indicate the intents that Amazon Lex should consider for the next turn of the conversation with a customer. When you use the outputContextsList property, all of the contexts specified in the list are activated when the intent is fulfilled. You can set up to 10 output contexts. You can also set the number of conversation turns that the context should be active, or the length of time that the context should be active. See `output_context`.
         * 
         * @return builder
         * 
         */
        public Builder outputContexts(V2modelsIntentOutputContextArgs... outputContexts) {
            return outputContexts(List.of(outputContexts));
        }

        /**
         * @param parentIntentSignature Identifier for the built-in intent to base this intent on.
         * 
         * @return builder
         * 
         */
        public Builder parentIntentSignature(@Nullable Output<String> parentIntentSignature) {
            $.parentIntentSignature = parentIntentSignature;
            return this;
        }

        /**
         * @param parentIntentSignature Identifier for the built-in intent to base this intent on.
         * 
         * @return builder
         * 
         */
        public Builder parentIntentSignature(String parentIntentSignature) {
            return parentIntentSignature(Output.of(parentIntentSignature));
        }

        /**
         * @param sampleUtterances Configuration block for strings that a user might say to signal the intent. See `sample_utterance`.
         * 
         * @return builder
         * 
         */
        public Builder sampleUtterances(@Nullable Output<List<V2modelsIntentSampleUtteranceArgs>> sampleUtterances) {
            $.sampleUtterances = sampleUtterances;
            return this;
        }

        /**
         * @param sampleUtterances Configuration block for strings that a user might say to signal the intent. See `sample_utterance`.
         * 
         * @return builder
         * 
         */
        public Builder sampleUtterances(List<V2modelsIntentSampleUtteranceArgs> sampleUtterances) {
            return sampleUtterances(Output.of(sampleUtterances));
        }

        /**
         * @param sampleUtterances Configuration block for strings that a user might say to signal the intent. See `sample_utterance`.
         * 
         * @return builder
         * 
         */
        public Builder sampleUtterances(V2modelsIntentSampleUtteranceArgs... sampleUtterances) {
            return sampleUtterances(List.of(sampleUtterances));
        }

        /**
         * @param slotPriorities Configuration block for a new list of slots and their priorities that are contained by the intent. This is ignored on create and only valid for updates. See `slot_priority`.
         * 
         * @return builder
         * 
         */
        public Builder slotPriorities(@Nullable Output<List<V2modelsIntentSlotPriorityArgs>> slotPriorities) {
            $.slotPriorities = slotPriorities;
            return this;
        }

        /**
         * @param slotPriorities Configuration block for a new list of slots and their priorities that are contained by the intent. This is ignored on create and only valid for updates. See `slot_priority`.
         * 
         * @return builder
         * 
         */
        public Builder slotPriorities(List<V2modelsIntentSlotPriorityArgs> slotPriorities) {
            return slotPriorities(Output.of(slotPriorities));
        }

        /**
         * @param slotPriorities Configuration block for a new list of slots and their priorities that are contained by the intent. This is ignored on create and only valid for updates. See `slot_priority`.
         * 
         * @return builder
         * 
         */
        public Builder slotPriorities(V2modelsIntentSlotPriorityArgs... slotPriorities) {
            return slotPriorities(List.of(slotPriorities));
        }

        public Builder timeouts(@Nullable Output<V2modelsIntentTimeoutsArgs> timeouts) {
            $.timeouts = timeouts;
            return this;
        }

        public Builder timeouts(V2modelsIntentTimeoutsArgs timeouts) {
            return timeouts(Output.of(timeouts));
        }

        public V2modelsIntentArgs build() {
            if ($.botId == null) {
                throw new MissingRequiredPropertyException("V2modelsIntentArgs", "botId");
            }
            if ($.botVersion == null) {
                throw new MissingRequiredPropertyException("V2modelsIntentArgs", "botVersion");
            }
            if ($.localeId == null) {
                throw new MissingRequiredPropertyException("V2modelsIntentArgs", "localeId");
            }
            return $;
        }
    }

}
