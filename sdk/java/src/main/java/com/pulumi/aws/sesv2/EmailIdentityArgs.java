// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.sesv2;

import com.pulumi.aws.sesv2.inputs.EmailIdentityDkimSigningAttributesArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EmailIdentityArgs extends com.pulumi.resources.ResourceArgs {

    public static final EmailIdentityArgs Empty = new EmailIdentityArgs();

    /**
     * The configuration set to use by default when sending from this identity. Note that any configuration set defined in the email sending request takes precedence.
     * 
     */
    @Import(name="configurationSetName")
    private @Nullable Output<String> configurationSetName;

    /**
     * @return The configuration set to use by default when sending from this identity. Note that any configuration set defined in the email sending request takes precedence.
     * 
     */
    public Optional<Output<String>> configurationSetName() {
        return Optional.ofNullable(this.configurationSetName);
    }

    /**
     * The configuration of the DKIM authentication settings for an email domain identity.
     * 
     */
    @Import(name="dkimSigningAttributes")
    private @Nullable Output<EmailIdentityDkimSigningAttributesArgs> dkimSigningAttributes;

    /**
     * @return The configuration of the DKIM authentication settings for an email domain identity.
     * 
     */
    public Optional<Output<EmailIdentityDkimSigningAttributesArgs>> dkimSigningAttributes() {
        return Optional.ofNullable(this.dkimSigningAttributes);
    }

    /**
     * The email address or domain to verify.
     * 
     */
    @Import(name="emailIdentity", required=true)
    private Output<String> emailIdentity;

    /**
     * @return The email address or domain to verify.
     * 
     */
    public Output<String> emailIdentity() {
        return this.emailIdentity;
    }

    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    private EmailIdentityArgs() {}

    private EmailIdentityArgs(EmailIdentityArgs $) {
        this.configurationSetName = $.configurationSetName;
        this.dkimSigningAttributes = $.dkimSigningAttributes;
        this.emailIdentity = $.emailIdentity;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EmailIdentityArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EmailIdentityArgs $;

        public Builder() {
            $ = new EmailIdentityArgs();
        }

        public Builder(EmailIdentityArgs defaults) {
            $ = new EmailIdentityArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param configurationSetName The configuration set to use by default when sending from this identity. Note that any configuration set defined in the email sending request takes precedence.
         * 
         * @return builder
         * 
         */
        public Builder configurationSetName(@Nullable Output<String> configurationSetName) {
            $.configurationSetName = configurationSetName;
            return this;
        }

        /**
         * @param configurationSetName The configuration set to use by default when sending from this identity. Note that any configuration set defined in the email sending request takes precedence.
         * 
         * @return builder
         * 
         */
        public Builder configurationSetName(String configurationSetName) {
            return configurationSetName(Output.of(configurationSetName));
        }

        /**
         * @param dkimSigningAttributes The configuration of the DKIM authentication settings for an email domain identity.
         * 
         * @return builder
         * 
         */
        public Builder dkimSigningAttributes(@Nullable Output<EmailIdentityDkimSigningAttributesArgs> dkimSigningAttributes) {
            $.dkimSigningAttributes = dkimSigningAttributes;
            return this;
        }

        /**
         * @param dkimSigningAttributes The configuration of the DKIM authentication settings for an email domain identity.
         * 
         * @return builder
         * 
         */
        public Builder dkimSigningAttributes(EmailIdentityDkimSigningAttributesArgs dkimSigningAttributes) {
            return dkimSigningAttributes(Output.of(dkimSigningAttributes));
        }

        /**
         * @param emailIdentity The email address or domain to verify.
         * 
         * @return builder
         * 
         */
        public Builder emailIdentity(Output<String> emailIdentity) {
            $.emailIdentity = emailIdentity;
            return this;
        }

        /**
         * @param emailIdentity The email address or domain to verify.
         * 
         * @return builder
         * 
         */
        public Builder emailIdentity(String emailIdentity) {
            return emailIdentity(Output.of(emailIdentity));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        public EmailIdentityArgs build() {
            $.emailIdentity = Objects.requireNonNull($.emailIdentity, "expected parameter 'emailIdentity' to be non-null");
            return $;
        }
    }

}
