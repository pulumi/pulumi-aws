// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.inputs;

import com.pulumi.aws.quicksight.inputs.CellStyleBorderArgs;
import com.pulumi.aws.quicksight.inputs.FontConfigurationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CellStyleArgs extends com.pulumi.resources.ResourceArgs {

    public static final CellStyleArgs Empty = new CellStyleArgs();

    @Import(name="backgroundColor")
    private @Nullable Output<String> backgroundColor;

    public Optional<Output<String>> backgroundColor() {
        return Optional.ofNullable(this.backgroundColor);
    }

    @Import(name="border")
    private @Nullable Output<CellStyleBorderArgs> border;

    public Optional<Output<CellStyleBorderArgs>> border() {
        return Optional.ofNullable(this.border);
    }

    @Import(name="fontConfiguration")
    private @Nullable Output<FontConfigurationArgs> fontConfiguration;

    public Optional<Output<FontConfigurationArgs>> fontConfiguration() {
        return Optional.ofNullable(this.fontConfiguration);
    }

    @Import(name="height")
    private @Nullable Output<Integer> height;

    public Optional<Output<Integer>> height() {
        return Optional.ofNullable(this.height);
    }

    @Import(name="horizontalTextAlignment")
    private @Nullable Output<String> horizontalTextAlignment;

    public Optional<Output<String>> horizontalTextAlignment() {
        return Optional.ofNullable(this.horizontalTextAlignment);
    }

    @Import(name="textWrap")
    private @Nullable Output<String> textWrap;

    public Optional<Output<String>> textWrap() {
        return Optional.ofNullable(this.textWrap);
    }

    @Import(name="verticalTextAlignment")
    private @Nullable Output<String> verticalTextAlignment;

    public Optional<Output<String>> verticalTextAlignment() {
        return Optional.ofNullable(this.verticalTextAlignment);
    }

    @Import(name="visibility")
    private @Nullable Output<String> visibility;

    public Optional<Output<String>> visibility() {
        return Optional.ofNullable(this.visibility);
    }

    private CellStyleArgs() {}

    private CellStyleArgs(CellStyleArgs $) {
        this.backgroundColor = $.backgroundColor;
        this.border = $.border;
        this.fontConfiguration = $.fontConfiguration;
        this.height = $.height;
        this.horizontalTextAlignment = $.horizontalTextAlignment;
        this.textWrap = $.textWrap;
        this.verticalTextAlignment = $.verticalTextAlignment;
        this.visibility = $.visibility;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CellStyleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CellStyleArgs $;

        public Builder() {
            $ = new CellStyleArgs();
        }

        public Builder(CellStyleArgs defaults) {
            $ = new CellStyleArgs(Objects.requireNonNull(defaults));
        }

        public Builder backgroundColor(@Nullable Output<String> backgroundColor) {
            $.backgroundColor = backgroundColor;
            return this;
        }

        public Builder backgroundColor(String backgroundColor) {
            return backgroundColor(Output.of(backgroundColor));
        }

        public Builder border(@Nullable Output<CellStyleBorderArgs> border) {
            $.border = border;
            return this;
        }

        public Builder border(CellStyleBorderArgs border) {
            return border(Output.of(border));
        }

        public Builder fontConfiguration(@Nullable Output<FontConfigurationArgs> fontConfiguration) {
            $.fontConfiguration = fontConfiguration;
            return this;
        }

        public Builder fontConfiguration(FontConfigurationArgs fontConfiguration) {
            return fontConfiguration(Output.of(fontConfiguration));
        }

        public Builder height(@Nullable Output<Integer> height) {
            $.height = height;
            return this;
        }

        public Builder height(Integer height) {
            return height(Output.of(height));
        }

        public Builder horizontalTextAlignment(@Nullable Output<String> horizontalTextAlignment) {
            $.horizontalTextAlignment = horizontalTextAlignment;
            return this;
        }

        public Builder horizontalTextAlignment(String horizontalTextAlignment) {
            return horizontalTextAlignment(Output.of(horizontalTextAlignment));
        }

        public Builder textWrap(@Nullable Output<String> textWrap) {
            $.textWrap = textWrap;
            return this;
        }

        public Builder textWrap(String textWrap) {
            return textWrap(Output.of(textWrap));
        }

        public Builder verticalTextAlignment(@Nullable Output<String> verticalTextAlignment) {
            $.verticalTextAlignment = verticalTextAlignment;
            return this;
        }

        public Builder verticalTextAlignment(String verticalTextAlignment) {
            return verticalTextAlignment(Output.of(verticalTextAlignment));
        }

        public Builder visibility(@Nullable Output<String> visibility) {
            $.visibility = visibility;
            return this;
        }

        public Builder visibility(String visibility) {
            return visibility(Output.of(visibility));
        }

        public CellStyleArgs build() {
            return $;
        }
    }

}
