// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.workspaces;

import com.pulumi.aws.workspaces.inputs.WorkspaceWorkspacePropertiesArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WorkspaceArgs extends com.pulumi.resources.ResourceArgs {

    public static final WorkspaceArgs Empty = new WorkspaceArgs();

    @Import(name="bundleId", required=true)
    private Output<String> bundleId;

    public Output<String> bundleId() {
        return this.bundleId;
    }

    @Import(name="directoryId", required=true)
    private Output<String> directoryId;

    public Output<String> directoryId() {
        return this.directoryId;
    }

    @Import(name="rootVolumeEncryptionEnabled")
    private @Nullable Output<Boolean> rootVolumeEncryptionEnabled;

    public Optional<Output<Boolean>> rootVolumeEncryptionEnabled() {
        return Optional.ofNullable(this.rootVolumeEncryptionEnabled);
    }

    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="userName", required=true)
    private Output<String> userName;

    public Output<String> userName() {
        return this.userName;
    }

    @Import(name="userVolumeEncryptionEnabled")
    private @Nullable Output<Boolean> userVolumeEncryptionEnabled;

    public Optional<Output<Boolean>> userVolumeEncryptionEnabled() {
        return Optional.ofNullable(this.userVolumeEncryptionEnabled);
    }

    @Import(name="volumeEncryptionKey")
    private @Nullable Output<String> volumeEncryptionKey;

    public Optional<Output<String>> volumeEncryptionKey() {
        return Optional.ofNullable(this.volumeEncryptionKey);
    }

    @Import(name="workspaceProperties")
    private @Nullable Output<WorkspaceWorkspacePropertiesArgs> workspaceProperties;

    public Optional<Output<WorkspaceWorkspacePropertiesArgs>> workspaceProperties() {
        return Optional.ofNullable(this.workspaceProperties);
    }

    private WorkspaceArgs() {}

    private WorkspaceArgs(WorkspaceArgs $) {
        this.bundleId = $.bundleId;
        this.directoryId = $.directoryId;
        this.rootVolumeEncryptionEnabled = $.rootVolumeEncryptionEnabled;
        this.tags = $.tags;
        this.userName = $.userName;
        this.userVolumeEncryptionEnabled = $.userVolumeEncryptionEnabled;
        this.volumeEncryptionKey = $.volumeEncryptionKey;
        this.workspaceProperties = $.workspaceProperties;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WorkspaceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WorkspaceArgs $;

        public Builder() {
            $ = new WorkspaceArgs();
        }

        public Builder(WorkspaceArgs defaults) {
            $ = new WorkspaceArgs(Objects.requireNonNull(defaults));
        }

        public Builder bundleId(Output<String> bundleId) {
            $.bundleId = bundleId;
            return this;
        }

        public Builder bundleId(String bundleId) {
            return bundleId(Output.of(bundleId));
        }

        public Builder directoryId(Output<String> directoryId) {
            $.directoryId = directoryId;
            return this;
        }

        public Builder directoryId(String directoryId) {
            return directoryId(Output.of(directoryId));
        }

        public Builder rootVolumeEncryptionEnabled(@Nullable Output<Boolean> rootVolumeEncryptionEnabled) {
            $.rootVolumeEncryptionEnabled = rootVolumeEncryptionEnabled;
            return this;
        }

        public Builder rootVolumeEncryptionEnabled(Boolean rootVolumeEncryptionEnabled) {
            return rootVolumeEncryptionEnabled(Output.of(rootVolumeEncryptionEnabled));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder userName(Output<String> userName) {
            $.userName = userName;
            return this;
        }

        public Builder userName(String userName) {
            return userName(Output.of(userName));
        }

        public Builder userVolumeEncryptionEnabled(@Nullable Output<Boolean> userVolumeEncryptionEnabled) {
            $.userVolumeEncryptionEnabled = userVolumeEncryptionEnabled;
            return this;
        }

        public Builder userVolumeEncryptionEnabled(Boolean userVolumeEncryptionEnabled) {
            return userVolumeEncryptionEnabled(Output.of(userVolumeEncryptionEnabled));
        }

        public Builder volumeEncryptionKey(@Nullable Output<String> volumeEncryptionKey) {
            $.volumeEncryptionKey = volumeEncryptionKey;
            return this;
        }

        public Builder volumeEncryptionKey(String volumeEncryptionKey) {
            return volumeEncryptionKey(Output.of(volumeEncryptionKey));
        }

        public Builder workspaceProperties(@Nullable Output<WorkspaceWorkspacePropertiesArgs> workspaceProperties) {
            $.workspaceProperties = workspaceProperties;
            return this;
        }

        public Builder workspaceProperties(WorkspaceWorkspacePropertiesArgs workspaceProperties) {
            return workspaceProperties(Output.of(workspaceProperties));
        }

        public WorkspaceArgs build() {
            $.bundleId = Objects.requireNonNull($.bundleId, "expected parameter 'bundleId' to be non-null");
            $.directoryId = Objects.requireNonNull($.directoryId, "expected parameter 'directoryId' to be non-null");
            $.userName = Objects.requireNonNull($.userName, "expected parameter 'userName' to be non-null");
            return $;
        }
    }

}
