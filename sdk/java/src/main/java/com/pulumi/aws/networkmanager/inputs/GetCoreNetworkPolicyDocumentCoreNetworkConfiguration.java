// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.networkmanager.inputs;

import com.pulumi.aws.networkmanager.inputs.GetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocation;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetCoreNetworkPolicyDocumentCoreNetworkConfiguration extends com.pulumi.resources.InvokeArgs {

    public static final GetCoreNetworkPolicyDocumentCoreNetworkConfiguration Empty = new GetCoreNetworkPolicyDocumentCoreNetworkConfiguration();

    /**
     * List of strings containing Autonomous System Numbers (ASNs) to assign to Core Network Edges. By default, the core network automatically assigns an ASN for each Core Network Edge but you can optionally define the ASN in the edge-locations for each Region. The ASN uses an array of integer ranges only from `64512` to `65534` and `4200000000` to `4294967294` expressed as a string like `&#34;64512-65534&#34;`. No other ASN ranges can be used.
     * 
     */
    @Import(name="asnRanges", required=true)
    private List<String> asnRanges;

    /**
     * @return List of strings containing Autonomous System Numbers (ASNs) to assign to Core Network Edges. By default, the core network automatically assigns an ASN for each Core Network Edge but you can optionally define the ASN in the edge-locations for each Region. The ASN uses an array of integer ranges only from `64512` to `65534` and `4200000000` to `4294967294` expressed as a string like `&#34;64512-65534&#34;`. No other ASN ranges can be used.
     * 
     */
    public List<String> asnRanges() {
        return this.asnRanges;
    }

    /**
     * A block value of AWS Region locations where you&#39;re creating Core Network Edges. Detailed below.
     * 
     */
    @Import(name="edgeLocations", required=true)
    private List<GetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocation> edgeLocations;

    /**
     * @return A block value of AWS Region locations where you&#39;re creating Core Network Edges. Detailed below.
     * 
     */
    public List<GetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocation> edgeLocations() {
        return this.edgeLocations;
    }

    /**
     * The Classless Inter-Domain Routing (CIDR) block range used to create tunnels for AWS Transit Gateway Connect. The format is standard AWS CIDR range (for example, `10.0.1.0/24`). You can optionally define the inside CIDR in the Core Network Edges section per Region. The minimum is a `/24` for IPv4 or `/64` for IPv6. You can provide multiple `/24` subnets or a larger CIDR range. If you define a larger CIDR range, new Core Network Edges will be automatically assigned `/24` and `/64` subnets from the larger CIDR. an Inside CIDR block is required for attaching Connect attachments to a Core Network Edge.
     * 
     */
    @Import(name="insideCidrBlocks")
    private @Nullable List<String> insideCidrBlocks;

    /**
     * @return The Classless Inter-Domain Routing (CIDR) block range used to create tunnels for AWS Transit Gateway Connect. The format is standard AWS CIDR range (for example, `10.0.1.0/24`). You can optionally define the inside CIDR in the Core Network Edges section per Region. The minimum is a `/24` for IPv4 or `/64` for IPv6. You can provide multiple `/24` subnets or a larger CIDR range. If you define a larger CIDR range, new Core Network Edges will be automatically assigned `/24` and `/64` subnets from the larger CIDR. an Inside CIDR block is required for attaching Connect attachments to a Core Network Edge.
     * 
     */
    public Optional<List<String>> insideCidrBlocks() {
        return Optional.ofNullable(this.insideCidrBlocks);
    }

    /**
     * Indicates whether the core network forwards traffic over multiple equal-cost routes using VPN. The value can be either `true` or `false`. The default is `true`.
     * 
     */
    @Import(name="vpnEcmpSupport")
    private @Nullable Boolean vpnEcmpSupport;

    /**
     * @return Indicates whether the core network forwards traffic over multiple equal-cost routes using VPN. The value can be either `true` or `false`. The default is `true`.
     * 
     */
    public Optional<Boolean> vpnEcmpSupport() {
        return Optional.ofNullable(this.vpnEcmpSupport);
    }

    private GetCoreNetworkPolicyDocumentCoreNetworkConfiguration() {}

    private GetCoreNetworkPolicyDocumentCoreNetworkConfiguration(GetCoreNetworkPolicyDocumentCoreNetworkConfiguration $) {
        this.asnRanges = $.asnRanges;
        this.edgeLocations = $.edgeLocations;
        this.insideCidrBlocks = $.insideCidrBlocks;
        this.vpnEcmpSupport = $.vpnEcmpSupport;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetCoreNetworkPolicyDocumentCoreNetworkConfiguration defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetCoreNetworkPolicyDocumentCoreNetworkConfiguration $;

        public Builder() {
            $ = new GetCoreNetworkPolicyDocumentCoreNetworkConfiguration();
        }

        public Builder(GetCoreNetworkPolicyDocumentCoreNetworkConfiguration defaults) {
            $ = new GetCoreNetworkPolicyDocumentCoreNetworkConfiguration(Objects.requireNonNull(defaults));
        }

        /**
         * @param asnRanges List of strings containing Autonomous System Numbers (ASNs) to assign to Core Network Edges. By default, the core network automatically assigns an ASN for each Core Network Edge but you can optionally define the ASN in the edge-locations for each Region. The ASN uses an array of integer ranges only from `64512` to `65534` and `4200000000` to `4294967294` expressed as a string like `&#34;64512-65534&#34;`. No other ASN ranges can be used.
         * 
         * @return builder
         * 
         */
        public Builder asnRanges(List<String> asnRanges) {
            $.asnRanges = asnRanges;
            return this;
        }

        /**
         * @param asnRanges List of strings containing Autonomous System Numbers (ASNs) to assign to Core Network Edges. By default, the core network automatically assigns an ASN for each Core Network Edge but you can optionally define the ASN in the edge-locations for each Region. The ASN uses an array of integer ranges only from `64512` to `65534` and `4200000000` to `4294967294` expressed as a string like `&#34;64512-65534&#34;`. No other ASN ranges can be used.
         * 
         * @return builder
         * 
         */
        public Builder asnRanges(String... asnRanges) {
            return asnRanges(List.of(asnRanges));
        }

        /**
         * @param edgeLocations A block value of AWS Region locations where you&#39;re creating Core Network Edges. Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder edgeLocations(List<GetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocation> edgeLocations) {
            $.edgeLocations = edgeLocations;
            return this;
        }

        /**
         * @param edgeLocations A block value of AWS Region locations where you&#39;re creating Core Network Edges. Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder edgeLocations(GetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocation... edgeLocations) {
            return edgeLocations(List.of(edgeLocations));
        }

        /**
         * @param insideCidrBlocks The Classless Inter-Domain Routing (CIDR) block range used to create tunnels for AWS Transit Gateway Connect. The format is standard AWS CIDR range (for example, `10.0.1.0/24`). You can optionally define the inside CIDR in the Core Network Edges section per Region. The minimum is a `/24` for IPv4 or `/64` for IPv6. You can provide multiple `/24` subnets or a larger CIDR range. If you define a larger CIDR range, new Core Network Edges will be automatically assigned `/24` and `/64` subnets from the larger CIDR. an Inside CIDR block is required for attaching Connect attachments to a Core Network Edge.
         * 
         * @return builder
         * 
         */
        public Builder insideCidrBlocks(@Nullable List<String> insideCidrBlocks) {
            $.insideCidrBlocks = insideCidrBlocks;
            return this;
        }

        /**
         * @param insideCidrBlocks The Classless Inter-Domain Routing (CIDR) block range used to create tunnels for AWS Transit Gateway Connect. The format is standard AWS CIDR range (for example, `10.0.1.0/24`). You can optionally define the inside CIDR in the Core Network Edges section per Region. The minimum is a `/24` for IPv4 or `/64` for IPv6. You can provide multiple `/24` subnets or a larger CIDR range. If you define a larger CIDR range, new Core Network Edges will be automatically assigned `/24` and `/64` subnets from the larger CIDR. an Inside CIDR block is required for attaching Connect attachments to a Core Network Edge.
         * 
         * @return builder
         * 
         */
        public Builder insideCidrBlocks(String... insideCidrBlocks) {
            return insideCidrBlocks(List.of(insideCidrBlocks));
        }

        /**
         * @param vpnEcmpSupport Indicates whether the core network forwards traffic over multiple equal-cost routes using VPN. The value can be either `true` or `false`. The default is `true`.
         * 
         * @return builder
         * 
         */
        public Builder vpnEcmpSupport(@Nullable Boolean vpnEcmpSupport) {
            $.vpnEcmpSupport = vpnEcmpSupport;
            return this;
        }

        public GetCoreNetworkPolicyDocumentCoreNetworkConfiguration build() {
            if ($.asnRanges == null) {
                throw new MissingRequiredPropertyException("GetCoreNetworkPolicyDocumentCoreNetworkConfiguration", "asnRanges");
            }
            if ($.edgeLocations == null) {
                throw new MissingRequiredPropertyException("GetCoreNetworkPolicyDocumentCoreNetworkConfiguration", "edgeLocations");
            }
            return $;
        }
    }

}
