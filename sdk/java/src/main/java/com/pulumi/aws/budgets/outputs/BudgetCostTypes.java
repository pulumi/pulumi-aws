// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.budgets.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class BudgetCostTypes {
    /**
     * @return A boolean value whether to include credits in the cost budget. Defaults to `true`
     * 
     */
    private @Nullable Boolean includeCredit;
    /**
     * @return Whether a budget includes discounts. Defaults to `true`
     * 
     */
    private @Nullable Boolean includeDiscount;
    /**
     * @return A boolean value whether to include other subscription costs in the cost budget. Defaults to `true`
     * 
     */
    private @Nullable Boolean includeOtherSubscription;
    /**
     * @return A boolean value whether to include recurring costs in the cost budget. Defaults to `true`
     * 
     */
    private @Nullable Boolean includeRecurring;
    /**
     * @return A boolean value whether to include refunds in the cost budget. Defaults to `true`
     * 
     */
    private @Nullable Boolean includeRefund;
    /**
     * @return A boolean value whether to include subscriptions in the cost budget. Defaults to `true`
     * 
     */
    private @Nullable Boolean includeSubscription;
    /**
     * @return A boolean value whether to include support costs in the cost budget. Defaults to `true`
     * 
     */
    private @Nullable Boolean includeSupport;
    /**
     * @return A boolean value whether to include tax in the cost budget. Defaults to `true`
     * 
     */
    private @Nullable Boolean includeTax;
    /**
     * @return A boolean value whether to include upfront costs in the cost budget. Defaults to `true`
     * 
     */
    private @Nullable Boolean includeUpfront;
    /**
     * @return Whether a budget uses the amortized rate. Defaults to `false`
     * 
     */
    private @Nullable Boolean useAmortized;
    /**
     * @return A boolean value whether to use blended costs in the cost budget. Defaults to `false`
     * 
     */
    private @Nullable Boolean useBlended;

    private BudgetCostTypes() {}
    /**
     * @return A boolean value whether to include credits in the cost budget. Defaults to `true`
     * 
     */
    public Optional<Boolean> includeCredit() {
        return Optional.ofNullable(this.includeCredit);
    }
    /**
     * @return Whether a budget includes discounts. Defaults to `true`
     * 
     */
    public Optional<Boolean> includeDiscount() {
        return Optional.ofNullable(this.includeDiscount);
    }
    /**
     * @return A boolean value whether to include other subscription costs in the cost budget. Defaults to `true`
     * 
     */
    public Optional<Boolean> includeOtherSubscription() {
        return Optional.ofNullable(this.includeOtherSubscription);
    }
    /**
     * @return A boolean value whether to include recurring costs in the cost budget. Defaults to `true`
     * 
     */
    public Optional<Boolean> includeRecurring() {
        return Optional.ofNullable(this.includeRecurring);
    }
    /**
     * @return A boolean value whether to include refunds in the cost budget. Defaults to `true`
     * 
     */
    public Optional<Boolean> includeRefund() {
        return Optional.ofNullable(this.includeRefund);
    }
    /**
     * @return A boolean value whether to include subscriptions in the cost budget. Defaults to `true`
     * 
     */
    public Optional<Boolean> includeSubscription() {
        return Optional.ofNullable(this.includeSubscription);
    }
    /**
     * @return A boolean value whether to include support costs in the cost budget. Defaults to `true`
     * 
     */
    public Optional<Boolean> includeSupport() {
        return Optional.ofNullable(this.includeSupport);
    }
    /**
     * @return A boolean value whether to include tax in the cost budget. Defaults to `true`
     * 
     */
    public Optional<Boolean> includeTax() {
        return Optional.ofNullable(this.includeTax);
    }
    /**
     * @return A boolean value whether to include upfront costs in the cost budget. Defaults to `true`
     * 
     */
    public Optional<Boolean> includeUpfront() {
        return Optional.ofNullable(this.includeUpfront);
    }
    /**
     * @return Whether a budget uses the amortized rate. Defaults to `false`
     * 
     */
    public Optional<Boolean> useAmortized() {
        return Optional.ofNullable(this.useAmortized);
    }
    /**
     * @return A boolean value whether to use blended costs in the cost budget. Defaults to `false`
     * 
     */
    public Optional<Boolean> useBlended() {
        return Optional.ofNullable(this.useBlended);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BudgetCostTypes defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean includeCredit;
        private @Nullable Boolean includeDiscount;
        private @Nullable Boolean includeOtherSubscription;
        private @Nullable Boolean includeRecurring;
        private @Nullable Boolean includeRefund;
        private @Nullable Boolean includeSubscription;
        private @Nullable Boolean includeSupport;
        private @Nullable Boolean includeTax;
        private @Nullable Boolean includeUpfront;
        private @Nullable Boolean useAmortized;
        private @Nullable Boolean useBlended;
        public Builder() {}
        public Builder(BudgetCostTypes defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.includeCredit = defaults.includeCredit;
    	      this.includeDiscount = defaults.includeDiscount;
    	      this.includeOtherSubscription = defaults.includeOtherSubscription;
    	      this.includeRecurring = defaults.includeRecurring;
    	      this.includeRefund = defaults.includeRefund;
    	      this.includeSubscription = defaults.includeSubscription;
    	      this.includeSupport = defaults.includeSupport;
    	      this.includeTax = defaults.includeTax;
    	      this.includeUpfront = defaults.includeUpfront;
    	      this.useAmortized = defaults.useAmortized;
    	      this.useBlended = defaults.useBlended;
        }

        @CustomType.Setter
        public Builder includeCredit(@Nullable Boolean includeCredit) {
            this.includeCredit = includeCredit;
            return this;
        }
        @CustomType.Setter
        public Builder includeDiscount(@Nullable Boolean includeDiscount) {
            this.includeDiscount = includeDiscount;
            return this;
        }
        @CustomType.Setter
        public Builder includeOtherSubscription(@Nullable Boolean includeOtherSubscription) {
            this.includeOtherSubscription = includeOtherSubscription;
            return this;
        }
        @CustomType.Setter
        public Builder includeRecurring(@Nullable Boolean includeRecurring) {
            this.includeRecurring = includeRecurring;
            return this;
        }
        @CustomType.Setter
        public Builder includeRefund(@Nullable Boolean includeRefund) {
            this.includeRefund = includeRefund;
            return this;
        }
        @CustomType.Setter
        public Builder includeSubscription(@Nullable Boolean includeSubscription) {
            this.includeSubscription = includeSubscription;
            return this;
        }
        @CustomType.Setter
        public Builder includeSupport(@Nullable Boolean includeSupport) {
            this.includeSupport = includeSupport;
            return this;
        }
        @CustomType.Setter
        public Builder includeTax(@Nullable Boolean includeTax) {
            this.includeTax = includeTax;
            return this;
        }
        @CustomType.Setter
        public Builder includeUpfront(@Nullable Boolean includeUpfront) {
            this.includeUpfront = includeUpfront;
            return this;
        }
        @CustomType.Setter
        public Builder useAmortized(@Nullable Boolean useAmortized) {
            this.useAmortized = useAmortized;
            return this;
        }
        @CustomType.Setter
        public Builder useBlended(@Nullable Boolean useBlended) {
            this.useBlended = useBlended;
            return this;
        }
        public BudgetCostTypes build() {
            final var o = new BudgetCostTypes();
            o.includeCredit = includeCredit;
            o.includeDiscount = includeDiscount;
            o.includeOtherSubscription = includeOtherSubscription;
            o.includeRecurring = includeRecurring;
            o.includeRefund = includeRefund;
            o.includeSubscription = includeSubscription;
            o.includeSupport = includeSupport;
            o.includeTax = includeTax;
            o.includeUpfront = includeUpfront;
            o.useAmortized = useAmortized;
            o.useBlended = useBlended;
            return o;
        }
    }
}
