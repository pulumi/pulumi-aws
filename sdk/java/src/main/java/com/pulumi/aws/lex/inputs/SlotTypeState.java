// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.lex.inputs;

import com.pulumi.aws.lex.inputs.SlotTypeEnumerationValueArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SlotTypeState extends com.pulumi.resources.ResourceArgs {

    public static final SlotTypeState Empty = new SlotTypeState();

    @Import(name="checksum")
    private @Nullable Output<String> checksum;

    public Optional<Output<String>> checksum() {
        return Optional.ofNullable(this.checksum);
    }

    @Import(name="createVersion")
    private @Nullable Output<Boolean> createVersion;

    public Optional<Output<Boolean>> createVersion() {
        return Optional.ofNullable(this.createVersion);
    }

    @Import(name="createdDate")
    private @Nullable Output<String> createdDate;

    public Optional<Output<String>> createdDate() {
        return Optional.ofNullable(this.createdDate);
    }

    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="enumerationValues")
    private @Nullable Output<List<SlotTypeEnumerationValueArgs>> enumerationValues;

    public Optional<Output<List<SlotTypeEnumerationValueArgs>>> enumerationValues() {
        return Optional.ofNullable(this.enumerationValues);
    }

    @Import(name="lastUpdatedDate")
    private @Nullable Output<String> lastUpdatedDate;

    public Optional<Output<String>> lastUpdatedDate() {
        return Optional.ofNullable(this.lastUpdatedDate);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="valueSelectionStrategy")
    private @Nullable Output<String> valueSelectionStrategy;

    public Optional<Output<String>> valueSelectionStrategy() {
        return Optional.ofNullable(this.valueSelectionStrategy);
    }

    @Import(name="version")
    private @Nullable Output<String> version;

    public Optional<Output<String>> version() {
        return Optional.ofNullable(this.version);
    }

    private SlotTypeState() {}

    private SlotTypeState(SlotTypeState $) {
        this.checksum = $.checksum;
        this.createVersion = $.createVersion;
        this.createdDate = $.createdDate;
        this.description = $.description;
        this.enumerationValues = $.enumerationValues;
        this.lastUpdatedDate = $.lastUpdatedDate;
        this.name = $.name;
        this.valueSelectionStrategy = $.valueSelectionStrategy;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SlotTypeState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SlotTypeState $;

        public Builder() {
            $ = new SlotTypeState();
        }

        public Builder(SlotTypeState defaults) {
            $ = new SlotTypeState(Objects.requireNonNull(defaults));
        }

        public Builder checksum(@Nullable Output<String> checksum) {
            $.checksum = checksum;
            return this;
        }

        public Builder checksum(String checksum) {
            return checksum(Output.of(checksum));
        }

        public Builder createVersion(@Nullable Output<Boolean> createVersion) {
            $.createVersion = createVersion;
            return this;
        }

        public Builder createVersion(Boolean createVersion) {
            return createVersion(Output.of(createVersion));
        }

        public Builder createdDate(@Nullable Output<String> createdDate) {
            $.createdDate = createdDate;
            return this;
        }

        public Builder createdDate(String createdDate) {
            return createdDate(Output.of(createdDate));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder enumerationValues(@Nullable Output<List<SlotTypeEnumerationValueArgs>> enumerationValues) {
            $.enumerationValues = enumerationValues;
            return this;
        }

        public Builder enumerationValues(List<SlotTypeEnumerationValueArgs> enumerationValues) {
            return enumerationValues(Output.of(enumerationValues));
        }

        public Builder enumerationValues(SlotTypeEnumerationValueArgs... enumerationValues) {
            return enumerationValues(List.of(enumerationValues));
        }

        public Builder lastUpdatedDate(@Nullable Output<String> lastUpdatedDate) {
            $.lastUpdatedDate = lastUpdatedDate;
            return this;
        }

        public Builder lastUpdatedDate(String lastUpdatedDate) {
            return lastUpdatedDate(Output.of(lastUpdatedDate));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder valueSelectionStrategy(@Nullable Output<String> valueSelectionStrategy) {
            $.valueSelectionStrategy = valueSelectionStrategy;
            return this;
        }

        public Builder valueSelectionStrategy(String valueSelectionStrategy) {
            return valueSelectionStrategy(Output.of(valueSelectionStrategy));
        }

        public Builder version(@Nullable Output<String> version) {
            $.version = version;
            return this;
        }

        public Builder version(String version) {
            return version(Output.of(version));
        }

        public SlotTypeState build() {
            return $;
        }
    }

}
