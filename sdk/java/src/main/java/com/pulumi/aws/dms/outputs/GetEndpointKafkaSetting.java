// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.dms.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetEndpointKafkaSetting {
    private String broker;
    private Boolean includeControlDetails;
    private Boolean includeNullAndEmpty;
    private Boolean includePartitionValue;
    private Boolean includeTableAlterOperations;
    private Boolean includeTransactionDetails;
    private String messageFormat;
    private Integer messageMaxBytes;
    private Boolean noHexPrefix;
    private Boolean partitionIncludeSchemaTable;
    private String saslPassword;
    private String saslUsername;
    private String securityProtocol;
    private String sslCaCertificateArn;
    private String sslClientCertificateArn;
    private String sslClientKeyArn;
    private String sslClientKeyPassword;
    private String topic;

    private GetEndpointKafkaSetting() {}
    public String broker() {
        return this.broker;
    }
    public Boolean includeControlDetails() {
        return this.includeControlDetails;
    }
    public Boolean includeNullAndEmpty() {
        return this.includeNullAndEmpty;
    }
    public Boolean includePartitionValue() {
        return this.includePartitionValue;
    }
    public Boolean includeTableAlterOperations() {
        return this.includeTableAlterOperations;
    }
    public Boolean includeTransactionDetails() {
        return this.includeTransactionDetails;
    }
    public String messageFormat() {
        return this.messageFormat;
    }
    public Integer messageMaxBytes() {
        return this.messageMaxBytes;
    }
    public Boolean noHexPrefix() {
        return this.noHexPrefix;
    }
    public Boolean partitionIncludeSchemaTable() {
        return this.partitionIncludeSchemaTable;
    }
    public String saslPassword() {
        return this.saslPassword;
    }
    public String saslUsername() {
        return this.saslUsername;
    }
    public String securityProtocol() {
        return this.securityProtocol;
    }
    public String sslCaCertificateArn() {
        return this.sslCaCertificateArn;
    }
    public String sslClientCertificateArn() {
        return this.sslClientCertificateArn;
    }
    public String sslClientKeyArn() {
        return this.sslClientKeyArn;
    }
    public String sslClientKeyPassword() {
        return this.sslClientKeyPassword;
    }
    public String topic() {
        return this.topic;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetEndpointKafkaSetting defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String broker;
        private Boolean includeControlDetails;
        private Boolean includeNullAndEmpty;
        private Boolean includePartitionValue;
        private Boolean includeTableAlterOperations;
        private Boolean includeTransactionDetails;
        private String messageFormat;
        private Integer messageMaxBytes;
        private Boolean noHexPrefix;
        private Boolean partitionIncludeSchemaTable;
        private String saslPassword;
        private String saslUsername;
        private String securityProtocol;
        private String sslCaCertificateArn;
        private String sslClientCertificateArn;
        private String sslClientKeyArn;
        private String sslClientKeyPassword;
        private String topic;
        public Builder() {}
        public Builder(GetEndpointKafkaSetting defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.broker = defaults.broker;
    	      this.includeControlDetails = defaults.includeControlDetails;
    	      this.includeNullAndEmpty = defaults.includeNullAndEmpty;
    	      this.includePartitionValue = defaults.includePartitionValue;
    	      this.includeTableAlterOperations = defaults.includeTableAlterOperations;
    	      this.includeTransactionDetails = defaults.includeTransactionDetails;
    	      this.messageFormat = defaults.messageFormat;
    	      this.messageMaxBytes = defaults.messageMaxBytes;
    	      this.noHexPrefix = defaults.noHexPrefix;
    	      this.partitionIncludeSchemaTable = defaults.partitionIncludeSchemaTable;
    	      this.saslPassword = defaults.saslPassword;
    	      this.saslUsername = defaults.saslUsername;
    	      this.securityProtocol = defaults.securityProtocol;
    	      this.sslCaCertificateArn = defaults.sslCaCertificateArn;
    	      this.sslClientCertificateArn = defaults.sslClientCertificateArn;
    	      this.sslClientKeyArn = defaults.sslClientKeyArn;
    	      this.sslClientKeyPassword = defaults.sslClientKeyPassword;
    	      this.topic = defaults.topic;
        }

        @CustomType.Setter
        public Builder broker(String broker) {
            this.broker = Objects.requireNonNull(broker);
            return this;
        }
        @CustomType.Setter
        public Builder includeControlDetails(Boolean includeControlDetails) {
            this.includeControlDetails = Objects.requireNonNull(includeControlDetails);
            return this;
        }
        @CustomType.Setter
        public Builder includeNullAndEmpty(Boolean includeNullAndEmpty) {
            this.includeNullAndEmpty = Objects.requireNonNull(includeNullAndEmpty);
            return this;
        }
        @CustomType.Setter
        public Builder includePartitionValue(Boolean includePartitionValue) {
            this.includePartitionValue = Objects.requireNonNull(includePartitionValue);
            return this;
        }
        @CustomType.Setter
        public Builder includeTableAlterOperations(Boolean includeTableAlterOperations) {
            this.includeTableAlterOperations = Objects.requireNonNull(includeTableAlterOperations);
            return this;
        }
        @CustomType.Setter
        public Builder includeTransactionDetails(Boolean includeTransactionDetails) {
            this.includeTransactionDetails = Objects.requireNonNull(includeTransactionDetails);
            return this;
        }
        @CustomType.Setter
        public Builder messageFormat(String messageFormat) {
            this.messageFormat = Objects.requireNonNull(messageFormat);
            return this;
        }
        @CustomType.Setter
        public Builder messageMaxBytes(Integer messageMaxBytes) {
            this.messageMaxBytes = Objects.requireNonNull(messageMaxBytes);
            return this;
        }
        @CustomType.Setter
        public Builder noHexPrefix(Boolean noHexPrefix) {
            this.noHexPrefix = Objects.requireNonNull(noHexPrefix);
            return this;
        }
        @CustomType.Setter
        public Builder partitionIncludeSchemaTable(Boolean partitionIncludeSchemaTable) {
            this.partitionIncludeSchemaTable = Objects.requireNonNull(partitionIncludeSchemaTable);
            return this;
        }
        @CustomType.Setter
        public Builder saslPassword(String saslPassword) {
            this.saslPassword = Objects.requireNonNull(saslPassword);
            return this;
        }
        @CustomType.Setter
        public Builder saslUsername(String saslUsername) {
            this.saslUsername = Objects.requireNonNull(saslUsername);
            return this;
        }
        @CustomType.Setter
        public Builder securityProtocol(String securityProtocol) {
            this.securityProtocol = Objects.requireNonNull(securityProtocol);
            return this;
        }
        @CustomType.Setter
        public Builder sslCaCertificateArn(String sslCaCertificateArn) {
            this.sslCaCertificateArn = Objects.requireNonNull(sslCaCertificateArn);
            return this;
        }
        @CustomType.Setter
        public Builder sslClientCertificateArn(String sslClientCertificateArn) {
            this.sslClientCertificateArn = Objects.requireNonNull(sslClientCertificateArn);
            return this;
        }
        @CustomType.Setter
        public Builder sslClientKeyArn(String sslClientKeyArn) {
            this.sslClientKeyArn = Objects.requireNonNull(sslClientKeyArn);
            return this;
        }
        @CustomType.Setter
        public Builder sslClientKeyPassword(String sslClientKeyPassword) {
            this.sslClientKeyPassword = Objects.requireNonNull(sslClientKeyPassword);
            return this;
        }
        @CustomType.Setter
        public Builder topic(String topic) {
            this.topic = Objects.requireNonNull(topic);
            return this;
        }
        public GetEndpointKafkaSetting build() {
            final var o = new GetEndpointKafkaSetting();
            o.broker = broker;
            o.includeControlDetails = includeControlDetails;
            o.includeNullAndEmpty = includeNullAndEmpty;
            o.includePartitionValue = includePartitionValue;
            o.includeTableAlterOperations = includeTableAlterOperations;
            o.includeTransactionDetails = includeTransactionDetails;
            o.messageFormat = messageFormat;
            o.messageMaxBytes = messageMaxBytes;
            o.noHexPrefix = noHexPrefix;
            o.partitionIncludeSchemaTable = partitionIncludeSchemaTable;
            o.saslPassword = saslPassword;
            o.saslUsername = saslUsername;
            o.securityProtocol = securityProtocol;
            o.sslCaCertificateArn = sslCaCertificateArn;
            o.sslClientCertificateArn = sslClientCertificateArn;
            o.sslClientKeyArn = sslClientKeyArn;
            o.sslClientKeyPassword = sslClientKeyPassword;
            o.topic = topic;
            return o;
        }
    }
}
