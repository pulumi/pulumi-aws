// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.outputs;

import com.pulumi.aws.quicksight.outputs.RefreshScheduleScheduleScheduleFrequencyRefreshOnDay;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class RefreshScheduleScheduleScheduleFrequency {
    /**
     * @return The interval between scheduled refreshes. Valid values are `MINUTE15`, `MINUTE30`, `HOURLY`, `DAILY`, `WEEKLY` and `MONTHLY`.
     * 
     */
    private String interval;
    /**
     * @return The [refresh on entity](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ScheduleRefreshOnEntity.html) configuration for weekly or monthly schedules. See refresh_on_day.
     * 
     */
    private @Nullable RefreshScheduleScheduleScheduleFrequencyRefreshOnDay refreshOnDay;
    /**
     * @return The time of day that you want the dataset to refresh. This value is expressed in `HH:MM` format. This field is not required for schedules that refresh hourly.
     * 
     */
    private @Nullable String timeOfTheDay;
    /**
     * @return The timezone that you want the refresh schedule to use.
     * 
     */
    private @Nullable String timezone;

    private RefreshScheduleScheduleScheduleFrequency() {}
    /**
     * @return The interval between scheduled refreshes. Valid values are `MINUTE15`, `MINUTE30`, `HOURLY`, `DAILY`, `WEEKLY` and `MONTHLY`.
     * 
     */
    public String interval() {
        return this.interval;
    }
    /**
     * @return The [refresh on entity](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ScheduleRefreshOnEntity.html) configuration for weekly or monthly schedules. See refresh_on_day.
     * 
     */
    public Optional<RefreshScheduleScheduleScheduleFrequencyRefreshOnDay> refreshOnDay() {
        return Optional.ofNullable(this.refreshOnDay);
    }
    /**
     * @return The time of day that you want the dataset to refresh. This value is expressed in `HH:MM` format. This field is not required for schedules that refresh hourly.
     * 
     */
    public Optional<String> timeOfTheDay() {
        return Optional.ofNullable(this.timeOfTheDay);
    }
    /**
     * @return The timezone that you want the refresh schedule to use.
     * 
     */
    public Optional<String> timezone() {
        return Optional.ofNullable(this.timezone);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RefreshScheduleScheduleScheduleFrequency defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String interval;
        private @Nullable RefreshScheduleScheduleScheduleFrequencyRefreshOnDay refreshOnDay;
        private @Nullable String timeOfTheDay;
        private @Nullable String timezone;
        public Builder() {}
        public Builder(RefreshScheduleScheduleScheduleFrequency defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.interval = defaults.interval;
    	      this.refreshOnDay = defaults.refreshOnDay;
    	      this.timeOfTheDay = defaults.timeOfTheDay;
    	      this.timezone = defaults.timezone;
        }

        @CustomType.Setter
        public Builder interval(String interval) {
            this.interval = Objects.requireNonNull(interval);
            return this;
        }
        @CustomType.Setter
        public Builder refreshOnDay(@Nullable RefreshScheduleScheduleScheduleFrequencyRefreshOnDay refreshOnDay) {
            this.refreshOnDay = refreshOnDay;
            return this;
        }
        @CustomType.Setter
        public Builder timeOfTheDay(@Nullable String timeOfTheDay) {
            this.timeOfTheDay = timeOfTheDay;
            return this;
        }
        @CustomType.Setter
        public Builder timezone(@Nullable String timezone) {
            this.timezone = timezone;
            return this;
        }
        public RefreshScheduleScheduleScheduleFrequency build() {
            final var o = new RefreshScheduleScheduleScheduleFrequency();
            o.interval = interval;
            o.refreshOnDay = refreshOnDay;
            o.timeOfTheDay = timeOfTheDay;
            o.timezone = timezone;
            return o;
        }
    }
}
