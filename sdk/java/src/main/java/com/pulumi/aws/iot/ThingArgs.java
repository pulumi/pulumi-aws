// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.iot;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ThingArgs extends com.pulumi.resources.ResourceArgs {

    public static final ThingArgs Empty = new ThingArgs();

    /**
     * Map of attributes of the thing.
     * 
     */
    @Import(name="attributes")
    private @Nullable Output<Map<String,String>> attributes;

    /**
     * @return Map of attributes of the thing.
     * 
     */
    public Optional<Output<Map<String,String>>> attributes() {
        return Optional.ofNullable(this.attributes);
    }

    /**
     * The name of the thing.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the thing.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The thing type name.
     * 
     */
    @Import(name="thingTypeName")
    private @Nullable Output<String> thingTypeName;

    /**
     * @return The thing type name.
     * 
     */
    public Optional<Output<String>> thingTypeName() {
        return Optional.ofNullable(this.thingTypeName);
    }

    private ThingArgs() {}

    private ThingArgs(ThingArgs $) {
        this.attributes = $.attributes;
        this.name = $.name;
        this.thingTypeName = $.thingTypeName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ThingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ThingArgs $;

        public Builder() {
            $ = new ThingArgs();
        }

        public Builder(ThingArgs defaults) {
            $ = new ThingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param attributes Map of attributes of the thing.
         * 
         * @return builder
         * 
         */
        public Builder attributes(@Nullable Output<Map<String,String>> attributes) {
            $.attributes = attributes;
            return this;
        }

        /**
         * @param attributes Map of attributes of the thing.
         * 
         * @return builder
         * 
         */
        public Builder attributes(Map<String,String> attributes) {
            return attributes(Output.of(attributes));
        }

        /**
         * @param name The name of the thing.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the thing.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param thingTypeName The thing type name.
         * 
         * @return builder
         * 
         */
        public Builder thingTypeName(@Nullable Output<String> thingTypeName) {
            $.thingTypeName = thingTypeName;
            return this;
        }

        /**
         * @param thingTypeName The thing type name.
         * 
         * @return builder
         * 
         */
        public Builder thingTypeName(String thingTypeName) {
            return thingTypeName(Output.of(thingTypeName));
        }

        public ThingArgs build() {
            return $;
        }
    }

}
