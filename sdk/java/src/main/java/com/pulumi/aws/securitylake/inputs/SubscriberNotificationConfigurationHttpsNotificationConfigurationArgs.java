// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.securitylake.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SubscriberNotificationConfigurationHttpsNotificationConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final SubscriberNotificationConfigurationHttpsNotificationConfigurationArgs Empty = new SubscriberNotificationConfigurationHttpsNotificationConfigurationArgs();

    /**
     * The key name for the notification subscription.
     * 
     */
    @Import(name="authorizationApiKeyName")
    private @Nullable Output<String> authorizationApiKeyName;

    /**
     * @return The key name for the notification subscription.
     * 
     */
    public Optional<Output<String>> authorizationApiKeyName() {
        return Optional.ofNullable(this.authorizationApiKeyName);
    }

    /**
     * The key value for the notification subscription.
     * 
     */
    @Import(name="authorizationApiKeyValue")
    private @Nullable Output<String> authorizationApiKeyValue;

    /**
     * @return The key value for the notification subscription.
     * 
     */
    public Optional<Output<String>> authorizationApiKeyValue() {
        return Optional.ofNullable(this.authorizationApiKeyValue);
    }

    /**
     * The subscription endpoint in Security Lake. If you prefer notification with an HTTPs endpoint, populate this field.
     * 
     */
    @Import(name="endpoint")
    private @Nullable Output<String> endpoint;

    /**
     * @return The subscription endpoint in Security Lake. If you prefer notification with an HTTPs endpoint, populate this field.
     * 
     */
    public Optional<Output<String>> endpoint() {
        return Optional.ofNullable(this.endpoint);
    }

    /**
     * The HTTPS method used for the notification subscription.
     * 
     */
    @Import(name="httpMethod")
    private @Nullable Output<String> httpMethod;

    /**
     * @return The HTTPS method used for the notification subscription.
     * 
     */
    public Optional<Output<String>> httpMethod() {
        return Optional.ofNullable(this.httpMethod);
    }

    /**
     * The Amazon Resource Name (ARN) of the EventBridge API destinations IAM role that you created. For more information about ARNs and how to use them in policies, see Managing data access and AWS Managed Policies in the Amazon Security Lake User Guide.
     * 
     */
    @Import(name="targetRoleArn")
    private @Nullable Output<String> targetRoleArn;

    /**
     * @return The Amazon Resource Name (ARN) of the EventBridge API destinations IAM role that you created. For more information about ARNs and how to use them in policies, see Managing data access and AWS Managed Policies in the Amazon Security Lake User Guide.
     * 
     */
    public Optional<Output<String>> targetRoleArn() {
        return Optional.ofNullable(this.targetRoleArn);
    }

    private SubscriberNotificationConfigurationHttpsNotificationConfigurationArgs() {}

    private SubscriberNotificationConfigurationHttpsNotificationConfigurationArgs(SubscriberNotificationConfigurationHttpsNotificationConfigurationArgs $) {
        this.authorizationApiKeyName = $.authorizationApiKeyName;
        this.authorizationApiKeyValue = $.authorizationApiKeyValue;
        this.endpoint = $.endpoint;
        this.httpMethod = $.httpMethod;
        this.targetRoleArn = $.targetRoleArn;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SubscriberNotificationConfigurationHttpsNotificationConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SubscriberNotificationConfigurationHttpsNotificationConfigurationArgs $;

        public Builder() {
            $ = new SubscriberNotificationConfigurationHttpsNotificationConfigurationArgs();
        }

        public Builder(SubscriberNotificationConfigurationHttpsNotificationConfigurationArgs defaults) {
            $ = new SubscriberNotificationConfigurationHttpsNotificationConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param authorizationApiKeyName The key name for the notification subscription.
         * 
         * @return builder
         * 
         */
        public Builder authorizationApiKeyName(@Nullable Output<String> authorizationApiKeyName) {
            $.authorizationApiKeyName = authorizationApiKeyName;
            return this;
        }

        /**
         * @param authorizationApiKeyName The key name for the notification subscription.
         * 
         * @return builder
         * 
         */
        public Builder authorizationApiKeyName(String authorizationApiKeyName) {
            return authorizationApiKeyName(Output.of(authorizationApiKeyName));
        }

        /**
         * @param authorizationApiKeyValue The key value for the notification subscription.
         * 
         * @return builder
         * 
         */
        public Builder authorizationApiKeyValue(@Nullable Output<String> authorizationApiKeyValue) {
            $.authorizationApiKeyValue = authorizationApiKeyValue;
            return this;
        }

        /**
         * @param authorizationApiKeyValue The key value for the notification subscription.
         * 
         * @return builder
         * 
         */
        public Builder authorizationApiKeyValue(String authorizationApiKeyValue) {
            return authorizationApiKeyValue(Output.of(authorizationApiKeyValue));
        }

        /**
         * @param endpoint The subscription endpoint in Security Lake. If you prefer notification with an HTTPs endpoint, populate this field.
         * 
         * @return builder
         * 
         */
        public Builder endpoint(@Nullable Output<String> endpoint) {
            $.endpoint = endpoint;
            return this;
        }

        /**
         * @param endpoint The subscription endpoint in Security Lake. If you prefer notification with an HTTPs endpoint, populate this field.
         * 
         * @return builder
         * 
         */
        public Builder endpoint(String endpoint) {
            return endpoint(Output.of(endpoint));
        }

        /**
         * @param httpMethod The HTTPS method used for the notification subscription.
         * 
         * @return builder
         * 
         */
        public Builder httpMethod(@Nullable Output<String> httpMethod) {
            $.httpMethod = httpMethod;
            return this;
        }

        /**
         * @param httpMethod The HTTPS method used for the notification subscription.
         * 
         * @return builder
         * 
         */
        public Builder httpMethod(String httpMethod) {
            return httpMethod(Output.of(httpMethod));
        }

        /**
         * @param targetRoleArn The Amazon Resource Name (ARN) of the EventBridge API destinations IAM role that you created. For more information about ARNs and how to use them in policies, see Managing data access and AWS Managed Policies in the Amazon Security Lake User Guide.
         * 
         * @return builder
         * 
         */
        public Builder targetRoleArn(@Nullable Output<String> targetRoleArn) {
            $.targetRoleArn = targetRoleArn;
            return this;
        }

        /**
         * @param targetRoleArn The Amazon Resource Name (ARN) of the EventBridge API destinations IAM role that you created. For more information about ARNs and how to use them in policies, see Managing data access and AWS Managed Policies in the Amazon Security Lake User Guide.
         * 
         * @return builder
         * 
         */
        public Builder targetRoleArn(String targetRoleArn) {
            return targetRoleArn(Output.of(targetRoleArn));
        }

        public SubscriberNotificationConfigurationHttpsNotificationConfigurationArgs build() {
            return $;
        }
    }

}
