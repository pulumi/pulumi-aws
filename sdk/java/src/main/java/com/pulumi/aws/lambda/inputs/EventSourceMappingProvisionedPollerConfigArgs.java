// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.lambda.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EventSourceMappingProvisionedPollerConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final EventSourceMappingProvisionedPollerConfigArgs Empty = new EventSourceMappingProvisionedPollerConfigArgs();

    /**
     * The maximum number of event pollers this event source can scale up to. The range is between 1 and 2000.
     * 
     */
    @Import(name="maximumPollers")
    private @Nullable Output<Integer> maximumPollers;

    /**
     * @return The maximum number of event pollers this event source can scale up to. The range is between 1 and 2000.
     * 
     */
    public Optional<Output<Integer>> maximumPollers() {
        return Optional.ofNullable(this.maximumPollers);
    }

    /**
     * The minimum number of event pollers this event source can scale down to. The range is between 1 and 200.
     * 
     */
    @Import(name="minimumPollers")
    private @Nullable Output<Integer> minimumPollers;

    /**
     * @return The minimum number of event pollers this event source can scale down to. The range is between 1 and 200.
     * 
     */
    public Optional<Output<Integer>> minimumPollers() {
        return Optional.ofNullable(this.minimumPollers);
    }

    private EventSourceMappingProvisionedPollerConfigArgs() {}

    private EventSourceMappingProvisionedPollerConfigArgs(EventSourceMappingProvisionedPollerConfigArgs $) {
        this.maximumPollers = $.maximumPollers;
        this.minimumPollers = $.minimumPollers;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EventSourceMappingProvisionedPollerConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EventSourceMappingProvisionedPollerConfigArgs $;

        public Builder() {
            $ = new EventSourceMappingProvisionedPollerConfigArgs();
        }

        public Builder(EventSourceMappingProvisionedPollerConfigArgs defaults) {
            $ = new EventSourceMappingProvisionedPollerConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param maximumPollers The maximum number of event pollers this event source can scale up to. The range is between 1 and 2000.
         * 
         * @return builder
         * 
         */
        public Builder maximumPollers(@Nullable Output<Integer> maximumPollers) {
            $.maximumPollers = maximumPollers;
            return this;
        }

        /**
         * @param maximumPollers The maximum number of event pollers this event source can scale up to. The range is between 1 and 2000.
         * 
         * @return builder
         * 
         */
        public Builder maximumPollers(Integer maximumPollers) {
            return maximumPollers(Output.of(maximumPollers));
        }

        /**
         * @param minimumPollers The minimum number of event pollers this event source can scale down to. The range is between 1 and 200.
         * 
         * @return builder
         * 
         */
        public Builder minimumPollers(@Nullable Output<Integer> minimumPollers) {
            $.minimumPollers = minimumPollers;
            return this;
        }

        /**
         * @param minimumPollers The minimum number of event pollers this event source can scale down to. The range is between 1 and 200.
         * 
         * @return builder
         * 
         */
        public Builder minimumPollers(Integer minimumPollers) {
            return minimumPollers(Output.of(minimumPollers));
        }

        public EventSourceMappingProvisionedPollerConfigArgs build() {
            return $;
        }
    }

}
