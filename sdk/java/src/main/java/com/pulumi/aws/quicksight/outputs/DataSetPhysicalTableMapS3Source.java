// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.outputs;

import com.pulumi.aws.quicksight.outputs.DataSetPhysicalTableMapS3SourceInputColumn;
import com.pulumi.aws.quicksight.outputs.DataSetPhysicalTableMapS3SourceUploadSettings;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class DataSetPhysicalTableMapS3Source {
    /**
     * @return ARN of the data source.
     * 
     */
    private String dataSourceArn;
    /**
     * @return Column schema of the table. See input_columns.
     * 
     */
    private List<DataSetPhysicalTableMapS3SourceInputColumn> inputColumns;
    /**
     * @return Information about the format for the S3 source file or files. See upload_settings.
     * 
     */
    private DataSetPhysicalTableMapS3SourceUploadSettings uploadSettings;

    private DataSetPhysicalTableMapS3Source() {}
    /**
     * @return ARN of the data source.
     * 
     */
    public String dataSourceArn() {
        return this.dataSourceArn;
    }
    /**
     * @return Column schema of the table. See input_columns.
     * 
     */
    public List<DataSetPhysicalTableMapS3SourceInputColumn> inputColumns() {
        return this.inputColumns;
    }
    /**
     * @return Information about the format for the S3 source file or files. See upload_settings.
     * 
     */
    public DataSetPhysicalTableMapS3SourceUploadSettings uploadSettings() {
        return this.uploadSettings;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DataSetPhysicalTableMapS3Source defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String dataSourceArn;
        private List<DataSetPhysicalTableMapS3SourceInputColumn> inputColumns;
        private DataSetPhysicalTableMapS3SourceUploadSettings uploadSettings;
        public Builder() {}
        public Builder(DataSetPhysicalTableMapS3Source defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dataSourceArn = defaults.dataSourceArn;
    	      this.inputColumns = defaults.inputColumns;
    	      this.uploadSettings = defaults.uploadSettings;
        }

        @CustomType.Setter
        public Builder dataSourceArn(String dataSourceArn) {
            this.dataSourceArn = Objects.requireNonNull(dataSourceArn);
            return this;
        }
        @CustomType.Setter
        public Builder inputColumns(List<DataSetPhysicalTableMapS3SourceInputColumn> inputColumns) {
            this.inputColumns = Objects.requireNonNull(inputColumns);
            return this;
        }
        public Builder inputColumns(DataSetPhysicalTableMapS3SourceInputColumn... inputColumns) {
            return inputColumns(List.of(inputColumns));
        }
        @CustomType.Setter
        public Builder uploadSettings(DataSetPhysicalTableMapS3SourceUploadSettings uploadSettings) {
            this.uploadSettings = Objects.requireNonNull(uploadSettings);
            return this;
        }
        public DataSetPhysicalTableMapS3Source build() {
            final var o = new DataSetPhysicalTableMapS3Source();
            o.dataSourceArn = dataSourceArn;
            o.inputColumns = inputColumns;
            o.uploadSettings = uploadSettings;
            return o;
        }
    }
}
