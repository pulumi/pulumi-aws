// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.servicecatalog;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TagOptionArgs extends com.pulumi.resources.ResourceArgs {

    public static final TagOptionArgs Empty = new TagOptionArgs();

    /**
     * Whether tag option is active. Default is `true`.
     * 
     */
    @Import(name="active")
    private @Nullable Output<Boolean> active;

    /**
     * @return Whether tag option is active. Default is `true`.
     * 
     */
    public Optional<Output<Boolean>> active() {
        return Optional.ofNullable(this.active);
    }

    /**
     * Tag option key.
     * 
     */
    @Import(name="key", required=true)
    private Output<String> key;

    /**
     * @return Tag option key.
     * 
     */
    public Output<String> key() {
        return this.key;
    }

    /**
     * Tag option value.
     * 
     * The following arguments are optional:
     * 
     */
    @Import(name="value", required=true)
    private Output<String> value;

    /**
     * @return Tag option value.
     * 
     * The following arguments are optional:
     * 
     */
    public Output<String> value() {
        return this.value;
    }

    private TagOptionArgs() {}

    private TagOptionArgs(TagOptionArgs $) {
        this.active = $.active;
        this.key = $.key;
        this.value = $.value;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TagOptionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TagOptionArgs $;

        public Builder() {
            $ = new TagOptionArgs();
        }

        public Builder(TagOptionArgs defaults) {
            $ = new TagOptionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param active Whether tag option is active. Default is `true`.
         * 
         * @return builder
         * 
         */
        public Builder active(@Nullable Output<Boolean> active) {
            $.active = active;
            return this;
        }

        /**
         * @param active Whether tag option is active. Default is `true`.
         * 
         * @return builder
         * 
         */
        public Builder active(Boolean active) {
            return active(Output.of(active));
        }

        /**
         * @param key Tag option key.
         * 
         * @return builder
         * 
         */
        public Builder key(Output<String> key) {
            $.key = key;
            return this;
        }

        /**
         * @param key Tag option key.
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            return key(Output.of(key));
        }

        /**
         * @param value Tag option value.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder value(Output<String> value) {
            $.value = value;
            return this;
        }

        /**
         * @param value Tag option value.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder value(String value) {
            return value(Output.of(value));
        }

        public TagOptionArgs build() {
            $.key = Objects.requireNonNull($.key, "expected parameter 'key' to be non-null");
            $.value = Objects.requireNonNull($.value, "expected parameter 'value' to be non-null");
            return $;
        }
    }

}
