// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ssm.outputs;

import com.pulumi.aws.ssm.outputs.GetPatchBaselineApprovalRule;
import com.pulumi.aws.ssm.outputs.GetPatchBaselineGlobalFilter;
import com.pulumi.aws.ssm.outputs.GetPatchBaselineSource;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetPatchBaselineResult {
    /**
     * @return List of rules used to include patches in the baseline.
     * 
     */
    private @Nullable List<GetPatchBaselineApprovalRule> approvalRules;
    /**
     * @return List of explicitly approved patches for the baseline.
     * 
     */
    private @Nullable List<String> approvedPatches;
    /**
     * @return The compliance level for approved patches.
     * 
     */
    private @Nullable String approvedPatchesComplianceLevel;
    /**
     * @return Indicates whether the list of approved patches includes non-security updates that should be applied to the instances.
     * 
     */
    private @Nullable Boolean approvedPatchesEnableNonSecurity;
    private @Nullable Boolean defaultBaseline;
    /**
     * @return Description of the baseline.
     * 
     */
    private @Nullable String description;
    /**
     * @return Set of global filters used to exclude patches from the baseline.
     * 
     */
    private @Nullable List<GetPatchBaselineGlobalFilter> globalFilters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private @Nullable String id;
    /**
     * @return The name specified to identify the patch source.
     * 
     */
    private @Nullable String name;
    private @Nullable String namePrefix;
    private @Nullable String operatingSystem;
    private String owner;
    /**
     * @return List of rejected patches.
     * 
     */
    private @Nullable List<String> rejectedPatches;
    /**
     * @return The action specified to take on patches included in the `rejected_patches` list.
     * 
     */
    private @Nullable String rejectedPatchesAction;
    /**
     * @return Information about the patches to use to update the managed nodes, including target operating systems and source repositories.
     * 
     */
    private @Nullable List<GetPatchBaselineSource> sources;

    private GetPatchBaselineResult() {}
    /**
     * @return List of rules used to include patches in the baseline.
     * 
     */
    public List<GetPatchBaselineApprovalRule> approvalRules() {
        return this.approvalRules == null ? List.of() : this.approvalRules;
    }
    /**
     * @return List of explicitly approved patches for the baseline.
     * 
     */
    public List<String> approvedPatches() {
        return this.approvedPatches == null ? List.of() : this.approvedPatches;
    }
    /**
     * @return The compliance level for approved patches.
     * 
     */
    public Optional<String> approvedPatchesComplianceLevel() {
        return Optional.ofNullable(this.approvedPatchesComplianceLevel);
    }
    /**
     * @return Indicates whether the list of approved patches includes non-security updates that should be applied to the instances.
     * 
     */
    public Optional<Boolean> approvedPatchesEnableNonSecurity() {
        return Optional.ofNullable(this.approvedPatchesEnableNonSecurity);
    }
    public Optional<Boolean> defaultBaseline() {
        return Optional.ofNullable(this.defaultBaseline);
    }
    /**
     * @return Description of the baseline.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return Set of global filters used to exclude patches from the baseline.
     * 
     */
    public List<GetPatchBaselineGlobalFilter> globalFilters() {
        return this.globalFilters == null ? List.of() : this.globalFilters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return The name specified to identify the patch source.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    public Optional<String> namePrefix() {
        return Optional.ofNullable(this.namePrefix);
    }
    public Optional<String> operatingSystem() {
        return Optional.ofNullable(this.operatingSystem);
    }
    public String owner() {
        return this.owner;
    }
    /**
     * @return List of rejected patches.
     * 
     */
    public List<String> rejectedPatches() {
        return this.rejectedPatches == null ? List.of() : this.rejectedPatches;
    }
    /**
     * @return The action specified to take on patches included in the `rejected_patches` list.
     * 
     */
    public Optional<String> rejectedPatchesAction() {
        return Optional.ofNullable(this.rejectedPatchesAction);
    }
    /**
     * @return Information about the patches to use to update the managed nodes, including target operating systems and source repositories.
     * 
     */
    public List<GetPatchBaselineSource> sources() {
        return this.sources == null ? List.of() : this.sources;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPatchBaselineResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<GetPatchBaselineApprovalRule> approvalRules;
        private @Nullable List<String> approvedPatches;
        private @Nullable String approvedPatchesComplianceLevel;
        private @Nullable Boolean approvedPatchesEnableNonSecurity;
        private @Nullable Boolean defaultBaseline;
        private @Nullable String description;
        private @Nullable List<GetPatchBaselineGlobalFilter> globalFilters;
        private @Nullable String id;
        private @Nullable String name;
        private @Nullable String namePrefix;
        private @Nullable String operatingSystem;
        private String owner;
        private @Nullable List<String> rejectedPatches;
        private @Nullable String rejectedPatchesAction;
        private @Nullable List<GetPatchBaselineSource> sources;
        public Builder() {}
        public Builder(GetPatchBaselineResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.approvalRules = defaults.approvalRules;
    	      this.approvedPatches = defaults.approvedPatches;
    	      this.approvedPatchesComplianceLevel = defaults.approvedPatchesComplianceLevel;
    	      this.approvedPatchesEnableNonSecurity = defaults.approvedPatchesEnableNonSecurity;
    	      this.defaultBaseline = defaults.defaultBaseline;
    	      this.description = defaults.description;
    	      this.globalFilters = defaults.globalFilters;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.namePrefix = defaults.namePrefix;
    	      this.operatingSystem = defaults.operatingSystem;
    	      this.owner = defaults.owner;
    	      this.rejectedPatches = defaults.rejectedPatches;
    	      this.rejectedPatchesAction = defaults.rejectedPatchesAction;
    	      this.sources = defaults.sources;
        }

        @CustomType.Setter
        public Builder approvalRules(@Nullable List<GetPatchBaselineApprovalRule> approvalRules) {
            this.approvalRules = approvalRules;
            return this;
        }
        public Builder approvalRules(GetPatchBaselineApprovalRule... approvalRules) {
            return approvalRules(List.of(approvalRules));
        }
        @CustomType.Setter
        public Builder approvedPatches(@Nullable List<String> approvedPatches) {
            this.approvedPatches = approvedPatches;
            return this;
        }
        public Builder approvedPatches(String... approvedPatches) {
            return approvedPatches(List.of(approvedPatches));
        }
        @CustomType.Setter
        public Builder approvedPatchesComplianceLevel(@Nullable String approvedPatchesComplianceLevel) {
            this.approvedPatchesComplianceLevel = approvedPatchesComplianceLevel;
            return this;
        }
        @CustomType.Setter
        public Builder approvedPatchesEnableNonSecurity(@Nullable Boolean approvedPatchesEnableNonSecurity) {
            this.approvedPatchesEnableNonSecurity = approvedPatchesEnableNonSecurity;
            return this;
        }
        @CustomType.Setter
        public Builder defaultBaseline(@Nullable Boolean defaultBaseline) {
            this.defaultBaseline = defaultBaseline;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder globalFilters(@Nullable List<GetPatchBaselineGlobalFilter> globalFilters) {
            this.globalFilters = globalFilters;
            return this;
        }
        public Builder globalFilters(GetPatchBaselineGlobalFilter... globalFilters) {
            return globalFilters(List.of(globalFilters));
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder namePrefix(@Nullable String namePrefix) {
            this.namePrefix = namePrefix;
            return this;
        }
        @CustomType.Setter
        public Builder operatingSystem(@Nullable String operatingSystem) {
            this.operatingSystem = operatingSystem;
            return this;
        }
        @CustomType.Setter
        public Builder owner(String owner) {
            this.owner = Objects.requireNonNull(owner);
            return this;
        }
        @CustomType.Setter
        public Builder rejectedPatches(@Nullable List<String> rejectedPatches) {
            this.rejectedPatches = rejectedPatches;
            return this;
        }
        public Builder rejectedPatches(String... rejectedPatches) {
            return rejectedPatches(List.of(rejectedPatches));
        }
        @CustomType.Setter
        public Builder rejectedPatchesAction(@Nullable String rejectedPatchesAction) {
            this.rejectedPatchesAction = rejectedPatchesAction;
            return this;
        }
        @CustomType.Setter
        public Builder sources(@Nullable List<GetPatchBaselineSource> sources) {
            this.sources = sources;
            return this;
        }
        public Builder sources(GetPatchBaselineSource... sources) {
            return sources(List.of(sources));
        }
        public GetPatchBaselineResult build() {
            final var o = new GetPatchBaselineResult();
            o.approvalRules = approvalRules;
            o.approvedPatches = approvedPatches;
            o.approvedPatchesComplianceLevel = approvedPatchesComplianceLevel;
            o.approvedPatchesEnableNonSecurity = approvedPatchesEnableNonSecurity;
            o.defaultBaseline = defaultBaseline;
            o.description = description;
            o.globalFilters = globalFilters;
            o.id = id;
            o.name = name;
            o.namePrefix = namePrefix;
            o.operatingSystem = operatingSystem;
            o.owner = owner;
            o.rejectedPatches = rejectedPatches;
            o.rejectedPatchesAction = rejectedPatchesAction;
            o.sources = sources;
            return o;
        }
    }
}
