// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.pipes.outputs;

import com.pulumi.aws.pipes.outputs.PipeSourceParametersRabbitmqBrokerParametersCredentials;
import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class PipeSourceParametersRabbitmqBrokerParameters {
    /**
     * @return The maximum number of records to include in each batch. Maximum value of 10000.
     * 
     */
    private @Nullable Integer batchSize;
    /**
     * @return The credentials needed to access the resource. Detailed below.
     * 
     */
    private PipeSourceParametersRabbitmqBrokerParametersCredentials credentials;
    /**
     * @return The maximum length of a time to wait for events. Maximum value of 300.
     * 
     */
    private @Nullable Integer maximumBatchingWindowInSeconds;
    /**
     * @return The name of the destination queue to consume. Maximum length of 1000.
     * 
     */
    private String queueName;
    /**
     * @return The name of the virtual host associated with the source broker. Maximum length of 200.
     * 
     */
    private @Nullable String virtualHost;

    private PipeSourceParametersRabbitmqBrokerParameters() {}
    /**
     * @return The maximum number of records to include in each batch. Maximum value of 10000.
     * 
     */
    public Optional<Integer> batchSize() {
        return Optional.ofNullable(this.batchSize);
    }
    /**
     * @return The credentials needed to access the resource. Detailed below.
     * 
     */
    public PipeSourceParametersRabbitmqBrokerParametersCredentials credentials() {
        return this.credentials;
    }
    /**
     * @return The maximum length of a time to wait for events. Maximum value of 300.
     * 
     */
    public Optional<Integer> maximumBatchingWindowInSeconds() {
        return Optional.ofNullable(this.maximumBatchingWindowInSeconds);
    }
    /**
     * @return The name of the destination queue to consume. Maximum length of 1000.
     * 
     */
    public String queueName() {
        return this.queueName;
    }
    /**
     * @return The name of the virtual host associated with the source broker. Maximum length of 200.
     * 
     */
    public Optional<String> virtualHost() {
        return Optional.ofNullable(this.virtualHost);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PipeSourceParametersRabbitmqBrokerParameters defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer batchSize;
        private PipeSourceParametersRabbitmqBrokerParametersCredentials credentials;
        private @Nullable Integer maximumBatchingWindowInSeconds;
        private String queueName;
        private @Nullable String virtualHost;
        public Builder() {}
        public Builder(PipeSourceParametersRabbitmqBrokerParameters defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.batchSize = defaults.batchSize;
    	      this.credentials = defaults.credentials;
    	      this.maximumBatchingWindowInSeconds = defaults.maximumBatchingWindowInSeconds;
    	      this.queueName = defaults.queueName;
    	      this.virtualHost = defaults.virtualHost;
        }

        @CustomType.Setter
        public Builder batchSize(@Nullable Integer batchSize) {
            this.batchSize = batchSize;
            return this;
        }
        @CustomType.Setter
        public Builder credentials(PipeSourceParametersRabbitmqBrokerParametersCredentials credentials) {
            this.credentials = Objects.requireNonNull(credentials);
            return this;
        }
        @CustomType.Setter
        public Builder maximumBatchingWindowInSeconds(@Nullable Integer maximumBatchingWindowInSeconds) {
            this.maximumBatchingWindowInSeconds = maximumBatchingWindowInSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder queueName(String queueName) {
            this.queueName = Objects.requireNonNull(queueName);
            return this;
        }
        @CustomType.Setter
        public Builder virtualHost(@Nullable String virtualHost) {
            this.virtualHost = virtualHost;
            return this;
        }
        public PipeSourceParametersRabbitmqBrokerParameters build() {
            final var _resultValue = new PipeSourceParametersRabbitmqBrokerParameters();
            _resultValue.batchSize = batchSize;
            _resultValue.credentials = credentials;
            _resultValue.maximumBatchingWindowInSeconds = maximumBatchingWindowInSeconds;
            _resultValue.queueName = queueName;
            _resultValue.virtualHost = virtualHost;
            return _resultValue;
        }
    }
}
