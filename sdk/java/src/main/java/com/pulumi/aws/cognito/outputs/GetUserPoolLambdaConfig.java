// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.cognito.outputs;

import com.pulumi.aws.cognito.outputs.GetUserPoolLambdaConfigCustomEmailSender;
import com.pulumi.aws.cognito.outputs.GetUserPoolLambdaConfigCustomSmsSender;
import com.pulumi.aws.cognito.outputs.GetUserPoolLambdaConfigPreTokenGenerationConfig;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetUserPoolLambdaConfig {
    private String createAuthChallenge;
    private List<GetUserPoolLambdaConfigCustomEmailSender> customEmailSenders;
    private String customMessage;
    private List<GetUserPoolLambdaConfigCustomSmsSender> customSmsSenders;
    private String defineAuthChallenge;
    private String kmsKeyId;
    private String postAuthentication;
    private String postConfirmation;
    private String preAuthentication;
    private String preSignUp;
    private String preTokenGeneration;
    private List<GetUserPoolLambdaConfigPreTokenGenerationConfig> preTokenGenerationConfigs;
    private String userMigration;
    private String verifyAuthChallengeResponse;

    private GetUserPoolLambdaConfig() {}
    public String createAuthChallenge() {
        return this.createAuthChallenge;
    }
    public List<GetUserPoolLambdaConfigCustomEmailSender> customEmailSenders() {
        return this.customEmailSenders;
    }
    public String customMessage() {
        return this.customMessage;
    }
    public List<GetUserPoolLambdaConfigCustomSmsSender> customSmsSenders() {
        return this.customSmsSenders;
    }
    public String defineAuthChallenge() {
        return this.defineAuthChallenge;
    }
    public String kmsKeyId() {
        return this.kmsKeyId;
    }
    public String postAuthentication() {
        return this.postAuthentication;
    }
    public String postConfirmation() {
        return this.postConfirmation;
    }
    public String preAuthentication() {
        return this.preAuthentication;
    }
    public String preSignUp() {
        return this.preSignUp;
    }
    public String preTokenGeneration() {
        return this.preTokenGeneration;
    }
    public List<GetUserPoolLambdaConfigPreTokenGenerationConfig> preTokenGenerationConfigs() {
        return this.preTokenGenerationConfigs;
    }
    public String userMigration() {
        return this.userMigration;
    }
    public String verifyAuthChallengeResponse() {
        return this.verifyAuthChallengeResponse;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetUserPoolLambdaConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String createAuthChallenge;
        private List<GetUserPoolLambdaConfigCustomEmailSender> customEmailSenders;
        private String customMessage;
        private List<GetUserPoolLambdaConfigCustomSmsSender> customSmsSenders;
        private String defineAuthChallenge;
        private String kmsKeyId;
        private String postAuthentication;
        private String postConfirmation;
        private String preAuthentication;
        private String preSignUp;
        private String preTokenGeneration;
        private List<GetUserPoolLambdaConfigPreTokenGenerationConfig> preTokenGenerationConfigs;
        private String userMigration;
        private String verifyAuthChallengeResponse;
        public Builder() {}
        public Builder(GetUserPoolLambdaConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createAuthChallenge = defaults.createAuthChallenge;
    	      this.customEmailSenders = defaults.customEmailSenders;
    	      this.customMessage = defaults.customMessage;
    	      this.customSmsSenders = defaults.customSmsSenders;
    	      this.defineAuthChallenge = defaults.defineAuthChallenge;
    	      this.kmsKeyId = defaults.kmsKeyId;
    	      this.postAuthentication = defaults.postAuthentication;
    	      this.postConfirmation = defaults.postConfirmation;
    	      this.preAuthentication = defaults.preAuthentication;
    	      this.preSignUp = defaults.preSignUp;
    	      this.preTokenGeneration = defaults.preTokenGeneration;
    	      this.preTokenGenerationConfigs = defaults.preTokenGenerationConfigs;
    	      this.userMigration = defaults.userMigration;
    	      this.verifyAuthChallengeResponse = defaults.verifyAuthChallengeResponse;
        }

        @CustomType.Setter
        public Builder createAuthChallenge(String createAuthChallenge) {
            if (createAuthChallenge == null) {
              throw new MissingRequiredPropertyException("GetUserPoolLambdaConfig", "createAuthChallenge");
            }
            this.createAuthChallenge = createAuthChallenge;
            return this;
        }
        @CustomType.Setter
        public Builder customEmailSenders(List<GetUserPoolLambdaConfigCustomEmailSender> customEmailSenders) {
            if (customEmailSenders == null) {
              throw new MissingRequiredPropertyException("GetUserPoolLambdaConfig", "customEmailSenders");
            }
            this.customEmailSenders = customEmailSenders;
            return this;
        }
        public Builder customEmailSenders(GetUserPoolLambdaConfigCustomEmailSender... customEmailSenders) {
            return customEmailSenders(List.of(customEmailSenders));
        }
        @CustomType.Setter
        public Builder customMessage(String customMessage) {
            if (customMessage == null) {
              throw new MissingRequiredPropertyException("GetUserPoolLambdaConfig", "customMessage");
            }
            this.customMessage = customMessage;
            return this;
        }
        @CustomType.Setter
        public Builder customSmsSenders(List<GetUserPoolLambdaConfigCustomSmsSender> customSmsSenders) {
            if (customSmsSenders == null) {
              throw new MissingRequiredPropertyException("GetUserPoolLambdaConfig", "customSmsSenders");
            }
            this.customSmsSenders = customSmsSenders;
            return this;
        }
        public Builder customSmsSenders(GetUserPoolLambdaConfigCustomSmsSender... customSmsSenders) {
            return customSmsSenders(List.of(customSmsSenders));
        }
        @CustomType.Setter
        public Builder defineAuthChallenge(String defineAuthChallenge) {
            if (defineAuthChallenge == null) {
              throw new MissingRequiredPropertyException("GetUserPoolLambdaConfig", "defineAuthChallenge");
            }
            this.defineAuthChallenge = defineAuthChallenge;
            return this;
        }
        @CustomType.Setter
        public Builder kmsKeyId(String kmsKeyId) {
            if (kmsKeyId == null) {
              throw new MissingRequiredPropertyException("GetUserPoolLambdaConfig", "kmsKeyId");
            }
            this.kmsKeyId = kmsKeyId;
            return this;
        }
        @CustomType.Setter
        public Builder postAuthentication(String postAuthentication) {
            if (postAuthentication == null) {
              throw new MissingRequiredPropertyException("GetUserPoolLambdaConfig", "postAuthentication");
            }
            this.postAuthentication = postAuthentication;
            return this;
        }
        @CustomType.Setter
        public Builder postConfirmation(String postConfirmation) {
            if (postConfirmation == null) {
              throw new MissingRequiredPropertyException("GetUserPoolLambdaConfig", "postConfirmation");
            }
            this.postConfirmation = postConfirmation;
            return this;
        }
        @CustomType.Setter
        public Builder preAuthentication(String preAuthentication) {
            if (preAuthentication == null) {
              throw new MissingRequiredPropertyException("GetUserPoolLambdaConfig", "preAuthentication");
            }
            this.preAuthentication = preAuthentication;
            return this;
        }
        @CustomType.Setter
        public Builder preSignUp(String preSignUp) {
            if (preSignUp == null) {
              throw new MissingRequiredPropertyException("GetUserPoolLambdaConfig", "preSignUp");
            }
            this.preSignUp = preSignUp;
            return this;
        }
        @CustomType.Setter
        public Builder preTokenGeneration(String preTokenGeneration) {
            if (preTokenGeneration == null) {
              throw new MissingRequiredPropertyException("GetUserPoolLambdaConfig", "preTokenGeneration");
            }
            this.preTokenGeneration = preTokenGeneration;
            return this;
        }
        @CustomType.Setter
        public Builder preTokenGenerationConfigs(List<GetUserPoolLambdaConfigPreTokenGenerationConfig> preTokenGenerationConfigs) {
            if (preTokenGenerationConfigs == null) {
              throw new MissingRequiredPropertyException("GetUserPoolLambdaConfig", "preTokenGenerationConfigs");
            }
            this.preTokenGenerationConfigs = preTokenGenerationConfigs;
            return this;
        }
        public Builder preTokenGenerationConfigs(GetUserPoolLambdaConfigPreTokenGenerationConfig... preTokenGenerationConfigs) {
            return preTokenGenerationConfigs(List.of(preTokenGenerationConfigs));
        }
        @CustomType.Setter
        public Builder userMigration(String userMigration) {
            if (userMigration == null) {
              throw new MissingRequiredPropertyException("GetUserPoolLambdaConfig", "userMigration");
            }
            this.userMigration = userMigration;
            return this;
        }
        @CustomType.Setter
        public Builder verifyAuthChallengeResponse(String verifyAuthChallengeResponse) {
            if (verifyAuthChallengeResponse == null) {
              throw new MissingRequiredPropertyException("GetUserPoolLambdaConfig", "verifyAuthChallengeResponse");
            }
            this.verifyAuthChallengeResponse = verifyAuthChallengeResponse;
            return this;
        }
        public GetUserPoolLambdaConfig build() {
            final var _resultValue = new GetUserPoolLambdaConfig();
            _resultValue.createAuthChallenge = createAuthChallenge;
            _resultValue.customEmailSenders = customEmailSenders;
            _resultValue.customMessage = customMessage;
            _resultValue.customSmsSenders = customSmsSenders;
            _resultValue.defineAuthChallenge = defineAuthChallenge;
            _resultValue.kmsKeyId = kmsKeyId;
            _resultValue.postAuthentication = postAuthentication;
            _resultValue.postConfirmation = postConfirmation;
            _resultValue.preAuthentication = preAuthentication;
            _resultValue.preSignUp = preSignUp;
            _resultValue.preTokenGeneration = preTokenGeneration;
            _resultValue.preTokenGenerationConfigs = preTokenGenerationConfigs;
            _resultValue.userMigration = userMigration;
            _resultValue.verifyAuthChallengeResponse = verifyAuthChallengeResponse;
            return _resultValue;
        }
    }
}
