// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.connect.outputs;

import com.pulumi.aws.connect.outputs.GetQuickConnectQuickConnectConfig;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetQuickConnectResult {
    /**
     * @return ARN of the Quick Connect.
     * 
     */
    private @Nullable String arn;
    /**
     * @return Description of the Quick Connect.
     * 
     */
    private @Nullable String description;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private @Nullable String id;
    private String instanceId;
    private @Nullable String name;
    /**
     * @return A block that defines the configuration information for the Quick Connect: `quick_connect_type` and one of `phone_config`, `queue_config`, `user_config` . The Quick Connect Config block is documented below.
     * 
     */
    private @Nullable List<GetQuickConnectQuickConnectConfig> quickConnectConfigs;
    /**
     * @return Identifier for the Quick Connect.
     * 
     */
    private @Nullable String quickConnectId;
    /**
     * @return Map of tags to assign to the Quick Connect.
     * 
     */
    private @Nullable Map<String,String> tags;

    private GetQuickConnectResult() {}
    /**
     * @return ARN of the Quick Connect.
     * 
     */
    public Optional<String> arn() {
        return Optional.ofNullable(this.arn);
    }
    /**
     * @return Description of the Quick Connect.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    public String instanceId() {
        return this.instanceId;
    }
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return A block that defines the configuration information for the Quick Connect: `quick_connect_type` and one of `phone_config`, `queue_config`, `user_config` . The Quick Connect Config block is documented below.
     * 
     */
    public List<GetQuickConnectQuickConnectConfig> quickConnectConfigs() {
        return this.quickConnectConfigs == null ? List.of() : this.quickConnectConfigs;
    }
    /**
     * @return Identifier for the Quick Connect.
     * 
     */
    public Optional<String> quickConnectId() {
        return Optional.ofNullable(this.quickConnectId);
    }
    /**
     * @return Map of tags to assign to the Quick Connect.
     * 
     */
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetQuickConnectResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String arn;
        private @Nullable String description;
        private @Nullable String id;
        private String instanceId;
        private @Nullable String name;
        private @Nullable List<GetQuickConnectQuickConnectConfig> quickConnectConfigs;
        private @Nullable String quickConnectId;
        private @Nullable Map<String,String> tags;
        public Builder() {}
        public Builder(GetQuickConnectResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.description = defaults.description;
    	      this.id = defaults.id;
    	      this.instanceId = defaults.instanceId;
    	      this.name = defaults.name;
    	      this.quickConnectConfigs = defaults.quickConnectConfigs;
    	      this.quickConnectId = defaults.quickConnectId;
    	      this.tags = defaults.tags;
        }

        @CustomType.Setter
        public Builder arn(@Nullable String arn) {
            this.arn = arn;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder instanceId(String instanceId) {
            this.instanceId = Objects.requireNonNull(instanceId);
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder quickConnectConfigs(@Nullable List<GetQuickConnectQuickConnectConfig> quickConnectConfigs) {
            this.quickConnectConfigs = quickConnectConfigs;
            return this;
        }
        public Builder quickConnectConfigs(GetQuickConnectQuickConnectConfig... quickConnectConfigs) {
            return quickConnectConfigs(List.of(quickConnectConfigs));
        }
        @CustomType.Setter
        public Builder quickConnectId(@Nullable String quickConnectId) {
            this.quickConnectId = quickConnectId;
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        public GetQuickConnectResult build() {
            final var o = new GetQuickConnectResult();
            o.arn = arn;
            o.description = description;
            o.id = id;
            o.instanceId = instanceId;
            o.name = name;
            o.quickConnectConfigs = quickConnectConfigs;
            o.quickConnectId = quickConnectId;
            o.tags = tags;
            return o;
        }
    }
}
