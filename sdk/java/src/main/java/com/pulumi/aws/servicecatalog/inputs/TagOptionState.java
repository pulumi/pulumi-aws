// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.servicecatalog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TagOptionState extends com.pulumi.resources.ResourceArgs {

    public static final TagOptionState Empty = new TagOptionState();

    /**
     * Whether tag option is active. Default is `true`.
     * 
     */
    @Import(name="active")
    private @Nullable Output<Boolean> active;

    /**
     * @return Whether tag option is active. Default is `true`.
     * 
     */
    public Optional<Output<Boolean>> active() {
        return Optional.ofNullable(this.active);
    }

    /**
     * Tag option key.
     * 
     */
    @Import(name="key")
    private @Nullable Output<String> key;

    /**
     * @return Tag option key.
     * 
     */
    public Optional<Output<String>> key() {
        return Optional.ofNullable(this.key);
    }

    @Import(name="owner")
    private @Nullable Output<String> owner;

    public Optional<Output<String>> owner() {
        return Optional.ofNullable(this.owner);
    }

    /**
     * Tag option value.
     * 
     */
    @Import(name="value")
    private @Nullable Output<String> value;

    /**
     * @return Tag option value.
     * 
     */
    public Optional<Output<String>> value() {
        return Optional.ofNullable(this.value);
    }

    private TagOptionState() {}

    private TagOptionState(TagOptionState $) {
        this.active = $.active;
        this.key = $.key;
        this.owner = $.owner;
        this.value = $.value;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TagOptionState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TagOptionState $;

        public Builder() {
            $ = new TagOptionState();
        }

        public Builder(TagOptionState defaults) {
            $ = new TagOptionState(Objects.requireNonNull(defaults));
        }

        /**
         * @param active Whether tag option is active. Default is `true`.
         * 
         * @return builder
         * 
         */
        public Builder active(@Nullable Output<Boolean> active) {
            $.active = active;
            return this;
        }

        /**
         * @param active Whether tag option is active. Default is `true`.
         * 
         * @return builder
         * 
         */
        public Builder active(Boolean active) {
            return active(Output.of(active));
        }

        /**
         * @param key Tag option key.
         * 
         * @return builder
         * 
         */
        public Builder key(@Nullable Output<String> key) {
            $.key = key;
            return this;
        }

        /**
         * @param key Tag option key.
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            return key(Output.of(key));
        }

        public Builder owner(@Nullable Output<String> owner) {
            $.owner = owner;
            return this;
        }

        public Builder owner(String owner) {
            return owner(Output.of(owner));
        }

        /**
         * @param value Tag option value.
         * 
         * @return builder
         * 
         */
        public Builder value(@Nullable Output<String> value) {
            $.value = value;
            return this;
        }

        /**
         * @param value Tag option value.
         * 
         * @return builder
         * 
         */
        public Builder value(String value) {
            return value(Output.of(value));
        }

        public TagOptionState build() {
            return $;
        }
    }

}
