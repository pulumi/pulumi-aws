// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.lambda.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FunctionUrlCorsArgs extends com.pulumi.resources.ResourceArgs {

    public static final FunctionUrlCorsArgs Empty = new FunctionUrlCorsArgs();

    /**
     * Whether to allow cookies or other credentials in requests to the function URL.
     * 
     */
    @Import(name="allowCredentials")
    private @Nullable Output<Boolean> allowCredentials;

    /**
     * @return Whether to allow cookies or other credentials in requests to the function URL.
     * 
     */
    public Optional<Output<Boolean>> allowCredentials() {
        return Optional.ofNullable(this.allowCredentials);
    }

    /**
     * HTTP headers that origins can include in requests to the function URL.
     * 
     */
    @Import(name="allowHeaders")
    private @Nullable Output<List<String>> allowHeaders;

    /**
     * @return HTTP headers that origins can include in requests to the function URL.
     * 
     */
    public Optional<Output<List<String>>> allowHeaders() {
        return Optional.ofNullable(this.allowHeaders);
    }

    /**
     * HTTP methods that are allowed when calling the function URL.
     * 
     */
    @Import(name="allowMethods")
    private @Nullable Output<List<String>> allowMethods;

    /**
     * @return HTTP methods that are allowed when calling the function URL.
     * 
     */
    public Optional<Output<List<String>>> allowMethods() {
        return Optional.ofNullable(this.allowMethods);
    }

    /**
     * Origins that can access the function URL.
     * 
     */
    @Import(name="allowOrigins")
    private @Nullable Output<List<String>> allowOrigins;

    /**
     * @return Origins that can access the function URL.
     * 
     */
    public Optional<Output<List<String>>> allowOrigins() {
        return Optional.ofNullable(this.allowOrigins);
    }

    /**
     * HTTP headers in your function response that you want to expose to origins that call the function URL.
     * 
     */
    @Import(name="exposeHeaders")
    private @Nullable Output<List<String>> exposeHeaders;

    /**
     * @return HTTP headers in your function response that you want to expose to origins that call the function URL.
     * 
     */
    public Optional<Output<List<String>>> exposeHeaders() {
        return Optional.ofNullable(this.exposeHeaders);
    }

    /**
     * Maximum amount of time, in seconds, that web browsers can cache results of a preflight request. Maximum value is `86400`.
     * 
     */
    @Import(name="maxAge")
    private @Nullable Output<Integer> maxAge;

    /**
     * @return Maximum amount of time, in seconds, that web browsers can cache results of a preflight request. Maximum value is `86400`.
     * 
     */
    public Optional<Output<Integer>> maxAge() {
        return Optional.ofNullable(this.maxAge);
    }

    private FunctionUrlCorsArgs() {}

    private FunctionUrlCorsArgs(FunctionUrlCorsArgs $) {
        this.allowCredentials = $.allowCredentials;
        this.allowHeaders = $.allowHeaders;
        this.allowMethods = $.allowMethods;
        this.allowOrigins = $.allowOrigins;
        this.exposeHeaders = $.exposeHeaders;
        this.maxAge = $.maxAge;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FunctionUrlCorsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FunctionUrlCorsArgs $;

        public Builder() {
            $ = new FunctionUrlCorsArgs();
        }

        public Builder(FunctionUrlCorsArgs defaults) {
            $ = new FunctionUrlCorsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowCredentials Whether to allow cookies or other credentials in requests to the function URL.
         * 
         * @return builder
         * 
         */
        public Builder allowCredentials(@Nullable Output<Boolean> allowCredentials) {
            $.allowCredentials = allowCredentials;
            return this;
        }

        /**
         * @param allowCredentials Whether to allow cookies or other credentials in requests to the function URL.
         * 
         * @return builder
         * 
         */
        public Builder allowCredentials(Boolean allowCredentials) {
            return allowCredentials(Output.of(allowCredentials));
        }

        /**
         * @param allowHeaders HTTP headers that origins can include in requests to the function URL.
         * 
         * @return builder
         * 
         */
        public Builder allowHeaders(@Nullable Output<List<String>> allowHeaders) {
            $.allowHeaders = allowHeaders;
            return this;
        }

        /**
         * @param allowHeaders HTTP headers that origins can include in requests to the function URL.
         * 
         * @return builder
         * 
         */
        public Builder allowHeaders(List<String> allowHeaders) {
            return allowHeaders(Output.of(allowHeaders));
        }

        /**
         * @param allowHeaders HTTP headers that origins can include in requests to the function URL.
         * 
         * @return builder
         * 
         */
        public Builder allowHeaders(String... allowHeaders) {
            return allowHeaders(List.of(allowHeaders));
        }

        /**
         * @param allowMethods HTTP methods that are allowed when calling the function URL.
         * 
         * @return builder
         * 
         */
        public Builder allowMethods(@Nullable Output<List<String>> allowMethods) {
            $.allowMethods = allowMethods;
            return this;
        }

        /**
         * @param allowMethods HTTP methods that are allowed when calling the function URL.
         * 
         * @return builder
         * 
         */
        public Builder allowMethods(List<String> allowMethods) {
            return allowMethods(Output.of(allowMethods));
        }

        /**
         * @param allowMethods HTTP methods that are allowed when calling the function URL.
         * 
         * @return builder
         * 
         */
        public Builder allowMethods(String... allowMethods) {
            return allowMethods(List.of(allowMethods));
        }

        /**
         * @param allowOrigins Origins that can access the function URL.
         * 
         * @return builder
         * 
         */
        public Builder allowOrigins(@Nullable Output<List<String>> allowOrigins) {
            $.allowOrigins = allowOrigins;
            return this;
        }

        /**
         * @param allowOrigins Origins that can access the function URL.
         * 
         * @return builder
         * 
         */
        public Builder allowOrigins(List<String> allowOrigins) {
            return allowOrigins(Output.of(allowOrigins));
        }

        /**
         * @param allowOrigins Origins that can access the function URL.
         * 
         * @return builder
         * 
         */
        public Builder allowOrigins(String... allowOrigins) {
            return allowOrigins(List.of(allowOrigins));
        }

        /**
         * @param exposeHeaders HTTP headers in your function response that you want to expose to origins that call the function URL.
         * 
         * @return builder
         * 
         */
        public Builder exposeHeaders(@Nullable Output<List<String>> exposeHeaders) {
            $.exposeHeaders = exposeHeaders;
            return this;
        }

        /**
         * @param exposeHeaders HTTP headers in your function response that you want to expose to origins that call the function URL.
         * 
         * @return builder
         * 
         */
        public Builder exposeHeaders(List<String> exposeHeaders) {
            return exposeHeaders(Output.of(exposeHeaders));
        }

        /**
         * @param exposeHeaders HTTP headers in your function response that you want to expose to origins that call the function URL.
         * 
         * @return builder
         * 
         */
        public Builder exposeHeaders(String... exposeHeaders) {
            return exposeHeaders(List.of(exposeHeaders));
        }

        /**
         * @param maxAge Maximum amount of time, in seconds, that web browsers can cache results of a preflight request. Maximum value is `86400`.
         * 
         * @return builder
         * 
         */
        public Builder maxAge(@Nullable Output<Integer> maxAge) {
            $.maxAge = maxAge;
            return this;
        }

        /**
         * @param maxAge Maximum amount of time, in seconds, that web browsers can cache results of a preflight request. Maximum value is `86400`.
         * 
         * @return builder
         * 
         */
        public Builder maxAge(Integer maxAge) {
            return maxAge(Output.of(maxAge));
        }

        public FunctionUrlCorsArgs build() {
            return $;
        }
    }

}
