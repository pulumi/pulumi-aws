// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetThemeArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetThemeArgs Empty = new GetThemeArgs();

    /**
     * AWS account ID.
     * 
     */
    @Import(name="awsAccountId")
    private @Nullable Output<String> awsAccountId;

    /**
     * @return AWS account ID.
     * 
     */
    public Optional<Output<String>> awsAccountId() {
        return Optional.ofNullable(this.awsAccountId);
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Identifier of the theme.
     * 
     * The following arguments are optional:
     * 
     */
    @Import(name="themeId", required=true)
    private Output<String> themeId;

    /**
     * @return Identifier of the theme.
     * 
     * The following arguments are optional:
     * 
     */
    public Output<String> themeId() {
        return this.themeId;
    }

    private GetThemeArgs() {}

    private GetThemeArgs(GetThemeArgs $) {
        this.awsAccountId = $.awsAccountId;
        this.tags = $.tags;
        this.themeId = $.themeId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetThemeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetThemeArgs $;

        public Builder() {
            $ = new GetThemeArgs();
        }

        public Builder(GetThemeArgs defaults) {
            $ = new GetThemeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param awsAccountId AWS account ID.
         * 
         * @return builder
         * 
         */
        public Builder awsAccountId(@Nullable Output<String> awsAccountId) {
            $.awsAccountId = awsAccountId;
            return this;
        }

        /**
         * @param awsAccountId AWS account ID.
         * 
         * @return builder
         * 
         */
        public Builder awsAccountId(String awsAccountId) {
            return awsAccountId(Output.of(awsAccountId));
        }

        /**
         * @param tags A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param themeId Identifier of the theme.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder themeId(Output<String> themeId) {
            $.themeId = themeId;
            return this;
        }

        /**
         * @param themeId Identifier of the theme.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder themeId(String themeId) {
            return themeId(Output.of(themeId));
        }

        public GetThemeArgs build() {
            if ($.themeId == null) {
                throw new MissingRequiredPropertyException("GetThemeArgs", "themeId");
            }
            return $;
        }
    }

}
