// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.securitylake.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class CustomLogSourceConfigurationProviderIdentityArgs extends com.pulumi.resources.ResourceArgs {

    public static final CustomLogSourceConfigurationProviderIdentityArgs Empty = new CustomLogSourceConfigurationProviderIdentityArgs();

    @Import(name="externalId", required=true)
    private Output<String> externalId;

    public Output<String> externalId() {
        return this.externalId;
    }

    @Import(name="principal", required=true)
    private Output<String> principal;

    public Output<String> principal() {
        return this.principal;
    }

    private CustomLogSourceConfigurationProviderIdentityArgs() {}

    private CustomLogSourceConfigurationProviderIdentityArgs(CustomLogSourceConfigurationProviderIdentityArgs $) {
        this.externalId = $.externalId;
        this.principal = $.principal;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CustomLogSourceConfigurationProviderIdentityArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CustomLogSourceConfigurationProviderIdentityArgs $;

        public Builder() {
            $ = new CustomLogSourceConfigurationProviderIdentityArgs();
        }

        public Builder(CustomLogSourceConfigurationProviderIdentityArgs defaults) {
            $ = new CustomLogSourceConfigurationProviderIdentityArgs(Objects.requireNonNull(defaults));
        }

        public Builder externalId(Output<String> externalId) {
            $.externalId = externalId;
            return this;
        }

        public Builder externalId(String externalId) {
            return externalId(Output.of(externalId));
        }

        public Builder principal(Output<String> principal) {
            $.principal = principal;
            return this;
        }

        public Builder principal(String principal) {
            return principal(Output.of(principal));
        }

        public CustomLogSourceConfigurationProviderIdentityArgs build() {
            if ($.externalId == null) {
                throw new MissingRequiredPropertyException("CustomLogSourceConfigurationProviderIdentityArgs", "externalId");
            }
            if ($.principal == null) {
                throw new MissingRequiredPropertyException("CustomLogSourceConfigurationProviderIdentityArgs", "principal");
            }
            return $;
        }
    }

}
