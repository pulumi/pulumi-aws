// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.m2;

import com.pulumi.aws.m2.inputs.EnvironmentHighAvailabilityConfigArgs;
import com.pulumi.aws.m2.inputs.EnvironmentStorageConfigurationArgs;
import com.pulumi.aws.m2.inputs.EnvironmentTimeoutsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EnvironmentArgs extends com.pulumi.resources.ResourceArgs {

    public static final EnvironmentArgs Empty = new EnvironmentArgs();

    @Import(name="applyChangesDuringMaintenanceWindow")
    private @Nullable Output<Boolean> applyChangesDuringMaintenanceWindow;

    public Optional<Output<Boolean>> applyChangesDuringMaintenanceWindow() {
        return Optional.ofNullable(this.applyChangesDuringMaintenanceWindow);
    }

    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Engine type must be `microfocus` or `bluage`.
     * 
     */
    @Import(name="engineType", required=true)
    private Output<String> engineType;

    /**
     * @return Engine type must be `microfocus` or `bluage`.
     * 
     */
    public Output<String> engineType() {
        return this.engineType;
    }

    /**
     * The specific version of the engine for the Environment.
     * 
     */
    @Import(name="engineVersion")
    private @Nullable Output<String> engineVersion;

    /**
     * @return The specific version of the engine for the Environment.
     * 
     */
    public Optional<Output<String>> engineVersion() {
        return Optional.ofNullable(this.engineVersion);
    }

    /**
     * Force update the environment even if applications are running.
     * 
     */
    @Import(name="forceUpdate")
    private @Nullable Output<Boolean> forceUpdate;

    /**
     * @return Force update the environment even if applications are running.
     * 
     */
    public Optional<Output<Boolean>> forceUpdate() {
        return Optional.ofNullable(this.forceUpdate);
    }

    @Import(name="highAvailabilityConfig")
    private @Nullable Output<EnvironmentHighAvailabilityConfigArgs> highAvailabilityConfig;

    public Optional<Output<EnvironmentHighAvailabilityConfigArgs>> highAvailabilityConfig() {
        return Optional.ofNullable(this.highAvailabilityConfig);
    }

    /**
     * M2 Instance Type.
     * 
     * The following arguments are optional:
     * 
     */
    @Import(name="instanceType", required=true)
    private Output<String> instanceType;

    /**
     * @return M2 Instance Type.
     * 
     * The following arguments are optional:
     * 
     */
    public Output<String> instanceType() {
        return this.instanceType;
    }

    /**
     * ARN of the KMS key to use for the Environment.
     * 
     */
    @Import(name="kmsKeyId")
    private @Nullable Output<String> kmsKeyId;

    /**
     * @return ARN of the KMS key to use for the Environment.
     * 
     */
    public Optional<Output<String>> kmsKeyId() {
        return Optional.ofNullable(this.kmsKeyId);
    }

    /**
     * Name of the runtime environment. Must be unique within the account.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the runtime environment. Must be unique within the account.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Configures the maintenance window that you want for the runtime environment. The maintenance window must have the format `ddd:hh24:mi-ddd:hh24:mi` and must be less than 24 hours. If not provided a random value will be used.
     * 
     */
    @Import(name="preferredMaintenanceWindow")
    private @Nullable Output<String> preferredMaintenanceWindow;

    /**
     * @return Configures the maintenance window that you want for the runtime environment. The maintenance window must have the format `ddd:hh24:mi-ddd:hh24:mi` and must be less than 24 hours. If not provided a random value will be used.
     * 
     */
    public Optional<Output<String>> preferredMaintenanceWindow() {
        return Optional.ofNullable(this.preferredMaintenanceWindow);
    }

    /**
     * Allow applications deployed to this environment to be publicly accessible.
     * 
     */
    @Import(name="publiclyAccessible")
    private @Nullable Output<Boolean> publiclyAccessible;

    /**
     * @return Allow applications deployed to this environment to be publicly accessible.
     * 
     */
    public Optional<Output<Boolean>> publiclyAccessible() {
        return Optional.ofNullable(this.publiclyAccessible);
    }

    /**
     * List of security group ids.
     * 
     */
    @Import(name="securityGroupIds")
    private @Nullable Output<List<String>> securityGroupIds;

    /**
     * @return List of security group ids.
     * 
     */
    public Optional<Output<List<String>>> securityGroupIds() {
        return Optional.ofNullable(this.securityGroupIds);
    }

    @Import(name="storageConfiguration")
    private @Nullable Output<EnvironmentStorageConfigurationArgs> storageConfiguration;

    public Optional<Output<EnvironmentStorageConfigurationArgs>> storageConfiguration() {
        return Optional.ofNullable(this.storageConfiguration);
    }

    /**
     * List of subnet ids to deploy environment to.
     * 
     */
    @Import(name="subnetIds")
    private @Nullable Output<List<String>> subnetIds;

    /**
     * @return List of subnet ids to deploy environment to.
     * 
     */
    public Optional<Output<List<String>>> subnetIds() {
        return Optional.ofNullable(this.subnetIds);
    }

    /**
     * Key-value tags for the place index. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Key-value tags for the place index. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="timeouts")
    private @Nullable Output<EnvironmentTimeoutsArgs> timeouts;

    public Optional<Output<EnvironmentTimeoutsArgs>> timeouts() {
        return Optional.ofNullable(this.timeouts);
    }

    private EnvironmentArgs() {}

    private EnvironmentArgs(EnvironmentArgs $) {
        this.applyChangesDuringMaintenanceWindow = $.applyChangesDuringMaintenanceWindow;
        this.description = $.description;
        this.engineType = $.engineType;
        this.engineVersion = $.engineVersion;
        this.forceUpdate = $.forceUpdate;
        this.highAvailabilityConfig = $.highAvailabilityConfig;
        this.instanceType = $.instanceType;
        this.kmsKeyId = $.kmsKeyId;
        this.name = $.name;
        this.preferredMaintenanceWindow = $.preferredMaintenanceWindow;
        this.publiclyAccessible = $.publiclyAccessible;
        this.securityGroupIds = $.securityGroupIds;
        this.storageConfiguration = $.storageConfiguration;
        this.subnetIds = $.subnetIds;
        this.tags = $.tags;
        this.timeouts = $.timeouts;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EnvironmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EnvironmentArgs $;

        public Builder() {
            $ = new EnvironmentArgs();
        }

        public Builder(EnvironmentArgs defaults) {
            $ = new EnvironmentArgs(Objects.requireNonNull(defaults));
        }

        public Builder applyChangesDuringMaintenanceWindow(@Nullable Output<Boolean> applyChangesDuringMaintenanceWindow) {
            $.applyChangesDuringMaintenanceWindow = applyChangesDuringMaintenanceWindow;
            return this;
        }

        public Builder applyChangesDuringMaintenanceWindow(Boolean applyChangesDuringMaintenanceWindow) {
            return applyChangesDuringMaintenanceWindow(Output.of(applyChangesDuringMaintenanceWindow));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param engineType Engine type must be `microfocus` or `bluage`.
         * 
         * @return builder
         * 
         */
        public Builder engineType(Output<String> engineType) {
            $.engineType = engineType;
            return this;
        }

        /**
         * @param engineType Engine type must be `microfocus` or `bluage`.
         * 
         * @return builder
         * 
         */
        public Builder engineType(String engineType) {
            return engineType(Output.of(engineType));
        }

        /**
         * @param engineVersion The specific version of the engine for the Environment.
         * 
         * @return builder
         * 
         */
        public Builder engineVersion(@Nullable Output<String> engineVersion) {
            $.engineVersion = engineVersion;
            return this;
        }

        /**
         * @param engineVersion The specific version of the engine for the Environment.
         * 
         * @return builder
         * 
         */
        public Builder engineVersion(String engineVersion) {
            return engineVersion(Output.of(engineVersion));
        }

        /**
         * @param forceUpdate Force update the environment even if applications are running.
         * 
         * @return builder
         * 
         */
        public Builder forceUpdate(@Nullable Output<Boolean> forceUpdate) {
            $.forceUpdate = forceUpdate;
            return this;
        }

        /**
         * @param forceUpdate Force update the environment even if applications are running.
         * 
         * @return builder
         * 
         */
        public Builder forceUpdate(Boolean forceUpdate) {
            return forceUpdate(Output.of(forceUpdate));
        }

        public Builder highAvailabilityConfig(@Nullable Output<EnvironmentHighAvailabilityConfigArgs> highAvailabilityConfig) {
            $.highAvailabilityConfig = highAvailabilityConfig;
            return this;
        }

        public Builder highAvailabilityConfig(EnvironmentHighAvailabilityConfigArgs highAvailabilityConfig) {
            return highAvailabilityConfig(Output.of(highAvailabilityConfig));
        }

        /**
         * @param instanceType M2 Instance Type.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder instanceType(Output<String> instanceType) {
            $.instanceType = instanceType;
            return this;
        }

        /**
         * @param instanceType M2 Instance Type.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder instanceType(String instanceType) {
            return instanceType(Output.of(instanceType));
        }

        /**
         * @param kmsKeyId ARN of the KMS key to use for the Environment.
         * 
         * @return builder
         * 
         */
        public Builder kmsKeyId(@Nullable Output<String> kmsKeyId) {
            $.kmsKeyId = kmsKeyId;
            return this;
        }

        /**
         * @param kmsKeyId ARN of the KMS key to use for the Environment.
         * 
         * @return builder
         * 
         */
        public Builder kmsKeyId(String kmsKeyId) {
            return kmsKeyId(Output.of(kmsKeyId));
        }

        /**
         * @param name Name of the runtime environment. Must be unique within the account.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the runtime environment. Must be unique within the account.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param preferredMaintenanceWindow Configures the maintenance window that you want for the runtime environment. The maintenance window must have the format `ddd:hh24:mi-ddd:hh24:mi` and must be less than 24 hours. If not provided a random value will be used.
         * 
         * @return builder
         * 
         */
        public Builder preferredMaintenanceWindow(@Nullable Output<String> preferredMaintenanceWindow) {
            $.preferredMaintenanceWindow = preferredMaintenanceWindow;
            return this;
        }

        /**
         * @param preferredMaintenanceWindow Configures the maintenance window that you want for the runtime environment. The maintenance window must have the format `ddd:hh24:mi-ddd:hh24:mi` and must be less than 24 hours. If not provided a random value will be used.
         * 
         * @return builder
         * 
         */
        public Builder preferredMaintenanceWindow(String preferredMaintenanceWindow) {
            return preferredMaintenanceWindow(Output.of(preferredMaintenanceWindow));
        }

        /**
         * @param publiclyAccessible Allow applications deployed to this environment to be publicly accessible.
         * 
         * @return builder
         * 
         */
        public Builder publiclyAccessible(@Nullable Output<Boolean> publiclyAccessible) {
            $.publiclyAccessible = publiclyAccessible;
            return this;
        }

        /**
         * @param publiclyAccessible Allow applications deployed to this environment to be publicly accessible.
         * 
         * @return builder
         * 
         */
        public Builder publiclyAccessible(Boolean publiclyAccessible) {
            return publiclyAccessible(Output.of(publiclyAccessible));
        }

        /**
         * @param securityGroupIds List of security group ids.
         * 
         * @return builder
         * 
         */
        public Builder securityGroupIds(@Nullable Output<List<String>> securityGroupIds) {
            $.securityGroupIds = securityGroupIds;
            return this;
        }

        /**
         * @param securityGroupIds List of security group ids.
         * 
         * @return builder
         * 
         */
        public Builder securityGroupIds(List<String> securityGroupIds) {
            return securityGroupIds(Output.of(securityGroupIds));
        }

        /**
         * @param securityGroupIds List of security group ids.
         * 
         * @return builder
         * 
         */
        public Builder securityGroupIds(String... securityGroupIds) {
            return securityGroupIds(List.of(securityGroupIds));
        }

        public Builder storageConfiguration(@Nullable Output<EnvironmentStorageConfigurationArgs> storageConfiguration) {
            $.storageConfiguration = storageConfiguration;
            return this;
        }

        public Builder storageConfiguration(EnvironmentStorageConfigurationArgs storageConfiguration) {
            return storageConfiguration(Output.of(storageConfiguration));
        }

        /**
         * @param subnetIds List of subnet ids to deploy environment to.
         * 
         * @return builder
         * 
         */
        public Builder subnetIds(@Nullable Output<List<String>> subnetIds) {
            $.subnetIds = subnetIds;
            return this;
        }

        /**
         * @param subnetIds List of subnet ids to deploy environment to.
         * 
         * @return builder
         * 
         */
        public Builder subnetIds(List<String> subnetIds) {
            return subnetIds(Output.of(subnetIds));
        }

        /**
         * @param subnetIds List of subnet ids to deploy environment to.
         * 
         * @return builder
         * 
         */
        public Builder subnetIds(String... subnetIds) {
            return subnetIds(List.of(subnetIds));
        }

        /**
         * @param tags Key-value tags for the place index. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Key-value tags for the place index. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder timeouts(@Nullable Output<EnvironmentTimeoutsArgs> timeouts) {
            $.timeouts = timeouts;
            return this;
        }

        public Builder timeouts(EnvironmentTimeoutsArgs timeouts) {
            return timeouts(Output.of(timeouts));
        }

        public EnvironmentArgs build() {
            if ($.engineType == null) {
                throw new MissingRequiredPropertyException("EnvironmentArgs", "engineType");
            }
            if ($.instanceType == null) {
                throw new MissingRequiredPropertyException("EnvironmentArgs", "instanceType");
            }
            return $;
        }
    }

}
