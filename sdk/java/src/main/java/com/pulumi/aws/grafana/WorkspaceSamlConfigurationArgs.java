// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.grafana;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WorkspaceSamlConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final WorkspaceSamlConfigurationArgs Empty = new WorkspaceSamlConfigurationArgs();

    /**
     * The admin role values.
     * 
     */
    @Import(name="adminRoleValues")
    private @Nullable Output<List<String>> adminRoleValues;

    /**
     * @return The admin role values.
     * 
     */
    public Optional<Output<List<String>>> adminRoleValues() {
        return Optional.ofNullable(this.adminRoleValues);
    }

    /**
     * The allowed organizations.
     * 
     */
    @Import(name="allowedOrganizations")
    private @Nullable Output<List<String>> allowedOrganizations;

    /**
     * @return The allowed organizations.
     * 
     */
    public Optional<Output<List<String>>> allowedOrganizations() {
        return Optional.ofNullable(this.allowedOrganizations);
    }

    /**
     * The editor role values.
     * 
     */
    @Import(name="editorRoleValues", required=true)
    private Output<List<String>> editorRoleValues;

    /**
     * @return The editor role values.
     * 
     */
    public Output<List<String>> editorRoleValues() {
        return this.editorRoleValues;
    }

    /**
     * The email assertion.
     * 
     */
    @Import(name="emailAssertion")
    private @Nullable Output<String> emailAssertion;

    /**
     * @return The email assertion.
     * 
     */
    public Optional<Output<String>> emailAssertion() {
        return Optional.ofNullable(this.emailAssertion);
    }

    /**
     * The groups assertion.
     * 
     */
    @Import(name="groupsAssertion")
    private @Nullable Output<String> groupsAssertion;

    /**
     * @return The groups assertion.
     * 
     */
    public Optional<Output<String>> groupsAssertion() {
        return Optional.ofNullable(this.groupsAssertion);
    }

    /**
     * The IDP Metadata URL. Note that either `idp_metadata_url` or `idp_metadata_xml` (but not both) must be specified.
     * 
     */
    @Import(name="idpMetadataUrl")
    private @Nullable Output<String> idpMetadataUrl;

    /**
     * @return The IDP Metadata URL. Note that either `idp_metadata_url` or `idp_metadata_xml` (but not both) must be specified.
     * 
     */
    public Optional<Output<String>> idpMetadataUrl() {
        return Optional.ofNullable(this.idpMetadataUrl);
    }

    /**
     * The IDP Metadata XML. Note that either `idp_metadata_url` or `idp_metadata_xml` (but not both) must be specified.
     * 
     */
    @Import(name="idpMetadataXml")
    private @Nullable Output<String> idpMetadataXml;

    /**
     * @return The IDP Metadata XML. Note that either `idp_metadata_url` or `idp_metadata_xml` (but not both) must be specified.
     * 
     */
    public Optional<Output<String>> idpMetadataXml() {
        return Optional.ofNullable(this.idpMetadataXml);
    }

    /**
     * The login assertion.
     * 
     */
    @Import(name="loginAssertion")
    private @Nullable Output<String> loginAssertion;

    /**
     * @return The login assertion.
     * 
     */
    public Optional<Output<String>> loginAssertion() {
        return Optional.ofNullable(this.loginAssertion);
    }

    /**
     * The login validity duration.
     * 
     */
    @Import(name="loginValidityDuration")
    private @Nullable Output<Integer> loginValidityDuration;

    /**
     * @return The login validity duration.
     * 
     */
    public Optional<Output<Integer>> loginValidityDuration() {
        return Optional.ofNullable(this.loginValidityDuration);
    }

    /**
     * The name assertion.
     * 
     */
    @Import(name="nameAssertion")
    private @Nullable Output<String> nameAssertion;

    /**
     * @return The name assertion.
     * 
     */
    public Optional<Output<String>> nameAssertion() {
        return Optional.ofNullable(this.nameAssertion);
    }

    /**
     * The org assertion.
     * 
     */
    @Import(name="orgAssertion")
    private @Nullable Output<String> orgAssertion;

    /**
     * @return The org assertion.
     * 
     */
    public Optional<Output<String>> orgAssertion() {
        return Optional.ofNullable(this.orgAssertion);
    }

    /**
     * The role assertion.
     * 
     */
    @Import(name="roleAssertion")
    private @Nullable Output<String> roleAssertion;

    /**
     * @return The role assertion.
     * 
     */
    public Optional<Output<String>> roleAssertion() {
        return Optional.ofNullable(this.roleAssertion);
    }

    /**
     * The workspace id.
     * 
     */
    @Import(name="workspaceId", required=true)
    private Output<String> workspaceId;

    /**
     * @return The workspace id.
     * 
     */
    public Output<String> workspaceId() {
        return this.workspaceId;
    }

    private WorkspaceSamlConfigurationArgs() {}

    private WorkspaceSamlConfigurationArgs(WorkspaceSamlConfigurationArgs $) {
        this.adminRoleValues = $.adminRoleValues;
        this.allowedOrganizations = $.allowedOrganizations;
        this.editorRoleValues = $.editorRoleValues;
        this.emailAssertion = $.emailAssertion;
        this.groupsAssertion = $.groupsAssertion;
        this.idpMetadataUrl = $.idpMetadataUrl;
        this.idpMetadataXml = $.idpMetadataXml;
        this.loginAssertion = $.loginAssertion;
        this.loginValidityDuration = $.loginValidityDuration;
        this.nameAssertion = $.nameAssertion;
        this.orgAssertion = $.orgAssertion;
        this.roleAssertion = $.roleAssertion;
        this.workspaceId = $.workspaceId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WorkspaceSamlConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WorkspaceSamlConfigurationArgs $;

        public Builder() {
            $ = new WorkspaceSamlConfigurationArgs();
        }

        public Builder(WorkspaceSamlConfigurationArgs defaults) {
            $ = new WorkspaceSamlConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param adminRoleValues The admin role values.
         * 
         * @return builder
         * 
         */
        public Builder adminRoleValues(@Nullable Output<List<String>> adminRoleValues) {
            $.adminRoleValues = adminRoleValues;
            return this;
        }

        /**
         * @param adminRoleValues The admin role values.
         * 
         * @return builder
         * 
         */
        public Builder adminRoleValues(List<String> adminRoleValues) {
            return adminRoleValues(Output.of(adminRoleValues));
        }

        /**
         * @param adminRoleValues The admin role values.
         * 
         * @return builder
         * 
         */
        public Builder adminRoleValues(String... adminRoleValues) {
            return adminRoleValues(List.of(adminRoleValues));
        }

        /**
         * @param allowedOrganizations The allowed organizations.
         * 
         * @return builder
         * 
         */
        public Builder allowedOrganizations(@Nullable Output<List<String>> allowedOrganizations) {
            $.allowedOrganizations = allowedOrganizations;
            return this;
        }

        /**
         * @param allowedOrganizations The allowed organizations.
         * 
         * @return builder
         * 
         */
        public Builder allowedOrganizations(List<String> allowedOrganizations) {
            return allowedOrganizations(Output.of(allowedOrganizations));
        }

        /**
         * @param allowedOrganizations The allowed organizations.
         * 
         * @return builder
         * 
         */
        public Builder allowedOrganizations(String... allowedOrganizations) {
            return allowedOrganizations(List.of(allowedOrganizations));
        }

        /**
         * @param editorRoleValues The editor role values.
         * 
         * @return builder
         * 
         */
        public Builder editorRoleValues(Output<List<String>> editorRoleValues) {
            $.editorRoleValues = editorRoleValues;
            return this;
        }

        /**
         * @param editorRoleValues The editor role values.
         * 
         * @return builder
         * 
         */
        public Builder editorRoleValues(List<String> editorRoleValues) {
            return editorRoleValues(Output.of(editorRoleValues));
        }

        /**
         * @param editorRoleValues The editor role values.
         * 
         * @return builder
         * 
         */
        public Builder editorRoleValues(String... editorRoleValues) {
            return editorRoleValues(List.of(editorRoleValues));
        }

        /**
         * @param emailAssertion The email assertion.
         * 
         * @return builder
         * 
         */
        public Builder emailAssertion(@Nullable Output<String> emailAssertion) {
            $.emailAssertion = emailAssertion;
            return this;
        }

        /**
         * @param emailAssertion The email assertion.
         * 
         * @return builder
         * 
         */
        public Builder emailAssertion(String emailAssertion) {
            return emailAssertion(Output.of(emailAssertion));
        }

        /**
         * @param groupsAssertion The groups assertion.
         * 
         * @return builder
         * 
         */
        public Builder groupsAssertion(@Nullable Output<String> groupsAssertion) {
            $.groupsAssertion = groupsAssertion;
            return this;
        }

        /**
         * @param groupsAssertion The groups assertion.
         * 
         * @return builder
         * 
         */
        public Builder groupsAssertion(String groupsAssertion) {
            return groupsAssertion(Output.of(groupsAssertion));
        }

        /**
         * @param idpMetadataUrl The IDP Metadata URL. Note that either `idp_metadata_url` or `idp_metadata_xml` (but not both) must be specified.
         * 
         * @return builder
         * 
         */
        public Builder idpMetadataUrl(@Nullable Output<String> idpMetadataUrl) {
            $.idpMetadataUrl = idpMetadataUrl;
            return this;
        }

        /**
         * @param idpMetadataUrl The IDP Metadata URL. Note that either `idp_metadata_url` or `idp_metadata_xml` (but not both) must be specified.
         * 
         * @return builder
         * 
         */
        public Builder idpMetadataUrl(String idpMetadataUrl) {
            return idpMetadataUrl(Output.of(idpMetadataUrl));
        }

        /**
         * @param idpMetadataXml The IDP Metadata XML. Note that either `idp_metadata_url` or `idp_metadata_xml` (but not both) must be specified.
         * 
         * @return builder
         * 
         */
        public Builder idpMetadataXml(@Nullable Output<String> idpMetadataXml) {
            $.idpMetadataXml = idpMetadataXml;
            return this;
        }

        /**
         * @param idpMetadataXml The IDP Metadata XML. Note that either `idp_metadata_url` or `idp_metadata_xml` (but not both) must be specified.
         * 
         * @return builder
         * 
         */
        public Builder idpMetadataXml(String idpMetadataXml) {
            return idpMetadataXml(Output.of(idpMetadataXml));
        }

        /**
         * @param loginAssertion The login assertion.
         * 
         * @return builder
         * 
         */
        public Builder loginAssertion(@Nullable Output<String> loginAssertion) {
            $.loginAssertion = loginAssertion;
            return this;
        }

        /**
         * @param loginAssertion The login assertion.
         * 
         * @return builder
         * 
         */
        public Builder loginAssertion(String loginAssertion) {
            return loginAssertion(Output.of(loginAssertion));
        }

        /**
         * @param loginValidityDuration The login validity duration.
         * 
         * @return builder
         * 
         */
        public Builder loginValidityDuration(@Nullable Output<Integer> loginValidityDuration) {
            $.loginValidityDuration = loginValidityDuration;
            return this;
        }

        /**
         * @param loginValidityDuration The login validity duration.
         * 
         * @return builder
         * 
         */
        public Builder loginValidityDuration(Integer loginValidityDuration) {
            return loginValidityDuration(Output.of(loginValidityDuration));
        }

        /**
         * @param nameAssertion The name assertion.
         * 
         * @return builder
         * 
         */
        public Builder nameAssertion(@Nullable Output<String> nameAssertion) {
            $.nameAssertion = nameAssertion;
            return this;
        }

        /**
         * @param nameAssertion The name assertion.
         * 
         * @return builder
         * 
         */
        public Builder nameAssertion(String nameAssertion) {
            return nameAssertion(Output.of(nameAssertion));
        }

        /**
         * @param orgAssertion The org assertion.
         * 
         * @return builder
         * 
         */
        public Builder orgAssertion(@Nullable Output<String> orgAssertion) {
            $.orgAssertion = orgAssertion;
            return this;
        }

        /**
         * @param orgAssertion The org assertion.
         * 
         * @return builder
         * 
         */
        public Builder orgAssertion(String orgAssertion) {
            return orgAssertion(Output.of(orgAssertion));
        }

        /**
         * @param roleAssertion The role assertion.
         * 
         * @return builder
         * 
         */
        public Builder roleAssertion(@Nullable Output<String> roleAssertion) {
            $.roleAssertion = roleAssertion;
            return this;
        }

        /**
         * @param roleAssertion The role assertion.
         * 
         * @return builder
         * 
         */
        public Builder roleAssertion(String roleAssertion) {
            return roleAssertion(Output.of(roleAssertion));
        }

        /**
         * @param workspaceId The workspace id.
         * 
         * @return builder
         * 
         */
        public Builder workspaceId(Output<String> workspaceId) {
            $.workspaceId = workspaceId;
            return this;
        }

        /**
         * @param workspaceId The workspace id.
         * 
         * @return builder
         * 
         */
        public Builder workspaceId(String workspaceId) {
            return workspaceId(Output.of(workspaceId));
        }

        public WorkspaceSamlConfigurationArgs build() {
            $.editorRoleValues = Objects.requireNonNull($.editorRoleValues, "expected parameter 'editorRoleValues' to be non-null");
            $.workspaceId = Objects.requireNonNull($.workspaceId, "expected parameter 'workspaceId' to be non-null");
            return $;
        }
    }

}
