// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.macie.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FindingsFilterFindingCriteriaCriterionArgs extends com.pulumi.resources.ResourceArgs {

    public static final FindingsFilterFindingCriteriaCriterionArgs Empty = new FindingsFilterFindingCriteriaCriterionArgs();

    /**
     * The value for the property exclusively matches (equals an exact match for) all the specified values. If you specify multiple values, Amazon Macie uses AND logic to join the values.
     * 
     */
    @Import(name="eqExactMatches")
    private @Nullable Output<List<String>> eqExactMatches;

    /**
     * @return The value for the property exclusively matches (equals an exact match for) all the specified values. If you specify multiple values, Amazon Macie uses AND logic to join the values.
     * 
     */
    public Optional<Output<List<String>>> eqExactMatches() {
        return Optional.ofNullable(this.eqExactMatches);
    }

    /**
     * The value for the property matches (equals) the specified value. If you specify multiple values, Amazon Macie uses OR logic to join the values.
     * 
     */
    @Import(name="eqs")
    private @Nullable Output<List<String>> eqs;

    /**
     * @return The value for the property matches (equals) the specified value. If you specify multiple values, Amazon Macie uses OR logic to join the values.
     * 
     */
    public Optional<Output<List<String>>> eqs() {
        return Optional.ofNullable(this.eqs);
    }

    /**
     * The name of the field to be evaluated.
     * 
     */
    @Import(name="field", required=true)
    private Output<String> field;

    /**
     * @return The name of the field to be evaluated.
     * 
     */
    public Output<String> field() {
        return this.field;
    }

    /**
     * The value for the property is greater than the specified value.
     * 
     */
    @Import(name="gt")
    private @Nullable Output<String> gt;

    /**
     * @return The value for the property is greater than the specified value.
     * 
     */
    public Optional<Output<String>> gt() {
        return Optional.ofNullable(this.gt);
    }

    /**
     * The value for the property is greater than or equal to the specified value.
     * 
     */
    @Import(name="gte")
    private @Nullable Output<String> gte;

    /**
     * @return The value for the property is greater than or equal to the specified value.
     * 
     */
    public Optional<Output<String>> gte() {
        return Optional.ofNullable(this.gte);
    }

    /**
     * The value for the property is less than the specified value.
     * 
     */
    @Import(name="lt")
    private @Nullable Output<String> lt;

    /**
     * @return The value for the property is less than the specified value.
     * 
     */
    public Optional<Output<String>> lt() {
        return Optional.ofNullable(this.lt);
    }

    /**
     * The value for the property is less than or equal to the specified value.
     * 
     */
    @Import(name="lte")
    private @Nullable Output<String> lte;

    /**
     * @return The value for the property is less than or equal to the specified value.
     * 
     */
    public Optional<Output<String>> lte() {
        return Optional.ofNullable(this.lte);
    }

    /**
     * The value for the property doesn&#39;t match (doesn&#39;t equal) the specified value. If you specify multiple values, Amazon Macie uses OR logic to join the values.
     * 
     */
    @Import(name="neqs")
    private @Nullable Output<List<String>> neqs;

    /**
     * @return The value for the property doesn&#39;t match (doesn&#39;t equal) the specified value. If you specify multiple values, Amazon Macie uses OR logic to join the values.
     * 
     */
    public Optional<Output<List<String>>> neqs() {
        return Optional.ofNullable(this.neqs);
    }

    private FindingsFilterFindingCriteriaCriterionArgs() {}

    private FindingsFilterFindingCriteriaCriterionArgs(FindingsFilterFindingCriteriaCriterionArgs $) {
        this.eqExactMatches = $.eqExactMatches;
        this.eqs = $.eqs;
        this.field = $.field;
        this.gt = $.gt;
        this.gte = $.gte;
        this.lt = $.lt;
        this.lte = $.lte;
        this.neqs = $.neqs;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FindingsFilterFindingCriteriaCriterionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FindingsFilterFindingCriteriaCriterionArgs $;

        public Builder() {
            $ = new FindingsFilterFindingCriteriaCriterionArgs();
        }

        public Builder(FindingsFilterFindingCriteriaCriterionArgs defaults) {
            $ = new FindingsFilterFindingCriteriaCriterionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param eqExactMatches The value for the property exclusively matches (equals an exact match for) all the specified values. If you specify multiple values, Amazon Macie uses AND logic to join the values.
         * 
         * @return builder
         * 
         */
        public Builder eqExactMatches(@Nullable Output<List<String>> eqExactMatches) {
            $.eqExactMatches = eqExactMatches;
            return this;
        }

        /**
         * @param eqExactMatches The value for the property exclusively matches (equals an exact match for) all the specified values. If you specify multiple values, Amazon Macie uses AND logic to join the values.
         * 
         * @return builder
         * 
         */
        public Builder eqExactMatches(List<String> eqExactMatches) {
            return eqExactMatches(Output.of(eqExactMatches));
        }

        /**
         * @param eqExactMatches The value for the property exclusively matches (equals an exact match for) all the specified values. If you specify multiple values, Amazon Macie uses AND logic to join the values.
         * 
         * @return builder
         * 
         */
        public Builder eqExactMatches(String... eqExactMatches) {
            return eqExactMatches(List.of(eqExactMatches));
        }

        /**
         * @param eqs The value for the property matches (equals) the specified value. If you specify multiple values, Amazon Macie uses OR logic to join the values.
         * 
         * @return builder
         * 
         */
        public Builder eqs(@Nullable Output<List<String>> eqs) {
            $.eqs = eqs;
            return this;
        }

        /**
         * @param eqs The value for the property matches (equals) the specified value. If you specify multiple values, Amazon Macie uses OR logic to join the values.
         * 
         * @return builder
         * 
         */
        public Builder eqs(List<String> eqs) {
            return eqs(Output.of(eqs));
        }

        /**
         * @param eqs The value for the property matches (equals) the specified value. If you specify multiple values, Amazon Macie uses OR logic to join the values.
         * 
         * @return builder
         * 
         */
        public Builder eqs(String... eqs) {
            return eqs(List.of(eqs));
        }

        /**
         * @param field The name of the field to be evaluated.
         * 
         * @return builder
         * 
         */
        public Builder field(Output<String> field) {
            $.field = field;
            return this;
        }

        /**
         * @param field The name of the field to be evaluated.
         * 
         * @return builder
         * 
         */
        public Builder field(String field) {
            return field(Output.of(field));
        }

        /**
         * @param gt The value for the property is greater than the specified value.
         * 
         * @return builder
         * 
         */
        public Builder gt(@Nullable Output<String> gt) {
            $.gt = gt;
            return this;
        }

        /**
         * @param gt The value for the property is greater than the specified value.
         * 
         * @return builder
         * 
         */
        public Builder gt(String gt) {
            return gt(Output.of(gt));
        }

        /**
         * @param gte The value for the property is greater than or equal to the specified value.
         * 
         * @return builder
         * 
         */
        public Builder gte(@Nullable Output<String> gte) {
            $.gte = gte;
            return this;
        }

        /**
         * @param gte The value for the property is greater than or equal to the specified value.
         * 
         * @return builder
         * 
         */
        public Builder gte(String gte) {
            return gte(Output.of(gte));
        }

        /**
         * @param lt The value for the property is less than the specified value.
         * 
         * @return builder
         * 
         */
        public Builder lt(@Nullable Output<String> lt) {
            $.lt = lt;
            return this;
        }

        /**
         * @param lt The value for the property is less than the specified value.
         * 
         * @return builder
         * 
         */
        public Builder lt(String lt) {
            return lt(Output.of(lt));
        }

        /**
         * @param lte The value for the property is less than or equal to the specified value.
         * 
         * @return builder
         * 
         */
        public Builder lte(@Nullable Output<String> lte) {
            $.lte = lte;
            return this;
        }

        /**
         * @param lte The value for the property is less than or equal to the specified value.
         * 
         * @return builder
         * 
         */
        public Builder lte(String lte) {
            return lte(Output.of(lte));
        }

        /**
         * @param neqs The value for the property doesn&#39;t match (doesn&#39;t equal) the specified value. If you specify multiple values, Amazon Macie uses OR logic to join the values.
         * 
         * @return builder
         * 
         */
        public Builder neqs(@Nullable Output<List<String>> neqs) {
            $.neqs = neqs;
            return this;
        }

        /**
         * @param neqs The value for the property doesn&#39;t match (doesn&#39;t equal) the specified value. If you specify multiple values, Amazon Macie uses OR logic to join the values.
         * 
         * @return builder
         * 
         */
        public Builder neqs(List<String> neqs) {
            return neqs(Output.of(neqs));
        }

        /**
         * @param neqs The value for the property doesn&#39;t match (doesn&#39;t equal) the specified value. If you specify multiple values, Amazon Macie uses OR logic to join the values.
         * 
         * @return builder
         * 
         */
        public Builder neqs(String... neqs) {
            return neqs(List.of(neqs));
        }

        public FindingsFilterFindingCriteriaCriterionArgs build() {
            if ($.field == null) {
                throw new MissingRequiredPropertyException("FindingsFilterFindingCriteriaCriterionArgs", "field");
            }
            return $;
        }
    }

}
