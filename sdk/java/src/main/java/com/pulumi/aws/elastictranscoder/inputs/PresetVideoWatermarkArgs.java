// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.elastictranscoder.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PresetVideoWatermarkArgs extends com.pulumi.resources.ResourceArgs {

    public static final PresetVideoWatermarkArgs Empty = new PresetVideoWatermarkArgs();

    /**
     * The horizontal position of the watermark unless you specify a nonzero value for `horzontal_offset`.
     * 
     */
    @Import(name="horizontalAlign")
    private @Nullable Output<String> horizontalAlign;

    /**
     * @return The horizontal position of the watermark unless you specify a nonzero value for `horzontal_offset`.
     * 
     */
    public Optional<Output<String>> horizontalAlign() {
        return Optional.ofNullable(this.horizontalAlign);
    }

    /**
     * The amount by which you want the horizontal position of the watermark to be offset from the position specified by `horizontal_align`.
     * 
     */
    @Import(name="horizontalOffset")
    private @Nullable Output<String> horizontalOffset;

    /**
     * @return The amount by which you want the horizontal position of the watermark to be offset from the position specified by `horizontal_align`.
     * 
     */
    public Optional<Output<String>> horizontalOffset() {
        return Optional.ofNullable(this.horizontalOffset);
    }

    /**
     * A unique identifier for the settings for one watermark. The value of Id can be up to 40 characters long. You can specify settings for up to four watermarks.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return A unique identifier for the settings for one watermark. The value of Id can be up to 40 characters long. You can specify settings for up to four watermarks.
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * The maximum height of the watermark.
     * 
     */
    @Import(name="maxHeight")
    private @Nullable Output<String> maxHeight;

    /**
     * @return The maximum height of the watermark.
     * 
     */
    public Optional<Output<String>> maxHeight() {
        return Optional.ofNullable(this.maxHeight);
    }

    /**
     * The maximum width of the watermark.
     * 
     */
    @Import(name="maxWidth")
    private @Nullable Output<String> maxWidth;

    /**
     * @return The maximum width of the watermark.
     * 
     */
    public Optional<Output<String>> maxWidth() {
        return Optional.ofNullable(this.maxWidth);
    }

    /**
     * A percentage that indicates how much you want a watermark to obscure the video in the location where it appears.
     * 
     */
    @Import(name="opacity")
    private @Nullable Output<String> opacity;

    /**
     * @return A percentage that indicates how much you want a watermark to obscure the video in the location where it appears.
     * 
     */
    public Optional<Output<String>> opacity() {
        return Optional.ofNullable(this.opacity);
    }

    /**
     * A value that controls scaling of the watermark. Valid values are: `Fit`, `Stretch`, `ShrinkToFit`
     * 
     */
    @Import(name="sizingPolicy")
    private @Nullable Output<String> sizingPolicy;

    /**
     * @return A value that controls scaling of the watermark. Valid values are: `Fit`, `Stretch`, `ShrinkToFit`
     * 
     */
    public Optional<Output<String>> sizingPolicy() {
        return Optional.ofNullable(this.sizingPolicy);
    }

    /**
     * A value that determines how Elastic Transcoder interprets values that you specified for `video_watermarks.horizontal_offset`, `video_watermarks.vertical_offset`, `video_watermarks.max_width`, and `video_watermarks.max_height`. Valid values are `Content` and `Frame`.
     * 
     */
    @Import(name="target")
    private @Nullable Output<String> target;

    /**
     * @return A value that determines how Elastic Transcoder interprets values that you specified for `video_watermarks.horizontal_offset`, `video_watermarks.vertical_offset`, `video_watermarks.max_width`, and `video_watermarks.max_height`. Valid values are `Content` and `Frame`.
     * 
     */
    public Optional<Output<String>> target() {
        return Optional.ofNullable(this.target);
    }

    /**
     * The vertical position of the watermark unless you specify a nonzero value for `vertical_align`. Valid values are `Top`, `Bottom`, `Center`.
     * 
     */
    @Import(name="verticalAlign")
    private @Nullable Output<String> verticalAlign;

    /**
     * @return The vertical position of the watermark unless you specify a nonzero value for `vertical_align`. Valid values are `Top`, `Bottom`, `Center`.
     * 
     */
    public Optional<Output<String>> verticalAlign() {
        return Optional.ofNullable(this.verticalAlign);
    }

    /**
     * The amount by which you want the vertical position of the watermark to be offset from the position specified by `vertical_align`
     * 
     */
    @Import(name="verticalOffset")
    private @Nullable Output<String> verticalOffset;

    /**
     * @return The amount by which you want the vertical position of the watermark to be offset from the position specified by `vertical_align`
     * 
     */
    public Optional<Output<String>> verticalOffset() {
        return Optional.ofNullable(this.verticalOffset);
    }

    private PresetVideoWatermarkArgs() {}

    private PresetVideoWatermarkArgs(PresetVideoWatermarkArgs $) {
        this.horizontalAlign = $.horizontalAlign;
        this.horizontalOffset = $.horizontalOffset;
        this.id = $.id;
        this.maxHeight = $.maxHeight;
        this.maxWidth = $.maxWidth;
        this.opacity = $.opacity;
        this.sizingPolicy = $.sizingPolicy;
        this.target = $.target;
        this.verticalAlign = $.verticalAlign;
        this.verticalOffset = $.verticalOffset;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PresetVideoWatermarkArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PresetVideoWatermarkArgs $;

        public Builder() {
            $ = new PresetVideoWatermarkArgs();
        }

        public Builder(PresetVideoWatermarkArgs defaults) {
            $ = new PresetVideoWatermarkArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param horizontalAlign The horizontal position of the watermark unless you specify a nonzero value for `horzontal_offset`.
         * 
         * @return builder
         * 
         */
        public Builder horizontalAlign(@Nullable Output<String> horizontalAlign) {
            $.horizontalAlign = horizontalAlign;
            return this;
        }

        /**
         * @param horizontalAlign The horizontal position of the watermark unless you specify a nonzero value for `horzontal_offset`.
         * 
         * @return builder
         * 
         */
        public Builder horizontalAlign(String horizontalAlign) {
            return horizontalAlign(Output.of(horizontalAlign));
        }

        /**
         * @param horizontalOffset The amount by which you want the horizontal position of the watermark to be offset from the position specified by `horizontal_align`.
         * 
         * @return builder
         * 
         */
        public Builder horizontalOffset(@Nullable Output<String> horizontalOffset) {
            $.horizontalOffset = horizontalOffset;
            return this;
        }

        /**
         * @param horizontalOffset The amount by which you want the horizontal position of the watermark to be offset from the position specified by `horizontal_align`.
         * 
         * @return builder
         * 
         */
        public Builder horizontalOffset(String horizontalOffset) {
            return horizontalOffset(Output.of(horizontalOffset));
        }

        /**
         * @param id A unique identifier for the settings for one watermark. The value of Id can be up to 40 characters long. You can specify settings for up to four watermarks.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id A unique identifier for the settings for one watermark. The value of Id can be up to 40 characters long. You can specify settings for up to four watermarks.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param maxHeight The maximum height of the watermark.
         * 
         * @return builder
         * 
         */
        public Builder maxHeight(@Nullable Output<String> maxHeight) {
            $.maxHeight = maxHeight;
            return this;
        }

        /**
         * @param maxHeight The maximum height of the watermark.
         * 
         * @return builder
         * 
         */
        public Builder maxHeight(String maxHeight) {
            return maxHeight(Output.of(maxHeight));
        }

        /**
         * @param maxWidth The maximum width of the watermark.
         * 
         * @return builder
         * 
         */
        public Builder maxWidth(@Nullable Output<String> maxWidth) {
            $.maxWidth = maxWidth;
            return this;
        }

        /**
         * @param maxWidth The maximum width of the watermark.
         * 
         * @return builder
         * 
         */
        public Builder maxWidth(String maxWidth) {
            return maxWidth(Output.of(maxWidth));
        }

        /**
         * @param opacity A percentage that indicates how much you want a watermark to obscure the video in the location where it appears.
         * 
         * @return builder
         * 
         */
        public Builder opacity(@Nullable Output<String> opacity) {
            $.opacity = opacity;
            return this;
        }

        /**
         * @param opacity A percentage that indicates how much you want a watermark to obscure the video in the location where it appears.
         * 
         * @return builder
         * 
         */
        public Builder opacity(String opacity) {
            return opacity(Output.of(opacity));
        }

        /**
         * @param sizingPolicy A value that controls scaling of the watermark. Valid values are: `Fit`, `Stretch`, `ShrinkToFit`
         * 
         * @return builder
         * 
         */
        public Builder sizingPolicy(@Nullable Output<String> sizingPolicy) {
            $.sizingPolicy = sizingPolicy;
            return this;
        }

        /**
         * @param sizingPolicy A value that controls scaling of the watermark. Valid values are: `Fit`, `Stretch`, `ShrinkToFit`
         * 
         * @return builder
         * 
         */
        public Builder sizingPolicy(String sizingPolicy) {
            return sizingPolicy(Output.of(sizingPolicy));
        }

        /**
         * @param target A value that determines how Elastic Transcoder interprets values that you specified for `video_watermarks.horizontal_offset`, `video_watermarks.vertical_offset`, `video_watermarks.max_width`, and `video_watermarks.max_height`. Valid values are `Content` and `Frame`.
         * 
         * @return builder
         * 
         */
        public Builder target(@Nullable Output<String> target) {
            $.target = target;
            return this;
        }

        /**
         * @param target A value that determines how Elastic Transcoder interprets values that you specified for `video_watermarks.horizontal_offset`, `video_watermarks.vertical_offset`, `video_watermarks.max_width`, and `video_watermarks.max_height`. Valid values are `Content` and `Frame`.
         * 
         * @return builder
         * 
         */
        public Builder target(String target) {
            return target(Output.of(target));
        }

        /**
         * @param verticalAlign The vertical position of the watermark unless you specify a nonzero value for `vertical_align`. Valid values are `Top`, `Bottom`, `Center`.
         * 
         * @return builder
         * 
         */
        public Builder verticalAlign(@Nullable Output<String> verticalAlign) {
            $.verticalAlign = verticalAlign;
            return this;
        }

        /**
         * @param verticalAlign The vertical position of the watermark unless you specify a nonzero value for `vertical_align`. Valid values are `Top`, `Bottom`, `Center`.
         * 
         * @return builder
         * 
         */
        public Builder verticalAlign(String verticalAlign) {
            return verticalAlign(Output.of(verticalAlign));
        }

        /**
         * @param verticalOffset The amount by which you want the vertical position of the watermark to be offset from the position specified by `vertical_align`
         * 
         * @return builder
         * 
         */
        public Builder verticalOffset(@Nullable Output<String> verticalOffset) {
            $.verticalOffset = verticalOffset;
            return this;
        }

        /**
         * @param verticalOffset The amount by which you want the vertical position of the watermark to be offset from the position specified by `vertical_align`
         * 
         * @return builder
         * 
         */
        public Builder verticalOffset(String verticalOffset) {
            return verticalOffset(Output.of(verticalOffset));
        }

        public PresetVideoWatermarkArgs build() {
            return $;
        }
    }

}
