// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.s3.inputs;

import com.pulumi.aws.s3.inputs.BucketLoggingTargetObjectKeyFormatPartitionedPrefixArgs;
import com.pulumi.aws.s3.inputs.BucketLoggingTargetObjectKeyFormatSimplePrefixArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BucketLoggingTargetObjectKeyFormatArgs extends com.pulumi.resources.ResourceArgs {

    public static final BucketLoggingTargetObjectKeyFormatArgs Empty = new BucketLoggingTargetObjectKeyFormatArgs();

    /**
     * Partitioned S3 key for log objects. See below.
     * 
     */
    @Import(name="partitionedPrefix")
    private @Nullable Output<BucketLoggingTargetObjectKeyFormatPartitionedPrefixArgs> partitionedPrefix;

    /**
     * @return Partitioned S3 key for log objects. See below.
     * 
     */
    public Optional<Output<BucketLoggingTargetObjectKeyFormatPartitionedPrefixArgs>> partitionedPrefix() {
        return Optional.ofNullable(this.partitionedPrefix);
    }

    /**
     * Use the simple format for S3 keys for log objects. To use, set `simple_prefix {}`.
     * 
     */
    @Import(name="simplePrefix")
    private @Nullable Output<BucketLoggingTargetObjectKeyFormatSimplePrefixArgs> simplePrefix;

    /**
     * @return Use the simple format for S3 keys for log objects. To use, set `simple_prefix {}`.
     * 
     */
    public Optional<Output<BucketLoggingTargetObjectKeyFormatSimplePrefixArgs>> simplePrefix() {
        return Optional.ofNullable(this.simplePrefix);
    }

    private BucketLoggingTargetObjectKeyFormatArgs() {}

    private BucketLoggingTargetObjectKeyFormatArgs(BucketLoggingTargetObjectKeyFormatArgs $) {
        this.partitionedPrefix = $.partitionedPrefix;
        this.simplePrefix = $.simplePrefix;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BucketLoggingTargetObjectKeyFormatArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BucketLoggingTargetObjectKeyFormatArgs $;

        public Builder() {
            $ = new BucketLoggingTargetObjectKeyFormatArgs();
        }

        public Builder(BucketLoggingTargetObjectKeyFormatArgs defaults) {
            $ = new BucketLoggingTargetObjectKeyFormatArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param partitionedPrefix Partitioned S3 key for log objects. See below.
         * 
         * @return builder
         * 
         */
        public Builder partitionedPrefix(@Nullable Output<BucketLoggingTargetObjectKeyFormatPartitionedPrefixArgs> partitionedPrefix) {
            $.partitionedPrefix = partitionedPrefix;
            return this;
        }

        /**
         * @param partitionedPrefix Partitioned S3 key for log objects. See below.
         * 
         * @return builder
         * 
         */
        public Builder partitionedPrefix(BucketLoggingTargetObjectKeyFormatPartitionedPrefixArgs partitionedPrefix) {
            return partitionedPrefix(Output.of(partitionedPrefix));
        }

        /**
         * @param simplePrefix Use the simple format for S3 keys for log objects. To use, set `simple_prefix {}`.
         * 
         * @return builder
         * 
         */
        public Builder simplePrefix(@Nullable Output<BucketLoggingTargetObjectKeyFormatSimplePrefixArgs> simplePrefix) {
            $.simplePrefix = simplePrefix;
            return this;
        }

        /**
         * @param simplePrefix Use the simple format for S3 keys for log objects. To use, set `simple_prefix {}`.
         * 
         * @return builder
         * 
         */
        public Builder simplePrefix(BucketLoggingTargetObjectKeyFormatSimplePrefixArgs simplePrefix) {
            return simplePrefix(Output.of(simplePrefix));
        }

        public BucketLoggingTargetObjectKeyFormatArgs build() {
            return $;
        }
    }

}
