// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.rekognition;

import com.pulumi.aws.Utilities;
import com.pulumi.aws.rekognition.StreamProcessorArgs;
import com.pulumi.aws.rekognition.inputs.StreamProcessorState;
import com.pulumi.aws.rekognition.outputs.StreamProcessorDataSharingPreference;
import com.pulumi.aws.rekognition.outputs.StreamProcessorInput;
import com.pulumi.aws.rekognition.outputs.StreamProcessorNotificationChannel;
import com.pulumi.aws.rekognition.outputs.StreamProcessorOutput;
import com.pulumi.aws.rekognition.outputs.StreamProcessorRegionsOfInterest;
import com.pulumi.aws.rekognition.outputs.StreamProcessorSettings;
import com.pulumi.aws.rekognition.outputs.StreamProcessorTimeouts;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Resource for managing an AWS Rekognition Stream Processor.
 * 
 * &gt; This resource must be configured specifically for your use case, and not all options are compatible with one another. See [Stream Processor API documentation](https://docs.aws.amazon.com/rekognition/latest/APIReference/API_CreateStreamProcessor.html#rekognition-CreateStreamProcessor-request-Input) for configuration information.
 * 
 * &gt; Stream Processors configured for Face Recognition cannot have _any_ properties updated after the fact, and it will result in an AWS API error.
 * 
 * ## Example Usage
 * 
 * ### Label Detection
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.aws.s3.BucketV2;
 * import com.pulumi.aws.s3.BucketV2Args;
 * import com.pulumi.aws.sns.Topic;
 * import com.pulumi.aws.sns.TopicArgs;
 * import com.pulumi.aws.kinesis.VideoStream;
 * import com.pulumi.aws.kinesis.VideoStreamArgs;
 * import com.pulumi.aws.iam.Role;
 * import com.pulumi.aws.iam.RoleArgs;
 * import com.pulumi.aws.iam.inputs.RoleInlinePolicyArgs;
 * import com.pulumi.aws.rekognition.StreamProcessor;
 * import com.pulumi.aws.rekognition.StreamProcessorArgs;
 * import com.pulumi.aws.rekognition.inputs.StreamProcessorDataSharingPreferenceArgs;
 * import com.pulumi.aws.rekognition.inputs.StreamProcessorOutputArgs;
 * import com.pulumi.aws.rekognition.inputs.StreamProcessorOutputS3DestinationArgs;
 * import com.pulumi.aws.rekognition.inputs.StreamProcessorSettingsArgs;
 * import com.pulumi.aws.rekognition.inputs.StreamProcessorSettingsConnectedHomeArgs;
 * import com.pulumi.aws.rekognition.inputs.StreamProcessorInputArgs;
 * import com.pulumi.aws.rekognition.inputs.StreamProcessorInputKinesisVideoStreamArgs;
 * import com.pulumi.aws.rekognition.inputs.StreamProcessorNotificationChannelArgs;
 * import static com.pulumi.codegen.internal.Serialization.*;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new BucketV2("example", BucketV2Args.builder()
 *             .bucket("example-bucket")
 *             .build());
 * 
 *         var exampleTopic = new Topic("exampleTopic", TopicArgs.builder()
 *             .name("example-topic")
 *             .build());
 * 
 *         var exampleVideoStream = new VideoStream("exampleVideoStream", VideoStreamArgs.builder()
 *             .name("example-kinesis-input")
 *             .dataRetentionInHours(1)
 *             .deviceName("kinesis-video-device-name")
 *             .mediaType("video/h264")
 *             .build());
 * 
 *         var exampleRole = new Role("exampleRole", RoleArgs.builder()
 *             .name("example-role")
 *             .inlinePolicies(RoleInlinePolicyArgs.builder()
 *                 .name("Rekognition-Access")
 *                 .policy(Output.tuple(example.arn(), exampleTopic.arn(), exampleVideoStream.arn()).applyValue(values -> {
 *                     var exampleArn = values.t1;
 *                     var exampleTopicArn = values.t2;
 *                     var exampleVideoStreamArn = values.t3;
 *                     return serializeJson(
 *                         jsonObject(
 *                             jsonProperty("Version", "2012-10-17"),
 *                             jsonProperty("Statement", jsonArray(
 *                                 jsonObject(
 *                                     jsonProperty("Action", jsonArray("s3:PutObject")),
 *                                     jsonProperty("Effect", "Allow"),
 *                                     jsonProperty("Resource", jsonArray(String.format("%s/*", exampleArn)))
 *                                 ), 
 *                                 jsonObject(
 *                                     jsonProperty("Action", jsonArray("sns:Publish")),
 *                                     jsonProperty("Effect", "Allow"),
 *                                     jsonProperty("Resource", jsonArray(exampleTopicArn))
 *                                 ), 
 *                                 jsonObject(
 *                                     jsonProperty("Action", jsonArray(
 *                                         "kinesis:Get*", 
 *                                         "kinesis:DescribeStreamSummary"
 *                                     )),
 *                                     jsonProperty("Effect", "Allow"),
 *                                     jsonProperty("Resource", jsonArray(exampleVideoStreamArn))
 *                                 )
 *                             ))
 *                         ));
 *                 }))
 *                 .build())
 *             .assumeRolePolicy(serializeJson(
 *                 jsonObject(
 *                     jsonProperty("Version", "2012-10-17"),
 *                     jsonProperty("Statement", jsonArray(jsonObject(
 *                         jsonProperty("Action", "sts:AssumeRole"),
 *                         jsonProperty("Effect", "Allow"),
 *                         jsonProperty("Principal", jsonObject(
 *                             jsonProperty("Service", "rekognition.amazonaws.com")
 *                         ))
 *                     )))
 *                 )))
 *             .build());
 * 
 *         var exampleStreamProcessor = new StreamProcessor("exampleStreamProcessor", StreamProcessorArgs.builder()
 *             .roleArn(exampleRole.arn())
 *             .name("example-processor")
 *             .dataSharingPreference(StreamProcessorDataSharingPreferenceArgs.builder()
 *                 .optIn(false)
 *                 .build())
 *             .output(StreamProcessorOutputArgs.builder()
 *                 .s3Destination(StreamProcessorOutputS3DestinationArgs.builder()
 *                     .bucket(example.bucket())
 *                     .build())
 *                 .build())
 *             .settings(StreamProcessorSettingsArgs.builder()
 *                 .connectedHome(StreamProcessorSettingsConnectedHomeArgs.builder()
 *                     .labels(                    
 *                         "PERSON",
 *                         "PET")
 *                     .build())
 *                 .build())
 *             .input(StreamProcessorInputArgs.builder()
 *                 .kinesisVideoStream(StreamProcessorInputKinesisVideoStreamArgs.builder()
 *                     .arn(exampleVideoStream.arn())
 *                     .build())
 *                 .build())
 *             .notificationChannel(StreamProcessorNotificationChannelArgs.builder()
 *                 .snsTopicArn(exampleTopic.arn())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ### Face Detection Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.aws.kinesis.VideoStream;
 * import com.pulumi.aws.kinesis.VideoStreamArgs;
 * import com.pulumi.aws.kinesis.Stream;
 * import com.pulumi.aws.kinesis.StreamArgs;
 * import com.pulumi.aws.iam.Role;
 * import com.pulumi.aws.iam.RoleArgs;
 * import com.pulumi.aws.iam.inputs.RoleInlinePolicyArgs;
 * import com.pulumi.aws.rekognition.Collection;
 * import com.pulumi.aws.rekognition.CollectionArgs;
 * import com.pulumi.aws.rekognition.StreamProcessor;
 * import com.pulumi.aws.rekognition.StreamProcessorArgs;
 * import com.pulumi.aws.rekognition.inputs.StreamProcessorDataSharingPreferenceArgs;
 * import com.pulumi.aws.rekognition.inputs.StreamProcessorRegionsOfInterestArgs;
 * import com.pulumi.aws.rekognition.inputs.StreamProcessorInputArgs;
 * import com.pulumi.aws.rekognition.inputs.StreamProcessorInputKinesisVideoStreamArgs;
 * import com.pulumi.aws.rekognition.inputs.StreamProcessorOutputArgs;
 * import com.pulumi.aws.rekognition.inputs.StreamProcessorOutputKinesisDataStreamArgs;
 * import com.pulumi.aws.rekognition.inputs.StreamProcessorSettingsArgs;
 * import com.pulumi.aws.rekognition.inputs.StreamProcessorSettingsFaceSearchArgs;
 * import static com.pulumi.codegen.internal.Serialization.*;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new VideoStream("example", VideoStreamArgs.builder()
 *             .name("example-kinesis-input")
 *             .dataRetentionInHours(1)
 *             .deviceName("kinesis-video-device-name")
 *             .mediaType("video/h264")
 *             .build());
 * 
 *         var exampleStream = new Stream("exampleStream", StreamArgs.builder()
 *             .name("pulumi-kinesis-example")
 *             .shardCount(1)
 *             .build());
 * 
 *         var exampleRole = new Role("exampleRole", RoleArgs.builder()
 *             .name("example-role")
 *             .inlinePolicies(RoleInlinePolicyArgs.builder()
 *                 .name("Rekognition-Access")
 *                 .policy(Output.tuple(example.arn(), exampleStream.arn()).applyValue(values -> {
 *                     var exampleArn = values.t1;
 *                     var exampleStreamArn = values.t2;
 *                     return serializeJson(
 *                         jsonObject(
 *                             jsonProperty("Version", "2012-10-17"),
 *                             jsonProperty("Statement", jsonArray(
 *                                 jsonObject(
 *                                     jsonProperty("Action", jsonArray(
 *                                         "kinesis:Get*", 
 *                                         "kinesis:DescribeStreamSummary"
 *                                     )),
 *                                     jsonProperty("Effect", "Allow"),
 *                                     jsonProperty("Resource", jsonArray(exampleArn))
 *                                 ), 
 *                                 jsonObject(
 *                                     jsonProperty("Action", jsonArray("kinesis:PutRecord")),
 *                                     jsonProperty("Effect", "Allow"),
 *                                     jsonProperty("Resource", jsonArray(exampleStreamArn))
 *                                 )
 *                             ))
 *                         ));
 *                 }))
 *                 .build())
 *             .assumeRolePolicy(serializeJson(
 *                 jsonObject(
 *                     jsonProperty("Version", "2012-10-17"),
 *                     jsonProperty("Statement", jsonArray(jsonObject(
 *                         jsonProperty("Action", "sts:AssumeRole"),
 *                         jsonProperty("Effect", "Allow"),
 *                         jsonProperty("Principal", jsonObject(
 *                             jsonProperty("Service", "rekognition.amazonaws.com")
 *                         ))
 *                     )))
 *                 )))
 *             .build());
 * 
 *         var exampleCollection = new Collection("exampleCollection", CollectionArgs.builder()
 *             .collectionId("example-collection")
 *             .build());
 * 
 *         var exampleStreamProcessor = new StreamProcessor("exampleStreamProcessor", StreamProcessorArgs.builder()
 *             .roleArn(exampleRole.arn())
 *             .name("example-processor")
 *             .dataSharingPreference(StreamProcessorDataSharingPreferenceArgs.builder()
 *                 .optIn(false)
 *                 .build())
 *             .regionsOfInterests(StreamProcessorRegionsOfInterestArgs.builder()
 *                 .polygons(                
 *                     StreamProcessorRegionsOfInterestPolygonArgs.builder()
 *                         .x(0.5)
 *                         .y(0.5)
 *                         .build(),
 *                     StreamProcessorRegionsOfInterestPolygonArgs.builder()
 *                         .x(0.5)
 *                         .y(0.5)
 *                         .build(),
 *                     StreamProcessorRegionsOfInterestPolygonArgs.builder()
 *                         .x(0.5)
 *                         .y(0.5)
 *                         .build())
 *                 .build())
 *             .input(StreamProcessorInputArgs.builder()
 *                 .kinesisVideoStream(StreamProcessorInputKinesisVideoStreamArgs.builder()
 *                     .arn(example.arn())
 *                     .build())
 *                 .build())
 *             .output(StreamProcessorOutputArgs.builder()
 *                 .kinesisDataStream(StreamProcessorOutputKinesisDataStreamArgs.builder()
 *                     .arn(exampleStream.arn())
 *                     .build())
 *                 .build())
 *             .settings(StreamProcessorSettingsArgs.builder()
 *                 .faceSearch(StreamProcessorSettingsFaceSearchArgs.builder()
 *                     .collectionId(exampleCollection.id())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Using `pulumi import`, import Rekognition Stream Processor using the `name`. For example:
 * 
 * ```sh
 * $ pulumi import aws:rekognition/streamProcessor:StreamProcessor example my-stream
 * ```
 * 
 */
@ResourceType(type="aws:rekognition/streamProcessor:StreamProcessor")
public class StreamProcessor extends com.pulumi.resources.CustomResource {
    /**
     * See `data_sharing_preference`.
     * 
     */
    @Export(name="dataSharingPreference", refs={StreamProcessorDataSharingPreference.class}, tree="[0]")
    private Output</* @Nullable */ StreamProcessorDataSharingPreference> dataSharingPreference;

    /**
     * @return See `data_sharing_preference`.
     * 
     */
    public Output<Optional<StreamProcessorDataSharingPreference>> dataSharingPreference() {
        return Codegen.optional(this.dataSharingPreference);
    }
    /**
     * Input video stream. See `input`.
     * 
     */
    @Export(name="input", refs={StreamProcessorInput.class}, tree="[0]")
    private Output</* @Nullable */ StreamProcessorInput> input;

    /**
     * @return Input video stream. See `input`.
     * 
     */
    public Output<Optional<StreamProcessorInput>> input() {
        return Codegen.optional(this.input);
    }
    /**
     * Optional parameter for label detection stream processors.
     * 
     */
    @Export(name="kmsKeyId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> kmsKeyId;

    /**
     * @return Optional parameter for label detection stream processors.
     * 
     */
    public Output<Optional<String>> kmsKeyId() {
        return Codegen.optional(this.kmsKeyId);
    }
    /**
     * The name of the Stream Processor.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the Stream Processor.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The Amazon Simple Notification Service topic to which Amazon Rekognition publishes the completion status. See `notification_channel`.
     * 
     */
    @Export(name="notificationChannel", refs={StreamProcessorNotificationChannel.class}, tree="[0]")
    private Output</* @Nullable */ StreamProcessorNotificationChannel> notificationChannel;

    /**
     * @return The Amazon Simple Notification Service topic to which Amazon Rekognition publishes the completion status. See `notification_channel`.
     * 
     */
    public Output<Optional<StreamProcessorNotificationChannel>> notificationChannel() {
        return Codegen.optional(this.notificationChannel);
    }
    /**
     * Kinesis data stream stream or Amazon S3 bucket location to which Amazon Rekognition Video puts the analysis results. See `output`.
     * 
     */
    @Export(name="output", refs={StreamProcessorOutput.class}, tree="[0]")
    private Output</* @Nullable */ StreamProcessorOutput> output;

    /**
     * @return Kinesis data stream stream or Amazon S3 bucket location to which Amazon Rekognition Video puts the analysis results. See `output`.
     * 
     */
    public Output<Optional<StreamProcessorOutput>> output() {
        return Codegen.optional(this.output);
    }
    /**
     * Specifies locations in the frames where Amazon Rekognition checks for objects or people. See `regions_of_interest`.
     * 
     */
    @Export(name="regionsOfInterests", refs={List.class,StreamProcessorRegionsOfInterest.class}, tree="[0,1]")
    private Output</* @Nullable */ List<StreamProcessorRegionsOfInterest>> regionsOfInterests;

    /**
     * @return Specifies locations in the frames where Amazon Rekognition checks for objects or people. See `regions_of_interest`.
     * 
     */
    public Output<Optional<List<StreamProcessorRegionsOfInterest>>> regionsOfInterests() {
        return Codegen.optional(this.regionsOfInterests);
    }
    /**
     * The Amazon Resource Number (ARN) of the IAM role that allows access to the stream processor. The IAM role provides Rekognition read permissions for a Kinesis stream. It also provides write permissions to an Amazon S3 bucket and Amazon Simple Notification Service topic for a label detection stream processor. This is required for both face search and label detection stream processors.
     * 
     */
    @Export(name="roleArn", refs={String.class}, tree="[0]")
    private Output<String> roleArn;

    /**
     * @return The Amazon Resource Number (ARN) of the IAM role that allows access to the stream processor. The IAM role provides Rekognition read permissions for a Kinesis stream. It also provides write permissions to an Amazon S3 bucket and Amazon Simple Notification Service topic for a label detection stream processor. This is required for both face search and label detection stream processors.
     * 
     */
    public Output<String> roleArn() {
        return this.roleArn;
    }
    /**
     * Input parameters used in a streaming video analyzed by a stream processor. See `settings`.
     * 
     * The following arguments are optional:
     * 
     */
    @Export(name="settings", refs={StreamProcessorSettings.class}, tree="[0]")
    private Output</* @Nullable */ StreamProcessorSettings> settings;

    /**
     * @return Input parameters used in a streaming video analyzed by a stream processor. See `settings`.
     * 
     * The following arguments are optional:
     * 
     */
    public Output<Optional<StreamProcessorSettings>> settings() {
        return Codegen.optional(this.settings);
    }
    /**
     * ARN of the Stream Processor.
     * 
     */
    @Export(name="streamProcessorArn", refs={String.class}, tree="[0]")
    private Output<String> streamProcessorArn;

    /**
     * @return ARN of the Stream Processor.
     * 
     */
    public Output<String> streamProcessorArn() {
        return this.streamProcessorArn;
    }
    /**
     * A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Export(name="tags", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Output<Optional<Map<String,String>>> tags() {
        return Codegen.optional(this.tags);
    }
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @Export(name="tagsAll", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> tagsAll;

    /**
     * @return A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     */
    public Output<Map<String,String>> tagsAll() {
        return this.tagsAll;
    }
    @Export(name="timeouts", refs={StreamProcessorTimeouts.class}, tree="[0]")
    private Output</* @Nullable */ StreamProcessorTimeouts> timeouts;

    public Output<Optional<StreamProcessorTimeouts>> timeouts() {
        return Codegen.optional(this.timeouts);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public StreamProcessor(java.lang.String name) {
        this(name, StreamProcessorArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public StreamProcessor(java.lang.String name, StreamProcessorArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public StreamProcessor(java.lang.String name, StreamProcessorArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("aws:rekognition/streamProcessor:StreamProcessor", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private StreamProcessor(java.lang.String name, Output<java.lang.String> id, @Nullable StreamProcessorState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("aws:rekognition/streamProcessor:StreamProcessor", name, state, makeResourceOptions(options, id), false);
    }

    private static StreamProcessorArgs makeArgs(StreamProcessorArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? StreamProcessorArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static StreamProcessor get(java.lang.String name, Output<java.lang.String> id, @Nullable StreamProcessorState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new StreamProcessor(name, id, state, options);
    }
}
