// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.kinesisanalyticsv2.inputs;

import com.pulumi.aws.kinesisanalyticsv2.inputs.ApplicationApplicationConfigurationFlinkApplicationConfigurationCheckpointConfigurationArgs;
import com.pulumi.aws.kinesisanalyticsv2.inputs.ApplicationApplicationConfigurationFlinkApplicationConfigurationMonitoringConfigurationArgs;
import com.pulumi.aws.kinesisanalyticsv2.inputs.ApplicationApplicationConfigurationFlinkApplicationConfigurationParallelismConfigurationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ApplicationApplicationConfigurationFlinkApplicationConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final ApplicationApplicationConfigurationFlinkApplicationConfigurationArgs Empty = new ApplicationApplicationConfigurationFlinkApplicationConfigurationArgs();

    /**
     * Describes an application&#39;s checkpointing configuration.
     * 
     */
    @Import(name="checkpointConfiguration")
    private @Nullable Output<ApplicationApplicationConfigurationFlinkApplicationConfigurationCheckpointConfigurationArgs> checkpointConfiguration;

    /**
     * @return Describes an application&#39;s checkpointing configuration.
     * 
     */
    public Optional<Output<ApplicationApplicationConfigurationFlinkApplicationConfigurationCheckpointConfigurationArgs>> checkpointConfiguration() {
        return Optional.ofNullable(this.checkpointConfiguration);
    }

    /**
     * Describes configuration parameters for CloudWatch logging for an application.
     * 
     */
    @Import(name="monitoringConfiguration")
    private @Nullable Output<ApplicationApplicationConfigurationFlinkApplicationConfigurationMonitoringConfigurationArgs> monitoringConfiguration;

    /**
     * @return Describes configuration parameters for CloudWatch logging for an application.
     * 
     */
    public Optional<Output<ApplicationApplicationConfigurationFlinkApplicationConfigurationMonitoringConfigurationArgs>> monitoringConfiguration() {
        return Optional.ofNullable(this.monitoringConfiguration);
    }

    /**
     * Describes parameters for how an application executes multiple tasks simultaneously.
     * 
     */
    @Import(name="parallelismConfiguration")
    private @Nullable Output<ApplicationApplicationConfigurationFlinkApplicationConfigurationParallelismConfigurationArgs> parallelismConfiguration;

    /**
     * @return Describes parameters for how an application executes multiple tasks simultaneously.
     * 
     */
    public Optional<Output<ApplicationApplicationConfigurationFlinkApplicationConfigurationParallelismConfigurationArgs>> parallelismConfiguration() {
        return Optional.ofNullable(this.parallelismConfiguration);
    }

    private ApplicationApplicationConfigurationFlinkApplicationConfigurationArgs() {}

    private ApplicationApplicationConfigurationFlinkApplicationConfigurationArgs(ApplicationApplicationConfigurationFlinkApplicationConfigurationArgs $) {
        this.checkpointConfiguration = $.checkpointConfiguration;
        this.monitoringConfiguration = $.monitoringConfiguration;
        this.parallelismConfiguration = $.parallelismConfiguration;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApplicationApplicationConfigurationFlinkApplicationConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApplicationApplicationConfigurationFlinkApplicationConfigurationArgs $;

        public Builder() {
            $ = new ApplicationApplicationConfigurationFlinkApplicationConfigurationArgs();
        }

        public Builder(ApplicationApplicationConfigurationFlinkApplicationConfigurationArgs defaults) {
            $ = new ApplicationApplicationConfigurationFlinkApplicationConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param checkpointConfiguration Describes an application&#39;s checkpointing configuration.
         * 
         * @return builder
         * 
         */
        public Builder checkpointConfiguration(@Nullable Output<ApplicationApplicationConfigurationFlinkApplicationConfigurationCheckpointConfigurationArgs> checkpointConfiguration) {
            $.checkpointConfiguration = checkpointConfiguration;
            return this;
        }

        /**
         * @param checkpointConfiguration Describes an application&#39;s checkpointing configuration.
         * 
         * @return builder
         * 
         */
        public Builder checkpointConfiguration(ApplicationApplicationConfigurationFlinkApplicationConfigurationCheckpointConfigurationArgs checkpointConfiguration) {
            return checkpointConfiguration(Output.of(checkpointConfiguration));
        }

        /**
         * @param monitoringConfiguration Describes configuration parameters for CloudWatch logging for an application.
         * 
         * @return builder
         * 
         */
        public Builder monitoringConfiguration(@Nullable Output<ApplicationApplicationConfigurationFlinkApplicationConfigurationMonitoringConfigurationArgs> monitoringConfiguration) {
            $.monitoringConfiguration = monitoringConfiguration;
            return this;
        }

        /**
         * @param monitoringConfiguration Describes configuration parameters for CloudWatch logging for an application.
         * 
         * @return builder
         * 
         */
        public Builder monitoringConfiguration(ApplicationApplicationConfigurationFlinkApplicationConfigurationMonitoringConfigurationArgs monitoringConfiguration) {
            return monitoringConfiguration(Output.of(monitoringConfiguration));
        }

        /**
         * @param parallelismConfiguration Describes parameters for how an application executes multiple tasks simultaneously.
         * 
         * @return builder
         * 
         */
        public Builder parallelismConfiguration(@Nullable Output<ApplicationApplicationConfigurationFlinkApplicationConfigurationParallelismConfigurationArgs> parallelismConfiguration) {
            $.parallelismConfiguration = parallelismConfiguration;
            return this;
        }

        /**
         * @param parallelismConfiguration Describes parameters for how an application executes multiple tasks simultaneously.
         * 
         * @return builder
         * 
         */
        public Builder parallelismConfiguration(ApplicationApplicationConfigurationFlinkApplicationConfigurationParallelismConfigurationArgs parallelismConfiguration) {
            return parallelismConfiguration(Output.of(parallelismConfiguration));
        }

        public ApplicationApplicationConfigurationFlinkApplicationConfigurationArgs build() {
            return $;
        }
    }

}
