// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.pipes.inputs;

import com.pulumi.aws.pipes.inputs.PipeTargetParametersBatchJobParametersContainerOverridesEnvironmentArgs;
import com.pulumi.aws.pipes.inputs.PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PipeTargetParametersBatchJobParametersContainerOverridesArgs extends com.pulumi.resources.ResourceArgs {

    public static final PipeTargetParametersBatchJobParametersContainerOverridesArgs Empty = new PipeTargetParametersBatchJobParametersContainerOverridesArgs();

    /**
     * List of commands to send to the container that overrides the default command from the Docker image or the task definition. You must also specify a container name.
     * 
     */
    @Import(name="commands")
    private @Nullable Output<List<String>> commands;

    /**
     * @return List of commands to send to the container that overrides the default command from the Docker image or the task definition. You must also specify a container name.
     * 
     */
    public Optional<Output<List<String>>> commands() {
        return Optional.ofNullable(this.commands);
    }

    /**
     * The environment variables to send to the container. You can add new environment variables, which are added to the container at launch, or you can override the existing environment variables from the Docker image or the task definition. You must also specify a container name. Detailed below.
     * 
     */
    @Import(name="environments")
    private @Nullable Output<List<PipeTargetParametersBatchJobParametersContainerOverridesEnvironmentArgs>> environments;

    /**
     * @return The environment variables to send to the container. You can add new environment variables, which are added to the container at launch, or you can override the existing environment variables from the Docker image or the task definition. You must also specify a container name. Detailed below.
     * 
     */
    public Optional<Output<List<PipeTargetParametersBatchJobParametersContainerOverridesEnvironmentArgs>>> environments() {
        return Optional.ofNullable(this.environments);
    }

    /**
     * The instance type to use for a multi-node parallel job. This parameter isn&#39;t applicable to single-node container jobs or jobs that run on Fargate resources, and shouldn&#39;t be provided.
     * 
     */
    @Import(name="instanceType")
    private @Nullable Output<String> instanceType;

    /**
     * @return The instance type to use for a multi-node parallel job. This parameter isn&#39;t applicable to single-node container jobs or jobs that run on Fargate resources, and shouldn&#39;t be provided.
     * 
     */
    public Optional<Output<String>> instanceType() {
        return Optional.ofNullable(this.instanceType);
    }

    /**
     * The type and amount of a resource to assign to a container, instead of the default value from the task definition. The only supported resource is a GPU. Detailed below.
     * 
     */
    @Import(name="resourceRequirements")
    private @Nullable Output<List<PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementArgs>> resourceRequirements;

    /**
     * @return The type and amount of a resource to assign to a container, instead of the default value from the task definition. The only supported resource is a GPU. Detailed below.
     * 
     */
    public Optional<Output<List<PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementArgs>>> resourceRequirements() {
        return Optional.ofNullable(this.resourceRequirements);
    }

    private PipeTargetParametersBatchJobParametersContainerOverridesArgs() {}

    private PipeTargetParametersBatchJobParametersContainerOverridesArgs(PipeTargetParametersBatchJobParametersContainerOverridesArgs $) {
        this.commands = $.commands;
        this.environments = $.environments;
        this.instanceType = $.instanceType;
        this.resourceRequirements = $.resourceRequirements;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PipeTargetParametersBatchJobParametersContainerOverridesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PipeTargetParametersBatchJobParametersContainerOverridesArgs $;

        public Builder() {
            $ = new PipeTargetParametersBatchJobParametersContainerOverridesArgs();
        }

        public Builder(PipeTargetParametersBatchJobParametersContainerOverridesArgs defaults) {
            $ = new PipeTargetParametersBatchJobParametersContainerOverridesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param commands List of commands to send to the container that overrides the default command from the Docker image or the task definition. You must also specify a container name.
         * 
         * @return builder
         * 
         */
        public Builder commands(@Nullable Output<List<String>> commands) {
            $.commands = commands;
            return this;
        }

        /**
         * @param commands List of commands to send to the container that overrides the default command from the Docker image or the task definition. You must also specify a container name.
         * 
         * @return builder
         * 
         */
        public Builder commands(List<String> commands) {
            return commands(Output.of(commands));
        }

        /**
         * @param commands List of commands to send to the container that overrides the default command from the Docker image or the task definition. You must also specify a container name.
         * 
         * @return builder
         * 
         */
        public Builder commands(String... commands) {
            return commands(List.of(commands));
        }

        /**
         * @param environments The environment variables to send to the container. You can add new environment variables, which are added to the container at launch, or you can override the existing environment variables from the Docker image or the task definition. You must also specify a container name. Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder environments(@Nullable Output<List<PipeTargetParametersBatchJobParametersContainerOverridesEnvironmentArgs>> environments) {
            $.environments = environments;
            return this;
        }

        /**
         * @param environments The environment variables to send to the container. You can add new environment variables, which are added to the container at launch, or you can override the existing environment variables from the Docker image or the task definition. You must also specify a container name. Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder environments(List<PipeTargetParametersBatchJobParametersContainerOverridesEnvironmentArgs> environments) {
            return environments(Output.of(environments));
        }

        /**
         * @param environments The environment variables to send to the container. You can add new environment variables, which are added to the container at launch, or you can override the existing environment variables from the Docker image or the task definition. You must also specify a container name. Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder environments(PipeTargetParametersBatchJobParametersContainerOverridesEnvironmentArgs... environments) {
            return environments(List.of(environments));
        }

        /**
         * @param instanceType The instance type to use for a multi-node parallel job. This parameter isn&#39;t applicable to single-node container jobs or jobs that run on Fargate resources, and shouldn&#39;t be provided.
         * 
         * @return builder
         * 
         */
        public Builder instanceType(@Nullable Output<String> instanceType) {
            $.instanceType = instanceType;
            return this;
        }

        /**
         * @param instanceType The instance type to use for a multi-node parallel job. This parameter isn&#39;t applicable to single-node container jobs or jobs that run on Fargate resources, and shouldn&#39;t be provided.
         * 
         * @return builder
         * 
         */
        public Builder instanceType(String instanceType) {
            return instanceType(Output.of(instanceType));
        }

        /**
         * @param resourceRequirements The type and amount of a resource to assign to a container, instead of the default value from the task definition. The only supported resource is a GPU. Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder resourceRequirements(@Nullable Output<List<PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementArgs>> resourceRequirements) {
            $.resourceRequirements = resourceRequirements;
            return this;
        }

        /**
         * @param resourceRequirements The type and amount of a resource to assign to a container, instead of the default value from the task definition. The only supported resource is a GPU. Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder resourceRequirements(List<PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementArgs> resourceRequirements) {
            return resourceRequirements(Output.of(resourceRequirements));
        }

        /**
         * @param resourceRequirements The type and amount of a resource to assign to a container, instead of the default value from the task definition. The only supported resource is a GPU. Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder resourceRequirements(PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementArgs... resourceRequirements) {
            return resourceRequirements(List.of(resourceRequirements));
        }

        public PipeTargetParametersBatchJobParametersContainerOverridesArgs build() {
            return $;
        }
    }

}
