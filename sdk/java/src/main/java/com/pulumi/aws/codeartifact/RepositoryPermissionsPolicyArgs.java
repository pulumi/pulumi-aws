// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.codeartifact;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RepositoryPermissionsPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final RepositoryPermissionsPolicyArgs Empty = new RepositoryPermissionsPolicyArgs();

    @Import(name="domain", required=true)
    private Output<String> domain;

    public Output<String> domain() {
        return this.domain;
    }

    @Import(name="domainOwner")
    private @Nullable Output<String> domainOwner;

    public Optional<Output<String>> domainOwner() {
        return Optional.ofNullable(this.domainOwner);
    }

    @Import(name="policyDocument", required=true)
    private Output<String> policyDocument;

    public Output<String> policyDocument() {
        return this.policyDocument;
    }

    @Import(name="policyRevision")
    private @Nullable Output<String> policyRevision;

    public Optional<Output<String>> policyRevision() {
        return Optional.ofNullable(this.policyRevision);
    }

    @Import(name="repository", required=true)
    private Output<String> repository;

    public Output<String> repository() {
        return this.repository;
    }

    private RepositoryPermissionsPolicyArgs() {}

    private RepositoryPermissionsPolicyArgs(RepositoryPermissionsPolicyArgs $) {
        this.domain = $.domain;
        this.domainOwner = $.domainOwner;
        this.policyDocument = $.policyDocument;
        this.policyRevision = $.policyRevision;
        this.repository = $.repository;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RepositoryPermissionsPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RepositoryPermissionsPolicyArgs $;

        public Builder() {
            $ = new RepositoryPermissionsPolicyArgs();
        }

        public Builder(RepositoryPermissionsPolicyArgs defaults) {
            $ = new RepositoryPermissionsPolicyArgs(Objects.requireNonNull(defaults));
        }

        public Builder domain(Output<String> domain) {
            $.domain = domain;
            return this;
        }

        public Builder domain(String domain) {
            return domain(Output.of(domain));
        }

        public Builder domainOwner(@Nullable Output<String> domainOwner) {
            $.domainOwner = domainOwner;
            return this;
        }

        public Builder domainOwner(String domainOwner) {
            return domainOwner(Output.of(domainOwner));
        }

        public Builder policyDocument(Output<String> policyDocument) {
            $.policyDocument = policyDocument;
            return this;
        }

        public Builder policyDocument(String policyDocument) {
            return policyDocument(Output.of(policyDocument));
        }

        public Builder policyRevision(@Nullable Output<String> policyRevision) {
            $.policyRevision = policyRevision;
            return this;
        }

        public Builder policyRevision(String policyRevision) {
            return policyRevision(Output.of(policyRevision));
        }

        public Builder repository(Output<String> repository) {
            $.repository = repository;
            return this;
        }

        public Builder repository(String repository) {
            return repository(Output.of(repository));
        }

        public RepositoryPermissionsPolicyArgs build() {
            $.domain = Objects.requireNonNull($.domain, "expected parameter 'domain' to be non-null");
            $.policyDocument = Objects.requireNonNull($.policyDocument, "expected parameter 'policyDocument' to be non-null");
            $.repository = Objects.requireNonNull($.repository, "expected parameter 'repository' to be non-null");
            return $;
        }
    }

}
