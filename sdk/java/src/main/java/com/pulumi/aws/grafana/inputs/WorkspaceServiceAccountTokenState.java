// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.grafana.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WorkspaceServiceAccountTokenState extends com.pulumi.resources.ResourceArgs {

    public static final WorkspaceServiceAccountTokenState Empty = new WorkspaceServiceAccountTokenState();

    /**
     * Specifies when the service account token was created.
     * 
     */
    @Import(name="createdAt")
    private @Nullable Output<String> createdAt;

    /**
     * @return Specifies when the service account token was created.
     * 
     */
    public Optional<Output<String>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    /**
     * Specifies when the service account token will expire.
     * 
     */
    @Import(name="expiresAt")
    private @Nullable Output<String> expiresAt;

    /**
     * @return Specifies when the service account token will expire.
     * 
     */
    public Optional<Output<String>> expiresAt() {
        return Optional.ofNullable(this.expiresAt);
    }

    /**
     * The key for the service account token. Used when making calls to the Grafana HTTP APIs to authenticate and authorize the requests.
     * 
     */
    @Import(name="key")
    private @Nullable Output<String> key;

    /**
     * @return The key for the service account token. Used when making calls to the Grafana HTTP APIs to authenticate and authorize the requests.
     * 
     */
    public Optional<Output<String>> key() {
        return Optional.ofNullable(this.key);
    }

    /**
     * A name for the token to create. The name must be unique within the workspace.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return A name for the token to create. The name must be unique within the workspace.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Sets how long the token will be valid, in seconds. You can set the time up to 30 days in the future.
     * 
     */
    @Import(name="secondsToLive")
    private @Nullable Output<Integer> secondsToLive;

    /**
     * @return Sets how long the token will be valid, in seconds. You can set the time up to 30 days in the future.
     * 
     */
    public Optional<Output<Integer>> secondsToLive() {
        return Optional.ofNullable(this.secondsToLive);
    }

    /**
     * The ID of the service account for which to create a token.
     * 
     */
    @Import(name="serviceAccountId")
    private @Nullable Output<String> serviceAccountId;

    /**
     * @return The ID of the service account for which to create a token.
     * 
     */
    public Optional<Output<String>> serviceAccountId() {
        return Optional.ofNullable(this.serviceAccountId);
    }

    /**
     * Identifier of the service account token in the given Grafana workspace.
     * 
     */
    @Import(name="serviceAccountTokenId")
    private @Nullable Output<String> serviceAccountTokenId;

    /**
     * @return Identifier of the service account token in the given Grafana workspace.
     * 
     */
    public Optional<Output<String>> serviceAccountTokenId() {
        return Optional.ofNullable(this.serviceAccountTokenId);
    }

    /**
     * The Grafana workspace with which the service account token is associated.
     * 
     */
    @Import(name="workspaceId")
    private @Nullable Output<String> workspaceId;

    /**
     * @return The Grafana workspace with which the service account token is associated.
     * 
     */
    public Optional<Output<String>> workspaceId() {
        return Optional.ofNullable(this.workspaceId);
    }

    private WorkspaceServiceAccountTokenState() {}

    private WorkspaceServiceAccountTokenState(WorkspaceServiceAccountTokenState $) {
        this.createdAt = $.createdAt;
        this.expiresAt = $.expiresAt;
        this.key = $.key;
        this.name = $.name;
        this.secondsToLive = $.secondsToLive;
        this.serviceAccountId = $.serviceAccountId;
        this.serviceAccountTokenId = $.serviceAccountTokenId;
        this.workspaceId = $.workspaceId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WorkspaceServiceAccountTokenState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WorkspaceServiceAccountTokenState $;

        public Builder() {
            $ = new WorkspaceServiceAccountTokenState();
        }

        public Builder(WorkspaceServiceAccountTokenState defaults) {
            $ = new WorkspaceServiceAccountTokenState(Objects.requireNonNull(defaults));
        }

        /**
         * @param createdAt Specifies when the service account token was created.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(@Nullable Output<String> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        /**
         * @param createdAt Specifies when the service account token was created.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(String createdAt) {
            return createdAt(Output.of(createdAt));
        }

        /**
         * @param expiresAt Specifies when the service account token will expire.
         * 
         * @return builder
         * 
         */
        public Builder expiresAt(@Nullable Output<String> expiresAt) {
            $.expiresAt = expiresAt;
            return this;
        }

        /**
         * @param expiresAt Specifies when the service account token will expire.
         * 
         * @return builder
         * 
         */
        public Builder expiresAt(String expiresAt) {
            return expiresAt(Output.of(expiresAt));
        }

        /**
         * @param key The key for the service account token. Used when making calls to the Grafana HTTP APIs to authenticate and authorize the requests.
         * 
         * @return builder
         * 
         */
        public Builder key(@Nullable Output<String> key) {
            $.key = key;
            return this;
        }

        /**
         * @param key The key for the service account token. Used when making calls to the Grafana HTTP APIs to authenticate and authorize the requests.
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            return key(Output.of(key));
        }

        /**
         * @param name A name for the token to create. The name must be unique within the workspace.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A name for the token to create. The name must be unique within the workspace.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param secondsToLive Sets how long the token will be valid, in seconds. You can set the time up to 30 days in the future.
         * 
         * @return builder
         * 
         */
        public Builder secondsToLive(@Nullable Output<Integer> secondsToLive) {
            $.secondsToLive = secondsToLive;
            return this;
        }

        /**
         * @param secondsToLive Sets how long the token will be valid, in seconds. You can set the time up to 30 days in the future.
         * 
         * @return builder
         * 
         */
        public Builder secondsToLive(Integer secondsToLive) {
            return secondsToLive(Output.of(secondsToLive));
        }

        /**
         * @param serviceAccountId The ID of the service account for which to create a token.
         * 
         * @return builder
         * 
         */
        public Builder serviceAccountId(@Nullable Output<String> serviceAccountId) {
            $.serviceAccountId = serviceAccountId;
            return this;
        }

        /**
         * @param serviceAccountId The ID of the service account for which to create a token.
         * 
         * @return builder
         * 
         */
        public Builder serviceAccountId(String serviceAccountId) {
            return serviceAccountId(Output.of(serviceAccountId));
        }

        /**
         * @param serviceAccountTokenId Identifier of the service account token in the given Grafana workspace.
         * 
         * @return builder
         * 
         */
        public Builder serviceAccountTokenId(@Nullable Output<String> serviceAccountTokenId) {
            $.serviceAccountTokenId = serviceAccountTokenId;
            return this;
        }

        /**
         * @param serviceAccountTokenId Identifier of the service account token in the given Grafana workspace.
         * 
         * @return builder
         * 
         */
        public Builder serviceAccountTokenId(String serviceAccountTokenId) {
            return serviceAccountTokenId(Output.of(serviceAccountTokenId));
        }

        /**
         * @param workspaceId The Grafana workspace with which the service account token is associated.
         * 
         * @return builder
         * 
         */
        public Builder workspaceId(@Nullable Output<String> workspaceId) {
            $.workspaceId = workspaceId;
            return this;
        }

        /**
         * @param workspaceId The Grafana workspace with which the service account token is associated.
         * 
         * @return builder
         * 
         */
        public Builder workspaceId(String workspaceId) {
            return workspaceId(Output.of(workspaceId));
        }

        public WorkspaceServiceAccountTokenState build() {
            return $;
        }
    }

}
