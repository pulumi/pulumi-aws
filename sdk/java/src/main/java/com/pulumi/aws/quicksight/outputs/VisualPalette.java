// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.outputs;

import com.pulumi.aws.quicksight.outputs.VisualPaletteColorMap;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class VisualPalette {
    private @Nullable String chartColor;
    private @Nullable List<VisualPaletteColorMap> colorMaps;

    private VisualPalette() {}
    public Optional<String> chartColor() {
        return Optional.ofNullable(this.chartColor);
    }
    public List<VisualPaletteColorMap> colorMaps() {
        return this.colorMaps == null ? List.of() : this.colorMaps;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VisualPalette defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String chartColor;
        private @Nullable List<VisualPaletteColorMap> colorMaps;
        public Builder() {}
        public Builder(VisualPalette defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.chartColor = defaults.chartColor;
    	      this.colorMaps = defaults.colorMaps;
        }

        @CustomType.Setter
        public Builder chartColor(@Nullable String chartColor) {

            this.chartColor = chartColor;
            return this;
        }
        @CustomType.Setter
        public Builder colorMaps(@Nullable List<VisualPaletteColorMap> colorMaps) {

            this.colorMaps = colorMaps;
            return this;
        }
        public Builder colorMaps(VisualPaletteColorMap... colorMaps) {
            return colorMaps(List.of(colorMaps));
        }
        public VisualPalette build() {
            final var _resultValue = new VisualPalette();
            _resultValue.chartColor = chartColor;
            _resultValue.colorMaps = colorMaps;
            return _resultValue;
        }
    }
}
