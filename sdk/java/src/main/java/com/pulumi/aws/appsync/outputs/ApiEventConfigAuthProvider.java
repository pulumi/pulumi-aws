// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.appsync.outputs;

import com.pulumi.aws.appsync.outputs.ApiEventConfigAuthProviderCognitoConfig;
import com.pulumi.aws.appsync.outputs.ApiEventConfigAuthProviderLambdaAuthorizerConfig;
import com.pulumi.aws.appsync.outputs.ApiEventConfigAuthProviderOpenidConnectConfig;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ApiEventConfigAuthProvider {
    /**
     * @return Type of authentication provider. Valid values: `AMAZON_COGNITO_USER_POOLS`, `AWS_LAMBDA`, `OPENID_CONNECT`, `API_KEY`.
     * 
     */
    private String authType;
    /**
     * @return Configuration for Cognito user pool authentication. Required when `auth_type` is `AMAZON_COGNITO_USER_POOLS`. See Cognito Config below.
     * 
     */
    private @Nullable ApiEventConfigAuthProviderCognitoConfig cognitoConfig;
    /**
     * @return Configuration for Lambda authorization. Required when `auth_type` is `AWS_LAMBDA`. See Lambda Authorizer Config below.
     * 
     */
    private @Nullable ApiEventConfigAuthProviderLambdaAuthorizerConfig lambdaAuthorizerConfig;
    /**
     * @return Configuration for OpenID Connect. Required when `auth_type` is `OPENID_CONNECT`. See OpenID Connect Config below.
     * 
     */
    private @Nullable ApiEventConfigAuthProviderOpenidConnectConfig openidConnectConfig;

    private ApiEventConfigAuthProvider() {}
    /**
     * @return Type of authentication provider. Valid values: `AMAZON_COGNITO_USER_POOLS`, `AWS_LAMBDA`, `OPENID_CONNECT`, `API_KEY`.
     * 
     */
    public String authType() {
        return this.authType;
    }
    /**
     * @return Configuration for Cognito user pool authentication. Required when `auth_type` is `AMAZON_COGNITO_USER_POOLS`. See Cognito Config below.
     * 
     */
    public Optional<ApiEventConfigAuthProviderCognitoConfig> cognitoConfig() {
        return Optional.ofNullable(this.cognitoConfig);
    }
    /**
     * @return Configuration for Lambda authorization. Required when `auth_type` is `AWS_LAMBDA`. See Lambda Authorizer Config below.
     * 
     */
    public Optional<ApiEventConfigAuthProviderLambdaAuthorizerConfig> lambdaAuthorizerConfig() {
        return Optional.ofNullable(this.lambdaAuthorizerConfig);
    }
    /**
     * @return Configuration for OpenID Connect. Required when `auth_type` is `OPENID_CONNECT`. See OpenID Connect Config below.
     * 
     */
    public Optional<ApiEventConfigAuthProviderOpenidConnectConfig> openidConnectConfig() {
        return Optional.ofNullable(this.openidConnectConfig);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ApiEventConfigAuthProvider defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String authType;
        private @Nullable ApiEventConfigAuthProviderCognitoConfig cognitoConfig;
        private @Nullable ApiEventConfigAuthProviderLambdaAuthorizerConfig lambdaAuthorizerConfig;
        private @Nullable ApiEventConfigAuthProviderOpenidConnectConfig openidConnectConfig;
        public Builder() {}
        public Builder(ApiEventConfigAuthProvider defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authType = defaults.authType;
    	      this.cognitoConfig = defaults.cognitoConfig;
    	      this.lambdaAuthorizerConfig = defaults.lambdaAuthorizerConfig;
    	      this.openidConnectConfig = defaults.openidConnectConfig;
        }

        @CustomType.Setter
        public Builder authType(String authType) {
            if (authType == null) {
              throw new MissingRequiredPropertyException("ApiEventConfigAuthProvider", "authType");
            }
            this.authType = authType;
            return this;
        }
        @CustomType.Setter
        public Builder cognitoConfig(@Nullable ApiEventConfigAuthProviderCognitoConfig cognitoConfig) {

            this.cognitoConfig = cognitoConfig;
            return this;
        }
        @CustomType.Setter
        public Builder lambdaAuthorizerConfig(@Nullable ApiEventConfigAuthProviderLambdaAuthorizerConfig lambdaAuthorizerConfig) {

            this.lambdaAuthorizerConfig = lambdaAuthorizerConfig;
            return this;
        }
        @CustomType.Setter
        public Builder openidConnectConfig(@Nullable ApiEventConfigAuthProviderOpenidConnectConfig openidConnectConfig) {

            this.openidConnectConfig = openidConnectConfig;
            return this;
        }
        public ApiEventConfigAuthProvider build() {
            final var _resultValue = new ApiEventConfigAuthProvider();
            _resultValue.authType = authType;
            _resultValue.cognitoConfig = cognitoConfig;
            _resultValue.lambdaAuthorizerConfig = lambdaAuthorizerConfig;
            _resultValue.openidConnectConfig = openidConnectConfig;
            return _resultValue;
        }
    }
}
