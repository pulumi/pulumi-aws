// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.backup.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FrameworkControlScopeArgs extends com.pulumi.resources.ResourceArgs {

    public static final FrameworkControlScopeArgs Empty = new FrameworkControlScopeArgs();

    /**
     * The ID of the only AWS resource that you want your control scope to contain. Minimum number of 1 item. Maximum number of 100 items.
     * 
     */
    @Import(name="complianceResourceIds")
    private @Nullable Output<List<String>> complianceResourceIds;

    /**
     * @return The ID of the only AWS resource that you want your control scope to contain. Minimum number of 1 item. Maximum number of 100 items.
     * 
     */
    public Optional<Output<List<String>>> complianceResourceIds() {
        return Optional.ofNullable(this.complianceResourceIds);
    }

    /**
     * Describes whether the control scope includes one or more types of resources, such as EFS or RDS.
     * 
     */
    @Import(name="complianceResourceTypes")
    private @Nullable Output<List<String>> complianceResourceTypes;

    /**
     * @return Describes whether the control scope includes one or more types of resources, such as EFS or RDS.
     * 
     */
    public Optional<Output<List<String>>> complianceResourceTypes() {
        return Optional.ofNullable(this.complianceResourceTypes);
    }

    /**
     * Metadata that you can assign to help organize the frameworks you create. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Metadata that you can assign to help organize the frameworks you create. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private FrameworkControlScopeArgs() {}

    private FrameworkControlScopeArgs(FrameworkControlScopeArgs $) {
        this.complianceResourceIds = $.complianceResourceIds;
        this.complianceResourceTypes = $.complianceResourceTypes;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FrameworkControlScopeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FrameworkControlScopeArgs $;

        public Builder() {
            $ = new FrameworkControlScopeArgs();
        }

        public Builder(FrameworkControlScopeArgs defaults) {
            $ = new FrameworkControlScopeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param complianceResourceIds The ID of the only AWS resource that you want your control scope to contain. Minimum number of 1 item. Maximum number of 100 items.
         * 
         * @return builder
         * 
         */
        public Builder complianceResourceIds(@Nullable Output<List<String>> complianceResourceIds) {
            $.complianceResourceIds = complianceResourceIds;
            return this;
        }

        /**
         * @param complianceResourceIds The ID of the only AWS resource that you want your control scope to contain. Minimum number of 1 item. Maximum number of 100 items.
         * 
         * @return builder
         * 
         */
        public Builder complianceResourceIds(List<String> complianceResourceIds) {
            return complianceResourceIds(Output.of(complianceResourceIds));
        }

        /**
         * @param complianceResourceIds The ID of the only AWS resource that you want your control scope to contain. Minimum number of 1 item. Maximum number of 100 items.
         * 
         * @return builder
         * 
         */
        public Builder complianceResourceIds(String... complianceResourceIds) {
            return complianceResourceIds(List.of(complianceResourceIds));
        }

        /**
         * @param complianceResourceTypes Describes whether the control scope includes one or more types of resources, such as EFS or RDS.
         * 
         * @return builder
         * 
         */
        public Builder complianceResourceTypes(@Nullable Output<List<String>> complianceResourceTypes) {
            $.complianceResourceTypes = complianceResourceTypes;
            return this;
        }

        /**
         * @param complianceResourceTypes Describes whether the control scope includes one or more types of resources, such as EFS or RDS.
         * 
         * @return builder
         * 
         */
        public Builder complianceResourceTypes(List<String> complianceResourceTypes) {
            return complianceResourceTypes(Output.of(complianceResourceTypes));
        }

        /**
         * @param complianceResourceTypes Describes whether the control scope includes one or more types of resources, such as EFS or RDS.
         * 
         * @return builder
         * 
         */
        public Builder complianceResourceTypes(String... complianceResourceTypes) {
            return complianceResourceTypes(List.of(complianceResourceTypes));
        }

        /**
         * @param tags Metadata that you can assign to help organize the frameworks you create. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Metadata that you can assign to help organize the frameworks you create. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public FrameworkControlScopeArgs build() {
            return $;
        }
    }

}
