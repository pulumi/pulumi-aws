// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.transfer.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConnectorAs2ConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConnectorAs2ConfigArgs Empty = new ConnectorAs2ConfigArgs();

    @Import(name="compression", required=true)
    private Output<String> compression;

    public Output<String> compression() {
        return this.compression;
    }

    @Import(name="encryptionAlgorithm", required=true)
    private Output<String> encryptionAlgorithm;

    public Output<String> encryptionAlgorithm() {
        return this.encryptionAlgorithm;
    }

    @Import(name="localProfileId", required=true)
    private Output<String> localProfileId;

    public Output<String> localProfileId() {
        return this.localProfileId;
    }

    @Import(name="mdnResponse", required=true)
    private Output<String> mdnResponse;

    public Output<String> mdnResponse() {
        return this.mdnResponse;
    }

    @Import(name="mdnSigningAlgorithm")
    private @Nullable Output<String> mdnSigningAlgorithm;

    public Optional<Output<String>> mdnSigningAlgorithm() {
        return Optional.ofNullable(this.mdnSigningAlgorithm);
    }

    @Import(name="messageSubject")
    private @Nullable Output<String> messageSubject;

    public Optional<Output<String>> messageSubject() {
        return Optional.ofNullable(this.messageSubject);
    }

    @Import(name="partnerProfileId", required=true)
    private Output<String> partnerProfileId;

    public Output<String> partnerProfileId() {
        return this.partnerProfileId;
    }

    @Import(name="signingAlgorithm", required=true)
    private Output<String> signingAlgorithm;

    public Output<String> signingAlgorithm() {
        return this.signingAlgorithm;
    }

    private ConnectorAs2ConfigArgs() {}

    private ConnectorAs2ConfigArgs(ConnectorAs2ConfigArgs $) {
        this.compression = $.compression;
        this.encryptionAlgorithm = $.encryptionAlgorithm;
        this.localProfileId = $.localProfileId;
        this.mdnResponse = $.mdnResponse;
        this.mdnSigningAlgorithm = $.mdnSigningAlgorithm;
        this.messageSubject = $.messageSubject;
        this.partnerProfileId = $.partnerProfileId;
        this.signingAlgorithm = $.signingAlgorithm;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectorAs2ConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectorAs2ConfigArgs $;

        public Builder() {
            $ = new ConnectorAs2ConfigArgs();
        }

        public Builder(ConnectorAs2ConfigArgs defaults) {
            $ = new ConnectorAs2ConfigArgs(Objects.requireNonNull(defaults));
        }

        public Builder compression(Output<String> compression) {
            $.compression = compression;
            return this;
        }

        public Builder compression(String compression) {
            return compression(Output.of(compression));
        }

        public Builder encryptionAlgorithm(Output<String> encryptionAlgorithm) {
            $.encryptionAlgorithm = encryptionAlgorithm;
            return this;
        }

        public Builder encryptionAlgorithm(String encryptionAlgorithm) {
            return encryptionAlgorithm(Output.of(encryptionAlgorithm));
        }

        public Builder localProfileId(Output<String> localProfileId) {
            $.localProfileId = localProfileId;
            return this;
        }

        public Builder localProfileId(String localProfileId) {
            return localProfileId(Output.of(localProfileId));
        }

        public Builder mdnResponse(Output<String> mdnResponse) {
            $.mdnResponse = mdnResponse;
            return this;
        }

        public Builder mdnResponse(String mdnResponse) {
            return mdnResponse(Output.of(mdnResponse));
        }

        public Builder mdnSigningAlgorithm(@Nullable Output<String> mdnSigningAlgorithm) {
            $.mdnSigningAlgorithm = mdnSigningAlgorithm;
            return this;
        }

        public Builder mdnSigningAlgorithm(String mdnSigningAlgorithm) {
            return mdnSigningAlgorithm(Output.of(mdnSigningAlgorithm));
        }

        public Builder messageSubject(@Nullable Output<String> messageSubject) {
            $.messageSubject = messageSubject;
            return this;
        }

        public Builder messageSubject(String messageSubject) {
            return messageSubject(Output.of(messageSubject));
        }

        public Builder partnerProfileId(Output<String> partnerProfileId) {
            $.partnerProfileId = partnerProfileId;
            return this;
        }

        public Builder partnerProfileId(String partnerProfileId) {
            return partnerProfileId(Output.of(partnerProfileId));
        }

        public Builder signingAlgorithm(Output<String> signingAlgorithm) {
            $.signingAlgorithm = signingAlgorithm;
            return this;
        }

        public Builder signingAlgorithm(String signingAlgorithm) {
            return signingAlgorithm(Output.of(signingAlgorithm));
        }

        public ConnectorAs2ConfigArgs build() {
            if ($.compression == null) {
                throw new MissingRequiredPropertyException("ConnectorAs2ConfigArgs", "compression");
            }
            if ($.encryptionAlgorithm == null) {
                throw new MissingRequiredPropertyException("ConnectorAs2ConfigArgs", "encryptionAlgorithm");
            }
            if ($.localProfileId == null) {
                throw new MissingRequiredPropertyException("ConnectorAs2ConfigArgs", "localProfileId");
            }
            if ($.mdnResponse == null) {
                throw new MissingRequiredPropertyException("ConnectorAs2ConfigArgs", "mdnResponse");
            }
            if ($.partnerProfileId == null) {
                throw new MissingRequiredPropertyException("ConnectorAs2ConfigArgs", "partnerProfileId");
            }
            if ($.signingAlgorithm == null) {
                throw new MissingRequiredPropertyException("ConnectorAs2ConfigArgs", "signingAlgorithm");
            }
            return $;
        }
    }

}
