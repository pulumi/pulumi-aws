// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.s3.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetObjectResult {
    private String body;
    private String bucket;
    private Boolean bucketKeyEnabled;
    private String cacheControl;
    private String contentDisposition;
    private String contentEncoding;
    private String contentLanguage;
    private Integer contentLength;
    private String contentType;
    private String etag;
    private String expiration;
    private String expires;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String key;
    private String lastModified;
    private Map<String,String> metadata;
    private String objectLockLegalHoldStatus;
    private String objectLockMode;
    private String objectLockRetainUntilDate;
    private @Nullable String range;
    private String serverSideEncryption;
    private String sseKmsKeyId;
    private String storageClass;
    private Map<String,String> tags;
    private String versionId;
    private String websiteRedirectLocation;

    private GetObjectResult() {}
    public String body() {
        return this.body;
    }
    public String bucket() {
        return this.bucket;
    }
    public Boolean bucketKeyEnabled() {
        return this.bucketKeyEnabled;
    }
    public String cacheControl() {
        return this.cacheControl;
    }
    public String contentDisposition() {
        return this.contentDisposition;
    }
    public String contentEncoding() {
        return this.contentEncoding;
    }
    public String contentLanguage() {
        return this.contentLanguage;
    }
    public Integer contentLength() {
        return this.contentLength;
    }
    public String contentType() {
        return this.contentType;
    }
    public String etag() {
        return this.etag;
    }
    public String expiration() {
        return this.expiration;
    }
    public String expires() {
        return this.expires;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String key() {
        return this.key;
    }
    public String lastModified() {
        return this.lastModified;
    }
    public Map<String,String> metadata() {
        return this.metadata;
    }
    public String objectLockLegalHoldStatus() {
        return this.objectLockLegalHoldStatus;
    }
    public String objectLockMode() {
        return this.objectLockMode;
    }
    public String objectLockRetainUntilDate() {
        return this.objectLockRetainUntilDate;
    }
    public Optional<String> range() {
        return Optional.ofNullable(this.range);
    }
    public String serverSideEncryption() {
        return this.serverSideEncryption;
    }
    public String sseKmsKeyId() {
        return this.sseKmsKeyId;
    }
    public String storageClass() {
        return this.storageClass;
    }
    public Map<String,String> tags() {
        return this.tags;
    }
    public String versionId() {
        return this.versionId;
    }
    public String websiteRedirectLocation() {
        return this.websiteRedirectLocation;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetObjectResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String body;
        private String bucket;
        private Boolean bucketKeyEnabled;
        private String cacheControl;
        private String contentDisposition;
        private String contentEncoding;
        private String contentLanguage;
        private Integer contentLength;
        private String contentType;
        private String etag;
        private String expiration;
        private String expires;
        private String id;
        private String key;
        private String lastModified;
        private Map<String,String> metadata;
        private String objectLockLegalHoldStatus;
        private String objectLockMode;
        private String objectLockRetainUntilDate;
        private @Nullable String range;
        private String serverSideEncryption;
        private String sseKmsKeyId;
        private String storageClass;
        private Map<String,String> tags;
        private String versionId;
        private String websiteRedirectLocation;
        public Builder() {}
        public Builder(GetObjectResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.body = defaults.body;
    	      this.bucket = defaults.bucket;
    	      this.bucketKeyEnabled = defaults.bucketKeyEnabled;
    	      this.cacheControl = defaults.cacheControl;
    	      this.contentDisposition = defaults.contentDisposition;
    	      this.contentEncoding = defaults.contentEncoding;
    	      this.contentLanguage = defaults.contentLanguage;
    	      this.contentLength = defaults.contentLength;
    	      this.contentType = defaults.contentType;
    	      this.etag = defaults.etag;
    	      this.expiration = defaults.expiration;
    	      this.expires = defaults.expires;
    	      this.id = defaults.id;
    	      this.key = defaults.key;
    	      this.lastModified = defaults.lastModified;
    	      this.metadata = defaults.metadata;
    	      this.objectLockLegalHoldStatus = defaults.objectLockLegalHoldStatus;
    	      this.objectLockMode = defaults.objectLockMode;
    	      this.objectLockRetainUntilDate = defaults.objectLockRetainUntilDate;
    	      this.range = defaults.range;
    	      this.serverSideEncryption = defaults.serverSideEncryption;
    	      this.sseKmsKeyId = defaults.sseKmsKeyId;
    	      this.storageClass = defaults.storageClass;
    	      this.tags = defaults.tags;
    	      this.versionId = defaults.versionId;
    	      this.websiteRedirectLocation = defaults.websiteRedirectLocation;
        }

        @CustomType.Setter
        public Builder body(String body) {
            this.body = Objects.requireNonNull(body);
            return this;
        }
        @CustomType.Setter
        public Builder bucket(String bucket) {
            this.bucket = Objects.requireNonNull(bucket);
            return this;
        }
        @CustomType.Setter
        public Builder bucketKeyEnabled(Boolean bucketKeyEnabled) {
            this.bucketKeyEnabled = Objects.requireNonNull(bucketKeyEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder cacheControl(String cacheControl) {
            this.cacheControl = Objects.requireNonNull(cacheControl);
            return this;
        }
        @CustomType.Setter
        public Builder contentDisposition(String contentDisposition) {
            this.contentDisposition = Objects.requireNonNull(contentDisposition);
            return this;
        }
        @CustomType.Setter
        public Builder contentEncoding(String contentEncoding) {
            this.contentEncoding = Objects.requireNonNull(contentEncoding);
            return this;
        }
        @CustomType.Setter
        public Builder contentLanguage(String contentLanguage) {
            this.contentLanguage = Objects.requireNonNull(contentLanguage);
            return this;
        }
        @CustomType.Setter
        public Builder contentLength(Integer contentLength) {
            this.contentLength = Objects.requireNonNull(contentLength);
            return this;
        }
        @CustomType.Setter
        public Builder contentType(String contentType) {
            this.contentType = Objects.requireNonNull(contentType);
            return this;
        }
        @CustomType.Setter
        public Builder etag(String etag) {
            this.etag = Objects.requireNonNull(etag);
            return this;
        }
        @CustomType.Setter
        public Builder expiration(String expiration) {
            this.expiration = Objects.requireNonNull(expiration);
            return this;
        }
        @CustomType.Setter
        public Builder expires(String expires) {
            this.expires = Objects.requireNonNull(expires);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder key(String key) {
            this.key = Objects.requireNonNull(key);
            return this;
        }
        @CustomType.Setter
        public Builder lastModified(String lastModified) {
            this.lastModified = Objects.requireNonNull(lastModified);
            return this;
        }
        @CustomType.Setter
        public Builder metadata(Map<String,String> metadata) {
            this.metadata = Objects.requireNonNull(metadata);
            return this;
        }
        @CustomType.Setter
        public Builder objectLockLegalHoldStatus(String objectLockLegalHoldStatus) {
            this.objectLockLegalHoldStatus = Objects.requireNonNull(objectLockLegalHoldStatus);
            return this;
        }
        @CustomType.Setter
        public Builder objectLockMode(String objectLockMode) {
            this.objectLockMode = Objects.requireNonNull(objectLockMode);
            return this;
        }
        @CustomType.Setter
        public Builder objectLockRetainUntilDate(String objectLockRetainUntilDate) {
            this.objectLockRetainUntilDate = Objects.requireNonNull(objectLockRetainUntilDate);
            return this;
        }
        @CustomType.Setter
        public Builder range(@Nullable String range) {
            this.range = range;
            return this;
        }
        @CustomType.Setter
        public Builder serverSideEncryption(String serverSideEncryption) {
            this.serverSideEncryption = Objects.requireNonNull(serverSideEncryption);
            return this;
        }
        @CustomType.Setter
        public Builder sseKmsKeyId(String sseKmsKeyId) {
            this.sseKmsKeyId = Objects.requireNonNull(sseKmsKeyId);
            return this;
        }
        @CustomType.Setter
        public Builder storageClass(String storageClass) {
            this.storageClass = Objects.requireNonNull(storageClass);
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        @CustomType.Setter
        public Builder versionId(String versionId) {
            this.versionId = Objects.requireNonNull(versionId);
            return this;
        }
        @CustomType.Setter
        public Builder websiteRedirectLocation(String websiteRedirectLocation) {
            this.websiteRedirectLocation = Objects.requireNonNull(websiteRedirectLocation);
            return this;
        }
        public GetObjectResult build() {
            final var o = new GetObjectResult();
            o.body = body;
            o.bucket = bucket;
            o.bucketKeyEnabled = bucketKeyEnabled;
            o.cacheControl = cacheControl;
            o.contentDisposition = contentDisposition;
            o.contentEncoding = contentEncoding;
            o.contentLanguage = contentLanguage;
            o.contentLength = contentLength;
            o.contentType = contentType;
            o.etag = etag;
            o.expiration = expiration;
            o.expires = expires;
            o.id = id;
            o.key = key;
            o.lastModified = lastModified;
            o.metadata = metadata;
            o.objectLockLegalHoldStatus = objectLockLegalHoldStatus;
            o.objectLockMode = objectLockMode;
            o.objectLockRetainUntilDate = objectLockRetainUntilDate;
            o.range = range;
            o.serverSideEncryption = serverSideEncryption;
            o.sseKmsKeyId = sseKmsKeyId;
            o.storageClass = storageClass;
            o.tags = tags;
            o.versionId = versionId;
            o.websiteRedirectLocation = websiteRedirectLocation;
            return o;
        }
    }
}
