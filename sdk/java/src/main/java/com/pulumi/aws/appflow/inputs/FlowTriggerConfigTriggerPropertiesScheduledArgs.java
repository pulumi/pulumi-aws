// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.appflow.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FlowTriggerConfigTriggerPropertiesScheduledArgs extends com.pulumi.resources.ResourceArgs {

    public static final FlowTriggerConfigTriggerPropertiesScheduledArgs Empty = new FlowTriggerConfigTriggerPropertiesScheduledArgs();

    /**
     * Whether a scheduled flow has an incremental data transfer or a complete data transfer for each flow run. Valid values are `Incremental` and `Complete`.
     * 
     */
    @Import(name="dataPullMode")
    private @Nullable Output<String> dataPullMode;

    /**
     * @return Whether a scheduled flow has an incremental data transfer or a complete data transfer for each flow run. Valid values are `Incremental` and `Complete`.
     * 
     */
    public Optional<Output<String>> dataPullMode() {
        return Optional.ofNullable(this.dataPullMode);
    }

    /**
     * Date range for the records to import from the connector in the first flow run. Must be a valid RFC3339 timestamp.
     * 
     */
    @Import(name="firstExecutionFrom")
    private @Nullable Output<String> firstExecutionFrom;

    /**
     * @return Date range for the records to import from the connector in the first flow run. Must be a valid RFC3339 timestamp.
     * 
     */
    public Optional<Output<String>> firstExecutionFrom() {
        return Optional.ofNullable(this.firstExecutionFrom);
    }

    /**
     * Scheduled end time for a schedule-triggered flow. Must be a valid RFC3339 timestamp.
     * 
     */
    @Import(name="scheduleEndTime")
    private @Nullable Output<String> scheduleEndTime;

    /**
     * @return Scheduled end time for a schedule-triggered flow. Must be a valid RFC3339 timestamp.
     * 
     */
    public Optional<Output<String>> scheduleEndTime() {
        return Optional.ofNullable(this.scheduleEndTime);
    }

    /**
     * Scheduling expression that determines the rate at which the schedule will run, for example `rate(5minutes)`.
     * 
     */
    @Import(name="scheduleExpression", required=true)
    private Output<String> scheduleExpression;

    /**
     * @return Scheduling expression that determines the rate at which the schedule will run, for example `rate(5minutes)`.
     * 
     */
    public Output<String> scheduleExpression() {
        return this.scheduleExpression;
    }

    /**
     * Optional offset that is added to the time interval for a schedule-triggered flow. Maximum value of 36000.
     * 
     */
    @Import(name="scheduleOffset")
    private @Nullable Output<Integer> scheduleOffset;

    /**
     * @return Optional offset that is added to the time interval for a schedule-triggered flow. Maximum value of 36000.
     * 
     */
    public Optional<Output<Integer>> scheduleOffset() {
        return Optional.ofNullable(this.scheduleOffset);
    }

    /**
     * Scheduled start time for a schedule-triggered flow. Must be a valid RFC3339 timestamp.
     * 
     */
    @Import(name="scheduleStartTime")
    private @Nullable Output<String> scheduleStartTime;

    /**
     * @return Scheduled start time for a schedule-triggered flow. Must be a valid RFC3339 timestamp.
     * 
     */
    public Optional<Output<String>> scheduleStartTime() {
        return Optional.ofNullable(this.scheduleStartTime);
    }

    /**
     * Time zone used when referring to the date and time of a scheduled-triggered flow, such as `America/New_York`.
     * 
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.appflow.Flow;
     * import com.pulumi.aws.appflow.FlowArgs;
     * import com.pulumi.aws.appflow.inputs.FlowTriggerConfigArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var example = new Flow(&#34;example&#34;, FlowArgs.builder()        
     *             .triggerConfig(FlowTriggerConfigArgs.builder()
     *                 .scheduled(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    @Import(name="timezone")
    private @Nullable Output<String> timezone;

    /**
     * @return Time zone used when referring to the date and time of a scheduled-triggered flow, such as `America/New_York`.
     * 
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.appflow.Flow;
     * import com.pulumi.aws.appflow.FlowArgs;
     * import com.pulumi.aws.appflow.inputs.FlowTriggerConfigArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var example = new Flow(&#34;example&#34;, FlowArgs.builder()        
     *             .triggerConfig(FlowTriggerConfigArgs.builder()
     *                 .scheduled(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public Optional<Output<String>> timezone() {
        return Optional.ofNullable(this.timezone);
    }

    private FlowTriggerConfigTriggerPropertiesScheduledArgs() {}

    private FlowTriggerConfigTriggerPropertiesScheduledArgs(FlowTriggerConfigTriggerPropertiesScheduledArgs $) {
        this.dataPullMode = $.dataPullMode;
        this.firstExecutionFrom = $.firstExecutionFrom;
        this.scheduleEndTime = $.scheduleEndTime;
        this.scheduleExpression = $.scheduleExpression;
        this.scheduleOffset = $.scheduleOffset;
        this.scheduleStartTime = $.scheduleStartTime;
        this.timezone = $.timezone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FlowTriggerConfigTriggerPropertiesScheduledArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FlowTriggerConfigTriggerPropertiesScheduledArgs $;

        public Builder() {
            $ = new FlowTriggerConfigTriggerPropertiesScheduledArgs();
        }

        public Builder(FlowTriggerConfigTriggerPropertiesScheduledArgs defaults) {
            $ = new FlowTriggerConfigTriggerPropertiesScheduledArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dataPullMode Whether a scheduled flow has an incremental data transfer or a complete data transfer for each flow run. Valid values are `Incremental` and `Complete`.
         * 
         * @return builder
         * 
         */
        public Builder dataPullMode(@Nullable Output<String> dataPullMode) {
            $.dataPullMode = dataPullMode;
            return this;
        }

        /**
         * @param dataPullMode Whether a scheduled flow has an incremental data transfer or a complete data transfer for each flow run. Valid values are `Incremental` and `Complete`.
         * 
         * @return builder
         * 
         */
        public Builder dataPullMode(String dataPullMode) {
            return dataPullMode(Output.of(dataPullMode));
        }

        /**
         * @param firstExecutionFrom Date range for the records to import from the connector in the first flow run. Must be a valid RFC3339 timestamp.
         * 
         * @return builder
         * 
         */
        public Builder firstExecutionFrom(@Nullable Output<String> firstExecutionFrom) {
            $.firstExecutionFrom = firstExecutionFrom;
            return this;
        }

        /**
         * @param firstExecutionFrom Date range for the records to import from the connector in the first flow run. Must be a valid RFC3339 timestamp.
         * 
         * @return builder
         * 
         */
        public Builder firstExecutionFrom(String firstExecutionFrom) {
            return firstExecutionFrom(Output.of(firstExecutionFrom));
        }

        /**
         * @param scheduleEndTime Scheduled end time for a schedule-triggered flow. Must be a valid RFC3339 timestamp.
         * 
         * @return builder
         * 
         */
        public Builder scheduleEndTime(@Nullable Output<String> scheduleEndTime) {
            $.scheduleEndTime = scheduleEndTime;
            return this;
        }

        /**
         * @param scheduleEndTime Scheduled end time for a schedule-triggered flow. Must be a valid RFC3339 timestamp.
         * 
         * @return builder
         * 
         */
        public Builder scheduleEndTime(String scheduleEndTime) {
            return scheduleEndTime(Output.of(scheduleEndTime));
        }

        /**
         * @param scheduleExpression Scheduling expression that determines the rate at which the schedule will run, for example `rate(5minutes)`.
         * 
         * @return builder
         * 
         */
        public Builder scheduleExpression(Output<String> scheduleExpression) {
            $.scheduleExpression = scheduleExpression;
            return this;
        }

        /**
         * @param scheduleExpression Scheduling expression that determines the rate at which the schedule will run, for example `rate(5minutes)`.
         * 
         * @return builder
         * 
         */
        public Builder scheduleExpression(String scheduleExpression) {
            return scheduleExpression(Output.of(scheduleExpression));
        }

        /**
         * @param scheduleOffset Optional offset that is added to the time interval for a schedule-triggered flow. Maximum value of 36000.
         * 
         * @return builder
         * 
         */
        public Builder scheduleOffset(@Nullable Output<Integer> scheduleOffset) {
            $.scheduleOffset = scheduleOffset;
            return this;
        }

        /**
         * @param scheduleOffset Optional offset that is added to the time interval for a schedule-triggered flow. Maximum value of 36000.
         * 
         * @return builder
         * 
         */
        public Builder scheduleOffset(Integer scheduleOffset) {
            return scheduleOffset(Output.of(scheduleOffset));
        }

        /**
         * @param scheduleStartTime Scheduled start time for a schedule-triggered flow. Must be a valid RFC3339 timestamp.
         * 
         * @return builder
         * 
         */
        public Builder scheduleStartTime(@Nullable Output<String> scheduleStartTime) {
            $.scheduleStartTime = scheduleStartTime;
            return this;
        }

        /**
         * @param scheduleStartTime Scheduled start time for a schedule-triggered flow. Must be a valid RFC3339 timestamp.
         * 
         * @return builder
         * 
         */
        public Builder scheduleStartTime(String scheduleStartTime) {
            return scheduleStartTime(Output.of(scheduleStartTime));
        }

        /**
         * @param timezone Time zone used when referring to the date and time of a scheduled-triggered flow, such as `America/New_York`.
         * 
         * ```java
         * package generated_program;
         * 
         * import com.pulumi.Context;
         * import com.pulumi.Pulumi;
         * import com.pulumi.core.Output;
         * import com.pulumi.aws.appflow.Flow;
         * import com.pulumi.aws.appflow.FlowArgs;
         * import com.pulumi.aws.appflow.inputs.FlowTriggerConfigArgs;
         * import java.util.List;
         * import java.util.ArrayList;
         * import java.util.Map;
         * import java.io.File;
         * import java.nio.file.Files;
         * import java.nio.file.Paths;
         * 
         * public class App {
         *     public static void main(String[] args) {
         *         Pulumi.run(App::stack);
         *     }
         * 
         *     public static void stack(Context ctx) {
         *         var example = new Flow(&#34;example&#34;, FlowArgs.builder()        
         *             .triggerConfig(FlowTriggerConfigArgs.builder()
         *                 .scheduled(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))
         *                 .build())
         *             .build());
         * 
         *     }
         * }
         * ```
         * 
         * @return builder
         * 
         */
        public Builder timezone(@Nullable Output<String> timezone) {
            $.timezone = timezone;
            return this;
        }

        /**
         * @param timezone Time zone used when referring to the date and time of a scheduled-triggered flow, such as `America/New_York`.
         * 
         * ```java
         * package generated_program;
         * 
         * import com.pulumi.Context;
         * import com.pulumi.Pulumi;
         * import com.pulumi.core.Output;
         * import com.pulumi.aws.appflow.Flow;
         * import com.pulumi.aws.appflow.FlowArgs;
         * import com.pulumi.aws.appflow.inputs.FlowTriggerConfigArgs;
         * import java.util.List;
         * import java.util.ArrayList;
         * import java.util.Map;
         * import java.io.File;
         * import java.nio.file.Files;
         * import java.nio.file.Paths;
         * 
         * public class App {
         *     public static void main(String[] args) {
         *         Pulumi.run(App::stack);
         *     }
         * 
         *     public static void stack(Context ctx) {
         *         var example = new Flow(&#34;example&#34;, FlowArgs.builder()        
         *             .triggerConfig(FlowTriggerConfigArgs.builder()
         *                 .scheduled(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))
         *                 .build())
         *             .build());
         * 
         *     }
         * }
         * ```
         * 
         * @return builder
         * 
         */
        public Builder timezone(String timezone) {
            return timezone(Output.of(timezone));
        }

        public FlowTriggerConfigTriggerPropertiesScheduledArgs build() {
            $.scheduleExpression = Objects.requireNonNull($.scheduleExpression, "expected parameter 'scheduleExpression' to be non-null");
            return $;
        }
    }

}
