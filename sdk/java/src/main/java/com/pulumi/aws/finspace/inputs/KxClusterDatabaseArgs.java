// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.finspace.inputs;

import com.pulumi.aws.finspace.inputs.KxClusterDatabaseCacheConfigurationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class KxClusterDatabaseArgs extends com.pulumi.resources.ResourceArgs {

    public static final KxClusterDatabaseArgs Empty = new KxClusterDatabaseArgs();

    /**
     * Configuration details for the disk cache to increase performance reading from a KX database mounted to the cluster. See cache_configurations.
     * 
     */
    @Import(name="cacheConfigurations", required=true)
    private Output<List<KxClusterDatabaseCacheConfigurationArgs>> cacheConfigurations;

    /**
     * @return Configuration details for the disk cache to increase performance reading from a KX database mounted to the cluster. See cache_configurations.
     * 
     */
    public Output<List<KxClusterDatabaseCacheConfigurationArgs>> cacheConfigurations() {
        return this.cacheConfigurations;
    }

    /**
     * A unique identifier of the changeset that is associated with the cluster.
     * 
     */
    @Import(name="changesetId")
    private @Nullable Output<String> changesetId;

    /**
     * @return A unique identifier of the changeset that is associated with the cluster.
     * 
     */
    public Optional<Output<String>> changesetId() {
        return Optional.ofNullable(this.changesetId);
    }

    /**
     * Name of the KX database.
     * 
     */
    @Import(name="databaseName", required=true)
    private Output<String> databaseName;

    /**
     * @return Name of the KX database.
     * 
     */
    public Output<String> databaseName() {
        return this.databaseName;
    }

    private KxClusterDatabaseArgs() {}

    private KxClusterDatabaseArgs(KxClusterDatabaseArgs $) {
        this.cacheConfigurations = $.cacheConfigurations;
        this.changesetId = $.changesetId;
        this.databaseName = $.databaseName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(KxClusterDatabaseArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private KxClusterDatabaseArgs $;

        public Builder() {
            $ = new KxClusterDatabaseArgs();
        }

        public Builder(KxClusterDatabaseArgs defaults) {
            $ = new KxClusterDatabaseArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cacheConfigurations Configuration details for the disk cache to increase performance reading from a KX database mounted to the cluster. See cache_configurations.
         * 
         * @return builder
         * 
         */
        public Builder cacheConfigurations(Output<List<KxClusterDatabaseCacheConfigurationArgs>> cacheConfigurations) {
            $.cacheConfigurations = cacheConfigurations;
            return this;
        }

        /**
         * @param cacheConfigurations Configuration details for the disk cache to increase performance reading from a KX database mounted to the cluster. See cache_configurations.
         * 
         * @return builder
         * 
         */
        public Builder cacheConfigurations(List<KxClusterDatabaseCacheConfigurationArgs> cacheConfigurations) {
            return cacheConfigurations(Output.of(cacheConfigurations));
        }

        /**
         * @param cacheConfigurations Configuration details for the disk cache to increase performance reading from a KX database mounted to the cluster. See cache_configurations.
         * 
         * @return builder
         * 
         */
        public Builder cacheConfigurations(KxClusterDatabaseCacheConfigurationArgs... cacheConfigurations) {
            return cacheConfigurations(List.of(cacheConfigurations));
        }

        /**
         * @param changesetId A unique identifier of the changeset that is associated with the cluster.
         * 
         * @return builder
         * 
         */
        public Builder changesetId(@Nullable Output<String> changesetId) {
            $.changesetId = changesetId;
            return this;
        }

        /**
         * @param changesetId A unique identifier of the changeset that is associated with the cluster.
         * 
         * @return builder
         * 
         */
        public Builder changesetId(String changesetId) {
            return changesetId(Output.of(changesetId));
        }

        /**
         * @param databaseName Name of the KX database.
         * 
         * @return builder
         * 
         */
        public Builder databaseName(Output<String> databaseName) {
            $.databaseName = databaseName;
            return this;
        }

        /**
         * @param databaseName Name of the KX database.
         * 
         * @return builder
         * 
         */
        public Builder databaseName(String databaseName) {
            return databaseName(Output.of(databaseName));
        }

        public KxClusterDatabaseArgs build() {
            $.cacheConfigurations = Objects.requireNonNull($.cacheConfigurations, "expected parameter 'cacheConfigurations' to be non-null");
            $.databaseName = Objects.requireNonNull($.databaseName, "expected parameter 'databaseName' to be non-null");
            return $;
        }
    }

}
