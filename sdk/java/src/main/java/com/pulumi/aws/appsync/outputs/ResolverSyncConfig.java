// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.appsync.outputs;

import com.pulumi.aws.appsync.outputs.ResolverSyncConfigLambdaConflictHandlerConfig;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ResolverSyncConfig {
    private @Nullable String conflictDetection;
    private @Nullable String conflictHandler;
    private @Nullable ResolverSyncConfigLambdaConflictHandlerConfig lambdaConflictHandlerConfig;

    private ResolverSyncConfig() {}
    public Optional<String> conflictDetection() {
        return Optional.ofNullable(this.conflictDetection);
    }
    public Optional<String> conflictHandler() {
        return Optional.ofNullable(this.conflictHandler);
    }
    public Optional<ResolverSyncConfigLambdaConflictHandlerConfig> lambdaConflictHandlerConfig() {
        return Optional.ofNullable(this.lambdaConflictHandlerConfig);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ResolverSyncConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String conflictDetection;
        private @Nullable String conflictHandler;
        private @Nullable ResolverSyncConfigLambdaConflictHandlerConfig lambdaConflictHandlerConfig;
        public Builder() {}
        public Builder(ResolverSyncConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.conflictDetection = defaults.conflictDetection;
    	      this.conflictHandler = defaults.conflictHandler;
    	      this.lambdaConflictHandlerConfig = defaults.lambdaConflictHandlerConfig;
        }

        @CustomType.Setter
        public Builder conflictDetection(@Nullable String conflictDetection) {
            this.conflictDetection = conflictDetection;
            return this;
        }
        @CustomType.Setter
        public Builder conflictHandler(@Nullable String conflictHandler) {
            this.conflictHandler = conflictHandler;
            return this;
        }
        @CustomType.Setter
        public Builder lambdaConflictHandlerConfig(@Nullable ResolverSyncConfigLambdaConflictHandlerConfig lambdaConflictHandlerConfig) {
            this.lambdaConflictHandlerConfig = lambdaConflictHandlerConfig;
            return this;
        }
        public ResolverSyncConfig build() {
            final var o = new ResolverSyncConfig();
            o.conflictDetection = conflictDetection;
            o.conflictHandler = conflictHandler;
            o.lambdaConflictHandlerConfig = lambdaConflictHandlerConfig;
            return o;
        }
    }
}
