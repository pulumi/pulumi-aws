// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.connect.outputs;

import com.pulumi.aws.connect.outputs.QuickConnectQuickConnectConfigPhoneConfig;
import com.pulumi.aws.connect.outputs.QuickConnectQuickConnectConfigQueueConfig;
import com.pulumi.aws.connect.outputs.QuickConnectQuickConnectConfigUserConfig;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class QuickConnectQuickConnectConfig {
    /**
     * @return Specifies the phone configuration of the Quick Connect. This is required only if `quick_connect_type` is `PHONE_NUMBER`. The `phone_config` block is documented below.
     * 
     */
    private @Nullable List<QuickConnectQuickConnectConfigPhoneConfig> phoneConfigs;
    /**
     * @return Specifies the queue configuration of the Quick Connect. This is required only if `quick_connect_type` is `QUEUE`. The `queue_config` block is documented below.
     * 
     */
    private @Nullable List<QuickConnectQuickConnectConfigQueueConfig> queueConfigs;
    /**
     * @return Specifies the configuration type of the quick connect. valid values are `PHONE_NUMBER`, `QUEUE`, `USER`.
     * 
     */
    private String quickConnectType;
    /**
     * @return Specifies the user configuration of the Quick Connect. This is required only if `quick_connect_type` is `USER`. The `user_config` block is documented below.
     * 
     */
    private @Nullable List<QuickConnectQuickConnectConfigUserConfig> userConfigs;

    private QuickConnectQuickConnectConfig() {}
    /**
     * @return Specifies the phone configuration of the Quick Connect. This is required only if `quick_connect_type` is `PHONE_NUMBER`. The `phone_config` block is documented below.
     * 
     */
    public List<QuickConnectQuickConnectConfigPhoneConfig> phoneConfigs() {
        return this.phoneConfigs == null ? List.of() : this.phoneConfigs;
    }
    /**
     * @return Specifies the queue configuration of the Quick Connect. This is required only if `quick_connect_type` is `QUEUE`. The `queue_config` block is documented below.
     * 
     */
    public List<QuickConnectQuickConnectConfigQueueConfig> queueConfigs() {
        return this.queueConfigs == null ? List.of() : this.queueConfigs;
    }
    /**
     * @return Specifies the configuration type of the quick connect. valid values are `PHONE_NUMBER`, `QUEUE`, `USER`.
     * 
     */
    public String quickConnectType() {
        return this.quickConnectType;
    }
    /**
     * @return Specifies the user configuration of the Quick Connect. This is required only if `quick_connect_type` is `USER`. The `user_config` block is documented below.
     * 
     */
    public List<QuickConnectQuickConnectConfigUserConfig> userConfigs() {
        return this.userConfigs == null ? List.of() : this.userConfigs;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(QuickConnectQuickConnectConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<QuickConnectQuickConnectConfigPhoneConfig> phoneConfigs;
        private @Nullable List<QuickConnectQuickConnectConfigQueueConfig> queueConfigs;
        private String quickConnectType;
        private @Nullable List<QuickConnectQuickConnectConfigUserConfig> userConfigs;
        public Builder() {}
        public Builder(QuickConnectQuickConnectConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.phoneConfigs = defaults.phoneConfigs;
    	      this.queueConfigs = defaults.queueConfigs;
    	      this.quickConnectType = defaults.quickConnectType;
    	      this.userConfigs = defaults.userConfigs;
        }

        @CustomType.Setter
        public Builder phoneConfigs(@Nullable List<QuickConnectQuickConnectConfigPhoneConfig> phoneConfigs) {
            this.phoneConfigs = phoneConfigs;
            return this;
        }
        public Builder phoneConfigs(QuickConnectQuickConnectConfigPhoneConfig... phoneConfigs) {
            return phoneConfigs(List.of(phoneConfigs));
        }
        @CustomType.Setter
        public Builder queueConfigs(@Nullable List<QuickConnectQuickConnectConfigQueueConfig> queueConfigs) {
            this.queueConfigs = queueConfigs;
            return this;
        }
        public Builder queueConfigs(QuickConnectQuickConnectConfigQueueConfig... queueConfigs) {
            return queueConfigs(List.of(queueConfigs));
        }
        @CustomType.Setter
        public Builder quickConnectType(String quickConnectType) {
            this.quickConnectType = Objects.requireNonNull(quickConnectType);
            return this;
        }
        @CustomType.Setter
        public Builder userConfigs(@Nullable List<QuickConnectQuickConnectConfigUserConfig> userConfigs) {
            this.userConfigs = userConfigs;
            return this;
        }
        public Builder userConfigs(QuickConnectQuickConnectConfigUserConfig... userConfigs) {
            return userConfigs(List.of(userConfigs));
        }
        public QuickConnectQuickConnectConfig build() {
            final var _resultValue = new QuickConnectQuickConnectConfig();
            _resultValue.phoneConfigs = phoneConfigs;
            _resultValue.queueConfigs = queueConfigs;
            _resultValue.quickConnectType = quickConnectType;
            _resultValue.userConfigs = userConfigs;
            return _resultValue;
        }
    }
}
