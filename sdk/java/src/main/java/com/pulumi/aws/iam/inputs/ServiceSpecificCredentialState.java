// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.iam.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceSpecificCredentialState extends com.pulumi.resources.ResourceArgs {

    public static final ServiceSpecificCredentialState Empty = new ServiceSpecificCredentialState();

    /**
     * The date and time, in RFC3339 format, when the service-specific credential was created.
     * 
     */
    @Import(name="createDate")
    private @Nullable Output<String> createDate;

    /**
     * @return The date and time, in RFC3339 format, when the service-specific credential was created.
     * 
     */
    public Optional<Output<String>> createDate() {
        return Optional.ofNullable(this.createDate);
    }

    /**
     * The number of days until the service specific credential expires. This field is only valid for Bedrock API keys and must be between 1 and 36600 (approximately 100 years). When not specified, the credential will not expire.
     * 
     */
    @Import(name="credentialAgeDays")
    private @Nullable Output<Integer> credentialAgeDays;

    /**
     * @return The number of days until the service specific credential expires. This field is only valid for Bedrock API keys and must be between 1 and 36600 (approximately 100 years). When not specified, the credential will not expire.
     * 
     */
    public Optional<Output<Integer>> credentialAgeDays() {
        return Optional.ofNullable(this.credentialAgeDays);
    }

    /**
     * The date and time, in RFC3339 format, when the service specific credential expires. This field is only present for Bedrock API keys that were created with an expiration period.
     * 
     */
    @Import(name="expirationDate")
    private @Nullable Output<String> expirationDate;

    /**
     * @return The date and time, in RFC3339 format, when the service specific credential expires. This field is only present for Bedrock API keys that were created with an expiration period.
     * 
     */
    public Optional<Output<String>> expirationDate() {
        return Optional.ofNullable(this.expirationDate);
    }

    /**
     * For Bedrock API keys, this is the public portion of the credential that includes the IAM user name and a suffix containing version and creation information.
     * 
     */
    @Import(name="serviceCredentialAlias")
    private @Nullable Output<String> serviceCredentialAlias;

    /**
     * @return For Bedrock API keys, this is the public portion of the credential that includes the IAM user name and a suffix containing version and creation information.
     * 
     */
    public Optional<Output<String>> serviceCredentialAlias() {
        return Optional.ofNullable(this.serviceCredentialAlias);
    }

    /**
     * For Bedrock API keys, this is the secret portion of the credential that should be used to authenticate API calls. This value is only available when the credential is created.
     * 
     */
    @Import(name="serviceCredentialSecret")
    private @Nullable Output<String> serviceCredentialSecret;

    /**
     * @return For Bedrock API keys, this is the secret portion of the credential that should be used to authenticate API calls. This value is only available when the credential is created.
     * 
     */
    public Optional<Output<String>> serviceCredentialSecret() {
        return Optional.ofNullable(this.serviceCredentialSecret);
    }

    /**
     * The name of the AWS service that is to be associated with the credentials. The service you specify here is the only service that can be accessed using these credentials. Supported services are `codecommit.amazonaws.com`, `bedrock.amazonaws.com`, and `cassandra.amazonaws.com`.
     * 
     */
    @Import(name="serviceName")
    private @Nullable Output<String> serviceName;

    /**
     * @return The name of the AWS service that is to be associated with the credentials. The service you specify here is the only service that can be accessed using these credentials. Supported services are `codecommit.amazonaws.com`, `bedrock.amazonaws.com`, and `cassandra.amazonaws.com`.
     * 
     */
    public Optional<Output<String>> serviceName() {
        return Optional.ofNullable(this.serviceName);
    }

    /**
     * The generated password for the service-specific credential. This value is only available when the credential is created.
     * 
     */
    @Import(name="servicePassword")
    private @Nullable Output<String> servicePassword;

    /**
     * @return The generated password for the service-specific credential. This value is only available when the credential is created.
     * 
     */
    public Optional<Output<String>> servicePassword() {
        return Optional.ofNullable(this.servicePassword);
    }

    /**
     * The unique identifier for the service-specific credential.
     * 
     */
    @Import(name="serviceSpecificCredentialId")
    private @Nullable Output<String> serviceSpecificCredentialId;

    /**
     * @return The unique identifier for the service-specific credential.
     * 
     */
    public Optional<Output<String>> serviceSpecificCredentialId() {
        return Optional.ofNullable(this.serviceSpecificCredentialId);
    }

    /**
     * The generated user name for the service-specific credential. This value is generated by combining the IAM user&#39;s name combined with the ID number of the AWS account, as in `jane-at-123456789012`, for example.
     * 
     */
    @Import(name="serviceUserName")
    private @Nullable Output<String> serviceUserName;

    /**
     * @return The generated user name for the service-specific credential. This value is generated by combining the IAM user&#39;s name combined with the ID number of the AWS account, as in `jane-at-123456789012`, for example.
     * 
     */
    public Optional<Output<String>> serviceUserName() {
        return Optional.ofNullable(this.serviceUserName);
    }

    /**
     * The status to be assigned to the service-specific credential. Valid values are `Active`, `Inactive`, and `Expired`. Default value is `Active`. Note that `Expired` is only used for read operations and cannot be set manually.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status to be assigned to the service-specific credential. Valid values are `Active`, `Inactive`, and `Expired`. Default value is `Active`. Note that `Expired` is only used for read operations and cannot be set manually.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The name of the IAM user that is to be associated with the credentials. The new service-specific credentials have the same permissions as the associated user except that they can be used only to access the specified service.
     * 
     */
    @Import(name="userName")
    private @Nullable Output<String> userName;

    /**
     * @return The name of the IAM user that is to be associated with the credentials. The new service-specific credentials have the same permissions as the associated user except that they can be used only to access the specified service.
     * 
     */
    public Optional<Output<String>> userName() {
        return Optional.ofNullable(this.userName);
    }

    private ServiceSpecificCredentialState() {}

    private ServiceSpecificCredentialState(ServiceSpecificCredentialState $) {
        this.createDate = $.createDate;
        this.credentialAgeDays = $.credentialAgeDays;
        this.expirationDate = $.expirationDate;
        this.serviceCredentialAlias = $.serviceCredentialAlias;
        this.serviceCredentialSecret = $.serviceCredentialSecret;
        this.serviceName = $.serviceName;
        this.servicePassword = $.servicePassword;
        this.serviceSpecificCredentialId = $.serviceSpecificCredentialId;
        this.serviceUserName = $.serviceUserName;
        this.status = $.status;
        this.userName = $.userName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceSpecificCredentialState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceSpecificCredentialState $;

        public Builder() {
            $ = new ServiceSpecificCredentialState();
        }

        public Builder(ServiceSpecificCredentialState defaults) {
            $ = new ServiceSpecificCredentialState(Objects.requireNonNull(defaults));
        }

        /**
         * @param createDate The date and time, in RFC3339 format, when the service-specific credential was created.
         * 
         * @return builder
         * 
         */
        public Builder createDate(@Nullable Output<String> createDate) {
            $.createDate = createDate;
            return this;
        }

        /**
         * @param createDate The date and time, in RFC3339 format, when the service-specific credential was created.
         * 
         * @return builder
         * 
         */
        public Builder createDate(String createDate) {
            return createDate(Output.of(createDate));
        }

        /**
         * @param credentialAgeDays The number of days until the service specific credential expires. This field is only valid for Bedrock API keys and must be between 1 and 36600 (approximately 100 years). When not specified, the credential will not expire.
         * 
         * @return builder
         * 
         */
        public Builder credentialAgeDays(@Nullable Output<Integer> credentialAgeDays) {
            $.credentialAgeDays = credentialAgeDays;
            return this;
        }

        /**
         * @param credentialAgeDays The number of days until the service specific credential expires. This field is only valid for Bedrock API keys and must be between 1 and 36600 (approximately 100 years). When not specified, the credential will not expire.
         * 
         * @return builder
         * 
         */
        public Builder credentialAgeDays(Integer credentialAgeDays) {
            return credentialAgeDays(Output.of(credentialAgeDays));
        }

        /**
         * @param expirationDate The date and time, in RFC3339 format, when the service specific credential expires. This field is only present for Bedrock API keys that were created with an expiration period.
         * 
         * @return builder
         * 
         */
        public Builder expirationDate(@Nullable Output<String> expirationDate) {
            $.expirationDate = expirationDate;
            return this;
        }

        /**
         * @param expirationDate The date and time, in RFC3339 format, when the service specific credential expires. This field is only present for Bedrock API keys that were created with an expiration period.
         * 
         * @return builder
         * 
         */
        public Builder expirationDate(String expirationDate) {
            return expirationDate(Output.of(expirationDate));
        }

        /**
         * @param serviceCredentialAlias For Bedrock API keys, this is the public portion of the credential that includes the IAM user name and a suffix containing version and creation information.
         * 
         * @return builder
         * 
         */
        public Builder serviceCredentialAlias(@Nullable Output<String> serviceCredentialAlias) {
            $.serviceCredentialAlias = serviceCredentialAlias;
            return this;
        }

        /**
         * @param serviceCredentialAlias For Bedrock API keys, this is the public portion of the credential that includes the IAM user name and a suffix containing version and creation information.
         * 
         * @return builder
         * 
         */
        public Builder serviceCredentialAlias(String serviceCredentialAlias) {
            return serviceCredentialAlias(Output.of(serviceCredentialAlias));
        }

        /**
         * @param serviceCredentialSecret For Bedrock API keys, this is the secret portion of the credential that should be used to authenticate API calls. This value is only available when the credential is created.
         * 
         * @return builder
         * 
         */
        public Builder serviceCredentialSecret(@Nullable Output<String> serviceCredentialSecret) {
            $.serviceCredentialSecret = serviceCredentialSecret;
            return this;
        }

        /**
         * @param serviceCredentialSecret For Bedrock API keys, this is the secret portion of the credential that should be used to authenticate API calls. This value is only available when the credential is created.
         * 
         * @return builder
         * 
         */
        public Builder serviceCredentialSecret(String serviceCredentialSecret) {
            return serviceCredentialSecret(Output.of(serviceCredentialSecret));
        }

        /**
         * @param serviceName The name of the AWS service that is to be associated with the credentials. The service you specify here is the only service that can be accessed using these credentials. Supported services are `codecommit.amazonaws.com`, `bedrock.amazonaws.com`, and `cassandra.amazonaws.com`.
         * 
         * @return builder
         * 
         */
        public Builder serviceName(@Nullable Output<String> serviceName) {
            $.serviceName = serviceName;
            return this;
        }

        /**
         * @param serviceName The name of the AWS service that is to be associated with the credentials. The service you specify here is the only service that can be accessed using these credentials. Supported services are `codecommit.amazonaws.com`, `bedrock.amazonaws.com`, and `cassandra.amazonaws.com`.
         * 
         * @return builder
         * 
         */
        public Builder serviceName(String serviceName) {
            return serviceName(Output.of(serviceName));
        }

        /**
         * @param servicePassword The generated password for the service-specific credential. This value is only available when the credential is created.
         * 
         * @return builder
         * 
         */
        public Builder servicePassword(@Nullable Output<String> servicePassword) {
            $.servicePassword = servicePassword;
            return this;
        }

        /**
         * @param servicePassword The generated password for the service-specific credential. This value is only available when the credential is created.
         * 
         * @return builder
         * 
         */
        public Builder servicePassword(String servicePassword) {
            return servicePassword(Output.of(servicePassword));
        }

        /**
         * @param serviceSpecificCredentialId The unique identifier for the service-specific credential.
         * 
         * @return builder
         * 
         */
        public Builder serviceSpecificCredentialId(@Nullable Output<String> serviceSpecificCredentialId) {
            $.serviceSpecificCredentialId = serviceSpecificCredentialId;
            return this;
        }

        /**
         * @param serviceSpecificCredentialId The unique identifier for the service-specific credential.
         * 
         * @return builder
         * 
         */
        public Builder serviceSpecificCredentialId(String serviceSpecificCredentialId) {
            return serviceSpecificCredentialId(Output.of(serviceSpecificCredentialId));
        }

        /**
         * @param serviceUserName The generated user name for the service-specific credential. This value is generated by combining the IAM user&#39;s name combined with the ID number of the AWS account, as in `jane-at-123456789012`, for example.
         * 
         * @return builder
         * 
         */
        public Builder serviceUserName(@Nullable Output<String> serviceUserName) {
            $.serviceUserName = serviceUserName;
            return this;
        }

        /**
         * @param serviceUserName The generated user name for the service-specific credential. This value is generated by combining the IAM user&#39;s name combined with the ID number of the AWS account, as in `jane-at-123456789012`, for example.
         * 
         * @return builder
         * 
         */
        public Builder serviceUserName(String serviceUserName) {
            return serviceUserName(Output.of(serviceUserName));
        }

        /**
         * @param status The status to be assigned to the service-specific credential. Valid values are `Active`, `Inactive`, and `Expired`. Default value is `Active`. Note that `Expired` is only used for read operations and cannot be set manually.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status to be assigned to the service-specific credential. Valid values are `Active`, `Inactive`, and `Expired`. Default value is `Active`. Note that `Expired` is only used for read operations and cannot be set manually.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param userName The name of the IAM user that is to be associated with the credentials. The new service-specific credentials have the same permissions as the associated user except that they can be used only to access the specified service.
         * 
         * @return builder
         * 
         */
        public Builder userName(@Nullable Output<String> userName) {
            $.userName = userName;
            return this;
        }

        /**
         * @param userName The name of the IAM user that is to be associated with the credentials. The new service-specific credentials have the same permissions as the associated user except that they can be used only to access the specified service.
         * 
         * @return builder
         * 
         */
        public Builder userName(String userName) {
            return userName(Output.of(userName));
        }

        public ServiceSpecificCredentialState build() {
            return $;
        }
    }

}
