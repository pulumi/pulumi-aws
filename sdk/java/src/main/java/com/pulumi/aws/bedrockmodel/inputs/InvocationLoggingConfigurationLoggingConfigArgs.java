// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.bedrockmodel.inputs;

import com.pulumi.aws.bedrockmodel.inputs.InvocationLoggingConfigurationLoggingConfigCloudwatchConfigArgs;
import com.pulumi.aws.bedrockmodel.inputs.InvocationLoggingConfigurationLoggingConfigS3ConfigArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InvocationLoggingConfigurationLoggingConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final InvocationLoggingConfigurationLoggingConfigArgs Empty = new InvocationLoggingConfigurationLoggingConfigArgs();

    /**
     * CloudWatch logging configuration. See `cloudwatch_config`.
     * 
     */
    @Import(name="cloudwatchConfig")
    private @Nullable Output<InvocationLoggingConfigurationLoggingConfigCloudwatchConfigArgs> cloudwatchConfig;

    /**
     * @return CloudWatch logging configuration. See `cloudwatch_config`.
     * 
     */
    public Optional<Output<InvocationLoggingConfigurationLoggingConfigCloudwatchConfigArgs>> cloudwatchConfig() {
        return Optional.ofNullable(this.cloudwatchConfig);
    }

    /**
     * Set to include embeddings data in the log delivery.
     * 
     */
    @Import(name="embeddingDataDeliveryEnabled", required=true)
    private Output<Boolean> embeddingDataDeliveryEnabled;

    /**
     * @return Set to include embeddings data in the log delivery.
     * 
     */
    public Output<Boolean> embeddingDataDeliveryEnabled() {
        return this.embeddingDataDeliveryEnabled;
    }

    /**
     * Set to include image data in the log delivery.
     * 
     */
    @Import(name="imageDataDeliveryEnabled", required=true)
    private Output<Boolean> imageDataDeliveryEnabled;

    /**
     * @return Set to include image data in the log delivery.
     * 
     */
    public Output<Boolean> imageDataDeliveryEnabled() {
        return this.imageDataDeliveryEnabled;
    }

    /**
     * S3 configuration for storing log data. See `s3_config`.
     * 
     */
    @Import(name="s3Config")
    private @Nullable Output<InvocationLoggingConfigurationLoggingConfigS3ConfigArgs> s3Config;

    /**
     * @return S3 configuration for storing log data. See `s3_config`.
     * 
     */
    public Optional<Output<InvocationLoggingConfigurationLoggingConfigS3ConfigArgs>> s3Config() {
        return Optional.ofNullable(this.s3Config);
    }

    /**
     * Set to include text data in the log delivery.
     * 
     */
    @Import(name="textDataDeliveryEnabled", required=true)
    private Output<Boolean> textDataDeliveryEnabled;

    /**
     * @return Set to include text data in the log delivery.
     * 
     */
    public Output<Boolean> textDataDeliveryEnabled() {
        return this.textDataDeliveryEnabled;
    }

    private InvocationLoggingConfigurationLoggingConfigArgs() {}

    private InvocationLoggingConfigurationLoggingConfigArgs(InvocationLoggingConfigurationLoggingConfigArgs $) {
        this.cloudwatchConfig = $.cloudwatchConfig;
        this.embeddingDataDeliveryEnabled = $.embeddingDataDeliveryEnabled;
        this.imageDataDeliveryEnabled = $.imageDataDeliveryEnabled;
        this.s3Config = $.s3Config;
        this.textDataDeliveryEnabled = $.textDataDeliveryEnabled;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InvocationLoggingConfigurationLoggingConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InvocationLoggingConfigurationLoggingConfigArgs $;

        public Builder() {
            $ = new InvocationLoggingConfigurationLoggingConfigArgs();
        }

        public Builder(InvocationLoggingConfigurationLoggingConfigArgs defaults) {
            $ = new InvocationLoggingConfigurationLoggingConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cloudwatchConfig CloudWatch logging configuration. See `cloudwatch_config`.
         * 
         * @return builder
         * 
         */
        public Builder cloudwatchConfig(@Nullable Output<InvocationLoggingConfigurationLoggingConfigCloudwatchConfigArgs> cloudwatchConfig) {
            $.cloudwatchConfig = cloudwatchConfig;
            return this;
        }

        /**
         * @param cloudwatchConfig CloudWatch logging configuration. See `cloudwatch_config`.
         * 
         * @return builder
         * 
         */
        public Builder cloudwatchConfig(InvocationLoggingConfigurationLoggingConfigCloudwatchConfigArgs cloudwatchConfig) {
            return cloudwatchConfig(Output.of(cloudwatchConfig));
        }

        /**
         * @param embeddingDataDeliveryEnabled Set to include embeddings data in the log delivery.
         * 
         * @return builder
         * 
         */
        public Builder embeddingDataDeliveryEnabled(Output<Boolean> embeddingDataDeliveryEnabled) {
            $.embeddingDataDeliveryEnabled = embeddingDataDeliveryEnabled;
            return this;
        }

        /**
         * @param embeddingDataDeliveryEnabled Set to include embeddings data in the log delivery.
         * 
         * @return builder
         * 
         */
        public Builder embeddingDataDeliveryEnabled(Boolean embeddingDataDeliveryEnabled) {
            return embeddingDataDeliveryEnabled(Output.of(embeddingDataDeliveryEnabled));
        }

        /**
         * @param imageDataDeliveryEnabled Set to include image data in the log delivery.
         * 
         * @return builder
         * 
         */
        public Builder imageDataDeliveryEnabled(Output<Boolean> imageDataDeliveryEnabled) {
            $.imageDataDeliveryEnabled = imageDataDeliveryEnabled;
            return this;
        }

        /**
         * @param imageDataDeliveryEnabled Set to include image data in the log delivery.
         * 
         * @return builder
         * 
         */
        public Builder imageDataDeliveryEnabled(Boolean imageDataDeliveryEnabled) {
            return imageDataDeliveryEnabled(Output.of(imageDataDeliveryEnabled));
        }

        /**
         * @param s3Config S3 configuration for storing log data. See `s3_config`.
         * 
         * @return builder
         * 
         */
        public Builder s3Config(@Nullable Output<InvocationLoggingConfigurationLoggingConfigS3ConfigArgs> s3Config) {
            $.s3Config = s3Config;
            return this;
        }

        /**
         * @param s3Config S3 configuration for storing log data. See `s3_config`.
         * 
         * @return builder
         * 
         */
        public Builder s3Config(InvocationLoggingConfigurationLoggingConfigS3ConfigArgs s3Config) {
            return s3Config(Output.of(s3Config));
        }

        /**
         * @param textDataDeliveryEnabled Set to include text data in the log delivery.
         * 
         * @return builder
         * 
         */
        public Builder textDataDeliveryEnabled(Output<Boolean> textDataDeliveryEnabled) {
            $.textDataDeliveryEnabled = textDataDeliveryEnabled;
            return this;
        }

        /**
         * @param textDataDeliveryEnabled Set to include text data in the log delivery.
         * 
         * @return builder
         * 
         */
        public Builder textDataDeliveryEnabled(Boolean textDataDeliveryEnabled) {
            return textDataDeliveryEnabled(Output.of(textDataDeliveryEnabled));
        }

        public InvocationLoggingConfigurationLoggingConfigArgs build() {
            if ($.embeddingDataDeliveryEnabled == null) {
                throw new MissingRequiredPropertyException("InvocationLoggingConfigurationLoggingConfigArgs", "embeddingDataDeliveryEnabled");
            }
            if ($.imageDataDeliveryEnabled == null) {
                throw new MissingRequiredPropertyException("InvocationLoggingConfigurationLoggingConfigArgs", "imageDataDeliveryEnabled");
            }
            if ($.textDataDeliveryEnabled == null) {
                throw new MissingRequiredPropertyException("InvocationLoggingConfigurationLoggingConfigArgs", "textDataDeliveryEnabled");
            }
            return $;
        }
    }

}
