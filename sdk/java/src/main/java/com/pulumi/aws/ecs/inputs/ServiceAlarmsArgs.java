// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ecs.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class ServiceAlarmsArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceAlarmsArgs Empty = new ServiceAlarmsArgs();

    /**
     * One or more CloudWatch alarm names.
     * 
     */
    @Import(name="alarmNames", required=true)
    private Output<List<String>> alarmNames;

    /**
     * @return One or more CloudWatch alarm names.
     * 
     */
    public Output<List<String>> alarmNames() {
        return this.alarmNames;
    }

    /**
     * Determines whether to use the CloudWatch alarm option in the service deployment process.
     * 
     */
    @Import(name="enable", required=true)
    private Output<Boolean> enable;

    /**
     * @return Determines whether to use the CloudWatch alarm option in the service deployment process.
     * 
     */
    public Output<Boolean> enable() {
        return this.enable;
    }

    /**
     * Determines whether to configure Amazon ECS to roll back the service if a service deployment fails. If rollback is used, when a service deployment fails, the service is rolled back to the last deployment that completed successfully.
     * 
     */
    @Import(name="rollback", required=true)
    private Output<Boolean> rollback;

    /**
     * @return Determines whether to configure Amazon ECS to roll back the service if a service deployment fails. If rollback is used, when a service deployment fails, the service is rolled back to the last deployment that completed successfully.
     * 
     */
    public Output<Boolean> rollback() {
        return this.rollback;
    }

    private ServiceAlarmsArgs() {}

    private ServiceAlarmsArgs(ServiceAlarmsArgs $) {
        this.alarmNames = $.alarmNames;
        this.enable = $.enable;
        this.rollback = $.rollback;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceAlarmsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceAlarmsArgs $;

        public Builder() {
            $ = new ServiceAlarmsArgs();
        }

        public Builder(ServiceAlarmsArgs defaults) {
            $ = new ServiceAlarmsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param alarmNames One or more CloudWatch alarm names.
         * 
         * @return builder
         * 
         */
        public Builder alarmNames(Output<List<String>> alarmNames) {
            $.alarmNames = alarmNames;
            return this;
        }

        /**
         * @param alarmNames One or more CloudWatch alarm names.
         * 
         * @return builder
         * 
         */
        public Builder alarmNames(List<String> alarmNames) {
            return alarmNames(Output.of(alarmNames));
        }

        /**
         * @param alarmNames One or more CloudWatch alarm names.
         * 
         * @return builder
         * 
         */
        public Builder alarmNames(String... alarmNames) {
            return alarmNames(List.of(alarmNames));
        }

        /**
         * @param enable Determines whether to use the CloudWatch alarm option in the service deployment process.
         * 
         * @return builder
         * 
         */
        public Builder enable(Output<Boolean> enable) {
            $.enable = enable;
            return this;
        }

        /**
         * @param enable Determines whether to use the CloudWatch alarm option in the service deployment process.
         * 
         * @return builder
         * 
         */
        public Builder enable(Boolean enable) {
            return enable(Output.of(enable));
        }

        /**
         * @param rollback Determines whether to configure Amazon ECS to roll back the service if a service deployment fails. If rollback is used, when a service deployment fails, the service is rolled back to the last deployment that completed successfully.
         * 
         * @return builder
         * 
         */
        public Builder rollback(Output<Boolean> rollback) {
            $.rollback = rollback;
            return this;
        }

        /**
         * @param rollback Determines whether to configure Amazon ECS to roll back the service if a service deployment fails. If rollback is used, when a service deployment fails, the service is rolled back to the last deployment that completed successfully.
         * 
         * @return builder
         * 
         */
        public Builder rollback(Boolean rollback) {
            return rollback(Output.of(rollback));
        }

        public ServiceAlarmsArgs build() {
            if ($.alarmNames == null) {
                throw new MissingRequiredPropertyException("ServiceAlarmsArgs", "alarmNames");
            }
            if ($.enable == null) {
                throw new MissingRequiredPropertyException("ServiceAlarmsArgs", "enable");
            }
            if ($.rollback == null) {
                throw new MissingRequiredPropertyException("ServiceAlarmsArgs", "rollback");
            }
            return $;
        }
    }

}
