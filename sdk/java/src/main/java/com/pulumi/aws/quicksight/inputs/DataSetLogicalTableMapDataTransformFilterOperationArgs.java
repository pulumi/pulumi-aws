// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class DataSetLogicalTableMapDataTransformFilterOperationArgs extends com.pulumi.resources.ResourceArgs {

    public static final DataSetLogicalTableMapDataTransformFilterOperationArgs Empty = new DataSetLogicalTableMapDataTransformFilterOperationArgs();

    /**
     * An expression that must evaluate to a Boolean value. Rows for which the expression evaluates to true are kept in the dataset.
     * 
     */
    @Import(name="conditionExpression", required=true)
    private Output<String> conditionExpression;

    /**
     * @return An expression that must evaluate to a Boolean value. Rows for which the expression evaluates to true are kept in the dataset.
     * 
     */
    public Output<String> conditionExpression() {
        return this.conditionExpression;
    }

    private DataSetLogicalTableMapDataTransformFilterOperationArgs() {}

    private DataSetLogicalTableMapDataTransformFilterOperationArgs(DataSetLogicalTableMapDataTransformFilterOperationArgs $) {
        this.conditionExpression = $.conditionExpression;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DataSetLogicalTableMapDataTransformFilterOperationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DataSetLogicalTableMapDataTransformFilterOperationArgs $;

        public Builder() {
            $ = new DataSetLogicalTableMapDataTransformFilterOperationArgs();
        }

        public Builder(DataSetLogicalTableMapDataTransformFilterOperationArgs defaults) {
            $ = new DataSetLogicalTableMapDataTransformFilterOperationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param conditionExpression An expression that must evaluate to a Boolean value. Rows for which the expression evaluates to true are kept in the dataset.
         * 
         * @return builder
         * 
         */
        public Builder conditionExpression(Output<String> conditionExpression) {
            $.conditionExpression = conditionExpression;
            return this;
        }

        /**
         * @param conditionExpression An expression that must evaluate to a Boolean value. Rows for which the expression evaluates to true are kept in the dataset.
         * 
         * @return builder
         * 
         */
        public Builder conditionExpression(String conditionExpression) {
            return conditionExpression(Output.of(conditionExpression));
        }

        public DataSetLogicalTableMapDataTransformFilterOperationArgs build() {
            if ($.conditionExpression == null) {
                throw new MissingRequiredPropertyException("DataSetLogicalTableMapDataTransformFilterOperationArgs", "conditionExpression");
            }
            return $;
        }
    }

}
