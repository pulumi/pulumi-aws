// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.imagebuilder;

import com.pulumi.aws.imagebuilder.inputs.ContainerRecipeComponentArgs;
import com.pulumi.aws.imagebuilder.inputs.ContainerRecipeInstanceConfigurationArgs;
import com.pulumi.aws.imagebuilder.inputs.ContainerRecipeTargetRepositoryArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ContainerRecipeArgs extends com.pulumi.resources.ResourceArgs {

    public static final ContainerRecipeArgs Empty = new ContainerRecipeArgs();

    @Import(name="components", required=true)
    private Output<List<ContainerRecipeComponentArgs>> components;

    public Output<List<ContainerRecipeComponentArgs>> components() {
        return this.components;
    }

    @Import(name="containerType", required=true)
    private Output<String> containerType;

    public Output<String> containerType() {
        return this.containerType;
    }

    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="dockerfileTemplateData")
    private @Nullable Output<String> dockerfileTemplateData;

    public Optional<Output<String>> dockerfileTemplateData() {
        return Optional.ofNullable(this.dockerfileTemplateData);
    }

    @Import(name="dockerfileTemplateUri")
    private @Nullable Output<String> dockerfileTemplateUri;

    public Optional<Output<String>> dockerfileTemplateUri() {
        return Optional.ofNullable(this.dockerfileTemplateUri);
    }

    @Import(name="instanceConfiguration")
    private @Nullable Output<ContainerRecipeInstanceConfigurationArgs> instanceConfiguration;

    public Optional<Output<ContainerRecipeInstanceConfigurationArgs>> instanceConfiguration() {
        return Optional.ofNullable(this.instanceConfiguration);
    }

    @Import(name="kmsKeyId")
    private @Nullable Output<String> kmsKeyId;

    public Optional<Output<String>> kmsKeyId() {
        return Optional.ofNullable(this.kmsKeyId);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="parentImage", required=true)
    private Output<String> parentImage;

    public Output<String> parentImage() {
        return this.parentImage;
    }

    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="targetRepository", required=true)
    private Output<ContainerRecipeTargetRepositoryArgs> targetRepository;

    public Output<ContainerRecipeTargetRepositoryArgs> targetRepository() {
        return this.targetRepository;
    }

    @Import(name="version", required=true)
    private Output<String> version;

    public Output<String> version() {
        return this.version;
    }

    @Import(name="workingDirectory")
    private @Nullable Output<String> workingDirectory;

    public Optional<Output<String>> workingDirectory() {
        return Optional.ofNullable(this.workingDirectory);
    }

    private ContainerRecipeArgs() {}

    private ContainerRecipeArgs(ContainerRecipeArgs $) {
        this.components = $.components;
        this.containerType = $.containerType;
        this.description = $.description;
        this.dockerfileTemplateData = $.dockerfileTemplateData;
        this.dockerfileTemplateUri = $.dockerfileTemplateUri;
        this.instanceConfiguration = $.instanceConfiguration;
        this.kmsKeyId = $.kmsKeyId;
        this.name = $.name;
        this.parentImage = $.parentImage;
        this.tags = $.tags;
        this.targetRepository = $.targetRepository;
        this.version = $.version;
        this.workingDirectory = $.workingDirectory;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ContainerRecipeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ContainerRecipeArgs $;

        public Builder() {
            $ = new ContainerRecipeArgs();
        }

        public Builder(ContainerRecipeArgs defaults) {
            $ = new ContainerRecipeArgs(Objects.requireNonNull(defaults));
        }

        public Builder components(Output<List<ContainerRecipeComponentArgs>> components) {
            $.components = components;
            return this;
        }

        public Builder components(List<ContainerRecipeComponentArgs> components) {
            return components(Output.of(components));
        }

        public Builder components(ContainerRecipeComponentArgs... components) {
            return components(List.of(components));
        }

        public Builder containerType(Output<String> containerType) {
            $.containerType = containerType;
            return this;
        }

        public Builder containerType(String containerType) {
            return containerType(Output.of(containerType));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder dockerfileTemplateData(@Nullable Output<String> dockerfileTemplateData) {
            $.dockerfileTemplateData = dockerfileTemplateData;
            return this;
        }

        public Builder dockerfileTemplateData(String dockerfileTemplateData) {
            return dockerfileTemplateData(Output.of(dockerfileTemplateData));
        }

        public Builder dockerfileTemplateUri(@Nullable Output<String> dockerfileTemplateUri) {
            $.dockerfileTemplateUri = dockerfileTemplateUri;
            return this;
        }

        public Builder dockerfileTemplateUri(String dockerfileTemplateUri) {
            return dockerfileTemplateUri(Output.of(dockerfileTemplateUri));
        }

        public Builder instanceConfiguration(@Nullable Output<ContainerRecipeInstanceConfigurationArgs> instanceConfiguration) {
            $.instanceConfiguration = instanceConfiguration;
            return this;
        }

        public Builder instanceConfiguration(ContainerRecipeInstanceConfigurationArgs instanceConfiguration) {
            return instanceConfiguration(Output.of(instanceConfiguration));
        }

        public Builder kmsKeyId(@Nullable Output<String> kmsKeyId) {
            $.kmsKeyId = kmsKeyId;
            return this;
        }

        public Builder kmsKeyId(String kmsKeyId) {
            return kmsKeyId(Output.of(kmsKeyId));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder parentImage(Output<String> parentImage) {
            $.parentImage = parentImage;
            return this;
        }

        public Builder parentImage(String parentImage) {
            return parentImage(Output.of(parentImage));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder targetRepository(Output<ContainerRecipeTargetRepositoryArgs> targetRepository) {
            $.targetRepository = targetRepository;
            return this;
        }

        public Builder targetRepository(ContainerRecipeTargetRepositoryArgs targetRepository) {
            return targetRepository(Output.of(targetRepository));
        }

        public Builder version(Output<String> version) {
            $.version = version;
            return this;
        }

        public Builder version(String version) {
            return version(Output.of(version));
        }

        public Builder workingDirectory(@Nullable Output<String> workingDirectory) {
            $.workingDirectory = workingDirectory;
            return this;
        }

        public Builder workingDirectory(String workingDirectory) {
            return workingDirectory(Output.of(workingDirectory));
        }

        public ContainerRecipeArgs build() {
            $.components = Objects.requireNonNull($.components, "expected parameter 'components' to be non-null");
            $.containerType = Objects.requireNonNull($.containerType, "expected parameter 'containerType' to be non-null");
            $.parentImage = Objects.requireNonNull($.parentImage, "expected parameter 'parentImage' to be non-null");
            $.targetRepository = Objects.requireNonNull($.targetRepository, "expected parameter 'targetRepository' to be non-null");
            $.version = Objects.requireNonNull($.version, "expected parameter 'version' to be non-null");
            return $;
        }
    }

}
