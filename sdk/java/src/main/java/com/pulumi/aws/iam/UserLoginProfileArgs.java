// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.iam;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UserLoginProfileArgs extends com.pulumi.resources.ResourceArgs {

    public static final UserLoginProfileArgs Empty = new UserLoginProfileArgs();

    /**
     * The length of the generated password on resource creation. Only applies on resource creation. Drift detection is not possible with this argument. Default value is `20`.
     * 
     */
    @Import(name="passwordLength")
    private @Nullable Output<Integer> passwordLength;

    /**
     * @return The length of the generated password on resource creation. Only applies on resource creation. Drift detection is not possible with this argument. Default value is `20`.
     * 
     */
    public Optional<Output<Integer>> passwordLength() {
        return Optional.ofNullable(this.passwordLength);
    }

    /**
     * Whether the user should be forced to reset the generated password on resource creation. Only applies on resource creation.
     * 
     */
    @Import(name="passwordResetRequired")
    private @Nullable Output<Boolean> passwordResetRequired;

    /**
     * @return Whether the user should be forced to reset the generated password on resource creation. Only applies on resource creation.
     * 
     */
    public Optional<Output<Boolean>> passwordResetRequired() {
        return Optional.ofNullable(this.passwordResetRequired);
    }

    /**
     * Either a base-64 encoded PGP public key, or a keybase username in the form `keybase:username`. Only applies on resource creation. Drift detection is not possible with this argument.
     * 
     */
    @Import(name="pgpKey")
    private @Nullable Output<String> pgpKey;

    /**
     * @return Either a base-64 encoded PGP public key, or a keybase username in the form `keybase:username`. Only applies on resource creation. Drift detection is not possible with this argument.
     * 
     */
    public Optional<Output<String>> pgpKey() {
        return Optional.ofNullable(this.pgpKey);
    }

    /**
     * The IAM user&#39;s name.
     * 
     */
    @Import(name="user", required=true)
    private Output<String> user;

    /**
     * @return The IAM user&#39;s name.
     * 
     */
    public Output<String> user() {
        return this.user;
    }

    private UserLoginProfileArgs() {}

    private UserLoginProfileArgs(UserLoginProfileArgs $) {
        this.passwordLength = $.passwordLength;
        this.passwordResetRequired = $.passwordResetRequired;
        this.pgpKey = $.pgpKey;
        this.user = $.user;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UserLoginProfileArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UserLoginProfileArgs $;

        public Builder() {
            $ = new UserLoginProfileArgs();
        }

        public Builder(UserLoginProfileArgs defaults) {
            $ = new UserLoginProfileArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param passwordLength The length of the generated password on resource creation. Only applies on resource creation. Drift detection is not possible with this argument. Default value is `20`.
         * 
         * @return builder
         * 
         */
        public Builder passwordLength(@Nullable Output<Integer> passwordLength) {
            $.passwordLength = passwordLength;
            return this;
        }

        /**
         * @param passwordLength The length of the generated password on resource creation. Only applies on resource creation. Drift detection is not possible with this argument. Default value is `20`.
         * 
         * @return builder
         * 
         */
        public Builder passwordLength(Integer passwordLength) {
            return passwordLength(Output.of(passwordLength));
        }

        /**
         * @param passwordResetRequired Whether the user should be forced to reset the generated password on resource creation. Only applies on resource creation.
         * 
         * @return builder
         * 
         */
        public Builder passwordResetRequired(@Nullable Output<Boolean> passwordResetRequired) {
            $.passwordResetRequired = passwordResetRequired;
            return this;
        }

        /**
         * @param passwordResetRequired Whether the user should be forced to reset the generated password on resource creation. Only applies on resource creation.
         * 
         * @return builder
         * 
         */
        public Builder passwordResetRequired(Boolean passwordResetRequired) {
            return passwordResetRequired(Output.of(passwordResetRequired));
        }

        /**
         * @param pgpKey Either a base-64 encoded PGP public key, or a keybase username in the form `keybase:username`. Only applies on resource creation. Drift detection is not possible with this argument.
         * 
         * @return builder
         * 
         */
        public Builder pgpKey(@Nullable Output<String> pgpKey) {
            $.pgpKey = pgpKey;
            return this;
        }

        /**
         * @param pgpKey Either a base-64 encoded PGP public key, or a keybase username in the form `keybase:username`. Only applies on resource creation. Drift detection is not possible with this argument.
         * 
         * @return builder
         * 
         */
        public Builder pgpKey(String pgpKey) {
            return pgpKey(Output.of(pgpKey));
        }

        /**
         * @param user The IAM user&#39;s name.
         * 
         * @return builder
         * 
         */
        public Builder user(Output<String> user) {
            $.user = user;
            return this;
        }

        /**
         * @param user The IAM user&#39;s name.
         * 
         * @return builder
         * 
         */
        public Builder user(String user) {
            return user(Output.of(user));
        }

        public UserLoginProfileArgs build() {
            $.user = Objects.requireNonNull($.user, "expected parameter 'user' to be non-null");
            return $;
        }
    }

}
