// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.msk.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClusterLoggingInfoBrokerLogsCloudwatchLogsArgs extends com.pulumi.resources.ResourceArgs {

    public static final ClusterLoggingInfoBrokerLogsCloudwatchLogsArgs Empty = new ClusterLoggingInfoBrokerLogsCloudwatchLogsArgs();

    /**
     * Controls whether provisioned throughput is enabled or not. Default value: `false`.
     * 
     */
    @Import(name="enabled", required=true)
    private Output<Boolean> enabled;

    /**
     * @return Controls whether provisioned throughput is enabled or not. Default value: `false`.
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }

    /**
     * Name of the Cloudwatch Log Group to deliver logs to.
     * 
     */
    @Import(name="logGroup")
    private @Nullable Output<String> logGroup;

    /**
     * @return Name of the Cloudwatch Log Group to deliver logs to.
     * 
     */
    public Optional<Output<String>> logGroup() {
        return Optional.ofNullable(this.logGroup);
    }

    private ClusterLoggingInfoBrokerLogsCloudwatchLogsArgs() {}

    private ClusterLoggingInfoBrokerLogsCloudwatchLogsArgs(ClusterLoggingInfoBrokerLogsCloudwatchLogsArgs $) {
        this.enabled = $.enabled;
        this.logGroup = $.logGroup;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClusterLoggingInfoBrokerLogsCloudwatchLogsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClusterLoggingInfoBrokerLogsCloudwatchLogsArgs $;

        public Builder() {
            $ = new ClusterLoggingInfoBrokerLogsCloudwatchLogsArgs();
        }

        public Builder(ClusterLoggingInfoBrokerLogsCloudwatchLogsArgs defaults) {
            $ = new ClusterLoggingInfoBrokerLogsCloudwatchLogsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param enabled Controls whether provisioned throughput is enabled or not. Default value: `false`.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Controls whether provisioned throughput is enabled or not. Default value: `false`.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param logGroup Name of the Cloudwatch Log Group to deliver logs to.
         * 
         * @return builder
         * 
         */
        public Builder logGroup(@Nullable Output<String> logGroup) {
            $.logGroup = logGroup;
            return this;
        }

        /**
         * @param logGroup Name of the Cloudwatch Log Group to deliver logs to.
         * 
         * @return builder
         * 
         */
        public Builder logGroup(String logGroup) {
            return logGroup(Output.of(logGroup));
        }

        public ClusterLoggingInfoBrokerLogsCloudwatchLogsArgs build() {
            if ($.enabled == null) {
                throw new MissingRequiredPropertyException("ClusterLoggingInfoBrokerLogsCloudwatchLogsArgs", "enabled");
            }
            return $;
        }
    }

}
