// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.dataexchange;

import com.pulumi.aws.dataexchange.inputs.RevisionAssetsAssetArgs;
import com.pulumi.aws.dataexchange.inputs.RevisionAssetsTimeoutsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RevisionAssetsArgs extends com.pulumi.resources.ResourceArgs {

    public static final RevisionAssetsArgs Empty = new RevisionAssetsArgs();

    /**
     * A block to define the asset associated with the revision. See Asset for more details.
     * 
     * The following arguments are optional:
     * 
     */
    @Import(name="assets")
    private @Nullable Output<List<RevisionAssetsAssetArgs>> assets;

    /**
     * @return A block to define the asset associated with the revision. See Asset for more details.
     * 
     * The following arguments are optional:
     * 
     */
    public Optional<Output<List<RevisionAssetsAssetArgs>>> assets() {
        return Optional.ofNullable(this.assets);
    }

    /**
     * A comment for the revision. Maximum length is 16,348 characters.
     * 
     */
    @Import(name="comment")
    private @Nullable Output<String> comment;

    /**
     * @return A comment for the revision. Maximum length is 16,348 characters.
     * 
     */
    public Optional<Output<String>> comment() {
        return Optional.ofNullable(this.comment);
    }

    /**
     * Unique identifier for the data set associated with the revision.
     * 
     */
    @Import(name="dataSetId", required=true)
    private Output<String> dataSetId;

    /**
     * @return Unique identifier for the data set associated with the revision.
     * 
     */
    public Output<String> dataSetId() {
        return this.dataSetId;
    }

    @Import(name="finalized")
    private @Nullable Output<Boolean> finalized;

    public Optional<Output<Boolean>> finalized() {
        return Optional.ofNullable(this.finalized);
    }

    @Import(name="forceDestroy")
    private @Nullable Output<Boolean> forceDestroy;

    public Optional<Output<Boolean>> forceDestroy() {
        return Optional.ofNullable(this.forceDestroy);
    }

    /**
     * A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="timeouts")
    private @Nullable Output<RevisionAssetsTimeoutsArgs> timeouts;

    public Optional<Output<RevisionAssetsTimeoutsArgs>> timeouts() {
        return Optional.ofNullable(this.timeouts);
    }

    private RevisionAssetsArgs() {}

    private RevisionAssetsArgs(RevisionAssetsArgs $) {
        this.assets = $.assets;
        this.comment = $.comment;
        this.dataSetId = $.dataSetId;
        this.finalized = $.finalized;
        this.forceDestroy = $.forceDestroy;
        this.tags = $.tags;
        this.timeouts = $.timeouts;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RevisionAssetsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RevisionAssetsArgs $;

        public Builder() {
            $ = new RevisionAssetsArgs();
        }

        public Builder(RevisionAssetsArgs defaults) {
            $ = new RevisionAssetsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param assets A block to define the asset associated with the revision. See Asset for more details.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder assets(@Nullable Output<List<RevisionAssetsAssetArgs>> assets) {
            $.assets = assets;
            return this;
        }

        /**
         * @param assets A block to define the asset associated with the revision. See Asset for more details.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder assets(List<RevisionAssetsAssetArgs> assets) {
            return assets(Output.of(assets));
        }

        /**
         * @param assets A block to define the asset associated with the revision. See Asset for more details.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder assets(RevisionAssetsAssetArgs... assets) {
            return assets(List.of(assets));
        }

        /**
         * @param comment A comment for the revision. Maximum length is 16,348 characters.
         * 
         * @return builder
         * 
         */
        public Builder comment(@Nullable Output<String> comment) {
            $.comment = comment;
            return this;
        }

        /**
         * @param comment A comment for the revision. Maximum length is 16,348 characters.
         * 
         * @return builder
         * 
         */
        public Builder comment(String comment) {
            return comment(Output.of(comment));
        }

        /**
         * @param dataSetId Unique identifier for the data set associated with the revision.
         * 
         * @return builder
         * 
         */
        public Builder dataSetId(Output<String> dataSetId) {
            $.dataSetId = dataSetId;
            return this;
        }

        /**
         * @param dataSetId Unique identifier for the data set associated with the revision.
         * 
         * @return builder
         * 
         */
        public Builder dataSetId(String dataSetId) {
            return dataSetId(Output.of(dataSetId));
        }

        public Builder finalized(@Nullable Output<Boolean> finalized) {
            $.finalized = finalized;
            return this;
        }

        public Builder finalized(Boolean finalized) {
            return finalized(Output.of(finalized));
        }

        public Builder forceDestroy(@Nullable Output<Boolean> forceDestroy) {
            $.forceDestroy = forceDestroy;
            return this;
        }

        public Builder forceDestroy(Boolean forceDestroy) {
            return forceDestroy(Output.of(forceDestroy));
        }

        /**
         * @param tags A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder timeouts(@Nullable Output<RevisionAssetsTimeoutsArgs> timeouts) {
            $.timeouts = timeouts;
            return this;
        }

        public Builder timeouts(RevisionAssetsTimeoutsArgs timeouts) {
            return timeouts(Output.of(timeouts));
        }

        public RevisionAssetsArgs build() {
            if ($.dataSetId == null) {
                throw new MissingRequiredPropertyException("RevisionAssetsArgs", "dataSetId");
            }
            return $;
        }
    }

}
