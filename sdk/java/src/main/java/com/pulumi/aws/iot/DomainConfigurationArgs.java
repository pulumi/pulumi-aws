// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.iot;

import com.pulumi.aws.iot.inputs.DomainConfigurationAuthorizerConfigArgs;
import com.pulumi.aws.iot.inputs.DomainConfigurationTlsConfigArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DomainConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final DomainConfigurationArgs Empty = new DomainConfigurationArgs();

    /**
     * An object that specifies the authorization service for a domain. See below.
     * 
     */
    @Import(name="authorizerConfig")
    private @Nullable Output<DomainConfigurationAuthorizerConfigArgs> authorizerConfig;

    /**
     * @return An object that specifies the authorization service for a domain. See below.
     * 
     */
    public Optional<Output<DomainConfigurationAuthorizerConfigArgs>> authorizerConfig() {
        return Optional.ofNullable(this.authorizerConfig);
    }

    /**
     * Fully-qualified domain name.
     * 
     */
    @Import(name="domainName")
    private @Nullable Output<String> domainName;

    /**
     * @return Fully-qualified domain name.
     * 
     */
    public Optional<Output<String>> domainName() {
        return Optional.ofNullable(this.domainName);
    }

    /**
     * The name of the domain configuration. This value must be unique to a region.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the domain configuration. This value must be unique to a region.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ARNs of the certificates that IoT passes to the device during the TLS handshake. Currently you can specify only one certificate ARN. This value is not required for Amazon Web Services-managed domains. When using a custom `domain_name`, the cert must include it.
     * 
     */
    @Import(name="serverCertificateArns")
    private @Nullable Output<List<String>> serverCertificateArns;

    /**
     * @return The ARNs of the certificates that IoT passes to the device during the TLS handshake. Currently you can specify only one certificate ARN. This value is not required for Amazon Web Services-managed domains. When using a custom `domain_name`, the cert must include it.
     * 
     */
    public Optional<Output<List<String>>> serverCertificateArns() {
        return Optional.ofNullable(this.serverCertificateArns);
    }

    /**
     * The type of service delivered by the endpoint. Note: Amazon Web Services IoT Core currently supports only the `DATA` service type.
     * 
     */
    @Import(name="serviceType")
    private @Nullable Output<String> serviceType;

    /**
     * @return The type of service delivered by the endpoint. Note: Amazon Web Services IoT Core currently supports only the `DATA` service type.
     * 
     */
    public Optional<Output<String>> serviceType() {
        return Optional.ofNullable(this.serviceType);
    }

    @Import(name="status")
    private @Nullable Output<String> status;

    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Map of tags to assign to this resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Map of tags to assign to this resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * An object that specifies the TLS configuration for a domain. See below.
     * 
     */
    @Import(name="tlsConfig")
    private @Nullable Output<DomainConfigurationTlsConfigArgs> tlsConfig;

    /**
     * @return An object that specifies the TLS configuration for a domain. See below.
     * 
     */
    public Optional<Output<DomainConfigurationTlsConfigArgs>> tlsConfig() {
        return Optional.ofNullable(this.tlsConfig);
    }

    /**
     * The certificate used to validate the server certificate and prove domain name ownership. This certificate must be signed by a public certificate authority. This value is not required for Amazon Web Services-managed domains.
     * 
     */
    @Import(name="validationCertificateArn")
    private @Nullable Output<String> validationCertificateArn;

    /**
     * @return The certificate used to validate the server certificate and prove domain name ownership. This certificate must be signed by a public certificate authority. This value is not required for Amazon Web Services-managed domains.
     * 
     */
    public Optional<Output<String>> validationCertificateArn() {
        return Optional.ofNullable(this.validationCertificateArn);
    }

    private DomainConfigurationArgs() {}

    private DomainConfigurationArgs(DomainConfigurationArgs $) {
        this.authorizerConfig = $.authorizerConfig;
        this.domainName = $.domainName;
        this.name = $.name;
        this.serverCertificateArns = $.serverCertificateArns;
        this.serviceType = $.serviceType;
        this.status = $.status;
        this.tags = $.tags;
        this.tlsConfig = $.tlsConfig;
        this.validationCertificateArn = $.validationCertificateArn;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DomainConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DomainConfigurationArgs $;

        public Builder() {
            $ = new DomainConfigurationArgs();
        }

        public Builder(DomainConfigurationArgs defaults) {
            $ = new DomainConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param authorizerConfig An object that specifies the authorization service for a domain. See below.
         * 
         * @return builder
         * 
         */
        public Builder authorizerConfig(@Nullable Output<DomainConfigurationAuthorizerConfigArgs> authorizerConfig) {
            $.authorizerConfig = authorizerConfig;
            return this;
        }

        /**
         * @param authorizerConfig An object that specifies the authorization service for a domain. See below.
         * 
         * @return builder
         * 
         */
        public Builder authorizerConfig(DomainConfigurationAuthorizerConfigArgs authorizerConfig) {
            return authorizerConfig(Output.of(authorizerConfig));
        }

        /**
         * @param domainName Fully-qualified domain name.
         * 
         * @return builder
         * 
         */
        public Builder domainName(@Nullable Output<String> domainName) {
            $.domainName = domainName;
            return this;
        }

        /**
         * @param domainName Fully-qualified domain name.
         * 
         * @return builder
         * 
         */
        public Builder domainName(String domainName) {
            return domainName(Output.of(domainName));
        }

        /**
         * @param name The name of the domain configuration. This value must be unique to a region.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the domain configuration. This value must be unique to a region.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param serverCertificateArns The ARNs of the certificates that IoT passes to the device during the TLS handshake. Currently you can specify only one certificate ARN. This value is not required for Amazon Web Services-managed domains. When using a custom `domain_name`, the cert must include it.
         * 
         * @return builder
         * 
         */
        public Builder serverCertificateArns(@Nullable Output<List<String>> serverCertificateArns) {
            $.serverCertificateArns = serverCertificateArns;
            return this;
        }

        /**
         * @param serverCertificateArns The ARNs of the certificates that IoT passes to the device during the TLS handshake. Currently you can specify only one certificate ARN. This value is not required for Amazon Web Services-managed domains. When using a custom `domain_name`, the cert must include it.
         * 
         * @return builder
         * 
         */
        public Builder serverCertificateArns(List<String> serverCertificateArns) {
            return serverCertificateArns(Output.of(serverCertificateArns));
        }

        /**
         * @param serverCertificateArns The ARNs of the certificates that IoT passes to the device during the TLS handshake. Currently you can specify only one certificate ARN. This value is not required for Amazon Web Services-managed domains. When using a custom `domain_name`, the cert must include it.
         * 
         * @return builder
         * 
         */
        public Builder serverCertificateArns(String... serverCertificateArns) {
            return serverCertificateArns(List.of(serverCertificateArns));
        }

        /**
         * @param serviceType The type of service delivered by the endpoint. Note: Amazon Web Services IoT Core currently supports only the `DATA` service type.
         * 
         * @return builder
         * 
         */
        public Builder serviceType(@Nullable Output<String> serviceType) {
            $.serviceType = serviceType;
            return this;
        }

        /**
         * @param serviceType The type of service delivered by the endpoint. Note: Amazon Web Services IoT Core currently supports only the `DATA` service type.
         * 
         * @return builder
         * 
         */
        public Builder serviceType(String serviceType) {
            return serviceType(Output.of(serviceType));
        }

        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param tags Map of tags to assign to this resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Map of tags to assign to this resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tlsConfig An object that specifies the TLS configuration for a domain. See below.
         * 
         * @return builder
         * 
         */
        public Builder tlsConfig(@Nullable Output<DomainConfigurationTlsConfigArgs> tlsConfig) {
            $.tlsConfig = tlsConfig;
            return this;
        }

        /**
         * @param tlsConfig An object that specifies the TLS configuration for a domain. See below.
         * 
         * @return builder
         * 
         */
        public Builder tlsConfig(DomainConfigurationTlsConfigArgs tlsConfig) {
            return tlsConfig(Output.of(tlsConfig));
        }

        /**
         * @param validationCertificateArn The certificate used to validate the server certificate and prove domain name ownership. This certificate must be signed by a public certificate authority. This value is not required for Amazon Web Services-managed domains.
         * 
         * @return builder
         * 
         */
        public Builder validationCertificateArn(@Nullable Output<String> validationCertificateArn) {
            $.validationCertificateArn = validationCertificateArn;
            return this;
        }

        /**
         * @param validationCertificateArn The certificate used to validate the server certificate and prove domain name ownership. This certificate must be signed by a public certificate authority. This value is not required for Amazon Web Services-managed domains.
         * 
         * @return builder
         * 
         */
        public Builder validationCertificateArn(String validationCertificateArn) {
            return validationCertificateArn(Output.of(validationCertificateArn));
        }

        public DomainConfigurationArgs build() {
            return $;
        }
    }

}
