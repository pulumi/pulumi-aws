// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.secretsmanager.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetRandomPasswordArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetRandomPasswordArgs Empty = new GetRandomPasswordArgs();

    @Import(name="excludeCharacters")
    private @Nullable Output<String> excludeCharacters;

    public Optional<Output<String>> excludeCharacters() {
        return Optional.ofNullable(this.excludeCharacters);
    }

    @Import(name="excludeLowercase")
    private @Nullable Output<Boolean> excludeLowercase;

    public Optional<Output<Boolean>> excludeLowercase() {
        return Optional.ofNullable(this.excludeLowercase);
    }

    @Import(name="excludeNumbers")
    private @Nullable Output<Boolean> excludeNumbers;

    public Optional<Output<Boolean>> excludeNumbers() {
        return Optional.ofNullable(this.excludeNumbers);
    }

    @Import(name="excludePunctuation")
    private @Nullable Output<Boolean> excludePunctuation;

    public Optional<Output<Boolean>> excludePunctuation() {
        return Optional.ofNullable(this.excludePunctuation);
    }

    @Import(name="excludeUppercase")
    private @Nullable Output<Boolean> excludeUppercase;

    public Optional<Output<Boolean>> excludeUppercase() {
        return Optional.ofNullable(this.excludeUppercase);
    }

    @Import(name="includeSpace")
    private @Nullable Output<Boolean> includeSpace;

    public Optional<Output<Boolean>> includeSpace() {
        return Optional.ofNullable(this.includeSpace);
    }

    @Import(name="passwordLength")
    private @Nullable Output<Integer> passwordLength;

    public Optional<Output<Integer>> passwordLength() {
        return Optional.ofNullable(this.passwordLength);
    }

    @Import(name="randomPassword")
    private @Nullable Output<String> randomPassword;

    public Optional<Output<String>> randomPassword() {
        return Optional.ofNullable(this.randomPassword);
    }

    @Import(name="requireEachIncludedType")
    private @Nullable Output<Boolean> requireEachIncludedType;

    public Optional<Output<Boolean>> requireEachIncludedType() {
        return Optional.ofNullable(this.requireEachIncludedType);
    }

    private GetRandomPasswordArgs() {}

    private GetRandomPasswordArgs(GetRandomPasswordArgs $) {
        this.excludeCharacters = $.excludeCharacters;
        this.excludeLowercase = $.excludeLowercase;
        this.excludeNumbers = $.excludeNumbers;
        this.excludePunctuation = $.excludePunctuation;
        this.excludeUppercase = $.excludeUppercase;
        this.includeSpace = $.includeSpace;
        this.passwordLength = $.passwordLength;
        this.randomPassword = $.randomPassword;
        this.requireEachIncludedType = $.requireEachIncludedType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetRandomPasswordArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetRandomPasswordArgs $;

        public Builder() {
            $ = new GetRandomPasswordArgs();
        }

        public Builder(GetRandomPasswordArgs defaults) {
            $ = new GetRandomPasswordArgs(Objects.requireNonNull(defaults));
        }

        public Builder excludeCharacters(@Nullable Output<String> excludeCharacters) {
            $.excludeCharacters = excludeCharacters;
            return this;
        }

        public Builder excludeCharacters(String excludeCharacters) {
            return excludeCharacters(Output.of(excludeCharacters));
        }

        public Builder excludeLowercase(@Nullable Output<Boolean> excludeLowercase) {
            $.excludeLowercase = excludeLowercase;
            return this;
        }

        public Builder excludeLowercase(Boolean excludeLowercase) {
            return excludeLowercase(Output.of(excludeLowercase));
        }

        public Builder excludeNumbers(@Nullable Output<Boolean> excludeNumbers) {
            $.excludeNumbers = excludeNumbers;
            return this;
        }

        public Builder excludeNumbers(Boolean excludeNumbers) {
            return excludeNumbers(Output.of(excludeNumbers));
        }

        public Builder excludePunctuation(@Nullable Output<Boolean> excludePunctuation) {
            $.excludePunctuation = excludePunctuation;
            return this;
        }

        public Builder excludePunctuation(Boolean excludePunctuation) {
            return excludePunctuation(Output.of(excludePunctuation));
        }

        public Builder excludeUppercase(@Nullable Output<Boolean> excludeUppercase) {
            $.excludeUppercase = excludeUppercase;
            return this;
        }

        public Builder excludeUppercase(Boolean excludeUppercase) {
            return excludeUppercase(Output.of(excludeUppercase));
        }

        public Builder includeSpace(@Nullable Output<Boolean> includeSpace) {
            $.includeSpace = includeSpace;
            return this;
        }

        public Builder includeSpace(Boolean includeSpace) {
            return includeSpace(Output.of(includeSpace));
        }

        public Builder passwordLength(@Nullable Output<Integer> passwordLength) {
            $.passwordLength = passwordLength;
            return this;
        }

        public Builder passwordLength(Integer passwordLength) {
            return passwordLength(Output.of(passwordLength));
        }

        public Builder randomPassword(@Nullable Output<String> randomPassword) {
            $.randomPassword = randomPassword;
            return this;
        }

        public Builder randomPassword(String randomPassword) {
            return randomPassword(Output.of(randomPassword));
        }

        public Builder requireEachIncludedType(@Nullable Output<Boolean> requireEachIncludedType) {
            $.requireEachIncludedType = requireEachIncludedType;
            return this;
        }

        public Builder requireEachIncludedType(Boolean requireEachIncludedType) {
            return requireEachIncludedType(Output.of(requireEachIncludedType));
        }

        public GetRandomPasswordArgs build() {
            return $;
        }
    }

}
