// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.outputs;

import com.pulumi.aws.quicksight.outputs.VisualsTableVisualConditionalFormattingConditionalFormattingOption;
import com.pulumi.core.annotations.CustomType;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class VisualsTableVisualConditionalFormatting {
    private @Nullable List<VisualsTableVisualConditionalFormattingConditionalFormattingOption> conditionalFormattingOptions;

    private VisualsTableVisualConditionalFormatting() {}
    public List<VisualsTableVisualConditionalFormattingConditionalFormattingOption> conditionalFormattingOptions() {
        return this.conditionalFormattingOptions == null ? List.of() : this.conditionalFormattingOptions;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VisualsTableVisualConditionalFormatting defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<VisualsTableVisualConditionalFormattingConditionalFormattingOption> conditionalFormattingOptions;
        public Builder() {}
        public Builder(VisualsTableVisualConditionalFormatting defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.conditionalFormattingOptions = defaults.conditionalFormattingOptions;
        }

        @CustomType.Setter
        public Builder conditionalFormattingOptions(@Nullable List<VisualsTableVisualConditionalFormattingConditionalFormattingOption> conditionalFormattingOptions) {

            this.conditionalFormattingOptions = conditionalFormattingOptions;
            return this;
        }
        public Builder conditionalFormattingOptions(VisualsTableVisualConditionalFormattingConditionalFormattingOption... conditionalFormattingOptions) {
            return conditionalFormattingOptions(List.of(conditionalFormattingOptions));
        }
        public VisualsTableVisualConditionalFormatting build() {
            final var _resultValue = new VisualsTableVisualConditionalFormatting();
            _resultValue.conditionalFormattingOptions = conditionalFormattingOptions;
            return _resultValue;
        }
    }
}
