// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.lambda;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProvisionedConcurrencyConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProvisionedConcurrencyConfigArgs Empty = new ProvisionedConcurrencyConfigArgs();

    /**
     * Name or Amazon Resource Name (ARN) of the Lambda Function.
     * 
     */
    @Import(name="functionName", required=true)
    private Output<String> functionName;

    /**
     * @return Name or Amazon Resource Name (ARN) of the Lambda Function.
     * 
     */
    public Output<String> functionName() {
        return this.functionName;
    }

    /**
     * Amount of capacity to allocate. Must be greater than or equal to `1`.
     * 
     */
    @Import(name="provisionedConcurrentExecutions", required=true)
    private Output<Integer> provisionedConcurrentExecutions;

    /**
     * @return Amount of capacity to allocate. Must be greater than or equal to `1`.
     * 
     */
    public Output<Integer> provisionedConcurrentExecutions() {
        return this.provisionedConcurrentExecutions;
    }

    /**
     * Lambda Function version or Lambda Alias name.
     * 
     * The following arguments are optional:
     * 
     */
    @Import(name="qualifier", required=true)
    private Output<String> qualifier;

    /**
     * @return Lambda Function version or Lambda Alias name.
     * 
     * The following arguments are optional:
     * 
     */
    public Output<String> qualifier() {
        return this.qualifier;
    }

    /**
     * Whether to retain the provisoned concurrency configuration upon destruction. Defaults to `false`. If set to `true`, the resource in simply removed from state instead.
     * 
     */
    @Import(name="skipDestroy")
    private @Nullable Output<Boolean> skipDestroy;

    /**
     * @return Whether to retain the provisoned concurrency configuration upon destruction. Defaults to `false`. If set to `true`, the resource in simply removed from state instead.
     * 
     */
    public Optional<Output<Boolean>> skipDestroy() {
        return Optional.ofNullable(this.skipDestroy);
    }

    private ProvisionedConcurrencyConfigArgs() {}

    private ProvisionedConcurrencyConfigArgs(ProvisionedConcurrencyConfigArgs $) {
        this.functionName = $.functionName;
        this.provisionedConcurrentExecutions = $.provisionedConcurrentExecutions;
        this.qualifier = $.qualifier;
        this.skipDestroy = $.skipDestroy;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProvisionedConcurrencyConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProvisionedConcurrencyConfigArgs $;

        public Builder() {
            $ = new ProvisionedConcurrencyConfigArgs();
        }

        public Builder(ProvisionedConcurrencyConfigArgs defaults) {
            $ = new ProvisionedConcurrencyConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param functionName Name or Amazon Resource Name (ARN) of the Lambda Function.
         * 
         * @return builder
         * 
         */
        public Builder functionName(Output<String> functionName) {
            $.functionName = functionName;
            return this;
        }

        /**
         * @param functionName Name or Amazon Resource Name (ARN) of the Lambda Function.
         * 
         * @return builder
         * 
         */
        public Builder functionName(String functionName) {
            return functionName(Output.of(functionName));
        }

        /**
         * @param provisionedConcurrentExecutions Amount of capacity to allocate. Must be greater than or equal to `1`.
         * 
         * @return builder
         * 
         */
        public Builder provisionedConcurrentExecutions(Output<Integer> provisionedConcurrentExecutions) {
            $.provisionedConcurrentExecutions = provisionedConcurrentExecutions;
            return this;
        }

        /**
         * @param provisionedConcurrentExecutions Amount of capacity to allocate. Must be greater than or equal to `1`.
         * 
         * @return builder
         * 
         */
        public Builder provisionedConcurrentExecutions(Integer provisionedConcurrentExecutions) {
            return provisionedConcurrentExecutions(Output.of(provisionedConcurrentExecutions));
        }

        /**
         * @param qualifier Lambda Function version or Lambda Alias name.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder qualifier(Output<String> qualifier) {
            $.qualifier = qualifier;
            return this;
        }

        /**
         * @param qualifier Lambda Function version or Lambda Alias name.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder qualifier(String qualifier) {
            return qualifier(Output.of(qualifier));
        }

        /**
         * @param skipDestroy Whether to retain the provisoned concurrency configuration upon destruction. Defaults to `false`. If set to `true`, the resource in simply removed from state instead.
         * 
         * @return builder
         * 
         */
        public Builder skipDestroy(@Nullable Output<Boolean> skipDestroy) {
            $.skipDestroy = skipDestroy;
            return this;
        }

        /**
         * @param skipDestroy Whether to retain the provisoned concurrency configuration upon destruction. Defaults to `false`. If set to `true`, the resource in simply removed from state instead.
         * 
         * @return builder
         * 
         */
        public Builder skipDestroy(Boolean skipDestroy) {
            return skipDestroy(Output.of(skipDestroy));
        }

        public ProvisionedConcurrencyConfigArgs build() {
            $.functionName = Objects.requireNonNull($.functionName, "expected parameter 'functionName' to be non-null");
            $.provisionedConcurrentExecutions = Objects.requireNonNull($.provisionedConcurrentExecutions, "expected parameter 'provisionedConcurrentExecutions' to be non-null");
            $.qualifier = Objects.requireNonNull($.qualifier, "expected parameter 'qualifier' to be non-null");
            return $;
        }
    }

}
