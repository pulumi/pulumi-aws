// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.lambda;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class ProvisionedConcurrencyConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProvisionedConcurrencyConfigArgs Empty = new ProvisionedConcurrencyConfigArgs();

    @Import(name="functionName", required=true)
    private Output<String> functionName;

    public Output<String> functionName() {
        return this.functionName;
    }

    @Import(name="provisionedConcurrentExecutions", required=true)
    private Output<Integer> provisionedConcurrentExecutions;

    public Output<Integer> provisionedConcurrentExecutions() {
        return this.provisionedConcurrentExecutions;
    }

    @Import(name="qualifier", required=true)
    private Output<String> qualifier;

    public Output<String> qualifier() {
        return this.qualifier;
    }

    private ProvisionedConcurrencyConfigArgs() {}

    private ProvisionedConcurrencyConfigArgs(ProvisionedConcurrencyConfigArgs $) {
        this.functionName = $.functionName;
        this.provisionedConcurrentExecutions = $.provisionedConcurrentExecutions;
        this.qualifier = $.qualifier;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProvisionedConcurrencyConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProvisionedConcurrencyConfigArgs $;

        public Builder() {
            $ = new ProvisionedConcurrencyConfigArgs();
        }

        public Builder(ProvisionedConcurrencyConfigArgs defaults) {
            $ = new ProvisionedConcurrencyConfigArgs(Objects.requireNonNull(defaults));
        }

        public Builder functionName(Output<String> functionName) {
            $.functionName = functionName;
            return this;
        }

        public Builder functionName(String functionName) {
            return functionName(Output.of(functionName));
        }

        public Builder provisionedConcurrentExecutions(Output<Integer> provisionedConcurrentExecutions) {
            $.provisionedConcurrentExecutions = provisionedConcurrentExecutions;
            return this;
        }

        public Builder provisionedConcurrentExecutions(Integer provisionedConcurrentExecutions) {
            return provisionedConcurrentExecutions(Output.of(provisionedConcurrentExecutions));
        }

        public Builder qualifier(Output<String> qualifier) {
            $.qualifier = qualifier;
            return this;
        }

        public Builder qualifier(String qualifier) {
            return qualifier(Output.of(qualifier));
        }

        public ProvisionedConcurrencyConfigArgs build() {
            $.functionName = Objects.requireNonNull($.functionName, "expected parameter 'functionName' to be non-null");
            $.provisionedConcurrentExecutions = Objects.requireNonNull($.provisionedConcurrentExecutions, "expected parameter 'provisionedConcurrentExecutions' to be non-null");
            $.qualifier = Objects.requireNonNull($.qualifier, "expected parameter 'qualifier' to be non-null");
            return $;
        }
    }

}
