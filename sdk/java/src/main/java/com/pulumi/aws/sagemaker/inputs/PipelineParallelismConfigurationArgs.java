// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.sagemaker.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.util.Objects;


public final class PipelineParallelismConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final PipelineParallelismConfigurationArgs Empty = new PipelineParallelismConfigurationArgs();

    /**
     * The max number of steps that can be executed in parallel.
     * 
     */
    @Import(name="maxParallelExecutionSteps", required=true)
    private Output<Integer> maxParallelExecutionSteps;

    /**
     * @return The max number of steps that can be executed in parallel.
     * 
     */
    public Output<Integer> maxParallelExecutionSteps() {
        return this.maxParallelExecutionSteps;
    }

    private PipelineParallelismConfigurationArgs() {}

    private PipelineParallelismConfigurationArgs(PipelineParallelismConfigurationArgs $) {
        this.maxParallelExecutionSteps = $.maxParallelExecutionSteps;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PipelineParallelismConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PipelineParallelismConfigurationArgs $;

        public Builder() {
            $ = new PipelineParallelismConfigurationArgs();
        }

        public Builder(PipelineParallelismConfigurationArgs defaults) {
            $ = new PipelineParallelismConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param maxParallelExecutionSteps The max number of steps that can be executed in parallel.
         * 
         * @return builder
         * 
         */
        public Builder maxParallelExecutionSteps(Output<Integer> maxParallelExecutionSteps) {
            $.maxParallelExecutionSteps = maxParallelExecutionSteps;
            return this;
        }

        /**
         * @param maxParallelExecutionSteps The max number of steps that can be executed in parallel.
         * 
         * @return builder
         * 
         */
        public Builder maxParallelExecutionSteps(Integer maxParallelExecutionSteps) {
            return maxParallelExecutionSteps(Output.of(maxParallelExecutionSteps));
        }

        public PipelineParallelismConfigurationArgs build() {
            $.maxParallelExecutionSteps = Objects.requireNonNull($.maxParallelExecutionSteps, "expected parameter 'maxParallelExecutionSteps' to be non-null");
            return $;
        }
    }

}
