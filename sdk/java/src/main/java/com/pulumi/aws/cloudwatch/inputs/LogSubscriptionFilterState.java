// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.cloudwatch.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LogSubscriptionFilterState extends com.pulumi.resources.ResourceArgs {

    public static final LogSubscriptionFilterState Empty = new LogSubscriptionFilterState();

    @Import(name="destinationArn")
    private @Nullable Output<String> destinationArn;

    public Optional<Output<String>> destinationArn() {
        return Optional.ofNullable(this.destinationArn);
    }

    @Import(name="distribution")
    private @Nullable Output<String> distribution;

    public Optional<Output<String>> distribution() {
        return Optional.ofNullable(this.distribution);
    }

    @Import(name="filterPattern")
    private @Nullable Output<String> filterPattern;

    public Optional<Output<String>> filterPattern() {
        return Optional.ofNullable(this.filterPattern);
    }

    @Import(name="logGroup")
    private @Nullable Output<String> logGroup;

    public Optional<Output<String>> logGroup() {
        return Optional.ofNullable(this.logGroup);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="roleArn")
    private @Nullable Output<String> roleArn;

    public Optional<Output<String>> roleArn() {
        return Optional.ofNullable(this.roleArn);
    }

    private LogSubscriptionFilterState() {}

    private LogSubscriptionFilterState(LogSubscriptionFilterState $) {
        this.destinationArn = $.destinationArn;
        this.distribution = $.distribution;
        this.filterPattern = $.filterPattern;
        this.logGroup = $.logGroup;
        this.name = $.name;
        this.roleArn = $.roleArn;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LogSubscriptionFilterState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LogSubscriptionFilterState $;

        public Builder() {
            $ = new LogSubscriptionFilterState();
        }

        public Builder(LogSubscriptionFilterState defaults) {
            $ = new LogSubscriptionFilterState(Objects.requireNonNull(defaults));
        }

        public Builder destinationArn(@Nullable Output<String> destinationArn) {
            $.destinationArn = destinationArn;
            return this;
        }

        public Builder destinationArn(String destinationArn) {
            return destinationArn(Output.of(destinationArn));
        }

        public Builder distribution(@Nullable Output<String> distribution) {
            $.distribution = distribution;
            return this;
        }

        public Builder distribution(String distribution) {
            return distribution(Output.of(distribution));
        }

        public Builder filterPattern(@Nullable Output<String> filterPattern) {
            $.filterPattern = filterPattern;
            return this;
        }

        public Builder filterPattern(String filterPattern) {
            return filterPattern(Output.of(filterPattern));
        }

        public Builder logGroup(@Nullable Output<String> logGroup) {
            $.logGroup = logGroup;
            return this;
        }

        public Builder logGroup(String logGroup) {
            return logGroup(Output.of(logGroup));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder roleArn(@Nullable Output<String> roleArn) {
            $.roleArn = roleArn;
            return this;
        }

        public Builder roleArn(String roleArn) {
            return roleArn(Output.of(roleArn));
        }

        public LogSubscriptionFilterState build() {
            return $;
        }
    }

}
