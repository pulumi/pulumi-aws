// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.vpclattice;

import com.pulumi.aws.vpclattice.inputs.ResourceConfigurationResourceConfigurationDefinitionArgs;
import com.pulumi.aws.vpclattice.inputs.ResourceConfigurationTimeoutsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ResourceConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final ResourceConfigurationArgs Empty = new ResourceConfigurationArgs();

    /**
     * Allow or Deny the association of this resource to a shareable service network.
     * 
     */
    @Import(name="allowAssociationToShareableServiceNetwork")
    private @Nullable Output<Boolean> allowAssociationToShareableServiceNetwork;

    /**
     * @return Allow or Deny the association of this resource to a shareable service network.
     * 
     */
    public Optional<Output<Boolean>> allowAssociationToShareableServiceNetwork() {
        return Optional.ofNullable(this.allowAssociationToShareableServiceNetwork);
    }

    /**
     * Name for the Resource Configuration.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name for the Resource Configuration.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Port ranges to access the Resource either single port `80` or range `80-81` range.
     * 
     */
    @Import(name="portRanges")
    private @Nullable Output<List<String>> portRanges;

    /**
     * @return Port ranges to access the Resource either single port `80` or range `80-81` range.
     * 
     */
    public Optional<Output<List<String>>> portRanges() {
        return Optional.ofNullable(this.portRanges);
    }

    /**
     * Protocol for the Resource `TCP` is currently the only supported value.  MUST be specified if `resource_configuration_group_id` is not.
     * 
     */
    @Import(name="protocol")
    private @Nullable Output<String> protocol;

    /**
     * @return Protocol for the Resource `TCP` is currently the only supported value.  MUST be specified if `resource_configuration_group_id` is not.
     * 
     */
    public Optional<Output<String>> protocol() {
        return Optional.ofNullable(this.protocol);
    }

    /**
     * Details of the Resource Configuration. See `resource_configuration_definition` Block for details.
     * 
     * The following arguments are optional:
     * 
     */
    @Import(name="resourceConfigurationDefinition")
    private @Nullable Output<ResourceConfigurationResourceConfigurationDefinitionArgs> resourceConfigurationDefinition;

    /**
     * @return Details of the Resource Configuration. See `resource_configuration_definition` Block for details.
     * 
     * The following arguments are optional:
     * 
     */
    public Optional<Output<ResourceConfigurationResourceConfigurationDefinitionArgs>> resourceConfigurationDefinition() {
        return Optional.ofNullable(this.resourceConfigurationDefinition);
    }

    /**
     * ID of Resource Configuration where `type` is `CHILD`.
     * 
     */
    @Import(name="resourceConfigurationGroupId")
    private @Nullable Output<String> resourceConfigurationGroupId;

    /**
     * @return ID of Resource Configuration where `type` is `CHILD`.
     * 
     */
    public Optional<Output<String>> resourceConfigurationGroupId() {
        return Optional.ofNullable(this.resourceConfigurationGroupId);
    }

    /**
     * ID of the Resource Gateway used to access the resource. MUST be specified if `resource_configuration_group_id` is not.
     * 
     */
    @Import(name="resourceGatewayIdentifier")
    private @Nullable Output<String> resourceGatewayIdentifier;

    /**
     * @return ID of the Resource Gateway used to access the resource. MUST be specified if `resource_configuration_group_id` is not.
     * 
     */
    public Optional<Output<String>> resourceGatewayIdentifier() {
        return Optional.ofNullable(this.resourceGatewayIdentifier);
    }

    /**
     * Key-value mapping of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Key-value mapping of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="timeouts")
    private @Nullable Output<ResourceConfigurationTimeoutsArgs> timeouts;

    public Optional<Output<ResourceConfigurationTimeoutsArgs>> timeouts() {
        return Optional.ofNullable(this.timeouts);
    }

    /**
     * Type of Resource Configuration. Must be one of `GROUP`, `CHILD`, `SINGLE`, `ARN`.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Type of Resource Configuration. Must be one of `GROUP`, `CHILD`, `SINGLE`, `ARN`.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private ResourceConfigurationArgs() {}

    private ResourceConfigurationArgs(ResourceConfigurationArgs $) {
        this.allowAssociationToShareableServiceNetwork = $.allowAssociationToShareableServiceNetwork;
        this.name = $.name;
        this.portRanges = $.portRanges;
        this.protocol = $.protocol;
        this.resourceConfigurationDefinition = $.resourceConfigurationDefinition;
        this.resourceConfigurationGroupId = $.resourceConfigurationGroupId;
        this.resourceGatewayIdentifier = $.resourceGatewayIdentifier;
        this.tags = $.tags;
        this.timeouts = $.timeouts;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ResourceConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ResourceConfigurationArgs $;

        public Builder() {
            $ = new ResourceConfigurationArgs();
        }

        public Builder(ResourceConfigurationArgs defaults) {
            $ = new ResourceConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowAssociationToShareableServiceNetwork Allow or Deny the association of this resource to a shareable service network.
         * 
         * @return builder
         * 
         */
        public Builder allowAssociationToShareableServiceNetwork(@Nullable Output<Boolean> allowAssociationToShareableServiceNetwork) {
            $.allowAssociationToShareableServiceNetwork = allowAssociationToShareableServiceNetwork;
            return this;
        }

        /**
         * @param allowAssociationToShareableServiceNetwork Allow or Deny the association of this resource to a shareable service network.
         * 
         * @return builder
         * 
         */
        public Builder allowAssociationToShareableServiceNetwork(Boolean allowAssociationToShareableServiceNetwork) {
            return allowAssociationToShareableServiceNetwork(Output.of(allowAssociationToShareableServiceNetwork));
        }

        /**
         * @param name Name for the Resource Configuration.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name for the Resource Configuration.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param portRanges Port ranges to access the Resource either single port `80` or range `80-81` range.
         * 
         * @return builder
         * 
         */
        public Builder portRanges(@Nullable Output<List<String>> portRanges) {
            $.portRanges = portRanges;
            return this;
        }

        /**
         * @param portRanges Port ranges to access the Resource either single port `80` or range `80-81` range.
         * 
         * @return builder
         * 
         */
        public Builder portRanges(List<String> portRanges) {
            return portRanges(Output.of(portRanges));
        }

        /**
         * @param portRanges Port ranges to access the Resource either single port `80` or range `80-81` range.
         * 
         * @return builder
         * 
         */
        public Builder portRanges(String... portRanges) {
            return portRanges(List.of(portRanges));
        }

        /**
         * @param protocol Protocol for the Resource `TCP` is currently the only supported value.  MUST be specified if `resource_configuration_group_id` is not.
         * 
         * @return builder
         * 
         */
        public Builder protocol(@Nullable Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol Protocol for the Resource `TCP` is currently the only supported value.  MUST be specified if `resource_configuration_group_id` is not.
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        /**
         * @param resourceConfigurationDefinition Details of the Resource Configuration. See `resource_configuration_definition` Block for details.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder resourceConfigurationDefinition(@Nullable Output<ResourceConfigurationResourceConfigurationDefinitionArgs> resourceConfigurationDefinition) {
            $.resourceConfigurationDefinition = resourceConfigurationDefinition;
            return this;
        }

        /**
         * @param resourceConfigurationDefinition Details of the Resource Configuration. See `resource_configuration_definition` Block for details.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder resourceConfigurationDefinition(ResourceConfigurationResourceConfigurationDefinitionArgs resourceConfigurationDefinition) {
            return resourceConfigurationDefinition(Output.of(resourceConfigurationDefinition));
        }

        /**
         * @param resourceConfigurationGroupId ID of Resource Configuration where `type` is `CHILD`.
         * 
         * @return builder
         * 
         */
        public Builder resourceConfigurationGroupId(@Nullable Output<String> resourceConfigurationGroupId) {
            $.resourceConfigurationGroupId = resourceConfigurationGroupId;
            return this;
        }

        /**
         * @param resourceConfigurationGroupId ID of Resource Configuration where `type` is `CHILD`.
         * 
         * @return builder
         * 
         */
        public Builder resourceConfigurationGroupId(String resourceConfigurationGroupId) {
            return resourceConfigurationGroupId(Output.of(resourceConfigurationGroupId));
        }

        /**
         * @param resourceGatewayIdentifier ID of the Resource Gateway used to access the resource. MUST be specified if `resource_configuration_group_id` is not.
         * 
         * @return builder
         * 
         */
        public Builder resourceGatewayIdentifier(@Nullable Output<String> resourceGatewayIdentifier) {
            $.resourceGatewayIdentifier = resourceGatewayIdentifier;
            return this;
        }

        /**
         * @param resourceGatewayIdentifier ID of the Resource Gateway used to access the resource. MUST be specified if `resource_configuration_group_id` is not.
         * 
         * @return builder
         * 
         */
        public Builder resourceGatewayIdentifier(String resourceGatewayIdentifier) {
            return resourceGatewayIdentifier(Output.of(resourceGatewayIdentifier));
        }

        /**
         * @param tags Key-value mapping of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Key-value mapping of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder timeouts(@Nullable Output<ResourceConfigurationTimeoutsArgs> timeouts) {
            $.timeouts = timeouts;
            return this;
        }

        public Builder timeouts(ResourceConfigurationTimeoutsArgs timeouts) {
            return timeouts(Output.of(timeouts));
        }

        /**
         * @param type Type of Resource Configuration. Must be one of `GROUP`, `CHILD`, `SINGLE`, `ARN`.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of Resource Configuration. Must be one of `GROUP`, `CHILD`, `SINGLE`, `ARN`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public ResourceConfigurationArgs build() {
            return $;
        }
    }

}
