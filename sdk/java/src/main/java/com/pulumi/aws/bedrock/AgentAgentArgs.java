// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.bedrock;

import com.pulumi.aws.bedrock.inputs.AgentAgentPromptOverrideConfigurationArgs;
import com.pulumi.aws.bedrock.inputs.AgentAgentTimeoutsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AgentAgentArgs extends com.pulumi.resources.ResourceArgs {

    public static final AgentAgentArgs Empty = new AgentAgentArgs();

    /**
     * Name for the agent.
     * 
     */
    @Import(name="agentName", required=true)
    private Output<String> agentName;

    /**
     * @return Name for the agent.
     * 
     */
    public Output<String> agentName() {
        return this.agentName;
    }

    /**
     * ARN of the Role for the agent.
     * 
     */
    @Import(name="agentResourceRoleArn", required=true)
    private Output<String> agentResourceRoleArn;

    /**
     * @return ARN of the Role for the agent.
     * 
     */
    public Output<String> agentResourceRoleArn() {
        return this.agentResourceRoleArn;
    }

    /**
     * ARN of customer manager key to use for encryption.
     * 
     */
    @Import(name="customerEncryptionKeyArn")
    private @Nullable Output<String> customerEncryptionKeyArn;

    /**
     * @return ARN of customer manager key to use for encryption.
     * 
     */
    public Optional<Output<String>> customerEncryptionKeyArn() {
        return Optional.ofNullable(this.customerEncryptionKeyArn);
    }

    /**
     * Description of the agent.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the agent.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Foundation model for the agent to use.
     * 
     * The following arguments are optional:
     * 
     */
    @Import(name="foundationModel", required=true)
    private Output<String> foundationModel;

    /**
     * @return Foundation model for the agent to use.
     * 
     * The following arguments are optional:
     * 
     */
    public Output<String> foundationModel() {
        return this.foundationModel;
    }

    /**
     * TTL in seconds for the agent to idle.
     * 
     */
    @Import(name="idleSessionTtlInSeconds")
    private @Nullable Output<Integer> idleSessionTtlInSeconds;

    /**
     * @return TTL in seconds for the agent to idle.
     * 
     */
    public Optional<Output<Integer>> idleSessionTtlInSeconds() {
        return Optional.ofNullable(this.idleSessionTtlInSeconds);
    }

    /**
     * Instructions to tell agent what it should do.
     * 
     */
    @Import(name="instruction")
    private @Nullable Output<String> instruction;

    /**
     * @return Instructions to tell agent what it should do.
     * 
     */
    public Optional<Output<String>> instruction() {
        return Optional.ofNullable(this.instruction);
    }

    /**
     * Whether or not to prepare the agent after creation or modification. Defaults to `true`.
     * 
     */
    @Import(name="prepareAgent")
    private @Nullable Output<Boolean> prepareAgent;

    /**
     * @return Whether or not to prepare the agent after creation or modification. Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> prepareAgent() {
        return Optional.ofNullable(this.prepareAgent);
    }

    /**
     * Prompt override configuration.
     * 
     */
    @Import(name="promptOverrideConfigurations")
    private @Nullable Output<List<AgentAgentPromptOverrideConfigurationArgs>> promptOverrideConfigurations;

    /**
     * @return Prompt override configuration.
     * 
     */
    public Optional<Output<List<AgentAgentPromptOverrideConfigurationArgs>>> promptOverrideConfigurations() {
        return Optional.ofNullable(this.promptOverrideConfigurations);
    }

    /**
     * Key-value tags for the place index. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Key-value tags for the place index. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="timeouts")
    private @Nullable Output<AgentAgentTimeoutsArgs> timeouts;

    public Optional<Output<AgentAgentTimeoutsArgs>> timeouts() {
        return Optional.ofNullable(this.timeouts);
    }

    private AgentAgentArgs() {}

    private AgentAgentArgs(AgentAgentArgs $) {
        this.agentName = $.agentName;
        this.agentResourceRoleArn = $.agentResourceRoleArn;
        this.customerEncryptionKeyArn = $.customerEncryptionKeyArn;
        this.description = $.description;
        this.foundationModel = $.foundationModel;
        this.idleSessionTtlInSeconds = $.idleSessionTtlInSeconds;
        this.instruction = $.instruction;
        this.prepareAgent = $.prepareAgent;
        this.promptOverrideConfigurations = $.promptOverrideConfigurations;
        this.tags = $.tags;
        this.timeouts = $.timeouts;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AgentAgentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AgentAgentArgs $;

        public Builder() {
            $ = new AgentAgentArgs();
        }

        public Builder(AgentAgentArgs defaults) {
            $ = new AgentAgentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param agentName Name for the agent.
         * 
         * @return builder
         * 
         */
        public Builder agentName(Output<String> agentName) {
            $.agentName = agentName;
            return this;
        }

        /**
         * @param agentName Name for the agent.
         * 
         * @return builder
         * 
         */
        public Builder agentName(String agentName) {
            return agentName(Output.of(agentName));
        }

        /**
         * @param agentResourceRoleArn ARN of the Role for the agent.
         * 
         * @return builder
         * 
         */
        public Builder agentResourceRoleArn(Output<String> agentResourceRoleArn) {
            $.agentResourceRoleArn = agentResourceRoleArn;
            return this;
        }

        /**
         * @param agentResourceRoleArn ARN of the Role for the agent.
         * 
         * @return builder
         * 
         */
        public Builder agentResourceRoleArn(String agentResourceRoleArn) {
            return agentResourceRoleArn(Output.of(agentResourceRoleArn));
        }

        /**
         * @param customerEncryptionKeyArn ARN of customer manager key to use for encryption.
         * 
         * @return builder
         * 
         */
        public Builder customerEncryptionKeyArn(@Nullable Output<String> customerEncryptionKeyArn) {
            $.customerEncryptionKeyArn = customerEncryptionKeyArn;
            return this;
        }

        /**
         * @param customerEncryptionKeyArn ARN of customer manager key to use for encryption.
         * 
         * @return builder
         * 
         */
        public Builder customerEncryptionKeyArn(String customerEncryptionKeyArn) {
            return customerEncryptionKeyArn(Output.of(customerEncryptionKeyArn));
        }

        /**
         * @param description Description of the agent.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the agent.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param foundationModel Foundation model for the agent to use.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder foundationModel(Output<String> foundationModel) {
            $.foundationModel = foundationModel;
            return this;
        }

        /**
         * @param foundationModel Foundation model for the agent to use.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder foundationModel(String foundationModel) {
            return foundationModel(Output.of(foundationModel));
        }

        /**
         * @param idleSessionTtlInSeconds TTL in seconds for the agent to idle.
         * 
         * @return builder
         * 
         */
        public Builder idleSessionTtlInSeconds(@Nullable Output<Integer> idleSessionTtlInSeconds) {
            $.idleSessionTtlInSeconds = idleSessionTtlInSeconds;
            return this;
        }

        /**
         * @param idleSessionTtlInSeconds TTL in seconds for the agent to idle.
         * 
         * @return builder
         * 
         */
        public Builder idleSessionTtlInSeconds(Integer idleSessionTtlInSeconds) {
            return idleSessionTtlInSeconds(Output.of(idleSessionTtlInSeconds));
        }

        /**
         * @param instruction Instructions to tell agent what it should do.
         * 
         * @return builder
         * 
         */
        public Builder instruction(@Nullable Output<String> instruction) {
            $.instruction = instruction;
            return this;
        }

        /**
         * @param instruction Instructions to tell agent what it should do.
         * 
         * @return builder
         * 
         */
        public Builder instruction(String instruction) {
            return instruction(Output.of(instruction));
        }

        /**
         * @param prepareAgent Whether or not to prepare the agent after creation or modification. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder prepareAgent(@Nullable Output<Boolean> prepareAgent) {
            $.prepareAgent = prepareAgent;
            return this;
        }

        /**
         * @param prepareAgent Whether or not to prepare the agent after creation or modification. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder prepareAgent(Boolean prepareAgent) {
            return prepareAgent(Output.of(prepareAgent));
        }

        /**
         * @param promptOverrideConfigurations Prompt override configuration.
         * 
         * @return builder
         * 
         */
        public Builder promptOverrideConfigurations(@Nullable Output<List<AgentAgentPromptOverrideConfigurationArgs>> promptOverrideConfigurations) {
            $.promptOverrideConfigurations = promptOverrideConfigurations;
            return this;
        }

        /**
         * @param promptOverrideConfigurations Prompt override configuration.
         * 
         * @return builder
         * 
         */
        public Builder promptOverrideConfigurations(List<AgentAgentPromptOverrideConfigurationArgs> promptOverrideConfigurations) {
            return promptOverrideConfigurations(Output.of(promptOverrideConfigurations));
        }

        /**
         * @param promptOverrideConfigurations Prompt override configuration.
         * 
         * @return builder
         * 
         */
        public Builder promptOverrideConfigurations(AgentAgentPromptOverrideConfigurationArgs... promptOverrideConfigurations) {
            return promptOverrideConfigurations(List.of(promptOverrideConfigurations));
        }

        /**
         * @param tags Key-value tags for the place index. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Key-value tags for the place index. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder timeouts(@Nullable Output<AgentAgentTimeoutsArgs> timeouts) {
            $.timeouts = timeouts;
            return this;
        }

        public Builder timeouts(AgentAgentTimeoutsArgs timeouts) {
            return timeouts(Output.of(timeouts));
        }

        public AgentAgentArgs build() {
            if ($.agentName == null) {
                throw new MissingRequiredPropertyException("AgentAgentArgs", "agentName");
            }
            if ($.agentResourceRoleArn == null) {
                throw new MissingRequiredPropertyException("AgentAgentArgs", "agentResourceRoleArn");
            }
            if ($.foundationModel == null) {
                throw new MissingRequiredPropertyException("AgentAgentArgs", "foundationModel");
            }
            return $;
        }
    }

}
