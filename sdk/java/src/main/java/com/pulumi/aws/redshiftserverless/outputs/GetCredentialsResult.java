// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.redshiftserverless.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetCredentialsResult {
    private @Nullable String dbName;
    /**
     * @return Temporary password that authorizes the user name returned by `db_user` to log on to the database `db_name`.
     * 
     */
    private @Nullable String dbPassword;
    /**
     * @return A database user name that is authorized to log on to the database `db_name` using the password `db_password` . If the specified `db_user` exists in the database, the new user name has the same database privileges as the user named in `db_user` . By default, the user is added to PUBLIC. the user doesn&#39;t exist in the database.
     * 
     */
    private @Nullable String dbUser;
    private @Nullable Integer durationSeconds;
    /**
     * @return Date and time the password in `db_password` expires.
     * 
     */
    private @Nullable String expiration;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private @Nullable String id;
    private String workgroupName;

    private GetCredentialsResult() {}
    public Optional<String> dbName() {
        return Optional.ofNullable(this.dbName);
    }
    /**
     * @return Temporary password that authorizes the user name returned by `db_user` to log on to the database `db_name`.
     * 
     */
    public Optional<String> dbPassword() {
        return Optional.ofNullable(this.dbPassword);
    }
    /**
     * @return A database user name that is authorized to log on to the database `db_name` using the password `db_password` . If the specified `db_user` exists in the database, the new user name has the same database privileges as the user named in `db_user` . By default, the user is added to PUBLIC. the user doesn&#39;t exist in the database.
     * 
     */
    public Optional<String> dbUser() {
        return Optional.ofNullable(this.dbUser);
    }
    public Optional<Integer> durationSeconds() {
        return Optional.ofNullable(this.durationSeconds);
    }
    /**
     * @return Date and time the password in `db_password` expires.
     * 
     */
    public Optional<String> expiration() {
        return Optional.ofNullable(this.expiration);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    public String workgroupName() {
        return this.workgroupName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCredentialsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String dbName;
        private @Nullable String dbPassword;
        private @Nullable String dbUser;
        private @Nullable Integer durationSeconds;
        private @Nullable String expiration;
        private @Nullable String id;
        private String workgroupName;
        public Builder() {}
        public Builder(GetCredentialsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dbName = defaults.dbName;
    	      this.dbPassword = defaults.dbPassword;
    	      this.dbUser = defaults.dbUser;
    	      this.durationSeconds = defaults.durationSeconds;
    	      this.expiration = defaults.expiration;
    	      this.id = defaults.id;
    	      this.workgroupName = defaults.workgroupName;
        }

        @CustomType.Setter
        public Builder dbName(@Nullable String dbName) {
            this.dbName = dbName;
            return this;
        }
        @CustomType.Setter
        public Builder dbPassword(@Nullable String dbPassword) {
            this.dbPassword = dbPassword;
            return this;
        }
        @CustomType.Setter
        public Builder dbUser(@Nullable String dbUser) {
            this.dbUser = dbUser;
            return this;
        }
        @CustomType.Setter
        public Builder durationSeconds(@Nullable Integer durationSeconds) {
            this.durationSeconds = durationSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder expiration(@Nullable String expiration) {
            this.expiration = expiration;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder workgroupName(String workgroupName) {
            this.workgroupName = Objects.requireNonNull(workgroupName);
            return this;
        }
        public GetCredentialsResult build() {
            final var o = new GetCredentialsResult();
            o.dbName = dbName;
            o.dbPassword = dbPassword;
            o.dbUser = dbUser;
            o.durationSeconds = durationSeconds;
            o.expiration = expiration;
            o.id = id;
            o.workgroupName = workgroupName;
            return o;
        }
    }
}
