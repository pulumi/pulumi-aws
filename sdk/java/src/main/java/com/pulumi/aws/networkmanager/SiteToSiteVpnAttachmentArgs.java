// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.networkmanager;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SiteToSiteVpnAttachmentArgs extends com.pulumi.resources.ResourceArgs {

    public static final SiteToSiteVpnAttachmentArgs Empty = new SiteToSiteVpnAttachmentArgs();

    /**
     * The ID of a core network for the VPN attachment.
     * 
     */
    @Import(name="coreNetworkId", required=true)
    private Output<String> coreNetworkId;

    /**
     * @return The ID of a core network for the VPN attachment.
     * 
     */
    public Output<String> coreNetworkId() {
        return this.coreNetworkId;
    }

    /**
     * Key-value tags for the attachment. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Key-value tags for the attachment. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The ARN of the site-to-site VPN connection.
     * 
     * The following arguments are optional:
     * 
     */
    @Import(name="vpnConnectionArn", required=true)
    private Output<String> vpnConnectionArn;

    /**
     * @return The ARN of the site-to-site VPN connection.
     * 
     * The following arguments are optional:
     * 
     */
    public Output<String> vpnConnectionArn() {
        return this.vpnConnectionArn;
    }

    private SiteToSiteVpnAttachmentArgs() {}

    private SiteToSiteVpnAttachmentArgs(SiteToSiteVpnAttachmentArgs $) {
        this.coreNetworkId = $.coreNetworkId;
        this.tags = $.tags;
        this.vpnConnectionArn = $.vpnConnectionArn;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SiteToSiteVpnAttachmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SiteToSiteVpnAttachmentArgs $;

        public Builder() {
            $ = new SiteToSiteVpnAttachmentArgs();
        }

        public Builder(SiteToSiteVpnAttachmentArgs defaults) {
            $ = new SiteToSiteVpnAttachmentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param coreNetworkId The ID of a core network for the VPN attachment.
         * 
         * @return builder
         * 
         */
        public Builder coreNetworkId(Output<String> coreNetworkId) {
            $.coreNetworkId = coreNetworkId;
            return this;
        }

        /**
         * @param coreNetworkId The ID of a core network for the VPN attachment.
         * 
         * @return builder
         * 
         */
        public Builder coreNetworkId(String coreNetworkId) {
            return coreNetworkId(Output.of(coreNetworkId));
        }

        /**
         * @param tags Key-value tags for the attachment. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Key-value tags for the attachment. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param vpnConnectionArn The ARN of the site-to-site VPN connection.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder vpnConnectionArn(Output<String> vpnConnectionArn) {
            $.vpnConnectionArn = vpnConnectionArn;
            return this;
        }

        /**
         * @param vpnConnectionArn The ARN of the site-to-site VPN connection.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder vpnConnectionArn(String vpnConnectionArn) {
            return vpnConnectionArn(Output.of(vpnConnectionArn));
        }

        public SiteToSiteVpnAttachmentArgs build() {
            $.coreNetworkId = Objects.requireNonNull($.coreNetworkId, "expected parameter 'coreNetworkId' to be non-null");
            $.vpnConnectionArn = Objects.requireNonNull($.vpnConnectionArn, "expected parameter 'vpnConnectionArn' to be non-null");
            return $;
        }
    }

}
