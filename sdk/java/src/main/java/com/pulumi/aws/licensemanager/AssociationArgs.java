// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.licensemanager;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AssociationArgs extends com.pulumi.resources.ResourceArgs {

    public static final AssociationArgs Empty = new AssociationArgs();

    /**
     * ARN of the license configuration.
     * 
     */
    @Import(name="licenseConfigurationArn", required=true)
    private Output<String> licenseConfigurationArn;

    /**
     * @return ARN of the license configuration.
     * 
     */
    public Output<String> licenseConfigurationArn() {
        return this.licenseConfigurationArn;
    }

    /**
     * The AWS Region to use for API operations. Overrides the Region set in the provider configuration.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return The AWS Region to use for API operations. Overrides the Region set in the provider configuration.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * ARN of the resource associated with the license configuration.
     * 
     */
    @Import(name="resourceArn", required=true)
    private Output<String> resourceArn;

    /**
     * @return ARN of the resource associated with the license configuration.
     * 
     */
    public Output<String> resourceArn() {
        return this.resourceArn;
    }

    private AssociationArgs() {}

    private AssociationArgs(AssociationArgs $) {
        this.licenseConfigurationArn = $.licenseConfigurationArn;
        this.region = $.region;
        this.resourceArn = $.resourceArn;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AssociationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AssociationArgs $;

        public Builder() {
            $ = new AssociationArgs();
        }

        public Builder(AssociationArgs defaults) {
            $ = new AssociationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param licenseConfigurationArn ARN of the license configuration.
         * 
         * @return builder
         * 
         */
        public Builder licenseConfigurationArn(Output<String> licenseConfigurationArn) {
            $.licenseConfigurationArn = licenseConfigurationArn;
            return this;
        }

        /**
         * @param licenseConfigurationArn ARN of the license configuration.
         * 
         * @return builder
         * 
         */
        public Builder licenseConfigurationArn(String licenseConfigurationArn) {
            return licenseConfigurationArn(Output.of(licenseConfigurationArn));
        }

        /**
         * @param region The AWS Region to use for API operations. Overrides the Region set in the provider configuration.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The AWS Region to use for API operations. Overrides the Region set in the provider configuration.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param resourceArn ARN of the resource associated with the license configuration.
         * 
         * @return builder
         * 
         */
        public Builder resourceArn(Output<String> resourceArn) {
            $.resourceArn = resourceArn;
            return this;
        }

        /**
         * @param resourceArn ARN of the resource associated with the license configuration.
         * 
         * @return builder
         * 
         */
        public Builder resourceArn(String resourceArn) {
            return resourceArn(Output.of(resourceArn));
        }

        public AssociationArgs build() {
            if ($.licenseConfigurationArn == null) {
                throw new MissingRequiredPropertyException("AssociationArgs", "licenseConfigurationArn");
            }
            if ($.resourceArn == null) {
                throw new MissingRequiredPropertyException("AssociationArgs", "resourceArn");
            }
            return $;
        }
    }

}
