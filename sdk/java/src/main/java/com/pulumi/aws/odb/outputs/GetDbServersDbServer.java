// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.odb.outputs;

import com.pulumi.aws.odb.outputs.GetDbServersDbServerDbServerPatchingDetail;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetDbServersDbServer {
    /**
     * @return A list of unique identifiers for the Autonomous VMs.
     * 
     */
    private List<String> autonomousVirtualMachineIds;
    /**
     * @return A list of identifiers for the Autonomous VM clusters.
     * 
     */
    private List<String> autonomousVmClusterIds;
    /**
     * @return The OCI compute model used when you create or clone an instance: **ECPU** or **OCPU**. ECPUs are based on the number of cores elastically allocated from a pool of compute and storage servers, while OCPUs are based on the physical core of a processor with hyper-threading enabled.
     * 
     */
    private String computeModel;
    /**
     * @return The number of CPU cores enabled on the database server.
     * 
     */
    private Integer cpuCoreCount;
    /**
     * @return The date and time when the database server was created.
     * 
     */
    private String createdAt;
    /**
     * @return The amount of local node storage, in gigabytes (GB), that&#39;s allocated on the database server.
     * 
     */
    private Integer dbNodeStorageSizeInGbs;
    /**
     * @return The scheduling details for the quarterly maintenance window. Patching and system updates take place during the maintenance window.
     * 
     */
    private List<GetDbServersDbServerDbServerPatchingDetail> dbServerPatchingDetails;
    /**
     * @return The user-friendly name of the database server. The name doesn&#39;t need to be unique.
     * 
     */
    private String displayName;
    /**
     * @return The ID of the Exadata infrastructure that hosts the database server.
     * 
     */
    private String exadataInfrastructureId;
    private String id;
    /**
     * @return The total number of CPU cores available on the database server.
     * 
     */
    private Integer maxCpuCount;
    /**
     * @return The total amount of local node storage, in gigabytes (GB), that&#39;s available on the database server.
     * 
     */
    private Integer maxDbNodeStorageInGbs;
    /**
     * @return The total amount of memory, in gigabytes (GB), that&#39;s available on the database server.
     * 
     */
    private Integer maxMemoryInGbs;
    /**
     * @return The amount of memory, in gigabytes (GB), that&#39;s allocated on the database server.
     * 
     */
    private Integer memorySizeInGbs;
    /**
     * @return The name of the OCI resource anchor for the database server.
     * 
     */
    private String ociResourceAnchorName;
    /**
     * @return The OCID of the database server.
     * 
     */
    private String ocid;
    /**
     * @return The hardware system model of the Exadata infrastructure that the database server is hosted on. The shape determines the amount of CPU, storage, and memory resources available.
     * 
     */
    private String shape;
    /**
     * @return The current status of the database server.
     * 
     */
    private String status;
    /**
     * @return Additional information about the status of the database server.
     * 
     */
    private String statusReason;
    /**
     * @return The IDs of the VM clusters that are associated with the database server.
     * 
     */
    private List<String> vmClusterIds;

    private GetDbServersDbServer() {}
    /**
     * @return A list of unique identifiers for the Autonomous VMs.
     * 
     */
    public List<String> autonomousVirtualMachineIds() {
        return this.autonomousVirtualMachineIds;
    }
    /**
     * @return A list of identifiers for the Autonomous VM clusters.
     * 
     */
    public List<String> autonomousVmClusterIds() {
        return this.autonomousVmClusterIds;
    }
    /**
     * @return The OCI compute model used when you create or clone an instance: **ECPU** or **OCPU**. ECPUs are based on the number of cores elastically allocated from a pool of compute and storage servers, while OCPUs are based on the physical core of a processor with hyper-threading enabled.
     * 
     */
    public String computeModel() {
        return this.computeModel;
    }
    /**
     * @return The number of CPU cores enabled on the database server.
     * 
     */
    public Integer cpuCoreCount() {
        return this.cpuCoreCount;
    }
    /**
     * @return The date and time when the database server was created.
     * 
     */
    public String createdAt() {
        return this.createdAt;
    }
    /**
     * @return The amount of local node storage, in gigabytes (GB), that&#39;s allocated on the database server.
     * 
     */
    public Integer dbNodeStorageSizeInGbs() {
        return this.dbNodeStorageSizeInGbs;
    }
    /**
     * @return The scheduling details for the quarterly maintenance window. Patching and system updates take place during the maintenance window.
     * 
     */
    public List<GetDbServersDbServerDbServerPatchingDetail> dbServerPatchingDetails() {
        return this.dbServerPatchingDetails;
    }
    /**
     * @return The user-friendly name of the database server. The name doesn&#39;t need to be unique.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return The ID of the Exadata infrastructure that hosts the database server.
     * 
     */
    public String exadataInfrastructureId() {
        return this.exadataInfrastructureId;
    }
    public String id() {
        return this.id;
    }
    /**
     * @return The total number of CPU cores available on the database server.
     * 
     */
    public Integer maxCpuCount() {
        return this.maxCpuCount;
    }
    /**
     * @return The total amount of local node storage, in gigabytes (GB), that&#39;s available on the database server.
     * 
     */
    public Integer maxDbNodeStorageInGbs() {
        return this.maxDbNodeStorageInGbs;
    }
    /**
     * @return The total amount of memory, in gigabytes (GB), that&#39;s available on the database server.
     * 
     */
    public Integer maxMemoryInGbs() {
        return this.maxMemoryInGbs;
    }
    /**
     * @return The amount of memory, in gigabytes (GB), that&#39;s allocated on the database server.
     * 
     */
    public Integer memorySizeInGbs() {
        return this.memorySizeInGbs;
    }
    /**
     * @return The name of the OCI resource anchor for the database server.
     * 
     */
    public String ociResourceAnchorName() {
        return this.ociResourceAnchorName;
    }
    /**
     * @return The OCID of the database server.
     * 
     */
    public String ocid() {
        return this.ocid;
    }
    /**
     * @return The hardware system model of the Exadata infrastructure that the database server is hosted on. The shape determines the amount of CPU, storage, and memory resources available.
     * 
     */
    public String shape() {
        return this.shape;
    }
    /**
     * @return The current status of the database server.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return Additional information about the status of the database server.
     * 
     */
    public String statusReason() {
        return this.statusReason;
    }
    /**
     * @return The IDs of the VM clusters that are associated with the database server.
     * 
     */
    public List<String> vmClusterIds() {
        return this.vmClusterIds;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDbServersDbServer defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> autonomousVirtualMachineIds;
        private List<String> autonomousVmClusterIds;
        private String computeModel;
        private Integer cpuCoreCount;
        private String createdAt;
        private Integer dbNodeStorageSizeInGbs;
        private List<GetDbServersDbServerDbServerPatchingDetail> dbServerPatchingDetails;
        private String displayName;
        private String exadataInfrastructureId;
        private String id;
        private Integer maxCpuCount;
        private Integer maxDbNodeStorageInGbs;
        private Integer maxMemoryInGbs;
        private Integer memorySizeInGbs;
        private String ociResourceAnchorName;
        private String ocid;
        private String shape;
        private String status;
        private String statusReason;
        private List<String> vmClusterIds;
        public Builder() {}
        public Builder(GetDbServersDbServer defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autonomousVirtualMachineIds = defaults.autonomousVirtualMachineIds;
    	      this.autonomousVmClusterIds = defaults.autonomousVmClusterIds;
    	      this.computeModel = defaults.computeModel;
    	      this.cpuCoreCount = defaults.cpuCoreCount;
    	      this.createdAt = defaults.createdAt;
    	      this.dbNodeStorageSizeInGbs = defaults.dbNodeStorageSizeInGbs;
    	      this.dbServerPatchingDetails = defaults.dbServerPatchingDetails;
    	      this.displayName = defaults.displayName;
    	      this.exadataInfrastructureId = defaults.exadataInfrastructureId;
    	      this.id = defaults.id;
    	      this.maxCpuCount = defaults.maxCpuCount;
    	      this.maxDbNodeStorageInGbs = defaults.maxDbNodeStorageInGbs;
    	      this.maxMemoryInGbs = defaults.maxMemoryInGbs;
    	      this.memorySizeInGbs = defaults.memorySizeInGbs;
    	      this.ociResourceAnchorName = defaults.ociResourceAnchorName;
    	      this.ocid = defaults.ocid;
    	      this.shape = defaults.shape;
    	      this.status = defaults.status;
    	      this.statusReason = defaults.statusReason;
    	      this.vmClusterIds = defaults.vmClusterIds;
        }

        @CustomType.Setter
        public Builder autonomousVirtualMachineIds(List<String> autonomousVirtualMachineIds) {
            if (autonomousVirtualMachineIds == null) {
              throw new MissingRequiredPropertyException("GetDbServersDbServer", "autonomousVirtualMachineIds");
            }
            this.autonomousVirtualMachineIds = autonomousVirtualMachineIds;
            return this;
        }
        public Builder autonomousVirtualMachineIds(String... autonomousVirtualMachineIds) {
            return autonomousVirtualMachineIds(List.of(autonomousVirtualMachineIds));
        }
        @CustomType.Setter
        public Builder autonomousVmClusterIds(List<String> autonomousVmClusterIds) {
            if (autonomousVmClusterIds == null) {
              throw new MissingRequiredPropertyException("GetDbServersDbServer", "autonomousVmClusterIds");
            }
            this.autonomousVmClusterIds = autonomousVmClusterIds;
            return this;
        }
        public Builder autonomousVmClusterIds(String... autonomousVmClusterIds) {
            return autonomousVmClusterIds(List.of(autonomousVmClusterIds));
        }
        @CustomType.Setter
        public Builder computeModel(String computeModel) {
            if (computeModel == null) {
              throw new MissingRequiredPropertyException("GetDbServersDbServer", "computeModel");
            }
            this.computeModel = computeModel;
            return this;
        }
        @CustomType.Setter
        public Builder cpuCoreCount(Integer cpuCoreCount) {
            if (cpuCoreCount == null) {
              throw new MissingRequiredPropertyException("GetDbServersDbServer", "cpuCoreCount");
            }
            this.cpuCoreCount = cpuCoreCount;
            return this;
        }
        @CustomType.Setter
        public Builder createdAt(String createdAt) {
            if (createdAt == null) {
              throw new MissingRequiredPropertyException("GetDbServersDbServer", "createdAt");
            }
            this.createdAt = createdAt;
            return this;
        }
        @CustomType.Setter
        public Builder dbNodeStorageSizeInGbs(Integer dbNodeStorageSizeInGbs) {
            if (dbNodeStorageSizeInGbs == null) {
              throw new MissingRequiredPropertyException("GetDbServersDbServer", "dbNodeStorageSizeInGbs");
            }
            this.dbNodeStorageSizeInGbs = dbNodeStorageSizeInGbs;
            return this;
        }
        @CustomType.Setter
        public Builder dbServerPatchingDetails(List<GetDbServersDbServerDbServerPatchingDetail> dbServerPatchingDetails) {
            if (dbServerPatchingDetails == null) {
              throw new MissingRequiredPropertyException("GetDbServersDbServer", "dbServerPatchingDetails");
            }
            this.dbServerPatchingDetails = dbServerPatchingDetails;
            return this;
        }
        public Builder dbServerPatchingDetails(GetDbServersDbServerDbServerPatchingDetail... dbServerPatchingDetails) {
            return dbServerPatchingDetails(List.of(dbServerPatchingDetails));
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetDbServersDbServer", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder exadataInfrastructureId(String exadataInfrastructureId) {
            if (exadataInfrastructureId == null) {
              throw new MissingRequiredPropertyException("GetDbServersDbServer", "exadataInfrastructureId");
            }
            this.exadataInfrastructureId = exadataInfrastructureId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetDbServersDbServer", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder maxCpuCount(Integer maxCpuCount) {
            if (maxCpuCount == null) {
              throw new MissingRequiredPropertyException("GetDbServersDbServer", "maxCpuCount");
            }
            this.maxCpuCount = maxCpuCount;
            return this;
        }
        @CustomType.Setter
        public Builder maxDbNodeStorageInGbs(Integer maxDbNodeStorageInGbs) {
            if (maxDbNodeStorageInGbs == null) {
              throw new MissingRequiredPropertyException("GetDbServersDbServer", "maxDbNodeStorageInGbs");
            }
            this.maxDbNodeStorageInGbs = maxDbNodeStorageInGbs;
            return this;
        }
        @CustomType.Setter
        public Builder maxMemoryInGbs(Integer maxMemoryInGbs) {
            if (maxMemoryInGbs == null) {
              throw new MissingRequiredPropertyException("GetDbServersDbServer", "maxMemoryInGbs");
            }
            this.maxMemoryInGbs = maxMemoryInGbs;
            return this;
        }
        @CustomType.Setter
        public Builder memorySizeInGbs(Integer memorySizeInGbs) {
            if (memorySizeInGbs == null) {
              throw new MissingRequiredPropertyException("GetDbServersDbServer", "memorySizeInGbs");
            }
            this.memorySizeInGbs = memorySizeInGbs;
            return this;
        }
        @CustomType.Setter
        public Builder ociResourceAnchorName(String ociResourceAnchorName) {
            if (ociResourceAnchorName == null) {
              throw new MissingRequiredPropertyException("GetDbServersDbServer", "ociResourceAnchorName");
            }
            this.ociResourceAnchorName = ociResourceAnchorName;
            return this;
        }
        @CustomType.Setter
        public Builder ocid(String ocid) {
            if (ocid == null) {
              throw new MissingRequiredPropertyException("GetDbServersDbServer", "ocid");
            }
            this.ocid = ocid;
            return this;
        }
        @CustomType.Setter
        public Builder shape(String shape) {
            if (shape == null) {
              throw new MissingRequiredPropertyException("GetDbServersDbServer", "shape");
            }
            this.shape = shape;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetDbServersDbServer", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder statusReason(String statusReason) {
            if (statusReason == null) {
              throw new MissingRequiredPropertyException("GetDbServersDbServer", "statusReason");
            }
            this.statusReason = statusReason;
            return this;
        }
        @CustomType.Setter
        public Builder vmClusterIds(List<String> vmClusterIds) {
            if (vmClusterIds == null) {
              throw new MissingRequiredPropertyException("GetDbServersDbServer", "vmClusterIds");
            }
            this.vmClusterIds = vmClusterIds;
            return this;
        }
        public Builder vmClusterIds(String... vmClusterIds) {
            return vmClusterIds(List.of(vmClusterIds));
        }
        public GetDbServersDbServer build() {
            final var _resultValue = new GetDbServersDbServer();
            _resultValue.autonomousVirtualMachineIds = autonomousVirtualMachineIds;
            _resultValue.autonomousVmClusterIds = autonomousVmClusterIds;
            _resultValue.computeModel = computeModel;
            _resultValue.cpuCoreCount = cpuCoreCount;
            _resultValue.createdAt = createdAt;
            _resultValue.dbNodeStorageSizeInGbs = dbNodeStorageSizeInGbs;
            _resultValue.dbServerPatchingDetails = dbServerPatchingDetails;
            _resultValue.displayName = displayName;
            _resultValue.exadataInfrastructureId = exadataInfrastructureId;
            _resultValue.id = id;
            _resultValue.maxCpuCount = maxCpuCount;
            _resultValue.maxDbNodeStorageInGbs = maxDbNodeStorageInGbs;
            _resultValue.maxMemoryInGbs = maxMemoryInGbs;
            _resultValue.memorySizeInGbs = memorySizeInGbs;
            _resultValue.ociResourceAnchorName = ociResourceAnchorName;
            _resultValue.ocid = ocid;
            _resultValue.shape = shape;
            _resultValue.status = status;
            _resultValue.statusReason = statusReason;
            _resultValue.vmClusterIds = vmClusterIds;
            return _resultValue;
        }
    }
}
