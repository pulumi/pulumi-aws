// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ecs.outputs;

import com.pulumi.aws.ecs.outputs.ServiceServiceConnectConfigurationServiceClientAlias;
import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ServiceServiceConnectConfigurationService {
    /**
     * @return The list of client aliases for this Service Connect service. You use these to assign names that can be used by client applications. The maximum number of client aliases that you can have in this list is 1. See below.
     * 
     */
    private @Nullable List<ServiceServiceConnectConfigurationServiceClientAlias> clientAlias;
    /**
     * @return The name of the new AWS Cloud Map service that Amazon ECS creates for this Amazon ECS service.
     * 
     */
    private @Nullable String discoveryName;
    /**
     * @return The port number for the Service Connect proxy to listen on.
     * 
     */
    private @Nullable Integer ingressPortOverride;
    /**
     * @return The name of one of the `portMappings` from all the containers in the task definition of this Amazon ECS service.
     * 
     */
    private String portName;

    private ServiceServiceConnectConfigurationService() {}
    /**
     * @return The list of client aliases for this Service Connect service. You use these to assign names that can be used by client applications. The maximum number of client aliases that you can have in this list is 1. See below.
     * 
     */
    public List<ServiceServiceConnectConfigurationServiceClientAlias> clientAlias() {
        return this.clientAlias == null ? List.of() : this.clientAlias;
    }
    /**
     * @return The name of the new AWS Cloud Map service that Amazon ECS creates for this Amazon ECS service.
     * 
     */
    public Optional<String> discoveryName() {
        return Optional.ofNullable(this.discoveryName);
    }
    /**
     * @return The port number for the Service Connect proxy to listen on.
     * 
     */
    public Optional<Integer> ingressPortOverride() {
        return Optional.ofNullable(this.ingressPortOverride);
    }
    /**
     * @return The name of one of the `portMappings` from all the containers in the task definition of this Amazon ECS service.
     * 
     */
    public String portName() {
        return this.portName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ServiceServiceConnectConfigurationService defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<ServiceServiceConnectConfigurationServiceClientAlias> clientAlias;
        private @Nullable String discoveryName;
        private @Nullable Integer ingressPortOverride;
        private String portName;
        public Builder() {}
        public Builder(ServiceServiceConnectConfigurationService defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clientAlias = defaults.clientAlias;
    	      this.discoveryName = defaults.discoveryName;
    	      this.ingressPortOverride = defaults.ingressPortOverride;
    	      this.portName = defaults.portName;
        }

        @CustomType.Setter
        public Builder clientAlias(@Nullable List<ServiceServiceConnectConfigurationServiceClientAlias> clientAlias) {
            this.clientAlias = clientAlias;
            return this;
        }
        public Builder clientAlias(ServiceServiceConnectConfigurationServiceClientAlias... clientAlias) {
            return clientAlias(List.of(clientAlias));
        }
        @CustomType.Setter
        public Builder discoveryName(@Nullable String discoveryName) {
            this.discoveryName = discoveryName;
            return this;
        }
        @CustomType.Setter
        public Builder ingressPortOverride(@Nullable Integer ingressPortOverride) {
            this.ingressPortOverride = ingressPortOverride;
            return this;
        }
        @CustomType.Setter
        public Builder portName(String portName) {
            this.portName = Objects.requireNonNull(portName);
            return this;
        }
        public ServiceServiceConnectConfigurationService build() {
            final var _resultValue = new ServiceServiceConnectConfigurationService();
            _resultValue.clientAlias = clientAlias;
            _resultValue.discoveryName = discoveryName;
            _resultValue.ingressPortOverride = ingressPortOverride;
            _resultValue.portName = portName;
            return _resultValue;
        }
    }
}
