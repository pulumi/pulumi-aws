// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.backup.outputs;

import com.pulumi.aws.backup.outputs.GetFrameworkControlInputParameter;
import com.pulumi.aws.backup.outputs.GetFrameworkControlScope;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetFrameworkControl {
    /**
     * @return One or more input parameter blocks. An example of a control with two parameters is: &#34;backup plan frequency is at least daily and the retention period is at least 1 year&#34;. The first parameter is daily. The second parameter is 1 year. Detailed below.
     * 
     */
    private @Nullable List<GetFrameworkControlInputParameter> inputParameters;
    /**
     * @return Backup framework name.
     * 
     */
    private @Nullable String name;
    /**
     * @return Scope of a control. The control scope defines what the control will evaluate. Three examples of control scopes are: a specific backup plan, all backup plans with a specific tag, or all backup plans. Detailed below.
     * 
     */
    private @Nullable List<GetFrameworkControlScope> scopes;

    private GetFrameworkControl() {}
    /**
     * @return One or more input parameter blocks. An example of a control with two parameters is: &#34;backup plan frequency is at least daily and the retention period is at least 1 year&#34;. The first parameter is daily. The second parameter is 1 year. Detailed below.
     * 
     */
    public List<GetFrameworkControlInputParameter> inputParameters() {
        return this.inputParameters == null ? List.of() : this.inputParameters;
    }
    /**
     * @return Backup framework name.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return Scope of a control. The control scope defines what the control will evaluate. Three examples of control scopes are: a specific backup plan, all backup plans with a specific tag, or all backup plans. Detailed below.
     * 
     */
    public List<GetFrameworkControlScope> scopes() {
        return this.scopes == null ? List.of() : this.scopes;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetFrameworkControl defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<GetFrameworkControlInputParameter> inputParameters;
        private @Nullable String name;
        private @Nullable List<GetFrameworkControlScope> scopes;
        public Builder() {}
        public Builder(GetFrameworkControl defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.inputParameters = defaults.inputParameters;
    	      this.name = defaults.name;
    	      this.scopes = defaults.scopes;
        }

        @CustomType.Setter
        public Builder inputParameters(@Nullable List<GetFrameworkControlInputParameter> inputParameters) {
            this.inputParameters = inputParameters;
            return this;
        }
        public Builder inputParameters(GetFrameworkControlInputParameter... inputParameters) {
            return inputParameters(List.of(inputParameters));
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder scopes(@Nullable List<GetFrameworkControlScope> scopes) {
            this.scopes = scopes;
            return this;
        }
        public Builder scopes(GetFrameworkControlScope... scopes) {
            return scopes(List.of(scopes));
        }
        public GetFrameworkControl build() {
            final var o = new GetFrameworkControl();
            o.inputParameters = inputParameters;
            o.name = name;
            o.scopes = scopes;
            return o;
        }
    }
}
