// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.fms.outputs;

import com.pulumi.aws.fms.outputs.PolicySecurityServicePolicyDataPolicyOptionNetworkAclCommonPolicyNetworkAclEntrySetLastEntryIcmpTypeCode;
import com.pulumi.aws.fms.outputs.PolicySecurityServicePolicyDataPolicyOptionNetworkAclCommonPolicyNetworkAclEntrySetLastEntryPortRange;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class PolicySecurityServicePolicyDataPolicyOptionNetworkAclCommonPolicyNetworkAclEntrySetLastEntry {
    /**
     * @return A string value containing the IPv4 network range to allow or deny, in CIDR notation.
     * 
     */
    private @Nullable String cidrBlock;
    /**
     * @return A boolean value, if true Firewall Manager creates egress rule. If false Firewall Manager creates ingress rule.
     * 
     */
    private Boolean egress;
    /**
     * @return A configuration block for ICMP protocol: The ICMP type and code. See the `icmp_type_code` block.
     * 
     */
    private @Nullable List<PolicySecurityServicePolicyDataPolicyOptionNetworkAclCommonPolicyNetworkAclEntrySetLastEntryIcmpTypeCode> icmpTypeCodes;
    /**
     * @return A string value containing the IPv6 network range to allow or deny, in CIDR notation.
     * 
     */
    private @Nullable String ipv6CidrBlock;
    /**
     * @return A configuration block for PortRange. See the `port_range` block.
     * 
     */
    private @Nullable List<PolicySecurityServicePolicyDataPolicyOptionNetworkAclCommonPolicyNetworkAclEntrySetLastEntryPortRange> portRanges;
    /**
     * @return The protocol number. A value of &#34;-1&#34; means all protocols.
     * 
     */
    private String protocol;
    /**
     * @return A string value that indicates whether to allow or deny the traffic that matches the rule. Valid values: `allow`, `deny`.
     * 
     */
    private String ruleAction;

    private PolicySecurityServicePolicyDataPolicyOptionNetworkAclCommonPolicyNetworkAclEntrySetLastEntry() {}
    /**
     * @return A string value containing the IPv4 network range to allow or deny, in CIDR notation.
     * 
     */
    public Optional<String> cidrBlock() {
        return Optional.ofNullable(this.cidrBlock);
    }
    /**
     * @return A boolean value, if true Firewall Manager creates egress rule. If false Firewall Manager creates ingress rule.
     * 
     */
    public Boolean egress() {
        return this.egress;
    }
    /**
     * @return A configuration block for ICMP protocol: The ICMP type and code. See the `icmp_type_code` block.
     * 
     */
    public List<PolicySecurityServicePolicyDataPolicyOptionNetworkAclCommonPolicyNetworkAclEntrySetLastEntryIcmpTypeCode> icmpTypeCodes() {
        return this.icmpTypeCodes == null ? List.of() : this.icmpTypeCodes;
    }
    /**
     * @return A string value containing the IPv6 network range to allow or deny, in CIDR notation.
     * 
     */
    public Optional<String> ipv6CidrBlock() {
        return Optional.ofNullable(this.ipv6CidrBlock);
    }
    /**
     * @return A configuration block for PortRange. See the `port_range` block.
     * 
     */
    public List<PolicySecurityServicePolicyDataPolicyOptionNetworkAclCommonPolicyNetworkAclEntrySetLastEntryPortRange> portRanges() {
        return this.portRanges == null ? List.of() : this.portRanges;
    }
    /**
     * @return The protocol number. A value of &#34;-1&#34; means all protocols.
     * 
     */
    public String protocol() {
        return this.protocol;
    }
    /**
     * @return A string value that indicates whether to allow or deny the traffic that matches the rule. Valid values: `allow`, `deny`.
     * 
     */
    public String ruleAction() {
        return this.ruleAction;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PolicySecurityServicePolicyDataPolicyOptionNetworkAclCommonPolicyNetworkAclEntrySetLastEntry defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String cidrBlock;
        private Boolean egress;
        private @Nullable List<PolicySecurityServicePolicyDataPolicyOptionNetworkAclCommonPolicyNetworkAclEntrySetLastEntryIcmpTypeCode> icmpTypeCodes;
        private @Nullable String ipv6CidrBlock;
        private @Nullable List<PolicySecurityServicePolicyDataPolicyOptionNetworkAclCommonPolicyNetworkAclEntrySetLastEntryPortRange> portRanges;
        private String protocol;
        private String ruleAction;
        public Builder() {}
        public Builder(PolicySecurityServicePolicyDataPolicyOptionNetworkAclCommonPolicyNetworkAclEntrySetLastEntry defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cidrBlock = defaults.cidrBlock;
    	      this.egress = defaults.egress;
    	      this.icmpTypeCodes = defaults.icmpTypeCodes;
    	      this.ipv6CidrBlock = defaults.ipv6CidrBlock;
    	      this.portRanges = defaults.portRanges;
    	      this.protocol = defaults.protocol;
    	      this.ruleAction = defaults.ruleAction;
        }

        @CustomType.Setter
        public Builder cidrBlock(@Nullable String cidrBlock) {

            this.cidrBlock = cidrBlock;
            return this;
        }
        @CustomType.Setter
        public Builder egress(Boolean egress) {
            if (egress == null) {
              throw new MissingRequiredPropertyException("PolicySecurityServicePolicyDataPolicyOptionNetworkAclCommonPolicyNetworkAclEntrySetLastEntry", "egress");
            }
            this.egress = egress;
            return this;
        }
        @CustomType.Setter
        public Builder icmpTypeCodes(@Nullable List<PolicySecurityServicePolicyDataPolicyOptionNetworkAclCommonPolicyNetworkAclEntrySetLastEntryIcmpTypeCode> icmpTypeCodes) {

            this.icmpTypeCodes = icmpTypeCodes;
            return this;
        }
        public Builder icmpTypeCodes(PolicySecurityServicePolicyDataPolicyOptionNetworkAclCommonPolicyNetworkAclEntrySetLastEntryIcmpTypeCode... icmpTypeCodes) {
            return icmpTypeCodes(List.of(icmpTypeCodes));
        }
        @CustomType.Setter
        public Builder ipv6CidrBlock(@Nullable String ipv6CidrBlock) {

            this.ipv6CidrBlock = ipv6CidrBlock;
            return this;
        }
        @CustomType.Setter
        public Builder portRanges(@Nullable List<PolicySecurityServicePolicyDataPolicyOptionNetworkAclCommonPolicyNetworkAclEntrySetLastEntryPortRange> portRanges) {

            this.portRanges = portRanges;
            return this;
        }
        public Builder portRanges(PolicySecurityServicePolicyDataPolicyOptionNetworkAclCommonPolicyNetworkAclEntrySetLastEntryPortRange... portRanges) {
            return portRanges(List.of(portRanges));
        }
        @CustomType.Setter
        public Builder protocol(String protocol) {
            if (protocol == null) {
              throw new MissingRequiredPropertyException("PolicySecurityServicePolicyDataPolicyOptionNetworkAclCommonPolicyNetworkAclEntrySetLastEntry", "protocol");
            }
            this.protocol = protocol;
            return this;
        }
        @CustomType.Setter
        public Builder ruleAction(String ruleAction) {
            if (ruleAction == null) {
              throw new MissingRequiredPropertyException("PolicySecurityServicePolicyDataPolicyOptionNetworkAclCommonPolicyNetworkAclEntrySetLastEntry", "ruleAction");
            }
            this.ruleAction = ruleAction;
            return this;
        }
        public PolicySecurityServicePolicyDataPolicyOptionNetworkAclCommonPolicyNetworkAclEntrySetLastEntry build() {
            final var _resultValue = new PolicySecurityServicePolicyDataPolicyOptionNetworkAclCommonPolicyNetworkAclEntrySetLastEntry();
            _resultValue.cidrBlock = cidrBlock;
            _resultValue.egress = egress;
            _resultValue.icmpTypeCodes = icmpTypeCodes;
            _resultValue.ipv6CidrBlock = ipv6CidrBlock;
            _resultValue.portRanges = portRanges;
            _resultValue.protocol = protocol;
            _resultValue.ruleAction = ruleAction;
            return _resultValue;
        }
    }
}
