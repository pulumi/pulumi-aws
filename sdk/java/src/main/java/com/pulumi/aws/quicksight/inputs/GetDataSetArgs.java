// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.inputs;

import com.pulumi.aws.quicksight.inputs.GetDataSetColumnLevelPermissionRuleArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetDataSetArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetDataSetArgs Empty = new GetDataSetArgs();

    /**
     * AWS account ID.
     * 
     */
    @Import(name="awsAccountId")
    private @Nullable Output<String> awsAccountId;

    /**
     * @return AWS account ID.
     * 
     */
    public Optional<Output<String>> awsAccountId() {
        return Optional.ofNullable(this.awsAccountId);
    }

    @Import(name="columnLevelPermissionRules")
    private @Nullable Output<List<GetDataSetColumnLevelPermissionRuleArgs>> columnLevelPermissionRules;

    public Optional<Output<List<GetDataSetColumnLevelPermissionRuleArgs>>> columnLevelPermissionRules() {
        return Optional.ofNullable(this.columnLevelPermissionRules);
    }

    /**
     * Identifier for the data set.
     * 
     * The following arguments are optional:
     * 
     */
    @Import(name="dataSetId", required=true)
    private Output<String> dataSetId;

    /**
     * @return Identifier for the data set.
     * 
     * The following arguments are optional:
     * 
     */
    public Output<String> dataSetId() {
        return this.dataSetId;
    }

    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private GetDataSetArgs() {}

    private GetDataSetArgs(GetDataSetArgs $) {
        this.awsAccountId = $.awsAccountId;
        this.columnLevelPermissionRules = $.columnLevelPermissionRules;
        this.dataSetId = $.dataSetId;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetDataSetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetDataSetArgs $;

        public Builder() {
            $ = new GetDataSetArgs();
        }

        public Builder(GetDataSetArgs defaults) {
            $ = new GetDataSetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param awsAccountId AWS account ID.
         * 
         * @return builder
         * 
         */
        public Builder awsAccountId(@Nullable Output<String> awsAccountId) {
            $.awsAccountId = awsAccountId;
            return this;
        }

        /**
         * @param awsAccountId AWS account ID.
         * 
         * @return builder
         * 
         */
        public Builder awsAccountId(String awsAccountId) {
            return awsAccountId(Output.of(awsAccountId));
        }

        public Builder columnLevelPermissionRules(@Nullable Output<List<GetDataSetColumnLevelPermissionRuleArgs>> columnLevelPermissionRules) {
            $.columnLevelPermissionRules = columnLevelPermissionRules;
            return this;
        }

        public Builder columnLevelPermissionRules(List<GetDataSetColumnLevelPermissionRuleArgs> columnLevelPermissionRules) {
            return columnLevelPermissionRules(Output.of(columnLevelPermissionRules));
        }

        public Builder columnLevelPermissionRules(GetDataSetColumnLevelPermissionRuleArgs... columnLevelPermissionRules) {
            return columnLevelPermissionRules(List.of(columnLevelPermissionRules));
        }

        /**
         * @param dataSetId Identifier for the data set.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder dataSetId(Output<String> dataSetId) {
            $.dataSetId = dataSetId;
            return this;
        }

        /**
         * @param dataSetId Identifier for the data set.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder dataSetId(String dataSetId) {
            return dataSetId(Output.of(dataSetId));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public GetDataSetArgs build() {
            $.dataSetId = Objects.requireNonNull($.dataSetId, "expected parameter 'dataSetId' to be non-null");
            return $;
        }
    }

}
