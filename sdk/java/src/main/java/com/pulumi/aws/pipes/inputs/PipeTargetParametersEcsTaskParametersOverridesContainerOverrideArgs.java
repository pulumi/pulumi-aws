// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.pipes.inputs;

import com.pulumi.aws.pipes.inputs.PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentArgs;
import com.pulumi.aws.pipes.inputs.PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileArgs;
import com.pulumi.aws.pipes.inputs.PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PipeTargetParametersEcsTaskParametersOverridesContainerOverrideArgs extends com.pulumi.resources.ResourceArgs {

    public static final PipeTargetParametersEcsTaskParametersOverridesContainerOverrideArgs Empty = new PipeTargetParametersEcsTaskParametersOverridesContainerOverrideArgs();

    @Import(name="commands")
    private @Nullable Output<List<String>> commands;

    public Optional<Output<List<String>>> commands() {
        return Optional.ofNullable(this.commands);
    }

    @Import(name="cpu")
    private @Nullable Output<Integer> cpu;

    public Optional<Output<Integer>> cpu() {
        return Optional.ofNullable(this.cpu);
    }

    @Import(name="environmentFiles")
    private @Nullable Output<List<PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileArgs>> environmentFiles;

    public Optional<Output<List<PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileArgs>>> environmentFiles() {
        return Optional.ofNullable(this.environmentFiles);
    }

    @Import(name="environments")
    private @Nullable Output<List<PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentArgs>> environments;

    public Optional<Output<List<PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentArgs>>> environments() {
        return Optional.ofNullable(this.environments);
    }

    @Import(name="memory")
    private @Nullable Output<Integer> memory;

    public Optional<Output<Integer>> memory() {
        return Optional.ofNullable(this.memory);
    }

    @Import(name="memoryReservation")
    private @Nullable Output<Integer> memoryReservation;

    public Optional<Output<Integer>> memoryReservation() {
        return Optional.ofNullable(this.memoryReservation);
    }

    /**
     * Name of the pipe. If omitted, the provider will assign a random, unique name. Conflicts with `name_prefix`.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the pipe. If omitted, the provider will assign a random, unique name. Conflicts with `name_prefix`.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="resourceRequirements")
    private @Nullable Output<List<PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementArgs>> resourceRequirements;

    public Optional<Output<List<PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementArgs>>> resourceRequirements() {
        return Optional.ofNullable(this.resourceRequirements);
    }

    private PipeTargetParametersEcsTaskParametersOverridesContainerOverrideArgs() {}

    private PipeTargetParametersEcsTaskParametersOverridesContainerOverrideArgs(PipeTargetParametersEcsTaskParametersOverridesContainerOverrideArgs $) {
        this.commands = $.commands;
        this.cpu = $.cpu;
        this.environmentFiles = $.environmentFiles;
        this.environments = $.environments;
        this.memory = $.memory;
        this.memoryReservation = $.memoryReservation;
        this.name = $.name;
        this.resourceRequirements = $.resourceRequirements;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PipeTargetParametersEcsTaskParametersOverridesContainerOverrideArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PipeTargetParametersEcsTaskParametersOverridesContainerOverrideArgs $;

        public Builder() {
            $ = new PipeTargetParametersEcsTaskParametersOverridesContainerOverrideArgs();
        }

        public Builder(PipeTargetParametersEcsTaskParametersOverridesContainerOverrideArgs defaults) {
            $ = new PipeTargetParametersEcsTaskParametersOverridesContainerOverrideArgs(Objects.requireNonNull(defaults));
        }

        public Builder commands(@Nullable Output<List<String>> commands) {
            $.commands = commands;
            return this;
        }

        public Builder commands(List<String> commands) {
            return commands(Output.of(commands));
        }

        public Builder commands(String... commands) {
            return commands(List.of(commands));
        }

        public Builder cpu(@Nullable Output<Integer> cpu) {
            $.cpu = cpu;
            return this;
        }

        public Builder cpu(Integer cpu) {
            return cpu(Output.of(cpu));
        }

        public Builder environmentFiles(@Nullable Output<List<PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileArgs>> environmentFiles) {
            $.environmentFiles = environmentFiles;
            return this;
        }

        public Builder environmentFiles(List<PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileArgs> environmentFiles) {
            return environmentFiles(Output.of(environmentFiles));
        }

        public Builder environmentFiles(PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileArgs... environmentFiles) {
            return environmentFiles(List.of(environmentFiles));
        }

        public Builder environments(@Nullable Output<List<PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentArgs>> environments) {
            $.environments = environments;
            return this;
        }

        public Builder environments(List<PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentArgs> environments) {
            return environments(Output.of(environments));
        }

        public Builder environments(PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentArgs... environments) {
            return environments(List.of(environments));
        }

        public Builder memory(@Nullable Output<Integer> memory) {
            $.memory = memory;
            return this;
        }

        public Builder memory(Integer memory) {
            return memory(Output.of(memory));
        }

        public Builder memoryReservation(@Nullable Output<Integer> memoryReservation) {
            $.memoryReservation = memoryReservation;
            return this;
        }

        public Builder memoryReservation(Integer memoryReservation) {
            return memoryReservation(Output.of(memoryReservation));
        }

        /**
         * @param name Name of the pipe. If omitted, the provider will assign a random, unique name. Conflicts with `name_prefix`.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the pipe. If omitted, the provider will assign a random, unique name. Conflicts with `name_prefix`.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder resourceRequirements(@Nullable Output<List<PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementArgs>> resourceRequirements) {
            $.resourceRequirements = resourceRequirements;
            return this;
        }

        public Builder resourceRequirements(List<PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementArgs> resourceRequirements) {
            return resourceRequirements(Output.of(resourceRequirements));
        }

        public Builder resourceRequirements(PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementArgs... resourceRequirements) {
            return resourceRequirements(List.of(resourceRequirements));
        }

        public PipeTargetParametersEcsTaskParametersOverridesContainerOverrideArgs build() {
            return $;
        }
    }

}
