// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.sesv2.inputs;

import com.pulumi.aws.sesv2.inputs.ContactListTopicArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ContactListState extends com.pulumi.resources.ResourceArgs {

    public static final ContactListState Empty = new ContactListState();

    @Import(name="arn")
    private @Nullable Output<String> arn;

    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    /**
     * Name of the contact list.
     * 
     * The following arguments are optional:
     * 
     */
    @Import(name="contactListName")
    private @Nullable Output<String> contactListName;

    /**
     * @return Name of the contact list.
     * 
     * The following arguments are optional:
     * 
     */
    public Optional<Output<String>> contactListName() {
        return Optional.ofNullable(this.contactListName);
    }

    /**
     * Timestamp noting when the contact list was created in ISO 8601 format.
     * 
     */
    @Import(name="createdTimestamp")
    private @Nullable Output<String> createdTimestamp;

    /**
     * @return Timestamp noting when the contact list was created in ISO 8601 format.
     * 
     */
    public Optional<Output<String>> createdTimestamp() {
        return Optional.ofNullable(this.createdTimestamp);
    }

    /**
     * Description of what the contact list is about.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of what the contact list is about.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Timestamp noting the last time the contact list was updated in ISO 8601 format.
     * 
     */
    @Import(name="lastUpdatedTimestamp")
    private @Nullable Output<String> lastUpdatedTimestamp;

    /**
     * @return Timestamp noting the last time the contact list was updated in ISO 8601 format.
     * 
     */
    public Optional<Output<String>> lastUpdatedTimestamp() {
        return Optional.ofNullable(this.lastUpdatedTimestamp);
    }

    /**
     * Key-value map of resource tags for the contact list. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Key-value map of resource tags for the contact list. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    /**
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    /**
     * Configuration block(s) with topic for the contact list. Detailed below.
     * 
     */
    @Import(name="topics")
    private @Nullable Output<List<ContactListTopicArgs>> topics;

    /**
     * @return Configuration block(s) with topic for the contact list. Detailed below.
     * 
     */
    public Optional<Output<List<ContactListTopicArgs>>> topics() {
        return Optional.ofNullable(this.topics);
    }

    private ContactListState() {}

    private ContactListState(ContactListState $) {
        this.arn = $.arn;
        this.contactListName = $.contactListName;
        this.createdTimestamp = $.createdTimestamp;
        this.description = $.description;
        this.lastUpdatedTimestamp = $.lastUpdatedTimestamp;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
        this.topics = $.topics;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ContactListState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ContactListState $;

        public Builder() {
            $ = new ContactListState();
        }

        public Builder(ContactListState defaults) {
            $ = new ContactListState(Objects.requireNonNull(defaults));
        }

        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        /**
         * @param contactListName Name of the contact list.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder contactListName(@Nullable Output<String> contactListName) {
            $.contactListName = contactListName;
            return this;
        }

        /**
         * @param contactListName Name of the contact list.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder contactListName(String contactListName) {
            return contactListName(Output.of(contactListName));
        }

        /**
         * @param createdTimestamp Timestamp noting when the contact list was created in ISO 8601 format.
         * 
         * @return builder
         * 
         */
        public Builder createdTimestamp(@Nullable Output<String> createdTimestamp) {
            $.createdTimestamp = createdTimestamp;
            return this;
        }

        /**
         * @param createdTimestamp Timestamp noting when the contact list was created in ISO 8601 format.
         * 
         * @return builder
         * 
         */
        public Builder createdTimestamp(String createdTimestamp) {
            return createdTimestamp(Output.of(createdTimestamp));
        }

        /**
         * @param description Description of what the contact list is about.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of what the contact list is about.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param lastUpdatedTimestamp Timestamp noting the last time the contact list was updated in ISO 8601 format.
         * 
         * @return builder
         * 
         */
        public Builder lastUpdatedTimestamp(@Nullable Output<String> lastUpdatedTimestamp) {
            $.lastUpdatedTimestamp = lastUpdatedTimestamp;
            return this;
        }

        /**
         * @param lastUpdatedTimestamp Timestamp noting the last time the contact list was updated in ISO 8601 format.
         * 
         * @return builder
         * 
         */
        public Builder lastUpdatedTimestamp(String lastUpdatedTimestamp) {
            return lastUpdatedTimestamp(Output.of(lastUpdatedTimestamp));
        }

        /**
         * @param tags Key-value map of resource tags for the contact list. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Key-value map of resource tags for the contact list. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * Please use `tags` instead.
         * 
         */
        @Deprecated /* Please use `tags` instead. */
        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * Please use `tags` instead.
         * 
         */
        @Deprecated /* Please use `tags` instead. */
        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        /**
         * @param topics Configuration block(s) with topic for the contact list. Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder topics(@Nullable Output<List<ContactListTopicArgs>> topics) {
            $.topics = topics;
            return this;
        }

        /**
         * @param topics Configuration block(s) with topic for the contact list. Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder topics(List<ContactListTopicArgs> topics) {
            return topics(Output.of(topics));
        }

        /**
         * @param topics Configuration block(s) with topic for the contact list. Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder topics(ContactListTopicArgs... topics) {
            return topics(List.of(topics));
        }

        public ContactListState build() {
            return $;
        }
    }

}
