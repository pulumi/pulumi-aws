// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.evidently.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;


public final class LaunchScheduledSplitsConfigStepSegmentOverrideArgs extends com.pulumi.resources.ResourceArgs {

    public static final LaunchScheduledSplitsConfigStepSegmentOverrideArgs Empty = new LaunchScheduledSplitsConfigStepSegmentOverrideArgs();

    /**
     * Specifies a number indicating the order to use to evaluate segment overrides, if there are more than one. Segment overrides with lower numbers are evaluated first.
     * 
     */
    @Import(name="evaluationOrder", required=true)
    private Output<Integer> evaluationOrder;

    /**
     * @return Specifies a number indicating the order to use to evaluate segment overrides, if there are more than one. Segment overrides with lower numbers are evaluated first.
     * 
     */
    public Output<Integer> evaluationOrder() {
        return this.evaluationOrder;
    }

    /**
     * The name or ARN of the segment to use.
     * 
     */
    @Import(name="segment", required=true)
    private Output<String> segment;

    /**
     * @return The name or ARN of the segment to use.
     * 
     */
    public Output<String> segment() {
        return this.segment;
    }

    /**
     * The traffic allocation percentages among the feature variations to assign to this segment. This is a set of key-value pairs. The keys are variation names. The values represent the amount of traffic to allocate to that variation for this segment. This is expressed in thousandths of a percent, so a weight of 50000 represents 50% of traffic.
     * 
     */
    @Import(name="weights", required=true)
    private Output<Map<String,Integer>> weights;

    /**
     * @return The traffic allocation percentages among the feature variations to assign to this segment. This is a set of key-value pairs. The keys are variation names. The values represent the amount of traffic to allocate to that variation for this segment. This is expressed in thousandths of a percent, so a weight of 50000 represents 50% of traffic.
     * 
     */
    public Output<Map<String,Integer>> weights() {
        return this.weights;
    }

    private LaunchScheduledSplitsConfigStepSegmentOverrideArgs() {}

    private LaunchScheduledSplitsConfigStepSegmentOverrideArgs(LaunchScheduledSplitsConfigStepSegmentOverrideArgs $) {
        this.evaluationOrder = $.evaluationOrder;
        this.segment = $.segment;
        this.weights = $.weights;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LaunchScheduledSplitsConfigStepSegmentOverrideArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LaunchScheduledSplitsConfigStepSegmentOverrideArgs $;

        public Builder() {
            $ = new LaunchScheduledSplitsConfigStepSegmentOverrideArgs();
        }

        public Builder(LaunchScheduledSplitsConfigStepSegmentOverrideArgs defaults) {
            $ = new LaunchScheduledSplitsConfigStepSegmentOverrideArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param evaluationOrder Specifies a number indicating the order to use to evaluate segment overrides, if there are more than one. Segment overrides with lower numbers are evaluated first.
         * 
         * @return builder
         * 
         */
        public Builder evaluationOrder(Output<Integer> evaluationOrder) {
            $.evaluationOrder = evaluationOrder;
            return this;
        }

        /**
         * @param evaluationOrder Specifies a number indicating the order to use to evaluate segment overrides, if there are more than one. Segment overrides with lower numbers are evaluated first.
         * 
         * @return builder
         * 
         */
        public Builder evaluationOrder(Integer evaluationOrder) {
            return evaluationOrder(Output.of(evaluationOrder));
        }

        /**
         * @param segment The name or ARN of the segment to use.
         * 
         * @return builder
         * 
         */
        public Builder segment(Output<String> segment) {
            $.segment = segment;
            return this;
        }

        /**
         * @param segment The name or ARN of the segment to use.
         * 
         * @return builder
         * 
         */
        public Builder segment(String segment) {
            return segment(Output.of(segment));
        }

        /**
         * @param weights The traffic allocation percentages among the feature variations to assign to this segment. This is a set of key-value pairs. The keys are variation names. The values represent the amount of traffic to allocate to that variation for this segment. This is expressed in thousandths of a percent, so a weight of 50000 represents 50% of traffic.
         * 
         * @return builder
         * 
         */
        public Builder weights(Output<Map<String,Integer>> weights) {
            $.weights = weights;
            return this;
        }

        /**
         * @param weights The traffic allocation percentages among the feature variations to assign to this segment. This is a set of key-value pairs. The keys are variation names. The values represent the amount of traffic to allocate to that variation for this segment. This is expressed in thousandths of a percent, so a weight of 50000 represents 50% of traffic.
         * 
         * @return builder
         * 
         */
        public Builder weights(Map<String,Integer> weights) {
            return weights(Output.of(weights));
        }

        public LaunchScheduledSplitsConfigStepSegmentOverrideArgs build() {
            if ($.evaluationOrder == null) {
                throw new MissingRequiredPropertyException("LaunchScheduledSplitsConfigStepSegmentOverrideArgs", "evaluationOrder");
            }
            if ($.segment == null) {
                throw new MissingRequiredPropertyException("LaunchScheduledSplitsConfigStepSegmentOverrideArgs", "segment");
            }
            if ($.weights == null) {
                throw new MissingRequiredPropertyException("LaunchScheduledSplitsConfigStepSegmentOverrideArgs", "weights");
            }
            return $;
        }
    }

}
