// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.cfg.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RemediationConfigurationExecutionControlsSsmControlsArgs extends com.pulumi.resources.ResourceArgs {

    public static final RemediationConfigurationExecutionControlsSsmControlsArgs Empty = new RemediationConfigurationExecutionControlsSsmControlsArgs();

    /**
     * Maximum percentage of remediation actions allowed to run in parallel on the non-compliant resources for that specific rule. The default value is 10%.
     * 
     */
    @Import(name="concurrentExecutionRatePercentage")
    private @Nullable Output<Integer> concurrentExecutionRatePercentage;

    /**
     * @return Maximum percentage of remediation actions allowed to run in parallel on the non-compliant resources for that specific rule. The default value is 10%.
     * 
     */
    public Optional<Output<Integer>> concurrentExecutionRatePercentage() {
        return Optional.ofNullable(this.concurrentExecutionRatePercentage);
    }

    /**
     * Percentage of errors that are allowed before SSM stops running automations on non-compliant resources for that specific rule. The default is 50%.
     * 
     */
    @Import(name="errorPercentage")
    private @Nullable Output<Integer> errorPercentage;

    /**
     * @return Percentage of errors that are allowed before SSM stops running automations on non-compliant resources for that specific rule. The default is 50%.
     * 
     */
    public Optional<Output<Integer>> errorPercentage() {
        return Optional.ofNullable(this.errorPercentage);
    }

    private RemediationConfigurationExecutionControlsSsmControlsArgs() {}

    private RemediationConfigurationExecutionControlsSsmControlsArgs(RemediationConfigurationExecutionControlsSsmControlsArgs $) {
        this.concurrentExecutionRatePercentage = $.concurrentExecutionRatePercentage;
        this.errorPercentage = $.errorPercentage;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RemediationConfigurationExecutionControlsSsmControlsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RemediationConfigurationExecutionControlsSsmControlsArgs $;

        public Builder() {
            $ = new RemediationConfigurationExecutionControlsSsmControlsArgs();
        }

        public Builder(RemediationConfigurationExecutionControlsSsmControlsArgs defaults) {
            $ = new RemediationConfigurationExecutionControlsSsmControlsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param concurrentExecutionRatePercentage Maximum percentage of remediation actions allowed to run in parallel on the non-compliant resources for that specific rule. The default value is 10%.
         * 
         * @return builder
         * 
         */
        public Builder concurrentExecutionRatePercentage(@Nullable Output<Integer> concurrentExecutionRatePercentage) {
            $.concurrentExecutionRatePercentage = concurrentExecutionRatePercentage;
            return this;
        }

        /**
         * @param concurrentExecutionRatePercentage Maximum percentage of remediation actions allowed to run in parallel on the non-compliant resources for that specific rule. The default value is 10%.
         * 
         * @return builder
         * 
         */
        public Builder concurrentExecutionRatePercentage(Integer concurrentExecutionRatePercentage) {
            return concurrentExecutionRatePercentage(Output.of(concurrentExecutionRatePercentage));
        }

        /**
         * @param errorPercentage Percentage of errors that are allowed before SSM stops running automations on non-compliant resources for that specific rule. The default is 50%.
         * 
         * @return builder
         * 
         */
        public Builder errorPercentage(@Nullable Output<Integer> errorPercentage) {
            $.errorPercentage = errorPercentage;
            return this;
        }

        /**
         * @param errorPercentage Percentage of errors that are allowed before SSM stops running automations on non-compliant resources for that specific rule. The default is 50%.
         * 
         * @return builder
         * 
         */
        public Builder errorPercentage(Integer errorPercentage) {
            return errorPercentage(Output.of(errorPercentage));
        }

        public RemediationConfigurationExecutionControlsSsmControlsArgs build() {
            return $;
        }
    }

}
