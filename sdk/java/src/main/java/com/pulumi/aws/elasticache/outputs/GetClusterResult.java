// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.elasticache.outputs;

import com.pulumi.aws.elasticache.outputs.GetClusterCacheNode;
import com.pulumi.aws.elasticache.outputs.GetClusterLogDeliveryConfiguration;
import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetClusterResult {
    private @Nullable String arn;
    /**
     * @return Availability Zone for the cache cluster.
     * 
     */
    private @Nullable String availabilityZone;
    /**
     * @return List of node objects including `id`, `address`, `port`, `availability_zone` and `outpost_arn`.
     * Referenceable e.g., as `${data.aws_elasticache_cluster.bar.cache_nodes.0.address}`
     * 
     */
    private @Nullable List<GetClusterCacheNode> cacheNodes;
    /**
     * @return (Memcached only) DNS name of the cache cluster without the port appended.
     * 
     */
    private @Nullable String clusterAddress;
    private String clusterId;
    /**
     * @return (Memcached only) Configuration endpoint to allow host discovery.
     * 
     */
    private @Nullable String configurationEndpoint;
    /**
     * @return Name of the cache engine.
     * 
     */
    private @Nullable String engine;
    /**
     * @return Version number of the cache engine.
     * 
     */
    private @Nullable String engineVersion;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private @Nullable String id;
    /**
     * @return The IP version advertised in the discovery protocol.
     * 
     */
    private @Nullable String ipDiscovery;
    /**
     * @return Redis [SLOWLOG](https://redis.io/commands/slowlog) or Redis [Engine Log](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Log_Delivery.html#Log_contents-engine-log) delivery settings.
     * 
     */
    private @Nullable List<GetClusterLogDeliveryConfiguration> logDeliveryConfigurations;
    /**
     * @return Specifies the weekly time range for when maintenance
     * on the cache cluster is performed.
     * 
     */
    private @Nullable String maintenanceWindow;
    /**
     * @return The IP versions for cache cluster connections.
     * 
     */
    private @Nullable String networkType;
    /**
     * @return The cluster node type.
     * 
     */
    private @Nullable String nodeType;
    /**
     * @return An ARN of an
     * SNS topic that ElastiCache notifications get sent to.
     * 
     */
    private @Nullable String notificationTopicArn;
    /**
     * @return The number of cache nodes that the cache cluster has.
     * 
     */
    private @Nullable Integer numCacheNodes;
    /**
     * @return Name of the parameter group associated with this cache cluster.
     * 
     */
    private @Nullable String parameterGroupName;
    /**
     * @return The port number on which each of the cache nodes will
     * accept connections.
     * 
     */
    private @Nullable Integer port;
    /**
     * @return The outpost ARN in which the cache cluster was created if created in outpost.
     * 
     */
    private @Nullable String preferredOutpostArn;
    /**
     * @return The replication group to which this cache cluster belongs.
     * 
     */
    private @Nullable String replicationGroupId;
    /**
     * @return List VPC security groups associated with the cache cluster.
     * 
     */
    private @Nullable List<String> securityGroupIds;
    /**
     * @return The number of days for which ElastiCache will
     * retain automatic cache cluster snapshots before deleting them.
     * 
     */
    private @Nullable Integer snapshotRetentionLimit;
    /**
     * @return Daily time range (in UTC) during which ElastiCache will
     * begin taking a daily snapshot of the cache cluster.
     * 
     */
    private @Nullable String snapshotWindow;
    /**
     * @return Name of the subnet group associated to the cache cluster.
     * 
     */
    private @Nullable String subnetGroupName;
    /**
     * @return Tags assigned to the resource
     * 
     */
    private @Nullable Map<String,String> tags;

    private GetClusterResult() {}
    public Optional<String> arn() {
        return Optional.ofNullable(this.arn);
    }
    /**
     * @return Availability Zone for the cache cluster.
     * 
     */
    public Optional<String> availabilityZone() {
        return Optional.ofNullable(this.availabilityZone);
    }
    /**
     * @return List of node objects including `id`, `address`, `port`, `availability_zone` and `outpost_arn`.
     * Referenceable e.g., as `${data.aws_elasticache_cluster.bar.cache_nodes.0.address}`
     * 
     */
    public List<GetClusterCacheNode> cacheNodes() {
        return this.cacheNodes == null ? List.of() : this.cacheNodes;
    }
    /**
     * @return (Memcached only) DNS name of the cache cluster without the port appended.
     * 
     */
    public Optional<String> clusterAddress() {
        return Optional.ofNullable(this.clusterAddress);
    }
    public String clusterId() {
        return this.clusterId;
    }
    /**
     * @return (Memcached only) Configuration endpoint to allow host discovery.
     * 
     */
    public Optional<String> configurationEndpoint() {
        return Optional.ofNullable(this.configurationEndpoint);
    }
    /**
     * @return Name of the cache engine.
     * 
     */
    public Optional<String> engine() {
        return Optional.ofNullable(this.engine);
    }
    /**
     * @return Version number of the cache engine.
     * 
     */
    public Optional<String> engineVersion() {
        return Optional.ofNullable(this.engineVersion);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return The IP version advertised in the discovery protocol.
     * 
     */
    public Optional<String> ipDiscovery() {
        return Optional.ofNullable(this.ipDiscovery);
    }
    /**
     * @return Redis [SLOWLOG](https://redis.io/commands/slowlog) or Redis [Engine Log](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Log_Delivery.html#Log_contents-engine-log) delivery settings.
     * 
     */
    public List<GetClusterLogDeliveryConfiguration> logDeliveryConfigurations() {
        return this.logDeliveryConfigurations == null ? List.of() : this.logDeliveryConfigurations;
    }
    /**
     * @return Specifies the weekly time range for when maintenance
     * on the cache cluster is performed.
     * 
     */
    public Optional<String> maintenanceWindow() {
        return Optional.ofNullable(this.maintenanceWindow);
    }
    /**
     * @return The IP versions for cache cluster connections.
     * 
     */
    public Optional<String> networkType() {
        return Optional.ofNullable(this.networkType);
    }
    /**
     * @return The cluster node type.
     * 
     */
    public Optional<String> nodeType() {
        return Optional.ofNullable(this.nodeType);
    }
    /**
     * @return An ARN of an
     * SNS topic that ElastiCache notifications get sent to.
     * 
     */
    public Optional<String> notificationTopicArn() {
        return Optional.ofNullable(this.notificationTopicArn);
    }
    /**
     * @return The number of cache nodes that the cache cluster has.
     * 
     */
    public Optional<Integer> numCacheNodes() {
        return Optional.ofNullable(this.numCacheNodes);
    }
    /**
     * @return Name of the parameter group associated with this cache cluster.
     * 
     */
    public Optional<String> parameterGroupName() {
        return Optional.ofNullable(this.parameterGroupName);
    }
    /**
     * @return The port number on which each of the cache nodes will
     * accept connections.
     * 
     */
    public Optional<Integer> port() {
        return Optional.ofNullable(this.port);
    }
    /**
     * @return The outpost ARN in which the cache cluster was created if created in outpost.
     * 
     */
    public Optional<String> preferredOutpostArn() {
        return Optional.ofNullable(this.preferredOutpostArn);
    }
    /**
     * @return The replication group to which this cache cluster belongs.
     * 
     */
    public Optional<String> replicationGroupId() {
        return Optional.ofNullable(this.replicationGroupId);
    }
    /**
     * @return List VPC security groups associated with the cache cluster.
     * 
     */
    public List<String> securityGroupIds() {
        return this.securityGroupIds == null ? List.of() : this.securityGroupIds;
    }
    /**
     * @return The number of days for which ElastiCache will
     * retain automatic cache cluster snapshots before deleting them.
     * 
     */
    public Optional<Integer> snapshotRetentionLimit() {
        return Optional.ofNullable(this.snapshotRetentionLimit);
    }
    /**
     * @return Daily time range (in UTC) during which ElastiCache will
     * begin taking a daily snapshot of the cache cluster.
     * 
     */
    public Optional<String> snapshotWindow() {
        return Optional.ofNullable(this.snapshotWindow);
    }
    /**
     * @return Name of the subnet group associated to the cache cluster.
     * 
     */
    public Optional<String> subnetGroupName() {
        return Optional.ofNullable(this.subnetGroupName);
    }
    /**
     * @return Tags assigned to the resource
     * 
     */
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetClusterResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String arn;
        private @Nullable String availabilityZone;
        private @Nullable List<GetClusterCacheNode> cacheNodes;
        private @Nullable String clusterAddress;
        private String clusterId;
        private @Nullable String configurationEndpoint;
        private @Nullable String engine;
        private @Nullable String engineVersion;
        private @Nullable String id;
        private @Nullable String ipDiscovery;
        private @Nullable List<GetClusterLogDeliveryConfiguration> logDeliveryConfigurations;
        private @Nullable String maintenanceWindow;
        private @Nullable String networkType;
        private @Nullable String nodeType;
        private @Nullable String notificationTopicArn;
        private @Nullable Integer numCacheNodes;
        private @Nullable String parameterGroupName;
        private @Nullable Integer port;
        private @Nullable String preferredOutpostArn;
        private @Nullable String replicationGroupId;
        private @Nullable List<String> securityGroupIds;
        private @Nullable Integer snapshotRetentionLimit;
        private @Nullable String snapshotWindow;
        private @Nullable String subnetGroupName;
        private @Nullable Map<String,String> tags;
        public Builder() {}
        public Builder(GetClusterResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.availabilityZone = defaults.availabilityZone;
    	      this.cacheNodes = defaults.cacheNodes;
    	      this.clusterAddress = defaults.clusterAddress;
    	      this.clusterId = defaults.clusterId;
    	      this.configurationEndpoint = defaults.configurationEndpoint;
    	      this.engine = defaults.engine;
    	      this.engineVersion = defaults.engineVersion;
    	      this.id = defaults.id;
    	      this.ipDiscovery = defaults.ipDiscovery;
    	      this.logDeliveryConfigurations = defaults.logDeliveryConfigurations;
    	      this.maintenanceWindow = defaults.maintenanceWindow;
    	      this.networkType = defaults.networkType;
    	      this.nodeType = defaults.nodeType;
    	      this.notificationTopicArn = defaults.notificationTopicArn;
    	      this.numCacheNodes = defaults.numCacheNodes;
    	      this.parameterGroupName = defaults.parameterGroupName;
    	      this.port = defaults.port;
    	      this.preferredOutpostArn = defaults.preferredOutpostArn;
    	      this.replicationGroupId = defaults.replicationGroupId;
    	      this.securityGroupIds = defaults.securityGroupIds;
    	      this.snapshotRetentionLimit = defaults.snapshotRetentionLimit;
    	      this.snapshotWindow = defaults.snapshotWindow;
    	      this.subnetGroupName = defaults.subnetGroupName;
    	      this.tags = defaults.tags;
        }

        @CustomType.Setter
        public Builder arn(@Nullable String arn) {
            this.arn = arn;
            return this;
        }
        @CustomType.Setter
        public Builder availabilityZone(@Nullable String availabilityZone) {
            this.availabilityZone = availabilityZone;
            return this;
        }
        @CustomType.Setter
        public Builder cacheNodes(@Nullable List<GetClusterCacheNode> cacheNodes) {
            this.cacheNodes = cacheNodes;
            return this;
        }
        public Builder cacheNodes(GetClusterCacheNode... cacheNodes) {
            return cacheNodes(List.of(cacheNodes));
        }
        @CustomType.Setter
        public Builder clusterAddress(@Nullable String clusterAddress) {
            this.clusterAddress = clusterAddress;
            return this;
        }
        @CustomType.Setter
        public Builder clusterId(String clusterId) {
            this.clusterId = Objects.requireNonNull(clusterId);
            return this;
        }
        @CustomType.Setter
        public Builder configurationEndpoint(@Nullable String configurationEndpoint) {
            this.configurationEndpoint = configurationEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder engine(@Nullable String engine) {
            this.engine = engine;
            return this;
        }
        @CustomType.Setter
        public Builder engineVersion(@Nullable String engineVersion) {
            this.engineVersion = engineVersion;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ipDiscovery(@Nullable String ipDiscovery) {
            this.ipDiscovery = ipDiscovery;
            return this;
        }
        @CustomType.Setter
        public Builder logDeliveryConfigurations(@Nullable List<GetClusterLogDeliveryConfiguration> logDeliveryConfigurations) {
            this.logDeliveryConfigurations = logDeliveryConfigurations;
            return this;
        }
        public Builder logDeliveryConfigurations(GetClusterLogDeliveryConfiguration... logDeliveryConfigurations) {
            return logDeliveryConfigurations(List.of(logDeliveryConfigurations));
        }
        @CustomType.Setter
        public Builder maintenanceWindow(@Nullable String maintenanceWindow) {
            this.maintenanceWindow = maintenanceWindow;
            return this;
        }
        @CustomType.Setter
        public Builder networkType(@Nullable String networkType) {
            this.networkType = networkType;
            return this;
        }
        @CustomType.Setter
        public Builder nodeType(@Nullable String nodeType) {
            this.nodeType = nodeType;
            return this;
        }
        @CustomType.Setter
        public Builder notificationTopicArn(@Nullable String notificationTopicArn) {
            this.notificationTopicArn = notificationTopicArn;
            return this;
        }
        @CustomType.Setter
        public Builder numCacheNodes(@Nullable Integer numCacheNodes) {
            this.numCacheNodes = numCacheNodes;
            return this;
        }
        @CustomType.Setter
        public Builder parameterGroupName(@Nullable String parameterGroupName) {
            this.parameterGroupName = parameterGroupName;
            return this;
        }
        @CustomType.Setter
        public Builder port(@Nullable Integer port) {
            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder preferredOutpostArn(@Nullable String preferredOutpostArn) {
            this.preferredOutpostArn = preferredOutpostArn;
            return this;
        }
        @CustomType.Setter
        public Builder replicationGroupId(@Nullable String replicationGroupId) {
            this.replicationGroupId = replicationGroupId;
            return this;
        }
        @CustomType.Setter
        public Builder securityGroupIds(@Nullable List<String> securityGroupIds) {
            this.securityGroupIds = securityGroupIds;
            return this;
        }
        public Builder securityGroupIds(String... securityGroupIds) {
            return securityGroupIds(List.of(securityGroupIds));
        }
        @CustomType.Setter
        public Builder snapshotRetentionLimit(@Nullable Integer snapshotRetentionLimit) {
            this.snapshotRetentionLimit = snapshotRetentionLimit;
            return this;
        }
        @CustomType.Setter
        public Builder snapshotWindow(@Nullable String snapshotWindow) {
            this.snapshotWindow = snapshotWindow;
            return this;
        }
        @CustomType.Setter
        public Builder subnetGroupName(@Nullable String subnetGroupName) {
            this.subnetGroupName = subnetGroupName;
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        public GetClusterResult build() {
            final var o = new GetClusterResult();
            o.arn = arn;
            o.availabilityZone = availabilityZone;
            o.cacheNodes = cacheNodes;
            o.clusterAddress = clusterAddress;
            o.clusterId = clusterId;
            o.configurationEndpoint = configurationEndpoint;
            o.engine = engine;
            o.engineVersion = engineVersion;
            o.id = id;
            o.ipDiscovery = ipDiscovery;
            o.logDeliveryConfigurations = logDeliveryConfigurations;
            o.maintenanceWindow = maintenanceWindow;
            o.networkType = networkType;
            o.nodeType = nodeType;
            o.notificationTopicArn = notificationTopicArn;
            o.numCacheNodes = numCacheNodes;
            o.parameterGroupName = parameterGroupName;
            o.port = port;
            o.preferredOutpostArn = preferredOutpostArn;
            o.replicationGroupId = replicationGroupId;
            o.securityGroupIds = securityGroupIds;
            o.snapshotRetentionLimit = snapshotRetentionLimit;
            o.snapshotWindow = snapshotWindow;
            o.subnetGroupName = subnetGroupName;
            o.tags = tags;
            return o;
        }
    }
}
