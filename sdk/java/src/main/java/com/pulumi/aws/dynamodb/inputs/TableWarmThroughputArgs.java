// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.dynamodb.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TableWarmThroughputArgs extends com.pulumi.resources.ResourceArgs {

    public static final TableWarmThroughputArgs Empty = new TableWarmThroughputArgs();

    /**
     * Number of read operations a table or index can instantaneously support. For the base table, decreasing this value will force a new resource. For a global secondary index, this value can be increased or decreased without recreation. Minimum value of `12000` (default).
     * 
     */
    @Import(name="readUnitsPerSecond")
    private @Nullable Output<Integer> readUnitsPerSecond;

    /**
     * @return Number of read operations a table or index can instantaneously support. For the base table, decreasing this value will force a new resource. For a global secondary index, this value can be increased or decreased without recreation. Minimum value of `12000` (default).
     * 
     */
    public Optional<Output<Integer>> readUnitsPerSecond() {
        return Optional.ofNullable(this.readUnitsPerSecond);
    }

    /**
     * Number of write operations a table or index can instantaneously support. For the base table, decreasing this value will force a new resource. For a global secondary index, this value can be increased or decreased without recreation. Minimum value of `4000` (default).
     * 
     */
    @Import(name="writeUnitsPerSecond")
    private @Nullable Output<Integer> writeUnitsPerSecond;

    /**
     * @return Number of write operations a table or index can instantaneously support. For the base table, decreasing this value will force a new resource. For a global secondary index, this value can be increased or decreased without recreation. Minimum value of `4000` (default).
     * 
     */
    public Optional<Output<Integer>> writeUnitsPerSecond() {
        return Optional.ofNullable(this.writeUnitsPerSecond);
    }

    private TableWarmThroughputArgs() {}

    private TableWarmThroughputArgs(TableWarmThroughputArgs $) {
        this.readUnitsPerSecond = $.readUnitsPerSecond;
        this.writeUnitsPerSecond = $.writeUnitsPerSecond;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TableWarmThroughputArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TableWarmThroughputArgs $;

        public Builder() {
            $ = new TableWarmThroughputArgs();
        }

        public Builder(TableWarmThroughputArgs defaults) {
            $ = new TableWarmThroughputArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param readUnitsPerSecond Number of read operations a table or index can instantaneously support. For the base table, decreasing this value will force a new resource. For a global secondary index, this value can be increased or decreased without recreation. Minimum value of `12000` (default).
         * 
         * @return builder
         * 
         */
        public Builder readUnitsPerSecond(@Nullable Output<Integer> readUnitsPerSecond) {
            $.readUnitsPerSecond = readUnitsPerSecond;
            return this;
        }

        /**
         * @param readUnitsPerSecond Number of read operations a table or index can instantaneously support. For the base table, decreasing this value will force a new resource. For a global secondary index, this value can be increased or decreased without recreation. Minimum value of `12000` (default).
         * 
         * @return builder
         * 
         */
        public Builder readUnitsPerSecond(Integer readUnitsPerSecond) {
            return readUnitsPerSecond(Output.of(readUnitsPerSecond));
        }

        /**
         * @param writeUnitsPerSecond Number of write operations a table or index can instantaneously support. For the base table, decreasing this value will force a new resource. For a global secondary index, this value can be increased or decreased without recreation. Minimum value of `4000` (default).
         * 
         * @return builder
         * 
         */
        public Builder writeUnitsPerSecond(@Nullable Output<Integer> writeUnitsPerSecond) {
            $.writeUnitsPerSecond = writeUnitsPerSecond;
            return this;
        }

        /**
         * @param writeUnitsPerSecond Number of write operations a table or index can instantaneously support. For the base table, decreasing this value will force a new resource. For a global secondary index, this value can be increased or decreased without recreation. Minimum value of `4000` (default).
         * 
         * @return builder
         * 
         */
        public Builder writeUnitsPerSecond(Integer writeUnitsPerSecond) {
            return writeUnitsPerSecond(Output.of(writeUnitsPerSecond));
        }

        public TableWarmThroughputArgs build() {
            return $;
        }
    }

}
