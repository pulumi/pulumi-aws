// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.inputs;

import com.pulumi.aws.quicksight.inputs.DataSetPhysicalTableMapS3SourceInputColumnArgs;
import com.pulumi.aws.quicksight.inputs.DataSetPhysicalTableMapS3SourceUploadSettingsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class DataSetPhysicalTableMapS3SourceArgs extends com.pulumi.resources.ResourceArgs {

    public static final DataSetPhysicalTableMapS3SourceArgs Empty = new DataSetPhysicalTableMapS3SourceArgs();

    /**
     * ARN of the data source.
     * 
     */
    @Import(name="dataSourceArn", required=true)
    private Output<String> dataSourceArn;

    /**
     * @return ARN of the data source.
     * 
     */
    public Output<String> dataSourceArn() {
        return this.dataSourceArn;
    }

    /**
     * Column schema of the table. See input_columns.
     * 
     */
    @Import(name="inputColumns", required=true)
    private Output<List<DataSetPhysicalTableMapS3SourceInputColumnArgs>> inputColumns;

    /**
     * @return Column schema of the table. See input_columns.
     * 
     */
    public Output<List<DataSetPhysicalTableMapS3SourceInputColumnArgs>> inputColumns() {
        return this.inputColumns;
    }

    /**
     * Information about the format for the S3 source file or files. See upload_settings.
     * 
     */
    @Import(name="uploadSettings", required=true)
    private Output<DataSetPhysicalTableMapS3SourceUploadSettingsArgs> uploadSettings;

    /**
     * @return Information about the format for the S3 source file or files. See upload_settings.
     * 
     */
    public Output<DataSetPhysicalTableMapS3SourceUploadSettingsArgs> uploadSettings() {
        return this.uploadSettings;
    }

    private DataSetPhysicalTableMapS3SourceArgs() {}

    private DataSetPhysicalTableMapS3SourceArgs(DataSetPhysicalTableMapS3SourceArgs $) {
        this.dataSourceArn = $.dataSourceArn;
        this.inputColumns = $.inputColumns;
        this.uploadSettings = $.uploadSettings;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DataSetPhysicalTableMapS3SourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DataSetPhysicalTableMapS3SourceArgs $;

        public Builder() {
            $ = new DataSetPhysicalTableMapS3SourceArgs();
        }

        public Builder(DataSetPhysicalTableMapS3SourceArgs defaults) {
            $ = new DataSetPhysicalTableMapS3SourceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dataSourceArn ARN of the data source.
         * 
         * @return builder
         * 
         */
        public Builder dataSourceArn(Output<String> dataSourceArn) {
            $.dataSourceArn = dataSourceArn;
            return this;
        }

        /**
         * @param dataSourceArn ARN of the data source.
         * 
         * @return builder
         * 
         */
        public Builder dataSourceArn(String dataSourceArn) {
            return dataSourceArn(Output.of(dataSourceArn));
        }

        /**
         * @param inputColumns Column schema of the table. See input_columns.
         * 
         * @return builder
         * 
         */
        public Builder inputColumns(Output<List<DataSetPhysicalTableMapS3SourceInputColumnArgs>> inputColumns) {
            $.inputColumns = inputColumns;
            return this;
        }

        /**
         * @param inputColumns Column schema of the table. See input_columns.
         * 
         * @return builder
         * 
         */
        public Builder inputColumns(List<DataSetPhysicalTableMapS3SourceInputColumnArgs> inputColumns) {
            return inputColumns(Output.of(inputColumns));
        }

        /**
         * @param inputColumns Column schema of the table. See input_columns.
         * 
         * @return builder
         * 
         */
        public Builder inputColumns(DataSetPhysicalTableMapS3SourceInputColumnArgs... inputColumns) {
            return inputColumns(List.of(inputColumns));
        }

        /**
         * @param uploadSettings Information about the format for the S3 source file or files. See upload_settings.
         * 
         * @return builder
         * 
         */
        public Builder uploadSettings(Output<DataSetPhysicalTableMapS3SourceUploadSettingsArgs> uploadSettings) {
            $.uploadSettings = uploadSettings;
            return this;
        }

        /**
         * @param uploadSettings Information about the format for the S3 source file or files. See upload_settings.
         * 
         * @return builder
         * 
         */
        public Builder uploadSettings(DataSetPhysicalTableMapS3SourceUploadSettingsArgs uploadSettings) {
            return uploadSettings(Output.of(uploadSettings));
        }

        public DataSetPhysicalTableMapS3SourceArgs build() {
            $.dataSourceArn = Objects.requireNonNull($.dataSourceArn, "expected parameter 'dataSourceArn' to be non-null");
            $.inputColumns = Objects.requireNonNull($.inputColumns, "expected parameter 'inputColumns' to be non-null");
            $.uploadSettings = Objects.requireNonNull($.uploadSettings, "expected parameter 'uploadSettings' to be non-null");
            return $;
        }
    }

}
