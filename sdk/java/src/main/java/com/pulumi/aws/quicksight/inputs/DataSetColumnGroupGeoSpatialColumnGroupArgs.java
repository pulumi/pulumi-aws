// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class DataSetColumnGroupGeoSpatialColumnGroupArgs extends com.pulumi.resources.ResourceArgs {

    public static final DataSetColumnGroupGeoSpatialColumnGroupArgs Empty = new DataSetColumnGroupGeoSpatialColumnGroupArgs();

    /**
     * Columns in this hierarchy.
     * 
     */
    @Import(name="columns", required=true)
    private Output<List<String>> columns;

    /**
     * @return Columns in this hierarchy.
     * 
     */
    public Output<List<String>> columns() {
        return this.columns;
    }

    /**
     * Country code. Valid values are `US`.
     * 
     */
    @Import(name="countryCode", required=true)
    private Output<String> countryCode;

    /**
     * @return Country code. Valid values are `US`.
     * 
     */
    public Output<String> countryCode() {
        return this.countryCode;
    }

    /**
     * A display name for the hierarchy.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return A display name for the hierarchy.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    private DataSetColumnGroupGeoSpatialColumnGroupArgs() {}

    private DataSetColumnGroupGeoSpatialColumnGroupArgs(DataSetColumnGroupGeoSpatialColumnGroupArgs $) {
        this.columns = $.columns;
        this.countryCode = $.countryCode;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DataSetColumnGroupGeoSpatialColumnGroupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DataSetColumnGroupGeoSpatialColumnGroupArgs $;

        public Builder() {
            $ = new DataSetColumnGroupGeoSpatialColumnGroupArgs();
        }

        public Builder(DataSetColumnGroupGeoSpatialColumnGroupArgs defaults) {
            $ = new DataSetColumnGroupGeoSpatialColumnGroupArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param columns Columns in this hierarchy.
         * 
         * @return builder
         * 
         */
        public Builder columns(Output<List<String>> columns) {
            $.columns = columns;
            return this;
        }

        /**
         * @param columns Columns in this hierarchy.
         * 
         * @return builder
         * 
         */
        public Builder columns(List<String> columns) {
            return columns(Output.of(columns));
        }

        /**
         * @param columns Columns in this hierarchy.
         * 
         * @return builder
         * 
         */
        public Builder columns(String... columns) {
            return columns(List.of(columns));
        }

        /**
         * @param countryCode Country code. Valid values are `US`.
         * 
         * @return builder
         * 
         */
        public Builder countryCode(Output<String> countryCode) {
            $.countryCode = countryCode;
            return this;
        }

        /**
         * @param countryCode Country code. Valid values are `US`.
         * 
         * @return builder
         * 
         */
        public Builder countryCode(String countryCode) {
            return countryCode(Output.of(countryCode));
        }

        /**
         * @param name A display name for the hierarchy.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A display name for the hierarchy.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public DataSetColumnGroupGeoSpatialColumnGroupArgs build() {
            if ($.columns == null) {
                throw new MissingRequiredPropertyException("DataSetColumnGroupGeoSpatialColumnGroupArgs", "columns");
            }
            if ($.countryCode == null) {
                throw new MissingRequiredPropertyException("DataSetColumnGroupGeoSpatialColumnGroupArgs", "countryCode");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("DataSetColumnGroupGeoSpatialColumnGroupArgs", "name");
            }
            return $;
        }
    }

}
