// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.grafana.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetWorkspaceResult {
    private String accountAccessType;
    private String arn;
    private List<String> authenticationProviders;
    private String createdDate;
    private List<String> dataSources;
    private String description;
    private String endpoint;
    private String grafanaVersion;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String lastUpdatedDate;
    private String name;
    private List<String> notificationDestinations;
    private String organizationRoleName;
    private List<String> organizationalUnits;
    private String permissionType;
    private String roleArn;
    private String samlConfigurationStatus;
    private String stackSetName;
    private String status;
    private Map<String,String> tags;
    private String workspaceId;

    private GetWorkspaceResult() {}
    public String accountAccessType() {
        return this.accountAccessType;
    }
    public String arn() {
        return this.arn;
    }
    public List<String> authenticationProviders() {
        return this.authenticationProviders;
    }
    public String createdDate() {
        return this.createdDate;
    }
    public List<String> dataSources() {
        return this.dataSources;
    }
    public String description() {
        return this.description;
    }
    public String endpoint() {
        return this.endpoint;
    }
    public String grafanaVersion() {
        return this.grafanaVersion;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String lastUpdatedDate() {
        return this.lastUpdatedDate;
    }
    public String name() {
        return this.name;
    }
    public List<String> notificationDestinations() {
        return this.notificationDestinations;
    }
    public String organizationRoleName() {
        return this.organizationRoleName;
    }
    public List<String> organizationalUnits() {
        return this.organizationalUnits;
    }
    public String permissionType() {
        return this.permissionType;
    }
    public String roleArn() {
        return this.roleArn;
    }
    public String samlConfigurationStatus() {
        return this.samlConfigurationStatus;
    }
    public String stackSetName() {
        return this.stackSetName;
    }
    public String status() {
        return this.status;
    }
    public Map<String,String> tags() {
        return this.tags;
    }
    public String workspaceId() {
        return this.workspaceId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetWorkspaceResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accountAccessType;
        private String arn;
        private List<String> authenticationProviders;
        private String createdDate;
        private List<String> dataSources;
        private String description;
        private String endpoint;
        private String grafanaVersion;
        private String id;
        private String lastUpdatedDate;
        private String name;
        private List<String> notificationDestinations;
        private String organizationRoleName;
        private List<String> organizationalUnits;
        private String permissionType;
        private String roleArn;
        private String samlConfigurationStatus;
        private String stackSetName;
        private String status;
        private Map<String,String> tags;
        private String workspaceId;
        public Builder() {}
        public Builder(GetWorkspaceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountAccessType = defaults.accountAccessType;
    	      this.arn = defaults.arn;
    	      this.authenticationProviders = defaults.authenticationProviders;
    	      this.createdDate = defaults.createdDate;
    	      this.dataSources = defaults.dataSources;
    	      this.description = defaults.description;
    	      this.endpoint = defaults.endpoint;
    	      this.grafanaVersion = defaults.grafanaVersion;
    	      this.id = defaults.id;
    	      this.lastUpdatedDate = defaults.lastUpdatedDate;
    	      this.name = defaults.name;
    	      this.notificationDestinations = defaults.notificationDestinations;
    	      this.organizationRoleName = defaults.organizationRoleName;
    	      this.organizationalUnits = defaults.organizationalUnits;
    	      this.permissionType = defaults.permissionType;
    	      this.roleArn = defaults.roleArn;
    	      this.samlConfigurationStatus = defaults.samlConfigurationStatus;
    	      this.stackSetName = defaults.stackSetName;
    	      this.status = defaults.status;
    	      this.tags = defaults.tags;
    	      this.workspaceId = defaults.workspaceId;
        }

        @CustomType.Setter
        public Builder accountAccessType(String accountAccessType) {
            this.accountAccessType = Objects.requireNonNull(accountAccessType);
            return this;
        }
        @CustomType.Setter
        public Builder arn(String arn) {
            this.arn = Objects.requireNonNull(arn);
            return this;
        }
        @CustomType.Setter
        public Builder authenticationProviders(List<String> authenticationProviders) {
            this.authenticationProviders = Objects.requireNonNull(authenticationProviders);
            return this;
        }
        public Builder authenticationProviders(String... authenticationProviders) {
            return authenticationProviders(List.of(authenticationProviders));
        }
        @CustomType.Setter
        public Builder createdDate(String createdDate) {
            this.createdDate = Objects.requireNonNull(createdDate);
            return this;
        }
        @CustomType.Setter
        public Builder dataSources(List<String> dataSources) {
            this.dataSources = Objects.requireNonNull(dataSources);
            return this;
        }
        public Builder dataSources(String... dataSources) {
            return dataSources(List.of(dataSources));
        }
        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder endpoint(String endpoint) {
            this.endpoint = Objects.requireNonNull(endpoint);
            return this;
        }
        @CustomType.Setter
        public Builder grafanaVersion(String grafanaVersion) {
            this.grafanaVersion = Objects.requireNonNull(grafanaVersion);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder lastUpdatedDate(String lastUpdatedDate) {
            this.lastUpdatedDate = Objects.requireNonNull(lastUpdatedDate);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder notificationDestinations(List<String> notificationDestinations) {
            this.notificationDestinations = Objects.requireNonNull(notificationDestinations);
            return this;
        }
        public Builder notificationDestinations(String... notificationDestinations) {
            return notificationDestinations(List.of(notificationDestinations));
        }
        @CustomType.Setter
        public Builder organizationRoleName(String organizationRoleName) {
            this.organizationRoleName = Objects.requireNonNull(organizationRoleName);
            return this;
        }
        @CustomType.Setter
        public Builder organizationalUnits(List<String> organizationalUnits) {
            this.organizationalUnits = Objects.requireNonNull(organizationalUnits);
            return this;
        }
        public Builder organizationalUnits(String... organizationalUnits) {
            return organizationalUnits(List.of(organizationalUnits));
        }
        @CustomType.Setter
        public Builder permissionType(String permissionType) {
            this.permissionType = Objects.requireNonNull(permissionType);
            return this;
        }
        @CustomType.Setter
        public Builder roleArn(String roleArn) {
            this.roleArn = Objects.requireNonNull(roleArn);
            return this;
        }
        @CustomType.Setter
        public Builder samlConfigurationStatus(String samlConfigurationStatus) {
            this.samlConfigurationStatus = Objects.requireNonNull(samlConfigurationStatus);
            return this;
        }
        @CustomType.Setter
        public Builder stackSetName(String stackSetName) {
            this.stackSetName = Objects.requireNonNull(stackSetName);
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        @CustomType.Setter
        public Builder workspaceId(String workspaceId) {
            this.workspaceId = Objects.requireNonNull(workspaceId);
            return this;
        }
        public GetWorkspaceResult build() {
            final var o = new GetWorkspaceResult();
            o.accountAccessType = accountAccessType;
            o.arn = arn;
            o.authenticationProviders = authenticationProviders;
            o.createdDate = createdDate;
            o.dataSources = dataSources;
            o.description = description;
            o.endpoint = endpoint;
            o.grafanaVersion = grafanaVersion;
            o.id = id;
            o.lastUpdatedDate = lastUpdatedDate;
            o.name = name;
            o.notificationDestinations = notificationDestinations;
            o.organizationRoleName = organizationRoleName;
            o.organizationalUnits = organizationalUnits;
            o.permissionType = permissionType;
            o.roleArn = roleArn;
            o.samlConfigurationStatus = samlConfigurationStatus;
            o.stackSetName = stackSetName;
            o.status = status;
            o.tags = tags;
            o.workspaceId = workspaceId;
            return o;
        }
    }
}
