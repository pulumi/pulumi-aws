// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.grafana.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetWorkspaceResult {
    /**
     * @return (Required) Type of account access for the workspace. Valid values are `CURRENT_ACCOUNT` and `ORGANIZATION`. If `ORGANIZATION` is specified, then `organizational_units` must also be present.
     * 
     */
    private @Nullable String accountAccessType;
    /**
     * @return ARN of the Grafana workspace.
     * 
     */
    private @Nullable String arn;
    /**
     * @return (Required) Authentication providers for the workspace. Valid values are `AWS_SSO`, `SAML`, or both.
     * 
     */
    private @Nullable List<String> authenticationProviders;
    /**
     * @return Creation date of the Grafana workspace.
     * 
     */
    private @Nullable String createdDate;
    /**
     * @return Data sources for the workspace.
     * 
     */
    private @Nullable List<String> dataSources;
    /**
     * @return Workspace description.
     * 
     */
    private @Nullable String description;
    /**
     * @return Endpoint of the Grafana workspace.
     * 
     */
    private @Nullable String endpoint;
    /**
     * @return Version of Grafana running on the workspace.
     * 
     */
    private @Nullable String grafanaVersion;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private @Nullable String id;
    /**
     * @return Last updated date of the Grafana workspace.
     * 
     */
    private @Nullable String lastUpdatedDate;
    /**
     * @return Grafana workspace name.
     * 
     */
    private @Nullable String name;
    /**
     * @return The notification destinations.
     * 
     */
    private @Nullable List<String> notificationDestinations;
    /**
     * @return The role name that the workspace uses to access resources through Amazon Organizations.
     * 
     */
    private @Nullable String organizationRoleName;
    /**
     * @return The Amazon Organizations organizational units that the workspace is authorized to use data sources from.
     * 
     */
    private @Nullable List<String> organizationalUnits;
    /**
     * @return Permission type of the workspace.
     * 
     */
    private @Nullable String permissionType;
    /**
     * @return IAM role ARN that the workspace assumes.
     * 
     */
    private @Nullable String roleArn;
    private @Nullable String samlConfigurationStatus;
    /**
     * @return AWS CloudFormation stack set name that provisions IAM roles to be used by the workspace.
     * 
     */
    private @Nullable String stackSetName;
    /**
     * @return Status of the Grafana workspace.
     * 
     */
    private @Nullable String status;
    /**
     * @return Tags assigned to the resource
     * 
     */
    private @Nullable Map<String,String> tags;
    private String workspaceId;

    private GetWorkspaceResult() {}
    /**
     * @return (Required) Type of account access for the workspace. Valid values are `CURRENT_ACCOUNT` and `ORGANIZATION`. If `ORGANIZATION` is specified, then `organizational_units` must also be present.
     * 
     */
    public Optional<String> accountAccessType() {
        return Optional.ofNullable(this.accountAccessType);
    }
    /**
     * @return ARN of the Grafana workspace.
     * 
     */
    public Optional<String> arn() {
        return Optional.ofNullable(this.arn);
    }
    /**
     * @return (Required) Authentication providers for the workspace. Valid values are `AWS_SSO`, `SAML`, or both.
     * 
     */
    public List<String> authenticationProviders() {
        return this.authenticationProviders == null ? List.of() : this.authenticationProviders;
    }
    /**
     * @return Creation date of the Grafana workspace.
     * 
     */
    public Optional<String> createdDate() {
        return Optional.ofNullable(this.createdDate);
    }
    /**
     * @return Data sources for the workspace.
     * 
     */
    public List<String> dataSources() {
        return this.dataSources == null ? List.of() : this.dataSources;
    }
    /**
     * @return Workspace description.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return Endpoint of the Grafana workspace.
     * 
     */
    public Optional<String> endpoint() {
        return Optional.ofNullable(this.endpoint);
    }
    /**
     * @return Version of Grafana running on the workspace.
     * 
     */
    public Optional<String> grafanaVersion() {
        return Optional.ofNullable(this.grafanaVersion);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Last updated date of the Grafana workspace.
     * 
     */
    public Optional<String> lastUpdatedDate() {
        return Optional.ofNullable(this.lastUpdatedDate);
    }
    /**
     * @return Grafana workspace name.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return The notification destinations.
     * 
     */
    public List<String> notificationDestinations() {
        return this.notificationDestinations == null ? List.of() : this.notificationDestinations;
    }
    /**
     * @return The role name that the workspace uses to access resources through Amazon Organizations.
     * 
     */
    public Optional<String> organizationRoleName() {
        return Optional.ofNullable(this.organizationRoleName);
    }
    /**
     * @return The Amazon Organizations organizational units that the workspace is authorized to use data sources from.
     * 
     */
    public List<String> organizationalUnits() {
        return this.organizationalUnits == null ? List.of() : this.organizationalUnits;
    }
    /**
     * @return Permission type of the workspace.
     * 
     */
    public Optional<String> permissionType() {
        return Optional.ofNullable(this.permissionType);
    }
    /**
     * @return IAM role ARN that the workspace assumes.
     * 
     */
    public Optional<String> roleArn() {
        return Optional.ofNullable(this.roleArn);
    }
    public Optional<String> samlConfigurationStatus() {
        return Optional.ofNullable(this.samlConfigurationStatus);
    }
    /**
     * @return AWS CloudFormation stack set name that provisions IAM roles to be used by the workspace.
     * 
     */
    public Optional<String> stackSetName() {
        return Optional.ofNullable(this.stackSetName);
    }
    /**
     * @return Status of the Grafana workspace.
     * 
     */
    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }
    /**
     * @return Tags assigned to the resource
     * 
     */
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    public String workspaceId() {
        return this.workspaceId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetWorkspaceResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String accountAccessType;
        private @Nullable String arn;
        private @Nullable List<String> authenticationProviders;
        private @Nullable String createdDate;
        private @Nullable List<String> dataSources;
        private @Nullable String description;
        private @Nullable String endpoint;
        private @Nullable String grafanaVersion;
        private @Nullable String id;
        private @Nullable String lastUpdatedDate;
        private @Nullable String name;
        private @Nullable List<String> notificationDestinations;
        private @Nullable String organizationRoleName;
        private @Nullable List<String> organizationalUnits;
        private @Nullable String permissionType;
        private @Nullable String roleArn;
        private @Nullable String samlConfigurationStatus;
        private @Nullable String stackSetName;
        private @Nullable String status;
        private @Nullable Map<String,String> tags;
        private String workspaceId;
        public Builder() {}
        public Builder(GetWorkspaceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountAccessType = defaults.accountAccessType;
    	      this.arn = defaults.arn;
    	      this.authenticationProviders = defaults.authenticationProviders;
    	      this.createdDate = defaults.createdDate;
    	      this.dataSources = defaults.dataSources;
    	      this.description = defaults.description;
    	      this.endpoint = defaults.endpoint;
    	      this.grafanaVersion = defaults.grafanaVersion;
    	      this.id = defaults.id;
    	      this.lastUpdatedDate = defaults.lastUpdatedDate;
    	      this.name = defaults.name;
    	      this.notificationDestinations = defaults.notificationDestinations;
    	      this.organizationRoleName = defaults.organizationRoleName;
    	      this.organizationalUnits = defaults.organizationalUnits;
    	      this.permissionType = defaults.permissionType;
    	      this.roleArn = defaults.roleArn;
    	      this.samlConfigurationStatus = defaults.samlConfigurationStatus;
    	      this.stackSetName = defaults.stackSetName;
    	      this.status = defaults.status;
    	      this.tags = defaults.tags;
    	      this.workspaceId = defaults.workspaceId;
        }

        @CustomType.Setter
        public Builder accountAccessType(@Nullable String accountAccessType) {
            this.accountAccessType = accountAccessType;
            return this;
        }
        @CustomType.Setter
        public Builder arn(@Nullable String arn) {
            this.arn = arn;
            return this;
        }
        @CustomType.Setter
        public Builder authenticationProviders(@Nullable List<String> authenticationProviders) {
            this.authenticationProviders = authenticationProviders;
            return this;
        }
        public Builder authenticationProviders(String... authenticationProviders) {
            return authenticationProviders(List.of(authenticationProviders));
        }
        @CustomType.Setter
        public Builder createdDate(@Nullable String createdDate) {
            this.createdDate = createdDate;
            return this;
        }
        @CustomType.Setter
        public Builder dataSources(@Nullable List<String> dataSources) {
            this.dataSources = dataSources;
            return this;
        }
        public Builder dataSources(String... dataSources) {
            return dataSources(List.of(dataSources));
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder endpoint(@Nullable String endpoint) {
            this.endpoint = endpoint;
            return this;
        }
        @CustomType.Setter
        public Builder grafanaVersion(@Nullable String grafanaVersion) {
            this.grafanaVersion = grafanaVersion;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder lastUpdatedDate(@Nullable String lastUpdatedDate) {
            this.lastUpdatedDate = lastUpdatedDate;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder notificationDestinations(@Nullable List<String> notificationDestinations) {
            this.notificationDestinations = notificationDestinations;
            return this;
        }
        public Builder notificationDestinations(String... notificationDestinations) {
            return notificationDestinations(List.of(notificationDestinations));
        }
        @CustomType.Setter
        public Builder organizationRoleName(@Nullable String organizationRoleName) {
            this.organizationRoleName = organizationRoleName;
            return this;
        }
        @CustomType.Setter
        public Builder organizationalUnits(@Nullable List<String> organizationalUnits) {
            this.organizationalUnits = organizationalUnits;
            return this;
        }
        public Builder organizationalUnits(String... organizationalUnits) {
            return organizationalUnits(List.of(organizationalUnits));
        }
        @CustomType.Setter
        public Builder permissionType(@Nullable String permissionType) {
            this.permissionType = permissionType;
            return this;
        }
        @CustomType.Setter
        public Builder roleArn(@Nullable String roleArn) {
            this.roleArn = roleArn;
            return this;
        }
        @CustomType.Setter
        public Builder samlConfigurationStatus(@Nullable String samlConfigurationStatus) {
            this.samlConfigurationStatus = samlConfigurationStatus;
            return this;
        }
        @CustomType.Setter
        public Builder stackSetName(@Nullable String stackSetName) {
            this.stackSetName = stackSetName;
            return this;
        }
        @CustomType.Setter
        public Builder status(@Nullable String status) {
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder workspaceId(String workspaceId) {
            this.workspaceId = Objects.requireNonNull(workspaceId);
            return this;
        }
        public GetWorkspaceResult build() {
            final var o = new GetWorkspaceResult();
            o.accountAccessType = accountAccessType;
            o.arn = arn;
            o.authenticationProviders = authenticationProviders;
            o.createdDate = createdDate;
            o.dataSources = dataSources;
            o.description = description;
            o.endpoint = endpoint;
            o.grafanaVersion = grafanaVersion;
            o.id = id;
            o.lastUpdatedDate = lastUpdatedDate;
            o.name = name;
            o.notificationDestinations = notificationDestinations;
            o.organizationRoleName = organizationRoleName;
            o.organizationalUnits = organizationalUnits;
            o.permissionType = permissionType;
            o.roleArn = roleArn;
            o.samlConfigurationStatus = samlConfigurationStatus;
            o.stackSetName = stackSetName;
            o.status = status;
            o.tags = tags;
            o.workspaceId = workspaceId;
            return o;
        }
    }
}
