// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.grafana.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetWorkspaceResult {
    /**
     * @return (Required) Type of account access for the workspace. Valid values are `CURRENT_ACCOUNT` and `ORGANIZATION`. If `ORGANIZATION` is specified, then `organizational_units` must also be present.
     * 
     */
    private String accountAccessType;
    /**
     * @return ARN of the Grafana workspace.
     * 
     */
    private String arn;
    /**
     * @return (Required) Authentication providers for the workspace. Valid values are `AWS_SSO`, `SAML`, or both.
     * 
     */
    private List<String> authenticationProviders;
    /**
     * @return Creation date of the Grafana workspace.
     * 
     */
    private String createdDate;
    /**
     * @return Data sources for the workspace.
     * 
     */
    private List<String> dataSources;
    /**
     * @return Workspace description.
     * 
     */
    private String description;
    /**
     * @return Endpoint of the Grafana workspace.
     * 
     */
    private String endpoint;
    /**
     * @return Version of Grafana running on the workspace.
     * 
     */
    private String grafanaVersion;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Last updated date of the Grafana workspace.
     * 
     */
    private String lastUpdatedDate;
    /**
     * @return Grafana workspace name.
     * 
     */
    private String name;
    /**
     * @return The notification destinations.
     * 
     */
    private List<String> notificationDestinations;
    /**
     * @return The role name that the workspace uses to access resources through Amazon Organizations.
     * 
     */
    private String organizationRoleName;
    /**
     * @return The Amazon Organizations organizational units that the workspace is authorized to use data sources from.
     * 
     */
    private List<String> organizationalUnits;
    /**
     * @return Permission type of the workspace.
     * 
     */
    private String permissionType;
    /**
     * @return IAM role ARN that the workspace assumes.
     * 
     */
    private String roleArn;
    private String samlConfigurationStatus;
    /**
     * @return AWS CloudFormation stack set name that provisions IAM roles to be used by the workspace.
     * 
     */
    private String stackSetName;
    /**
     * @return Status of the Grafana workspace.
     * 
     */
    private String status;
    /**
     * @return Tags assigned to the resource
     * 
     */
    private Map<String,String> tags;
    private String workspaceId;

    private GetWorkspaceResult() {}
    /**
     * @return (Required) Type of account access for the workspace. Valid values are `CURRENT_ACCOUNT` and `ORGANIZATION`. If `ORGANIZATION` is specified, then `organizational_units` must also be present.
     * 
     */
    public String accountAccessType() {
        return this.accountAccessType;
    }
    /**
     * @return ARN of the Grafana workspace.
     * 
     */
    public String arn() {
        return this.arn;
    }
    /**
     * @return (Required) Authentication providers for the workspace. Valid values are `AWS_SSO`, `SAML`, or both.
     * 
     */
    public List<String> authenticationProviders() {
        return this.authenticationProviders;
    }
    /**
     * @return Creation date of the Grafana workspace.
     * 
     */
    public String createdDate() {
        return this.createdDate;
    }
    /**
     * @return Data sources for the workspace.
     * 
     */
    public List<String> dataSources() {
        return this.dataSources;
    }
    /**
     * @return Workspace description.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Endpoint of the Grafana workspace.
     * 
     */
    public String endpoint() {
        return this.endpoint;
    }
    /**
     * @return Version of Grafana running on the workspace.
     * 
     */
    public String grafanaVersion() {
        return this.grafanaVersion;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Last updated date of the Grafana workspace.
     * 
     */
    public String lastUpdatedDate() {
        return this.lastUpdatedDate;
    }
    /**
     * @return Grafana workspace name.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The notification destinations.
     * 
     */
    public List<String> notificationDestinations() {
        return this.notificationDestinations;
    }
    /**
     * @return The role name that the workspace uses to access resources through Amazon Organizations.
     * 
     */
    public String organizationRoleName() {
        return this.organizationRoleName;
    }
    /**
     * @return The Amazon Organizations organizational units that the workspace is authorized to use data sources from.
     * 
     */
    public List<String> organizationalUnits() {
        return this.organizationalUnits;
    }
    /**
     * @return Permission type of the workspace.
     * 
     */
    public String permissionType() {
        return this.permissionType;
    }
    /**
     * @return IAM role ARN that the workspace assumes.
     * 
     */
    public String roleArn() {
        return this.roleArn;
    }
    public String samlConfigurationStatus() {
        return this.samlConfigurationStatus;
    }
    /**
     * @return AWS CloudFormation stack set name that provisions IAM roles to be used by the workspace.
     * 
     */
    public String stackSetName() {
        return this.stackSetName;
    }
    /**
     * @return Status of the Grafana workspace.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return Tags assigned to the resource
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }
    public String workspaceId() {
        return this.workspaceId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetWorkspaceResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accountAccessType;
        private String arn;
        private List<String> authenticationProviders;
        private String createdDate;
        private List<String> dataSources;
        private String description;
        private String endpoint;
        private String grafanaVersion;
        private String id;
        private String lastUpdatedDate;
        private String name;
        private List<String> notificationDestinations;
        private String organizationRoleName;
        private List<String> organizationalUnits;
        private String permissionType;
        private String roleArn;
        private String samlConfigurationStatus;
        private String stackSetName;
        private String status;
        private Map<String,String> tags;
        private String workspaceId;
        public Builder() {}
        public Builder(GetWorkspaceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountAccessType = defaults.accountAccessType;
    	      this.arn = defaults.arn;
    	      this.authenticationProviders = defaults.authenticationProviders;
    	      this.createdDate = defaults.createdDate;
    	      this.dataSources = defaults.dataSources;
    	      this.description = defaults.description;
    	      this.endpoint = defaults.endpoint;
    	      this.grafanaVersion = defaults.grafanaVersion;
    	      this.id = defaults.id;
    	      this.lastUpdatedDate = defaults.lastUpdatedDate;
    	      this.name = defaults.name;
    	      this.notificationDestinations = defaults.notificationDestinations;
    	      this.organizationRoleName = defaults.organizationRoleName;
    	      this.organizationalUnits = defaults.organizationalUnits;
    	      this.permissionType = defaults.permissionType;
    	      this.roleArn = defaults.roleArn;
    	      this.samlConfigurationStatus = defaults.samlConfigurationStatus;
    	      this.stackSetName = defaults.stackSetName;
    	      this.status = defaults.status;
    	      this.tags = defaults.tags;
    	      this.workspaceId = defaults.workspaceId;
        }

        @CustomType.Setter
        public Builder accountAccessType(String accountAccessType) {
            if (accountAccessType == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceResult", "accountAccessType");
            }
            this.accountAccessType = accountAccessType;
            return this;
        }
        @CustomType.Setter
        public Builder arn(String arn) {
            if (arn == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceResult", "arn");
            }
            this.arn = arn;
            return this;
        }
        @CustomType.Setter
        public Builder authenticationProviders(List<String> authenticationProviders) {
            if (authenticationProviders == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceResult", "authenticationProviders");
            }
            this.authenticationProviders = authenticationProviders;
            return this;
        }
        public Builder authenticationProviders(String... authenticationProviders) {
            return authenticationProviders(List.of(authenticationProviders));
        }
        @CustomType.Setter
        public Builder createdDate(String createdDate) {
            if (createdDate == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceResult", "createdDate");
            }
            this.createdDate = createdDate;
            return this;
        }
        @CustomType.Setter
        public Builder dataSources(List<String> dataSources) {
            if (dataSources == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceResult", "dataSources");
            }
            this.dataSources = dataSources;
            return this;
        }
        public Builder dataSources(String... dataSources) {
            return dataSources(List.of(dataSources));
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder endpoint(String endpoint) {
            if (endpoint == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceResult", "endpoint");
            }
            this.endpoint = endpoint;
            return this;
        }
        @CustomType.Setter
        public Builder grafanaVersion(String grafanaVersion) {
            if (grafanaVersion == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceResult", "grafanaVersion");
            }
            this.grafanaVersion = grafanaVersion;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder lastUpdatedDate(String lastUpdatedDate) {
            if (lastUpdatedDate == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceResult", "lastUpdatedDate");
            }
            this.lastUpdatedDate = lastUpdatedDate;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder notificationDestinations(List<String> notificationDestinations) {
            if (notificationDestinations == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceResult", "notificationDestinations");
            }
            this.notificationDestinations = notificationDestinations;
            return this;
        }
        public Builder notificationDestinations(String... notificationDestinations) {
            return notificationDestinations(List.of(notificationDestinations));
        }
        @CustomType.Setter
        public Builder organizationRoleName(String organizationRoleName) {
            if (organizationRoleName == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceResult", "organizationRoleName");
            }
            this.organizationRoleName = organizationRoleName;
            return this;
        }
        @CustomType.Setter
        public Builder organizationalUnits(List<String> organizationalUnits) {
            if (organizationalUnits == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceResult", "organizationalUnits");
            }
            this.organizationalUnits = organizationalUnits;
            return this;
        }
        public Builder organizationalUnits(String... organizationalUnits) {
            return organizationalUnits(List.of(organizationalUnits));
        }
        @CustomType.Setter
        public Builder permissionType(String permissionType) {
            if (permissionType == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceResult", "permissionType");
            }
            this.permissionType = permissionType;
            return this;
        }
        @CustomType.Setter
        public Builder roleArn(String roleArn) {
            if (roleArn == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceResult", "roleArn");
            }
            this.roleArn = roleArn;
            return this;
        }
        @CustomType.Setter
        public Builder samlConfigurationStatus(String samlConfigurationStatus) {
            if (samlConfigurationStatus == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceResult", "samlConfigurationStatus");
            }
            this.samlConfigurationStatus = samlConfigurationStatus;
            return this;
        }
        @CustomType.Setter
        public Builder stackSetName(String stackSetName) {
            if (stackSetName == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceResult", "stackSetName");
            }
            this.stackSetName = stackSetName;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceResult", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder workspaceId(String workspaceId) {
            if (workspaceId == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceResult", "workspaceId");
            }
            this.workspaceId = workspaceId;
            return this;
        }
        public GetWorkspaceResult build() {
            final var _resultValue = new GetWorkspaceResult();
            _resultValue.accountAccessType = accountAccessType;
            _resultValue.arn = arn;
            _resultValue.authenticationProviders = authenticationProviders;
            _resultValue.createdDate = createdDate;
            _resultValue.dataSources = dataSources;
            _resultValue.description = description;
            _resultValue.endpoint = endpoint;
            _resultValue.grafanaVersion = grafanaVersion;
            _resultValue.id = id;
            _resultValue.lastUpdatedDate = lastUpdatedDate;
            _resultValue.name = name;
            _resultValue.notificationDestinations = notificationDestinations;
            _resultValue.organizationRoleName = organizationRoleName;
            _resultValue.organizationalUnits = organizationalUnits;
            _resultValue.permissionType = permissionType;
            _resultValue.roleArn = roleArn;
            _resultValue.samlConfigurationStatus = samlConfigurationStatus;
            _resultValue.stackSetName = stackSetName;
            _resultValue.status = status;
            _resultValue.tags = tags;
            _resultValue.workspaceId = workspaceId;
            return _resultValue;
        }
    }
}
