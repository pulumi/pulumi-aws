// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.outputs;

import com.pulumi.aws.quicksight.outputs.VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionShape;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.util.Objects;

@CustomType
public final class VisualsFilledMapVisualConditionalFormattingConditionalFormattingOption {
    private VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionShape shape;

    private VisualsFilledMapVisualConditionalFormattingConditionalFormattingOption() {}
    public VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionShape shape() {
        return this.shape;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VisualsFilledMapVisualConditionalFormattingConditionalFormattingOption defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionShape shape;
        public Builder() {}
        public Builder(VisualsFilledMapVisualConditionalFormattingConditionalFormattingOption defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.shape = defaults.shape;
        }

        @CustomType.Setter
        public Builder shape(VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionShape shape) {
            if (shape == null) {
              throw new MissingRequiredPropertyException("VisualsFilledMapVisualConditionalFormattingConditionalFormattingOption", "shape");
            }
            this.shape = shape;
            return this;
        }
        public VisualsFilledMapVisualConditionalFormattingConditionalFormattingOption build() {
            final var _resultValue = new VisualsFilledMapVisualConditionalFormattingConditionalFormattingOption();
            _resultValue.shape = shape;
            return _resultValue;
        }
    }
}
