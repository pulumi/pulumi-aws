// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.organizations.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetDelegatedServicesDelegatedService {
    /**
     * @return The date that the account became a delegated administrator for this service.
     * 
     */
    private String delegationEnabledDate;
    /**
     * @return The name of an AWS service that can request an operation for the specified service.
     * 
     */
    private String servicePrincipal;

    private GetDelegatedServicesDelegatedService() {}
    /**
     * @return The date that the account became a delegated administrator for this service.
     * 
     */
    public String delegationEnabledDate() {
        return this.delegationEnabledDate;
    }
    /**
     * @return The name of an AWS service that can request an operation for the specified service.
     * 
     */
    public String servicePrincipal() {
        return this.servicePrincipal;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDelegatedServicesDelegatedService defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String delegationEnabledDate;
        private String servicePrincipal;
        public Builder() {}
        public Builder(GetDelegatedServicesDelegatedService defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.delegationEnabledDate = defaults.delegationEnabledDate;
    	      this.servicePrincipal = defaults.servicePrincipal;
        }

        @CustomType.Setter
        public Builder delegationEnabledDate(String delegationEnabledDate) {
            if (delegationEnabledDate == null) {
              throw new MissingRequiredPropertyException("GetDelegatedServicesDelegatedService", "delegationEnabledDate");
            }
            this.delegationEnabledDate = delegationEnabledDate;
            return this;
        }
        @CustomType.Setter
        public Builder servicePrincipal(String servicePrincipal) {
            if (servicePrincipal == null) {
              throw new MissingRequiredPropertyException("GetDelegatedServicesDelegatedService", "servicePrincipal");
            }
            this.servicePrincipal = servicePrincipal;
            return this;
        }
        public GetDelegatedServicesDelegatedService build() {
            final var _resultValue = new GetDelegatedServicesDelegatedService();
            _resultValue.delegationEnabledDate = delegationEnabledDate;
            _resultValue.servicePrincipal = servicePrincipal;
            return _resultValue;
        }
    }
}
