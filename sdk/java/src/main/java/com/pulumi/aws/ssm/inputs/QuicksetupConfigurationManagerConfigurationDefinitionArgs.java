// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ssm.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class QuicksetupConfigurationManagerConfigurationDefinitionArgs extends com.pulumi.resources.ResourceArgs {

    public static final QuicksetupConfigurationManagerConfigurationDefinitionArgs Empty = new QuicksetupConfigurationManagerConfigurationDefinitionArgs();

    @Import(name="id")
    private @Nullable Output<String> id;

    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    @Import(name="localDeploymentAdministrationRoleArn")
    private @Nullable Output<String> localDeploymentAdministrationRoleArn;

    public Optional<Output<String>> localDeploymentAdministrationRoleArn() {
        return Optional.ofNullable(this.localDeploymentAdministrationRoleArn);
    }

    /**
     * Name of the IAM role used to deploy local configurations.
     * 
     */
    @Import(name="localDeploymentExecutionRoleName")
    private @Nullable Output<String> localDeploymentExecutionRoleName;

    /**
     * @return Name of the IAM role used to deploy local configurations.
     * 
     */
    public Optional<Output<String>> localDeploymentExecutionRoleName() {
        return Optional.ofNullable(this.localDeploymentExecutionRoleName);
    }

    /**
     * Parameters for the configuration definition type. Parameters for configuration definitions vary based the configuration type. See the [AWS API documentation](https://docs.aws.amazon.com/quick-setup/latest/APIReference/API_ConfigurationDefinitionInput.html) for a complete list of parameters for each configuration type.
     * 
     */
    @Import(name="parameters", required=true)
    private Output<Map<String,String>> parameters;

    /**
     * @return Parameters for the configuration definition type. Parameters for configuration definitions vary based the configuration type. See the [AWS API documentation](https://docs.aws.amazon.com/quick-setup/latest/APIReference/API_ConfigurationDefinitionInput.html) for a complete list of parameters for each configuration type.
     * 
     */
    public Output<Map<String,String>> parameters() {
        return this.parameters;
    }

    /**
     * Type of the Quick Setup configuration.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Type of the Quick Setup configuration.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     * Version of the Quick Setup type to use.
     * 
     */
    @Import(name="typeVersion")
    private @Nullable Output<String> typeVersion;

    /**
     * @return Version of the Quick Setup type to use.
     * 
     */
    public Optional<Output<String>> typeVersion() {
        return Optional.ofNullable(this.typeVersion);
    }

    private QuicksetupConfigurationManagerConfigurationDefinitionArgs() {}

    private QuicksetupConfigurationManagerConfigurationDefinitionArgs(QuicksetupConfigurationManagerConfigurationDefinitionArgs $) {
        this.id = $.id;
        this.localDeploymentAdministrationRoleArn = $.localDeploymentAdministrationRoleArn;
        this.localDeploymentExecutionRoleName = $.localDeploymentExecutionRoleName;
        this.parameters = $.parameters;
        this.type = $.type;
        this.typeVersion = $.typeVersion;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(QuicksetupConfigurationManagerConfigurationDefinitionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private QuicksetupConfigurationManagerConfigurationDefinitionArgs $;

        public Builder() {
            $ = new QuicksetupConfigurationManagerConfigurationDefinitionArgs();
        }

        public Builder(QuicksetupConfigurationManagerConfigurationDefinitionArgs defaults) {
            $ = new QuicksetupConfigurationManagerConfigurationDefinitionArgs(Objects.requireNonNull(defaults));
        }

        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        public Builder id(String id) {
            return id(Output.of(id));
        }

        public Builder localDeploymentAdministrationRoleArn(@Nullable Output<String> localDeploymentAdministrationRoleArn) {
            $.localDeploymentAdministrationRoleArn = localDeploymentAdministrationRoleArn;
            return this;
        }

        public Builder localDeploymentAdministrationRoleArn(String localDeploymentAdministrationRoleArn) {
            return localDeploymentAdministrationRoleArn(Output.of(localDeploymentAdministrationRoleArn));
        }

        /**
         * @param localDeploymentExecutionRoleName Name of the IAM role used to deploy local configurations.
         * 
         * @return builder
         * 
         */
        public Builder localDeploymentExecutionRoleName(@Nullable Output<String> localDeploymentExecutionRoleName) {
            $.localDeploymentExecutionRoleName = localDeploymentExecutionRoleName;
            return this;
        }

        /**
         * @param localDeploymentExecutionRoleName Name of the IAM role used to deploy local configurations.
         * 
         * @return builder
         * 
         */
        public Builder localDeploymentExecutionRoleName(String localDeploymentExecutionRoleName) {
            return localDeploymentExecutionRoleName(Output.of(localDeploymentExecutionRoleName));
        }

        /**
         * @param parameters Parameters for the configuration definition type. Parameters for configuration definitions vary based the configuration type. See the [AWS API documentation](https://docs.aws.amazon.com/quick-setup/latest/APIReference/API_ConfigurationDefinitionInput.html) for a complete list of parameters for each configuration type.
         * 
         * @return builder
         * 
         */
        public Builder parameters(Output<Map<String,String>> parameters) {
            $.parameters = parameters;
            return this;
        }

        /**
         * @param parameters Parameters for the configuration definition type. Parameters for configuration definitions vary based the configuration type. See the [AWS API documentation](https://docs.aws.amazon.com/quick-setup/latest/APIReference/API_ConfigurationDefinitionInput.html) for a complete list of parameters for each configuration type.
         * 
         * @return builder
         * 
         */
        public Builder parameters(Map<String,String> parameters) {
            return parameters(Output.of(parameters));
        }

        /**
         * @param type Type of the Quick Setup configuration.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of the Quick Setup configuration.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param typeVersion Version of the Quick Setup type to use.
         * 
         * @return builder
         * 
         */
        public Builder typeVersion(@Nullable Output<String> typeVersion) {
            $.typeVersion = typeVersion;
            return this;
        }

        /**
         * @param typeVersion Version of the Quick Setup type to use.
         * 
         * @return builder
         * 
         */
        public Builder typeVersion(String typeVersion) {
            return typeVersion(Output.of(typeVersion));
        }

        public QuicksetupConfigurationManagerConfigurationDefinitionArgs build() {
            if ($.parameters == null) {
                throw new MissingRequiredPropertyException("QuicksetupConfigurationManagerConfigurationDefinitionArgs", "parameters");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("QuicksetupConfigurationManagerConfigurationDefinitionArgs", "type");
            }
            return $;
        }
    }

}
