// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.networkfirewall.inputs;

import com.pulumi.aws.networkfirewall.inputs.LoggingConfigurationLoggingConfigurationLogDestinationConfigArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.util.List;
import java.util.Objects;


public final class LoggingConfigurationLoggingConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final LoggingConfigurationLoggingConfigurationArgs Empty = new LoggingConfigurationLoggingConfigurationArgs();

    /**
     * Set of configuration blocks describing the logging details for a firewall. See Log Destination Config below for details. At most, only two blocks can be specified; one for `FLOW` logs and one for `ALERT` logs.
     * 
     */
    @Import(name="logDestinationConfigs", required=true)
    private Output<List<LoggingConfigurationLoggingConfigurationLogDestinationConfigArgs>> logDestinationConfigs;

    /**
     * @return Set of configuration blocks describing the logging details for a firewall. See Log Destination Config below for details. At most, only two blocks can be specified; one for `FLOW` logs and one for `ALERT` logs.
     * 
     */
    public Output<List<LoggingConfigurationLoggingConfigurationLogDestinationConfigArgs>> logDestinationConfigs() {
        return this.logDestinationConfigs;
    }

    private LoggingConfigurationLoggingConfigurationArgs() {}

    private LoggingConfigurationLoggingConfigurationArgs(LoggingConfigurationLoggingConfigurationArgs $) {
        this.logDestinationConfigs = $.logDestinationConfigs;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LoggingConfigurationLoggingConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LoggingConfigurationLoggingConfigurationArgs $;

        public Builder() {
            $ = new LoggingConfigurationLoggingConfigurationArgs();
        }

        public Builder(LoggingConfigurationLoggingConfigurationArgs defaults) {
            $ = new LoggingConfigurationLoggingConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param logDestinationConfigs Set of configuration blocks describing the logging details for a firewall. See Log Destination Config below for details. At most, only two blocks can be specified; one for `FLOW` logs and one for `ALERT` logs.
         * 
         * @return builder
         * 
         */
        public Builder logDestinationConfigs(Output<List<LoggingConfigurationLoggingConfigurationLogDestinationConfigArgs>> logDestinationConfigs) {
            $.logDestinationConfigs = logDestinationConfigs;
            return this;
        }

        /**
         * @param logDestinationConfigs Set of configuration blocks describing the logging details for a firewall. See Log Destination Config below for details. At most, only two blocks can be specified; one for `FLOW` logs and one for `ALERT` logs.
         * 
         * @return builder
         * 
         */
        public Builder logDestinationConfigs(List<LoggingConfigurationLoggingConfigurationLogDestinationConfigArgs> logDestinationConfigs) {
            return logDestinationConfigs(Output.of(logDestinationConfigs));
        }

        /**
         * @param logDestinationConfigs Set of configuration blocks describing the logging details for a firewall. See Log Destination Config below for details. At most, only two blocks can be specified; one for `FLOW` logs and one for `ALERT` logs.
         * 
         * @return builder
         * 
         */
        public Builder logDestinationConfigs(LoggingConfigurationLoggingConfigurationLogDestinationConfigArgs... logDestinationConfigs) {
            return logDestinationConfigs(List.of(logDestinationConfigs));
        }

        public LoggingConfigurationLoggingConfigurationArgs build() {
            if ($.logDestinationConfigs == null) {
                throw new MissingRequiredPropertyException("LoggingConfigurationLoggingConfigurationArgs", "logDestinationConfigs");
            }
            return $;
        }
    }

}
