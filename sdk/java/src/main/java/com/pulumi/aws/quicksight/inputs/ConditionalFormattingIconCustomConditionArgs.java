// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.inputs;

import com.pulumi.aws.quicksight.inputs.ConditionalFormattingIconCustomConditionDisplayConfigurationArgs;
import com.pulumi.aws.quicksight.inputs.ConditionalFormattingIconCustomConditionIconOptionsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConditionalFormattingIconCustomConditionArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConditionalFormattingIconCustomConditionArgs Empty = new ConditionalFormattingIconCustomConditionArgs();

    @Import(name="color")
    private @Nullable Output<String> color;

    public Optional<Output<String>> color() {
        return Optional.ofNullable(this.color);
    }

    @Import(name="displayConfiguration")
    private @Nullable Output<ConditionalFormattingIconCustomConditionDisplayConfigurationArgs> displayConfiguration;

    public Optional<Output<ConditionalFormattingIconCustomConditionDisplayConfigurationArgs>> displayConfiguration() {
        return Optional.ofNullable(this.displayConfiguration);
    }

    @Import(name="expression", required=true)
    private Output<String> expression;

    public Output<String> expression() {
        return this.expression;
    }

    @Import(name="iconOptions", required=true)
    private Output<ConditionalFormattingIconCustomConditionIconOptionsArgs> iconOptions;

    public Output<ConditionalFormattingIconCustomConditionIconOptionsArgs> iconOptions() {
        return this.iconOptions;
    }

    private ConditionalFormattingIconCustomConditionArgs() {}

    private ConditionalFormattingIconCustomConditionArgs(ConditionalFormattingIconCustomConditionArgs $) {
        this.color = $.color;
        this.displayConfiguration = $.displayConfiguration;
        this.expression = $.expression;
        this.iconOptions = $.iconOptions;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConditionalFormattingIconCustomConditionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConditionalFormattingIconCustomConditionArgs $;

        public Builder() {
            $ = new ConditionalFormattingIconCustomConditionArgs();
        }

        public Builder(ConditionalFormattingIconCustomConditionArgs defaults) {
            $ = new ConditionalFormattingIconCustomConditionArgs(Objects.requireNonNull(defaults));
        }

        public Builder color(@Nullable Output<String> color) {
            $.color = color;
            return this;
        }

        public Builder color(String color) {
            return color(Output.of(color));
        }

        public Builder displayConfiguration(@Nullable Output<ConditionalFormattingIconCustomConditionDisplayConfigurationArgs> displayConfiguration) {
            $.displayConfiguration = displayConfiguration;
            return this;
        }

        public Builder displayConfiguration(ConditionalFormattingIconCustomConditionDisplayConfigurationArgs displayConfiguration) {
            return displayConfiguration(Output.of(displayConfiguration));
        }

        public Builder expression(Output<String> expression) {
            $.expression = expression;
            return this;
        }

        public Builder expression(String expression) {
            return expression(Output.of(expression));
        }

        public Builder iconOptions(Output<ConditionalFormattingIconCustomConditionIconOptionsArgs> iconOptions) {
            $.iconOptions = iconOptions;
            return this;
        }

        public Builder iconOptions(ConditionalFormattingIconCustomConditionIconOptionsArgs iconOptions) {
            return iconOptions(Output.of(iconOptions));
        }

        public ConditionalFormattingIconCustomConditionArgs build() {
            if ($.expression == null) {
                throw new MissingRequiredPropertyException("ConditionalFormattingIconCustomConditionArgs", "expression");
            }
            if ($.iconOptions == null) {
                throw new MissingRequiredPropertyException("ConditionalFormattingIconCustomConditionArgs", "iconOptions");
            }
            return $;
        }
    }

}
