// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ssm.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetParameterArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetParameterArgs Empty = new GetParameterArgs();

    /**
     * Name of the parameter.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Name of the parameter.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * Whether to return decrypted `SecureString` value. Defaults to `true`.
     * 
     * In addition to all arguments above, the following attributes are exported:
     * 
     */
    @Import(name="withDecryption")
    private @Nullable Output<Boolean> withDecryption;

    /**
     * @return Whether to return decrypted `SecureString` value. Defaults to `true`.
     * 
     * In addition to all arguments above, the following attributes are exported:
     * 
     */
    public Optional<Output<Boolean>> withDecryption() {
        return Optional.ofNullable(this.withDecryption);
    }

    private GetParameterArgs() {}

    private GetParameterArgs(GetParameterArgs $) {
        this.name = $.name;
        this.withDecryption = $.withDecryption;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetParameterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetParameterArgs $;

        public Builder() {
            $ = new GetParameterArgs();
        }

        public Builder(GetParameterArgs defaults) {
            $ = new GetParameterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param name Name of the parameter.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the parameter.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param withDecryption Whether to return decrypted `SecureString` value. Defaults to `true`.
         * 
         * In addition to all arguments above, the following attributes are exported:
         * 
         * @return builder
         * 
         */
        public Builder withDecryption(@Nullable Output<Boolean> withDecryption) {
            $.withDecryption = withDecryption;
            return this;
        }

        /**
         * @param withDecryption Whether to return decrypted `SecureString` value. Defaults to `true`.
         * 
         * In addition to all arguments above, the following attributes are exported:
         * 
         * @return builder
         * 
         */
        public Builder withDecryption(Boolean withDecryption) {
            return withDecryption(Output.of(withDecryption));
        }

        public GetParameterArgs build() {
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            return $;
        }
    }

}
