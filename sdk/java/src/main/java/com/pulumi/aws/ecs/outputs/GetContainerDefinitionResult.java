// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ecs.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetContainerDefinitionResult {
    private String containerName;
    /**
     * @return CPU limit for this container definition
     * 
     */
    private @Nullable Integer cpu;
    /**
     * @return Indicator if networking is disabled
     * 
     */
    private @Nullable Boolean disableNetworking;
    /**
     * @return Set docker labels
     * 
     */
    private @Nullable Map<String,String> dockerLabels;
    /**
     * @return Environment in use
     * 
     */
    private @Nullable Map<String,String> environment;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private @Nullable String id;
    /**
     * @return Docker image in use, including the digest
     * 
     */
    private @Nullable String image;
    /**
     * @return Digest of the docker image in use
     * 
     */
    private @Nullable String imageDigest;
    /**
     * @return Memory limit for this container definition
     * 
     */
    private @Nullable Integer memory;
    /**
     * @return Soft limit (in MiB) of memory to reserve for the container. When system memory is under contention, Docker attempts to keep the container memory to this soft limit
     * 
     */
    private @Nullable Integer memoryReservation;
    private String taskDefinition;

    private GetContainerDefinitionResult() {}
    public String containerName() {
        return this.containerName;
    }
    /**
     * @return CPU limit for this container definition
     * 
     */
    public Optional<Integer> cpu() {
        return Optional.ofNullable(this.cpu);
    }
    /**
     * @return Indicator if networking is disabled
     * 
     */
    public Optional<Boolean> disableNetworking() {
        return Optional.ofNullable(this.disableNetworking);
    }
    /**
     * @return Set docker labels
     * 
     */
    public Map<String,String> dockerLabels() {
        return this.dockerLabels == null ? Map.of() : this.dockerLabels;
    }
    /**
     * @return Environment in use
     * 
     */
    public Map<String,String> environment() {
        return this.environment == null ? Map.of() : this.environment;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Docker image in use, including the digest
     * 
     */
    public Optional<String> image() {
        return Optional.ofNullable(this.image);
    }
    /**
     * @return Digest of the docker image in use
     * 
     */
    public Optional<String> imageDigest() {
        return Optional.ofNullable(this.imageDigest);
    }
    /**
     * @return Memory limit for this container definition
     * 
     */
    public Optional<Integer> memory() {
        return Optional.ofNullable(this.memory);
    }
    /**
     * @return Soft limit (in MiB) of memory to reserve for the container. When system memory is under contention, Docker attempts to keep the container memory to this soft limit
     * 
     */
    public Optional<Integer> memoryReservation() {
        return Optional.ofNullable(this.memoryReservation);
    }
    public String taskDefinition() {
        return this.taskDefinition;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetContainerDefinitionResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String containerName;
        private @Nullable Integer cpu;
        private @Nullable Boolean disableNetworking;
        private @Nullable Map<String,String> dockerLabels;
        private @Nullable Map<String,String> environment;
        private @Nullable String id;
        private @Nullable String image;
        private @Nullable String imageDigest;
        private @Nullable Integer memory;
        private @Nullable Integer memoryReservation;
        private String taskDefinition;
        public Builder() {}
        public Builder(GetContainerDefinitionResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.containerName = defaults.containerName;
    	      this.cpu = defaults.cpu;
    	      this.disableNetworking = defaults.disableNetworking;
    	      this.dockerLabels = defaults.dockerLabels;
    	      this.environment = defaults.environment;
    	      this.id = defaults.id;
    	      this.image = defaults.image;
    	      this.imageDigest = defaults.imageDigest;
    	      this.memory = defaults.memory;
    	      this.memoryReservation = defaults.memoryReservation;
    	      this.taskDefinition = defaults.taskDefinition;
        }

        @CustomType.Setter
        public Builder containerName(String containerName) {
            this.containerName = Objects.requireNonNull(containerName);
            return this;
        }
        @CustomType.Setter
        public Builder cpu(@Nullable Integer cpu) {
            this.cpu = cpu;
            return this;
        }
        @CustomType.Setter
        public Builder disableNetworking(@Nullable Boolean disableNetworking) {
            this.disableNetworking = disableNetworking;
            return this;
        }
        @CustomType.Setter
        public Builder dockerLabels(@Nullable Map<String,String> dockerLabels) {
            this.dockerLabels = dockerLabels;
            return this;
        }
        @CustomType.Setter
        public Builder environment(@Nullable Map<String,String> environment) {
            this.environment = environment;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder image(@Nullable String image) {
            this.image = image;
            return this;
        }
        @CustomType.Setter
        public Builder imageDigest(@Nullable String imageDigest) {
            this.imageDigest = imageDigest;
            return this;
        }
        @CustomType.Setter
        public Builder memory(@Nullable Integer memory) {
            this.memory = memory;
            return this;
        }
        @CustomType.Setter
        public Builder memoryReservation(@Nullable Integer memoryReservation) {
            this.memoryReservation = memoryReservation;
            return this;
        }
        @CustomType.Setter
        public Builder taskDefinition(String taskDefinition) {
            this.taskDefinition = Objects.requireNonNull(taskDefinition);
            return this;
        }
        public GetContainerDefinitionResult build() {
            final var o = new GetContainerDefinitionResult();
            o.containerName = containerName;
            o.cpu = cpu;
            o.disableNetworking = disableNetworking;
            o.dockerLabels = dockerLabels;
            o.environment = environment;
            o.id = id;
            o.image = image;
            o.imageDigest = imageDigest;
            o.memory = memory;
            o.memoryReservation = memoryReservation;
            o.taskDefinition = taskDefinition;
            return o;
        }
    }
}
