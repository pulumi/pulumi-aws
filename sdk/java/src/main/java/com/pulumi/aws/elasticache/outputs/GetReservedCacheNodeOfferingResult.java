// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.elasticache.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetReservedCacheNodeOfferingResult {
    private String cacheNodeType;
    private String duration;
    /**
     * @return Fixed price charged for this reserved cache node.
     * 
     */
    private Double fixedPrice;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Unique identifier for the reservation.
     * 
     */
    private String offeringId;
    private String offeringType;
    private String productDescription;

    private GetReservedCacheNodeOfferingResult() {}
    public String cacheNodeType() {
        return this.cacheNodeType;
    }
    public String duration() {
        return this.duration;
    }
    /**
     * @return Fixed price charged for this reserved cache node.
     * 
     */
    public Double fixedPrice() {
        return this.fixedPrice;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Unique identifier for the reservation.
     * 
     */
    public String offeringId() {
        return this.offeringId;
    }
    public String offeringType() {
        return this.offeringType;
    }
    public String productDescription() {
        return this.productDescription;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetReservedCacheNodeOfferingResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String cacheNodeType;
        private String duration;
        private Double fixedPrice;
        private String id;
        private String offeringId;
        private String offeringType;
        private String productDescription;
        public Builder() {}
        public Builder(GetReservedCacheNodeOfferingResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cacheNodeType = defaults.cacheNodeType;
    	      this.duration = defaults.duration;
    	      this.fixedPrice = defaults.fixedPrice;
    	      this.id = defaults.id;
    	      this.offeringId = defaults.offeringId;
    	      this.offeringType = defaults.offeringType;
    	      this.productDescription = defaults.productDescription;
        }

        @CustomType.Setter
        public Builder cacheNodeType(String cacheNodeType) {
            if (cacheNodeType == null) {
              throw new MissingRequiredPropertyException("GetReservedCacheNodeOfferingResult", "cacheNodeType");
            }
            this.cacheNodeType = cacheNodeType;
            return this;
        }
        @CustomType.Setter
        public Builder duration(String duration) {
            if (duration == null) {
              throw new MissingRequiredPropertyException("GetReservedCacheNodeOfferingResult", "duration");
            }
            this.duration = duration;
            return this;
        }
        @CustomType.Setter
        public Builder fixedPrice(Double fixedPrice) {
            if (fixedPrice == null) {
              throw new MissingRequiredPropertyException("GetReservedCacheNodeOfferingResult", "fixedPrice");
            }
            this.fixedPrice = fixedPrice;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetReservedCacheNodeOfferingResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder offeringId(String offeringId) {
            if (offeringId == null) {
              throw new MissingRequiredPropertyException("GetReservedCacheNodeOfferingResult", "offeringId");
            }
            this.offeringId = offeringId;
            return this;
        }
        @CustomType.Setter
        public Builder offeringType(String offeringType) {
            if (offeringType == null) {
              throw new MissingRequiredPropertyException("GetReservedCacheNodeOfferingResult", "offeringType");
            }
            this.offeringType = offeringType;
            return this;
        }
        @CustomType.Setter
        public Builder productDescription(String productDescription) {
            if (productDescription == null) {
              throw new MissingRequiredPropertyException("GetReservedCacheNodeOfferingResult", "productDescription");
            }
            this.productDescription = productDescription;
            return this;
        }
        public GetReservedCacheNodeOfferingResult build() {
            final var _resultValue = new GetReservedCacheNodeOfferingResult();
            _resultValue.cacheNodeType = cacheNodeType;
            _resultValue.duration = duration;
            _resultValue.fixedPrice = fixedPrice;
            _resultValue.id = id;
            _resultValue.offeringId = offeringId;
            _resultValue.offeringType = offeringType;
            _resultValue.productDescription = productDescription;
            return _resultValue;
        }
    }
}
