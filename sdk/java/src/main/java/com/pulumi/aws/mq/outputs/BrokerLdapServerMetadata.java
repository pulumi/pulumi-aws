// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.mq.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class BrokerLdapServerMetadata {
    /**
     * @return List of a fully qualified domain name of the LDAP server and an optional failover server.
     * 
     */
    private @Nullable List<String> hosts;
    /**
     * @return Fully qualified name of the directory to search for a user’s groups.
     * 
     */
    private @Nullable String roleBase;
    /**
     * @return Specifies the LDAP attribute that identifies the group name attribute in the object returned from the group membership query.
     * 
     */
    private @Nullable String roleName;
    /**
     * @return Search criteria for groups.
     * 
     */
    private @Nullable String roleSearchMatching;
    /**
     * @return Whether the directory search scope is the entire sub-tree.
     * 
     */
    private @Nullable Boolean roleSearchSubtree;
    /**
     * @return Service account password.
     * 
     */
    private @Nullable String serviceAccountPassword;
    /**
     * @return Service account username.
     * 
     */
    private @Nullable String serviceAccountUsername;
    /**
     * @return Fully qualified name of the directory where you want to search for users.
     * 
     */
    private @Nullable String userBase;
    /**
     * @return Specifies the name of the LDAP attribute for the user group membership.
     * 
     */
    private @Nullable String userRoleName;
    /**
     * @return Search criteria for users.
     * 
     */
    private @Nullable String userSearchMatching;
    /**
     * @return Whether the directory search scope is the entire sub-tree.
     * 
     */
    private @Nullable Boolean userSearchSubtree;

    private BrokerLdapServerMetadata() {}
    /**
     * @return List of a fully qualified domain name of the LDAP server and an optional failover server.
     * 
     */
    public List<String> hosts() {
        return this.hosts == null ? List.of() : this.hosts;
    }
    /**
     * @return Fully qualified name of the directory to search for a user’s groups.
     * 
     */
    public Optional<String> roleBase() {
        return Optional.ofNullable(this.roleBase);
    }
    /**
     * @return Specifies the LDAP attribute that identifies the group name attribute in the object returned from the group membership query.
     * 
     */
    public Optional<String> roleName() {
        return Optional.ofNullable(this.roleName);
    }
    /**
     * @return Search criteria for groups.
     * 
     */
    public Optional<String> roleSearchMatching() {
        return Optional.ofNullable(this.roleSearchMatching);
    }
    /**
     * @return Whether the directory search scope is the entire sub-tree.
     * 
     */
    public Optional<Boolean> roleSearchSubtree() {
        return Optional.ofNullable(this.roleSearchSubtree);
    }
    /**
     * @return Service account password.
     * 
     */
    public Optional<String> serviceAccountPassword() {
        return Optional.ofNullable(this.serviceAccountPassword);
    }
    /**
     * @return Service account username.
     * 
     */
    public Optional<String> serviceAccountUsername() {
        return Optional.ofNullable(this.serviceAccountUsername);
    }
    /**
     * @return Fully qualified name of the directory where you want to search for users.
     * 
     */
    public Optional<String> userBase() {
        return Optional.ofNullable(this.userBase);
    }
    /**
     * @return Specifies the name of the LDAP attribute for the user group membership.
     * 
     */
    public Optional<String> userRoleName() {
        return Optional.ofNullable(this.userRoleName);
    }
    /**
     * @return Search criteria for users.
     * 
     */
    public Optional<String> userSearchMatching() {
        return Optional.ofNullable(this.userSearchMatching);
    }
    /**
     * @return Whether the directory search scope is the entire sub-tree.
     * 
     */
    public Optional<Boolean> userSearchSubtree() {
        return Optional.ofNullable(this.userSearchSubtree);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BrokerLdapServerMetadata defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> hosts;
        private @Nullable String roleBase;
        private @Nullable String roleName;
        private @Nullable String roleSearchMatching;
        private @Nullable Boolean roleSearchSubtree;
        private @Nullable String serviceAccountPassword;
        private @Nullable String serviceAccountUsername;
        private @Nullable String userBase;
        private @Nullable String userRoleName;
        private @Nullable String userSearchMatching;
        private @Nullable Boolean userSearchSubtree;
        public Builder() {}
        public Builder(BrokerLdapServerMetadata defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.hosts = defaults.hosts;
    	      this.roleBase = defaults.roleBase;
    	      this.roleName = defaults.roleName;
    	      this.roleSearchMatching = defaults.roleSearchMatching;
    	      this.roleSearchSubtree = defaults.roleSearchSubtree;
    	      this.serviceAccountPassword = defaults.serviceAccountPassword;
    	      this.serviceAccountUsername = defaults.serviceAccountUsername;
    	      this.userBase = defaults.userBase;
    	      this.userRoleName = defaults.userRoleName;
    	      this.userSearchMatching = defaults.userSearchMatching;
    	      this.userSearchSubtree = defaults.userSearchSubtree;
        }

        @CustomType.Setter
        public Builder hosts(@Nullable List<String> hosts) {
            this.hosts = hosts;
            return this;
        }
        public Builder hosts(String... hosts) {
            return hosts(List.of(hosts));
        }
        @CustomType.Setter
        public Builder roleBase(@Nullable String roleBase) {
            this.roleBase = roleBase;
            return this;
        }
        @CustomType.Setter
        public Builder roleName(@Nullable String roleName) {
            this.roleName = roleName;
            return this;
        }
        @CustomType.Setter
        public Builder roleSearchMatching(@Nullable String roleSearchMatching) {
            this.roleSearchMatching = roleSearchMatching;
            return this;
        }
        @CustomType.Setter
        public Builder roleSearchSubtree(@Nullable Boolean roleSearchSubtree) {
            this.roleSearchSubtree = roleSearchSubtree;
            return this;
        }
        @CustomType.Setter
        public Builder serviceAccountPassword(@Nullable String serviceAccountPassword) {
            this.serviceAccountPassword = serviceAccountPassword;
            return this;
        }
        @CustomType.Setter
        public Builder serviceAccountUsername(@Nullable String serviceAccountUsername) {
            this.serviceAccountUsername = serviceAccountUsername;
            return this;
        }
        @CustomType.Setter
        public Builder userBase(@Nullable String userBase) {
            this.userBase = userBase;
            return this;
        }
        @CustomType.Setter
        public Builder userRoleName(@Nullable String userRoleName) {
            this.userRoleName = userRoleName;
            return this;
        }
        @CustomType.Setter
        public Builder userSearchMatching(@Nullable String userSearchMatching) {
            this.userSearchMatching = userSearchMatching;
            return this;
        }
        @CustomType.Setter
        public Builder userSearchSubtree(@Nullable Boolean userSearchSubtree) {
            this.userSearchSubtree = userSearchSubtree;
            return this;
        }
        public BrokerLdapServerMetadata build() {
            final var _resultValue = new BrokerLdapServerMetadata();
            _resultValue.hosts = hosts;
            _resultValue.roleBase = roleBase;
            _resultValue.roleName = roleName;
            _resultValue.roleSearchMatching = roleSearchMatching;
            _resultValue.roleSearchSubtree = roleSearchSubtree;
            _resultValue.serviceAccountPassword = serviceAccountPassword;
            _resultValue.serviceAccountUsername = serviceAccountUsername;
            _resultValue.userBase = userBase;
            _resultValue.userRoleName = userRoleName;
            _resultValue.userSearchMatching = userSearchMatching;
            _resultValue.userSearchSubtree = userSearchSubtree;
            return _resultValue;
        }
    }
}
