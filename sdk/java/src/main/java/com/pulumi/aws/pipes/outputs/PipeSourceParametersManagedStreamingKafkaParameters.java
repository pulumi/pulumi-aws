// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.pipes.outputs;

import com.pulumi.aws.pipes.outputs.PipeSourceParametersManagedStreamingKafkaParametersCredentials;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class PipeSourceParametersManagedStreamingKafkaParameters {
    private @Nullable Integer batchSize;
    private @Nullable String consumerGroupId;
    private @Nullable PipeSourceParametersManagedStreamingKafkaParametersCredentials credentials;
    private @Nullable Integer maximumBatchingWindowInSeconds;
    private @Nullable String startingPosition;
    private String topicName;

    private PipeSourceParametersManagedStreamingKafkaParameters() {}
    public Optional<Integer> batchSize() {
        return Optional.ofNullable(this.batchSize);
    }
    public Optional<String> consumerGroupId() {
        return Optional.ofNullable(this.consumerGroupId);
    }
    public Optional<PipeSourceParametersManagedStreamingKafkaParametersCredentials> credentials() {
        return Optional.ofNullable(this.credentials);
    }
    public Optional<Integer> maximumBatchingWindowInSeconds() {
        return Optional.ofNullable(this.maximumBatchingWindowInSeconds);
    }
    public Optional<String> startingPosition() {
        return Optional.ofNullable(this.startingPosition);
    }
    public String topicName() {
        return this.topicName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PipeSourceParametersManagedStreamingKafkaParameters defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer batchSize;
        private @Nullable String consumerGroupId;
        private @Nullable PipeSourceParametersManagedStreamingKafkaParametersCredentials credentials;
        private @Nullable Integer maximumBatchingWindowInSeconds;
        private @Nullable String startingPosition;
        private String topicName;
        public Builder() {}
        public Builder(PipeSourceParametersManagedStreamingKafkaParameters defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.batchSize = defaults.batchSize;
    	      this.consumerGroupId = defaults.consumerGroupId;
    	      this.credentials = defaults.credentials;
    	      this.maximumBatchingWindowInSeconds = defaults.maximumBatchingWindowInSeconds;
    	      this.startingPosition = defaults.startingPosition;
    	      this.topicName = defaults.topicName;
        }

        @CustomType.Setter
        public Builder batchSize(@Nullable Integer batchSize) {

            this.batchSize = batchSize;
            return this;
        }
        @CustomType.Setter
        public Builder consumerGroupId(@Nullable String consumerGroupId) {

            this.consumerGroupId = consumerGroupId;
            return this;
        }
        @CustomType.Setter
        public Builder credentials(@Nullable PipeSourceParametersManagedStreamingKafkaParametersCredentials credentials) {

            this.credentials = credentials;
            return this;
        }
        @CustomType.Setter
        public Builder maximumBatchingWindowInSeconds(@Nullable Integer maximumBatchingWindowInSeconds) {

            this.maximumBatchingWindowInSeconds = maximumBatchingWindowInSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder startingPosition(@Nullable String startingPosition) {

            this.startingPosition = startingPosition;
            return this;
        }
        @CustomType.Setter
        public Builder topicName(String topicName) {
            if (topicName == null) {
              throw new MissingRequiredPropertyException("PipeSourceParametersManagedStreamingKafkaParameters", "topicName");
            }
            this.topicName = topicName;
            return this;
        }
        public PipeSourceParametersManagedStreamingKafkaParameters build() {
            final var _resultValue = new PipeSourceParametersManagedStreamingKafkaParameters();
            _resultValue.batchSize = batchSize;
            _resultValue.consumerGroupId = consumerGroupId;
            _resultValue.credentials = credentials;
            _resultValue.maximumBatchingWindowInSeconds = maximumBatchingWindowInSeconds;
            _resultValue.startingPosition = startingPosition;
            _resultValue.topicName = topicName;
            return _resultValue;
        }
    }
}
