// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.lb.inputs;

import com.pulumi.aws.lb.inputs.GetListenerRuleConditionHostHeaderArgs;
import com.pulumi.aws.lb.inputs.GetListenerRuleConditionHttpHeaderArgs;
import com.pulumi.aws.lb.inputs.GetListenerRuleConditionHttpRequestMethodArgs;
import com.pulumi.aws.lb.inputs.GetListenerRuleConditionPathPatternArgs;
import com.pulumi.aws.lb.inputs.GetListenerRuleConditionQueryStringArgs;
import com.pulumi.aws.lb.inputs.GetListenerRuleConditionSourceIpArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetListenerRuleConditionArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetListenerRuleConditionArgs Empty = new GetListenerRuleConditionArgs();

    /**
     * Contains a single attribute `values`, which contains a set of host names.
     * 
     */
    @Import(name="hostHeaders")
    private @Nullable Output<List<GetListenerRuleConditionHostHeaderArgs>> hostHeaders;

    /**
     * @return Contains a single attribute `values`, which contains a set of host names.
     * 
     */
    public Optional<Output<List<GetListenerRuleConditionHostHeaderArgs>>> hostHeaders() {
        return Optional.ofNullable(this.hostHeaders);
    }

    /**
     * HTTP header and values to match.
     * Detailed below.
     * 
     */
    @Import(name="httpHeaders")
    private @Nullable Output<List<GetListenerRuleConditionHttpHeaderArgs>> httpHeaders;

    /**
     * @return HTTP header and values to match.
     * Detailed below.
     * 
     */
    public Optional<Output<List<GetListenerRuleConditionHttpHeaderArgs>>> httpHeaders() {
        return Optional.ofNullable(this.httpHeaders);
    }

    /**
     * Contains a single attribute `values`, which contains a set of HTTP request methods.
     * 
     */
    @Import(name="httpRequestMethods")
    private @Nullable Output<List<GetListenerRuleConditionHttpRequestMethodArgs>> httpRequestMethods;

    /**
     * @return Contains a single attribute `values`, which contains a set of HTTP request methods.
     * 
     */
    public Optional<Output<List<GetListenerRuleConditionHttpRequestMethodArgs>>> httpRequestMethods() {
        return Optional.ofNullable(this.httpRequestMethods);
    }

    /**
     * Contains a single attribute `values`, which contains a set of path patterns to compare against the request URL.
     * 
     */
    @Import(name="pathPatterns")
    private @Nullable Output<List<GetListenerRuleConditionPathPatternArgs>> pathPatterns;

    /**
     * @return Contains a single attribute `values`, which contains a set of path patterns to compare against the request URL.
     * 
     */
    public Optional<Output<List<GetListenerRuleConditionPathPatternArgs>>> pathPatterns() {
        return Optional.ofNullable(this.pathPatterns);
    }

    /**
     * Query string parameters to match.
     * Detailed below.
     * 
     */
    @Import(name="queryStrings")
    private @Nullable Output<List<GetListenerRuleConditionQueryStringArgs>> queryStrings;

    /**
     * @return Query string parameters to match.
     * Detailed below.
     * 
     */
    public Optional<Output<List<GetListenerRuleConditionQueryStringArgs>>> queryStrings() {
        return Optional.ofNullable(this.queryStrings);
    }

    /**
     * Contains a single attribute `values`, which contains a set of source IPs in CIDR notation.
     * 
     */
    @Import(name="sourceIps")
    private @Nullable Output<List<GetListenerRuleConditionSourceIpArgs>> sourceIps;

    /**
     * @return Contains a single attribute `values`, which contains a set of source IPs in CIDR notation.
     * 
     */
    public Optional<Output<List<GetListenerRuleConditionSourceIpArgs>>> sourceIps() {
        return Optional.ofNullable(this.sourceIps);
    }

    private GetListenerRuleConditionArgs() {}

    private GetListenerRuleConditionArgs(GetListenerRuleConditionArgs $) {
        this.hostHeaders = $.hostHeaders;
        this.httpHeaders = $.httpHeaders;
        this.httpRequestMethods = $.httpRequestMethods;
        this.pathPatterns = $.pathPatterns;
        this.queryStrings = $.queryStrings;
        this.sourceIps = $.sourceIps;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetListenerRuleConditionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetListenerRuleConditionArgs $;

        public Builder() {
            $ = new GetListenerRuleConditionArgs();
        }

        public Builder(GetListenerRuleConditionArgs defaults) {
            $ = new GetListenerRuleConditionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param hostHeaders Contains a single attribute `values`, which contains a set of host names.
         * 
         * @return builder
         * 
         */
        public Builder hostHeaders(@Nullable Output<List<GetListenerRuleConditionHostHeaderArgs>> hostHeaders) {
            $.hostHeaders = hostHeaders;
            return this;
        }

        /**
         * @param hostHeaders Contains a single attribute `values`, which contains a set of host names.
         * 
         * @return builder
         * 
         */
        public Builder hostHeaders(List<GetListenerRuleConditionHostHeaderArgs> hostHeaders) {
            return hostHeaders(Output.of(hostHeaders));
        }

        /**
         * @param hostHeaders Contains a single attribute `values`, which contains a set of host names.
         * 
         * @return builder
         * 
         */
        public Builder hostHeaders(GetListenerRuleConditionHostHeaderArgs... hostHeaders) {
            return hostHeaders(List.of(hostHeaders));
        }

        /**
         * @param httpHeaders HTTP header and values to match.
         * Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder httpHeaders(@Nullable Output<List<GetListenerRuleConditionHttpHeaderArgs>> httpHeaders) {
            $.httpHeaders = httpHeaders;
            return this;
        }

        /**
         * @param httpHeaders HTTP header and values to match.
         * Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder httpHeaders(List<GetListenerRuleConditionHttpHeaderArgs> httpHeaders) {
            return httpHeaders(Output.of(httpHeaders));
        }

        /**
         * @param httpHeaders HTTP header and values to match.
         * Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder httpHeaders(GetListenerRuleConditionHttpHeaderArgs... httpHeaders) {
            return httpHeaders(List.of(httpHeaders));
        }

        /**
         * @param httpRequestMethods Contains a single attribute `values`, which contains a set of HTTP request methods.
         * 
         * @return builder
         * 
         */
        public Builder httpRequestMethods(@Nullable Output<List<GetListenerRuleConditionHttpRequestMethodArgs>> httpRequestMethods) {
            $.httpRequestMethods = httpRequestMethods;
            return this;
        }

        /**
         * @param httpRequestMethods Contains a single attribute `values`, which contains a set of HTTP request methods.
         * 
         * @return builder
         * 
         */
        public Builder httpRequestMethods(List<GetListenerRuleConditionHttpRequestMethodArgs> httpRequestMethods) {
            return httpRequestMethods(Output.of(httpRequestMethods));
        }

        /**
         * @param httpRequestMethods Contains a single attribute `values`, which contains a set of HTTP request methods.
         * 
         * @return builder
         * 
         */
        public Builder httpRequestMethods(GetListenerRuleConditionHttpRequestMethodArgs... httpRequestMethods) {
            return httpRequestMethods(List.of(httpRequestMethods));
        }

        /**
         * @param pathPatterns Contains a single attribute `values`, which contains a set of path patterns to compare against the request URL.
         * 
         * @return builder
         * 
         */
        public Builder pathPatterns(@Nullable Output<List<GetListenerRuleConditionPathPatternArgs>> pathPatterns) {
            $.pathPatterns = pathPatterns;
            return this;
        }

        /**
         * @param pathPatterns Contains a single attribute `values`, which contains a set of path patterns to compare against the request URL.
         * 
         * @return builder
         * 
         */
        public Builder pathPatterns(List<GetListenerRuleConditionPathPatternArgs> pathPatterns) {
            return pathPatterns(Output.of(pathPatterns));
        }

        /**
         * @param pathPatterns Contains a single attribute `values`, which contains a set of path patterns to compare against the request URL.
         * 
         * @return builder
         * 
         */
        public Builder pathPatterns(GetListenerRuleConditionPathPatternArgs... pathPatterns) {
            return pathPatterns(List.of(pathPatterns));
        }

        /**
         * @param queryStrings Query string parameters to match.
         * Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder queryStrings(@Nullable Output<List<GetListenerRuleConditionQueryStringArgs>> queryStrings) {
            $.queryStrings = queryStrings;
            return this;
        }

        /**
         * @param queryStrings Query string parameters to match.
         * Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder queryStrings(List<GetListenerRuleConditionQueryStringArgs> queryStrings) {
            return queryStrings(Output.of(queryStrings));
        }

        /**
         * @param queryStrings Query string parameters to match.
         * Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder queryStrings(GetListenerRuleConditionQueryStringArgs... queryStrings) {
            return queryStrings(List.of(queryStrings));
        }

        /**
         * @param sourceIps Contains a single attribute `values`, which contains a set of source IPs in CIDR notation.
         * 
         * @return builder
         * 
         */
        public Builder sourceIps(@Nullable Output<List<GetListenerRuleConditionSourceIpArgs>> sourceIps) {
            $.sourceIps = sourceIps;
            return this;
        }

        /**
         * @param sourceIps Contains a single attribute `values`, which contains a set of source IPs in CIDR notation.
         * 
         * @return builder
         * 
         */
        public Builder sourceIps(List<GetListenerRuleConditionSourceIpArgs> sourceIps) {
            return sourceIps(Output.of(sourceIps));
        }

        /**
         * @param sourceIps Contains a single attribute `values`, which contains a set of source IPs in CIDR notation.
         * 
         * @return builder
         * 
         */
        public Builder sourceIps(GetListenerRuleConditionSourceIpArgs... sourceIps) {
            return sourceIps(List.of(sourceIps));
        }

        public GetListenerRuleConditionArgs build() {
            return $;
        }
    }

}
