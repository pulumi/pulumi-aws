// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.emr.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class GetSupportedInstanceTypesSupportedInstanceTypeArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetSupportedInstanceTypesSupportedInstanceTypeArgs Empty = new GetSupportedInstanceTypesSupportedInstanceTypeArgs();

    /**
     * CPU architecture.
     * 
     */
    @Import(name="architecture", required=true)
    private Output<String> architecture;

    /**
     * @return CPU architecture.
     * 
     */
    public Output<String> architecture() {
        return this.architecture;
    }

    /**
     * Indicates whether the instance type supports Amazon EBS optimization.
     * 
     */
    @Import(name="ebsOptimizedAvailable", required=true)
    private Output<Boolean> ebsOptimizedAvailable;

    /**
     * @return Indicates whether the instance type supports Amazon EBS optimization.
     * 
     */
    public Output<Boolean> ebsOptimizedAvailable() {
        return this.ebsOptimizedAvailable;
    }

    /**
     * Indicates whether the instance type uses Amazon EBS optimization by default.
     * 
     */
    @Import(name="ebsOptimizedByDefault", required=true)
    private Output<Boolean> ebsOptimizedByDefault;

    /**
     * @return Indicates whether the instance type uses Amazon EBS optimization by default.
     * 
     */
    public Output<Boolean> ebsOptimizedByDefault() {
        return this.ebsOptimizedByDefault;
    }

    /**
     * Indicates whether the instance type only supports Amazon EBS.
     * 
     */
    @Import(name="ebsStorageOnly", required=true)
    private Output<Boolean> ebsStorageOnly;

    /**
     * @return Indicates whether the instance type only supports Amazon EBS.
     * 
     */
    public Output<Boolean> ebsStorageOnly() {
        return this.ebsStorageOnly;
    }

    /**
     * The Amazon EC2 family and generation for the instance type.
     * 
     */
    @Import(name="instanceFamilyId", required=true)
    private Output<String> instanceFamilyId;

    /**
     * @return The Amazon EC2 family and generation for the instance type.
     * 
     */
    public Output<String> instanceFamilyId() {
        return this.instanceFamilyId;
    }

    /**
     * Indicates whether the instance type only supports 64-bit architecture.
     * 
     */
    @Import(name="is64BitsOnly", required=true)
    private Output<Boolean> is64BitsOnly;

    /**
     * @return Indicates whether the instance type only supports 64-bit architecture.
     * 
     */
    public Output<Boolean> is64BitsOnly() {
        return this.is64BitsOnly;
    }

    /**
     * Memory that is available to Amazon EMR from the instance type.
     * 
     */
    @Import(name="memoryGb", required=true)
    private Output<Double> memoryGb;

    /**
     * @return Memory that is available to Amazon EMR from the instance type.
     * 
     */
    public Output<Double> memoryGb() {
        return this.memoryGb;
    }

    /**
     * Number of disks for the instance type.
     * 
     */
    @Import(name="numberOfDisks", required=true)
    private Output<Integer> numberOfDisks;

    /**
     * @return Number of disks for the instance type.
     * 
     */
    public Output<Integer> numberOfDisks() {
        return this.numberOfDisks;
    }

    /**
     * Storage capacity of the instance type.
     * 
     */
    @Import(name="storageGb", required=true)
    private Output<Integer> storageGb;

    /**
     * @return Storage capacity of the instance type.
     * 
     */
    public Output<Integer> storageGb() {
        return this.storageGb;
    }

    /**
     * Amazon EC2 instance type. For example, `m5.xlarge`.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Amazon EC2 instance type. For example, `m5.xlarge`.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     * The number of vCPUs available for the instance type.
     * 
     */
    @Import(name="vcpu", required=true)
    private Output<Integer> vcpu;

    /**
     * @return The number of vCPUs available for the instance type.
     * 
     */
    public Output<Integer> vcpu() {
        return this.vcpu;
    }

    private GetSupportedInstanceTypesSupportedInstanceTypeArgs() {}

    private GetSupportedInstanceTypesSupportedInstanceTypeArgs(GetSupportedInstanceTypesSupportedInstanceTypeArgs $) {
        this.architecture = $.architecture;
        this.ebsOptimizedAvailable = $.ebsOptimizedAvailable;
        this.ebsOptimizedByDefault = $.ebsOptimizedByDefault;
        this.ebsStorageOnly = $.ebsStorageOnly;
        this.instanceFamilyId = $.instanceFamilyId;
        this.is64BitsOnly = $.is64BitsOnly;
        this.memoryGb = $.memoryGb;
        this.numberOfDisks = $.numberOfDisks;
        this.storageGb = $.storageGb;
        this.type = $.type;
        this.vcpu = $.vcpu;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetSupportedInstanceTypesSupportedInstanceTypeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetSupportedInstanceTypesSupportedInstanceTypeArgs $;

        public Builder() {
            $ = new GetSupportedInstanceTypesSupportedInstanceTypeArgs();
        }

        public Builder(GetSupportedInstanceTypesSupportedInstanceTypeArgs defaults) {
            $ = new GetSupportedInstanceTypesSupportedInstanceTypeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param architecture CPU architecture.
         * 
         * @return builder
         * 
         */
        public Builder architecture(Output<String> architecture) {
            $.architecture = architecture;
            return this;
        }

        /**
         * @param architecture CPU architecture.
         * 
         * @return builder
         * 
         */
        public Builder architecture(String architecture) {
            return architecture(Output.of(architecture));
        }

        /**
         * @param ebsOptimizedAvailable Indicates whether the instance type supports Amazon EBS optimization.
         * 
         * @return builder
         * 
         */
        public Builder ebsOptimizedAvailable(Output<Boolean> ebsOptimizedAvailable) {
            $.ebsOptimizedAvailable = ebsOptimizedAvailable;
            return this;
        }

        /**
         * @param ebsOptimizedAvailable Indicates whether the instance type supports Amazon EBS optimization.
         * 
         * @return builder
         * 
         */
        public Builder ebsOptimizedAvailable(Boolean ebsOptimizedAvailable) {
            return ebsOptimizedAvailable(Output.of(ebsOptimizedAvailable));
        }

        /**
         * @param ebsOptimizedByDefault Indicates whether the instance type uses Amazon EBS optimization by default.
         * 
         * @return builder
         * 
         */
        public Builder ebsOptimizedByDefault(Output<Boolean> ebsOptimizedByDefault) {
            $.ebsOptimizedByDefault = ebsOptimizedByDefault;
            return this;
        }

        /**
         * @param ebsOptimizedByDefault Indicates whether the instance type uses Amazon EBS optimization by default.
         * 
         * @return builder
         * 
         */
        public Builder ebsOptimizedByDefault(Boolean ebsOptimizedByDefault) {
            return ebsOptimizedByDefault(Output.of(ebsOptimizedByDefault));
        }

        /**
         * @param ebsStorageOnly Indicates whether the instance type only supports Amazon EBS.
         * 
         * @return builder
         * 
         */
        public Builder ebsStorageOnly(Output<Boolean> ebsStorageOnly) {
            $.ebsStorageOnly = ebsStorageOnly;
            return this;
        }

        /**
         * @param ebsStorageOnly Indicates whether the instance type only supports Amazon EBS.
         * 
         * @return builder
         * 
         */
        public Builder ebsStorageOnly(Boolean ebsStorageOnly) {
            return ebsStorageOnly(Output.of(ebsStorageOnly));
        }

        /**
         * @param instanceFamilyId The Amazon EC2 family and generation for the instance type.
         * 
         * @return builder
         * 
         */
        public Builder instanceFamilyId(Output<String> instanceFamilyId) {
            $.instanceFamilyId = instanceFamilyId;
            return this;
        }

        /**
         * @param instanceFamilyId The Amazon EC2 family and generation for the instance type.
         * 
         * @return builder
         * 
         */
        public Builder instanceFamilyId(String instanceFamilyId) {
            return instanceFamilyId(Output.of(instanceFamilyId));
        }

        /**
         * @param is64BitsOnly Indicates whether the instance type only supports 64-bit architecture.
         * 
         * @return builder
         * 
         */
        public Builder is64BitsOnly(Output<Boolean> is64BitsOnly) {
            $.is64BitsOnly = is64BitsOnly;
            return this;
        }

        /**
         * @param is64BitsOnly Indicates whether the instance type only supports 64-bit architecture.
         * 
         * @return builder
         * 
         */
        public Builder is64BitsOnly(Boolean is64BitsOnly) {
            return is64BitsOnly(Output.of(is64BitsOnly));
        }

        /**
         * @param memoryGb Memory that is available to Amazon EMR from the instance type.
         * 
         * @return builder
         * 
         */
        public Builder memoryGb(Output<Double> memoryGb) {
            $.memoryGb = memoryGb;
            return this;
        }

        /**
         * @param memoryGb Memory that is available to Amazon EMR from the instance type.
         * 
         * @return builder
         * 
         */
        public Builder memoryGb(Double memoryGb) {
            return memoryGb(Output.of(memoryGb));
        }

        /**
         * @param numberOfDisks Number of disks for the instance type.
         * 
         * @return builder
         * 
         */
        public Builder numberOfDisks(Output<Integer> numberOfDisks) {
            $.numberOfDisks = numberOfDisks;
            return this;
        }

        /**
         * @param numberOfDisks Number of disks for the instance type.
         * 
         * @return builder
         * 
         */
        public Builder numberOfDisks(Integer numberOfDisks) {
            return numberOfDisks(Output.of(numberOfDisks));
        }

        /**
         * @param storageGb Storage capacity of the instance type.
         * 
         * @return builder
         * 
         */
        public Builder storageGb(Output<Integer> storageGb) {
            $.storageGb = storageGb;
            return this;
        }

        /**
         * @param storageGb Storage capacity of the instance type.
         * 
         * @return builder
         * 
         */
        public Builder storageGb(Integer storageGb) {
            return storageGb(Output.of(storageGb));
        }

        /**
         * @param type Amazon EC2 instance type. For example, `m5.xlarge`.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Amazon EC2 instance type. For example, `m5.xlarge`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param vcpu The number of vCPUs available for the instance type.
         * 
         * @return builder
         * 
         */
        public Builder vcpu(Output<Integer> vcpu) {
            $.vcpu = vcpu;
            return this;
        }

        /**
         * @param vcpu The number of vCPUs available for the instance type.
         * 
         * @return builder
         * 
         */
        public Builder vcpu(Integer vcpu) {
            return vcpu(Output.of(vcpu));
        }

        public GetSupportedInstanceTypesSupportedInstanceTypeArgs build() {
            if ($.architecture == null) {
                throw new MissingRequiredPropertyException("GetSupportedInstanceTypesSupportedInstanceTypeArgs", "architecture");
            }
            if ($.ebsOptimizedAvailable == null) {
                throw new MissingRequiredPropertyException("GetSupportedInstanceTypesSupportedInstanceTypeArgs", "ebsOptimizedAvailable");
            }
            if ($.ebsOptimizedByDefault == null) {
                throw new MissingRequiredPropertyException("GetSupportedInstanceTypesSupportedInstanceTypeArgs", "ebsOptimizedByDefault");
            }
            if ($.ebsStorageOnly == null) {
                throw new MissingRequiredPropertyException("GetSupportedInstanceTypesSupportedInstanceTypeArgs", "ebsStorageOnly");
            }
            if ($.instanceFamilyId == null) {
                throw new MissingRequiredPropertyException("GetSupportedInstanceTypesSupportedInstanceTypeArgs", "instanceFamilyId");
            }
            if ($.is64BitsOnly == null) {
                throw new MissingRequiredPropertyException("GetSupportedInstanceTypesSupportedInstanceTypeArgs", "is64BitsOnly");
            }
            if ($.memoryGb == null) {
                throw new MissingRequiredPropertyException("GetSupportedInstanceTypesSupportedInstanceTypeArgs", "memoryGb");
            }
            if ($.numberOfDisks == null) {
                throw new MissingRequiredPropertyException("GetSupportedInstanceTypesSupportedInstanceTypeArgs", "numberOfDisks");
            }
            if ($.storageGb == null) {
                throw new MissingRequiredPropertyException("GetSupportedInstanceTypesSupportedInstanceTypeArgs", "storageGb");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("GetSupportedInstanceTypesSupportedInstanceTypeArgs", "type");
            }
            if ($.vcpu == null) {
                throw new MissingRequiredPropertyException("GetSupportedInstanceTypesSupportedInstanceTypeArgs", "vcpu");
            }
            return $;
        }
    }

}
