// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.inputs;

import com.pulumi.aws.quicksight.inputs.AxisDisplayOptionsArgs;
import com.pulumi.aws.quicksight.inputs.ChartAxisLabelOptionsArgs;
import com.pulumi.aws.quicksight.inputs.LegendOptionsArgs;
import com.pulumi.aws.quicksight.inputs.VisualPaletteArgs;
import com.pulumi.aws.quicksight.inputs.VisualsRadarChartVisualChartConfigurationBaseSeriesSettingsArgs;
import com.pulumi.aws.quicksight.inputs.VisualsRadarChartVisualChartConfigurationFieldWellsArgs;
import com.pulumi.aws.quicksight.inputs.VisualsRadarChartVisualChartConfigurationSortConfigurationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VisualsRadarChartVisualChartConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final VisualsRadarChartVisualChartConfigurationArgs Empty = new VisualsRadarChartVisualChartConfigurationArgs();

    @Import(name="alternateBandColorsVisibility")
    private @Nullable Output<String> alternateBandColorsVisibility;

    public Optional<Output<String>> alternateBandColorsVisibility() {
        return Optional.ofNullable(this.alternateBandColorsVisibility);
    }

    @Import(name="alternateBandEvenColor")
    private @Nullable Output<String> alternateBandEvenColor;

    public Optional<Output<String>> alternateBandEvenColor() {
        return Optional.ofNullable(this.alternateBandEvenColor);
    }

    @Import(name="alternateBandOddColor")
    private @Nullable Output<String> alternateBandOddColor;

    public Optional<Output<String>> alternateBandOddColor() {
        return Optional.ofNullable(this.alternateBandOddColor);
    }

    @Import(name="baseSeriesSettings")
    private @Nullable Output<VisualsRadarChartVisualChartConfigurationBaseSeriesSettingsArgs> baseSeriesSettings;

    public Optional<Output<VisualsRadarChartVisualChartConfigurationBaseSeriesSettingsArgs>> baseSeriesSettings() {
        return Optional.ofNullable(this.baseSeriesSettings);
    }

    @Import(name="categoryAxis")
    private @Nullable Output<AxisDisplayOptionsArgs> categoryAxis;

    public Optional<Output<AxisDisplayOptionsArgs>> categoryAxis() {
        return Optional.ofNullable(this.categoryAxis);
    }

    @Import(name="categoryLabelOptions")
    private @Nullable Output<ChartAxisLabelOptionsArgs> categoryLabelOptions;

    public Optional<Output<ChartAxisLabelOptionsArgs>> categoryLabelOptions() {
        return Optional.ofNullable(this.categoryLabelOptions);
    }

    @Import(name="colorAxis")
    private @Nullable Output<AxisDisplayOptionsArgs> colorAxis;

    public Optional<Output<AxisDisplayOptionsArgs>> colorAxis() {
        return Optional.ofNullable(this.colorAxis);
    }

    @Import(name="colorLabelOptions")
    private @Nullable Output<ChartAxisLabelOptionsArgs> colorLabelOptions;

    public Optional<Output<ChartAxisLabelOptionsArgs>> colorLabelOptions() {
        return Optional.ofNullable(this.colorLabelOptions);
    }

    @Import(name="fieldWells")
    private @Nullable Output<VisualsRadarChartVisualChartConfigurationFieldWellsArgs> fieldWells;

    public Optional<Output<VisualsRadarChartVisualChartConfigurationFieldWellsArgs>> fieldWells() {
        return Optional.ofNullable(this.fieldWells);
    }

    @Import(name="legend")
    private @Nullable Output<LegendOptionsArgs> legend;

    public Optional<Output<LegendOptionsArgs>> legend() {
        return Optional.ofNullable(this.legend);
    }

    @Import(name="shape")
    private @Nullable Output<String> shape;

    public Optional<Output<String>> shape() {
        return Optional.ofNullable(this.shape);
    }

    @Import(name="sortConfiguration")
    private @Nullable Output<VisualsRadarChartVisualChartConfigurationSortConfigurationArgs> sortConfiguration;

    public Optional<Output<VisualsRadarChartVisualChartConfigurationSortConfigurationArgs>> sortConfiguration() {
        return Optional.ofNullable(this.sortConfiguration);
    }

    @Import(name="startAngle")
    private @Nullable Output<Double> startAngle;

    public Optional<Output<Double>> startAngle() {
        return Optional.ofNullable(this.startAngle);
    }

    @Import(name="visualPalette")
    private @Nullable Output<VisualPaletteArgs> visualPalette;

    public Optional<Output<VisualPaletteArgs>> visualPalette() {
        return Optional.ofNullable(this.visualPalette);
    }

    private VisualsRadarChartVisualChartConfigurationArgs() {}

    private VisualsRadarChartVisualChartConfigurationArgs(VisualsRadarChartVisualChartConfigurationArgs $) {
        this.alternateBandColorsVisibility = $.alternateBandColorsVisibility;
        this.alternateBandEvenColor = $.alternateBandEvenColor;
        this.alternateBandOddColor = $.alternateBandOddColor;
        this.baseSeriesSettings = $.baseSeriesSettings;
        this.categoryAxis = $.categoryAxis;
        this.categoryLabelOptions = $.categoryLabelOptions;
        this.colorAxis = $.colorAxis;
        this.colorLabelOptions = $.colorLabelOptions;
        this.fieldWells = $.fieldWells;
        this.legend = $.legend;
        this.shape = $.shape;
        this.sortConfiguration = $.sortConfiguration;
        this.startAngle = $.startAngle;
        this.visualPalette = $.visualPalette;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VisualsRadarChartVisualChartConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VisualsRadarChartVisualChartConfigurationArgs $;

        public Builder() {
            $ = new VisualsRadarChartVisualChartConfigurationArgs();
        }

        public Builder(VisualsRadarChartVisualChartConfigurationArgs defaults) {
            $ = new VisualsRadarChartVisualChartConfigurationArgs(Objects.requireNonNull(defaults));
        }

        public Builder alternateBandColorsVisibility(@Nullable Output<String> alternateBandColorsVisibility) {
            $.alternateBandColorsVisibility = alternateBandColorsVisibility;
            return this;
        }

        public Builder alternateBandColorsVisibility(String alternateBandColorsVisibility) {
            return alternateBandColorsVisibility(Output.of(alternateBandColorsVisibility));
        }

        public Builder alternateBandEvenColor(@Nullable Output<String> alternateBandEvenColor) {
            $.alternateBandEvenColor = alternateBandEvenColor;
            return this;
        }

        public Builder alternateBandEvenColor(String alternateBandEvenColor) {
            return alternateBandEvenColor(Output.of(alternateBandEvenColor));
        }

        public Builder alternateBandOddColor(@Nullable Output<String> alternateBandOddColor) {
            $.alternateBandOddColor = alternateBandOddColor;
            return this;
        }

        public Builder alternateBandOddColor(String alternateBandOddColor) {
            return alternateBandOddColor(Output.of(alternateBandOddColor));
        }

        public Builder baseSeriesSettings(@Nullable Output<VisualsRadarChartVisualChartConfigurationBaseSeriesSettingsArgs> baseSeriesSettings) {
            $.baseSeriesSettings = baseSeriesSettings;
            return this;
        }

        public Builder baseSeriesSettings(VisualsRadarChartVisualChartConfigurationBaseSeriesSettingsArgs baseSeriesSettings) {
            return baseSeriesSettings(Output.of(baseSeriesSettings));
        }

        public Builder categoryAxis(@Nullable Output<AxisDisplayOptionsArgs> categoryAxis) {
            $.categoryAxis = categoryAxis;
            return this;
        }

        public Builder categoryAxis(AxisDisplayOptionsArgs categoryAxis) {
            return categoryAxis(Output.of(categoryAxis));
        }

        public Builder categoryLabelOptions(@Nullable Output<ChartAxisLabelOptionsArgs> categoryLabelOptions) {
            $.categoryLabelOptions = categoryLabelOptions;
            return this;
        }

        public Builder categoryLabelOptions(ChartAxisLabelOptionsArgs categoryLabelOptions) {
            return categoryLabelOptions(Output.of(categoryLabelOptions));
        }

        public Builder colorAxis(@Nullable Output<AxisDisplayOptionsArgs> colorAxis) {
            $.colorAxis = colorAxis;
            return this;
        }

        public Builder colorAxis(AxisDisplayOptionsArgs colorAxis) {
            return colorAxis(Output.of(colorAxis));
        }

        public Builder colorLabelOptions(@Nullable Output<ChartAxisLabelOptionsArgs> colorLabelOptions) {
            $.colorLabelOptions = colorLabelOptions;
            return this;
        }

        public Builder colorLabelOptions(ChartAxisLabelOptionsArgs colorLabelOptions) {
            return colorLabelOptions(Output.of(colorLabelOptions));
        }

        public Builder fieldWells(@Nullable Output<VisualsRadarChartVisualChartConfigurationFieldWellsArgs> fieldWells) {
            $.fieldWells = fieldWells;
            return this;
        }

        public Builder fieldWells(VisualsRadarChartVisualChartConfigurationFieldWellsArgs fieldWells) {
            return fieldWells(Output.of(fieldWells));
        }

        public Builder legend(@Nullable Output<LegendOptionsArgs> legend) {
            $.legend = legend;
            return this;
        }

        public Builder legend(LegendOptionsArgs legend) {
            return legend(Output.of(legend));
        }

        public Builder shape(@Nullable Output<String> shape) {
            $.shape = shape;
            return this;
        }

        public Builder shape(String shape) {
            return shape(Output.of(shape));
        }

        public Builder sortConfiguration(@Nullable Output<VisualsRadarChartVisualChartConfigurationSortConfigurationArgs> sortConfiguration) {
            $.sortConfiguration = sortConfiguration;
            return this;
        }

        public Builder sortConfiguration(VisualsRadarChartVisualChartConfigurationSortConfigurationArgs sortConfiguration) {
            return sortConfiguration(Output.of(sortConfiguration));
        }

        public Builder startAngle(@Nullable Output<Double> startAngle) {
            $.startAngle = startAngle;
            return this;
        }

        public Builder startAngle(Double startAngle) {
            return startAngle(Output.of(startAngle));
        }

        public Builder visualPalette(@Nullable Output<VisualPaletteArgs> visualPalette) {
            $.visualPalette = visualPalette;
            return this;
        }

        public Builder visualPalette(VisualPaletteArgs visualPalette) {
            return visualPalette(Output.of(visualPalette));
        }

        public VisualsRadarChartVisualChartConfigurationArgs build() {
            return $;
        }
    }

}
