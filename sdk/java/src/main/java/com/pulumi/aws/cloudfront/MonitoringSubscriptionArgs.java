// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.cloudfront;

import com.pulumi.aws.cloudfront.inputs.MonitoringSubscriptionMonitoringSubscriptionArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class MonitoringSubscriptionArgs extends com.pulumi.resources.ResourceArgs {

    public static final MonitoringSubscriptionArgs Empty = new MonitoringSubscriptionArgs();

    /**
     * The ID of the distribution that you are enabling metrics for.
     * 
     */
    @Import(name="distributionId", required=true)
    private Output<String> distributionId;

    /**
     * @return The ID of the distribution that you are enabling metrics for.
     * 
     */
    public Output<String> distributionId() {
        return this.distributionId;
    }

    /**
     * A monitoring subscription. This structure contains information about whether additional CloudWatch metrics are enabled for a given CloudFront distribution.
     * 
     */
    @Import(name="monitoringSubscription", required=true)
    private Output<MonitoringSubscriptionMonitoringSubscriptionArgs> monitoringSubscription;

    /**
     * @return A monitoring subscription. This structure contains information about whether additional CloudWatch metrics are enabled for a given CloudFront distribution.
     * 
     */
    public Output<MonitoringSubscriptionMonitoringSubscriptionArgs> monitoringSubscription() {
        return this.monitoringSubscription;
    }

    private MonitoringSubscriptionArgs() {}

    private MonitoringSubscriptionArgs(MonitoringSubscriptionArgs $) {
        this.distributionId = $.distributionId;
        this.monitoringSubscription = $.monitoringSubscription;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MonitoringSubscriptionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MonitoringSubscriptionArgs $;

        public Builder() {
            $ = new MonitoringSubscriptionArgs();
        }

        public Builder(MonitoringSubscriptionArgs defaults) {
            $ = new MonitoringSubscriptionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param distributionId The ID of the distribution that you are enabling metrics for.
         * 
         * @return builder
         * 
         */
        public Builder distributionId(Output<String> distributionId) {
            $.distributionId = distributionId;
            return this;
        }

        /**
         * @param distributionId The ID of the distribution that you are enabling metrics for.
         * 
         * @return builder
         * 
         */
        public Builder distributionId(String distributionId) {
            return distributionId(Output.of(distributionId));
        }

        /**
         * @param monitoringSubscription A monitoring subscription. This structure contains information about whether additional CloudWatch metrics are enabled for a given CloudFront distribution.
         * 
         * @return builder
         * 
         */
        public Builder monitoringSubscription(Output<MonitoringSubscriptionMonitoringSubscriptionArgs> monitoringSubscription) {
            $.monitoringSubscription = monitoringSubscription;
            return this;
        }

        /**
         * @param monitoringSubscription A monitoring subscription. This structure contains information about whether additional CloudWatch metrics are enabled for a given CloudFront distribution.
         * 
         * @return builder
         * 
         */
        public Builder monitoringSubscription(MonitoringSubscriptionMonitoringSubscriptionArgs monitoringSubscription) {
            return monitoringSubscription(Output.of(monitoringSubscription));
        }

        public MonitoringSubscriptionArgs build() {
            $.distributionId = Objects.requireNonNull($.distributionId, "expected parameter 'distributionId' to be non-null");
            $.monitoringSubscription = Objects.requireNonNull($.monitoringSubscription, "expected parameter 'monitoringSubscription' to be non-null");
            return $;
        }
    }

}
