// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.glue.outputs;

import com.pulumi.aws.glue.outputs.GetConnectionPhysicalConnectionRequirement;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetConnectionResult {
    /**
     * @return ARN of the Glue Connection.
     * 
     */
    private @Nullable String arn;
    /**
     * @return Catalog ID of the Glue Connection.
     * 
     */
    private @Nullable String catalogId;
    private @Nullable Map<String,String> connectionProperties;
    /**
     * @return Type of Glue Connection.
     * 
     */
    private @Nullable String connectionType;
    /**
     * @return Description of the connection.
     * 
     */
    private @Nullable String description;
    private String id;
    /**
     * @return A list of criteria that can be used in selecting this connection.
     * 
     */
    private @Nullable List<String> matchCriterias;
    /**
     * @return Name of the Glue Connection.
     * 
     */
    private @Nullable String name;
    /**
     * @return A map of physical connection requirements, such as VPC and SecurityGroup.
     * 
     */
    private @Nullable List<GetConnectionPhysicalConnectionRequirement> physicalConnectionRequirements;
    /**
     * @return Tags assigned to the resource
     * 
     */
    private @Nullable Map<String,String> tags;

    private GetConnectionResult() {}
    /**
     * @return ARN of the Glue Connection.
     * 
     */
    public Optional<String> arn() {
        return Optional.ofNullable(this.arn);
    }
    /**
     * @return Catalog ID of the Glue Connection.
     * 
     */
    public Optional<String> catalogId() {
        return Optional.ofNullable(this.catalogId);
    }
    public Map<String,String> connectionProperties() {
        return this.connectionProperties == null ? Map.of() : this.connectionProperties;
    }
    /**
     * @return Type of Glue Connection.
     * 
     */
    public Optional<String> connectionType() {
        return Optional.ofNullable(this.connectionType);
    }
    /**
     * @return Description of the connection.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    public String id() {
        return this.id;
    }
    /**
     * @return A list of criteria that can be used in selecting this connection.
     * 
     */
    public List<String> matchCriterias() {
        return this.matchCriterias == null ? List.of() : this.matchCriterias;
    }
    /**
     * @return Name of the Glue Connection.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return A map of physical connection requirements, such as VPC and SecurityGroup.
     * 
     */
    public List<GetConnectionPhysicalConnectionRequirement> physicalConnectionRequirements() {
        return this.physicalConnectionRequirements == null ? List.of() : this.physicalConnectionRequirements;
    }
    /**
     * @return Tags assigned to the resource
     * 
     */
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetConnectionResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String arn;
        private @Nullable String catalogId;
        private @Nullable Map<String,String> connectionProperties;
        private @Nullable String connectionType;
        private @Nullable String description;
        private String id;
        private @Nullable List<String> matchCriterias;
        private @Nullable String name;
        private @Nullable List<GetConnectionPhysicalConnectionRequirement> physicalConnectionRequirements;
        private @Nullable Map<String,String> tags;
        public Builder() {}
        public Builder(GetConnectionResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.catalogId = defaults.catalogId;
    	      this.connectionProperties = defaults.connectionProperties;
    	      this.connectionType = defaults.connectionType;
    	      this.description = defaults.description;
    	      this.id = defaults.id;
    	      this.matchCriterias = defaults.matchCriterias;
    	      this.name = defaults.name;
    	      this.physicalConnectionRequirements = defaults.physicalConnectionRequirements;
    	      this.tags = defaults.tags;
        }

        @CustomType.Setter
        public Builder arn(@Nullable String arn) {
            this.arn = arn;
            return this;
        }
        @CustomType.Setter
        public Builder catalogId(@Nullable String catalogId) {
            this.catalogId = catalogId;
            return this;
        }
        @CustomType.Setter
        public Builder connectionProperties(@Nullable Map<String,String> connectionProperties) {
            this.connectionProperties = connectionProperties;
            return this;
        }
        @CustomType.Setter
        public Builder connectionType(@Nullable String connectionType) {
            this.connectionType = connectionType;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder matchCriterias(@Nullable List<String> matchCriterias) {
            this.matchCriterias = matchCriterias;
            return this;
        }
        public Builder matchCriterias(String... matchCriterias) {
            return matchCriterias(List.of(matchCriterias));
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder physicalConnectionRequirements(@Nullable List<GetConnectionPhysicalConnectionRequirement> physicalConnectionRequirements) {
            this.physicalConnectionRequirements = physicalConnectionRequirements;
            return this;
        }
        public Builder physicalConnectionRequirements(GetConnectionPhysicalConnectionRequirement... physicalConnectionRequirements) {
            return physicalConnectionRequirements(List.of(physicalConnectionRequirements));
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        public GetConnectionResult build() {
            final var o = new GetConnectionResult();
            o.arn = arn;
            o.catalogId = catalogId;
            o.connectionProperties = connectionProperties;
            o.connectionType = connectionType;
            o.description = description;
            o.id = id;
            o.matchCriterias = matchCriterias;
            o.name = name;
            o.physicalConnectionRequirements = physicalConnectionRequirements;
            o.tags = tags;
            return o;
        }
    }
}
