// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.glue.outputs;

import com.pulumi.aws.glue.outputs.GetConnectionPhysicalConnectionRequirement;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetConnectionResult {
    /**
     * @return ARN of the Glue Connection.
     * 
     */
    private String arn;
    /**
     * @return Catalog ID of the Glue Connection.
     * 
     */
    private String catalogId;
    private Map<String,String> connectionProperties;
    /**
     * @return Type of Glue Connection.
     * 
     */
    private String connectionType;
    /**
     * @return Description of the connection.
     * 
     */
    private String description;
    private String id;
    /**
     * @return A list of criteria that can be used in selecting this connection.
     * 
     */
    private List<String> matchCriterias;
    /**
     * @return Name of the Glue Connection.
     * 
     */
    private String name;
    /**
     * @return A map of physical connection requirements, such as VPC and SecurityGroup.
     * 
     */
    private List<GetConnectionPhysicalConnectionRequirement> physicalConnectionRequirements;
    /**
     * @return Tags assigned to the resource
     * 
     */
    private Map<String,String> tags;

    private GetConnectionResult() {}
    /**
     * @return ARN of the Glue Connection.
     * 
     */
    public String arn() {
        return this.arn;
    }
    /**
     * @return Catalog ID of the Glue Connection.
     * 
     */
    public String catalogId() {
        return this.catalogId;
    }
    public Map<String,String> connectionProperties() {
        return this.connectionProperties;
    }
    /**
     * @return Type of Glue Connection.
     * 
     */
    public String connectionType() {
        return this.connectionType;
    }
    /**
     * @return Description of the connection.
     * 
     */
    public String description() {
        return this.description;
    }
    public String id() {
        return this.id;
    }
    /**
     * @return A list of criteria that can be used in selecting this connection.
     * 
     */
    public List<String> matchCriterias() {
        return this.matchCriterias;
    }
    /**
     * @return Name of the Glue Connection.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return A map of physical connection requirements, such as VPC and SecurityGroup.
     * 
     */
    public List<GetConnectionPhysicalConnectionRequirement> physicalConnectionRequirements() {
        return this.physicalConnectionRequirements;
    }
    /**
     * @return Tags assigned to the resource
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetConnectionResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String arn;
        private String catalogId;
        private Map<String,String> connectionProperties;
        private String connectionType;
        private String description;
        private String id;
        private List<String> matchCriterias;
        private String name;
        private List<GetConnectionPhysicalConnectionRequirement> physicalConnectionRequirements;
        private Map<String,String> tags;
        public Builder() {}
        public Builder(GetConnectionResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.catalogId = defaults.catalogId;
    	      this.connectionProperties = defaults.connectionProperties;
    	      this.connectionType = defaults.connectionType;
    	      this.description = defaults.description;
    	      this.id = defaults.id;
    	      this.matchCriterias = defaults.matchCriterias;
    	      this.name = defaults.name;
    	      this.physicalConnectionRequirements = defaults.physicalConnectionRequirements;
    	      this.tags = defaults.tags;
        }

        @CustomType.Setter
        public Builder arn(String arn) {
            this.arn = Objects.requireNonNull(arn);
            return this;
        }
        @CustomType.Setter
        public Builder catalogId(String catalogId) {
            this.catalogId = Objects.requireNonNull(catalogId);
            return this;
        }
        @CustomType.Setter
        public Builder connectionProperties(Map<String,String> connectionProperties) {
            this.connectionProperties = Objects.requireNonNull(connectionProperties);
            return this;
        }
        @CustomType.Setter
        public Builder connectionType(String connectionType) {
            this.connectionType = Objects.requireNonNull(connectionType);
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder matchCriterias(List<String> matchCriterias) {
            this.matchCriterias = Objects.requireNonNull(matchCriterias);
            return this;
        }
        public Builder matchCriterias(String... matchCriterias) {
            return matchCriterias(List.of(matchCriterias));
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder physicalConnectionRequirements(List<GetConnectionPhysicalConnectionRequirement> physicalConnectionRequirements) {
            this.physicalConnectionRequirements = Objects.requireNonNull(physicalConnectionRequirements);
            return this;
        }
        public Builder physicalConnectionRequirements(GetConnectionPhysicalConnectionRequirement... physicalConnectionRequirements) {
            return physicalConnectionRequirements(List.of(physicalConnectionRequirements));
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        public GetConnectionResult build() {
            final var _resultValue = new GetConnectionResult();
            _resultValue.arn = arn;
            _resultValue.catalogId = catalogId;
            _resultValue.connectionProperties = connectionProperties;
            _resultValue.connectionType = connectionType;
            _resultValue.description = description;
            _resultValue.id = id;
            _resultValue.matchCriterias = matchCriterias;
            _resultValue.name = name;
            _resultValue.physicalConnectionRequirements = physicalConnectionRequirements;
            _resultValue.tags = tags;
            return _resultValue;
        }
    }
}
