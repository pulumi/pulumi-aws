// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.medialive.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelection {
    /**
     * @return Selects a specific three-letter language code from within an audio source.
     * 
     */
    private String languageCode;
    /**
     * @return When set to “strict”, the transport stream demux strictly identifies audio streams by their language descriptor. If a PMT update occurs such that an audio stream matching the initially selected language is no longer present then mute will be encoded until the language returns. If “loose”, then on a PMT update the demux will choose another audio stream in the program with the same stream type if it can’t find one with the same language.
     * 
     */
    private @Nullable String languageSelectionPolicy;

    private ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelection() {}
    /**
     * @return Selects a specific three-letter language code from within an audio source.
     * 
     */
    public String languageCode() {
        return this.languageCode;
    }
    /**
     * @return When set to “strict”, the transport stream demux strictly identifies audio streams by their language descriptor. If a PMT update occurs such that an audio stream matching the initially selected language is no longer present then mute will be encoded until the language returns. If “loose”, then on a PMT update the demux will choose another audio stream in the program with the same stream type if it can’t find one with the same language.
     * 
     */
    public Optional<String> languageSelectionPolicy() {
        return Optional.ofNullable(this.languageSelectionPolicy);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelection defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String languageCode;
        private @Nullable String languageSelectionPolicy;
        public Builder() {}
        public Builder(ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelection defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.languageCode = defaults.languageCode;
    	      this.languageSelectionPolicy = defaults.languageSelectionPolicy;
        }

        @CustomType.Setter
        public Builder languageCode(String languageCode) {
            if (languageCode == null) {
              throw new MissingRequiredPropertyException("ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelection", "languageCode");
            }
            this.languageCode = languageCode;
            return this;
        }
        @CustomType.Setter
        public Builder languageSelectionPolicy(@Nullable String languageSelectionPolicy) {

            this.languageSelectionPolicy = languageSelectionPolicy;
            return this;
        }
        public ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelection build() {
            final var _resultValue = new ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelection();
            _resultValue.languageCode = languageCode;
            _resultValue.languageSelectionPolicy = languageSelectionPolicy;
            return _resultValue;
        }
    }
}
