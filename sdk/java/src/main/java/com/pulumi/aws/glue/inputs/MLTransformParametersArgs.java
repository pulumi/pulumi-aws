// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.glue.inputs;

import com.pulumi.aws.glue.inputs.MLTransformParametersFindMatchesParametersArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class MLTransformParametersArgs extends com.pulumi.resources.ResourceArgs {

    public static final MLTransformParametersArgs Empty = new MLTransformParametersArgs();

    @Import(name="findMatchesParameters", required=true)
    private Output<MLTransformParametersFindMatchesParametersArgs> findMatchesParameters;

    public Output<MLTransformParametersFindMatchesParametersArgs> findMatchesParameters() {
        return this.findMatchesParameters;
    }

    @Import(name="transformType", required=true)
    private Output<String> transformType;

    public Output<String> transformType() {
        return this.transformType;
    }

    private MLTransformParametersArgs() {}

    private MLTransformParametersArgs(MLTransformParametersArgs $) {
        this.findMatchesParameters = $.findMatchesParameters;
        this.transformType = $.transformType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MLTransformParametersArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MLTransformParametersArgs $;

        public Builder() {
            $ = new MLTransformParametersArgs();
        }

        public Builder(MLTransformParametersArgs defaults) {
            $ = new MLTransformParametersArgs(Objects.requireNonNull(defaults));
        }

        public Builder findMatchesParameters(Output<MLTransformParametersFindMatchesParametersArgs> findMatchesParameters) {
            $.findMatchesParameters = findMatchesParameters;
            return this;
        }

        public Builder findMatchesParameters(MLTransformParametersFindMatchesParametersArgs findMatchesParameters) {
            return findMatchesParameters(Output.of(findMatchesParameters));
        }

        public Builder transformType(Output<String> transformType) {
            $.transformType = transformType;
            return this;
        }

        public Builder transformType(String transformType) {
            return transformType(Output.of(transformType));
        }

        public MLTransformParametersArgs build() {
            $.findMatchesParameters = Objects.requireNonNull($.findMatchesParameters, "expected parameter 'findMatchesParameters' to be non-null");
            $.transformType = Objects.requireNonNull($.transformType, "expected parameter 'transformType' to be non-null");
            return $;
        }
    }

}
