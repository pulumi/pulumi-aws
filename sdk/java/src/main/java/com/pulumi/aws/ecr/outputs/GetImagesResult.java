// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ecr.outputs;

import com.pulumi.aws.ecr.outputs.GetImagesImageId;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetImagesResult {
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return List of image objects containing image digest and tags. Each object has the following attributes:
     * 
     */
    private List<GetImagesImageId> imageIds;
    private String region;
    private @Nullable String registryId;
    private String repositoryName;

    private GetImagesResult() {}
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return List of image objects containing image digest and tags. Each object has the following attributes:
     * 
     */
    public List<GetImagesImageId> imageIds() {
        return this.imageIds;
    }
    public String region() {
        return this.region;
    }
    public Optional<String> registryId() {
        return Optional.ofNullable(this.registryId);
    }
    public String repositoryName() {
        return this.repositoryName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetImagesResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String id;
        private List<GetImagesImageId> imageIds;
        private String region;
        private @Nullable String registryId;
        private String repositoryName;
        public Builder() {}
        public Builder(GetImagesResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.id = defaults.id;
    	      this.imageIds = defaults.imageIds;
    	      this.region = defaults.region;
    	      this.registryId = defaults.registryId;
    	      this.repositoryName = defaults.repositoryName;
        }

        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetImagesResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder imageIds(List<GetImagesImageId> imageIds) {
            if (imageIds == null) {
              throw new MissingRequiredPropertyException("GetImagesResult", "imageIds");
            }
            this.imageIds = imageIds;
            return this;
        }
        public Builder imageIds(GetImagesImageId... imageIds) {
            return imageIds(List.of(imageIds));
        }
        @CustomType.Setter
        public Builder region(String region) {
            if (region == null) {
              throw new MissingRequiredPropertyException("GetImagesResult", "region");
            }
            this.region = region;
            return this;
        }
        @CustomType.Setter
        public Builder registryId(@Nullable String registryId) {

            this.registryId = registryId;
            return this;
        }
        @CustomType.Setter
        public Builder repositoryName(String repositoryName) {
            if (repositoryName == null) {
              throw new MissingRequiredPropertyException("GetImagesResult", "repositoryName");
            }
            this.repositoryName = repositoryName;
            return this;
        }
        public GetImagesResult build() {
            final var _resultValue = new GetImagesResult();
            _resultValue.id = id;
            _resultValue.imageIds = imageIds;
            _resultValue.region = region;
            _resultValue.registryId = registryId;
            _resultValue.repositoryName = repositoryName;
            return _resultValue;
        }
    }
}
