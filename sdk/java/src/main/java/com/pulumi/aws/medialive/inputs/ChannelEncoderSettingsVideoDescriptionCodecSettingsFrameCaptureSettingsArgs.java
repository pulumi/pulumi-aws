// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.medialive.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ChannelEncoderSettingsVideoDescriptionCodecSettingsFrameCaptureSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final ChannelEncoderSettingsVideoDescriptionCodecSettingsFrameCaptureSettingsArgs Empty = new ChannelEncoderSettingsVideoDescriptionCodecSettingsFrameCaptureSettingsArgs();

    /**
     * The frequency at which to capture frames for inclusion in the output.
     * 
     */
    @Import(name="captureInterval")
    private @Nullable Output<Integer> captureInterval;

    /**
     * @return The frequency at which to capture frames for inclusion in the output.
     * 
     */
    public Optional<Output<Integer>> captureInterval() {
        return Optional.ofNullable(this.captureInterval);
    }

    /**
     * Unit for the frame capture interval.
     * 
     */
    @Import(name="captureIntervalUnits")
    private @Nullable Output<String> captureIntervalUnits;

    /**
     * @return Unit for the frame capture interval.
     * 
     */
    public Optional<Output<String>> captureIntervalUnits() {
        return Optional.ofNullable(this.captureIntervalUnits);
    }

    private ChannelEncoderSettingsVideoDescriptionCodecSettingsFrameCaptureSettingsArgs() {}

    private ChannelEncoderSettingsVideoDescriptionCodecSettingsFrameCaptureSettingsArgs(ChannelEncoderSettingsVideoDescriptionCodecSettingsFrameCaptureSettingsArgs $) {
        this.captureInterval = $.captureInterval;
        this.captureIntervalUnits = $.captureIntervalUnits;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ChannelEncoderSettingsVideoDescriptionCodecSettingsFrameCaptureSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ChannelEncoderSettingsVideoDescriptionCodecSettingsFrameCaptureSettingsArgs $;

        public Builder() {
            $ = new ChannelEncoderSettingsVideoDescriptionCodecSettingsFrameCaptureSettingsArgs();
        }

        public Builder(ChannelEncoderSettingsVideoDescriptionCodecSettingsFrameCaptureSettingsArgs defaults) {
            $ = new ChannelEncoderSettingsVideoDescriptionCodecSettingsFrameCaptureSettingsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param captureInterval The frequency at which to capture frames for inclusion in the output.
         * 
         * @return builder
         * 
         */
        public Builder captureInterval(@Nullable Output<Integer> captureInterval) {
            $.captureInterval = captureInterval;
            return this;
        }

        /**
         * @param captureInterval The frequency at which to capture frames for inclusion in the output.
         * 
         * @return builder
         * 
         */
        public Builder captureInterval(Integer captureInterval) {
            return captureInterval(Output.of(captureInterval));
        }

        /**
         * @param captureIntervalUnits Unit for the frame capture interval.
         * 
         * @return builder
         * 
         */
        public Builder captureIntervalUnits(@Nullable Output<String> captureIntervalUnits) {
            $.captureIntervalUnits = captureIntervalUnits;
            return this;
        }

        /**
         * @param captureIntervalUnits Unit for the frame capture interval.
         * 
         * @return builder
         * 
         */
        public Builder captureIntervalUnits(String captureIntervalUnits) {
            return captureIntervalUnits(Output.of(captureIntervalUnits));
        }

        public ChannelEncoderSettingsVideoDescriptionCodecSettingsFrameCaptureSettingsArgs build() {
            return $;
        }
    }

}
