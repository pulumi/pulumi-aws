// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.glue;

import com.pulumi.aws.glue.inputs.CatalogTableOptimizerConfigurationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CatalogTableOptimizerArgs extends com.pulumi.resources.ResourceArgs {

    public static final CatalogTableOptimizerArgs Empty = new CatalogTableOptimizerArgs();

    /**
     * The Catalog ID of the table.
     * 
     */
    @Import(name="catalogId", required=true)
    private Output<String> catalogId;

    /**
     * @return The Catalog ID of the table.
     * 
     */
    public Output<String> catalogId() {
        return this.catalogId;
    }

    /**
     * A configuration block that defines the table optimizer settings. See Configuration for additional details.
     * 
     */
    @Import(name="configuration")
    private @Nullable Output<CatalogTableOptimizerConfigurationArgs> configuration;

    /**
     * @return A configuration block that defines the table optimizer settings. See Configuration for additional details.
     * 
     */
    public Optional<Output<CatalogTableOptimizerConfigurationArgs>> configuration() {
        return Optional.ofNullable(this.configuration);
    }

    /**
     * The name of the database in the catalog in which the table resides.
     * 
     */
    @Import(name="databaseName", required=true)
    private Output<String> databaseName;

    /**
     * @return The name of the database in the catalog in which the table resides.
     * 
     */
    public Output<String> databaseName() {
        return this.databaseName;
    }

    /**
     * The name of the table.
     * 
     */
    @Import(name="tableName", required=true)
    private Output<String> tableName;

    /**
     * @return The name of the table.
     * 
     */
    public Output<String> tableName() {
        return this.tableName;
    }

    /**
     * The type of table optimizer. Valid values are `compaction`, `retention`, and `orphan_file_deletion`.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return The type of table optimizer. Valid values are `compaction`, `retention`, and `orphan_file_deletion`.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private CatalogTableOptimizerArgs() {}

    private CatalogTableOptimizerArgs(CatalogTableOptimizerArgs $) {
        this.catalogId = $.catalogId;
        this.configuration = $.configuration;
        this.databaseName = $.databaseName;
        this.tableName = $.tableName;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CatalogTableOptimizerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CatalogTableOptimizerArgs $;

        public Builder() {
            $ = new CatalogTableOptimizerArgs();
        }

        public Builder(CatalogTableOptimizerArgs defaults) {
            $ = new CatalogTableOptimizerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param catalogId The Catalog ID of the table.
         * 
         * @return builder
         * 
         */
        public Builder catalogId(Output<String> catalogId) {
            $.catalogId = catalogId;
            return this;
        }

        /**
         * @param catalogId The Catalog ID of the table.
         * 
         * @return builder
         * 
         */
        public Builder catalogId(String catalogId) {
            return catalogId(Output.of(catalogId));
        }

        /**
         * @param configuration A configuration block that defines the table optimizer settings. See Configuration for additional details.
         * 
         * @return builder
         * 
         */
        public Builder configuration(@Nullable Output<CatalogTableOptimizerConfigurationArgs> configuration) {
            $.configuration = configuration;
            return this;
        }

        /**
         * @param configuration A configuration block that defines the table optimizer settings. See Configuration for additional details.
         * 
         * @return builder
         * 
         */
        public Builder configuration(CatalogTableOptimizerConfigurationArgs configuration) {
            return configuration(Output.of(configuration));
        }

        /**
         * @param databaseName The name of the database in the catalog in which the table resides.
         * 
         * @return builder
         * 
         */
        public Builder databaseName(Output<String> databaseName) {
            $.databaseName = databaseName;
            return this;
        }

        /**
         * @param databaseName The name of the database in the catalog in which the table resides.
         * 
         * @return builder
         * 
         */
        public Builder databaseName(String databaseName) {
            return databaseName(Output.of(databaseName));
        }

        /**
         * @param tableName The name of the table.
         * 
         * @return builder
         * 
         */
        public Builder tableName(Output<String> tableName) {
            $.tableName = tableName;
            return this;
        }

        /**
         * @param tableName The name of the table.
         * 
         * @return builder
         * 
         */
        public Builder tableName(String tableName) {
            return tableName(Output.of(tableName));
        }

        /**
         * @param type The type of table optimizer. Valid values are `compaction`, `retention`, and `orphan_file_deletion`.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of table optimizer. Valid values are `compaction`, `retention`, and `orphan_file_deletion`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public CatalogTableOptimizerArgs build() {
            if ($.catalogId == null) {
                throw new MissingRequiredPropertyException("CatalogTableOptimizerArgs", "catalogId");
            }
            if ($.databaseName == null) {
                throw new MissingRequiredPropertyException("CatalogTableOptimizerArgs", "databaseName");
            }
            if ($.tableName == null) {
                throw new MissingRequiredPropertyException("CatalogTableOptimizerArgs", "tableName");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("CatalogTableOptimizerArgs", "type");
            }
            return $;
        }
    }

}
