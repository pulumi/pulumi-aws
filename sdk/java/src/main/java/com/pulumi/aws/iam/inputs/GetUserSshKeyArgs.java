// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.iam.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class GetUserSshKeyArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetUserSshKeyArgs Empty = new GetUserSshKeyArgs();

    /**
     * Specifies the public key encoding format to use in the response. To retrieve the public key in ssh-rsa format, use `SSH`. To retrieve the public key in PEM format, use `PEM`.
     * 
     */
    @Import(name="encoding", required=true)
    private Output<String> encoding;

    /**
     * @return Specifies the public key encoding format to use in the response. To retrieve the public key in ssh-rsa format, use `SSH`. To retrieve the public key in PEM format, use `PEM`.
     * 
     */
    public Output<String> encoding() {
        return this.encoding;
    }

    /**
     * Unique identifier for the SSH public key.
     * 
     */
    @Import(name="sshPublicKeyId", required=true)
    private Output<String> sshPublicKeyId;

    /**
     * @return Unique identifier for the SSH public key.
     * 
     */
    public Output<String> sshPublicKeyId() {
        return this.sshPublicKeyId;
    }

    /**
     * Name of the IAM user associated with the SSH public key.
     * 
     */
    @Import(name="username", required=true)
    private Output<String> username;

    /**
     * @return Name of the IAM user associated with the SSH public key.
     * 
     */
    public Output<String> username() {
        return this.username;
    }

    private GetUserSshKeyArgs() {}

    private GetUserSshKeyArgs(GetUserSshKeyArgs $) {
        this.encoding = $.encoding;
        this.sshPublicKeyId = $.sshPublicKeyId;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetUserSshKeyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetUserSshKeyArgs $;

        public Builder() {
            $ = new GetUserSshKeyArgs();
        }

        public Builder(GetUserSshKeyArgs defaults) {
            $ = new GetUserSshKeyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param encoding Specifies the public key encoding format to use in the response. To retrieve the public key in ssh-rsa format, use `SSH`. To retrieve the public key in PEM format, use `PEM`.
         * 
         * @return builder
         * 
         */
        public Builder encoding(Output<String> encoding) {
            $.encoding = encoding;
            return this;
        }

        /**
         * @param encoding Specifies the public key encoding format to use in the response. To retrieve the public key in ssh-rsa format, use `SSH`. To retrieve the public key in PEM format, use `PEM`.
         * 
         * @return builder
         * 
         */
        public Builder encoding(String encoding) {
            return encoding(Output.of(encoding));
        }

        /**
         * @param sshPublicKeyId Unique identifier for the SSH public key.
         * 
         * @return builder
         * 
         */
        public Builder sshPublicKeyId(Output<String> sshPublicKeyId) {
            $.sshPublicKeyId = sshPublicKeyId;
            return this;
        }

        /**
         * @param sshPublicKeyId Unique identifier for the SSH public key.
         * 
         * @return builder
         * 
         */
        public Builder sshPublicKeyId(String sshPublicKeyId) {
            return sshPublicKeyId(Output.of(sshPublicKeyId));
        }

        /**
         * @param username Name of the IAM user associated with the SSH public key.
         * 
         * @return builder
         * 
         */
        public Builder username(Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username Name of the IAM user associated with the SSH public key.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public GetUserSshKeyArgs build() {
            $.encoding = Objects.requireNonNull($.encoding, "expected parameter 'encoding' to be non-null");
            $.sshPublicKeyId = Objects.requireNonNull($.sshPublicKeyId, "expected parameter 'sshPublicKeyId' to be non-null");
            $.username = Objects.requireNonNull($.username, "expected parameter 'username' to be non-null");
            return $;
        }
    }

}
