// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ecs.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceOrderedPlacementStrategyArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceOrderedPlacementStrategyArgs Empty = new ServiceOrderedPlacementStrategyArgs();

    /**
     * For the `spread` placement strategy, valid values are `instanceId` (or `host`,
     * which has the same effect), or any platform or custom attribute that is applied to a container instance.
     * For the `binpack` type, valid values are `memory` and `cpu`. For the `random` type, this attribute is not
     * needed. For more information, see [Placement Strategy](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_PlacementStrategy.html).
     * 
     * &gt; **Note:** for `spread`, `host` and `instanceId` will be normalized, by AWS, to be `instanceId`. This means the statefile will show `instanceId` but your config will differ if you use `host`.
     * 
     */
    @Import(name="field")
    private @Nullable Output<String> field;

    /**
     * @return For the `spread` placement strategy, valid values are `instanceId` (or `host`,
     * which has the same effect), or any platform or custom attribute that is applied to a container instance.
     * For the `binpack` type, valid values are `memory` and `cpu`. For the `random` type, this attribute is not
     * needed. For more information, see [Placement Strategy](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_PlacementStrategy.html).
     * 
     * &gt; **Note:** for `spread`, `host` and `instanceId` will be normalized, by AWS, to be `instanceId`. This means the statefile will show `instanceId` but your config will differ if you use `host`.
     * 
     */
    public Optional<Output<String>> field() {
        return Optional.ofNullable(this.field);
    }

    /**
     * Type of placement strategy. Must be one of: `binpack`, `random`, or `spread`
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Type of placement strategy. Must be one of: `binpack`, `random`, or `spread`
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private ServiceOrderedPlacementStrategyArgs() {}

    private ServiceOrderedPlacementStrategyArgs(ServiceOrderedPlacementStrategyArgs $) {
        this.field = $.field;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceOrderedPlacementStrategyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceOrderedPlacementStrategyArgs $;

        public Builder() {
            $ = new ServiceOrderedPlacementStrategyArgs();
        }

        public Builder(ServiceOrderedPlacementStrategyArgs defaults) {
            $ = new ServiceOrderedPlacementStrategyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param field For the `spread` placement strategy, valid values are `instanceId` (or `host`,
         * which has the same effect), or any platform or custom attribute that is applied to a container instance.
         * For the `binpack` type, valid values are `memory` and `cpu`. For the `random` type, this attribute is not
         * needed. For more information, see [Placement Strategy](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_PlacementStrategy.html).
         * 
         * &gt; **Note:** for `spread`, `host` and `instanceId` will be normalized, by AWS, to be `instanceId`. This means the statefile will show `instanceId` but your config will differ if you use `host`.
         * 
         * @return builder
         * 
         */
        public Builder field(@Nullable Output<String> field) {
            $.field = field;
            return this;
        }

        /**
         * @param field For the `spread` placement strategy, valid values are `instanceId` (or `host`,
         * which has the same effect), or any platform or custom attribute that is applied to a container instance.
         * For the `binpack` type, valid values are `memory` and `cpu`. For the `random` type, this attribute is not
         * needed. For more information, see [Placement Strategy](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_PlacementStrategy.html).
         * 
         * &gt; **Note:** for `spread`, `host` and `instanceId` will be normalized, by AWS, to be `instanceId`. This means the statefile will show `instanceId` but your config will differ if you use `host`.
         * 
         * @return builder
         * 
         */
        public Builder field(String field) {
            return field(Output.of(field));
        }

        /**
         * @param type Type of placement strategy. Must be one of: `binpack`, `random`, or `spread`
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of placement strategy. Must be one of: `binpack`, `random`, or `spread`
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public ServiceOrderedPlacementStrategyArgs build() {
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
