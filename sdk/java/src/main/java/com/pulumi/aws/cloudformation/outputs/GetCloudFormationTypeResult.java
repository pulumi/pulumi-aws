// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.cloudformation.outputs;

import com.pulumi.aws.cloudformation.outputs.GetCloudFormationTypeLoggingConfig;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetCloudFormationTypeResult {
    private @Nullable String arn;
    /**
     * @return Identifier of the CloudFormation Type default version.
     * 
     */
    private @Nullable String defaultVersionId;
    /**
     * @return Deprecation status of the CloudFormation Type.
     * 
     */
    private @Nullable String deprecatedStatus;
    /**
     * @return Description of the CloudFormation Type.
     * 
     */
    private @Nullable String description;
    /**
     * @return URL of the documentation for the CloudFormation Type.
     * 
     */
    private @Nullable String documentationUrl;
    /**
     * @return ARN of the IAM Role used to register the CloudFormation Type.
     * 
     */
    private @Nullable String executionRoleArn;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private @Nullable String id;
    /**
     * @return Whether the CloudFormation Type version is the default version.
     * 
     */
    private @Nullable Boolean isDefaultVersion;
    /**
     * @return List of objects containing logging configuration.
     * 
     */
    private @Nullable List<GetCloudFormationTypeLoggingConfig> loggingConfigs;
    /**
     * @return Provisioning behavior of the CloudFormation Type.
     * 
     */
    private @Nullable String provisioningType;
    /**
     * @return JSON document of the CloudFormation Type schema.
     * 
     */
    private @Nullable String schema;
    /**
     * @return URL of the source code for the CloudFormation Type.
     * 
     */
    private @Nullable String sourceUrl;
    private @Nullable String type;
    private @Nullable String typeArn;
    private @Nullable String typeName;
    private @Nullable String versionId;
    /**
     * @return Scope of the CloudFormation Type.
     * 
     */
    private @Nullable String visibility;

    private GetCloudFormationTypeResult() {}
    public Optional<String> arn() {
        return Optional.ofNullable(this.arn);
    }
    /**
     * @return Identifier of the CloudFormation Type default version.
     * 
     */
    public Optional<String> defaultVersionId() {
        return Optional.ofNullable(this.defaultVersionId);
    }
    /**
     * @return Deprecation status of the CloudFormation Type.
     * 
     */
    public Optional<String> deprecatedStatus() {
        return Optional.ofNullable(this.deprecatedStatus);
    }
    /**
     * @return Description of the CloudFormation Type.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return URL of the documentation for the CloudFormation Type.
     * 
     */
    public Optional<String> documentationUrl() {
        return Optional.ofNullable(this.documentationUrl);
    }
    /**
     * @return ARN of the IAM Role used to register the CloudFormation Type.
     * 
     */
    public Optional<String> executionRoleArn() {
        return Optional.ofNullable(this.executionRoleArn);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Whether the CloudFormation Type version is the default version.
     * 
     */
    public Optional<Boolean> isDefaultVersion() {
        return Optional.ofNullable(this.isDefaultVersion);
    }
    /**
     * @return List of objects containing logging configuration.
     * 
     */
    public List<GetCloudFormationTypeLoggingConfig> loggingConfigs() {
        return this.loggingConfigs == null ? List.of() : this.loggingConfigs;
    }
    /**
     * @return Provisioning behavior of the CloudFormation Type.
     * 
     */
    public Optional<String> provisioningType() {
        return Optional.ofNullable(this.provisioningType);
    }
    /**
     * @return JSON document of the CloudFormation Type schema.
     * 
     */
    public Optional<String> schema() {
        return Optional.ofNullable(this.schema);
    }
    /**
     * @return URL of the source code for the CloudFormation Type.
     * 
     */
    public Optional<String> sourceUrl() {
        return Optional.ofNullable(this.sourceUrl);
    }
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }
    public Optional<String> typeArn() {
        return Optional.ofNullable(this.typeArn);
    }
    public Optional<String> typeName() {
        return Optional.ofNullable(this.typeName);
    }
    public Optional<String> versionId() {
        return Optional.ofNullable(this.versionId);
    }
    /**
     * @return Scope of the CloudFormation Type.
     * 
     */
    public Optional<String> visibility() {
        return Optional.ofNullable(this.visibility);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCloudFormationTypeResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String arn;
        private @Nullable String defaultVersionId;
        private @Nullable String deprecatedStatus;
        private @Nullable String description;
        private @Nullable String documentationUrl;
        private @Nullable String executionRoleArn;
        private @Nullable String id;
        private @Nullable Boolean isDefaultVersion;
        private @Nullable List<GetCloudFormationTypeLoggingConfig> loggingConfigs;
        private @Nullable String provisioningType;
        private @Nullable String schema;
        private @Nullable String sourceUrl;
        private @Nullable String type;
        private @Nullable String typeArn;
        private @Nullable String typeName;
        private @Nullable String versionId;
        private @Nullable String visibility;
        public Builder() {}
        public Builder(GetCloudFormationTypeResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.defaultVersionId = defaults.defaultVersionId;
    	      this.deprecatedStatus = defaults.deprecatedStatus;
    	      this.description = defaults.description;
    	      this.documentationUrl = defaults.documentationUrl;
    	      this.executionRoleArn = defaults.executionRoleArn;
    	      this.id = defaults.id;
    	      this.isDefaultVersion = defaults.isDefaultVersion;
    	      this.loggingConfigs = defaults.loggingConfigs;
    	      this.provisioningType = defaults.provisioningType;
    	      this.schema = defaults.schema;
    	      this.sourceUrl = defaults.sourceUrl;
    	      this.type = defaults.type;
    	      this.typeArn = defaults.typeArn;
    	      this.typeName = defaults.typeName;
    	      this.versionId = defaults.versionId;
    	      this.visibility = defaults.visibility;
        }

        @CustomType.Setter
        public Builder arn(@Nullable String arn) {
            this.arn = arn;
            return this;
        }
        @CustomType.Setter
        public Builder defaultVersionId(@Nullable String defaultVersionId) {
            this.defaultVersionId = defaultVersionId;
            return this;
        }
        @CustomType.Setter
        public Builder deprecatedStatus(@Nullable String deprecatedStatus) {
            this.deprecatedStatus = deprecatedStatus;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder documentationUrl(@Nullable String documentationUrl) {
            this.documentationUrl = documentationUrl;
            return this;
        }
        @CustomType.Setter
        public Builder executionRoleArn(@Nullable String executionRoleArn) {
            this.executionRoleArn = executionRoleArn;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isDefaultVersion(@Nullable Boolean isDefaultVersion) {
            this.isDefaultVersion = isDefaultVersion;
            return this;
        }
        @CustomType.Setter
        public Builder loggingConfigs(@Nullable List<GetCloudFormationTypeLoggingConfig> loggingConfigs) {
            this.loggingConfigs = loggingConfigs;
            return this;
        }
        public Builder loggingConfigs(GetCloudFormationTypeLoggingConfig... loggingConfigs) {
            return loggingConfigs(List.of(loggingConfigs));
        }
        @CustomType.Setter
        public Builder provisioningType(@Nullable String provisioningType) {
            this.provisioningType = provisioningType;
            return this;
        }
        @CustomType.Setter
        public Builder schema(@Nullable String schema) {
            this.schema = schema;
            return this;
        }
        @CustomType.Setter
        public Builder sourceUrl(@Nullable String sourceUrl) {
            this.sourceUrl = sourceUrl;
            return this;
        }
        @CustomType.Setter
        public Builder type(@Nullable String type) {
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder typeArn(@Nullable String typeArn) {
            this.typeArn = typeArn;
            return this;
        }
        @CustomType.Setter
        public Builder typeName(@Nullable String typeName) {
            this.typeName = typeName;
            return this;
        }
        @CustomType.Setter
        public Builder versionId(@Nullable String versionId) {
            this.versionId = versionId;
            return this;
        }
        @CustomType.Setter
        public Builder visibility(@Nullable String visibility) {
            this.visibility = visibility;
            return this;
        }
        public GetCloudFormationTypeResult build() {
            final var o = new GetCloudFormationTypeResult();
            o.arn = arn;
            o.defaultVersionId = defaultVersionId;
            o.deprecatedStatus = deprecatedStatus;
            o.description = description;
            o.documentationUrl = documentationUrl;
            o.executionRoleArn = executionRoleArn;
            o.id = id;
            o.isDefaultVersion = isDefaultVersion;
            o.loggingConfigs = loggingConfigs;
            o.provisioningType = provisioningType;
            o.schema = schema;
            o.sourceUrl = sourceUrl;
            o.type = type;
            o.typeArn = typeArn;
            o.typeName = typeName;
            o.versionId = versionId;
            o.visibility = visibility;
            return o;
        }
    }
}
