// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.fsx.inputs;

import com.pulumi.aws.fsx.inputs.S3AccessPointAttachmentOpenzfsConfigurationFileSystemIdentityArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class S3AccessPointAttachmentOpenzfsConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final S3AccessPointAttachmentOpenzfsConfigurationArgs Empty = new S3AccessPointAttachmentOpenzfsConfigurationArgs();

    /**
     * File system user identity to use for authorizing file read and write requests that are made using the S3 access point. See `file_system_identity` Block for details.
     * 
     */
    @Import(name="fileSystemIdentity")
    private @Nullable Output<S3AccessPointAttachmentOpenzfsConfigurationFileSystemIdentityArgs> fileSystemIdentity;

    /**
     * @return File system user identity to use for authorizing file read and write requests that are made using the S3 access point. See `file_system_identity` Block for details.
     * 
     */
    public Optional<Output<S3AccessPointAttachmentOpenzfsConfigurationFileSystemIdentityArgs>> fileSystemIdentity() {
        return Optional.ofNullable(this.fileSystemIdentity);
    }

    /**
     * ID of the FSx for OpenZFS volume to which the S3 access point is attached.
     * 
     */
    @Import(name="volumeId", required=true)
    private Output<String> volumeId;

    /**
     * @return ID of the FSx for OpenZFS volume to which the S3 access point is attached.
     * 
     */
    public Output<String> volumeId() {
        return this.volumeId;
    }

    private S3AccessPointAttachmentOpenzfsConfigurationArgs() {}

    private S3AccessPointAttachmentOpenzfsConfigurationArgs(S3AccessPointAttachmentOpenzfsConfigurationArgs $) {
        this.fileSystemIdentity = $.fileSystemIdentity;
        this.volumeId = $.volumeId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(S3AccessPointAttachmentOpenzfsConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private S3AccessPointAttachmentOpenzfsConfigurationArgs $;

        public Builder() {
            $ = new S3AccessPointAttachmentOpenzfsConfigurationArgs();
        }

        public Builder(S3AccessPointAttachmentOpenzfsConfigurationArgs defaults) {
            $ = new S3AccessPointAttachmentOpenzfsConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param fileSystemIdentity File system user identity to use for authorizing file read and write requests that are made using the S3 access point. See `file_system_identity` Block for details.
         * 
         * @return builder
         * 
         */
        public Builder fileSystemIdentity(@Nullable Output<S3AccessPointAttachmentOpenzfsConfigurationFileSystemIdentityArgs> fileSystemIdentity) {
            $.fileSystemIdentity = fileSystemIdentity;
            return this;
        }

        /**
         * @param fileSystemIdentity File system user identity to use for authorizing file read and write requests that are made using the S3 access point. See `file_system_identity` Block for details.
         * 
         * @return builder
         * 
         */
        public Builder fileSystemIdentity(S3AccessPointAttachmentOpenzfsConfigurationFileSystemIdentityArgs fileSystemIdentity) {
            return fileSystemIdentity(Output.of(fileSystemIdentity));
        }

        /**
         * @param volumeId ID of the FSx for OpenZFS volume to which the S3 access point is attached.
         * 
         * @return builder
         * 
         */
        public Builder volumeId(Output<String> volumeId) {
            $.volumeId = volumeId;
            return this;
        }

        /**
         * @param volumeId ID of the FSx for OpenZFS volume to which the S3 access point is attached.
         * 
         * @return builder
         * 
         */
        public Builder volumeId(String volumeId) {
            return volumeId(Output.of(volumeId));
        }

        public S3AccessPointAttachmentOpenzfsConfigurationArgs build() {
            if ($.volumeId == null) {
                throw new MissingRequiredPropertyException("S3AccessPointAttachmentOpenzfsConfigurationArgs", "volumeId");
            }
            return $;
        }
    }

}
