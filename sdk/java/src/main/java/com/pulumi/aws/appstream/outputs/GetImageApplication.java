// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.appstream.outputs;

import com.pulumi.aws.appstream.outputs.GetImageApplicationIconS3Location;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetImageApplication {
    /**
     * @return The app block ARN of the application.
     * 
     */
    private String appBlockArn;
    /**
     * @return Arn of the image being searched for. Cannot be used with name_regex or name.
     * 
     */
    private String arn;
    /**
     * @return Time at which this image was created.
     * 
     */
    private String createdTime;
    /**
     * @return Description of image.
     * 
     */
    private String description;
    /**
     * @return Image name to display.
     * 
     */
    private String displayName;
    /**
     * @return Bool based on if the application is enabled.
     * 
     */
    private Boolean enabled;
    /**
     * @return A list named icon_s3_location that contains the following:
     * 
     */
    private List<GetImageApplicationIconS3Location> iconS3Locations;
    /**
     * @return URL of the application icon. This URL may be time-limited.
     * 
     */
    private String iconUrl;
    /**
     * @return List of the instance families of the application.
     * 
     */
    private List<String> instanceFamilies;
    /**
     * @return Arguments that are passed to the application at it&#39;s launch.
     * 
     */
    private String launchParameters;
    /**
     * @return Path to the application&#39;s excecutable in the instance.
     * 
     */
    private String launchPath;
    /**
     * @return String to string map that contains additional attributes used to describe the application.
     * * `Name` - Name of the application.
     * 
     */
    private Map<String,Object> metadata;
    /**
     * @return Name of the image being searched for. Cannot be used with name_regex or arn.
     * 
     */
    private String name;
    /**
     * @return Array of strings describing the platforms on which the application can run.
     * Values will be from: WINDOWS | WINDOWS_SERVER_2016 | WINDOWS_SERVER_2019 | WINDOWS_SERVER_2022 | AMAZON_LINUX2
     * 
     */
    private List<String> platforms;
    /**
     * @return Working directory for the application.
     * 
     */
    private String workingDirectory;

    private GetImageApplication() {}
    /**
     * @return The app block ARN of the application.
     * 
     */
    public String appBlockArn() {
        return this.appBlockArn;
    }
    /**
     * @return Arn of the image being searched for. Cannot be used with name_regex or name.
     * 
     */
    public String arn() {
        return this.arn;
    }
    /**
     * @return Time at which this image was created.
     * 
     */
    public String createdTime() {
        return this.createdTime;
    }
    /**
     * @return Description of image.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Image name to display.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Bool based on if the application is enabled.
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }
    /**
     * @return A list named icon_s3_location that contains the following:
     * 
     */
    public List<GetImageApplicationIconS3Location> iconS3Locations() {
        return this.iconS3Locations;
    }
    /**
     * @return URL of the application icon. This URL may be time-limited.
     * 
     */
    public String iconUrl() {
        return this.iconUrl;
    }
    /**
     * @return List of the instance families of the application.
     * 
     */
    public List<String> instanceFamilies() {
        return this.instanceFamilies;
    }
    /**
     * @return Arguments that are passed to the application at it&#39;s launch.
     * 
     */
    public String launchParameters() {
        return this.launchParameters;
    }
    /**
     * @return Path to the application&#39;s excecutable in the instance.
     * 
     */
    public String launchPath() {
        return this.launchPath;
    }
    /**
     * @return String to string map that contains additional attributes used to describe the application.
     * * `Name` - Name of the application.
     * 
     */
    public Map<String,Object> metadata() {
        return this.metadata;
    }
    /**
     * @return Name of the image being searched for. Cannot be used with name_regex or arn.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Array of strings describing the platforms on which the application can run.
     * Values will be from: WINDOWS | WINDOWS_SERVER_2016 | WINDOWS_SERVER_2019 | WINDOWS_SERVER_2022 | AMAZON_LINUX2
     * 
     */
    public List<String> platforms() {
        return this.platforms;
    }
    /**
     * @return Working directory for the application.
     * 
     */
    public String workingDirectory() {
        return this.workingDirectory;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetImageApplication defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String appBlockArn;
        private String arn;
        private String createdTime;
        private String description;
        private String displayName;
        private Boolean enabled;
        private List<GetImageApplicationIconS3Location> iconS3Locations;
        private String iconUrl;
        private List<String> instanceFamilies;
        private String launchParameters;
        private String launchPath;
        private Map<String,Object> metadata;
        private String name;
        private List<String> platforms;
        private String workingDirectory;
        public Builder() {}
        public Builder(GetImageApplication defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.appBlockArn = defaults.appBlockArn;
    	      this.arn = defaults.arn;
    	      this.createdTime = defaults.createdTime;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.enabled = defaults.enabled;
    	      this.iconS3Locations = defaults.iconS3Locations;
    	      this.iconUrl = defaults.iconUrl;
    	      this.instanceFamilies = defaults.instanceFamilies;
    	      this.launchParameters = defaults.launchParameters;
    	      this.launchPath = defaults.launchPath;
    	      this.metadata = defaults.metadata;
    	      this.name = defaults.name;
    	      this.platforms = defaults.platforms;
    	      this.workingDirectory = defaults.workingDirectory;
        }

        @CustomType.Setter
        public Builder appBlockArn(String appBlockArn) {
            if (appBlockArn == null) {
              throw new MissingRequiredPropertyException("GetImageApplication", "appBlockArn");
            }
            this.appBlockArn = appBlockArn;
            return this;
        }
        @CustomType.Setter
        public Builder arn(String arn) {
            if (arn == null) {
              throw new MissingRequiredPropertyException("GetImageApplication", "arn");
            }
            this.arn = arn;
            return this;
        }
        @CustomType.Setter
        public Builder createdTime(String createdTime) {
            if (createdTime == null) {
              throw new MissingRequiredPropertyException("GetImageApplication", "createdTime");
            }
            this.createdTime = createdTime;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetImageApplication", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetImageApplication", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            if (enabled == null) {
              throw new MissingRequiredPropertyException("GetImageApplication", "enabled");
            }
            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder iconS3Locations(List<GetImageApplicationIconS3Location> iconS3Locations) {
            if (iconS3Locations == null) {
              throw new MissingRequiredPropertyException("GetImageApplication", "iconS3Locations");
            }
            this.iconS3Locations = iconS3Locations;
            return this;
        }
        public Builder iconS3Locations(GetImageApplicationIconS3Location... iconS3Locations) {
            return iconS3Locations(List.of(iconS3Locations));
        }
        @CustomType.Setter
        public Builder iconUrl(String iconUrl) {
            if (iconUrl == null) {
              throw new MissingRequiredPropertyException("GetImageApplication", "iconUrl");
            }
            this.iconUrl = iconUrl;
            return this;
        }
        @CustomType.Setter
        public Builder instanceFamilies(List<String> instanceFamilies) {
            if (instanceFamilies == null) {
              throw new MissingRequiredPropertyException("GetImageApplication", "instanceFamilies");
            }
            this.instanceFamilies = instanceFamilies;
            return this;
        }
        public Builder instanceFamilies(String... instanceFamilies) {
            return instanceFamilies(List.of(instanceFamilies));
        }
        @CustomType.Setter
        public Builder launchParameters(String launchParameters) {
            if (launchParameters == null) {
              throw new MissingRequiredPropertyException("GetImageApplication", "launchParameters");
            }
            this.launchParameters = launchParameters;
            return this;
        }
        @CustomType.Setter
        public Builder launchPath(String launchPath) {
            if (launchPath == null) {
              throw new MissingRequiredPropertyException("GetImageApplication", "launchPath");
            }
            this.launchPath = launchPath;
            return this;
        }
        @CustomType.Setter
        public Builder metadata(Map<String,Object> metadata) {
            if (metadata == null) {
              throw new MissingRequiredPropertyException("GetImageApplication", "metadata");
            }
            this.metadata = metadata;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetImageApplication", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder platforms(List<String> platforms) {
            if (platforms == null) {
              throw new MissingRequiredPropertyException("GetImageApplication", "platforms");
            }
            this.platforms = platforms;
            return this;
        }
        public Builder platforms(String... platforms) {
            return platforms(List.of(platforms));
        }
        @CustomType.Setter
        public Builder workingDirectory(String workingDirectory) {
            if (workingDirectory == null) {
              throw new MissingRequiredPropertyException("GetImageApplication", "workingDirectory");
            }
            this.workingDirectory = workingDirectory;
            return this;
        }
        public GetImageApplication build() {
            final var _resultValue = new GetImageApplication();
            _resultValue.appBlockArn = appBlockArn;
            _resultValue.arn = arn;
            _resultValue.createdTime = createdTime;
            _resultValue.description = description;
            _resultValue.displayName = displayName;
            _resultValue.enabled = enabled;
            _resultValue.iconS3Locations = iconS3Locations;
            _resultValue.iconUrl = iconUrl;
            _resultValue.instanceFamilies = instanceFamilies;
            _resultValue.launchParameters = launchParameters;
            _resultValue.launchPath = launchPath;
            _resultValue.metadata = metadata;
            _resultValue.name = name;
            _resultValue.platforms = platforms;
            _resultValue.workingDirectory = workingDirectory;
            return _resultValue;
        }
    }
}
