// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.chimesdkmediapipelines.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleSentimentConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleSentimentConfigurationArgs Empty = new MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleSentimentConfigurationArgs();

    /**
     * Rule name.
     * 
     */
    @Import(name="ruleName", required=true)
    private Output<String> ruleName;

    /**
     * @return Rule name.
     * 
     */
    public Output<String> ruleName() {
        return this.ruleName;
    }

    /**
     * Sentiment type to match.
     * 
     */
    @Import(name="sentimentType", required=true)
    private Output<String> sentimentType;

    /**
     * @return Sentiment type to match.
     * 
     */
    public Output<String> sentimentType() {
        return this.sentimentType;
    }

    /**
     * Analysis interval.
     * 
     */
    @Import(name="timePeriod", required=true)
    private Output<Integer> timePeriod;

    /**
     * @return Analysis interval.
     * 
     */
    public Output<Integer> timePeriod() {
        return this.timePeriod;
    }

    private MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleSentimentConfigurationArgs() {}

    private MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleSentimentConfigurationArgs(MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleSentimentConfigurationArgs $) {
        this.ruleName = $.ruleName;
        this.sentimentType = $.sentimentType;
        this.timePeriod = $.timePeriod;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleSentimentConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleSentimentConfigurationArgs $;

        public Builder() {
            $ = new MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleSentimentConfigurationArgs();
        }

        public Builder(MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleSentimentConfigurationArgs defaults) {
            $ = new MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleSentimentConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param ruleName Rule name.
         * 
         * @return builder
         * 
         */
        public Builder ruleName(Output<String> ruleName) {
            $.ruleName = ruleName;
            return this;
        }

        /**
         * @param ruleName Rule name.
         * 
         * @return builder
         * 
         */
        public Builder ruleName(String ruleName) {
            return ruleName(Output.of(ruleName));
        }

        /**
         * @param sentimentType Sentiment type to match.
         * 
         * @return builder
         * 
         */
        public Builder sentimentType(Output<String> sentimentType) {
            $.sentimentType = sentimentType;
            return this;
        }

        /**
         * @param sentimentType Sentiment type to match.
         * 
         * @return builder
         * 
         */
        public Builder sentimentType(String sentimentType) {
            return sentimentType(Output.of(sentimentType));
        }

        /**
         * @param timePeriod Analysis interval.
         * 
         * @return builder
         * 
         */
        public Builder timePeriod(Output<Integer> timePeriod) {
            $.timePeriod = timePeriod;
            return this;
        }

        /**
         * @param timePeriod Analysis interval.
         * 
         * @return builder
         * 
         */
        public Builder timePeriod(Integer timePeriod) {
            return timePeriod(Output.of(timePeriod));
        }

        public MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleSentimentConfigurationArgs build() {
            if ($.ruleName == null) {
                throw new MissingRequiredPropertyException("MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleSentimentConfigurationArgs", "ruleName");
            }
            if ($.sentimentType == null) {
                throw new MissingRequiredPropertyException("MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleSentimentConfigurationArgs", "sentimentType");
            }
            if ($.timePeriod == null) {
                throw new MissingRequiredPropertyException("MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleSentimentConfigurationArgs", "timePeriod");
            }
            return $;
        }
    }

}
