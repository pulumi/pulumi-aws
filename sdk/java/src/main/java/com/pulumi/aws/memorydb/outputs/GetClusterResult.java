// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.memorydb.outputs;

import com.pulumi.aws.memorydb.outputs.GetClusterClusterEndpoint;
import com.pulumi.aws.memorydb.outputs.GetClusterShard;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetClusterResult {
    /**
     * @return Name of the Access Control List associated with the cluster.
     * 
     */
    private @Nullable String aclName;
    /**
     * @return ARN of the cluster.
     * 
     */
    private @Nullable String arn;
    /**
     * @return True when the cluster allows automatic minor version upgrades.
     * 
     */
    private @Nullable Boolean autoMinorVersionUpgrade;
    private @Nullable List<GetClusterClusterEndpoint> clusterEndpoints;
    /**
     * @return True when data tiering is enabled.
     * 
     */
    private @Nullable Boolean dataTiering;
    /**
     * @return Description for the cluster.
     * 
     */
    private @Nullable String description;
    /**
     * @return Patch version number of the Redis engine used by the cluster.
     * 
     */
    private @Nullable String enginePatchVersion;
    /**
     * @return Version number of the Redis engine used by the cluster.
     * 
     */
    private @Nullable String engineVersion;
    /**
     * @return Name of the final cluster snapshot to be created when this resource is deleted. If omitted, no final snapshot will be made.
     * 
     */
    private @Nullable String finalSnapshotName;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private @Nullable String id;
    /**
     * @return ARN of the KMS key used to encrypt the cluster at rest.
     * 
     */
    private @Nullable String kmsKeyArn;
    /**
     * @return Weekly time range during which maintenance on the cluster is performed. Specify as a range in the format `ddd:hh24:mi-ddd:hh24:mi` (24H Clock UTC). Example: `sun:23:00-mon:01:30`.
     * 
     */
    private @Nullable String maintenanceWindow;
    /**
     * @return Name of this node.
     * 
     */
    private String name;
    /**
     * @return Compute and memory capacity of the nodes in the cluster.
     * 
     */
    private @Nullable String nodeType;
    /**
     * @return The number of replicas to apply to each shard.
     * 
     */
    private @Nullable Integer numReplicasPerShard;
    /**
     * @return Number of shards in the cluster.
     * 
     */
    private @Nullable Integer numShards;
    /**
     * @return The name of the parameter group associated with the cluster.
     * 
     */
    private @Nullable String parameterGroupName;
    /**
     * @return Port number that this node is listening on.
     * 
     */
    private @Nullable Integer port;
    /**
     * @return Set of VPC Security Group ID-s associated with this cluster.
     * 
     */
    private @Nullable List<String> securityGroupIds;
    /**
     * @return Set of shards in this cluster.
     * 
     */
    private @Nullable List<GetClusterShard> shards;
    /**
     * @return The number of days for which MemoryDB retains automatic snapshots before deleting them. When set to `0`, automatic backups are disabled.
     * 
     */
    private @Nullable Integer snapshotRetentionLimit;
    /**
     * @return Daily time range (in UTC) during which MemoryDB begins taking a daily snapshot of your shard. Example: `05:00-09:00`.
     * 
     */
    private @Nullable String snapshotWindow;
    /**
     * @return ARN of the SNS topic to which cluster notifications are sent.
     * 
     */
    private @Nullable String snsTopicArn;
    /**
     * @return The name of the subnet group used for the cluster.
     * 
     */
    private @Nullable String subnetGroupName;
    /**
     * @return Map of tags assigned to the cluster.
     * 
     */
    private @Nullable Map<String,String> tags;
    /**
     * @return When true, in-transit encryption is enabled for the cluster.
     * 
     */
    private @Nullable Boolean tlsEnabled;

    private GetClusterResult() {}
    /**
     * @return Name of the Access Control List associated with the cluster.
     * 
     */
    public Optional<String> aclName() {
        return Optional.ofNullable(this.aclName);
    }
    /**
     * @return ARN of the cluster.
     * 
     */
    public Optional<String> arn() {
        return Optional.ofNullable(this.arn);
    }
    /**
     * @return True when the cluster allows automatic minor version upgrades.
     * 
     */
    public Optional<Boolean> autoMinorVersionUpgrade() {
        return Optional.ofNullable(this.autoMinorVersionUpgrade);
    }
    public List<GetClusterClusterEndpoint> clusterEndpoints() {
        return this.clusterEndpoints == null ? List.of() : this.clusterEndpoints;
    }
    /**
     * @return True when data tiering is enabled.
     * 
     */
    public Optional<Boolean> dataTiering() {
        return Optional.ofNullable(this.dataTiering);
    }
    /**
     * @return Description for the cluster.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return Patch version number of the Redis engine used by the cluster.
     * 
     */
    public Optional<String> enginePatchVersion() {
        return Optional.ofNullable(this.enginePatchVersion);
    }
    /**
     * @return Version number of the Redis engine used by the cluster.
     * 
     */
    public Optional<String> engineVersion() {
        return Optional.ofNullable(this.engineVersion);
    }
    /**
     * @return Name of the final cluster snapshot to be created when this resource is deleted. If omitted, no final snapshot will be made.
     * 
     */
    public Optional<String> finalSnapshotName() {
        return Optional.ofNullable(this.finalSnapshotName);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return ARN of the KMS key used to encrypt the cluster at rest.
     * 
     */
    public Optional<String> kmsKeyArn() {
        return Optional.ofNullable(this.kmsKeyArn);
    }
    /**
     * @return Weekly time range during which maintenance on the cluster is performed. Specify as a range in the format `ddd:hh24:mi-ddd:hh24:mi` (24H Clock UTC). Example: `sun:23:00-mon:01:30`.
     * 
     */
    public Optional<String> maintenanceWindow() {
        return Optional.ofNullable(this.maintenanceWindow);
    }
    /**
     * @return Name of this node.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Compute and memory capacity of the nodes in the cluster.
     * 
     */
    public Optional<String> nodeType() {
        return Optional.ofNullable(this.nodeType);
    }
    /**
     * @return The number of replicas to apply to each shard.
     * 
     */
    public Optional<Integer> numReplicasPerShard() {
        return Optional.ofNullable(this.numReplicasPerShard);
    }
    /**
     * @return Number of shards in the cluster.
     * 
     */
    public Optional<Integer> numShards() {
        return Optional.ofNullable(this.numShards);
    }
    /**
     * @return The name of the parameter group associated with the cluster.
     * 
     */
    public Optional<String> parameterGroupName() {
        return Optional.ofNullable(this.parameterGroupName);
    }
    /**
     * @return Port number that this node is listening on.
     * 
     */
    public Optional<Integer> port() {
        return Optional.ofNullable(this.port);
    }
    /**
     * @return Set of VPC Security Group ID-s associated with this cluster.
     * 
     */
    public List<String> securityGroupIds() {
        return this.securityGroupIds == null ? List.of() : this.securityGroupIds;
    }
    /**
     * @return Set of shards in this cluster.
     * 
     */
    public List<GetClusterShard> shards() {
        return this.shards == null ? List.of() : this.shards;
    }
    /**
     * @return The number of days for which MemoryDB retains automatic snapshots before deleting them. When set to `0`, automatic backups are disabled.
     * 
     */
    public Optional<Integer> snapshotRetentionLimit() {
        return Optional.ofNullable(this.snapshotRetentionLimit);
    }
    /**
     * @return Daily time range (in UTC) during which MemoryDB begins taking a daily snapshot of your shard. Example: `05:00-09:00`.
     * 
     */
    public Optional<String> snapshotWindow() {
        return Optional.ofNullable(this.snapshotWindow);
    }
    /**
     * @return ARN of the SNS topic to which cluster notifications are sent.
     * 
     */
    public Optional<String> snsTopicArn() {
        return Optional.ofNullable(this.snsTopicArn);
    }
    /**
     * @return The name of the subnet group used for the cluster.
     * 
     */
    public Optional<String> subnetGroupName() {
        return Optional.ofNullable(this.subnetGroupName);
    }
    /**
     * @return Map of tags assigned to the cluster.
     * 
     */
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * @return When true, in-transit encryption is enabled for the cluster.
     * 
     */
    public Optional<Boolean> tlsEnabled() {
        return Optional.ofNullable(this.tlsEnabled);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetClusterResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String aclName;
        private @Nullable String arn;
        private @Nullable Boolean autoMinorVersionUpgrade;
        private @Nullable List<GetClusterClusterEndpoint> clusterEndpoints;
        private @Nullable Boolean dataTiering;
        private @Nullable String description;
        private @Nullable String enginePatchVersion;
        private @Nullable String engineVersion;
        private @Nullable String finalSnapshotName;
        private @Nullable String id;
        private @Nullable String kmsKeyArn;
        private @Nullable String maintenanceWindow;
        private String name;
        private @Nullable String nodeType;
        private @Nullable Integer numReplicasPerShard;
        private @Nullable Integer numShards;
        private @Nullable String parameterGroupName;
        private @Nullable Integer port;
        private @Nullable List<String> securityGroupIds;
        private @Nullable List<GetClusterShard> shards;
        private @Nullable Integer snapshotRetentionLimit;
        private @Nullable String snapshotWindow;
        private @Nullable String snsTopicArn;
        private @Nullable String subnetGroupName;
        private @Nullable Map<String,String> tags;
        private @Nullable Boolean tlsEnabled;
        public Builder() {}
        public Builder(GetClusterResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aclName = defaults.aclName;
    	      this.arn = defaults.arn;
    	      this.autoMinorVersionUpgrade = defaults.autoMinorVersionUpgrade;
    	      this.clusterEndpoints = defaults.clusterEndpoints;
    	      this.dataTiering = defaults.dataTiering;
    	      this.description = defaults.description;
    	      this.enginePatchVersion = defaults.enginePatchVersion;
    	      this.engineVersion = defaults.engineVersion;
    	      this.finalSnapshotName = defaults.finalSnapshotName;
    	      this.id = defaults.id;
    	      this.kmsKeyArn = defaults.kmsKeyArn;
    	      this.maintenanceWindow = defaults.maintenanceWindow;
    	      this.name = defaults.name;
    	      this.nodeType = defaults.nodeType;
    	      this.numReplicasPerShard = defaults.numReplicasPerShard;
    	      this.numShards = defaults.numShards;
    	      this.parameterGroupName = defaults.parameterGroupName;
    	      this.port = defaults.port;
    	      this.securityGroupIds = defaults.securityGroupIds;
    	      this.shards = defaults.shards;
    	      this.snapshotRetentionLimit = defaults.snapshotRetentionLimit;
    	      this.snapshotWindow = defaults.snapshotWindow;
    	      this.snsTopicArn = defaults.snsTopicArn;
    	      this.subnetGroupName = defaults.subnetGroupName;
    	      this.tags = defaults.tags;
    	      this.tlsEnabled = defaults.tlsEnabled;
        }

        @CustomType.Setter
        public Builder aclName(@Nullable String aclName) {
            this.aclName = aclName;
            return this;
        }
        @CustomType.Setter
        public Builder arn(@Nullable String arn) {
            this.arn = arn;
            return this;
        }
        @CustomType.Setter
        public Builder autoMinorVersionUpgrade(@Nullable Boolean autoMinorVersionUpgrade) {
            this.autoMinorVersionUpgrade = autoMinorVersionUpgrade;
            return this;
        }
        @CustomType.Setter
        public Builder clusterEndpoints(@Nullable List<GetClusterClusterEndpoint> clusterEndpoints) {
            this.clusterEndpoints = clusterEndpoints;
            return this;
        }
        public Builder clusterEndpoints(GetClusterClusterEndpoint... clusterEndpoints) {
            return clusterEndpoints(List.of(clusterEndpoints));
        }
        @CustomType.Setter
        public Builder dataTiering(@Nullable Boolean dataTiering) {
            this.dataTiering = dataTiering;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder enginePatchVersion(@Nullable String enginePatchVersion) {
            this.enginePatchVersion = enginePatchVersion;
            return this;
        }
        @CustomType.Setter
        public Builder engineVersion(@Nullable String engineVersion) {
            this.engineVersion = engineVersion;
            return this;
        }
        @CustomType.Setter
        public Builder finalSnapshotName(@Nullable String finalSnapshotName) {
            this.finalSnapshotName = finalSnapshotName;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder kmsKeyArn(@Nullable String kmsKeyArn) {
            this.kmsKeyArn = kmsKeyArn;
            return this;
        }
        @CustomType.Setter
        public Builder maintenanceWindow(@Nullable String maintenanceWindow) {
            this.maintenanceWindow = maintenanceWindow;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder nodeType(@Nullable String nodeType) {
            this.nodeType = nodeType;
            return this;
        }
        @CustomType.Setter
        public Builder numReplicasPerShard(@Nullable Integer numReplicasPerShard) {
            this.numReplicasPerShard = numReplicasPerShard;
            return this;
        }
        @CustomType.Setter
        public Builder numShards(@Nullable Integer numShards) {
            this.numShards = numShards;
            return this;
        }
        @CustomType.Setter
        public Builder parameterGroupName(@Nullable String parameterGroupName) {
            this.parameterGroupName = parameterGroupName;
            return this;
        }
        @CustomType.Setter
        public Builder port(@Nullable Integer port) {
            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder securityGroupIds(@Nullable List<String> securityGroupIds) {
            this.securityGroupIds = securityGroupIds;
            return this;
        }
        public Builder securityGroupIds(String... securityGroupIds) {
            return securityGroupIds(List.of(securityGroupIds));
        }
        @CustomType.Setter
        public Builder shards(@Nullable List<GetClusterShard> shards) {
            this.shards = shards;
            return this;
        }
        public Builder shards(GetClusterShard... shards) {
            return shards(List.of(shards));
        }
        @CustomType.Setter
        public Builder snapshotRetentionLimit(@Nullable Integer snapshotRetentionLimit) {
            this.snapshotRetentionLimit = snapshotRetentionLimit;
            return this;
        }
        @CustomType.Setter
        public Builder snapshotWindow(@Nullable String snapshotWindow) {
            this.snapshotWindow = snapshotWindow;
            return this;
        }
        @CustomType.Setter
        public Builder snsTopicArn(@Nullable String snsTopicArn) {
            this.snsTopicArn = snsTopicArn;
            return this;
        }
        @CustomType.Setter
        public Builder subnetGroupName(@Nullable String subnetGroupName) {
            this.subnetGroupName = subnetGroupName;
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder tlsEnabled(@Nullable Boolean tlsEnabled) {
            this.tlsEnabled = tlsEnabled;
            return this;
        }
        public GetClusterResult build() {
            final var o = new GetClusterResult();
            o.aclName = aclName;
            o.arn = arn;
            o.autoMinorVersionUpgrade = autoMinorVersionUpgrade;
            o.clusterEndpoints = clusterEndpoints;
            o.dataTiering = dataTiering;
            o.description = description;
            o.enginePatchVersion = enginePatchVersion;
            o.engineVersion = engineVersion;
            o.finalSnapshotName = finalSnapshotName;
            o.id = id;
            o.kmsKeyArn = kmsKeyArn;
            o.maintenanceWindow = maintenanceWindow;
            o.name = name;
            o.nodeType = nodeType;
            o.numReplicasPerShard = numReplicasPerShard;
            o.numShards = numShards;
            o.parameterGroupName = parameterGroupName;
            o.port = port;
            o.securityGroupIds = securityGroupIds;
            o.shards = shards;
            o.snapshotRetentionLimit = snapshotRetentionLimit;
            o.snapshotWindow = snapshotWindow;
            o.snsTopicArn = snsTopicArn;
            o.subnetGroupName = subnetGroupName;
            o.tags = tags;
            o.tlsEnabled = tlsEnabled;
            return o;
        }
    }
}
