// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.memorydb.outputs;

import com.pulumi.aws.memorydb.outputs.GetClusterClusterEndpoint;
import com.pulumi.aws.memorydb.outputs.GetClusterShard;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetClusterResult {
    /**
     * @return The name of the Access Control List associated with the cluster.
     * 
     */
    private final String aclName;
    /**
     * @return The ARN of the cluster.
     * 
     */
    private final String arn;
    /**
     * @return True when the cluster allows automatic minor version upgrades.
     * * `cluster_endpoint`
     * 
     */
    private final Boolean autoMinorVersionUpgrade;
    private final List<GetClusterClusterEndpoint> clusterEndpoints;
    /**
     * @return Description for the cluster.
     * 
     */
    private final String description;
    /**
     * @return Patch version number of the Redis engine used by the cluster.
     * 
     */
    private final String enginePatchVersion;
    /**
     * @return Version number of the Redis engine used by the cluster.
     * 
     */
    private final String engineVersion;
    /**
     * @return Name of the final cluster snapshot to be created when this resource is deleted. If omitted, no final snapshot will be made.
     * 
     */
    private final String finalSnapshotName;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private final String id;
    /**
     * @return ARN of the KMS key used to encrypt the cluster at rest.
     * 
     */
    private final String kmsKeyArn;
    /**
     * @return The weekly time range during which maintenance on the cluster is performed. Specify as a range in the format `ddd:hh24:mi-ddd:hh24:mi` (24H Clock UTC). Example: `sun:23:00-mon:01:30`.
     * 
     */
    private final String maintenanceWindow;
    /**
     * @return Name of this node.
     * * `endpoint`
     * 
     */
    private final String name;
    /**
     * @return The compute and memory capacity of the nodes in the cluster.
     * 
     */
    private final String nodeType;
    /**
     * @return The number of replicas to apply to each shard.
     * 
     */
    private final Integer numReplicasPerShard;
    /**
     * @return The number of shards in the cluster.
     * 
     */
    private final Integer numShards;
    /**
     * @return The name of the parameter group associated with the cluster.
     * 
     */
    private final String parameterGroupName;
    /**
     * @return Port number that this node is listening on.
     * 
     */
    private final Integer port;
    /**
     * @return Set of VPC Security Group ID-s associated with this cluster.
     * 
     */
    private final List<String> securityGroupIds;
    /**
     * @return Set of shards in this cluster.
     * 
     */
    private final List<GetClusterShard> shards;
    /**
     * @return The number of days for which MemoryDB retains automatic snapshots before deleting them. When set to `0`, automatic backups are disabled.
     * 
     */
    private final Integer snapshotRetentionLimit;
    /**
     * @return The daily time range (in UTC) during which MemoryDB begins taking a daily snapshot of your shard. Example: `05:00-09:00`.
     * 
     */
    private final String snapshotWindow;
    /**
     * @return ARN of the SNS topic to which cluster notifications are sent.
     * * `subnet_group_name` -The name of the subnet group used for the cluster.
     * 
     */
    private final String snsTopicArn;
    private final String subnetGroupName;
    /**
     * @return A map of tags assigned to the cluster.
     * 
     */
    private final Map<String,String> tags;
    /**
     * @return When true, in-transit encryption is enabled for the cluster.
     * 
     */
    private final Boolean tlsEnabled;

    @CustomType.Constructor
    private GetClusterResult(
        @CustomType.Parameter("aclName") String aclName,
        @CustomType.Parameter("arn") String arn,
        @CustomType.Parameter("autoMinorVersionUpgrade") Boolean autoMinorVersionUpgrade,
        @CustomType.Parameter("clusterEndpoints") List<GetClusterClusterEndpoint> clusterEndpoints,
        @CustomType.Parameter("description") String description,
        @CustomType.Parameter("enginePatchVersion") String enginePatchVersion,
        @CustomType.Parameter("engineVersion") String engineVersion,
        @CustomType.Parameter("finalSnapshotName") String finalSnapshotName,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("kmsKeyArn") String kmsKeyArn,
        @CustomType.Parameter("maintenanceWindow") String maintenanceWindow,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("nodeType") String nodeType,
        @CustomType.Parameter("numReplicasPerShard") Integer numReplicasPerShard,
        @CustomType.Parameter("numShards") Integer numShards,
        @CustomType.Parameter("parameterGroupName") String parameterGroupName,
        @CustomType.Parameter("port") Integer port,
        @CustomType.Parameter("securityGroupIds") List<String> securityGroupIds,
        @CustomType.Parameter("shards") List<GetClusterShard> shards,
        @CustomType.Parameter("snapshotRetentionLimit") Integer snapshotRetentionLimit,
        @CustomType.Parameter("snapshotWindow") String snapshotWindow,
        @CustomType.Parameter("snsTopicArn") String snsTopicArn,
        @CustomType.Parameter("subnetGroupName") String subnetGroupName,
        @CustomType.Parameter("tags") Map<String,String> tags,
        @CustomType.Parameter("tlsEnabled") Boolean tlsEnabled) {
        this.aclName = aclName;
        this.arn = arn;
        this.autoMinorVersionUpgrade = autoMinorVersionUpgrade;
        this.clusterEndpoints = clusterEndpoints;
        this.description = description;
        this.enginePatchVersion = enginePatchVersion;
        this.engineVersion = engineVersion;
        this.finalSnapshotName = finalSnapshotName;
        this.id = id;
        this.kmsKeyArn = kmsKeyArn;
        this.maintenanceWindow = maintenanceWindow;
        this.name = name;
        this.nodeType = nodeType;
        this.numReplicasPerShard = numReplicasPerShard;
        this.numShards = numShards;
        this.parameterGroupName = parameterGroupName;
        this.port = port;
        this.securityGroupIds = securityGroupIds;
        this.shards = shards;
        this.snapshotRetentionLimit = snapshotRetentionLimit;
        this.snapshotWindow = snapshotWindow;
        this.snsTopicArn = snsTopicArn;
        this.subnetGroupName = subnetGroupName;
        this.tags = tags;
        this.tlsEnabled = tlsEnabled;
    }

    /**
     * @return The name of the Access Control List associated with the cluster.
     * 
     */
    public String aclName() {
        return this.aclName;
    }
    /**
     * @return The ARN of the cluster.
     * 
     */
    public String arn() {
        return this.arn;
    }
    /**
     * @return True when the cluster allows automatic minor version upgrades.
     * * `cluster_endpoint`
     * 
     */
    public Boolean autoMinorVersionUpgrade() {
        return this.autoMinorVersionUpgrade;
    }
    public List<GetClusterClusterEndpoint> clusterEndpoints() {
        return this.clusterEndpoints;
    }
    /**
     * @return Description for the cluster.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Patch version number of the Redis engine used by the cluster.
     * 
     */
    public String enginePatchVersion() {
        return this.enginePatchVersion;
    }
    /**
     * @return Version number of the Redis engine used by the cluster.
     * 
     */
    public String engineVersion() {
        return this.engineVersion;
    }
    /**
     * @return Name of the final cluster snapshot to be created when this resource is deleted. If omitted, no final snapshot will be made.
     * 
     */
    public String finalSnapshotName() {
        return this.finalSnapshotName;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return ARN of the KMS key used to encrypt the cluster at rest.
     * 
     */
    public String kmsKeyArn() {
        return this.kmsKeyArn;
    }
    /**
     * @return The weekly time range during which maintenance on the cluster is performed. Specify as a range in the format `ddd:hh24:mi-ddd:hh24:mi` (24H Clock UTC). Example: `sun:23:00-mon:01:30`.
     * 
     */
    public String maintenanceWindow() {
        return this.maintenanceWindow;
    }
    /**
     * @return Name of this node.
     * * `endpoint`
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The compute and memory capacity of the nodes in the cluster.
     * 
     */
    public String nodeType() {
        return this.nodeType;
    }
    /**
     * @return The number of replicas to apply to each shard.
     * 
     */
    public Integer numReplicasPerShard() {
        return this.numReplicasPerShard;
    }
    /**
     * @return The number of shards in the cluster.
     * 
     */
    public Integer numShards() {
        return this.numShards;
    }
    /**
     * @return The name of the parameter group associated with the cluster.
     * 
     */
    public String parameterGroupName() {
        return this.parameterGroupName;
    }
    /**
     * @return Port number that this node is listening on.
     * 
     */
    public Integer port() {
        return this.port;
    }
    /**
     * @return Set of VPC Security Group ID-s associated with this cluster.
     * 
     */
    public List<String> securityGroupIds() {
        return this.securityGroupIds;
    }
    /**
     * @return Set of shards in this cluster.
     * 
     */
    public List<GetClusterShard> shards() {
        return this.shards;
    }
    /**
     * @return The number of days for which MemoryDB retains automatic snapshots before deleting them. When set to `0`, automatic backups are disabled.
     * 
     */
    public Integer snapshotRetentionLimit() {
        return this.snapshotRetentionLimit;
    }
    /**
     * @return The daily time range (in UTC) during which MemoryDB begins taking a daily snapshot of your shard. Example: `05:00-09:00`.
     * 
     */
    public String snapshotWindow() {
        return this.snapshotWindow;
    }
    /**
     * @return ARN of the SNS topic to which cluster notifications are sent.
     * * `subnet_group_name` -The name of the subnet group used for the cluster.
     * 
     */
    public String snsTopicArn() {
        return this.snsTopicArn;
    }
    public String subnetGroupName() {
        return this.subnetGroupName;
    }
    /**
     * @return A map of tags assigned to the cluster.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }
    /**
     * @return When true, in-transit encryption is enabled for the cluster.
     * 
     */
    public Boolean tlsEnabled() {
        return this.tlsEnabled;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetClusterResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String aclName;
        private String arn;
        private Boolean autoMinorVersionUpgrade;
        private List<GetClusterClusterEndpoint> clusterEndpoints;
        private String description;
        private String enginePatchVersion;
        private String engineVersion;
        private String finalSnapshotName;
        private String id;
        private String kmsKeyArn;
        private String maintenanceWindow;
        private String name;
        private String nodeType;
        private Integer numReplicasPerShard;
        private Integer numShards;
        private String parameterGroupName;
        private Integer port;
        private List<String> securityGroupIds;
        private List<GetClusterShard> shards;
        private Integer snapshotRetentionLimit;
        private String snapshotWindow;
        private String snsTopicArn;
        private String subnetGroupName;
        private Map<String,String> tags;
        private Boolean tlsEnabled;

        public Builder() {
    	      // Empty
        }

        public Builder(GetClusterResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aclName = defaults.aclName;
    	      this.arn = defaults.arn;
    	      this.autoMinorVersionUpgrade = defaults.autoMinorVersionUpgrade;
    	      this.clusterEndpoints = defaults.clusterEndpoints;
    	      this.description = defaults.description;
    	      this.enginePatchVersion = defaults.enginePatchVersion;
    	      this.engineVersion = defaults.engineVersion;
    	      this.finalSnapshotName = defaults.finalSnapshotName;
    	      this.id = defaults.id;
    	      this.kmsKeyArn = defaults.kmsKeyArn;
    	      this.maintenanceWindow = defaults.maintenanceWindow;
    	      this.name = defaults.name;
    	      this.nodeType = defaults.nodeType;
    	      this.numReplicasPerShard = defaults.numReplicasPerShard;
    	      this.numShards = defaults.numShards;
    	      this.parameterGroupName = defaults.parameterGroupName;
    	      this.port = defaults.port;
    	      this.securityGroupIds = defaults.securityGroupIds;
    	      this.shards = defaults.shards;
    	      this.snapshotRetentionLimit = defaults.snapshotRetentionLimit;
    	      this.snapshotWindow = defaults.snapshotWindow;
    	      this.snsTopicArn = defaults.snsTopicArn;
    	      this.subnetGroupName = defaults.subnetGroupName;
    	      this.tags = defaults.tags;
    	      this.tlsEnabled = defaults.tlsEnabled;
        }

        public Builder aclName(String aclName) {
            this.aclName = Objects.requireNonNull(aclName);
            return this;
        }
        public Builder arn(String arn) {
            this.arn = Objects.requireNonNull(arn);
            return this;
        }
        public Builder autoMinorVersionUpgrade(Boolean autoMinorVersionUpgrade) {
            this.autoMinorVersionUpgrade = Objects.requireNonNull(autoMinorVersionUpgrade);
            return this;
        }
        public Builder clusterEndpoints(List<GetClusterClusterEndpoint> clusterEndpoints) {
            this.clusterEndpoints = Objects.requireNonNull(clusterEndpoints);
            return this;
        }
        public Builder clusterEndpoints(GetClusterClusterEndpoint... clusterEndpoints) {
            return clusterEndpoints(List.of(clusterEndpoints));
        }
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder enginePatchVersion(String enginePatchVersion) {
            this.enginePatchVersion = Objects.requireNonNull(enginePatchVersion);
            return this;
        }
        public Builder engineVersion(String engineVersion) {
            this.engineVersion = Objects.requireNonNull(engineVersion);
            return this;
        }
        public Builder finalSnapshotName(String finalSnapshotName) {
            this.finalSnapshotName = Objects.requireNonNull(finalSnapshotName);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder kmsKeyArn(String kmsKeyArn) {
            this.kmsKeyArn = Objects.requireNonNull(kmsKeyArn);
            return this;
        }
        public Builder maintenanceWindow(String maintenanceWindow) {
            this.maintenanceWindow = Objects.requireNonNull(maintenanceWindow);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder nodeType(String nodeType) {
            this.nodeType = Objects.requireNonNull(nodeType);
            return this;
        }
        public Builder numReplicasPerShard(Integer numReplicasPerShard) {
            this.numReplicasPerShard = Objects.requireNonNull(numReplicasPerShard);
            return this;
        }
        public Builder numShards(Integer numShards) {
            this.numShards = Objects.requireNonNull(numShards);
            return this;
        }
        public Builder parameterGroupName(String parameterGroupName) {
            this.parameterGroupName = Objects.requireNonNull(parameterGroupName);
            return this;
        }
        public Builder port(Integer port) {
            this.port = Objects.requireNonNull(port);
            return this;
        }
        public Builder securityGroupIds(List<String> securityGroupIds) {
            this.securityGroupIds = Objects.requireNonNull(securityGroupIds);
            return this;
        }
        public Builder securityGroupIds(String... securityGroupIds) {
            return securityGroupIds(List.of(securityGroupIds));
        }
        public Builder shards(List<GetClusterShard> shards) {
            this.shards = Objects.requireNonNull(shards);
            return this;
        }
        public Builder shards(GetClusterShard... shards) {
            return shards(List.of(shards));
        }
        public Builder snapshotRetentionLimit(Integer snapshotRetentionLimit) {
            this.snapshotRetentionLimit = Objects.requireNonNull(snapshotRetentionLimit);
            return this;
        }
        public Builder snapshotWindow(String snapshotWindow) {
            this.snapshotWindow = Objects.requireNonNull(snapshotWindow);
            return this;
        }
        public Builder snsTopicArn(String snsTopicArn) {
            this.snsTopicArn = Objects.requireNonNull(snsTopicArn);
            return this;
        }
        public Builder subnetGroupName(String subnetGroupName) {
            this.subnetGroupName = Objects.requireNonNull(subnetGroupName);
            return this;
        }
        public Builder tags(Map<String,String> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        public Builder tlsEnabled(Boolean tlsEnabled) {
            this.tlsEnabled = Objects.requireNonNull(tlsEnabled);
            return this;
        }        public GetClusterResult build() {
            return new GetClusterResult(aclName, arn, autoMinorVersionUpgrade, clusterEndpoints, description, enginePatchVersion, engineVersion, finalSnapshotName, id, kmsKeyArn, maintenanceWindow, name, nodeType, numReplicasPerShard, numShards, parameterGroupName, port, securityGroupIds, shards, snapshotRetentionLimit, snapshotWindow, snsTopicArn, subnetGroupName, tags, tlsEnabled);
        }
    }
}
