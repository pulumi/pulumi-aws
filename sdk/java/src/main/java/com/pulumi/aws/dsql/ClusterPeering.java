// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.dsql;

import com.pulumi.aws.Utilities;
import com.pulumi.aws.dsql.ClusterPeeringArgs;
import com.pulumi.aws.dsql.inputs.ClusterPeeringState;
import com.pulumi.aws.dsql.outputs.ClusterPeeringTimeouts;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Resource for managing an Amazon Aurora DSQL Cluster Peering.
 * 
 * ## Example Usage
 * 
 * ### Basic Usage
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.aws.dsql.Cluster;
 * import com.pulumi.aws.dsql.ClusterArgs;
 * import com.pulumi.aws.dsql.inputs.ClusterMultiRegionPropertiesArgs;
 * import com.pulumi.aws.dsql.ClusterPeering;
 * import com.pulumi.aws.dsql.ClusterPeeringArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example1 = new Cluster("example1", ClusterArgs.builder()
 *             .multiRegionProperties(ClusterMultiRegionPropertiesArgs.builder()
 *                 .witnessRegion("us-west-2")
 *                 .build())
 *             .build());
 * 
 *         var example2 = new Cluster("example2", ClusterArgs.builder()
 *             .multiRegionProperties(ClusterMultiRegionPropertiesArgs.builder()
 *                 .witnessRegion("us-west-2")
 *                 .build())
 *             .build());
 * 
 *         var example1ClusterPeering = new ClusterPeering("example1ClusterPeering", ClusterPeeringArgs.builder()
 *             .identifier(example1.identifier())
 *             .clusters(example2.arn())
 *             .witnessRegion(example1.multiRegionProperties().applyValue(_multiRegionProperties -> _multiRegionProperties.witnessRegion()))
 *             .build());
 * 
 *         var example2ClusterPeering = new ClusterPeering("example2ClusterPeering", ClusterPeeringArgs.builder()
 *             .identifier(example2.identifier())
 *             .clusters(example1.arn())
 *             .witnessRegion(example2.multiRegionProperties().applyValue(_multiRegionProperties -> _multiRegionProperties.witnessRegion()))
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ## Import
 * 
 * Using `pulumi import`, import DSQL Cluster Peering using the `identifier`. For example:
 * 
 * ```sh
 * $ pulumi import aws:dsql/clusterPeering:ClusterPeering example cluster-id-12345678
 * ```
 * 
 */
@ResourceType(type="aws:dsql/clusterPeering:ClusterPeering")
public class ClusterPeering extends com.pulumi.resources.CustomResource {
    /**
     * List of DSQL Cluster ARNs to be peered to this cluster.
     * 
     */
    @Export(name="clusters", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> clusters;

    /**
     * @return List of DSQL Cluster ARNs to be peered to this cluster.
     * 
     */
    public Output<List<String>> clusters() {
        return this.clusters;
    }
    /**
     * DSQL Cluster Identifier.
     * 
     */
    @Export(name="identifier", refs={String.class}, tree="[0]")
    private Output<String> identifier;

    /**
     * @return DSQL Cluster Identifier.
     * 
     */
    public Output<String> identifier() {
        return this.identifier;
    }
    /**
     * Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     * 
     */
    @Export(name="region", refs={String.class}, tree="[0]")
    private Output<String> region;

    /**
     * @return Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     * 
     */
    public Output<String> region() {
        return this.region;
    }
    @Export(name="timeouts", refs={ClusterPeeringTimeouts.class}, tree="[0]")
    private Output</* @Nullable */ ClusterPeeringTimeouts> timeouts;

    public Output<Optional<ClusterPeeringTimeouts>> timeouts() {
        return Codegen.optional(this.timeouts);
    }
    /**
     * Witness region for a multi-region cluster.
     * 
     */
    @Export(name="witnessRegion", refs={String.class}, tree="[0]")
    private Output<String> witnessRegion;

    /**
     * @return Witness region for a multi-region cluster.
     * 
     */
    public Output<String> witnessRegion() {
        return this.witnessRegion;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ClusterPeering(java.lang.String name) {
        this(name, ClusterPeeringArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ClusterPeering(java.lang.String name, ClusterPeeringArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ClusterPeering(java.lang.String name, ClusterPeeringArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("aws:dsql/clusterPeering:ClusterPeering", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private ClusterPeering(java.lang.String name, Output<java.lang.String> id, @Nullable ClusterPeeringState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("aws:dsql/clusterPeering:ClusterPeering", name, state, makeResourceOptions(options, id), false);
    }

    private static ClusterPeeringArgs makeArgs(ClusterPeeringArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? ClusterPeeringArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ClusterPeering get(java.lang.String name, Output<java.lang.String> id, @Nullable ClusterPeeringState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ClusterPeering(name, id, state, options);
    }
}
