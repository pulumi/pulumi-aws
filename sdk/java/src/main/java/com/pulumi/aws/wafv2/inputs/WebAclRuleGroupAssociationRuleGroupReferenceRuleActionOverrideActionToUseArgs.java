// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.wafv2.inputs;

import com.pulumi.aws.wafv2.inputs.WebAclRuleGroupAssociationRuleGroupReferenceRuleActionOverrideActionToUseAllowArgs;
import com.pulumi.aws.wafv2.inputs.WebAclRuleGroupAssociationRuleGroupReferenceRuleActionOverrideActionToUseBlockArgs;
import com.pulumi.aws.wafv2.inputs.WebAclRuleGroupAssociationRuleGroupReferenceRuleActionOverrideActionToUseCaptchaArgs;
import com.pulumi.aws.wafv2.inputs.WebAclRuleGroupAssociationRuleGroupReferenceRuleActionOverrideActionToUseChallengeArgs;
import com.pulumi.aws.wafv2.inputs.WebAclRuleGroupAssociationRuleGroupReferenceRuleActionOverrideActionToUseCountArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WebAclRuleGroupAssociationRuleGroupReferenceRuleActionOverrideActionToUseArgs extends com.pulumi.resources.ResourceArgs {

    public static final WebAclRuleGroupAssociationRuleGroupReferenceRuleActionOverrideActionToUseArgs Empty = new WebAclRuleGroupAssociationRuleGroupReferenceRuleActionOverrideActionToUseArgs();

    /**
     * Allow the request. See below.
     * 
     */
    @Import(name="allow")
    private @Nullable Output<WebAclRuleGroupAssociationRuleGroupReferenceRuleActionOverrideActionToUseAllowArgs> allow;

    /**
     * @return Allow the request. See below.
     * 
     */
    public Optional<Output<WebAclRuleGroupAssociationRuleGroupReferenceRuleActionOverrideActionToUseAllowArgs>> allow() {
        return Optional.ofNullable(this.allow);
    }

    /**
     * Block the request. See below.
     * 
     */
    @Import(name="block")
    private @Nullable Output<WebAclRuleGroupAssociationRuleGroupReferenceRuleActionOverrideActionToUseBlockArgs> block;

    /**
     * @return Block the request. See below.
     * 
     */
    public Optional<Output<WebAclRuleGroupAssociationRuleGroupReferenceRuleActionOverrideActionToUseBlockArgs>> block() {
        return Optional.ofNullable(this.block);
    }

    /**
     * Require CAPTCHA verification. See below.
     * 
     */
    @Import(name="captcha")
    private @Nullable Output<WebAclRuleGroupAssociationRuleGroupReferenceRuleActionOverrideActionToUseCaptchaArgs> captcha;

    /**
     * @return Require CAPTCHA verification. See below.
     * 
     */
    public Optional<Output<WebAclRuleGroupAssociationRuleGroupReferenceRuleActionOverrideActionToUseCaptchaArgs>> captcha() {
        return Optional.ofNullable(this.captcha);
    }

    /**
     * Require challenge verification. See below.
     * 
     */
    @Import(name="challenge")
    private @Nullable Output<WebAclRuleGroupAssociationRuleGroupReferenceRuleActionOverrideActionToUseChallengeArgs> challenge;

    /**
     * @return Require challenge verification. See below.
     * 
     */
    public Optional<Output<WebAclRuleGroupAssociationRuleGroupReferenceRuleActionOverrideActionToUseChallengeArgs>> challenge() {
        return Optional.ofNullable(this.challenge);
    }

    /**
     * Count the request without taking action. See below.
     * 
     */
    @Import(name="count")
    private @Nullable Output<WebAclRuleGroupAssociationRuleGroupReferenceRuleActionOverrideActionToUseCountArgs> count;

    /**
     * @return Count the request without taking action. See below.
     * 
     */
    public Optional<Output<WebAclRuleGroupAssociationRuleGroupReferenceRuleActionOverrideActionToUseCountArgs>> count() {
        return Optional.ofNullable(this.count);
    }

    private WebAclRuleGroupAssociationRuleGroupReferenceRuleActionOverrideActionToUseArgs() {}

    private WebAclRuleGroupAssociationRuleGroupReferenceRuleActionOverrideActionToUseArgs(WebAclRuleGroupAssociationRuleGroupReferenceRuleActionOverrideActionToUseArgs $) {
        this.allow = $.allow;
        this.block = $.block;
        this.captcha = $.captcha;
        this.challenge = $.challenge;
        this.count = $.count;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WebAclRuleGroupAssociationRuleGroupReferenceRuleActionOverrideActionToUseArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WebAclRuleGroupAssociationRuleGroupReferenceRuleActionOverrideActionToUseArgs $;

        public Builder() {
            $ = new WebAclRuleGroupAssociationRuleGroupReferenceRuleActionOverrideActionToUseArgs();
        }

        public Builder(WebAclRuleGroupAssociationRuleGroupReferenceRuleActionOverrideActionToUseArgs defaults) {
            $ = new WebAclRuleGroupAssociationRuleGroupReferenceRuleActionOverrideActionToUseArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allow Allow the request. See below.
         * 
         * @return builder
         * 
         */
        public Builder allow(@Nullable Output<WebAclRuleGroupAssociationRuleGroupReferenceRuleActionOverrideActionToUseAllowArgs> allow) {
            $.allow = allow;
            return this;
        }

        /**
         * @param allow Allow the request. See below.
         * 
         * @return builder
         * 
         */
        public Builder allow(WebAclRuleGroupAssociationRuleGroupReferenceRuleActionOverrideActionToUseAllowArgs allow) {
            return allow(Output.of(allow));
        }

        /**
         * @param block Block the request. See below.
         * 
         * @return builder
         * 
         */
        public Builder block(@Nullable Output<WebAclRuleGroupAssociationRuleGroupReferenceRuleActionOverrideActionToUseBlockArgs> block) {
            $.block = block;
            return this;
        }

        /**
         * @param block Block the request. See below.
         * 
         * @return builder
         * 
         */
        public Builder block(WebAclRuleGroupAssociationRuleGroupReferenceRuleActionOverrideActionToUseBlockArgs block) {
            return block(Output.of(block));
        }

        /**
         * @param captcha Require CAPTCHA verification. See below.
         * 
         * @return builder
         * 
         */
        public Builder captcha(@Nullable Output<WebAclRuleGroupAssociationRuleGroupReferenceRuleActionOverrideActionToUseCaptchaArgs> captcha) {
            $.captcha = captcha;
            return this;
        }

        /**
         * @param captcha Require CAPTCHA verification. See below.
         * 
         * @return builder
         * 
         */
        public Builder captcha(WebAclRuleGroupAssociationRuleGroupReferenceRuleActionOverrideActionToUseCaptchaArgs captcha) {
            return captcha(Output.of(captcha));
        }

        /**
         * @param challenge Require challenge verification. See below.
         * 
         * @return builder
         * 
         */
        public Builder challenge(@Nullable Output<WebAclRuleGroupAssociationRuleGroupReferenceRuleActionOverrideActionToUseChallengeArgs> challenge) {
            $.challenge = challenge;
            return this;
        }

        /**
         * @param challenge Require challenge verification. See below.
         * 
         * @return builder
         * 
         */
        public Builder challenge(WebAclRuleGroupAssociationRuleGroupReferenceRuleActionOverrideActionToUseChallengeArgs challenge) {
            return challenge(Output.of(challenge));
        }

        /**
         * @param count Count the request without taking action. See below.
         * 
         * @return builder
         * 
         */
        public Builder count(@Nullable Output<WebAclRuleGroupAssociationRuleGroupReferenceRuleActionOverrideActionToUseCountArgs> count) {
            $.count = count;
            return this;
        }

        /**
         * @param count Count the request without taking action. See below.
         * 
         * @return builder
         * 
         */
        public Builder count(WebAclRuleGroupAssociationRuleGroupReferenceRuleActionOverrideActionToUseCountArgs count) {
            return count(Output.of(count));
        }

        public WebAclRuleGroupAssociationRuleGroupReferenceRuleActionOverrideActionToUseArgs build() {
            return $;
        }
    }

}
