// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.eks.outputs;

import com.pulumi.aws.eks.outputs.GetNodeGroupLaunchTemplate;
import com.pulumi.aws.eks.outputs.GetNodeGroupRemoteAccess;
import com.pulumi.aws.eks.outputs.GetNodeGroupResource;
import com.pulumi.aws.eks.outputs.GetNodeGroupScalingConfig;
import com.pulumi.aws.eks.outputs.GetNodeGroupTaint;
import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetNodeGroupResult {
    /**
     * @return Type of Amazon Machine Image (AMI) associated with the EKS Node Group.
     * 
     */
    private @Nullable String amiType;
    /**
     * @return ARN of the EKS Node Group.
     * 
     */
    private @Nullable String arn;
    /**
     * @return Type of capacity associated with the EKS Node Group. Valid values: `ON_DEMAND`, `SPOT`.
     * 
     */
    private @Nullable String capacityType;
    private String clusterName;
    /**
     * @return Disk size in GiB for worker nodes.
     * 
     */
    private @Nullable Integer diskSize;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private @Nullable String id;
    /**
     * @return Set of instance types associated with the EKS Node Group.
     * 
     */
    private @Nullable List<String> instanceTypes;
    /**
     * @return Key-value map of Kubernetes labels. Only labels that are applied with the EKS API are managed by this argument. Other Kubernetes labels applied to the EKS Node Group will not be managed.
     * 
     */
    private @Nullable Map<String,String> labels;
    /**
     * @return Nested attribute containing information about the launch template used to create the EKS Node Group.
     * 
     */
    private @Nullable List<GetNodeGroupLaunchTemplate> launchTemplates;
    private String nodeGroupName;
    /**
     * @return ARN of the IAM Role that provides permissions for the EKS Node Group.
     * 
     */
    private @Nullable String nodeRoleArn;
    /**
     * @return AMI version of the EKS Node Group.
     * 
     */
    private @Nullable String releaseVersion;
    /**
     * @return Configuration block with remote access settings.
     * 
     */
    private @Nullable List<GetNodeGroupRemoteAccess> remoteAccesses;
    /**
     * @return List of objects containing information about underlying resources.
     * 
     */
    private @Nullable List<GetNodeGroupResource> resources;
    /**
     * @return Configuration block with scaling settings.
     * 
     */
    private @Nullable List<GetNodeGroupScalingConfig> scalingConfigs;
    /**
     * @return Status of the EKS Node Group.
     * 
     */
    private @Nullable String status;
    /**
     * @return Identifiers of EC2 Subnets to associate with the EKS Node Group.
     * 
     */
    private @Nullable List<String> subnetIds;
    /**
     * @return Key-value map of resource tags.
     * 
     */
    private @Nullable Map<String,String> tags;
    /**
     * @return List of objects containing information about taints applied to the nodes in the EKS Node Group.
     * 
     */
    private @Nullable List<GetNodeGroupTaint> taints;
    /**
     * @return Kubernetes version.
     * 
     */
    private @Nullable String version;

    private GetNodeGroupResult() {}
    /**
     * @return Type of Amazon Machine Image (AMI) associated with the EKS Node Group.
     * 
     */
    public Optional<String> amiType() {
        return Optional.ofNullable(this.amiType);
    }
    /**
     * @return ARN of the EKS Node Group.
     * 
     */
    public Optional<String> arn() {
        return Optional.ofNullable(this.arn);
    }
    /**
     * @return Type of capacity associated with the EKS Node Group. Valid values: `ON_DEMAND`, `SPOT`.
     * 
     */
    public Optional<String> capacityType() {
        return Optional.ofNullable(this.capacityType);
    }
    public String clusterName() {
        return this.clusterName;
    }
    /**
     * @return Disk size in GiB for worker nodes.
     * 
     */
    public Optional<Integer> diskSize() {
        return Optional.ofNullable(this.diskSize);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Set of instance types associated with the EKS Node Group.
     * 
     */
    public List<String> instanceTypes() {
        return this.instanceTypes == null ? List.of() : this.instanceTypes;
    }
    /**
     * @return Key-value map of Kubernetes labels. Only labels that are applied with the EKS API are managed by this argument. Other Kubernetes labels applied to the EKS Node Group will not be managed.
     * 
     */
    public Map<String,String> labels() {
        return this.labels == null ? Map.of() : this.labels;
    }
    /**
     * @return Nested attribute containing information about the launch template used to create the EKS Node Group.
     * 
     */
    public List<GetNodeGroupLaunchTemplate> launchTemplates() {
        return this.launchTemplates == null ? List.of() : this.launchTemplates;
    }
    public String nodeGroupName() {
        return this.nodeGroupName;
    }
    /**
     * @return ARN of the IAM Role that provides permissions for the EKS Node Group.
     * 
     */
    public Optional<String> nodeRoleArn() {
        return Optional.ofNullable(this.nodeRoleArn);
    }
    /**
     * @return AMI version of the EKS Node Group.
     * 
     */
    public Optional<String> releaseVersion() {
        return Optional.ofNullable(this.releaseVersion);
    }
    /**
     * @return Configuration block with remote access settings.
     * 
     */
    public List<GetNodeGroupRemoteAccess> remoteAccesses() {
        return this.remoteAccesses == null ? List.of() : this.remoteAccesses;
    }
    /**
     * @return List of objects containing information about underlying resources.
     * 
     */
    public List<GetNodeGroupResource> resources() {
        return this.resources == null ? List.of() : this.resources;
    }
    /**
     * @return Configuration block with scaling settings.
     * 
     */
    public List<GetNodeGroupScalingConfig> scalingConfigs() {
        return this.scalingConfigs == null ? List.of() : this.scalingConfigs;
    }
    /**
     * @return Status of the EKS Node Group.
     * 
     */
    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }
    /**
     * @return Identifiers of EC2 Subnets to associate with the EKS Node Group.
     * 
     */
    public List<String> subnetIds() {
        return this.subnetIds == null ? List.of() : this.subnetIds;
    }
    /**
     * @return Key-value map of resource tags.
     * 
     */
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * @return List of objects containing information about taints applied to the nodes in the EKS Node Group.
     * 
     */
    public List<GetNodeGroupTaint> taints() {
        return this.taints == null ? List.of() : this.taints;
    }
    /**
     * @return Kubernetes version.
     * 
     */
    public Optional<String> version() {
        return Optional.ofNullable(this.version);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNodeGroupResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String amiType;
        private @Nullable String arn;
        private @Nullable String capacityType;
        private String clusterName;
        private @Nullable Integer diskSize;
        private @Nullable String id;
        private @Nullable List<String> instanceTypes;
        private @Nullable Map<String,String> labels;
        private @Nullable List<GetNodeGroupLaunchTemplate> launchTemplates;
        private String nodeGroupName;
        private @Nullable String nodeRoleArn;
        private @Nullable String releaseVersion;
        private @Nullable List<GetNodeGroupRemoteAccess> remoteAccesses;
        private @Nullable List<GetNodeGroupResource> resources;
        private @Nullable List<GetNodeGroupScalingConfig> scalingConfigs;
        private @Nullable String status;
        private @Nullable List<String> subnetIds;
        private @Nullable Map<String,String> tags;
        private @Nullable List<GetNodeGroupTaint> taints;
        private @Nullable String version;
        public Builder() {}
        public Builder(GetNodeGroupResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.amiType = defaults.amiType;
    	      this.arn = defaults.arn;
    	      this.capacityType = defaults.capacityType;
    	      this.clusterName = defaults.clusterName;
    	      this.diskSize = defaults.diskSize;
    	      this.id = defaults.id;
    	      this.instanceTypes = defaults.instanceTypes;
    	      this.labels = defaults.labels;
    	      this.launchTemplates = defaults.launchTemplates;
    	      this.nodeGroupName = defaults.nodeGroupName;
    	      this.nodeRoleArn = defaults.nodeRoleArn;
    	      this.releaseVersion = defaults.releaseVersion;
    	      this.remoteAccesses = defaults.remoteAccesses;
    	      this.resources = defaults.resources;
    	      this.scalingConfigs = defaults.scalingConfigs;
    	      this.status = defaults.status;
    	      this.subnetIds = defaults.subnetIds;
    	      this.tags = defaults.tags;
    	      this.taints = defaults.taints;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder amiType(@Nullable String amiType) {
            this.amiType = amiType;
            return this;
        }
        @CustomType.Setter
        public Builder arn(@Nullable String arn) {
            this.arn = arn;
            return this;
        }
        @CustomType.Setter
        public Builder capacityType(@Nullable String capacityType) {
            this.capacityType = capacityType;
            return this;
        }
        @CustomType.Setter
        public Builder clusterName(String clusterName) {
            this.clusterName = Objects.requireNonNull(clusterName);
            return this;
        }
        @CustomType.Setter
        public Builder diskSize(@Nullable Integer diskSize) {
            this.diskSize = diskSize;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder instanceTypes(@Nullable List<String> instanceTypes) {
            this.instanceTypes = instanceTypes;
            return this;
        }
        public Builder instanceTypes(String... instanceTypes) {
            return instanceTypes(List.of(instanceTypes));
        }
        @CustomType.Setter
        public Builder labels(@Nullable Map<String,String> labels) {
            this.labels = labels;
            return this;
        }
        @CustomType.Setter
        public Builder launchTemplates(@Nullable List<GetNodeGroupLaunchTemplate> launchTemplates) {
            this.launchTemplates = launchTemplates;
            return this;
        }
        public Builder launchTemplates(GetNodeGroupLaunchTemplate... launchTemplates) {
            return launchTemplates(List.of(launchTemplates));
        }
        @CustomType.Setter
        public Builder nodeGroupName(String nodeGroupName) {
            this.nodeGroupName = Objects.requireNonNull(nodeGroupName);
            return this;
        }
        @CustomType.Setter
        public Builder nodeRoleArn(@Nullable String nodeRoleArn) {
            this.nodeRoleArn = nodeRoleArn;
            return this;
        }
        @CustomType.Setter
        public Builder releaseVersion(@Nullable String releaseVersion) {
            this.releaseVersion = releaseVersion;
            return this;
        }
        @CustomType.Setter
        public Builder remoteAccesses(@Nullable List<GetNodeGroupRemoteAccess> remoteAccesses) {
            this.remoteAccesses = remoteAccesses;
            return this;
        }
        public Builder remoteAccesses(GetNodeGroupRemoteAccess... remoteAccesses) {
            return remoteAccesses(List.of(remoteAccesses));
        }
        @CustomType.Setter
        public Builder resources(@Nullable List<GetNodeGroupResource> resources) {
            this.resources = resources;
            return this;
        }
        public Builder resources(GetNodeGroupResource... resources) {
            return resources(List.of(resources));
        }
        @CustomType.Setter
        public Builder scalingConfigs(@Nullable List<GetNodeGroupScalingConfig> scalingConfigs) {
            this.scalingConfigs = scalingConfigs;
            return this;
        }
        public Builder scalingConfigs(GetNodeGroupScalingConfig... scalingConfigs) {
            return scalingConfigs(List.of(scalingConfigs));
        }
        @CustomType.Setter
        public Builder status(@Nullable String status) {
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder subnetIds(@Nullable List<String> subnetIds) {
            this.subnetIds = subnetIds;
            return this;
        }
        public Builder subnetIds(String... subnetIds) {
            return subnetIds(List.of(subnetIds));
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder taints(@Nullable List<GetNodeGroupTaint> taints) {
            this.taints = taints;
            return this;
        }
        public Builder taints(GetNodeGroupTaint... taints) {
            return taints(List.of(taints));
        }
        @CustomType.Setter
        public Builder version(@Nullable String version) {
            this.version = version;
            return this;
        }
        public GetNodeGroupResult build() {
            final var o = new GetNodeGroupResult();
            o.amiType = amiType;
            o.arn = arn;
            o.capacityType = capacityType;
            o.clusterName = clusterName;
            o.diskSize = diskSize;
            o.id = id;
            o.instanceTypes = instanceTypes;
            o.labels = labels;
            o.launchTemplates = launchTemplates;
            o.nodeGroupName = nodeGroupName;
            o.nodeRoleArn = nodeRoleArn;
            o.releaseVersion = releaseVersion;
            o.remoteAccesses = remoteAccesses;
            o.resources = resources;
            o.scalingConfigs = scalingConfigs;
            o.status = status;
            o.subnetIds = subnetIds;
            o.tags = tags;
            o.taints = taints;
            o.version = version;
            return o;
        }
    }
}
