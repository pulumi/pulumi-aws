// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.timestreamwrite.outputs;

import com.pulumi.aws.timestreamwrite.outputs.GetTableMagneticStoreWriteProperty;
import com.pulumi.aws.timestreamwrite.outputs.GetTableRetentionProperty;
import com.pulumi.aws.timestreamwrite.outputs.GetTableSchema;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetTableResult {
    /**
     * @return ARN that uniquely identifies the table.
     * 
     */
    private String arn;
    /**
     * @return Time that table was created.
     * 
     */
    private String creationTime;
    /**
     * @return Name of database.
     * 
     */
    private String databaseName;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Last time table was updated.
     * 
     */
    private String lastUpdatedTime;
    /**
     * @return Object containing the following attributes to desribe magnetic store writes.
     * 
     */
    private List<GetTableMagneticStoreWriteProperty> magneticStoreWriteProperties;
    /**
     * @return Name of the table.
     * 
     */
    private String name;
    /**
     * @return Object containing the following attributes to describe the retention duration for the memory and magnetic stores.
     * 
     */
    private List<GetTableRetentionProperty> retentionProperties;
    /**
     * @return Object containing the following attributes to describe the schema of the table.
     * 
     */
    private List<GetTableSchema> schemas;
    /**
     * @return Current state of table.
     * 
     */
    private String tableStatus;

    private GetTableResult() {}
    /**
     * @return ARN that uniquely identifies the table.
     * 
     */
    public String arn() {
        return this.arn;
    }
    /**
     * @return Time that table was created.
     * 
     */
    public String creationTime() {
        return this.creationTime;
    }
    /**
     * @return Name of database.
     * 
     */
    public String databaseName() {
        return this.databaseName;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Last time table was updated.
     * 
     */
    public String lastUpdatedTime() {
        return this.lastUpdatedTime;
    }
    /**
     * @return Object containing the following attributes to desribe magnetic store writes.
     * 
     */
    public List<GetTableMagneticStoreWriteProperty> magneticStoreWriteProperties() {
        return this.magneticStoreWriteProperties;
    }
    /**
     * @return Name of the table.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Object containing the following attributes to describe the retention duration for the memory and magnetic stores.
     * 
     */
    public List<GetTableRetentionProperty> retentionProperties() {
        return this.retentionProperties;
    }
    /**
     * @return Object containing the following attributes to describe the schema of the table.
     * 
     */
    public List<GetTableSchema> schemas() {
        return this.schemas;
    }
    /**
     * @return Current state of table.
     * 
     */
    public String tableStatus() {
        return this.tableStatus;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTableResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String arn;
        private String creationTime;
        private String databaseName;
        private String id;
        private String lastUpdatedTime;
        private List<GetTableMagneticStoreWriteProperty> magneticStoreWriteProperties;
        private String name;
        private List<GetTableRetentionProperty> retentionProperties;
        private List<GetTableSchema> schemas;
        private String tableStatus;
        public Builder() {}
        public Builder(GetTableResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.creationTime = defaults.creationTime;
    	      this.databaseName = defaults.databaseName;
    	      this.id = defaults.id;
    	      this.lastUpdatedTime = defaults.lastUpdatedTime;
    	      this.magneticStoreWriteProperties = defaults.magneticStoreWriteProperties;
    	      this.name = defaults.name;
    	      this.retentionProperties = defaults.retentionProperties;
    	      this.schemas = defaults.schemas;
    	      this.tableStatus = defaults.tableStatus;
        }

        @CustomType.Setter
        public Builder arn(String arn) {
            if (arn == null) {
              throw new MissingRequiredPropertyException("GetTableResult", "arn");
            }
            this.arn = arn;
            return this;
        }
        @CustomType.Setter
        public Builder creationTime(String creationTime) {
            if (creationTime == null) {
              throw new MissingRequiredPropertyException("GetTableResult", "creationTime");
            }
            this.creationTime = creationTime;
            return this;
        }
        @CustomType.Setter
        public Builder databaseName(String databaseName) {
            if (databaseName == null) {
              throw new MissingRequiredPropertyException("GetTableResult", "databaseName");
            }
            this.databaseName = databaseName;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetTableResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder lastUpdatedTime(String lastUpdatedTime) {
            if (lastUpdatedTime == null) {
              throw new MissingRequiredPropertyException("GetTableResult", "lastUpdatedTime");
            }
            this.lastUpdatedTime = lastUpdatedTime;
            return this;
        }
        @CustomType.Setter
        public Builder magneticStoreWriteProperties(List<GetTableMagneticStoreWriteProperty> magneticStoreWriteProperties) {
            if (magneticStoreWriteProperties == null) {
              throw new MissingRequiredPropertyException("GetTableResult", "magneticStoreWriteProperties");
            }
            this.magneticStoreWriteProperties = magneticStoreWriteProperties;
            return this;
        }
        public Builder magneticStoreWriteProperties(GetTableMagneticStoreWriteProperty... magneticStoreWriteProperties) {
            return magneticStoreWriteProperties(List.of(magneticStoreWriteProperties));
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetTableResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder retentionProperties(List<GetTableRetentionProperty> retentionProperties) {
            if (retentionProperties == null) {
              throw new MissingRequiredPropertyException("GetTableResult", "retentionProperties");
            }
            this.retentionProperties = retentionProperties;
            return this;
        }
        public Builder retentionProperties(GetTableRetentionProperty... retentionProperties) {
            return retentionProperties(List.of(retentionProperties));
        }
        @CustomType.Setter
        public Builder schemas(List<GetTableSchema> schemas) {
            if (schemas == null) {
              throw new MissingRequiredPropertyException("GetTableResult", "schemas");
            }
            this.schemas = schemas;
            return this;
        }
        public Builder schemas(GetTableSchema... schemas) {
            return schemas(List.of(schemas));
        }
        @CustomType.Setter
        public Builder tableStatus(String tableStatus) {
            if (tableStatus == null) {
              throw new MissingRequiredPropertyException("GetTableResult", "tableStatus");
            }
            this.tableStatus = tableStatus;
            return this;
        }
        public GetTableResult build() {
            final var _resultValue = new GetTableResult();
            _resultValue.arn = arn;
            _resultValue.creationTime = creationTime;
            _resultValue.databaseName = databaseName;
            _resultValue.id = id;
            _resultValue.lastUpdatedTime = lastUpdatedTime;
            _resultValue.magneticStoreWriteProperties = magneticStoreWriteProperties;
            _resultValue.name = name;
            _resultValue.retentionProperties = retentionProperties;
            _resultValue.schemas = schemas;
            _resultValue.tableStatus = tableStatus;
            return _resultValue;
        }
    }
}
