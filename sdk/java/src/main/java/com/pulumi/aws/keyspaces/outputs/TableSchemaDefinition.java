// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.keyspaces.outputs;

import com.pulumi.aws.keyspaces.outputs.TableSchemaDefinitionClusteringKey;
import com.pulumi.aws.keyspaces.outputs.TableSchemaDefinitionColumn;
import com.pulumi.aws.keyspaces.outputs.TableSchemaDefinitionPartitionKey;
import com.pulumi.aws.keyspaces.outputs.TableSchemaDefinitionStaticColumn;
import com.pulumi.core.annotations.CustomType;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class TableSchemaDefinition {
    /**
     * @return The columns that are part of the clustering key of the table.
     * 
     */
    private @Nullable List<TableSchemaDefinitionClusteringKey> clusteringKeys;
    /**
     * @return The regular columns of the table.
     * 
     */
    private List<TableSchemaDefinitionColumn> columns;
    /**
     * @return The columns that are part of the partition key of the table .
     * 
     */
    private List<TableSchemaDefinitionPartitionKey> partitionKeys;
    /**
     * @return The columns that have been defined as `STATIC`. Static columns store values that are shared by all rows in the same partition.
     * 
     */
    private @Nullable List<TableSchemaDefinitionStaticColumn> staticColumns;

    private TableSchemaDefinition() {}
    /**
     * @return The columns that are part of the clustering key of the table.
     * 
     */
    public List<TableSchemaDefinitionClusteringKey> clusteringKeys() {
        return this.clusteringKeys == null ? List.of() : this.clusteringKeys;
    }
    /**
     * @return The regular columns of the table.
     * 
     */
    public List<TableSchemaDefinitionColumn> columns() {
        return this.columns;
    }
    /**
     * @return The columns that are part of the partition key of the table .
     * 
     */
    public List<TableSchemaDefinitionPartitionKey> partitionKeys() {
        return this.partitionKeys;
    }
    /**
     * @return The columns that have been defined as `STATIC`. Static columns store values that are shared by all rows in the same partition.
     * 
     */
    public List<TableSchemaDefinitionStaticColumn> staticColumns() {
        return this.staticColumns == null ? List.of() : this.staticColumns;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TableSchemaDefinition defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<TableSchemaDefinitionClusteringKey> clusteringKeys;
        private List<TableSchemaDefinitionColumn> columns;
        private List<TableSchemaDefinitionPartitionKey> partitionKeys;
        private @Nullable List<TableSchemaDefinitionStaticColumn> staticColumns;
        public Builder() {}
        public Builder(TableSchemaDefinition defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clusteringKeys = defaults.clusteringKeys;
    	      this.columns = defaults.columns;
    	      this.partitionKeys = defaults.partitionKeys;
    	      this.staticColumns = defaults.staticColumns;
        }

        @CustomType.Setter
        public Builder clusteringKeys(@Nullable List<TableSchemaDefinitionClusteringKey> clusteringKeys) {
            this.clusteringKeys = clusteringKeys;
            return this;
        }
        public Builder clusteringKeys(TableSchemaDefinitionClusteringKey... clusteringKeys) {
            return clusteringKeys(List.of(clusteringKeys));
        }
        @CustomType.Setter
        public Builder columns(List<TableSchemaDefinitionColumn> columns) {
            this.columns = Objects.requireNonNull(columns);
            return this;
        }
        public Builder columns(TableSchemaDefinitionColumn... columns) {
            return columns(List.of(columns));
        }
        @CustomType.Setter
        public Builder partitionKeys(List<TableSchemaDefinitionPartitionKey> partitionKeys) {
            this.partitionKeys = Objects.requireNonNull(partitionKeys);
            return this;
        }
        public Builder partitionKeys(TableSchemaDefinitionPartitionKey... partitionKeys) {
            return partitionKeys(List.of(partitionKeys));
        }
        @CustomType.Setter
        public Builder staticColumns(@Nullable List<TableSchemaDefinitionStaticColumn> staticColumns) {
            this.staticColumns = staticColumns;
            return this;
        }
        public Builder staticColumns(TableSchemaDefinitionStaticColumn... staticColumns) {
            return staticColumns(List.of(staticColumns));
        }
        public TableSchemaDefinition build() {
            final var o = new TableSchemaDefinition();
            o.clusteringKeys = clusteringKeys;
            o.columns = columns;
            o.partitionKeys = partitionKeys;
            o.staticColumns = staticColumns;
            return o;
        }
    }
}
