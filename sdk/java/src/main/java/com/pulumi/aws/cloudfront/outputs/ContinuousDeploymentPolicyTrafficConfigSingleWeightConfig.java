// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.cloudfront.outputs;

import com.pulumi.aws.cloudfront.outputs.ContinuousDeploymentPolicyTrafficConfigSingleWeightConfigSessionStickinessConfig;
import com.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ContinuousDeploymentPolicyTrafficConfigSingleWeightConfig {
    /**
     * @return Session stickiness provides the ability to define multiple requests from a single viewer as a single session. This prevents the potentially inconsistent experience of sending some of a given user&#39;s requests to the staging distribution, while others are sent to the primary distribution. Define the session duration using TTL values. See `session_stickiness_config`.
     * 
     */
    private @Nullable ContinuousDeploymentPolicyTrafficConfigSingleWeightConfigSessionStickinessConfig sessionStickinessConfig;
    /**
     * @return The percentage of traffic to send to a staging distribution, expressed as a decimal number between `0` and `.15`.
     * 
     */
    private Double weight;

    private ContinuousDeploymentPolicyTrafficConfigSingleWeightConfig() {}
    /**
     * @return Session stickiness provides the ability to define multiple requests from a single viewer as a single session. This prevents the potentially inconsistent experience of sending some of a given user&#39;s requests to the staging distribution, while others are sent to the primary distribution. Define the session duration using TTL values. See `session_stickiness_config`.
     * 
     */
    public Optional<ContinuousDeploymentPolicyTrafficConfigSingleWeightConfigSessionStickinessConfig> sessionStickinessConfig() {
        return Optional.ofNullable(this.sessionStickinessConfig);
    }
    /**
     * @return The percentage of traffic to send to a staging distribution, expressed as a decimal number between `0` and `.15`.
     * 
     */
    public Double weight() {
        return this.weight;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ContinuousDeploymentPolicyTrafficConfigSingleWeightConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable ContinuousDeploymentPolicyTrafficConfigSingleWeightConfigSessionStickinessConfig sessionStickinessConfig;
        private Double weight;
        public Builder() {}
        public Builder(ContinuousDeploymentPolicyTrafficConfigSingleWeightConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.sessionStickinessConfig = defaults.sessionStickinessConfig;
    	      this.weight = defaults.weight;
        }

        @CustomType.Setter
        public Builder sessionStickinessConfig(@Nullable ContinuousDeploymentPolicyTrafficConfigSingleWeightConfigSessionStickinessConfig sessionStickinessConfig) {
            this.sessionStickinessConfig = sessionStickinessConfig;
            return this;
        }
        @CustomType.Setter
        public Builder weight(Double weight) {
            this.weight = Objects.requireNonNull(weight);
            return this;
        }
        public ContinuousDeploymentPolicyTrafficConfigSingleWeightConfig build() {
            final var _resultValue = new ContinuousDeploymentPolicyTrafficConfigSingleWeightConfig();
            _resultValue.sessionStickinessConfig = sessionStickinessConfig;
            _resultValue.weight = weight;
            return _resultValue;
        }
    }
}
