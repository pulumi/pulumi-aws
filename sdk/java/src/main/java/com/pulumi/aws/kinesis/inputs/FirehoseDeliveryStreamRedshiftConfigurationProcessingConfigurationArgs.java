// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.kinesis.inputs;

import com.pulumi.aws.kinesis.inputs.FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationArgs Empty = new FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationArgs();

    /**
     * Enables or disables data processing.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Enables or disables data processing.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * Specifies the data processors as multiple blocks. See `processors` block below for details.
     * 
     */
    @Import(name="processors")
    private @Nullable Output<List<FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorArgs>> processors;

    /**
     * @return Specifies the data processors as multiple blocks. See `processors` block below for details.
     * 
     */
    public Optional<Output<List<FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorArgs>>> processors() {
        return Optional.ofNullable(this.processors);
    }

    private FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationArgs() {}

    private FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationArgs(FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationArgs $) {
        this.enabled = $.enabled;
        this.processors = $.processors;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationArgs $;

        public Builder() {
            $ = new FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationArgs();
        }

        public Builder(FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationArgs defaults) {
            $ = new FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param enabled Enables or disables data processing.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Enables or disables data processing.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param processors Specifies the data processors as multiple blocks. See `processors` block below for details.
         * 
         * @return builder
         * 
         */
        public Builder processors(@Nullable Output<List<FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorArgs>> processors) {
            $.processors = processors;
            return this;
        }

        /**
         * @param processors Specifies the data processors as multiple blocks. See `processors` block below for details.
         * 
         * @return builder
         * 
         */
        public Builder processors(List<FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorArgs> processors) {
            return processors(Output.of(processors));
        }

        /**
         * @param processors Specifies the data processors as multiple blocks. See `processors` block below for details.
         * 
         * @return builder
         * 
         */
        public Builder processors(FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorArgs... processors) {
            return processors(List.of(processors));
        }

        public FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationArgs build() {
            return $;
        }
    }

}
