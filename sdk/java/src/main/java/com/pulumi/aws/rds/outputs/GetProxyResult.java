// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.rds.outputs;

import com.pulumi.aws.rds.outputs.GetProxyAuth;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetProxyResult {
    /**
     * @return ARN of the DB Proxy.
     * 
     */
    private @Nullable String arn;
    /**
     * @return Configuration(s) with authorization mechanisms to connect to the associated instance or cluster.
     * 
     */
    private @Nullable List<GetProxyAuth> auths;
    /**
     * @return Whether the proxy includes detailed information about SQL statements in its logs.
     * 
     */
    private @Nullable Boolean debugLogging;
    /**
     * @return Endpoint that you can use to connect to the DB proxy.
     * 
     */
    private @Nullable String endpoint;
    /**
     * @return Kinds of databases that the proxy can connect to.
     * 
     */
    private @Nullable String engineFamily;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private @Nullable String id;
    /**
     * @return Number of seconds a connection to the proxy can have no activity before the proxy drops the client connection.
     * 
     */
    private @Nullable Integer idleClientTimeout;
    private String name;
    /**
     * @return Whether Transport Layer Security (TLS) encryption is required for connections to the proxy.
     * 
     */
    private @Nullable Boolean requireTls;
    /**
     * @return ARN for the IAM role that the proxy uses to access Amazon Secrets Manager.
     * 
     */
    private @Nullable String roleArn;
    /**
     * @return Provides the VPC ID of the DB proxy.
     * 
     */
    private @Nullable String vpcId;
    /**
     * @return Provides a list of VPC security groups that the proxy belongs to.
     * 
     */
    private @Nullable List<String> vpcSecurityGroupIds;
    /**
     * @return EC2 subnet IDs for the proxy.
     * 
     */
    private @Nullable List<String> vpcSubnetIds;

    private GetProxyResult() {}
    /**
     * @return ARN of the DB Proxy.
     * 
     */
    public Optional<String> arn() {
        return Optional.ofNullable(this.arn);
    }
    /**
     * @return Configuration(s) with authorization mechanisms to connect to the associated instance or cluster.
     * 
     */
    public List<GetProxyAuth> auths() {
        return this.auths == null ? List.of() : this.auths;
    }
    /**
     * @return Whether the proxy includes detailed information about SQL statements in its logs.
     * 
     */
    public Optional<Boolean> debugLogging() {
        return Optional.ofNullable(this.debugLogging);
    }
    /**
     * @return Endpoint that you can use to connect to the DB proxy.
     * 
     */
    public Optional<String> endpoint() {
        return Optional.ofNullable(this.endpoint);
    }
    /**
     * @return Kinds of databases that the proxy can connect to.
     * 
     */
    public Optional<String> engineFamily() {
        return Optional.ofNullable(this.engineFamily);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Number of seconds a connection to the proxy can have no activity before the proxy drops the client connection.
     * 
     */
    public Optional<Integer> idleClientTimeout() {
        return Optional.ofNullable(this.idleClientTimeout);
    }
    public String name() {
        return this.name;
    }
    /**
     * @return Whether Transport Layer Security (TLS) encryption is required for connections to the proxy.
     * 
     */
    public Optional<Boolean> requireTls() {
        return Optional.ofNullable(this.requireTls);
    }
    /**
     * @return ARN for the IAM role that the proxy uses to access Amazon Secrets Manager.
     * 
     */
    public Optional<String> roleArn() {
        return Optional.ofNullable(this.roleArn);
    }
    /**
     * @return Provides the VPC ID of the DB proxy.
     * 
     */
    public Optional<String> vpcId() {
        return Optional.ofNullable(this.vpcId);
    }
    /**
     * @return Provides a list of VPC security groups that the proxy belongs to.
     * 
     */
    public List<String> vpcSecurityGroupIds() {
        return this.vpcSecurityGroupIds == null ? List.of() : this.vpcSecurityGroupIds;
    }
    /**
     * @return EC2 subnet IDs for the proxy.
     * 
     */
    public List<String> vpcSubnetIds() {
        return this.vpcSubnetIds == null ? List.of() : this.vpcSubnetIds;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetProxyResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String arn;
        private @Nullable List<GetProxyAuth> auths;
        private @Nullable Boolean debugLogging;
        private @Nullable String endpoint;
        private @Nullable String engineFamily;
        private @Nullable String id;
        private @Nullable Integer idleClientTimeout;
        private String name;
        private @Nullable Boolean requireTls;
        private @Nullable String roleArn;
        private @Nullable String vpcId;
        private @Nullable List<String> vpcSecurityGroupIds;
        private @Nullable List<String> vpcSubnetIds;
        public Builder() {}
        public Builder(GetProxyResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.auths = defaults.auths;
    	      this.debugLogging = defaults.debugLogging;
    	      this.endpoint = defaults.endpoint;
    	      this.engineFamily = defaults.engineFamily;
    	      this.id = defaults.id;
    	      this.idleClientTimeout = defaults.idleClientTimeout;
    	      this.name = defaults.name;
    	      this.requireTls = defaults.requireTls;
    	      this.roleArn = defaults.roleArn;
    	      this.vpcId = defaults.vpcId;
    	      this.vpcSecurityGroupIds = defaults.vpcSecurityGroupIds;
    	      this.vpcSubnetIds = defaults.vpcSubnetIds;
        }

        @CustomType.Setter
        public Builder arn(@Nullable String arn) {
            this.arn = arn;
            return this;
        }
        @CustomType.Setter
        public Builder auths(@Nullable List<GetProxyAuth> auths) {
            this.auths = auths;
            return this;
        }
        public Builder auths(GetProxyAuth... auths) {
            return auths(List.of(auths));
        }
        @CustomType.Setter
        public Builder debugLogging(@Nullable Boolean debugLogging) {
            this.debugLogging = debugLogging;
            return this;
        }
        @CustomType.Setter
        public Builder endpoint(@Nullable String endpoint) {
            this.endpoint = endpoint;
            return this;
        }
        @CustomType.Setter
        public Builder engineFamily(@Nullable String engineFamily) {
            this.engineFamily = engineFamily;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder idleClientTimeout(@Nullable Integer idleClientTimeout) {
            this.idleClientTimeout = idleClientTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder requireTls(@Nullable Boolean requireTls) {
            this.requireTls = requireTls;
            return this;
        }
        @CustomType.Setter
        public Builder roleArn(@Nullable String roleArn) {
            this.roleArn = roleArn;
            return this;
        }
        @CustomType.Setter
        public Builder vpcId(@Nullable String vpcId) {
            this.vpcId = vpcId;
            return this;
        }
        @CustomType.Setter
        public Builder vpcSecurityGroupIds(@Nullable List<String> vpcSecurityGroupIds) {
            this.vpcSecurityGroupIds = vpcSecurityGroupIds;
            return this;
        }
        public Builder vpcSecurityGroupIds(String... vpcSecurityGroupIds) {
            return vpcSecurityGroupIds(List.of(vpcSecurityGroupIds));
        }
        @CustomType.Setter
        public Builder vpcSubnetIds(@Nullable List<String> vpcSubnetIds) {
            this.vpcSubnetIds = vpcSubnetIds;
            return this;
        }
        public Builder vpcSubnetIds(String... vpcSubnetIds) {
            return vpcSubnetIds(List.of(vpcSubnetIds));
        }
        public GetProxyResult build() {
            final var o = new GetProxyResult();
            o.arn = arn;
            o.auths = auths;
            o.debugLogging = debugLogging;
            o.endpoint = endpoint;
            o.engineFamily = engineFamily;
            o.id = id;
            o.idleClientTimeout = idleClientTimeout;
            o.name = name;
            o.requireTls = requireTls;
            o.roleArn = roleArn;
            o.vpcId = vpcId;
            o.vpcSecurityGroupIds = vpcSecurityGroupIds;
            o.vpcSubnetIds = vpcSubnetIds;
            return o;
        }
    }
}
