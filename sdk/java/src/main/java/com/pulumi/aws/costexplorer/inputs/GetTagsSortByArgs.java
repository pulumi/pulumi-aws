// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.costexplorer.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetTagsSortByArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetTagsSortByArgs Empty = new GetTagsSortByArgs();

    /**
     * key that&#39;s used to sort the data. Valid values are: `BlendedCost`,  `UnblendedCost`, `AmortizedCost`, `NetAmortizedCost`, `NetUnblendedCost`, `UsageQuantity`, `NormalizedUsageAmount`.
     * 
     */
    @Import(name="key")
    private @Nullable Output<String> key;

    /**
     * @return key that&#39;s used to sort the data. Valid values are: `BlendedCost`,  `UnblendedCost`, `AmortizedCost`, `NetAmortizedCost`, `NetUnblendedCost`, `UsageQuantity`, `NormalizedUsageAmount`.
     * 
     */
    public Optional<Output<String>> key() {
        return Optional.ofNullable(this.key);
    }

    /**
     * order that&#39;s used to sort the data. Valid values are: `ASCENDING`,  `DESCENDING`.
     * 
     */
    @Import(name="sortOrder")
    private @Nullable Output<String> sortOrder;

    /**
     * @return order that&#39;s used to sort the data. Valid values are: `ASCENDING`,  `DESCENDING`.
     * 
     */
    public Optional<Output<String>> sortOrder() {
        return Optional.ofNullable(this.sortOrder);
    }

    private GetTagsSortByArgs() {}

    private GetTagsSortByArgs(GetTagsSortByArgs $) {
        this.key = $.key;
        this.sortOrder = $.sortOrder;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetTagsSortByArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetTagsSortByArgs $;

        public Builder() {
            $ = new GetTagsSortByArgs();
        }

        public Builder(GetTagsSortByArgs defaults) {
            $ = new GetTagsSortByArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param key key that&#39;s used to sort the data. Valid values are: `BlendedCost`,  `UnblendedCost`, `AmortizedCost`, `NetAmortizedCost`, `NetUnblendedCost`, `UsageQuantity`, `NormalizedUsageAmount`.
         * 
         * @return builder
         * 
         */
        public Builder key(@Nullable Output<String> key) {
            $.key = key;
            return this;
        }

        /**
         * @param key key that&#39;s used to sort the data. Valid values are: `BlendedCost`,  `UnblendedCost`, `AmortizedCost`, `NetAmortizedCost`, `NetUnblendedCost`, `UsageQuantity`, `NormalizedUsageAmount`.
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            return key(Output.of(key));
        }

        /**
         * @param sortOrder order that&#39;s used to sort the data. Valid values are: `ASCENDING`,  `DESCENDING`.
         * 
         * @return builder
         * 
         */
        public Builder sortOrder(@Nullable Output<String> sortOrder) {
            $.sortOrder = sortOrder;
            return this;
        }

        /**
         * @param sortOrder order that&#39;s used to sort the data. Valid values are: `ASCENDING`,  `DESCENDING`.
         * 
         * @return builder
         * 
         */
        public Builder sortOrder(String sortOrder) {
            return sortOrder(Output.of(sortOrder));
        }

        public GetTagsSortByArgs build() {
            return $;
        }
    }

}
