// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.timestreamquery.inputs;

import com.pulumi.aws.timestreamquery.inputs.ScheduledQueryTargetConfigurationTimestreamConfigurationDimensionMappingArgs;
import com.pulumi.aws.timestreamquery.inputs.ScheduledQueryTargetConfigurationTimestreamConfigurationMixedMeasureMappingArgs;
import com.pulumi.aws.timestreamquery.inputs.ScheduledQueryTargetConfigurationTimestreamConfigurationMultiMeasureMappingsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ScheduledQueryTargetConfigurationTimestreamConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final ScheduledQueryTargetConfigurationTimestreamConfigurationArgs Empty = new ScheduledQueryTargetConfigurationTimestreamConfigurationArgs();

    /**
     * Name of Timestream database to which the query result will be written.
     * 
     */
    @Import(name="databaseName", required=true)
    private Output<String> databaseName;

    /**
     * @return Name of Timestream database to which the query result will be written.
     * 
     */
    public Output<String> databaseName() {
        return this.databaseName;
    }

    /**
     * Configuration block for mapping of column(s) from the query result to the dimension in the destination table. See below.
     * 
     */
    @Import(name="dimensionMappings")
    private @Nullable Output<List<ScheduledQueryTargetConfigurationTimestreamConfigurationDimensionMappingArgs>> dimensionMappings;

    /**
     * @return Configuration block for mapping of column(s) from the query result to the dimension in the destination table. See below.
     * 
     */
    public Optional<Output<List<ScheduledQueryTargetConfigurationTimestreamConfigurationDimensionMappingArgs>>> dimensionMappings() {
        return Optional.ofNullable(this.dimensionMappings);
    }

    /**
     * Name of the measure column.
     * 
     */
    @Import(name="measureNameColumn")
    private @Nullable Output<String> measureNameColumn;

    /**
     * @return Name of the measure column.
     * 
     */
    public Optional<Output<String>> measureNameColumn() {
        return Optional.ofNullable(this.measureNameColumn);
    }

    /**
     * Configuration block for how to map measures to multi-measure records. See below.
     * 
     */
    @Import(name="mixedMeasureMappings")
    private @Nullable Output<List<ScheduledQueryTargetConfigurationTimestreamConfigurationMixedMeasureMappingArgs>> mixedMeasureMappings;

    /**
     * @return Configuration block for how to map measures to multi-measure records. See below.
     * 
     */
    public Optional<Output<List<ScheduledQueryTargetConfigurationTimestreamConfigurationMixedMeasureMappingArgs>>> mixedMeasureMappings() {
        return Optional.ofNullable(this.mixedMeasureMappings);
    }

    /**
     * Configuration block for multi-measure mappings. Only one of `mixed_measure_mappings` or `multi_measure_mappings` can be provided. `multi_measure_mappings` can be used to ingest data as multi measures in the derived table. See below.
     * 
     */
    @Import(name="multiMeasureMappings")
    private @Nullable Output<ScheduledQueryTargetConfigurationTimestreamConfigurationMultiMeasureMappingsArgs> multiMeasureMappings;

    /**
     * @return Configuration block for multi-measure mappings. Only one of `mixed_measure_mappings` or `multi_measure_mappings` can be provided. `multi_measure_mappings` can be used to ingest data as multi measures in the derived table. See below.
     * 
     */
    public Optional<Output<ScheduledQueryTargetConfigurationTimestreamConfigurationMultiMeasureMappingsArgs>> multiMeasureMappings() {
        return Optional.ofNullable(this.multiMeasureMappings);
    }

    /**
     * Name of Timestream table that the query result will be written to. The table should be within the same database that is provided in Timestream configuration.
     * 
     */
    @Import(name="tableName", required=true)
    private Output<String> tableName;

    /**
     * @return Name of Timestream table that the query result will be written to. The table should be within the same database that is provided in Timestream configuration.
     * 
     */
    public Output<String> tableName() {
        return this.tableName;
    }

    /**
     * Column from query result that should be used as the time column in destination table. Column type for this should be TIMESTAMP.
     * 
     */
    @Import(name="timeColumn", required=true)
    private Output<String> timeColumn;

    /**
     * @return Column from query result that should be used as the time column in destination table. Column type for this should be TIMESTAMP.
     * 
     */
    public Output<String> timeColumn() {
        return this.timeColumn;
    }

    private ScheduledQueryTargetConfigurationTimestreamConfigurationArgs() {}

    private ScheduledQueryTargetConfigurationTimestreamConfigurationArgs(ScheduledQueryTargetConfigurationTimestreamConfigurationArgs $) {
        this.databaseName = $.databaseName;
        this.dimensionMappings = $.dimensionMappings;
        this.measureNameColumn = $.measureNameColumn;
        this.mixedMeasureMappings = $.mixedMeasureMappings;
        this.multiMeasureMappings = $.multiMeasureMappings;
        this.tableName = $.tableName;
        this.timeColumn = $.timeColumn;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ScheduledQueryTargetConfigurationTimestreamConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ScheduledQueryTargetConfigurationTimestreamConfigurationArgs $;

        public Builder() {
            $ = new ScheduledQueryTargetConfigurationTimestreamConfigurationArgs();
        }

        public Builder(ScheduledQueryTargetConfigurationTimestreamConfigurationArgs defaults) {
            $ = new ScheduledQueryTargetConfigurationTimestreamConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param databaseName Name of Timestream database to which the query result will be written.
         * 
         * @return builder
         * 
         */
        public Builder databaseName(Output<String> databaseName) {
            $.databaseName = databaseName;
            return this;
        }

        /**
         * @param databaseName Name of Timestream database to which the query result will be written.
         * 
         * @return builder
         * 
         */
        public Builder databaseName(String databaseName) {
            return databaseName(Output.of(databaseName));
        }

        /**
         * @param dimensionMappings Configuration block for mapping of column(s) from the query result to the dimension in the destination table. See below.
         * 
         * @return builder
         * 
         */
        public Builder dimensionMappings(@Nullable Output<List<ScheduledQueryTargetConfigurationTimestreamConfigurationDimensionMappingArgs>> dimensionMappings) {
            $.dimensionMappings = dimensionMappings;
            return this;
        }

        /**
         * @param dimensionMappings Configuration block for mapping of column(s) from the query result to the dimension in the destination table. See below.
         * 
         * @return builder
         * 
         */
        public Builder dimensionMappings(List<ScheduledQueryTargetConfigurationTimestreamConfigurationDimensionMappingArgs> dimensionMappings) {
            return dimensionMappings(Output.of(dimensionMappings));
        }

        /**
         * @param dimensionMappings Configuration block for mapping of column(s) from the query result to the dimension in the destination table. See below.
         * 
         * @return builder
         * 
         */
        public Builder dimensionMappings(ScheduledQueryTargetConfigurationTimestreamConfigurationDimensionMappingArgs... dimensionMappings) {
            return dimensionMappings(List.of(dimensionMappings));
        }

        /**
         * @param measureNameColumn Name of the measure column.
         * 
         * @return builder
         * 
         */
        public Builder measureNameColumn(@Nullable Output<String> measureNameColumn) {
            $.measureNameColumn = measureNameColumn;
            return this;
        }

        /**
         * @param measureNameColumn Name of the measure column.
         * 
         * @return builder
         * 
         */
        public Builder measureNameColumn(String measureNameColumn) {
            return measureNameColumn(Output.of(measureNameColumn));
        }

        /**
         * @param mixedMeasureMappings Configuration block for how to map measures to multi-measure records. See below.
         * 
         * @return builder
         * 
         */
        public Builder mixedMeasureMappings(@Nullable Output<List<ScheduledQueryTargetConfigurationTimestreamConfigurationMixedMeasureMappingArgs>> mixedMeasureMappings) {
            $.mixedMeasureMappings = mixedMeasureMappings;
            return this;
        }

        /**
         * @param mixedMeasureMappings Configuration block for how to map measures to multi-measure records. See below.
         * 
         * @return builder
         * 
         */
        public Builder mixedMeasureMappings(List<ScheduledQueryTargetConfigurationTimestreamConfigurationMixedMeasureMappingArgs> mixedMeasureMappings) {
            return mixedMeasureMappings(Output.of(mixedMeasureMappings));
        }

        /**
         * @param mixedMeasureMappings Configuration block for how to map measures to multi-measure records. See below.
         * 
         * @return builder
         * 
         */
        public Builder mixedMeasureMappings(ScheduledQueryTargetConfigurationTimestreamConfigurationMixedMeasureMappingArgs... mixedMeasureMappings) {
            return mixedMeasureMappings(List.of(mixedMeasureMappings));
        }

        /**
         * @param multiMeasureMappings Configuration block for multi-measure mappings. Only one of `mixed_measure_mappings` or `multi_measure_mappings` can be provided. `multi_measure_mappings` can be used to ingest data as multi measures in the derived table. See below.
         * 
         * @return builder
         * 
         */
        public Builder multiMeasureMappings(@Nullable Output<ScheduledQueryTargetConfigurationTimestreamConfigurationMultiMeasureMappingsArgs> multiMeasureMappings) {
            $.multiMeasureMappings = multiMeasureMappings;
            return this;
        }

        /**
         * @param multiMeasureMappings Configuration block for multi-measure mappings. Only one of `mixed_measure_mappings` or `multi_measure_mappings` can be provided. `multi_measure_mappings` can be used to ingest data as multi measures in the derived table. See below.
         * 
         * @return builder
         * 
         */
        public Builder multiMeasureMappings(ScheduledQueryTargetConfigurationTimestreamConfigurationMultiMeasureMappingsArgs multiMeasureMappings) {
            return multiMeasureMappings(Output.of(multiMeasureMappings));
        }

        /**
         * @param tableName Name of Timestream table that the query result will be written to. The table should be within the same database that is provided in Timestream configuration.
         * 
         * @return builder
         * 
         */
        public Builder tableName(Output<String> tableName) {
            $.tableName = tableName;
            return this;
        }

        /**
         * @param tableName Name of Timestream table that the query result will be written to. The table should be within the same database that is provided in Timestream configuration.
         * 
         * @return builder
         * 
         */
        public Builder tableName(String tableName) {
            return tableName(Output.of(tableName));
        }

        /**
         * @param timeColumn Column from query result that should be used as the time column in destination table. Column type for this should be TIMESTAMP.
         * 
         * @return builder
         * 
         */
        public Builder timeColumn(Output<String> timeColumn) {
            $.timeColumn = timeColumn;
            return this;
        }

        /**
         * @param timeColumn Column from query result that should be used as the time column in destination table. Column type for this should be TIMESTAMP.
         * 
         * @return builder
         * 
         */
        public Builder timeColumn(String timeColumn) {
            return timeColumn(Output.of(timeColumn));
        }

        public ScheduledQueryTargetConfigurationTimestreamConfigurationArgs build() {
            if ($.databaseName == null) {
                throw new MissingRequiredPropertyException("ScheduledQueryTargetConfigurationTimestreamConfigurationArgs", "databaseName");
            }
            if ($.tableName == null) {
                throw new MissingRequiredPropertyException("ScheduledQueryTargetConfigurationTimestreamConfigurationArgs", "tableName");
            }
            if ($.timeColumn == null) {
                throw new MissingRequiredPropertyException("ScheduledQueryTargetConfigurationTimestreamConfigurationArgs", "timeColumn");
            }
            return $;
        }
    }

}
