// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.glue.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class CrawlerDeltaTarget {
    /**
     * @return The name of the connection to use to connect to the Delta table target.
     * 
     */
    private @Nullable String connectionName;
    /**
     * @return Specifies whether the crawler will create native tables, to allow integration with query engines that support querying of the Delta transaction log directly.
     * 
     */
    private @Nullable Boolean createNativeDeltaTable;
    /**
     * @return A list of the Amazon S3 paths to the Delta tables.
     * 
     */
    private List<String> deltaTables;
    /**
     * @return Specifies whether to write the manifest files to the Delta table path.
     * 
     */
    private Boolean writeManifest;

    private CrawlerDeltaTarget() {}
    /**
     * @return The name of the connection to use to connect to the Delta table target.
     * 
     */
    public Optional<String> connectionName() {
        return Optional.ofNullable(this.connectionName);
    }
    /**
     * @return Specifies whether the crawler will create native tables, to allow integration with query engines that support querying of the Delta transaction log directly.
     * 
     */
    public Optional<Boolean> createNativeDeltaTable() {
        return Optional.ofNullable(this.createNativeDeltaTable);
    }
    /**
     * @return A list of the Amazon S3 paths to the Delta tables.
     * 
     */
    public List<String> deltaTables() {
        return this.deltaTables;
    }
    /**
     * @return Specifies whether to write the manifest files to the Delta table path.
     * 
     */
    public Boolean writeManifest() {
        return this.writeManifest;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CrawlerDeltaTarget defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String connectionName;
        private @Nullable Boolean createNativeDeltaTable;
        private List<String> deltaTables;
        private Boolean writeManifest;
        public Builder() {}
        public Builder(CrawlerDeltaTarget defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.connectionName = defaults.connectionName;
    	      this.createNativeDeltaTable = defaults.createNativeDeltaTable;
    	      this.deltaTables = defaults.deltaTables;
    	      this.writeManifest = defaults.writeManifest;
        }

        @CustomType.Setter
        public Builder connectionName(@Nullable String connectionName) {

            this.connectionName = connectionName;
            return this;
        }
        @CustomType.Setter
        public Builder createNativeDeltaTable(@Nullable Boolean createNativeDeltaTable) {

            this.createNativeDeltaTable = createNativeDeltaTable;
            return this;
        }
        @CustomType.Setter
        public Builder deltaTables(List<String> deltaTables) {
            if (deltaTables == null) {
              throw new MissingRequiredPropertyException("CrawlerDeltaTarget", "deltaTables");
            }
            this.deltaTables = deltaTables;
            return this;
        }
        public Builder deltaTables(String... deltaTables) {
            return deltaTables(List.of(deltaTables));
        }
        @CustomType.Setter
        public Builder writeManifest(Boolean writeManifest) {
            if (writeManifest == null) {
              throw new MissingRequiredPropertyException("CrawlerDeltaTarget", "writeManifest");
            }
            this.writeManifest = writeManifest;
            return this;
        }
        public CrawlerDeltaTarget build() {
            final var _resultValue = new CrawlerDeltaTarget();
            _resultValue.connectionName = connectionName;
            _resultValue.createNativeDeltaTable = createNativeDeltaTable;
            _resultValue.deltaTables = deltaTables;
            _resultValue.writeManifest = writeManifest;
            return _resultValue;
        }
    }
}
