// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.finspace.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class KxDataviewSegmentConfiguration {
    /**
     * @return The database path of the data that you want to place on each selected volume. Each segment must have a unique database path for each volume.
     * 
     */
    private List<String> dbPaths;
    /**
     * @return The name of the volume that you want to attach to a dataview. This volume must be in the same availability zone as the dataview that you are attaching to.
     * 
     */
    private String volumeName;

    private KxDataviewSegmentConfiguration() {}
    /**
     * @return The database path of the data that you want to place on each selected volume. Each segment must have a unique database path for each volume.
     * 
     */
    public List<String> dbPaths() {
        return this.dbPaths;
    }
    /**
     * @return The name of the volume that you want to attach to a dataview. This volume must be in the same availability zone as the dataview that you are attaching to.
     * 
     */
    public String volumeName() {
        return this.volumeName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(KxDataviewSegmentConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> dbPaths;
        private String volumeName;
        public Builder() {}
        public Builder(KxDataviewSegmentConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dbPaths = defaults.dbPaths;
    	      this.volumeName = defaults.volumeName;
        }

        @CustomType.Setter
        public Builder dbPaths(List<String> dbPaths) {
            this.dbPaths = Objects.requireNonNull(dbPaths);
            return this;
        }
        public Builder dbPaths(String... dbPaths) {
            return dbPaths(List.of(dbPaths));
        }
        @CustomType.Setter
        public Builder volumeName(String volumeName) {
            this.volumeName = Objects.requireNonNull(volumeName);
            return this;
        }
        public KxDataviewSegmentConfiguration build() {
            final var _resultValue = new KxDataviewSegmentConfiguration();
            _resultValue.dbPaths = dbPaths;
            _resultValue.volumeName = volumeName;
            return _resultValue;
        }
    }
}
