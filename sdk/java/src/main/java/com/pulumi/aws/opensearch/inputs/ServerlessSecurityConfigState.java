// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.opensearch.inputs;

import com.pulumi.aws.opensearch.inputs.ServerlessSecurityConfigSamlOptionsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServerlessSecurityConfigState extends com.pulumi.resources.ResourceArgs {

    public static final ServerlessSecurityConfigState Empty = new ServerlessSecurityConfigState();

    /**
     * Version of the configuration.
     * 
     */
    @Import(name="configVersion")
    private @Nullable Output<String> configVersion;

    /**
     * @return Version of the configuration.
     * 
     */
    public Optional<Output<String>> configVersion() {
        return Optional.ofNullable(this.configVersion);
    }

    /**
     * Description of the security configuration.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the security configuration.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Name of the policy.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the policy.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Configuration block for SAML options.
     * 
     */
    @Import(name="samlOptions")
    private @Nullable Output<ServerlessSecurityConfigSamlOptionsArgs> samlOptions;

    /**
     * @return Configuration block for SAML options.
     * 
     */
    public Optional<Output<ServerlessSecurityConfigSamlOptionsArgs>> samlOptions() {
        return Optional.ofNullable(this.samlOptions);
    }

    /**
     * Type of configuration. Must be `saml`.
     * 
     * The following arguments are optional:
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Type of configuration. Must be `saml`.
     * 
     * The following arguments are optional:
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private ServerlessSecurityConfigState() {}

    private ServerlessSecurityConfigState(ServerlessSecurityConfigState $) {
        this.configVersion = $.configVersion;
        this.description = $.description;
        this.name = $.name;
        this.samlOptions = $.samlOptions;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServerlessSecurityConfigState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServerlessSecurityConfigState $;

        public Builder() {
            $ = new ServerlessSecurityConfigState();
        }

        public Builder(ServerlessSecurityConfigState defaults) {
            $ = new ServerlessSecurityConfigState(Objects.requireNonNull(defaults));
        }

        /**
         * @param configVersion Version of the configuration.
         * 
         * @return builder
         * 
         */
        public Builder configVersion(@Nullable Output<String> configVersion) {
            $.configVersion = configVersion;
            return this;
        }

        /**
         * @param configVersion Version of the configuration.
         * 
         * @return builder
         * 
         */
        public Builder configVersion(String configVersion) {
            return configVersion(Output.of(configVersion));
        }

        /**
         * @param description Description of the security configuration.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the security configuration.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param name Name of the policy.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the policy.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param samlOptions Configuration block for SAML options.
         * 
         * @return builder
         * 
         */
        public Builder samlOptions(@Nullable Output<ServerlessSecurityConfigSamlOptionsArgs> samlOptions) {
            $.samlOptions = samlOptions;
            return this;
        }

        /**
         * @param samlOptions Configuration block for SAML options.
         * 
         * @return builder
         * 
         */
        public Builder samlOptions(ServerlessSecurityConfigSamlOptionsArgs samlOptions) {
            return samlOptions(Output.of(samlOptions));
        }

        /**
         * @param type Type of configuration. Must be `saml`.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of configuration. Must be `saml`.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public ServerlessSecurityConfigState build() {
            return $;
        }
    }

}
