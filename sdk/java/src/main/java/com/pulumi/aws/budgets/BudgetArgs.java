// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.budgets;

import com.pulumi.aws.budgets.inputs.BudgetAutoAdjustDataArgs;
import com.pulumi.aws.budgets.inputs.BudgetCostFilterArgs;
import com.pulumi.aws.budgets.inputs.BudgetCostTypesArgs;
import com.pulumi.aws.budgets.inputs.BudgetNotificationArgs;
import com.pulumi.aws.budgets.inputs.BudgetPlannedLimitArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BudgetArgs extends com.pulumi.resources.ResourceArgs {

    public static final BudgetArgs Empty = new BudgetArgs();

    @Import(name="accountId")
    private @Nullable Output<String> accountId;

    public Optional<Output<String>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    @Import(name="autoAdjustData")
    private @Nullable Output<BudgetAutoAdjustDataArgs> autoAdjustData;

    public Optional<Output<BudgetAutoAdjustDataArgs>> autoAdjustData() {
        return Optional.ofNullable(this.autoAdjustData);
    }

    @Import(name="budgetType", required=true)
    private Output<String> budgetType;

    public Output<String> budgetType() {
        return this.budgetType;
    }

    /**
     * @deprecated
     * Use the attribute &#34;cost_filter&#34; instead.
     * 
     */
    @Deprecated /* Use the attribute ""cost_filter"" instead. */
    @Import(name="costFilterLegacy")
    private @Nullable Output<Map<String,String>> costFilterLegacy;

    /**
     * @deprecated
     * Use the attribute &#34;cost_filter&#34; instead.
     * 
     */
    @Deprecated /* Use the attribute ""cost_filter"" instead. */
    public Optional<Output<Map<String,String>>> costFilterLegacy() {
        return Optional.ofNullable(this.costFilterLegacy);
    }

    @Import(name="costFilters")
    private @Nullable Output<List<BudgetCostFilterArgs>> costFilters;

    public Optional<Output<List<BudgetCostFilterArgs>>> costFilters() {
        return Optional.ofNullable(this.costFilters);
    }

    @Import(name="costTypes")
    private @Nullable Output<BudgetCostTypesArgs> costTypes;

    public Optional<Output<BudgetCostTypesArgs>> costTypes() {
        return Optional.ofNullable(this.costTypes);
    }

    @Import(name="limitAmount")
    private @Nullable Output<String> limitAmount;

    public Optional<Output<String>> limitAmount() {
        return Optional.ofNullable(this.limitAmount);
    }

    @Import(name="limitUnit")
    private @Nullable Output<String> limitUnit;

    public Optional<Output<String>> limitUnit() {
        return Optional.ofNullable(this.limitUnit);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="namePrefix")
    private @Nullable Output<String> namePrefix;

    public Optional<Output<String>> namePrefix() {
        return Optional.ofNullable(this.namePrefix);
    }

    @Import(name="notifications")
    private @Nullable Output<List<BudgetNotificationArgs>> notifications;

    public Optional<Output<List<BudgetNotificationArgs>>> notifications() {
        return Optional.ofNullable(this.notifications);
    }

    @Import(name="plannedLimits")
    private @Nullable Output<List<BudgetPlannedLimitArgs>> plannedLimits;

    public Optional<Output<List<BudgetPlannedLimitArgs>>> plannedLimits() {
        return Optional.ofNullable(this.plannedLimits);
    }

    @Import(name="timePeriodEnd")
    private @Nullable Output<String> timePeriodEnd;

    public Optional<Output<String>> timePeriodEnd() {
        return Optional.ofNullable(this.timePeriodEnd);
    }

    @Import(name="timePeriodStart")
    private @Nullable Output<String> timePeriodStart;

    public Optional<Output<String>> timePeriodStart() {
        return Optional.ofNullable(this.timePeriodStart);
    }

    @Import(name="timeUnit", required=true)
    private Output<String> timeUnit;

    public Output<String> timeUnit() {
        return this.timeUnit;
    }

    private BudgetArgs() {}

    private BudgetArgs(BudgetArgs $) {
        this.accountId = $.accountId;
        this.autoAdjustData = $.autoAdjustData;
        this.budgetType = $.budgetType;
        this.costFilterLegacy = $.costFilterLegacy;
        this.costFilters = $.costFilters;
        this.costTypes = $.costTypes;
        this.limitAmount = $.limitAmount;
        this.limitUnit = $.limitUnit;
        this.name = $.name;
        this.namePrefix = $.namePrefix;
        this.notifications = $.notifications;
        this.plannedLimits = $.plannedLimits;
        this.timePeriodEnd = $.timePeriodEnd;
        this.timePeriodStart = $.timePeriodStart;
        this.timeUnit = $.timeUnit;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BudgetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BudgetArgs $;

        public Builder() {
            $ = new BudgetArgs();
        }

        public Builder(BudgetArgs defaults) {
            $ = new BudgetArgs(Objects.requireNonNull(defaults));
        }

        public Builder accountId(@Nullable Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        public Builder autoAdjustData(@Nullable Output<BudgetAutoAdjustDataArgs> autoAdjustData) {
            $.autoAdjustData = autoAdjustData;
            return this;
        }

        public Builder autoAdjustData(BudgetAutoAdjustDataArgs autoAdjustData) {
            return autoAdjustData(Output.of(autoAdjustData));
        }

        public Builder budgetType(Output<String> budgetType) {
            $.budgetType = budgetType;
            return this;
        }

        public Builder budgetType(String budgetType) {
            return budgetType(Output.of(budgetType));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * Use the attribute &#34;cost_filter&#34; instead.
         * 
         */
        @Deprecated /* Use the attribute ""cost_filter"" instead. */
        public Builder costFilterLegacy(@Nullable Output<Map<String,String>> costFilterLegacy) {
            $.costFilterLegacy = costFilterLegacy;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * Use the attribute &#34;cost_filter&#34; instead.
         * 
         */
        @Deprecated /* Use the attribute ""cost_filter"" instead. */
        public Builder costFilterLegacy(Map<String,String> costFilterLegacy) {
            return costFilterLegacy(Output.of(costFilterLegacy));
        }

        public Builder costFilters(@Nullable Output<List<BudgetCostFilterArgs>> costFilters) {
            $.costFilters = costFilters;
            return this;
        }

        public Builder costFilters(List<BudgetCostFilterArgs> costFilters) {
            return costFilters(Output.of(costFilters));
        }

        public Builder costFilters(BudgetCostFilterArgs... costFilters) {
            return costFilters(List.of(costFilters));
        }

        public Builder costTypes(@Nullable Output<BudgetCostTypesArgs> costTypes) {
            $.costTypes = costTypes;
            return this;
        }

        public Builder costTypes(BudgetCostTypesArgs costTypes) {
            return costTypes(Output.of(costTypes));
        }

        public Builder limitAmount(@Nullable Output<String> limitAmount) {
            $.limitAmount = limitAmount;
            return this;
        }

        public Builder limitAmount(String limitAmount) {
            return limitAmount(Output.of(limitAmount));
        }

        public Builder limitUnit(@Nullable Output<String> limitUnit) {
            $.limitUnit = limitUnit;
            return this;
        }

        public Builder limitUnit(String limitUnit) {
            return limitUnit(Output.of(limitUnit));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder namePrefix(@Nullable Output<String> namePrefix) {
            $.namePrefix = namePrefix;
            return this;
        }

        public Builder namePrefix(String namePrefix) {
            return namePrefix(Output.of(namePrefix));
        }

        public Builder notifications(@Nullable Output<List<BudgetNotificationArgs>> notifications) {
            $.notifications = notifications;
            return this;
        }

        public Builder notifications(List<BudgetNotificationArgs> notifications) {
            return notifications(Output.of(notifications));
        }

        public Builder notifications(BudgetNotificationArgs... notifications) {
            return notifications(List.of(notifications));
        }

        public Builder plannedLimits(@Nullable Output<List<BudgetPlannedLimitArgs>> plannedLimits) {
            $.plannedLimits = plannedLimits;
            return this;
        }

        public Builder plannedLimits(List<BudgetPlannedLimitArgs> plannedLimits) {
            return plannedLimits(Output.of(plannedLimits));
        }

        public Builder plannedLimits(BudgetPlannedLimitArgs... plannedLimits) {
            return plannedLimits(List.of(plannedLimits));
        }

        public Builder timePeriodEnd(@Nullable Output<String> timePeriodEnd) {
            $.timePeriodEnd = timePeriodEnd;
            return this;
        }

        public Builder timePeriodEnd(String timePeriodEnd) {
            return timePeriodEnd(Output.of(timePeriodEnd));
        }

        public Builder timePeriodStart(@Nullable Output<String> timePeriodStart) {
            $.timePeriodStart = timePeriodStart;
            return this;
        }

        public Builder timePeriodStart(String timePeriodStart) {
            return timePeriodStart(Output.of(timePeriodStart));
        }

        public Builder timeUnit(Output<String> timeUnit) {
            $.timeUnit = timeUnit;
            return this;
        }

        public Builder timeUnit(String timeUnit) {
            return timeUnit(Output.of(timeUnit));
        }

        public BudgetArgs build() {
            $.budgetType = Objects.requireNonNull($.budgetType, "expected parameter 'budgetType' to be non-null");
            $.timeUnit = Objects.requireNonNull($.timeUnit, "expected parameter 'timeUnit' to be non-null");
            return $;
        }
    }

}
