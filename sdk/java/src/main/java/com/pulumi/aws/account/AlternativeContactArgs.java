// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.account;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AlternativeContactArgs extends com.pulumi.resources.ResourceArgs {

    public static final AlternativeContactArgs Empty = new AlternativeContactArgs();

    @Import(name="accountId")
    private @Nullable Output<String> accountId;

    public Optional<Output<String>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    @Import(name="alternateContactType", required=true)
    private Output<String> alternateContactType;

    public Output<String> alternateContactType() {
        return this.alternateContactType;
    }

    @Import(name="emailAddress", required=true)
    private Output<String> emailAddress;

    public Output<String> emailAddress() {
        return this.emailAddress;
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="phoneNumber", required=true)
    private Output<String> phoneNumber;

    public Output<String> phoneNumber() {
        return this.phoneNumber;
    }

    @Import(name="title", required=true)
    private Output<String> title;

    public Output<String> title() {
        return this.title;
    }

    private AlternativeContactArgs() {}

    private AlternativeContactArgs(AlternativeContactArgs $) {
        this.accountId = $.accountId;
        this.alternateContactType = $.alternateContactType;
        this.emailAddress = $.emailAddress;
        this.name = $.name;
        this.phoneNumber = $.phoneNumber;
        this.title = $.title;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AlternativeContactArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AlternativeContactArgs $;

        public Builder() {
            $ = new AlternativeContactArgs();
        }

        public Builder(AlternativeContactArgs defaults) {
            $ = new AlternativeContactArgs(Objects.requireNonNull(defaults));
        }

        public Builder accountId(@Nullable Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        public Builder alternateContactType(Output<String> alternateContactType) {
            $.alternateContactType = alternateContactType;
            return this;
        }

        public Builder alternateContactType(String alternateContactType) {
            return alternateContactType(Output.of(alternateContactType));
        }

        public Builder emailAddress(Output<String> emailAddress) {
            $.emailAddress = emailAddress;
            return this;
        }

        public Builder emailAddress(String emailAddress) {
            return emailAddress(Output.of(emailAddress));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder phoneNumber(Output<String> phoneNumber) {
            $.phoneNumber = phoneNumber;
            return this;
        }

        public Builder phoneNumber(String phoneNumber) {
            return phoneNumber(Output.of(phoneNumber));
        }

        public Builder title(Output<String> title) {
            $.title = title;
            return this;
        }

        public Builder title(String title) {
            return title(Output.of(title));
        }

        public AlternativeContactArgs build() {
            $.alternateContactType = Objects.requireNonNull($.alternateContactType, "expected parameter 'alternateContactType' to be non-null");
            $.emailAddress = Objects.requireNonNull($.emailAddress, "expected parameter 'emailAddress' to be non-null");
            $.phoneNumber = Objects.requireNonNull($.phoneNumber, "expected parameter 'phoneNumber' to be non-null");
            $.title = Objects.requireNonNull($.title, "expected parameter 'title' to be non-null");
            return $;
        }
    }

}
