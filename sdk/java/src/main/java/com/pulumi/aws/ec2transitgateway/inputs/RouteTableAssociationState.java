// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ec2transitgateway.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RouteTableAssociationState extends com.pulumi.resources.ResourceArgs {

    public static final RouteTableAssociationState Empty = new RouteTableAssociationState();

    /**
     * Boolean whether the Gateway Attachment should remove any current Route Table association before associating with the specified Route Table. Default value: `false`. This argument is intended for use with EC2 Transit Gateways shared into the current account, otherwise the `transit_gateway_default_route_table_association` argument of the `aws.ec2transitgateway.VpcAttachment` resource should be used.
     * 
     */
    @Import(name="replaceExistingAssociation")
    private @Nullable Output<Boolean> replaceExistingAssociation;

    /**
     * @return Boolean whether the Gateway Attachment should remove any current Route Table association before associating with the specified Route Table. Default value: `false`. This argument is intended for use with EC2 Transit Gateways shared into the current account, otherwise the `transit_gateway_default_route_table_association` argument of the `aws.ec2transitgateway.VpcAttachment` resource should be used.
     * 
     */
    public Optional<Output<Boolean>> replaceExistingAssociation() {
        return Optional.ofNullable(this.replaceExistingAssociation);
    }

    /**
     * Identifier of the resource
     * 
     */
    @Import(name="resourceId")
    private @Nullable Output<String> resourceId;

    /**
     * @return Identifier of the resource
     * 
     */
    public Optional<Output<String>> resourceId() {
        return Optional.ofNullable(this.resourceId);
    }

    /**
     * Type of the resource
     * 
     */
    @Import(name="resourceType")
    private @Nullable Output<String> resourceType;

    /**
     * @return Type of the resource
     * 
     */
    public Optional<Output<String>> resourceType() {
        return Optional.ofNullable(this.resourceType);
    }

    /**
     * Identifier of EC2 Transit Gateway Attachment.
     * 
     */
    @Import(name="transitGatewayAttachmentId")
    private @Nullable Output<String> transitGatewayAttachmentId;

    /**
     * @return Identifier of EC2 Transit Gateway Attachment.
     * 
     */
    public Optional<Output<String>> transitGatewayAttachmentId() {
        return Optional.ofNullable(this.transitGatewayAttachmentId);
    }

    /**
     * Identifier of EC2 Transit Gateway Route Table.
     * 
     */
    @Import(name="transitGatewayRouteTableId")
    private @Nullable Output<String> transitGatewayRouteTableId;

    /**
     * @return Identifier of EC2 Transit Gateway Route Table.
     * 
     */
    public Optional<Output<String>> transitGatewayRouteTableId() {
        return Optional.ofNullable(this.transitGatewayRouteTableId);
    }

    private RouteTableAssociationState() {}

    private RouteTableAssociationState(RouteTableAssociationState $) {
        this.replaceExistingAssociation = $.replaceExistingAssociation;
        this.resourceId = $.resourceId;
        this.resourceType = $.resourceType;
        this.transitGatewayAttachmentId = $.transitGatewayAttachmentId;
        this.transitGatewayRouteTableId = $.transitGatewayRouteTableId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RouteTableAssociationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RouteTableAssociationState $;

        public Builder() {
            $ = new RouteTableAssociationState();
        }

        public Builder(RouteTableAssociationState defaults) {
            $ = new RouteTableAssociationState(Objects.requireNonNull(defaults));
        }

        /**
         * @param replaceExistingAssociation Boolean whether the Gateway Attachment should remove any current Route Table association before associating with the specified Route Table. Default value: `false`. This argument is intended for use with EC2 Transit Gateways shared into the current account, otherwise the `transit_gateway_default_route_table_association` argument of the `aws.ec2transitgateway.VpcAttachment` resource should be used.
         * 
         * @return builder
         * 
         */
        public Builder replaceExistingAssociation(@Nullable Output<Boolean> replaceExistingAssociation) {
            $.replaceExistingAssociation = replaceExistingAssociation;
            return this;
        }

        /**
         * @param replaceExistingAssociation Boolean whether the Gateway Attachment should remove any current Route Table association before associating with the specified Route Table. Default value: `false`. This argument is intended for use with EC2 Transit Gateways shared into the current account, otherwise the `transit_gateway_default_route_table_association` argument of the `aws.ec2transitgateway.VpcAttachment` resource should be used.
         * 
         * @return builder
         * 
         */
        public Builder replaceExistingAssociation(Boolean replaceExistingAssociation) {
            return replaceExistingAssociation(Output.of(replaceExistingAssociation));
        }

        /**
         * @param resourceId Identifier of the resource
         * 
         * @return builder
         * 
         */
        public Builder resourceId(@Nullable Output<String> resourceId) {
            $.resourceId = resourceId;
            return this;
        }

        /**
         * @param resourceId Identifier of the resource
         * 
         * @return builder
         * 
         */
        public Builder resourceId(String resourceId) {
            return resourceId(Output.of(resourceId));
        }

        /**
         * @param resourceType Type of the resource
         * 
         * @return builder
         * 
         */
        public Builder resourceType(@Nullable Output<String> resourceType) {
            $.resourceType = resourceType;
            return this;
        }

        /**
         * @param resourceType Type of the resource
         * 
         * @return builder
         * 
         */
        public Builder resourceType(String resourceType) {
            return resourceType(Output.of(resourceType));
        }

        /**
         * @param transitGatewayAttachmentId Identifier of EC2 Transit Gateway Attachment.
         * 
         * @return builder
         * 
         */
        public Builder transitGatewayAttachmentId(@Nullable Output<String> transitGatewayAttachmentId) {
            $.transitGatewayAttachmentId = transitGatewayAttachmentId;
            return this;
        }

        /**
         * @param transitGatewayAttachmentId Identifier of EC2 Transit Gateway Attachment.
         * 
         * @return builder
         * 
         */
        public Builder transitGatewayAttachmentId(String transitGatewayAttachmentId) {
            return transitGatewayAttachmentId(Output.of(transitGatewayAttachmentId));
        }

        /**
         * @param transitGatewayRouteTableId Identifier of EC2 Transit Gateway Route Table.
         * 
         * @return builder
         * 
         */
        public Builder transitGatewayRouteTableId(@Nullable Output<String> transitGatewayRouteTableId) {
            $.transitGatewayRouteTableId = transitGatewayRouteTableId;
            return this;
        }

        /**
         * @param transitGatewayRouteTableId Identifier of EC2 Transit Gateway Route Table.
         * 
         * @return builder
         * 
         */
        public Builder transitGatewayRouteTableId(String transitGatewayRouteTableId) {
            return transitGatewayRouteTableId(Output.of(transitGatewayRouteTableId));
        }

        public RouteTableAssociationState build() {
            return $;
        }
    }

}
