// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.networkmanager.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetCoreNetworkPolicyDocumentAttachmentPolicyAction {
    /**
     * @return Defines how a segment is mapped. Values can be `constant` or `tag`. `constant` statically defines the segment to associate the attachment to. `tag` uses the value of a tag to dynamically try to map to a segment.reference_policies_elements_condition_operators.html) to evaluate.
     * 
     */
    private String associationMethod;
    /**
     * @return Determines if this mapping should override the segment value for `require_attachment_acceptance`. You can only set this to `true`, indicating that this setting applies only to segments that have `require_attachment_acceptance` set to `false`. If the segment already has the default `require_attachment_acceptance`, you can set this to inherit segment’s acceptance value.
     * 
     */
    private @Nullable Boolean requireAcceptance;
    /**
     * @return Name of the `segment` to share as defined in the `segments` section. This is used only when the `association_method` is `constant`.
     * 
     */
    private @Nullable String segment;
    /**
     * @return Maps the attachment to the value of a known key. This is used with the `association_method` is `tag`. For example a `tag` of `stage = “test”`, will map to a segment named `test`. The value must exactly match the name of a segment. This allows you to have many segments, but use only a single rule without having to define multiple nearly identical conditions. This prevents creating many similar conditions that all use the same keys to map to segments.
     * 
     */
    private @Nullable String tagValueOfKey;

    private GetCoreNetworkPolicyDocumentAttachmentPolicyAction() {}
    /**
     * @return Defines how a segment is mapped. Values can be `constant` or `tag`. `constant` statically defines the segment to associate the attachment to. `tag` uses the value of a tag to dynamically try to map to a segment.reference_policies_elements_condition_operators.html) to evaluate.
     * 
     */
    public String associationMethod() {
        return this.associationMethod;
    }
    /**
     * @return Determines if this mapping should override the segment value for `require_attachment_acceptance`. You can only set this to `true`, indicating that this setting applies only to segments that have `require_attachment_acceptance` set to `false`. If the segment already has the default `require_attachment_acceptance`, you can set this to inherit segment’s acceptance value.
     * 
     */
    public Optional<Boolean> requireAcceptance() {
        return Optional.ofNullable(this.requireAcceptance);
    }
    /**
     * @return Name of the `segment` to share as defined in the `segments` section. This is used only when the `association_method` is `constant`.
     * 
     */
    public Optional<String> segment() {
        return Optional.ofNullable(this.segment);
    }
    /**
     * @return Maps the attachment to the value of a known key. This is used with the `association_method` is `tag`. For example a `tag` of `stage = “test”`, will map to a segment named `test`. The value must exactly match the name of a segment. This allows you to have many segments, but use only a single rule without having to define multiple nearly identical conditions. This prevents creating many similar conditions that all use the same keys to map to segments.
     * 
     */
    public Optional<String> tagValueOfKey() {
        return Optional.ofNullable(this.tagValueOfKey);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCoreNetworkPolicyDocumentAttachmentPolicyAction defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String associationMethod;
        private @Nullable Boolean requireAcceptance;
        private @Nullable String segment;
        private @Nullable String tagValueOfKey;
        public Builder() {}
        public Builder(GetCoreNetworkPolicyDocumentAttachmentPolicyAction defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.associationMethod = defaults.associationMethod;
    	      this.requireAcceptance = defaults.requireAcceptance;
    	      this.segment = defaults.segment;
    	      this.tagValueOfKey = defaults.tagValueOfKey;
        }

        @CustomType.Setter
        public Builder associationMethod(String associationMethod) {
            if (associationMethod == null) {
              throw new MissingRequiredPropertyException("GetCoreNetworkPolicyDocumentAttachmentPolicyAction", "associationMethod");
            }
            this.associationMethod = associationMethod;
            return this;
        }
        @CustomType.Setter
        public Builder requireAcceptance(@Nullable Boolean requireAcceptance) {

            this.requireAcceptance = requireAcceptance;
            return this;
        }
        @CustomType.Setter
        public Builder segment(@Nullable String segment) {

            this.segment = segment;
            return this;
        }
        @CustomType.Setter
        public Builder tagValueOfKey(@Nullable String tagValueOfKey) {

            this.tagValueOfKey = tagValueOfKey;
            return this;
        }
        public GetCoreNetworkPolicyDocumentAttachmentPolicyAction build() {
            final var _resultValue = new GetCoreNetworkPolicyDocumentAttachmentPolicyAction();
            _resultValue.associationMethod = associationMethod;
            _resultValue.requireAcceptance = requireAcceptance;
            _resultValue.segment = segment;
            _resultValue.tagValueOfKey = tagValueOfKey;
            return _resultValue;
        }
    }
}
