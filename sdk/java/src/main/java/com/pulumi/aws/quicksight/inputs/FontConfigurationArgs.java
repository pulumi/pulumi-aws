// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.inputs;

import com.pulumi.aws.quicksight.inputs.FontConfigurationFontSizeArgs;
import com.pulumi.aws.quicksight.inputs.FontConfigurationFontWeightArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FontConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final FontConfigurationArgs Empty = new FontConfigurationArgs();

    @Import(name="fontColor")
    private @Nullable Output<String> fontColor;

    public Optional<Output<String>> fontColor() {
        return Optional.ofNullable(this.fontColor);
    }

    @Import(name="fontDecoration")
    private @Nullable Output<String> fontDecoration;

    public Optional<Output<String>> fontDecoration() {
        return Optional.ofNullable(this.fontDecoration);
    }

    @Import(name="fontSize")
    private @Nullable Output<FontConfigurationFontSizeArgs> fontSize;

    public Optional<Output<FontConfigurationFontSizeArgs>> fontSize() {
        return Optional.ofNullable(this.fontSize);
    }

    @Import(name="fontStyle")
    private @Nullable Output<String> fontStyle;

    public Optional<Output<String>> fontStyle() {
        return Optional.ofNullable(this.fontStyle);
    }

    @Import(name="fontWeight")
    private @Nullable Output<FontConfigurationFontWeightArgs> fontWeight;

    public Optional<Output<FontConfigurationFontWeightArgs>> fontWeight() {
        return Optional.ofNullable(this.fontWeight);
    }

    private FontConfigurationArgs() {}

    private FontConfigurationArgs(FontConfigurationArgs $) {
        this.fontColor = $.fontColor;
        this.fontDecoration = $.fontDecoration;
        this.fontSize = $.fontSize;
        this.fontStyle = $.fontStyle;
        this.fontWeight = $.fontWeight;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FontConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FontConfigurationArgs $;

        public Builder() {
            $ = new FontConfigurationArgs();
        }

        public Builder(FontConfigurationArgs defaults) {
            $ = new FontConfigurationArgs(Objects.requireNonNull(defaults));
        }

        public Builder fontColor(@Nullable Output<String> fontColor) {
            $.fontColor = fontColor;
            return this;
        }

        public Builder fontColor(String fontColor) {
            return fontColor(Output.of(fontColor));
        }

        public Builder fontDecoration(@Nullable Output<String> fontDecoration) {
            $.fontDecoration = fontDecoration;
            return this;
        }

        public Builder fontDecoration(String fontDecoration) {
            return fontDecoration(Output.of(fontDecoration));
        }

        public Builder fontSize(@Nullable Output<FontConfigurationFontSizeArgs> fontSize) {
            $.fontSize = fontSize;
            return this;
        }

        public Builder fontSize(FontConfigurationFontSizeArgs fontSize) {
            return fontSize(Output.of(fontSize));
        }

        public Builder fontStyle(@Nullable Output<String> fontStyle) {
            $.fontStyle = fontStyle;
            return this;
        }

        public Builder fontStyle(String fontStyle) {
            return fontStyle(Output.of(fontStyle));
        }

        public Builder fontWeight(@Nullable Output<FontConfigurationFontWeightArgs> fontWeight) {
            $.fontWeight = fontWeight;
            return this;
        }

        public Builder fontWeight(FontConfigurationFontWeightArgs fontWeight) {
            return fontWeight(Output.of(fontWeight));
        }

        public FontConfigurationArgs build() {
            return $;
        }
    }

}
