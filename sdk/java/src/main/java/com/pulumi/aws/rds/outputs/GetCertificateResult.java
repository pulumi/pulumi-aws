// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.rds.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetCertificateResult {
    /**
     * @return ARN of the certificate.
     * 
     */
    private @Nullable String arn;
    /**
     * @return Type of certificate. For example, `CA`.
     * 
     */
    private @Nullable String certificateType;
    /**
     * @return Boolean whether there is an override for the default certificate identifier.
     * 
     */
    private @Nullable Boolean customerOverride;
    /**
     * @return If there is an override for the default certificate identifier, when the override expires.
     * 
     */
    private @Nullable String customerOverrideValidTill;
    private @Nullable String id;
    private @Nullable Boolean latestValidTill;
    /**
     * @return Thumbprint of the certificate.
     * 
     */
    private @Nullable String thumbprint;
    /**
     * @return [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8) of certificate starting validity date.
     * 
     */
    private @Nullable String validFrom;
    /**
     * @return [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8) of certificate ending validity date.
     * 
     */
    private @Nullable String validTill;

    private GetCertificateResult() {}
    /**
     * @return ARN of the certificate.
     * 
     */
    public Optional<String> arn() {
        return Optional.ofNullable(this.arn);
    }
    /**
     * @return Type of certificate. For example, `CA`.
     * 
     */
    public Optional<String> certificateType() {
        return Optional.ofNullable(this.certificateType);
    }
    /**
     * @return Boolean whether there is an override for the default certificate identifier.
     * 
     */
    public Optional<Boolean> customerOverride() {
        return Optional.ofNullable(this.customerOverride);
    }
    /**
     * @return If there is an override for the default certificate identifier, when the override expires.
     * 
     */
    public Optional<String> customerOverrideValidTill() {
        return Optional.ofNullable(this.customerOverrideValidTill);
    }
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    public Optional<Boolean> latestValidTill() {
        return Optional.ofNullable(this.latestValidTill);
    }
    /**
     * @return Thumbprint of the certificate.
     * 
     */
    public Optional<String> thumbprint() {
        return Optional.ofNullable(this.thumbprint);
    }
    /**
     * @return [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8) of certificate starting validity date.
     * 
     */
    public Optional<String> validFrom() {
        return Optional.ofNullable(this.validFrom);
    }
    /**
     * @return [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8) of certificate ending validity date.
     * 
     */
    public Optional<String> validTill() {
        return Optional.ofNullable(this.validTill);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCertificateResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String arn;
        private @Nullable String certificateType;
        private @Nullable Boolean customerOverride;
        private @Nullable String customerOverrideValidTill;
        private @Nullable String id;
        private @Nullable Boolean latestValidTill;
        private @Nullable String thumbprint;
        private @Nullable String validFrom;
        private @Nullable String validTill;
        public Builder() {}
        public Builder(GetCertificateResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.certificateType = defaults.certificateType;
    	      this.customerOverride = defaults.customerOverride;
    	      this.customerOverrideValidTill = defaults.customerOverrideValidTill;
    	      this.id = defaults.id;
    	      this.latestValidTill = defaults.latestValidTill;
    	      this.thumbprint = defaults.thumbprint;
    	      this.validFrom = defaults.validFrom;
    	      this.validTill = defaults.validTill;
        }

        @CustomType.Setter
        public Builder arn(@Nullable String arn) {
            this.arn = arn;
            return this;
        }
        @CustomType.Setter
        public Builder certificateType(@Nullable String certificateType) {
            this.certificateType = certificateType;
            return this;
        }
        @CustomType.Setter
        public Builder customerOverride(@Nullable Boolean customerOverride) {
            this.customerOverride = customerOverride;
            return this;
        }
        @CustomType.Setter
        public Builder customerOverrideValidTill(@Nullable String customerOverrideValidTill) {
            this.customerOverrideValidTill = customerOverrideValidTill;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder latestValidTill(@Nullable Boolean latestValidTill) {
            this.latestValidTill = latestValidTill;
            return this;
        }
        @CustomType.Setter
        public Builder thumbprint(@Nullable String thumbprint) {
            this.thumbprint = thumbprint;
            return this;
        }
        @CustomType.Setter
        public Builder validFrom(@Nullable String validFrom) {
            this.validFrom = validFrom;
            return this;
        }
        @CustomType.Setter
        public Builder validTill(@Nullable String validTill) {
            this.validTill = validTill;
            return this;
        }
        public GetCertificateResult build() {
            final var o = new GetCertificateResult();
            o.arn = arn;
            o.certificateType = certificateType;
            o.customerOverride = customerOverride;
            o.customerOverrideValidTill = customerOverrideValidTill;
            o.id = id;
            o.latestValidTill = latestValidTill;
            o.thumbprint = thumbprint;
            o.validFrom = validFrom;
            o.validTill = validTill;
            return o;
        }
    }
}
