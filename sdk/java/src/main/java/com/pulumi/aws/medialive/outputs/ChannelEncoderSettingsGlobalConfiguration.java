// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.medialive.outputs;

import com.pulumi.aws.medialive.outputs.ChannelEncoderSettingsGlobalConfigurationInputLossBehavior;
import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ChannelEncoderSettingsGlobalConfiguration {
    /**
     * @return Value to set the initial audio gain for the Live Event.
     * 
     */
    private @Nullable Integer initialAudioGain;
    /**
     * @return Indicates the action to take when the current input completes (e.g. end-of-file). When switchAndLoopInputs is configured the encoder will restart at the beginning of the first input. When “none” is configured the encoder will transcode either black, a solid color, or a user specified slate images per the “Input Loss Behavior” configuration until the next input switch occurs (which is controlled through the Channel Schedule API).
     * 
     */
    private @Nullable String inputEndAction;
    /**
     * @return Settings for system actions when input is lost. See Input Loss Behavior for more details.
     * 
     */
    private @Nullable ChannelEncoderSettingsGlobalConfigurationInputLossBehavior inputLossBehavior;
    /**
     * @return Indicates how MediaLive pipelines are synchronized. PIPELINE\_LOCKING - MediaLive will attempt to synchronize the output of each pipeline to the other. EPOCH\_LOCKING - MediaLive will attempt to synchronize the output of each pipeline to the Unix epoch.
     * 
     */
    private @Nullable String outputLockingMode;
    /**
     * @return Indicates whether the rate of frames emitted by the Live encoder should be paced by its system clock (which optionally may be locked to another source via NTP) or should be locked to the clock of the source that is providing the input stream.
     * 
     */
    private @Nullable String outputTimingSource;
    /**
     * @return Adjusts video input buffer for streams with very low video framerates. This is commonly set to enabled for music channels with less than one video frame per second.
     * 
     */
    private @Nullable String supportLowFramerateInputs;

    private ChannelEncoderSettingsGlobalConfiguration() {}
    /**
     * @return Value to set the initial audio gain for the Live Event.
     * 
     */
    public Optional<Integer> initialAudioGain() {
        return Optional.ofNullable(this.initialAudioGain);
    }
    /**
     * @return Indicates the action to take when the current input completes (e.g. end-of-file). When switchAndLoopInputs is configured the encoder will restart at the beginning of the first input. When “none” is configured the encoder will transcode either black, a solid color, or a user specified slate images per the “Input Loss Behavior” configuration until the next input switch occurs (which is controlled through the Channel Schedule API).
     * 
     */
    public Optional<String> inputEndAction() {
        return Optional.ofNullable(this.inputEndAction);
    }
    /**
     * @return Settings for system actions when input is lost. See Input Loss Behavior for more details.
     * 
     */
    public Optional<ChannelEncoderSettingsGlobalConfigurationInputLossBehavior> inputLossBehavior() {
        return Optional.ofNullable(this.inputLossBehavior);
    }
    /**
     * @return Indicates how MediaLive pipelines are synchronized. PIPELINE\_LOCKING - MediaLive will attempt to synchronize the output of each pipeline to the other. EPOCH\_LOCKING - MediaLive will attempt to synchronize the output of each pipeline to the Unix epoch.
     * 
     */
    public Optional<String> outputLockingMode() {
        return Optional.ofNullable(this.outputLockingMode);
    }
    /**
     * @return Indicates whether the rate of frames emitted by the Live encoder should be paced by its system clock (which optionally may be locked to another source via NTP) or should be locked to the clock of the source that is providing the input stream.
     * 
     */
    public Optional<String> outputTimingSource() {
        return Optional.ofNullable(this.outputTimingSource);
    }
    /**
     * @return Adjusts video input buffer for streams with very low video framerates. This is commonly set to enabled for music channels with less than one video frame per second.
     * 
     */
    public Optional<String> supportLowFramerateInputs() {
        return Optional.ofNullable(this.supportLowFramerateInputs);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ChannelEncoderSettingsGlobalConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer initialAudioGain;
        private @Nullable String inputEndAction;
        private @Nullable ChannelEncoderSettingsGlobalConfigurationInputLossBehavior inputLossBehavior;
        private @Nullable String outputLockingMode;
        private @Nullable String outputTimingSource;
        private @Nullable String supportLowFramerateInputs;
        public Builder() {}
        public Builder(ChannelEncoderSettingsGlobalConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.initialAudioGain = defaults.initialAudioGain;
    	      this.inputEndAction = defaults.inputEndAction;
    	      this.inputLossBehavior = defaults.inputLossBehavior;
    	      this.outputLockingMode = defaults.outputLockingMode;
    	      this.outputTimingSource = defaults.outputTimingSource;
    	      this.supportLowFramerateInputs = defaults.supportLowFramerateInputs;
        }

        @CustomType.Setter
        public Builder initialAudioGain(@Nullable Integer initialAudioGain) {
            this.initialAudioGain = initialAudioGain;
            return this;
        }
        @CustomType.Setter
        public Builder inputEndAction(@Nullable String inputEndAction) {
            this.inputEndAction = inputEndAction;
            return this;
        }
        @CustomType.Setter
        public Builder inputLossBehavior(@Nullable ChannelEncoderSettingsGlobalConfigurationInputLossBehavior inputLossBehavior) {
            this.inputLossBehavior = inputLossBehavior;
            return this;
        }
        @CustomType.Setter
        public Builder outputLockingMode(@Nullable String outputLockingMode) {
            this.outputLockingMode = outputLockingMode;
            return this;
        }
        @CustomType.Setter
        public Builder outputTimingSource(@Nullable String outputTimingSource) {
            this.outputTimingSource = outputTimingSource;
            return this;
        }
        @CustomType.Setter
        public Builder supportLowFramerateInputs(@Nullable String supportLowFramerateInputs) {
            this.supportLowFramerateInputs = supportLowFramerateInputs;
            return this;
        }
        public ChannelEncoderSettingsGlobalConfiguration build() {
            final var o = new ChannelEncoderSettingsGlobalConfiguration();
            o.initialAudioGain = initialAudioGain;
            o.inputEndAction = inputEndAction;
            o.inputLossBehavior = inputLossBehavior;
            o.outputLockingMode = outputLockingMode;
            o.outputTimingSource = outputTimingSource;
            o.supportLowFramerateInputs = supportLowFramerateInputs;
            return o;
        }
    }
}
