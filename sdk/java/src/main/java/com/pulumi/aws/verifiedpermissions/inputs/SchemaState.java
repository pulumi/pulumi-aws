// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.verifiedpermissions.inputs;

import com.pulumi.aws.verifiedpermissions.inputs.SchemaDefinitionArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SchemaState extends com.pulumi.resources.ResourceArgs {

    public static final SchemaState Empty = new SchemaState();

    /**
     * The definition of the schema.
     * 
     */
    @Import(name="definition")
    private @Nullable Output<SchemaDefinitionArgs> definition;

    /**
     * @return The definition of the schema.
     * 
     */
    public Optional<Output<SchemaDefinitionArgs>> definition() {
        return Optional.ofNullable(this.definition);
    }

    /**
     * (Optional) Identifies the namespaces of the entities referenced by this schema.
     * 
     */
    @Import(name="namespaces")
    private @Nullable Output<List<String>> namespaces;

    /**
     * @return (Optional) Identifies the namespaces of the entities referenced by this schema.
     * 
     */
    public Optional<Output<List<String>>> namespaces() {
        return Optional.ofNullable(this.namespaces);
    }

    /**
     * The ID of the Policy Store.
     * 
     */
    @Import(name="policyStoreId")
    private @Nullable Output<String> policyStoreId;

    /**
     * @return The ID of the Policy Store.
     * 
     */
    public Optional<Output<String>> policyStoreId() {
        return Optional.ofNullable(this.policyStoreId);
    }

    private SchemaState() {}

    private SchemaState(SchemaState $) {
        this.definition = $.definition;
        this.namespaces = $.namespaces;
        this.policyStoreId = $.policyStoreId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SchemaState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SchemaState $;

        public Builder() {
            $ = new SchemaState();
        }

        public Builder(SchemaState defaults) {
            $ = new SchemaState(Objects.requireNonNull(defaults));
        }

        /**
         * @param definition The definition of the schema.
         * 
         * @return builder
         * 
         */
        public Builder definition(@Nullable Output<SchemaDefinitionArgs> definition) {
            $.definition = definition;
            return this;
        }

        /**
         * @param definition The definition of the schema.
         * 
         * @return builder
         * 
         */
        public Builder definition(SchemaDefinitionArgs definition) {
            return definition(Output.of(definition));
        }

        /**
         * @param namespaces (Optional) Identifies the namespaces of the entities referenced by this schema.
         * 
         * @return builder
         * 
         */
        public Builder namespaces(@Nullable Output<List<String>> namespaces) {
            $.namespaces = namespaces;
            return this;
        }

        /**
         * @param namespaces (Optional) Identifies the namespaces of the entities referenced by this schema.
         * 
         * @return builder
         * 
         */
        public Builder namespaces(List<String> namespaces) {
            return namespaces(Output.of(namespaces));
        }

        /**
         * @param namespaces (Optional) Identifies the namespaces of the entities referenced by this schema.
         * 
         * @return builder
         * 
         */
        public Builder namespaces(String... namespaces) {
            return namespaces(List.of(namespaces));
        }

        /**
         * @param policyStoreId The ID of the Policy Store.
         * 
         * @return builder
         * 
         */
        public Builder policyStoreId(@Nullable Output<String> policyStoreId) {
            $.policyStoreId = policyStoreId;
            return this;
        }

        /**
         * @param policyStoreId The ID of the Policy Store.
         * 
         * @return builder
         * 
         */
        public Builder policyStoreId(String policyStoreId) {
            return policyStoreId(Output.of(policyStoreId));
        }

        public SchemaState build() {
            return $;
        }
    }

}
