// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.acmpca.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class CertificateAuthorityCertificateAuthorityConfigurationSubject {
    /**
     * @return Fully qualified domain name (FQDN) associated with the certificate subject. Must be less than or equal to 64 characters in length.
     * 
     */
    private @Nullable String commonName;
    /**
     * @return Two digit code that specifies the country in which the certificate subject located. Must be less than or equal to 2 characters in length.
     * 
     */
    private @Nullable String country;
    /**
     * @return Disambiguating information for the certificate subject. Must be less than or equal to 64 characters in length.
     * 
     */
    private @Nullable String distinguishedNameQualifier;
    /**
     * @return Typically a qualifier appended to the name of an individual. Examples include Jr. for junior, Sr. for senior, and III for third. Must be less than or equal to 3 characters in length.
     * 
     */
    private @Nullable String generationQualifier;
    /**
     * @return First name. Must be less than or equal to 16 characters in length.
     * 
     */
    private @Nullable String givenName;
    /**
     * @return Concatenation that typically contains the first letter of the `given_name`, the first letter of the middle name if one exists, and the first letter of the `surname`. Must be less than or equal to 5 characters in length.
     * 
     */
    private @Nullable String initials;
    /**
     * @return Locality (such as a city or town) in which the certificate subject is located. Must be less than or equal to 128 characters in length.
     * 
     */
    private @Nullable String locality;
    /**
     * @return Legal name of the organization with which the certificate subject is affiliated. Must be less than or equal to 64 characters in length.
     * 
     */
    private @Nullable String organization;
    /**
     * @return Subdivision or unit of the organization (such as sales or finance) with which the certificate subject is affiliated. Must be less than or equal to 64 characters in length.
     * 
     */
    private @Nullable String organizationalUnit;
    /**
     * @return Typically a shortened version of a longer `given_name`. For example, Jonathan is often shortened to John. Elizabeth is often shortened to Beth, Liz, or Eliza. Must be less than or equal to 128 characters in length.
     * 
     */
    private @Nullable String pseudonym;
    /**
     * @return State in which the subject of the certificate is located. Must be less than or equal to 128 characters in length.
     * 
     */
    private @Nullable String state;
    /**
     * @return Family name. In the US and the UK for example, the surname of an individual is ordered last. In Asian cultures the surname is typically ordered first. Must be less than or equal to 40 characters in length.
     * 
     */
    private @Nullable String surname;
    /**
     * @return Title such as Mr. or Ms. which is pre-pended to the name to refer formally to the certificate subject. Must be less than or equal to 64 characters in length.
     * 
     */
    private @Nullable String title;

    private CertificateAuthorityCertificateAuthorityConfigurationSubject() {}
    /**
     * @return Fully qualified domain name (FQDN) associated with the certificate subject. Must be less than or equal to 64 characters in length.
     * 
     */
    public Optional<String> commonName() {
        return Optional.ofNullable(this.commonName);
    }
    /**
     * @return Two digit code that specifies the country in which the certificate subject located. Must be less than or equal to 2 characters in length.
     * 
     */
    public Optional<String> country() {
        return Optional.ofNullable(this.country);
    }
    /**
     * @return Disambiguating information for the certificate subject. Must be less than or equal to 64 characters in length.
     * 
     */
    public Optional<String> distinguishedNameQualifier() {
        return Optional.ofNullable(this.distinguishedNameQualifier);
    }
    /**
     * @return Typically a qualifier appended to the name of an individual. Examples include Jr. for junior, Sr. for senior, and III for third. Must be less than or equal to 3 characters in length.
     * 
     */
    public Optional<String> generationQualifier() {
        return Optional.ofNullable(this.generationQualifier);
    }
    /**
     * @return First name. Must be less than or equal to 16 characters in length.
     * 
     */
    public Optional<String> givenName() {
        return Optional.ofNullable(this.givenName);
    }
    /**
     * @return Concatenation that typically contains the first letter of the `given_name`, the first letter of the middle name if one exists, and the first letter of the `surname`. Must be less than or equal to 5 characters in length.
     * 
     */
    public Optional<String> initials() {
        return Optional.ofNullable(this.initials);
    }
    /**
     * @return Locality (such as a city or town) in which the certificate subject is located. Must be less than or equal to 128 characters in length.
     * 
     */
    public Optional<String> locality() {
        return Optional.ofNullable(this.locality);
    }
    /**
     * @return Legal name of the organization with which the certificate subject is affiliated. Must be less than or equal to 64 characters in length.
     * 
     */
    public Optional<String> organization() {
        return Optional.ofNullable(this.organization);
    }
    /**
     * @return Subdivision or unit of the organization (such as sales or finance) with which the certificate subject is affiliated. Must be less than or equal to 64 characters in length.
     * 
     */
    public Optional<String> organizationalUnit() {
        return Optional.ofNullable(this.organizationalUnit);
    }
    /**
     * @return Typically a shortened version of a longer `given_name`. For example, Jonathan is often shortened to John. Elizabeth is often shortened to Beth, Liz, or Eliza. Must be less than or equal to 128 characters in length.
     * 
     */
    public Optional<String> pseudonym() {
        return Optional.ofNullable(this.pseudonym);
    }
    /**
     * @return State in which the subject of the certificate is located. Must be less than or equal to 128 characters in length.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    /**
     * @return Family name. In the US and the UK for example, the surname of an individual is ordered last. In Asian cultures the surname is typically ordered first. Must be less than or equal to 40 characters in length.
     * 
     */
    public Optional<String> surname() {
        return Optional.ofNullable(this.surname);
    }
    /**
     * @return Title such as Mr. or Ms. which is pre-pended to the name to refer formally to the certificate subject. Must be less than or equal to 64 characters in length.
     * 
     */
    public Optional<String> title() {
        return Optional.ofNullable(this.title);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CertificateAuthorityCertificateAuthorityConfigurationSubject defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String commonName;
        private @Nullable String country;
        private @Nullable String distinguishedNameQualifier;
        private @Nullable String generationQualifier;
        private @Nullable String givenName;
        private @Nullable String initials;
        private @Nullable String locality;
        private @Nullable String organization;
        private @Nullable String organizationalUnit;
        private @Nullable String pseudonym;
        private @Nullable String state;
        private @Nullable String surname;
        private @Nullable String title;
        public Builder() {}
        public Builder(CertificateAuthorityCertificateAuthorityConfigurationSubject defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.commonName = defaults.commonName;
    	      this.country = defaults.country;
    	      this.distinguishedNameQualifier = defaults.distinguishedNameQualifier;
    	      this.generationQualifier = defaults.generationQualifier;
    	      this.givenName = defaults.givenName;
    	      this.initials = defaults.initials;
    	      this.locality = defaults.locality;
    	      this.organization = defaults.organization;
    	      this.organizationalUnit = defaults.organizationalUnit;
    	      this.pseudonym = defaults.pseudonym;
    	      this.state = defaults.state;
    	      this.surname = defaults.surname;
    	      this.title = defaults.title;
        }

        @CustomType.Setter
        public Builder commonName(@Nullable String commonName) {
            this.commonName = commonName;
            return this;
        }
        @CustomType.Setter
        public Builder country(@Nullable String country) {
            this.country = country;
            return this;
        }
        @CustomType.Setter
        public Builder distinguishedNameQualifier(@Nullable String distinguishedNameQualifier) {
            this.distinguishedNameQualifier = distinguishedNameQualifier;
            return this;
        }
        @CustomType.Setter
        public Builder generationQualifier(@Nullable String generationQualifier) {
            this.generationQualifier = generationQualifier;
            return this;
        }
        @CustomType.Setter
        public Builder givenName(@Nullable String givenName) {
            this.givenName = givenName;
            return this;
        }
        @CustomType.Setter
        public Builder initials(@Nullable String initials) {
            this.initials = initials;
            return this;
        }
        @CustomType.Setter
        public Builder locality(@Nullable String locality) {
            this.locality = locality;
            return this;
        }
        @CustomType.Setter
        public Builder organization(@Nullable String organization) {
            this.organization = organization;
            return this;
        }
        @CustomType.Setter
        public Builder organizationalUnit(@Nullable String organizationalUnit) {
            this.organizationalUnit = organizationalUnit;
            return this;
        }
        @CustomType.Setter
        public Builder pseudonym(@Nullable String pseudonym) {
            this.pseudonym = pseudonym;
            return this;
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder surname(@Nullable String surname) {
            this.surname = surname;
            return this;
        }
        @CustomType.Setter
        public Builder title(@Nullable String title) {
            this.title = title;
            return this;
        }
        public CertificateAuthorityCertificateAuthorityConfigurationSubject build() {
            final var _resultValue = new CertificateAuthorityCertificateAuthorityConfigurationSubject();
            _resultValue.commonName = commonName;
            _resultValue.country = country;
            _resultValue.distinguishedNameQualifier = distinguishedNameQualifier;
            _resultValue.generationQualifier = generationQualifier;
            _resultValue.givenName = givenName;
            _resultValue.initials = initials;
            _resultValue.locality = locality;
            _resultValue.organization = organization;
            _resultValue.organizationalUnit = organizationalUnit;
            _resultValue.pseudonym = pseudonym;
            _resultValue.state = state;
            _resultValue.surname = surname;
            _resultValue.title = title;
            return _resultValue;
        }
    }
}
