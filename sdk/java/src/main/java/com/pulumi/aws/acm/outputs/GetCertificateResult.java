// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.acm.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetCertificateResult {
    /**
     * @return ARN of the found certificate, suitable for referencing in other resources that support ACM certificates.
     * 
     */
    private String arn;
    /**
     * @return ACM-issued certificate.
     * 
     */
    private String certificate;
    /**
     * @return Certificates forming the requested ACM-issued certificate&#39;s chain of trust. The chain consists of the certificate of the issuing CA and the intermediate certificates of any other subordinate CAs.
     * 
     */
    private String certificateChain;
    private String domain;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private @Nullable List<String> keyTypes;
    private @Nullable Boolean mostRecent;
    /**
     * @return Status of the found certificate.
     * 
     */
    private String status;
    private @Nullable List<String> statuses;
    /**
     * @return Mapping of tags for the resource.
     * 
     */
    private Map<String,String> tags;
    private @Nullable List<String> types;

    private GetCertificateResult() {}
    /**
     * @return ARN of the found certificate, suitable for referencing in other resources that support ACM certificates.
     * 
     */
    public String arn() {
        return this.arn;
    }
    /**
     * @return ACM-issued certificate.
     * 
     */
    public String certificate() {
        return this.certificate;
    }
    /**
     * @return Certificates forming the requested ACM-issued certificate&#39;s chain of trust. The chain consists of the certificate of the issuing CA and the intermediate certificates of any other subordinate CAs.
     * 
     */
    public String certificateChain() {
        return this.certificateChain;
    }
    public String domain() {
        return this.domain;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public List<String> keyTypes() {
        return this.keyTypes == null ? List.of() : this.keyTypes;
    }
    public Optional<Boolean> mostRecent() {
        return Optional.ofNullable(this.mostRecent);
    }
    /**
     * @return Status of the found certificate.
     * 
     */
    public String status() {
        return this.status;
    }
    public List<String> statuses() {
        return this.statuses == null ? List.of() : this.statuses;
    }
    /**
     * @return Mapping of tags for the resource.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }
    public List<String> types() {
        return this.types == null ? List.of() : this.types;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCertificateResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String arn;
        private String certificate;
        private String certificateChain;
        private String domain;
        private String id;
        private @Nullable List<String> keyTypes;
        private @Nullable Boolean mostRecent;
        private String status;
        private @Nullable List<String> statuses;
        private Map<String,String> tags;
        private @Nullable List<String> types;
        public Builder() {}
        public Builder(GetCertificateResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.certificate = defaults.certificate;
    	      this.certificateChain = defaults.certificateChain;
    	      this.domain = defaults.domain;
    	      this.id = defaults.id;
    	      this.keyTypes = defaults.keyTypes;
    	      this.mostRecent = defaults.mostRecent;
    	      this.status = defaults.status;
    	      this.statuses = defaults.statuses;
    	      this.tags = defaults.tags;
    	      this.types = defaults.types;
        }

        @CustomType.Setter
        public Builder arn(String arn) {
            if (arn == null) {
              throw new MissingRequiredPropertyException("GetCertificateResult", "arn");
            }
            this.arn = arn;
            return this;
        }
        @CustomType.Setter
        public Builder certificate(String certificate) {
            if (certificate == null) {
              throw new MissingRequiredPropertyException("GetCertificateResult", "certificate");
            }
            this.certificate = certificate;
            return this;
        }
        @CustomType.Setter
        public Builder certificateChain(String certificateChain) {
            if (certificateChain == null) {
              throw new MissingRequiredPropertyException("GetCertificateResult", "certificateChain");
            }
            this.certificateChain = certificateChain;
            return this;
        }
        @CustomType.Setter
        public Builder domain(String domain) {
            if (domain == null) {
              throw new MissingRequiredPropertyException("GetCertificateResult", "domain");
            }
            this.domain = domain;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetCertificateResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder keyTypes(@Nullable List<String> keyTypes) {

            this.keyTypes = keyTypes;
            return this;
        }
        public Builder keyTypes(String... keyTypes) {
            return keyTypes(List.of(keyTypes));
        }
        @CustomType.Setter
        public Builder mostRecent(@Nullable Boolean mostRecent) {

            this.mostRecent = mostRecent;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetCertificateResult", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder statuses(@Nullable List<String> statuses) {

            this.statuses = statuses;
            return this;
        }
        public Builder statuses(String... statuses) {
            return statuses(List.of(statuses));
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetCertificateResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder types(@Nullable List<String> types) {

            this.types = types;
            return this;
        }
        public Builder types(String... types) {
            return types(List.of(types));
        }
        public GetCertificateResult build() {
            final var _resultValue = new GetCertificateResult();
            _resultValue.arn = arn;
            _resultValue.certificate = certificate;
            _resultValue.certificateChain = certificateChain;
            _resultValue.domain = domain;
            _resultValue.id = id;
            _resultValue.keyTypes = keyTypes;
            _resultValue.mostRecent = mostRecent;
            _resultValue.status = status;
            _resultValue.statuses = statuses;
            _resultValue.tags = tags;
            _resultValue.types = types;
            return _resultValue;
        }
    }
}
