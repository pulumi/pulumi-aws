// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.outputs;

import com.pulumi.aws.quicksight.outputs.Column;
import com.pulumi.aws.quicksight.outputs.FiltersTopBottomFilterAggregationSortConfiguration;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class FiltersTopBottomFilter {
    private List<FiltersTopBottomFilterAggregationSortConfiguration> aggregationSortConfigurations;
    private Column column;
    private String filterId;
    private @Nullable Integer limit;
    private @Nullable String parameterName;
    private String timeGranularity;

    private FiltersTopBottomFilter() {}
    public List<FiltersTopBottomFilterAggregationSortConfiguration> aggregationSortConfigurations() {
        return this.aggregationSortConfigurations;
    }
    public Column column() {
        return this.column;
    }
    public String filterId() {
        return this.filterId;
    }
    public Optional<Integer> limit() {
        return Optional.ofNullable(this.limit);
    }
    public Optional<String> parameterName() {
        return Optional.ofNullable(this.parameterName);
    }
    public String timeGranularity() {
        return this.timeGranularity;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FiltersTopBottomFilter defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<FiltersTopBottomFilterAggregationSortConfiguration> aggregationSortConfigurations;
        private Column column;
        private String filterId;
        private @Nullable Integer limit;
        private @Nullable String parameterName;
        private String timeGranularity;
        public Builder() {}
        public Builder(FiltersTopBottomFilter defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aggregationSortConfigurations = defaults.aggregationSortConfigurations;
    	      this.column = defaults.column;
    	      this.filterId = defaults.filterId;
    	      this.limit = defaults.limit;
    	      this.parameterName = defaults.parameterName;
    	      this.timeGranularity = defaults.timeGranularity;
        }

        @CustomType.Setter
        public Builder aggregationSortConfigurations(List<FiltersTopBottomFilterAggregationSortConfiguration> aggregationSortConfigurations) {
            if (aggregationSortConfigurations == null) {
              throw new MissingRequiredPropertyException("FiltersTopBottomFilter", "aggregationSortConfigurations");
            }
            this.aggregationSortConfigurations = aggregationSortConfigurations;
            return this;
        }
        public Builder aggregationSortConfigurations(FiltersTopBottomFilterAggregationSortConfiguration... aggregationSortConfigurations) {
            return aggregationSortConfigurations(List.of(aggregationSortConfigurations));
        }
        @CustomType.Setter
        public Builder column(Column column) {
            if (column == null) {
              throw new MissingRequiredPropertyException("FiltersTopBottomFilter", "column");
            }
            this.column = column;
            return this;
        }
        @CustomType.Setter
        public Builder filterId(String filterId) {
            if (filterId == null) {
              throw new MissingRequiredPropertyException("FiltersTopBottomFilter", "filterId");
            }
            this.filterId = filterId;
            return this;
        }
        @CustomType.Setter
        public Builder limit(@Nullable Integer limit) {

            this.limit = limit;
            return this;
        }
        @CustomType.Setter
        public Builder parameterName(@Nullable String parameterName) {

            this.parameterName = parameterName;
            return this;
        }
        @CustomType.Setter
        public Builder timeGranularity(String timeGranularity) {
            if (timeGranularity == null) {
              throw new MissingRequiredPropertyException("FiltersTopBottomFilter", "timeGranularity");
            }
            this.timeGranularity = timeGranularity;
            return this;
        }
        public FiltersTopBottomFilter build() {
            final var _resultValue = new FiltersTopBottomFilter();
            _resultValue.aggregationSortConfigurations = aggregationSortConfigurations;
            _resultValue.column = column;
            _resultValue.filterId = filterId;
            _resultValue.limit = limit;
            _resultValue.parameterName = parameterName;
            _resultValue.timeGranularity = timeGranularity;
            return _resultValue;
        }
    }
}
