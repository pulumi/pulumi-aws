// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.appconfig.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetConfigurationProfileArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetConfigurationProfileArgs Empty = new GetConfigurationProfileArgs();

    /**
     * ID of the AppConfig application to which this configuration profile belongs.
     * 
     */
    @Import(name="applicationId", required=true)
    private Output<String> applicationId;

    /**
     * @return ID of the AppConfig application to which this configuration profile belongs.
     * 
     */
    public Output<String> applicationId() {
        return this.applicationId;
    }

    /**
     * ID of the Configuration Profile.
     * 
     */
    @Import(name="configurationProfileId", required=true)
    private Output<String> configurationProfileId;

    /**
     * @return ID of the Configuration Profile.
     * 
     */
    public Output<String> configurationProfileId() {
        return this.configurationProfileId;
    }

    /**
     * Map of tags for the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Map of tags for the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private GetConfigurationProfileArgs() {}

    private GetConfigurationProfileArgs(GetConfigurationProfileArgs $) {
        this.applicationId = $.applicationId;
        this.configurationProfileId = $.configurationProfileId;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetConfigurationProfileArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetConfigurationProfileArgs $;

        public Builder() {
            $ = new GetConfigurationProfileArgs();
        }

        public Builder(GetConfigurationProfileArgs defaults) {
            $ = new GetConfigurationProfileArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param applicationId ID of the AppConfig application to which this configuration profile belongs.
         * 
         * @return builder
         * 
         */
        public Builder applicationId(Output<String> applicationId) {
            $.applicationId = applicationId;
            return this;
        }

        /**
         * @param applicationId ID of the AppConfig application to which this configuration profile belongs.
         * 
         * @return builder
         * 
         */
        public Builder applicationId(String applicationId) {
            return applicationId(Output.of(applicationId));
        }

        /**
         * @param configurationProfileId ID of the Configuration Profile.
         * 
         * @return builder
         * 
         */
        public Builder configurationProfileId(Output<String> configurationProfileId) {
            $.configurationProfileId = configurationProfileId;
            return this;
        }

        /**
         * @param configurationProfileId ID of the Configuration Profile.
         * 
         * @return builder
         * 
         */
        public Builder configurationProfileId(String configurationProfileId) {
            return configurationProfileId(Output.of(configurationProfileId));
        }

        /**
         * @param tags Map of tags for the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Map of tags for the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public GetConfigurationProfileArgs build() {
            $.applicationId = Objects.requireNonNull($.applicationId, "expected parameter 'applicationId' to be non-null");
            $.configurationProfileId = Objects.requireNonNull($.configurationProfileId, "expected parameter 'configurationProfileId' to be non-null");
            return $;
        }
    }

}
