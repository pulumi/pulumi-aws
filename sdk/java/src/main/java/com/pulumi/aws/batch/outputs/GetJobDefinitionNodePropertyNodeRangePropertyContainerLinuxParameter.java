// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.batch.outputs;

import com.pulumi.aws.batch.outputs.GetJobDefinitionNodePropertyNodeRangePropertyContainerLinuxParameterDevice;
import com.pulumi.aws.batch.outputs.GetJobDefinitionNodePropertyNodeRangePropertyContainerLinuxParameterTmpf;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetJobDefinitionNodePropertyNodeRangePropertyContainerLinuxParameter {
    /**
     * @return Any of the host devices to expose to the container.
     * 
     */
    private List<GetJobDefinitionNodePropertyNodeRangePropertyContainerLinuxParameterDevice> devices;
    /**
     * @return If true, run an init process inside the container that forwards signals and reaps processes.
     * 
     */
    private Boolean initProcessEnabled;
    /**
     * @return The total amount of swap memory (in MiB) a container can use.
     * 
     */
    private Integer maxSwap;
    /**
     * @return The value for the size (in MiB) of the `/dev/shm` volume.
     * 
     */
    private Integer sharedMemorySize;
    /**
     * @return You can use this parameter to tune a container&#39;s memory swappiness behavior.
     * 
     */
    private Integer swappiness;
    /**
     * @return The container path, mount options, and size (in MiB) of the tmpfs mount.
     * 
     */
    private List<GetJobDefinitionNodePropertyNodeRangePropertyContainerLinuxParameterTmpf> tmpfs;

    private GetJobDefinitionNodePropertyNodeRangePropertyContainerLinuxParameter() {}
    /**
     * @return Any of the host devices to expose to the container.
     * 
     */
    public List<GetJobDefinitionNodePropertyNodeRangePropertyContainerLinuxParameterDevice> devices() {
        return this.devices;
    }
    /**
     * @return If true, run an init process inside the container that forwards signals and reaps processes.
     * 
     */
    public Boolean initProcessEnabled() {
        return this.initProcessEnabled;
    }
    /**
     * @return The total amount of swap memory (in MiB) a container can use.
     * 
     */
    public Integer maxSwap() {
        return this.maxSwap;
    }
    /**
     * @return The value for the size (in MiB) of the `/dev/shm` volume.
     * 
     */
    public Integer sharedMemorySize() {
        return this.sharedMemorySize;
    }
    /**
     * @return You can use this parameter to tune a container&#39;s memory swappiness behavior.
     * 
     */
    public Integer swappiness() {
        return this.swappiness;
    }
    /**
     * @return The container path, mount options, and size (in MiB) of the tmpfs mount.
     * 
     */
    public List<GetJobDefinitionNodePropertyNodeRangePropertyContainerLinuxParameterTmpf> tmpfs() {
        return this.tmpfs;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetJobDefinitionNodePropertyNodeRangePropertyContainerLinuxParameter defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetJobDefinitionNodePropertyNodeRangePropertyContainerLinuxParameterDevice> devices;
        private Boolean initProcessEnabled;
        private Integer maxSwap;
        private Integer sharedMemorySize;
        private Integer swappiness;
        private List<GetJobDefinitionNodePropertyNodeRangePropertyContainerLinuxParameterTmpf> tmpfs;
        public Builder() {}
        public Builder(GetJobDefinitionNodePropertyNodeRangePropertyContainerLinuxParameter defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.devices = defaults.devices;
    	      this.initProcessEnabled = defaults.initProcessEnabled;
    	      this.maxSwap = defaults.maxSwap;
    	      this.sharedMemorySize = defaults.sharedMemorySize;
    	      this.swappiness = defaults.swappiness;
    	      this.tmpfs = defaults.tmpfs;
        }

        @CustomType.Setter
        public Builder devices(List<GetJobDefinitionNodePropertyNodeRangePropertyContainerLinuxParameterDevice> devices) {
            if (devices == null) {
              throw new MissingRequiredPropertyException("GetJobDefinitionNodePropertyNodeRangePropertyContainerLinuxParameter", "devices");
            }
            this.devices = devices;
            return this;
        }
        public Builder devices(GetJobDefinitionNodePropertyNodeRangePropertyContainerLinuxParameterDevice... devices) {
            return devices(List.of(devices));
        }
        @CustomType.Setter
        public Builder initProcessEnabled(Boolean initProcessEnabled) {
            if (initProcessEnabled == null) {
              throw new MissingRequiredPropertyException("GetJobDefinitionNodePropertyNodeRangePropertyContainerLinuxParameter", "initProcessEnabled");
            }
            this.initProcessEnabled = initProcessEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder maxSwap(Integer maxSwap) {
            if (maxSwap == null) {
              throw new MissingRequiredPropertyException("GetJobDefinitionNodePropertyNodeRangePropertyContainerLinuxParameter", "maxSwap");
            }
            this.maxSwap = maxSwap;
            return this;
        }
        @CustomType.Setter
        public Builder sharedMemorySize(Integer sharedMemorySize) {
            if (sharedMemorySize == null) {
              throw new MissingRequiredPropertyException("GetJobDefinitionNodePropertyNodeRangePropertyContainerLinuxParameter", "sharedMemorySize");
            }
            this.sharedMemorySize = sharedMemorySize;
            return this;
        }
        @CustomType.Setter
        public Builder swappiness(Integer swappiness) {
            if (swappiness == null) {
              throw new MissingRequiredPropertyException("GetJobDefinitionNodePropertyNodeRangePropertyContainerLinuxParameter", "swappiness");
            }
            this.swappiness = swappiness;
            return this;
        }
        @CustomType.Setter
        public Builder tmpfs(List<GetJobDefinitionNodePropertyNodeRangePropertyContainerLinuxParameterTmpf> tmpfs) {
            if (tmpfs == null) {
              throw new MissingRequiredPropertyException("GetJobDefinitionNodePropertyNodeRangePropertyContainerLinuxParameter", "tmpfs");
            }
            this.tmpfs = tmpfs;
            return this;
        }
        public Builder tmpfs(GetJobDefinitionNodePropertyNodeRangePropertyContainerLinuxParameterTmpf... tmpfs) {
            return tmpfs(List.of(tmpfs));
        }
        public GetJobDefinitionNodePropertyNodeRangePropertyContainerLinuxParameter build() {
            final var _resultValue = new GetJobDefinitionNodePropertyNodeRangePropertyContainerLinuxParameter();
            _resultValue.devices = devices;
            _resultValue.initProcessEnabled = initProcessEnabled;
            _resultValue.maxSwap = maxSwap;
            _resultValue.sharedMemorySize = sharedMemorySize;
            _resultValue.swappiness = swappiness;
            _resultValue.tmpfs = tmpfs;
            return _resultValue;
        }
    }
}
