// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.waf.outputs;

import com.pulumi.aws.waf.outputs.SizeConstraintSetSizeConstraintFieldToMatch;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class SizeConstraintSetSizeConstraint {
    private String comparisonOperator;
    private SizeConstraintSetSizeConstraintFieldToMatch fieldToMatch;
    private Integer size;
    private String textTransformation;

    private SizeConstraintSetSizeConstraint() {}
    public String comparisonOperator() {
        return this.comparisonOperator;
    }
    public SizeConstraintSetSizeConstraintFieldToMatch fieldToMatch() {
        return this.fieldToMatch;
    }
    public Integer size() {
        return this.size;
    }
    public String textTransformation() {
        return this.textTransformation;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SizeConstraintSetSizeConstraint defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String comparisonOperator;
        private SizeConstraintSetSizeConstraintFieldToMatch fieldToMatch;
        private Integer size;
        private String textTransformation;
        public Builder() {}
        public Builder(SizeConstraintSetSizeConstraint defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.comparisonOperator = defaults.comparisonOperator;
    	      this.fieldToMatch = defaults.fieldToMatch;
    	      this.size = defaults.size;
    	      this.textTransformation = defaults.textTransformation;
        }

        @CustomType.Setter
        public Builder comparisonOperator(String comparisonOperator) {
            if (comparisonOperator == null) {
              throw new MissingRequiredPropertyException("SizeConstraintSetSizeConstraint", "comparisonOperator");
            }
            this.comparisonOperator = comparisonOperator;
            return this;
        }
        @CustomType.Setter
        public Builder fieldToMatch(SizeConstraintSetSizeConstraintFieldToMatch fieldToMatch) {
            if (fieldToMatch == null) {
              throw new MissingRequiredPropertyException("SizeConstraintSetSizeConstraint", "fieldToMatch");
            }
            this.fieldToMatch = fieldToMatch;
            return this;
        }
        @CustomType.Setter
        public Builder size(Integer size) {
            if (size == null) {
              throw new MissingRequiredPropertyException("SizeConstraintSetSizeConstraint", "size");
            }
            this.size = size;
            return this;
        }
        @CustomType.Setter
        public Builder textTransformation(String textTransformation) {
            if (textTransformation == null) {
              throw new MissingRequiredPropertyException("SizeConstraintSetSizeConstraint", "textTransformation");
            }
            this.textTransformation = textTransformation;
            return this;
        }
        public SizeConstraintSetSizeConstraint build() {
            final var _resultValue = new SizeConstraintSetSizeConstraint();
            _resultValue.comparisonOperator = comparisonOperator;
            _resultValue.fieldToMatch = fieldToMatch;
            _resultValue.size = size;
            _resultValue.textTransformation = textTransformation;
            return _resultValue;
        }
    }
}
