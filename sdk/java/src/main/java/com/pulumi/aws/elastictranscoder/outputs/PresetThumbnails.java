// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.elastictranscoder.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class PresetThumbnails {
    /**
     * @return The aspect ratio of thumbnails. The following values are valid: auto, 1:1, 4:3, 3:2, 16:9
     * 
     */
    private @Nullable String aspectRatio;
    /**
     * @return The format of thumbnails, if any. Valid formats are jpg and png.
     * 
     */
    private @Nullable String format;
    /**
     * @return The approximate number of seconds between thumbnails. The value must be an integer. The actual interval can vary by several seconds from one thumbnail to the next.
     * 
     */
    private @Nullable String interval;
    /**
     * @return The maximum height of thumbnails, in pixels. If you specify auto, Elastic Transcoder uses 1080 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 32 and 3072, inclusive.
     * 
     */
    private @Nullable String maxHeight;
    /**
     * @return The maximum width of thumbnails, in pixels. If you specify auto, Elastic Transcoder uses 1920 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 32 and 4096, inclusive.
     * 
     */
    private @Nullable String maxWidth;
    /**
     * @return When you set PaddingPolicy to Pad, Elastic Transcoder might add black bars to the top and bottom and/or left and right sides of thumbnails to make the total size of the thumbnails match the values that you specified for thumbnail MaxWidth and MaxHeight settings.
     * 
     */
    private @Nullable String paddingPolicy;
    /**
     * @return The width and height of thumbnail files in pixels, in the format WidthxHeight, where both values are even integers. The values cannot exceed the width and height that you specified in the Video:Resolution object. (To better control resolution and aspect ratio of thumbnails, we recommend that you use the thumbnail values `max_width`, `max_height`, `sizing_policy`, and `padding_policy` instead of `resolution` and `aspect_ratio`. The two groups of settings are mutually exclusive. Do not use them together)
     * 
     */
    private @Nullable String resolution;
    /**
     * @return A value that controls scaling of thumbnails. Valid values are: `Fit`, `Fill`, `Stretch`, `Keep`, `ShrinkToFit`, and `ShrinkToFill`.
     * 
     */
    private @Nullable String sizingPolicy;

    private PresetThumbnails() {}
    /**
     * @return The aspect ratio of thumbnails. The following values are valid: auto, 1:1, 4:3, 3:2, 16:9
     * 
     */
    public Optional<String> aspectRatio() {
        return Optional.ofNullable(this.aspectRatio);
    }
    /**
     * @return The format of thumbnails, if any. Valid formats are jpg and png.
     * 
     */
    public Optional<String> format() {
        return Optional.ofNullable(this.format);
    }
    /**
     * @return The approximate number of seconds between thumbnails. The value must be an integer. The actual interval can vary by several seconds from one thumbnail to the next.
     * 
     */
    public Optional<String> interval() {
        return Optional.ofNullable(this.interval);
    }
    /**
     * @return The maximum height of thumbnails, in pixels. If you specify auto, Elastic Transcoder uses 1080 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 32 and 3072, inclusive.
     * 
     */
    public Optional<String> maxHeight() {
        return Optional.ofNullable(this.maxHeight);
    }
    /**
     * @return The maximum width of thumbnails, in pixels. If you specify auto, Elastic Transcoder uses 1920 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 32 and 4096, inclusive.
     * 
     */
    public Optional<String> maxWidth() {
        return Optional.ofNullable(this.maxWidth);
    }
    /**
     * @return When you set PaddingPolicy to Pad, Elastic Transcoder might add black bars to the top and bottom and/or left and right sides of thumbnails to make the total size of the thumbnails match the values that you specified for thumbnail MaxWidth and MaxHeight settings.
     * 
     */
    public Optional<String> paddingPolicy() {
        return Optional.ofNullable(this.paddingPolicy);
    }
    /**
     * @return The width and height of thumbnail files in pixels, in the format WidthxHeight, where both values are even integers. The values cannot exceed the width and height that you specified in the Video:Resolution object. (To better control resolution and aspect ratio of thumbnails, we recommend that you use the thumbnail values `max_width`, `max_height`, `sizing_policy`, and `padding_policy` instead of `resolution` and `aspect_ratio`. The two groups of settings are mutually exclusive. Do not use them together)
     * 
     */
    public Optional<String> resolution() {
        return Optional.ofNullable(this.resolution);
    }
    /**
     * @return A value that controls scaling of thumbnails. Valid values are: `Fit`, `Fill`, `Stretch`, `Keep`, `ShrinkToFit`, and `ShrinkToFill`.
     * 
     */
    public Optional<String> sizingPolicy() {
        return Optional.ofNullable(this.sizingPolicy);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PresetThumbnails defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String aspectRatio;
        private @Nullable String format;
        private @Nullable String interval;
        private @Nullable String maxHeight;
        private @Nullable String maxWidth;
        private @Nullable String paddingPolicy;
        private @Nullable String resolution;
        private @Nullable String sizingPolicy;
        public Builder() {}
        public Builder(PresetThumbnails defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aspectRatio = defaults.aspectRatio;
    	      this.format = defaults.format;
    	      this.interval = defaults.interval;
    	      this.maxHeight = defaults.maxHeight;
    	      this.maxWidth = defaults.maxWidth;
    	      this.paddingPolicy = defaults.paddingPolicy;
    	      this.resolution = defaults.resolution;
    	      this.sizingPolicy = defaults.sizingPolicy;
        }

        @CustomType.Setter
        public Builder aspectRatio(@Nullable String aspectRatio) {
            this.aspectRatio = aspectRatio;
            return this;
        }
        @CustomType.Setter
        public Builder format(@Nullable String format) {
            this.format = format;
            return this;
        }
        @CustomType.Setter
        public Builder interval(@Nullable String interval) {
            this.interval = interval;
            return this;
        }
        @CustomType.Setter
        public Builder maxHeight(@Nullable String maxHeight) {
            this.maxHeight = maxHeight;
            return this;
        }
        @CustomType.Setter
        public Builder maxWidth(@Nullable String maxWidth) {
            this.maxWidth = maxWidth;
            return this;
        }
        @CustomType.Setter
        public Builder paddingPolicy(@Nullable String paddingPolicy) {
            this.paddingPolicy = paddingPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder resolution(@Nullable String resolution) {
            this.resolution = resolution;
            return this;
        }
        @CustomType.Setter
        public Builder sizingPolicy(@Nullable String sizingPolicy) {
            this.sizingPolicy = sizingPolicy;
            return this;
        }
        public PresetThumbnails build() {
            final var _resultValue = new PresetThumbnails();
            _resultValue.aspectRatio = aspectRatio;
            _resultValue.format = format;
            _resultValue.interval = interval;
            _resultValue.maxHeight = maxHeight;
            _resultValue.maxWidth = maxWidth;
            _resultValue.paddingPolicy = paddingPolicy;
            _resultValue.resolution = resolution;
            _resultValue.sizingPolicy = sizingPolicy;
            return _resultValue;
        }
    }
}
