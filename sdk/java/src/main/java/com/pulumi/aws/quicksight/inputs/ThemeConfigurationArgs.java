// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.inputs;

import com.pulumi.aws.quicksight.inputs.ThemeConfigurationDataColorPaletteArgs;
import com.pulumi.aws.quicksight.inputs.ThemeConfigurationSheetArgs;
import com.pulumi.aws.quicksight.inputs.ThemeConfigurationTypographyArgs;
import com.pulumi.aws.quicksight.inputs.ThemeConfigurationUiColorPaletteArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ThemeConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final ThemeConfigurationArgs Empty = new ThemeConfigurationArgs();

    /**
     * Color properties that apply to chart data colors. See data_color_palette.
     * 
     */
    @Import(name="dataColorPalette")
    private @Nullable Output<ThemeConfigurationDataColorPaletteArgs> dataColorPalette;

    /**
     * @return Color properties that apply to chart data colors. See data_color_palette.
     * 
     */
    public Optional<Output<ThemeConfigurationDataColorPaletteArgs>> dataColorPalette() {
        return Optional.ofNullable(this.dataColorPalette);
    }

    /**
     * Display options related to sheets. See sheet.
     * 
     */
    @Import(name="sheet")
    private @Nullable Output<ThemeConfigurationSheetArgs> sheet;

    /**
     * @return Display options related to sheets. See sheet.
     * 
     */
    public Optional<Output<ThemeConfigurationSheetArgs>> sheet() {
        return Optional.ofNullable(this.sheet);
    }

    /**
     * Determines the typography options. See typography.
     * 
     */
    @Import(name="typography")
    private @Nullable Output<ThemeConfigurationTypographyArgs> typography;

    /**
     * @return Determines the typography options. See typography.
     * 
     */
    public Optional<Output<ThemeConfigurationTypographyArgs>> typography() {
        return Optional.ofNullable(this.typography);
    }

    /**
     * Color properties that apply to the UI and to charts, excluding the colors that apply to data. See ui_color_palette.
     * 
     */
    @Import(name="uiColorPalette")
    private @Nullable Output<ThemeConfigurationUiColorPaletteArgs> uiColorPalette;

    /**
     * @return Color properties that apply to the UI and to charts, excluding the colors that apply to data. See ui_color_palette.
     * 
     */
    public Optional<Output<ThemeConfigurationUiColorPaletteArgs>> uiColorPalette() {
        return Optional.ofNullable(this.uiColorPalette);
    }

    private ThemeConfigurationArgs() {}

    private ThemeConfigurationArgs(ThemeConfigurationArgs $) {
        this.dataColorPalette = $.dataColorPalette;
        this.sheet = $.sheet;
        this.typography = $.typography;
        this.uiColorPalette = $.uiColorPalette;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ThemeConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ThemeConfigurationArgs $;

        public Builder() {
            $ = new ThemeConfigurationArgs();
        }

        public Builder(ThemeConfigurationArgs defaults) {
            $ = new ThemeConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dataColorPalette Color properties that apply to chart data colors. See data_color_palette.
         * 
         * @return builder
         * 
         */
        public Builder dataColorPalette(@Nullable Output<ThemeConfigurationDataColorPaletteArgs> dataColorPalette) {
            $.dataColorPalette = dataColorPalette;
            return this;
        }

        /**
         * @param dataColorPalette Color properties that apply to chart data colors. See data_color_palette.
         * 
         * @return builder
         * 
         */
        public Builder dataColorPalette(ThemeConfigurationDataColorPaletteArgs dataColorPalette) {
            return dataColorPalette(Output.of(dataColorPalette));
        }

        /**
         * @param sheet Display options related to sheets. See sheet.
         * 
         * @return builder
         * 
         */
        public Builder sheet(@Nullable Output<ThemeConfigurationSheetArgs> sheet) {
            $.sheet = sheet;
            return this;
        }

        /**
         * @param sheet Display options related to sheets. See sheet.
         * 
         * @return builder
         * 
         */
        public Builder sheet(ThemeConfigurationSheetArgs sheet) {
            return sheet(Output.of(sheet));
        }

        /**
         * @param typography Determines the typography options. See typography.
         * 
         * @return builder
         * 
         */
        public Builder typography(@Nullable Output<ThemeConfigurationTypographyArgs> typography) {
            $.typography = typography;
            return this;
        }

        /**
         * @param typography Determines the typography options. See typography.
         * 
         * @return builder
         * 
         */
        public Builder typography(ThemeConfigurationTypographyArgs typography) {
            return typography(Output.of(typography));
        }

        /**
         * @param uiColorPalette Color properties that apply to the UI and to charts, excluding the colors that apply to data. See ui_color_palette.
         * 
         * @return builder
         * 
         */
        public Builder uiColorPalette(@Nullable Output<ThemeConfigurationUiColorPaletteArgs> uiColorPalette) {
            $.uiColorPalette = uiColorPalette;
            return this;
        }

        /**
         * @param uiColorPalette Color properties that apply to the UI and to charts, excluding the colors that apply to data. See ui_color_palette.
         * 
         * @return builder
         * 
         */
        public Builder uiColorPalette(ThemeConfigurationUiColorPaletteArgs uiColorPalette) {
            return uiColorPalette(Output.of(uiColorPalette));
        }

        public ThemeConfigurationArgs build() {
            return $;
        }
    }

}
