// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.opensearchingest.inputs;

import com.pulumi.aws.opensearchingest.inputs.PipelineLogPublishingOptionsCloudwatchLogDestinationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PipelineLogPublishingOptionsArgs extends com.pulumi.resources.ResourceArgs {

    public static final PipelineLogPublishingOptionsArgs Empty = new PipelineLogPublishingOptionsArgs();

    /**
     * The destination for OpenSearch Ingestion logs sent to Amazon CloudWatch Logs. This parameter is required if IsLoggingEnabled is set to true. See `cloudwatch_log_destination` below.
     * 
     */
    @Import(name="cloudwatchLogDestination")
    private @Nullable Output<PipelineLogPublishingOptionsCloudwatchLogDestinationArgs> cloudwatchLogDestination;

    /**
     * @return The destination for OpenSearch Ingestion logs sent to Amazon CloudWatch Logs. This parameter is required if IsLoggingEnabled is set to true. See `cloudwatch_log_destination` below.
     * 
     */
    public Optional<Output<PipelineLogPublishingOptionsCloudwatchLogDestinationArgs>> cloudwatchLogDestination() {
        return Optional.ofNullable(this.cloudwatchLogDestination);
    }

    /**
     * Whether logs should be published.
     * 
     */
    @Import(name="isLoggingEnabled")
    private @Nullable Output<Boolean> isLoggingEnabled;

    /**
     * @return Whether logs should be published.
     * 
     */
    public Optional<Output<Boolean>> isLoggingEnabled() {
        return Optional.ofNullable(this.isLoggingEnabled);
    }

    private PipelineLogPublishingOptionsArgs() {}

    private PipelineLogPublishingOptionsArgs(PipelineLogPublishingOptionsArgs $) {
        this.cloudwatchLogDestination = $.cloudwatchLogDestination;
        this.isLoggingEnabled = $.isLoggingEnabled;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PipelineLogPublishingOptionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PipelineLogPublishingOptionsArgs $;

        public Builder() {
            $ = new PipelineLogPublishingOptionsArgs();
        }

        public Builder(PipelineLogPublishingOptionsArgs defaults) {
            $ = new PipelineLogPublishingOptionsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cloudwatchLogDestination The destination for OpenSearch Ingestion logs sent to Amazon CloudWatch Logs. This parameter is required if IsLoggingEnabled is set to true. See `cloudwatch_log_destination` below.
         * 
         * @return builder
         * 
         */
        public Builder cloudwatchLogDestination(@Nullable Output<PipelineLogPublishingOptionsCloudwatchLogDestinationArgs> cloudwatchLogDestination) {
            $.cloudwatchLogDestination = cloudwatchLogDestination;
            return this;
        }

        /**
         * @param cloudwatchLogDestination The destination for OpenSearch Ingestion logs sent to Amazon CloudWatch Logs. This parameter is required if IsLoggingEnabled is set to true. See `cloudwatch_log_destination` below.
         * 
         * @return builder
         * 
         */
        public Builder cloudwatchLogDestination(PipelineLogPublishingOptionsCloudwatchLogDestinationArgs cloudwatchLogDestination) {
            return cloudwatchLogDestination(Output.of(cloudwatchLogDestination));
        }

        /**
         * @param isLoggingEnabled Whether logs should be published.
         * 
         * @return builder
         * 
         */
        public Builder isLoggingEnabled(@Nullable Output<Boolean> isLoggingEnabled) {
            $.isLoggingEnabled = isLoggingEnabled;
            return this;
        }

        /**
         * @param isLoggingEnabled Whether logs should be published.
         * 
         * @return builder
         * 
         */
        public Builder isLoggingEnabled(Boolean isLoggingEnabled) {
            return isLoggingEnabled(Output.of(isLoggingEnabled));
        }

        public PipelineLogPublishingOptionsArgs build() {
            return $;
        }
    }

}
