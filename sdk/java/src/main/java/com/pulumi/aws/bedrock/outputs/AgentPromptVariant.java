// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.bedrock.outputs;

import com.pulumi.aws.bedrock.outputs.AgentPromptVariantGenAiResource;
import com.pulumi.aws.bedrock.outputs.AgentPromptVariantInferenceConfiguration;
import com.pulumi.aws.bedrock.outputs.AgentPromptVariantMetadata;
import com.pulumi.aws.bedrock.outputs.AgentPromptVariantTemplateConfiguration;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class AgentPromptVariant {
    /**
     * @return Contains model-specific inference configurations that aren’t in the inferenceConfiguration field. To see model-specific inference parameters, see [Inference request parameters and response fields for foundation models](https://docs.aws.amazon.com/bedrock/latest/userguide/model-parameters.html).
     * 
     */
    private @Nullable String additionalModelRequestFields;
    /**
     * @return Specifies a generative AI resource with which to use the prompt. If this is not supplied, then a `gen_ai_resource` must be defined. See Generative AI Resource for more information.
     * 
     */
    private @Nullable AgentPromptVariantGenAiResource genAiResource;
    /**
     * @return Contains inference configurations for the prompt variant. See Inference Configuration for more information.
     * 
     */
    private @Nullable AgentPromptVariantInferenceConfiguration inferenceConfiguration;
    /**
     * @return A list of objects, each containing a key-value pair that defines a metadata tag and value to attach to a prompt variant. See Metadata for more information.
     * 
     */
    private @Nullable List<AgentPromptVariantMetadata> metadatas;
    /**
     * @return Unique identifier of the model or [inference profile](https://docs.aws.amazon.com/bedrock/latest/userguide/cross-region-inference.html) with which to run inference on the prompt. If this is not supplied, then a `gen_ai_resource` must be defined.
     * 
     */
    private @Nullable String modelId;
    /**
     * @return Name of the prompt variant.
     * 
     */
    private String name;
    /**
     * @return Contains configurations for the prompt template. See Template Configuration for more information.
     * 
     */
    private @Nullable AgentPromptVariantTemplateConfiguration templateConfiguration;
    /**
     * @return Type of prompt template to use. Valid values: `CHAT`, `TEXT`.
     * 
     */
    private String templateType;

    private AgentPromptVariant() {}
    /**
     * @return Contains model-specific inference configurations that aren’t in the inferenceConfiguration field. To see model-specific inference parameters, see [Inference request parameters and response fields for foundation models](https://docs.aws.amazon.com/bedrock/latest/userguide/model-parameters.html).
     * 
     */
    public Optional<String> additionalModelRequestFields() {
        return Optional.ofNullable(this.additionalModelRequestFields);
    }
    /**
     * @return Specifies a generative AI resource with which to use the prompt. If this is not supplied, then a `gen_ai_resource` must be defined. See Generative AI Resource for more information.
     * 
     */
    public Optional<AgentPromptVariantGenAiResource> genAiResource() {
        return Optional.ofNullable(this.genAiResource);
    }
    /**
     * @return Contains inference configurations for the prompt variant. See Inference Configuration for more information.
     * 
     */
    public Optional<AgentPromptVariantInferenceConfiguration> inferenceConfiguration() {
        return Optional.ofNullable(this.inferenceConfiguration);
    }
    /**
     * @return A list of objects, each containing a key-value pair that defines a metadata tag and value to attach to a prompt variant. See Metadata for more information.
     * 
     */
    public List<AgentPromptVariantMetadata> metadatas() {
        return this.metadatas == null ? List.of() : this.metadatas;
    }
    /**
     * @return Unique identifier of the model or [inference profile](https://docs.aws.amazon.com/bedrock/latest/userguide/cross-region-inference.html) with which to run inference on the prompt. If this is not supplied, then a `gen_ai_resource` must be defined.
     * 
     */
    public Optional<String> modelId() {
        return Optional.ofNullable(this.modelId);
    }
    /**
     * @return Name of the prompt variant.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Contains configurations for the prompt template. See Template Configuration for more information.
     * 
     */
    public Optional<AgentPromptVariantTemplateConfiguration> templateConfiguration() {
        return Optional.ofNullable(this.templateConfiguration);
    }
    /**
     * @return Type of prompt template to use. Valid values: `CHAT`, `TEXT`.
     * 
     */
    public String templateType() {
        return this.templateType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AgentPromptVariant defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String additionalModelRequestFields;
        private @Nullable AgentPromptVariantGenAiResource genAiResource;
        private @Nullable AgentPromptVariantInferenceConfiguration inferenceConfiguration;
        private @Nullable List<AgentPromptVariantMetadata> metadatas;
        private @Nullable String modelId;
        private String name;
        private @Nullable AgentPromptVariantTemplateConfiguration templateConfiguration;
        private String templateType;
        public Builder() {}
        public Builder(AgentPromptVariant defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.additionalModelRequestFields = defaults.additionalModelRequestFields;
    	      this.genAiResource = defaults.genAiResource;
    	      this.inferenceConfiguration = defaults.inferenceConfiguration;
    	      this.metadatas = defaults.metadatas;
    	      this.modelId = defaults.modelId;
    	      this.name = defaults.name;
    	      this.templateConfiguration = defaults.templateConfiguration;
    	      this.templateType = defaults.templateType;
        }

        @CustomType.Setter
        public Builder additionalModelRequestFields(@Nullable String additionalModelRequestFields) {

            this.additionalModelRequestFields = additionalModelRequestFields;
            return this;
        }
        @CustomType.Setter
        public Builder genAiResource(@Nullable AgentPromptVariantGenAiResource genAiResource) {

            this.genAiResource = genAiResource;
            return this;
        }
        @CustomType.Setter
        public Builder inferenceConfiguration(@Nullable AgentPromptVariantInferenceConfiguration inferenceConfiguration) {

            this.inferenceConfiguration = inferenceConfiguration;
            return this;
        }
        @CustomType.Setter
        public Builder metadatas(@Nullable List<AgentPromptVariantMetadata> metadatas) {

            this.metadatas = metadatas;
            return this;
        }
        public Builder metadatas(AgentPromptVariantMetadata... metadatas) {
            return metadatas(List.of(metadatas));
        }
        @CustomType.Setter
        public Builder modelId(@Nullable String modelId) {

            this.modelId = modelId;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("AgentPromptVariant", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder templateConfiguration(@Nullable AgentPromptVariantTemplateConfiguration templateConfiguration) {

            this.templateConfiguration = templateConfiguration;
            return this;
        }
        @CustomType.Setter
        public Builder templateType(String templateType) {
            if (templateType == null) {
              throw new MissingRequiredPropertyException("AgentPromptVariant", "templateType");
            }
            this.templateType = templateType;
            return this;
        }
        public AgentPromptVariant build() {
            final var _resultValue = new AgentPromptVariant();
            _resultValue.additionalModelRequestFields = additionalModelRequestFields;
            _resultValue.genAiResource = genAiResource;
            _resultValue.inferenceConfiguration = inferenceConfiguration;
            _resultValue.metadatas = metadatas;
            _resultValue.modelId = modelId;
            _resultValue.name = name;
            _resultValue.templateConfiguration = templateConfiguration;
            _resultValue.templateType = templateType;
            return _resultValue;
        }
    }
}
