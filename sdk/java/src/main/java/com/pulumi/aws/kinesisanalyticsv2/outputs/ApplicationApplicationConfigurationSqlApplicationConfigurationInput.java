// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.kinesisanalyticsv2.outputs;

import com.pulumi.aws.kinesisanalyticsv2.outputs.ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputParallelism;
import com.pulumi.aws.kinesisanalyticsv2.outputs.ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputProcessingConfiguration;
import com.pulumi.aws.kinesisanalyticsv2.outputs.ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchema;
import com.pulumi.aws.kinesisanalyticsv2.outputs.ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputStartingPositionConfiguration;
import com.pulumi.aws.kinesisanalyticsv2.outputs.ApplicationApplicationConfigurationSqlApplicationConfigurationInputKinesisFirehoseInput;
import com.pulumi.aws.kinesisanalyticsv2.outputs.ApplicationApplicationConfigurationSqlApplicationConfigurationInputKinesisStreamsInput;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ApplicationApplicationConfigurationSqlApplicationConfigurationInput {
    private @Nullable List<String> inAppStreamNames;
    private @Nullable String inputId;
    /**
     * @return Describes the number of in-application streams to create.
     * 
     */
    private @Nullable ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputParallelism inputParallelism;
    /**
     * @return The input processing configuration for the input.
     * An input processor transforms records as they are received from the stream, before the application&#39;s SQL code executes.
     * 
     */
    private @Nullable ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputProcessingConfiguration inputProcessingConfiguration;
    /**
     * @return Describes the format of the data in the streaming source, and how each data element maps to corresponding columns in the in-application stream that is being created.
     * 
     */
    private ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchema inputSchema;
    /**
     * @return The point at which the application starts processing records from the streaming source.
     * 
     */
    private @Nullable List<ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputStartingPositionConfiguration> inputStartingPositionConfigurations;
    /**
     * @return If the streaming source is a Kinesis Data Firehose delivery stream, identifies the delivery stream&#39;s ARN.
     * 
     */
    private @Nullable ApplicationApplicationConfigurationSqlApplicationConfigurationInputKinesisFirehoseInput kinesisFirehoseInput;
    /**
     * @return If the streaming source is a Kinesis data stream, identifies the stream&#39;s Amazon Resource Name (ARN).
     * 
     */
    private @Nullable ApplicationApplicationConfigurationSqlApplicationConfigurationInputKinesisStreamsInput kinesisStreamsInput;
    /**
     * @return The name prefix to use when creating an in-application stream.
     * 
     */
    private String namePrefix;

    private ApplicationApplicationConfigurationSqlApplicationConfigurationInput() {}
    public List<String> inAppStreamNames() {
        return this.inAppStreamNames == null ? List.of() : this.inAppStreamNames;
    }
    public Optional<String> inputId() {
        return Optional.ofNullable(this.inputId);
    }
    /**
     * @return Describes the number of in-application streams to create.
     * 
     */
    public Optional<ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputParallelism> inputParallelism() {
        return Optional.ofNullable(this.inputParallelism);
    }
    /**
     * @return The input processing configuration for the input.
     * An input processor transforms records as they are received from the stream, before the application&#39;s SQL code executes.
     * 
     */
    public Optional<ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputProcessingConfiguration> inputProcessingConfiguration() {
        return Optional.ofNullable(this.inputProcessingConfiguration);
    }
    /**
     * @return Describes the format of the data in the streaming source, and how each data element maps to corresponding columns in the in-application stream that is being created.
     * 
     */
    public ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchema inputSchema() {
        return this.inputSchema;
    }
    /**
     * @return The point at which the application starts processing records from the streaming source.
     * 
     */
    public List<ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputStartingPositionConfiguration> inputStartingPositionConfigurations() {
        return this.inputStartingPositionConfigurations == null ? List.of() : this.inputStartingPositionConfigurations;
    }
    /**
     * @return If the streaming source is a Kinesis Data Firehose delivery stream, identifies the delivery stream&#39;s ARN.
     * 
     */
    public Optional<ApplicationApplicationConfigurationSqlApplicationConfigurationInputKinesisFirehoseInput> kinesisFirehoseInput() {
        return Optional.ofNullable(this.kinesisFirehoseInput);
    }
    /**
     * @return If the streaming source is a Kinesis data stream, identifies the stream&#39;s Amazon Resource Name (ARN).
     * 
     */
    public Optional<ApplicationApplicationConfigurationSqlApplicationConfigurationInputKinesisStreamsInput> kinesisStreamsInput() {
        return Optional.ofNullable(this.kinesisStreamsInput);
    }
    /**
     * @return The name prefix to use when creating an in-application stream.
     * 
     */
    public String namePrefix() {
        return this.namePrefix;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ApplicationApplicationConfigurationSqlApplicationConfigurationInput defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> inAppStreamNames;
        private @Nullable String inputId;
        private @Nullable ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputParallelism inputParallelism;
        private @Nullable ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputProcessingConfiguration inputProcessingConfiguration;
        private ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchema inputSchema;
        private @Nullable List<ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputStartingPositionConfiguration> inputStartingPositionConfigurations;
        private @Nullable ApplicationApplicationConfigurationSqlApplicationConfigurationInputKinesisFirehoseInput kinesisFirehoseInput;
        private @Nullable ApplicationApplicationConfigurationSqlApplicationConfigurationInputKinesisStreamsInput kinesisStreamsInput;
        private String namePrefix;
        public Builder() {}
        public Builder(ApplicationApplicationConfigurationSqlApplicationConfigurationInput defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.inAppStreamNames = defaults.inAppStreamNames;
    	      this.inputId = defaults.inputId;
    	      this.inputParallelism = defaults.inputParallelism;
    	      this.inputProcessingConfiguration = defaults.inputProcessingConfiguration;
    	      this.inputSchema = defaults.inputSchema;
    	      this.inputStartingPositionConfigurations = defaults.inputStartingPositionConfigurations;
    	      this.kinesisFirehoseInput = defaults.kinesisFirehoseInput;
    	      this.kinesisStreamsInput = defaults.kinesisStreamsInput;
    	      this.namePrefix = defaults.namePrefix;
        }

        @CustomType.Setter
        public Builder inAppStreamNames(@Nullable List<String> inAppStreamNames) {
            this.inAppStreamNames = inAppStreamNames;
            return this;
        }
        public Builder inAppStreamNames(String... inAppStreamNames) {
            return inAppStreamNames(List.of(inAppStreamNames));
        }
        @CustomType.Setter
        public Builder inputId(@Nullable String inputId) {
            this.inputId = inputId;
            return this;
        }
        @CustomType.Setter
        public Builder inputParallelism(@Nullable ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputParallelism inputParallelism) {
            this.inputParallelism = inputParallelism;
            return this;
        }
        @CustomType.Setter
        public Builder inputProcessingConfiguration(@Nullable ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputProcessingConfiguration inputProcessingConfiguration) {
            this.inputProcessingConfiguration = inputProcessingConfiguration;
            return this;
        }
        @CustomType.Setter
        public Builder inputSchema(ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchema inputSchema) {
            this.inputSchema = Objects.requireNonNull(inputSchema);
            return this;
        }
        @CustomType.Setter
        public Builder inputStartingPositionConfigurations(@Nullable List<ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputStartingPositionConfiguration> inputStartingPositionConfigurations) {
            this.inputStartingPositionConfigurations = inputStartingPositionConfigurations;
            return this;
        }
        public Builder inputStartingPositionConfigurations(ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputStartingPositionConfiguration... inputStartingPositionConfigurations) {
            return inputStartingPositionConfigurations(List.of(inputStartingPositionConfigurations));
        }
        @CustomType.Setter
        public Builder kinesisFirehoseInput(@Nullable ApplicationApplicationConfigurationSqlApplicationConfigurationInputKinesisFirehoseInput kinesisFirehoseInput) {
            this.kinesisFirehoseInput = kinesisFirehoseInput;
            return this;
        }
        @CustomType.Setter
        public Builder kinesisStreamsInput(@Nullable ApplicationApplicationConfigurationSqlApplicationConfigurationInputKinesisStreamsInput kinesisStreamsInput) {
            this.kinesisStreamsInput = kinesisStreamsInput;
            return this;
        }
        @CustomType.Setter
        public Builder namePrefix(String namePrefix) {
            this.namePrefix = Objects.requireNonNull(namePrefix);
            return this;
        }
        public ApplicationApplicationConfigurationSqlApplicationConfigurationInput build() {
            final var o = new ApplicationApplicationConfigurationSqlApplicationConfigurationInput();
            o.inAppStreamNames = inAppStreamNames;
            o.inputId = inputId;
            o.inputParallelism = inputParallelism;
            o.inputProcessingConfiguration = inputProcessingConfiguration;
            o.inputSchema = inputSchema;
            o.inputStartingPositionConfigurations = inputStartingPositionConfigurations;
            o.kinesisFirehoseInput = kinesisFirehoseInput;
            o.kinesisStreamsInput = kinesisStreamsInput;
            o.namePrefix = namePrefix;
            return o;
        }
    }
}
