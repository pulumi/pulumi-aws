// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.m2.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class EnvironmentStorageConfigurationEfsArgs extends com.pulumi.resources.ResourceArgs {

    public static final EnvironmentStorageConfigurationEfsArgs Empty = new EnvironmentStorageConfigurationEfsArgs();

    /**
     * Id of the EFS filesystem to mount.
     * 
     */
    @Import(name="fileSystemId", required=true)
    private Output<String> fileSystemId;

    /**
     * @return Id of the EFS filesystem to mount.
     * 
     */
    public Output<String> fileSystemId() {
        return this.fileSystemId;
    }

    /**
     * Path to mount the filesystem on, must start with `/m2/mount/`.
     * 
     */
    @Import(name="mountPoint", required=true)
    private Output<String> mountPoint;

    /**
     * @return Path to mount the filesystem on, must start with `/m2/mount/`.
     * 
     */
    public Output<String> mountPoint() {
        return this.mountPoint;
    }

    private EnvironmentStorageConfigurationEfsArgs() {}

    private EnvironmentStorageConfigurationEfsArgs(EnvironmentStorageConfigurationEfsArgs $) {
        this.fileSystemId = $.fileSystemId;
        this.mountPoint = $.mountPoint;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EnvironmentStorageConfigurationEfsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EnvironmentStorageConfigurationEfsArgs $;

        public Builder() {
            $ = new EnvironmentStorageConfigurationEfsArgs();
        }

        public Builder(EnvironmentStorageConfigurationEfsArgs defaults) {
            $ = new EnvironmentStorageConfigurationEfsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param fileSystemId Id of the EFS filesystem to mount.
         * 
         * @return builder
         * 
         */
        public Builder fileSystemId(Output<String> fileSystemId) {
            $.fileSystemId = fileSystemId;
            return this;
        }

        /**
         * @param fileSystemId Id of the EFS filesystem to mount.
         * 
         * @return builder
         * 
         */
        public Builder fileSystemId(String fileSystemId) {
            return fileSystemId(Output.of(fileSystemId));
        }

        /**
         * @param mountPoint Path to mount the filesystem on, must start with `/m2/mount/`.
         * 
         * @return builder
         * 
         */
        public Builder mountPoint(Output<String> mountPoint) {
            $.mountPoint = mountPoint;
            return this;
        }

        /**
         * @param mountPoint Path to mount the filesystem on, must start with `/m2/mount/`.
         * 
         * @return builder
         * 
         */
        public Builder mountPoint(String mountPoint) {
            return mountPoint(Output.of(mountPoint));
        }

        public EnvironmentStorageConfigurationEfsArgs build() {
            if ($.fileSystemId == null) {
                throw new MissingRequiredPropertyException("EnvironmentStorageConfigurationEfsArgs", "fileSystemId");
            }
            if ($.mountPoint == null) {
                throw new MissingRequiredPropertyException("EnvironmentStorageConfigurationEfsArgs", "mountPoint");
            }
            return $;
        }
    }

}
