// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.alb.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TargetGroupTargetGroupHealthDnsFailoverArgs extends com.pulumi.resources.ResourceArgs {

    public static final TargetGroupTargetGroupHealthDnsFailoverArgs Empty = new TargetGroupTargetGroupHealthDnsFailoverArgs();

    /**
     * The minimum number of targets that must be healthy. If the number of healthy targets is below this value, mark the zone as unhealthy in DNS, so that traffic is routed only to healthy zones. The possible values are `off` or an integer from `1` to the maximum number of targets. The default is `off`.
     * 
     */
    @Import(name="minimumHealthyTargetsCount")
    private @Nullable Output<String> minimumHealthyTargetsCount;

    /**
     * @return The minimum number of targets that must be healthy. If the number of healthy targets is below this value, mark the zone as unhealthy in DNS, so that traffic is routed only to healthy zones. The possible values are `off` or an integer from `1` to the maximum number of targets. The default is `off`.
     * 
     */
    public Optional<Output<String>> minimumHealthyTargetsCount() {
        return Optional.ofNullable(this.minimumHealthyTargetsCount);
    }

    /**
     * The minimum percentage of targets that must be healthy. If the percentage of healthy targets is below this value, mark the zone as unhealthy in DNS, so that traffic is routed only to healthy zones. The possible values are `off` or an integer from `1` to `100`. The default is `off`.
     * 
     */
    @Import(name="minimumHealthyTargetsPercentage")
    private @Nullable Output<String> minimumHealthyTargetsPercentage;

    /**
     * @return The minimum percentage of targets that must be healthy. If the percentage of healthy targets is below this value, mark the zone as unhealthy in DNS, so that traffic is routed only to healthy zones. The possible values are `off` or an integer from `1` to `100`. The default is `off`.
     * 
     */
    public Optional<Output<String>> minimumHealthyTargetsPercentage() {
        return Optional.ofNullable(this.minimumHealthyTargetsPercentage);
    }

    private TargetGroupTargetGroupHealthDnsFailoverArgs() {}

    private TargetGroupTargetGroupHealthDnsFailoverArgs(TargetGroupTargetGroupHealthDnsFailoverArgs $) {
        this.minimumHealthyTargetsCount = $.minimumHealthyTargetsCount;
        this.minimumHealthyTargetsPercentage = $.minimumHealthyTargetsPercentage;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TargetGroupTargetGroupHealthDnsFailoverArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TargetGroupTargetGroupHealthDnsFailoverArgs $;

        public Builder() {
            $ = new TargetGroupTargetGroupHealthDnsFailoverArgs();
        }

        public Builder(TargetGroupTargetGroupHealthDnsFailoverArgs defaults) {
            $ = new TargetGroupTargetGroupHealthDnsFailoverArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param minimumHealthyTargetsCount The minimum number of targets that must be healthy. If the number of healthy targets is below this value, mark the zone as unhealthy in DNS, so that traffic is routed only to healthy zones. The possible values are `off` or an integer from `1` to the maximum number of targets. The default is `off`.
         * 
         * @return builder
         * 
         */
        public Builder minimumHealthyTargetsCount(@Nullable Output<String> minimumHealthyTargetsCount) {
            $.minimumHealthyTargetsCount = minimumHealthyTargetsCount;
            return this;
        }

        /**
         * @param minimumHealthyTargetsCount The minimum number of targets that must be healthy. If the number of healthy targets is below this value, mark the zone as unhealthy in DNS, so that traffic is routed only to healthy zones. The possible values are `off` or an integer from `1` to the maximum number of targets. The default is `off`.
         * 
         * @return builder
         * 
         */
        public Builder minimumHealthyTargetsCount(String minimumHealthyTargetsCount) {
            return minimumHealthyTargetsCount(Output.of(minimumHealthyTargetsCount));
        }

        /**
         * @param minimumHealthyTargetsPercentage The minimum percentage of targets that must be healthy. If the percentage of healthy targets is below this value, mark the zone as unhealthy in DNS, so that traffic is routed only to healthy zones. The possible values are `off` or an integer from `1` to `100`. The default is `off`.
         * 
         * @return builder
         * 
         */
        public Builder minimumHealthyTargetsPercentage(@Nullable Output<String> minimumHealthyTargetsPercentage) {
            $.minimumHealthyTargetsPercentage = minimumHealthyTargetsPercentage;
            return this;
        }

        /**
         * @param minimumHealthyTargetsPercentage The minimum percentage of targets that must be healthy. If the percentage of healthy targets is below this value, mark the zone as unhealthy in DNS, so that traffic is routed only to healthy zones. The possible values are `off` or an integer from `1` to `100`. The default is `off`.
         * 
         * @return builder
         * 
         */
        public Builder minimumHealthyTargetsPercentage(String minimumHealthyTargetsPercentage) {
            return minimumHealthyTargetsPercentage(Output.of(minimumHealthyTargetsPercentage));
        }

        public TargetGroupTargetGroupHealthDnsFailoverArgs build() {
            return $;
        }
    }

}
