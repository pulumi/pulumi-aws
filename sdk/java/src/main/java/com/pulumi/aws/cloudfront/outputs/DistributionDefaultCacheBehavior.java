// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.cloudfront.outputs;

import com.pulumi.aws.cloudfront.outputs.DistributionDefaultCacheBehaviorForwardedValues;
import com.pulumi.aws.cloudfront.outputs.DistributionDefaultCacheBehaviorFunctionAssociation;
import com.pulumi.aws.cloudfront.outputs.DistributionDefaultCacheBehaviorLambdaFunctionAssociation;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DistributionDefaultCacheBehavior {
    private List<String> allowedMethods;
    private @Nullable String cachePolicyId;
    private List<String> cachedMethods;
    private @Nullable Boolean compress;
    private @Nullable Integer defaultTtl;
    private @Nullable String fieldLevelEncryptionId;
    private @Nullable DistributionDefaultCacheBehaviorForwardedValues forwardedValues;
    private @Nullable List<DistributionDefaultCacheBehaviorFunctionAssociation> functionAssociations;
    private @Nullable List<DistributionDefaultCacheBehaviorLambdaFunctionAssociation> lambdaFunctionAssociations;
    private @Nullable Integer maxTtl;
    private @Nullable Integer minTtl;
    private @Nullable String originRequestPolicyId;
    private @Nullable String realtimeLogConfigArn;
    private @Nullable String responseHeadersPolicyId;
    private @Nullable Boolean smoothStreaming;
    private String targetOriginId;
    /**
     * @return List of nested attributes for active trusted key groups, if the distribution is set up to serve private content with signed URLs.
     * 
     */
    private @Nullable List<String> trustedKeyGroups;
    /**
     * @return List of nested attributes for active trusted signers, if the distribution is set up to serve private content with signed URLs.
     * 
     */
    private @Nullable List<String> trustedSigners;
    private String viewerProtocolPolicy;

    private DistributionDefaultCacheBehavior() {}
    public List<String> allowedMethods() {
        return this.allowedMethods;
    }
    public Optional<String> cachePolicyId() {
        return Optional.ofNullable(this.cachePolicyId);
    }
    public List<String> cachedMethods() {
        return this.cachedMethods;
    }
    public Optional<Boolean> compress() {
        return Optional.ofNullable(this.compress);
    }
    public Optional<Integer> defaultTtl() {
        return Optional.ofNullable(this.defaultTtl);
    }
    public Optional<String> fieldLevelEncryptionId() {
        return Optional.ofNullable(this.fieldLevelEncryptionId);
    }
    public Optional<DistributionDefaultCacheBehaviorForwardedValues> forwardedValues() {
        return Optional.ofNullable(this.forwardedValues);
    }
    public List<DistributionDefaultCacheBehaviorFunctionAssociation> functionAssociations() {
        return this.functionAssociations == null ? List.of() : this.functionAssociations;
    }
    public List<DistributionDefaultCacheBehaviorLambdaFunctionAssociation> lambdaFunctionAssociations() {
        return this.lambdaFunctionAssociations == null ? List.of() : this.lambdaFunctionAssociations;
    }
    public Optional<Integer> maxTtl() {
        return Optional.ofNullable(this.maxTtl);
    }
    public Optional<Integer> minTtl() {
        return Optional.ofNullable(this.minTtl);
    }
    public Optional<String> originRequestPolicyId() {
        return Optional.ofNullable(this.originRequestPolicyId);
    }
    public Optional<String> realtimeLogConfigArn() {
        return Optional.ofNullable(this.realtimeLogConfigArn);
    }
    public Optional<String> responseHeadersPolicyId() {
        return Optional.ofNullable(this.responseHeadersPolicyId);
    }
    public Optional<Boolean> smoothStreaming() {
        return Optional.ofNullable(this.smoothStreaming);
    }
    public String targetOriginId() {
        return this.targetOriginId;
    }
    /**
     * @return List of nested attributes for active trusted key groups, if the distribution is set up to serve private content with signed URLs.
     * 
     */
    public List<String> trustedKeyGroups() {
        return this.trustedKeyGroups == null ? List.of() : this.trustedKeyGroups;
    }
    /**
     * @return List of nested attributes for active trusted signers, if the distribution is set up to serve private content with signed URLs.
     * 
     */
    public List<String> trustedSigners() {
        return this.trustedSigners == null ? List.of() : this.trustedSigners;
    }
    public String viewerProtocolPolicy() {
        return this.viewerProtocolPolicy;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DistributionDefaultCacheBehavior defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> allowedMethods;
        private @Nullable String cachePolicyId;
        private List<String> cachedMethods;
        private @Nullable Boolean compress;
        private @Nullable Integer defaultTtl;
        private @Nullable String fieldLevelEncryptionId;
        private @Nullable DistributionDefaultCacheBehaviorForwardedValues forwardedValues;
        private @Nullable List<DistributionDefaultCacheBehaviorFunctionAssociation> functionAssociations;
        private @Nullable List<DistributionDefaultCacheBehaviorLambdaFunctionAssociation> lambdaFunctionAssociations;
        private @Nullable Integer maxTtl;
        private @Nullable Integer minTtl;
        private @Nullable String originRequestPolicyId;
        private @Nullable String realtimeLogConfigArn;
        private @Nullable String responseHeadersPolicyId;
        private @Nullable Boolean smoothStreaming;
        private String targetOriginId;
        private @Nullable List<String> trustedKeyGroups;
        private @Nullable List<String> trustedSigners;
        private String viewerProtocolPolicy;
        public Builder() {}
        public Builder(DistributionDefaultCacheBehavior defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowedMethods = defaults.allowedMethods;
    	      this.cachePolicyId = defaults.cachePolicyId;
    	      this.cachedMethods = defaults.cachedMethods;
    	      this.compress = defaults.compress;
    	      this.defaultTtl = defaults.defaultTtl;
    	      this.fieldLevelEncryptionId = defaults.fieldLevelEncryptionId;
    	      this.forwardedValues = defaults.forwardedValues;
    	      this.functionAssociations = defaults.functionAssociations;
    	      this.lambdaFunctionAssociations = defaults.lambdaFunctionAssociations;
    	      this.maxTtl = defaults.maxTtl;
    	      this.minTtl = defaults.minTtl;
    	      this.originRequestPolicyId = defaults.originRequestPolicyId;
    	      this.realtimeLogConfigArn = defaults.realtimeLogConfigArn;
    	      this.responseHeadersPolicyId = defaults.responseHeadersPolicyId;
    	      this.smoothStreaming = defaults.smoothStreaming;
    	      this.targetOriginId = defaults.targetOriginId;
    	      this.trustedKeyGroups = defaults.trustedKeyGroups;
    	      this.trustedSigners = defaults.trustedSigners;
    	      this.viewerProtocolPolicy = defaults.viewerProtocolPolicy;
        }

        @CustomType.Setter
        public Builder allowedMethods(List<String> allowedMethods) {
            if (allowedMethods == null) {
              throw new MissingRequiredPropertyException("DistributionDefaultCacheBehavior", "allowedMethods");
            }
            this.allowedMethods = allowedMethods;
            return this;
        }
        public Builder allowedMethods(String... allowedMethods) {
            return allowedMethods(List.of(allowedMethods));
        }
        @CustomType.Setter
        public Builder cachePolicyId(@Nullable String cachePolicyId) {

            this.cachePolicyId = cachePolicyId;
            return this;
        }
        @CustomType.Setter
        public Builder cachedMethods(List<String> cachedMethods) {
            if (cachedMethods == null) {
              throw new MissingRequiredPropertyException("DistributionDefaultCacheBehavior", "cachedMethods");
            }
            this.cachedMethods = cachedMethods;
            return this;
        }
        public Builder cachedMethods(String... cachedMethods) {
            return cachedMethods(List.of(cachedMethods));
        }
        @CustomType.Setter
        public Builder compress(@Nullable Boolean compress) {

            this.compress = compress;
            return this;
        }
        @CustomType.Setter
        public Builder defaultTtl(@Nullable Integer defaultTtl) {

            this.defaultTtl = defaultTtl;
            return this;
        }
        @CustomType.Setter
        public Builder fieldLevelEncryptionId(@Nullable String fieldLevelEncryptionId) {

            this.fieldLevelEncryptionId = fieldLevelEncryptionId;
            return this;
        }
        @CustomType.Setter
        public Builder forwardedValues(@Nullable DistributionDefaultCacheBehaviorForwardedValues forwardedValues) {

            this.forwardedValues = forwardedValues;
            return this;
        }
        @CustomType.Setter
        public Builder functionAssociations(@Nullable List<DistributionDefaultCacheBehaviorFunctionAssociation> functionAssociations) {

            this.functionAssociations = functionAssociations;
            return this;
        }
        public Builder functionAssociations(DistributionDefaultCacheBehaviorFunctionAssociation... functionAssociations) {
            return functionAssociations(List.of(functionAssociations));
        }
        @CustomType.Setter
        public Builder lambdaFunctionAssociations(@Nullable List<DistributionDefaultCacheBehaviorLambdaFunctionAssociation> lambdaFunctionAssociations) {

            this.lambdaFunctionAssociations = lambdaFunctionAssociations;
            return this;
        }
        public Builder lambdaFunctionAssociations(DistributionDefaultCacheBehaviorLambdaFunctionAssociation... lambdaFunctionAssociations) {
            return lambdaFunctionAssociations(List.of(lambdaFunctionAssociations));
        }
        @CustomType.Setter
        public Builder maxTtl(@Nullable Integer maxTtl) {

            this.maxTtl = maxTtl;
            return this;
        }
        @CustomType.Setter
        public Builder minTtl(@Nullable Integer minTtl) {

            this.minTtl = minTtl;
            return this;
        }
        @CustomType.Setter
        public Builder originRequestPolicyId(@Nullable String originRequestPolicyId) {

            this.originRequestPolicyId = originRequestPolicyId;
            return this;
        }
        @CustomType.Setter
        public Builder realtimeLogConfigArn(@Nullable String realtimeLogConfigArn) {

            this.realtimeLogConfigArn = realtimeLogConfigArn;
            return this;
        }
        @CustomType.Setter
        public Builder responseHeadersPolicyId(@Nullable String responseHeadersPolicyId) {

            this.responseHeadersPolicyId = responseHeadersPolicyId;
            return this;
        }
        @CustomType.Setter
        public Builder smoothStreaming(@Nullable Boolean smoothStreaming) {

            this.smoothStreaming = smoothStreaming;
            return this;
        }
        @CustomType.Setter
        public Builder targetOriginId(String targetOriginId) {
            if (targetOriginId == null) {
              throw new MissingRequiredPropertyException("DistributionDefaultCacheBehavior", "targetOriginId");
            }
            this.targetOriginId = targetOriginId;
            return this;
        }
        @CustomType.Setter
        public Builder trustedKeyGroups(@Nullable List<String> trustedKeyGroups) {

            this.trustedKeyGroups = trustedKeyGroups;
            return this;
        }
        public Builder trustedKeyGroups(String... trustedKeyGroups) {
            return trustedKeyGroups(List.of(trustedKeyGroups));
        }
        @CustomType.Setter
        public Builder trustedSigners(@Nullable List<String> trustedSigners) {

            this.trustedSigners = trustedSigners;
            return this;
        }
        public Builder trustedSigners(String... trustedSigners) {
            return trustedSigners(List.of(trustedSigners));
        }
        @CustomType.Setter
        public Builder viewerProtocolPolicy(String viewerProtocolPolicy) {
            if (viewerProtocolPolicy == null) {
              throw new MissingRequiredPropertyException("DistributionDefaultCacheBehavior", "viewerProtocolPolicy");
            }
            this.viewerProtocolPolicy = viewerProtocolPolicy;
            return this;
        }
        public DistributionDefaultCacheBehavior build() {
            final var _resultValue = new DistributionDefaultCacheBehavior();
            _resultValue.allowedMethods = allowedMethods;
            _resultValue.cachePolicyId = cachePolicyId;
            _resultValue.cachedMethods = cachedMethods;
            _resultValue.compress = compress;
            _resultValue.defaultTtl = defaultTtl;
            _resultValue.fieldLevelEncryptionId = fieldLevelEncryptionId;
            _resultValue.forwardedValues = forwardedValues;
            _resultValue.functionAssociations = functionAssociations;
            _resultValue.lambdaFunctionAssociations = lambdaFunctionAssociations;
            _resultValue.maxTtl = maxTtl;
            _resultValue.minTtl = minTtl;
            _resultValue.originRequestPolicyId = originRequestPolicyId;
            _resultValue.realtimeLogConfigArn = realtimeLogConfigArn;
            _resultValue.responseHeadersPolicyId = responseHeadersPolicyId;
            _resultValue.smoothStreaming = smoothStreaming;
            _resultValue.targetOriginId = targetOriginId;
            _resultValue.trustedKeyGroups = trustedKeyGroups;
            _resultValue.trustedSigners = trustedSigners;
            _resultValue.viewerProtocolPolicy = viewerProtocolPolicy;
            return _resultValue;
        }
    }
}
