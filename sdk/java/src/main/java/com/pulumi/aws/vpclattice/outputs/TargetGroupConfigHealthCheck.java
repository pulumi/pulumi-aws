// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.vpclattice.outputs;

import com.pulumi.aws.vpclattice.outputs.TargetGroupConfigHealthCheckMatcher;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class TargetGroupConfigHealthCheck {
    /**
     * @return Indicates whether health checking is enabled. Defaults to `true`.
     * 
     */
    private @Nullable Boolean enabled;
    /**
     * @return The approximate amount of time, in seconds, between health checks of an individual target. The range is 5–300 seconds. The default is 30 seconds.
     * 
     */
    private @Nullable Integer healthCheckIntervalSeconds;
    /**
     * @return The amount of time, in seconds, to wait before reporting a target as unhealthy. The range is 1–120 seconds. The default is 5 seconds.
     * * ` healthy_threshold_count  ` - (Optional) The number of consecutive successful health checks required before considering an unhealthy target healthy. The range is 2–10. The default is 5.
     * 
     */
    private @Nullable Integer healthCheckTimeoutSeconds;
    private @Nullable Integer healthyThresholdCount;
    /**
     * @return The codes to use when checking for a successful response from a target. These are called _Success codes_ in the console.
     * 
     */
    private @Nullable TargetGroupConfigHealthCheckMatcher matcher;
    /**
     * @return The destination for health checks on the targets. If the protocol version is HTTP/1.1 or HTTP/2, specify a valid URI (for example, /path?query). The default path is `/`. Health checks are not supported if the protocol version is gRPC, however, you can choose HTTP/1.1 or HTTP/2 and specify a valid URI.
     * 
     */
    private @Nullable String path;
    /**
     * @return The port used when performing health checks on targets. The default setting is the port that a target receives traffic on.
     * 
     */
    private @Nullable Integer port;
    /**
     * @return The protocol used when performing health checks on targets. The possible protocols are `HTTP` and `HTTPS`.
     * 
     */
    private @Nullable String protocol;
    /**
     * @return The protocol version used when performing health checks on targets. The possible protocol versions are `HTTP1` and `HTTP2`. The default is `HTTP1`.
     * 
     */
    private @Nullable String protocolVersion;
    /**
     * @return The number of consecutive failed health checks required before considering a target unhealthy. The range is 2–10. The default is 2.
     * 
     */
    private @Nullable Integer unhealthyThresholdCount;

    private TargetGroupConfigHealthCheck() {}
    /**
     * @return Indicates whether health checking is enabled. Defaults to `true`.
     * 
     */
    public Optional<Boolean> enabled() {
        return Optional.ofNullable(this.enabled);
    }
    /**
     * @return The approximate amount of time, in seconds, between health checks of an individual target. The range is 5–300 seconds. The default is 30 seconds.
     * 
     */
    public Optional<Integer> healthCheckIntervalSeconds() {
        return Optional.ofNullable(this.healthCheckIntervalSeconds);
    }
    /**
     * @return The amount of time, in seconds, to wait before reporting a target as unhealthy. The range is 1–120 seconds. The default is 5 seconds.
     * * ` healthy_threshold_count  ` - (Optional) The number of consecutive successful health checks required before considering an unhealthy target healthy. The range is 2–10. The default is 5.
     * 
     */
    public Optional<Integer> healthCheckTimeoutSeconds() {
        return Optional.ofNullable(this.healthCheckTimeoutSeconds);
    }
    public Optional<Integer> healthyThresholdCount() {
        return Optional.ofNullable(this.healthyThresholdCount);
    }
    /**
     * @return The codes to use when checking for a successful response from a target. These are called _Success codes_ in the console.
     * 
     */
    public Optional<TargetGroupConfigHealthCheckMatcher> matcher() {
        return Optional.ofNullable(this.matcher);
    }
    /**
     * @return The destination for health checks on the targets. If the protocol version is HTTP/1.1 or HTTP/2, specify a valid URI (for example, /path?query). The default path is `/`. Health checks are not supported if the protocol version is gRPC, however, you can choose HTTP/1.1 or HTTP/2 and specify a valid URI.
     * 
     */
    public Optional<String> path() {
        return Optional.ofNullable(this.path);
    }
    /**
     * @return The port used when performing health checks on targets. The default setting is the port that a target receives traffic on.
     * 
     */
    public Optional<Integer> port() {
        return Optional.ofNullable(this.port);
    }
    /**
     * @return The protocol used when performing health checks on targets. The possible protocols are `HTTP` and `HTTPS`.
     * 
     */
    public Optional<String> protocol() {
        return Optional.ofNullable(this.protocol);
    }
    /**
     * @return The protocol version used when performing health checks on targets. The possible protocol versions are `HTTP1` and `HTTP2`. The default is `HTTP1`.
     * 
     */
    public Optional<String> protocolVersion() {
        return Optional.ofNullable(this.protocolVersion);
    }
    /**
     * @return The number of consecutive failed health checks required before considering a target unhealthy. The range is 2–10. The default is 2.
     * 
     */
    public Optional<Integer> unhealthyThresholdCount() {
        return Optional.ofNullable(this.unhealthyThresholdCount);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TargetGroupConfigHealthCheck defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean enabled;
        private @Nullable Integer healthCheckIntervalSeconds;
        private @Nullable Integer healthCheckTimeoutSeconds;
        private @Nullable Integer healthyThresholdCount;
        private @Nullable TargetGroupConfigHealthCheckMatcher matcher;
        private @Nullable String path;
        private @Nullable Integer port;
        private @Nullable String protocol;
        private @Nullable String protocolVersion;
        private @Nullable Integer unhealthyThresholdCount;
        public Builder() {}
        public Builder(TargetGroupConfigHealthCheck defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.enabled = defaults.enabled;
    	      this.healthCheckIntervalSeconds = defaults.healthCheckIntervalSeconds;
    	      this.healthCheckTimeoutSeconds = defaults.healthCheckTimeoutSeconds;
    	      this.healthyThresholdCount = defaults.healthyThresholdCount;
    	      this.matcher = defaults.matcher;
    	      this.path = defaults.path;
    	      this.port = defaults.port;
    	      this.protocol = defaults.protocol;
    	      this.protocolVersion = defaults.protocolVersion;
    	      this.unhealthyThresholdCount = defaults.unhealthyThresholdCount;
        }

        @CustomType.Setter
        public Builder enabled(@Nullable Boolean enabled) {
            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder healthCheckIntervalSeconds(@Nullable Integer healthCheckIntervalSeconds) {
            this.healthCheckIntervalSeconds = healthCheckIntervalSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder healthCheckTimeoutSeconds(@Nullable Integer healthCheckTimeoutSeconds) {
            this.healthCheckTimeoutSeconds = healthCheckTimeoutSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder healthyThresholdCount(@Nullable Integer healthyThresholdCount) {
            this.healthyThresholdCount = healthyThresholdCount;
            return this;
        }
        @CustomType.Setter
        public Builder matcher(@Nullable TargetGroupConfigHealthCheckMatcher matcher) {
            this.matcher = matcher;
            return this;
        }
        @CustomType.Setter
        public Builder path(@Nullable String path) {
            this.path = path;
            return this;
        }
        @CustomType.Setter
        public Builder port(@Nullable Integer port) {
            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder protocol(@Nullable String protocol) {
            this.protocol = protocol;
            return this;
        }
        @CustomType.Setter
        public Builder protocolVersion(@Nullable String protocolVersion) {
            this.protocolVersion = protocolVersion;
            return this;
        }
        @CustomType.Setter
        public Builder unhealthyThresholdCount(@Nullable Integer unhealthyThresholdCount) {
            this.unhealthyThresholdCount = unhealthyThresholdCount;
            return this;
        }
        public TargetGroupConfigHealthCheck build() {
            final var _resultValue = new TargetGroupConfigHealthCheck();
            _resultValue.enabled = enabled;
            _resultValue.healthCheckIntervalSeconds = healthCheckIntervalSeconds;
            _resultValue.healthCheckTimeoutSeconds = healthCheckTimeoutSeconds;
            _resultValue.healthyThresholdCount = healthyThresholdCount;
            _resultValue.matcher = matcher;
            _resultValue.path = path;
            _resultValue.port = port;
            _resultValue.protocol = protocol;
            _resultValue.protocolVersion = protocolVersion;
            _resultValue.unhealthyThresholdCount = unhealthyThresholdCount;
            return _resultValue;
        }
    }
}
