// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.bedrock;

import com.pulumi.aws.bedrock.inputs.AgentcoreBrowserNetworkConfigurationArgs;
import com.pulumi.aws.bedrock.inputs.AgentcoreBrowserRecordingArgs;
import com.pulumi.aws.bedrock.inputs.AgentcoreBrowserTimeoutsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AgentcoreBrowserArgs extends com.pulumi.resources.ResourceArgs {

    public static final AgentcoreBrowserArgs Empty = new AgentcoreBrowserArgs();

    /**
     * Description of the browser.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the browser.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * ARN of the IAM role that the browser assumes for execution.
     * 
     */
    @Import(name="executionRoleArn")
    private @Nullable Output<String> executionRoleArn;

    /**
     * @return ARN of the IAM role that the browser assumes for execution.
     * 
     */
    public Optional<Output<String>> executionRoleArn() {
        return Optional.ofNullable(this.executionRoleArn);
    }

    /**
     * Name of the browser.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the browser.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Network configuration for the browser. See `networkConfiguration` below.
     * 
     * The following arguments are optional:
     * 
     */
    @Import(name="networkConfiguration")
    private @Nullable Output<AgentcoreBrowserNetworkConfigurationArgs> networkConfiguration;

    /**
     * @return Network configuration for the browser. See `networkConfiguration` below.
     * 
     * The following arguments are optional:
     * 
     */
    public Optional<Output<AgentcoreBrowserNetworkConfigurationArgs>> networkConfiguration() {
        return Optional.ofNullable(this.networkConfiguration);
    }

    /**
     * Recording configuration for browser sessions. See `recording` below.
     * 
     */
    @Import(name="recording")
    private @Nullable Output<AgentcoreBrowserRecordingArgs> recording;

    /**
     * @return Recording configuration for browser sessions. See `recording` below.
     * 
     */
    public Optional<Output<AgentcoreBrowserRecordingArgs>> recording() {
        return Optional.ofNullable(this.recording);
    }

    /**
     * Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="timeouts")
    private @Nullable Output<AgentcoreBrowserTimeoutsArgs> timeouts;

    public Optional<Output<AgentcoreBrowserTimeoutsArgs>> timeouts() {
        return Optional.ofNullable(this.timeouts);
    }

    private AgentcoreBrowserArgs() {}

    private AgentcoreBrowserArgs(AgentcoreBrowserArgs $) {
        this.description = $.description;
        this.executionRoleArn = $.executionRoleArn;
        this.name = $.name;
        this.networkConfiguration = $.networkConfiguration;
        this.recording = $.recording;
        this.region = $.region;
        this.tags = $.tags;
        this.timeouts = $.timeouts;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AgentcoreBrowserArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AgentcoreBrowserArgs $;

        public Builder() {
            $ = new AgentcoreBrowserArgs();
        }

        public Builder(AgentcoreBrowserArgs defaults) {
            $ = new AgentcoreBrowserArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Description of the browser.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the browser.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param executionRoleArn ARN of the IAM role that the browser assumes for execution.
         * 
         * @return builder
         * 
         */
        public Builder executionRoleArn(@Nullable Output<String> executionRoleArn) {
            $.executionRoleArn = executionRoleArn;
            return this;
        }

        /**
         * @param executionRoleArn ARN of the IAM role that the browser assumes for execution.
         * 
         * @return builder
         * 
         */
        public Builder executionRoleArn(String executionRoleArn) {
            return executionRoleArn(Output.of(executionRoleArn));
        }

        /**
         * @param name Name of the browser.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the browser.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param networkConfiguration Network configuration for the browser. See `networkConfiguration` below.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder networkConfiguration(@Nullable Output<AgentcoreBrowserNetworkConfigurationArgs> networkConfiguration) {
            $.networkConfiguration = networkConfiguration;
            return this;
        }

        /**
         * @param networkConfiguration Network configuration for the browser. See `networkConfiguration` below.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder networkConfiguration(AgentcoreBrowserNetworkConfigurationArgs networkConfiguration) {
            return networkConfiguration(Output.of(networkConfiguration));
        }

        /**
         * @param recording Recording configuration for browser sessions. See `recording` below.
         * 
         * @return builder
         * 
         */
        public Builder recording(@Nullable Output<AgentcoreBrowserRecordingArgs> recording) {
            $.recording = recording;
            return this;
        }

        /**
         * @param recording Recording configuration for browser sessions. See `recording` below.
         * 
         * @return builder
         * 
         */
        public Builder recording(AgentcoreBrowserRecordingArgs recording) {
            return recording(Output.of(recording));
        }

        /**
         * @param region Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param tags Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder timeouts(@Nullable Output<AgentcoreBrowserTimeoutsArgs> timeouts) {
            $.timeouts = timeouts;
            return this;
        }

        public Builder timeouts(AgentcoreBrowserTimeoutsArgs timeouts) {
            return timeouts(Output.of(timeouts));
        }

        public AgentcoreBrowserArgs build() {
            return $;
        }
    }

}
