// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.inputs;

import com.pulumi.aws.quicksight.inputs.ConditionalFormattingColorArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.util.Objects;


public final class VisualsGaugeChartVisualConditionalFormattingConditionalFormattingOptionArcArgs extends com.pulumi.resources.ResourceArgs {

    public static final VisualsGaugeChartVisualConditionalFormattingConditionalFormattingOptionArcArgs Empty = new VisualsGaugeChartVisualConditionalFormattingConditionalFormattingOptionArcArgs();

    @Import(name="foregroundColor", required=true)
    private Output<ConditionalFormattingColorArgs> foregroundColor;

    public Output<ConditionalFormattingColorArgs> foregroundColor() {
        return this.foregroundColor;
    }

    private VisualsGaugeChartVisualConditionalFormattingConditionalFormattingOptionArcArgs() {}

    private VisualsGaugeChartVisualConditionalFormattingConditionalFormattingOptionArcArgs(VisualsGaugeChartVisualConditionalFormattingConditionalFormattingOptionArcArgs $) {
        this.foregroundColor = $.foregroundColor;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VisualsGaugeChartVisualConditionalFormattingConditionalFormattingOptionArcArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VisualsGaugeChartVisualConditionalFormattingConditionalFormattingOptionArcArgs $;

        public Builder() {
            $ = new VisualsGaugeChartVisualConditionalFormattingConditionalFormattingOptionArcArgs();
        }

        public Builder(VisualsGaugeChartVisualConditionalFormattingConditionalFormattingOptionArcArgs defaults) {
            $ = new VisualsGaugeChartVisualConditionalFormattingConditionalFormattingOptionArcArgs(Objects.requireNonNull(defaults));
        }

        public Builder foregroundColor(Output<ConditionalFormattingColorArgs> foregroundColor) {
            $.foregroundColor = foregroundColor;
            return this;
        }

        public Builder foregroundColor(ConditionalFormattingColorArgs foregroundColor) {
            return foregroundColor(Output.of(foregroundColor));
        }

        public VisualsGaugeChartVisualConditionalFormattingConditionalFormattingOptionArcArgs build() {
            if ($.foregroundColor == null) {
                throw new MissingRequiredPropertyException("VisualsGaugeChartVisualConditionalFormattingConditionalFormattingOptionArcArgs", "foregroundColor");
            }
            return $;
        }
    }

}
