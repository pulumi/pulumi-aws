// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.inspector2.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EnablerState extends com.pulumi.resources.ResourceArgs {

    public static final EnablerState Empty = new EnablerState();

    /**
     * Set of account IDs.
     * Can contain one of: the Organization&#39;s Administrator Account, or one or more Member Accounts.
     * 
     */
    @Import(name="accountIds")
    private @Nullable Output<List<String>> accountIds;

    /**
     * @return Set of account IDs.
     * Can contain one of: the Organization&#39;s Administrator Account, or one or more Member Accounts.
     * 
     */
    public Optional<Output<List<String>>> accountIds() {
        return Optional.ofNullable(this.accountIds);
    }

    /**
     * Type of resources to scan.
     * Valid values are `EC2`, `ECR`, and `LAMBDA`.
     * At least one item is required.
     * 
     */
    @Import(name="resourceTypes")
    private @Nullable Output<List<String>> resourceTypes;

    /**
     * @return Type of resources to scan.
     * Valid values are `EC2`, `ECR`, and `LAMBDA`.
     * At least one item is required.
     * 
     */
    public Optional<Output<List<String>>> resourceTypes() {
        return Optional.ofNullable(this.resourceTypes);
    }

    private EnablerState() {}

    private EnablerState(EnablerState $) {
        this.accountIds = $.accountIds;
        this.resourceTypes = $.resourceTypes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EnablerState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EnablerState $;

        public Builder() {
            $ = new EnablerState();
        }

        public Builder(EnablerState defaults) {
            $ = new EnablerState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountIds Set of account IDs.
         * Can contain one of: the Organization&#39;s Administrator Account, or one or more Member Accounts.
         * 
         * @return builder
         * 
         */
        public Builder accountIds(@Nullable Output<List<String>> accountIds) {
            $.accountIds = accountIds;
            return this;
        }

        /**
         * @param accountIds Set of account IDs.
         * Can contain one of: the Organization&#39;s Administrator Account, or one or more Member Accounts.
         * 
         * @return builder
         * 
         */
        public Builder accountIds(List<String> accountIds) {
            return accountIds(Output.of(accountIds));
        }

        /**
         * @param accountIds Set of account IDs.
         * Can contain one of: the Organization&#39;s Administrator Account, or one or more Member Accounts.
         * 
         * @return builder
         * 
         */
        public Builder accountIds(String... accountIds) {
            return accountIds(List.of(accountIds));
        }

        /**
         * @param resourceTypes Type of resources to scan.
         * Valid values are `EC2`, `ECR`, and `LAMBDA`.
         * At least one item is required.
         * 
         * @return builder
         * 
         */
        public Builder resourceTypes(@Nullable Output<List<String>> resourceTypes) {
            $.resourceTypes = resourceTypes;
            return this;
        }

        /**
         * @param resourceTypes Type of resources to scan.
         * Valid values are `EC2`, `ECR`, and `LAMBDA`.
         * At least one item is required.
         * 
         * @return builder
         * 
         */
        public Builder resourceTypes(List<String> resourceTypes) {
            return resourceTypes(Output.of(resourceTypes));
        }

        /**
         * @param resourceTypes Type of resources to scan.
         * Valid values are `EC2`, `ECR`, and `LAMBDA`.
         * At least one item is required.
         * 
         * @return builder
         * 
         */
        public Builder resourceTypes(String... resourceTypes) {
            return resourceTypes(List.of(resourceTypes));
        }

        public EnablerState build() {
            return $;
        }
    }

}
