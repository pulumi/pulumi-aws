// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.rekognition;

import com.pulumi.aws.rekognition.inputs.CollectionTimeoutsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CollectionArgs extends com.pulumi.resources.ResourceArgs {

    public static final CollectionArgs Empty = new CollectionArgs();

    /**
     * The name of the collection
     * 
     * The following arguments are optional:
     * 
     */
    @Import(name="collectionId", required=true)
    private Output<String> collectionId;

    /**
     * @return The name of the collection
     * 
     * The following arguments are optional:
     * 
     */
    public Output<String> collectionId() {
        return this.collectionId;
    }

    /**
     * A map of tags assigned to the WorkSpaces Connection Alias. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A map of tags assigned to the WorkSpaces Connection Alias. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="timeouts")
    private @Nullable Output<CollectionTimeoutsArgs> timeouts;

    public Optional<Output<CollectionTimeoutsArgs>> timeouts() {
        return Optional.ofNullable(this.timeouts);
    }

    private CollectionArgs() {}

    private CollectionArgs(CollectionArgs $) {
        this.collectionId = $.collectionId;
        this.tags = $.tags;
        this.timeouts = $.timeouts;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CollectionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CollectionArgs $;

        public Builder() {
            $ = new CollectionArgs();
        }

        public Builder(CollectionArgs defaults) {
            $ = new CollectionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param collectionId The name of the collection
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder collectionId(Output<String> collectionId) {
            $.collectionId = collectionId;
            return this;
        }

        /**
         * @param collectionId The name of the collection
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder collectionId(String collectionId) {
            return collectionId(Output.of(collectionId));
        }

        /**
         * @param tags A map of tags assigned to the WorkSpaces Connection Alias. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A map of tags assigned to the WorkSpaces Connection Alias. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder timeouts(@Nullable Output<CollectionTimeoutsArgs> timeouts) {
            $.timeouts = timeouts;
            return this;
        }

        public Builder timeouts(CollectionTimeoutsArgs timeouts) {
            return timeouts(Output.of(timeouts));
        }

        public CollectionArgs build() {
            if ($.collectionId == null) {
                throw new MissingRequiredPropertyException("CollectionArgs", "collectionId");
            }
            return $;
        }
    }

}
