// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.gamelift.inputs;

import com.pulumi.aws.gamelift.inputs.MatchmakingConfigurationGamePropertyArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MatchmakingConfigurationState extends com.pulumi.resources.ResourceArgs {

    public static final MatchmakingConfigurationState Empty = new MatchmakingConfigurationState();

    @Import(name="acceptanceRequired")
    private @Nullable Output<Boolean> acceptanceRequired;

    public Optional<Output<Boolean>> acceptanceRequired() {
        return Optional.ofNullable(this.acceptanceRequired);
    }

    @Import(name="acceptanceTimeoutSeconds")
    private @Nullable Output<Integer> acceptanceTimeoutSeconds;

    public Optional<Output<Integer>> acceptanceTimeoutSeconds() {
        return Optional.ofNullable(this.acceptanceTimeoutSeconds);
    }

    @Import(name="additionalPlayerCount")
    private @Nullable Output<Integer> additionalPlayerCount;

    public Optional<Output<Integer>> additionalPlayerCount() {
        return Optional.ofNullable(this.additionalPlayerCount);
    }

    @Import(name="arn")
    private @Nullable Output<String> arn;

    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    @Import(name="backfillMode")
    private @Nullable Output<String> backfillMode;

    public Optional<Output<String>> backfillMode() {
        return Optional.ofNullable(this.backfillMode);
    }

    @Import(name="creationTime")
    private @Nullable Output<String> creationTime;

    public Optional<Output<String>> creationTime() {
        return Optional.ofNullable(this.creationTime);
    }

    @Import(name="customEventData")
    private @Nullable Output<String> customEventData;

    public Optional<Output<String>> customEventData() {
        return Optional.ofNullable(this.customEventData);
    }

    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="flexMatchMode")
    private @Nullable Output<String> flexMatchMode;

    public Optional<Output<String>> flexMatchMode() {
        return Optional.ofNullable(this.flexMatchMode);
    }

    @Import(name="gameProperties")
    private @Nullable Output<List<MatchmakingConfigurationGamePropertyArgs>> gameProperties;

    public Optional<Output<List<MatchmakingConfigurationGamePropertyArgs>>> gameProperties() {
        return Optional.ofNullable(this.gameProperties);
    }

    @Import(name="gameSessionData")
    private @Nullable Output<String> gameSessionData;

    public Optional<Output<String>> gameSessionData() {
        return Optional.ofNullable(this.gameSessionData);
    }

    @Import(name="gameSessionQueueArns")
    private @Nullable Output<List<String>> gameSessionQueueArns;

    public Optional<Output<List<String>>> gameSessionQueueArns() {
        return Optional.ofNullable(this.gameSessionQueueArns);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="notificationTarget")
    private @Nullable Output<String> notificationTarget;

    public Optional<Output<String>> notificationTarget() {
        return Optional.ofNullable(this.notificationTarget);
    }

    @Import(name="requestTimeoutSeconds")
    private @Nullable Output<Integer> requestTimeoutSeconds;

    public Optional<Output<Integer>> requestTimeoutSeconds() {
        return Optional.ofNullable(this.requestTimeoutSeconds);
    }

    @Import(name="ruleSetArn")
    private @Nullable Output<String> ruleSetArn;

    public Optional<Output<String>> ruleSetArn() {
        return Optional.ofNullable(this.ruleSetArn);
    }

    @Import(name="ruleSetName")
    private @Nullable Output<String> ruleSetName;

    public Optional<Output<String>> ruleSetName() {
        return Optional.ofNullable(this.ruleSetName);
    }

    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    private MatchmakingConfigurationState() {}

    private MatchmakingConfigurationState(MatchmakingConfigurationState $) {
        this.acceptanceRequired = $.acceptanceRequired;
        this.acceptanceTimeoutSeconds = $.acceptanceTimeoutSeconds;
        this.additionalPlayerCount = $.additionalPlayerCount;
        this.arn = $.arn;
        this.backfillMode = $.backfillMode;
        this.creationTime = $.creationTime;
        this.customEventData = $.customEventData;
        this.description = $.description;
        this.flexMatchMode = $.flexMatchMode;
        this.gameProperties = $.gameProperties;
        this.gameSessionData = $.gameSessionData;
        this.gameSessionQueueArns = $.gameSessionQueueArns;
        this.name = $.name;
        this.notificationTarget = $.notificationTarget;
        this.requestTimeoutSeconds = $.requestTimeoutSeconds;
        this.ruleSetArn = $.ruleSetArn;
        this.ruleSetName = $.ruleSetName;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MatchmakingConfigurationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MatchmakingConfigurationState $;

        public Builder() {
            $ = new MatchmakingConfigurationState();
        }

        public Builder(MatchmakingConfigurationState defaults) {
            $ = new MatchmakingConfigurationState(Objects.requireNonNull(defaults));
        }

        public Builder acceptanceRequired(@Nullable Output<Boolean> acceptanceRequired) {
            $.acceptanceRequired = acceptanceRequired;
            return this;
        }

        public Builder acceptanceRequired(Boolean acceptanceRequired) {
            return acceptanceRequired(Output.of(acceptanceRequired));
        }

        public Builder acceptanceTimeoutSeconds(@Nullable Output<Integer> acceptanceTimeoutSeconds) {
            $.acceptanceTimeoutSeconds = acceptanceTimeoutSeconds;
            return this;
        }

        public Builder acceptanceTimeoutSeconds(Integer acceptanceTimeoutSeconds) {
            return acceptanceTimeoutSeconds(Output.of(acceptanceTimeoutSeconds));
        }

        public Builder additionalPlayerCount(@Nullable Output<Integer> additionalPlayerCount) {
            $.additionalPlayerCount = additionalPlayerCount;
            return this;
        }

        public Builder additionalPlayerCount(Integer additionalPlayerCount) {
            return additionalPlayerCount(Output.of(additionalPlayerCount));
        }

        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        public Builder backfillMode(@Nullable Output<String> backfillMode) {
            $.backfillMode = backfillMode;
            return this;
        }

        public Builder backfillMode(String backfillMode) {
            return backfillMode(Output.of(backfillMode));
        }

        public Builder creationTime(@Nullable Output<String> creationTime) {
            $.creationTime = creationTime;
            return this;
        }

        public Builder creationTime(String creationTime) {
            return creationTime(Output.of(creationTime));
        }

        public Builder customEventData(@Nullable Output<String> customEventData) {
            $.customEventData = customEventData;
            return this;
        }

        public Builder customEventData(String customEventData) {
            return customEventData(Output.of(customEventData));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder flexMatchMode(@Nullable Output<String> flexMatchMode) {
            $.flexMatchMode = flexMatchMode;
            return this;
        }

        public Builder flexMatchMode(String flexMatchMode) {
            return flexMatchMode(Output.of(flexMatchMode));
        }

        public Builder gameProperties(@Nullable Output<List<MatchmakingConfigurationGamePropertyArgs>> gameProperties) {
            $.gameProperties = gameProperties;
            return this;
        }

        public Builder gameProperties(List<MatchmakingConfigurationGamePropertyArgs> gameProperties) {
            return gameProperties(Output.of(gameProperties));
        }

        public Builder gameProperties(MatchmakingConfigurationGamePropertyArgs... gameProperties) {
            return gameProperties(List.of(gameProperties));
        }

        public Builder gameSessionData(@Nullable Output<String> gameSessionData) {
            $.gameSessionData = gameSessionData;
            return this;
        }

        public Builder gameSessionData(String gameSessionData) {
            return gameSessionData(Output.of(gameSessionData));
        }

        public Builder gameSessionQueueArns(@Nullable Output<List<String>> gameSessionQueueArns) {
            $.gameSessionQueueArns = gameSessionQueueArns;
            return this;
        }

        public Builder gameSessionQueueArns(List<String> gameSessionQueueArns) {
            return gameSessionQueueArns(Output.of(gameSessionQueueArns));
        }

        public Builder gameSessionQueueArns(String... gameSessionQueueArns) {
            return gameSessionQueueArns(List.of(gameSessionQueueArns));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder notificationTarget(@Nullable Output<String> notificationTarget) {
            $.notificationTarget = notificationTarget;
            return this;
        }

        public Builder notificationTarget(String notificationTarget) {
            return notificationTarget(Output.of(notificationTarget));
        }

        public Builder requestTimeoutSeconds(@Nullable Output<Integer> requestTimeoutSeconds) {
            $.requestTimeoutSeconds = requestTimeoutSeconds;
            return this;
        }

        public Builder requestTimeoutSeconds(Integer requestTimeoutSeconds) {
            return requestTimeoutSeconds(Output.of(requestTimeoutSeconds));
        }

        public Builder ruleSetArn(@Nullable Output<String> ruleSetArn) {
            $.ruleSetArn = ruleSetArn;
            return this;
        }

        public Builder ruleSetArn(String ruleSetArn) {
            return ruleSetArn(Output.of(ruleSetArn));
        }

        public Builder ruleSetName(@Nullable Output<String> ruleSetName) {
            $.ruleSetName = ruleSetName;
            return this;
        }

        public Builder ruleSetName(String ruleSetName) {
            return ruleSetName(Output.of(ruleSetName));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        public MatchmakingConfigurationState build() {
            return $;
        }
    }

}
