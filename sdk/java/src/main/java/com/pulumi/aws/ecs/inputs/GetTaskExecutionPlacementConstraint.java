// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ecs.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetTaskExecutionPlacementConstraint extends com.pulumi.resources.InvokeArgs {

    public static final GetTaskExecutionPlacementConstraint Empty = new GetTaskExecutionPlacementConstraint();

    /**
     * A cluster query language expression to apply to the constraint. The expression can have a maximum length of 2000 characters. You can&#39;t specify an expression if the constraint type is `distinctInstance`.
     * 
     */
    @Import(name="expression")
    private @Nullable String expression;

    /**
     * @return A cluster query language expression to apply to the constraint. The expression can have a maximum length of 2000 characters. You can&#39;t specify an expression if the constraint type is `distinctInstance`.
     * 
     */
    public Optional<String> expression() {
        return Optional.ofNullable(this.expression);
    }

    /**
     * The type of constraint. Valid values are `distinctInstance` or `memberOf`. Use `distinctInstance` to ensure that each task in a particular group is running on a different container instance. Use `memberOf` to restrict the selection to a group of valid candidates.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    /**
     * @return The type of constraint. Valid values are `distinctInstance` or `memberOf`. Use `distinctInstance` to ensure that each task in a particular group is running on a different container instance. Use `memberOf` to restrict the selection to a group of valid candidates.
     * 
     */
    public String type() {
        return this.type;
    }

    private GetTaskExecutionPlacementConstraint() {}

    private GetTaskExecutionPlacementConstraint(GetTaskExecutionPlacementConstraint $) {
        this.expression = $.expression;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetTaskExecutionPlacementConstraint defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetTaskExecutionPlacementConstraint $;

        public Builder() {
            $ = new GetTaskExecutionPlacementConstraint();
        }

        public Builder(GetTaskExecutionPlacementConstraint defaults) {
            $ = new GetTaskExecutionPlacementConstraint(Objects.requireNonNull(defaults));
        }

        /**
         * @param expression A cluster query language expression to apply to the constraint. The expression can have a maximum length of 2000 characters. You can&#39;t specify an expression if the constraint type is `distinctInstance`.
         * 
         * @return builder
         * 
         */
        public Builder expression(@Nullable String expression) {
            $.expression = expression;
            return this;
        }

        /**
         * @param type The type of constraint. Valid values are `distinctInstance` or `memberOf`. Use `distinctInstance` to ensure that each task in a particular group is running on a different container instance. Use `memberOf` to restrict the selection to a group of valid candidates.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public GetTaskExecutionPlacementConstraint build() {
            if ($.type == null) {
                throw new MissingRequiredPropertyException("GetTaskExecutionPlacementConstraint", "type");
            }
            return $;
        }
    }

}
