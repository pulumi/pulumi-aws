// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.bedrock;

import com.pulumi.aws.Utilities;
import com.pulumi.aws.bedrock.AgentcoreOauth2CredentialProviderArgs;
import com.pulumi.aws.bedrock.inputs.AgentcoreOauth2CredentialProviderState;
import com.pulumi.aws.bedrock.outputs.AgentcoreOauth2CredentialProviderClientSecretArn;
import com.pulumi.aws.bedrock.outputs.AgentcoreOauth2CredentialProviderOauth2ProviderConfig;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Example Usage
 * 
 * ### GitHub OAuth Provider
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.aws.bedrock.AgentcoreOauth2CredentialProvider;
 * import com.pulumi.aws.bedrock.AgentcoreOauth2CredentialProviderArgs;
 * import com.pulumi.aws.bedrock.inputs.AgentcoreOauth2CredentialProviderOauth2ProviderConfigArgs;
 * import com.pulumi.aws.bedrock.inputs.AgentcoreOauth2CredentialProviderOauth2ProviderConfigGithubOauth2ProviderConfigArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var github = new AgentcoreOauth2CredentialProvider("github", AgentcoreOauth2CredentialProviderArgs.builder()
 *             .name("github-oauth-provider")
 *             .credentialProviderVendor("GithubOauth2")
 *             .oauth2ProviderConfig(AgentcoreOauth2CredentialProviderOauth2ProviderConfigArgs.builder()
 *                 .githubOauth2ProviderConfig(AgentcoreOauth2CredentialProviderOauth2ProviderConfigGithubOauth2ProviderConfigArgs.builder()
 *                     .clientId("your-github-client-id")
 *                     .clientSecret("your-github-client-secret")
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ### Custom OAuth Provider with Discovery URL
 * 
 * ### Custom OAuth Provider with Authorization Server Metadata
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.aws.bedrock.AgentcoreOauth2CredentialProvider;
 * import com.pulumi.aws.bedrock.AgentcoreOauth2CredentialProviderArgs;
 * import com.pulumi.aws.bedrock.inputs.AgentcoreOauth2CredentialProviderOauth2ProviderConfigArgs;
 * import com.pulumi.aws.bedrock.inputs.AgentcoreOauth2CredentialProviderOauth2ProviderConfigCustomOauth2ProviderConfigArgs;
 * import com.pulumi.aws.bedrock.inputs.AgentcoreOauth2CredentialProviderOauth2ProviderConfigCustomOauth2ProviderConfigOauthDiscoveryArgs;
 * import com.pulumi.aws.bedrock.inputs.AgentcoreOauth2CredentialProviderOauth2ProviderConfigCustomOauth2ProviderConfigOauthDiscoveryAuthorizationServerMetadataArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var keycloak = new AgentcoreOauth2CredentialProvider("keycloak", AgentcoreOauth2CredentialProviderArgs.builder()
 *             .name("keycloak-oauth-provider")
 *             .credentialProviderVendor("CustomOauth2")
 *             .oauth2ProviderConfig(AgentcoreOauth2CredentialProviderOauth2ProviderConfigArgs.builder()
 *                 .customOauth2ProviderConfig(AgentcoreOauth2CredentialProviderOauth2ProviderConfigCustomOauth2ProviderConfigArgs.builder()
 *                     .clientIdWo("keycloak-client-id")
 *                     .clientSecretWo("keycloak-client-secret")
 *                     .clientCredentialsWoVersion(1)
 *                     .oauthDiscovery(AgentcoreOauth2CredentialProviderOauth2ProviderConfigCustomOauth2ProviderConfigOauthDiscoveryArgs.builder()
 *                         .authorizationServerMetadata(AgentcoreOauth2CredentialProviderOauth2ProviderConfigCustomOauth2ProviderConfigOauthDiscoveryAuthorizationServerMetadataArgs.builder()
 *                             .issuer("https://auth.company.com/realms/production")
 *                             .authorizationEndpoint("https://auth.company.com/realms/production/protocol/openid-connect/auth")
 *                             .tokenEndpoint("https://auth.company.com/realms/production/protocol/openid-connect/token")
 *                             .responseTypes(                            
 *                                 "code",
 *                                 "id_token")
 *                             .build())
 *                         .build())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ## Import
 * 
 * Using `pulumi import`, import Bedrock AgentCore OAuth2 Credential Provider using the provider name. For example:
 * 
 * ```sh
 * $ pulumi import aws:bedrock/agentcoreOauth2CredentialProvider:AgentcoreOauth2CredentialProvider example oauth2-provider-name
 * ```
 * 
 */
@ResourceType(type="aws:bedrock/agentcoreOauth2CredentialProvider:AgentcoreOauth2CredentialProvider")
public class AgentcoreOauth2CredentialProvider extends com.pulumi.resources.CustomResource {
    /**
     * ARN of the AWS Secrets Manager secret containing the client secret.
     * 
     */
    @Export(name="clientSecretArns", refs={List.class,AgentcoreOauth2CredentialProviderClientSecretArn.class}, tree="[0,1]")
    private Output<List<AgentcoreOauth2CredentialProviderClientSecretArn>> clientSecretArns;

    /**
     * @return ARN of the AWS Secrets Manager secret containing the client secret.
     * 
     */
    public Output<List<AgentcoreOauth2CredentialProviderClientSecretArn>> clientSecretArns() {
        return this.clientSecretArns;
    }
    /**
     * ARN of the OAuth2 credential provider.
     * 
     */
    @Export(name="credentialProviderArn", refs={String.class}, tree="[0]")
    private Output<String> credentialProviderArn;

    /**
     * @return ARN of the OAuth2 credential provider.
     * 
     */
    public Output<String> credentialProviderArn() {
        return this.credentialProviderArn;
    }
    /**
     * Vendor of the OAuth2 credential provider. Valid values: `CustomOauth2`, `GithubOauth2`, `GoogleOauth2`, `Microsoft`, `SalesforceOauth2`, `SlackOauth2`.
     * 
     */
    @Export(name="credentialProviderVendor", refs={String.class}, tree="[0]")
    private Output<String> credentialProviderVendor;

    /**
     * @return Vendor of the OAuth2 credential provider. Valid values: `CustomOauth2`, `GithubOauth2`, `GoogleOauth2`, `Microsoft`, `SalesforceOauth2`, `SlackOauth2`.
     * 
     */
    public Output<String> credentialProviderVendor() {
        return this.credentialProviderVendor;
    }
    /**
     * Name of the OAuth2 credential provider.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of the OAuth2 credential provider.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * OAuth2 provider configuration. Must contain exactly one provider type. See `oauth2ProviderConfig` below.
     * 
     * The following arguments are optional:
     * 
     */
    @Export(name="oauth2ProviderConfig", refs={AgentcoreOauth2CredentialProviderOauth2ProviderConfig.class}, tree="[0]")
    private Output</* @Nullable */ AgentcoreOauth2CredentialProviderOauth2ProviderConfig> oauth2ProviderConfig;

    /**
     * @return OAuth2 provider configuration. Must contain exactly one provider type. See `oauth2ProviderConfig` below.
     * 
     * The following arguments are optional:
     * 
     */
    public Output<Optional<AgentcoreOauth2CredentialProviderOauth2ProviderConfig>> oauth2ProviderConfig() {
        return Codegen.optional(this.oauth2ProviderConfig);
    }
    /**
     * Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     * 
     */
    @Export(name="region", refs={String.class}, tree="[0]")
    private Output<String> region;

    /**
     * @return Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     * 
     */
    public Output<String> region() {
        return this.region;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public AgentcoreOauth2CredentialProvider(java.lang.String name) {
        this(name, AgentcoreOauth2CredentialProviderArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public AgentcoreOauth2CredentialProvider(java.lang.String name, AgentcoreOauth2CredentialProviderArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public AgentcoreOauth2CredentialProvider(java.lang.String name, AgentcoreOauth2CredentialProviderArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("aws:bedrock/agentcoreOauth2CredentialProvider:AgentcoreOauth2CredentialProvider", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private AgentcoreOauth2CredentialProvider(java.lang.String name, Output<java.lang.String> id, @Nullable AgentcoreOauth2CredentialProviderState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("aws:bedrock/agentcoreOauth2CredentialProvider:AgentcoreOauth2CredentialProvider", name, state, makeResourceOptions(options, id), false);
    }

    private static AgentcoreOauth2CredentialProviderArgs makeArgs(AgentcoreOauth2CredentialProviderArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? AgentcoreOauth2CredentialProviderArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static AgentcoreOauth2CredentialProvider get(java.lang.String name, Output<java.lang.String> id, @Nullable AgentcoreOauth2CredentialProviderState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new AgentcoreOauth2CredentialProvider(name, id, state, options);
    }
}
