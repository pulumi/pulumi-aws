// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.outputs;

import com.pulumi.aws.quicksight.outputs.GetDataSetPhysicalTableMapCustomSql;
import com.pulumi.aws.quicksight.outputs.GetDataSetPhysicalTableMapRelationalTable;
import com.pulumi.aws.quicksight.outputs.GetDataSetPhysicalTableMapS3Source;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDataSetPhysicalTableMap {
    private @Nullable List<GetDataSetPhysicalTableMapCustomSql> customSqls;
    private @Nullable String physicalTableMapId;
    private @Nullable List<GetDataSetPhysicalTableMapRelationalTable> relationalTables;
    private @Nullable List<GetDataSetPhysicalTableMapS3Source> s3Sources;

    private GetDataSetPhysicalTableMap() {}
    public List<GetDataSetPhysicalTableMapCustomSql> customSqls() {
        return this.customSqls == null ? List.of() : this.customSqls;
    }
    public Optional<String> physicalTableMapId() {
        return Optional.ofNullable(this.physicalTableMapId);
    }
    public List<GetDataSetPhysicalTableMapRelationalTable> relationalTables() {
        return this.relationalTables == null ? List.of() : this.relationalTables;
    }
    public List<GetDataSetPhysicalTableMapS3Source> s3Sources() {
        return this.s3Sources == null ? List.of() : this.s3Sources;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDataSetPhysicalTableMap defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<GetDataSetPhysicalTableMapCustomSql> customSqls;
        private @Nullable String physicalTableMapId;
        private @Nullable List<GetDataSetPhysicalTableMapRelationalTable> relationalTables;
        private @Nullable List<GetDataSetPhysicalTableMapS3Source> s3Sources;
        public Builder() {}
        public Builder(GetDataSetPhysicalTableMap defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.customSqls = defaults.customSqls;
    	      this.physicalTableMapId = defaults.physicalTableMapId;
    	      this.relationalTables = defaults.relationalTables;
    	      this.s3Sources = defaults.s3Sources;
        }

        @CustomType.Setter
        public Builder customSqls(@Nullable List<GetDataSetPhysicalTableMapCustomSql> customSqls) {
            this.customSqls = customSqls;
            return this;
        }
        public Builder customSqls(GetDataSetPhysicalTableMapCustomSql... customSqls) {
            return customSqls(List.of(customSqls));
        }
        @CustomType.Setter
        public Builder physicalTableMapId(@Nullable String physicalTableMapId) {
            this.physicalTableMapId = physicalTableMapId;
            return this;
        }
        @CustomType.Setter
        public Builder relationalTables(@Nullable List<GetDataSetPhysicalTableMapRelationalTable> relationalTables) {
            this.relationalTables = relationalTables;
            return this;
        }
        public Builder relationalTables(GetDataSetPhysicalTableMapRelationalTable... relationalTables) {
            return relationalTables(List.of(relationalTables));
        }
        @CustomType.Setter
        public Builder s3Sources(@Nullable List<GetDataSetPhysicalTableMapS3Source> s3Sources) {
            this.s3Sources = s3Sources;
            return this;
        }
        public Builder s3Sources(GetDataSetPhysicalTableMapS3Source... s3Sources) {
            return s3Sources(List.of(s3Sources));
        }
        public GetDataSetPhysicalTableMap build() {
            final var o = new GetDataSetPhysicalTableMap();
            o.customSqls = customSqls;
            o.physicalTableMapId = physicalTableMapId;
            o.relationalTables = relationalTables;
            o.s3Sources = s3Sources;
            return o;
        }
    }
}
