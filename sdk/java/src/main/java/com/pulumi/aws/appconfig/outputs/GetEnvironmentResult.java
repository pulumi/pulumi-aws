// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.appconfig.outputs;

import com.pulumi.aws.appconfig.outputs.GetEnvironmentMonitor;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetEnvironmentResult {
    private String applicationId;
    /**
     * @return ARN of the environment.
     * 
     */
    private @Nullable String arn;
    /**
     * @return Name of the environment.
     * 
     */
    private @Nullable String description;
    private String environmentId;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private @Nullable String id;
    /**
     * @return Set of Amazon CloudWatch alarms to monitor during the deployment process.
     * 
     */
    private @Nullable List<GetEnvironmentMonitor> monitors;
    /**
     * @return Name of the environment.
     * 
     */
    private @Nullable String name;
    /**
     * @return State of the environment. Possible values are `READY_FOR_DEPLOYMENT`, `DEPLOYING`, `ROLLING_BACK`
     * or `ROLLED_BACK`.
     * 
     */
    private @Nullable String state;
    /**
     * @return Map of tags for the resource.
     * 
     */
    private @Nullable Map<String,String> tags;

    private GetEnvironmentResult() {}
    public String applicationId() {
        return this.applicationId;
    }
    /**
     * @return ARN of the environment.
     * 
     */
    public Optional<String> arn() {
        return Optional.ofNullable(this.arn);
    }
    /**
     * @return Name of the environment.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    public String environmentId() {
        return this.environmentId;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Set of Amazon CloudWatch alarms to monitor during the deployment process.
     * 
     */
    public List<GetEnvironmentMonitor> monitors() {
        return this.monitors == null ? List.of() : this.monitors;
    }
    /**
     * @return Name of the environment.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return State of the environment. Possible values are `READY_FOR_DEPLOYMENT`, `DEPLOYING`, `ROLLING_BACK`
     * or `ROLLED_BACK`.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    /**
     * @return Map of tags for the resource.
     * 
     */
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetEnvironmentResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String applicationId;
        private @Nullable String arn;
        private @Nullable String description;
        private String environmentId;
        private @Nullable String id;
        private @Nullable List<GetEnvironmentMonitor> monitors;
        private @Nullable String name;
        private @Nullable String state;
        private @Nullable Map<String,String> tags;
        public Builder() {}
        public Builder(GetEnvironmentResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applicationId = defaults.applicationId;
    	      this.arn = defaults.arn;
    	      this.description = defaults.description;
    	      this.environmentId = defaults.environmentId;
    	      this.id = defaults.id;
    	      this.monitors = defaults.monitors;
    	      this.name = defaults.name;
    	      this.state = defaults.state;
    	      this.tags = defaults.tags;
        }

        @CustomType.Setter
        public Builder applicationId(String applicationId) {
            this.applicationId = Objects.requireNonNull(applicationId);
            return this;
        }
        @CustomType.Setter
        public Builder arn(@Nullable String arn) {
            this.arn = arn;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder environmentId(String environmentId) {
            this.environmentId = Objects.requireNonNull(environmentId);
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder monitors(@Nullable List<GetEnvironmentMonitor> monitors) {
            this.monitors = monitors;
            return this;
        }
        public Builder monitors(GetEnvironmentMonitor... monitors) {
            return monitors(List.of(monitors));
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        public GetEnvironmentResult build() {
            final var o = new GetEnvironmentResult();
            o.applicationId = applicationId;
            o.arn = arn;
            o.description = description;
            o.environmentId = environmentId;
            o.id = id;
            o.monitors = monitors;
            o.name = name;
            o.state = state;
            o.tags = tags;
            return o;
        }
    }
}
