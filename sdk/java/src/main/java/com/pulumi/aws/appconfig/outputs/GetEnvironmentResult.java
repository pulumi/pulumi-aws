// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.appconfig.outputs;

import com.pulumi.aws.appconfig.outputs.GetEnvironmentMonitor;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetEnvironmentResult {
    private String applicationId;
    /**
     * @return ARN of the environment.
     * 
     */
    private String arn;
    /**
     * @return Name of the environment.
     * 
     */
    private String description;
    private String environmentId;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Set of Amazon CloudWatch alarms to monitor during the deployment process.
     * 
     */
    private List<GetEnvironmentMonitor> monitors;
    /**
     * @return Name of the environment.
     * 
     */
    private String name;
    /**
     * @return State of the environment. Possible values are `READY_FOR_DEPLOYMENT`, `DEPLOYING`, `ROLLING_BACK`
     * or `ROLLED_BACK`.
     * 
     */
    private String state;
    /**
     * @return Map of tags for the resource.
     * 
     */
    private Map<String,String> tags;

    private GetEnvironmentResult() {}
    public String applicationId() {
        return this.applicationId;
    }
    /**
     * @return ARN of the environment.
     * 
     */
    public String arn() {
        return this.arn;
    }
    /**
     * @return Name of the environment.
     * 
     */
    public String description() {
        return this.description;
    }
    public String environmentId() {
        return this.environmentId;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Set of Amazon CloudWatch alarms to monitor during the deployment process.
     * 
     */
    public List<GetEnvironmentMonitor> monitors() {
        return this.monitors;
    }
    /**
     * @return Name of the environment.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return State of the environment. Possible values are `READY_FOR_DEPLOYMENT`, `DEPLOYING`, `ROLLING_BACK`
     * or `ROLLED_BACK`.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Map of tags for the resource.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetEnvironmentResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String applicationId;
        private String arn;
        private String description;
        private String environmentId;
        private String id;
        private List<GetEnvironmentMonitor> monitors;
        private String name;
        private String state;
        private Map<String,String> tags;
        public Builder() {}
        public Builder(GetEnvironmentResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applicationId = defaults.applicationId;
    	      this.arn = defaults.arn;
    	      this.description = defaults.description;
    	      this.environmentId = defaults.environmentId;
    	      this.id = defaults.id;
    	      this.monitors = defaults.monitors;
    	      this.name = defaults.name;
    	      this.state = defaults.state;
    	      this.tags = defaults.tags;
        }

        @CustomType.Setter
        public Builder applicationId(String applicationId) {
            if (applicationId == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentResult", "applicationId");
            }
            this.applicationId = applicationId;
            return this;
        }
        @CustomType.Setter
        public Builder arn(String arn) {
            if (arn == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentResult", "arn");
            }
            this.arn = arn;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder environmentId(String environmentId) {
            if (environmentId == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentResult", "environmentId");
            }
            this.environmentId = environmentId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder monitors(List<GetEnvironmentMonitor> monitors) {
            if (monitors == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentResult", "monitors");
            }
            this.monitors = monitors;
            return this;
        }
        public Builder monitors(GetEnvironmentMonitor... monitors) {
            return monitors(List.of(monitors));
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        public GetEnvironmentResult build() {
            final var _resultValue = new GetEnvironmentResult();
            _resultValue.applicationId = applicationId;
            _resultValue.arn = arn;
            _resultValue.description = description;
            _resultValue.environmentId = environmentId;
            _resultValue.id = id;
            _resultValue.monitors = monitors;
            _resultValue.name = name;
            _resultValue.state = state;
            _resultValue.tags = tags;
            return _resultValue;
        }
    }
}
