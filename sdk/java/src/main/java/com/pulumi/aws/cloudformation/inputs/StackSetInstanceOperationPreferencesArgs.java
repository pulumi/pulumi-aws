// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.cloudformation.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class StackSetInstanceOperationPreferencesArgs extends com.pulumi.resources.ResourceArgs {

    public static final StackSetInstanceOperationPreferencesArgs Empty = new StackSetInstanceOperationPreferencesArgs();

    @Import(name="failureToleranceCount")
    private @Nullable Output<Integer> failureToleranceCount;

    public Optional<Output<Integer>> failureToleranceCount() {
        return Optional.ofNullable(this.failureToleranceCount);
    }

    @Import(name="failureTolerancePercentage")
    private @Nullable Output<Integer> failureTolerancePercentage;

    public Optional<Output<Integer>> failureTolerancePercentage() {
        return Optional.ofNullable(this.failureTolerancePercentage);
    }

    @Import(name="maxConcurrentCount")
    private @Nullable Output<Integer> maxConcurrentCount;

    public Optional<Output<Integer>> maxConcurrentCount() {
        return Optional.ofNullable(this.maxConcurrentCount);
    }

    @Import(name="maxConcurrentPercentage")
    private @Nullable Output<Integer> maxConcurrentPercentage;

    public Optional<Output<Integer>> maxConcurrentPercentage() {
        return Optional.ofNullable(this.maxConcurrentPercentage);
    }

    @Import(name="regionConcurrencyType")
    private @Nullable Output<String> regionConcurrencyType;

    public Optional<Output<String>> regionConcurrencyType() {
        return Optional.ofNullable(this.regionConcurrencyType);
    }

    @Import(name="regionOrders")
    private @Nullable Output<List<String>> regionOrders;

    public Optional<Output<List<String>>> regionOrders() {
        return Optional.ofNullable(this.regionOrders);
    }

    private StackSetInstanceOperationPreferencesArgs() {}

    private StackSetInstanceOperationPreferencesArgs(StackSetInstanceOperationPreferencesArgs $) {
        this.failureToleranceCount = $.failureToleranceCount;
        this.failureTolerancePercentage = $.failureTolerancePercentage;
        this.maxConcurrentCount = $.maxConcurrentCount;
        this.maxConcurrentPercentage = $.maxConcurrentPercentage;
        this.regionConcurrencyType = $.regionConcurrencyType;
        this.regionOrders = $.regionOrders;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StackSetInstanceOperationPreferencesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StackSetInstanceOperationPreferencesArgs $;

        public Builder() {
            $ = new StackSetInstanceOperationPreferencesArgs();
        }

        public Builder(StackSetInstanceOperationPreferencesArgs defaults) {
            $ = new StackSetInstanceOperationPreferencesArgs(Objects.requireNonNull(defaults));
        }

        public Builder failureToleranceCount(@Nullable Output<Integer> failureToleranceCount) {
            $.failureToleranceCount = failureToleranceCount;
            return this;
        }

        public Builder failureToleranceCount(Integer failureToleranceCount) {
            return failureToleranceCount(Output.of(failureToleranceCount));
        }

        public Builder failureTolerancePercentage(@Nullable Output<Integer> failureTolerancePercentage) {
            $.failureTolerancePercentage = failureTolerancePercentage;
            return this;
        }

        public Builder failureTolerancePercentage(Integer failureTolerancePercentage) {
            return failureTolerancePercentage(Output.of(failureTolerancePercentage));
        }

        public Builder maxConcurrentCount(@Nullable Output<Integer> maxConcurrentCount) {
            $.maxConcurrentCount = maxConcurrentCount;
            return this;
        }

        public Builder maxConcurrentCount(Integer maxConcurrentCount) {
            return maxConcurrentCount(Output.of(maxConcurrentCount));
        }

        public Builder maxConcurrentPercentage(@Nullable Output<Integer> maxConcurrentPercentage) {
            $.maxConcurrentPercentage = maxConcurrentPercentage;
            return this;
        }

        public Builder maxConcurrentPercentage(Integer maxConcurrentPercentage) {
            return maxConcurrentPercentage(Output.of(maxConcurrentPercentage));
        }

        public Builder regionConcurrencyType(@Nullable Output<String> regionConcurrencyType) {
            $.regionConcurrencyType = regionConcurrencyType;
            return this;
        }

        public Builder regionConcurrencyType(String regionConcurrencyType) {
            return regionConcurrencyType(Output.of(regionConcurrencyType));
        }

        public Builder regionOrders(@Nullable Output<List<String>> regionOrders) {
            $.regionOrders = regionOrders;
            return this;
        }

        public Builder regionOrders(List<String> regionOrders) {
            return regionOrders(Output.of(regionOrders));
        }

        public Builder regionOrders(String... regionOrders) {
            return regionOrders(List.of(regionOrders));
        }

        public StackSetInstanceOperationPreferencesArgs build() {
            return $;
        }
    }

}
