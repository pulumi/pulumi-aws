// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.sesv2.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ContactListTopicArgs extends com.pulumi.resources.ResourceArgs {

    public static final ContactListTopicArgs Empty = new ContactListTopicArgs();

    /**
     * The default subscription status to be applied to a contact if the contact has not noted their preference for subscribing to a topic.
     * 
     */
    @Import(name="defaultSubscriptionStatus", required=true)
    private Output<String> defaultSubscriptionStatus;

    /**
     * @return The default subscription status to be applied to a contact if the contact has not noted their preference for subscribing to a topic.
     * 
     */
    public Output<String> defaultSubscriptionStatus() {
        return this.defaultSubscriptionStatus;
    }

    /**
     * A description of what the topic is about, which the contact will see.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A description of what the topic is about, which the contact will see.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The name of the topic the contact will see.
     * 
     */
    @Import(name="displayName", required=true)
    private Output<String> displayName;

    /**
     * @return The name of the topic the contact will see.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * The name of the topic.
     * 
     */
    @Import(name="topicName", required=true)
    private Output<String> topicName;

    /**
     * @return The name of the topic.
     * 
     */
    public Output<String> topicName() {
        return this.topicName;
    }

    private ContactListTopicArgs() {}

    private ContactListTopicArgs(ContactListTopicArgs $) {
        this.defaultSubscriptionStatus = $.defaultSubscriptionStatus;
        this.description = $.description;
        this.displayName = $.displayName;
        this.topicName = $.topicName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ContactListTopicArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ContactListTopicArgs $;

        public Builder() {
            $ = new ContactListTopicArgs();
        }

        public Builder(ContactListTopicArgs defaults) {
            $ = new ContactListTopicArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param defaultSubscriptionStatus The default subscription status to be applied to a contact if the contact has not noted their preference for subscribing to a topic.
         * 
         * @return builder
         * 
         */
        public Builder defaultSubscriptionStatus(Output<String> defaultSubscriptionStatus) {
            $.defaultSubscriptionStatus = defaultSubscriptionStatus;
            return this;
        }

        /**
         * @param defaultSubscriptionStatus The default subscription status to be applied to a contact if the contact has not noted their preference for subscribing to a topic.
         * 
         * @return builder
         * 
         */
        public Builder defaultSubscriptionStatus(String defaultSubscriptionStatus) {
            return defaultSubscriptionStatus(Output.of(defaultSubscriptionStatus));
        }

        /**
         * @param description A description of what the topic is about, which the contact will see.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A description of what the topic is about, which the contact will see.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName The name of the topic the contact will see.
         * 
         * @return builder
         * 
         */
        public Builder displayName(Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The name of the topic the contact will see.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param topicName The name of the topic.
         * 
         * @return builder
         * 
         */
        public Builder topicName(Output<String> topicName) {
            $.topicName = topicName;
            return this;
        }

        /**
         * @param topicName The name of the topic.
         * 
         * @return builder
         * 
         */
        public Builder topicName(String topicName) {
            return topicName(Output.of(topicName));
        }

        public ContactListTopicArgs build() {
            $.defaultSubscriptionStatus = Objects.requireNonNull($.defaultSubscriptionStatus, "expected parameter 'defaultSubscriptionStatus' to be non-null");
            $.displayName = Objects.requireNonNull($.displayName, "expected parameter 'displayName' to be non-null");
            $.topicName = Objects.requireNonNull($.topicName, "expected parameter 'topicName' to be non-null");
            return $;
        }
    }

}
