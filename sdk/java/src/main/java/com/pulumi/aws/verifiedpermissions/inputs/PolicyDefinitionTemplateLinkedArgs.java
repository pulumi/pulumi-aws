// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.verifiedpermissions.inputs;

import com.pulumi.aws.verifiedpermissions.inputs.PolicyDefinitionTemplateLinkedPrincipalArgs;
import com.pulumi.aws.verifiedpermissions.inputs.PolicyDefinitionTemplateLinkedResourceArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PolicyDefinitionTemplateLinkedArgs extends com.pulumi.resources.ResourceArgs {

    public static final PolicyDefinitionTemplateLinkedArgs Empty = new PolicyDefinitionTemplateLinkedArgs();

    /**
     * The ID of the template.
     * 
     */
    @Import(name="policyTemplateId", required=true)
    private Output<String> policyTemplateId;

    /**
     * @return The ID of the template.
     * 
     */
    public Output<String> policyTemplateId() {
        return this.policyTemplateId;
    }

    /**
     * The principal of the template linked policy.
     * 
     */
    @Import(name="principal")
    private @Nullable Output<PolicyDefinitionTemplateLinkedPrincipalArgs> principal;

    /**
     * @return The principal of the template linked policy.
     * 
     */
    public Optional<Output<PolicyDefinitionTemplateLinkedPrincipalArgs>> principal() {
        return Optional.ofNullable(this.principal);
    }

    /**
     * The resource of the template linked policy.
     * 
     */
    @Import(name="resource")
    private @Nullable Output<PolicyDefinitionTemplateLinkedResourceArgs> resource;

    /**
     * @return The resource of the template linked policy.
     * 
     */
    public Optional<Output<PolicyDefinitionTemplateLinkedResourceArgs>> resource() {
        return Optional.ofNullable(this.resource);
    }

    private PolicyDefinitionTemplateLinkedArgs() {}

    private PolicyDefinitionTemplateLinkedArgs(PolicyDefinitionTemplateLinkedArgs $) {
        this.policyTemplateId = $.policyTemplateId;
        this.principal = $.principal;
        this.resource = $.resource;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PolicyDefinitionTemplateLinkedArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PolicyDefinitionTemplateLinkedArgs $;

        public Builder() {
            $ = new PolicyDefinitionTemplateLinkedArgs();
        }

        public Builder(PolicyDefinitionTemplateLinkedArgs defaults) {
            $ = new PolicyDefinitionTemplateLinkedArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param policyTemplateId The ID of the template.
         * 
         * @return builder
         * 
         */
        public Builder policyTemplateId(Output<String> policyTemplateId) {
            $.policyTemplateId = policyTemplateId;
            return this;
        }

        /**
         * @param policyTemplateId The ID of the template.
         * 
         * @return builder
         * 
         */
        public Builder policyTemplateId(String policyTemplateId) {
            return policyTemplateId(Output.of(policyTemplateId));
        }

        /**
         * @param principal The principal of the template linked policy.
         * 
         * @return builder
         * 
         */
        public Builder principal(@Nullable Output<PolicyDefinitionTemplateLinkedPrincipalArgs> principal) {
            $.principal = principal;
            return this;
        }

        /**
         * @param principal The principal of the template linked policy.
         * 
         * @return builder
         * 
         */
        public Builder principal(PolicyDefinitionTemplateLinkedPrincipalArgs principal) {
            return principal(Output.of(principal));
        }

        /**
         * @param resource The resource of the template linked policy.
         * 
         * @return builder
         * 
         */
        public Builder resource(@Nullable Output<PolicyDefinitionTemplateLinkedResourceArgs> resource) {
            $.resource = resource;
            return this;
        }

        /**
         * @param resource The resource of the template linked policy.
         * 
         * @return builder
         * 
         */
        public Builder resource(PolicyDefinitionTemplateLinkedResourceArgs resource) {
            return resource(Output.of(resource));
        }

        public PolicyDefinitionTemplateLinkedArgs build() {
            if ($.policyTemplateId == null) {
                throw new MissingRequiredPropertyException("PolicyDefinitionTemplateLinkedArgs", "policyTemplateId");
            }
            return $;
        }
    }

}
