// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.serverlessrepository.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CloudFormationStackState extends com.pulumi.resources.ResourceArgs {

    public static final CloudFormationStackState Empty = new CloudFormationStackState();

    /**
     * The ARN of the application from the Serverless Application Repository.
     * 
     */
    @Import(name="applicationId")
    private @Nullable Output<String> applicationId;

    /**
     * @return The ARN of the application from the Serverless Application Repository.
     * 
     */
    public Optional<Output<String>> applicationId() {
        return Optional.ofNullable(this.applicationId);
    }

    /**
     * A list of capabilities. Valid values are `CAPABILITY_IAM`, `CAPABILITY_NAMED_IAM`, `CAPABILITY_RESOURCE_POLICY`, or `CAPABILITY_AUTO_EXPAND`
     * 
     */
    @Import(name="capabilities")
    private @Nullable Output<List<String>> capabilities;

    /**
     * @return A list of capabilities. Valid values are `CAPABILITY_IAM`, `CAPABILITY_NAMED_IAM`, `CAPABILITY_RESOURCE_POLICY`, or `CAPABILITY_AUTO_EXPAND`
     * 
     */
    public Optional<Output<List<String>>> capabilities() {
        return Optional.ofNullable(this.capabilities);
    }

    /**
     * The name of the stack to create. The resource deployed in AWS will be prefixed with `serverlessrepo-`
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the stack to create. The resource deployed in AWS will be prefixed with `serverlessrepo-`
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * A map of outputs from the stack.
     * 
     */
    @Import(name="outputs")
    private @Nullable Output<Map<String,String>> outputs;

    /**
     * @return A map of outputs from the stack.
     * 
     */
    public Optional<Output<Map<String,String>>> outputs() {
        return Optional.ofNullable(this.outputs);
    }

    /**
     * A map of Parameter structures that specify input parameters for the stack.
     * 
     */
    @Import(name="parameters")
    private @Nullable Output<Map<String,String>> parameters;

    /**
     * @return A map of Parameter structures that specify input parameters for the stack.
     * 
     */
    public Optional<Output<Map<String,String>>> parameters() {
        return Optional.ofNullable(this.parameters);
    }

    /**
     * The version of the application to deploy. If not supplied, deploys the latest version.
     * 
     */
    @Import(name="semanticVersion")
    private @Nullable Output<String> semanticVersion;

    /**
     * @return The version of the application to deploy. If not supplied, deploys the latest version.
     * 
     */
    public Optional<Output<String>> semanticVersion() {
        return Optional.ofNullable(this.semanticVersion);
    }

    /**
     * A list of tags to associate with this stack. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A list of tags to associate with this stack. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     */
    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    /**
     * @return A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     */
    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    private CloudFormationStackState() {}

    private CloudFormationStackState(CloudFormationStackState $) {
        this.applicationId = $.applicationId;
        this.capabilities = $.capabilities;
        this.name = $.name;
        this.outputs = $.outputs;
        this.parameters = $.parameters;
        this.semanticVersion = $.semanticVersion;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CloudFormationStackState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CloudFormationStackState $;

        public Builder() {
            $ = new CloudFormationStackState();
        }

        public Builder(CloudFormationStackState defaults) {
            $ = new CloudFormationStackState(Objects.requireNonNull(defaults));
        }

        /**
         * @param applicationId The ARN of the application from the Serverless Application Repository.
         * 
         * @return builder
         * 
         */
        public Builder applicationId(@Nullable Output<String> applicationId) {
            $.applicationId = applicationId;
            return this;
        }

        /**
         * @param applicationId The ARN of the application from the Serverless Application Repository.
         * 
         * @return builder
         * 
         */
        public Builder applicationId(String applicationId) {
            return applicationId(Output.of(applicationId));
        }

        /**
         * @param capabilities A list of capabilities. Valid values are `CAPABILITY_IAM`, `CAPABILITY_NAMED_IAM`, `CAPABILITY_RESOURCE_POLICY`, or `CAPABILITY_AUTO_EXPAND`
         * 
         * @return builder
         * 
         */
        public Builder capabilities(@Nullable Output<List<String>> capabilities) {
            $.capabilities = capabilities;
            return this;
        }

        /**
         * @param capabilities A list of capabilities. Valid values are `CAPABILITY_IAM`, `CAPABILITY_NAMED_IAM`, `CAPABILITY_RESOURCE_POLICY`, or `CAPABILITY_AUTO_EXPAND`
         * 
         * @return builder
         * 
         */
        public Builder capabilities(List<String> capabilities) {
            return capabilities(Output.of(capabilities));
        }

        /**
         * @param capabilities A list of capabilities. Valid values are `CAPABILITY_IAM`, `CAPABILITY_NAMED_IAM`, `CAPABILITY_RESOURCE_POLICY`, or `CAPABILITY_AUTO_EXPAND`
         * 
         * @return builder
         * 
         */
        public Builder capabilities(String... capabilities) {
            return capabilities(List.of(capabilities));
        }

        /**
         * @param name The name of the stack to create. The resource deployed in AWS will be prefixed with `serverlessrepo-`
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the stack to create. The resource deployed in AWS will be prefixed with `serverlessrepo-`
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param outputs A map of outputs from the stack.
         * 
         * @return builder
         * 
         */
        public Builder outputs(@Nullable Output<Map<String,String>> outputs) {
            $.outputs = outputs;
            return this;
        }

        /**
         * @param outputs A map of outputs from the stack.
         * 
         * @return builder
         * 
         */
        public Builder outputs(Map<String,String> outputs) {
            return outputs(Output.of(outputs));
        }

        /**
         * @param parameters A map of Parameter structures that specify input parameters for the stack.
         * 
         * @return builder
         * 
         */
        public Builder parameters(@Nullable Output<Map<String,String>> parameters) {
            $.parameters = parameters;
            return this;
        }

        /**
         * @param parameters A map of Parameter structures that specify input parameters for the stack.
         * 
         * @return builder
         * 
         */
        public Builder parameters(Map<String,String> parameters) {
            return parameters(Output.of(parameters));
        }

        /**
         * @param semanticVersion The version of the application to deploy. If not supplied, deploys the latest version.
         * 
         * @return builder
         * 
         */
        public Builder semanticVersion(@Nullable Output<String> semanticVersion) {
            $.semanticVersion = semanticVersion;
            return this;
        }

        /**
         * @param semanticVersion The version of the application to deploy. If not supplied, deploys the latest version.
         * 
         * @return builder
         * 
         */
        public Builder semanticVersion(String semanticVersion) {
            return semanticVersion(Output.of(semanticVersion));
        }

        /**
         * @param tags A list of tags to associate with this stack. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A list of tags to associate with this stack. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tagsAll A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
         * 
         * @return builder
         * 
         */
        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        /**
         * @param tagsAll A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
         * 
         * @return builder
         * 
         */
        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        public CloudFormationStackState build() {
            return $;
        }
    }

}
