// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.route53;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ResolverConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ResolverConfigArgs Empty = new ResolverConfigArgs();

    /**
     * Indicates whether or not the Resolver will create autodefined rules for reverse DNS lookups. Valid values: `ENABLE`, `DISABLE`.
     * 
     */
    @Import(name="autodefinedReverseFlag", required=true)
    private Output<String> autodefinedReverseFlag;

    /**
     * @return Indicates whether or not the Resolver will create autodefined rules for reverse DNS lookups. Valid values: `ENABLE`, `DISABLE`.
     * 
     */
    public Output<String> autodefinedReverseFlag() {
        return this.autodefinedReverseFlag;
    }

    /**
     * The AWS Region to use for API operations. Overrides the Region set in the provider configuration.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return The AWS Region to use for API operations. Overrides the Region set in the provider configuration.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The ID of the VPC that the configuration is for.
     * 
     */
    @Import(name="resourceId", required=true)
    private Output<String> resourceId;

    /**
     * @return The ID of the VPC that the configuration is for.
     * 
     */
    public Output<String> resourceId() {
        return this.resourceId;
    }

    private ResolverConfigArgs() {}

    private ResolverConfigArgs(ResolverConfigArgs $) {
        this.autodefinedReverseFlag = $.autodefinedReverseFlag;
        this.region = $.region;
        this.resourceId = $.resourceId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ResolverConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ResolverConfigArgs $;

        public Builder() {
            $ = new ResolverConfigArgs();
        }

        public Builder(ResolverConfigArgs defaults) {
            $ = new ResolverConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param autodefinedReverseFlag Indicates whether or not the Resolver will create autodefined rules for reverse DNS lookups. Valid values: `ENABLE`, `DISABLE`.
         * 
         * @return builder
         * 
         */
        public Builder autodefinedReverseFlag(Output<String> autodefinedReverseFlag) {
            $.autodefinedReverseFlag = autodefinedReverseFlag;
            return this;
        }

        /**
         * @param autodefinedReverseFlag Indicates whether or not the Resolver will create autodefined rules for reverse DNS lookups. Valid values: `ENABLE`, `DISABLE`.
         * 
         * @return builder
         * 
         */
        public Builder autodefinedReverseFlag(String autodefinedReverseFlag) {
            return autodefinedReverseFlag(Output.of(autodefinedReverseFlag));
        }

        /**
         * @param region The AWS Region to use for API operations. Overrides the Region set in the provider configuration.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The AWS Region to use for API operations. Overrides the Region set in the provider configuration.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param resourceId The ID of the VPC that the configuration is for.
         * 
         * @return builder
         * 
         */
        public Builder resourceId(Output<String> resourceId) {
            $.resourceId = resourceId;
            return this;
        }

        /**
         * @param resourceId The ID of the VPC that the configuration is for.
         * 
         * @return builder
         * 
         */
        public Builder resourceId(String resourceId) {
            return resourceId(Output.of(resourceId));
        }

        public ResolverConfigArgs build() {
            if ($.autodefinedReverseFlag == null) {
                throw new MissingRequiredPropertyException("ResolverConfigArgs", "autodefinedReverseFlag");
            }
            if ($.resourceId == null) {
                throw new MissingRequiredPropertyException("ResolverConfigArgs", "resourceId");
            }
            return $;
        }
    }

}
