// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.appsync.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ResolverCachingConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ResolverCachingConfigArgs Empty = new ResolverCachingConfigArgs();

    /**
     * The caching keys for a resolver that has caching activated. Valid values are entries from the $context.arguments, $context.source, and $context.identity maps.
     * 
     */
    @Import(name="cachingKeys")
    private @Nullable Output<List<String>> cachingKeys;

    /**
     * @return The caching keys for a resolver that has caching activated. Valid values are entries from the $context.arguments, $context.source, and $context.identity maps.
     * 
     */
    public Optional<Output<List<String>>> cachingKeys() {
        return Optional.ofNullable(this.cachingKeys);
    }

    /**
     * The TTL in seconds for a resolver that has caching activated. Valid values are between `1` and `3600` seconds.
     * 
     */
    @Import(name="ttl")
    private @Nullable Output<Integer> ttl;

    /**
     * @return The TTL in seconds for a resolver that has caching activated. Valid values are between `1` and `3600` seconds.
     * 
     */
    public Optional<Output<Integer>> ttl() {
        return Optional.ofNullable(this.ttl);
    }

    private ResolverCachingConfigArgs() {}

    private ResolverCachingConfigArgs(ResolverCachingConfigArgs $) {
        this.cachingKeys = $.cachingKeys;
        this.ttl = $.ttl;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ResolverCachingConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ResolverCachingConfigArgs $;

        public Builder() {
            $ = new ResolverCachingConfigArgs();
        }

        public Builder(ResolverCachingConfigArgs defaults) {
            $ = new ResolverCachingConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cachingKeys The caching keys for a resolver that has caching activated. Valid values are entries from the $context.arguments, $context.source, and $context.identity maps.
         * 
         * @return builder
         * 
         */
        public Builder cachingKeys(@Nullable Output<List<String>> cachingKeys) {
            $.cachingKeys = cachingKeys;
            return this;
        }

        /**
         * @param cachingKeys The caching keys for a resolver that has caching activated. Valid values are entries from the $context.arguments, $context.source, and $context.identity maps.
         * 
         * @return builder
         * 
         */
        public Builder cachingKeys(List<String> cachingKeys) {
            return cachingKeys(Output.of(cachingKeys));
        }

        /**
         * @param cachingKeys The caching keys for a resolver that has caching activated. Valid values are entries from the $context.arguments, $context.source, and $context.identity maps.
         * 
         * @return builder
         * 
         */
        public Builder cachingKeys(String... cachingKeys) {
            return cachingKeys(List.of(cachingKeys));
        }

        /**
         * @param ttl The TTL in seconds for a resolver that has caching activated. Valid values are between `1` and `3600` seconds.
         * 
         * @return builder
         * 
         */
        public Builder ttl(@Nullable Output<Integer> ttl) {
            $.ttl = ttl;
            return this;
        }

        /**
         * @param ttl The TTL in seconds for a resolver that has caching activated. Valid values are between `1` and `3600` seconds.
         * 
         * @return builder
         * 
         */
        public Builder ttl(Integer ttl) {
            return ttl(Output.of(ttl));
        }

        public ResolverCachingConfigArgs build() {
            return $;
        }
    }

}
