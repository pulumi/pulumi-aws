// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.verifiedpermissions.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelectionAccessTokenOnlyArgs extends com.pulumi.resources.ResourceArgs {

    public static final IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelectionAccessTokenOnlyArgs Empty = new IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelectionAccessTokenOnlyArgs();

    /**
     * The access token aud claim values that you want to accept in your policy store.
     * 
     */
    @Import(name="audiences")
    private @Nullable Output<List<String>> audiences;

    /**
     * @return The access token aud claim values that you want to accept in your policy store.
     * 
     */
    public Optional<Output<List<String>>> audiences() {
        return Optional.ofNullable(this.audiences);
    }

    /**
     * The claim that determines the principal in OIDC access tokens.
     * 
     */
    @Import(name="principalIdClaim")
    private @Nullable Output<String> principalIdClaim;

    /**
     * @return The claim that determines the principal in OIDC access tokens.
     * 
     */
    public Optional<Output<String>> principalIdClaim() {
        return Optional.ofNullable(this.principalIdClaim);
    }

    private IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelectionAccessTokenOnlyArgs() {}

    private IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelectionAccessTokenOnlyArgs(IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelectionAccessTokenOnlyArgs $) {
        this.audiences = $.audiences;
        this.principalIdClaim = $.principalIdClaim;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelectionAccessTokenOnlyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelectionAccessTokenOnlyArgs $;

        public Builder() {
            $ = new IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelectionAccessTokenOnlyArgs();
        }

        public Builder(IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelectionAccessTokenOnlyArgs defaults) {
            $ = new IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelectionAccessTokenOnlyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param audiences The access token aud claim values that you want to accept in your policy store.
         * 
         * @return builder
         * 
         */
        public Builder audiences(@Nullable Output<List<String>> audiences) {
            $.audiences = audiences;
            return this;
        }

        /**
         * @param audiences The access token aud claim values that you want to accept in your policy store.
         * 
         * @return builder
         * 
         */
        public Builder audiences(List<String> audiences) {
            return audiences(Output.of(audiences));
        }

        /**
         * @param audiences The access token aud claim values that you want to accept in your policy store.
         * 
         * @return builder
         * 
         */
        public Builder audiences(String... audiences) {
            return audiences(List.of(audiences));
        }

        /**
         * @param principalIdClaim The claim that determines the principal in OIDC access tokens.
         * 
         * @return builder
         * 
         */
        public Builder principalIdClaim(@Nullable Output<String> principalIdClaim) {
            $.principalIdClaim = principalIdClaim;
            return this;
        }

        /**
         * @param principalIdClaim The claim that determines the principal in OIDC access tokens.
         * 
         * @return builder
         * 
         */
        public Builder principalIdClaim(String principalIdClaim) {
            return principalIdClaim(Output.of(principalIdClaim));
        }

        public IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelectionAccessTokenOnlyArgs build() {
            return $;
        }
    }

}
