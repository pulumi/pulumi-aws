// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class VisualsLineChartVisualChartConfigurationForecastConfigurationForecastProperties {
    private @Nullable Double lowerBoundary;
    private @Nullable Integer periodsBackward;
    private @Nullable Integer periodsForward;
    private @Nullable Integer predictionInterval;
    private @Nullable Integer seasonality;
    private @Nullable Double upperBoundary;

    private VisualsLineChartVisualChartConfigurationForecastConfigurationForecastProperties() {}
    public Optional<Double> lowerBoundary() {
        return Optional.ofNullable(this.lowerBoundary);
    }
    public Optional<Integer> periodsBackward() {
        return Optional.ofNullable(this.periodsBackward);
    }
    public Optional<Integer> periodsForward() {
        return Optional.ofNullable(this.periodsForward);
    }
    public Optional<Integer> predictionInterval() {
        return Optional.ofNullable(this.predictionInterval);
    }
    public Optional<Integer> seasonality() {
        return Optional.ofNullable(this.seasonality);
    }
    public Optional<Double> upperBoundary() {
        return Optional.ofNullable(this.upperBoundary);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VisualsLineChartVisualChartConfigurationForecastConfigurationForecastProperties defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Double lowerBoundary;
        private @Nullable Integer periodsBackward;
        private @Nullable Integer periodsForward;
        private @Nullable Integer predictionInterval;
        private @Nullable Integer seasonality;
        private @Nullable Double upperBoundary;
        public Builder() {}
        public Builder(VisualsLineChartVisualChartConfigurationForecastConfigurationForecastProperties defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.lowerBoundary = defaults.lowerBoundary;
    	      this.periodsBackward = defaults.periodsBackward;
    	      this.periodsForward = defaults.periodsForward;
    	      this.predictionInterval = defaults.predictionInterval;
    	      this.seasonality = defaults.seasonality;
    	      this.upperBoundary = defaults.upperBoundary;
        }

        @CustomType.Setter
        public Builder lowerBoundary(@Nullable Double lowerBoundary) {

            this.lowerBoundary = lowerBoundary;
            return this;
        }
        @CustomType.Setter
        public Builder periodsBackward(@Nullable Integer periodsBackward) {

            this.periodsBackward = periodsBackward;
            return this;
        }
        @CustomType.Setter
        public Builder periodsForward(@Nullable Integer periodsForward) {

            this.periodsForward = periodsForward;
            return this;
        }
        @CustomType.Setter
        public Builder predictionInterval(@Nullable Integer predictionInterval) {

            this.predictionInterval = predictionInterval;
            return this;
        }
        @CustomType.Setter
        public Builder seasonality(@Nullable Integer seasonality) {

            this.seasonality = seasonality;
            return this;
        }
        @CustomType.Setter
        public Builder upperBoundary(@Nullable Double upperBoundary) {

            this.upperBoundary = upperBoundary;
            return this;
        }
        public VisualsLineChartVisualChartConfigurationForecastConfigurationForecastProperties build() {
            final var _resultValue = new VisualsLineChartVisualChartConfigurationForecastConfigurationForecastProperties();
            _resultValue.lowerBoundary = lowerBoundary;
            _resultValue.periodsBackward = periodsBackward;
            _resultValue.periodsForward = periodsForward;
            _resultValue.predictionInterval = predictionInterval;
            _resultValue.seasonality = seasonality;
            _resultValue.upperBoundary = upperBoundary;
            return _resultValue;
        }
    }
}
