// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.codecatalyst.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DevEnvironmentRepositoryArgs extends com.pulumi.resources.ResourceArgs {

    public static final DevEnvironmentRepositoryArgs Empty = new DevEnvironmentRepositoryArgs();

    /**
     * The name of the branch in a source repository.
     * 
     * persistent storage (`  persistent_storage `) supports the following:
     * 
     */
    @Import(name="branchName")
    private @Nullable Output<String> branchName;

    /**
     * @return The name of the branch in a source repository.
     * 
     * persistent storage (`  persistent_storage `) supports the following:
     * 
     */
    public Optional<Output<String>> branchName() {
        return Optional.ofNullable(this.branchName);
    }

    /**
     * The name of the source repository.
     * 
     */
    @Import(name="repositoryName", required=true)
    private Output<String> repositoryName;

    /**
     * @return The name of the source repository.
     * 
     */
    public Output<String> repositoryName() {
        return this.repositoryName;
    }

    private DevEnvironmentRepositoryArgs() {}

    private DevEnvironmentRepositoryArgs(DevEnvironmentRepositoryArgs $) {
        this.branchName = $.branchName;
        this.repositoryName = $.repositoryName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DevEnvironmentRepositoryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DevEnvironmentRepositoryArgs $;

        public Builder() {
            $ = new DevEnvironmentRepositoryArgs();
        }

        public Builder(DevEnvironmentRepositoryArgs defaults) {
            $ = new DevEnvironmentRepositoryArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param branchName The name of the branch in a source repository.
         * 
         * persistent storage (`  persistent_storage `) supports the following:
         * 
         * @return builder
         * 
         */
        public Builder branchName(@Nullable Output<String> branchName) {
            $.branchName = branchName;
            return this;
        }

        /**
         * @param branchName The name of the branch in a source repository.
         * 
         * persistent storage (`  persistent_storage `) supports the following:
         * 
         * @return builder
         * 
         */
        public Builder branchName(String branchName) {
            return branchName(Output.of(branchName));
        }

        /**
         * @param repositoryName The name of the source repository.
         * 
         * @return builder
         * 
         */
        public Builder repositoryName(Output<String> repositoryName) {
            $.repositoryName = repositoryName;
            return this;
        }

        /**
         * @param repositoryName The name of the source repository.
         * 
         * @return builder
         * 
         */
        public Builder repositoryName(String repositoryName) {
            return repositoryName(Output.of(repositoryName));
        }

        public DevEnvironmentRepositoryArgs build() {
            if ($.repositoryName == null) {
                throw new MissingRequiredPropertyException("DevEnvironmentRepositoryArgs", "repositoryName");
            }
            return $;
        }
    }

}
