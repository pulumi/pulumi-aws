// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.rds;

import com.pulumi.aws.rds.inputs.OptionGroupOptionArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OptionGroupArgs extends com.pulumi.resources.ResourceArgs {

    public static final OptionGroupArgs Empty = new OptionGroupArgs();

    /**
     * Specifies the name of the engine that this option group should be associated with.
     * 
     */
    @Import(name="engineName", required=true)
    private Output<String> engineName;

    /**
     * @return Specifies the name of the engine that this option group should be associated with.
     * 
     */
    public Output<String> engineName() {
        return this.engineName;
    }

    /**
     * Specifies the major version of the engine that this option group should be associated with.
     * 
     */
    @Import(name="majorEngineVersion", required=true)
    private Output<String> majorEngineVersion;

    /**
     * @return Specifies the major version of the engine that this option group should be associated with.
     * 
     */
    public Output<String> majorEngineVersion() {
        return this.majorEngineVersion;
    }

    /**
     * The Name of the setting.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The Name of the setting.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Creates a unique name beginning with the specified prefix. Conflicts with `name`. Must be lowercase, to match as it is stored in AWS.
     * 
     */
    @Import(name="namePrefix")
    private @Nullable Output<String> namePrefix;

    /**
     * @return Creates a unique name beginning with the specified prefix. Conflicts with `name`. Must be lowercase, to match as it is stored in AWS.
     * 
     */
    public Optional<Output<String>> namePrefix() {
        return Optional.ofNullable(this.namePrefix);
    }

    /**
     * The description of the option group. Defaults to &#34;Managed by Pulumi&#34;.
     * 
     */
    @Import(name="optionGroupDescription")
    private @Nullable Output<String> optionGroupDescription;

    /**
     * @return The description of the option group. Defaults to &#34;Managed by Pulumi&#34;.
     * 
     */
    public Optional<Output<String>> optionGroupDescription() {
        return Optional.ofNullable(this.optionGroupDescription);
    }

    /**
     * A list of Options to apply.
     * 
     */
    @Import(name="options")
    private @Nullable Output<List<OptionGroupOptionArgs>> options;

    /**
     * @return A list of Options to apply.
     * 
     */
    public Optional<Output<List<OptionGroupOptionArgs>>> options() {
        return Optional.ofNullable(this.options);
    }

    /**
     * A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private OptionGroupArgs() {}

    private OptionGroupArgs(OptionGroupArgs $) {
        this.engineName = $.engineName;
        this.majorEngineVersion = $.majorEngineVersion;
        this.name = $.name;
        this.namePrefix = $.namePrefix;
        this.optionGroupDescription = $.optionGroupDescription;
        this.options = $.options;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OptionGroupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OptionGroupArgs $;

        public Builder() {
            $ = new OptionGroupArgs();
        }

        public Builder(OptionGroupArgs defaults) {
            $ = new OptionGroupArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param engineName Specifies the name of the engine that this option group should be associated with.
         * 
         * @return builder
         * 
         */
        public Builder engineName(Output<String> engineName) {
            $.engineName = engineName;
            return this;
        }

        /**
         * @param engineName Specifies the name of the engine that this option group should be associated with.
         * 
         * @return builder
         * 
         */
        public Builder engineName(String engineName) {
            return engineName(Output.of(engineName));
        }

        /**
         * @param majorEngineVersion Specifies the major version of the engine that this option group should be associated with.
         * 
         * @return builder
         * 
         */
        public Builder majorEngineVersion(Output<String> majorEngineVersion) {
            $.majorEngineVersion = majorEngineVersion;
            return this;
        }

        /**
         * @param majorEngineVersion Specifies the major version of the engine that this option group should be associated with.
         * 
         * @return builder
         * 
         */
        public Builder majorEngineVersion(String majorEngineVersion) {
            return majorEngineVersion(Output.of(majorEngineVersion));
        }

        /**
         * @param name The Name of the setting.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The Name of the setting.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param namePrefix Creates a unique name beginning with the specified prefix. Conflicts with `name`. Must be lowercase, to match as it is stored in AWS.
         * 
         * @return builder
         * 
         */
        public Builder namePrefix(@Nullable Output<String> namePrefix) {
            $.namePrefix = namePrefix;
            return this;
        }

        /**
         * @param namePrefix Creates a unique name beginning with the specified prefix. Conflicts with `name`. Must be lowercase, to match as it is stored in AWS.
         * 
         * @return builder
         * 
         */
        public Builder namePrefix(String namePrefix) {
            return namePrefix(Output.of(namePrefix));
        }

        /**
         * @param optionGroupDescription The description of the option group. Defaults to &#34;Managed by Pulumi&#34;.
         * 
         * @return builder
         * 
         */
        public Builder optionGroupDescription(@Nullable Output<String> optionGroupDescription) {
            $.optionGroupDescription = optionGroupDescription;
            return this;
        }

        /**
         * @param optionGroupDescription The description of the option group. Defaults to &#34;Managed by Pulumi&#34;.
         * 
         * @return builder
         * 
         */
        public Builder optionGroupDescription(String optionGroupDescription) {
            return optionGroupDescription(Output.of(optionGroupDescription));
        }

        /**
         * @param options A list of Options to apply.
         * 
         * @return builder
         * 
         */
        public Builder options(@Nullable Output<List<OptionGroupOptionArgs>> options) {
            $.options = options;
            return this;
        }

        /**
         * @param options A list of Options to apply.
         * 
         * @return builder
         * 
         */
        public Builder options(List<OptionGroupOptionArgs> options) {
            return options(Output.of(options));
        }

        /**
         * @param options A list of Options to apply.
         * 
         * @return builder
         * 
         */
        public Builder options(OptionGroupOptionArgs... options) {
            return options(List.of(options));
        }

        /**
         * @param tags A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public OptionGroupArgs build() {
            $.engineName = Objects.requireNonNull($.engineName, "expected parameter 'engineName' to be non-null");
            $.majorEngineVersion = Objects.requireNonNull($.majorEngineVersion, "expected parameter 'majorEngineVersion' to be non-null");
            $.optionGroupDescription = Codegen.stringProp("optionGroupDescription").output().arg($.optionGroupDescription).def("Managed by Pulumi").getNullable();
            return $;
        }
    }

}
