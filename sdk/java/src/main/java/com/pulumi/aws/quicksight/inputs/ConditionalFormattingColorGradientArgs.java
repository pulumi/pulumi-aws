// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.inputs;

import com.pulumi.aws.quicksight.inputs.ConditionalFormattingColorGradientColorArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class ConditionalFormattingColorGradientArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConditionalFormattingColorGradientArgs Empty = new ConditionalFormattingColorGradientArgs();

    @Import(name="color", required=true)
    private Output<ConditionalFormattingColorGradientColorArgs> color;

    public Output<ConditionalFormattingColorGradientColorArgs> color() {
        return this.color;
    }

    @Import(name="expression", required=true)
    private Output<String> expression;

    public Output<String> expression() {
        return this.expression;
    }

    private ConditionalFormattingColorGradientArgs() {}

    private ConditionalFormattingColorGradientArgs(ConditionalFormattingColorGradientArgs $) {
        this.color = $.color;
        this.expression = $.expression;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConditionalFormattingColorGradientArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConditionalFormattingColorGradientArgs $;

        public Builder() {
            $ = new ConditionalFormattingColorGradientArgs();
        }

        public Builder(ConditionalFormattingColorGradientArgs defaults) {
            $ = new ConditionalFormattingColorGradientArgs(Objects.requireNonNull(defaults));
        }

        public Builder color(Output<ConditionalFormattingColorGradientColorArgs> color) {
            $.color = color;
            return this;
        }

        public Builder color(ConditionalFormattingColorGradientColorArgs color) {
            return color(Output.of(color));
        }

        public Builder expression(Output<String> expression) {
            $.expression = expression;
            return this;
        }

        public Builder expression(String expression) {
            return expression(Output.of(expression));
        }

        public ConditionalFormattingColorGradientArgs build() {
            if ($.color == null) {
                throw new MissingRequiredPropertyException("ConditionalFormattingColorGradientArgs", "color");
            }
            if ($.expression == null) {
                throw new MissingRequiredPropertyException("ConditionalFormattingColorGradientArgs", "expression");
            }
            return $;
        }
    }

}
