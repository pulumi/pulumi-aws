// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.appsync;

import com.pulumi.aws.appsync.inputs.ResolverCachingConfigArgs;
import com.pulumi.aws.appsync.inputs.ResolverPipelineConfigArgs;
import com.pulumi.aws.appsync.inputs.ResolverRuntimeArgs;
import com.pulumi.aws.appsync.inputs.ResolverSyncConfigArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ResolverArgs extends com.pulumi.resources.ResourceArgs {

    public static final ResolverArgs Empty = new ResolverArgs();

    @Import(name="apiId", required=true)
    private Output<String> apiId;

    public Output<String> apiId() {
        return this.apiId;
    }

    @Import(name="cachingConfig")
    private @Nullable Output<ResolverCachingConfigArgs> cachingConfig;

    public Optional<Output<ResolverCachingConfigArgs>> cachingConfig() {
        return Optional.ofNullable(this.cachingConfig);
    }

    @Import(name="code")
    private @Nullable Output<String> code;

    public Optional<Output<String>> code() {
        return Optional.ofNullable(this.code);
    }

    @Import(name="dataSource")
    private @Nullable Output<String> dataSource;

    public Optional<Output<String>> dataSource() {
        return Optional.ofNullable(this.dataSource);
    }

    @Import(name="field", required=true)
    private Output<String> field;

    public Output<String> field() {
        return this.field;
    }

    @Import(name="kind")
    private @Nullable Output<String> kind;

    public Optional<Output<String>> kind() {
        return Optional.ofNullable(this.kind);
    }

    @Import(name="maxBatchSize")
    private @Nullable Output<Integer> maxBatchSize;

    public Optional<Output<Integer>> maxBatchSize() {
        return Optional.ofNullable(this.maxBatchSize);
    }

    @Import(name="pipelineConfig")
    private @Nullable Output<ResolverPipelineConfigArgs> pipelineConfig;

    public Optional<Output<ResolverPipelineConfigArgs>> pipelineConfig() {
        return Optional.ofNullable(this.pipelineConfig);
    }

    @Import(name="requestTemplate")
    private @Nullable Output<String> requestTemplate;

    public Optional<Output<String>> requestTemplate() {
        return Optional.ofNullable(this.requestTemplate);
    }

    @Import(name="responseTemplate")
    private @Nullable Output<String> responseTemplate;

    public Optional<Output<String>> responseTemplate() {
        return Optional.ofNullable(this.responseTemplate);
    }

    @Import(name="runtime")
    private @Nullable Output<ResolverRuntimeArgs> runtime;

    public Optional<Output<ResolverRuntimeArgs>> runtime() {
        return Optional.ofNullable(this.runtime);
    }

    @Import(name="syncConfig")
    private @Nullable Output<ResolverSyncConfigArgs> syncConfig;

    public Optional<Output<ResolverSyncConfigArgs>> syncConfig() {
        return Optional.ofNullable(this.syncConfig);
    }

    @Import(name="type", required=true)
    private Output<String> type;

    public Output<String> type() {
        return this.type;
    }

    private ResolverArgs() {}

    private ResolverArgs(ResolverArgs $) {
        this.apiId = $.apiId;
        this.cachingConfig = $.cachingConfig;
        this.code = $.code;
        this.dataSource = $.dataSource;
        this.field = $.field;
        this.kind = $.kind;
        this.maxBatchSize = $.maxBatchSize;
        this.pipelineConfig = $.pipelineConfig;
        this.requestTemplate = $.requestTemplate;
        this.responseTemplate = $.responseTemplate;
        this.runtime = $.runtime;
        this.syncConfig = $.syncConfig;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ResolverArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ResolverArgs $;

        public Builder() {
            $ = new ResolverArgs();
        }

        public Builder(ResolverArgs defaults) {
            $ = new ResolverArgs(Objects.requireNonNull(defaults));
        }

        public Builder apiId(Output<String> apiId) {
            $.apiId = apiId;
            return this;
        }

        public Builder apiId(String apiId) {
            return apiId(Output.of(apiId));
        }

        public Builder cachingConfig(@Nullable Output<ResolverCachingConfigArgs> cachingConfig) {
            $.cachingConfig = cachingConfig;
            return this;
        }

        public Builder cachingConfig(ResolverCachingConfigArgs cachingConfig) {
            return cachingConfig(Output.of(cachingConfig));
        }

        public Builder code(@Nullable Output<String> code) {
            $.code = code;
            return this;
        }

        public Builder code(String code) {
            return code(Output.of(code));
        }

        public Builder dataSource(@Nullable Output<String> dataSource) {
            $.dataSource = dataSource;
            return this;
        }

        public Builder dataSource(String dataSource) {
            return dataSource(Output.of(dataSource));
        }

        public Builder field(Output<String> field) {
            $.field = field;
            return this;
        }

        public Builder field(String field) {
            return field(Output.of(field));
        }

        public Builder kind(@Nullable Output<String> kind) {
            $.kind = kind;
            return this;
        }

        public Builder kind(String kind) {
            return kind(Output.of(kind));
        }

        public Builder maxBatchSize(@Nullable Output<Integer> maxBatchSize) {
            $.maxBatchSize = maxBatchSize;
            return this;
        }

        public Builder maxBatchSize(Integer maxBatchSize) {
            return maxBatchSize(Output.of(maxBatchSize));
        }

        public Builder pipelineConfig(@Nullable Output<ResolverPipelineConfigArgs> pipelineConfig) {
            $.pipelineConfig = pipelineConfig;
            return this;
        }

        public Builder pipelineConfig(ResolverPipelineConfigArgs pipelineConfig) {
            return pipelineConfig(Output.of(pipelineConfig));
        }

        public Builder requestTemplate(@Nullable Output<String> requestTemplate) {
            $.requestTemplate = requestTemplate;
            return this;
        }

        public Builder requestTemplate(String requestTemplate) {
            return requestTemplate(Output.of(requestTemplate));
        }

        public Builder responseTemplate(@Nullable Output<String> responseTemplate) {
            $.responseTemplate = responseTemplate;
            return this;
        }

        public Builder responseTemplate(String responseTemplate) {
            return responseTemplate(Output.of(responseTemplate));
        }

        public Builder runtime(@Nullable Output<ResolverRuntimeArgs> runtime) {
            $.runtime = runtime;
            return this;
        }

        public Builder runtime(ResolverRuntimeArgs runtime) {
            return runtime(Output.of(runtime));
        }

        public Builder syncConfig(@Nullable Output<ResolverSyncConfigArgs> syncConfig) {
            $.syncConfig = syncConfig;
            return this;
        }

        public Builder syncConfig(ResolverSyncConfigArgs syncConfig) {
            return syncConfig(Output.of(syncConfig));
        }

        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        public Builder type(String type) {
            return type(Output.of(type));
        }

        public ResolverArgs build() {
            $.apiId = Objects.requireNonNull($.apiId, "expected parameter 'apiId' to be non-null");
            $.field = Objects.requireNonNull($.field, "expected parameter 'field' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
