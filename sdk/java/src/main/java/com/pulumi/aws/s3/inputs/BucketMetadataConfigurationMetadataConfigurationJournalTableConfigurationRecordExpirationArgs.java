// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.s3.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BucketMetadataConfigurationMetadataConfigurationJournalTableConfigurationRecordExpirationArgs extends com.pulumi.resources.ResourceArgs {

    public static final BucketMetadataConfigurationMetadataConfigurationJournalTableConfigurationRecordExpirationArgs Empty = new BucketMetadataConfigurationMetadataConfigurationJournalTableConfigurationRecordExpirationArgs();

    /**
     * Number of days to retain journal table records.
     * 
     */
    @Import(name="days")
    private @Nullable Output<Integer> days;

    /**
     * @return Number of days to retain journal table records.
     * 
     */
    public Optional<Output<Integer>> days() {
        return Optional.ofNullable(this.days);
    }

    /**
     * Whether journal table record expiration is enabled or disabled. Valid values: `ENABLED`, `DISABLED`.
     * 
     */
    @Import(name="expiration", required=true)
    private Output<String> expiration;

    /**
     * @return Whether journal table record expiration is enabled or disabled. Valid values: `ENABLED`, `DISABLED`.
     * 
     */
    public Output<String> expiration() {
        return this.expiration;
    }

    private BucketMetadataConfigurationMetadataConfigurationJournalTableConfigurationRecordExpirationArgs() {}

    private BucketMetadataConfigurationMetadataConfigurationJournalTableConfigurationRecordExpirationArgs(BucketMetadataConfigurationMetadataConfigurationJournalTableConfigurationRecordExpirationArgs $) {
        this.days = $.days;
        this.expiration = $.expiration;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BucketMetadataConfigurationMetadataConfigurationJournalTableConfigurationRecordExpirationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BucketMetadataConfigurationMetadataConfigurationJournalTableConfigurationRecordExpirationArgs $;

        public Builder() {
            $ = new BucketMetadataConfigurationMetadataConfigurationJournalTableConfigurationRecordExpirationArgs();
        }

        public Builder(BucketMetadataConfigurationMetadataConfigurationJournalTableConfigurationRecordExpirationArgs defaults) {
            $ = new BucketMetadataConfigurationMetadataConfigurationJournalTableConfigurationRecordExpirationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param days Number of days to retain journal table records.
         * 
         * @return builder
         * 
         */
        public Builder days(@Nullable Output<Integer> days) {
            $.days = days;
            return this;
        }

        /**
         * @param days Number of days to retain journal table records.
         * 
         * @return builder
         * 
         */
        public Builder days(Integer days) {
            return days(Output.of(days));
        }

        /**
         * @param expiration Whether journal table record expiration is enabled or disabled. Valid values: `ENABLED`, `DISABLED`.
         * 
         * @return builder
         * 
         */
        public Builder expiration(Output<String> expiration) {
            $.expiration = expiration;
            return this;
        }

        /**
         * @param expiration Whether journal table record expiration is enabled or disabled. Valid values: `ENABLED`, `DISABLED`.
         * 
         * @return builder
         * 
         */
        public Builder expiration(String expiration) {
            return expiration(Output.of(expiration));
        }

        public BucketMetadataConfigurationMetadataConfigurationJournalTableConfigurationRecordExpirationArgs build() {
            if ($.expiration == null) {
                throw new MissingRequiredPropertyException("BucketMetadataConfigurationMetadataConfigurationJournalTableConfigurationRecordExpirationArgs", "expiration");
            }
            return $;
        }
    }

}
