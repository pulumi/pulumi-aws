// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.opensearch.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class GetServerlessSecurityConfigSamlOptionArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetServerlessSecurityConfigSamlOptionArgs Empty = new GetServerlessSecurityConfigSamlOptionArgs();

    /**
     * Group attribute for this SAML integration.
     * 
     */
    @Import(name="groupAttribute", required=true)
    private Output<String> groupAttribute;

    /**
     * @return Group attribute for this SAML integration.
     * 
     */
    public Output<String> groupAttribute() {
        return this.groupAttribute;
    }

    /**
     * The XML IdP metadata file generated from your identity provider.
     * 
     */
    @Import(name="metadata", required=true)
    private Output<String> metadata;

    /**
     * @return The XML IdP metadata file generated from your identity provider.
     * 
     */
    public Output<String> metadata() {
        return this.metadata;
    }

    /**
     * Session timeout, in minutes. Minimum is 5 minutes and maximum is 720 minutes (12 hours). Default is 60 minutes.
     * 
     */
    @Import(name="sessionTimeout", required=true)
    private Output<Integer> sessionTimeout;

    /**
     * @return Session timeout, in minutes. Minimum is 5 minutes and maximum is 720 minutes (12 hours). Default is 60 minutes.
     * 
     */
    public Output<Integer> sessionTimeout() {
        return this.sessionTimeout;
    }

    /**
     * User attribute for this SAML integration.
     * 
     */
    @Import(name="userAttribute", required=true)
    private Output<String> userAttribute;

    /**
     * @return User attribute for this SAML integration.
     * 
     */
    public Output<String> userAttribute() {
        return this.userAttribute;
    }

    private GetServerlessSecurityConfigSamlOptionArgs() {}

    private GetServerlessSecurityConfigSamlOptionArgs(GetServerlessSecurityConfigSamlOptionArgs $) {
        this.groupAttribute = $.groupAttribute;
        this.metadata = $.metadata;
        this.sessionTimeout = $.sessionTimeout;
        this.userAttribute = $.userAttribute;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetServerlessSecurityConfigSamlOptionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetServerlessSecurityConfigSamlOptionArgs $;

        public Builder() {
            $ = new GetServerlessSecurityConfigSamlOptionArgs();
        }

        public Builder(GetServerlessSecurityConfigSamlOptionArgs defaults) {
            $ = new GetServerlessSecurityConfigSamlOptionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param groupAttribute Group attribute for this SAML integration.
         * 
         * @return builder
         * 
         */
        public Builder groupAttribute(Output<String> groupAttribute) {
            $.groupAttribute = groupAttribute;
            return this;
        }

        /**
         * @param groupAttribute Group attribute for this SAML integration.
         * 
         * @return builder
         * 
         */
        public Builder groupAttribute(String groupAttribute) {
            return groupAttribute(Output.of(groupAttribute));
        }

        /**
         * @param metadata The XML IdP metadata file generated from your identity provider.
         * 
         * @return builder
         * 
         */
        public Builder metadata(Output<String> metadata) {
            $.metadata = metadata;
            return this;
        }

        /**
         * @param metadata The XML IdP metadata file generated from your identity provider.
         * 
         * @return builder
         * 
         */
        public Builder metadata(String metadata) {
            return metadata(Output.of(metadata));
        }

        /**
         * @param sessionTimeout Session timeout, in minutes. Minimum is 5 minutes and maximum is 720 minutes (12 hours). Default is 60 minutes.
         * 
         * @return builder
         * 
         */
        public Builder sessionTimeout(Output<Integer> sessionTimeout) {
            $.sessionTimeout = sessionTimeout;
            return this;
        }

        /**
         * @param sessionTimeout Session timeout, in minutes. Minimum is 5 minutes and maximum is 720 minutes (12 hours). Default is 60 minutes.
         * 
         * @return builder
         * 
         */
        public Builder sessionTimeout(Integer sessionTimeout) {
            return sessionTimeout(Output.of(sessionTimeout));
        }

        /**
         * @param userAttribute User attribute for this SAML integration.
         * 
         * @return builder
         * 
         */
        public Builder userAttribute(Output<String> userAttribute) {
            $.userAttribute = userAttribute;
            return this;
        }

        /**
         * @param userAttribute User attribute for this SAML integration.
         * 
         * @return builder
         * 
         */
        public Builder userAttribute(String userAttribute) {
            return userAttribute(Output.of(userAttribute));
        }

        public GetServerlessSecurityConfigSamlOptionArgs build() {
            if ($.groupAttribute == null) {
                throw new MissingRequiredPropertyException("GetServerlessSecurityConfigSamlOptionArgs", "groupAttribute");
            }
            if ($.metadata == null) {
                throw new MissingRequiredPropertyException("GetServerlessSecurityConfigSamlOptionArgs", "metadata");
            }
            if ($.sessionTimeout == null) {
                throw new MissingRequiredPropertyException("GetServerlessSecurityConfigSamlOptionArgs", "sessionTimeout");
            }
            if ($.userAttribute == null) {
                throw new MissingRequiredPropertyException("GetServerlessSecurityConfigSamlOptionArgs", "userAttribute");
            }
            return $;
        }
    }

}
