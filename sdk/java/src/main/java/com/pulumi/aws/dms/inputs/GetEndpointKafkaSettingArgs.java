// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.dms.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class GetEndpointKafkaSettingArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetEndpointKafkaSettingArgs Empty = new GetEndpointKafkaSettingArgs();

    @Import(name="broker", required=true)
    private Output<String> broker;

    public Output<String> broker() {
        return this.broker;
    }

    @Import(name="includeControlDetails", required=true)
    private Output<Boolean> includeControlDetails;

    public Output<Boolean> includeControlDetails() {
        return this.includeControlDetails;
    }

    @Import(name="includeNullAndEmpty", required=true)
    private Output<Boolean> includeNullAndEmpty;

    public Output<Boolean> includeNullAndEmpty() {
        return this.includeNullAndEmpty;
    }

    @Import(name="includePartitionValue", required=true)
    private Output<Boolean> includePartitionValue;

    public Output<Boolean> includePartitionValue() {
        return this.includePartitionValue;
    }

    @Import(name="includeTableAlterOperations", required=true)
    private Output<Boolean> includeTableAlterOperations;

    public Output<Boolean> includeTableAlterOperations() {
        return this.includeTableAlterOperations;
    }

    @Import(name="includeTransactionDetails", required=true)
    private Output<Boolean> includeTransactionDetails;

    public Output<Boolean> includeTransactionDetails() {
        return this.includeTransactionDetails;
    }

    @Import(name="messageFormat", required=true)
    private Output<String> messageFormat;

    public Output<String> messageFormat() {
        return this.messageFormat;
    }

    @Import(name="messageMaxBytes", required=true)
    private Output<Integer> messageMaxBytes;

    public Output<Integer> messageMaxBytes() {
        return this.messageMaxBytes;
    }

    @Import(name="noHexPrefix", required=true)
    private Output<Boolean> noHexPrefix;

    public Output<Boolean> noHexPrefix() {
        return this.noHexPrefix;
    }

    @Import(name="partitionIncludeSchemaTable", required=true)
    private Output<Boolean> partitionIncludeSchemaTable;

    public Output<Boolean> partitionIncludeSchemaTable() {
        return this.partitionIncludeSchemaTable;
    }

    @Import(name="saslPassword", required=true)
    private Output<String> saslPassword;

    public Output<String> saslPassword() {
        return this.saslPassword;
    }

    @Import(name="saslUsername", required=true)
    private Output<String> saslUsername;

    public Output<String> saslUsername() {
        return this.saslUsername;
    }

    @Import(name="securityProtocol", required=true)
    private Output<String> securityProtocol;

    public Output<String> securityProtocol() {
        return this.securityProtocol;
    }

    @Import(name="sslCaCertificateArn", required=true)
    private Output<String> sslCaCertificateArn;

    public Output<String> sslCaCertificateArn() {
        return this.sslCaCertificateArn;
    }

    @Import(name="sslClientCertificateArn", required=true)
    private Output<String> sslClientCertificateArn;

    public Output<String> sslClientCertificateArn() {
        return this.sslClientCertificateArn;
    }

    @Import(name="sslClientKeyArn", required=true)
    private Output<String> sslClientKeyArn;

    public Output<String> sslClientKeyArn() {
        return this.sslClientKeyArn;
    }

    @Import(name="sslClientKeyPassword", required=true)
    private Output<String> sslClientKeyPassword;

    public Output<String> sslClientKeyPassword() {
        return this.sslClientKeyPassword;
    }

    @Import(name="topic", required=true)
    private Output<String> topic;

    public Output<String> topic() {
        return this.topic;
    }

    private GetEndpointKafkaSettingArgs() {}

    private GetEndpointKafkaSettingArgs(GetEndpointKafkaSettingArgs $) {
        this.broker = $.broker;
        this.includeControlDetails = $.includeControlDetails;
        this.includeNullAndEmpty = $.includeNullAndEmpty;
        this.includePartitionValue = $.includePartitionValue;
        this.includeTableAlterOperations = $.includeTableAlterOperations;
        this.includeTransactionDetails = $.includeTransactionDetails;
        this.messageFormat = $.messageFormat;
        this.messageMaxBytes = $.messageMaxBytes;
        this.noHexPrefix = $.noHexPrefix;
        this.partitionIncludeSchemaTable = $.partitionIncludeSchemaTable;
        this.saslPassword = $.saslPassword;
        this.saslUsername = $.saslUsername;
        this.securityProtocol = $.securityProtocol;
        this.sslCaCertificateArn = $.sslCaCertificateArn;
        this.sslClientCertificateArn = $.sslClientCertificateArn;
        this.sslClientKeyArn = $.sslClientKeyArn;
        this.sslClientKeyPassword = $.sslClientKeyPassword;
        this.topic = $.topic;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetEndpointKafkaSettingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetEndpointKafkaSettingArgs $;

        public Builder() {
            $ = new GetEndpointKafkaSettingArgs();
        }

        public Builder(GetEndpointKafkaSettingArgs defaults) {
            $ = new GetEndpointKafkaSettingArgs(Objects.requireNonNull(defaults));
        }

        public Builder broker(Output<String> broker) {
            $.broker = broker;
            return this;
        }

        public Builder broker(String broker) {
            return broker(Output.of(broker));
        }

        public Builder includeControlDetails(Output<Boolean> includeControlDetails) {
            $.includeControlDetails = includeControlDetails;
            return this;
        }

        public Builder includeControlDetails(Boolean includeControlDetails) {
            return includeControlDetails(Output.of(includeControlDetails));
        }

        public Builder includeNullAndEmpty(Output<Boolean> includeNullAndEmpty) {
            $.includeNullAndEmpty = includeNullAndEmpty;
            return this;
        }

        public Builder includeNullAndEmpty(Boolean includeNullAndEmpty) {
            return includeNullAndEmpty(Output.of(includeNullAndEmpty));
        }

        public Builder includePartitionValue(Output<Boolean> includePartitionValue) {
            $.includePartitionValue = includePartitionValue;
            return this;
        }

        public Builder includePartitionValue(Boolean includePartitionValue) {
            return includePartitionValue(Output.of(includePartitionValue));
        }

        public Builder includeTableAlterOperations(Output<Boolean> includeTableAlterOperations) {
            $.includeTableAlterOperations = includeTableAlterOperations;
            return this;
        }

        public Builder includeTableAlterOperations(Boolean includeTableAlterOperations) {
            return includeTableAlterOperations(Output.of(includeTableAlterOperations));
        }

        public Builder includeTransactionDetails(Output<Boolean> includeTransactionDetails) {
            $.includeTransactionDetails = includeTransactionDetails;
            return this;
        }

        public Builder includeTransactionDetails(Boolean includeTransactionDetails) {
            return includeTransactionDetails(Output.of(includeTransactionDetails));
        }

        public Builder messageFormat(Output<String> messageFormat) {
            $.messageFormat = messageFormat;
            return this;
        }

        public Builder messageFormat(String messageFormat) {
            return messageFormat(Output.of(messageFormat));
        }

        public Builder messageMaxBytes(Output<Integer> messageMaxBytes) {
            $.messageMaxBytes = messageMaxBytes;
            return this;
        }

        public Builder messageMaxBytes(Integer messageMaxBytes) {
            return messageMaxBytes(Output.of(messageMaxBytes));
        }

        public Builder noHexPrefix(Output<Boolean> noHexPrefix) {
            $.noHexPrefix = noHexPrefix;
            return this;
        }

        public Builder noHexPrefix(Boolean noHexPrefix) {
            return noHexPrefix(Output.of(noHexPrefix));
        }

        public Builder partitionIncludeSchemaTable(Output<Boolean> partitionIncludeSchemaTable) {
            $.partitionIncludeSchemaTable = partitionIncludeSchemaTable;
            return this;
        }

        public Builder partitionIncludeSchemaTable(Boolean partitionIncludeSchemaTable) {
            return partitionIncludeSchemaTable(Output.of(partitionIncludeSchemaTable));
        }

        public Builder saslPassword(Output<String> saslPassword) {
            $.saslPassword = saslPassword;
            return this;
        }

        public Builder saslPassword(String saslPassword) {
            return saslPassword(Output.of(saslPassword));
        }

        public Builder saslUsername(Output<String> saslUsername) {
            $.saslUsername = saslUsername;
            return this;
        }

        public Builder saslUsername(String saslUsername) {
            return saslUsername(Output.of(saslUsername));
        }

        public Builder securityProtocol(Output<String> securityProtocol) {
            $.securityProtocol = securityProtocol;
            return this;
        }

        public Builder securityProtocol(String securityProtocol) {
            return securityProtocol(Output.of(securityProtocol));
        }

        public Builder sslCaCertificateArn(Output<String> sslCaCertificateArn) {
            $.sslCaCertificateArn = sslCaCertificateArn;
            return this;
        }

        public Builder sslCaCertificateArn(String sslCaCertificateArn) {
            return sslCaCertificateArn(Output.of(sslCaCertificateArn));
        }

        public Builder sslClientCertificateArn(Output<String> sslClientCertificateArn) {
            $.sslClientCertificateArn = sslClientCertificateArn;
            return this;
        }

        public Builder sslClientCertificateArn(String sslClientCertificateArn) {
            return sslClientCertificateArn(Output.of(sslClientCertificateArn));
        }

        public Builder sslClientKeyArn(Output<String> sslClientKeyArn) {
            $.sslClientKeyArn = sslClientKeyArn;
            return this;
        }

        public Builder sslClientKeyArn(String sslClientKeyArn) {
            return sslClientKeyArn(Output.of(sslClientKeyArn));
        }

        public Builder sslClientKeyPassword(Output<String> sslClientKeyPassword) {
            $.sslClientKeyPassword = sslClientKeyPassword;
            return this;
        }

        public Builder sslClientKeyPassword(String sslClientKeyPassword) {
            return sslClientKeyPassword(Output.of(sslClientKeyPassword));
        }

        public Builder topic(Output<String> topic) {
            $.topic = topic;
            return this;
        }

        public Builder topic(String topic) {
            return topic(Output.of(topic));
        }

        public GetEndpointKafkaSettingArgs build() {
            $.broker = Objects.requireNonNull($.broker, "expected parameter 'broker' to be non-null");
            $.includeControlDetails = Objects.requireNonNull($.includeControlDetails, "expected parameter 'includeControlDetails' to be non-null");
            $.includeNullAndEmpty = Objects.requireNonNull($.includeNullAndEmpty, "expected parameter 'includeNullAndEmpty' to be non-null");
            $.includePartitionValue = Objects.requireNonNull($.includePartitionValue, "expected parameter 'includePartitionValue' to be non-null");
            $.includeTableAlterOperations = Objects.requireNonNull($.includeTableAlterOperations, "expected parameter 'includeTableAlterOperations' to be non-null");
            $.includeTransactionDetails = Objects.requireNonNull($.includeTransactionDetails, "expected parameter 'includeTransactionDetails' to be non-null");
            $.messageFormat = Objects.requireNonNull($.messageFormat, "expected parameter 'messageFormat' to be non-null");
            $.messageMaxBytes = Objects.requireNonNull($.messageMaxBytes, "expected parameter 'messageMaxBytes' to be non-null");
            $.noHexPrefix = Objects.requireNonNull($.noHexPrefix, "expected parameter 'noHexPrefix' to be non-null");
            $.partitionIncludeSchemaTable = Objects.requireNonNull($.partitionIncludeSchemaTable, "expected parameter 'partitionIncludeSchemaTable' to be non-null");
            $.saslPassword = Objects.requireNonNull($.saslPassword, "expected parameter 'saslPassword' to be non-null");
            $.saslUsername = Objects.requireNonNull($.saslUsername, "expected parameter 'saslUsername' to be non-null");
            $.securityProtocol = Objects.requireNonNull($.securityProtocol, "expected parameter 'securityProtocol' to be non-null");
            $.sslCaCertificateArn = Objects.requireNonNull($.sslCaCertificateArn, "expected parameter 'sslCaCertificateArn' to be non-null");
            $.sslClientCertificateArn = Objects.requireNonNull($.sslClientCertificateArn, "expected parameter 'sslClientCertificateArn' to be non-null");
            $.sslClientKeyArn = Objects.requireNonNull($.sslClientKeyArn, "expected parameter 'sslClientKeyArn' to be non-null");
            $.sslClientKeyPassword = Objects.requireNonNull($.sslClientKeyPassword, "expected parameter 'sslClientKeyPassword' to be non-null");
            $.topic = Objects.requireNonNull($.topic, "expected parameter 'topic' to be non-null");
            return $;
        }
    }

}
