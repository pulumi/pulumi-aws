// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.codepipeline.inputs;

import com.pulumi.aws.codepipeline.inputs.PipelineStageBeforeEntryConditionArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.util.Objects;


public final class PipelineStageBeforeEntryArgs extends com.pulumi.resources.ResourceArgs {

    public static final PipelineStageBeforeEntryArgs Empty = new PipelineStageBeforeEntryArgs();

    /**
     * The conditions that are configured as entry condition. Defined as a `condition` block below.
     * 
     */
    @Import(name="condition", required=true)
    private Output<PipelineStageBeforeEntryConditionArgs> condition;

    /**
     * @return The conditions that are configured as entry condition. Defined as a `condition` block below.
     * 
     */
    public Output<PipelineStageBeforeEntryConditionArgs> condition() {
        return this.condition;
    }

    private PipelineStageBeforeEntryArgs() {}

    private PipelineStageBeforeEntryArgs(PipelineStageBeforeEntryArgs $) {
        this.condition = $.condition;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PipelineStageBeforeEntryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PipelineStageBeforeEntryArgs $;

        public Builder() {
            $ = new PipelineStageBeforeEntryArgs();
        }

        public Builder(PipelineStageBeforeEntryArgs defaults) {
            $ = new PipelineStageBeforeEntryArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param condition The conditions that are configured as entry condition. Defined as a `condition` block below.
         * 
         * @return builder
         * 
         */
        public Builder condition(Output<PipelineStageBeforeEntryConditionArgs> condition) {
            $.condition = condition;
            return this;
        }

        /**
         * @param condition The conditions that are configured as entry condition. Defined as a `condition` block below.
         * 
         * @return builder
         * 
         */
        public Builder condition(PipelineStageBeforeEntryConditionArgs condition) {
            return condition(Output.of(condition));
        }

        public PipelineStageBeforeEntryArgs build() {
            if ($.condition == null) {
                throw new MissingRequiredPropertyException("PipelineStageBeforeEntryArgs", "condition");
            }
            return $;
        }
    }

}
