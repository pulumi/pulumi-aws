// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.eks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetClusterVersionsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetClusterVersionsArgs Empty = new GetClusterVersionsArgs();

    /**
     * Type of clusters to filter by.
     * Currently, the only valid value is `eks`.
     * 
     */
    @Import(name="clusterType")
    private @Nullable Output<String> clusterType;

    /**
     * @return Type of clusters to filter by.
     * Currently, the only valid value is `eks`.
     * 
     */
    public Optional<Output<String>> clusterType() {
        return Optional.ofNullable(this.clusterType);
    }

    @Import(name="clusterVersionsOnlies")
    private @Nullable Output<List<String>> clusterVersionsOnlies;

    public Optional<Output<List<String>>> clusterVersionsOnlies() {
        return Optional.ofNullable(this.clusterVersionsOnlies);
    }

    /**
     * Whether to show only the default versions of Kubernetes supported by EKS.
     * 
     */
    @Import(name="defaultOnly")
    private @Nullable Output<Boolean> defaultOnly;

    /**
     * @return Whether to show only the default versions of Kubernetes supported by EKS.
     * 
     */
    public Optional<Output<Boolean>> defaultOnly() {
        return Optional.ofNullable(this.defaultOnly);
    }

    /**
     * Whether to include all kubernetes versions in the response.
     * 
     */
    @Import(name="includeAll")
    private @Nullable Output<Boolean> includeAll;

    /**
     * @return Whether to include all kubernetes versions in the response.
     * 
     */
    public Optional<Output<Boolean>> includeAll() {
        return Optional.ofNullable(this.includeAll);
    }

    /**
     * Status of the EKS cluster versions to list.
     * Valid values are `STANDARD_SUPPORT` or `UNSUPPORTED` or `EXTENDED_SUPPORT`.
     * 
     */
    @Import(name="versionStatus")
    private @Nullable Output<String> versionStatus;

    /**
     * @return Status of the EKS cluster versions to list.
     * Valid values are `STANDARD_SUPPORT` or `UNSUPPORTED` or `EXTENDED_SUPPORT`.
     * 
     */
    public Optional<Output<String>> versionStatus() {
        return Optional.ofNullable(this.versionStatus);
    }

    private GetClusterVersionsArgs() {}

    private GetClusterVersionsArgs(GetClusterVersionsArgs $) {
        this.clusterType = $.clusterType;
        this.clusterVersionsOnlies = $.clusterVersionsOnlies;
        this.defaultOnly = $.defaultOnly;
        this.includeAll = $.includeAll;
        this.versionStatus = $.versionStatus;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetClusterVersionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetClusterVersionsArgs $;

        public Builder() {
            $ = new GetClusterVersionsArgs();
        }

        public Builder(GetClusterVersionsArgs defaults) {
            $ = new GetClusterVersionsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clusterType Type of clusters to filter by.
         * Currently, the only valid value is `eks`.
         * 
         * @return builder
         * 
         */
        public Builder clusterType(@Nullable Output<String> clusterType) {
            $.clusterType = clusterType;
            return this;
        }

        /**
         * @param clusterType Type of clusters to filter by.
         * Currently, the only valid value is `eks`.
         * 
         * @return builder
         * 
         */
        public Builder clusterType(String clusterType) {
            return clusterType(Output.of(clusterType));
        }

        public Builder clusterVersionsOnlies(@Nullable Output<List<String>> clusterVersionsOnlies) {
            $.clusterVersionsOnlies = clusterVersionsOnlies;
            return this;
        }

        public Builder clusterVersionsOnlies(List<String> clusterVersionsOnlies) {
            return clusterVersionsOnlies(Output.of(clusterVersionsOnlies));
        }

        public Builder clusterVersionsOnlies(String... clusterVersionsOnlies) {
            return clusterVersionsOnlies(List.of(clusterVersionsOnlies));
        }

        /**
         * @param defaultOnly Whether to show only the default versions of Kubernetes supported by EKS.
         * 
         * @return builder
         * 
         */
        public Builder defaultOnly(@Nullable Output<Boolean> defaultOnly) {
            $.defaultOnly = defaultOnly;
            return this;
        }

        /**
         * @param defaultOnly Whether to show only the default versions of Kubernetes supported by EKS.
         * 
         * @return builder
         * 
         */
        public Builder defaultOnly(Boolean defaultOnly) {
            return defaultOnly(Output.of(defaultOnly));
        }

        /**
         * @param includeAll Whether to include all kubernetes versions in the response.
         * 
         * @return builder
         * 
         */
        public Builder includeAll(@Nullable Output<Boolean> includeAll) {
            $.includeAll = includeAll;
            return this;
        }

        /**
         * @param includeAll Whether to include all kubernetes versions in the response.
         * 
         * @return builder
         * 
         */
        public Builder includeAll(Boolean includeAll) {
            return includeAll(Output.of(includeAll));
        }

        /**
         * @param versionStatus Status of the EKS cluster versions to list.
         * Valid values are `STANDARD_SUPPORT` or `UNSUPPORTED` or `EXTENDED_SUPPORT`.
         * 
         * @return builder
         * 
         */
        public Builder versionStatus(@Nullable Output<String> versionStatus) {
            $.versionStatus = versionStatus;
            return this;
        }

        /**
         * @param versionStatus Status of the EKS cluster versions to list.
         * Valid values are `STANDARD_SUPPORT` or `UNSUPPORTED` or `EXTENDED_SUPPORT`.
         * 
         * @return builder
         * 
         */
        public Builder versionStatus(String versionStatus) {
            return versionStatus(Output.of(versionStatus));
        }

        public GetClusterVersionsArgs build() {
            return $;
        }
    }

}
