// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.lightsail;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class LbStickinessPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final LbStickinessPolicyArgs Empty = new LbStickinessPolicyArgs();

    /**
     * The cookie duration in seconds. This determines the length of the session stickiness.
     * 
     */
    @Import(name="cookieDuration", required=true)
    private Output<Integer> cookieDuration;

    /**
     * @return The cookie duration in seconds. This determines the length of the session stickiness.
     * 
     */
    public Output<Integer> cookieDuration() {
        return this.cookieDuration;
    }

    /**
     * - The Session Stickiness state of the load balancer. `true` to activate session stickiness or `false` to deactivate session stickiness.
     * 
     */
    @Import(name="enabled", required=true)
    private Output<Boolean> enabled;

    /**
     * @return - The Session Stickiness state of the load balancer. `true` to activate session stickiness or `false` to deactivate session stickiness.
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }

    /**
     * The name of the load balancer to which you want to enable session stickiness.
     * 
     */
    @Import(name="lbName", required=true)
    private Output<String> lbName;

    /**
     * @return The name of the load balancer to which you want to enable session stickiness.
     * 
     */
    public Output<String> lbName() {
        return this.lbName;
    }

    private LbStickinessPolicyArgs() {}

    private LbStickinessPolicyArgs(LbStickinessPolicyArgs $) {
        this.cookieDuration = $.cookieDuration;
        this.enabled = $.enabled;
        this.lbName = $.lbName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LbStickinessPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LbStickinessPolicyArgs $;

        public Builder() {
            $ = new LbStickinessPolicyArgs();
        }

        public Builder(LbStickinessPolicyArgs defaults) {
            $ = new LbStickinessPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cookieDuration The cookie duration in seconds. This determines the length of the session stickiness.
         * 
         * @return builder
         * 
         */
        public Builder cookieDuration(Output<Integer> cookieDuration) {
            $.cookieDuration = cookieDuration;
            return this;
        }

        /**
         * @param cookieDuration The cookie duration in seconds. This determines the length of the session stickiness.
         * 
         * @return builder
         * 
         */
        public Builder cookieDuration(Integer cookieDuration) {
            return cookieDuration(Output.of(cookieDuration));
        }

        /**
         * @param enabled - The Session Stickiness state of the load balancer. `true` to activate session stickiness or `false` to deactivate session stickiness.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled - The Session Stickiness state of the load balancer. `true` to activate session stickiness or `false` to deactivate session stickiness.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param lbName The name of the load balancer to which you want to enable session stickiness.
         * 
         * @return builder
         * 
         */
        public Builder lbName(Output<String> lbName) {
            $.lbName = lbName;
            return this;
        }

        /**
         * @param lbName The name of the load balancer to which you want to enable session stickiness.
         * 
         * @return builder
         * 
         */
        public Builder lbName(String lbName) {
            return lbName(Output.of(lbName));
        }

        public LbStickinessPolicyArgs build() {
            $.cookieDuration = Objects.requireNonNull($.cookieDuration, "expected parameter 'cookieDuration' to be non-null");
            $.enabled = Objects.requireNonNull($.enabled, "expected parameter 'enabled' to be non-null");
            $.lbName = Objects.requireNonNull($.lbName, "expected parameter 'lbName' to be non-null");
            return $;
        }
    }

}
