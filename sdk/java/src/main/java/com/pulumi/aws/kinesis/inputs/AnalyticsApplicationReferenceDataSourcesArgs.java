// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.kinesis.inputs;

import com.pulumi.aws.kinesis.inputs.AnalyticsApplicationReferenceDataSourcesS3Args;
import com.pulumi.aws.kinesis.inputs.AnalyticsApplicationReferenceDataSourcesSchemaArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AnalyticsApplicationReferenceDataSourcesArgs extends com.pulumi.resources.ResourceArgs {

    public static final AnalyticsApplicationReferenceDataSourcesArgs Empty = new AnalyticsApplicationReferenceDataSourcesArgs();

    /**
     * The ARN of the Kinesis Analytics Application.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return The ARN of the Kinesis Analytics Application.
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * The S3 configuration for the reference data source. See S3 Reference below for more details.
     * 
     */
    @Import(name="s3", required=true)
    private Output<AnalyticsApplicationReferenceDataSourcesS3Args> s3;

    /**
     * @return The S3 configuration for the reference data source. See S3 Reference below for more details.
     * 
     */
    public Output<AnalyticsApplicationReferenceDataSourcesS3Args> s3() {
        return this.s3;
    }

    /**
     * The Schema format of the data in the streaming source. See Source Schema below for more details.
     * 
     */
    @Import(name="schema", required=true)
    private Output<AnalyticsApplicationReferenceDataSourcesSchemaArgs> schema;

    /**
     * @return The Schema format of the data in the streaming source. See Source Schema below for more details.
     * 
     */
    public Output<AnalyticsApplicationReferenceDataSourcesSchemaArgs> schema() {
        return this.schema;
    }

    /**
     * The in-application Table Name.
     * 
     */
    @Import(name="tableName", required=true)
    private Output<String> tableName;

    /**
     * @return The in-application Table Name.
     * 
     */
    public Output<String> tableName() {
        return this.tableName;
    }

    private AnalyticsApplicationReferenceDataSourcesArgs() {}

    private AnalyticsApplicationReferenceDataSourcesArgs(AnalyticsApplicationReferenceDataSourcesArgs $) {
        this.id = $.id;
        this.s3 = $.s3;
        this.schema = $.schema;
        this.tableName = $.tableName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AnalyticsApplicationReferenceDataSourcesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AnalyticsApplicationReferenceDataSourcesArgs $;

        public Builder() {
            $ = new AnalyticsApplicationReferenceDataSourcesArgs();
        }

        public Builder(AnalyticsApplicationReferenceDataSourcesArgs defaults) {
            $ = new AnalyticsApplicationReferenceDataSourcesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param id The ARN of the Kinesis Analytics Application.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The ARN of the Kinesis Analytics Application.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param s3 The S3 configuration for the reference data source. See S3 Reference below for more details.
         * 
         * @return builder
         * 
         */
        public Builder s3(Output<AnalyticsApplicationReferenceDataSourcesS3Args> s3) {
            $.s3 = s3;
            return this;
        }

        /**
         * @param s3 The S3 configuration for the reference data source. See S3 Reference below for more details.
         * 
         * @return builder
         * 
         */
        public Builder s3(AnalyticsApplicationReferenceDataSourcesS3Args s3) {
            return s3(Output.of(s3));
        }

        /**
         * @param schema The Schema format of the data in the streaming source. See Source Schema below for more details.
         * 
         * @return builder
         * 
         */
        public Builder schema(Output<AnalyticsApplicationReferenceDataSourcesSchemaArgs> schema) {
            $.schema = schema;
            return this;
        }

        /**
         * @param schema The Schema format of the data in the streaming source. See Source Schema below for more details.
         * 
         * @return builder
         * 
         */
        public Builder schema(AnalyticsApplicationReferenceDataSourcesSchemaArgs schema) {
            return schema(Output.of(schema));
        }

        /**
         * @param tableName The in-application Table Name.
         * 
         * @return builder
         * 
         */
        public Builder tableName(Output<String> tableName) {
            $.tableName = tableName;
            return this;
        }

        /**
         * @param tableName The in-application Table Name.
         * 
         * @return builder
         * 
         */
        public Builder tableName(String tableName) {
            return tableName(Output.of(tableName));
        }

        public AnalyticsApplicationReferenceDataSourcesArgs build() {
            $.s3 = Objects.requireNonNull($.s3, "expected parameter 's3' to be non-null");
            $.schema = Objects.requireNonNull($.schema, "expected parameter 'schema' to be non-null");
            $.tableName = Objects.requireNonNull($.tableName, "expected parameter 'tableName' to be non-null");
            return $;
        }
    }

}
