// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.route53domains.inputs;

import com.pulumi.aws.route53domains.inputs.DomainBillingContactExtraParamArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class DomainBillingContactArgs extends com.pulumi.resources.ResourceArgs {

    public static final DomainBillingContactArgs Empty = new DomainBillingContactArgs();

    /**
     * First line of the contact&#39;s address.
     * 
     */
    @Import(name="addressLine1", required=true)
    private Output<String> addressLine1;

    /**
     * @return First line of the contact&#39;s address.
     * 
     */
    public Output<String> addressLine1() {
        return this.addressLine1;
    }

    /**
     * Second line of contact&#39;s address, if any.
     * 
     */
    @Import(name="addressLine2", required=true)
    private Output<String> addressLine2;

    /**
     * @return Second line of contact&#39;s address, if any.
     * 
     */
    public Output<String> addressLine2() {
        return this.addressLine2;
    }

    /**
     * The city of the contact&#39;s address.
     * 
     */
    @Import(name="city", required=true)
    private Output<String> city;

    /**
     * @return The city of the contact&#39;s address.
     * 
     */
    public Output<String> city() {
        return this.city;
    }

    /**
     * Indicates whether the contact is a person, company, association, or public organization. See the [AWS API documentation](https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_ContactDetail.html#Route53Domains-Type-domains_ContactDetail-ContactType) for valid values.
     * 
     */
    @Import(name="contactType", required=true)
    private Output<String> contactType;

    /**
     * @return Indicates whether the contact is a person, company, association, or public organization. See the [AWS API documentation](https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_ContactDetail.html#Route53Domains-Type-domains_ContactDetail-ContactType) for valid values.
     * 
     */
    public Output<String> contactType() {
        return this.contactType;
    }

    /**
     * Code for the country of the contact&#39;s address. See the [AWS API documentation](https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_ContactDetail.html#Route53Domains-Type-domains_ContactDetail-CountryCode) for valid values.
     * 
     */
    @Import(name="countryCode", required=true)
    private Output<String> countryCode;

    /**
     * @return Code for the country of the contact&#39;s address. See the [AWS API documentation](https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_ContactDetail.html#Route53Domains-Type-domains_ContactDetail-CountryCode) for valid values.
     * 
     */
    public Output<String> countryCode() {
        return this.countryCode;
    }

    /**
     * Email address of the contact.
     * 
     */
    @Import(name="email", required=true)
    private Output<String> email;

    /**
     * @return Email address of the contact.
     * 
     */
    public Output<String> email() {
        return this.email;
    }

    /**
     * A list of name-value pairs for parameters required by certain top-level domains.
     * 
     */
    @Import(name="extraParams", required=true)
    private Output<List<DomainBillingContactExtraParamArgs>> extraParams;

    /**
     * @return A list of name-value pairs for parameters required by certain top-level domains.
     * 
     */
    public Output<List<DomainBillingContactExtraParamArgs>> extraParams() {
        return this.extraParams;
    }

    /**
     * Fax number of the contact. Phone number must be specified in the format &#34;+[country dialing code].[number including any area code]&#34;.
     * 
     */
    @Import(name="fax", required=true)
    private Output<String> fax;

    /**
     * @return Fax number of the contact. Phone number must be specified in the format &#34;+[country dialing code].[number including any area code]&#34;.
     * 
     */
    public Output<String> fax() {
        return this.fax;
    }

    /**
     * First name of contact.
     * 
     */
    @Import(name="firstName", required=true)
    private Output<String> firstName;

    /**
     * @return First name of contact.
     * 
     */
    public Output<String> firstName() {
        return this.firstName;
    }

    /**
     * Last name of contact.
     * 
     */
    @Import(name="lastName", required=true)
    private Output<String> lastName;

    /**
     * @return Last name of contact.
     * 
     */
    public Output<String> lastName() {
        return this.lastName;
    }

    /**
     * Name of the organization for contact types other than `PERSON`.
     * 
     */
    @Import(name="organizationName", required=true)
    private Output<String> organizationName;

    /**
     * @return Name of the organization for contact types other than `PERSON`.
     * 
     */
    public Output<String> organizationName() {
        return this.organizationName;
    }

    /**
     * The phone number of the contact. Phone number must be specified in the format &#34;+[country dialing code].[number including any area code]&#34;.
     * 
     */
    @Import(name="phoneNumber", required=true)
    private Output<String> phoneNumber;

    /**
     * @return The phone number of the contact. Phone number must be specified in the format &#34;+[country dialing code].[number including any area code]&#34;.
     * 
     */
    public Output<String> phoneNumber() {
        return this.phoneNumber;
    }

    /**
     * The state or province of the contact&#39;s city.
     * 
     */
    @Import(name="state", required=true)
    private Output<String> state;

    /**
     * @return The state or province of the contact&#39;s city.
     * 
     */
    public Output<String> state() {
        return this.state;
    }

    /**
     * The zip or postal code of the contact&#39;s address.
     * 
     */
    @Import(name="zipCode", required=true)
    private Output<String> zipCode;

    /**
     * @return The zip or postal code of the contact&#39;s address.
     * 
     */
    public Output<String> zipCode() {
        return this.zipCode;
    }

    private DomainBillingContactArgs() {}

    private DomainBillingContactArgs(DomainBillingContactArgs $) {
        this.addressLine1 = $.addressLine1;
        this.addressLine2 = $.addressLine2;
        this.city = $.city;
        this.contactType = $.contactType;
        this.countryCode = $.countryCode;
        this.email = $.email;
        this.extraParams = $.extraParams;
        this.fax = $.fax;
        this.firstName = $.firstName;
        this.lastName = $.lastName;
        this.organizationName = $.organizationName;
        this.phoneNumber = $.phoneNumber;
        this.state = $.state;
        this.zipCode = $.zipCode;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DomainBillingContactArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DomainBillingContactArgs $;

        public Builder() {
            $ = new DomainBillingContactArgs();
        }

        public Builder(DomainBillingContactArgs defaults) {
            $ = new DomainBillingContactArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param addressLine1 First line of the contact&#39;s address.
         * 
         * @return builder
         * 
         */
        public Builder addressLine1(Output<String> addressLine1) {
            $.addressLine1 = addressLine1;
            return this;
        }

        /**
         * @param addressLine1 First line of the contact&#39;s address.
         * 
         * @return builder
         * 
         */
        public Builder addressLine1(String addressLine1) {
            return addressLine1(Output.of(addressLine1));
        }

        /**
         * @param addressLine2 Second line of contact&#39;s address, if any.
         * 
         * @return builder
         * 
         */
        public Builder addressLine2(Output<String> addressLine2) {
            $.addressLine2 = addressLine2;
            return this;
        }

        /**
         * @param addressLine2 Second line of contact&#39;s address, if any.
         * 
         * @return builder
         * 
         */
        public Builder addressLine2(String addressLine2) {
            return addressLine2(Output.of(addressLine2));
        }

        /**
         * @param city The city of the contact&#39;s address.
         * 
         * @return builder
         * 
         */
        public Builder city(Output<String> city) {
            $.city = city;
            return this;
        }

        /**
         * @param city The city of the contact&#39;s address.
         * 
         * @return builder
         * 
         */
        public Builder city(String city) {
            return city(Output.of(city));
        }

        /**
         * @param contactType Indicates whether the contact is a person, company, association, or public organization. See the [AWS API documentation](https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_ContactDetail.html#Route53Domains-Type-domains_ContactDetail-ContactType) for valid values.
         * 
         * @return builder
         * 
         */
        public Builder contactType(Output<String> contactType) {
            $.contactType = contactType;
            return this;
        }

        /**
         * @param contactType Indicates whether the contact is a person, company, association, or public organization. See the [AWS API documentation](https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_ContactDetail.html#Route53Domains-Type-domains_ContactDetail-ContactType) for valid values.
         * 
         * @return builder
         * 
         */
        public Builder contactType(String contactType) {
            return contactType(Output.of(contactType));
        }

        /**
         * @param countryCode Code for the country of the contact&#39;s address. See the [AWS API documentation](https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_ContactDetail.html#Route53Domains-Type-domains_ContactDetail-CountryCode) for valid values.
         * 
         * @return builder
         * 
         */
        public Builder countryCode(Output<String> countryCode) {
            $.countryCode = countryCode;
            return this;
        }

        /**
         * @param countryCode Code for the country of the contact&#39;s address. See the [AWS API documentation](https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_ContactDetail.html#Route53Domains-Type-domains_ContactDetail-CountryCode) for valid values.
         * 
         * @return builder
         * 
         */
        public Builder countryCode(String countryCode) {
            return countryCode(Output.of(countryCode));
        }

        /**
         * @param email Email address of the contact.
         * 
         * @return builder
         * 
         */
        public Builder email(Output<String> email) {
            $.email = email;
            return this;
        }

        /**
         * @param email Email address of the contact.
         * 
         * @return builder
         * 
         */
        public Builder email(String email) {
            return email(Output.of(email));
        }

        /**
         * @param extraParams A list of name-value pairs for parameters required by certain top-level domains.
         * 
         * @return builder
         * 
         */
        public Builder extraParams(Output<List<DomainBillingContactExtraParamArgs>> extraParams) {
            $.extraParams = extraParams;
            return this;
        }

        /**
         * @param extraParams A list of name-value pairs for parameters required by certain top-level domains.
         * 
         * @return builder
         * 
         */
        public Builder extraParams(List<DomainBillingContactExtraParamArgs> extraParams) {
            return extraParams(Output.of(extraParams));
        }

        /**
         * @param extraParams A list of name-value pairs for parameters required by certain top-level domains.
         * 
         * @return builder
         * 
         */
        public Builder extraParams(DomainBillingContactExtraParamArgs... extraParams) {
            return extraParams(List.of(extraParams));
        }

        /**
         * @param fax Fax number of the contact. Phone number must be specified in the format &#34;+[country dialing code].[number including any area code]&#34;.
         * 
         * @return builder
         * 
         */
        public Builder fax(Output<String> fax) {
            $.fax = fax;
            return this;
        }

        /**
         * @param fax Fax number of the contact. Phone number must be specified in the format &#34;+[country dialing code].[number including any area code]&#34;.
         * 
         * @return builder
         * 
         */
        public Builder fax(String fax) {
            return fax(Output.of(fax));
        }

        /**
         * @param firstName First name of contact.
         * 
         * @return builder
         * 
         */
        public Builder firstName(Output<String> firstName) {
            $.firstName = firstName;
            return this;
        }

        /**
         * @param firstName First name of contact.
         * 
         * @return builder
         * 
         */
        public Builder firstName(String firstName) {
            return firstName(Output.of(firstName));
        }

        /**
         * @param lastName Last name of contact.
         * 
         * @return builder
         * 
         */
        public Builder lastName(Output<String> lastName) {
            $.lastName = lastName;
            return this;
        }

        /**
         * @param lastName Last name of contact.
         * 
         * @return builder
         * 
         */
        public Builder lastName(String lastName) {
            return lastName(Output.of(lastName));
        }

        /**
         * @param organizationName Name of the organization for contact types other than `PERSON`.
         * 
         * @return builder
         * 
         */
        public Builder organizationName(Output<String> organizationName) {
            $.organizationName = organizationName;
            return this;
        }

        /**
         * @param organizationName Name of the organization for contact types other than `PERSON`.
         * 
         * @return builder
         * 
         */
        public Builder organizationName(String organizationName) {
            return organizationName(Output.of(organizationName));
        }

        /**
         * @param phoneNumber The phone number of the contact. Phone number must be specified in the format &#34;+[country dialing code].[number including any area code]&#34;.
         * 
         * @return builder
         * 
         */
        public Builder phoneNumber(Output<String> phoneNumber) {
            $.phoneNumber = phoneNumber;
            return this;
        }

        /**
         * @param phoneNumber The phone number of the contact. Phone number must be specified in the format &#34;+[country dialing code].[number including any area code]&#34;.
         * 
         * @return builder
         * 
         */
        public Builder phoneNumber(String phoneNumber) {
            return phoneNumber(Output.of(phoneNumber));
        }

        /**
         * @param state The state or province of the contact&#39;s city.
         * 
         * @return builder
         * 
         */
        public Builder state(Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The state or province of the contact&#39;s city.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param zipCode The zip or postal code of the contact&#39;s address.
         * 
         * @return builder
         * 
         */
        public Builder zipCode(Output<String> zipCode) {
            $.zipCode = zipCode;
            return this;
        }

        /**
         * @param zipCode The zip or postal code of the contact&#39;s address.
         * 
         * @return builder
         * 
         */
        public Builder zipCode(String zipCode) {
            return zipCode(Output.of(zipCode));
        }

        public DomainBillingContactArgs build() {
            if ($.addressLine1 == null) {
                throw new MissingRequiredPropertyException("DomainBillingContactArgs", "addressLine1");
            }
            if ($.addressLine2 == null) {
                throw new MissingRequiredPropertyException("DomainBillingContactArgs", "addressLine2");
            }
            if ($.city == null) {
                throw new MissingRequiredPropertyException("DomainBillingContactArgs", "city");
            }
            if ($.contactType == null) {
                throw new MissingRequiredPropertyException("DomainBillingContactArgs", "contactType");
            }
            if ($.countryCode == null) {
                throw new MissingRequiredPropertyException("DomainBillingContactArgs", "countryCode");
            }
            if ($.email == null) {
                throw new MissingRequiredPropertyException("DomainBillingContactArgs", "email");
            }
            if ($.extraParams == null) {
                throw new MissingRequiredPropertyException("DomainBillingContactArgs", "extraParams");
            }
            if ($.fax == null) {
                throw new MissingRequiredPropertyException("DomainBillingContactArgs", "fax");
            }
            if ($.firstName == null) {
                throw new MissingRequiredPropertyException("DomainBillingContactArgs", "firstName");
            }
            if ($.lastName == null) {
                throw new MissingRequiredPropertyException("DomainBillingContactArgs", "lastName");
            }
            if ($.organizationName == null) {
                throw new MissingRequiredPropertyException("DomainBillingContactArgs", "organizationName");
            }
            if ($.phoneNumber == null) {
                throw new MissingRequiredPropertyException("DomainBillingContactArgs", "phoneNumber");
            }
            if ($.state == null) {
                throw new MissingRequiredPropertyException("DomainBillingContactArgs", "state");
            }
            if ($.zipCode == null) {
                throw new MissingRequiredPropertyException("DomainBillingContactArgs", "zipCode");
            }
            return $;
        }
    }

}
