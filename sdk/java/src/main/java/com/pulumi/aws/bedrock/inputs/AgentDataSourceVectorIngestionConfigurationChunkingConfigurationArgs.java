// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.bedrock.inputs;

import com.pulumi.aws.bedrock.inputs.AgentDataSourceVectorIngestionConfigurationChunkingConfigurationFixedSizeChunkingConfigurationArgs;
import com.pulumi.aws.bedrock.inputs.AgentDataSourceVectorIngestionConfigurationChunkingConfigurationHierarchicalChunkingConfigurationArgs;
import com.pulumi.aws.bedrock.inputs.AgentDataSourceVectorIngestionConfigurationChunkingConfigurationSemanticChunkingConfigurationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AgentDataSourceVectorIngestionConfigurationChunkingConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final AgentDataSourceVectorIngestionConfigurationChunkingConfigurationArgs Empty = new AgentDataSourceVectorIngestionConfigurationChunkingConfigurationArgs();

    /**
     * Option for chunking your source data, either in fixed-sized chunks or as one chunk. Valid values: `FIXED_SIZE`, `HIERARCHICAL`, `SEMANTIC`, `NONE`.
     * 
     */
    @Import(name="chunkingStrategy", required=true)
    private Output<String> chunkingStrategy;

    /**
     * @return Option for chunking your source data, either in fixed-sized chunks or as one chunk. Valid values: `FIXED_SIZE`, `HIERARCHICAL`, `SEMANTIC`, `NONE`.
     * 
     */
    public Output<String> chunkingStrategy() {
        return this.chunkingStrategy;
    }

    /**
     * Configurations for when you choose fixed-size chunking. Requires chunking_strategy as `FIXED_SIZE`. See `fixed_size_chunking_configuration` for details.
     * 
     */
    @Import(name="fixedSizeChunkingConfiguration")
    private @Nullable Output<AgentDataSourceVectorIngestionConfigurationChunkingConfigurationFixedSizeChunkingConfigurationArgs> fixedSizeChunkingConfiguration;

    /**
     * @return Configurations for when you choose fixed-size chunking. Requires chunking_strategy as `FIXED_SIZE`. See `fixed_size_chunking_configuration` for details.
     * 
     */
    public Optional<Output<AgentDataSourceVectorIngestionConfigurationChunkingConfigurationFixedSizeChunkingConfigurationArgs>> fixedSizeChunkingConfiguration() {
        return Optional.ofNullable(this.fixedSizeChunkingConfiguration);
    }

    /**
     * Configurations for when you choose hierarchical chunking. Requires chunking_strategy as `HIERARCHICAL`. See `hierarchical_chunking_configuration` for details.
     * 
     */
    @Import(name="hierarchicalChunkingConfiguration")
    private @Nullable Output<AgentDataSourceVectorIngestionConfigurationChunkingConfigurationHierarchicalChunkingConfigurationArgs> hierarchicalChunkingConfiguration;

    /**
     * @return Configurations for when you choose hierarchical chunking. Requires chunking_strategy as `HIERARCHICAL`. See `hierarchical_chunking_configuration` for details.
     * 
     */
    public Optional<Output<AgentDataSourceVectorIngestionConfigurationChunkingConfigurationHierarchicalChunkingConfigurationArgs>> hierarchicalChunkingConfiguration() {
        return Optional.ofNullable(this.hierarchicalChunkingConfiguration);
    }

    /**
     * Configurations for when you choose semantic chunking. Requires chunking_strategy as `SEMANTIC`. See `semantic_chunking_configuration` for details.
     * 
     */
    @Import(name="semanticChunkingConfiguration")
    private @Nullable Output<AgentDataSourceVectorIngestionConfigurationChunkingConfigurationSemanticChunkingConfigurationArgs> semanticChunkingConfiguration;

    /**
     * @return Configurations for when you choose semantic chunking. Requires chunking_strategy as `SEMANTIC`. See `semantic_chunking_configuration` for details.
     * 
     */
    public Optional<Output<AgentDataSourceVectorIngestionConfigurationChunkingConfigurationSemanticChunkingConfigurationArgs>> semanticChunkingConfiguration() {
        return Optional.ofNullable(this.semanticChunkingConfiguration);
    }

    private AgentDataSourceVectorIngestionConfigurationChunkingConfigurationArgs() {}

    private AgentDataSourceVectorIngestionConfigurationChunkingConfigurationArgs(AgentDataSourceVectorIngestionConfigurationChunkingConfigurationArgs $) {
        this.chunkingStrategy = $.chunkingStrategy;
        this.fixedSizeChunkingConfiguration = $.fixedSizeChunkingConfiguration;
        this.hierarchicalChunkingConfiguration = $.hierarchicalChunkingConfiguration;
        this.semanticChunkingConfiguration = $.semanticChunkingConfiguration;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AgentDataSourceVectorIngestionConfigurationChunkingConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AgentDataSourceVectorIngestionConfigurationChunkingConfigurationArgs $;

        public Builder() {
            $ = new AgentDataSourceVectorIngestionConfigurationChunkingConfigurationArgs();
        }

        public Builder(AgentDataSourceVectorIngestionConfigurationChunkingConfigurationArgs defaults) {
            $ = new AgentDataSourceVectorIngestionConfigurationChunkingConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param chunkingStrategy Option for chunking your source data, either in fixed-sized chunks or as one chunk. Valid values: `FIXED_SIZE`, `HIERARCHICAL`, `SEMANTIC`, `NONE`.
         * 
         * @return builder
         * 
         */
        public Builder chunkingStrategy(Output<String> chunkingStrategy) {
            $.chunkingStrategy = chunkingStrategy;
            return this;
        }

        /**
         * @param chunkingStrategy Option for chunking your source data, either in fixed-sized chunks or as one chunk. Valid values: `FIXED_SIZE`, `HIERARCHICAL`, `SEMANTIC`, `NONE`.
         * 
         * @return builder
         * 
         */
        public Builder chunkingStrategy(String chunkingStrategy) {
            return chunkingStrategy(Output.of(chunkingStrategy));
        }

        /**
         * @param fixedSizeChunkingConfiguration Configurations for when you choose fixed-size chunking. Requires chunking_strategy as `FIXED_SIZE`. See `fixed_size_chunking_configuration` for details.
         * 
         * @return builder
         * 
         */
        public Builder fixedSizeChunkingConfiguration(@Nullable Output<AgentDataSourceVectorIngestionConfigurationChunkingConfigurationFixedSizeChunkingConfigurationArgs> fixedSizeChunkingConfiguration) {
            $.fixedSizeChunkingConfiguration = fixedSizeChunkingConfiguration;
            return this;
        }

        /**
         * @param fixedSizeChunkingConfiguration Configurations for when you choose fixed-size chunking. Requires chunking_strategy as `FIXED_SIZE`. See `fixed_size_chunking_configuration` for details.
         * 
         * @return builder
         * 
         */
        public Builder fixedSizeChunkingConfiguration(AgentDataSourceVectorIngestionConfigurationChunkingConfigurationFixedSizeChunkingConfigurationArgs fixedSizeChunkingConfiguration) {
            return fixedSizeChunkingConfiguration(Output.of(fixedSizeChunkingConfiguration));
        }

        /**
         * @param hierarchicalChunkingConfiguration Configurations for when you choose hierarchical chunking. Requires chunking_strategy as `HIERARCHICAL`. See `hierarchical_chunking_configuration` for details.
         * 
         * @return builder
         * 
         */
        public Builder hierarchicalChunkingConfiguration(@Nullable Output<AgentDataSourceVectorIngestionConfigurationChunkingConfigurationHierarchicalChunkingConfigurationArgs> hierarchicalChunkingConfiguration) {
            $.hierarchicalChunkingConfiguration = hierarchicalChunkingConfiguration;
            return this;
        }

        /**
         * @param hierarchicalChunkingConfiguration Configurations for when you choose hierarchical chunking. Requires chunking_strategy as `HIERARCHICAL`. See `hierarchical_chunking_configuration` for details.
         * 
         * @return builder
         * 
         */
        public Builder hierarchicalChunkingConfiguration(AgentDataSourceVectorIngestionConfigurationChunkingConfigurationHierarchicalChunkingConfigurationArgs hierarchicalChunkingConfiguration) {
            return hierarchicalChunkingConfiguration(Output.of(hierarchicalChunkingConfiguration));
        }

        /**
         * @param semanticChunkingConfiguration Configurations for when you choose semantic chunking. Requires chunking_strategy as `SEMANTIC`. See `semantic_chunking_configuration` for details.
         * 
         * @return builder
         * 
         */
        public Builder semanticChunkingConfiguration(@Nullable Output<AgentDataSourceVectorIngestionConfigurationChunkingConfigurationSemanticChunkingConfigurationArgs> semanticChunkingConfiguration) {
            $.semanticChunkingConfiguration = semanticChunkingConfiguration;
            return this;
        }

        /**
         * @param semanticChunkingConfiguration Configurations for when you choose semantic chunking. Requires chunking_strategy as `SEMANTIC`. See `semantic_chunking_configuration` for details.
         * 
         * @return builder
         * 
         */
        public Builder semanticChunkingConfiguration(AgentDataSourceVectorIngestionConfigurationChunkingConfigurationSemanticChunkingConfigurationArgs semanticChunkingConfiguration) {
            return semanticChunkingConfiguration(Output.of(semanticChunkingConfiguration));
        }

        public AgentDataSourceVectorIngestionConfigurationChunkingConfigurationArgs build() {
            if ($.chunkingStrategy == null) {
                throw new MissingRequiredPropertyException("AgentDataSourceVectorIngestionConfigurationChunkingConfigurationArgs", "chunkingStrategy");
            }
            return $;
        }
    }

}
