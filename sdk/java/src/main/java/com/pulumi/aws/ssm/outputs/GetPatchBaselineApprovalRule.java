// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ssm.outputs;

import com.pulumi.aws.ssm.outputs.GetPatchBaselineApprovalRulePatchFilter;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetPatchBaselineApprovalRule {
    /**
     * @return The number of days after the release date of each patch matched by the rule the patch is marked as approved in the patch baseline.
     * 
     */
    private Integer approveAfterDays;
    /**
     * @return The cutoff date for auto approval of released patches. Any patches released on or before this date are installed automatically. Date is formatted as `YYYY-MM-DD`. Conflicts with `approve_after_days`
     * 
     */
    private String approveUntilDate;
    /**
     * @return The compliance level for patches approved by this rule.
     * 
     */
    private String complianceLevel;
    /**
     * @return Boolean enabling the application of non-security updates.
     * 
     */
    private Boolean enableNonSecurity;
    /**
     * @return The patch filter group that defines the criteria for the rule.
     * 
     */
    private List<GetPatchBaselineApprovalRulePatchFilter> patchFilters;

    private GetPatchBaselineApprovalRule() {}
    /**
     * @return The number of days after the release date of each patch matched by the rule the patch is marked as approved in the patch baseline.
     * 
     */
    public Integer approveAfterDays() {
        return this.approveAfterDays;
    }
    /**
     * @return The cutoff date for auto approval of released patches. Any patches released on or before this date are installed automatically. Date is formatted as `YYYY-MM-DD`. Conflicts with `approve_after_days`
     * 
     */
    public String approveUntilDate() {
        return this.approveUntilDate;
    }
    /**
     * @return The compliance level for patches approved by this rule.
     * 
     */
    public String complianceLevel() {
        return this.complianceLevel;
    }
    /**
     * @return Boolean enabling the application of non-security updates.
     * 
     */
    public Boolean enableNonSecurity() {
        return this.enableNonSecurity;
    }
    /**
     * @return The patch filter group that defines the criteria for the rule.
     * 
     */
    public List<GetPatchBaselineApprovalRulePatchFilter> patchFilters() {
        return this.patchFilters;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPatchBaselineApprovalRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer approveAfterDays;
        private String approveUntilDate;
        private String complianceLevel;
        private Boolean enableNonSecurity;
        private List<GetPatchBaselineApprovalRulePatchFilter> patchFilters;
        public Builder() {}
        public Builder(GetPatchBaselineApprovalRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.approveAfterDays = defaults.approveAfterDays;
    	      this.approveUntilDate = defaults.approveUntilDate;
    	      this.complianceLevel = defaults.complianceLevel;
    	      this.enableNonSecurity = defaults.enableNonSecurity;
    	      this.patchFilters = defaults.patchFilters;
        }

        @CustomType.Setter
        public Builder approveAfterDays(Integer approveAfterDays) {
            if (approveAfterDays == null) {
              throw new MissingRequiredPropertyException("GetPatchBaselineApprovalRule", "approveAfterDays");
            }
            this.approveAfterDays = approveAfterDays;
            return this;
        }
        @CustomType.Setter
        public Builder approveUntilDate(String approveUntilDate) {
            if (approveUntilDate == null) {
              throw new MissingRequiredPropertyException("GetPatchBaselineApprovalRule", "approveUntilDate");
            }
            this.approveUntilDate = approveUntilDate;
            return this;
        }
        @CustomType.Setter
        public Builder complianceLevel(String complianceLevel) {
            if (complianceLevel == null) {
              throw new MissingRequiredPropertyException("GetPatchBaselineApprovalRule", "complianceLevel");
            }
            this.complianceLevel = complianceLevel;
            return this;
        }
        @CustomType.Setter
        public Builder enableNonSecurity(Boolean enableNonSecurity) {
            if (enableNonSecurity == null) {
              throw new MissingRequiredPropertyException("GetPatchBaselineApprovalRule", "enableNonSecurity");
            }
            this.enableNonSecurity = enableNonSecurity;
            return this;
        }
        @CustomType.Setter
        public Builder patchFilters(List<GetPatchBaselineApprovalRulePatchFilter> patchFilters) {
            if (patchFilters == null) {
              throw new MissingRequiredPropertyException("GetPatchBaselineApprovalRule", "patchFilters");
            }
            this.patchFilters = patchFilters;
            return this;
        }
        public Builder patchFilters(GetPatchBaselineApprovalRulePatchFilter... patchFilters) {
            return patchFilters(List.of(patchFilters));
        }
        public GetPatchBaselineApprovalRule build() {
            final var _resultValue = new GetPatchBaselineApprovalRule();
            _resultValue.approveAfterDays = approveAfterDays;
            _resultValue.approveUntilDate = approveUntilDate;
            _resultValue.complianceLevel = complianceLevel;
            _resultValue.enableNonSecurity = enableNonSecurity;
            _resultValue.patchFilters = patchFilters;
            return _resultValue;
        }
    }
}
