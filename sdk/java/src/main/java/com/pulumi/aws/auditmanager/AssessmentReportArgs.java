// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.auditmanager;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AssessmentReportArgs extends com.pulumi.resources.ResourceArgs {

    public static final AssessmentReportArgs Empty = new AssessmentReportArgs();

    /**
     * Unique identifier of the assessment to create the report from.
     * 
     * The following arguments are optional:
     * 
     */
    @Import(name="assessmentId", required=true)
    private Output<String> assessmentId;

    /**
     * @return Unique identifier of the assessment to create the report from.
     * 
     * The following arguments are optional:
     * 
     */
    public Output<String> assessmentId() {
        return this.assessmentId;
    }

    /**
     * Description of the assessment report.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the assessment report.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Name of the assessment report.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the assessment report.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    private AssessmentReportArgs() {}

    private AssessmentReportArgs(AssessmentReportArgs $) {
        this.assessmentId = $.assessmentId;
        this.description = $.description;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AssessmentReportArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AssessmentReportArgs $;

        public Builder() {
            $ = new AssessmentReportArgs();
        }

        public Builder(AssessmentReportArgs defaults) {
            $ = new AssessmentReportArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param assessmentId Unique identifier of the assessment to create the report from.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder assessmentId(Output<String> assessmentId) {
            $.assessmentId = assessmentId;
            return this;
        }

        /**
         * @param assessmentId Unique identifier of the assessment to create the report from.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder assessmentId(String assessmentId) {
            return assessmentId(Output.of(assessmentId));
        }

        /**
         * @param description Description of the assessment report.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the assessment report.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param name Name of the assessment report.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the assessment report.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public AssessmentReportArgs build() {
            $.assessmentId = Objects.requireNonNull($.assessmentId, "expected parameter 'assessmentId' to be non-null");
            return $;
        }
    }

}
