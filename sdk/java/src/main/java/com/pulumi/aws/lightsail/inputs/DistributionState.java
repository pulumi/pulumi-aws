// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.lightsail.inputs;

import com.pulumi.aws.lightsail.inputs.DistributionCacheBehaviorArgs;
import com.pulumi.aws.lightsail.inputs.DistributionCacheBehaviorSettingsArgs;
import com.pulumi.aws.lightsail.inputs.DistributionDefaultCacheBehaviorArgs;
import com.pulumi.aws.lightsail.inputs.DistributionLocationArgs;
import com.pulumi.aws.lightsail.inputs.DistributionOriginArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DistributionState extends com.pulumi.resources.ResourceArgs {

    public static final DistributionState Empty = new DistributionState();

    /**
     * The alternate domain names of the distribution.
     * 
     */
    @Import(name="alternativeDomainNames")
    private @Nullable Output<List<String>> alternativeDomainNames;

    /**
     * @return The alternate domain names of the distribution.
     * 
     */
    public Optional<Output<List<String>>> alternativeDomainNames() {
        return Optional.ofNullable(this.alternativeDomainNames);
    }

    /**
     * The Amazon Resource Name (ARN) of the distribution.
     * 
     */
    @Import(name="arn")
    private @Nullable Output<String> arn;

    /**
     * @return The Amazon Resource Name (ARN) of the distribution.
     * 
     */
    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    /**
     * Bundle ID to use for the distribution.
     * 
     */
    @Import(name="bundleId")
    private @Nullable Output<String> bundleId;

    /**
     * @return Bundle ID to use for the distribution.
     * 
     */
    public Optional<Output<String>> bundleId() {
        return Optional.ofNullable(this.bundleId);
    }

    /**
     * An object that describes the cache behavior settings of the distribution. Detailed below
     * 
     * The following arguments are optional:
     * 
     */
    @Import(name="cacheBehaviorSettings")
    private @Nullable Output<DistributionCacheBehaviorSettingsArgs> cacheBehaviorSettings;

    /**
     * @return An object that describes the cache behavior settings of the distribution. Detailed below
     * 
     * The following arguments are optional:
     * 
     */
    public Optional<Output<DistributionCacheBehaviorSettingsArgs>> cacheBehaviorSettings() {
        return Optional.ofNullable(this.cacheBehaviorSettings);
    }

    /**
     * A set of configuration blocks that describe the per-path cache behavior of the distribution. Detailed below
     * 
     */
    @Import(name="cacheBehaviors")
    private @Nullable Output<List<DistributionCacheBehaviorArgs>> cacheBehaviors;

    /**
     * @return A set of configuration blocks that describe the per-path cache behavior of the distribution. Detailed below
     * 
     */
    public Optional<Output<List<DistributionCacheBehaviorArgs>>> cacheBehaviors() {
        return Optional.ofNullable(this.cacheBehaviors);
    }

    /**
     * The name of the SSL/TLS certificate attached to the distribution, if any.
     * 
     */
    @Import(name="certificateName")
    private @Nullable Output<String> certificateName;

    /**
     * @return The name of the SSL/TLS certificate attached to the distribution, if any.
     * 
     */
    public Optional<Output<String>> certificateName() {
        return Optional.ofNullable(this.certificateName);
    }

    /**
     * The timestamp when the distribution was created.
     * 
     */
    @Import(name="createdAt")
    private @Nullable Output<String> createdAt;

    /**
     * @return The timestamp when the distribution was created.
     * 
     */
    public Optional<Output<String>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    /**
     * Object that describes the default cache behavior of the distribution. Detailed below
     * 
     */
    @Import(name="defaultCacheBehavior")
    private @Nullable Output<DistributionDefaultCacheBehaviorArgs> defaultCacheBehavior;

    /**
     * @return Object that describes the default cache behavior of the distribution. Detailed below
     * 
     */
    public Optional<Output<DistributionDefaultCacheBehaviorArgs>> defaultCacheBehavior() {
        return Optional.ofNullable(this.defaultCacheBehavior);
    }

    /**
     * The domain name of the distribution.
     * 
     */
    @Import(name="domainName")
    private @Nullable Output<String> domainName;

    /**
     * @return The domain name of the distribution.
     * 
     */
    public Optional<Output<String>> domainName() {
        return Optional.ofNullable(this.domainName);
    }

    /**
     * The IP address type of the distribution. Default: `dualstack`.
     * 
     */
    @Import(name="ipAddressType")
    private @Nullable Output<String> ipAddressType;

    /**
     * @return The IP address type of the distribution. Default: `dualstack`.
     * 
     */
    public Optional<Output<String>> ipAddressType() {
        return Optional.ofNullable(this.ipAddressType);
    }

    /**
     * Indicates whether the distribution is enabled. Default: `true`.
     * 
     */
    @Import(name="isEnabled")
    private @Nullable Output<Boolean> isEnabled;

    /**
     * @return Indicates whether the distribution is enabled. Default: `true`.
     * 
     */
    public Optional<Output<Boolean>> isEnabled() {
        return Optional.ofNullable(this.isEnabled);
    }

    /**
     * An object that describes the location of the distribution, such as the AWS Region and Availability Zone. Detailed below
     * 
     */
    @Import(name="locations")
    private @Nullable Output<List<DistributionLocationArgs>> locations;

    /**
     * @return An object that describes the location of the distribution, such as the AWS Region and Availability Zone. Detailed below
     * 
     */
    public Optional<Output<List<DistributionLocationArgs>>> locations() {
        return Optional.ofNullable(this.locations);
    }

    /**
     * Name of the distribution.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the distribution.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Object that describes the origin resource of the distribution, such as a Lightsail instance, bucket, or load balancer. Detailed below
     * 
     */
    @Import(name="origin")
    private @Nullable Output<DistributionOriginArgs> origin;

    /**
     * @return Object that describes the origin resource of the distribution, such as a Lightsail instance, bucket, or load balancer. Detailed below
     * 
     */
    public Optional<Output<DistributionOriginArgs>> origin() {
        return Optional.ofNullable(this.origin);
    }

    /**
     * The public DNS of the origin.
     * 
     */
    @Import(name="originPublicDns")
    private @Nullable Output<String> originPublicDns;

    /**
     * @return The public DNS of the origin.
     * 
     */
    public Optional<Output<String>> originPublicDns() {
        return Optional.ofNullable(this.originPublicDns);
    }

    /**
     * The resource type of the origin resource (e.g., Instance).
     * 
     */
    @Import(name="resourceType")
    private @Nullable Output<String> resourceType;

    /**
     * @return The resource type of the origin resource (e.g., Instance).
     * 
     */
    public Optional<Output<String>> resourceType() {
        return Optional.ofNullable(this.resourceType);
    }

    /**
     * The status of the distribution.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of the distribution.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The support code. Include this code in your email to support when you have questions about your Lightsail distribution. This code enables our support team to look up your Lightsail information more easily.
     * 
     */
    @Import(name="supportCode")
    private @Nullable Output<String> supportCode;

    /**
     * @return The support code. Include this code in your email to support when you have questions about your Lightsail distribution. This code enables our support team to look up your Lightsail information more easily.
     * 
     */
    public Optional<Output<String>> supportCode() {
        return Optional.ofNullable(this.supportCode);
    }

    /**
     * Map of tags for the Lightsail Distribution. If
     * configured with a provider
     * `default_tags` configuration block
     * present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Map of tags for the Lightsail Distribution. If
     * configured with a provider
     * `default_tags` configuration block
     * present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    /**
     * @return A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    private DistributionState() {}

    private DistributionState(DistributionState $) {
        this.alternativeDomainNames = $.alternativeDomainNames;
        this.arn = $.arn;
        this.bundleId = $.bundleId;
        this.cacheBehaviorSettings = $.cacheBehaviorSettings;
        this.cacheBehaviors = $.cacheBehaviors;
        this.certificateName = $.certificateName;
        this.createdAt = $.createdAt;
        this.defaultCacheBehavior = $.defaultCacheBehavior;
        this.domainName = $.domainName;
        this.ipAddressType = $.ipAddressType;
        this.isEnabled = $.isEnabled;
        this.locations = $.locations;
        this.name = $.name;
        this.origin = $.origin;
        this.originPublicDns = $.originPublicDns;
        this.resourceType = $.resourceType;
        this.status = $.status;
        this.supportCode = $.supportCode;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DistributionState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DistributionState $;

        public Builder() {
            $ = new DistributionState();
        }

        public Builder(DistributionState defaults) {
            $ = new DistributionState(Objects.requireNonNull(defaults));
        }

        /**
         * @param alternativeDomainNames The alternate domain names of the distribution.
         * 
         * @return builder
         * 
         */
        public Builder alternativeDomainNames(@Nullable Output<List<String>> alternativeDomainNames) {
            $.alternativeDomainNames = alternativeDomainNames;
            return this;
        }

        /**
         * @param alternativeDomainNames The alternate domain names of the distribution.
         * 
         * @return builder
         * 
         */
        public Builder alternativeDomainNames(List<String> alternativeDomainNames) {
            return alternativeDomainNames(Output.of(alternativeDomainNames));
        }

        /**
         * @param alternativeDomainNames The alternate domain names of the distribution.
         * 
         * @return builder
         * 
         */
        public Builder alternativeDomainNames(String... alternativeDomainNames) {
            return alternativeDomainNames(List.of(alternativeDomainNames));
        }

        /**
         * @param arn The Amazon Resource Name (ARN) of the distribution.
         * 
         * @return builder
         * 
         */
        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        /**
         * @param arn The Amazon Resource Name (ARN) of the distribution.
         * 
         * @return builder
         * 
         */
        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        /**
         * @param bundleId Bundle ID to use for the distribution.
         * 
         * @return builder
         * 
         */
        public Builder bundleId(@Nullable Output<String> bundleId) {
            $.bundleId = bundleId;
            return this;
        }

        /**
         * @param bundleId Bundle ID to use for the distribution.
         * 
         * @return builder
         * 
         */
        public Builder bundleId(String bundleId) {
            return bundleId(Output.of(bundleId));
        }

        /**
         * @param cacheBehaviorSettings An object that describes the cache behavior settings of the distribution. Detailed below
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder cacheBehaviorSettings(@Nullable Output<DistributionCacheBehaviorSettingsArgs> cacheBehaviorSettings) {
            $.cacheBehaviorSettings = cacheBehaviorSettings;
            return this;
        }

        /**
         * @param cacheBehaviorSettings An object that describes the cache behavior settings of the distribution. Detailed below
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder cacheBehaviorSettings(DistributionCacheBehaviorSettingsArgs cacheBehaviorSettings) {
            return cacheBehaviorSettings(Output.of(cacheBehaviorSettings));
        }

        /**
         * @param cacheBehaviors A set of configuration blocks that describe the per-path cache behavior of the distribution. Detailed below
         * 
         * @return builder
         * 
         */
        public Builder cacheBehaviors(@Nullable Output<List<DistributionCacheBehaviorArgs>> cacheBehaviors) {
            $.cacheBehaviors = cacheBehaviors;
            return this;
        }

        /**
         * @param cacheBehaviors A set of configuration blocks that describe the per-path cache behavior of the distribution. Detailed below
         * 
         * @return builder
         * 
         */
        public Builder cacheBehaviors(List<DistributionCacheBehaviorArgs> cacheBehaviors) {
            return cacheBehaviors(Output.of(cacheBehaviors));
        }

        /**
         * @param cacheBehaviors A set of configuration blocks that describe the per-path cache behavior of the distribution. Detailed below
         * 
         * @return builder
         * 
         */
        public Builder cacheBehaviors(DistributionCacheBehaviorArgs... cacheBehaviors) {
            return cacheBehaviors(List.of(cacheBehaviors));
        }

        /**
         * @param certificateName The name of the SSL/TLS certificate attached to the distribution, if any.
         * 
         * @return builder
         * 
         */
        public Builder certificateName(@Nullable Output<String> certificateName) {
            $.certificateName = certificateName;
            return this;
        }

        /**
         * @param certificateName The name of the SSL/TLS certificate attached to the distribution, if any.
         * 
         * @return builder
         * 
         */
        public Builder certificateName(String certificateName) {
            return certificateName(Output.of(certificateName));
        }

        /**
         * @param createdAt The timestamp when the distribution was created.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(@Nullable Output<String> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        /**
         * @param createdAt The timestamp when the distribution was created.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(String createdAt) {
            return createdAt(Output.of(createdAt));
        }

        /**
         * @param defaultCacheBehavior Object that describes the default cache behavior of the distribution. Detailed below
         * 
         * @return builder
         * 
         */
        public Builder defaultCacheBehavior(@Nullable Output<DistributionDefaultCacheBehaviorArgs> defaultCacheBehavior) {
            $.defaultCacheBehavior = defaultCacheBehavior;
            return this;
        }

        /**
         * @param defaultCacheBehavior Object that describes the default cache behavior of the distribution. Detailed below
         * 
         * @return builder
         * 
         */
        public Builder defaultCacheBehavior(DistributionDefaultCacheBehaviorArgs defaultCacheBehavior) {
            return defaultCacheBehavior(Output.of(defaultCacheBehavior));
        }

        /**
         * @param domainName The domain name of the distribution.
         * 
         * @return builder
         * 
         */
        public Builder domainName(@Nullable Output<String> domainName) {
            $.domainName = domainName;
            return this;
        }

        /**
         * @param domainName The domain name of the distribution.
         * 
         * @return builder
         * 
         */
        public Builder domainName(String domainName) {
            return domainName(Output.of(domainName));
        }

        /**
         * @param ipAddressType The IP address type of the distribution. Default: `dualstack`.
         * 
         * @return builder
         * 
         */
        public Builder ipAddressType(@Nullable Output<String> ipAddressType) {
            $.ipAddressType = ipAddressType;
            return this;
        }

        /**
         * @param ipAddressType The IP address type of the distribution. Default: `dualstack`.
         * 
         * @return builder
         * 
         */
        public Builder ipAddressType(String ipAddressType) {
            return ipAddressType(Output.of(ipAddressType));
        }

        /**
         * @param isEnabled Indicates whether the distribution is enabled. Default: `true`.
         * 
         * @return builder
         * 
         */
        public Builder isEnabled(@Nullable Output<Boolean> isEnabled) {
            $.isEnabled = isEnabled;
            return this;
        }

        /**
         * @param isEnabled Indicates whether the distribution is enabled. Default: `true`.
         * 
         * @return builder
         * 
         */
        public Builder isEnabled(Boolean isEnabled) {
            return isEnabled(Output.of(isEnabled));
        }

        /**
         * @param locations An object that describes the location of the distribution, such as the AWS Region and Availability Zone. Detailed below
         * 
         * @return builder
         * 
         */
        public Builder locations(@Nullable Output<List<DistributionLocationArgs>> locations) {
            $.locations = locations;
            return this;
        }

        /**
         * @param locations An object that describes the location of the distribution, such as the AWS Region and Availability Zone. Detailed below
         * 
         * @return builder
         * 
         */
        public Builder locations(List<DistributionLocationArgs> locations) {
            return locations(Output.of(locations));
        }

        /**
         * @param locations An object that describes the location of the distribution, such as the AWS Region and Availability Zone. Detailed below
         * 
         * @return builder
         * 
         */
        public Builder locations(DistributionLocationArgs... locations) {
            return locations(List.of(locations));
        }

        /**
         * @param name Name of the distribution.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the distribution.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param origin Object that describes the origin resource of the distribution, such as a Lightsail instance, bucket, or load balancer. Detailed below
         * 
         * @return builder
         * 
         */
        public Builder origin(@Nullable Output<DistributionOriginArgs> origin) {
            $.origin = origin;
            return this;
        }

        /**
         * @param origin Object that describes the origin resource of the distribution, such as a Lightsail instance, bucket, or load balancer. Detailed below
         * 
         * @return builder
         * 
         */
        public Builder origin(DistributionOriginArgs origin) {
            return origin(Output.of(origin));
        }

        /**
         * @param originPublicDns The public DNS of the origin.
         * 
         * @return builder
         * 
         */
        public Builder originPublicDns(@Nullable Output<String> originPublicDns) {
            $.originPublicDns = originPublicDns;
            return this;
        }

        /**
         * @param originPublicDns The public DNS of the origin.
         * 
         * @return builder
         * 
         */
        public Builder originPublicDns(String originPublicDns) {
            return originPublicDns(Output.of(originPublicDns));
        }

        /**
         * @param resourceType The resource type of the origin resource (e.g., Instance).
         * 
         * @return builder
         * 
         */
        public Builder resourceType(@Nullable Output<String> resourceType) {
            $.resourceType = resourceType;
            return this;
        }

        /**
         * @param resourceType The resource type of the origin resource (e.g., Instance).
         * 
         * @return builder
         * 
         */
        public Builder resourceType(String resourceType) {
            return resourceType(Output.of(resourceType));
        }

        /**
         * @param status The status of the distribution.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of the distribution.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param supportCode The support code. Include this code in your email to support when you have questions about your Lightsail distribution. This code enables our support team to look up your Lightsail information more easily.
         * 
         * @return builder
         * 
         */
        public Builder supportCode(@Nullable Output<String> supportCode) {
            $.supportCode = supportCode;
            return this;
        }

        /**
         * @param supportCode The support code. Include this code in your email to support when you have questions about your Lightsail distribution. This code enables our support team to look up your Lightsail information more easily.
         * 
         * @return builder
         * 
         */
        public Builder supportCode(String supportCode) {
            return supportCode(Output.of(supportCode));
        }

        /**
         * @param tags Map of tags for the Lightsail Distribution. If
         * configured with a provider
         * `default_tags` configuration block
         * present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Map of tags for the Lightsail Distribution. If
         * configured with a provider
         * `default_tags` configuration block
         * present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tagsAll A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
         * 
         * @return builder
         * 
         * @deprecated
         * Please use `tags` instead.
         * 
         */
        @Deprecated /* Please use `tags` instead. */
        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        /**
         * @param tagsAll A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
         * 
         * @return builder
         * 
         * @deprecated
         * Please use `tags` instead.
         * 
         */
        @Deprecated /* Please use `tags` instead. */
        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        public DistributionState build() {
            return $;
        }
    }

}
