// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.batch.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class JobQueueJobStateTimeLimitActionArgs extends com.pulumi.resources.ResourceArgs {

    public static final JobQueueJobStateTimeLimitActionArgs Empty = new JobQueueJobStateTimeLimitActionArgs();

    /**
     * The action to take when a job is at the head of the job queue in the specified state for the specified period of time. Valid values include `&#34;CANCEL&#34;`
     * * `job_state_time_limit_action.#.max_time_seconds` - The approximate amount of time, in seconds, that must pass with the job in the specified state before the action is taken. Valid values include integers between `600` &amp; `86400`
     * 
     */
    @Import(name="action", required=true)
    private Output<String> action;

    /**
     * @return The action to take when a job is at the head of the job queue in the specified state for the specified period of time. Valid values include `&#34;CANCEL&#34;`
     * * `job_state_time_limit_action.#.max_time_seconds` - The approximate amount of time, in seconds, that must pass with the job in the specified state before the action is taken. Valid values include integers between `600` &amp; `86400`
     * 
     */
    public Output<String> action() {
        return this.action;
    }

    @Import(name="maxTimeSeconds", required=true)
    private Output<Integer> maxTimeSeconds;

    public Output<Integer> maxTimeSeconds() {
        return this.maxTimeSeconds;
    }

    /**
     * The reason to log for the action being taken.
     * 
     */
    @Import(name="reason", required=true)
    private Output<String> reason;

    /**
     * @return The reason to log for the action being taken.
     * 
     */
    public Output<String> reason() {
        return this.reason;
    }

    /**
     * The state of the job needed to trigger the action. Valid values include `&#34;RUNNABLE&#34;`.
     * 
     */
    @Import(name="state", required=true)
    private Output<String> state;

    /**
     * @return The state of the job needed to trigger the action. Valid values include `&#34;RUNNABLE&#34;`.
     * 
     */
    public Output<String> state() {
        return this.state;
    }

    private JobQueueJobStateTimeLimitActionArgs() {}

    private JobQueueJobStateTimeLimitActionArgs(JobQueueJobStateTimeLimitActionArgs $) {
        this.action = $.action;
        this.maxTimeSeconds = $.maxTimeSeconds;
        this.reason = $.reason;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(JobQueueJobStateTimeLimitActionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private JobQueueJobStateTimeLimitActionArgs $;

        public Builder() {
            $ = new JobQueueJobStateTimeLimitActionArgs();
        }

        public Builder(JobQueueJobStateTimeLimitActionArgs defaults) {
            $ = new JobQueueJobStateTimeLimitActionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param action The action to take when a job is at the head of the job queue in the specified state for the specified period of time. Valid values include `&#34;CANCEL&#34;`
         * * `job_state_time_limit_action.#.max_time_seconds` - The approximate amount of time, in seconds, that must pass with the job in the specified state before the action is taken. Valid values include integers between `600` &amp; `86400`
         * 
         * @return builder
         * 
         */
        public Builder action(Output<String> action) {
            $.action = action;
            return this;
        }

        /**
         * @param action The action to take when a job is at the head of the job queue in the specified state for the specified period of time. Valid values include `&#34;CANCEL&#34;`
         * * `job_state_time_limit_action.#.max_time_seconds` - The approximate amount of time, in seconds, that must pass with the job in the specified state before the action is taken. Valid values include integers between `600` &amp; `86400`
         * 
         * @return builder
         * 
         */
        public Builder action(String action) {
            return action(Output.of(action));
        }

        public Builder maxTimeSeconds(Output<Integer> maxTimeSeconds) {
            $.maxTimeSeconds = maxTimeSeconds;
            return this;
        }

        public Builder maxTimeSeconds(Integer maxTimeSeconds) {
            return maxTimeSeconds(Output.of(maxTimeSeconds));
        }

        /**
         * @param reason The reason to log for the action being taken.
         * 
         * @return builder
         * 
         */
        public Builder reason(Output<String> reason) {
            $.reason = reason;
            return this;
        }

        /**
         * @param reason The reason to log for the action being taken.
         * 
         * @return builder
         * 
         */
        public Builder reason(String reason) {
            return reason(Output.of(reason));
        }

        /**
         * @param state The state of the job needed to trigger the action. Valid values include `&#34;RUNNABLE&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder state(Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The state of the job needed to trigger the action. Valid values include `&#34;RUNNABLE&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        public JobQueueJobStateTimeLimitActionArgs build() {
            if ($.action == null) {
                throw new MissingRequiredPropertyException("JobQueueJobStateTimeLimitActionArgs", "action");
            }
            if ($.maxTimeSeconds == null) {
                throw new MissingRequiredPropertyException("JobQueueJobStateTimeLimitActionArgs", "maxTimeSeconds");
            }
            if ($.reason == null) {
                throw new MissingRequiredPropertyException("JobQueueJobStateTimeLimitActionArgs", "reason");
            }
            if ($.state == null) {
                throw new MissingRequiredPropertyException("JobQueueJobStateTimeLimitActionArgs", "state");
            }
            return $;
        }
    }

}
