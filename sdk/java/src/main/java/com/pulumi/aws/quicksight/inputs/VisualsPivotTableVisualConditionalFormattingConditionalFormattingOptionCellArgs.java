// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.inputs;

import com.pulumi.aws.quicksight.inputs.VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionCellScopeArgs;
import com.pulumi.aws.quicksight.inputs.VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionCellTextFormatArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionCellArgs extends com.pulumi.resources.ResourceArgs {

    public static final VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionCellArgs Empty = new VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionCellArgs();

    @Import(name="fieldId", required=true)
    private Output<String> fieldId;

    public Output<String> fieldId() {
        return this.fieldId;
    }

    @Import(name="scope")
    private @Nullable Output<VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionCellScopeArgs> scope;

    public Optional<Output<VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionCellScopeArgs>> scope() {
        return Optional.ofNullable(this.scope);
    }

    @Import(name="textFormat")
    private @Nullable Output<VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionCellTextFormatArgs> textFormat;

    public Optional<Output<VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionCellTextFormatArgs>> textFormat() {
        return Optional.ofNullable(this.textFormat);
    }

    private VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionCellArgs() {}

    private VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionCellArgs(VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionCellArgs $) {
        this.fieldId = $.fieldId;
        this.scope = $.scope;
        this.textFormat = $.textFormat;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionCellArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionCellArgs $;

        public Builder() {
            $ = new VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionCellArgs();
        }

        public Builder(VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionCellArgs defaults) {
            $ = new VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionCellArgs(Objects.requireNonNull(defaults));
        }

        public Builder fieldId(Output<String> fieldId) {
            $.fieldId = fieldId;
            return this;
        }

        public Builder fieldId(String fieldId) {
            return fieldId(Output.of(fieldId));
        }

        public Builder scope(@Nullable Output<VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionCellScopeArgs> scope) {
            $.scope = scope;
            return this;
        }

        public Builder scope(VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionCellScopeArgs scope) {
            return scope(Output.of(scope));
        }

        public Builder textFormat(@Nullable Output<VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionCellTextFormatArgs> textFormat) {
            $.textFormat = textFormat;
            return this;
        }

        public Builder textFormat(VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionCellTextFormatArgs textFormat) {
            return textFormat(Output.of(textFormat));
        }

        public VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionCellArgs build() {
            if ($.fieldId == null) {
                throw new MissingRequiredPropertyException("VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionCellArgs", "fieldId");
            }
            return $;
        }
    }

}
