// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.cloudfront.inputs;

import com.pulumi.aws.cloudfront.inputs.DistributionDefaultCacheBehaviorForwardedValuesCookiesArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DistributionDefaultCacheBehaviorForwardedValuesArgs extends com.pulumi.resources.ResourceArgs {

    public static final DistributionDefaultCacheBehaviorForwardedValuesArgs Empty = new DistributionDefaultCacheBehaviorForwardedValuesArgs();

    /**
     * The forwarded values cookies
     * that specifies how CloudFront handles cookies (maximum one).
     * 
     */
    @Import(name="cookies", required=true)
    private Output<DistributionDefaultCacheBehaviorForwardedValuesCookiesArgs> cookies;

    /**
     * @return The forwarded values cookies
     * that specifies how CloudFront handles cookies (maximum one).
     * 
     */
    public Output<DistributionDefaultCacheBehaviorForwardedValuesCookiesArgs> cookies() {
        return this.cookies;
    }

    /**
     * Headers, if any, that you want
     * CloudFront to vary upon for this cache behavior. Specify `*` to include all
     * headers.
     * 
     */
    @Import(name="headers")
    private @Nullable Output<List<String>> headers;

    /**
     * @return Headers, if any, that you want
     * CloudFront to vary upon for this cache behavior. Specify `*` to include all
     * headers.
     * 
     */
    public Optional<Output<List<String>>> headers() {
        return Optional.ofNullable(this.headers);
    }

    /**
     * Indicates whether you want CloudFront to forward
     * query strings to the origin that is associated with this cache behavior.
     * 
     */
    @Import(name="queryString", required=true)
    private Output<Boolean> queryString;

    /**
     * @return Indicates whether you want CloudFront to forward
     * query strings to the origin that is associated with this cache behavior.
     * 
     */
    public Output<Boolean> queryString() {
        return this.queryString;
    }

    /**
     * When specified, along with a value of
     * `true` for `query_string`, all query strings are forwarded, however only the
     * query string keys listed in this argument are cached. When omitted with a
     * value of `true` for `query_string`, all query string keys are cached.
     * 
     */
    @Import(name="queryStringCacheKeys")
    private @Nullable Output<List<String>> queryStringCacheKeys;

    /**
     * @return When specified, along with a value of
     * `true` for `query_string`, all query strings are forwarded, however only the
     * query string keys listed in this argument are cached. When omitted with a
     * value of `true` for `query_string`, all query string keys are cached.
     * 
     */
    public Optional<Output<List<String>>> queryStringCacheKeys() {
        return Optional.ofNullable(this.queryStringCacheKeys);
    }

    private DistributionDefaultCacheBehaviorForwardedValuesArgs() {}

    private DistributionDefaultCacheBehaviorForwardedValuesArgs(DistributionDefaultCacheBehaviorForwardedValuesArgs $) {
        this.cookies = $.cookies;
        this.headers = $.headers;
        this.queryString = $.queryString;
        this.queryStringCacheKeys = $.queryStringCacheKeys;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DistributionDefaultCacheBehaviorForwardedValuesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DistributionDefaultCacheBehaviorForwardedValuesArgs $;

        public Builder() {
            $ = new DistributionDefaultCacheBehaviorForwardedValuesArgs();
        }

        public Builder(DistributionDefaultCacheBehaviorForwardedValuesArgs defaults) {
            $ = new DistributionDefaultCacheBehaviorForwardedValuesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cookies The forwarded values cookies
         * that specifies how CloudFront handles cookies (maximum one).
         * 
         * @return builder
         * 
         */
        public Builder cookies(Output<DistributionDefaultCacheBehaviorForwardedValuesCookiesArgs> cookies) {
            $.cookies = cookies;
            return this;
        }

        /**
         * @param cookies The forwarded values cookies
         * that specifies how CloudFront handles cookies (maximum one).
         * 
         * @return builder
         * 
         */
        public Builder cookies(DistributionDefaultCacheBehaviorForwardedValuesCookiesArgs cookies) {
            return cookies(Output.of(cookies));
        }

        /**
         * @param headers Headers, if any, that you want
         * CloudFront to vary upon for this cache behavior. Specify `*` to include all
         * headers.
         * 
         * @return builder
         * 
         */
        public Builder headers(@Nullable Output<List<String>> headers) {
            $.headers = headers;
            return this;
        }

        /**
         * @param headers Headers, if any, that you want
         * CloudFront to vary upon for this cache behavior. Specify `*` to include all
         * headers.
         * 
         * @return builder
         * 
         */
        public Builder headers(List<String> headers) {
            return headers(Output.of(headers));
        }

        /**
         * @param headers Headers, if any, that you want
         * CloudFront to vary upon for this cache behavior. Specify `*` to include all
         * headers.
         * 
         * @return builder
         * 
         */
        public Builder headers(String... headers) {
            return headers(List.of(headers));
        }

        /**
         * @param queryString Indicates whether you want CloudFront to forward
         * query strings to the origin that is associated with this cache behavior.
         * 
         * @return builder
         * 
         */
        public Builder queryString(Output<Boolean> queryString) {
            $.queryString = queryString;
            return this;
        }

        /**
         * @param queryString Indicates whether you want CloudFront to forward
         * query strings to the origin that is associated with this cache behavior.
         * 
         * @return builder
         * 
         */
        public Builder queryString(Boolean queryString) {
            return queryString(Output.of(queryString));
        }

        /**
         * @param queryStringCacheKeys When specified, along with a value of
         * `true` for `query_string`, all query strings are forwarded, however only the
         * query string keys listed in this argument are cached. When omitted with a
         * value of `true` for `query_string`, all query string keys are cached.
         * 
         * @return builder
         * 
         */
        public Builder queryStringCacheKeys(@Nullable Output<List<String>> queryStringCacheKeys) {
            $.queryStringCacheKeys = queryStringCacheKeys;
            return this;
        }

        /**
         * @param queryStringCacheKeys When specified, along with a value of
         * `true` for `query_string`, all query strings are forwarded, however only the
         * query string keys listed in this argument are cached. When omitted with a
         * value of `true` for `query_string`, all query string keys are cached.
         * 
         * @return builder
         * 
         */
        public Builder queryStringCacheKeys(List<String> queryStringCacheKeys) {
            return queryStringCacheKeys(Output.of(queryStringCacheKeys));
        }

        /**
         * @param queryStringCacheKeys When specified, along with a value of
         * `true` for `query_string`, all query strings are forwarded, however only the
         * query string keys listed in this argument are cached. When omitted with a
         * value of `true` for `query_string`, all query string keys are cached.
         * 
         * @return builder
         * 
         */
        public Builder queryStringCacheKeys(String... queryStringCacheKeys) {
            return queryStringCacheKeys(List.of(queryStringCacheKeys));
        }

        public DistributionDefaultCacheBehaviorForwardedValuesArgs build() {
            $.cookies = Objects.requireNonNull($.cookies, "expected parameter 'cookies' to be non-null");
            $.queryString = Objects.requireNonNull($.queryString, "expected parameter 'queryString' to be non-null");
            return $;
        }
    }

}
