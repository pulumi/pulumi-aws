// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.notifications;

import com.pulumi.aws.Utilities;
import com.pulumi.aws.notifications.NotificationConfigurationArgs;
import com.pulumi.aws.notifications.inputs.NotificationConfigurationState;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Resource for managing an AWS User Notifications Notification Configuration.
 * 
 * ## Example Usage
 * 
 * ### Basic Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.aws.notifications.NotificationConfiguration;
 * import com.pulumi.aws.notifications.NotificationConfigurationArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new NotificationConfiguration("example", NotificationConfigurationArgs.builder()
 *             .name("example")
 *             .description("Example notification configuration")
 *             .tags(Map.ofEntries(
 *                 Map.entry("Environment", "production"),
 *                 Map.entry("Project", "example")
 *             ))
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ### With Aggregation Duration
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.aws.notifications.NotificationConfiguration;
 * import com.pulumi.aws.notifications.NotificationConfigurationArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new NotificationConfiguration("example", NotificationConfigurationArgs.builder()
 *             .name("example-aggregation")
 *             .description("Example notification configuration with aggregation")
 *             .aggregationDuration("SHORT")
 *             .tags(Map.ofEntries(
 *                 Map.entry("Environment", "production"),
 *                 Map.entry("Project", "example")
 *             ))
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Using `pulumi import`, import User Notifications Notification Configuration using the `arn`. For example:
 * 
 * ```sh
 * $ pulumi import aws:notifications/notificationConfiguration:NotificationConfiguration example arn:aws:notifications::123456789012:configuration/abcdef1234567890abcdef1234567890
 * ```
 * 
 */
@ResourceType(type="aws:notifications/notificationConfiguration:NotificationConfiguration")
public class NotificationConfiguration extends com.pulumi.resources.CustomResource {
    /**
     * Aggregation preference of the NotificationConfiguration. Valid values: `LONG` (
     * aggregate notifications for 12 hours), `SHORT` (aggregate notifications for 5 minutes), `NONE` (don&#39;t aggregate
     * notifications). Default: `NONE`.
     * 
     */
    @Export(name="aggregationDuration", refs={String.class}, tree="[0]")
    private Output<String> aggregationDuration;

    /**
     * @return Aggregation preference of the NotificationConfiguration. Valid values: `LONG` (
     * aggregate notifications for 12 hours), `SHORT` (aggregate notifications for 5 minutes), `NONE` (don&#39;t aggregate
     * notifications). Default: `NONE`.
     * 
     */
    public Output<String> aggregationDuration() {
        return this.aggregationDuration;
    }
    /**
     * Amazon Resource Name (ARN) of the NotificationConfiguration.
     * 
     */
    @Export(name="arn", refs={String.class}, tree="[0]")
    private Output<String> arn;

    /**
     * @return Amazon Resource Name (ARN) of the NotificationConfiguration.
     * 
     */
    public Output<String> arn() {
        return this.arn;
    }
    /**
     * Description of the NotificationConfiguration. Length constraints: Minimum length of 0,
     * maximum length of 256.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output<String> description;

    /**
     * @return Description of the NotificationConfiguration. Length constraints: Minimum length of 0,
     * maximum length of 256.
     * 
     */
    public Output<String> description() {
        return this.description;
    }
    /**
     * Name of the NotificationConfiguration. Supports RFC 3986&#39;s unreserved characters. Length
     * constraints: Minimum length of 1, maximum length of 64. Pattern: `[A-Za-z0-9_\-]+`.
     * 
     * The following arguments are optional:
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of the NotificationConfiguration. Supports RFC 3986&#39;s unreserved characters. Length
     * constraints: Minimum length of 1, maximum length of 64. Pattern: `[A-Za-z0-9_\-]+`.
     * 
     * The following arguments are optional:
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Map of tags to assign to the resource. A tag is a string-to-string map of key-value pairs. If
     * configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those
     * defined at the provider-level.
     * 
     */
    @Export(name="tags", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return Map of tags to assign to the resource. A tag is a string-to-string map of key-value pairs. If
     * configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those
     * defined at the provider-level.
     * 
     */
    public Output<Optional<Map<String,String>>> tags() {
        return Codegen.optional(this.tags);
    }
    /**
     * Map of tags assigned to the resource, including those inherited from the provider `default_tags`
     * configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @Export(name="tagsAll", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> tagsAll;

    /**
     * @return Map of tags assigned to the resource, including those inherited from the provider `default_tags`
     * configuration block.
     * 
     */
    public Output<Map<String,String>> tagsAll() {
        return this.tagsAll;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public NotificationConfiguration(java.lang.String name) {
        this(name, NotificationConfigurationArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public NotificationConfiguration(java.lang.String name, NotificationConfigurationArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public NotificationConfiguration(java.lang.String name, NotificationConfigurationArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("aws:notifications/notificationConfiguration:NotificationConfiguration", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private NotificationConfiguration(java.lang.String name, Output<java.lang.String> id, @Nullable NotificationConfigurationState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("aws:notifications/notificationConfiguration:NotificationConfiguration", name, state, makeResourceOptions(options, id), false);
    }

    private static NotificationConfigurationArgs makeArgs(NotificationConfigurationArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? NotificationConfigurationArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static NotificationConfiguration get(java.lang.String name, Output<java.lang.String> id, @Nullable NotificationConfigurationState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new NotificationConfiguration(name, id, state, options);
    }
}
