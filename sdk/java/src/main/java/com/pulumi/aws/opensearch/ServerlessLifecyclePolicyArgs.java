// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.opensearch;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServerlessLifecyclePolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServerlessLifecyclePolicyArgs Empty = new ServerlessLifecyclePolicyArgs();

    /**
     * Description of the policy.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the policy.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Name of the policy.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the policy.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * JSON policy document to use as the content for the new policy.
     * 
     */
    @Import(name="policy", required=true)
    private Output<String> policy;

    /**
     * @return JSON policy document to use as the content for the new policy.
     * 
     */
    public Output<String> policy() {
        return this.policy;
    }

    /**
     * Type of lifecycle policy. Must be `retention`.
     * 
     * The following arguments are optional:
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Type of lifecycle policy. Must be `retention`.
     * 
     * The following arguments are optional:
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private ServerlessLifecyclePolicyArgs() {}

    private ServerlessLifecyclePolicyArgs(ServerlessLifecyclePolicyArgs $) {
        this.description = $.description;
        this.name = $.name;
        this.policy = $.policy;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServerlessLifecyclePolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServerlessLifecyclePolicyArgs $;

        public Builder() {
            $ = new ServerlessLifecyclePolicyArgs();
        }

        public Builder(ServerlessLifecyclePolicyArgs defaults) {
            $ = new ServerlessLifecyclePolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Description of the policy.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the policy.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param name Name of the policy.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the policy.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param policy JSON policy document to use as the content for the new policy.
         * 
         * @return builder
         * 
         */
        public Builder policy(Output<String> policy) {
            $.policy = policy;
            return this;
        }

        /**
         * @param policy JSON policy document to use as the content for the new policy.
         * 
         * @return builder
         * 
         */
        public Builder policy(String policy) {
            return policy(Output.of(policy));
        }

        /**
         * @param type Type of lifecycle policy. Must be `retention`.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of lifecycle policy. Must be `retention`.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public ServerlessLifecyclePolicyArgs build() {
            $.policy = Objects.requireNonNull($.policy, "expected parameter 'policy' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
