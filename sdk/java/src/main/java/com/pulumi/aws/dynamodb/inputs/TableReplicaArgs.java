// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.dynamodb.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TableReplicaArgs extends com.pulumi.resources.ResourceArgs {

    public static final TableReplicaArgs Empty = new TableReplicaArgs();

    /**
     * ARN of the CMK that should be used for the AWS KMS encryption. This attribute should only be specified if the key is different from the default DynamoDB CMK, `alias/aws/dynamodb`.
     * 
     */
    @Import(name="kmsKeyArn")
    private @Nullable Output<String> kmsKeyArn;

    /**
     * @return ARN of the CMK that should be used for the AWS KMS encryption. This attribute should only be specified if the key is different from the default DynamoDB CMK, `alias/aws/dynamodb`.
     * 
     */
    public Optional<Output<String>> kmsKeyArn() {
        return Optional.ofNullable(this.kmsKeyArn);
    }

    /**
     * Whether to enable Point In Time Recovery for the replica. Default is `false`.
     * 
     */
    @Import(name="pointInTimeRecovery")
    private @Nullable Output<Boolean> pointInTimeRecovery;

    /**
     * @return Whether to enable Point In Time Recovery for the replica. Default is `false`.
     * 
     */
    public Optional<Output<Boolean>> pointInTimeRecovery() {
        return Optional.ofNullable(this.pointInTimeRecovery);
    }

    /**
     * Whether to propagate the main table&#39;s tags to a replica. Default is `false`. Changes to tags only move in one direction: from main to replica. In other words, tag drift on a replica will not trigger an update. Tag changes on the main table, whether from drift or configuration changes, are propagated to replicas.
     * 
     */
    @Import(name="propagateTags")
    private @Nullable Output<Boolean> propagateTags;

    /**
     * @return Whether to propagate the main table&#39;s tags to a replica. Default is `false`. Changes to tags only move in one direction: from main to replica. In other words, tag drift on a replica will not trigger an update. Tag changes on the main table, whether from drift or configuration changes, are propagated to replicas.
     * 
     */
    public Optional<Output<Boolean>> propagateTags() {
        return Optional.ofNullable(this.propagateTags);
    }

    /**
     * Region name of the replica.
     * 
     */
    @Import(name="regionName", required=true)
    private Output<String> regionName;

    /**
     * @return Region name of the replica.
     * 
     */
    public Output<String> regionName() {
        return this.regionName;
    }

    private TableReplicaArgs() {}

    private TableReplicaArgs(TableReplicaArgs $) {
        this.kmsKeyArn = $.kmsKeyArn;
        this.pointInTimeRecovery = $.pointInTimeRecovery;
        this.propagateTags = $.propagateTags;
        this.regionName = $.regionName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TableReplicaArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TableReplicaArgs $;

        public Builder() {
            $ = new TableReplicaArgs();
        }

        public Builder(TableReplicaArgs defaults) {
            $ = new TableReplicaArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param kmsKeyArn ARN of the CMK that should be used for the AWS KMS encryption. This attribute should only be specified if the key is different from the default DynamoDB CMK, `alias/aws/dynamodb`.
         * 
         * @return builder
         * 
         */
        public Builder kmsKeyArn(@Nullable Output<String> kmsKeyArn) {
            $.kmsKeyArn = kmsKeyArn;
            return this;
        }

        /**
         * @param kmsKeyArn ARN of the CMK that should be used for the AWS KMS encryption. This attribute should only be specified if the key is different from the default DynamoDB CMK, `alias/aws/dynamodb`.
         * 
         * @return builder
         * 
         */
        public Builder kmsKeyArn(String kmsKeyArn) {
            return kmsKeyArn(Output.of(kmsKeyArn));
        }

        /**
         * @param pointInTimeRecovery Whether to enable Point In Time Recovery for the replica. Default is `false`.
         * 
         * @return builder
         * 
         */
        public Builder pointInTimeRecovery(@Nullable Output<Boolean> pointInTimeRecovery) {
            $.pointInTimeRecovery = pointInTimeRecovery;
            return this;
        }

        /**
         * @param pointInTimeRecovery Whether to enable Point In Time Recovery for the replica. Default is `false`.
         * 
         * @return builder
         * 
         */
        public Builder pointInTimeRecovery(Boolean pointInTimeRecovery) {
            return pointInTimeRecovery(Output.of(pointInTimeRecovery));
        }

        /**
         * @param propagateTags Whether to propagate the main table&#39;s tags to a replica. Default is `false`. Changes to tags only move in one direction: from main to replica. In other words, tag drift on a replica will not trigger an update. Tag changes on the main table, whether from drift or configuration changes, are propagated to replicas.
         * 
         * @return builder
         * 
         */
        public Builder propagateTags(@Nullable Output<Boolean> propagateTags) {
            $.propagateTags = propagateTags;
            return this;
        }

        /**
         * @param propagateTags Whether to propagate the main table&#39;s tags to a replica. Default is `false`. Changes to tags only move in one direction: from main to replica. In other words, tag drift on a replica will not trigger an update. Tag changes on the main table, whether from drift or configuration changes, are propagated to replicas.
         * 
         * @return builder
         * 
         */
        public Builder propagateTags(Boolean propagateTags) {
            return propagateTags(Output.of(propagateTags));
        }

        /**
         * @param regionName Region name of the replica.
         * 
         * @return builder
         * 
         */
        public Builder regionName(Output<String> regionName) {
            $.regionName = regionName;
            return this;
        }

        /**
         * @param regionName Region name of the replica.
         * 
         * @return builder
         * 
         */
        public Builder regionName(String regionName) {
            return regionName(Output.of(regionName));
        }

        public TableReplicaArgs build() {
            $.regionName = Objects.requireNonNull($.regionName, "expected parameter 'regionName' to be non-null");
            return $;
        }
    }

}
