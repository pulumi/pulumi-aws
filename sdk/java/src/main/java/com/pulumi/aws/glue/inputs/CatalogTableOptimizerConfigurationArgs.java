// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.glue.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;


public final class CatalogTableOptimizerConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final CatalogTableOptimizerConfigurationArgs Empty = new CatalogTableOptimizerConfigurationArgs();

    /**
     * Indicates whether the table optimizer is enabled.
     * 
     */
    @Import(name="enabled", required=true)
    private Output<Boolean> enabled;

    /**
     * @return Indicates whether the table optimizer is enabled.
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }

    /**
     * The ARN of the IAM role to use for the table optimizer.
     * 
     */
    @Import(name="roleArn", required=true)
    private Output<String> roleArn;

    /**
     * @return The ARN of the IAM role to use for the table optimizer.
     * 
     */
    public Output<String> roleArn() {
        return this.roleArn;
    }

    private CatalogTableOptimizerConfigurationArgs() {}

    private CatalogTableOptimizerConfigurationArgs(CatalogTableOptimizerConfigurationArgs $) {
        this.enabled = $.enabled;
        this.roleArn = $.roleArn;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CatalogTableOptimizerConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CatalogTableOptimizerConfigurationArgs $;

        public Builder() {
            $ = new CatalogTableOptimizerConfigurationArgs();
        }

        public Builder(CatalogTableOptimizerConfigurationArgs defaults) {
            $ = new CatalogTableOptimizerConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param enabled Indicates whether the table optimizer is enabled.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Indicates whether the table optimizer is enabled.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param roleArn The ARN of the IAM role to use for the table optimizer.
         * 
         * @return builder
         * 
         */
        public Builder roleArn(Output<String> roleArn) {
            $.roleArn = roleArn;
            return this;
        }

        /**
         * @param roleArn The ARN of the IAM role to use for the table optimizer.
         * 
         * @return builder
         * 
         */
        public Builder roleArn(String roleArn) {
            return roleArn(Output.of(roleArn));
        }

        public CatalogTableOptimizerConfigurationArgs build() {
            if ($.enabled == null) {
                throw new MissingRequiredPropertyException("CatalogTableOptimizerConfigurationArgs", "enabled");
            }
            if ($.roleArn == null) {
                throw new MissingRequiredPropertyException("CatalogTableOptimizerConfigurationArgs", "roleArn");
            }
            return $;
        }
    }

}
