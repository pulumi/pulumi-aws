// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.opensearch;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PackageAssociationArgs extends com.pulumi.resources.ResourceArgs {

    public static final PackageAssociationArgs Empty = new PackageAssociationArgs();

    /**
     * Name of the domain to associate the package with.
     * 
     */
    @Import(name="domainName", required=true)
    private Output<String> domainName;

    /**
     * @return Name of the domain to associate the package with.
     * 
     */
    public Output<String> domainName() {
        return this.domainName;
    }

    /**
     * Internal ID of the package to associate with a domain.
     * 
     */
    @Import(name="packageId", required=true)
    private Output<String> packageId;

    /**
     * @return Internal ID of the package to associate with a domain.
     * 
     */
    public Output<String> packageId() {
        return this.packageId;
    }

    /**
     * The AWS Region to use for API operations. Overrides the Region set in the provider configuration.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return The AWS Region to use for API operations. Overrides the Region set in the provider configuration.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    private PackageAssociationArgs() {}

    private PackageAssociationArgs(PackageAssociationArgs $) {
        this.domainName = $.domainName;
        this.packageId = $.packageId;
        this.region = $.region;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PackageAssociationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PackageAssociationArgs $;

        public Builder() {
            $ = new PackageAssociationArgs();
        }

        public Builder(PackageAssociationArgs defaults) {
            $ = new PackageAssociationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param domainName Name of the domain to associate the package with.
         * 
         * @return builder
         * 
         */
        public Builder domainName(Output<String> domainName) {
            $.domainName = domainName;
            return this;
        }

        /**
         * @param domainName Name of the domain to associate the package with.
         * 
         * @return builder
         * 
         */
        public Builder domainName(String domainName) {
            return domainName(Output.of(domainName));
        }

        /**
         * @param packageId Internal ID of the package to associate with a domain.
         * 
         * @return builder
         * 
         */
        public Builder packageId(Output<String> packageId) {
            $.packageId = packageId;
            return this;
        }

        /**
         * @param packageId Internal ID of the package to associate with a domain.
         * 
         * @return builder
         * 
         */
        public Builder packageId(String packageId) {
            return packageId(Output.of(packageId));
        }

        /**
         * @param region The AWS Region to use for API operations. Overrides the Region set in the provider configuration.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The AWS Region to use for API operations. Overrides the Region set in the provider configuration.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        public PackageAssociationArgs build() {
            if ($.domainName == null) {
                throw new MissingRequiredPropertyException("PackageAssociationArgs", "domainName");
            }
            if ($.packageId == null) {
                throw new MissingRequiredPropertyException("PackageAssociationArgs", "packageId");
            }
            return $;
        }
    }

}
