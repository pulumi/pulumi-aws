// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ecs.outputs;

import com.pulumi.aws.ecs.outputs.GetClusterServiceConnectDefault;
import com.pulumi.aws.ecs.outputs.GetClusterSetting;
import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetClusterResult {
    /**
     * @return ARN of the ECS Cluster
     * 
     */
    private @Nullable String arn;
    private String clusterName;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private @Nullable String id;
    /**
     * @return Number of pending tasks for the ECS Cluster
     * 
     */
    private @Nullable Integer pendingTasksCount;
    /**
     * @return The number of registered container instances for the ECS Cluster
     * 
     */
    private @Nullable Integer registeredContainerInstancesCount;
    /**
     * @return Number of running tasks for the ECS Cluster
     * 
     */
    private @Nullable Integer runningTasksCount;
    /**
     * @return The default Service Connect namespace
     * 
     */
    private @Nullable List<GetClusterServiceConnectDefault> serviceConnectDefaults;
    /**
     * @return Settings associated with the ECS Cluster
     * 
     */
    private @Nullable List<GetClusterSetting> settings;
    /**
     * @return Status of the ECS Cluster
     * 
     */
    private @Nullable String status;
    /**
     * @return Key-value map of resource tags
     * 
     */
    private @Nullable Map<String,String> tags;

    private GetClusterResult() {}
    /**
     * @return ARN of the ECS Cluster
     * 
     */
    public Optional<String> arn() {
        return Optional.ofNullable(this.arn);
    }
    public String clusterName() {
        return this.clusterName;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Number of pending tasks for the ECS Cluster
     * 
     */
    public Optional<Integer> pendingTasksCount() {
        return Optional.ofNullable(this.pendingTasksCount);
    }
    /**
     * @return The number of registered container instances for the ECS Cluster
     * 
     */
    public Optional<Integer> registeredContainerInstancesCount() {
        return Optional.ofNullable(this.registeredContainerInstancesCount);
    }
    /**
     * @return Number of running tasks for the ECS Cluster
     * 
     */
    public Optional<Integer> runningTasksCount() {
        return Optional.ofNullable(this.runningTasksCount);
    }
    /**
     * @return The default Service Connect namespace
     * 
     */
    public List<GetClusterServiceConnectDefault> serviceConnectDefaults() {
        return this.serviceConnectDefaults == null ? List.of() : this.serviceConnectDefaults;
    }
    /**
     * @return Settings associated with the ECS Cluster
     * 
     */
    public List<GetClusterSetting> settings() {
        return this.settings == null ? List.of() : this.settings;
    }
    /**
     * @return Status of the ECS Cluster
     * 
     */
    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }
    /**
     * @return Key-value map of resource tags
     * 
     */
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetClusterResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String arn;
        private String clusterName;
        private @Nullable String id;
        private @Nullable Integer pendingTasksCount;
        private @Nullable Integer registeredContainerInstancesCount;
        private @Nullable Integer runningTasksCount;
        private @Nullable List<GetClusterServiceConnectDefault> serviceConnectDefaults;
        private @Nullable List<GetClusterSetting> settings;
        private @Nullable String status;
        private @Nullable Map<String,String> tags;
        public Builder() {}
        public Builder(GetClusterResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.clusterName = defaults.clusterName;
    	      this.id = defaults.id;
    	      this.pendingTasksCount = defaults.pendingTasksCount;
    	      this.registeredContainerInstancesCount = defaults.registeredContainerInstancesCount;
    	      this.runningTasksCount = defaults.runningTasksCount;
    	      this.serviceConnectDefaults = defaults.serviceConnectDefaults;
    	      this.settings = defaults.settings;
    	      this.status = defaults.status;
    	      this.tags = defaults.tags;
        }

        @CustomType.Setter
        public Builder arn(@Nullable String arn) {
            this.arn = arn;
            return this;
        }
        @CustomType.Setter
        public Builder clusterName(String clusterName) {
            this.clusterName = Objects.requireNonNull(clusterName);
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder pendingTasksCount(@Nullable Integer pendingTasksCount) {
            this.pendingTasksCount = pendingTasksCount;
            return this;
        }
        @CustomType.Setter
        public Builder registeredContainerInstancesCount(@Nullable Integer registeredContainerInstancesCount) {
            this.registeredContainerInstancesCount = registeredContainerInstancesCount;
            return this;
        }
        @CustomType.Setter
        public Builder runningTasksCount(@Nullable Integer runningTasksCount) {
            this.runningTasksCount = runningTasksCount;
            return this;
        }
        @CustomType.Setter
        public Builder serviceConnectDefaults(@Nullable List<GetClusterServiceConnectDefault> serviceConnectDefaults) {
            this.serviceConnectDefaults = serviceConnectDefaults;
            return this;
        }
        public Builder serviceConnectDefaults(GetClusterServiceConnectDefault... serviceConnectDefaults) {
            return serviceConnectDefaults(List.of(serviceConnectDefaults));
        }
        @CustomType.Setter
        public Builder settings(@Nullable List<GetClusterSetting> settings) {
            this.settings = settings;
            return this;
        }
        public Builder settings(GetClusterSetting... settings) {
            return settings(List.of(settings));
        }
        @CustomType.Setter
        public Builder status(@Nullable String status) {
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        public GetClusterResult build() {
            final var o = new GetClusterResult();
            o.arn = arn;
            o.clusterName = clusterName;
            o.id = id;
            o.pendingTasksCount = pendingTasksCount;
            o.registeredContainerInstancesCount = registeredContainerInstancesCount;
            o.runningTasksCount = runningTasksCount;
            o.serviceConnectDefaults = serviceConnectDefaults;
            o.settings = settings;
            o.status = status;
            o.tags = tags;
            return o;
        }
    }
}
