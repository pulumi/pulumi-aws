// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.s3.outputs;

import com.pulumi.aws.s3.outputs.GetAccessPointPublicAccessBlockConfiguration;
import com.pulumi.aws.s3.outputs.GetAccessPointVpcConfiguration;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetAccessPointResult {
    private String accountId;
    /**
     * @return Access point alias.
     * 
     */
    private String alias;
    /**
     * @return Access point ARN.
     * 
     */
    private String arn;
    /**
     * @return Name of the bucket associated with the access point.
     * 
     */
    private String bucket;
    /**
     * @return AWS account ID associated with the S3 bucket associated with the access point.
     * 
     */
    private String bucketAccountId;
    /**
     * @return Unique identifier for the data source of the access point.
     * 
     */
    private String dataSourceId;
    /**
     * @return Type of the data source that the access point is attached to.
     * 
     */
    private String dataSourceType;
    /**
     * @return VPC endpoint for the access point.
     * 
     */
    private Map<String,String> endpoints;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String name;
    /**
     * @return Indicates whether the access point allows access from the public Internet.
     * 
     */
    private String networkOrigin;
    /**
     * @return `PublicAccessBlock` configuration for the access point.
     * 
     */
    private List<GetAccessPointPublicAccessBlockConfiguration> publicAccessBlockConfigurations;
    private String region;
    /**
     * @return Tags assigned to the access point.
     * 
     */
    private Map<String,String> tags;
    /**
     * @return VPC configuration for the access point.
     * 
     */
    private List<GetAccessPointVpcConfiguration> vpcConfigurations;

    private GetAccessPointResult() {}
    public String accountId() {
        return this.accountId;
    }
    /**
     * @return Access point alias.
     * 
     */
    public String alias() {
        return this.alias;
    }
    /**
     * @return Access point ARN.
     * 
     */
    public String arn() {
        return this.arn;
    }
    /**
     * @return Name of the bucket associated with the access point.
     * 
     */
    public String bucket() {
        return this.bucket;
    }
    /**
     * @return AWS account ID associated with the S3 bucket associated with the access point.
     * 
     */
    public String bucketAccountId() {
        return this.bucketAccountId;
    }
    /**
     * @return Unique identifier for the data source of the access point.
     * 
     */
    public String dataSourceId() {
        return this.dataSourceId;
    }
    /**
     * @return Type of the data source that the access point is attached to.
     * 
     */
    public String dataSourceType() {
        return this.dataSourceType;
    }
    /**
     * @return VPC endpoint for the access point.
     * 
     */
    public Map<String,String> endpoints() {
        return this.endpoints;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String name() {
        return this.name;
    }
    /**
     * @return Indicates whether the access point allows access from the public Internet.
     * 
     */
    public String networkOrigin() {
        return this.networkOrigin;
    }
    /**
     * @return `PublicAccessBlock` configuration for the access point.
     * 
     */
    public List<GetAccessPointPublicAccessBlockConfiguration> publicAccessBlockConfigurations() {
        return this.publicAccessBlockConfigurations;
    }
    public String region() {
        return this.region;
    }
    /**
     * @return Tags assigned to the access point.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }
    /**
     * @return VPC configuration for the access point.
     * 
     */
    public List<GetAccessPointVpcConfiguration> vpcConfigurations() {
        return this.vpcConfigurations;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAccessPointResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accountId;
        private String alias;
        private String arn;
        private String bucket;
        private String bucketAccountId;
        private String dataSourceId;
        private String dataSourceType;
        private Map<String,String> endpoints;
        private String id;
        private String name;
        private String networkOrigin;
        private List<GetAccessPointPublicAccessBlockConfiguration> publicAccessBlockConfigurations;
        private String region;
        private Map<String,String> tags;
        private List<GetAccessPointVpcConfiguration> vpcConfigurations;
        public Builder() {}
        public Builder(GetAccessPointResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountId = defaults.accountId;
    	      this.alias = defaults.alias;
    	      this.arn = defaults.arn;
    	      this.bucket = defaults.bucket;
    	      this.bucketAccountId = defaults.bucketAccountId;
    	      this.dataSourceId = defaults.dataSourceId;
    	      this.dataSourceType = defaults.dataSourceType;
    	      this.endpoints = defaults.endpoints;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.networkOrigin = defaults.networkOrigin;
    	      this.publicAccessBlockConfigurations = defaults.publicAccessBlockConfigurations;
    	      this.region = defaults.region;
    	      this.tags = defaults.tags;
    	      this.vpcConfigurations = defaults.vpcConfigurations;
        }

        @CustomType.Setter
        public Builder accountId(String accountId) {
            if (accountId == null) {
              throw new MissingRequiredPropertyException("GetAccessPointResult", "accountId");
            }
            this.accountId = accountId;
            return this;
        }
        @CustomType.Setter
        public Builder alias(String alias) {
            if (alias == null) {
              throw new MissingRequiredPropertyException("GetAccessPointResult", "alias");
            }
            this.alias = alias;
            return this;
        }
        @CustomType.Setter
        public Builder arn(String arn) {
            if (arn == null) {
              throw new MissingRequiredPropertyException("GetAccessPointResult", "arn");
            }
            this.arn = arn;
            return this;
        }
        @CustomType.Setter
        public Builder bucket(String bucket) {
            if (bucket == null) {
              throw new MissingRequiredPropertyException("GetAccessPointResult", "bucket");
            }
            this.bucket = bucket;
            return this;
        }
        @CustomType.Setter
        public Builder bucketAccountId(String bucketAccountId) {
            if (bucketAccountId == null) {
              throw new MissingRequiredPropertyException("GetAccessPointResult", "bucketAccountId");
            }
            this.bucketAccountId = bucketAccountId;
            return this;
        }
        @CustomType.Setter
        public Builder dataSourceId(String dataSourceId) {
            if (dataSourceId == null) {
              throw new MissingRequiredPropertyException("GetAccessPointResult", "dataSourceId");
            }
            this.dataSourceId = dataSourceId;
            return this;
        }
        @CustomType.Setter
        public Builder dataSourceType(String dataSourceType) {
            if (dataSourceType == null) {
              throw new MissingRequiredPropertyException("GetAccessPointResult", "dataSourceType");
            }
            this.dataSourceType = dataSourceType;
            return this;
        }
        @CustomType.Setter
        public Builder endpoints(Map<String,String> endpoints) {
            if (endpoints == null) {
              throw new MissingRequiredPropertyException("GetAccessPointResult", "endpoints");
            }
            this.endpoints = endpoints;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetAccessPointResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetAccessPointResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder networkOrigin(String networkOrigin) {
            if (networkOrigin == null) {
              throw new MissingRequiredPropertyException("GetAccessPointResult", "networkOrigin");
            }
            this.networkOrigin = networkOrigin;
            return this;
        }
        @CustomType.Setter
        public Builder publicAccessBlockConfigurations(List<GetAccessPointPublicAccessBlockConfiguration> publicAccessBlockConfigurations) {
            if (publicAccessBlockConfigurations == null) {
              throw new MissingRequiredPropertyException("GetAccessPointResult", "publicAccessBlockConfigurations");
            }
            this.publicAccessBlockConfigurations = publicAccessBlockConfigurations;
            return this;
        }
        public Builder publicAccessBlockConfigurations(GetAccessPointPublicAccessBlockConfiguration... publicAccessBlockConfigurations) {
            return publicAccessBlockConfigurations(List.of(publicAccessBlockConfigurations));
        }
        @CustomType.Setter
        public Builder region(String region) {
            if (region == null) {
              throw new MissingRequiredPropertyException("GetAccessPointResult", "region");
            }
            this.region = region;
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetAccessPointResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder vpcConfigurations(List<GetAccessPointVpcConfiguration> vpcConfigurations) {
            if (vpcConfigurations == null) {
              throw new MissingRequiredPropertyException("GetAccessPointResult", "vpcConfigurations");
            }
            this.vpcConfigurations = vpcConfigurations;
            return this;
        }
        public Builder vpcConfigurations(GetAccessPointVpcConfiguration... vpcConfigurations) {
            return vpcConfigurations(List.of(vpcConfigurations));
        }
        public GetAccessPointResult build() {
            final var _resultValue = new GetAccessPointResult();
            _resultValue.accountId = accountId;
            _resultValue.alias = alias;
            _resultValue.arn = arn;
            _resultValue.bucket = bucket;
            _resultValue.bucketAccountId = bucketAccountId;
            _resultValue.dataSourceId = dataSourceId;
            _resultValue.dataSourceType = dataSourceType;
            _resultValue.endpoints = endpoints;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.networkOrigin = networkOrigin;
            _resultValue.publicAccessBlockConfigurations = publicAccessBlockConfigurations;
            _resultValue.region = region;
            _resultValue.tags = tags;
            _resultValue.vpcConfigurations = vpcConfigurations;
            return _resultValue;
        }
    }
}
