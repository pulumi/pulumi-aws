// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.paymentcryptography.inputs;

import com.pulumi.aws.paymentcryptography.inputs.KeyKeyAttributesKeyModesOfUseArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class KeyKeyAttributesArgs extends com.pulumi.resources.ResourceArgs {

    public static final KeyKeyAttributesArgs Empty = new KeyKeyAttributesArgs();

    /**
     * Key algorithm to be use during creation of an AWS Payment Cryptography key.
     * 
     */
    @Import(name="keyAlgorithm", required=true)
    private Output<String> keyAlgorithm;

    /**
     * @return Key algorithm to be use during creation of an AWS Payment Cryptography key.
     * 
     */
    public Output<String> keyAlgorithm() {
        return this.keyAlgorithm;
    }

    /**
     * Type of AWS Payment Cryptography key to create.
     * 
     */
    @Import(name="keyClass", required=true)
    private Output<String> keyClass;

    /**
     * @return Type of AWS Payment Cryptography key to create.
     * 
     */
    public Output<String> keyClass() {
        return this.keyClass;
    }

    /**
     * List of cryptographic operations that you can perform using the key.
     * 
     */
    @Import(name="keyModesOfUse")
    private @Nullable Output<KeyKeyAttributesKeyModesOfUseArgs> keyModesOfUse;

    /**
     * @return List of cryptographic operations that you can perform using the key.
     * 
     */
    public Optional<Output<KeyKeyAttributesKeyModesOfUseArgs>> keyModesOfUse() {
        return Optional.ofNullable(this.keyModesOfUse);
    }

    /**
     * Cryptographic usage of an AWS Payment Cryptography key as defined in section A.5.2 of the TR-31 spec.
     * 
     */
    @Import(name="keyUsage", required=true)
    private Output<String> keyUsage;

    /**
     * @return Cryptographic usage of an AWS Payment Cryptography key as defined in section A.5.2 of the TR-31 spec.
     * 
     */
    public Output<String> keyUsage() {
        return this.keyUsage;
    }

    private KeyKeyAttributesArgs() {}

    private KeyKeyAttributesArgs(KeyKeyAttributesArgs $) {
        this.keyAlgorithm = $.keyAlgorithm;
        this.keyClass = $.keyClass;
        this.keyModesOfUse = $.keyModesOfUse;
        this.keyUsage = $.keyUsage;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(KeyKeyAttributesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private KeyKeyAttributesArgs $;

        public Builder() {
            $ = new KeyKeyAttributesArgs();
        }

        public Builder(KeyKeyAttributesArgs defaults) {
            $ = new KeyKeyAttributesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param keyAlgorithm Key algorithm to be use during creation of an AWS Payment Cryptography key.
         * 
         * @return builder
         * 
         */
        public Builder keyAlgorithm(Output<String> keyAlgorithm) {
            $.keyAlgorithm = keyAlgorithm;
            return this;
        }

        /**
         * @param keyAlgorithm Key algorithm to be use during creation of an AWS Payment Cryptography key.
         * 
         * @return builder
         * 
         */
        public Builder keyAlgorithm(String keyAlgorithm) {
            return keyAlgorithm(Output.of(keyAlgorithm));
        }

        /**
         * @param keyClass Type of AWS Payment Cryptography key to create.
         * 
         * @return builder
         * 
         */
        public Builder keyClass(Output<String> keyClass) {
            $.keyClass = keyClass;
            return this;
        }

        /**
         * @param keyClass Type of AWS Payment Cryptography key to create.
         * 
         * @return builder
         * 
         */
        public Builder keyClass(String keyClass) {
            return keyClass(Output.of(keyClass));
        }

        /**
         * @param keyModesOfUse List of cryptographic operations that you can perform using the key.
         * 
         * @return builder
         * 
         */
        public Builder keyModesOfUse(@Nullable Output<KeyKeyAttributesKeyModesOfUseArgs> keyModesOfUse) {
            $.keyModesOfUse = keyModesOfUse;
            return this;
        }

        /**
         * @param keyModesOfUse List of cryptographic operations that you can perform using the key.
         * 
         * @return builder
         * 
         */
        public Builder keyModesOfUse(KeyKeyAttributesKeyModesOfUseArgs keyModesOfUse) {
            return keyModesOfUse(Output.of(keyModesOfUse));
        }

        /**
         * @param keyUsage Cryptographic usage of an AWS Payment Cryptography key as defined in section A.5.2 of the TR-31 spec.
         * 
         * @return builder
         * 
         */
        public Builder keyUsage(Output<String> keyUsage) {
            $.keyUsage = keyUsage;
            return this;
        }

        /**
         * @param keyUsage Cryptographic usage of an AWS Payment Cryptography key as defined in section A.5.2 of the TR-31 spec.
         * 
         * @return builder
         * 
         */
        public Builder keyUsage(String keyUsage) {
            return keyUsage(Output.of(keyUsage));
        }

        public KeyKeyAttributesArgs build() {
            if ($.keyAlgorithm == null) {
                throw new MissingRequiredPropertyException("KeyKeyAttributesArgs", "keyAlgorithm");
            }
            if ($.keyClass == null) {
                throw new MissingRequiredPropertyException("KeyKeyAttributesArgs", "keyClass");
            }
            if ($.keyUsage == null) {
                throw new MissingRequiredPropertyException("KeyKeyAttributesArgs", "keyUsage");
            }
            return $;
        }
    }

}
