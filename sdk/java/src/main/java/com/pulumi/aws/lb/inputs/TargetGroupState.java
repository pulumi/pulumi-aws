// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.lb.inputs;

import com.pulumi.aws.lb.inputs.TargetGroupHealthCheckArgs;
import com.pulumi.aws.lb.inputs.TargetGroupStickinessArgs;
import com.pulumi.aws.lb.inputs.TargetGroupTargetFailoverArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TargetGroupState extends com.pulumi.resources.ResourceArgs {

    public static final TargetGroupState Empty = new TargetGroupState();

    @Import(name="arn")
    private @Nullable Output<String> arn;

    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    @Import(name="arnSuffix")
    private @Nullable Output<String> arnSuffix;

    public Optional<Output<String>> arnSuffix() {
        return Optional.ofNullable(this.arnSuffix);
    }

    @Import(name="connectionTermination")
    private @Nullable Output<Boolean> connectionTermination;

    public Optional<Output<Boolean>> connectionTermination() {
        return Optional.ofNullable(this.connectionTermination);
    }

    @Import(name="deregistrationDelay")
    private @Nullable Output<Integer> deregistrationDelay;

    public Optional<Output<Integer>> deregistrationDelay() {
        return Optional.ofNullable(this.deregistrationDelay);
    }

    @Import(name="healthCheck")
    private @Nullable Output<TargetGroupHealthCheckArgs> healthCheck;

    public Optional<Output<TargetGroupHealthCheckArgs>> healthCheck() {
        return Optional.ofNullable(this.healthCheck);
    }

    @Import(name="ipAddressType")
    private @Nullable Output<String> ipAddressType;

    public Optional<Output<String>> ipAddressType() {
        return Optional.ofNullable(this.ipAddressType);
    }

    @Import(name="lambdaMultiValueHeadersEnabled")
    private @Nullable Output<Boolean> lambdaMultiValueHeadersEnabled;

    public Optional<Output<Boolean>> lambdaMultiValueHeadersEnabled() {
        return Optional.ofNullable(this.lambdaMultiValueHeadersEnabled);
    }

    @Import(name="loadBalancingAlgorithmType")
    private @Nullable Output<String> loadBalancingAlgorithmType;

    public Optional<Output<String>> loadBalancingAlgorithmType() {
        return Optional.ofNullable(this.loadBalancingAlgorithmType);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="namePrefix")
    private @Nullable Output<String> namePrefix;

    public Optional<Output<String>> namePrefix() {
        return Optional.ofNullable(this.namePrefix);
    }

    @Import(name="port")
    private @Nullable Output<Integer> port;

    public Optional<Output<Integer>> port() {
        return Optional.ofNullable(this.port);
    }

    @Import(name="preserveClientIp")
    private @Nullable Output<String> preserveClientIp;

    public Optional<Output<String>> preserveClientIp() {
        return Optional.ofNullable(this.preserveClientIp);
    }

    @Import(name="protocol")
    private @Nullable Output<String> protocol;

    public Optional<Output<String>> protocol() {
        return Optional.ofNullable(this.protocol);
    }

    @Import(name="protocolVersion")
    private @Nullable Output<String> protocolVersion;

    public Optional<Output<String>> protocolVersion() {
        return Optional.ofNullable(this.protocolVersion);
    }

    @Import(name="proxyProtocolV2")
    private @Nullable Output<Boolean> proxyProtocolV2;

    public Optional<Output<Boolean>> proxyProtocolV2() {
        return Optional.ofNullable(this.proxyProtocolV2);
    }

    @Import(name="slowStart")
    private @Nullable Output<Integer> slowStart;

    public Optional<Output<Integer>> slowStart() {
        return Optional.ofNullable(this.slowStart);
    }

    @Import(name="stickiness")
    private @Nullable Output<TargetGroupStickinessArgs> stickiness;

    public Optional<Output<TargetGroupStickinessArgs>> stickiness() {
        return Optional.ofNullable(this.stickiness);
    }

    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    @Import(name="targetFailovers")
    private @Nullable Output<List<TargetGroupTargetFailoverArgs>> targetFailovers;

    public Optional<Output<List<TargetGroupTargetFailoverArgs>>> targetFailovers() {
        return Optional.ofNullable(this.targetFailovers);
    }

    @Import(name="targetType")
    private @Nullable Output<String> targetType;

    public Optional<Output<String>> targetType() {
        return Optional.ofNullable(this.targetType);
    }

    @Import(name="vpcId")
    private @Nullable Output<String> vpcId;

    public Optional<Output<String>> vpcId() {
        return Optional.ofNullable(this.vpcId);
    }

    private TargetGroupState() {}

    private TargetGroupState(TargetGroupState $) {
        this.arn = $.arn;
        this.arnSuffix = $.arnSuffix;
        this.connectionTermination = $.connectionTermination;
        this.deregistrationDelay = $.deregistrationDelay;
        this.healthCheck = $.healthCheck;
        this.ipAddressType = $.ipAddressType;
        this.lambdaMultiValueHeadersEnabled = $.lambdaMultiValueHeadersEnabled;
        this.loadBalancingAlgorithmType = $.loadBalancingAlgorithmType;
        this.name = $.name;
        this.namePrefix = $.namePrefix;
        this.port = $.port;
        this.preserveClientIp = $.preserveClientIp;
        this.protocol = $.protocol;
        this.protocolVersion = $.protocolVersion;
        this.proxyProtocolV2 = $.proxyProtocolV2;
        this.slowStart = $.slowStart;
        this.stickiness = $.stickiness;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
        this.targetFailovers = $.targetFailovers;
        this.targetType = $.targetType;
        this.vpcId = $.vpcId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TargetGroupState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TargetGroupState $;

        public Builder() {
            $ = new TargetGroupState();
        }

        public Builder(TargetGroupState defaults) {
            $ = new TargetGroupState(Objects.requireNonNull(defaults));
        }

        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        public Builder arnSuffix(@Nullable Output<String> arnSuffix) {
            $.arnSuffix = arnSuffix;
            return this;
        }

        public Builder arnSuffix(String arnSuffix) {
            return arnSuffix(Output.of(arnSuffix));
        }

        public Builder connectionTermination(@Nullable Output<Boolean> connectionTermination) {
            $.connectionTermination = connectionTermination;
            return this;
        }

        public Builder connectionTermination(Boolean connectionTermination) {
            return connectionTermination(Output.of(connectionTermination));
        }

        public Builder deregistrationDelay(@Nullable Output<Integer> deregistrationDelay) {
            $.deregistrationDelay = deregistrationDelay;
            return this;
        }

        public Builder deregistrationDelay(Integer deregistrationDelay) {
            return deregistrationDelay(Output.of(deregistrationDelay));
        }

        public Builder healthCheck(@Nullable Output<TargetGroupHealthCheckArgs> healthCheck) {
            $.healthCheck = healthCheck;
            return this;
        }

        public Builder healthCheck(TargetGroupHealthCheckArgs healthCheck) {
            return healthCheck(Output.of(healthCheck));
        }

        public Builder ipAddressType(@Nullable Output<String> ipAddressType) {
            $.ipAddressType = ipAddressType;
            return this;
        }

        public Builder ipAddressType(String ipAddressType) {
            return ipAddressType(Output.of(ipAddressType));
        }

        public Builder lambdaMultiValueHeadersEnabled(@Nullable Output<Boolean> lambdaMultiValueHeadersEnabled) {
            $.lambdaMultiValueHeadersEnabled = lambdaMultiValueHeadersEnabled;
            return this;
        }

        public Builder lambdaMultiValueHeadersEnabled(Boolean lambdaMultiValueHeadersEnabled) {
            return lambdaMultiValueHeadersEnabled(Output.of(lambdaMultiValueHeadersEnabled));
        }

        public Builder loadBalancingAlgorithmType(@Nullable Output<String> loadBalancingAlgorithmType) {
            $.loadBalancingAlgorithmType = loadBalancingAlgorithmType;
            return this;
        }

        public Builder loadBalancingAlgorithmType(String loadBalancingAlgorithmType) {
            return loadBalancingAlgorithmType(Output.of(loadBalancingAlgorithmType));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder namePrefix(@Nullable Output<String> namePrefix) {
            $.namePrefix = namePrefix;
            return this;
        }

        public Builder namePrefix(String namePrefix) {
            return namePrefix(Output.of(namePrefix));
        }

        public Builder port(@Nullable Output<Integer> port) {
            $.port = port;
            return this;
        }

        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        public Builder preserveClientIp(@Nullable Output<String> preserveClientIp) {
            $.preserveClientIp = preserveClientIp;
            return this;
        }

        public Builder preserveClientIp(String preserveClientIp) {
            return preserveClientIp(Output.of(preserveClientIp));
        }

        public Builder protocol(@Nullable Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        public Builder protocolVersion(@Nullable Output<String> protocolVersion) {
            $.protocolVersion = protocolVersion;
            return this;
        }

        public Builder protocolVersion(String protocolVersion) {
            return protocolVersion(Output.of(protocolVersion));
        }

        public Builder proxyProtocolV2(@Nullable Output<Boolean> proxyProtocolV2) {
            $.proxyProtocolV2 = proxyProtocolV2;
            return this;
        }

        public Builder proxyProtocolV2(Boolean proxyProtocolV2) {
            return proxyProtocolV2(Output.of(proxyProtocolV2));
        }

        public Builder slowStart(@Nullable Output<Integer> slowStart) {
            $.slowStart = slowStart;
            return this;
        }

        public Builder slowStart(Integer slowStart) {
            return slowStart(Output.of(slowStart));
        }

        public Builder stickiness(@Nullable Output<TargetGroupStickinessArgs> stickiness) {
            $.stickiness = stickiness;
            return this;
        }

        public Builder stickiness(TargetGroupStickinessArgs stickiness) {
            return stickiness(Output.of(stickiness));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        public Builder targetFailovers(@Nullable Output<List<TargetGroupTargetFailoverArgs>> targetFailovers) {
            $.targetFailovers = targetFailovers;
            return this;
        }

        public Builder targetFailovers(List<TargetGroupTargetFailoverArgs> targetFailovers) {
            return targetFailovers(Output.of(targetFailovers));
        }

        public Builder targetFailovers(TargetGroupTargetFailoverArgs... targetFailovers) {
            return targetFailovers(List.of(targetFailovers));
        }

        public Builder targetType(@Nullable Output<String> targetType) {
            $.targetType = targetType;
            return this;
        }

        public Builder targetType(String targetType) {
            return targetType(Output.of(targetType));
        }

        public Builder vpcId(@Nullable Output<String> vpcId) {
            $.vpcId = vpcId;
            return this;
        }

        public Builder vpcId(String vpcId) {
            return vpcId(Output.of(vpcId));
        }

        public TargetGroupState build() {
            return $;
        }
    }

}
