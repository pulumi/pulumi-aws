// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ssoadmin;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class ApplicationAssignmentArgs extends com.pulumi.resources.ResourceArgs {

    public static final ApplicationAssignmentArgs Empty = new ApplicationAssignmentArgs();

    /**
     * ARN of the application.
     * 
     */
    @Import(name="applicationArn", required=true)
    private Output<String> applicationArn;

    /**
     * @return ARN of the application.
     * 
     */
    public Output<String> applicationArn() {
        return this.applicationArn;
    }

    /**
     * An identifier for an object in IAM Identity Center, such as a user or group.
     * 
     */
    @Import(name="principalId", required=true)
    private Output<String> principalId;

    /**
     * @return An identifier for an object in IAM Identity Center, such as a user or group.
     * 
     */
    public Output<String> principalId() {
        return this.principalId;
    }

    /**
     * Entity type for which the assignment will be created. Valid values are `USER` or `GROUP`.
     * 
     */
    @Import(name="principalType", required=true)
    private Output<String> principalType;

    /**
     * @return Entity type for which the assignment will be created. Valid values are `USER` or `GROUP`.
     * 
     */
    public Output<String> principalType() {
        return this.principalType;
    }

    private ApplicationAssignmentArgs() {}

    private ApplicationAssignmentArgs(ApplicationAssignmentArgs $) {
        this.applicationArn = $.applicationArn;
        this.principalId = $.principalId;
        this.principalType = $.principalType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApplicationAssignmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApplicationAssignmentArgs $;

        public Builder() {
            $ = new ApplicationAssignmentArgs();
        }

        public Builder(ApplicationAssignmentArgs defaults) {
            $ = new ApplicationAssignmentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param applicationArn ARN of the application.
         * 
         * @return builder
         * 
         */
        public Builder applicationArn(Output<String> applicationArn) {
            $.applicationArn = applicationArn;
            return this;
        }

        /**
         * @param applicationArn ARN of the application.
         * 
         * @return builder
         * 
         */
        public Builder applicationArn(String applicationArn) {
            return applicationArn(Output.of(applicationArn));
        }

        /**
         * @param principalId An identifier for an object in IAM Identity Center, such as a user or group.
         * 
         * @return builder
         * 
         */
        public Builder principalId(Output<String> principalId) {
            $.principalId = principalId;
            return this;
        }

        /**
         * @param principalId An identifier for an object in IAM Identity Center, such as a user or group.
         * 
         * @return builder
         * 
         */
        public Builder principalId(String principalId) {
            return principalId(Output.of(principalId));
        }

        /**
         * @param principalType Entity type for which the assignment will be created. Valid values are `USER` or `GROUP`.
         * 
         * @return builder
         * 
         */
        public Builder principalType(Output<String> principalType) {
            $.principalType = principalType;
            return this;
        }

        /**
         * @param principalType Entity type for which the assignment will be created. Valid values are `USER` or `GROUP`.
         * 
         * @return builder
         * 
         */
        public Builder principalType(String principalType) {
            return principalType(Output.of(principalType));
        }

        public ApplicationAssignmentArgs build() {
            if ($.applicationArn == null) {
                throw new MissingRequiredPropertyException("ApplicationAssignmentArgs", "applicationArn");
            }
            if ($.principalId == null) {
                throw new MissingRequiredPropertyException("ApplicationAssignmentArgs", "principalId");
            }
            if ($.principalType == null) {
                throw new MissingRequiredPropertyException("ApplicationAssignmentArgs", "principalType");
            }
            return $;
        }
    }

}
