// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.auditmanager.inputs;

import com.pulumi.aws.auditmanager.inputs.GetControlControlMappingSource;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetControlPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetControlPlainArgs Empty = new GetControlPlainArgs();

    @Import(name="controlMappingSources")
    private @Nullable List<GetControlControlMappingSource> controlMappingSources;

    public Optional<List<GetControlControlMappingSource>> controlMappingSources() {
        return Optional.ofNullable(this.controlMappingSources);
    }

    /**
     * Name of the control.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return Name of the control.
     * 
     */
    public String name() {
        return this.name;
    }

    /**
     * Type of control. Valid values are `Custom` and `Standard`.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    /**
     * @return Type of control. Valid values are `Custom` and `Standard`.
     * 
     */
    public String type() {
        return this.type;
    }

    private GetControlPlainArgs() {}

    private GetControlPlainArgs(GetControlPlainArgs $) {
        this.controlMappingSources = $.controlMappingSources;
        this.name = $.name;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetControlPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetControlPlainArgs $;

        public Builder() {
            $ = new GetControlPlainArgs();
        }

        public Builder(GetControlPlainArgs defaults) {
            $ = new GetControlPlainArgs(Objects.requireNonNull(defaults));
        }

        public Builder controlMappingSources(@Nullable List<GetControlControlMappingSource> controlMappingSources) {
            $.controlMappingSources = controlMappingSources;
            return this;
        }

        public Builder controlMappingSources(GetControlControlMappingSource... controlMappingSources) {
            return controlMappingSources(List.of(controlMappingSources));
        }

        /**
         * @param name Name of the control.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        /**
         * @param type Type of control. Valid values are `Custom` and `Standard`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public GetControlPlainArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("GetControlPlainArgs", "name");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("GetControlPlainArgs", "type");
            }
            return $;
        }
    }

}
