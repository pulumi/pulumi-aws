// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.s3.inputs;

import com.pulumi.aws.s3.inputs.BucketLifecycleConfigurationV2RuleAbortIncompleteMultipartUploadArgs;
import com.pulumi.aws.s3.inputs.BucketLifecycleConfigurationV2RuleExpirationArgs;
import com.pulumi.aws.s3.inputs.BucketLifecycleConfigurationV2RuleFilterArgs;
import com.pulumi.aws.s3.inputs.BucketLifecycleConfigurationV2RuleNoncurrentVersionExpirationArgs;
import com.pulumi.aws.s3.inputs.BucketLifecycleConfigurationV2RuleNoncurrentVersionTransitionArgs;
import com.pulumi.aws.s3.inputs.BucketLifecycleConfigurationV2RuleTransitionArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BucketLifecycleConfigurationV2RuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final BucketLifecycleConfigurationV2RuleArgs Empty = new BucketLifecycleConfigurationV2RuleArgs();

    @Import(name="abortIncompleteMultipartUpload")
    private @Nullable Output<BucketLifecycleConfigurationV2RuleAbortIncompleteMultipartUploadArgs> abortIncompleteMultipartUpload;

    public Optional<Output<BucketLifecycleConfigurationV2RuleAbortIncompleteMultipartUploadArgs>> abortIncompleteMultipartUpload() {
        return Optional.ofNullable(this.abortIncompleteMultipartUpload);
    }

    @Import(name="expiration")
    private @Nullable Output<BucketLifecycleConfigurationV2RuleExpirationArgs> expiration;

    public Optional<Output<BucketLifecycleConfigurationV2RuleExpirationArgs>> expiration() {
        return Optional.ofNullable(this.expiration);
    }

    @Import(name="filter")
    private @Nullable Output<BucketLifecycleConfigurationV2RuleFilterArgs> filter;

    public Optional<Output<BucketLifecycleConfigurationV2RuleFilterArgs>> filter() {
        return Optional.ofNullable(this.filter);
    }

    @Import(name="id", required=true)
    private Output<String> id;

    public Output<String> id() {
        return this.id;
    }

    @Import(name="noncurrentVersionExpiration")
    private @Nullable Output<BucketLifecycleConfigurationV2RuleNoncurrentVersionExpirationArgs> noncurrentVersionExpiration;

    public Optional<Output<BucketLifecycleConfigurationV2RuleNoncurrentVersionExpirationArgs>> noncurrentVersionExpiration() {
        return Optional.ofNullable(this.noncurrentVersionExpiration);
    }

    @Import(name="noncurrentVersionTransitions")
    private @Nullable Output<List<BucketLifecycleConfigurationV2RuleNoncurrentVersionTransitionArgs>> noncurrentVersionTransitions;

    public Optional<Output<List<BucketLifecycleConfigurationV2RuleNoncurrentVersionTransitionArgs>>> noncurrentVersionTransitions() {
        return Optional.ofNullable(this.noncurrentVersionTransitions);
    }

    /**
     * @deprecated
     * Use filter instead
     * 
     */
    @Deprecated /* Use filter instead */
    @Import(name="prefix")
    private @Nullable Output<String> prefix;

    /**
     * @deprecated
     * Use filter instead
     * 
     */
    @Deprecated /* Use filter instead */
    public Optional<Output<String>> prefix() {
        return Optional.ofNullable(this.prefix);
    }

    @Import(name="status", required=true)
    private Output<String> status;

    public Output<String> status() {
        return this.status;
    }

    @Import(name="transitions")
    private @Nullable Output<List<BucketLifecycleConfigurationV2RuleTransitionArgs>> transitions;

    public Optional<Output<List<BucketLifecycleConfigurationV2RuleTransitionArgs>>> transitions() {
        return Optional.ofNullable(this.transitions);
    }

    private BucketLifecycleConfigurationV2RuleArgs() {}

    private BucketLifecycleConfigurationV2RuleArgs(BucketLifecycleConfigurationV2RuleArgs $) {
        this.abortIncompleteMultipartUpload = $.abortIncompleteMultipartUpload;
        this.expiration = $.expiration;
        this.filter = $.filter;
        this.id = $.id;
        this.noncurrentVersionExpiration = $.noncurrentVersionExpiration;
        this.noncurrentVersionTransitions = $.noncurrentVersionTransitions;
        this.prefix = $.prefix;
        this.status = $.status;
        this.transitions = $.transitions;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BucketLifecycleConfigurationV2RuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BucketLifecycleConfigurationV2RuleArgs $;

        public Builder() {
            $ = new BucketLifecycleConfigurationV2RuleArgs();
        }

        public Builder(BucketLifecycleConfigurationV2RuleArgs defaults) {
            $ = new BucketLifecycleConfigurationV2RuleArgs(Objects.requireNonNull(defaults));
        }

        public Builder abortIncompleteMultipartUpload(@Nullable Output<BucketLifecycleConfigurationV2RuleAbortIncompleteMultipartUploadArgs> abortIncompleteMultipartUpload) {
            $.abortIncompleteMultipartUpload = abortIncompleteMultipartUpload;
            return this;
        }

        public Builder abortIncompleteMultipartUpload(BucketLifecycleConfigurationV2RuleAbortIncompleteMultipartUploadArgs abortIncompleteMultipartUpload) {
            return abortIncompleteMultipartUpload(Output.of(abortIncompleteMultipartUpload));
        }

        public Builder expiration(@Nullable Output<BucketLifecycleConfigurationV2RuleExpirationArgs> expiration) {
            $.expiration = expiration;
            return this;
        }

        public Builder expiration(BucketLifecycleConfigurationV2RuleExpirationArgs expiration) {
            return expiration(Output.of(expiration));
        }

        public Builder filter(@Nullable Output<BucketLifecycleConfigurationV2RuleFilterArgs> filter) {
            $.filter = filter;
            return this;
        }

        public Builder filter(BucketLifecycleConfigurationV2RuleFilterArgs filter) {
            return filter(Output.of(filter));
        }

        public Builder id(Output<String> id) {
            $.id = id;
            return this;
        }

        public Builder id(String id) {
            return id(Output.of(id));
        }

        public Builder noncurrentVersionExpiration(@Nullable Output<BucketLifecycleConfigurationV2RuleNoncurrentVersionExpirationArgs> noncurrentVersionExpiration) {
            $.noncurrentVersionExpiration = noncurrentVersionExpiration;
            return this;
        }

        public Builder noncurrentVersionExpiration(BucketLifecycleConfigurationV2RuleNoncurrentVersionExpirationArgs noncurrentVersionExpiration) {
            return noncurrentVersionExpiration(Output.of(noncurrentVersionExpiration));
        }

        public Builder noncurrentVersionTransitions(@Nullable Output<List<BucketLifecycleConfigurationV2RuleNoncurrentVersionTransitionArgs>> noncurrentVersionTransitions) {
            $.noncurrentVersionTransitions = noncurrentVersionTransitions;
            return this;
        }

        public Builder noncurrentVersionTransitions(List<BucketLifecycleConfigurationV2RuleNoncurrentVersionTransitionArgs> noncurrentVersionTransitions) {
            return noncurrentVersionTransitions(Output.of(noncurrentVersionTransitions));
        }

        public Builder noncurrentVersionTransitions(BucketLifecycleConfigurationV2RuleNoncurrentVersionTransitionArgs... noncurrentVersionTransitions) {
            return noncurrentVersionTransitions(List.of(noncurrentVersionTransitions));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * Use filter instead
         * 
         */
        @Deprecated /* Use filter instead */
        public Builder prefix(@Nullable Output<String> prefix) {
            $.prefix = prefix;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * Use filter instead
         * 
         */
        @Deprecated /* Use filter instead */
        public Builder prefix(String prefix) {
            return prefix(Output.of(prefix));
        }

        public Builder status(Output<String> status) {
            $.status = status;
            return this;
        }

        public Builder status(String status) {
            return status(Output.of(status));
        }

        public Builder transitions(@Nullable Output<List<BucketLifecycleConfigurationV2RuleTransitionArgs>> transitions) {
            $.transitions = transitions;
            return this;
        }

        public Builder transitions(List<BucketLifecycleConfigurationV2RuleTransitionArgs> transitions) {
            return transitions(Output.of(transitions));
        }

        public Builder transitions(BucketLifecycleConfigurationV2RuleTransitionArgs... transitions) {
            return transitions(List.of(transitions));
        }

        public BucketLifecycleConfigurationV2RuleArgs build() {
            $.id = Objects.requireNonNull($.id, "expected parameter 'id' to be non-null");
            $.status = Objects.requireNonNull($.status, "expected parameter 'status' to be non-null");
            return $;
        }
    }

}
