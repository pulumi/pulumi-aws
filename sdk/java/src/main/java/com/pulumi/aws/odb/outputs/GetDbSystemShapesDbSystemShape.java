// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.odb.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetDbSystemShapesDbSystemShape {
    private Integer availableCoreCount;
    private Integer availableCoreCountPerNode;
    private Integer availableDataStorageInTbs;
    private Integer availableDataStoragePerServerInTbs;
    private Integer availableDbNodePerNodeInGbs;
    private Integer availableDbNodeStorageInGbs;
    private Integer availableMemoryInGbs;
    private Integer availableMemoryPerNodeInGbs;
    private Integer coreCountIncrement;
    private Integer maxStorageCount;
    private Integer maximumNodeCount;
    private Integer minCoreCountPerNode;
    private Integer minDataStorageInTbs;
    private Integer minDbNodeStoragePerNodeInGbs;
    private Integer minMemoryPerNodeInGbs;
    private Integer minStorageCount;
    private Integer minimumCoreCount;
    private Integer minimumNodeCount;
    private String name;
    private Integer runtimeMinimumCoreCount;
    private String shapeFamily;
    private String shapeType;

    private GetDbSystemShapesDbSystemShape() {}
    public Integer availableCoreCount() {
        return this.availableCoreCount;
    }
    public Integer availableCoreCountPerNode() {
        return this.availableCoreCountPerNode;
    }
    public Integer availableDataStorageInTbs() {
        return this.availableDataStorageInTbs;
    }
    public Integer availableDataStoragePerServerInTbs() {
        return this.availableDataStoragePerServerInTbs;
    }
    public Integer availableDbNodePerNodeInGbs() {
        return this.availableDbNodePerNodeInGbs;
    }
    public Integer availableDbNodeStorageInGbs() {
        return this.availableDbNodeStorageInGbs;
    }
    public Integer availableMemoryInGbs() {
        return this.availableMemoryInGbs;
    }
    public Integer availableMemoryPerNodeInGbs() {
        return this.availableMemoryPerNodeInGbs;
    }
    public Integer coreCountIncrement() {
        return this.coreCountIncrement;
    }
    public Integer maxStorageCount() {
        return this.maxStorageCount;
    }
    public Integer maximumNodeCount() {
        return this.maximumNodeCount;
    }
    public Integer minCoreCountPerNode() {
        return this.minCoreCountPerNode;
    }
    public Integer minDataStorageInTbs() {
        return this.minDataStorageInTbs;
    }
    public Integer minDbNodeStoragePerNodeInGbs() {
        return this.minDbNodeStoragePerNodeInGbs;
    }
    public Integer minMemoryPerNodeInGbs() {
        return this.minMemoryPerNodeInGbs;
    }
    public Integer minStorageCount() {
        return this.minStorageCount;
    }
    public Integer minimumCoreCount() {
        return this.minimumCoreCount;
    }
    public Integer minimumNodeCount() {
        return this.minimumNodeCount;
    }
    public String name() {
        return this.name;
    }
    public Integer runtimeMinimumCoreCount() {
        return this.runtimeMinimumCoreCount;
    }
    public String shapeFamily() {
        return this.shapeFamily;
    }
    public String shapeType() {
        return this.shapeType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDbSystemShapesDbSystemShape defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer availableCoreCount;
        private Integer availableCoreCountPerNode;
        private Integer availableDataStorageInTbs;
        private Integer availableDataStoragePerServerInTbs;
        private Integer availableDbNodePerNodeInGbs;
        private Integer availableDbNodeStorageInGbs;
        private Integer availableMemoryInGbs;
        private Integer availableMemoryPerNodeInGbs;
        private Integer coreCountIncrement;
        private Integer maxStorageCount;
        private Integer maximumNodeCount;
        private Integer minCoreCountPerNode;
        private Integer minDataStorageInTbs;
        private Integer minDbNodeStoragePerNodeInGbs;
        private Integer minMemoryPerNodeInGbs;
        private Integer minStorageCount;
        private Integer minimumCoreCount;
        private Integer minimumNodeCount;
        private String name;
        private Integer runtimeMinimumCoreCount;
        private String shapeFamily;
        private String shapeType;
        public Builder() {}
        public Builder(GetDbSystemShapesDbSystemShape defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.availableCoreCount = defaults.availableCoreCount;
    	      this.availableCoreCountPerNode = defaults.availableCoreCountPerNode;
    	      this.availableDataStorageInTbs = defaults.availableDataStorageInTbs;
    	      this.availableDataStoragePerServerInTbs = defaults.availableDataStoragePerServerInTbs;
    	      this.availableDbNodePerNodeInGbs = defaults.availableDbNodePerNodeInGbs;
    	      this.availableDbNodeStorageInGbs = defaults.availableDbNodeStorageInGbs;
    	      this.availableMemoryInGbs = defaults.availableMemoryInGbs;
    	      this.availableMemoryPerNodeInGbs = defaults.availableMemoryPerNodeInGbs;
    	      this.coreCountIncrement = defaults.coreCountIncrement;
    	      this.maxStorageCount = defaults.maxStorageCount;
    	      this.maximumNodeCount = defaults.maximumNodeCount;
    	      this.minCoreCountPerNode = defaults.minCoreCountPerNode;
    	      this.minDataStorageInTbs = defaults.minDataStorageInTbs;
    	      this.minDbNodeStoragePerNodeInGbs = defaults.minDbNodeStoragePerNodeInGbs;
    	      this.minMemoryPerNodeInGbs = defaults.minMemoryPerNodeInGbs;
    	      this.minStorageCount = defaults.minStorageCount;
    	      this.minimumCoreCount = defaults.minimumCoreCount;
    	      this.minimumNodeCount = defaults.minimumNodeCount;
    	      this.name = defaults.name;
    	      this.runtimeMinimumCoreCount = defaults.runtimeMinimumCoreCount;
    	      this.shapeFamily = defaults.shapeFamily;
    	      this.shapeType = defaults.shapeType;
        }

        @CustomType.Setter
        public Builder availableCoreCount(Integer availableCoreCount) {
            if (availableCoreCount == null) {
              throw new MissingRequiredPropertyException("GetDbSystemShapesDbSystemShape", "availableCoreCount");
            }
            this.availableCoreCount = availableCoreCount;
            return this;
        }
        @CustomType.Setter
        public Builder availableCoreCountPerNode(Integer availableCoreCountPerNode) {
            if (availableCoreCountPerNode == null) {
              throw new MissingRequiredPropertyException("GetDbSystemShapesDbSystemShape", "availableCoreCountPerNode");
            }
            this.availableCoreCountPerNode = availableCoreCountPerNode;
            return this;
        }
        @CustomType.Setter
        public Builder availableDataStorageInTbs(Integer availableDataStorageInTbs) {
            if (availableDataStorageInTbs == null) {
              throw new MissingRequiredPropertyException("GetDbSystemShapesDbSystemShape", "availableDataStorageInTbs");
            }
            this.availableDataStorageInTbs = availableDataStorageInTbs;
            return this;
        }
        @CustomType.Setter
        public Builder availableDataStoragePerServerInTbs(Integer availableDataStoragePerServerInTbs) {
            if (availableDataStoragePerServerInTbs == null) {
              throw new MissingRequiredPropertyException("GetDbSystemShapesDbSystemShape", "availableDataStoragePerServerInTbs");
            }
            this.availableDataStoragePerServerInTbs = availableDataStoragePerServerInTbs;
            return this;
        }
        @CustomType.Setter
        public Builder availableDbNodePerNodeInGbs(Integer availableDbNodePerNodeInGbs) {
            if (availableDbNodePerNodeInGbs == null) {
              throw new MissingRequiredPropertyException("GetDbSystemShapesDbSystemShape", "availableDbNodePerNodeInGbs");
            }
            this.availableDbNodePerNodeInGbs = availableDbNodePerNodeInGbs;
            return this;
        }
        @CustomType.Setter
        public Builder availableDbNodeStorageInGbs(Integer availableDbNodeStorageInGbs) {
            if (availableDbNodeStorageInGbs == null) {
              throw new MissingRequiredPropertyException("GetDbSystemShapesDbSystemShape", "availableDbNodeStorageInGbs");
            }
            this.availableDbNodeStorageInGbs = availableDbNodeStorageInGbs;
            return this;
        }
        @CustomType.Setter
        public Builder availableMemoryInGbs(Integer availableMemoryInGbs) {
            if (availableMemoryInGbs == null) {
              throw new MissingRequiredPropertyException("GetDbSystemShapesDbSystemShape", "availableMemoryInGbs");
            }
            this.availableMemoryInGbs = availableMemoryInGbs;
            return this;
        }
        @CustomType.Setter
        public Builder availableMemoryPerNodeInGbs(Integer availableMemoryPerNodeInGbs) {
            if (availableMemoryPerNodeInGbs == null) {
              throw new MissingRequiredPropertyException("GetDbSystemShapesDbSystemShape", "availableMemoryPerNodeInGbs");
            }
            this.availableMemoryPerNodeInGbs = availableMemoryPerNodeInGbs;
            return this;
        }
        @CustomType.Setter
        public Builder coreCountIncrement(Integer coreCountIncrement) {
            if (coreCountIncrement == null) {
              throw new MissingRequiredPropertyException("GetDbSystemShapesDbSystemShape", "coreCountIncrement");
            }
            this.coreCountIncrement = coreCountIncrement;
            return this;
        }
        @CustomType.Setter
        public Builder maxStorageCount(Integer maxStorageCount) {
            if (maxStorageCount == null) {
              throw new MissingRequiredPropertyException("GetDbSystemShapesDbSystemShape", "maxStorageCount");
            }
            this.maxStorageCount = maxStorageCount;
            return this;
        }
        @CustomType.Setter
        public Builder maximumNodeCount(Integer maximumNodeCount) {
            if (maximumNodeCount == null) {
              throw new MissingRequiredPropertyException("GetDbSystemShapesDbSystemShape", "maximumNodeCount");
            }
            this.maximumNodeCount = maximumNodeCount;
            return this;
        }
        @CustomType.Setter
        public Builder minCoreCountPerNode(Integer minCoreCountPerNode) {
            if (minCoreCountPerNode == null) {
              throw new MissingRequiredPropertyException("GetDbSystemShapesDbSystemShape", "minCoreCountPerNode");
            }
            this.minCoreCountPerNode = minCoreCountPerNode;
            return this;
        }
        @CustomType.Setter
        public Builder minDataStorageInTbs(Integer minDataStorageInTbs) {
            if (minDataStorageInTbs == null) {
              throw new MissingRequiredPropertyException("GetDbSystemShapesDbSystemShape", "minDataStorageInTbs");
            }
            this.minDataStorageInTbs = minDataStorageInTbs;
            return this;
        }
        @CustomType.Setter
        public Builder minDbNodeStoragePerNodeInGbs(Integer minDbNodeStoragePerNodeInGbs) {
            if (minDbNodeStoragePerNodeInGbs == null) {
              throw new MissingRequiredPropertyException("GetDbSystemShapesDbSystemShape", "minDbNodeStoragePerNodeInGbs");
            }
            this.minDbNodeStoragePerNodeInGbs = minDbNodeStoragePerNodeInGbs;
            return this;
        }
        @CustomType.Setter
        public Builder minMemoryPerNodeInGbs(Integer minMemoryPerNodeInGbs) {
            if (minMemoryPerNodeInGbs == null) {
              throw new MissingRequiredPropertyException("GetDbSystemShapesDbSystemShape", "minMemoryPerNodeInGbs");
            }
            this.minMemoryPerNodeInGbs = minMemoryPerNodeInGbs;
            return this;
        }
        @CustomType.Setter
        public Builder minStorageCount(Integer minStorageCount) {
            if (minStorageCount == null) {
              throw new MissingRequiredPropertyException("GetDbSystemShapesDbSystemShape", "minStorageCount");
            }
            this.minStorageCount = minStorageCount;
            return this;
        }
        @CustomType.Setter
        public Builder minimumCoreCount(Integer minimumCoreCount) {
            if (minimumCoreCount == null) {
              throw new MissingRequiredPropertyException("GetDbSystemShapesDbSystemShape", "minimumCoreCount");
            }
            this.minimumCoreCount = minimumCoreCount;
            return this;
        }
        @CustomType.Setter
        public Builder minimumNodeCount(Integer minimumNodeCount) {
            if (minimumNodeCount == null) {
              throw new MissingRequiredPropertyException("GetDbSystemShapesDbSystemShape", "minimumNodeCount");
            }
            this.minimumNodeCount = minimumNodeCount;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetDbSystemShapesDbSystemShape", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder runtimeMinimumCoreCount(Integer runtimeMinimumCoreCount) {
            if (runtimeMinimumCoreCount == null) {
              throw new MissingRequiredPropertyException("GetDbSystemShapesDbSystemShape", "runtimeMinimumCoreCount");
            }
            this.runtimeMinimumCoreCount = runtimeMinimumCoreCount;
            return this;
        }
        @CustomType.Setter
        public Builder shapeFamily(String shapeFamily) {
            if (shapeFamily == null) {
              throw new MissingRequiredPropertyException("GetDbSystemShapesDbSystemShape", "shapeFamily");
            }
            this.shapeFamily = shapeFamily;
            return this;
        }
        @CustomType.Setter
        public Builder shapeType(String shapeType) {
            if (shapeType == null) {
              throw new MissingRequiredPropertyException("GetDbSystemShapesDbSystemShape", "shapeType");
            }
            this.shapeType = shapeType;
            return this;
        }
        public GetDbSystemShapesDbSystemShape build() {
            final var _resultValue = new GetDbSystemShapesDbSystemShape();
            _resultValue.availableCoreCount = availableCoreCount;
            _resultValue.availableCoreCountPerNode = availableCoreCountPerNode;
            _resultValue.availableDataStorageInTbs = availableDataStorageInTbs;
            _resultValue.availableDataStoragePerServerInTbs = availableDataStoragePerServerInTbs;
            _resultValue.availableDbNodePerNodeInGbs = availableDbNodePerNodeInGbs;
            _resultValue.availableDbNodeStorageInGbs = availableDbNodeStorageInGbs;
            _resultValue.availableMemoryInGbs = availableMemoryInGbs;
            _resultValue.availableMemoryPerNodeInGbs = availableMemoryPerNodeInGbs;
            _resultValue.coreCountIncrement = coreCountIncrement;
            _resultValue.maxStorageCount = maxStorageCount;
            _resultValue.maximumNodeCount = maximumNodeCount;
            _resultValue.minCoreCountPerNode = minCoreCountPerNode;
            _resultValue.minDataStorageInTbs = minDataStorageInTbs;
            _resultValue.minDbNodeStoragePerNodeInGbs = minDbNodeStoragePerNodeInGbs;
            _resultValue.minMemoryPerNodeInGbs = minMemoryPerNodeInGbs;
            _resultValue.minStorageCount = minStorageCount;
            _resultValue.minimumCoreCount = minimumCoreCount;
            _resultValue.minimumNodeCount = minimumNodeCount;
            _resultValue.name = name;
            _resultValue.runtimeMinimumCoreCount = runtimeMinimumCoreCount;
            _resultValue.shapeFamily = shapeFamily;
            _resultValue.shapeType = shapeType;
            return _resultValue;
        }
    }
}
