// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.inputs;

import com.pulumi.aws.quicksight.inputs.ConditionalFormattingColorArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.util.Objects;


public final class VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionShapeFormatArgs extends com.pulumi.resources.ResourceArgs {

    public static final VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionShapeFormatArgs Empty = new VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionShapeFormatArgs();

    @Import(name="backgroundColor", required=true)
    private Output<ConditionalFormattingColorArgs> backgroundColor;

    public Output<ConditionalFormattingColorArgs> backgroundColor() {
        return this.backgroundColor;
    }

    private VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionShapeFormatArgs() {}

    private VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionShapeFormatArgs(VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionShapeFormatArgs $) {
        this.backgroundColor = $.backgroundColor;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionShapeFormatArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionShapeFormatArgs $;

        public Builder() {
            $ = new VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionShapeFormatArgs();
        }

        public Builder(VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionShapeFormatArgs defaults) {
            $ = new VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionShapeFormatArgs(Objects.requireNonNull(defaults));
        }

        public Builder backgroundColor(Output<ConditionalFormattingColorArgs> backgroundColor) {
            $.backgroundColor = backgroundColor;
            return this;
        }

        public Builder backgroundColor(ConditionalFormattingColorArgs backgroundColor) {
            return backgroundColor(Output.of(backgroundColor));
        }

        public VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionShapeFormatArgs build() {
            if ($.backgroundColor == null) {
                throw new MissingRequiredPropertyException("VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionShapeFormatArgs", "backgroundColor");
            }
            return $;
        }
    }

}
