// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.opensearch.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class OutboundConnectionLocalDomainInfo {
    /**
     * @return The name of the local domain.
     * 
     */
    private String domainName;
    /**
     * @return The Account ID of the owner of the local domain.
     * 
     */
    private String ownerId;
    /**
     * @return The region of the local domain.
     * 
     */
    private String region;

    private OutboundConnectionLocalDomainInfo() {}
    /**
     * @return The name of the local domain.
     * 
     */
    public String domainName() {
        return this.domainName;
    }
    /**
     * @return The Account ID of the owner of the local domain.
     * 
     */
    public String ownerId() {
        return this.ownerId;
    }
    /**
     * @return The region of the local domain.
     * 
     */
    public String region() {
        return this.region;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(OutboundConnectionLocalDomainInfo defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String domainName;
        private String ownerId;
        private String region;
        public Builder() {}
        public Builder(OutboundConnectionLocalDomainInfo defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.domainName = defaults.domainName;
    	      this.ownerId = defaults.ownerId;
    	      this.region = defaults.region;
        }

        @CustomType.Setter
        public Builder domainName(String domainName) {
            if (domainName == null) {
              throw new MissingRequiredPropertyException("OutboundConnectionLocalDomainInfo", "domainName");
            }
            this.domainName = domainName;
            return this;
        }
        @CustomType.Setter
        public Builder ownerId(String ownerId) {
            if (ownerId == null) {
              throw new MissingRequiredPropertyException("OutboundConnectionLocalDomainInfo", "ownerId");
            }
            this.ownerId = ownerId;
            return this;
        }
        @CustomType.Setter
        public Builder region(String region) {
            if (region == null) {
              throw new MissingRequiredPropertyException("OutboundConnectionLocalDomainInfo", "region");
            }
            this.region = region;
            return this;
        }
        public OutboundConnectionLocalDomainInfo build() {
            final var _resultValue = new OutboundConnectionLocalDomainInfo();
            _resultValue.domainName = domainName;
            _resultValue.ownerId = ownerId;
            _resultValue.region = region;
            return _resultValue;
        }
    }
}
