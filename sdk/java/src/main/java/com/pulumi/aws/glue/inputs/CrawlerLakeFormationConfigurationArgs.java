// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.glue.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CrawlerLakeFormationConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final CrawlerLakeFormationConfigurationArgs Empty = new CrawlerLakeFormationConfigurationArgs();

    /**
     * Required for cross account crawls. For same account crawls as the target data, this can omitted.
     * 
     */
    @Import(name="accountId")
    private @Nullable Output<String> accountId;

    /**
     * @return Required for cross account crawls. For same account crawls as the target data, this can omitted.
     * 
     */
    public Optional<Output<String>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    /**
     * Specifies whether to use Lake Formation credentials for the crawler instead of the IAM role credentials.
     * 
     */
    @Import(name="useLakeFormationCredentials")
    private @Nullable Output<Boolean> useLakeFormationCredentials;

    /**
     * @return Specifies whether to use Lake Formation credentials for the crawler instead of the IAM role credentials.
     * 
     */
    public Optional<Output<Boolean>> useLakeFormationCredentials() {
        return Optional.ofNullable(this.useLakeFormationCredentials);
    }

    private CrawlerLakeFormationConfigurationArgs() {}

    private CrawlerLakeFormationConfigurationArgs(CrawlerLakeFormationConfigurationArgs $) {
        this.accountId = $.accountId;
        this.useLakeFormationCredentials = $.useLakeFormationCredentials;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CrawlerLakeFormationConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CrawlerLakeFormationConfigurationArgs $;

        public Builder() {
            $ = new CrawlerLakeFormationConfigurationArgs();
        }

        public Builder(CrawlerLakeFormationConfigurationArgs defaults) {
            $ = new CrawlerLakeFormationConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId Required for cross account crawls. For same account crawls as the target data, this can omitted.
         * 
         * @return builder
         * 
         */
        public Builder accountId(@Nullable Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId Required for cross account crawls. For same account crawls as the target data, this can omitted.
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param useLakeFormationCredentials Specifies whether to use Lake Formation credentials for the crawler instead of the IAM role credentials.
         * 
         * @return builder
         * 
         */
        public Builder useLakeFormationCredentials(@Nullable Output<Boolean> useLakeFormationCredentials) {
            $.useLakeFormationCredentials = useLakeFormationCredentials;
            return this;
        }

        /**
         * @param useLakeFormationCredentials Specifies whether to use Lake Formation credentials for the crawler instead of the IAM role credentials.
         * 
         * @return builder
         * 
         */
        public Builder useLakeFormationCredentials(Boolean useLakeFormationCredentials) {
            return useLakeFormationCredentials(Output.of(useLakeFormationCredentials));
        }

        public CrawlerLakeFormationConfigurationArgs build() {
            return $;
        }
    }

}
