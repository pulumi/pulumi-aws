// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.appautoscaling.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TargetState extends com.pulumi.resources.ResourceArgs {

    public static final TargetState Empty = new TargetState();

    @Import(name="maxCapacity")
    private @Nullable Output<Integer> maxCapacity;

    public Optional<Output<Integer>> maxCapacity() {
        return Optional.ofNullable(this.maxCapacity);
    }

    @Import(name="minCapacity")
    private @Nullable Output<Integer> minCapacity;

    public Optional<Output<Integer>> minCapacity() {
        return Optional.ofNullable(this.minCapacity);
    }

    @Import(name="resourceId")
    private @Nullable Output<String> resourceId;

    public Optional<Output<String>> resourceId() {
        return Optional.ofNullable(this.resourceId);
    }

    @Import(name="roleArn")
    private @Nullable Output<String> roleArn;

    public Optional<Output<String>> roleArn() {
        return Optional.ofNullable(this.roleArn);
    }

    @Import(name="scalableDimension")
    private @Nullable Output<String> scalableDimension;

    public Optional<Output<String>> scalableDimension() {
        return Optional.ofNullable(this.scalableDimension);
    }

    @Import(name="serviceNamespace")
    private @Nullable Output<String> serviceNamespace;

    public Optional<Output<String>> serviceNamespace() {
        return Optional.ofNullable(this.serviceNamespace);
    }

    private TargetState() {}

    private TargetState(TargetState $) {
        this.maxCapacity = $.maxCapacity;
        this.minCapacity = $.minCapacity;
        this.resourceId = $.resourceId;
        this.roleArn = $.roleArn;
        this.scalableDimension = $.scalableDimension;
        this.serviceNamespace = $.serviceNamespace;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TargetState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TargetState $;

        public Builder() {
            $ = new TargetState();
        }

        public Builder(TargetState defaults) {
            $ = new TargetState(Objects.requireNonNull(defaults));
        }

        public Builder maxCapacity(@Nullable Output<Integer> maxCapacity) {
            $.maxCapacity = maxCapacity;
            return this;
        }

        public Builder maxCapacity(Integer maxCapacity) {
            return maxCapacity(Output.of(maxCapacity));
        }

        public Builder minCapacity(@Nullable Output<Integer> minCapacity) {
            $.minCapacity = minCapacity;
            return this;
        }

        public Builder minCapacity(Integer minCapacity) {
            return minCapacity(Output.of(minCapacity));
        }

        public Builder resourceId(@Nullable Output<String> resourceId) {
            $.resourceId = resourceId;
            return this;
        }

        public Builder resourceId(String resourceId) {
            return resourceId(Output.of(resourceId));
        }

        public Builder roleArn(@Nullable Output<String> roleArn) {
            $.roleArn = roleArn;
            return this;
        }

        public Builder roleArn(String roleArn) {
            return roleArn(Output.of(roleArn));
        }

        public Builder scalableDimension(@Nullable Output<String> scalableDimension) {
            $.scalableDimension = scalableDimension;
            return this;
        }

        public Builder scalableDimension(String scalableDimension) {
            return scalableDimension(Output.of(scalableDimension));
        }

        public Builder serviceNamespace(@Nullable Output<String> serviceNamespace) {
            $.serviceNamespace = serviceNamespace;
            return this;
        }

        public Builder serviceNamespace(String serviceNamespace) {
            return serviceNamespace(Output.of(serviceNamespace));
        }

        public TargetState build() {
            return $;
        }
    }

}
