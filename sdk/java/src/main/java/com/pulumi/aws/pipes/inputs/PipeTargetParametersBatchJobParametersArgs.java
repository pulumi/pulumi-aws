// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.pipes.inputs;

import com.pulumi.aws.pipes.inputs.PipeTargetParametersBatchJobParametersArrayPropertiesArgs;
import com.pulumi.aws.pipes.inputs.PipeTargetParametersBatchJobParametersContainerOverridesArgs;
import com.pulumi.aws.pipes.inputs.PipeTargetParametersBatchJobParametersDependsOnArgs;
import com.pulumi.aws.pipes.inputs.PipeTargetParametersBatchJobParametersRetryStrategyArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PipeTargetParametersBatchJobParametersArgs extends com.pulumi.resources.ResourceArgs {

    public static final PipeTargetParametersBatchJobParametersArgs Empty = new PipeTargetParametersBatchJobParametersArgs();

    @Import(name="arrayProperties")
    private @Nullable Output<PipeTargetParametersBatchJobParametersArrayPropertiesArgs> arrayProperties;

    public Optional<Output<PipeTargetParametersBatchJobParametersArrayPropertiesArgs>> arrayProperties() {
        return Optional.ofNullable(this.arrayProperties);
    }

    @Import(name="containerOverrides")
    private @Nullable Output<PipeTargetParametersBatchJobParametersContainerOverridesArgs> containerOverrides;

    public Optional<Output<PipeTargetParametersBatchJobParametersContainerOverridesArgs>> containerOverrides() {
        return Optional.ofNullable(this.containerOverrides);
    }

    @Import(name="dependsOns")
    private @Nullable Output<List<PipeTargetParametersBatchJobParametersDependsOnArgs>> dependsOns;

    public Optional<Output<List<PipeTargetParametersBatchJobParametersDependsOnArgs>>> dependsOns() {
        return Optional.ofNullable(this.dependsOns);
    }

    @Import(name="jobDefinition", required=true)
    private Output<String> jobDefinition;

    public Output<String> jobDefinition() {
        return this.jobDefinition;
    }

    @Import(name="jobName", required=true)
    private Output<String> jobName;

    public Output<String> jobName() {
        return this.jobName;
    }

    @Import(name="parameters")
    private @Nullable Output<Map<String,String>> parameters;

    public Optional<Output<Map<String,String>>> parameters() {
        return Optional.ofNullable(this.parameters);
    }

    @Import(name="retryStrategy")
    private @Nullable Output<PipeTargetParametersBatchJobParametersRetryStrategyArgs> retryStrategy;

    public Optional<Output<PipeTargetParametersBatchJobParametersRetryStrategyArgs>> retryStrategy() {
        return Optional.ofNullable(this.retryStrategy);
    }

    private PipeTargetParametersBatchJobParametersArgs() {}

    private PipeTargetParametersBatchJobParametersArgs(PipeTargetParametersBatchJobParametersArgs $) {
        this.arrayProperties = $.arrayProperties;
        this.containerOverrides = $.containerOverrides;
        this.dependsOns = $.dependsOns;
        this.jobDefinition = $.jobDefinition;
        this.jobName = $.jobName;
        this.parameters = $.parameters;
        this.retryStrategy = $.retryStrategy;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PipeTargetParametersBatchJobParametersArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PipeTargetParametersBatchJobParametersArgs $;

        public Builder() {
            $ = new PipeTargetParametersBatchJobParametersArgs();
        }

        public Builder(PipeTargetParametersBatchJobParametersArgs defaults) {
            $ = new PipeTargetParametersBatchJobParametersArgs(Objects.requireNonNull(defaults));
        }

        public Builder arrayProperties(@Nullable Output<PipeTargetParametersBatchJobParametersArrayPropertiesArgs> arrayProperties) {
            $.arrayProperties = arrayProperties;
            return this;
        }

        public Builder arrayProperties(PipeTargetParametersBatchJobParametersArrayPropertiesArgs arrayProperties) {
            return arrayProperties(Output.of(arrayProperties));
        }

        public Builder containerOverrides(@Nullable Output<PipeTargetParametersBatchJobParametersContainerOverridesArgs> containerOverrides) {
            $.containerOverrides = containerOverrides;
            return this;
        }

        public Builder containerOverrides(PipeTargetParametersBatchJobParametersContainerOverridesArgs containerOverrides) {
            return containerOverrides(Output.of(containerOverrides));
        }

        public Builder dependsOns(@Nullable Output<List<PipeTargetParametersBatchJobParametersDependsOnArgs>> dependsOns) {
            $.dependsOns = dependsOns;
            return this;
        }

        public Builder dependsOns(List<PipeTargetParametersBatchJobParametersDependsOnArgs> dependsOns) {
            return dependsOns(Output.of(dependsOns));
        }

        public Builder dependsOns(PipeTargetParametersBatchJobParametersDependsOnArgs... dependsOns) {
            return dependsOns(List.of(dependsOns));
        }

        public Builder jobDefinition(Output<String> jobDefinition) {
            $.jobDefinition = jobDefinition;
            return this;
        }

        public Builder jobDefinition(String jobDefinition) {
            return jobDefinition(Output.of(jobDefinition));
        }

        public Builder jobName(Output<String> jobName) {
            $.jobName = jobName;
            return this;
        }

        public Builder jobName(String jobName) {
            return jobName(Output.of(jobName));
        }

        public Builder parameters(@Nullable Output<Map<String,String>> parameters) {
            $.parameters = parameters;
            return this;
        }

        public Builder parameters(Map<String,String> parameters) {
            return parameters(Output.of(parameters));
        }

        public Builder retryStrategy(@Nullable Output<PipeTargetParametersBatchJobParametersRetryStrategyArgs> retryStrategy) {
            $.retryStrategy = retryStrategy;
            return this;
        }

        public Builder retryStrategy(PipeTargetParametersBatchJobParametersRetryStrategyArgs retryStrategy) {
            return retryStrategy(Output.of(retryStrategy));
        }

        public PipeTargetParametersBatchJobParametersArgs build() {
            if ($.jobDefinition == null) {
                throw new MissingRequiredPropertyException("PipeTargetParametersBatchJobParametersArgs", "jobDefinition");
            }
            if ($.jobName == null) {
                throw new MissingRequiredPropertyException("PipeTargetParametersBatchJobParametersArgs", "jobName");
            }
            return $;
        }
    }

}
