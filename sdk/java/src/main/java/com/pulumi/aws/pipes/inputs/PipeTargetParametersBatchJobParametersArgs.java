// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.pipes.inputs;

import com.pulumi.aws.pipes.inputs.PipeTargetParametersBatchJobParametersArrayPropertiesArgs;
import com.pulumi.aws.pipes.inputs.PipeTargetParametersBatchJobParametersContainerOverridesArgs;
import com.pulumi.aws.pipes.inputs.PipeTargetParametersBatchJobParametersDependsOnArgs;
import com.pulumi.aws.pipes.inputs.PipeTargetParametersBatchJobParametersRetryStrategyArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PipeTargetParametersBatchJobParametersArgs extends com.pulumi.resources.ResourceArgs {

    public static final PipeTargetParametersBatchJobParametersArgs Empty = new PipeTargetParametersBatchJobParametersArgs();

    /**
     * The array properties for the submitted job, such as the size of the array. The array size can be between 2 and 10,000. If you specify array properties for a job, it becomes an array job. This parameter is used only if the target is an AWS Batch job. Detailed below.
     * 
     */
    @Import(name="arrayProperties")
    private @Nullable Output<PipeTargetParametersBatchJobParametersArrayPropertiesArgs> arrayProperties;

    /**
     * @return The array properties for the submitted job, such as the size of the array. The array size can be between 2 and 10,000. If you specify array properties for a job, it becomes an array job. This parameter is used only if the target is an AWS Batch job. Detailed below.
     * 
     */
    public Optional<Output<PipeTargetParametersBatchJobParametersArrayPropertiesArgs>> arrayProperties() {
        return Optional.ofNullable(this.arrayProperties);
    }

    /**
     * The overrides that are sent to a container. Detailed below.
     * 
     */
    @Import(name="containerOverrides")
    private @Nullable Output<PipeTargetParametersBatchJobParametersContainerOverridesArgs> containerOverrides;

    /**
     * @return The overrides that are sent to a container. Detailed below.
     * 
     */
    public Optional<Output<PipeTargetParametersBatchJobParametersContainerOverridesArgs>> containerOverrides() {
        return Optional.ofNullable(this.containerOverrides);
    }

    /**
     * A list of dependencies for the job. A job can depend upon a maximum of 20 jobs. You can specify a SEQUENTIAL type dependency without specifying a job ID for array jobs so that each child array job completes sequentially, starting at index 0. You can also specify an N_TO_N type dependency with a job ID for array jobs. In that case, each index child of this job must wait for the corresponding index child of each dependency to complete before it can begin. Detailed below.
     * 
     */
    @Import(name="dependsOns")
    private @Nullable Output<List<PipeTargetParametersBatchJobParametersDependsOnArgs>> dependsOns;

    /**
     * @return A list of dependencies for the job. A job can depend upon a maximum of 20 jobs. You can specify a SEQUENTIAL type dependency without specifying a job ID for array jobs so that each child array job completes sequentially, starting at index 0. You can also specify an N_TO_N type dependency with a job ID for array jobs. In that case, each index child of this job must wait for the corresponding index child of each dependency to complete before it can begin. Detailed below.
     * 
     */
    public Optional<Output<List<PipeTargetParametersBatchJobParametersDependsOnArgs>>> dependsOns() {
        return Optional.ofNullable(this.dependsOns);
    }

    /**
     * The job definition used by this job. This value can be one of name, name:revision, or the Amazon Resource Name (ARN) for the job definition. If name is specified without a revision then the latest active revision is used.
     * 
     */
    @Import(name="jobDefinition", required=true)
    private Output<String> jobDefinition;

    /**
     * @return The job definition used by this job. This value can be one of name, name:revision, or the Amazon Resource Name (ARN) for the job definition. If name is specified without a revision then the latest active revision is used.
     * 
     */
    public Output<String> jobDefinition() {
        return this.jobDefinition;
    }

    /**
     * The name of the job. It can be up to 128 letters long.
     * 
     */
    @Import(name="jobName", required=true)
    private Output<String> jobName;

    /**
     * @return The name of the job. It can be up to 128 letters long.
     * 
     */
    public Output<String> jobName() {
        return this.jobName;
    }

    /**
     * Additional parameters passed to the job that replace parameter substitution placeholders that are set in the job definition. Parameters are specified as a key and value pair mapping. Parameters included here override any corresponding parameter defaults from the job definition. Detailed below.
     * 
     */
    @Import(name="parameters")
    private @Nullable Output<Map<String,String>> parameters;

    /**
     * @return Additional parameters passed to the job that replace parameter substitution placeholders that are set in the job definition. Parameters are specified as a key and value pair mapping. Parameters included here override any corresponding parameter defaults from the job definition. Detailed below.
     * 
     */
    public Optional<Output<Map<String,String>>> parameters() {
        return Optional.ofNullable(this.parameters);
    }

    /**
     * The retry strategy to use for failed jobs. When a retry strategy is specified here, it overrides the retry strategy defined in the job definition. Detailed below.
     * 
     */
    @Import(name="retryStrategy")
    private @Nullable Output<PipeTargetParametersBatchJobParametersRetryStrategyArgs> retryStrategy;

    /**
     * @return The retry strategy to use for failed jobs. When a retry strategy is specified here, it overrides the retry strategy defined in the job definition. Detailed below.
     * 
     */
    public Optional<Output<PipeTargetParametersBatchJobParametersRetryStrategyArgs>> retryStrategy() {
        return Optional.ofNullable(this.retryStrategy);
    }

    private PipeTargetParametersBatchJobParametersArgs() {}

    private PipeTargetParametersBatchJobParametersArgs(PipeTargetParametersBatchJobParametersArgs $) {
        this.arrayProperties = $.arrayProperties;
        this.containerOverrides = $.containerOverrides;
        this.dependsOns = $.dependsOns;
        this.jobDefinition = $.jobDefinition;
        this.jobName = $.jobName;
        this.parameters = $.parameters;
        this.retryStrategy = $.retryStrategy;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PipeTargetParametersBatchJobParametersArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PipeTargetParametersBatchJobParametersArgs $;

        public Builder() {
            $ = new PipeTargetParametersBatchJobParametersArgs();
        }

        public Builder(PipeTargetParametersBatchJobParametersArgs defaults) {
            $ = new PipeTargetParametersBatchJobParametersArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param arrayProperties The array properties for the submitted job, such as the size of the array. The array size can be between 2 and 10,000. If you specify array properties for a job, it becomes an array job. This parameter is used only if the target is an AWS Batch job. Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder arrayProperties(@Nullable Output<PipeTargetParametersBatchJobParametersArrayPropertiesArgs> arrayProperties) {
            $.arrayProperties = arrayProperties;
            return this;
        }

        /**
         * @param arrayProperties The array properties for the submitted job, such as the size of the array. The array size can be between 2 and 10,000. If you specify array properties for a job, it becomes an array job. This parameter is used only if the target is an AWS Batch job. Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder arrayProperties(PipeTargetParametersBatchJobParametersArrayPropertiesArgs arrayProperties) {
            return arrayProperties(Output.of(arrayProperties));
        }

        /**
         * @param containerOverrides The overrides that are sent to a container. Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder containerOverrides(@Nullable Output<PipeTargetParametersBatchJobParametersContainerOverridesArgs> containerOverrides) {
            $.containerOverrides = containerOverrides;
            return this;
        }

        /**
         * @param containerOverrides The overrides that are sent to a container. Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder containerOverrides(PipeTargetParametersBatchJobParametersContainerOverridesArgs containerOverrides) {
            return containerOverrides(Output.of(containerOverrides));
        }

        /**
         * @param dependsOns A list of dependencies for the job. A job can depend upon a maximum of 20 jobs. You can specify a SEQUENTIAL type dependency without specifying a job ID for array jobs so that each child array job completes sequentially, starting at index 0. You can also specify an N_TO_N type dependency with a job ID for array jobs. In that case, each index child of this job must wait for the corresponding index child of each dependency to complete before it can begin. Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder dependsOns(@Nullable Output<List<PipeTargetParametersBatchJobParametersDependsOnArgs>> dependsOns) {
            $.dependsOns = dependsOns;
            return this;
        }

        /**
         * @param dependsOns A list of dependencies for the job. A job can depend upon a maximum of 20 jobs. You can specify a SEQUENTIAL type dependency without specifying a job ID for array jobs so that each child array job completes sequentially, starting at index 0. You can also specify an N_TO_N type dependency with a job ID for array jobs. In that case, each index child of this job must wait for the corresponding index child of each dependency to complete before it can begin. Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder dependsOns(List<PipeTargetParametersBatchJobParametersDependsOnArgs> dependsOns) {
            return dependsOns(Output.of(dependsOns));
        }

        /**
         * @param dependsOns A list of dependencies for the job. A job can depend upon a maximum of 20 jobs. You can specify a SEQUENTIAL type dependency without specifying a job ID for array jobs so that each child array job completes sequentially, starting at index 0. You can also specify an N_TO_N type dependency with a job ID for array jobs. In that case, each index child of this job must wait for the corresponding index child of each dependency to complete before it can begin. Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder dependsOns(PipeTargetParametersBatchJobParametersDependsOnArgs... dependsOns) {
            return dependsOns(List.of(dependsOns));
        }

        /**
         * @param jobDefinition The job definition used by this job. This value can be one of name, name:revision, or the Amazon Resource Name (ARN) for the job definition. If name is specified without a revision then the latest active revision is used.
         * 
         * @return builder
         * 
         */
        public Builder jobDefinition(Output<String> jobDefinition) {
            $.jobDefinition = jobDefinition;
            return this;
        }

        /**
         * @param jobDefinition The job definition used by this job. This value can be one of name, name:revision, or the Amazon Resource Name (ARN) for the job definition. If name is specified without a revision then the latest active revision is used.
         * 
         * @return builder
         * 
         */
        public Builder jobDefinition(String jobDefinition) {
            return jobDefinition(Output.of(jobDefinition));
        }

        /**
         * @param jobName The name of the job. It can be up to 128 letters long.
         * 
         * @return builder
         * 
         */
        public Builder jobName(Output<String> jobName) {
            $.jobName = jobName;
            return this;
        }

        /**
         * @param jobName The name of the job. It can be up to 128 letters long.
         * 
         * @return builder
         * 
         */
        public Builder jobName(String jobName) {
            return jobName(Output.of(jobName));
        }

        /**
         * @param parameters Additional parameters passed to the job that replace parameter substitution placeholders that are set in the job definition. Parameters are specified as a key and value pair mapping. Parameters included here override any corresponding parameter defaults from the job definition. Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder parameters(@Nullable Output<Map<String,String>> parameters) {
            $.parameters = parameters;
            return this;
        }

        /**
         * @param parameters Additional parameters passed to the job that replace parameter substitution placeholders that are set in the job definition. Parameters are specified as a key and value pair mapping. Parameters included here override any corresponding parameter defaults from the job definition. Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder parameters(Map<String,String> parameters) {
            return parameters(Output.of(parameters));
        }

        /**
         * @param retryStrategy The retry strategy to use for failed jobs. When a retry strategy is specified here, it overrides the retry strategy defined in the job definition. Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder retryStrategy(@Nullable Output<PipeTargetParametersBatchJobParametersRetryStrategyArgs> retryStrategy) {
            $.retryStrategy = retryStrategy;
            return this;
        }

        /**
         * @param retryStrategy The retry strategy to use for failed jobs. When a retry strategy is specified here, it overrides the retry strategy defined in the job definition. Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder retryStrategy(PipeTargetParametersBatchJobParametersRetryStrategyArgs retryStrategy) {
            return retryStrategy(Output.of(retryStrategy));
        }

        public PipeTargetParametersBatchJobParametersArgs build() {
            if ($.jobDefinition == null) {
                throw new MissingRequiredPropertyException("PipeTargetParametersBatchJobParametersArgs", "jobDefinition");
            }
            if ($.jobName == null) {
                throw new MissingRequiredPropertyException("PipeTargetParametersBatchJobParametersArgs", "jobName");
            }
            return $;
        }
    }

}
