// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.lightsail;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DatabaseArgs extends com.pulumi.resources.ResourceArgs {

    public static final DatabaseArgs Empty = new DatabaseArgs();

    @Import(name="applyImmediately")
    private @Nullable Output<Boolean> applyImmediately;

    public Optional<Output<Boolean>> applyImmediately() {
        return Optional.ofNullable(this.applyImmediately);
    }

    @Import(name="availabilityZone")
    private @Nullable Output<String> availabilityZone;

    public Optional<Output<String>> availabilityZone() {
        return Optional.ofNullable(this.availabilityZone);
    }

    @Import(name="backupRetentionEnabled")
    private @Nullable Output<Boolean> backupRetentionEnabled;

    public Optional<Output<Boolean>> backupRetentionEnabled() {
        return Optional.ofNullable(this.backupRetentionEnabled);
    }

    @Import(name="blueprintId", required=true)
    private Output<String> blueprintId;

    public Output<String> blueprintId() {
        return this.blueprintId;
    }

    @Import(name="bundleId", required=true)
    private Output<String> bundleId;

    public Output<String> bundleId() {
        return this.bundleId;
    }

    @Import(name="finalSnapshotName")
    private @Nullable Output<String> finalSnapshotName;

    public Optional<Output<String>> finalSnapshotName() {
        return Optional.ofNullable(this.finalSnapshotName);
    }

    @Import(name="masterDatabaseName", required=true)
    private Output<String> masterDatabaseName;

    public Output<String> masterDatabaseName() {
        return this.masterDatabaseName;
    }

    @Import(name="masterPassword", required=true)
    private Output<String> masterPassword;

    public Output<String> masterPassword() {
        return this.masterPassword;
    }

    @Import(name="masterUsername", required=true)
    private Output<String> masterUsername;

    public Output<String> masterUsername() {
        return this.masterUsername;
    }

    @Import(name="preferredBackupWindow")
    private @Nullable Output<String> preferredBackupWindow;

    public Optional<Output<String>> preferredBackupWindow() {
        return Optional.ofNullable(this.preferredBackupWindow);
    }

    @Import(name="preferredMaintenanceWindow")
    private @Nullable Output<String> preferredMaintenanceWindow;

    public Optional<Output<String>> preferredMaintenanceWindow() {
        return Optional.ofNullable(this.preferredMaintenanceWindow);
    }

    @Import(name="publiclyAccessible")
    private @Nullable Output<Boolean> publiclyAccessible;

    public Optional<Output<Boolean>> publiclyAccessible() {
        return Optional.ofNullable(this.publiclyAccessible);
    }

    @Import(name="relationalDatabaseName", required=true)
    private Output<String> relationalDatabaseName;

    public Output<String> relationalDatabaseName() {
        return this.relationalDatabaseName;
    }

    @Import(name="skipFinalSnapshot")
    private @Nullable Output<Boolean> skipFinalSnapshot;

    public Optional<Output<Boolean>> skipFinalSnapshot() {
        return Optional.ofNullable(this.skipFinalSnapshot);
    }

    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private DatabaseArgs() {}

    private DatabaseArgs(DatabaseArgs $) {
        this.applyImmediately = $.applyImmediately;
        this.availabilityZone = $.availabilityZone;
        this.backupRetentionEnabled = $.backupRetentionEnabled;
        this.blueprintId = $.blueprintId;
        this.bundleId = $.bundleId;
        this.finalSnapshotName = $.finalSnapshotName;
        this.masterDatabaseName = $.masterDatabaseName;
        this.masterPassword = $.masterPassword;
        this.masterUsername = $.masterUsername;
        this.preferredBackupWindow = $.preferredBackupWindow;
        this.preferredMaintenanceWindow = $.preferredMaintenanceWindow;
        this.publiclyAccessible = $.publiclyAccessible;
        this.relationalDatabaseName = $.relationalDatabaseName;
        this.skipFinalSnapshot = $.skipFinalSnapshot;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatabaseArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatabaseArgs $;

        public Builder() {
            $ = new DatabaseArgs();
        }

        public Builder(DatabaseArgs defaults) {
            $ = new DatabaseArgs(Objects.requireNonNull(defaults));
        }

        public Builder applyImmediately(@Nullable Output<Boolean> applyImmediately) {
            $.applyImmediately = applyImmediately;
            return this;
        }

        public Builder applyImmediately(Boolean applyImmediately) {
            return applyImmediately(Output.of(applyImmediately));
        }

        public Builder availabilityZone(@Nullable Output<String> availabilityZone) {
            $.availabilityZone = availabilityZone;
            return this;
        }

        public Builder availabilityZone(String availabilityZone) {
            return availabilityZone(Output.of(availabilityZone));
        }

        public Builder backupRetentionEnabled(@Nullable Output<Boolean> backupRetentionEnabled) {
            $.backupRetentionEnabled = backupRetentionEnabled;
            return this;
        }

        public Builder backupRetentionEnabled(Boolean backupRetentionEnabled) {
            return backupRetentionEnabled(Output.of(backupRetentionEnabled));
        }

        public Builder blueprintId(Output<String> blueprintId) {
            $.blueprintId = blueprintId;
            return this;
        }

        public Builder blueprintId(String blueprintId) {
            return blueprintId(Output.of(blueprintId));
        }

        public Builder bundleId(Output<String> bundleId) {
            $.bundleId = bundleId;
            return this;
        }

        public Builder bundleId(String bundleId) {
            return bundleId(Output.of(bundleId));
        }

        public Builder finalSnapshotName(@Nullable Output<String> finalSnapshotName) {
            $.finalSnapshotName = finalSnapshotName;
            return this;
        }

        public Builder finalSnapshotName(String finalSnapshotName) {
            return finalSnapshotName(Output.of(finalSnapshotName));
        }

        public Builder masterDatabaseName(Output<String> masterDatabaseName) {
            $.masterDatabaseName = masterDatabaseName;
            return this;
        }

        public Builder masterDatabaseName(String masterDatabaseName) {
            return masterDatabaseName(Output.of(masterDatabaseName));
        }

        public Builder masterPassword(Output<String> masterPassword) {
            $.masterPassword = masterPassword;
            return this;
        }

        public Builder masterPassword(String masterPassword) {
            return masterPassword(Output.of(masterPassword));
        }

        public Builder masterUsername(Output<String> masterUsername) {
            $.masterUsername = masterUsername;
            return this;
        }

        public Builder masterUsername(String masterUsername) {
            return masterUsername(Output.of(masterUsername));
        }

        public Builder preferredBackupWindow(@Nullable Output<String> preferredBackupWindow) {
            $.preferredBackupWindow = preferredBackupWindow;
            return this;
        }

        public Builder preferredBackupWindow(String preferredBackupWindow) {
            return preferredBackupWindow(Output.of(preferredBackupWindow));
        }

        public Builder preferredMaintenanceWindow(@Nullable Output<String> preferredMaintenanceWindow) {
            $.preferredMaintenanceWindow = preferredMaintenanceWindow;
            return this;
        }

        public Builder preferredMaintenanceWindow(String preferredMaintenanceWindow) {
            return preferredMaintenanceWindow(Output.of(preferredMaintenanceWindow));
        }

        public Builder publiclyAccessible(@Nullable Output<Boolean> publiclyAccessible) {
            $.publiclyAccessible = publiclyAccessible;
            return this;
        }

        public Builder publiclyAccessible(Boolean publiclyAccessible) {
            return publiclyAccessible(Output.of(publiclyAccessible));
        }

        public Builder relationalDatabaseName(Output<String> relationalDatabaseName) {
            $.relationalDatabaseName = relationalDatabaseName;
            return this;
        }

        public Builder relationalDatabaseName(String relationalDatabaseName) {
            return relationalDatabaseName(Output.of(relationalDatabaseName));
        }

        public Builder skipFinalSnapshot(@Nullable Output<Boolean> skipFinalSnapshot) {
            $.skipFinalSnapshot = skipFinalSnapshot;
            return this;
        }

        public Builder skipFinalSnapshot(Boolean skipFinalSnapshot) {
            return skipFinalSnapshot(Output.of(skipFinalSnapshot));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public DatabaseArgs build() {
            $.blueprintId = Objects.requireNonNull($.blueprintId, "expected parameter 'blueprintId' to be non-null");
            $.bundleId = Objects.requireNonNull($.bundleId, "expected parameter 'bundleId' to be non-null");
            $.masterDatabaseName = Objects.requireNonNull($.masterDatabaseName, "expected parameter 'masterDatabaseName' to be non-null");
            $.masterPassword = Objects.requireNonNull($.masterPassword, "expected parameter 'masterPassword' to be non-null");
            $.masterUsername = Objects.requireNonNull($.masterUsername, "expected parameter 'masterUsername' to be non-null");
            $.relationalDatabaseName = Objects.requireNonNull($.relationalDatabaseName, "expected parameter 'relationalDatabaseName' to be non-null");
            return $;
        }
    }

}
