// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.dms.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EndpointMysqlSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final EndpointMysqlSettingsArgs Empty = new EndpointMysqlSettingsArgs();

    /**
     * Script to run immediately after AWS DMS connects to the endpoint.
     * 
     */
    @Import(name="afterConnectScript")
    private @Nullable Output<String> afterConnectScript;

    /**
     * @return Script to run immediately after AWS DMS connects to the endpoint.
     * 
     */
    public Optional<Output<String>> afterConnectScript() {
        return Optional.ofNullable(this.afterConnectScript);
    }

    /**
     * Authentication method to use. Valid values: `password`, `iam`.
     * 
     */
    @Import(name="authenticationMethod")
    private @Nullable Output<String> authenticationMethod;

    /**
     * @return Authentication method to use. Valid values: `password`, `iam`.
     * 
     */
    public Optional<Output<String>> authenticationMethod() {
        return Optional.ofNullable(this.authenticationMethod);
    }

    /**
     * Whether to clean and recreate table metadata information on the replication instance when a mismatch occurs.
     * 
     */
    @Import(name="cleanSourceMetadataOnMismatch")
    private @Nullable Output<Boolean> cleanSourceMetadataOnMismatch;

    /**
     * @return Whether to clean and recreate table metadata information on the replication instance when a mismatch occurs.
     * 
     */
    public Optional<Output<Boolean>> cleanSourceMetadataOnMismatch() {
        return Optional.ofNullable(this.cleanSourceMetadataOnMismatch);
    }

    /**
     * Time interval to check the binary log for new changes/events when the database is idle. Default is `5`.
     * 
     */
    @Import(name="eventsPollInterval")
    private @Nullable Output<Integer> eventsPollInterval;

    /**
     * @return Time interval to check the binary log for new changes/events when the database is idle. Default is `5`.
     * 
     */
    public Optional<Output<Integer>> eventsPollInterval() {
        return Optional.ofNullable(this.eventsPollInterval);
    }

    /**
     * Client statement timeout (in seconds) for a MySQL source endpoint.
     * 
     */
    @Import(name="executeTimeout")
    private @Nullable Output<Integer> executeTimeout;

    /**
     * @return Client statement timeout (in seconds) for a MySQL source endpoint.
     * 
     */
    public Optional<Output<Integer>> executeTimeout() {
        return Optional.ofNullable(this.executeTimeout);
    }

    /**
     * Maximum size (in KB) of any .csv file used to transfer data to a MySQL-compatible database.
     * 
     */
    @Import(name="maxFileSize")
    private @Nullable Output<Integer> maxFileSize;

    /**
     * @return Maximum size (in KB) of any .csv file used to transfer data to a MySQL-compatible database.
     * 
     */
    public Optional<Output<Integer>> maxFileSize() {
        return Optional.ofNullable(this.maxFileSize);
    }

    /**
     * Number of threads to use to load the data into the MySQL-compatible target database.
     * 
     */
    @Import(name="parallelLoadThreads")
    private @Nullable Output<Integer> parallelLoadThreads;

    /**
     * @return Number of threads to use to load the data into the MySQL-compatible target database.
     * 
     */
    public Optional<Output<Integer>> parallelLoadThreads() {
        return Optional.ofNullable(this.parallelLoadThreads);
    }

    /**
     * Time zone for the source MySQL database.
     * 
     */
    @Import(name="serverTimezone")
    private @Nullable Output<String> serverTimezone;

    /**
     * @return Time zone for the source MySQL database.
     * 
     */
    public Optional<Output<String>> serverTimezone() {
        return Optional.ofNullable(this.serverTimezone);
    }

    /**
     * ARN of the IAM role to authenticate when connecting to the endpoint.
     * 
     */
    @Import(name="serviceAccessRoleArn")
    private @Nullable Output<String> serviceAccessRoleArn;

    /**
     * @return ARN of the IAM role to authenticate when connecting to the endpoint.
     * 
     */
    public Optional<Output<String>> serviceAccessRoleArn() {
        return Optional.ofNullable(this.serviceAccessRoleArn);
    }

    /**
     * Where to migrate source tables on the target. Valid values are `specific-database` and `multiple-databases`.
     * 
     */
    @Import(name="targetDbType")
    private @Nullable Output<String> targetDbType;

    /**
     * @return Where to migrate source tables on the target. Valid values are `specific-database` and `multiple-databases`.
     * 
     */
    public Optional<Output<String>> targetDbType() {
        return Optional.ofNullable(this.targetDbType);
    }

    private EndpointMysqlSettingsArgs() {}

    private EndpointMysqlSettingsArgs(EndpointMysqlSettingsArgs $) {
        this.afterConnectScript = $.afterConnectScript;
        this.authenticationMethod = $.authenticationMethod;
        this.cleanSourceMetadataOnMismatch = $.cleanSourceMetadataOnMismatch;
        this.eventsPollInterval = $.eventsPollInterval;
        this.executeTimeout = $.executeTimeout;
        this.maxFileSize = $.maxFileSize;
        this.parallelLoadThreads = $.parallelLoadThreads;
        this.serverTimezone = $.serverTimezone;
        this.serviceAccessRoleArn = $.serviceAccessRoleArn;
        this.targetDbType = $.targetDbType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EndpointMysqlSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EndpointMysqlSettingsArgs $;

        public Builder() {
            $ = new EndpointMysqlSettingsArgs();
        }

        public Builder(EndpointMysqlSettingsArgs defaults) {
            $ = new EndpointMysqlSettingsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param afterConnectScript Script to run immediately after AWS DMS connects to the endpoint.
         * 
         * @return builder
         * 
         */
        public Builder afterConnectScript(@Nullable Output<String> afterConnectScript) {
            $.afterConnectScript = afterConnectScript;
            return this;
        }

        /**
         * @param afterConnectScript Script to run immediately after AWS DMS connects to the endpoint.
         * 
         * @return builder
         * 
         */
        public Builder afterConnectScript(String afterConnectScript) {
            return afterConnectScript(Output.of(afterConnectScript));
        }

        /**
         * @param authenticationMethod Authentication method to use. Valid values: `password`, `iam`.
         * 
         * @return builder
         * 
         */
        public Builder authenticationMethod(@Nullable Output<String> authenticationMethod) {
            $.authenticationMethod = authenticationMethod;
            return this;
        }

        /**
         * @param authenticationMethod Authentication method to use. Valid values: `password`, `iam`.
         * 
         * @return builder
         * 
         */
        public Builder authenticationMethod(String authenticationMethod) {
            return authenticationMethod(Output.of(authenticationMethod));
        }

        /**
         * @param cleanSourceMetadataOnMismatch Whether to clean and recreate table metadata information on the replication instance when a mismatch occurs.
         * 
         * @return builder
         * 
         */
        public Builder cleanSourceMetadataOnMismatch(@Nullable Output<Boolean> cleanSourceMetadataOnMismatch) {
            $.cleanSourceMetadataOnMismatch = cleanSourceMetadataOnMismatch;
            return this;
        }

        /**
         * @param cleanSourceMetadataOnMismatch Whether to clean and recreate table metadata information on the replication instance when a mismatch occurs.
         * 
         * @return builder
         * 
         */
        public Builder cleanSourceMetadataOnMismatch(Boolean cleanSourceMetadataOnMismatch) {
            return cleanSourceMetadataOnMismatch(Output.of(cleanSourceMetadataOnMismatch));
        }

        /**
         * @param eventsPollInterval Time interval to check the binary log for new changes/events when the database is idle. Default is `5`.
         * 
         * @return builder
         * 
         */
        public Builder eventsPollInterval(@Nullable Output<Integer> eventsPollInterval) {
            $.eventsPollInterval = eventsPollInterval;
            return this;
        }

        /**
         * @param eventsPollInterval Time interval to check the binary log for new changes/events when the database is idle. Default is `5`.
         * 
         * @return builder
         * 
         */
        public Builder eventsPollInterval(Integer eventsPollInterval) {
            return eventsPollInterval(Output.of(eventsPollInterval));
        }

        /**
         * @param executeTimeout Client statement timeout (in seconds) for a MySQL source endpoint.
         * 
         * @return builder
         * 
         */
        public Builder executeTimeout(@Nullable Output<Integer> executeTimeout) {
            $.executeTimeout = executeTimeout;
            return this;
        }

        /**
         * @param executeTimeout Client statement timeout (in seconds) for a MySQL source endpoint.
         * 
         * @return builder
         * 
         */
        public Builder executeTimeout(Integer executeTimeout) {
            return executeTimeout(Output.of(executeTimeout));
        }

        /**
         * @param maxFileSize Maximum size (in KB) of any .csv file used to transfer data to a MySQL-compatible database.
         * 
         * @return builder
         * 
         */
        public Builder maxFileSize(@Nullable Output<Integer> maxFileSize) {
            $.maxFileSize = maxFileSize;
            return this;
        }

        /**
         * @param maxFileSize Maximum size (in KB) of any .csv file used to transfer data to a MySQL-compatible database.
         * 
         * @return builder
         * 
         */
        public Builder maxFileSize(Integer maxFileSize) {
            return maxFileSize(Output.of(maxFileSize));
        }

        /**
         * @param parallelLoadThreads Number of threads to use to load the data into the MySQL-compatible target database.
         * 
         * @return builder
         * 
         */
        public Builder parallelLoadThreads(@Nullable Output<Integer> parallelLoadThreads) {
            $.parallelLoadThreads = parallelLoadThreads;
            return this;
        }

        /**
         * @param parallelLoadThreads Number of threads to use to load the data into the MySQL-compatible target database.
         * 
         * @return builder
         * 
         */
        public Builder parallelLoadThreads(Integer parallelLoadThreads) {
            return parallelLoadThreads(Output.of(parallelLoadThreads));
        }

        /**
         * @param serverTimezone Time zone for the source MySQL database.
         * 
         * @return builder
         * 
         */
        public Builder serverTimezone(@Nullable Output<String> serverTimezone) {
            $.serverTimezone = serverTimezone;
            return this;
        }

        /**
         * @param serverTimezone Time zone for the source MySQL database.
         * 
         * @return builder
         * 
         */
        public Builder serverTimezone(String serverTimezone) {
            return serverTimezone(Output.of(serverTimezone));
        }

        /**
         * @param serviceAccessRoleArn ARN of the IAM role to authenticate when connecting to the endpoint.
         * 
         * @return builder
         * 
         */
        public Builder serviceAccessRoleArn(@Nullable Output<String> serviceAccessRoleArn) {
            $.serviceAccessRoleArn = serviceAccessRoleArn;
            return this;
        }

        /**
         * @param serviceAccessRoleArn ARN of the IAM role to authenticate when connecting to the endpoint.
         * 
         * @return builder
         * 
         */
        public Builder serviceAccessRoleArn(String serviceAccessRoleArn) {
            return serviceAccessRoleArn(Output.of(serviceAccessRoleArn));
        }

        /**
         * @param targetDbType Where to migrate source tables on the target. Valid values are `specific-database` and `multiple-databases`.
         * 
         * @return builder
         * 
         */
        public Builder targetDbType(@Nullable Output<String> targetDbType) {
            $.targetDbType = targetDbType;
            return this;
        }

        /**
         * @param targetDbType Where to migrate source tables on the target. Valid values are `specific-database` and `multiple-databases`.
         * 
         * @return builder
         * 
         */
        public Builder targetDbType(String targetDbType) {
            return targetDbType(Output.of(targetDbType));
        }

        public EndpointMysqlSettingsArgs build() {
            return $;
        }
    }

}
