// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.glue.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class CatalogDatabaseTargetDatabaseArgs extends com.pulumi.resources.ResourceArgs {

    public static final CatalogDatabaseTargetDatabaseArgs Empty = new CatalogDatabaseTargetDatabaseArgs();

    @Import(name="catalogId", required=true)
    private Output<String> catalogId;

    public Output<String> catalogId() {
        return this.catalogId;
    }

    @Import(name="databaseName", required=true)
    private Output<String> databaseName;

    public Output<String> databaseName() {
        return this.databaseName;
    }

    private CatalogDatabaseTargetDatabaseArgs() {}

    private CatalogDatabaseTargetDatabaseArgs(CatalogDatabaseTargetDatabaseArgs $) {
        this.catalogId = $.catalogId;
        this.databaseName = $.databaseName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CatalogDatabaseTargetDatabaseArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CatalogDatabaseTargetDatabaseArgs $;

        public Builder() {
            $ = new CatalogDatabaseTargetDatabaseArgs();
        }

        public Builder(CatalogDatabaseTargetDatabaseArgs defaults) {
            $ = new CatalogDatabaseTargetDatabaseArgs(Objects.requireNonNull(defaults));
        }

        public Builder catalogId(Output<String> catalogId) {
            $.catalogId = catalogId;
            return this;
        }

        public Builder catalogId(String catalogId) {
            return catalogId(Output.of(catalogId));
        }

        public Builder databaseName(Output<String> databaseName) {
            $.databaseName = databaseName;
            return this;
        }

        public Builder databaseName(String databaseName) {
            return databaseName(Output.of(databaseName));
        }

        public CatalogDatabaseTargetDatabaseArgs build() {
            $.catalogId = Objects.requireNonNull($.catalogId, "expected parameter 'catalogId' to be non-null");
            $.databaseName = Objects.requireNonNull($.databaseName, "expected parameter 'databaseName' to be non-null");
            return $;
        }
    }

}
