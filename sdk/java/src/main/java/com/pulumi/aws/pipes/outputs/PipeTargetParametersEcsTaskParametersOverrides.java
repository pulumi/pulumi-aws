// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.pipes.outputs;

import com.pulumi.aws.pipes.outputs.PipeTargetParametersEcsTaskParametersOverridesContainerOverride;
import com.pulumi.aws.pipes.outputs.PipeTargetParametersEcsTaskParametersOverridesEphemeralStorage;
import com.pulumi.aws.pipes.outputs.PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverride;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class PipeTargetParametersEcsTaskParametersOverrides {
    /**
     * @return One or more container overrides that are sent to a task. Detailed below.
     * 
     */
    private @Nullable List<PipeTargetParametersEcsTaskParametersOverridesContainerOverride> containerOverrides;
    /**
     * @return The number of cpu units reserved for the container, instead of the default value from the task definition. You must also specify a container name.
     * 
     */
    private @Nullable String cpu;
    /**
     * @return The ephemeral storage setting override for the task.  Detailed below.
     * 
     */
    private @Nullable PipeTargetParametersEcsTaskParametersOverridesEphemeralStorage ephemeralStorage;
    /**
     * @return The Amazon Resource Name (ARN) of the task execution IAM role override for the task.
     * 
     */
    private @Nullable String executionRoleArn;
    /**
     * @return List of Elastic Inference accelerator overrides for the task. Detailed below.
     * 
     */
    private @Nullable List<PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverride> inferenceAcceleratorOverrides;
    /**
     * @return The hard limit (in MiB) of memory to present to the container, instead of the default value from the task definition. If your container attempts to exceed the memory specified here, the container is killed. You must also specify a container name.
     * 
     */
    private @Nullable String memory;
    /**
     * @return The Amazon Resource Name (ARN) of the IAM role that containers in this task can assume. All containers in this task are granted the permissions that are specified in this role.
     * 
     */
    private @Nullable String taskRoleArn;

    private PipeTargetParametersEcsTaskParametersOverrides() {}
    /**
     * @return One or more container overrides that are sent to a task. Detailed below.
     * 
     */
    public List<PipeTargetParametersEcsTaskParametersOverridesContainerOverride> containerOverrides() {
        return this.containerOverrides == null ? List.of() : this.containerOverrides;
    }
    /**
     * @return The number of cpu units reserved for the container, instead of the default value from the task definition. You must also specify a container name.
     * 
     */
    public Optional<String> cpu() {
        return Optional.ofNullable(this.cpu);
    }
    /**
     * @return The ephemeral storage setting override for the task.  Detailed below.
     * 
     */
    public Optional<PipeTargetParametersEcsTaskParametersOverridesEphemeralStorage> ephemeralStorage() {
        return Optional.ofNullable(this.ephemeralStorage);
    }
    /**
     * @return The Amazon Resource Name (ARN) of the task execution IAM role override for the task.
     * 
     */
    public Optional<String> executionRoleArn() {
        return Optional.ofNullable(this.executionRoleArn);
    }
    /**
     * @return List of Elastic Inference accelerator overrides for the task. Detailed below.
     * 
     */
    public List<PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverride> inferenceAcceleratorOverrides() {
        return this.inferenceAcceleratorOverrides == null ? List.of() : this.inferenceAcceleratorOverrides;
    }
    /**
     * @return The hard limit (in MiB) of memory to present to the container, instead of the default value from the task definition. If your container attempts to exceed the memory specified here, the container is killed. You must also specify a container name.
     * 
     */
    public Optional<String> memory() {
        return Optional.ofNullable(this.memory);
    }
    /**
     * @return The Amazon Resource Name (ARN) of the IAM role that containers in this task can assume. All containers in this task are granted the permissions that are specified in this role.
     * 
     */
    public Optional<String> taskRoleArn() {
        return Optional.ofNullable(this.taskRoleArn);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PipeTargetParametersEcsTaskParametersOverrides defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<PipeTargetParametersEcsTaskParametersOverridesContainerOverride> containerOverrides;
        private @Nullable String cpu;
        private @Nullable PipeTargetParametersEcsTaskParametersOverridesEphemeralStorage ephemeralStorage;
        private @Nullable String executionRoleArn;
        private @Nullable List<PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverride> inferenceAcceleratorOverrides;
        private @Nullable String memory;
        private @Nullable String taskRoleArn;
        public Builder() {}
        public Builder(PipeTargetParametersEcsTaskParametersOverrides defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.containerOverrides = defaults.containerOverrides;
    	      this.cpu = defaults.cpu;
    	      this.ephemeralStorage = defaults.ephemeralStorage;
    	      this.executionRoleArn = defaults.executionRoleArn;
    	      this.inferenceAcceleratorOverrides = defaults.inferenceAcceleratorOverrides;
    	      this.memory = defaults.memory;
    	      this.taskRoleArn = defaults.taskRoleArn;
        }

        @CustomType.Setter
        public Builder containerOverrides(@Nullable List<PipeTargetParametersEcsTaskParametersOverridesContainerOverride> containerOverrides) {
            this.containerOverrides = containerOverrides;
            return this;
        }
        public Builder containerOverrides(PipeTargetParametersEcsTaskParametersOverridesContainerOverride... containerOverrides) {
            return containerOverrides(List.of(containerOverrides));
        }
        @CustomType.Setter
        public Builder cpu(@Nullable String cpu) {
            this.cpu = cpu;
            return this;
        }
        @CustomType.Setter
        public Builder ephemeralStorage(@Nullable PipeTargetParametersEcsTaskParametersOverridesEphemeralStorage ephemeralStorage) {
            this.ephemeralStorage = ephemeralStorage;
            return this;
        }
        @CustomType.Setter
        public Builder executionRoleArn(@Nullable String executionRoleArn) {
            this.executionRoleArn = executionRoleArn;
            return this;
        }
        @CustomType.Setter
        public Builder inferenceAcceleratorOverrides(@Nullable List<PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverride> inferenceAcceleratorOverrides) {
            this.inferenceAcceleratorOverrides = inferenceAcceleratorOverrides;
            return this;
        }
        public Builder inferenceAcceleratorOverrides(PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverride... inferenceAcceleratorOverrides) {
            return inferenceAcceleratorOverrides(List.of(inferenceAcceleratorOverrides));
        }
        @CustomType.Setter
        public Builder memory(@Nullable String memory) {
            this.memory = memory;
            return this;
        }
        @CustomType.Setter
        public Builder taskRoleArn(@Nullable String taskRoleArn) {
            this.taskRoleArn = taskRoleArn;
            return this;
        }
        public PipeTargetParametersEcsTaskParametersOverrides build() {
            final var _resultValue = new PipeTargetParametersEcsTaskParametersOverrides();
            _resultValue.containerOverrides = containerOverrides;
            _resultValue.cpu = cpu;
            _resultValue.ephemeralStorage = ephemeralStorage;
            _resultValue.executionRoleArn = executionRoleArn;
            _resultValue.inferenceAcceleratorOverrides = inferenceAcceleratorOverrides;
            _resultValue.memory = memory;
            _resultValue.taskRoleArn = taskRoleArn;
            return _resultValue;
        }
    }
}
