// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.bedrock.outputs;

import com.pulumi.aws.bedrock.outputs.AgentDataSourceVectorIngestionConfigurationChunkingConfigurationHierarchicalChunkingConfigurationLevelConfiguration;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.util.List;
import java.util.Objects;

@CustomType
public final class AgentDataSourceVectorIngestionConfigurationChunkingConfigurationHierarchicalChunkingConfiguration {
    /**
     * @return Maximum number of tokens to include in a chunk. Must contain two `level_configurations`. See `level_configurations` for details.
     * 
     */
    private List<AgentDataSourceVectorIngestionConfigurationChunkingConfigurationHierarchicalChunkingConfigurationLevelConfiguration> levelConfigurations;
    /**
     * @return The number of tokens to repeat across chunks in the same layer.
     * 
     */
    private Double overlapTokens;

    private AgentDataSourceVectorIngestionConfigurationChunkingConfigurationHierarchicalChunkingConfiguration() {}
    /**
     * @return Maximum number of tokens to include in a chunk. Must contain two `level_configurations`. See `level_configurations` for details.
     * 
     */
    public List<AgentDataSourceVectorIngestionConfigurationChunkingConfigurationHierarchicalChunkingConfigurationLevelConfiguration> levelConfigurations() {
        return this.levelConfigurations;
    }
    /**
     * @return The number of tokens to repeat across chunks in the same layer.
     * 
     */
    public Double overlapTokens() {
        return this.overlapTokens;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AgentDataSourceVectorIngestionConfigurationChunkingConfigurationHierarchicalChunkingConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<AgentDataSourceVectorIngestionConfigurationChunkingConfigurationHierarchicalChunkingConfigurationLevelConfiguration> levelConfigurations;
        private Double overlapTokens;
        public Builder() {}
        public Builder(AgentDataSourceVectorIngestionConfigurationChunkingConfigurationHierarchicalChunkingConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.levelConfigurations = defaults.levelConfigurations;
    	      this.overlapTokens = defaults.overlapTokens;
        }

        @CustomType.Setter
        public Builder levelConfigurations(List<AgentDataSourceVectorIngestionConfigurationChunkingConfigurationHierarchicalChunkingConfigurationLevelConfiguration> levelConfigurations) {
            if (levelConfigurations == null) {
              throw new MissingRequiredPropertyException("AgentDataSourceVectorIngestionConfigurationChunkingConfigurationHierarchicalChunkingConfiguration", "levelConfigurations");
            }
            this.levelConfigurations = levelConfigurations;
            return this;
        }
        public Builder levelConfigurations(AgentDataSourceVectorIngestionConfigurationChunkingConfigurationHierarchicalChunkingConfigurationLevelConfiguration... levelConfigurations) {
            return levelConfigurations(List.of(levelConfigurations));
        }
        @CustomType.Setter
        public Builder overlapTokens(Double overlapTokens) {
            if (overlapTokens == null) {
              throw new MissingRequiredPropertyException("AgentDataSourceVectorIngestionConfigurationChunkingConfigurationHierarchicalChunkingConfiguration", "overlapTokens");
            }
            this.overlapTokens = overlapTokens;
            return this;
        }
        public AgentDataSourceVectorIngestionConfigurationChunkingConfigurationHierarchicalChunkingConfiguration build() {
            final var _resultValue = new AgentDataSourceVectorIngestionConfigurationChunkingConfigurationHierarchicalChunkingConfiguration();
            _resultValue.levelConfigurations = levelConfigurations;
            _resultValue.overlapTokens = overlapTokens;
            return _resultValue;
        }
    }
}
