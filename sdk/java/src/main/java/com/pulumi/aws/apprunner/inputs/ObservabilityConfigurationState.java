// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.apprunner.inputs;

import com.pulumi.aws.apprunner.inputs.ObservabilityConfigurationTraceConfigurationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ObservabilityConfigurationState extends com.pulumi.resources.ResourceArgs {

    public static final ObservabilityConfigurationState Empty = new ObservabilityConfigurationState();

    /**
     * ARN of this observability configuration.
     * 
     */
    @Import(name="arn")
    private @Nullable Output<String> arn;

    /**
     * @return ARN of this observability configuration.
     * 
     */
    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    /**
     * Whether the observability configuration has the highest `observability_configuration_revision` among all configurations that share the same `observability_configuration_name`.
     * 
     */
    @Import(name="latest")
    private @Nullable Output<Boolean> latest;

    /**
     * @return Whether the observability configuration has the highest `observability_configuration_revision` among all configurations that share the same `observability_configuration_name`.
     * 
     */
    public Optional<Output<Boolean>> latest() {
        return Optional.ofNullable(this.latest);
    }

    /**
     * Name of the observability configuration.
     * 
     */
    @Import(name="observabilityConfigurationName")
    private @Nullable Output<String> observabilityConfigurationName;

    /**
     * @return Name of the observability configuration.
     * 
     */
    public Optional<Output<String>> observabilityConfigurationName() {
        return Optional.ofNullable(this.observabilityConfigurationName);
    }

    /**
     * The revision of this observability configuration.
     * 
     */
    @Import(name="observabilityConfigurationRevision")
    private @Nullable Output<Integer> observabilityConfigurationRevision;

    /**
     * @return The revision of this observability configuration.
     * 
     */
    public Optional<Output<Integer>> observabilityConfigurationRevision() {
        return Optional.ofNullable(this.observabilityConfigurationRevision);
    }

    /**
     * Current state of the observability configuration. An INACTIVE configuration revision has been deleted and can&#39;t be used. It is permanently removed some time after deletion.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Current state of the observability configuration. An INACTIVE configuration revision has been deleted and can&#39;t be used. It is permanently removed some time after deletion.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    /**
     * @return Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    /**
     * Configuration of the tracing feature within this observability configuration. If you don&#39;t specify it, App Runner doesn&#39;t enable tracing. See Trace Configuration below for more details.
     * 
     */
    @Import(name="traceConfiguration")
    private @Nullable Output<ObservabilityConfigurationTraceConfigurationArgs> traceConfiguration;

    /**
     * @return Configuration of the tracing feature within this observability configuration. If you don&#39;t specify it, App Runner doesn&#39;t enable tracing. See Trace Configuration below for more details.
     * 
     */
    public Optional<Output<ObservabilityConfigurationTraceConfigurationArgs>> traceConfiguration() {
        return Optional.ofNullable(this.traceConfiguration);
    }

    private ObservabilityConfigurationState() {}

    private ObservabilityConfigurationState(ObservabilityConfigurationState $) {
        this.arn = $.arn;
        this.latest = $.latest;
        this.observabilityConfigurationName = $.observabilityConfigurationName;
        this.observabilityConfigurationRevision = $.observabilityConfigurationRevision;
        this.status = $.status;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
        this.traceConfiguration = $.traceConfiguration;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ObservabilityConfigurationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ObservabilityConfigurationState $;

        public Builder() {
            $ = new ObservabilityConfigurationState();
        }

        public Builder(ObservabilityConfigurationState defaults) {
            $ = new ObservabilityConfigurationState(Objects.requireNonNull(defaults));
        }

        /**
         * @param arn ARN of this observability configuration.
         * 
         * @return builder
         * 
         */
        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        /**
         * @param arn ARN of this observability configuration.
         * 
         * @return builder
         * 
         */
        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        /**
         * @param latest Whether the observability configuration has the highest `observability_configuration_revision` among all configurations that share the same `observability_configuration_name`.
         * 
         * @return builder
         * 
         */
        public Builder latest(@Nullable Output<Boolean> latest) {
            $.latest = latest;
            return this;
        }

        /**
         * @param latest Whether the observability configuration has the highest `observability_configuration_revision` among all configurations that share the same `observability_configuration_name`.
         * 
         * @return builder
         * 
         */
        public Builder latest(Boolean latest) {
            return latest(Output.of(latest));
        }

        /**
         * @param observabilityConfigurationName Name of the observability configuration.
         * 
         * @return builder
         * 
         */
        public Builder observabilityConfigurationName(@Nullable Output<String> observabilityConfigurationName) {
            $.observabilityConfigurationName = observabilityConfigurationName;
            return this;
        }

        /**
         * @param observabilityConfigurationName Name of the observability configuration.
         * 
         * @return builder
         * 
         */
        public Builder observabilityConfigurationName(String observabilityConfigurationName) {
            return observabilityConfigurationName(Output.of(observabilityConfigurationName));
        }

        /**
         * @param observabilityConfigurationRevision The revision of this observability configuration.
         * 
         * @return builder
         * 
         */
        public Builder observabilityConfigurationRevision(@Nullable Output<Integer> observabilityConfigurationRevision) {
            $.observabilityConfigurationRevision = observabilityConfigurationRevision;
            return this;
        }

        /**
         * @param observabilityConfigurationRevision The revision of this observability configuration.
         * 
         * @return builder
         * 
         */
        public Builder observabilityConfigurationRevision(Integer observabilityConfigurationRevision) {
            return observabilityConfigurationRevision(Output.of(observabilityConfigurationRevision));
        }

        /**
         * @param status Current state of the observability configuration. An INACTIVE configuration revision has been deleted and can&#39;t be used. It is permanently removed some time after deletion.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Current state of the observability configuration. An INACTIVE configuration revision has been deleted and can&#39;t be used. It is permanently removed some time after deletion.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param tags Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tagsAll Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
         * 
         * @return builder
         * 
         * @deprecated
         * Please use `tags` instead.
         * 
         */
        @Deprecated /* Please use `tags` instead. */
        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        /**
         * @param tagsAll Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
         * 
         * @return builder
         * 
         * @deprecated
         * Please use `tags` instead.
         * 
         */
        @Deprecated /* Please use `tags` instead. */
        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        /**
         * @param traceConfiguration Configuration of the tracing feature within this observability configuration. If you don&#39;t specify it, App Runner doesn&#39;t enable tracing. See Trace Configuration below for more details.
         * 
         * @return builder
         * 
         */
        public Builder traceConfiguration(@Nullable Output<ObservabilityConfigurationTraceConfigurationArgs> traceConfiguration) {
            $.traceConfiguration = traceConfiguration;
            return this;
        }

        /**
         * @param traceConfiguration Configuration of the tracing feature within this observability configuration. If you don&#39;t specify it, App Runner doesn&#39;t enable tracing. See Trace Configuration below for more details.
         * 
         * @return builder
         * 
         */
        public Builder traceConfiguration(ObservabilityConfigurationTraceConfigurationArgs traceConfiguration) {
            return traceConfiguration(Output.of(traceConfiguration));
        }

        public ObservabilityConfigurationState build() {
            return $;
        }
    }

}
