// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.apprunner.inputs;

import com.pulumi.aws.apprunner.inputs.ObservabilityConfigurationTraceConfigurationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ObservabilityConfigurationState extends com.pulumi.resources.ResourceArgs {

    public static final ObservabilityConfigurationState Empty = new ObservabilityConfigurationState();

    @Import(name="arn")
    private @Nullable Output<String> arn;

    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    @Import(name="latest")
    private @Nullable Output<Boolean> latest;

    public Optional<Output<Boolean>> latest() {
        return Optional.ofNullable(this.latest);
    }

    @Import(name="observabilityConfigurationName")
    private @Nullable Output<String> observabilityConfigurationName;

    public Optional<Output<String>> observabilityConfigurationName() {
        return Optional.ofNullable(this.observabilityConfigurationName);
    }

    @Import(name="observabilityConfigurationRevision")
    private @Nullable Output<Integer> observabilityConfigurationRevision;

    public Optional<Output<Integer>> observabilityConfigurationRevision() {
        return Optional.ofNullable(this.observabilityConfigurationRevision);
    }

    @Import(name="status")
    private @Nullable Output<String> status;

    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    @Import(name="traceConfiguration")
    private @Nullable Output<ObservabilityConfigurationTraceConfigurationArgs> traceConfiguration;

    public Optional<Output<ObservabilityConfigurationTraceConfigurationArgs>> traceConfiguration() {
        return Optional.ofNullable(this.traceConfiguration);
    }

    private ObservabilityConfigurationState() {}

    private ObservabilityConfigurationState(ObservabilityConfigurationState $) {
        this.arn = $.arn;
        this.latest = $.latest;
        this.observabilityConfigurationName = $.observabilityConfigurationName;
        this.observabilityConfigurationRevision = $.observabilityConfigurationRevision;
        this.status = $.status;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
        this.traceConfiguration = $.traceConfiguration;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ObservabilityConfigurationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ObservabilityConfigurationState $;

        public Builder() {
            $ = new ObservabilityConfigurationState();
        }

        public Builder(ObservabilityConfigurationState defaults) {
            $ = new ObservabilityConfigurationState(Objects.requireNonNull(defaults));
        }

        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        public Builder latest(@Nullable Output<Boolean> latest) {
            $.latest = latest;
            return this;
        }

        public Builder latest(Boolean latest) {
            return latest(Output.of(latest));
        }

        public Builder observabilityConfigurationName(@Nullable Output<String> observabilityConfigurationName) {
            $.observabilityConfigurationName = observabilityConfigurationName;
            return this;
        }

        public Builder observabilityConfigurationName(String observabilityConfigurationName) {
            return observabilityConfigurationName(Output.of(observabilityConfigurationName));
        }

        public Builder observabilityConfigurationRevision(@Nullable Output<Integer> observabilityConfigurationRevision) {
            $.observabilityConfigurationRevision = observabilityConfigurationRevision;
            return this;
        }

        public Builder observabilityConfigurationRevision(Integer observabilityConfigurationRevision) {
            return observabilityConfigurationRevision(Output.of(observabilityConfigurationRevision));
        }

        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        public Builder status(String status) {
            return status(Output.of(status));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        public Builder traceConfiguration(@Nullable Output<ObservabilityConfigurationTraceConfigurationArgs> traceConfiguration) {
            $.traceConfiguration = traceConfiguration;
            return this;
        }

        public Builder traceConfiguration(ObservabilityConfigurationTraceConfigurationArgs traceConfiguration) {
            return traceConfiguration(Output.of(traceConfiguration));
        }

        public ObservabilityConfigurationState build() {
            return $;
        }
    }

}
