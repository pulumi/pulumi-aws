// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.servicecatalog;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PortfolioShareArgs extends com.pulumi.resources.ResourceArgs {

    public static final PortfolioShareArgs Empty = new PortfolioShareArgs();

    @Import(name="acceptLanguage")
    private @Nullable Output<String> acceptLanguage;

    public Optional<Output<String>> acceptLanguage() {
        return Optional.ofNullable(this.acceptLanguage);
    }

    @Import(name="portfolioId", required=true)
    private Output<String> portfolioId;

    public Output<String> portfolioId() {
        return this.portfolioId;
    }

    @Import(name="principalId", required=true)
    private Output<String> principalId;

    public Output<String> principalId() {
        return this.principalId;
    }

    @Import(name="shareTagOptions")
    private @Nullable Output<Boolean> shareTagOptions;

    public Optional<Output<Boolean>> shareTagOptions() {
        return Optional.ofNullable(this.shareTagOptions);
    }

    @Import(name="type", required=true)
    private Output<String> type;

    public Output<String> type() {
        return this.type;
    }

    @Import(name="waitForAcceptance")
    private @Nullable Output<Boolean> waitForAcceptance;

    public Optional<Output<Boolean>> waitForAcceptance() {
        return Optional.ofNullable(this.waitForAcceptance);
    }

    private PortfolioShareArgs() {}

    private PortfolioShareArgs(PortfolioShareArgs $) {
        this.acceptLanguage = $.acceptLanguage;
        this.portfolioId = $.portfolioId;
        this.principalId = $.principalId;
        this.shareTagOptions = $.shareTagOptions;
        this.type = $.type;
        this.waitForAcceptance = $.waitForAcceptance;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PortfolioShareArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PortfolioShareArgs $;

        public Builder() {
            $ = new PortfolioShareArgs();
        }

        public Builder(PortfolioShareArgs defaults) {
            $ = new PortfolioShareArgs(Objects.requireNonNull(defaults));
        }

        public Builder acceptLanguage(@Nullable Output<String> acceptLanguage) {
            $.acceptLanguage = acceptLanguage;
            return this;
        }

        public Builder acceptLanguage(String acceptLanguage) {
            return acceptLanguage(Output.of(acceptLanguage));
        }

        public Builder portfolioId(Output<String> portfolioId) {
            $.portfolioId = portfolioId;
            return this;
        }

        public Builder portfolioId(String portfolioId) {
            return portfolioId(Output.of(portfolioId));
        }

        public Builder principalId(Output<String> principalId) {
            $.principalId = principalId;
            return this;
        }

        public Builder principalId(String principalId) {
            return principalId(Output.of(principalId));
        }

        public Builder shareTagOptions(@Nullable Output<Boolean> shareTagOptions) {
            $.shareTagOptions = shareTagOptions;
            return this;
        }

        public Builder shareTagOptions(Boolean shareTagOptions) {
            return shareTagOptions(Output.of(shareTagOptions));
        }

        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        public Builder type(String type) {
            return type(Output.of(type));
        }

        public Builder waitForAcceptance(@Nullable Output<Boolean> waitForAcceptance) {
            $.waitForAcceptance = waitForAcceptance;
            return this;
        }

        public Builder waitForAcceptance(Boolean waitForAcceptance) {
            return waitForAcceptance(Output.of(waitForAcceptance));
        }

        public PortfolioShareArgs build() {
            $.portfolioId = Objects.requireNonNull($.portfolioId, "expected parameter 'portfolioId' to be non-null");
            $.principalId = Objects.requireNonNull($.principalId, "expected parameter 'principalId' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
