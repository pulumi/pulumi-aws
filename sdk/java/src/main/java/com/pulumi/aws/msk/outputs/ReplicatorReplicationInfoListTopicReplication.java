// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.msk.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ReplicatorReplicationInfoListTopicReplication {
    /**
     * @return Whether to periodically configure remote topic ACLs to match their corresponding upstream topics.
     * 
     */
    private @Nullable Boolean copyAccessControlListsForTopics;
    /**
     * @return Whether to periodically configure remote topics to match their corresponding upstream topics.
     * 
     */
    private @Nullable Boolean copyTopicConfigurations;
    /**
     * @return Whether to periodically check for new topics and partitions.
     * 
     */
    private @Nullable Boolean detectAndCopyNewTopics;
    /**
     * @return List of regular expression patterns indicating the topics that should not be replica.
     * 
     */
    private @Nullable List<String> topicsToExcludes;
    /**
     * @return List of regular expression patterns indicating the topics to copy.
     * 
     */
    private List<String> topicsToReplicates;

    private ReplicatorReplicationInfoListTopicReplication() {}
    /**
     * @return Whether to periodically configure remote topic ACLs to match their corresponding upstream topics.
     * 
     */
    public Optional<Boolean> copyAccessControlListsForTopics() {
        return Optional.ofNullable(this.copyAccessControlListsForTopics);
    }
    /**
     * @return Whether to periodically configure remote topics to match their corresponding upstream topics.
     * 
     */
    public Optional<Boolean> copyTopicConfigurations() {
        return Optional.ofNullable(this.copyTopicConfigurations);
    }
    /**
     * @return Whether to periodically check for new topics and partitions.
     * 
     */
    public Optional<Boolean> detectAndCopyNewTopics() {
        return Optional.ofNullable(this.detectAndCopyNewTopics);
    }
    /**
     * @return List of regular expression patterns indicating the topics that should not be replica.
     * 
     */
    public List<String> topicsToExcludes() {
        return this.topicsToExcludes == null ? List.of() : this.topicsToExcludes;
    }
    /**
     * @return List of regular expression patterns indicating the topics to copy.
     * 
     */
    public List<String> topicsToReplicates() {
        return this.topicsToReplicates;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ReplicatorReplicationInfoListTopicReplication defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean copyAccessControlListsForTopics;
        private @Nullable Boolean copyTopicConfigurations;
        private @Nullable Boolean detectAndCopyNewTopics;
        private @Nullable List<String> topicsToExcludes;
        private List<String> topicsToReplicates;
        public Builder() {}
        public Builder(ReplicatorReplicationInfoListTopicReplication defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.copyAccessControlListsForTopics = defaults.copyAccessControlListsForTopics;
    	      this.copyTopicConfigurations = defaults.copyTopicConfigurations;
    	      this.detectAndCopyNewTopics = defaults.detectAndCopyNewTopics;
    	      this.topicsToExcludes = defaults.topicsToExcludes;
    	      this.topicsToReplicates = defaults.topicsToReplicates;
        }

        @CustomType.Setter
        public Builder copyAccessControlListsForTopics(@Nullable Boolean copyAccessControlListsForTopics) {

            this.copyAccessControlListsForTopics = copyAccessControlListsForTopics;
            return this;
        }
        @CustomType.Setter
        public Builder copyTopicConfigurations(@Nullable Boolean copyTopicConfigurations) {

            this.copyTopicConfigurations = copyTopicConfigurations;
            return this;
        }
        @CustomType.Setter
        public Builder detectAndCopyNewTopics(@Nullable Boolean detectAndCopyNewTopics) {

            this.detectAndCopyNewTopics = detectAndCopyNewTopics;
            return this;
        }
        @CustomType.Setter
        public Builder topicsToExcludes(@Nullable List<String> topicsToExcludes) {

            this.topicsToExcludes = topicsToExcludes;
            return this;
        }
        public Builder topicsToExcludes(String... topicsToExcludes) {
            return topicsToExcludes(List.of(topicsToExcludes));
        }
        @CustomType.Setter
        public Builder topicsToReplicates(List<String> topicsToReplicates) {
            if (topicsToReplicates == null) {
              throw new MissingRequiredPropertyException("ReplicatorReplicationInfoListTopicReplication", "topicsToReplicates");
            }
            this.topicsToReplicates = topicsToReplicates;
            return this;
        }
        public Builder topicsToReplicates(String... topicsToReplicates) {
            return topicsToReplicates(List.of(topicsToReplicates));
        }
        public ReplicatorReplicationInfoListTopicReplication build() {
            final var _resultValue = new ReplicatorReplicationInfoListTopicReplication();
            _resultValue.copyAccessControlListsForTopics = copyAccessControlListsForTopics;
            _resultValue.copyTopicConfigurations = copyTopicConfigurations;
            _resultValue.detectAndCopyNewTopics = detectAndCopyNewTopics;
            _resultValue.topicsToExcludes = topicsToExcludes;
            _resultValue.topicsToReplicates = topicsToReplicates;
            return _resultValue;
        }
    }
}
