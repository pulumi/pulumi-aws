// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ecr.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class RepositoryCreationTemplateImageTagMutabilityExclusionFilterArgs extends com.pulumi.resources.ResourceArgs {

    public static final RepositoryCreationTemplateImageTagMutabilityExclusionFilterArgs Empty = new RepositoryCreationTemplateImageTagMutabilityExclusionFilterArgs();

    /**
     * The filter pattern to use for excluding image tags from the mutability setting. Must contain only letters, numbers, and special characters (._*-). Each filter can be up to 128 characters long and can contain a maximum of 2 wildcards (*).
     * 
     */
    @Import(name="filter", required=true)
    private Output<String> filter;

    /**
     * @return The filter pattern to use for excluding image tags from the mutability setting. Must contain only letters, numbers, and special characters (._*-). Each filter can be up to 128 characters long and can contain a maximum of 2 wildcards (*).
     * 
     */
    public Output<String> filter() {
        return this.filter;
    }

    /**
     * The type of filter to use. Must be `WILDCARD`.
     * 
     */
    @Import(name="filterType", required=true)
    private Output<String> filterType;

    /**
     * @return The type of filter to use. Must be `WILDCARD`.
     * 
     */
    public Output<String> filterType() {
        return this.filterType;
    }

    private RepositoryCreationTemplateImageTagMutabilityExclusionFilterArgs() {}

    private RepositoryCreationTemplateImageTagMutabilityExclusionFilterArgs(RepositoryCreationTemplateImageTagMutabilityExclusionFilterArgs $) {
        this.filter = $.filter;
        this.filterType = $.filterType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RepositoryCreationTemplateImageTagMutabilityExclusionFilterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RepositoryCreationTemplateImageTagMutabilityExclusionFilterArgs $;

        public Builder() {
            $ = new RepositoryCreationTemplateImageTagMutabilityExclusionFilterArgs();
        }

        public Builder(RepositoryCreationTemplateImageTagMutabilityExclusionFilterArgs defaults) {
            $ = new RepositoryCreationTemplateImageTagMutabilityExclusionFilterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param filter The filter pattern to use for excluding image tags from the mutability setting. Must contain only letters, numbers, and special characters (._*-). Each filter can be up to 128 characters long and can contain a maximum of 2 wildcards (*).
         * 
         * @return builder
         * 
         */
        public Builder filter(Output<String> filter) {
            $.filter = filter;
            return this;
        }

        /**
         * @param filter The filter pattern to use for excluding image tags from the mutability setting. Must contain only letters, numbers, and special characters (._*-). Each filter can be up to 128 characters long and can contain a maximum of 2 wildcards (*).
         * 
         * @return builder
         * 
         */
        public Builder filter(String filter) {
            return filter(Output.of(filter));
        }

        /**
         * @param filterType The type of filter to use. Must be `WILDCARD`.
         * 
         * @return builder
         * 
         */
        public Builder filterType(Output<String> filterType) {
            $.filterType = filterType;
            return this;
        }

        /**
         * @param filterType The type of filter to use. Must be `WILDCARD`.
         * 
         * @return builder
         * 
         */
        public Builder filterType(String filterType) {
            return filterType(Output.of(filterType));
        }

        public RepositoryCreationTemplateImageTagMutabilityExclusionFilterArgs build() {
            if ($.filter == null) {
                throw new MissingRequiredPropertyException("RepositoryCreationTemplateImageTagMutabilityExclusionFilterArgs", "filter");
            }
            if ($.filterType == null) {
                throw new MissingRequiredPropertyException("RepositoryCreationTemplateImageTagMutabilityExclusionFilterArgs", "filterType");
            }
            return $;
        }
    }

}
