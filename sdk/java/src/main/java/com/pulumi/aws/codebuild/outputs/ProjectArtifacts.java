// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.codebuild.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ProjectArtifacts {
    private @Nullable String artifactIdentifier;
    private @Nullable String bucketOwnerAccess;
    private @Nullable Boolean encryptionDisabled;
    private @Nullable String location;
    private @Nullable String name;
    private @Nullable String namespaceType;
    private @Nullable Boolean overrideArtifactName;
    private @Nullable String packaging;
    private @Nullable String path;
    private String type;

    private ProjectArtifacts() {}
    public Optional<String> artifactIdentifier() {
        return Optional.ofNullable(this.artifactIdentifier);
    }
    public Optional<String> bucketOwnerAccess() {
        return Optional.ofNullable(this.bucketOwnerAccess);
    }
    public Optional<Boolean> encryptionDisabled() {
        return Optional.ofNullable(this.encryptionDisabled);
    }
    public Optional<String> location() {
        return Optional.ofNullable(this.location);
    }
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    public Optional<String> namespaceType() {
        return Optional.ofNullable(this.namespaceType);
    }
    public Optional<Boolean> overrideArtifactName() {
        return Optional.ofNullable(this.overrideArtifactName);
    }
    public Optional<String> packaging() {
        return Optional.ofNullable(this.packaging);
    }
    public Optional<String> path() {
        return Optional.ofNullable(this.path);
    }
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ProjectArtifacts defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String artifactIdentifier;
        private @Nullable String bucketOwnerAccess;
        private @Nullable Boolean encryptionDisabled;
        private @Nullable String location;
        private @Nullable String name;
        private @Nullable String namespaceType;
        private @Nullable Boolean overrideArtifactName;
        private @Nullable String packaging;
        private @Nullable String path;
        private String type;
        public Builder() {}
        public Builder(ProjectArtifacts defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.artifactIdentifier = defaults.artifactIdentifier;
    	      this.bucketOwnerAccess = defaults.bucketOwnerAccess;
    	      this.encryptionDisabled = defaults.encryptionDisabled;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.namespaceType = defaults.namespaceType;
    	      this.overrideArtifactName = defaults.overrideArtifactName;
    	      this.packaging = defaults.packaging;
    	      this.path = defaults.path;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder artifactIdentifier(@Nullable String artifactIdentifier) {
            this.artifactIdentifier = artifactIdentifier;
            return this;
        }
        @CustomType.Setter
        public Builder bucketOwnerAccess(@Nullable String bucketOwnerAccess) {
            this.bucketOwnerAccess = bucketOwnerAccess;
            return this;
        }
        @CustomType.Setter
        public Builder encryptionDisabled(@Nullable Boolean encryptionDisabled) {
            this.encryptionDisabled = encryptionDisabled;
            return this;
        }
        @CustomType.Setter
        public Builder location(@Nullable String location) {
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder namespaceType(@Nullable String namespaceType) {
            this.namespaceType = namespaceType;
            return this;
        }
        @CustomType.Setter
        public Builder overrideArtifactName(@Nullable Boolean overrideArtifactName) {
            this.overrideArtifactName = overrideArtifactName;
            return this;
        }
        @CustomType.Setter
        public Builder packaging(@Nullable String packaging) {
            this.packaging = packaging;
            return this;
        }
        @CustomType.Setter
        public Builder path(@Nullable String path) {
            this.path = path;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public ProjectArtifacts build() {
            final var o = new ProjectArtifacts();
            o.artifactIdentifier = artifactIdentifier;
            o.bucketOwnerAccess = bucketOwnerAccess;
            o.encryptionDisabled = encryptionDisabled;
            o.location = location;
            o.name = name;
            o.namespaceType = namespaceType;
            o.overrideArtifactName = overrideArtifactName;
            o.packaging = packaging;
            o.path = path;
            o.type = type;
            return o;
        }
    }
}
