// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.appmesh.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class VirtualNodeSpecListenerHealthCheck {
    /**
     * @return Number of consecutive successful health checks that must occur before declaring listener healthy.
     * 
     */
    private Integer healthyThreshold;
    /**
     * @return Time period in milliseconds between each health check execution.
     * 
     */
    private Integer intervalMillis;
    /**
     * @return Destination path for the health check request. This is only required if the specified protocol is `http` or `http2`.
     * 
     */
    private @Nullable String path;
    /**
     * @return Destination port for the health check request. This port must match the port defined in the `port_mapping` for the listener.
     * 
     */
    private @Nullable Integer port;
    /**
     * @return Protocol for the health check request. Valid values are `http`, `http2`, `tcp` and `grpc`.
     * 
     */
    private String protocol;
    /**
     * @return Amount of time to wait when receiving a response from the health check, in milliseconds.
     * 
     */
    private Integer timeoutMillis;
    /**
     * @return Number of consecutive failed health checks that must occur before declaring a virtual node unhealthy.
     * 
     */
    private Integer unhealthyThreshold;

    private VirtualNodeSpecListenerHealthCheck() {}
    /**
     * @return Number of consecutive successful health checks that must occur before declaring listener healthy.
     * 
     */
    public Integer healthyThreshold() {
        return this.healthyThreshold;
    }
    /**
     * @return Time period in milliseconds between each health check execution.
     * 
     */
    public Integer intervalMillis() {
        return this.intervalMillis;
    }
    /**
     * @return Destination path for the health check request. This is only required if the specified protocol is `http` or `http2`.
     * 
     */
    public Optional<String> path() {
        return Optional.ofNullable(this.path);
    }
    /**
     * @return Destination port for the health check request. This port must match the port defined in the `port_mapping` for the listener.
     * 
     */
    public Optional<Integer> port() {
        return Optional.ofNullable(this.port);
    }
    /**
     * @return Protocol for the health check request. Valid values are `http`, `http2`, `tcp` and `grpc`.
     * 
     */
    public String protocol() {
        return this.protocol;
    }
    /**
     * @return Amount of time to wait when receiving a response from the health check, in milliseconds.
     * 
     */
    public Integer timeoutMillis() {
        return this.timeoutMillis;
    }
    /**
     * @return Number of consecutive failed health checks that must occur before declaring a virtual node unhealthy.
     * 
     */
    public Integer unhealthyThreshold() {
        return this.unhealthyThreshold;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VirtualNodeSpecListenerHealthCheck defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer healthyThreshold;
        private Integer intervalMillis;
        private @Nullable String path;
        private @Nullable Integer port;
        private String protocol;
        private Integer timeoutMillis;
        private Integer unhealthyThreshold;
        public Builder() {}
        public Builder(VirtualNodeSpecListenerHealthCheck defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.healthyThreshold = defaults.healthyThreshold;
    	      this.intervalMillis = defaults.intervalMillis;
    	      this.path = defaults.path;
    	      this.port = defaults.port;
    	      this.protocol = defaults.protocol;
    	      this.timeoutMillis = defaults.timeoutMillis;
    	      this.unhealthyThreshold = defaults.unhealthyThreshold;
        }

        @CustomType.Setter
        public Builder healthyThreshold(Integer healthyThreshold) {
            if (healthyThreshold == null) {
              throw new MissingRequiredPropertyException("VirtualNodeSpecListenerHealthCheck", "healthyThreshold");
            }
            this.healthyThreshold = healthyThreshold;
            return this;
        }
        @CustomType.Setter
        public Builder intervalMillis(Integer intervalMillis) {
            if (intervalMillis == null) {
              throw new MissingRequiredPropertyException("VirtualNodeSpecListenerHealthCheck", "intervalMillis");
            }
            this.intervalMillis = intervalMillis;
            return this;
        }
        @CustomType.Setter
        public Builder path(@Nullable String path) {

            this.path = path;
            return this;
        }
        @CustomType.Setter
        public Builder port(@Nullable Integer port) {

            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder protocol(String protocol) {
            if (protocol == null) {
              throw new MissingRequiredPropertyException("VirtualNodeSpecListenerHealthCheck", "protocol");
            }
            this.protocol = protocol;
            return this;
        }
        @CustomType.Setter
        public Builder timeoutMillis(Integer timeoutMillis) {
            if (timeoutMillis == null) {
              throw new MissingRequiredPropertyException("VirtualNodeSpecListenerHealthCheck", "timeoutMillis");
            }
            this.timeoutMillis = timeoutMillis;
            return this;
        }
        @CustomType.Setter
        public Builder unhealthyThreshold(Integer unhealthyThreshold) {
            if (unhealthyThreshold == null) {
              throw new MissingRequiredPropertyException("VirtualNodeSpecListenerHealthCheck", "unhealthyThreshold");
            }
            this.unhealthyThreshold = unhealthyThreshold;
            return this;
        }
        public VirtualNodeSpecListenerHealthCheck build() {
            final var _resultValue = new VirtualNodeSpecListenerHealthCheck();
            _resultValue.healthyThreshold = healthyThreshold;
            _resultValue.intervalMillis = intervalMillis;
            _resultValue.path = path;
            _resultValue.port = port;
            _resultValue.protocol = protocol;
            _resultValue.timeoutMillis = timeoutMillis;
            _resultValue.unhealthyThreshold = unhealthyThreshold;
            return _resultValue;
        }
    }
}
