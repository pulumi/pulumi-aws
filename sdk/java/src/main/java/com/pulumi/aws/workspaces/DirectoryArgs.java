// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.workspaces;

import com.pulumi.aws.workspaces.inputs.DirectoryActiveDirectoryConfigArgs;
import com.pulumi.aws.workspaces.inputs.DirectoryCertificateBasedAuthPropertiesArgs;
import com.pulumi.aws.workspaces.inputs.DirectorySamlPropertiesArgs;
import com.pulumi.aws.workspaces.inputs.DirectorySelfServicePermissionsArgs;
import com.pulumi.aws.workspaces.inputs.DirectoryWorkspaceAccessPropertiesArgs;
import com.pulumi.aws.workspaces.inputs.DirectoryWorkspaceCreationPropertiesArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DirectoryArgs extends com.pulumi.resources.ResourceArgs {

    public static final DirectoryArgs Empty = new DirectoryArgs();

    /**
     * Configuration for Active Directory integration when `workspace_type` is set to `POOLS`. Defined below.
     * 
     */
    @Import(name="activeDirectoryConfig")
    private @Nullable Output<DirectoryActiveDirectoryConfigArgs> activeDirectoryConfig;

    /**
     * @return Configuration for Active Directory integration when `workspace_type` is set to `POOLS`. Defined below.
     * 
     */
    public Optional<Output<DirectoryActiveDirectoryConfigArgs>> activeDirectoryConfig() {
        return Optional.ofNullable(this.activeDirectoryConfig);
    }

    /**
     * Configuration of certificate-based authentication (CBA) integration. Requires SAML authentication to be enabled. Defined below.
     * 
     */
    @Import(name="certificateBasedAuthProperties")
    private @Nullable Output<DirectoryCertificateBasedAuthPropertiesArgs> certificateBasedAuthProperties;

    /**
     * @return Configuration of certificate-based authentication (CBA) integration. Requires SAML authentication to be enabled. Defined below.
     * 
     */
    public Optional<Output<DirectoryCertificateBasedAuthPropertiesArgs>> certificateBasedAuthProperties() {
        return Optional.ofNullable(this.certificateBasedAuthProperties);
    }

    /**
     * The directory identifier for registration in WorkSpaces service.
     * 
     */
    @Import(name="directoryId")
    private @Nullable Output<String> directoryId;

    /**
     * @return The directory identifier for registration in WorkSpaces service.
     * 
     */
    public Optional<Output<String>> directoryId() {
        return Optional.ofNullable(this.directoryId);
    }

    /**
     * The identifiers of the IP access control groups associated with the directory.
     * 
     */
    @Import(name="ipGroupIds")
    private @Nullable Output<List<String>> ipGroupIds;

    /**
     * @return The identifiers of the IP access control groups associated with the directory.
     * 
     */
    public Optional<Output<List<String>>> ipGroupIds() {
        return Optional.ofNullable(this.ipGroupIds);
    }

    /**
     * Configuration of SAML authentication integration. Defined below.
     * 
     */
    @Import(name="samlProperties")
    private @Nullable Output<DirectorySamlPropertiesArgs> samlProperties;

    /**
     * @return Configuration of SAML authentication integration. Defined below.
     * 
     */
    public Optional<Output<DirectorySamlPropertiesArgs>> samlProperties() {
        return Optional.ofNullable(this.samlProperties);
    }

    /**
     * Permissions to enable or disable self-service capabilities when `workspace_type` is set to `PERSONAL`.. Defined below.
     * 
     */
    @Import(name="selfServicePermissions")
    private @Nullable Output<DirectorySelfServicePermissionsArgs> selfServicePermissions;

    /**
     * @return Permissions to enable or disable self-service capabilities when `workspace_type` is set to `PERSONAL`.. Defined below.
     * 
     */
    public Optional<Output<DirectorySelfServicePermissionsArgs>> selfServicePermissions() {
        return Optional.ofNullable(this.selfServicePermissions);
    }

    /**
     * The identifiers of the subnets where the directory resides.
     * 
     */
    @Import(name="subnetIds")
    private @Nullable Output<List<String>> subnetIds;

    /**
     * @return The identifiers of the subnets where the directory resides.
     * 
     */
    public Optional<Output<List<String>>> subnetIds() {
        return Optional.ofNullable(this.subnetIds);
    }

    /**
     * A map of tags assigned to the WorkSpaces directory. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A map of tags assigned to the WorkSpaces directory. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Specifies the user identity type for the WorkSpaces directory. Valid values are `CUSTOMER_MANAGED`, `AWS_DIRECTORY_SERVICE`, `AWS_IAM_IDENTITY_CENTER`.
     * 
     * &gt; **Note:** When `workspace_type` is set to `POOLS`, the `directory_id` is automatically generated and cannot be manually set.
     * 
     */
    @Import(name="userIdentityType")
    private @Nullable Output<String> userIdentityType;

    /**
     * @return Specifies the user identity type for the WorkSpaces directory. Valid values are `CUSTOMER_MANAGED`, `AWS_DIRECTORY_SERVICE`, `AWS_IAM_IDENTITY_CENTER`.
     * 
     * &gt; **Note:** When `workspace_type` is set to `POOLS`, the `directory_id` is automatically generated and cannot be manually set.
     * 
     */
    public Optional<Output<String>> userIdentityType() {
        return Optional.ofNullable(this.userIdentityType);
    }

    /**
     * Specifies which devices and operating systems users can use to access their WorkSpaces. Defined below.
     * 
     */
    @Import(name="workspaceAccessProperties")
    private @Nullable Output<DirectoryWorkspaceAccessPropertiesArgs> workspaceAccessProperties;

    /**
     * @return Specifies which devices and operating systems users can use to access their WorkSpaces. Defined below.
     * 
     */
    public Optional<Output<DirectoryWorkspaceAccessPropertiesArgs>> workspaceAccessProperties() {
        return Optional.ofNullable(this.workspaceAccessProperties);
    }

    /**
     * Default properties that are used for creating WorkSpaces. Defined below.
     * 
     */
    @Import(name="workspaceCreationProperties")
    private @Nullable Output<DirectoryWorkspaceCreationPropertiesArgs> workspaceCreationProperties;

    /**
     * @return Default properties that are used for creating WorkSpaces. Defined below.
     * 
     */
    public Optional<Output<DirectoryWorkspaceCreationPropertiesArgs>> workspaceCreationProperties() {
        return Optional.ofNullable(this.workspaceCreationProperties);
    }

    /**
     * The description of the WorkSpaces directory when `workspace_type` is set to `POOLS`.
     * 
     */
    @Import(name="workspaceDirectoryDescription")
    private @Nullable Output<String> workspaceDirectoryDescription;

    /**
     * @return The description of the WorkSpaces directory when `workspace_type` is set to `POOLS`.
     * 
     */
    public Optional<Output<String>> workspaceDirectoryDescription() {
        return Optional.ofNullable(this.workspaceDirectoryDescription);
    }

    /**
     * The name of the WorkSpaces directory when `workspace_type` is set to `POOLS`.
     * 
     */
    @Import(name="workspaceDirectoryName")
    private @Nullable Output<String> workspaceDirectoryName;

    /**
     * @return The name of the WorkSpaces directory when `workspace_type` is set to `POOLS`.
     * 
     */
    public Optional<Output<String>> workspaceDirectoryName() {
        return Optional.ofNullable(this.workspaceDirectoryName);
    }

    /**
     * Specifies the type of WorkSpaces directory. Valid values are `PERSONAL` and `POOLS`. Default is `PERSONAL`.
     * 
     */
    @Import(name="workspaceType")
    private @Nullable Output<String> workspaceType;

    /**
     * @return Specifies the type of WorkSpaces directory. Valid values are `PERSONAL` and `POOLS`. Default is `PERSONAL`.
     * 
     */
    public Optional<Output<String>> workspaceType() {
        return Optional.ofNullable(this.workspaceType);
    }

    private DirectoryArgs() {}

    private DirectoryArgs(DirectoryArgs $) {
        this.activeDirectoryConfig = $.activeDirectoryConfig;
        this.certificateBasedAuthProperties = $.certificateBasedAuthProperties;
        this.directoryId = $.directoryId;
        this.ipGroupIds = $.ipGroupIds;
        this.samlProperties = $.samlProperties;
        this.selfServicePermissions = $.selfServicePermissions;
        this.subnetIds = $.subnetIds;
        this.tags = $.tags;
        this.userIdentityType = $.userIdentityType;
        this.workspaceAccessProperties = $.workspaceAccessProperties;
        this.workspaceCreationProperties = $.workspaceCreationProperties;
        this.workspaceDirectoryDescription = $.workspaceDirectoryDescription;
        this.workspaceDirectoryName = $.workspaceDirectoryName;
        this.workspaceType = $.workspaceType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DirectoryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DirectoryArgs $;

        public Builder() {
            $ = new DirectoryArgs();
        }

        public Builder(DirectoryArgs defaults) {
            $ = new DirectoryArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param activeDirectoryConfig Configuration for Active Directory integration when `workspace_type` is set to `POOLS`. Defined below.
         * 
         * @return builder
         * 
         */
        public Builder activeDirectoryConfig(@Nullable Output<DirectoryActiveDirectoryConfigArgs> activeDirectoryConfig) {
            $.activeDirectoryConfig = activeDirectoryConfig;
            return this;
        }

        /**
         * @param activeDirectoryConfig Configuration for Active Directory integration when `workspace_type` is set to `POOLS`. Defined below.
         * 
         * @return builder
         * 
         */
        public Builder activeDirectoryConfig(DirectoryActiveDirectoryConfigArgs activeDirectoryConfig) {
            return activeDirectoryConfig(Output.of(activeDirectoryConfig));
        }

        /**
         * @param certificateBasedAuthProperties Configuration of certificate-based authentication (CBA) integration. Requires SAML authentication to be enabled. Defined below.
         * 
         * @return builder
         * 
         */
        public Builder certificateBasedAuthProperties(@Nullable Output<DirectoryCertificateBasedAuthPropertiesArgs> certificateBasedAuthProperties) {
            $.certificateBasedAuthProperties = certificateBasedAuthProperties;
            return this;
        }

        /**
         * @param certificateBasedAuthProperties Configuration of certificate-based authentication (CBA) integration. Requires SAML authentication to be enabled. Defined below.
         * 
         * @return builder
         * 
         */
        public Builder certificateBasedAuthProperties(DirectoryCertificateBasedAuthPropertiesArgs certificateBasedAuthProperties) {
            return certificateBasedAuthProperties(Output.of(certificateBasedAuthProperties));
        }

        /**
         * @param directoryId The directory identifier for registration in WorkSpaces service.
         * 
         * @return builder
         * 
         */
        public Builder directoryId(@Nullable Output<String> directoryId) {
            $.directoryId = directoryId;
            return this;
        }

        /**
         * @param directoryId The directory identifier for registration in WorkSpaces service.
         * 
         * @return builder
         * 
         */
        public Builder directoryId(String directoryId) {
            return directoryId(Output.of(directoryId));
        }

        /**
         * @param ipGroupIds The identifiers of the IP access control groups associated with the directory.
         * 
         * @return builder
         * 
         */
        public Builder ipGroupIds(@Nullable Output<List<String>> ipGroupIds) {
            $.ipGroupIds = ipGroupIds;
            return this;
        }

        /**
         * @param ipGroupIds The identifiers of the IP access control groups associated with the directory.
         * 
         * @return builder
         * 
         */
        public Builder ipGroupIds(List<String> ipGroupIds) {
            return ipGroupIds(Output.of(ipGroupIds));
        }

        /**
         * @param ipGroupIds The identifiers of the IP access control groups associated with the directory.
         * 
         * @return builder
         * 
         */
        public Builder ipGroupIds(String... ipGroupIds) {
            return ipGroupIds(List.of(ipGroupIds));
        }

        /**
         * @param samlProperties Configuration of SAML authentication integration. Defined below.
         * 
         * @return builder
         * 
         */
        public Builder samlProperties(@Nullable Output<DirectorySamlPropertiesArgs> samlProperties) {
            $.samlProperties = samlProperties;
            return this;
        }

        /**
         * @param samlProperties Configuration of SAML authentication integration. Defined below.
         * 
         * @return builder
         * 
         */
        public Builder samlProperties(DirectorySamlPropertiesArgs samlProperties) {
            return samlProperties(Output.of(samlProperties));
        }

        /**
         * @param selfServicePermissions Permissions to enable or disable self-service capabilities when `workspace_type` is set to `PERSONAL`.. Defined below.
         * 
         * @return builder
         * 
         */
        public Builder selfServicePermissions(@Nullable Output<DirectorySelfServicePermissionsArgs> selfServicePermissions) {
            $.selfServicePermissions = selfServicePermissions;
            return this;
        }

        /**
         * @param selfServicePermissions Permissions to enable or disable self-service capabilities when `workspace_type` is set to `PERSONAL`.. Defined below.
         * 
         * @return builder
         * 
         */
        public Builder selfServicePermissions(DirectorySelfServicePermissionsArgs selfServicePermissions) {
            return selfServicePermissions(Output.of(selfServicePermissions));
        }

        /**
         * @param subnetIds The identifiers of the subnets where the directory resides.
         * 
         * @return builder
         * 
         */
        public Builder subnetIds(@Nullable Output<List<String>> subnetIds) {
            $.subnetIds = subnetIds;
            return this;
        }

        /**
         * @param subnetIds The identifiers of the subnets where the directory resides.
         * 
         * @return builder
         * 
         */
        public Builder subnetIds(List<String> subnetIds) {
            return subnetIds(Output.of(subnetIds));
        }

        /**
         * @param subnetIds The identifiers of the subnets where the directory resides.
         * 
         * @return builder
         * 
         */
        public Builder subnetIds(String... subnetIds) {
            return subnetIds(List.of(subnetIds));
        }

        /**
         * @param tags A map of tags assigned to the WorkSpaces directory. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A map of tags assigned to the WorkSpaces directory. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param userIdentityType Specifies the user identity type for the WorkSpaces directory. Valid values are `CUSTOMER_MANAGED`, `AWS_DIRECTORY_SERVICE`, `AWS_IAM_IDENTITY_CENTER`.
         * 
         * &gt; **Note:** When `workspace_type` is set to `POOLS`, the `directory_id` is automatically generated and cannot be manually set.
         * 
         * @return builder
         * 
         */
        public Builder userIdentityType(@Nullable Output<String> userIdentityType) {
            $.userIdentityType = userIdentityType;
            return this;
        }

        /**
         * @param userIdentityType Specifies the user identity type for the WorkSpaces directory. Valid values are `CUSTOMER_MANAGED`, `AWS_DIRECTORY_SERVICE`, `AWS_IAM_IDENTITY_CENTER`.
         * 
         * &gt; **Note:** When `workspace_type` is set to `POOLS`, the `directory_id` is automatically generated and cannot be manually set.
         * 
         * @return builder
         * 
         */
        public Builder userIdentityType(String userIdentityType) {
            return userIdentityType(Output.of(userIdentityType));
        }

        /**
         * @param workspaceAccessProperties Specifies which devices and operating systems users can use to access their WorkSpaces. Defined below.
         * 
         * @return builder
         * 
         */
        public Builder workspaceAccessProperties(@Nullable Output<DirectoryWorkspaceAccessPropertiesArgs> workspaceAccessProperties) {
            $.workspaceAccessProperties = workspaceAccessProperties;
            return this;
        }

        /**
         * @param workspaceAccessProperties Specifies which devices and operating systems users can use to access their WorkSpaces. Defined below.
         * 
         * @return builder
         * 
         */
        public Builder workspaceAccessProperties(DirectoryWorkspaceAccessPropertiesArgs workspaceAccessProperties) {
            return workspaceAccessProperties(Output.of(workspaceAccessProperties));
        }

        /**
         * @param workspaceCreationProperties Default properties that are used for creating WorkSpaces. Defined below.
         * 
         * @return builder
         * 
         */
        public Builder workspaceCreationProperties(@Nullable Output<DirectoryWorkspaceCreationPropertiesArgs> workspaceCreationProperties) {
            $.workspaceCreationProperties = workspaceCreationProperties;
            return this;
        }

        /**
         * @param workspaceCreationProperties Default properties that are used for creating WorkSpaces. Defined below.
         * 
         * @return builder
         * 
         */
        public Builder workspaceCreationProperties(DirectoryWorkspaceCreationPropertiesArgs workspaceCreationProperties) {
            return workspaceCreationProperties(Output.of(workspaceCreationProperties));
        }

        /**
         * @param workspaceDirectoryDescription The description of the WorkSpaces directory when `workspace_type` is set to `POOLS`.
         * 
         * @return builder
         * 
         */
        public Builder workspaceDirectoryDescription(@Nullable Output<String> workspaceDirectoryDescription) {
            $.workspaceDirectoryDescription = workspaceDirectoryDescription;
            return this;
        }

        /**
         * @param workspaceDirectoryDescription The description of the WorkSpaces directory when `workspace_type` is set to `POOLS`.
         * 
         * @return builder
         * 
         */
        public Builder workspaceDirectoryDescription(String workspaceDirectoryDescription) {
            return workspaceDirectoryDescription(Output.of(workspaceDirectoryDescription));
        }

        /**
         * @param workspaceDirectoryName The name of the WorkSpaces directory when `workspace_type` is set to `POOLS`.
         * 
         * @return builder
         * 
         */
        public Builder workspaceDirectoryName(@Nullable Output<String> workspaceDirectoryName) {
            $.workspaceDirectoryName = workspaceDirectoryName;
            return this;
        }

        /**
         * @param workspaceDirectoryName The name of the WorkSpaces directory when `workspace_type` is set to `POOLS`.
         * 
         * @return builder
         * 
         */
        public Builder workspaceDirectoryName(String workspaceDirectoryName) {
            return workspaceDirectoryName(Output.of(workspaceDirectoryName));
        }

        /**
         * @param workspaceType Specifies the type of WorkSpaces directory. Valid values are `PERSONAL` and `POOLS`. Default is `PERSONAL`.
         * 
         * @return builder
         * 
         */
        public Builder workspaceType(@Nullable Output<String> workspaceType) {
            $.workspaceType = workspaceType;
            return this;
        }

        /**
         * @param workspaceType Specifies the type of WorkSpaces directory. Valid values are `PERSONAL` and `POOLS`. Default is `PERSONAL`.
         * 
         * @return builder
         * 
         */
        public Builder workspaceType(String workspaceType) {
            return workspaceType(Output.of(workspaceType));
        }

        public DirectoryArgs build() {
            return $;
        }
    }

}
