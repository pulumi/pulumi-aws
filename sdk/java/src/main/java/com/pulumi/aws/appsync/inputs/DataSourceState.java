// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.appsync.inputs;

import com.pulumi.aws.appsync.inputs.DataSourceDynamodbConfigArgs;
import com.pulumi.aws.appsync.inputs.DataSourceElasticsearchConfigArgs;
import com.pulumi.aws.appsync.inputs.DataSourceHttpConfigArgs;
import com.pulumi.aws.appsync.inputs.DataSourceLambdaConfigArgs;
import com.pulumi.aws.appsync.inputs.DataSourceRelationalDatabaseConfigArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DataSourceState extends com.pulumi.resources.ResourceArgs {

    public static final DataSourceState Empty = new DataSourceState();

    @Import(name="apiId")
    private @Nullable Output<String> apiId;

    public Optional<Output<String>> apiId() {
        return Optional.ofNullable(this.apiId);
    }

    @Import(name="arn")
    private @Nullable Output<String> arn;

    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="dynamodbConfig")
    private @Nullable Output<DataSourceDynamodbConfigArgs> dynamodbConfig;

    public Optional<Output<DataSourceDynamodbConfigArgs>> dynamodbConfig() {
        return Optional.ofNullable(this.dynamodbConfig);
    }

    @Import(name="elasticsearchConfig")
    private @Nullable Output<DataSourceElasticsearchConfigArgs> elasticsearchConfig;

    public Optional<Output<DataSourceElasticsearchConfigArgs>> elasticsearchConfig() {
        return Optional.ofNullable(this.elasticsearchConfig);
    }

    @Import(name="httpConfig")
    private @Nullable Output<DataSourceHttpConfigArgs> httpConfig;

    public Optional<Output<DataSourceHttpConfigArgs>> httpConfig() {
        return Optional.ofNullable(this.httpConfig);
    }

    @Import(name="lambdaConfig")
    private @Nullable Output<DataSourceLambdaConfigArgs> lambdaConfig;

    public Optional<Output<DataSourceLambdaConfigArgs>> lambdaConfig() {
        return Optional.ofNullable(this.lambdaConfig);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="relationalDatabaseConfig")
    private @Nullable Output<DataSourceRelationalDatabaseConfigArgs> relationalDatabaseConfig;

    public Optional<Output<DataSourceRelationalDatabaseConfigArgs>> relationalDatabaseConfig() {
        return Optional.ofNullable(this.relationalDatabaseConfig);
    }

    @Import(name="serviceRoleArn")
    private @Nullable Output<String> serviceRoleArn;

    public Optional<Output<String>> serviceRoleArn() {
        return Optional.ofNullable(this.serviceRoleArn);
    }

    @Import(name="type")
    private @Nullable Output<String> type;

    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private DataSourceState() {}

    private DataSourceState(DataSourceState $) {
        this.apiId = $.apiId;
        this.arn = $.arn;
        this.description = $.description;
        this.dynamodbConfig = $.dynamodbConfig;
        this.elasticsearchConfig = $.elasticsearchConfig;
        this.httpConfig = $.httpConfig;
        this.lambdaConfig = $.lambdaConfig;
        this.name = $.name;
        this.relationalDatabaseConfig = $.relationalDatabaseConfig;
        this.serviceRoleArn = $.serviceRoleArn;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DataSourceState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DataSourceState $;

        public Builder() {
            $ = new DataSourceState();
        }

        public Builder(DataSourceState defaults) {
            $ = new DataSourceState(Objects.requireNonNull(defaults));
        }

        public Builder apiId(@Nullable Output<String> apiId) {
            $.apiId = apiId;
            return this;
        }

        public Builder apiId(String apiId) {
            return apiId(Output.of(apiId));
        }

        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder dynamodbConfig(@Nullable Output<DataSourceDynamodbConfigArgs> dynamodbConfig) {
            $.dynamodbConfig = dynamodbConfig;
            return this;
        }

        public Builder dynamodbConfig(DataSourceDynamodbConfigArgs dynamodbConfig) {
            return dynamodbConfig(Output.of(dynamodbConfig));
        }

        public Builder elasticsearchConfig(@Nullable Output<DataSourceElasticsearchConfigArgs> elasticsearchConfig) {
            $.elasticsearchConfig = elasticsearchConfig;
            return this;
        }

        public Builder elasticsearchConfig(DataSourceElasticsearchConfigArgs elasticsearchConfig) {
            return elasticsearchConfig(Output.of(elasticsearchConfig));
        }

        public Builder httpConfig(@Nullable Output<DataSourceHttpConfigArgs> httpConfig) {
            $.httpConfig = httpConfig;
            return this;
        }

        public Builder httpConfig(DataSourceHttpConfigArgs httpConfig) {
            return httpConfig(Output.of(httpConfig));
        }

        public Builder lambdaConfig(@Nullable Output<DataSourceLambdaConfigArgs> lambdaConfig) {
            $.lambdaConfig = lambdaConfig;
            return this;
        }

        public Builder lambdaConfig(DataSourceLambdaConfigArgs lambdaConfig) {
            return lambdaConfig(Output.of(lambdaConfig));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder relationalDatabaseConfig(@Nullable Output<DataSourceRelationalDatabaseConfigArgs> relationalDatabaseConfig) {
            $.relationalDatabaseConfig = relationalDatabaseConfig;
            return this;
        }

        public Builder relationalDatabaseConfig(DataSourceRelationalDatabaseConfigArgs relationalDatabaseConfig) {
            return relationalDatabaseConfig(Output.of(relationalDatabaseConfig));
        }

        public Builder serviceRoleArn(@Nullable Output<String> serviceRoleArn) {
            $.serviceRoleArn = serviceRoleArn;
            return this;
        }

        public Builder serviceRoleArn(String serviceRoleArn) {
            return serviceRoleArn(Output.of(serviceRoleArn));
        }

        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        public Builder type(String type) {
            return type(Output.of(type));
        }

        public DataSourceState build() {
            return $;
        }
    }

}
