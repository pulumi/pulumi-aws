// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.lightsail.inputs;

import com.pulumi.aws.lightsail.inputs.ContainerServicePublicDomainNamesCertificateArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.util.List;
import java.util.Objects;


public final class ContainerServicePublicDomainNamesArgs extends com.pulumi.resources.ResourceArgs {

    public static final ContainerServicePublicDomainNamesArgs Empty = new ContainerServicePublicDomainNamesArgs();

    @Import(name="certificates", required=true)
    private Output<List<ContainerServicePublicDomainNamesCertificateArgs>> certificates;

    public Output<List<ContainerServicePublicDomainNamesCertificateArgs>> certificates() {
        return this.certificates;
    }

    private ContainerServicePublicDomainNamesArgs() {}

    private ContainerServicePublicDomainNamesArgs(ContainerServicePublicDomainNamesArgs $) {
        this.certificates = $.certificates;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ContainerServicePublicDomainNamesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ContainerServicePublicDomainNamesArgs $;

        public Builder() {
            $ = new ContainerServicePublicDomainNamesArgs();
        }

        public Builder(ContainerServicePublicDomainNamesArgs defaults) {
            $ = new ContainerServicePublicDomainNamesArgs(Objects.requireNonNull(defaults));
        }

        public Builder certificates(Output<List<ContainerServicePublicDomainNamesCertificateArgs>> certificates) {
            $.certificates = certificates;
            return this;
        }

        public Builder certificates(List<ContainerServicePublicDomainNamesCertificateArgs> certificates) {
            return certificates(Output.of(certificates));
        }

        public Builder certificates(ContainerServicePublicDomainNamesCertificateArgs... certificates) {
            return certificates(List.of(certificates));
        }

        public ContainerServicePublicDomainNamesArgs build() {
            if ($.certificates == null) {
                throw new MissingRequiredPropertyException("ContainerServicePublicDomainNamesArgs", "certificates");
            }
            return $;
        }
    }

}
