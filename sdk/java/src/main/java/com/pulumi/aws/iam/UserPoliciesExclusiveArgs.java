// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.iam;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class UserPoliciesExclusiveArgs extends com.pulumi.resources.ResourceArgs {

    public static final UserPoliciesExclusiveArgs Empty = new UserPoliciesExclusiveArgs();

    /**
     * A list of inline policy names to be assigned to the user. Policies attached to this user but not configured in this argument will be removed.
     * 
     */
    @Import(name="policyNames", required=true)
    private Output<List<String>> policyNames;

    /**
     * @return A list of inline policy names to be assigned to the user. Policies attached to this user but not configured in this argument will be removed.
     * 
     */
    public Output<List<String>> policyNames() {
        return this.policyNames;
    }

    /**
     * IAM user name.
     * 
     */
    @Import(name="userName", required=true)
    private Output<String> userName;

    /**
     * @return IAM user name.
     * 
     */
    public Output<String> userName() {
        return this.userName;
    }

    private UserPoliciesExclusiveArgs() {}

    private UserPoliciesExclusiveArgs(UserPoliciesExclusiveArgs $) {
        this.policyNames = $.policyNames;
        this.userName = $.userName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UserPoliciesExclusiveArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UserPoliciesExclusiveArgs $;

        public Builder() {
            $ = new UserPoliciesExclusiveArgs();
        }

        public Builder(UserPoliciesExclusiveArgs defaults) {
            $ = new UserPoliciesExclusiveArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param policyNames A list of inline policy names to be assigned to the user. Policies attached to this user but not configured in this argument will be removed.
         * 
         * @return builder
         * 
         */
        public Builder policyNames(Output<List<String>> policyNames) {
            $.policyNames = policyNames;
            return this;
        }

        /**
         * @param policyNames A list of inline policy names to be assigned to the user. Policies attached to this user but not configured in this argument will be removed.
         * 
         * @return builder
         * 
         */
        public Builder policyNames(List<String> policyNames) {
            return policyNames(Output.of(policyNames));
        }

        /**
         * @param policyNames A list of inline policy names to be assigned to the user. Policies attached to this user but not configured in this argument will be removed.
         * 
         * @return builder
         * 
         */
        public Builder policyNames(String... policyNames) {
            return policyNames(List.of(policyNames));
        }

        /**
         * @param userName IAM user name.
         * 
         * @return builder
         * 
         */
        public Builder userName(Output<String> userName) {
            $.userName = userName;
            return this;
        }

        /**
         * @param userName IAM user name.
         * 
         * @return builder
         * 
         */
        public Builder userName(String userName) {
            return userName(Output.of(userName));
        }

        public UserPoliciesExclusiveArgs build() {
            if ($.policyNames == null) {
                throw new MissingRequiredPropertyException("UserPoliciesExclusiveArgs", "policyNames");
            }
            if ($.userName == null) {
                throw new MissingRequiredPropertyException("UserPoliciesExclusiveArgs", "userName");
            }
            return $;
        }
    }

}
