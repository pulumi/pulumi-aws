// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ecs.inputs;

import com.pulumi.aws.ecs.inputs.CapacityProviderManagedInstancesProviderInstanceLaunchTemplateInstanceRequirementsArgs;
import com.pulumi.aws.ecs.inputs.CapacityProviderManagedInstancesProviderInstanceLaunchTemplateNetworkConfigurationArgs;
import com.pulumi.aws.ecs.inputs.CapacityProviderManagedInstancesProviderInstanceLaunchTemplateStorageConfigurationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CapacityProviderManagedInstancesProviderInstanceLaunchTemplateArgs extends com.pulumi.resources.ResourceArgs {

    public static final CapacityProviderManagedInstancesProviderInstanceLaunchTemplateArgs Empty = new CapacityProviderManagedInstancesProviderInstanceLaunchTemplateArgs();

    /**
     * The Amazon Resource Name (ARN) of the instance profile that Amazon ECS applies to Amazon ECS Managed Instances. This instance profile must include the necessary permissions for your tasks to access AWS services and resources. For more information, see [Amazon ECS instance profile for Managed Instances](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/instance_IAM_role.html) in the Amazon ECS Developer Guide.
     * 
     */
    @Import(name="ec2InstanceProfileArn", required=true)
    private Output<String> ec2InstanceProfileArn;

    /**
     * @return The Amazon Resource Name (ARN) of the instance profile that Amazon ECS applies to Amazon ECS Managed Instances. This instance profile must include the necessary permissions for your tasks to access AWS services and resources. For more information, see [Amazon ECS instance profile for Managed Instances](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/instance_IAM_role.html) in the Amazon ECS Developer Guide.
     * 
     */
    public Output<String> ec2InstanceProfileArn() {
        return this.ec2InstanceProfileArn;
    }

    /**
     * The instance requirements. You can specify the instance types and instance requirements such as vCPU count, memory, network performance, and accelerator specifications. Amazon ECS automatically selects the instances that match the specified criteria. Detailed below.
     * 
     */
    @Import(name="instanceRequirements")
    private @Nullable Output<CapacityProviderManagedInstancesProviderInstanceLaunchTemplateInstanceRequirementsArgs> instanceRequirements;

    /**
     * @return The instance requirements. You can specify the instance types and instance requirements such as vCPU count, memory, network performance, and accelerator specifications. Amazon ECS automatically selects the instances that match the specified criteria. Detailed below.
     * 
     */
    public Optional<Output<CapacityProviderManagedInstancesProviderInstanceLaunchTemplateInstanceRequirementsArgs>> instanceRequirements() {
        return Optional.ofNullable(this.instanceRequirements);
    }

    /**
     * CloudWatch provides two categories of monitoring: basic monitoring and detailed monitoring. By default, your managed instance is configured for basic monitoring. You can optionally enable detailed monitoring to help you more quickly identify and act on operational issues. You can enable or turn off detailed monitoring at launch or when the managed instance is running or stopped. For more information, see [Detailed monitoring for Amazon ECS Managed Instances](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cloudwatch-metrics.html) in the Amazon ECS Developer Guide. Valid values are `BASIC` and `DETAILED`.
     * 
     */
    @Import(name="monitoring")
    private @Nullable Output<String> monitoring;

    /**
     * @return CloudWatch provides two categories of monitoring: basic monitoring and detailed monitoring. By default, your managed instance is configured for basic monitoring. You can optionally enable detailed monitoring to help you more quickly identify and act on operational issues. You can enable or turn off detailed monitoring at launch or when the managed instance is running or stopped. For more information, see [Detailed monitoring for Amazon ECS Managed Instances](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cloudwatch-metrics.html) in the Amazon ECS Developer Guide. Valid values are `BASIC` and `DETAILED`.
     * 
     */
    public Optional<Output<String>> monitoring() {
        return Optional.ofNullable(this.monitoring);
    }

    /**
     * The network configuration for Amazon ECS Managed Instances. This specifies the subnets and security groups that instances use for network connectivity. Detailed below.
     * 
     */
    @Import(name="networkConfiguration", required=true)
    private Output<CapacityProviderManagedInstancesProviderInstanceLaunchTemplateNetworkConfigurationArgs> networkConfiguration;

    /**
     * @return The network configuration for Amazon ECS Managed Instances. This specifies the subnets and security groups that instances use for network connectivity. Detailed below.
     * 
     */
    public Output<CapacityProviderManagedInstancesProviderInstanceLaunchTemplateNetworkConfigurationArgs> networkConfiguration() {
        return this.networkConfiguration;
    }

    /**
     * The storage configuration for Amazon ECS Managed Instances. This defines the root volume size and type for the instances. Detailed below.
     * 
     */
    @Import(name="storageConfiguration")
    private @Nullable Output<CapacityProviderManagedInstancesProviderInstanceLaunchTemplateStorageConfigurationArgs> storageConfiguration;

    /**
     * @return The storage configuration for Amazon ECS Managed Instances. This defines the root volume size and type for the instances. Detailed below.
     * 
     */
    public Optional<Output<CapacityProviderManagedInstancesProviderInstanceLaunchTemplateStorageConfigurationArgs>> storageConfiguration() {
        return Optional.ofNullable(this.storageConfiguration);
    }

    private CapacityProviderManagedInstancesProviderInstanceLaunchTemplateArgs() {}

    private CapacityProviderManagedInstancesProviderInstanceLaunchTemplateArgs(CapacityProviderManagedInstancesProviderInstanceLaunchTemplateArgs $) {
        this.ec2InstanceProfileArn = $.ec2InstanceProfileArn;
        this.instanceRequirements = $.instanceRequirements;
        this.monitoring = $.monitoring;
        this.networkConfiguration = $.networkConfiguration;
        this.storageConfiguration = $.storageConfiguration;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CapacityProviderManagedInstancesProviderInstanceLaunchTemplateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CapacityProviderManagedInstancesProviderInstanceLaunchTemplateArgs $;

        public Builder() {
            $ = new CapacityProviderManagedInstancesProviderInstanceLaunchTemplateArgs();
        }

        public Builder(CapacityProviderManagedInstancesProviderInstanceLaunchTemplateArgs defaults) {
            $ = new CapacityProviderManagedInstancesProviderInstanceLaunchTemplateArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param ec2InstanceProfileArn The Amazon Resource Name (ARN) of the instance profile that Amazon ECS applies to Amazon ECS Managed Instances. This instance profile must include the necessary permissions for your tasks to access AWS services and resources. For more information, see [Amazon ECS instance profile for Managed Instances](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/instance_IAM_role.html) in the Amazon ECS Developer Guide.
         * 
         * @return builder
         * 
         */
        public Builder ec2InstanceProfileArn(Output<String> ec2InstanceProfileArn) {
            $.ec2InstanceProfileArn = ec2InstanceProfileArn;
            return this;
        }

        /**
         * @param ec2InstanceProfileArn The Amazon Resource Name (ARN) of the instance profile that Amazon ECS applies to Amazon ECS Managed Instances. This instance profile must include the necessary permissions for your tasks to access AWS services and resources. For more information, see [Amazon ECS instance profile for Managed Instances](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/instance_IAM_role.html) in the Amazon ECS Developer Guide.
         * 
         * @return builder
         * 
         */
        public Builder ec2InstanceProfileArn(String ec2InstanceProfileArn) {
            return ec2InstanceProfileArn(Output.of(ec2InstanceProfileArn));
        }

        /**
         * @param instanceRequirements The instance requirements. You can specify the instance types and instance requirements such as vCPU count, memory, network performance, and accelerator specifications. Amazon ECS automatically selects the instances that match the specified criteria. Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder instanceRequirements(@Nullable Output<CapacityProviderManagedInstancesProviderInstanceLaunchTemplateInstanceRequirementsArgs> instanceRequirements) {
            $.instanceRequirements = instanceRequirements;
            return this;
        }

        /**
         * @param instanceRequirements The instance requirements. You can specify the instance types and instance requirements such as vCPU count, memory, network performance, and accelerator specifications. Amazon ECS automatically selects the instances that match the specified criteria. Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder instanceRequirements(CapacityProviderManagedInstancesProviderInstanceLaunchTemplateInstanceRequirementsArgs instanceRequirements) {
            return instanceRequirements(Output.of(instanceRequirements));
        }

        /**
         * @param monitoring CloudWatch provides two categories of monitoring: basic monitoring and detailed monitoring. By default, your managed instance is configured for basic monitoring. You can optionally enable detailed monitoring to help you more quickly identify and act on operational issues. You can enable or turn off detailed monitoring at launch or when the managed instance is running or stopped. For more information, see [Detailed monitoring for Amazon ECS Managed Instances](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cloudwatch-metrics.html) in the Amazon ECS Developer Guide. Valid values are `BASIC` and `DETAILED`.
         * 
         * @return builder
         * 
         */
        public Builder monitoring(@Nullable Output<String> monitoring) {
            $.monitoring = monitoring;
            return this;
        }

        /**
         * @param monitoring CloudWatch provides two categories of monitoring: basic monitoring and detailed monitoring. By default, your managed instance is configured for basic monitoring. You can optionally enable detailed monitoring to help you more quickly identify and act on operational issues. You can enable or turn off detailed monitoring at launch or when the managed instance is running or stopped. For more information, see [Detailed monitoring for Amazon ECS Managed Instances](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cloudwatch-metrics.html) in the Amazon ECS Developer Guide. Valid values are `BASIC` and `DETAILED`.
         * 
         * @return builder
         * 
         */
        public Builder monitoring(String monitoring) {
            return monitoring(Output.of(monitoring));
        }

        /**
         * @param networkConfiguration The network configuration for Amazon ECS Managed Instances. This specifies the subnets and security groups that instances use for network connectivity. Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder networkConfiguration(Output<CapacityProviderManagedInstancesProviderInstanceLaunchTemplateNetworkConfigurationArgs> networkConfiguration) {
            $.networkConfiguration = networkConfiguration;
            return this;
        }

        /**
         * @param networkConfiguration The network configuration for Amazon ECS Managed Instances. This specifies the subnets and security groups that instances use for network connectivity. Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder networkConfiguration(CapacityProviderManagedInstancesProviderInstanceLaunchTemplateNetworkConfigurationArgs networkConfiguration) {
            return networkConfiguration(Output.of(networkConfiguration));
        }

        /**
         * @param storageConfiguration The storage configuration for Amazon ECS Managed Instances. This defines the root volume size and type for the instances. Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder storageConfiguration(@Nullable Output<CapacityProviderManagedInstancesProviderInstanceLaunchTemplateStorageConfigurationArgs> storageConfiguration) {
            $.storageConfiguration = storageConfiguration;
            return this;
        }

        /**
         * @param storageConfiguration The storage configuration for Amazon ECS Managed Instances. This defines the root volume size and type for the instances. Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder storageConfiguration(CapacityProviderManagedInstancesProviderInstanceLaunchTemplateStorageConfigurationArgs storageConfiguration) {
            return storageConfiguration(Output.of(storageConfiguration));
        }

        public CapacityProviderManagedInstancesProviderInstanceLaunchTemplateArgs build() {
            if ($.ec2InstanceProfileArn == null) {
                throw new MissingRequiredPropertyException("CapacityProviderManagedInstancesProviderInstanceLaunchTemplateArgs", "ec2InstanceProfileArn");
            }
            if ($.networkConfiguration == null) {
                throw new MissingRequiredPropertyException("CapacityProviderManagedInstancesProviderInstanceLaunchTemplateArgs", "networkConfiguration");
            }
            return $;
        }
    }

}
