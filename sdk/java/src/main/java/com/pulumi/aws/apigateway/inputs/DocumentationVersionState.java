// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.apigateway.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DocumentationVersionState extends com.pulumi.resources.ResourceArgs {

    public static final DocumentationVersionState Empty = new DocumentationVersionState();

    /**
     * Description of the API documentation version.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the API documentation version.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * ID of the associated Rest API
     * 
     */
    @Import(name="restApiId")
    private @Nullable Output<String> restApiId;

    /**
     * @return ID of the associated Rest API
     * 
     */
    public Optional<Output<String>> restApiId() {
        return Optional.ofNullable(this.restApiId);
    }

    /**
     * Version identifier of the API documentation snapshot.
     * 
     */
    @Import(name="version")
    private @Nullable Output<String> version;

    /**
     * @return Version identifier of the API documentation snapshot.
     * 
     */
    public Optional<Output<String>> version() {
        return Optional.ofNullable(this.version);
    }

    private DocumentationVersionState() {}

    private DocumentationVersionState(DocumentationVersionState $) {
        this.description = $.description;
        this.restApiId = $.restApiId;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DocumentationVersionState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DocumentationVersionState $;

        public Builder() {
            $ = new DocumentationVersionState();
        }

        public Builder(DocumentationVersionState defaults) {
            $ = new DocumentationVersionState(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Description of the API documentation version.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the API documentation version.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param restApiId ID of the associated Rest API
         * 
         * @return builder
         * 
         */
        public Builder restApiId(@Nullable Output<String> restApiId) {
            $.restApiId = restApiId;
            return this;
        }

        /**
         * @param restApiId ID of the associated Rest API
         * 
         * @return builder
         * 
         */
        public Builder restApiId(String restApiId) {
            return restApiId(Output.of(restApiId));
        }

        /**
         * @param version Version identifier of the API documentation snapshot.
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable Output<String> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version Version identifier of the API documentation snapshot.
         * 
         * @return builder
         * 
         */
        public Builder version(String version) {
            return version(Output.of(version));
        }

        public DocumentationVersionState build() {
            return $;
        }
    }

}
