// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.pipes.inputs;

import com.pulumi.aws.pipes.inputs.PipeSourceParametersSelfManagedKafkaParametersCredentialsArgs;
import com.pulumi.aws.pipes.inputs.PipeSourceParametersSelfManagedKafkaParametersVpcArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PipeSourceParametersSelfManagedKafkaParametersArgs extends com.pulumi.resources.ResourceArgs {

    public static final PipeSourceParametersSelfManagedKafkaParametersArgs Empty = new PipeSourceParametersSelfManagedKafkaParametersArgs();

    /**
     * An array of server URLs. Maximum number of 2 items, each of maximum length 300.
     * 
     */
    @Import(name="additionalBootstrapServers")
    private @Nullable Output<List<String>> additionalBootstrapServers;

    /**
     * @return An array of server URLs. Maximum number of 2 items, each of maximum length 300.
     * 
     */
    public Optional<Output<List<String>>> additionalBootstrapServers() {
        return Optional.ofNullable(this.additionalBootstrapServers);
    }

    /**
     * The maximum number of records to include in each batch. Maximum value of 10000.
     * 
     */
    @Import(name="batchSize")
    private @Nullable Output<Integer> batchSize;

    /**
     * @return The maximum number of records to include in each batch. Maximum value of 10000.
     * 
     */
    public Optional<Output<Integer>> batchSize() {
        return Optional.ofNullable(this.batchSize);
    }

    /**
     * The name of the destination queue to consume. Maximum value of 200.
     * 
     */
    @Import(name="consumerGroupId")
    private @Nullable Output<String> consumerGroupId;

    /**
     * @return The name of the destination queue to consume. Maximum value of 200.
     * 
     */
    public Optional<Output<String>> consumerGroupId() {
        return Optional.ofNullable(this.consumerGroupId);
    }

    /**
     * The credentials needed to access the resource. Detailed below.
     * 
     */
    @Import(name="credentials")
    private @Nullable Output<PipeSourceParametersSelfManagedKafkaParametersCredentialsArgs> credentials;

    /**
     * @return The credentials needed to access the resource. Detailed below.
     * 
     */
    public Optional<Output<PipeSourceParametersSelfManagedKafkaParametersCredentialsArgs>> credentials() {
        return Optional.ofNullable(this.credentials);
    }

    /**
     * The maximum length of a time to wait for events. Maximum value of 300.
     * 
     */
    @Import(name="maximumBatchingWindowInSeconds")
    private @Nullable Output<Integer> maximumBatchingWindowInSeconds;

    /**
     * @return The maximum length of a time to wait for events. Maximum value of 300.
     * 
     */
    public Optional<Output<Integer>> maximumBatchingWindowInSeconds() {
        return Optional.ofNullable(this.maximumBatchingWindowInSeconds);
    }

    /**
     * The ARN of the Secrets Manager secret used for certification.
     * 
     */
    @Import(name="serverRootCaCertificate")
    private @Nullable Output<String> serverRootCaCertificate;

    /**
     * @return The ARN of the Secrets Manager secret used for certification.
     * 
     */
    public Optional<Output<String>> serverRootCaCertificate() {
        return Optional.ofNullable(this.serverRootCaCertificate);
    }

    /**
     * The position in a stream from which to start reading. Valid values: TRIM_HORIZON, LATEST.
     * 
     */
    @Import(name="startingPosition")
    private @Nullable Output<String> startingPosition;

    /**
     * @return The position in a stream from which to start reading. Valid values: TRIM_HORIZON, LATEST.
     * 
     */
    public Optional<Output<String>> startingPosition() {
        return Optional.ofNullable(this.startingPosition);
    }

    /**
     * The name of the topic that the pipe will read from. Maximum length of 249.
     * 
     */
    @Import(name="topicName", required=true)
    private Output<String> topicName;

    /**
     * @return The name of the topic that the pipe will read from. Maximum length of 249.
     * 
     */
    public Output<String> topicName() {
        return this.topicName;
    }

    /**
     * This structure specifies the VPC subnets and security groups for the stream, and whether a public IP address is to be used. Detailed below.
     * 
     */
    @Import(name="vpc")
    private @Nullable Output<PipeSourceParametersSelfManagedKafkaParametersVpcArgs> vpc;

    /**
     * @return This structure specifies the VPC subnets and security groups for the stream, and whether a public IP address is to be used. Detailed below.
     * 
     */
    public Optional<Output<PipeSourceParametersSelfManagedKafkaParametersVpcArgs>> vpc() {
        return Optional.ofNullable(this.vpc);
    }

    private PipeSourceParametersSelfManagedKafkaParametersArgs() {}

    private PipeSourceParametersSelfManagedKafkaParametersArgs(PipeSourceParametersSelfManagedKafkaParametersArgs $) {
        this.additionalBootstrapServers = $.additionalBootstrapServers;
        this.batchSize = $.batchSize;
        this.consumerGroupId = $.consumerGroupId;
        this.credentials = $.credentials;
        this.maximumBatchingWindowInSeconds = $.maximumBatchingWindowInSeconds;
        this.serverRootCaCertificate = $.serverRootCaCertificate;
        this.startingPosition = $.startingPosition;
        this.topicName = $.topicName;
        this.vpc = $.vpc;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PipeSourceParametersSelfManagedKafkaParametersArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PipeSourceParametersSelfManagedKafkaParametersArgs $;

        public Builder() {
            $ = new PipeSourceParametersSelfManagedKafkaParametersArgs();
        }

        public Builder(PipeSourceParametersSelfManagedKafkaParametersArgs defaults) {
            $ = new PipeSourceParametersSelfManagedKafkaParametersArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param additionalBootstrapServers An array of server URLs. Maximum number of 2 items, each of maximum length 300.
         * 
         * @return builder
         * 
         */
        public Builder additionalBootstrapServers(@Nullable Output<List<String>> additionalBootstrapServers) {
            $.additionalBootstrapServers = additionalBootstrapServers;
            return this;
        }

        /**
         * @param additionalBootstrapServers An array of server URLs. Maximum number of 2 items, each of maximum length 300.
         * 
         * @return builder
         * 
         */
        public Builder additionalBootstrapServers(List<String> additionalBootstrapServers) {
            return additionalBootstrapServers(Output.of(additionalBootstrapServers));
        }

        /**
         * @param additionalBootstrapServers An array of server URLs. Maximum number of 2 items, each of maximum length 300.
         * 
         * @return builder
         * 
         */
        public Builder additionalBootstrapServers(String... additionalBootstrapServers) {
            return additionalBootstrapServers(List.of(additionalBootstrapServers));
        }

        /**
         * @param batchSize The maximum number of records to include in each batch. Maximum value of 10000.
         * 
         * @return builder
         * 
         */
        public Builder batchSize(@Nullable Output<Integer> batchSize) {
            $.batchSize = batchSize;
            return this;
        }

        /**
         * @param batchSize The maximum number of records to include in each batch. Maximum value of 10000.
         * 
         * @return builder
         * 
         */
        public Builder batchSize(Integer batchSize) {
            return batchSize(Output.of(batchSize));
        }

        /**
         * @param consumerGroupId The name of the destination queue to consume. Maximum value of 200.
         * 
         * @return builder
         * 
         */
        public Builder consumerGroupId(@Nullable Output<String> consumerGroupId) {
            $.consumerGroupId = consumerGroupId;
            return this;
        }

        /**
         * @param consumerGroupId The name of the destination queue to consume. Maximum value of 200.
         * 
         * @return builder
         * 
         */
        public Builder consumerGroupId(String consumerGroupId) {
            return consumerGroupId(Output.of(consumerGroupId));
        }

        /**
         * @param credentials The credentials needed to access the resource. Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder credentials(@Nullable Output<PipeSourceParametersSelfManagedKafkaParametersCredentialsArgs> credentials) {
            $.credentials = credentials;
            return this;
        }

        /**
         * @param credentials The credentials needed to access the resource. Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder credentials(PipeSourceParametersSelfManagedKafkaParametersCredentialsArgs credentials) {
            return credentials(Output.of(credentials));
        }

        /**
         * @param maximumBatchingWindowInSeconds The maximum length of a time to wait for events. Maximum value of 300.
         * 
         * @return builder
         * 
         */
        public Builder maximumBatchingWindowInSeconds(@Nullable Output<Integer> maximumBatchingWindowInSeconds) {
            $.maximumBatchingWindowInSeconds = maximumBatchingWindowInSeconds;
            return this;
        }

        /**
         * @param maximumBatchingWindowInSeconds The maximum length of a time to wait for events. Maximum value of 300.
         * 
         * @return builder
         * 
         */
        public Builder maximumBatchingWindowInSeconds(Integer maximumBatchingWindowInSeconds) {
            return maximumBatchingWindowInSeconds(Output.of(maximumBatchingWindowInSeconds));
        }

        /**
         * @param serverRootCaCertificate The ARN of the Secrets Manager secret used for certification.
         * 
         * @return builder
         * 
         */
        public Builder serverRootCaCertificate(@Nullable Output<String> serverRootCaCertificate) {
            $.serverRootCaCertificate = serverRootCaCertificate;
            return this;
        }

        /**
         * @param serverRootCaCertificate The ARN of the Secrets Manager secret used for certification.
         * 
         * @return builder
         * 
         */
        public Builder serverRootCaCertificate(String serverRootCaCertificate) {
            return serverRootCaCertificate(Output.of(serverRootCaCertificate));
        }

        /**
         * @param startingPosition The position in a stream from which to start reading. Valid values: TRIM_HORIZON, LATEST.
         * 
         * @return builder
         * 
         */
        public Builder startingPosition(@Nullable Output<String> startingPosition) {
            $.startingPosition = startingPosition;
            return this;
        }

        /**
         * @param startingPosition The position in a stream from which to start reading. Valid values: TRIM_HORIZON, LATEST.
         * 
         * @return builder
         * 
         */
        public Builder startingPosition(String startingPosition) {
            return startingPosition(Output.of(startingPosition));
        }

        /**
         * @param topicName The name of the topic that the pipe will read from. Maximum length of 249.
         * 
         * @return builder
         * 
         */
        public Builder topicName(Output<String> topicName) {
            $.topicName = topicName;
            return this;
        }

        /**
         * @param topicName The name of the topic that the pipe will read from. Maximum length of 249.
         * 
         * @return builder
         * 
         */
        public Builder topicName(String topicName) {
            return topicName(Output.of(topicName));
        }

        /**
         * @param vpc This structure specifies the VPC subnets and security groups for the stream, and whether a public IP address is to be used. Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder vpc(@Nullable Output<PipeSourceParametersSelfManagedKafkaParametersVpcArgs> vpc) {
            $.vpc = vpc;
            return this;
        }

        /**
         * @param vpc This structure specifies the VPC subnets and security groups for the stream, and whether a public IP address is to be used. Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder vpc(PipeSourceParametersSelfManagedKafkaParametersVpcArgs vpc) {
            return vpc(Output.of(vpc));
        }

        public PipeSourceParametersSelfManagedKafkaParametersArgs build() {
            if ($.topicName == null) {
                throw new MissingRequiredPropertyException("PipeSourceParametersSelfManagedKafkaParametersArgs", "topicName");
            }
            return $;
        }
    }

}
