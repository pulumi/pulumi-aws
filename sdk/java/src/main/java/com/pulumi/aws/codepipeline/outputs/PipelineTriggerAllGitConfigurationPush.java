// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.codepipeline.outputs;

import com.pulumi.aws.codepipeline.outputs.PipelineTriggerAllGitConfigurationPushBranch;
import com.pulumi.aws.codepipeline.outputs.PipelineTriggerAllGitConfigurationPushFilePath;
import com.pulumi.aws.codepipeline.outputs.PipelineTriggerAllGitConfigurationPushTag;
import com.pulumi.core.annotations.CustomType;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class PipelineTriggerAllGitConfigurationPush {
    /**
     * @return The field that specifies to filter on branches for the push trigger configuration. A `branches` block is documented below.
     * 
     */
    private @Nullable List<PipelineTriggerAllGitConfigurationPushBranch> branches;
    /**
     * @return The field that specifies to filter on file paths for the push trigger configuration. A `file_paths` block is documented below.
     * 
     */
    private @Nullable List<PipelineTriggerAllGitConfigurationPushFilePath> filePaths;
    /**
     * @return The field that contains the details for the Git tags trigger configuration. A `tags` block is documented below.
     * 
     */
    private @Nullable List<PipelineTriggerAllGitConfigurationPushTag> tags;

    private PipelineTriggerAllGitConfigurationPush() {}
    /**
     * @return The field that specifies to filter on branches for the push trigger configuration. A `branches` block is documented below.
     * 
     */
    public List<PipelineTriggerAllGitConfigurationPushBranch> branches() {
        return this.branches == null ? List.of() : this.branches;
    }
    /**
     * @return The field that specifies to filter on file paths for the push trigger configuration. A `file_paths` block is documented below.
     * 
     */
    public List<PipelineTriggerAllGitConfigurationPushFilePath> filePaths() {
        return this.filePaths == null ? List.of() : this.filePaths;
    }
    /**
     * @return The field that contains the details for the Git tags trigger configuration. A `tags` block is documented below.
     * 
     */
    public List<PipelineTriggerAllGitConfigurationPushTag> tags() {
        return this.tags == null ? List.of() : this.tags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PipelineTriggerAllGitConfigurationPush defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<PipelineTriggerAllGitConfigurationPushBranch> branches;
        private @Nullable List<PipelineTriggerAllGitConfigurationPushFilePath> filePaths;
        private @Nullable List<PipelineTriggerAllGitConfigurationPushTag> tags;
        public Builder() {}
        public Builder(PipelineTriggerAllGitConfigurationPush defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.branches = defaults.branches;
    	      this.filePaths = defaults.filePaths;
    	      this.tags = defaults.tags;
        }

        @CustomType.Setter
        public Builder branches(@Nullable List<PipelineTriggerAllGitConfigurationPushBranch> branches) {

            this.branches = branches;
            return this;
        }
        public Builder branches(PipelineTriggerAllGitConfigurationPushBranch... branches) {
            return branches(List.of(branches));
        }
        @CustomType.Setter
        public Builder filePaths(@Nullable List<PipelineTriggerAllGitConfigurationPushFilePath> filePaths) {

            this.filePaths = filePaths;
            return this;
        }
        public Builder filePaths(PipelineTriggerAllGitConfigurationPushFilePath... filePaths) {
            return filePaths(List.of(filePaths));
        }
        @CustomType.Setter
        public Builder tags(@Nullable List<PipelineTriggerAllGitConfigurationPushTag> tags) {

            this.tags = tags;
            return this;
        }
        public Builder tags(PipelineTriggerAllGitConfigurationPushTag... tags) {
            return tags(List.of(tags));
        }
        public PipelineTriggerAllGitConfigurationPush build() {
            final var _resultValue = new PipelineTriggerAllGitConfigurationPush();
            _resultValue.branches = branches;
            _resultValue.filePaths = filePaths;
            _resultValue.tags = tags;
            return _resultValue;
        }
    }
}
