// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.codepipeline.inputs;

import com.pulumi.aws.codepipeline.inputs.PipelineTriggerGitConfigurationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class PipelineTriggerArgs extends com.pulumi.resources.ResourceArgs {

    public static final PipelineTriggerArgs Empty = new PipelineTriggerArgs();

    /**
     * Provides the filter criteria and the source stage for the repository event that starts the pipeline. For more information, refer to the [AWS documentation](https://docs.aws.amazon.com/codepipeline/latest/userguide/pipelines-filter.html). A `git_configuration` block is documented below.
     * 
     */
    @Import(name="gitConfiguration", required=true)
    private Output<PipelineTriggerGitConfigurationArgs> gitConfiguration;

    /**
     * @return Provides the filter criteria and the source stage for the repository event that starts the pipeline. For more information, refer to the [AWS documentation](https://docs.aws.amazon.com/codepipeline/latest/userguide/pipelines-filter.html). A `git_configuration` block is documented below.
     * 
     */
    public Output<PipelineTriggerGitConfigurationArgs> gitConfiguration() {
        return this.gitConfiguration;
    }

    /**
     * The source provider for the event. Possible value is `CodeStarSourceConnection`.
     * 
     */
    @Import(name="providerType", required=true)
    private Output<String> providerType;

    /**
     * @return The source provider for the event. Possible value is `CodeStarSourceConnection`.
     * 
     */
    public Output<String> providerType() {
        return this.providerType;
    }

    private PipelineTriggerArgs() {}

    private PipelineTriggerArgs(PipelineTriggerArgs $) {
        this.gitConfiguration = $.gitConfiguration;
        this.providerType = $.providerType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PipelineTriggerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PipelineTriggerArgs $;

        public Builder() {
            $ = new PipelineTriggerArgs();
        }

        public Builder(PipelineTriggerArgs defaults) {
            $ = new PipelineTriggerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param gitConfiguration Provides the filter criteria and the source stage for the repository event that starts the pipeline. For more information, refer to the [AWS documentation](https://docs.aws.amazon.com/codepipeline/latest/userguide/pipelines-filter.html). A `git_configuration` block is documented below.
         * 
         * @return builder
         * 
         */
        public Builder gitConfiguration(Output<PipelineTriggerGitConfigurationArgs> gitConfiguration) {
            $.gitConfiguration = gitConfiguration;
            return this;
        }

        /**
         * @param gitConfiguration Provides the filter criteria and the source stage for the repository event that starts the pipeline. For more information, refer to the [AWS documentation](https://docs.aws.amazon.com/codepipeline/latest/userguide/pipelines-filter.html). A `git_configuration` block is documented below.
         * 
         * @return builder
         * 
         */
        public Builder gitConfiguration(PipelineTriggerGitConfigurationArgs gitConfiguration) {
            return gitConfiguration(Output.of(gitConfiguration));
        }

        /**
         * @param providerType The source provider for the event. Possible value is `CodeStarSourceConnection`.
         * 
         * @return builder
         * 
         */
        public Builder providerType(Output<String> providerType) {
            $.providerType = providerType;
            return this;
        }

        /**
         * @param providerType The source provider for the event. Possible value is `CodeStarSourceConnection`.
         * 
         * @return builder
         * 
         */
        public Builder providerType(String providerType) {
            return providerType(Output.of(providerType));
        }

        public PipelineTriggerArgs build() {
            if ($.gitConfiguration == null) {
                throw new MissingRequiredPropertyException("PipelineTriggerArgs", "gitConfiguration");
            }
            if ($.providerType == null) {
                throw new MissingRequiredPropertyException("PipelineTriggerArgs", "providerType");
            }
            return $;
        }
    }

}
