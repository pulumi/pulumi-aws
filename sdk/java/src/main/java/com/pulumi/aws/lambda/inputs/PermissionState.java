// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.lambda.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PermissionState extends com.pulumi.resources.ResourceArgs {

    public static final PermissionState Empty = new PermissionState();

    /**
     * Lambda action to allow in this statement (e.g., `lambda:InvokeFunction`)
     * 
     */
    @Import(name="action")
    private @Nullable Output<String> action;

    /**
     * @return Lambda action to allow in this statement (e.g., `lambda:InvokeFunction`)
     * 
     */
    public Optional<Output<String>> action() {
        return Optional.ofNullable(this.action);
    }

    /**
     * Event Source Token for Alexa Skills
     * 
     */
    @Import(name="eventSourceToken")
    private @Nullable Output<String> eventSourceToken;

    /**
     * @return Event Source Token for Alexa Skills
     * 
     */
    public Optional<Output<String>> eventSourceToken() {
        return Optional.ofNullable(this.eventSourceToken);
    }

    /**
     * Name or ARN of the Lambda function
     * 
     */
    @Import(name="function")
    private @Nullable Output<String> function;

    /**
     * @return Name or ARN of the Lambda function
     * 
     */
    public Optional<Output<String>> function() {
        return Optional.ofNullable(this.function);
    }

    /**
     * Lambda Function URL authentication type. Valid values: `AWS_IAM` or `NONE`. Only valid with `lambda:InvokeFunctionUrl` action
     * 
     */
    @Import(name="functionUrlAuthType")
    private @Nullable Output<String> functionUrlAuthType;

    /**
     * @return Lambda Function URL authentication type. Valid values: `AWS_IAM` or `NONE`. Only valid with `lambda:InvokeFunctionUrl` action
     * 
     */
    public Optional<Output<String>> functionUrlAuthType() {
        return Optional.ofNullable(this.functionUrlAuthType);
    }

    /**
     * AWS service or account that invokes the function (e.g., `s3.amazonaws.com`, `sns.amazonaws.com`, AWS account ID, or AWS IAM principal)
     * 
     * The following arguments are optional:
     * 
     */
    @Import(name="principal")
    private @Nullable Output<String> principal;

    /**
     * @return AWS service or account that invokes the function (e.g., `s3.amazonaws.com`, `sns.amazonaws.com`, AWS account ID, or AWS IAM principal)
     * 
     * The following arguments are optional:
     * 
     */
    public Optional<Output<String>> principal() {
        return Optional.ofNullable(this.principal);
    }

    /**
     * AWS Organizations ID to grant permission to all accounts under this organization
     * 
     */
    @Import(name="principalOrgId")
    private @Nullable Output<String> principalOrgId;

    /**
     * @return AWS Organizations ID to grant permission to all accounts under this organization
     * 
     */
    public Optional<Output<String>> principalOrgId() {
        return Optional.ofNullable(this.principalOrgId);
    }

    /**
     * Lambda function version or alias name
     * 
     */
    @Import(name="qualifier")
    private @Nullable Output<String> qualifier;

    /**
     * @return Lambda function version or alias name
     * 
     */
    public Optional<Output<String>> qualifier() {
        return Optional.ofNullable(this.qualifier);
    }

    /**
     * Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * AWS account ID of the source owner for cross-account access, S3, or SES
     * 
     */
    @Import(name="sourceAccount")
    private @Nullable Output<String> sourceAccount;

    /**
     * @return AWS account ID of the source owner for cross-account access, S3, or SES
     * 
     */
    public Optional<Output<String>> sourceAccount() {
        return Optional.ofNullable(this.sourceAccount);
    }

    /**
     * ARN of the source resource granting permission to invoke the Lambda function
     * 
     */
    @Import(name="sourceArn")
    private @Nullable Output<String> sourceArn;

    /**
     * @return ARN of the source resource granting permission to invoke the Lambda function
     * 
     */
    public Optional<Output<String>> sourceArn() {
        return Optional.ofNullable(this.sourceArn);
    }

    /**
     * Statement identifier. Generated by Pulumi if not provided
     * 
     */
    @Import(name="statementId")
    private @Nullable Output<String> statementId;

    /**
     * @return Statement identifier. Generated by Pulumi if not provided
     * 
     */
    public Optional<Output<String>> statementId() {
        return Optional.ofNullable(this.statementId);
    }

    /**
     * Statement identifier prefix. Conflicts with `statementId`
     * 
     */
    @Import(name="statementIdPrefix")
    private @Nullable Output<String> statementIdPrefix;

    /**
     * @return Statement identifier prefix. Conflicts with `statementId`
     * 
     */
    public Optional<Output<String>> statementIdPrefix() {
        return Optional.ofNullable(this.statementIdPrefix);
    }

    private PermissionState() {}

    private PermissionState(PermissionState $) {
        this.action = $.action;
        this.eventSourceToken = $.eventSourceToken;
        this.function = $.function;
        this.functionUrlAuthType = $.functionUrlAuthType;
        this.principal = $.principal;
        this.principalOrgId = $.principalOrgId;
        this.qualifier = $.qualifier;
        this.region = $.region;
        this.sourceAccount = $.sourceAccount;
        this.sourceArn = $.sourceArn;
        this.statementId = $.statementId;
        this.statementIdPrefix = $.statementIdPrefix;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PermissionState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PermissionState $;

        public Builder() {
            $ = new PermissionState();
        }

        public Builder(PermissionState defaults) {
            $ = new PermissionState(Objects.requireNonNull(defaults));
        }

        /**
         * @param action Lambda action to allow in this statement (e.g., `lambda:InvokeFunction`)
         * 
         * @return builder
         * 
         */
        public Builder action(@Nullable Output<String> action) {
            $.action = action;
            return this;
        }

        /**
         * @param action Lambda action to allow in this statement (e.g., `lambda:InvokeFunction`)
         * 
         * @return builder
         * 
         */
        public Builder action(String action) {
            return action(Output.of(action));
        }

        /**
         * @param eventSourceToken Event Source Token for Alexa Skills
         * 
         * @return builder
         * 
         */
        public Builder eventSourceToken(@Nullable Output<String> eventSourceToken) {
            $.eventSourceToken = eventSourceToken;
            return this;
        }

        /**
         * @param eventSourceToken Event Source Token for Alexa Skills
         * 
         * @return builder
         * 
         */
        public Builder eventSourceToken(String eventSourceToken) {
            return eventSourceToken(Output.of(eventSourceToken));
        }

        /**
         * @param function Name or ARN of the Lambda function
         * 
         * @return builder
         * 
         */
        public Builder function(@Nullable Output<String> function) {
            $.function = function;
            return this;
        }

        /**
         * @param function Name or ARN of the Lambda function
         * 
         * @return builder
         * 
         */
        public Builder function(String function) {
            return function(Output.of(function));
        }

        /**
         * @param functionUrlAuthType Lambda Function URL authentication type. Valid values: `AWS_IAM` or `NONE`. Only valid with `lambda:InvokeFunctionUrl` action
         * 
         * @return builder
         * 
         */
        public Builder functionUrlAuthType(@Nullable Output<String> functionUrlAuthType) {
            $.functionUrlAuthType = functionUrlAuthType;
            return this;
        }

        /**
         * @param functionUrlAuthType Lambda Function URL authentication type. Valid values: `AWS_IAM` or `NONE`. Only valid with `lambda:InvokeFunctionUrl` action
         * 
         * @return builder
         * 
         */
        public Builder functionUrlAuthType(String functionUrlAuthType) {
            return functionUrlAuthType(Output.of(functionUrlAuthType));
        }

        /**
         * @param principal AWS service or account that invokes the function (e.g., `s3.amazonaws.com`, `sns.amazonaws.com`, AWS account ID, or AWS IAM principal)
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder principal(@Nullable Output<String> principal) {
            $.principal = principal;
            return this;
        }

        /**
         * @param principal AWS service or account that invokes the function (e.g., `s3.amazonaws.com`, `sns.amazonaws.com`, AWS account ID, or AWS IAM principal)
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder principal(String principal) {
            return principal(Output.of(principal));
        }

        /**
         * @param principalOrgId AWS Organizations ID to grant permission to all accounts under this organization
         * 
         * @return builder
         * 
         */
        public Builder principalOrgId(@Nullable Output<String> principalOrgId) {
            $.principalOrgId = principalOrgId;
            return this;
        }

        /**
         * @param principalOrgId AWS Organizations ID to grant permission to all accounts under this organization
         * 
         * @return builder
         * 
         */
        public Builder principalOrgId(String principalOrgId) {
            return principalOrgId(Output.of(principalOrgId));
        }

        /**
         * @param qualifier Lambda function version or alias name
         * 
         * @return builder
         * 
         */
        public Builder qualifier(@Nullable Output<String> qualifier) {
            $.qualifier = qualifier;
            return this;
        }

        /**
         * @param qualifier Lambda function version or alias name
         * 
         * @return builder
         * 
         */
        public Builder qualifier(String qualifier) {
            return qualifier(Output.of(qualifier));
        }

        /**
         * @param region Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param sourceAccount AWS account ID of the source owner for cross-account access, S3, or SES
         * 
         * @return builder
         * 
         */
        public Builder sourceAccount(@Nullable Output<String> sourceAccount) {
            $.sourceAccount = sourceAccount;
            return this;
        }

        /**
         * @param sourceAccount AWS account ID of the source owner for cross-account access, S3, or SES
         * 
         * @return builder
         * 
         */
        public Builder sourceAccount(String sourceAccount) {
            return sourceAccount(Output.of(sourceAccount));
        }

        /**
         * @param sourceArn ARN of the source resource granting permission to invoke the Lambda function
         * 
         * @return builder
         * 
         */
        public Builder sourceArn(@Nullable Output<String> sourceArn) {
            $.sourceArn = sourceArn;
            return this;
        }

        /**
         * @param sourceArn ARN of the source resource granting permission to invoke the Lambda function
         * 
         * @return builder
         * 
         */
        public Builder sourceArn(String sourceArn) {
            return sourceArn(Output.of(sourceArn));
        }

        /**
         * @param statementId Statement identifier. Generated by Pulumi if not provided
         * 
         * @return builder
         * 
         */
        public Builder statementId(@Nullable Output<String> statementId) {
            $.statementId = statementId;
            return this;
        }

        /**
         * @param statementId Statement identifier. Generated by Pulumi if not provided
         * 
         * @return builder
         * 
         */
        public Builder statementId(String statementId) {
            return statementId(Output.of(statementId));
        }

        /**
         * @param statementIdPrefix Statement identifier prefix. Conflicts with `statementId`
         * 
         * @return builder
         * 
         */
        public Builder statementIdPrefix(@Nullable Output<String> statementIdPrefix) {
            $.statementIdPrefix = statementIdPrefix;
            return this;
        }

        /**
         * @param statementIdPrefix Statement identifier prefix. Conflicts with `statementId`
         * 
         * @return builder
         * 
         */
        public Builder statementIdPrefix(String statementIdPrefix) {
            return statementIdPrefix(Output.of(statementIdPrefix));
        }

        public PermissionState build() {
            return $;
        }
    }

}
