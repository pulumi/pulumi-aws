// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.lambda.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PermissionState extends com.pulumi.resources.ResourceArgs {

    public static final PermissionState Empty = new PermissionState();

    @Import(name="action")
    private @Nullable Output<String> action;

    public Optional<Output<String>> action() {
        return Optional.ofNullable(this.action);
    }

    @Import(name="eventSourceToken")
    private @Nullable Output<String> eventSourceToken;

    public Optional<Output<String>> eventSourceToken() {
        return Optional.ofNullable(this.eventSourceToken);
    }

    @Import(name="function")
    private @Nullable Output<String> function;

    public Optional<Output<String>> function() {
        return Optional.ofNullable(this.function);
    }

    @Import(name="functionUrlAuthType")
    private @Nullable Output<String> functionUrlAuthType;

    public Optional<Output<String>> functionUrlAuthType() {
        return Optional.ofNullable(this.functionUrlAuthType);
    }

    @Import(name="principal")
    private @Nullable Output<String> principal;

    public Optional<Output<String>> principal() {
        return Optional.ofNullable(this.principal);
    }

    @Import(name="principalOrgId")
    private @Nullable Output<String> principalOrgId;

    public Optional<Output<String>> principalOrgId() {
        return Optional.ofNullable(this.principalOrgId);
    }

    @Import(name="qualifier")
    private @Nullable Output<String> qualifier;

    public Optional<Output<String>> qualifier() {
        return Optional.ofNullable(this.qualifier);
    }

    @Import(name="sourceAccount")
    private @Nullable Output<String> sourceAccount;

    public Optional<Output<String>> sourceAccount() {
        return Optional.ofNullable(this.sourceAccount);
    }

    @Import(name="sourceArn")
    private @Nullable Output<String> sourceArn;

    public Optional<Output<String>> sourceArn() {
        return Optional.ofNullable(this.sourceArn);
    }

    @Import(name="statementId")
    private @Nullable Output<String> statementId;

    public Optional<Output<String>> statementId() {
        return Optional.ofNullable(this.statementId);
    }

    @Import(name="statementIdPrefix")
    private @Nullable Output<String> statementIdPrefix;

    public Optional<Output<String>> statementIdPrefix() {
        return Optional.ofNullable(this.statementIdPrefix);
    }

    private PermissionState() {}

    private PermissionState(PermissionState $) {
        this.action = $.action;
        this.eventSourceToken = $.eventSourceToken;
        this.function = $.function;
        this.functionUrlAuthType = $.functionUrlAuthType;
        this.principal = $.principal;
        this.principalOrgId = $.principalOrgId;
        this.qualifier = $.qualifier;
        this.sourceAccount = $.sourceAccount;
        this.sourceArn = $.sourceArn;
        this.statementId = $.statementId;
        this.statementIdPrefix = $.statementIdPrefix;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PermissionState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PermissionState $;

        public Builder() {
            $ = new PermissionState();
        }

        public Builder(PermissionState defaults) {
            $ = new PermissionState(Objects.requireNonNull(defaults));
        }

        public Builder action(@Nullable Output<String> action) {
            $.action = action;
            return this;
        }

        public Builder action(String action) {
            return action(Output.of(action));
        }

        public Builder eventSourceToken(@Nullable Output<String> eventSourceToken) {
            $.eventSourceToken = eventSourceToken;
            return this;
        }

        public Builder eventSourceToken(String eventSourceToken) {
            return eventSourceToken(Output.of(eventSourceToken));
        }

        public Builder function(@Nullable Output<String> function) {
            $.function = function;
            return this;
        }

        public Builder function(String function) {
            return function(Output.of(function));
        }

        public Builder functionUrlAuthType(@Nullable Output<String> functionUrlAuthType) {
            $.functionUrlAuthType = functionUrlAuthType;
            return this;
        }

        public Builder functionUrlAuthType(String functionUrlAuthType) {
            return functionUrlAuthType(Output.of(functionUrlAuthType));
        }

        public Builder principal(@Nullable Output<String> principal) {
            $.principal = principal;
            return this;
        }

        public Builder principal(String principal) {
            return principal(Output.of(principal));
        }

        public Builder principalOrgId(@Nullable Output<String> principalOrgId) {
            $.principalOrgId = principalOrgId;
            return this;
        }

        public Builder principalOrgId(String principalOrgId) {
            return principalOrgId(Output.of(principalOrgId));
        }

        public Builder qualifier(@Nullable Output<String> qualifier) {
            $.qualifier = qualifier;
            return this;
        }

        public Builder qualifier(String qualifier) {
            return qualifier(Output.of(qualifier));
        }

        public Builder sourceAccount(@Nullable Output<String> sourceAccount) {
            $.sourceAccount = sourceAccount;
            return this;
        }

        public Builder sourceAccount(String sourceAccount) {
            return sourceAccount(Output.of(sourceAccount));
        }

        public Builder sourceArn(@Nullable Output<String> sourceArn) {
            $.sourceArn = sourceArn;
            return this;
        }

        public Builder sourceArn(String sourceArn) {
            return sourceArn(Output.of(sourceArn));
        }

        public Builder statementId(@Nullable Output<String> statementId) {
            $.statementId = statementId;
            return this;
        }

        public Builder statementId(String statementId) {
            return statementId(Output.of(statementId));
        }

        public Builder statementIdPrefix(@Nullable Output<String> statementIdPrefix) {
            $.statementIdPrefix = statementIdPrefix;
            return this;
        }

        public Builder statementIdPrefix(String statementIdPrefix) {
            return statementIdPrefix(Output.of(statementIdPrefix));
        }

        public PermissionState build() {
            return $;
        }
    }

}
