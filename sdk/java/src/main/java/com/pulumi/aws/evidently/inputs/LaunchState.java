// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.evidently.inputs;

import com.pulumi.aws.evidently.inputs.LaunchExecutionArgs;
import com.pulumi.aws.evidently.inputs.LaunchGroupArgs;
import com.pulumi.aws.evidently.inputs.LaunchMetricMonitorArgs;
import com.pulumi.aws.evidently.inputs.LaunchScheduledSplitsConfigArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LaunchState extends com.pulumi.resources.ResourceArgs {

    public static final LaunchState Empty = new LaunchState();

    /**
     * The ARN of the launch.
     * 
     */
    @Import(name="arn")
    private @Nullable Output<String> arn;

    /**
     * @return The ARN of the launch.
     * 
     */
    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    /**
     * The date and time that the launch is created.
     * 
     */
    @Import(name="createdTime")
    private @Nullable Output<String> createdTime;

    /**
     * @return The date and time that the launch is created.
     * 
     */
    public Optional<Output<String>> createdTime() {
        return Optional.ofNullable(this.createdTime);
    }

    /**
     * Specifies the description of the launch.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Specifies the description of the launch.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * A block that contains information about the start and end times of the launch. Detailed below
     * 
     */
    @Import(name="executions")
    private @Nullable Output<List<LaunchExecutionArgs>> executions;

    /**
     * @return A block that contains information about the start and end times of the launch. Detailed below
     * 
     */
    public Optional<Output<List<LaunchExecutionArgs>>> executions() {
        return Optional.ofNullable(this.executions);
    }

    /**
     * One or up to five blocks that contain the feature and variations that are to be used for the launch. Detailed below.
     * 
     */
    @Import(name="groups")
    private @Nullable Output<List<LaunchGroupArgs>> groups;

    /**
     * @return One or up to five blocks that contain the feature and variations that are to be used for the launch. Detailed below.
     * 
     */
    public Optional<Output<List<LaunchGroupArgs>>> groups() {
        return Optional.ofNullable(this.groups);
    }

    /**
     * The date and time that the launch was most recently updated.
     * 
     */
    @Import(name="lastUpdatedTime")
    private @Nullable Output<String> lastUpdatedTime;

    /**
     * @return The date and time that the launch was most recently updated.
     * 
     */
    public Optional<Output<String>> lastUpdatedTime() {
        return Optional.ofNullable(this.lastUpdatedTime);
    }

    /**
     * One or up to three blocks that define the metrics that will be used to monitor the launch performance. Detailed below.
     * 
     */
    @Import(name="metricMonitors")
    private @Nullable Output<List<LaunchMetricMonitorArgs>> metricMonitors;

    /**
     * @return One or up to three blocks that define the metrics that will be used to monitor the launch performance. Detailed below.
     * 
     */
    public Optional<Output<List<LaunchMetricMonitorArgs>>> metricMonitors() {
        return Optional.ofNullable(this.metricMonitors);
    }

    /**
     * The name for the new launch. Minimum length of `1`. Maximum length of `127`.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name for the new launch. Minimum length of `1`. Maximum length of `127`.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The name or ARN of the project that is to contain the new launch.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The name or ARN of the project that is to contain the new launch.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * When Evidently assigns a particular user session to a launch, it must use a randomization ID to determine which variation the user session is served. This randomization ID is a combination of the entity ID and randomizationSalt. If you omit randomizationSalt, Evidently uses the launch name as the randomizationSalt.
     * 
     */
    @Import(name="randomizationSalt")
    private @Nullable Output<String> randomizationSalt;

    /**
     * @return When Evidently assigns a particular user session to a launch, it must use a randomization ID to determine which variation the user session is served. This randomization ID is a combination of the entity ID and randomizationSalt. If you omit randomizationSalt, Evidently uses the launch name as the randomizationSalt.
     * 
     */
    public Optional<Output<String>> randomizationSalt() {
        return Optional.ofNullable(this.randomizationSalt);
    }

    /**
     * A block that defines the traffic allocation percentages among the feature variations during each step of the launch. Detailed below.
     * 
     */
    @Import(name="scheduledSplitsConfig")
    private @Nullable Output<LaunchScheduledSplitsConfigArgs> scheduledSplitsConfig;

    /**
     * @return A block that defines the traffic allocation percentages among the feature variations during each step of the launch. Detailed below.
     * 
     */
    public Optional<Output<LaunchScheduledSplitsConfigArgs>> scheduledSplitsConfig() {
        return Optional.ofNullable(this.scheduledSplitsConfig);
    }

    /**
     * The current state of the launch. Valid values are `CREATED`, `UPDATING`, `RUNNING`, `COMPLETED`, and `CANCELLED`.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The current state of the launch. Valid values are `CREATED`, `UPDATING`, `RUNNING`, `COMPLETED`, and `CANCELLED`.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * If the launch was stopped, this is the string that was entered by the person who stopped the launch, to explain why it was stopped.
     * 
     */
    @Import(name="statusReason")
    private @Nullable Output<String> statusReason;

    /**
     * @return If the launch was stopped, this is the string that was entered by the person who stopped the launch, to explain why it was stopped.
     * 
     */
    public Optional<Output<String>> statusReason() {
        return Optional.ofNullable(this.statusReason);
    }

    /**
     * Tags to apply to the launch. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Tags to apply to the launch. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     */
    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    /**
     * @return A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     */
    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    /**
     * The type of launch.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The type of launch.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private LaunchState() {}

    private LaunchState(LaunchState $) {
        this.arn = $.arn;
        this.createdTime = $.createdTime;
        this.description = $.description;
        this.executions = $.executions;
        this.groups = $.groups;
        this.lastUpdatedTime = $.lastUpdatedTime;
        this.metricMonitors = $.metricMonitors;
        this.name = $.name;
        this.project = $.project;
        this.randomizationSalt = $.randomizationSalt;
        this.scheduledSplitsConfig = $.scheduledSplitsConfig;
        this.status = $.status;
        this.statusReason = $.statusReason;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LaunchState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LaunchState $;

        public Builder() {
            $ = new LaunchState();
        }

        public Builder(LaunchState defaults) {
            $ = new LaunchState(Objects.requireNonNull(defaults));
        }

        /**
         * @param arn The ARN of the launch.
         * 
         * @return builder
         * 
         */
        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        /**
         * @param arn The ARN of the launch.
         * 
         * @return builder
         * 
         */
        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        /**
         * @param createdTime The date and time that the launch is created.
         * 
         * @return builder
         * 
         */
        public Builder createdTime(@Nullable Output<String> createdTime) {
            $.createdTime = createdTime;
            return this;
        }

        /**
         * @param createdTime The date and time that the launch is created.
         * 
         * @return builder
         * 
         */
        public Builder createdTime(String createdTime) {
            return createdTime(Output.of(createdTime));
        }

        /**
         * @param description Specifies the description of the launch.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Specifies the description of the launch.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param executions A block that contains information about the start and end times of the launch. Detailed below
         * 
         * @return builder
         * 
         */
        public Builder executions(@Nullable Output<List<LaunchExecutionArgs>> executions) {
            $.executions = executions;
            return this;
        }

        /**
         * @param executions A block that contains information about the start and end times of the launch. Detailed below
         * 
         * @return builder
         * 
         */
        public Builder executions(List<LaunchExecutionArgs> executions) {
            return executions(Output.of(executions));
        }

        /**
         * @param executions A block that contains information about the start and end times of the launch. Detailed below
         * 
         * @return builder
         * 
         */
        public Builder executions(LaunchExecutionArgs... executions) {
            return executions(List.of(executions));
        }

        /**
         * @param groups One or up to five blocks that contain the feature and variations that are to be used for the launch. Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder groups(@Nullable Output<List<LaunchGroupArgs>> groups) {
            $.groups = groups;
            return this;
        }

        /**
         * @param groups One or up to five blocks that contain the feature and variations that are to be used for the launch. Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder groups(List<LaunchGroupArgs> groups) {
            return groups(Output.of(groups));
        }

        /**
         * @param groups One or up to five blocks that contain the feature and variations that are to be used for the launch. Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder groups(LaunchGroupArgs... groups) {
            return groups(List.of(groups));
        }

        /**
         * @param lastUpdatedTime The date and time that the launch was most recently updated.
         * 
         * @return builder
         * 
         */
        public Builder lastUpdatedTime(@Nullable Output<String> lastUpdatedTime) {
            $.lastUpdatedTime = lastUpdatedTime;
            return this;
        }

        /**
         * @param lastUpdatedTime The date and time that the launch was most recently updated.
         * 
         * @return builder
         * 
         */
        public Builder lastUpdatedTime(String lastUpdatedTime) {
            return lastUpdatedTime(Output.of(lastUpdatedTime));
        }

        /**
         * @param metricMonitors One or up to three blocks that define the metrics that will be used to monitor the launch performance. Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder metricMonitors(@Nullable Output<List<LaunchMetricMonitorArgs>> metricMonitors) {
            $.metricMonitors = metricMonitors;
            return this;
        }

        /**
         * @param metricMonitors One or up to three blocks that define the metrics that will be used to monitor the launch performance. Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder metricMonitors(List<LaunchMetricMonitorArgs> metricMonitors) {
            return metricMonitors(Output.of(metricMonitors));
        }

        /**
         * @param metricMonitors One or up to three blocks that define the metrics that will be used to monitor the launch performance. Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder metricMonitors(LaunchMetricMonitorArgs... metricMonitors) {
            return metricMonitors(List.of(metricMonitors));
        }

        /**
         * @param name The name for the new launch. Minimum length of `1`. Maximum length of `127`.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name for the new launch. Minimum length of `1`. Maximum length of `127`.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param project The name or ARN of the project that is to contain the new launch.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The name or ARN of the project that is to contain the new launch.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param randomizationSalt When Evidently assigns a particular user session to a launch, it must use a randomization ID to determine which variation the user session is served. This randomization ID is a combination of the entity ID and randomizationSalt. If you omit randomizationSalt, Evidently uses the launch name as the randomizationSalt.
         * 
         * @return builder
         * 
         */
        public Builder randomizationSalt(@Nullable Output<String> randomizationSalt) {
            $.randomizationSalt = randomizationSalt;
            return this;
        }

        /**
         * @param randomizationSalt When Evidently assigns a particular user session to a launch, it must use a randomization ID to determine which variation the user session is served. This randomization ID is a combination of the entity ID and randomizationSalt. If you omit randomizationSalt, Evidently uses the launch name as the randomizationSalt.
         * 
         * @return builder
         * 
         */
        public Builder randomizationSalt(String randomizationSalt) {
            return randomizationSalt(Output.of(randomizationSalt));
        }

        /**
         * @param scheduledSplitsConfig A block that defines the traffic allocation percentages among the feature variations during each step of the launch. Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder scheduledSplitsConfig(@Nullable Output<LaunchScheduledSplitsConfigArgs> scheduledSplitsConfig) {
            $.scheduledSplitsConfig = scheduledSplitsConfig;
            return this;
        }

        /**
         * @param scheduledSplitsConfig A block that defines the traffic allocation percentages among the feature variations during each step of the launch. Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder scheduledSplitsConfig(LaunchScheduledSplitsConfigArgs scheduledSplitsConfig) {
            return scheduledSplitsConfig(Output.of(scheduledSplitsConfig));
        }

        /**
         * @param status The current state of the launch. Valid values are `CREATED`, `UPDATING`, `RUNNING`, `COMPLETED`, and `CANCELLED`.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The current state of the launch. Valid values are `CREATED`, `UPDATING`, `RUNNING`, `COMPLETED`, and `CANCELLED`.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param statusReason If the launch was stopped, this is the string that was entered by the person who stopped the launch, to explain why it was stopped.
         * 
         * @return builder
         * 
         */
        public Builder statusReason(@Nullable Output<String> statusReason) {
            $.statusReason = statusReason;
            return this;
        }

        /**
         * @param statusReason If the launch was stopped, this is the string that was entered by the person who stopped the launch, to explain why it was stopped.
         * 
         * @return builder
         * 
         */
        public Builder statusReason(String statusReason) {
            return statusReason(Output.of(statusReason));
        }

        /**
         * @param tags Tags to apply to the launch. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Tags to apply to the launch. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tagsAll A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
         * 
         * @return builder
         * 
         */
        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        /**
         * @param tagsAll A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
         * 
         * @return builder
         * 
         */
        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        /**
         * @param type The type of launch.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of launch.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public LaunchState build() {
            return $;
        }
    }

}
