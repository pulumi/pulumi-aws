// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.cloudwatch;

import com.pulumi.aws.cloudwatch.inputs.MetricAlarmMetricQueryArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MetricAlarmArgs extends com.pulumi.resources.ResourceArgs {

    public static final MetricAlarmArgs Empty = new MetricAlarmArgs();

    @Import(name="actionsEnabled")
    private @Nullable Output<Boolean> actionsEnabled;

    public Optional<Output<Boolean>> actionsEnabled() {
        return Optional.ofNullable(this.actionsEnabled);
    }

    @Import(name="alarmActions")
    private @Nullable Output<List<String>> alarmActions;

    public Optional<Output<List<String>>> alarmActions() {
        return Optional.ofNullable(this.alarmActions);
    }

    @Import(name="alarmDescription")
    private @Nullable Output<String> alarmDescription;

    public Optional<Output<String>> alarmDescription() {
        return Optional.ofNullable(this.alarmDescription);
    }

    @Import(name="comparisonOperator", required=true)
    private Output<String> comparisonOperator;

    public Output<String> comparisonOperator() {
        return this.comparisonOperator;
    }

    @Import(name="datapointsToAlarm")
    private @Nullable Output<Integer> datapointsToAlarm;

    public Optional<Output<Integer>> datapointsToAlarm() {
        return Optional.ofNullable(this.datapointsToAlarm);
    }

    @Import(name="dimensions")
    private @Nullable Output<Map<String,String>> dimensions;

    public Optional<Output<Map<String,String>>> dimensions() {
        return Optional.ofNullable(this.dimensions);
    }

    @Import(name="evaluateLowSampleCountPercentiles")
    private @Nullable Output<String> evaluateLowSampleCountPercentiles;

    public Optional<Output<String>> evaluateLowSampleCountPercentiles() {
        return Optional.ofNullable(this.evaluateLowSampleCountPercentiles);
    }

    @Import(name="evaluationPeriods", required=true)
    private Output<Integer> evaluationPeriods;

    public Output<Integer> evaluationPeriods() {
        return this.evaluationPeriods;
    }

    @Import(name="extendedStatistic")
    private @Nullable Output<String> extendedStatistic;

    public Optional<Output<String>> extendedStatistic() {
        return Optional.ofNullable(this.extendedStatistic);
    }

    @Import(name="insufficientDataActions")
    private @Nullable Output<List<String>> insufficientDataActions;

    public Optional<Output<List<String>>> insufficientDataActions() {
        return Optional.ofNullable(this.insufficientDataActions);
    }

    @Import(name="metricName")
    private @Nullable Output<String> metricName;

    public Optional<Output<String>> metricName() {
        return Optional.ofNullable(this.metricName);
    }

    @Import(name="metricQueries")
    private @Nullable Output<List<MetricAlarmMetricQueryArgs>> metricQueries;

    public Optional<Output<List<MetricAlarmMetricQueryArgs>>> metricQueries() {
        return Optional.ofNullable(this.metricQueries);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    @Import(name="okActions")
    private @Nullable Output<List<String>> okActions;

    public Optional<Output<List<String>>> okActions() {
        return Optional.ofNullable(this.okActions);
    }

    @Import(name="period")
    private @Nullable Output<Integer> period;

    public Optional<Output<Integer>> period() {
        return Optional.ofNullable(this.period);
    }

    @Import(name="statistic")
    private @Nullable Output<String> statistic;

    public Optional<Output<String>> statistic() {
        return Optional.ofNullable(this.statistic);
    }

    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="threshold")
    private @Nullable Output<Double> threshold;

    public Optional<Output<Double>> threshold() {
        return Optional.ofNullable(this.threshold);
    }

    @Import(name="thresholdMetricId")
    private @Nullable Output<String> thresholdMetricId;

    public Optional<Output<String>> thresholdMetricId() {
        return Optional.ofNullable(this.thresholdMetricId);
    }

    @Import(name="treatMissingData")
    private @Nullable Output<String> treatMissingData;

    public Optional<Output<String>> treatMissingData() {
        return Optional.ofNullable(this.treatMissingData);
    }

    @Import(name="unit")
    private @Nullable Output<String> unit;

    public Optional<Output<String>> unit() {
        return Optional.ofNullable(this.unit);
    }

    private MetricAlarmArgs() {}

    private MetricAlarmArgs(MetricAlarmArgs $) {
        this.actionsEnabled = $.actionsEnabled;
        this.alarmActions = $.alarmActions;
        this.alarmDescription = $.alarmDescription;
        this.comparisonOperator = $.comparisonOperator;
        this.datapointsToAlarm = $.datapointsToAlarm;
        this.dimensions = $.dimensions;
        this.evaluateLowSampleCountPercentiles = $.evaluateLowSampleCountPercentiles;
        this.evaluationPeriods = $.evaluationPeriods;
        this.extendedStatistic = $.extendedStatistic;
        this.insufficientDataActions = $.insufficientDataActions;
        this.metricName = $.metricName;
        this.metricQueries = $.metricQueries;
        this.name = $.name;
        this.namespace = $.namespace;
        this.okActions = $.okActions;
        this.period = $.period;
        this.statistic = $.statistic;
        this.tags = $.tags;
        this.threshold = $.threshold;
        this.thresholdMetricId = $.thresholdMetricId;
        this.treatMissingData = $.treatMissingData;
        this.unit = $.unit;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MetricAlarmArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MetricAlarmArgs $;

        public Builder() {
            $ = new MetricAlarmArgs();
        }

        public Builder(MetricAlarmArgs defaults) {
            $ = new MetricAlarmArgs(Objects.requireNonNull(defaults));
        }

        public Builder actionsEnabled(@Nullable Output<Boolean> actionsEnabled) {
            $.actionsEnabled = actionsEnabled;
            return this;
        }

        public Builder actionsEnabled(Boolean actionsEnabled) {
            return actionsEnabled(Output.of(actionsEnabled));
        }

        public Builder alarmActions(@Nullable Output<List<String>> alarmActions) {
            $.alarmActions = alarmActions;
            return this;
        }

        public Builder alarmActions(List<String> alarmActions) {
            return alarmActions(Output.of(alarmActions));
        }

        public Builder alarmActions(String... alarmActions) {
            return alarmActions(List.of(alarmActions));
        }

        public Builder alarmDescription(@Nullable Output<String> alarmDescription) {
            $.alarmDescription = alarmDescription;
            return this;
        }

        public Builder alarmDescription(String alarmDescription) {
            return alarmDescription(Output.of(alarmDescription));
        }

        public Builder comparisonOperator(Output<String> comparisonOperator) {
            $.comparisonOperator = comparisonOperator;
            return this;
        }

        public Builder comparisonOperator(String comparisonOperator) {
            return comparisonOperator(Output.of(comparisonOperator));
        }

        public Builder datapointsToAlarm(@Nullable Output<Integer> datapointsToAlarm) {
            $.datapointsToAlarm = datapointsToAlarm;
            return this;
        }

        public Builder datapointsToAlarm(Integer datapointsToAlarm) {
            return datapointsToAlarm(Output.of(datapointsToAlarm));
        }

        public Builder dimensions(@Nullable Output<Map<String,String>> dimensions) {
            $.dimensions = dimensions;
            return this;
        }

        public Builder dimensions(Map<String,String> dimensions) {
            return dimensions(Output.of(dimensions));
        }

        public Builder evaluateLowSampleCountPercentiles(@Nullable Output<String> evaluateLowSampleCountPercentiles) {
            $.evaluateLowSampleCountPercentiles = evaluateLowSampleCountPercentiles;
            return this;
        }

        public Builder evaluateLowSampleCountPercentiles(String evaluateLowSampleCountPercentiles) {
            return evaluateLowSampleCountPercentiles(Output.of(evaluateLowSampleCountPercentiles));
        }

        public Builder evaluationPeriods(Output<Integer> evaluationPeriods) {
            $.evaluationPeriods = evaluationPeriods;
            return this;
        }

        public Builder evaluationPeriods(Integer evaluationPeriods) {
            return evaluationPeriods(Output.of(evaluationPeriods));
        }

        public Builder extendedStatistic(@Nullable Output<String> extendedStatistic) {
            $.extendedStatistic = extendedStatistic;
            return this;
        }

        public Builder extendedStatistic(String extendedStatistic) {
            return extendedStatistic(Output.of(extendedStatistic));
        }

        public Builder insufficientDataActions(@Nullable Output<List<String>> insufficientDataActions) {
            $.insufficientDataActions = insufficientDataActions;
            return this;
        }

        public Builder insufficientDataActions(List<String> insufficientDataActions) {
            return insufficientDataActions(Output.of(insufficientDataActions));
        }

        public Builder insufficientDataActions(String... insufficientDataActions) {
            return insufficientDataActions(List.of(insufficientDataActions));
        }

        public Builder metricName(@Nullable Output<String> metricName) {
            $.metricName = metricName;
            return this;
        }

        public Builder metricName(String metricName) {
            return metricName(Output.of(metricName));
        }

        public Builder metricQueries(@Nullable Output<List<MetricAlarmMetricQueryArgs>> metricQueries) {
            $.metricQueries = metricQueries;
            return this;
        }

        public Builder metricQueries(List<MetricAlarmMetricQueryArgs> metricQueries) {
            return metricQueries(Output.of(metricQueries));
        }

        public Builder metricQueries(MetricAlarmMetricQueryArgs... metricQueries) {
            return metricQueries(List.of(metricQueries));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        public Builder okActions(@Nullable Output<List<String>> okActions) {
            $.okActions = okActions;
            return this;
        }

        public Builder okActions(List<String> okActions) {
            return okActions(Output.of(okActions));
        }

        public Builder okActions(String... okActions) {
            return okActions(List.of(okActions));
        }

        public Builder period(@Nullable Output<Integer> period) {
            $.period = period;
            return this;
        }

        public Builder period(Integer period) {
            return period(Output.of(period));
        }

        public Builder statistic(@Nullable Output<String> statistic) {
            $.statistic = statistic;
            return this;
        }

        public Builder statistic(String statistic) {
            return statistic(Output.of(statistic));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder threshold(@Nullable Output<Double> threshold) {
            $.threshold = threshold;
            return this;
        }

        public Builder threshold(Double threshold) {
            return threshold(Output.of(threshold));
        }

        public Builder thresholdMetricId(@Nullable Output<String> thresholdMetricId) {
            $.thresholdMetricId = thresholdMetricId;
            return this;
        }

        public Builder thresholdMetricId(String thresholdMetricId) {
            return thresholdMetricId(Output.of(thresholdMetricId));
        }

        public Builder treatMissingData(@Nullable Output<String> treatMissingData) {
            $.treatMissingData = treatMissingData;
            return this;
        }

        public Builder treatMissingData(String treatMissingData) {
            return treatMissingData(Output.of(treatMissingData));
        }

        public Builder unit(@Nullable Output<String> unit) {
            $.unit = unit;
            return this;
        }

        public Builder unit(String unit) {
            return unit(Output.of(unit));
        }

        public MetricAlarmArgs build() {
            $.comparisonOperator = Objects.requireNonNull($.comparisonOperator, "expected parameter 'comparisonOperator' to be non-null");
            $.evaluationPeriods = Objects.requireNonNull($.evaluationPeriods, "expected parameter 'evaluationPeriods' to be non-null");
            return $;
        }
    }

}
