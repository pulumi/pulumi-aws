// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.glue.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class CatalogTableOptimizerConfigurationRetentionConfigurationIcebergConfiguration {
    /**
     * @return If set to `false`, snapshots are only deleted from table metadata, and the underlying data and metadata files are not deleted. Defaults to `false`.
     * 
     */
    private @Nullable Boolean cleanExpiredFiles;
    /**
     * @return The number of Iceberg snapshots to retain within the retention period. Defaults to `1` or the corresponding Iceberg table configuration field if it exists.
     * 
     */
    private @Nullable Integer numberOfSnapshotsToRetain;
    /**
     * @return Interval in hours between retention job runs. Defaults to `24`.
     * 
     */
    private @Nullable Integer runRateInHours;
    /**
     * @return The number of days to retain the Iceberg snapshots. Defaults to `5`, or the corresponding Iceberg table configuration field if it exists.
     * 
     */
    private @Nullable Integer snapshotRetentionPeriodInDays;

    private CatalogTableOptimizerConfigurationRetentionConfigurationIcebergConfiguration() {}
    /**
     * @return If set to `false`, snapshots are only deleted from table metadata, and the underlying data and metadata files are not deleted. Defaults to `false`.
     * 
     */
    public Optional<Boolean> cleanExpiredFiles() {
        return Optional.ofNullable(this.cleanExpiredFiles);
    }
    /**
     * @return The number of Iceberg snapshots to retain within the retention period. Defaults to `1` or the corresponding Iceberg table configuration field if it exists.
     * 
     */
    public Optional<Integer> numberOfSnapshotsToRetain() {
        return Optional.ofNullable(this.numberOfSnapshotsToRetain);
    }
    /**
     * @return Interval in hours between retention job runs. Defaults to `24`.
     * 
     */
    public Optional<Integer> runRateInHours() {
        return Optional.ofNullable(this.runRateInHours);
    }
    /**
     * @return The number of days to retain the Iceberg snapshots. Defaults to `5`, or the corresponding Iceberg table configuration field if it exists.
     * 
     */
    public Optional<Integer> snapshotRetentionPeriodInDays() {
        return Optional.ofNullable(this.snapshotRetentionPeriodInDays);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CatalogTableOptimizerConfigurationRetentionConfigurationIcebergConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean cleanExpiredFiles;
        private @Nullable Integer numberOfSnapshotsToRetain;
        private @Nullable Integer runRateInHours;
        private @Nullable Integer snapshotRetentionPeriodInDays;
        public Builder() {}
        public Builder(CatalogTableOptimizerConfigurationRetentionConfigurationIcebergConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cleanExpiredFiles = defaults.cleanExpiredFiles;
    	      this.numberOfSnapshotsToRetain = defaults.numberOfSnapshotsToRetain;
    	      this.runRateInHours = defaults.runRateInHours;
    	      this.snapshotRetentionPeriodInDays = defaults.snapshotRetentionPeriodInDays;
        }

        @CustomType.Setter
        public Builder cleanExpiredFiles(@Nullable Boolean cleanExpiredFiles) {

            this.cleanExpiredFiles = cleanExpiredFiles;
            return this;
        }
        @CustomType.Setter
        public Builder numberOfSnapshotsToRetain(@Nullable Integer numberOfSnapshotsToRetain) {

            this.numberOfSnapshotsToRetain = numberOfSnapshotsToRetain;
            return this;
        }
        @CustomType.Setter
        public Builder runRateInHours(@Nullable Integer runRateInHours) {

            this.runRateInHours = runRateInHours;
            return this;
        }
        @CustomType.Setter
        public Builder snapshotRetentionPeriodInDays(@Nullable Integer snapshotRetentionPeriodInDays) {

            this.snapshotRetentionPeriodInDays = snapshotRetentionPeriodInDays;
            return this;
        }
        public CatalogTableOptimizerConfigurationRetentionConfigurationIcebergConfiguration build() {
            final var _resultValue = new CatalogTableOptimizerConfigurationRetentionConfigurationIcebergConfiguration();
            _resultValue.cleanExpiredFiles = cleanExpiredFiles;
            _resultValue.numberOfSnapshotsToRetain = numberOfSnapshotsToRetain;
            _resultValue.runRateInHours = runRateInHours;
            _resultValue.snapshotRetentionPeriodInDays = snapshotRetentionPeriodInDays;
            return _resultValue;
        }
    }
}
