// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.kinesis.outputs;

import com.pulumi.aws.kinesis.outputs.FirehoseDeliveryStreamIcebergConfigurationCloudwatchLoggingOptions;
import com.pulumi.aws.kinesis.outputs.FirehoseDeliveryStreamIcebergConfigurationDestinationTableConfiguration;
import com.pulumi.aws.kinesis.outputs.FirehoseDeliveryStreamIcebergConfigurationProcessingConfiguration;
import com.pulumi.aws.kinesis.outputs.FirehoseDeliveryStreamIcebergConfigurationS3Configuration;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class FirehoseDeliveryStreamIcebergConfiguration {
    /**
     * @return Buffer incoming data for the specified period of time, in seconds between 0 and 900, before delivering it to the destination. The default value is 300.
     * 
     */
    private @Nullable Integer bufferingInterval;
    /**
     * @return Buffer incoming data to the specified size, in MBs between 1 and 128, before delivering it to the destination. The default value is 5.
     * 
     */
    private @Nullable Integer bufferingSize;
    /**
     * @return Glue catalog ARN identifier of the destination Apache Iceberg Tables. You must specify the ARN in the format `arn:aws:glue:region:account-id:catalog`
     * 
     */
    private String catalogArn;
    /**
     * @return The CloudWatch Logging Options for the delivery stream. See `cloudwatch_logging_options` block below for details.
     * 
     */
    private @Nullable FirehoseDeliveryStreamIcebergConfigurationCloudwatchLoggingOptions cloudwatchLoggingOptions;
    /**
     * @return Destination table configurations which Firehose uses to deliver data to Apache Iceberg Tables. Firehose will write data with insert if table specific configuration is not provided. See `destination_table_configuration` block below for details.
     * 
     */
    private @Nullable List<FirehoseDeliveryStreamIcebergConfigurationDestinationTableConfiguration> destinationTableConfigurations;
    /**
     * @return The data processing configuration.  See `processing_configuration` block below for details.
     * 
     */
    private @Nullable FirehoseDeliveryStreamIcebergConfigurationProcessingConfiguration processingConfiguration;
    /**
     * @return The period of time, in seconds between 0 to 7200, during which Firehose retries to deliver data to the specified destination.
     * 
     */
    private @Nullable Integer retryDuration;
    /**
     * @return The ARN of the IAM role to be assumed by Firehose for calling Apache Iceberg Tables.
     * 
     */
    private String roleArn;
    private @Nullable String s3BackupMode;
    /**
     * @return The S3 Configuration. See `s3_configuration` block below for details.
     * 
     */
    private FirehoseDeliveryStreamIcebergConfigurationS3Configuration s3Configuration;

    private FirehoseDeliveryStreamIcebergConfiguration() {}
    /**
     * @return Buffer incoming data for the specified period of time, in seconds between 0 and 900, before delivering it to the destination. The default value is 300.
     * 
     */
    public Optional<Integer> bufferingInterval() {
        return Optional.ofNullable(this.bufferingInterval);
    }
    /**
     * @return Buffer incoming data to the specified size, in MBs between 1 and 128, before delivering it to the destination. The default value is 5.
     * 
     */
    public Optional<Integer> bufferingSize() {
        return Optional.ofNullable(this.bufferingSize);
    }
    /**
     * @return Glue catalog ARN identifier of the destination Apache Iceberg Tables. You must specify the ARN in the format `arn:aws:glue:region:account-id:catalog`
     * 
     */
    public String catalogArn() {
        return this.catalogArn;
    }
    /**
     * @return The CloudWatch Logging Options for the delivery stream. See `cloudwatch_logging_options` block below for details.
     * 
     */
    public Optional<FirehoseDeliveryStreamIcebergConfigurationCloudwatchLoggingOptions> cloudwatchLoggingOptions() {
        return Optional.ofNullable(this.cloudwatchLoggingOptions);
    }
    /**
     * @return Destination table configurations which Firehose uses to deliver data to Apache Iceberg Tables. Firehose will write data with insert if table specific configuration is not provided. See `destination_table_configuration` block below for details.
     * 
     */
    public List<FirehoseDeliveryStreamIcebergConfigurationDestinationTableConfiguration> destinationTableConfigurations() {
        return this.destinationTableConfigurations == null ? List.of() : this.destinationTableConfigurations;
    }
    /**
     * @return The data processing configuration.  See `processing_configuration` block below for details.
     * 
     */
    public Optional<FirehoseDeliveryStreamIcebergConfigurationProcessingConfiguration> processingConfiguration() {
        return Optional.ofNullable(this.processingConfiguration);
    }
    /**
     * @return The period of time, in seconds between 0 to 7200, during which Firehose retries to deliver data to the specified destination.
     * 
     */
    public Optional<Integer> retryDuration() {
        return Optional.ofNullable(this.retryDuration);
    }
    /**
     * @return The ARN of the IAM role to be assumed by Firehose for calling Apache Iceberg Tables.
     * 
     */
    public String roleArn() {
        return this.roleArn;
    }
    public Optional<String> s3BackupMode() {
        return Optional.ofNullable(this.s3BackupMode);
    }
    /**
     * @return The S3 Configuration. See `s3_configuration` block below for details.
     * 
     */
    public FirehoseDeliveryStreamIcebergConfigurationS3Configuration s3Configuration() {
        return this.s3Configuration;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FirehoseDeliveryStreamIcebergConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer bufferingInterval;
        private @Nullable Integer bufferingSize;
        private String catalogArn;
        private @Nullable FirehoseDeliveryStreamIcebergConfigurationCloudwatchLoggingOptions cloudwatchLoggingOptions;
        private @Nullable List<FirehoseDeliveryStreamIcebergConfigurationDestinationTableConfiguration> destinationTableConfigurations;
        private @Nullable FirehoseDeliveryStreamIcebergConfigurationProcessingConfiguration processingConfiguration;
        private @Nullable Integer retryDuration;
        private String roleArn;
        private @Nullable String s3BackupMode;
        private FirehoseDeliveryStreamIcebergConfigurationS3Configuration s3Configuration;
        public Builder() {}
        public Builder(FirehoseDeliveryStreamIcebergConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bufferingInterval = defaults.bufferingInterval;
    	      this.bufferingSize = defaults.bufferingSize;
    	      this.catalogArn = defaults.catalogArn;
    	      this.cloudwatchLoggingOptions = defaults.cloudwatchLoggingOptions;
    	      this.destinationTableConfigurations = defaults.destinationTableConfigurations;
    	      this.processingConfiguration = defaults.processingConfiguration;
    	      this.retryDuration = defaults.retryDuration;
    	      this.roleArn = defaults.roleArn;
    	      this.s3BackupMode = defaults.s3BackupMode;
    	      this.s3Configuration = defaults.s3Configuration;
        }

        @CustomType.Setter
        public Builder bufferingInterval(@Nullable Integer bufferingInterval) {

            this.bufferingInterval = bufferingInterval;
            return this;
        }
        @CustomType.Setter
        public Builder bufferingSize(@Nullable Integer bufferingSize) {

            this.bufferingSize = bufferingSize;
            return this;
        }
        @CustomType.Setter
        public Builder catalogArn(String catalogArn) {
            if (catalogArn == null) {
              throw new MissingRequiredPropertyException("FirehoseDeliveryStreamIcebergConfiguration", "catalogArn");
            }
            this.catalogArn = catalogArn;
            return this;
        }
        @CustomType.Setter
        public Builder cloudwatchLoggingOptions(@Nullable FirehoseDeliveryStreamIcebergConfigurationCloudwatchLoggingOptions cloudwatchLoggingOptions) {

            this.cloudwatchLoggingOptions = cloudwatchLoggingOptions;
            return this;
        }
        @CustomType.Setter
        public Builder destinationTableConfigurations(@Nullable List<FirehoseDeliveryStreamIcebergConfigurationDestinationTableConfiguration> destinationTableConfigurations) {

            this.destinationTableConfigurations = destinationTableConfigurations;
            return this;
        }
        public Builder destinationTableConfigurations(FirehoseDeliveryStreamIcebergConfigurationDestinationTableConfiguration... destinationTableConfigurations) {
            return destinationTableConfigurations(List.of(destinationTableConfigurations));
        }
        @CustomType.Setter
        public Builder processingConfiguration(@Nullable FirehoseDeliveryStreamIcebergConfigurationProcessingConfiguration processingConfiguration) {

            this.processingConfiguration = processingConfiguration;
            return this;
        }
        @CustomType.Setter
        public Builder retryDuration(@Nullable Integer retryDuration) {

            this.retryDuration = retryDuration;
            return this;
        }
        @CustomType.Setter
        public Builder roleArn(String roleArn) {
            if (roleArn == null) {
              throw new MissingRequiredPropertyException("FirehoseDeliveryStreamIcebergConfiguration", "roleArn");
            }
            this.roleArn = roleArn;
            return this;
        }
        @CustomType.Setter
        public Builder s3BackupMode(@Nullable String s3BackupMode) {

            this.s3BackupMode = s3BackupMode;
            return this;
        }
        @CustomType.Setter
        public Builder s3Configuration(FirehoseDeliveryStreamIcebergConfigurationS3Configuration s3Configuration) {
            if (s3Configuration == null) {
              throw new MissingRequiredPropertyException("FirehoseDeliveryStreamIcebergConfiguration", "s3Configuration");
            }
            this.s3Configuration = s3Configuration;
            return this;
        }
        public FirehoseDeliveryStreamIcebergConfiguration build() {
            final var _resultValue = new FirehoseDeliveryStreamIcebergConfiguration();
            _resultValue.bufferingInterval = bufferingInterval;
            _resultValue.bufferingSize = bufferingSize;
            _resultValue.catalogArn = catalogArn;
            _resultValue.cloudwatchLoggingOptions = cloudwatchLoggingOptions;
            _resultValue.destinationTableConfigurations = destinationTableConfigurations;
            _resultValue.processingConfiguration = processingConfiguration;
            _resultValue.retryDuration = retryDuration;
            _resultValue.roleArn = roleArn;
            _resultValue.s3BackupMode = s3BackupMode;
            _resultValue.s3Configuration = s3Configuration;
            return _resultValue;
        }
    }
}
