// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.transcribe.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VocabularyFilterState extends com.pulumi.resources.ResourceArgs {

    public static final VocabularyFilterState Empty = new VocabularyFilterState();

    @Import(name="arn")
    private @Nullable Output<String> arn;

    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    @Import(name="downloadUri")
    private @Nullable Output<String> downloadUri;

    public Optional<Output<String>> downloadUri() {
        return Optional.ofNullable(this.downloadUri);
    }

    @Import(name="languageCode")
    private @Nullable Output<String> languageCode;

    public Optional<Output<String>> languageCode() {
        return Optional.ofNullable(this.languageCode);
    }

    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    @Import(name="vocabularyFilterFileUri")
    private @Nullable Output<String> vocabularyFilterFileUri;

    public Optional<Output<String>> vocabularyFilterFileUri() {
        return Optional.ofNullable(this.vocabularyFilterFileUri);
    }

    @Import(name="vocabularyFilterName")
    private @Nullable Output<String> vocabularyFilterName;

    public Optional<Output<String>> vocabularyFilterName() {
        return Optional.ofNullable(this.vocabularyFilterName);
    }

    @Import(name="words")
    private @Nullable Output<List<String>> words;

    public Optional<Output<List<String>>> words() {
        return Optional.ofNullable(this.words);
    }

    private VocabularyFilterState() {}

    private VocabularyFilterState(VocabularyFilterState $) {
        this.arn = $.arn;
        this.downloadUri = $.downloadUri;
        this.languageCode = $.languageCode;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
        this.vocabularyFilterFileUri = $.vocabularyFilterFileUri;
        this.vocabularyFilterName = $.vocabularyFilterName;
        this.words = $.words;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VocabularyFilterState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VocabularyFilterState $;

        public Builder() {
            $ = new VocabularyFilterState();
        }

        public Builder(VocabularyFilterState defaults) {
            $ = new VocabularyFilterState(Objects.requireNonNull(defaults));
        }

        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        public Builder downloadUri(@Nullable Output<String> downloadUri) {
            $.downloadUri = downloadUri;
            return this;
        }

        public Builder downloadUri(String downloadUri) {
            return downloadUri(Output.of(downloadUri));
        }

        public Builder languageCode(@Nullable Output<String> languageCode) {
            $.languageCode = languageCode;
            return this;
        }

        public Builder languageCode(String languageCode) {
            return languageCode(Output.of(languageCode));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        public Builder vocabularyFilterFileUri(@Nullable Output<String> vocabularyFilterFileUri) {
            $.vocabularyFilterFileUri = vocabularyFilterFileUri;
            return this;
        }

        public Builder vocabularyFilterFileUri(String vocabularyFilterFileUri) {
            return vocabularyFilterFileUri(Output.of(vocabularyFilterFileUri));
        }

        public Builder vocabularyFilterName(@Nullable Output<String> vocabularyFilterName) {
            $.vocabularyFilterName = vocabularyFilterName;
            return this;
        }

        public Builder vocabularyFilterName(String vocabularyFilterName) {
            return vocabularyFilterName(Output.of(vocabularyFilterName));
        }

        public Builder words(@Nullable Output<List<String>> words) {
            $.words = words;
            return this;
        }

        public Builder words(List<String> words) {
            return words(Output.of(words));
        }

        public Builder words(String... words) {
            return words(List.of(words));
        }

        public VocabularyFilterState build() {
            return $;
        }
    }

}
