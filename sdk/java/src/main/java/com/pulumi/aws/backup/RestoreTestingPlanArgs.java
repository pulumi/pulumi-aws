// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.backup;

import com.pulumi.aws.backup.inputs.RestoreTestingPlanRecoveryPointSelectionArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RestoreTestingPlanArgs extends com.pulumi.resources.ResourceArgs {

    public static final RestoreTestingPlanArgs Empty = new RestoreTestingPlanArgs();

    /**
     * The name of the restore testing plan. Must be between 1 and 50 characters long and contain only alphanumeric characters and underscores.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the restore testing plan. Must be between 1 and 50 characters long and contain only alphanumeric characters and underscores.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Specifies the recovery point selection configuration. See RecoveryPointSelection section for more details.
     * 
     */
    @Import(name="recoveryPointSelection")
    private @Nullable Output<RestoreTestingPlanRecoveryPointSelectionArgs> recoveryPointSelection;

    /**
     * @return Specifies the recovery point selection configuration. See RecoveryPointSelection section for more details.
     * 
     */
    public Optional<Output<RestoreTestingPlanRecoveryPointSelectionArgs>> recoveryPointSelection() {
        return Optional.ofNullable(this.recoveryPointSelection);
    }

    /**
     * The schedule expression for the restore testing plan.
     * 
     */
    @Import(name="scheduleExpression", required=true)
    private Output<String> scheduleExpression;

    /**
     * @return The schedule expression for the restore testing plan.
     * 
     */
    public Output<String> scheduleExpression() {
        return this.scheduleExpression;
    }

    /**
     * The timezone for the schedule expression. If not provided, the state value will be used.
     * 
     */
    @Import(name="scheduleExpressionTimezone")
    private @Nullable Output<String> scheduleExpressionTimezone;

    /**
     * @return The timezone for the schedule expression. If not provided, the state value will be used.
     * 
     */
    public Optional<Output<String>> scheduleExpressionTimezone() {
        return Optional.ofNullable(this.scheduleExpressionTimezone);
    }

    /**
     * The number of hours in the start window for the restore testing plan. Must be between 1 and 168.
     * 
     */
    @Import(name="startWindowHours")
    private @Nullable Output<Integer> startWindowHours;

    /**
     * @return The number of hours in the start window for the restore testing plan. Must be between 1 and 168.
     * 
     */
    public Optional<Output<Integer>> startWindowHours() {
        return Optional.ofNullable(this.startWindowHours);
    }

    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private RestoreTestingPlanArgs() {}

    private RestoreTestingPlanArgs(RestoreTestingPlanArgs $) {
        this.name = $.name;
        this.recoveryPointSelection = $.recoveryPointSelection;
        this.scheduleExpression = $.scheduleExpression;
        this.scheduleExpressionTimezone = $.scheduleExpressionTimezone;
        this.startWindowHours = $.startWindowHours;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RestoreTestingPlanArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RestoreTestingPlanArgs $;

        public Builder() {
            $ = new RestoreTestingPlanArgs();
        }

        public Builder(RestoreTestingPlanArgs defaults) {
            $ = new RestoreTestingPlanArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param name The name of the restore testing plan. Must be between 1 and 50 characters long and contain only alphanumeric characters and underscores.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the restore testing plan. Must be between 1 and 50 characters long and contain only alphanumeric characters and underscores.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param recoveryPointSelection Specifies the recovery point selection configuration. See RecoveryPointSelection section for more details.
         * 
         * @return builder
         * 
         */
        public Builder recoveryPointSelection(@Nullable Output<RestoreTestingPlanRecoveryPointSelectionArgs> recoveryPointSelection) {
            $.recoveryPointSelection = recoveryPointSelection;
            return this;
        }

        /**
         * @param recoveryPointSelection Specifies the recovery point selection configuration. See RecoveryPointSelection section for more details.
         * 
         * @return builder
         * 
         */
        public Builder recoveryPointSelection(RestoreTestingPlanRecoveryPointSelectionArgs recoveryPointSelection) {
            return recoveryPointSelection(Output.of(recoveryPointSelection));
        }

        /**
         * @param scheduleExpression The schedule expression for the restore testing plan.
         * 
         * @return builder
         * 
         */
        public Builder scheduleExpression(Output<String> scheduleExpression) {
            $.scheduleExpression = scheduleExpression;
            return this;
        }

        /**
         * @param scheduleExpression The schedule expression for the restore testing plan.
         * 
         * @return builder
         * 
         */
        public Builder scheduleExpression(String scheduleExpression) {
            return scheduleExpression(Output.of(scheduleExpression));
        }

        /**
         * @param scheduleExpressionTimezone The timezone for the schedule expression. If not provided, the state value will be used.
         * 
         * @return builder
         * 
         */
        public Builder scheduleExpressionTimezone(@Nullable Output<String> scheduleExpressionTimezone) {
            $.scheduleExpressionTimezone = scheduleExpressionTimezone;
            return this;
        }

        /**
         * @param scheduleExpressionTimezone The timezone for the schedule expression. If not provided, the state value will be used.
         * 
         * @return builder
         * 
         */
        public Builder scheduleExpressionTimezone(String scheduleExpressionTimezone) {
            return scheduleExpressionTimezone(Output.of(scheduleExpressionTimezone));
        }

        /**
         * @param startWindowHours The number of hours in the start window for the restore testing plan. Must be between 1 and 168.
         * 
         * @return builder
         * 
         */
        public Builder startWindowHours(@Nullable Output<Integer> startWindowHours) {
            $.startWindowHours = startWindowHours;
            return this;
        }

        /**
         * @param startWindowHours The number of hours in the start window for the restore testing plan. Must be between 1 and 168.
         * 
         * @return builder
         * 
         */
        public Builder startWindowHours(Integer startWindowHours) {
            return startWindowHours(Output.of(startWindowHours));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public RestoreTestingPlanArgs build() {
            if ($.scheduleExpression == null) {
                throw new MissingRequiredPropertyException("RestoreTestingPlanArgs", "scheduleExpression");
            }
            return $;
        }
    }

}
