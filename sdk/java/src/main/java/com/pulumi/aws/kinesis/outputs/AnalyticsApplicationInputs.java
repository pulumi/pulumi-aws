// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.kinesis.outputs;

import com.pulumi.aws.kinesis.outputs.AnalyticsApplicationInputsKinesisFirehose;
import com.pulumi.aws.kinesis.outputs.AnalyticsApplicationInputsKinesisStream;
import com.pulumi.aws.kinesis.outputs.AnalyticsApplicationInputsParallelism;
import com.pulumi.aws.kinesis.outputs.AnalyticsApplicationInputsProcessingConfiguration;
import com.pulumi.aws.kinesis.outputs.AnalyticsApplicationInputsSchema;
import com.pulumi.aws.kinesis.outputs.AnalyticsApplicationInputsStartingPositionConfiguration;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class AnalyticsApplicationInputs {
    private @Nullable String id;
    private @Nullable AnalyticsApplicationInputsKinesisFirehose kinesisFirehose;
    private @Nullable AnalyticsApplicationInputsKinesisStream kinesisStream;
    private String namePrefix;
    private @Nullable AnalyticsApplicationInputsParallelism parallelism;
    private @Nullable AnalyticsApplicationInputsProcessingConfiguration processingConfiguration;
    private AnalyticsApplicationInputsSchema schema;
    private @Nullable List<AnalyticsApplicationInputsStartingPositionConfiguration> startingPositionConfigurations;
    private @Nullable List<String> streamNames;

    private AnalyticsApplicationInputs() {}
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    public Optional<AnalyticsApplicationInputsKinesisFirehose> kinesisFirehose() {
        return Optional.ofNullable(this.kinesisFirehose);
    }
    public Optional<AnalyticsApplicationInputsKinesisStream> kinesisStream() {
        return Optional.ofNullable(this.kinesisStream);
    }
    public String namePrefix() {
        return this.namePrefix;
    }
    public Optional<AnalyticsApplicationInputsParallelism> parallelism() {
        return Optional.ofNullable(this.parallelism);
    }
    public Optional<AnalyticsApplicationInputsProcessingConfiguration> processingConfiguration() {
        return Optional.ofNullable(this.processingConfiguration);
    }
    public AnalyticsApplicationInputsSchema schema() {
        return this.schema;
    }
    public List<AnalyticsApplicationInputsStartingPositionConfiguration> startingPositionConfigurations() {
        return this.startingPositionConfigurations == null ? List.of() : this.startingPositionConfigurations;
    }
    public List<String> streamNames() {
        return this.streamNames == null ? List.of() : this.streamNames;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AnalyticsApplicationInputs defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String id;
        private @Nullable AnalyticsApplicationInputsKinesisFirehose kinesisFirehose;
        private @Nullable AnalyticsApplicationInputsKinesisStream kinesisStream;
        private String namePrefix;
        private @Nullable AnalyticsApplicationInputsParallelism parallelism;
        private @Nullable AnalyticsApplicationInputsProcessingConfiguration processingConfiguration;
        private AnalyticsApplicationInputsSchema schema;
        private @Nullable List<AnalyticsApplicationInputsStartingPositionConfiguration> startingPositionConfigurations;
        private @Nullable List<String> streamNames;
        public Builder() {}
        public Builder(AnalyticsApplicationInputs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.id = defaults.id;
    	      this.kinesisFirehose = defaults.kinesisFirehose;
    	      this.kinesisStream = defaults.kinesisStream;
    	      this.namePrefix = defaults.namePrefix;
    	      this.parallelism = defaults.parallelism;
    	      this.processingConfiguration = defaults.processingConfiguration;
    	      this.schema = defaults.schema;
    	      this.startingPositionConfigurations = defaults.startingPositionConfigurations;
    	      this.streamNames = defaults.streamNames;
        }

        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder kinesisFirehose(@Nullable AnalyticsApplicationInputsKinesisFirehose kinesisFirehose) {
            this.kinesisFirehose = kinesisFirehose;
            return this;
        }
        @CustomType.Setter
        public Builder kinesisStream(@Nullable AnalyticsApplicationInputsKinesisStream kinesisStream) {
            this.kinesisStream = kinesisStream;
            return this;
        }
        @CustomType.Setter
        public Builder namePrefix(String namePrefix) {
            this.namePrefix = Objects.requireNonNull(namePrefix);
            return this;
        }
        @CustomType.Setter
        public Builder parallelism(@Nullable AnalyticsApplicationInputsParallelism parallelism) {
            this.parallelism = parallelism;
            return this;
        }
        @CustomType.Setter
        public Builder processingConfiguration(@Nullable AnalyticsApplicationInputsProcessingConfiguration processingConfiguration) {
            this.processingConfiguration = processingConfiguration;
            return this;
        }
        @CustomType.Setter
        public Builder schema(AnalyticsApplicationInputsSchema schema) {
            this.schema = Objects.requireNonNull(schema);
            return this;
        }
        @CustomType.Setter
        public Builder startingPositionConfigurations(@Nullable List<AnalyticsApplicationInputsStartingPositionConfiguration> startingPositionConfigurations) {
            this.startingPositionConfigurations = startingPositionConfigurations;
            return this;
        }
        public Builder startingPositionConfigurations(AnalyticsApplicationInputsStartingPositionConfiguration... startingPositionConfigurations) {
            return startingPositionConfigurations(List.of(startingPositionConfigurations));
        }
        @CustomType.Setter
        public Builder streamNames(@Nullable List<String> streamNames) {
            this.streamNames = streamNames;
            return this;
        }
        public Builder streamNames(String... streamNames) {
            return streamNames(List.of(streamNames));
        }
        public AnalyticsApplicationInputs build() {
            final var o = new AnalyticsApplicationInputs();
            o.id = id;
            o.kinesisFirehose = kinesisFirehose;
            o.kinesisStream = kinesisStream;
            o.namePrefix = namePrefix;
            o.parallelism = parallelism;
            o.processingConfiguration = processingConfiguration;
            o.schema = schema;
            o.startingPositionConfigurations = startingPositionConfigurations;
            o.streamNames = streamNames;
            return o;
        }
    }
}
