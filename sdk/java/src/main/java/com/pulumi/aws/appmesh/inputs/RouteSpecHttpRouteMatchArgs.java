// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.appmesh.inputs;

import com.pulumi.aws.appmesh.inputs.RouteSpecHttpRouteMatchHeaderArgs;
import com.pulumi.aws.appmesh.inputs.RouteSpecHttpRouteMatchPathArgs;
import com.pulumi.aws.appmesh.inputs.RouteSpecHttpRouteMatchQueryParameterArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RouteSpecHttpRouteMatchArgs extends com.pulumi.resources.ResourceArgs {

    public static final RouteSpecHttpRouteMatchArgs Empty = new RouteSpecHttpRouteMatchArgs();

    /**
     * Client request headers to match on.
     * 
     */
    @Import(name="headers")
    private @Nullable Output<List<RouteSpecHttpRouteMatchHeaderArgs>> headers;

    /**
     * @return Client request headers to match on.
     * 
     */
    public Optional<Output<List<RouteSpecHttpRouteMatchHeaderArgs>>> headers() {
        return Optional.ofNullable(this.headers);
    }

    /**
     * Client request header method to match on. Valid values: `GET`, `HEAD`, `POST`, `PUT`, `DELETE`, `CONNECT`, `OPTIONS`, `TRACE`, `PATCH`.
     * 
     */
    @Import(name="method")
    private @Nullable Output<String> method;

    /**
     * @return Client request header method to match on. Valid values: `GET`, `HEAD`, `POST`, `PUT`, `DELETE`, `CONNECT`, `OPTIONS`, `TRACE`, `PATCH`.
     * 
     */
    public Optional<Output<String>> method() {
        return Optional.ofNullable(this.method);
    }

    /**
     * Client request path to match on.
     * 
     */
    @Import(name="path")
    private @Nullable Output<RouteSpecHttpRouteMatchPathArgs> path;

    /**
     * @return Client request path to match on.
     * 
     */
    public Optional<Output<RouteSpecHttpRouteMatchPathArgs>> path() {
        return Optional.ofNullable(this.path);
    }

    /**
     * The port number to match from the request.
     * 
     */
    @Import(name="port")
    private @Nullable Output<Integer> port;

    /**
     * @return The port number to match from the request.
     * 
     */
    public Optional<Output<Integer>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * Header value sent by the client must begin with the specified characters.
     * 
     */
    @Import(name="prefix")
    private @Nullable Output<String> prefix;

    /**
     * @return Header value sent by the client must begin with the specified characters.
     * 
     */
    public Optional<Output<String>> prefix() {
        return Optional.ofNullable(this.prefix);
    }

    /**
     * Client request query parameters to match on.
     * 
     */
    @Import(name="queryParameters")
    private @Nullable Output<List<RouteSpecHttpRouteMatchQueryParameterArgs>> queryParameters;

    /**
     * @return Client request query parameters to match on.
     * 
     */
    public Optional<Output<List<RouteSpecHttpRouteMatchQueryParameterArgs>>> queryParameters() {
        return Optional.ofNullable(this.queryParameters);
    }

    /**
     * Client request header scheme to match on. Valid values: `http`, `https`.
     * 
     */
    @Import(name="scheme")
    private @Nullable Output<String> scheme;

    /**
     * @return Client request header scheme to match on. Valid values: `http`, `https`.
     * 
     */
    public Optional<Output<String>> scheme() {
        return Optional.ofNullable(this.scheme);
    }

    private RouteSpecHttpRouteMatchArgs() {}

    private RouteSpecHttpRouteMatchArgs(RouteSpecHttpRouteMatchArgs $) {
        this.headers = $.headers;
        this.method = $.method;
        this.path = $.path;
        this.port = $.port;
        this.prefix = $.prefix;
        this.queryParameters = $.queryParameters;
        this.scheme = $.scheme;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RouteSpecHttpRouteMatchArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RouteSpecHttpRouteMatchArgs $;

        public Builder() {
            $ = new RouteSpecHttpRouteMatchArgs();
        }

        public Builder(RouteSpecHttpRouteMatchArgs defaults) {
            $ = new RouteSpecHttpRouteMatchArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param headers Client request headers to match on.
         * 
         * @return builder
         * 
         */
        public Builder headers(@Nullable Output<List<RouteSpecHttpRouteMatchHeaderArgs>> headers) {
            $.headers = headers;
            return this;
        }

        /**
         * @param headers Client request headers to match on.
         * 
         * @return builder
         * 
         */
        public Builder headers(List<RouteSpecHttpRouteMatchHeaderArgs> headers) {
            return headers(Output.of(headers));
        }

        /**
         * @param headers Client request headers to match on.
         * 
         * @return builder
         * 
         */
        public Builder headers(RouteSpecHttpRouteMatchHeaderArgs... headers) {
            return headers(List.of(headers));
        }

        /**
         * @param method Client request header method to match on. Valid values: `GET`, `HEAD`, `POST`, `PUT`, `DELETE`, `CONNECT`, `OPTIONS`, `TRACE`, `PATCH`.
         * 
         * @return builder
         * 
         */
        public Builder method(@Nullable Output<String> method) {
            $.method = method;
            return this;
        }

        /**
         * @param method Client request header method to match on. Valid values: `GET`, `HEAD`, `POST`, `PUT`, `DELETE`, `CONNECT`, `OPTIONS`, `TRACE`, `PATCH`.
         * 
         * @return builder
         * 
         */
        public Builder method(String method) {
            return method(Output.of(method));
        }

        /**
         * @param path Client request path to match on.
         * 
         * @return builder
         * 
         */
        public Builder path(@Nullable Output<RouteSpecHttpRouteMatchPathArgs> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path Client request path to match on.
         * 
         * @return builder
         * 
         */
        public Builder path(RouteSpecHttpRouteMatchPathArgs path) {
            return path(Output.of(path));
        }

        /**
         * @param port The port number to match from the request.
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port The port number to match from the request.
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param prefix Header value sent by the client must begin with the specified characters.
         * 
         * @return builder
         * 
         */
        public Builder prefix(@Nullable Output<String> prefix) {
            $.prefix = prefix;
            return this;
        }

        /**
         * @param prefix Header value sent by the client must begin with the specified characters.
         * 
         * @return builder
         * 
         */
        public Builder prefix(String prefix) {
            return prefix(Output.of(prefix));
        }

        /**
         * @param queryParameters Client request query parameters to match on.
         * 
         * @return builder
         * 
         */
        public Builder queryParameters(@Nullable Output<List<RouteSpecHttpRouteMatchQueryParameterArgs>> queryParameters) {
            $.queryParameters = queryParameters;
            return this;
        }

        /**
         * @param queryParameters Client request query parameters to match on.
         * 
         * @return builder
         * 
         */
        public Builder queryParameters(List<RouteSpecHttpRouteMatchQueryParameterArgs> queryParameters) {
            return queryParameters(Output.of(queryParameters));
        }

        /**
         * @param queryParameters Client request query parameters to match on.
         * 
         * @return builder
         * 
         */
        public Builder queryParameters(RouteSpecHttpRouteMatchQueryParameterArgs... queryParameters) {
            return queryParameters(List.of(queryParameters));
        }

        /**
         * @param scheme Client request header scheme to match on. Valid values: `http`, `https`.
         * 
         * @return builder
         * 
         */
        public Builder scheme(@Nullable Output<String> scheme) {
            $.scheme = scheme;
            return this;
        }

        /**
         * @param scheme Client request header scheme to match on. Valid values: `http`, `https`.
         * 
         * @return builder
         * 
         */
        public Builder scheme(String scheme) {
            return scheme(Output.of(scheme));
        }

        public RouteSpecHttpRouteMatchArgs build() {
            return $;
        }
    }

}
