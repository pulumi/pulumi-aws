// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.outputs;

import com.pulumi.aws.quicksight.outputs.Column;
import com.pulumi.aws.quicksight.outputs.FiltersRelativeDatesFilterAnchorDateConfiguration;
import com.pulumi.aws.quicksight.outputs.FiltersRelativeDatesFilterExcludePeriodConfiguration;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class FiltersRelativeDatesFilter {
    private FiltersRelativeDatesFilterAnchorDateConfiguration anchorDateConfiguration;
    private Column column;
    private @Nullable FiltersRelativeDatesFilterExcludePeriodConfiguration excludePeriodConfiguration;
    private String filterId;
    private String minimumGranularity;
    private String nullOption;
    private @Nullable String parameterName;
    private String relativeDateType;
    private @Nullable Integer relativeDateValue;
    private String timeGranularity;

    private FiltersRelativeDatesFilter() {}
    public FiltersRelativeDatesFilterAnchorDateConfiguration anchorDateConfiguration() {
        return this.anchorDateConfiguration;
    }
    public Column column() {
        return this.column;
    }
    public Optional<FiltersRelativeDatesFilterExcludePeriodConfiguration> excludePeriodConfiguration() {
        return Optional.ofNullable(this.excludePeriodConfiguration);
    }
    public String filterId() {
        return this.filterId;
    }
    public String minimumGranularity() {
        return this.minimumGranularity;
    }
    public String nullOption() {
        return this.nullOption;
    }
    public Optional<String> parameterName() {
        return Optional.ofNullable(this.parameterName);
    }
    public String relativeDateType() {
        return this.relativeDateType;
    }
    public Optional<Integer> relativeDateValue() {
        return Optional.ofNullable(this.relativeDateValue);
    }
    public String timeGranularity() {
        return this.timeGranularity;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FiltersRelativeDatesFilter defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private FiltersRelativeDatesFilterAnchorDateConfiguration anchorDateConfiguration;
        private Column column;
        private @Nullable FiltersRelativeDatesFilterExcludePeriodConfiguration excludePeriodConfiguration;
        private String filterId;
        private String minimumGranularity;
        private String nullOption;
        private @Nullable String parameterName;
        private String relativeDateType;
        private @Nullable Integer relativeDateValue;
        private String timeGranularity;
        public Builder() {}
        public Builder(FiltersRelativeDatesFilter defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.anchorDateConfiguration = defaults.anchorDateConfiguration;
    	      this.column = defaults.column;
    	      this.excludePeriodConfiguration = defaults.excludePeriodConfiguration;
    	      this.filterId = defaults.filterId;
    	      this.minimumGranularity = defaults.minimumGranularity;
    	      this.nullOption = defaults.nullOption;
    	      this.parameterName = defaults.parameterName;
    	      this.relativeDateType = defaults.relativeDateType;
    	      this.relativeDateValue = defaults.relativeDateValue;
    	      this.timeGranularity = defaults.timeGranularity;
        }

        @CustomType.Setter
        public Builder anchorDateConfiguration(FiltersRelativeDatesFilterAnchorDateConfiguration anchorDateConfiguration) {
            if (anchorDateConfiguration == null) {
              throw new MissingRequiredPropertyException("FiltersRelativeDatesFilter", "anchorDateConfiguration");
            }
            this.anchorDateConfiguration = anchorDateConfiguration;
            return this;
        }
        @CustomType.Setter
        public Builder column(Column column) {
            if (column == null) {
              throw new MissingRequiredPropertyException("FiltersRelativeDatesFilter", "column");
            }
            this.column = column;
            return this;
        }
        @CustomType.Setter
        public Builder excludePeriodConfiguration(@Nullable FiltersRelativeDatesFilterExcludePeriodConfiguration excludePeriodConfiguration) {

            this.excludePeriodConfiguration = excludePeriodConfiguration;
            return this;
        }
        @CustomType.Setter
        public Builder filterId(String filterId) {
            if (filterId == null) {
              throw new MissingRequiredPropertyException("FiltersRelativeDatesFilter", "filterId");
            }
            this.filterId = filterId;
            return this;
        }
        @CustomType.Setter
        public Builder minimumGranularity(String minimumGranularity) {
            if (minimumGranularity == null) {
              throw new MissingRequiredPropertyException("FiltersRelativeDatesFilter", "minimumGranularity");
            }
            this.minimumGranularity = minimumGranularity;
            return this;
        }
        @CustomType.Setter
        public Builder nullOption(String nullOption) {
            if (nullOption == null) {
              throw new MissingRequiredPropertyException("FiltersRelativeDatesFilter", "nullOption");
            }
            this.nullOption = nullOption;
            return this;
        }
        @CustomType.Setter
        public Builder parameterName(@Nullable String parameterName) {

            this.parameterName = parameterName;
            return this;
        }
        @CustomType.Setter
        public Builder relativeDateType(String relativeDateType) {
            if (relativeDateType == null) {
              throw new MissingRequiredPropertyException("FiltersRelativeDatesFilter", "relativeDateType");
            }
            this.relativeDateType = relativeDateType;
            return this;
        }
        @CustomType.Setter
        public Builder relativeDateValue(@Nullable Integer relativeDateValue) {

            this.relativeDateValue = relativeDateValue;
            return this;
        }
        @CustomType.Setter
        public Builder timeGranularity(String timeGranularity) {
            if (timeGranularity == null) {
              throw new MissingRequiredPropertyException("FiltersRelativeDatesFilter", "timeGranularity");
            }
            this.timeGranularity = timeGranularity;
            return this;
        }
        public FiltersRelativeDatesFilter build() {
            final var _resultValue = new FiltersRelativeDatesFilter();
            _resultValue.anchorDateConfiguration = anchorDateConfiguration;
            _resultValue.column = column;
            _resultValue.excludePeriodConfiguration = excludePeriodConfiguration;
            _resultValue.filterId = filterId;
            _resultValue.minimumGranularity = minimumGranularity;
            _resultValue.nullOption = nullOption;
            _resultValue.parameterName = parameterName;
            _resultValue.relativeDateType = relativeDateType;
            _resultValue.relativeDateValue = relativeDateValue;
            _resultValue.timeGranularity = timeGranularity;
            return _resultValue;
        }
    }
}
