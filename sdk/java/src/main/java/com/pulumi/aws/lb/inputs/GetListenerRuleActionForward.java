// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.lb.inputs;

import com.pulumi.aws.lb.inputs.GetListenerRuleActionForwardStickiness;
import com.pulumi.aws.lb.inputs.GetListenerRuleActionForwardTargetGroup;
import com.pulumi.core.annotations.Import;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetListenerRuleActionForward extends com.pulumi.resources.InvokeArgs {

    public static final GetListenerRuleActionForward Empty = new GetListenerRuleActionForward();

    /**
     * Target group stickiness for the rule.
     * Detailed below.
     * 
     */
    @Import(name="stickiness")
    private @Nullable GetListenerRuleActionForwardStickiness stickiness;

    /**
     * @return Target group stickiness for the rule.
     * Detailed below.
     * 
     */
    public Optional<GetListenerRuleActionForwardStickiness> stickiness() {
        return Optional.ofNullable(this.stickiness);
    }

    /**
     * Set of target groups for the action.
     * Detailed below.
     * 
     */
    @Import(name="targetGroups")
    private @Nullable List<GetListenerRuleActionForwardTargetGroup> targetGroups;

    /**
     * @return Set of target groups for the action.
     * Detailed below.
     * 
     */
    public Optional<List<GetListenerRuleActionForwardTargetGroup>> targetGroups() {
        return Optional.ofNullable(this.targetGroups);
    }

    private GetListenerRuleActionForward() {}

    private GetListenerRuleActionForward(GetListenerRuleActionForward $) {
        this.stickiness = $.stickiness;
        this.targetGroups = $.targetGroups;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetListenerRuleActionForward defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetListenerRuleActionForward $;

        public Builder() {
            $ = new GetListenerRuleActionForward();
        }

        public Builder(GetListenerRuleActionForward defaults) {
            $ = new GetListenerRuleActionForward(Objects.requireNonNull(defaults));
        }

        /**
         * @param stickiness Target group stickiness for the rule.
         * Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder stickiness(@Nullable GetListenerRuleActionForwardStickiness stickiness) {
            $.stickiness = stickiness;
            return this;
        }

        /**
         * @param targetGroups Set of target groups for the action.
         * Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder targetGroups(@Nullable List<GetListenerRuleActionForwardTargetGroup> targetGroups) {
            $.targetGroups = targetGroups;
            return this;
        }

        /**
         * @param targetGroups Set of target groups for the action.
         * Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder targetGroups(GetListenerRuleActionForwardTargetGroup... targetGroups) {
            return targetGroups(List.of(targetGroups));
        }

        public GetListenerRuleActionForward build() {
            return $;
        }
    }

}
