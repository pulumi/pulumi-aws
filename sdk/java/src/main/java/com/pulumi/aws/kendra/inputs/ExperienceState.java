// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.kendra.inputs;

import com.pulumi.aws.kendra.inputs.ExperienceConfigurationArgs;
import com.pulumi.aws.kendra.inputs.ExperienceEndpointArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ExperienceState extends com.pulumi.resources.ResourceArgs {

    public static final ExperienceState Empty = new ExperienceState();

    @Import(name="arn")
    private @Nullable Output<String> arn;

    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    @Import(name="configuration")
    private @Nullable Output<ExperienceConfigurationArgs> configuration;

    public Optional<Output<ExperienceConfigurationArgs>> configuration() {
        return Optional.ofNullable(this.configuration);
    }

    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="endpoints")
    private @Nullable Output<List<ExperienceEndpointArgs>> endpoints;

    public Optional<Output<List<ExperienceEndpointArgs>>> endpoints() {
        return Optional.ofNullable(this.endpoints);
    }

    @Import(name="experienceId")
    private @Nullable Output<String> experienceId;

    public Optional<Output<String>> experienceId() {
        return Optional.ofNullable(this.experienceId);
    }

    @Import(name="indexId")
    private @Nullable Output<String> indexId;

    public Optional<Output<String>> indexId() {
        return Optional.ofNullable(this.indexId);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="roleArn")
    private @Nullable Output<String> roleArn;

    public Optional<Output<String>> roleArn() {
        return Optional.ofNullable(this.roleArn);
    }

    @Import(name="status")
    private @Nullable Output<String> status;

    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private ExperienceState() {}

    private ExperienceState(ExperienceState $) {
        this.arn = $.arn;
        this.configuration = $.configuration;
        this.description = $.description;
        this.endpoints = $.endpoints;
        this.experienceId = $.experienceId;
        this.indexId = $.indexId;
        this.name = $.name;
        this.roleArn = $.roleArn;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ExperienceState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ExperienceState $;

        public Builder() {
            $ = new ExperienceState();
        }

        public Builder(ExperienceState defaults) {
            $ = new ExperienceState(Objects.requireNonNull(defaults));
        }

        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        public Builder configuration(@Nullable Output<ExperienceConfigurationArgs> configuration) {
            $.configuration = configuration;
            return this;
        }

        public Builder configuration(ExperienceConfigurationArgs configuration) {
            return configuration(Output.of(configuration));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder endpoints(@Nullable Output<List<ExperienceEndpointArgs>> endpoints) {
            $.endpoints = endpoints;
            return this;
        }

        public Builder endpoints(List<ExperienceEndpointArgs> endpoints) {
            return endpoints(Output.of(endpoints));
        }

        public Builder endpoints(ExperienceEndpointArgs... endpoints) {
            return endpoints(List.of(endpoints));
        }

        public Builder experienceId(@Nullable Output<String> experienceId) {
            $.experienceId = experienceId;
            return this;
        }

        public Builder experienceId(String experienceId) {
            return experienceId(Output.of(experienceId));
        }

        public Builder indexId(@Nullable Output<String> indexId) {
            $.indexId = indexId;
            return this;
        }

        public Builder indexId(String indexId) {
            return indexId(Output.of(indexId));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder roleArn(@Nullable Output<String> roleArn) {
            $.roleArn = roleArn;
            return this;
        }

        public Builder roleArn(String roleArn) {
            return roleArn(Output.of(roleArn));
        }

        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        public Builder status(String status) {
            return status(Output.of(status));
        }

        public ExperienceState build() {
            return $;
        }
    }

}
