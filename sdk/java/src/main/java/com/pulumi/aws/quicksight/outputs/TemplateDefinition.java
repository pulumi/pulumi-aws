// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.outputs;

import com.pulumi.aws.quicksight.outputs.TemplateDefinitionAnalysisDefaults;
import com.pulumi.aws.quicksight.outputs.TemplateDefinitionCalculatedField;
import com.pulumi.aws.quicksight.outputs.TemplateDefinitionColumnConfiguration;
import com.pulumi.aws.quicksight.outputs.TemplateDefinitionDataSetConfiguration;
import com.pulumi.aws.quicksight.outputs.TemplateDefinitionFilterGroup;
import com.pulumi.aws.quicksight.outputs.TemplateDefinitionParametersDeclaration;
import com.pulumi.aws.quicksight.outputs.TemplateDefinitionSheet;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class TemplateDefinition {
    /**
     * @return The configuration for default analysis settings. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_AnalysisDefaults.html).
     * 
     */
    private @Nullable TemplateDefinitionAnalysisDefaults analysisDefaults;
    /**
     * @return A list of calculated field definitions for the template. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_CalculatedField.html).
     * 
     */
    private @Nullable List<TemplateDefinitionCalculatedField> calculatedFields;
    /**
     * @return A list of template-level column configurations. Column configurations are used to set default formatting for a column that&#39;s used throughout a template. See AWS API Documentation for complete description.
     * 
     */
    private @Nullable List<TemplateDefinitionColumnConfiguration> columnConfigurations;
    /**
     * @return A list of dataset configurations. These configurations define the required columns for each dataset used within a template. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_DataSetConfiguration.html).
     * 
     */
    private List<TemplateDefinitionDataSetConfiguration> dataSetConfigurations;
    /**
     * @return A list of filter definitions for a template. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_FilterGroup.html). For more information, see [Filtering Data](https://docs.aws.amazon.com/quicksight/latest/user/filtering-visual-data.html) in Amazon QuickSight User Guide.
     * 
     */
    private @Nullable List<TemplateDefinitionFilterGroup> filterGroups;
    /**
     * @return A list of parameter declarations for a template. Parameters are named variables that can transfer a value for use by an action or an object. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ParameterDeclaration.html). For more information, see [Parameters in Amazon QuickSight](https://docs.aws.amazon.com/quicksight/latest/user/parameters-in-quicksight.html) in the Amazon QuickSight User Guide.
     * 
     */
    private @Nullable List<TemplateDefinitionParametersDeclaration> parametersDeclarations;
    /**
     * @return A list of sheet definitions for a template. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_SheetDefinition.html).
     * 
     */
    private @Nullable List<TemplateDefinitionSheet> sheets;

    private TemplateDefinition() {}
    /**
     * @return The configuration for default analysis settings. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_AnalysisDefaults.html).
     * 
     */
    public Optional<TemplateDefinitionAnalysisDefaults> analysisDefaults() {
        return Optional.ofNullable(this.analysisDefaults);
    }
    /**
     * @return A list of calculated field definitions for the template. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_CalculatedField.html).
     * 
     */
    public List<TemplateDefinitionCalculatedField> calculatedFields() {
        return this.calculatedFields == null ? List.of() : this.calculatedFields;
    }
    /**
     * @return A list of template-level column configurations. Column configurations are used to set default formatting for a column that&#39;s used throughout a template. See AWS API Documentation for complete description.
     * 
     */
    public List<TemplateDefinitionColumnConfiguration> columnConfigurations() {
        return this.columnConfigurations == null ? List.of() : this.columnConfigurations;
    }
    /**
     * @return A list of dataset configurations. These configurations define the required columns for each dataset used within a template. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_DataSetConfiguration.html).
     * 
     */
    public List<TemplateDefinitionDataSetConfiguration> dataSetConfigurations() {
        return this.dataSetConfigurations;
    }
    /**
     * @return A list of filter definitions for a template. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_FilterGroup.html). For more information, see [Filtering Data](https://docs.aws.amazon.com/quicksight/latest/user/filtering-visual-data.html) in Amazon QuickSight User Guide.
     * 
     */
    public List<TemplateDefinitionFilterGroup> filterGroups() {
        return this.filterGroups == null ? List.of() : this.filterGroups;
    }
    /**
     * @return A list of parameter declarations for a template. Parameters are named variables that can transfer a value for use by an action or an object. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ParameterDeclaration.html). For more information, see [Parameters in Amazon QuickSight](https://docs.aws.amazon.com/quicksight/latest/user/parameters-in-quicksight.html) in the Amazon QuickSight User Guide.
     * 
     */
    public List<TemplateDefinitionParametersDeclaration> parametersDeclarations() {
        return this.parametersDeclarations == null ? List.of() : this.parametersDeclarations;
    }
    /**
     * @return A list of sheet definitions for a template. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_SheetDefinition.html).
     * 
     */
    public List<TemplateDefinitionSheet> sheets() {
        return this.sheets == null ? List.of() : this.sheets;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TemplateDefinition defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable TemplateDefinitionAnalysisDefaults analysisDefaults;
        private @Nullable List<TemplateDefinitionCalculatedField> calculatedFields;
        private @Nullable List<TemplateDefinitionColumnConfiguration> columnConfigurations;
        private List<TemplateDefinitionDataSetConfiguration> dataSetConfigurations;
        private @Nullable List<TemplateDefinitionFilterGroup> filterGroups;
        private @Nullable List<TemplateDefinitionParametersDeclaration> parametersDeclarations;
        private @Nullable List<TemplateDefinitionSheet> sheets;
        public Builder() {}
        public Builder(TemplateDefinition defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.analysisDefaults = defaults.analysisDefaults;
    	      this.calculatedFields = defaults.calculatedFields;
    	      this.columnConfigurations = defaults.columnConfigurations;
    	      this.dataSetConfigurations = defaults.dataSetConfigurations;
    	      this.filterGroups = defaults.filterGroups;
    	      this.parametersDeclarations = defaults.parametersDeclarations;
    	      this.sheets = defaults.sheets;
        }

        @CustomType.Setter
        public Builder analysisDefaults(@Nullable TemplateDefinitionAnalysisDefaults analysisDefaults) {

            this.analysisDefaults = analysisDefaults;
            return this;
        }
        @CustomType.Setter
        public Builder calculatedFields(@Nullable List<TemplateDefinitionCalculatedField> calculatedFields) {

            this.calculatedFields = calculatedFields;
            return this;
        }
        public Builder calculatedFields(TemplateDefinitionCalculatedField... calculatedFields) {
            return calculatedFields(List.of(calculatedFields));
        }
        @CustomType.Setter
        public Builder columnConfigurations(@Nullable List<TemplateDefinitionColumnConfiguration> columnConfigurations) {

            this.columnConfigurations = columnConfigurations;
            return this;
        }
        public Builder columnConfigurations(TemplateDefinitionColumnConfiguration... columnConfigurations) {
            return columnConfigurations(List.of(columnConfigurations));
        }
        @CustomType.Setter
        public Builder dataSetConfigurations(List<TemplateDefinitionDataSetConfiguration> dataSetConfigurations) {
            if (dataSetConfigurations == null) {
              throw new MissingRequiredPropertyException("TemplateDefinition", "dataSetConfigurations");
            }
            this.dataSetConfigurations = dataSetConfigurations;
            return this;
        }
        public Builder dataSetConfigurations(TemplateDefinitionDataSetConfiguration... dataSetConfigurations) {
            return dataSetConfigurations(List.of(dataSetConfigurations));
        }
        @CustomType.Setter
        public Builder filterGroups(@Nullable List<TemplateDefinitionFilterGroup> filterGroups) {

            this.filterGroups = filterGroups;
            return this;
        }
        public Builder filterGroups(TemplateDefinitionFilterGroup... filterGroups) {
            return filterGroups(List.of(filterGroups));
        }
        @CustomType.Setter
        public Builder parametersDeclarations(@Nullable List<TemplateDefinitionParametersDeclaration> parametersDeclarations) {

            this.parametersDeclarations = parametersDeclarations;
            return this;
        }
        public Builder parametersDeclarations(TemplateDefinitionParametersDeclaration... parametersDeclarations) {
            return parametersDeclarations(List.of(parametersDeclarations));
        }
        @CustomType.Setter
        public Builder sheets(@Nullable List<TemplateDefinitionSheet> sheets) {

            this.sheets = sheets;
            return this;
        }
        public Builder sheets(TemplateDefinitionSheet... sheets) {
            return sheets(List.of(sheets));
        }
        public TemplateDefinition build() {
            final var _resultValue = new TemplateDefinition();
            _resultValue.analysisDefaults = analysisDefaults;
            _resultValue.calculatedFields = calculatedFields;
            _resultValue.columnConfigurations = columnConfigurations;
            _resultValue.dataSetConfigurations = dataSetConfigurations;
            _resultValue.filterGroups = filterGroups;
            _resultValue.parametersDeclarations = parametersDeclarations;
            _resultValue.sheets = sheets;
            return _resultValue;
        }
    }
}
