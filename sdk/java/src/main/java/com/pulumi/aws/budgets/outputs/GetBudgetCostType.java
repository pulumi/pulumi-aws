// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.budgets.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.util.Objects;

@CustomType
public final class GetBudgetCostType {
    /**
     * @return A boolean value whether to include credits in the cost budget. Defaults to `true`.
     * 
     */
    private Boolean includeCredit;
    /**
     * @return Whether a budget includes discounts. Defaults to `true`.
     * 
     */
    private Boolean includeDiscount;
    /**
     * @return A boolean value whether to include other subscription costs in the cost budget. Defaults to `true`.
     * 
     */
    private Boolean includeOtherSubscription;
    /**
     * @return A boolean value whether to include recurring costs in the cost budget. Defaults to `true`.
     * 
     */
    private Boolean includeRecurring;
    /**
     * @return A boolean value whether to include refunds in the cost budget. Defaults to `true`.
     * 
     */
    private Boolean includeRefund;
    /**
     * @return A boolean value whether to include subscriptions in the cost budget. Defaults to `true`.
     * 
     */
    private Boolean includeSubscription;
    /**
     * @return A boolean value whether to include support costs in the cost budget. Defaults to `true`.
     * 
     */
    private Boolean includeSupport;
    /**
     * @return A boolean value whether to include tax in the cost budget. Defaults to `true`.
     * 
     */
    private Boolean includeTax;
    /**
     * @return A boolean value whether to include upfront costs in the cost budget. Defaults to `true`.
     * 
     */
    private Boolean includeUpfront;
    /**
     * @return Whether a budget uses the amortized rate. Defaults to `false`.
     * 
     */
    private Boolean useAmortized;
    /**
     * @return A boolean value whether to use blended costs in the cost budget. Defaults to `false`.
     * 
     */
    private Boolean useBlended;

    private GetBudgetCostType() {}
    /**
     * @return A boolean value whether to include credits in the cost budget. Defaults to `true`.
     * 
     */
    public Boolean includeCredit() {
        return this.includeCredit;
    }
    /**
     * @return Whether a budget includes discounts. Defaults to `true`.
     * 
     */
    public Boolean includeDiscount() {
        return this.includeDiscount;
    }
    /**
     * @return A boolean value whether to include other subscription costs in the cost budget. Defaults to `true`.
     * 
     */
    public Boolean includeOtherSubscription() {
        return this.includeOtherSubscription;
    }
    /**
     * @return A boolean value whether to include recurring costs in the cost budget. Defaults to `true`.
     * 
     */
    public Boolean includeRecurring() {
        return this.includeRecurring;
    }
    /**
     * @return A boolean value whether to include refunds in the cost budget. Defaults to `true`.
     * 
     */
    public Boolean includeRefund() {
        return this.includeRefund;
    }
    /**
     * @return A boolean value whether to include subscriptions in the cost budget. Defaults to `true`.
     * 
     */
    public Boolean includeSubscription() {
        return this.includeSubscription;
    }
    /**
     * @return A boolean value whether to include support costs in the cost budget. Defaults to `true`.
     * 
     */
    public Boolean includeSupport() {
        return this.includeSupport;
    }
    /**
     * @return A boolean value whether to include tax in the cost budget. Defaults to `true`.
     * 
     */
    public Boolean includeTax() {
        return this.includeTax;
    }
    /**
     * @return A boolean value whether to include upfront costs in the cost budget. Defaults to `true`.
     * 
     */
    public Boolean includeUpfront() {
        return this.includeUpfront;
    }
    /**
     * @return Whether a budget uses the amortized rate. Defaults to `false`.
     * 
     */
    public Boolean useAmortized() {
        return this.useAmortized;
    }
    /**
     * @return A boolean value whether to use blended costs in the cost budget. Defaults to `false`.
     * 
     */
    public Boolean useBlended() {
        return this.useBlended;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBudgetCostType defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean includeCredit;
        private Boolean includeDiscount;
        private Boolean includeOtherSubscription;
        private Boolean includeRecurring;
        private Boolean includeRefund;
        private Boolean includeSubscription;
        private Boolean includeSupport;
        private Boolean includeTax;
        private Boolean includeUpfront;
        private Boolean useAmortized;
        private Boolean useBlended;
        public Builder() {}
        public Builder(GetBudgetCostType defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.includeCredit = defaults.includeCredit;
    	      this.includeDiscount = defaults.includeDiscount;
    	      this.includeOtherSubscription = defaults.includeOtherSubscription;
    	      this.includeRecurring = defaults.includeRecurring;
    	      this.includeRefund = defaults.includeRefund;
    	      this.includeSubscription = defaults.includeSubscription;
    	      this.includeSupport = defaults.includeSupport;
    	      this.includeTax = defaults.includeTax;
    	      this.includeUpfront = defaults.includeUpfront;
    	      this.useAmortized = defaults.useAmortized;
    	      this.useBlended = defaults.useBlended;
        }

        @CustomType.Setter
        public Builder includeCredit(Boolean includeCredit) {
            if (includeCredit == null) {
              throw new MissingRequiredPropertyException("GetBudgetCostType", "includeCredit");
            }
            this.includeCredit = includeCredit;
            return this;
        }
        @CustomType.Setter
        public Builder includeDiscount(Boolean includeDiscount) {
            if (includeDiscount == null) {
              throw new MissingRequiredPropertyException("GetBudgetCostType", "includeDiscount");
            }
            this.includeDiscount = includeDiscount;
            return this;
        }
        @CustomType.Setter
        public Builder includeOtherSubscription(Boolean includeOtherSubscription) {
            if (includeOtherSubscription == null) {
              throw new MissingRequiredPropertyException("GetBudgetCostType", "includeOtherSubscription");
            }
            this.includeOtherSubscription = includeOtherSubscription;
            return this;
        }
        @CustomType.Setter
        public Builder includeRecurring(Boolean includeRecurring) {
            if (includeRecurring == null) {
              throw new MissingRequiredPropertyException("GetBudgetCostType", "includeRecurring");
            }
            this.includeRecurring = includeRecurring;
            return this;
        }
        @CustomType.Setter
        public Builder includeRefund(Boolean includeRefund) {
            if (includeRefund == null) {
              throw new MissingRequiredPropertyException("GetBudgetCostType", "includeRefund");
            }
            this.includeRefund = includeRefund;
            return this;
        }
        @CustomType.Setter
        public Builder includeSubscription(Boolean includeSubscription) {
            if (includeSubscription == null) {
              throw new MissingRequiredPropertyException("GetBudgetCostType", "includeSubscription");
            }
            this.includeSubscription = includeSubscription;
            return this;
        }
        @CustomType.Setter
        public Builder includeSupport(Boolean includeSupport) {
            if (includeSupport == null) {
              throw new MissingRequiredPropertyException("GetBudgetCostType", "includeSupport");
            }
            this.includeSupport = includeSupport;
            return this;
        }
        @CustomType.Setter
        public Builder includeTax(Boolean includeTax) {
            if (includeTax == null) {
              throw new MissingRequiredPropertyException("GetBudgetCostType", "includeTax");
            }
            this.includeTax = includeTax;
            return this;
        }
        @CustomType.Setter
        public Builder includeUpfront(Boolean includeUpfront) {
            if (includeUpfront == null) {
              throw new MissingRequiredPropertyException("GetBudgetCostType", "includeUpfront");
            }
            this.includeUpfront = includeUpfront;
            return this;
        }
        @CustomType.Setter
        public Builder useAmortized(Boolean useAmortized) {
            if (useAmortized == null) {
              throw new MissingRequiredPropertyException("GetBudgetCostType", "useAmortized");
            }
            this.useAmortized = useAmortized;
            return this;
        }
        @CustomType.Setter
        public Builder useBlended(Boolean useBlended) {
            if (useBlended == null) {
              throw new MissingRequiredPropertyException("GetBudgetCostType", "useBlended");
            }
            this.useBlended = useBlended;
            return this;
        }
        public GetBudgetCostType build() {
            final var _resultValue = new GetBudgetCostType();
            _resultValue.includeCredit = includeCredit;
            _resultValue.includeDiscount = includeDiscount;
            _resultValue.includeOtherSubscription = includeOtherSubscription;
            _resultValue.includeRecurring = includeRecurring;
            _resultValue.includeRefund = includeRefund;
            _resultValue.includeSubscription = includeSubscription;
            _resultValue.includeSupport = includeSupport;
            _resultValue.includeTax = includeTax;
            _resultValue.includeUpfront = includeUpfront;
            _resultValue.useAmortized = useAmortized;
            _resultValue.useBlended = useBlended;
            return _resultValue;
        }
    }
}
