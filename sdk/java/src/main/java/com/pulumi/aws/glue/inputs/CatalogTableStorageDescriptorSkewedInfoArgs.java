// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.glue.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CatalogTableStorageDescriptorSkewedInfoArgs extends com.pulumi.resources.ResourceArgs {

    public static final CatalogTableStorageDescriptorSkewedInfoArgs Empty = new CatalogTableStorageDescriptorSkewedInfoArgs();

    /**
     * List of names of columns that contain skewed values.
     * 
     */
    @Import(name="skewedColumnNames")
    private @Nullable Output<List<String>> skewedColumnNames;

    /**
     * @return List of names of columns that contain skewed values.
     * 
     */
    public Optional<Output<List<String>>> skewedColumnNames() {
        return Optional.ofNullable(this.skewedColumnNames);
    }

    /**
     * List of values that appear so frequently as to be considered skewed.
     * 
     */
    @Import(name="skewedColumnValueLocationMaps")
    private @Nullable Output<Map<String,String>> skewedColumnValueLocationMaps;

    /**
     * @return List of values that appear so frequently as to be considered skewed.
     * 
     */
    public Optional<Output<Map<String,String>>> skewedColumnValueLocationMaps() {
        return Optional.ofNullable(this.skewedColumnValueLocationMaps);
    }

    /**
     * Map of skewed values to the columns that contain them.
     * 
     */
    @Import(name="skewedColumnValues")
    private @Nullable Output<List<String>> skewedColumnValues;

    /**
     * @return Map of skewed values to the columns that contain them.
     * 
     */
    public Optional<Output<List<String>>> skewedColumnValues() {
        return Optional.ofNullable(this.skewedColumnValues);
    }

    private CatalogTableStorageDescriptorSkewedInfoArgs() {}

    private CatalogTableStorageDescriptorSkewedInfoArgs(CatalogTableStorageDescriptorSkewedInfoArgs $) {
        this.skewedColumnNames = $.skewedColumnNames;
        this.skewedColumnValueLocationMaps = $.skewedColumnValueLocationMaps;
        this.skewedColumnValues = $.skewedColumnValues;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CatalogTableStorageDescriptorSkewedInfoArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CatalogTableStorageDescriptorSkewedInfoArgs $;

        public Builder() {
            $ = new CatalogTableStorageDescriptorSkewedInfoArgs();
        }

        public Builder(CatalogTableStorageDescriptorSkewedInfoArgs defaults) {
            $ = new CatalogTableStorageDescriptorSkewedInfoArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param skewedColumnNames List of names of columns that contain skewed values.
         * 
         * @return builder
         * 
         */
        public Builder skewedColumnNames(@Nullable Output<List<String>> skewedColumnNames) {
            $.skewedColumnNames = skewedColumnNames;
            return this;
        }

        /**
         * @param skewedColumnNames List of names of columns that contain skewed values.
         * 
         * @return builder
         * 
         */
        public Builder skewedColumnNames(List<String> skewedColumnNames) {
            return skewedColumnNames(Output.of(skewedColumnNames));
        }

        /**
         * @param skewedColumnNames List of names of columns that contain skewed values.
         * 
         * @return builder
         * 
         */
        public Builder skewedColumnNames(String... skewedColumnNames) {
            return skewedColumnNames(List.of(skewedColumnNames));
        }

        /**
         * @param skewedColumnValueLocationMaps List of values that appear so frequently as to be considered skewed.
         * 
         * @return builder
         * 
         */
        public Builder skewedColumnValueLocationMaps(@Nullable Output<Map<String,String>> skewedColumnValueLocationMaps) {
            $.skewedColumnValueLocationMaps = skewedColumnValueLocationMaps;
            return this;
        }

        /**
         * @param skewedColumnValueLocationMaps List of values that appear so frequently as to be considered skewed.
         * 
         * @return builder
         * 
         */
        public Builder skewedColumnValueLocationMaps(Map<String,String> skewedColumnValueLocationMaps) {
            return skewedColumnValueLocationMaps(Output.of(skewedColumnValueLocationMaps));
        }

        /**
         * @param skewedColumnValues Map of skewed values to the columns that contain them.
         * 
         * @return builder
         * 
         */
        public Builder skewedColumnValues(@Nullable Output<List<String>> skewedColumnValues) {
            $.skewedColumnValues = skewedColumnValues;
            return this;
        }

        /**
         * @param skewedColumnValues Map of skewed values to the columns that contain them.
         * 
         * @return builder
         * 
         */
        public Builder skewedColumnValues(List<String> skewedColumnValues) {
            return skewedColumnValues(Output.of(skewedColumnValues));
        }

        /**
         * @param skewedColumnValues Map of skewed values to the columns that contain them.
         * 
         * @return builder
         * 
         */
        public Builder skewedColumnValues(String... skewedColumnValues) {
            return skewedColumnValues(List.of(skewedColumnValues));
        }

        public CatalogTableStorageDescriptorSkewedInfoArgs build() {
            return $;
        }
    }

}
