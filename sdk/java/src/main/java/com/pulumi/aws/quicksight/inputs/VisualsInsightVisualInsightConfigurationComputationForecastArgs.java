// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.inputs;

import com.pulumi.aws.quicksight.inputs.MeasureFieldSchema2Args;
import com.pulumi.aws.quicksight.inputs.SmallMultiplesOptionsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VisualsInsightVisualInsightConfigurationComputationForecastArgs extends com.pulumi.resources.ResourceArgs {

    public static final VisualsInsightVisualInsightConfigurationComputationForecastArgs Empty = new VisualsInsightVisualInsightConfigurationComputationForecastArgs();

    @Import(name="computationId", required=true)
    private Output<String> computationId;

    public Output<String> computationId() {
        return this.computationId;
    }

    @Import(name="customSeasonalityValue")
    private @Nullable Output<Integer> customSeasonalityValue;

    public Optional<Output<Integer>> customSeasonalityValue() {
        return Optional.ofNullable(this.customSeasonalityValue);
    }

    @Import(name="lowerBoundary")
    private @Nullable Output<Double> lowerBoundary;

    public Optional<Output<Double>> lowerBoundary() {
        return Optional.ofNullable(this.lowerBoundary);
    }

    /**
     * Display name for the dashboard.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Display name for the dashboard.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="periodsBackward")
    private @Nullable Output<Integer> periodsBackward;

    public Optional<Output<Integer>> periodsBackward() {
        return Optional.ofNullable(this.periodsBackward);
    }

    @Import(name="periodsForward")
    private @Nullable Output<Integer> periodsForward;

    public Optional<Output<Integer>> periodsForward() {
        return Optional.ofNullable(this.periodsForward);
    }

    @Import(name="predictionInterval")
    private @Nullable Output<Integer> predictionInterval;

    public Optional<Output<Integer>> predictionInterval() {
        return Optional.ofNullable(this.predictionInterval);
    }

    @Import(name="seasonality", required=true)
    private Output<String> seasonality;

    public Output<String> seasonality() {
        return this.seasonality;
    }

    @Import(name="time")
    private @Nullable Output<SmallMultiplesOptionsArgs> time;

    public Optional<Output<SmallMultiplesOptionsArgs>> time() {
        return Optional.ofNullable(this.time);
    }

    @Import(name="upperBoundary")
    private @Nullable Output<Double> upperBoundary;

    public Optional<Output<Double>> upperBoundary() {
        return Optional.ofNullable(this.upperBoundary);
    }

    @Import(name="value")
    private @Nullable Output<MeasureFieldSchema2Args> value;

    public Optional<Output<MeasureFieldSchema2Args>> value() {
        return Optional.ofNullable(this.value);
    }

    private VisualsInsightVisualInsightConfigurationComputationForecastArgs() {}

    private VisualsInsightVisualInsightConfigurationComputationForecastArgs(VisualsInsightVisualInsightConfigurationComputationForecastArgs $) {
        this.computationId = $.computationId;
        this.customSeasonalityValue = $.customSeasonalityValue;
        this.lowerBoundary = $.lowerBoundary;
        this.name = $.name;
        this.periodsBackward = $.periodsBackward;
        this.periodsForward = $.periodsForward;
        this.predictionInterval = $.predictionInterval;
        this.seasonality = $.seasonality;
        this.time = $.time;
        this.upperBoundary = $.upperBoundary;
        this.value = $.value;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VisualsInsightVisualInsightConfigurationComputationForecastArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VisualsInsightVisualInsightConfigurationComputationForecastArgs $;

        public Builder() {
            $ = new VisualsInsightVisualInsightConfigurationComputationForecastArgs();
        }

        public Builder(VisualsInsightVisualInsightConfigurationComputationForecastArgs defaults) {
            $ = new VisualsInsightVisualInsightConfigurationComputationForecastArgs(Objects.requireNonNull(defaults));
        }

        public Builder computationId(Output<String> computationId) {
            $.computationId = computationId;
            return this;
        }

        public Builder computationId(String computationId) {
            return computationId(Output.of(computationId));
        }

        public Builder customSeasonalityValue(@Nullable Output<Integer> customSeasonalityValue) {
            $.customSeasonalityValue = customSeasonalityValue;
            return this;
        }

        public Builder customSeasonalityValue(Integer customSeasonalityValue) {
            return customSeasonalityValue(Output.of(customSeasonalityValue));
        }

        public Builder lowerBoundary(@Nullable Output<Double> lowerBoundary) {
            $.lowerBoundary = lowerBoundary;
            return this;
        }

        public Builder lowerBoundary(Double lowerBoundary) {
            return lowerBoundary(Output.of(lowerBoundary));
        }

        /**
         * @param name Display name for the dashboard.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Display name for the dashboard.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder periodsBackward(@Nullable Output<Integer> periodsBackward) {
            $.periodsBackward = periodsBackward;
            return this;
        }

        public Builder periodsBackward(Integer periodsBackward) {
            return periodsBackward(Output.of(periodsBackward));
        }

        public Builder periodsForward(@Nullable Output<Integer> periodsForward) {
            $.periodsForward = periodsForward;
            return this;
        }

        public Builder periodsForward(Integer periodsForward) {
            return periodsForward(Output.of(periodsForward));
        }

        public Builder predictionInterval(@Nullable Output<Integer> predictionInterval) {
            $.predictionInterval = predictionInterval;
            return this;
        }

        public Builder predictionInterval(Integer predictionInterval) {
            return predictionInterval(Output.of(predictionInterval));
        }

        public Builder seasonality(Output<String> seasonality) {
            $.seasonality = seasonality;
            return this;
        }

        public Builder seasonality(String seasonality) {
            return seasonality(Output.of(seasonality));
        }

        public Builder time(@Nullable Output<SmallMultiplesOptionsArgs> time) {
            $.time = time;
            return this;
        }

        public Builder time(SmallMultiplesOptionsArgs time) {
            return time(Output.of(time));
        }

        public Builder upperBoundary(@Nullable Output<Double> upperBoundary) {
            $.upperBoundary = upperBoundary;
            return this;
        }

        public Builder upperBoundary(Double upperBoundary) {
            return upperBoundary(Output.of(upperBoundary));
        }

        public Builder value(@Nullable Output<MeasureFieldSchema2Args> value) {
            $.value = value;
            return this;
        }

        public Builder value(MeasureFieldSchema2Args value) {
            return value(Output.of(value));
        }

        public VisualsInsightVisualInsightConfigurationComputationForecastArgs build() {
            if ($.computationId == null) {
                throw new MissingRequiredPropertyException("VisualsInsightVisualInsightConfigurationComputationForecastArgs", "computationId");
            }
            if ($.seasonality == null) {
                throw new MissingRequiredPropertyException("VisualsInsightVisualInsightConfigurationComputationForecastArgs", "seasonality");
            }
            return $;
        }
    }

}
