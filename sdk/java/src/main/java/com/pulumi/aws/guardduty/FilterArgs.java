// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.guardduty;

import com.pulumi.aws.guardduty.inputs.FilterFindingCriteriaArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FilterArgs extends com.pulumi.resources.ResourceArgs {

    public static final FilterArgs Empty = new FilterArgs();

    @Import(name="action", required=true)
    private Output<String> action;

    public Output<String> action() {
        return this.action;
    }

    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="detectorId", required=true)
    private Output<String> detectorId;

    public Output<String> detectorId() {
        return this.detectorId;
    }

    @Import(name="findingCriteria", required=true)
    private Output<FilterFindingCriteriaArgs> findingCriteria;

    public Output<FilterFindingCriteriaArgs> findingCriteria() {
        return this.findingCriteria;
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="rank", required=true)
    private Output<Integer> rank;

    public Output<Integer> rank() {
        return this.rank;
    }

    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private FilterArgs() {}

    private FilterArgs(FilterArgs $) {
        this.action = $.action;
        this.description = $.description;
        this.detectorId = $.detectorId;
        this.findingCriteria = $.findingCriteria;
        this.name = $.name;
        this.rank = $.rank;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FilterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FilterArgs $;

        public Builder() {
            $ = new FilterArgs();
        }

        public Builder(FilterArgs defaults) {
            $ = new FilterArgs(Objects.requireNonNull(defaults));
        }

        public Builder action(Output<String> action) {
            $.action = action;
            return this;
        }

        public Builder action(String action) {
            return action(Output.of(action));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder detectorId(Output<String> detectorId) {
            $.detectorId = detectorId;
            return this;
        }

        public Builder detectorId(String detectorId) {
            return detectorId(Output.of(detectorId));
        }

        public Builder findingCriteria(Output<FilterFindingCriteriaArgs> findingCriteria) {
            $.findingCriteria = findingCriteria;
            return this;
        }

        public Builder findingCriteria(FilterFindingCriteriaArgs findingCriteria) {
            return findingCriteria(Output.of(findingCriteria));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder rank(Output<Integer> rank) {
            $.rank = rank;
            return this;
        }

        public Builder rank(Integer rank) {
            return rank(Output.of(rank));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public FilterArgs build() {
            $.action = Objects.requireNonNull($.action, "expected parameter 'action' to be non-null");
            $.detectorId = Objects.requireNonNull($.detectorId, "expected parameter 'detectorId' to be non-null");
            $.findingCriteria = Objects.requireNonNull($.findingCriteria, "expected parameter 'findingCriteria' to be non-null");
            $.rank = Objects.requireNonNull($.rank, "expected parameter 'rank' to be non-null");
            return $;
        }
    }

}
