// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.lambda;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class FunctionRecursionConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final FunctionRecursionConfigArgs Empty = new FunctionRecursionConfigArgs();

    /**
     * Lambda function name.
     * 
     */
    @Import(name="functionName", required=true)
    private Output<String> functionName;

    /**
     * @return Lambda function name.
     * 
     */
    public Output<String> functionName() {
        return this.functionName;
    }

    /**
     * Lambda function recursion configuration. Valid values are `Allow` or `Terminate`.
     * 
     */
    @Import(name="recursiveLoop", required=true)
    private Output<String> recursiveLoop;

    /**
     * @return Lambda function recursion configuration. Valid values are `Allow` or `Terminate`.
     * 
     */
    public Output<String> recursiveLoop() {
        return this.recursiveLoop;
    }

    private FunctionRecursionConfigArgs() {}

    private FunctionRecursionConfigArgs(FunctionRecursionConfigArgs $) {
        this.functionName = $.functionName;
        this.recursiveLoop = $.recursiveLoop;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FunctionRecursionConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FunctionRecursionConfigArgs $;

        public Builder() {
            $ = new FunctionRecursionConfigArgs();
        }

        public Builder(FunctionRecursionConfigArgs defaults) {
            $ = new FunctionRecursionConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param functionName Lambda function name.
         * 
         * @return builder
         * 
         */
        public Builder functionName(Output<String> functionName) {
            $.functionName = functionName;
            return this;
        }

        /**
         * @param functionName Lambda function name.
         * 
         * @return builder
         * 
         */
        public Builder functionName(String functionName) {
            return functionName(Output.of(functionName));
        }

        /**
         * @param recursiveLoop Lambda function recursion configuration. Valid values are `Allow` or `Terminate`.
         * 
         * @return builder
         * 
         */
        public Builder recursiveLoop(Output<String> recursiveLoop) {
            $.recursiveLoop = recursiveLoop;
            return this;
        }

        /**
         * @param recursiveLoop Lambda function recursion configuration. Valid values are `Allow` or `Terminate`.
         * 
         * @return builder
         * 
         */
        public Builder recursiveLoop(String recursiveLoop) {
            return recursiveLoop(Output.of(recursiveLoop));
        }

        public FunctionRecursionConfigArgs build() {
            if ($.functionName == null) {
                throw new MissingRequiredPropertyException("FunctionRecursionConfigArgs", "functionName");
            }
            if ($.recursiveLoop == null) {
                throw new MissingRequiredPropertyException("FunctionRecursionConfigArgs", "recursiveLoop");
            }
            return $;
        }
    }

}
