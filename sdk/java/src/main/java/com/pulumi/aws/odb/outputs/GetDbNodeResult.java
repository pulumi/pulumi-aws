// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.odb.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetDbNodeResult {
    /**
     * @return Additional information about the planned maintenance.
     * 
     */
    private String additionalDetails;
    private String arn;
    /**
     * @return The Oracle Cloud ID (OCID) of the backup IP address that&#39;s associated with the DB node.
     * 
     */
    private String backupIpId;
    /**
     * @return The OCID of the second backup VNIC.
     * 
     */
    private String backupVnic2Id;
    /**
     * @return The OCID of the backup VNIC.
     * 
     */
    private String backupVnicId;
    /**
     * @return The ID of the cloud VM cluster.
     * 
     */
    private String cloudVmClusterId;
    /**
     * @return The number of CPU cores enabled on the DB node.
     * 
     */
    private Integer cpuCoreCount;
    /**
     * @return The date and time when the DB node was created.
     * 
     */
    private String createdAt;
    /**
     * @return The unique identifier of the DB server that is associated with the DB node.
     * 
     */
    private String dbServerId;
    /**
     * @return The amount of local node storage, in gigabytes (GB), allocated on the DB node.
     * 
     */
    private Integer dbStorageSizeInGbs;
    /**
     * @return The OCID of the DB system.
     * 
     */
    private String dbSystemId;
    /**
     * @return The name of the fault domain the instance is contained in.
     * 
     */
    private String faultDomain;
    /**
     * @return The floating IP address assigned to the DB node.
     * 
     */
    private String floatingIpAddress;
    /**
     * @return The OCID of the host IP address that&#39;s associated with the DB node.
     * 
     */
    private String hostIpId;
    /**
     * @return The host name for the DB node.
     * 
     */
    private String hostname;
    private String id;
    /**
     * @return The type of database node maintenance. Either VMDB_REBOOT_MIGRATION or EXADBXS_REBOOT_MIGRATION.
     * 
     */
    private String maintenanceType;
    /**
     * @return The allocated memory in GBs on the DB node.
     * 
     */
    private Integer memorySizeInGbs;
    /**
     * @return The name of the OCI resource anchor for the DB node.
     * 
     */
    private String ociResourceAnchorName;
    /**
     * @return The OCID of the DB node.
     * 
     */
    private String ocid;
    /**
     * @return The private IP address assigned to the DB node.
     * 
     */
    private String privateIpAddress;
    private String region;
    /**
     * @return The size (in GB) of the block storage volume allocation for the DB system.
     * 
     */
    private Integer softwareStorageSizeInGbs;
    /**
     * @return The current status of the DB node.
     * 
     */
    private String status;
    /**
     * @return Additional information about the status of the DB node.
     * 
     */
    private String statusReason;
    /**
     * @return The end date and time of the maintenance window.
     * 
     */
    private String timeMaintenanceWindowEnd;
    /**
     * @return The start date and time of the maintenance window.
     * 
     */
    private String timeMaintenanceWindowStart;
    /**
     * @return The total number of CPU cores reserved on the DB node.
     * 
     */
    private Integer totalCpuCoreCount;
    /**
     * @return The OCID of the second VNIC.
     * 
     */
    private String vnic2Id;
    /**
     * @return The OCID of the VNIC.
     * 
     */
    private String vnicId;

    private GetDbNodeResult() {}
    /**
     * @return Additional information about the planned maintenance.
     * 
     */
    public String additionalDetails() {
        return this.additionalDetails;
    }
    public String arn() {
        return this.arn;
    }
    /**
     * @return The Oracle Cloud ID (OCID) of the backup IP address that&#39;s associated with the DB node.
     * 
     */
    public String backupIpId() {
        return this.backupIpId;
    }
    /**
     * @return The OCID of the second backup VNIC.
     * 
     */
    public String backupVnic2Id() {
        return this.backupVnic2Id;
    }
    /**
     * @return The OCID of the backup VNIC.
     * 
     */
    public String backupVnicId() {
        return this.backupVnicId;
    }
    /**
     * @return The ID of the cloud VM cluster.
     * 
     */
    public String cloudVmClusterId() {
        return this.cloudVmClusterId;
    }
    /**
     * @return The number of CPU cores enabled on the DB node.
     * 
     */
    public Integer cpuCoreCount() {
        return this.cpuCoreCount;
    }
    /**
     * @return The date and time when the DB node was created.
     * 
     */
    public String createdAt() {
        return this.createdAt;
    }
    /**
     * @return The unique identifier of the DB server that is associated with the DB node.
     * 
     */
    public String dbServerId() {
        return this.dbServerId;
    }
    /**
     * @return The amount of local node storage, in gigabytes (GB), allocated on the DB node.
     * 
     */
    public Integer dbStorageSizeInGbs() {
        return this.dbStorageSizeInGbs;
    }
    /**
     * @return The OCID of the DB system.
     * 
     */
    public String dbSystemId() {
        return this.dbSystemId;
    }
    /**
     * @return The name of the fault domain the instance is contained in.
     * 
     */
    public String faultDomain() {
        return this.faultDomain;
    }
    /**
     * @return The floating IP address assigned to the DB node.
     * 
     */
    public String floatingIpAddress() {
        return this.floatingIpAddress;
    }
    /**
     * @return The OCID of the host IP address that&#39;s associated with the DB node.
     * 
     */
    public String hostIpId() {
        return this.hostIpId;
    }
    /**
     * @return The host name for the DB node.
     * 
     */
    public String hostname() {
        return this.hostname;
    }
    public String id() {
        return this.id;
    }
    /**
     * @return The type of database node maintenance. Either VMDB_REBOOT_MIGRATION or EXADBXS_REBOOT_MIGRATION.
     * 
     */
    public String maintenanceType() {
        return this.maintenanceType;
    }
    /**
     * @return The allocated memory in GBs on the DB node.
     * 
     */
    public Integer memorySizeInGbs() {
        return this.memorySizeInGbs;
    }
    /**
     * @return The name of the OCI resource anchor for the DB node.
     * 
     */
    public String ociResourceAnchorName() {
        return this.ociResourceAnchorName;
    }
    /**
     * @return The OCID of the DB node.
     * 
     */
    public String ocid() {
        return this.ocid;
    }
    /**
     * @return The private IP address assigned to the DB node.
     * 
     */
    public String privateIpAddress() {
        return this.privateIpAddress;
    }
    public String region() {
        return this.region;
    }
    /**
     * @return The size (in GB) of the block storage volume allocation for the DB system.
     * 
     */
    public Integer softwareStorageSizeInGbs() {
        return this.softwareStorageSizeInGbs;
    }
    /**
     * @return The current status of the DB node.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return Additional information about the status of the DB node.
     * 
     */
    public String statusReason() {
        return this.statusReason;
    }
    /**
     * @return The end date and time of the maintenance window.
     * 
     */
    public String timeMaintenanceWindowEnd() {
        return this.timeMaintenanceWindowEnd;
    }
    /**
     * @return The start date and time of the maintenance window.
     * 
     */
    public String timeMaintenanceWindowStart() {
        return this.timeMaintenanceWindowStart;
    }
    /**
     * @return The total number of CPU cores reserved on the DB node.
     * 
     */
    public Integer totalCpuCoreCount() {
        return this.totalCpuCoreCount;
    }
    /**
     * @return The OCID of the second VNIC.
     * 
     */
    public String vnic2Id() {
        return this.vnic2Id;
    }
    /**
     * @return The OCID of the VNIC.
     * 
     */
    public String vnicId() {
        return this.vnicId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDbNodeResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String additionalDetails;
        private String arn;
        private String backupIpId;
        private String backupVnic2Id;
        private String backupVnicId;
        private String cloudVmClusterId;
        private Integer cpuCoreCount;
        private String createdAt;
        private String dbServerId;
        private Integer dbStorageSizeInGbs;
        private String dbSystemId;
        private String faultDomain;
        private String floatingIpAddress;
        private String hostIpId;
        private String hostname;
        private String id;
        private String maintenanceType;
        private Integer memorySizeInGbs;
        private String ociResourceAnchorName;
        private String ocid;
        private String privateIpAddress;
        private String region;
        private Integer softwareStorageSizeInGbs;
        private String status;
        private String statusReason;
        private String timeMaintenanceWindowEnd;
        private String timeMaintenanceWindowStart;
        private Integer totalCpuCoreCount;
        private String vnic2Id;
        private String vnicId;
        public Builder() {}
        public Builder(GetDbNodeResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.additionalDetails = defaults.additionalDetails;
    	      this.arn = defaults.arn;
    	      this.backupIpId = defaults.backupIpId;
    	      this.backupVnic2Id = defaults.backupVnic2Id;
    	      this.backupVnicId = defaults.backupVnicId;
    	      this.cloudVmClusterId = defaults.cloudVmClusterId;
    	      this.cpuCoreCount = defaults.cpuCoreCount;
    	      this.createdAt = defaults.createdAt;
    	      this.dbServerId = defaults.dbServerId;
    	      this.dbStorageSizeInGbs = defaults.dbStorageSizeInGbs;
    	      this.dbSystemId = defaults.dbSystemId;
    	      this.faultDomain = defaults.faultDomain;
    	      this.floatingIpAddress = defaults.floatingIpAddress;
    	      this.hostIpId = defaults.hostIpId;
    	      this.hostname = defaults.hostname;
    	      this.id = defaults.id;
    	      this.maintenanceType = defaults.maintenanceType;
    	      this.memorySizeInGbs = defaults.memorySizeInGbs;
    	      this.ociResourceAnchorName = defaults.ociResourceAnchorName;
    	      this.ocid = defaults.ocid;
    	      this.privateIpAddress = defaults.privateIpAddress;
    	      this.region = defaults.region;
    	      this.softwareStorageSizeInGbs = defaults.softwareStorageSizeInGbs;
    	      this.status = defaults.status;
    	      this.statusReason = defaults.statusReason;
    	      this.timeMaintenanceWindowEnd = defaults.timeMaintenanceWindowEnd;
    	      this.timeMaintenanceWindowStart = defaults.timeMaintenanceWindowStart;
    	      this.totalCpuCoreCount = defaults.totalCpuCoreCount;
    	      this.vnic2Id = defaults.vnic2Id;
    	      this.vnicId = defaults.vnicId;
        }

        @CustomType.Setter
        public Builder additionalDetails(String additionalDetails) {
            if (additionalDetails == null) {
              throw new MissingRequiredPropertyException("GetDbNodeResult", "additionalDetails");
            }
            this.additionalDetails = additionalDetails;
            return this;
        }
        @CustomType.Setter
        public Builder arn(String arn) {
            if (arn == null) {
              throw new MissingRequiredPropertyException("GetDbNodeResult", "arn");
            }
            this.arn = arn;
            return this;
        }
        @CustomType.Setter
        public Builder backupIpId(String backupIpId) {
            if (backupIpId == null) {
              throw new MissingRequiredPropertyException("GetDbNodeResult", "backupIpId");
            }
            this.backupIpId = backupIpId;
            return this;
        }
        @CustomType.Setter
        public Builder backupVnic2Id(String backupVnic2Id) {
            if (backupVnic2Id == null) {
              throw new MissingRequiredPropertyException("GetDbNodeResult", "backupVnic2Id");
            }
            this.backupVnic2Id = backupVnic2Id;
            return this;
        }
        @CustomType.Setter
        public Builder backupVnicId(String backupVnicId) {
            if (backupVnicId == null) {
              throw new MissingRequiredPropertyException("GetDbNodeResult", "backupVnicId");
            }
            this.backupVnicId = backupVnicId;
            return this;
        }
        @CustomType.Setter
        public Builder cloudVmClusterId(String cloudVmClusterId) {
            if (cloudVmClusterId == null) {
              throw new MissingRequiredPropertyException("GetDbNodeResult", "cloudVmClusterId");
            }
            this.cloudVmClusterId = cloudVmClusterId;
            return this;
        }
        @CustomType.Setter
        public Builder cpuCoreCount(Integer cpuCoreCount) {
            if (cpuCoreCount == null) {
              throw new MissingRequiredPropertyException("GetDbNodeResult", "cpuCoreCount");
            }
            this.cpuCoreCount = cpuCoreCount;
            return this;
        }
        @CustomType.Setter
        public Builder createdAt(String createdAt) {
            if (createdAt == null) {
              throw new MissingRequiredPropertyException("GetDbNodeResult", "createdAt");
            }
            this.createdAt = createdAt;
            return this;
        }
        @CustomType.Setter
        public Builder dbServerId(String dbServerId) {
            if (dbServerId == null) {
              throw new MissingRequiredPropertyException("GetDbNodeResult", "dbServerId");
            }
            this.dbServerId = dbServerId;
            return this;
        }
        @CustomType.Setter
        public Builder dbStorageSizeInGbs(Integer dbStorageSizeInGbs) {
            if (dbStorageSizeInGbs == null) {
              throw new MissingRequiredPropertyException("GetDbNodeResult", "dbStorageSizeInGbs");
            }
            this.dbStorageSizeInGbs = dbStorageSizeInGbs;
            return this;
        }
        @CustomType.Setter
        public Builder dbSystemId(String dbSystemId) {
            if (dbSystemId == null) {
              throw new MissingRequiredPropertyException("GetDbNodeResult", "dbSystemId");
            }
            this.dbSystemId = dbSystemId;
            return this;
        }
        @CustomType.Setter
        public Builder faultDomain(String faultDomain) {
            if (faultDomain == null) {
              throw new MissingRequiredPropertyException("GetDbNodeResult", "faultDomain");
            }
            this.faultDomain = faultDomain;
            return this;
        }
        @CustomType.Setter
        public Builder floatingIpAddress(String floatingIpAddress) {
            if (floatingIpAddress == null) {
              throw new MissingRequiredPropertyException("GetDbNodeResult", "floatingIpAddress");
            }
            this.floatingIpAddress = floatingIpAddress;
            return this;
        }
        @CustomType.Setter
        public Builder hostIpId(String hostIpId) {
            if (hostIpId == null) {
              throw new MissingRequiredPropertyException("GetDbNodeResult", "hostIpId");
            }
            this.hostIpId = hostIpId;
            return this;
        }
        @CustomType.Setter
        public Builder hostname(String hostname) {
            if (hostname == null) {
              throw new MissingRequiredPropertyException("GetDbNodeResult", "hostname");
            }
            this.hostname = hostname;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetDbNodeResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder maintenanceType(String maintenanceType) {
            if (maintenanceType == null) {
              throw new MissingRequiredPropertyException("GetDbNodeResult", "maintenanceType");
            }
            this.maintenanceType = maintenanceType;
            return this;
        }
        @CustomType.Setter
        public Builder memorySizeInGbs(Integer memorySizeInGbs) {
            if (memorySizeInGbs == null) {
              throw new MissingRequiredPropertyException("GetDbNodeResult", "memorySizeInGbs");
            }
            this.memorySizeInGbs = memorySizeInGbs;
            return this;
        }
        @CustomType.Setter
        public Builder ociResourceAnchorName(String ociResourceAnchorName) {
            if (ociResourceAnchorName == null) {
              throw new MissingRequiredPropertyException("GetDbNodeResult", "ociResourceAnchorName");
            }
            this.ociResourceAnchorName = ociResourceAnchorName;
            return this;
        }
        @CustomType.Setter
        public Builder ocid(String ocid) {
            if (ocid == null) {
              throw new MissingRequiredPropertyException("GetDbNodeResult", "ocid");
            }
            this.ocid = ocid;
            return this;
        }
        @CustomType.Setter
        public Builder privateIpAddress(String privateIpAddress) {
            if (privateIpAddress == null) {
              throw new MissingRequiredPropertyException("GetDbNodeResult", "privateIpAddress");
            }
            this.privateIpAddress = privateIpAddress;
            return this;
        }
        @CustomType.Setter
        public Builder region(String region) {
            if (region == null) {
              throw new MissingRequiredPropertyException("GetDbNodeResult", "region");
            }
            this.region = region;
            return this;
        }
        @CustomType.Setter
        public Builder softwareStorageSizeInGbs(Integer softwareStorageSizeInGbs) {
            if (softwareStorageSizeInGbs == null) {
              throw new MissingRequiredPropertyException("GetDbNodeResult", "softwareStorageSizeInGbs");
            }
            this.softwareStorageSizeInGbs = softwareStorageSizeInGbs;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetDbNodeResult", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder statusReason(String statusReason) {
            if (statusReason == null) {
              throw new MissingRequiredPropertyException("GetDbNodeResult", "statusReason");
            }
            this.statusReason = statusReason;
            return this;
        }
        @CustomType.Setter
        public Builder timeMaintenanceWindowEnd(String timeMaintenanceWindowEnd) {
            if (timeMaintenanceWindowEnd == null) {
              throw new MissingRequiredPropertyException("GetDbNodeResult", "timeMaintenanceWindowEnd");
            }
            this.timeMaintenanceWindowEnd = timeMaintenanceWindowEnd;
            return this;
        }
        @CustomType.Setter
        public Builder timeMaintenanceWindowStart(String timeMaintenanceWindowStart) {
            if (timeMaintenanceWindowStart == null) {
              throw new MissingRequiredPropertyException("GetDbNodeResult", "timeMaintenanceWindowStart");
            }
            this.timeMaintenanceWindowStart = timeMaintenanceWindowStart;
            return this;
        }
        @CustomType.Setter
        public Builder totalCpuCoreCount(Integer totalCpuCoreCount) {
            if (totalCpuCoreCount == null) {
              throw new MissingRequiredPropertyException("GetDbNodeResult", "totalCpuCoreCount");
            }
            this.totalCpuCoreCount = totalCpuCoreCount;
            return this;
        }
        @CustomType.Setter
        public Builder vnic2Id(String vnic2Id) {
            if (vnic2Id == null) {
              throw new MissingRequiredPropertyException("GetDbNodeResult", "vnic2Id");
            }
            this.vnic2Id = vnic2Id;
            return this;
        }
        @CustomType.Setter
        public Builder vnicId(String vnicId) {
            if (vnicId == null) {
              throw new MissingRequiredPropertyException("GetDbNodeResult", "vnicId");
            }
            this.vnicId = vnicId;
            return this;
        }
        public GetDbNodeResult build() {
            final var _resultValue = new GetDbNodeResult();
            _resultValue.additionalDetails = additionalDetails;
            _resultValue.arn = arn;
            _resultValue.backupIpId = backupIpId;
            _resultValue.backupVnic2Id = backupVnic2Id;
            _resultValue.backupVnicId = backupVnicId;
            _resultValue.cloudVmClusterId = cloudVmClusterId;
            _resultValue.cpuCoreCount = cpuCoreCount;
            _resultValue.createdAt = createdAt;
            _resultValue.dbServerId = dbServerId;
            _resultValue.dbStorageSizeInGbs = dbStorageSizeInGbs;
            _resultValue.dbSystemId = dbSystemId;
            _resultValue.faultDomain = faultDomain;
            _resultValue.floatingIpAddress = floatingIpAddress;
            _resultValue.hostIpId = hostIpId;
            _resultValue.hostname = hostname;
            _resultValue.id = id;
            _resultValue.maintenanceType = maintenanceType;
            _resultValue.memorySizeInGbs = memorySizeInGbs;
            _resultValue.ociResourceAnchorName = ociResourceAnchorName;
            _resultValue.ocid = ocid;
            _resultValue.privateIpAddress = privateIpAddress;
            _resultValue.region = region;
            _resultValue.softwareStorageSizeInGbs = softwareStorageSizeInGbs;
            _resultValue.status = status;
            _resultValue.statusReason = statusReason;
            _resultValue.timeMaintenanceWindowEnd = timeMaintenanceWindowEnd;
            _resultValue.timeMaintenanceWindowStart = timeMaintenanceWindowStart;
            _resultValue.totalCpuCoreCount = totalCpuCoreCount;
            _resultValue.vnic2Id = vnic2Id;
            _resultValue.vnicId = vnicId;
            return _resultValue;
        }
    }
}
