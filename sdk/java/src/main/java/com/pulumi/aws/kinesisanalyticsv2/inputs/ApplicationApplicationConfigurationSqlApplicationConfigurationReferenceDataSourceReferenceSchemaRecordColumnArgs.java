// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.kinesisanalyticsv2.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordColumnArgs extends com.pulumi.resources.ResourceArgs {

    public static final ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordColumnArgs Empty = new ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordColumnArgs();

    /**
     * A reference to the data element in the streaming input or the reference data source.
     * 
     */
    @Import(name="mapping")
    private @Nullable Output<String> mapping;

    /**
     * @return A reference to the data element in the streaming input or the reference data source.
     * 
     */
    public Optional<Output<String>> mapping() {
        return Optional.ofNullable(this.mapping);
    }

    /**
     * The name of the column that is created in the in-application input stream or reference table.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the column that is created in the in-application input stream or reference table.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The type of column created in the in-application input stream or reference table.
     * 
     */
    @Import(name="sqlType", required=true)
    private Output<String> sqlType;

    /**
     * @return The type of column created in the in-application input stream or reference table.
     * 
     */
    public Output<String> sqlType() {
        return this.sqlType;
    }

    private ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordColumnArgs() {}

    private ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordColumnArgs(ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordColumnArgs $) {
        this.mapping = $.mapping;
        this.name = $.name;
        this.sqlType = $.sqlType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordColumnArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordColumnArgs $;

        public Builder() {
            $ = new ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordColumnArgs();
        }

        public Builder(ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordColumnArgs defaults) {
            $ = new ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordColumnArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param mapping A reference to the data element in the streaming input or the reference data source.
         * 
         * @return builder
         * 
         */
        public Builder mapping(@Nullable Output<String> mapping) {
            $.mapping = mapping;
            return this;
        }

        /**
         * @param mapping A reference to the data element in the streaming input or the reference data source.
         * 
         * @return builder
         * 
         */
        public Builder mapping(String mapping) {
            return mapping(Output.of(mapping));
        }

        /**
         * @param name The name of the column that is created in the in-application input stream or reference table.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the column that is created in the in-application input stream or reference table.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param sqlType The type of column created in the in-application input stream or reference table.
         * 
         * @return builder
         * 
         */
        public Builder sqlType(Output<String> sqlType) {
            $.sqlType = sqlType;
            return this;
        }

        /**
         * @param sqlType The type of column created in the in-application input stream or reference table.
         * 
         * @return builder
         * 
         */
        public Builder sqlType(String sqlType) {
            return sqlType(Output.of(sqlType));
        }

        public ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordColumnArgs build() {
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.sqlType = Objects.requireNonNull($.sqlType, "expected parameter 'sqlType' to be non-null");
            return $;
        }
    }

}
