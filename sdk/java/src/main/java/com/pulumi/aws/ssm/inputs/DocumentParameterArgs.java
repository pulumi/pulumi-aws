// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ssm.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DocumentParameterArgs extends com.pulumi.resources.ResourceArgs {

    public static final DocumentParameterArgs Empty = new DocumentParameterArgs();

    /**
     * If specified, the default values for the parameters. Parameters without a default value are required. Parameters with a default value are optional.
     * 
     */
    @Import(name="defaultValue")
    private @Nullable Output<String> defaultValue;

    /**
     * @return If specified, the default values for the parameters. Parameters without a default value are required. Parameters with a default value are optional.
     * 
     */
    public Optional<Output<String>> defaultValue() {
        return Optional.ofNullable(this.defaultValue);
    }

    /**
     * A description of what the parameter does, how to use it, the default value, and whether or not the parameter is optional.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A description of what the parameter does, how to use it, the default value, and whether or not the parameter is optional.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The name of the document.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the document.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The type of parameter. Valid values: `String`, `StringList`.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The type of parameter. Valid values: `String`, `StringList`.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private DocumentParameterArgs() {}

    private DocumentParameterArgs(DocumentParameterArgs $) {
        this.defaultValue = $.defaultValue;
        this.description = $.description;
        this.name = $.name;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DocumentParameterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DocumentParameterArgs $;

        public Builder() {
            $ = new DocumentParameterArgs();
        }

        public Builder(DocumentParameterArgs defaults) {
            $ = new DocumentParameterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param defaultValue If specified, the default values for the parameters. Parameters without a default value are required. Parameters with a default value are optional.
         * 
         * @return builder
         * 
         */
        public Builder defaultValue(@Nullable Output<String> defaultValue) {
            $.defaultValue = defaultValue;
            return this;
        }

        /**
         * @param defaultValue If specified, the default values for the parameters. Parameters without a default value are required. Parameters with a default value are optional.
         * 
         * @return builder
         * 
         */
        public Builder defaultValue(String defaultValue) {
            return defaultValue(Output.of(defaultValue));
        }

        /**
         * @param description A description of what the parameter does, how to use it, the default value, and whether or not the parameter is optional.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A description of what the parameter does, how to use it, the default value, and whether or not the parameter is optional.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param name The name of the document.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the document.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param type The type of parameter. Valid values: `String`, `StringList`.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of parameter. Valid values: `String`, `StringList`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public DocumentParameterArgs build() {
            return $;
        }
    }

}
