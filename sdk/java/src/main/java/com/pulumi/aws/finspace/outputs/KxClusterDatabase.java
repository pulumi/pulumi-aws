// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.finspace.outputs;

import com.pulumi.aws.finspace.outputs.KxClusterDatabaseCacheConfiguration;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class KxClusterDatabase {
    /**
     * @return Configuration details for the disk cache to increase performance reading from a KX database mounted to the cluster. See cache_configurations.
     * 
     */
    private @Nullable List<KxClusterDatabaseCacheConfiguration> cacheConfigurations;
    /**
     * @return A unique identifier of the changeset that is associated with the cluster.
     * 
     */
    private @Nullable String changesetId;
    /**
     * @return Name of the KX database.
     * 
     */
    private String databaseName;
    /**
     * @return The name of the dataview to be used for caching historical data on disk. You cannot update to a different dataview name once a cluster is created. Use `lifecycle` `ignore_changes` for database to prevent any undesirable behaviors.
     * 
     */
    private @Nullable String dataviewName;

    private KxClusterDatabase() {}
    /**
     * @return Configuration details for the disk cache to increase performance reading from a KX database mounted to the cluster. See cache_configurations.
     * 
     */
    public List<KxClusterDatabaseCacheConfiguration> cacheConfigurations() {
        return this.cacheConfigurations == null ? List.of() : this.cacheConfigurations;
    }
    /**
     * @return A unique identifier of the changeset that is associated with the cluster.
     * 
     */
    public Optional<String> changesetId() {
        return Optional.ofNullable(this.changesetId);
    }
    /**
     * @return Name of the KX database.
     * 
     */
    public String databaseName() {
        return this.databaseName;
    }
    /**
     * @return The name of the dataview to be used for caching historical data on disk. You cannot update to a different dataview name once a cluster is created. Use `lifecycle` `ignore_changes` for database to prevent any undesirable behaviors.
     * 
     */
    public Optional<String> dataviewName() {
        return Optional.ofNullable(this.dataviewName);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(KxClusterDatabase defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<KxClusterDatabaseCacheConfiguration> cacheConfigurations;
        private @Nullable String changesetId;
        private String databaseName;
        private @Nullable String dataviewName;
        public Builder() {}
        public Builder(KxClusterDatabase defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cacheConfigurations = defaults.cacheConfigurations;
    	      this.changesetId = defaults.changesetId;
    	      this.databaseName = defaults.databaseName;
    	      this.dataviewName = defaults.dataviewName;
        }

        @CustomType.Setter
        public Builder cacheConfigurations(@Nullable List<KxClusterDatabaseCacheConfiguration> cacheConfigurations) {
            this.cacheConfigurations = cacheConfigurations;
            return this;
        }
        public Builder cacheConfigurations(KxClusterDatabaseCacheConfiguration... cacheConfigurations) {
            return cacheConfigurations(List.of(cacheConfigurations));
        }
        @CustomType.Setter
        public Builder changesetId(@Nullable String changesetId) {
            this.changesetId = changesetId;
            return this;
        }
        @CustomType.Setter
        public Builder databaseName(String databaseName) {
            this.databaseName = Objects.requireNonNull(databaseName);
            return this;
        }
        @CustomType.Setter
        public Builder dataviewName(@Nullable String dataviewName) {
            this.dataviewName = dataviewName;
            return this;
        }
        public KxClusterDatabase build() {
            final var _resultValue = new KxClusterDatabase();
            _resultValue.cacheConfigurations = cacheConfigurations;
            _resultValue.changesetId = changesetId;
            _resultValue.databaseName = databaseName;
            _resultValue.dataviewName = dataviewName;
            return _resultValue;
        }
    }
}
