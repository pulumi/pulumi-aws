// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.costexplorer.outputs;

import com.pulumi.aws.costexplorer.outputs.GetCostCategoryRuleRuleAnd;
import com.pulumi.aws.costexplorer.outputs.GetCostCategoryRuleRuleCostCategory;
import com.pulumi.aws.costexplorer.outputs.GetCostCategoryRuleRuleDimension;
import com.pulumi.aws.costexplorer.outputs.GetCostCategoryRuleRuleNot;
import com.pulumi.aws.costexplorer.outputs.GetCostCategoryRuleRuleOr;
import com.pulumi.aws.costexplorer.outputs.GetCostCategoryRuleRuleTag;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetCostCategoryRuleRule {
    /**
     * @return Return results that match both `Dimension` objects.
     * 
     */
    private List<GetCostCategoryRuleRuleAnd> ands;
    /**
     * @return Configuration block for the filter that&#39;s based on `CostCategory` values. See below.
     * 
     */
    private List<GetCostCategoryRuleRuleCostCategory> costCategories;
    /**
     * @return Configuration block for the specific `Dimension` to use for `Expression`. See below.
     * 
     */
    private List<GetCostCategoryRuleRuleDimension> dimensions;
    /**
     * @return Return results that do not match the `Dimension` object.
     * 
     */
    private List<GetCostCategoryRuleRuleNot> nots;
    /**
     * @return Return results that match either `Dimension` object.
     * 
     */
    private List<GetCostCategoryRuleRuleOr> ors;
    /**
     * @return Configuration block for the specific `Tag` to use for `Expression`. See below.
     * 
     */
    private List<GetCostCategoryRuleRuleTag> tags;

    private GetCostCategoryRuleRule() {}
    /**
     * @return Return results that match both `Dimension` objects.
     * 
     */
    public List<GetCostCategoryRuleRuleAnd> ands() {
        return this.ands;
    }
    /**
     * @return Configuration block for the filter that&#39;s based on `CostCategory` values. See below.
     * 
     */
    public List<GetCostCategoryRuleRuleCostCategory> costCategories() {
        return this.costCategories;
    }
    /**
     * @return Configuration block for the specific `Dimension` to use for `Expression`. See below.
     * 
     */
    public List<GetCostCategoryRuleRuleDimension> dimensions() {
        return this.dimensions;
    }
    /**
     * @return Return results that do not match the `Dimension` object.
     * 
     */
    public List<GetCostCategoryRuleRuleNot> nots() {
        return this.nots;
    }
    /**
     * @return Return results that match either `Dimension` object.
     * 
     */
    public List<GetCostCategoryRuleRuleOr> ors() {
        return this.ors;
    }
    /**
     * @return Configuration block for the specific `Tag` to use for `Expression`. See below.
     * 
     */
    public List<GetCostCategoryRuleRuleTag> tags() {
        return this.tags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCostCategoryRuleRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetCostCategoryRuleRuleAnd> ands;
        private List<GetCostCategoryRuleRuleCostCategory> costCategories;
        private List<GetCostCategoryRuleRuleDimension> dimensions;
        private List<GetCostCategoryRuleRuleNot> nots;
        private List<GetCostCategoryRuleRuleOr> ors;
        private List<GetCostCategoryRuleRuleTag> tags;
        public Builder() {}
        public Builder(GetCostCategoryRuleRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ands = defaults.ands;
    	      this.costCategories = defaults.costCategories;
    	      this.dimensions = defaults.dimensions;
    	      this.nots = defaults.nots;
    	      this.ors = defaults.ors;
    	      this.tags = defaults.tags;
        }

        @CustomType.Setter
        public Builder ands(List<GetCostCategoryRuleRuleAnd> ands) {
            if (ands == null) {
              throw new MissingRequiredPropertyException("GetCostCategoryRuleRule", "ands");
            }
            this.ands = ands;
            return this;
        }
        public Builder ands(GetCostCategoryRuleRuleAnd... ands) {
            return ands(List.of(ands));
        }
        @CustomType.Setter
        public Builder costCategories(List<GetCostCategoryRuleRuleCostCategory> costCategories) {
            if (costCategories == null) {
              throw new MissingRequiredPropertyException("GetCostCategoryRuleRule", "costCategories");
            }
            this.costCategories = costCategories;
            return this;
        }
        public Builder costCategories(GetCostCategoryRuleRuleCostCategory... costCategories) {
            return costCategories(List.of(costCategories));
        }
        @CustomType.Setter
        public Builder dimensions(List<GetCostCategoryRuleRuleDimension> dimensions) {
            if (dimensions == null) {
              throw new MissingRequiredPropertyException("GetCostCategoryRuleRule", "dimensions");
            }
            this.dimensions = dimensions;
            return this;
        }
        public Builder dimensions(GetCostCategoryRuleRuleDimension... dimensions) {
            return dimensions(List.of(dimensions));
        }
        @CustomType.Setter
        public Builder nots(List<GetCostCategoryRuleRuleNot> nots) {
            if (nots == null) {
              throw new MissingRequiredPropertyException("GetCostCategoryRuleRule", "nots");
            }
            this.nots = nots;
            return this;
        }
        public Builder nots(GetCostCategoryRuleRuleNot... nots) {
            return nots(List.of(nots));
        }
        @CustomType.Setter
        public Builder ors(List<GetCostCategoryRuleRuleOr> ors) {
            if (ors == null) {
              throw new MissingRequiredPropertyException("GetCostCategoryRuleRule", "ors");
            }
            this.ors = ors;
            return this;
        }
        public Builder ors(GetCostCategoryRuleRuleOr... ors) {
            return ors(List.of(ors));
        }
        @CustomType.Setter
        public Builder tags(List<GetCostCategoryRuleRuleTag> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetCostCategoryRuleRule", "tags");
            }
            this.tags = tags;
            return this;
        }
        public Builder tags(GetCostCategoryRuleRuleTag... tags) {
            return tags(List.of(tags));
        }
        public GetCostCategoryRuleRule build() {
            final var _resultValue = new GetCostCategoryRuleRule();
            _resultValue.ands = ands;
            _resultValue.costCategories = costCategories;
            _resultValue.dimensions = dimensions;
            _resultValue.nots = nots;
            _resultValue.ors = ors;
            _resultValue.tags = tags;
            return _resultValue;
        }
    }
}
