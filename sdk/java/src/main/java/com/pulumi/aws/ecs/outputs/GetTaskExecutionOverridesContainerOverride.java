// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ecs.outputs;

import com.pulumi.aws.ecs.outputs.GetTaskExecutionOverridesContainerOverrideEnvironment;
import com.pulumi.aws.ecs.outputs.GetTaskExecutionOverridesContainerOverrideResourceRequirement;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetTaskExecutionOverridesContainerOverride {
    /**
     * @return The command to send to the container that overrides the default command from the Docker image or the task definition.
     * 
     */
    private @Nullable List<String> commands;
    /**
     * @return The number of cpu units reserved for the container, instead of the default value from the task definition.
     * 
     */
    private @Nullable Integer cpu;
    /**
     * @return The environment variables to send to the container. You can add new environment variables, which are added to the container at launch, or you can override the existing environment variables from the Docker image or the task definition. See below.
     * 
     */
    private @Nullable List<GetTaskExecutionOverridesContainerOverrideEnvironment> environments;
    /**
     * @return The hard limit (in MiB) of memory to present to the container, instead of the default value from the task definition. If your container attempts to exceed the memory specified here, the container is killed.
     * 
     */
    private @Nullable Integer memory;
    /**
     * @return The soft limit (in MiB) of memory to reserve for the container, instead of the default value from the task definition.
     * 
     */
    private @Nullable Integer memoryReservation;
    /**
     * @return The name of the container that receives the override. This parameter is required if any override is specified.
     * 
     */
    private String name;
    /**
     * @return The type and amount of a resource to assign to a container, instead of the default value from the task definition. The only supported resource is a GPU. See below.
     * 
     */
    private @Nullable List<GetTaskExecutionOverridesContainerOverrideResourceRequirement> resourceRequirements;

    private GetTaskExecutionOverridesContainerOverride() {}
    /**
     * @return The command to send to the container that overrides the default command from the Docker image or the task definition.
     * 
     */
    public List<String> commands() {
        return this.commands == null ? List.of() : this.commands;
    }
    /**
     * @return The number of cpu units reserved for the container, instead of the default value from the task definition.
     * 
     */
    public Optional<Integer> cpu() {
        return Optional.ofNullable(this.cpu);
    }
    /**
     * @return The environment variables to send to the container. You can add new environment variables, which are added to the container at launch, or you can override the existing environment variables from the Docker image or the task definition. See below.
     * 
     */
    public List<GetTaskExecutionOverridesContainerOverrideEnvironment> environments() {
        return this.environments == null ? List.of() : this.environments;
    }
    /**
     * @return The hard limit (in MiB) of memory to present to the container, instead of the default value from the task definition. If your container attempts to exceed the memory specified here, the container is killed.
     * 
     */
    public Optional<Integer> memory() {
        return Optional.ofNullable(this.memory);
    }
    /**
     * @return The soft limit (in MiB) of memory to reserve for the container, instead of the default value from the task definition.
     * 
     */
    public Optional<Integer> memoryReservation() {
        return Optional.ofNullable(this.memoryReservation);
    }
    /**
     * @return The name of the container that receives the override. This parameter is required if any override is specified.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The type and amount of a resource to assign to a container, instead of the default value from the task definition. The only supported resource is a GPU. See below.
     * 
     */
    public List<GetTaskExecutionOverridesContainerOverrideResourceRequirement> resourceRequirements() {
        return this.resourceRequirements == null ? List.of() : this.resourceRequirements;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTaskExecutionOverridesContainerOverride defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> commands;
        private @Nullable Integer cpu;
        private @Nullable List<GetTaskExecutionOverridesContainerOverrideEnvironment> environments;
        private @Nullable Integer memory;
        private @Nullable Integer memoryReservation;
        private String name;
        private @Nullable List<GetTaskExecutionOverridesContainerOverrideResourceRequirement> resourceRequirements;
        public Builder() {}
        public Builder(GetTaskExecutionOverridesContainerOverride defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.commands = defaults.commands;
    	      this.cpu = defaults.cpu;
    	      this.environments = defaults.environments;
    	      this.memory = defaults.memory;
    	      this.memoryReservation = defaults.memoryReservation;
    	      this.name = defaults.name;
    	      this.resourceRequirements = defaults.resourceRequirements;
        }

        @CustomType.Setter
        public Builder commands(@Nullable List<String> commands) {

            this.commands = commands;
            return this;
        }
        public Builder commands(String... commands) {
            return commands(List.of(commands));
        }
        @CustomType.Setter
        public Builder cpu(@Nullable Integer cpu) {

            this.cpu = cpu;
            return this;
        }
        @CustomType.Setter
        public Builder environments(@Nullable List<GetTaskExecutionOverridesContainerOverrideEnvironment> environments) {

            this.environments = environments;
            return this;
        }
        public Builder environments(GetTaskExecutionOverridesContainerOverrideEnvironment... environments) {
            return environments(List.of(environments));
        }
        @CustomType.Setter
        public Builder memory(@Nullable Integer memory) {

            this.memory = memory;
            return this;
        }
        @CustomType.Setter
        public Builder memoryReservation(@Nullable Integer memoryReservation) {

            this.memoryReservation = memoryReservation;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetTaskExecutionOverridesContainerOverride", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder resourceRequirements(@Nullable List<GetTaskExecutionOverridesContainerOverrideResourceRequirement> resourceRequirements) {

            this.resourceRequirements = resourceRequirements;
            return this;
        }
        public Builder resourceRequirements(GetTaskExecutionOverridesContainerOverrideResourceRequirement... resourceRequirements) {
            return resourceRequirements(List.of(resourceRequirements));
        }
        public GetTaskExecutionOverridesContainerOverride build() {
            final var _resultValue = new GetTaskExecutionOverridesContainerOverride();
            _resultValue.commands = commands;
            _resultValue.cpu = cpu;
            _resultValue.environments = environments;
            _resultValue.memory = memory;
            _resultValue.memoryReservation = memoryReservation;
            _resultValue.name = name;
            _resultValue.resourceRequirements = resourceRequirements;
            return _resultValue;
        }
    }
}
