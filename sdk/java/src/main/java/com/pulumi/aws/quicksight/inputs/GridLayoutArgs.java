// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.inputs;

import com.pulumi.aws.quicksight.inputs.GridLayoutCanvasSizeOptionsArgs;
import com.pulumi.aws.quicksight.inputs.GridLayoutElementArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GridLayoutArgs extends com.pulumi.resources.ResourceArgs {

    public static final GridLayoutArgs Empty = new GridLayoutArgs();

    @Import(name="canvasSizeOptions")
    private @Nullable Output<GridLayoutCanvasSizeOptionsArgs> canvasSizeOptions;

    public Optional<Output<GridLayoutCanvasSizeOptionsArgs>> canvasSizeOptions() {
        return Optional.ofNullable(this.canvasSizeOptions);
    }

    @Import(name="elements", required=true)
    private Output<List<GridLayoutElementArgs>> elements;

    public Output<List<GridLayoutElementArgs>> elements() {
        return this.elements;
    }

    private GridLayoutArgs() {}

    private GridLayoutArgs(GridLayoutArgs $) {
        this.canvasSizeOptions = $.canvasSizeOptions;
        this.elements = $.elements;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GridLayoutArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GridLayoutArgs $;

        public Builder() {
            $ = new GridLayoutArgs();
        }

        public Builder(GridLayoutArgs defaults) {
            $ = new GridLayoutArgs(Objects.requireNonNull(defaults));
        }

        public Builder canvasSizeOptions(@Nullable Output<GridLayoutCanvasSizeOptionsArgs> canvasSizeOptions) {
            $.canvasSizeOptions = canvasSizeOptions;
            return this;
        }

        public Builder canvasSizeOptions(GridLayoutCanvasSizeOptionsArgs canvasSizeOptions) {
            return canvasSizeOptions(Output.of(canvasSizeOptions));
        }

        public Builder elements(Output<List<GridLayoutElementArgs>> elements) {
            $.elements = elements;
            return this;
        }

        public Builder elements(List<GridLayoutElementArgs> elements) {
            return elements(Output.of(elements));
        }

        public Builder elements(GridLayoutElementArgs... elements) {
            return elements(List.of(elements));
        }

        public GridLayoutArgs build() {
            if ($.elements == null) {
                throw new MissingRequiredPropertyException("GridLayoutArgs", "elements");
            }
            return $;
        }
    }

}
