// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.appsync;

import com.pulumi.aws.appsync.inputs.FunctionRuntimeArgs;
import com.pulumi.aws.appsync.inputs.FunctionSyncConfigArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FunctionArgs extends com.pulumi.resources.ResourceArgs {

    public static final FunctionArgs Empty = new FunctionArgs();

    @Import(name="apiId", required=true)
    private Output<String> apiId;

    public Output<String> apiId() {
        return this.apiId;
    }

    @Import(name="code")
    private @Nullable Output<String> code;

    public Optional<Output<String>> code() {
        return Optional.ofNullable(this.code);
    }

    @Import(name="dataSource", required=true)
    private Output<String> dataSource;

    public Output<String> dataSource() {
        return this.dataSource;
    }

    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="functionVersion")
    private @Nullable Output<String> functionVersion;

    public Optional<Output<String>> functionVersion() {
        return Optional.ofNullable(this.functionVersion);
    }

    @Import(name="maxBatchSize")
    private @Nullable Output<Integer> maxBatchSize;

    public Optional<Output<Integer>> maxBatchSize() {
        return Optional.ofNullable(this.maxBatchSize);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="requestMappingTemplate")
    private @Nullable Output<String> requestMappingTemplate;

    public Optional<Output<String>> requestMappingTemplate() {
        return Optional.ofNullable(this.requestMappingTemplate);
    }

    @Import(name="responseMappingTemplate")
    private @Nullable Output<String> responseMappingTemplate;

    public Optional<Output<String>> responseMappingTemplate() {
        return Optional.ofNullable(this.responseMappingTemplate);
    }

    @Import(name="runtime")
    private @Nullable Output<FunctionRuntimeArgs> runtime;

    public Optional<Output<FunctionRuntimeArgs>> runtime() {
        return Optional.ofNullable(this.runtime);
    }

    @Import(name="syncConfig")
    private @Nullable Output<FunctionSyncConfigArgs> syncConfig;

    public Optional<Output<FunctionSyncConfigArgs>> syncConfig() {
        return Optional.ofNullable(this.syncConfig);
    }

    private FunctionArgs() {}

    private FunctionArgs(FunctionArgs $) {
        this.apiId = $.apiId;
        this.code = $.code;
        this.dataSource = $.dataSource;
        this.description = $.description;
        this.functionVersion = $.functionVersion;
        this.maxBatchSize = $.maxBatchSize;
        this.name = $.name;
        this.requestMappingTemplate = $.requestMappingTemplate;
        this.responseMappingTemplate = $.responseMappingTemplate;
        this.runtime = $.runtime;
        this.syncConfig = $.syncConfig;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FunctionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FunctionArgs $;

        public Builder() {
            $ = new FunctionArgs();
        }

        public Builder(FunctionArgs defaults) {
            $ = new FunctionArgs(Objects.requireNonNull(defaults));
        }

        public Builder apiId(Output<String> apiId) {
            $.apiId = apiId;
            return this;
        }

        public Builder apiId(String apiId) {
            return apiId(Output.of(apiId));
        }

        public Builder code(@Nullable Output<String> code) {
            $.code = code;
            return this;
        }

        public Builder code(String code) {
            return code(Output.of(code));
        }

        public Builder dataSource(Output<String> dataSource) {
            $.dataSource = dataSource;
            return this;
        }

        public Builder dataSource(String dataSource) {
            return dataSource(Output.of(dataSource));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder functionVersion(@Nullable Output<String> functionVersion) {
            $.functionVersion = functionVersion;
            return this;
        }

        public Builder functionVersion(String functionVersion) {
            return functionVersion(Output.of(functionVersion));
        }

        public Builder maxBatchSize(@Nullable Output<Integer> maxBatchSize) {
            $.maxBatchSize = maxBatchSize;
            return this;
        }

        public Builder maxBatchSize(Integer maxBatchSize) {
            return maxBatchSize(Output.of(maxBatchSize));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder requestMappingTemplate(@Nullable Output<String> requestMappingTemplate) {
            $.requestMappingTemplate = requestMappingTemplate;
            return this;
        }

        public Builder requestMappingTemplate(String requestMappingTemplate) {
            return requestMappingTemplate(Output.of(requestMappingTemplate));
        }

        public Builder responseMappingTemplate(@Nullable Output<String> responseMappingTemplate) {
            $.responseMappingTemplate = responseMappingTemplate;
            return this;
        }

        public Builder responseMappingTemplate(String responseMappingTemplate) {
            return responseMappingTemplate(Output.of(responseMappingTemplate));
        }

        public Builder runtime(@Nullable Output<FunctionRuntimeArgs> runtime) {
            $.runtime = runtime;
            return this;
        }

        public Builder runtime(FunctionRuntimeArgs runtime) {
            return runtime(Output.of(runtime));
        }

        public Builder syncConfig(@Nullable Output<FunctionSyncConfigArgs> syncConfig) {
            $.syncConfig = syncConfig;
            return this;
        }

        public Builder syncConfig(FunctionSyncConfigArgs syncConfig) {
            return syncConfig(Output.of(syncConfig));
        }

        public FunctionArgs build() {
            $.apiId = Objects.requireNonNull($.apiId, "expected parameter 'apiId' to be non-null");
            $.dataSource = Objects.requireNonNull($.dataSource, "expected parameter 'dataSource' to be non-null");
            return $;
        }
    }

}
