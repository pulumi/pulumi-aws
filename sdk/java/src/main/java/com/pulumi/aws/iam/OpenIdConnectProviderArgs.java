// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.iam;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OpenIdConnectProviderArgs extends com.pulumi.resources.ResourceArgs {

    public static final OpenIdConnectProviderArgs Empty = new OpenIdConnectProviderArgs();

    /**
     * List of client IDs (audiences) that identify the application registered with the OpenID Connect provider. This is the value sent as the `client_id` parameter in OAuth requests.
     * 
     */
    @Import(name="clientIdLists", required=true)
    private Output<List<String>> clientIdLists;

    /**
     * @return List of client IDs (audiences) that identify the application registered with the OpenID Connect provider. This is the value sent as the `client_id` parameter in OAuth requests.
     * 
     */
    public Output<List<String>> clientIdLists() {
        return this.clientIdLists;
    }

    /**
     * Map of resource tags for the IAM OIDC provider. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Map of resource tags for the IAM OIDC provider. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="thumbprintLists")
    private @Nullable Output<List<String>> thumbprintLists;

    public Optional<Output<List<String>>> thumbprintLists() {
        return Optional.ofNullable(this.thumbprintLists);
    }

    /**
     * URL of the identity provider, corresponding to the `iss` claim.
     * 
     */
    @Import(name="url", required=true)
    private Output<String> url;

    /**
     * @return URL of the identity provider, corresponding to the `iss` claim.
     * 
     */
    public Output<String> url() {
        return this.url;
    }

    private OpenIdConnectProviderArgs() {}

    private OpenIdConnectProviderArgs(OpenIdConnectProviderArgs $) {
        this.clientIdLists = $.clientIdLists;
        this.tags = $.tags;
        this.thumbprintLists = $.thumbprintLists;
        this.url = $.url;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OpenIdConnectProviderArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OpenIdConnectProviderArgs $;

        public Builder() {
            $ = new OpenIdConnectProviderArgs();
        }

        public Builder(OpenIdConnectProviderArgs defaults) {
            $ = new OpenIdConnectProviderArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clientIdLists List of client IDs (audiences) that identify the application registered with the OpenID Connect provider. This is the value sent as the `client_id` parameter in OAuth requests.
         * 
         * @return builder
         * 
         */
        public Builder clientIdLists(Output<List<String>> clientIdLists) {
            $.clientIdLists = clientIdLists;
            return this;
        }

        /**
         * @param clientIdLists List of client IDs (audiences) that identify the application registered with the OpenID Connect provider. This is the value sent as the `client_id` parameter in OAuth requests.
         * 
         * @return builder
         * 
         */
        public Builder clientIdLists(List<String> clientIdLists) {
            return clientIdLists(Output.of(clientIdLists));
        }

        /**
         * @param clientIdLists List of client IDs (audiences) that identify the application registered with the OpenID Connect provider. This is the value sent as the `client_id` parameter in OAuth requests.
         * 
         * @return builder
         * 
         */
        public Builder clientIdLists(String... clientIdLists) {
            return clientIdLists(List.of(clientIdLists));
        }

        /**
         * @param tags Map of resource tags for the IAM OIDC provider. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Map of resource tags for the IAM OIDC provider. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder thumbprintLists(@Nullable Output<List<String>> thumbprintLists) {
            $.thumbprintLists = thumbprintLists;
            return this;
        }

        public Builder thumbprintLists(List<String> thumbprintLists) {
            return thumbprintLists(Output.of(thumbprintLists));
        }

        public Builder thumbprintLists(String... thumbprintLists) {
            return thumbprintLists(List.of(thumbprintLists));
        }

        /**
         * @param url URL of the identity provider, corresponding to the `iss` claim.
         * 
         * @return builder
         * 
         */
        public Builder url(Output<String> url) {
            $.url = url;
            return this;
        }

        /**
         * @param url URL of the identity provider, corresponding to the `iss` claim.
         * 
         * @return builder
         * 
         */
        public Builder url(String url) {
            return url(Output.of(url));
        }

        public OpenIdConnectProviderArgs build() {
            if ($.clientIdLists == null) {
                throw new MissingRequiredPropertyException("OpenIdConnectProviderArgs", "clientIdLists");
            }
            if ($.url == null) {
                throw new MissingRequiredPropertyException("OpenIdConnectProviderArgs", "url");
            }
            return $;
        }
    }

}
