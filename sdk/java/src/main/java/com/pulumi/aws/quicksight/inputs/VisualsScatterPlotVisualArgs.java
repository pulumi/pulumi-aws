// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.inputs;

import com.pulumi.aws.quicksight.inputs.ColumnHierarchiesArgs;
import com.pulumi.aws.quicksight.inputs.SubtitleArgs;
import com.pulumi.aws.quicksight.inputs.VisualCustomActionsArgs;
import com.pulumi.aws.quicksight.inputs.VisualsScatterPlotVisualChartConfigurationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VisualsScatterPlotVisualArgs extends com.pulumi.resources.ResourceArgs {

    public static final VisualsScatterPlotVisualArgs Empty = new VisualsScatterPlotVisualArgs();

    /**
     * List of IAM actions to grant or revoke permissions on.
     * 
     */
    @Import(name="actions")
    private @Nullable Output<List<VisualCustomActionsArgs>> actions;

    /**
     * @return List of IAM actions to grant or revoke permissions on.
     * 
     */
    public Optional<Output<List<VisualCustomActionsArgs>>> actions() {
        return Optional.ofNullable(this.actions);
    }

    @Import(name="chartConfiguration")
    private @Nullable Output<VisualsScatterPlotVisualChartConfigurationArgs> chartConfiguration;

    public Optional<Output<VisualsScatterPlotVisualChartConfigurationArgs>> chartConfiguration() {
        return Optional.ofNullable(this.chartConfiguration);
    }

    @Import(name="columnHierarchies")
    private @Nullable Output<List<ColumnHierarchiesArgs>> columnHierarchies;

    public Optional<Output<List<ColumnHierarchiesArgs>>> columnHierarchies() {
        return Optional.ofNullable(this.columnHierarchies);
    }

    @Import(name="subtitle")
    private @Nullable Output<SubtitleArgs> subtitle;

    public Optional<Output<SubtitleArgs>> subtitle() {
        return Optional.ofNullable(this.subtitle);
    }

    @Import(name="title")
    private @Nullable Output<SubtitleArgs> title;

    public Optional<Output<SubtitleArgs>> title() {
        return Optional.ofNullable(this.title);
    }

    @Import(name="visualId", required=true)
    private Output<String> visualId;

    public Output<String> visualId() {
        return this.visualId;
    }

    private VisualsScatterPlotVisualArgs() {}

    private VisualsScatterPlotVisualArgs(VisualsScatterPlotVisualArgs $) {
        this.actions = $.actions;
        this.chartConfiguration = $.chartConfiguration;
        this.columnHierarchies = $.columnHierarchies;
        this.subtitle = $.subtitle;
        this.title = $.title;
        this.visualId = $.visualId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VisualsScatterPlotVisualArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VisualsScatterPlotVisualArgs $;

        public Builder() {
            $ = new VisualsScatterPlotVisualArgs();
        }

        public Builder(VisualsScatterPlotVisualArgs defaults) {
            $ = new VisualsScatterPlotVisualArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param actions List of IAM actions to grant or revoke permissions on.
         * 
         * @return builder
         * 
         */
        public Builder actions(@Nullable Output<List<VisualCustomActionsArgs>> actions) {
            $.actions = actions;
            return this;
        }

        /**
         * @param actions List of IAM actions to grant or revoke permissions on.
         * 
         * @return builder
         * 
         */
        public Builder actions(List<VisualCustomActionsArgs> actions) {
            return actions(Output.of(actions));
        }

        /**
         * @param actions List of IAM actions to grant or revoke permissions on.
         * 
         * @return builder
         * 
         */
        public Builder actions(VisualCustomActionsArgs... actions) {
            return actions(List.of(actions));
        }

        public Builder chartConfiguration(@Nullable Output<VisualsScatterPlotVisualChartConfigurationArgs> chartConfiguration) {
            $.chartConfiguration = chartConfiguration;
            return this;
        }

        public Builder chartConfiguration(VisualsScatterPlotVisualChartConfigurationArgs chartConfiguration) {
            return chartConfiguration(Output.of(chartConfiguration));
        }

        public Builder columnHierarchies(@Nullable Output<List<ColumnHierarchiesArgs>> columnHierarchies) {
            $.columnHierarchies = columnHierarchies;
            return this;
        }

        public Builder columnHierarchies(List<ColumnHierarchiesArgs> columnHierarchies) {
            return columnHierarchies(Output.of(columnHierarchies));
        }

        public Builder columnHierarchies(ColumnHierarchiesArgs... columnHierarchies) {
            return columnHierarchies(List.of(columnHierarchies));
        }

        public Builder subtitle(@Nullable Output<SubtitleArgs> subtitle) {
            $.subtitle = subtitle;
            return this;
        }

        public Builder subtitle(SubtitleArgs subtitle) {
            return subtitle(Output.of(subtitle));
        }

        public Builder title(@Nullable Output<SubtitleArgs> title) {
            $.title = title;
            return this;
        }

        public Builder title(SubtitleArgs title) {
            return title(Output.of(title));
        }

        public Builder visualId(Output<String> visualId) {
            $.visualId = visualId;
            return this;
        }

        public Builder visualId(String visualId) {
            return visualId(Output.of(visualId));
        }

        public VisualsScatterPlotVisualArgs build() {
            if ($.visualId == null) {
                throw new MissingRequiredPropertyException("VisualsScatterPlotVisualArgs", "visualId");
            }
            return $;
        }
    }

}
