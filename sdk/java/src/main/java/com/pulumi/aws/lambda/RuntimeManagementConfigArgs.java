// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.lambda;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RuntimeManagementConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final RuntimeManagementConfigArgs Empty = new RuntimeManagementConfigArgs();

    /**
     * Name or ARN of the Lambda function.
     * 
     * The following arguments are optional:
     * 
     */
    @Import(name="functionName", required=true)
    private Output<String> functionName;

    /**
     * @return Name or ARN of the Lambda function.
     * 
     * The following arguments are optional:
     * 
     */
    public Output<String> functionName() {
        return this.functionName;
    }

    /**
     * Version of the function. This can be `$LATEST` or a published version number. If omitted, this resource will manage the runtime configuration for `$LATEST`.
     * 
     */
    @Import(name="qualifier")
    private @Nullable Output<String> qualifier;

    /**
     * @return Version of the function. This can be `$LATEST` or a published version number. If omitted, this resource will manage the runtime configuration for `$LATEST`.
     * 
     */
    public Optional<Output<String>> qualifier() {
        return Optional.ofNullable(this.qualifier);
    }

    /**
     * ARN of the runtime version. Only required when `update_runtime_on` is `Manual`.
     * 
     */
    @Import(name="runtimeVersionArn")
    private @Nullable Output<String> runtimeVersionArn;

    /**
     * @return ARN of the runtime version. Only required when `update_runtime_on` is `Manual`.
     * 
     */
    public Optional<Output<String>> runtimeVersionArn() {
        return Optional.ofNullable(this.runtimeVersionArn);
    }

    /**
     * Runtime update mode. Valid values are `Auto`, `FunctionUpdate`, and `Manual`. When a function is created, the default mode is `Auto`.
     * 
     */
    @Import(name="updateRuntimeOn")
    private @Nullable Output<String> updateRuntimeOn;

    /**
     * @return Runtime update mode. Valid values are `Auto`, `FunctionUpdate`, and `Manual`. When a function is created, the default mode is `Auto`.
     * 
     */
    public Optional<Output<String>> updateRuntimeOn() {
        return Optional.ofNullable(this.updateRuntimeOn);
    }

    private RuntimeManagementConfigArgs() {}

    private RuntimeManagementConfigArgs(RuntimeManagementConfigArgs $) {
        this.functionName = $.functionName;
        this.qualifier = $.qualifier;
        this.runtimeVersionArn = $.runtimeVersionArn;
        this.updateRuntimeOn = $.updateRuntimeOn;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RuntimeManagementConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RuntimeManagementConfigArgs $;

        public Builder() {
            $ = new RuntimeManagementConfigArgs();
        }

        public Builder(RuntimeManagementConfigArgs defaults) {
            $ = new RuntimeManagementConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param functionName Name or ARN of the Lambda function.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder functionName(Output<String> functionName) {
            $.functionName = functionName;
            return this;
        }

        /**
         * @param functionName Name or ARN of the Lambda function.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder functionName(String functionName) {
            return functionName(Output.of(functionName));
        }

        /**
         * @param qualifier Version of the function. This can be `$LATEST` or a published version number. If omitted, this resource will manage the runtime configuration for `$LATEST`.
         * 
         * @return builder
         * 
         */
        public Builder qualifier(@Nullable Output<String> qualifier) {
            $.qualifier = qualifier;
            return this;
        }

        /**
         * @param qualifier Version of the function. This can be `$LATEST` or a published version number. If omitted, this resource will manage the runtime configuration for `$LATEST`.
         * 
         * @return builder
         * 
         */
        public Builder qualifier(String qualifier) {
            return qualifier(Output.of(qualifier));
        }

        /**
         * @param runtimeVersionArn ARN of the runtime version. Only required when `update_runtime_on` is `Manual`.
         * 
         * @return builder
         * 
         */
        public Builder runtimeVersionArn(@Nullable Output<String> runtimeVersionArn) {
            $.runtimeVersionArn = runtimeVersionArn;
            return this;
        }

        /**
         * @param runtimeVersionArn ARN of the runtime version. Only required when `update_runtime_on` is `Manual`.
         * 
         * @return builder
         * 
         */
        public Builder runtimeVersionArn(String runtimeVersionArn) {
            return runtimeVersionArn(Output.of(runtimeVersionArn));
        }

        /**
         * @param updateRuntimeOn Runtime update mode. Valid values are `Auto`, `FunctionUpdate`, and `Manual`. When a function is created, the default mode is `Auto`.
         * 
         * @return builder
         * 
         */
        public Builder updateRuntimeOn(@Nullable Output<String> updateRuntimeOn) {
            $.updateRuntimeOn = updateRuntimeOn;
            return this;
        }

        /**
         * @param updateRuntimeOn Runtime update mode. Valid values are `Auto`, `FunctionUpdate`, and `Manual`. When a function is created, the default mode is `Auto`.
         * 
         * @return builder
         * 
         */
        public Builder updateRuntimeOn(String updateRuntimeOn) {
            return updateRuntimeOn(Output.of(updateRuntimeOn));
        }

        public RuntimeManagementConfigArgs build() {
            if ($.functionName == null) {
                throw new MissingRequiredPropertyException("RuntimeManagementConfigArgs", "functionName");
            }
            return $;
        }
    }

}
