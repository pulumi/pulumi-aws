// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.amplify;

import com.pulumi.aws.amplify.inputs.DomainAssociationSubDomainArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DomainAssociationArgs extends com.pulumi.resources.ResourceArgs {

    public static final DomainAssociationArgs Empty = new DomainAssociationArgs();

    /**
     * Unique ID for an Amplify app.
     * 
     */
    @Import(name="appId", required=true)
    private Output<String> appId;

    /**
     * @return Unique ID for an Amplify app.
     * 
     */
    public Output<String> appId() {
        return this.appId;
    }

    /**
     * Domain name for the domain association.
     * 
     */
    @Import(name="domainName", required=true)
    private Output<String> domainName;

    /**
     * @return Domain name for the domain association.
     * 
     */
    public Output<String> domainName() {
        return this.domainName;
    }

    /**
     * Enables the automated creation of subdomains for branches.
     * 
     */
    @Import(name="enableAutoSubDomain")
    private @Nullable Output<Boolean> enableAutoSubDomain;

    /**
     * @return Enables the automated creation of subdomains for branches.
     * 
     */
    public Optional<Output<Boolean>> enableAutoSubDomain() {
        return Optional.ofNullable(this.enableAutoSubDomain);
    }

    /**
     * Setting for the subdomain. Documented below.
     * 
     */
    @Import(name="subDomains", required=true)
    private Output<List<DomainAssociationSubDomainArgs>> subDomains;

    /**
     * @return Setting for the subdomain. Documented below.
     * 
     */
    public Output<List<DomainAssociationSubDomainArgs>> subDomains() {
        return this.subDomains;
    }

    /**
     * If enabled, the resource will wait for the domain association status to change to `PENDING_DEPLOYMENT` or `AVAILABLE`. Setting this to `false` will skip the process. Default: `true`.
     * 
     */
    @Import(name="waitForVerification")
    private @Nullable Output<Boolean> waitForVerification;

    /**
     * @return If enabled, the resource will wait for the domain association status to change to `PENDING_DEPLOYMENT` or `AVAILABLE`. Setting this to `false` will skip the process. Default: `true`.
     * 
     */
    public Optional<Output<Boolean>> waitForVerification() {
        return Optional.ofNullable(this.waitForVerification);
    }

    private DomainAssociationArgs() {}

    private DomainAssociationArgs(DomainAssociationArgs $) {
        this.appId = $.appId;
        this.domainName = $.domainName;
        this.enableAutoSubDomain = $.enableAutoSubDomain;
        this.subDomains = $.subDomains;
        this.waitForVerification = $.waitForVerification;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DomainAssociationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DomainAssociationArgs $;

        public Builder() {
            $ = new DomainAssociationArgs();
        }

        public Builder(DomainAssociationArgs defaults) {
            $ = new DomainAssociationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param appId Unique ID for an Amplify app.
         * 
         * @return builder
         * 
         */
        public Builder appId(Output<String> appId) {
            $.appId = appId;
            return this;
        }

        /**
         * @param appId Unique ID for an Amplify app.
         * 
         * @return builder
         * 
         */
        public Builder appId(String appId) {
            return appId(Output.of(appId));
        }

        /**
         * @param domainName Domain name for the domain association.
         * 
         * @return builder
         * 
         */
        public Builder domainName(Output<String> domainName) {
            $.domainName = domainName;
            return this;
        }

        /**
         * @param domainName Domain name for the domain association.
         * 
         * @return builder
         * 
         */
        public Builder domainName(String domainName) {
            return domainName(Output.of(domainName));
        }

        /**
         * @param enableAutoSubDomain Enables the automated creation of subdomains for branches.
         * 
         * @return builder
         * 
         */
        public Builder enableAutoSubDomain(@Nullable Output<Boolean> enableAutoSubDomain) {
            $.enableAutoSubDomain = enableAutoSubDomain;
            return this;
        }

        /**
         * @param enableAutoSubDomain Enables the automated creation of subdomains for branches.
         * 
         * @return builder
         * 
         */
        public Builder enableAutoSubDomain(Boolean enableAutoSubDomain) {
            return enableAutoSubDomain(Output.of(enableAutoSubDomain));
        }

        /**
         * @param subDomains Setting for the subdomain. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder subDomains(Output<List<DomainAssociationSubDomainArgs>> subDomains) {
            $.subDomains = subDomains;
            return this;
        }

        /**
         * @param subDomains Setting for the subdomain. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder subDomains(List<DomainAssociationSubDomainArgs> subDomains) {
            return subDomains(Output.of(subDomains));
        }

        /**
         * @param subDomains Setting for the subdomain. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder subDomains(DomainAssociationSubDomainArgs... subDomains) {
            return subDomains(List.of(subDomains));
        }

        /**
         * @param waitForVerification If enabled, the resource will wait for the domain association status to change to `PENDING_DEPLOYMENT` or `AVAILABLE`. Setting this to `false` will skip the process. Default: `true`.
         * 
         * @return builder
         * 
         */
        public Builder waitForVerification(@Nullable Output<Boolean> waitForVerification) {
            $.waitForVerification = waitForVerification;
            return this;
        }

        /**
         * @param waitForVerification If enabled, the resource will wait for the domain association status to change to `PENDING_DEPLOYMENT` or `AVAILABLE`. Setting this to `false` will skip the process. Default: `true`.
         * 
         * @return builder
         * 
         */
        public Builder waitForVerification(Boolean waitForVerification) {
            return waitForVerification(Output.of(waitForVerification));
        }

        public DomainAssociationArgs build() {
            if ($.appId == null) {
                throw new MissingRequiredPropertyException("DomainAssociationArgs", "appId");
            }
            if ($.domainName == null) {
                throw new MissingRequiredPropertyException("DomainAssociationArgs", "domainName");
            }
            if ($.subDomains == null) {
                throw new MissingRequiredPropertyException("DomainAssociationArgs", "subDomains");
            }
            return $;
        }
    }

}
