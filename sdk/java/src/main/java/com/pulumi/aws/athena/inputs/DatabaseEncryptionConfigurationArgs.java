// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.athena.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DatabaseEncryptionConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final DatabaseEncryptionConfigurationArgs Empty = new DatabaseEncryptionConfigurationArgs();

    /**
     * Type of key; one of `SSE_S3`, `SSE_KMS`, `CSE_KMS`
     * 
     */
    @Import(name="encryptionOption", required=true)
    private Output<String> encryptionOption;

    /**
     * @return Type of key; one of `SSE_S3`, `SSE_KMS`, `CSE_KMS`
     * 
     */
    public Output<String> encryptionOption() {
        return this.encryptionOption;
    }

    /**
     * KMS key ARN or ID; required for key types `SSE_KMS` and `CSE_KMS`.
     * 
     */
    @Import(name="kmsKey")
    private @Nullable Output<String> kmsKey;

    /**
     * @return KMS key ARN or ID; required for key types `SSE_KMS` and `CSE_KMS`.
     * 
     */
    public Optional<Output<String>> kmsKey() {
        return Optional.ofNullable(this.kmsKey);
    }

    private DatabaseEncryptionConfigurationArgs() {}

    private DatabaseEncryptionConfigurationArgs(DatabaseEncryptionConfigurationArgs $) {
        this.encryptionOption = $.encryptionOption;
        this.kmsKey = $.kmsKey;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatabaseEncryptionConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatabaseEncryptionConfigurationArgs $;

        public Builder() {
            $ = new DatabaseEncryptionConfigurationArgs();
        }

        public Builder(DatabaseEncryptionConfigurationArgs defaults) {
            $ = new DatabaseEncryptionConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param encryptionOption Type of key; one of `SSE_S3`, `SSE_KMS`, `CSE_KMS`
         * 
         * @return builder
         * 
         */
        public Builder encryptionOption(Output<String> encryptionOption) {
            $.encryptionOption = encryptionOption;
            return this;
        }

        /**
         * @param encryptionOption Type of key; one of `SSE_S3`, `SSE_KMS`, `CSE_KMS`
         * 
         * @return builder
         * 
         */
        public Builder encryptionOption(String encryptionOption) {
            return encryptionOption(Output.of(encryptionOption));
        }

        /**
         * @param kmsKey KMS key ARN or ID; required for key types `SSE_KMS` and `CSE_KMS`.
         * 
         * @return builder
         * 
         */
        public Builder kmsKey(@Nullable Output<String> kmsKey) {
            $.kmsKey = kmsKey;
            return this;
        }

        /**
         * @param kmsKey KMS key ARN or ID; required for key types `SSE_KMS` and `CSE_KMS`.
         * 
         * @return builder
         * 
         */
        public Builder kmsKey(String kmsKey) {
            return kmsKey(Output.of(kmsKey));
        }

        public DatabaseEncryptionConfigurationArgs build() {
            if ($.encryptionOption == null) {
                throw new MissingRequiredPropertyException("DatabaseEncryptionConfigurationArgs", "encryptionOption");
            }
            return $;
        }
    }

}
