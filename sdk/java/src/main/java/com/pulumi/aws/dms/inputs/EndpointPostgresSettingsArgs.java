// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.dms.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EndpointPostgresSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final EndpointPostgresSettingsArgs Empty = new EndpointPostgresSettingsArgs();

    /**
     * For use with change data capture (CDC) only, this attribute has AWS DMS bypass foreign keys and user triggers to reduce the time it takes to bulk load data.
     * 
     */
    @Import(name="afterConnectScript")
    private @Nullable Output<String> afterConnectScript;

    /**
     * @return For use with change data capture (CDC) only, this attribute has AWS DMS bypass foreign keys and user triggers to reduce the time it takes to bulk load data.
     * 
     */
    public Optional<Output<String>> afterConnectScript() {
        return Optional.ofNullable(this.afterConnectScript);
    }

    /**
     * The Babelfish for Aurora PostgreSQL database name for the endpoint.
     * 
     */
    @Import(name="babelfishDatabaseName")
    private @Nullable Output<String> babelfishDatabaseName;

    /**
     * @return The Babelfish for Aurora PostgreSQL database name for the endpoint.
     * 
     */
    public Optional<Output<String>> babelfishDatabaseName() {
        return Optional.ofNullable(this.babelfishDatabaseName);
    }

    /**
     * To capture DDL events, AWS DMS creates various artifacts in the PostgreSQL database when the task starts.
     * 
     */
    @Import(name="captureDdls")
    private @Nullable Output<Boolean> captureDdls;

    /**
     * @return To capture DDL events, AWS DMS creates various artifacts in the PostgreSQL database when the task starts.
     * 
     */
    public Optional<Output<Boolean>> captureDdls() {
        return Optional.ofNullable(this.captureDdls);
    }

    /**
     * Specifies the default behavior of the replication&#39;s handling of PostgreSQL- compatible endpoints that require some additional configuration, such as Babelfish endpoints.
     * 
     */
    @Import(name="databaseMode")
    private @Nullable Output<String> databaseMode;

    /**
     * @return Specifies the default behavior of the replication&#39;s handling of PostgreSQL- compatible endpoints that require some additional configuration, such as Babelfish endpoints.
     * 
     */
    public Optional<Output<String>> databaseMode() {
        return Optional.ofNullable(this.databaseMode);
    }

    /**
     * Sets the schema in which the operational DDL database artifacts are created. Default is `public`.
     * 
     */
    @Import(name="ddlArtifactsSchema")
    private @Nullable Output<String> ddlArtifactsSchema;

    /**
     * @return Sets the schema in which the operational DDL database artifacts are created. Default is `public`.
     * 
     */
    public Optional<Output<String>> ddlArtifactsSchema() {
        return Optional.ofNullable(this.ddlArtifactsSchema);
    }

    /**
     * Sets the client statement timeout for the PostgreSQL instance, in seconds. Default value is `60`.
     * 
     */
    @Import(name="executeTimeout")
    private @Nullable Output<Integer> executeTimeout;

    /**
     * @return Sets the client statement timeout for the PostgreSQL instance, in seconds. Default value is `60`.
     * 
     */
    public Optional<Output<Integer>> executeTimeout() {
        return Optional.ofNullable(this.executeTimeout);
    }

    /**
     * When set to `true`, this value causes a task to fail if the actual size of a LOB column is greater than the specified `LobMaxSize`. Default is `false`.
     * 
     */
    @Import(name="failTasksOnLobTruncation")
    private @Nullable Output<Boolean> failTasksOnLobTruncation;

    /**
     * @return When set to `true`, this value causes a task to fail if the actual size of a LOB column is greater than the specified `LobMaxSize`. Default is `false`.
     * 
     */
    public Optional<Output<Boolean>> failTasksOnLobTruncation() {
        return Optional.ofNullable(this.failTasksOnLobTruncation);
    }

    /**
     * The write-ahead log (WAL) heartbeat feature mimics a dummy transaction. By doing this, it prevents idle logical replication slots from holding onto old WAL logs, which can result in storage full situations on the source.
     * 
     */
    @Import(name="heartbeatEnable")
    private @Nullable Output<Boolean> heartbeatEnable;

    /**
     * @return The write-ahead log (WAL) heartbeat feature mimics a dummy transaction. By doing this, it prevents idle logical replication slots from holding onto old WAL logs, which can result in storage full situations on the source.
     * 
     */
    public Optional<Output<Boolean>> heartbeatEnable() {
        return Optional.ofNullable(this.heartbeatEnable);
    }

    /**
     * Sets the WAL heartbeat frequency (in minutes). Default value is `5`.
     * 
     */
    @Import(name="heartbeatFrequency")
    private @Nullable Output<Integer> heartbeatFrequency;

    /**
     * @return Sets the WAL heartbeat frequency (in minutes). Default value is `5`.
     * 
     */
    public Optional<Output<Integer>> heartbeatFrequency() {
        return Optional.ofNullable(this.heartbeatFrequency);
    }

    /**
     * Sets the schema in which the heartbeat artifacts are created. Default value is `public`.
     * 
     */
    @Import(name="heartbeatSchema")
    private @Nullable Output<String> heartbeatSchema;

    /**
     * @return Sets the schema in which the heartbeat artifacts are created. Default value is `public`.
     * 
     */
    public Optional<Output<String>> heartbeatSchema() {
        return Optional.ofNullable(this.heartbeatSchema);
    }

    /**
     * You can use PostgreSQL endpoint settings to map a boolean as a boolean from your PostgreSQL source to a Amazon Redshift target. Default value is `false`.
     * 
     */
    @Import(name="mapBooleanAsBoolean")
    private @Nullable Output<Boolean> mapBooleanAsBoolean;

    /**
     * @return You can use PostgreSQL endpoint settings to map a boolean as a boolean from your PostgreSQL source to a Amazon Redshift target. Default value is `false`.
     * 
     */
    public Optional<Output<Boolean>> mapBooleanAsBoolean() {
        return Optional.ofNullable(this.mapBooleanAsBoolean);
    }

    /**
     * Optional When true, DMS migrates JSONB values as CLOB.
     * 
     */
    @Import(name="mapJsonbAsClob")
    private @Nullable Output<Boolean> mapJsonbAsClob;

    /**
     * @return Optional When true, DMS migrates JSONB values as CLOB.
     * 
     */
    public Optional<Output<Boolean>> mapJsonbAsClob() {
        return Optional.ofNullable(this.mapJsonbAsClob);
    }

    /**
     * Optional When true, DMS migrates LONG values as VARCHAR.
     * 
     */
    @Import(name="mapLongVarcharAs")
    private @Nullable Output<String> mapLongVarcharAs;

    /**
     * @return Optional When true, DMS migrates LONG values as VARCHAR.
     * 
     */
    public Optional<Output<String>> mapLongVarcharAs() {
        return Optional.ofNullable(this.mapLongVarcharAs);
    }

    /**
     * Specifies the maximum size (in KB) of any .csv file used to transfer data to PostgreSQL. Default is `32,768 KB`.
     * 
     */
    @Import(name="maxFileSize")
    private @Nullable Output<Integer> maxFileSize;

    /**
     * @return Specifies the maximum size (in KB) of any .csv file used to transfer data to PostgreSQL. Default is `32,768 KB`.
     * 
     */
    public Optional<Output<Integer>> maxFileSize() {
        return Optional.ofNullable(this.maxFileSize);
    }

    /**
     * Specifies the plugin to use to create a replication slot. Valid values: `pglogical`, `test_decoding`.
     * 
     */
    @Import(name="pluginName")
    private @Nullable Output<String> pluginName;

    /**
     * @return Specifies the plugin to use to create a replication slot. Valid values: `pglogical`, `test_decoding`.
     * 
     */
    public Optional<Output<String>> pluginName() {
        return Optional.ofNullable(this.pluginName);
    }

    /**
     * Sets the name of a previously created logical replication slot for a CDC load of the PostgreSQL source instance.
     * 
     */
    @Import(name="slotName")
    private @Nullable Output<String> slotName;

    /**
     * @return Sets the name of a previously created logical replication slot for a CDC load of the PostgreSQL source instance.
     * 
     */
    public Optional<Output<String>> slotName() {
        return Optional.ofNullable(this.slotName);
    }

    private EndpointPostgresSettingsArgs() {}

    private EndpointPostgresSettingsArgs(EndpointPostgresSettingsArgs $) {
        this.afterConnectScript = $.afterConnectScript;
        this.babelfishDatabaseName = $.babelfishDatabaseName;
        this.captureDdls = $.captureDdls;
        this.databaseMode = $.databaseMode;
        this.ddlArtifactsSchema = $.ddlArtifactsSchema;
        this.executeTimeout = $.executeTimeout;
        this.failTasksOnLobTruncation = $.failTasksOnLobTruncation;
        this.heartbeatEnable = $.heartbeatEnable;
        this.heartbeatFrequency = $.heartbeatFrequency;
        this.heartbeatSchema = $.heartbeatSchema;
        this.mapBooleanAsBoolean = $.mapBooleanAsBoolean;
        this.mapJsonbAsClob = $.mapJsonbAsClob;
        this.mapLongVarcharAs = $.mapLongVarcharAs;
        this.maxFileSize = $.maxFileSize;
        this.pluginName = $.pluginName;
        this.slotName = $.slotName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EndpointPostgresSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EndpointPostgresSettingsArgs $;

        public Builder() {
            $ = new EndpointPostgresSettingsArgs();
        }

        public Builder(EndpointPostgresSettingsArgs defaults) {
            $ = new EndpointPostgresSettingsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param afterConnectScript For use with change data capture (CDC) only, this attribute has AWS DMS bypass foreign keys and user triggers to reduce the time it takes to bulk load data.
         * 
         * @return builder
         * 
         */
        public Builder afterConnectScript(@Nullable Output<String> afterConnectScript) {
            $.afterConnectScript = afterConnectScript;
            return this;
        }

        /**
         * @param afterConnectScript For use with change data capture (CDC) only, this attribute has AWS DMS bypass foreign keys and user triggers to reduce the time it takes to bulk load data.
         * 
         * @return builder
         * 
         */
        public Builder afterConnectScript(String afterConnectScript) {
            return afterConnectScript(Output.of(afterConnectScript));
        }

        /**
         * @param babelfishDatabaseName The Babelfish for Aurora PostgreSQL database name for the endpoint.
         * 
         * @return builder
         * 
         */
        public Builder babelfishDatabaseName(@Nullable Output<String> babelfishDatabaseName) {
            $.babelfishDatabaseName = babelfishDatabaseName;
            return this;
        }

        /**
         * @param babelfishDatabaseName The Babelfish for Aurora PostgreSQL database name for the endpoint.
         * 
         * @return builder
         * 
         */
        public Builder babelfishDatabaseName(String babelfishDatabaseName) {
            return babelfishDatabaseName(Output.of(babelfishDatabaseName));
        }

        /**
         * @param captureDdls To capture DDL events, AWS DMS creates various artifacts in the PostgreSQL database when the task starts.
         * 
         * @return builder
         * 
         */
        public Builder captureDdls(@Nullable Output<Boolean> captureDdls) {
            $.captureDdls = captureDdls;
            return this;
        }

        /**
         * @param captureDdls To capture DDL events, AWS DMS creates various artifacts in the PostgreSQL database when the task starts.
         * 
         * @return builder
         * 
         */
        public Builder captureDdls(Boolean captureDdls) {
            return captureDdls(Output.of(captureDdls));
        }

        /**
         * @param databaseMode Specifies the default behavior of the replication&#39;s handling of PostgreSQL- compatible endpoints that require some additional configuration, such as Babelfish endpoints.
         * 
         * @return builder
         * 
         */
        public Builder databaseMode(@Nullable Output<String> databaseMode) {
            $.databaseMode = databaseMode;
            return this;
        }

        /**
         * @param databaseMode Specifies the default behavior of the replication&#39;s handling of PostgreSQL- compatible endpoints that require some additional configuration, such as Babelfish endpoints.
         * 
         * @return builder
         * 
         */
        public Builder databaseMode(String databaseMode) {
            return databaseMode(Output.of(databaseMode));
        }

        /**
         * @param ddlArtifactsSchema Sets the schema in which the operational DDL database artifacts are created. Default is `public`.
         * 
         * @return builder
         * 
         */
        public Builder ddlArtifactsSchema(@Nullable Output<String> ddlArtifactsSchema) {
            $.ddlArtifactsSchema = ddlArtifactsSchema;
            return this;
        }

        /**
         * @param ddlArtifactsSchema Sets the schema in which the operational DDL database artifacts are created. Default is `public`.
         * 
         * @return builder
         * 
         */
        public Builder ddlArtifactsSchema(String ddlArtifactsSchema) {
            return ddlArtifactsSchema(Output.of(ddlArtifactsSchema));
        }

        /**
         * @param executeTimeout Sets the client statement timeout for the PostgreSQL instance, in seconds. Default value is `60`.
         * 
         * @return builder
         * 
         */
        public Builder executeTimeout(@Nullable Output<Integer> executeTimeout) {
            $.executeTimeout = executeTimeout;
            return this;
        }

        /**
         * @param executeTimeout Sets the client statement timeout for the PostgreSQL instance, in seconds. Default value is `60`.
         * 
         * @return builder
         * 
         */
        public Builder executeTimeout(Integer executeTimeout) {
            return executeTimeout(Output.of(executeTimeout));
        }

        /**
         * @param failTasksOnLobTruncation When set to `true`, this value causes a task to fail if the actual size of a LOB column is greater than the specified `LobMaxSize`. Default is `false`.
         * 
         * @return builder
         * 
         */
        public Builder failTasksOnLobTruncation(@Nullable Output<Boolean> failTasksOnLobTruncation) {
            $.failTasksOnLobTruncation = failTasksOnLobTruncation;
            return this;
        }

        /**
         * @param failTasksOnLobTruncation When set to `true`, this value causes a task to fail if the actual size of a LOB column is greater than the specified `LobMaxSize`. Default is `false`.
         * 
         * @return builder
         * 
         */
        public Builder failTasksOnLobTruncation(Boolean failTasksOnLobTruncation) {
            return failTasksOnLobTruncation(Output.of(failTasksOnLobTruncation));
        }

        /**
         * @param heartbeatEnable The write-ahead log (WAL) heartbeat feature mimics a dummy transaction. By doing this, it prevents idle logical replication slots from holding onto old WAL logs, which can result in storage full situations on the source.
         * 
         * @return builder
         * 
         */
        public Builder heartbeatEnable(@Nullable Output<Boolean> heartbeatEnable) {
            $.heartbeatEnable = heartbeatEnable;
            return this;
        }

        /**
         * @param heartbeatEnable The write-ahead log (WAL) heartbeat feature mimics a dummy transaction. By doing this, it prevents idle logical replication slots from holding onto old WAL logs, which can result in storage full situations on the source.
         * 
         * @return builder
         * 
         */
        public Builder heartbeatEnable(Boolean heartbeatEnable) {
            return heartbeatEnable(Output.of(heartbeatEnable));
        }

        /**
         * @param heartbeatFrequency Sets the WAL heartbeat frequency (in minutes). Default value is `5`.
         * 
         * @return builder
         * 
         */
        public Builder heartbeatFrequency(@Nullable Output<Integer> heartbeatFrequency) {
            $.heartbeatFrequency = heartbeatFrequency;
            return this;
        }

        /**
         * @param heartbeatFrequency Sets the WAL heartbeat frequency (in minutes). Default value is `5`.
         * 
         * @return builder
         * 
         */
        public Builder heartbeatFrequency(Integer heartbeatFrequency) {
            return heartbeatFrequency(Output.of(heartbeatFrequency));
        }

        /**
         * @param heartbeatSchema Sets the schema in which the heartbeat artifacts are created. Default value is `public`.
         * 
         * @return builder
         * 
         */
        public Builder heartbeatSchema(@Nullable Output<String> heartbeatSchema) {
            $.heartbeatSchema = heartbeatSchema;
            return this;
        }

        /**
         * @param heartbeatSchema Sets the schema in which the heartbeat artifacts are created. Default value is `public`.
         * 
         * @return builder
         * 
         */
        public Builder heartbeatSchema(String heartbeatSchema) {
            return heartbeatSchema(Output.of(heartbeatSchema));
        }

        /**
         * @param mapBooleanAsBoolean You can use PostgreSQL endpoint settings to map a boolean as a boolean from your PostgreSQL source to a Amazon Redshift target. Default value is `false`.
         * 
         * @return builder
         * 
         */
        public Builder mapBooleanAsBoolean(@Nullable Output<Boolean> mapBooleanAsBoolean) {
            $.mapBooleanAsBoolean = mapBooleanAsBoolean;
            return this;
        }

        /**
         * @param mapBooleanAsBoolean You can use PostgreSQL endpoint settings to map a boolean as a boolean from your PostgreSQL source to a Amazon Redshift target. Default value is `false`.
         * 
         * @return builder
         * 
         */
        public Builder mapBooleanAsBoolean(Boolean mapBooleanAsBoolean) {
            return mapBooleanAsBoolean(Output.of(mapBooleanAsBoolean));
        }

        /**
         * @param mapJsonbAsClob Optional When true, DMS migrates JSONB values as CLOB.
         * 
         * @return builder
         * 
         */
        public Builder mapJsonbAsClob(@Nullable Output<Boolean> mapJsonbAsClob) {
            $.mapJsonbAsClob = mapJsonbAsClob;
            return this;
        }

        /**
         * @param mapJsonbAsClob Optional When true, DMS migrates JSONB values as CLOB.
         * 
         * @return builder
         * 
         */
        public Builder mapJsonbAsClob(Boolean mapJsonbAsClob) {
            return mapJsonbAsClob(Output.of(mapJsonbAsClob));
        }

        /**
         * @param mapLongVarcharAs Optional When true, DMS migrates LONG values as VARCHAR.
         * 
         * @return builder
         * 
         */
        public Builder mapLongVarcharAs(@Nullable Output<String> mapLongVarcharAs) {
            $.mapLongVarcharAs = mapLongVarcharAs;
            return this;
        }

        /**
         * @param mapLongVarcharAs Optional When true, DMS migrates LONG values as VARCHAR.
         * 
         * @return builder
         * 
         */
        public Builder mapLongVarcharAs(String mapLongVarcharAs) {
            return mapLongVarcharAs(Output.of(mapLongVarcharAs));
        }

        /**
         * @param maxFileSize Specifies the maximum size (in KB) of any .csv file used to transfer data to PostgreSQL. Default is `32,768 KB`.
         * 
         * @return builder
         * 
         */
        public Builder maxFileSize(@Nullable Output<Integer> maxFileSize) {
            $.maxFileSize = maxFileSize;
            return this;
        }

        /**
         * @param maxFileSize Specifies the maximum size (in KB) of any .csv file used to transfer data to PostgreSQL. Default is `32,768 KB`.
         * 
         * @return builder
         * 
         */
        public Builder maxFileSize(Integer maxFileSize) {
            return maxFileSize(Output.of(maxFileSize));
        }

        /**
         * @param pluginName Specifies the plugin to use to create a replication slot. Valid values: `pglogical`, `test_decoding`.
         * 
         * @return builder
         * 
         */
        public Builder pluginName(@Nullable Output<String> pluginName) {
            $.pluginName = pluginName;
            return this;
        }

        /**
         * @param pluginName Specifies the plugin to use to create a replication slot. Valid values: `pglogical`, `test_decoding`.
         * 
         * @return builder
         * 
         */
        public Builder pluginName(String pluginName) {
            return pluginName(Output.of(pluginName));
        }

        /**
         * @param slotName Sets the name of a previously created logical replication slot for a CDC load of the PostgreSQL source instance.
         * 
         * @return builder
         * 
         */
        public Builder slotName(@Nullable Output<String> slotName) {
            $.slotName = slotName;
            return this;
        }

        /**
         * @param slotName Sets the name of a previously created logical replication slot for a CDC load of the PostgreSQL source instance.
         * 
         * @return builder
         * 
         */
        public Builder slotName(String slotName) {
            return slotName(Output.of(slotName));
        }

        public EndpointPostgresSettingsArgs build() {
            return $;
        }
    }

}
