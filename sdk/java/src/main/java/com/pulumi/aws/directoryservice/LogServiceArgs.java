// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.directoryservice;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class LogServiceArgs extends com.pulumi.resources.ResourceArgs {

    public static final LogServiceArgs Empty = new LogServiceArgs();

    /**
     * ID of directory.
     * 
     */
    @Import(name="directoryId", required=true)
    private Output<String> directoryId;

    /**
     * @return ID of directory.
     * 
     */
    public Output<String> directoryId() {
        return this.directoryId;
    }

    /**
     * Name of the cloudwatch log group to which the logs should be published. The log group should be already created and the directory service principal should be provided with required permission to create stream and publish logs. Changing this value would delete the current subscription and create a new one. A directory can only have one log subscription at a time.
     * 
     */
    @Import(name="logGroupName", required=true)
    private Output<String> logGroupName;

    /**
     * @return Name of the cloudwatch log group to which the logs should be published. The log group should be already created and the directory service principal should be provided with required permission to create stream and publish logs. Changing this value would delete the current subscription and create a new one. A directory can only have one log subscription at a time.
     * 
     */
    public Output<String> logGroupName() {
        return this.logGroupName;
    }

    private LogServiceArgs() {}

    private LogServiceArgs(LogServiceArgs $) {
        this.directoryId = $.directoryId;
        this.logGroupName = $.logGroupName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LogServiceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LogServiceArgs $;

        public Builder() {
            $ = new LogServiceArgs();
        }

        public Builder(LogServiceArgs defaults) {
            $ = new LogServiceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param directoryId ID of directory.
         * 
         * @return builder
         * 
         */
        public Builder directoryId(Output<String> directoryId) {
            $.directoryId = directoryId;
            return this;
        }

        /**
         * @param directoryId ID of directory.
         * 
         * @return builder
         * 
         */
        public Builder directoryId(String directoryId) {
            return directoryId(Output.of(directoryId));
        }

        /**
         * @param logGroupName Name of the cloudwatch log group to which the logs should be published. The log group should be already created and the directory service principal should be provided with required permission to create stream and publish logs. Changing this value would delete the current subscription and create a new one. A directory can only have one log subscription at a time.
         * 
         * @return builder
         * 
         */
        public Builder logGroupName(Output<String> logGroupName) {
            $.logGroupName = logGroupName;
            return this;
        }

        /**
         * @param logGroupName Name of the cloudwatch log group to which the logs should be published. The log group should be already created and the directory service principal should be provided with required permission to create stream and publish logs. Changing this value would delete the current subscription and create a new one. A directory can only have one log subscription at a time.
         * 
         * @return builder
         * 
         */
        public Builder logGroupName(String logGroupName) {
            return logGroupName(Output.of(logGroupName));
        }

        public LogServiceArgs build() {
            $.directoryId = Objects.requireNonNull($.directoryId, "expected parameter 'directoryId' to be non-null");
            $.logGroupName = Objects.requireNonNull($.logGroupName, "expected parameter 'logGroupName' to be non-null");
            return $;
        }
    }

}
