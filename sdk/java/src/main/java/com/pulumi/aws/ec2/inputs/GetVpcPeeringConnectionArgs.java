// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ec2.inputs;

import com.pulumi.aws.ec2.inputs.GetVpcPeeringConnectionFilterArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetVpcPeeringConnectionArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetVpcPeeringConnectionArgs Empty = new GetVpcPeeringConnectionArgs();

    /**
     * Primary CIDR block of the requester VPC of the specific VPC Peering Connection to retrieve.
     * 
     */
    @Import(name="cidrBlock")
    private @Nullable Output<String> cidrBlock;

    /**
     * @return Primary CIDR block of the requester VPC of the specific VPC Peering Connection to retrieve.
     * 
     */
    public Optional<Output<String>> cidrBlock() {
        return Optional.ofNullable(this.cidrBlock);
    }

    /**
     * Custom filter block as described below.
     * 
     */
    @Import(name="filters")
    private @Nullable Output<List<GetVpcPeeringConnectionFilterArgs>> filters;

    /**
     * @return Custom filter block as described below.
     * 
     */
    public Optional<Output<List<GetVpcPeeringConnectionFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * ID of the specific VPC Peering Connection to retrieve.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return ID of the specific VPC Peering Connection to retrieve.
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * AWS account ID of the owner of the requester VPC of the specific VPC Peering Connection to retrieve.
     * 
     */
    @Import(name="ownerId")
    private @Nullable Output<String> ownerId;

    /**
     * @return AWS account ID of the owner of the requester VPC of the specific VPC Peering Connection to retrieve.
     * 
     */
    public Optional<Output<String>> ownerId() {
        return Optional.ofNullable(this.ownerId);
    }

    /**
     * Primary CIDR block of the accepter VPC of the specific VPC Peering Connection to retrieve.
     * 
     */
    @Import(name="peerCidrBlock")
    private @Nullable Output<String> peerCidrBlock;

    /**
     * @return Primary CIDR block of the accepter VPC of the specific VPC Peering Connection to retrieve.
     * 
     */
    public Optional<Output<String>> peerCidrBlock() {
        return Optional.ofNullable(this.peerCidrBlock);
    }

    /**
     * AWS account ID of the owner of the accepter VPC of the specific VPC Peering Connection to retrieve.
     * 
     */
    @Import(name="peerOwnerId")
    private @Nullable Output<String> peerOwnerId;

    /**
     * @return AWS account ID of the owner of the accepter VPC of the specific VPC Peering Connection to retrieve.
     * 
     */
    public Optional<Output<String>> peerOwnerId() {
        return Optional.ofNullable(this.peerOwnerId);
    }

    /**
     * Region of the accepter VPC of the specific VPC Peering Connection to retrieve.
     * 
     */
    @Import(name="peerRegion")
    private @Nullable Output<String> peerRegion;

    /**
     * @return Region of the accepter VPC of the specific VPC Peering Connection to retrieve.
     * 
     */
    public Optional<Output<String>> peerRegion() {
        return Optional.ofNullable(this.peerRegion);
    }

    /**
     * ID of the accepter VPC of the specific VPC Peering Connection to retrieve.
     * 
     */
    @Import(name="peerVpcId")
    private @Nullable Output<String> peerVpcId;

    /**
     * @return ID of the accepter VPC of the specific VPC Peering Connection to retrieve.
     * 
     */
    public Optional<Output<String>> peerVpcId() {
        return Optional.ofNullable(this.peerVpcId);
    }

    /**
     * Region of the requester VPC of the specific VPC Peering Connection to retrieve.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return Region of the requester VPC of the specific VPC Peering Connection to retrieve.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * Status of the specific VPC Peering Connection to retrieve.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Status of the specific VPC Peering Connection to retrieve.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Map of tags, each pair of which must exactly match
     * a pair on the desired VPC Peering Connection.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Map of tags, each pair of which must exactly match
     * a pair on the desired VPC Peering Connection.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * ID of the requester VPC of the specific VPC Peering Connection to retrieve.
     * 
     */
    @Import(name="vpcId")
    private @Nullable Output<String> vpcId;

    /**
     * @return ID of the requester VPC of the specific VPC Peering Connection to retrieve.
     * 
     */
    public Optional<Output<String>> vpcId() {
        return Optional.ofNullable(this.vpcId);
    }

    private GetVpcPeeringConnectionArgs() {}

    private GetVpcPeeringConnectionArgs(GetVpcPeeringConnectionArgs $) {
        this.cidrBlock = $.cidrBlock;
        this.filters = $.filters;
        this.id = $.id;
        this.ownerId = $.ownerId;
        this.peerCidrBlock = $.peerCidrBlock;
        this.peerOwnerId = $.peerOwnerId;
        this.peerRegion = $.peerRegion;
        this.peerVpcId = $.peerVpcId;
        this.region = $.region;
        this.status = $.status;
        this.tags = $.tags;
        this.vpcId = $.vpcId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetVpcPeeringConnectionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetVpcPeeringConnectionArgs $;

        public Builder() {
            $ = new GetVpcPeeringConnectionArgs();
        }

        public Builder(GetVpcPeeringConnectionArgs defaults) {
            $ = new GetVpcPeeringConnectionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cidrBlock Primary CIDR block of the requester VPC of the specific VPC Peering Connection to retrieve.
         * 
         * @return builder
         * 
         */
        public Builder cidrBlock(@Nullable Output<String> cidrBlock) {
            $.cidrBlock = cidrBlock;
            return this;
        }

        /**
         * @param cidrBlock Primary CIDR block of the requester VPC of the specific VPC Peering Connection to retrieve.
         * 
         * @return builder
         * 
         */
        public Builder cidrBlock(String cidrBlock) {
            return cidrBlock(Output.of(cidrBlock));
        }

        /**
         * @param filters Custom filter block as described below.
         * 
         * @return builder
         * 
         */
        public Builder filters(@Nullable Output<List<GetVpcPeeringConnectionFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        /**
         * @param filters Custom filter block as described below.
         * 
         * @return builder
         * 
         */
        public Builder filters(List<GetVpcPeeringConnectionFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        /**
         * @param filters Custom filter block as described below.
         * 
         * @return builder
         * 
         */
        public Builder filters(GetVpcPeeringConnectionFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param id ID of the specific VPC Peering Connection to retrieve.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id ID of the specific VPC Peering Connection to retrieve.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param ownerId AWS account ID of the owner of the requester VPC of the specific VPC Peering Connection to retrieve.
         * 
         * @return builder
         * 
         */
        public Builder ownerId(@Nullable Output<String> ownerId) {
            $.ownerId = ownerId;
            return this;
        }

        /**
         * @param ownerId AWS account ID of the owner of the requester VPC of the specific VPC Peering Connection to retrieve.
         * 
         * @return builder
         * 
         */
        public Builder ownerId(String ownerId) {
            return ownerId(Output.of(ownerId));
        }

        /**
         * @param peerCidrBlock Primary CIDR block of the accepter VPC of the specific VPC Peering Connection to retrieve.
         * 
         * @return builder
         * 
         */
        public Builder peerCidrBlock(@Nullable Output<String> peerCidrBlock) {
            $.peerCidrBlock = peerCidrBlock;
            return this;
        }

        /**
         * @param peerCidrBlock Primary CIDR block of the accepter VPC of the specific VPC Peering Connection to retrieve.
         * 
         * @return builder
         * 
         */
        public Builder peerCidrBlock(String peerCidrBlock) {
            return peerCidrBlock(Output.of(peerCidrBlock));
        }

        /**
         * @param peerOwnerId AWS account ID of the owner of the accepter VPC of the specific VPC Peering Connection to retrieve.
         * 
         * @return builder
         * 
         */
        public Builder peerOwnerId(@Nullable Output<String> peerOwnerId) {
            $.peerOwnerId = peerOwnerId;
            return this;
        }

        /**
         * @param peerOwnerId AWS account ID of the owner of the accepter VPC of the specific VPC Peering Connection to retrieve.
         * 
         * @return builder
         * 
         */
        public Builder peerOwnerId(String peerOwnerId) {
            return peerOwnerId(Output.of(peerOwnerId));
        }

        /**
         * @param peerRegion Region of the accepter VPC of the specific VPC Peering Connection to retrieve.
         * 
         * @return builder
         * 
         */
        public Builder peerRegion(@Nullable Output<String> peerRegion) {
            $.peerRegion = peerRegion;
            return this;
        }

        /**
         * @param peerRegion Region of the accepter VPC of the specific VPC Peering Connection to retrieve.
         * 
         * @return builder
         * 
         */
        public Builder peerRegion(String peerRegion) {
            return peerRegion(Output.of(peerRegion));
        }

        /**
         * @param peerVpcId ID of the accepter VPC of the specific VPC Peering Connection to retrieve.
         * 
         * @return builder
         * 
         */
        public Builder peerVpcId(@Nullable Output<String> peerVpcId) {
            $.peerVpcId = peerVpcId;
            return this;
        }

        /**
         * @param peerVpcId ID of the accepter VPC of the specific VPC Peering Connection to retrieve.
         * 
         * @return builder
         * 
         */
        public Builder peerVpcId(String peerVpcId) {
            return peerVpcId(Output.of(peerVpcId));
        }

        /**
         * @param region Region of the requester VPC of the specific VPC Peering Connection to retrieve.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region Region of the requester VPC of the specific VPC Peering Connection to retrieve.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param status Status of the specific VPC Peering Connection to retrieve.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Status of the specific VPC Peering Connection to retrieve.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param tags Map of tags, each pair of which must exactly match
         * a pair on the desired VPC Peering Connection.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Map of tags, each pair of which must exactly match
         * a pair on the desired VPC Peering Connection.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param vpcId ID of the requester VPC of the specific VPC Peering Connection to retrieve.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(@Nullable Output<String> vpcId) {
            $.vpcId = vpcId;
            return this;
        }

        /**
         * @param vpcId ID of the requester VPC of the specific VPC Peering Connection to retrieve.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(String vpcId) {
            return vpcId(Output.of(vpcId));
        }

        public GetVpcPeeringConnectionArgs build() {
            return $;
        }
    }

}
