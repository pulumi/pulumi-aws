// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.vpn.outputs;

import com.pulumi.aws.vpn.outputs.GetConnectionFilter;
import com.pulumi.aws.vpn.outputs.GetConnectionRoute;
import com.pulumi.aws.vpn.outputs.GetConnectionVgwTelemetry;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class GetConnectionResult {
    /**
     * @return Category of the VPN connection. A value of VPN indicates an AWS VPN connection. A value of VPN-Classic indicates an AWS Classic VPN connection.
     * 
     */
    private String category;
    /**
     * @return ARN of the core network.
     * 
     */
    private String coreNetworkArn;
    /**
     * @return ARN of the core network attachment.
     * 
     */
    private String coreNetworkAttachmentArn;
    /**
     * @return Configuration information for the VPN connection&#39;s customer gateway (in the native XML format).
     * 
     */
    private String customerGatewayConfiguration;
    /**
     * @return ID of the customer gateway at your end of the VPN connection.
     * 
     */
    private String customerGatewayId;
    private @Nullable List<GetConnectionFilter> filters;
    /**
     * @return Current state of the gateway association.
     * 
     */
    private String gatewayAssociationState;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return (ARN) of the Secrets Manager secret storing the pre-shared key(s) for the VPN connection.
     * 
     */
    private String preSharedKeyArn;
    private String region;
    /**
     * @return List of static routes associated with the VPN connection.
     * 
     */
    private List<GetConnectionRoute> routes;
    /**
     * @return Current state of the VPN connection.
     * 
     */
    private String state;
    /**
     * @return Tags associated to the VPN Connection.
     * 
     */
    private Map<String,String> tags;
    /**
     * @return ID of a transit gateway associated with the VPN connection.
     * 
     */
    private String transitGatewayId;
    /**
     * @return Type of VPN connection. Currently the only supported type is ipsec.1.
     * 
     */
    private String type;
    /**
     * @return List of objects containing information about the VPN tunnel.
     * 
     */
    private List<GetConnectionVgwTelemetry> vgwTelemetries;
    private String vpnConnectionId;
    /**
     * @return ID of a virtual private gateway associated with the VPN connection.
     * 
     */
    private String vpnGatewayId;

    private GetConnectionResult() {}
    /**
     * @return Category of the VPN connection. A value of VPN indicates an AWS VPN connection. A value of VPN-Classic indicates an AWS Classic VPN connection.
     * 
     */
    public String category() {
        return this.category;
    }
    /**
     * @return ARN of the core network.
     * 
     */
    public String coreNetworkArn() {
        return this.coreNetworkArn;
    }
    /**
     * @return ARN of the core network attachment.
     * 
     */
    public String coreNetworkAttachmentArn() {
        return this.coreNetworkAttachmentArn;
    }
    /**
     * @return Configuration information for the VPN connection&#39;s customer gateway (in the native XML format).
     * 
     */
    public String customerGatewayConfiguration() {
        return this.customerGatewayConfiguration;
    }
    /**
     * @return ID of the customer gateway at your end of the VPN connection.
     * 
     */
    public String customerGatewayId() {
        return this.customerGatewayId;
    }
    public List<GetConnectionFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return Current state of the gateway association.
     * 
     */
    public String gatewayAssociationState() {
        return this.gatewayAssociationState;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return (ARN) of the Secrets Manager secret storing the pre-shared key(s) for the VPN connection.
     * 
     */
    public String preSharedKeyArn() {
        return this.preSharedKeyArn;
    }
    public String region() {
        return this.region;
    }
    /**
     * @return List of static routes associated with the VPN connection.
     * 
     */
    public List<GetConnectionRoute> routes() {
        return this.routes;
    }
    /**
     * @return Current state of the VPN connection.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Tags associated to the VPN Connection.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }
    /**
     * @return ID of a transit gateway associated with the VPN connection.
     * 
     */
    public String transitGatewayId() {
        return this.transitGatewayId;
    }
    /**
     * @return Type of VPN connection. Currently the only supported type is ipsec.1.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return List of objects containing information about the VPN tunnel.
     * 
     */
    public List<GetConnectionVgwTelemetry> vgwTelemetries() {
        return this.vgwTelemetries;
    }
    public String vpnConnectionId() {
        return this.vpnConnectionId;
    }
    /**
     * @return ID of a virtual private gateway associated with the VPN connection.
     * 
     */
    public String vpnGatewayId() {
        return this.vpnGatewayId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetConnectionResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String category;
        private String coreNetworkArn;
        private String coreNetworkAttachmentArn;
        private String customerGatewayConfiguration;
        private String customerGatewayId;
        private @Nullable List<GetConnectionFilter> filters;
        private String gatewayAssociationState;
        private String id;
        private String preSharedKeyArn;
        private String region;
        private List<GetConnectionRoute> routes;
        private String state;
        private Map<String,String> tags;
        private String transitGatewayId;
        private String type;
        private List<GetConnectionVgwTelemetry> vgwTelemetries;
        private String vpnConnectionId;
        private String vpnGatewayId;
        public Builder() {}
        public Builder(GetConnectionResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.category = defaults.category;
    	      this.coreNetworkArn = defaults.coreNetworkArn;
    	      this.coreNetworkAttachmentArn = defaults.coreNetworkAttachmentArn;
    	      this.customerGatewayConfiguration = defaults.customerGatewayConfiguration;
    	      this.customerGatewayId = defaults.customerGatewayId;
    	      this.filters = defaults.filters;
    	      this.gatewayAssociationState = defaults.gatewayAssociationState;
    	      this.id = defaults.id;
    	      this.preSharedKeyArn = defaults.preSharedKeyArn;
    	      this.region = defaults.region;
    	      this.routes = defaults.routes;
    	      this.state = defaults.state;
    	      this.tags = defaults.tags;
    	      this.transitGatewayId = defaults.transitGatewayId;
    	      this.type = defaults.type;
    	      this.vgwTelemetries = defaults.vgwTelemetries;
    	      this.vpnConnectionId = defaults.vpnConnectionId;
    	      this.vpnGatewayId = defaults.vpnGatewayId;
        }

        @CustomType.Setter
        public Builder category(String category) {
            if (category == null) {
              throw new MissingRequiredPropertyException("GetConnectionResult", "category");
            }
            this.category = category;
            return this;
        }
        @CustomType.Setter
        public Builder coreNetworkArn(String coreNetworkArn) {
            if (coreNetworkArn == null) {
              throw new MissingRequiredPropertyException("GetConnectionResult", "coreNetworkArn");
            }
            this.coreNetworkArn = coreNetworkArn;
            return this;
        }
        @CustomType.Setter
        public Builder coreNetworkAttachmentArn(String coreNetworkAttachmentArn) {
            if (coreNetworkAttachmentArn == null) {
              throw new MissingRequiredPropertyException("GetConnectionResult", "coreNetworkAttachmentArn");
            }
            this.coreNetworkAttachmentArn = coreNetworkAttachmentArn;
            return this;
        }
        @CustomType.Setter
        public Builder customerGatewayConfiguration(String customerGatewayConfiguration) {
            if (customerGatewayConfiguration == null) {
              throw new MissingRequiredPropertyException("GetConnectionResult", "customerGatewayConfiguration");
            }
            this.customerGatewayConfiguration = customerGatewayConfiguration;
            return this;
        }
        @CustomType.Setter
        public Builder customerGatewayId(String customerGatewayId) {
            if (customerGatewayId == null) {
              throw new MissingRequiredPropertyException("GetConnectionResult", "customerGatewayId");
            }
            this.customerGatewayId = customerGatewayId;
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetConnectionFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GetConnectionFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder gatewayAssociationState(String gatewayAssociationState) {
            if (gatewayAssociationState == null) {
              throw new MissingRequiredPropertyException("GetConnectionResult", "gatewayAssociationState");
            }
            this.gatewayAssociationState = gatewayAssociationState;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetConnectionResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder preSharedKeyArn(String preSharedKeyArn) {
            if (preSharedKeyArn == null) {
              throw new MissingRequiredPropertyException("GetConnectionResult", "preSharedKeyArn");
            }
            this.preSharedKeyArn = preSharedKeyArn;
            return this;
        }
        @CustomType.Setter
        public Builder region(String region) {
            if (region == null) {
              throw new MissingRequiredPropertyException("GetConnectionResult", "region");
            }
            this.region = region;
            return this;
        }
        @CustomType.Setter
        public Builder routes(List<GetConnectionRoute> routes) {
            if (routes == null) {
              throw new MissingRequiredPropertyException("GetConnectionResult", "routes");
            }
            this.routes = routes;
            return this;
        }
        public Builder routes(GetConnectionRoute... routes) {
            return routes(List.of(routes));
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetConnectionResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetConnectionResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder transitGatewayId(String transitGatewayId) {
            if (transitGatewayId == null) {
              throw new MissingRequiredPropertyException("GetConnectionResult", "transitGatewayId");
            }
            this.transitGatewayId = transitGatewayId;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetConnectionResult", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder vgwTelemetries(List<GetConnectionVgwTelemetry> vgwTelemetries) {
            if (vgwTelemetries == null) {
              throw new MissingRequiredPropertyException("GetConnectionResult", "vgwTelemetries");
            }
            this.vgwTelemetries = vgwTelemetries;
            return this;
        }
        public Builder vgwTelemetries(GetConnectionVgwTelemetry... vgwTelemetries) {
            return vgwTelemetries(List.of(vgwTelemetries));
        }
        @CustomType.Setter
        public Builder vpnConnectionId(String vpnConnectionId) {
            if (vpnConnectionId == null) {
              throw new MissingRequiredPropertyException("GetConnectionResult", "vpnConnectionId");
            }
            this.vpnConnectionId = vpnConnectionId;
            return this;
        }
        @CustomType.Setter
        public Builder vpnGatewayId(String vpnGatewayId) {
            if (vpnGatewayId == null) {
              throw new MissingRequiredPropertyException("GetConnectionResult", "vpnGatewayId");
            }
            this.vpnGatewayId = vpnGatewayId;
            return this;
        }
        public GetConnectionResult build() {
            final var _resultValue = new GetConnectionResult();
            _resultValue.category = category;
            _resultValue.coreNetworkArn = coreNetworkArn;
            _resultValue.coreNetworkAttachmentArn = coreNetworkAttachmentArn;
            _resultValue.customerGatewayConfiguration = customerGatewayConfiguration;
            _resultValue.customerGatewayId = customerGatewayId;
            _resultValue.filters = filters;
            _resultValue.gatewayAssociationState = gatewayAssociationState;
            _resultValue.id = id;
            _resultValue.preSharedKeyArn = preSharedKeyArn;
            _resultValue.region = region;
            _resultValue.routes = routes;
            _resultValue.state = state;
            _resultValue.tags = tags;
            _resultValue.transitGatewayId = transitGatewayId;
            _resultValue.type = type;
            _resultValue.vgwTelemetries = vgwTelemetries;
            _resultValue.vpnConnectionId = vpnConnectionId;
            _resultValue.vpnGatewayId = vpnGatewayId;
            return _resultValue;
        }
    }
}
