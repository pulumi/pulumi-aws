// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.transfer.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ServerS3StorageOptions {
    /**
     * @return Specifies whether or not performance for your Amazon S3 directories is optimized. Valid values are `DISABLED`, `ENABLED`.
     * 
     * By default, home directory mappings have a `TYPE` of `DIRECTORY`. If you enable this option, you would then need to explicitly set the `HomeDirectoryMapEntry` Type to `FILE` if you want a mapping to have a file target. See [Using logical directories to simplify your Transfer Family directory structures](https://docs.aws.amazon.com/transfer/latest/userguide/logical-dir-mappings.html) for details.
     * 
     */
    private @Nullable String directoryListingOptimization;

    private ServerS3StorageOptions() {}
    /**
     * @return Specifies whether or not performance for your Amazon S3 directories is optimized. Valid values are `DISABLED`, `ENABLED`.
     * 
     * By default, home directory mappings have a `TYPE` of `DIRECTORY`. If you enable this option, you would then need to explicitly set the `HomeDirectoryMapEntry` Type to `FILE` if you want a mapping to have a file target. See [Using logical directories to simplify your Transfer Family directory structures](https://docs.aws.amazon.com/transfer/latest/userguide/logical-dir-mappings.html) for details.
     * 
     */
    public Optional<String> directoryListingOptimization() {
        return Optional.ofNullable(this.directoryListingOptimization);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ServerS3StorageOptions defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String directoryListingOptimization;
        public Builder() {}
        public Builder(ServerS3StorageOptions defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.directoryListingOptimization = defaults.directoryListingOptimization;
        }

        @CustomType.Setter
        public Builder directoryListingOptimization(@Nullable String directoryListingOptimization) {

            this.directoryListingOptimization = directoryListingOptimization;
            return this;
        }
        public ServerS3StorageOptions build() {
            final var _resultValue = new ServerS3StorageOptions();
            _resultValue.directoryListingOptimization = directoryListingOptimization;
            return _resultValue;
        }
    }
}
