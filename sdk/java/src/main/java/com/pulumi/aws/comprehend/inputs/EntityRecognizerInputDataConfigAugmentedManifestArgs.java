// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.comprehend.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EntityRecognizerInputDataConfigAugmentedManifestArgs extends com.pulumi.resources.ResourceArgs {

    public static final EntityRecognizerInputDataConfigAugmentedManifestArgs Empty = new EntityRecognizerInputDataConfigAugmentedManifestArgs();

    @Import(name="annotationDataS3Uri")
    private @Nullable Output<String> annotationDataS3Uri;

    public Optional<Output<String>> annotationDataS3Uri() {
        return Optional.ofNullable(this.annotationDataS3Uri);
    }

    @Import(name="attributeNames", required=true)
    private Output<List<String>> attributeNames;

    public Output<List<String>> attributeNames() {
        return this.attributeNames;
    }

    @Import(name="documentType")
    private @Nullable Output<String> documentType;

    public Optional<Output<String>> documentType() {
        return Optional.ofNullable(this.documentType);
    }

    @Import(name="s3Uri", required=true)
    private Output<String> s3Uri;

    public Output<String> s3Uri() {
        return this.s3Uri;
    }

    @Import(name="sourceDocumentsS3Uri")
    private @Nullable Output<String> sourceDocumentsS3Uri;

    public Optional<Output<String>> sourceDocumentsS3Uri() {
        return Optional.ofNullable(this.sourceDocumentsS3Uri);
    }

    @Import(name="split")
    private @Nullable Output<String> split;

    public Optional<Output<String>> split() {
        return Optional.ofNullable(this.split);
    }

    private EntityRecognizerInputDataConfigAugmentedManifestArgs() {}

    private EntityRecognizerInputDataConfigAugmentedManifestArgs(EntityRecognizerInputDataConfigAugmentedManifestArgs $) {
        this.annotationDataS3Uri = $.annotationDataS3Uri;
        this.attributeNames = $.attributeNames;
        this.documentType = $.documentType;
        this.s3Uri = $.s3Uri;
        this.sourceDocumentsS3Uri = $.sourceDocumentsS3Uri;
        this.split = $.split;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EntityRecognizerInputDataConfigAugmentedManifestArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EntityRecognizerInputDataConfigAugmentedManifestArgs $;

        public Builder() {
            $ = new EntityRecognizerInputDataConfigAugmentedManifestArgs();
        }

        public Builder(EntityRecognizerInputDataConfigAugmentedManifestArgs defaults) {
            $ = new EntityRecognizerInputDataConfigAugmentedManifestArgs(Objects.requireNonNull(defaults));
        }

        public Builder annotationDataS3Uri(@Nullable Output<String> annotationDataS3Uri) {
            $.annotationDataS3Uri = annotationDataS3Uri;
            return this;
        }

        public Builder annotationDataS3Uri(String annotationDataS3Uri) {
            return annotationDataS3Uri(Output.of(annotationDataS3Uri));
        }

        public Builder attributeNames(Output<List<String>> attributeNames) {
            $.attributeNames = attributeNames;
            return this;
        }

        public Builder attributeNames(List<String> attributeNames) {
            return attributeNames(Output.of(attributeNames));
        }

        public Builder attributeNames(String... attributeNames) {
            return attributeNames(List.of(attributeNames));
        }

        public Builder documentType(@Nullable Output<String> documentType) {
            $.documentType = documentType;
            return this;
        }

        public Builder documentType(String documentType) {
            return documentType(Output.of(documentType));
        }

        public Builder s3Uri(Output<String> s3Uri) {
            $.s3Uri = s3Uri;
            return this;
        }

        public Builder s3Uri(String s3Uri) {
            return s3Uri(Output.of(s3Uri));
        }

        public Builder sourceDocumentsS3Uri(@Nullable Output<String> sourceDocumentsS3Uri) {
            $.sourceDocumentsS3Uri = sourceDocumentsS3Uri;
            return this;
        }

        public Builder sourceDocumentsS3Uri(String sourceDocumentsS3Uri) {
            return sourceDocumentsS3Uri(Output.of(sourceDocumentsS3Uri));
        }

        public Builder split(@Nullable Output<String> split) {
            $.split = split;
            return this;
        }

        public Builder split(String split) {
            return split(Output.of(split));
        }

        public EntityRecognizerInputDataConfigAugmentedManifestArgs build() {
            $.attributeNames = Objects.requireNonNull($.attributeNames, "expected parameter 'attributeNames' to be non-null");
            $.s3Uri = Objects.requireNonNull($.s3Uri, "expected parameter 's3Uri' to be non-null");
            return $;
        }
    }

}
