// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.dlm.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LifecyclePolicyPolicyDetailsScheduleFastRestoreRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final LifecyclePolicyPolicyDetailsScheduleFastRestoreRuleArgs Empty = new LifecyclePolicyPolicyDetailsScheduleFastRestoreRuleArgs();

    /**
     * The Availability Zones in which to enable fast snapshot restore.
     * 
     */
    @Import(name="availabilityZones", required=true)
    private Output<List<String>> availabilityZones;

    /**
     * @return The Availability Zones in which to enable fast snapshot restore.
     * 
     */
    public Output<List<String>> availabilityZones() {
        return this.availabilityZones;
    }

    @Import(name="count")
    private @Nullable Output<Integer> count;

    public Optional<Output<Integer>> count() {
        return Optional.ofNullable(this.count);
    }

    @Import(name="interval")
    private @Nullable Output<Integer> interval;

    public Optional<Output<Integer>> interval() {
        return Optional.ofNullable(this.interval);
    }

    @Import(name="intervalUnit")
    private @Nullable Output<String> intervalUnit;

    public Optional<Output<String>> intervalUnit() {
        return Optional.ofNullable(this.intervalUnit);
    }

    private LifecyclePolicyPolicyDetailsScheduleFastRestoreRuleArgs() {}

    private LifecyclePolicyPolicyDetailsScheduleFastRestoreRuleArgs(LifecyclePolicyPolicyDetailsScheduleFastRestoreRuleArgs $) {
        this.availabilityZones = $.availabilityZones;
        this.count = $.count;
        this.interval = $.interval;
        this.intervalUnit = $.intervalUnit;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LifecyclePolicyPolicyDetailsScheduleFastRestoreRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LifecyclePolicyPolicyDetailsScheduleFastRestoreRuleArgs $;

        public Builder() {
            $ = new LifecyclePolicyPolicyDetailsScheduleFastRestoreRuleArgs();
        }

        public Builder(LifecyclePolicyPolicyDetailsScheduleFastRestoreRuleArgs defaults) {
            $ = new LifecyclePolicyPolicyDetailsScheduleFastRestoreRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param availabilityZones The Availability Zones in which to enable fast snapshot restore.
         * 
         * @return builder
         * 
         */
        public Builder availabilityZones(Output<List<String>> availabilityZones) {
            $.availabilityZones = availabilityZones;
            return this;
        }

        /**
         * @param availabilityZones The Availability Zones in which to enable fast snapshot restore.
         * 
         * @return builder
         * 
         */
        public Builder availabilityZones(List<String> availabilityZones) {
            return availabilityZones(Output.of(availabilityZones));
        }

        /**
         * @param availabilityZones The Availability Zones in which to enable fast snapshot restore.
         * 
         * @return builder
         * 
         */
        public Builder availabilityZones(String... availabilityZones) {
            return availabilityZones(List.of(availabilityZones));
        }

        public Builder count(@Nullable Output<Integer> count) {
            $.count = count;
            return this;
        }

        public Builder count(Integer count) {
            return count(Output.of(count));
        }

        public Builder interval(@Nullable Output<Integer> interval) {
            $.interval = interval;
            return this;
        }

        public Builder interval(Integer interval) {
            return interval(Output.of(interval));
        }

        public Builder intervalUnit(@Nullable Output<String> intervalUnit) {
            $.intervalUnit = intervalUnit;
            return this;
        }

        public Builder intervalUnit(String intervalUnit) {
            return intervalUnit(Output.of(intervalUnit));
        }

        public LifecyclePolicyPolicyDetailsScheduleFastRestoreRuleArgs build() {
            if ($.availabilityZones == null) {
                throw new MissingRequiredPropertyException("LifecyclePolicyPolicyDetailsScheduleFastRestoreRuleArgs", "availabilityZones");
            }
            return $;
        }
    }

}
