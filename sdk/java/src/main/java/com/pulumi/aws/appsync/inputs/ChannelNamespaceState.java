// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.appsync.inputs;

import com.pulumi.aws.appsync.inputs.ChannelNamespaceHandlerConfigsArgs;
import com.pulumi.aws.appsync.inputs.ChannelNamespacePublishAuthModeArgs;
import com.pulumi.aws.appsync.inputs.ChannelNamespaceSubscribeAuthModeArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ChannelNamespaceState extends com.pulumi.resources.ResourceArgs {

    public static final ChannelNamespaceState Empty = new ChannelNamespaceState();

    /**
     * Event API ID.
     * 
     */
    @Import(name="apiId")
    private @Nullable Output<String> apiId;

    /**
     * @return Event API ID.
     * 
     */
    public Optional<Output<String>> apiId() {
        return Optional.ofNullable(this.apiId);
    }

    /**
     * ARN of the channel namespace.
     * 
     */
    @Import(name="channelNamespaceArn")
    private @Nullable Output<String> channelNamespaceArn;

    /**
     * @return ARN of the channel namespace.
     * 
     */
    public Optional<Output<String>> channelNamespaceArn() {
        return Optional.ofNullable(this.channelNamespaceArn);
    }

    /**
     * Event handler functions that run custom business logic to process published events and subscribe requests.
     * 
     */
    @Import(name="codeHandlers")
    private @Nullable Output<String> codeHandlers;

    /**
     * @return Event handler functions that run custom business logic to process published events and subscribe requests.
     * 
     */
    public Optional<Output<String>> codeHandlers() {
        return Optional.ofNullable(this.codeHandlers);
    }

    /**
     * Configuration for the `on_publish` and `on_subscribe` handlers. See Handler Configs below.
     * 
     */
    @Import(name="handlerConfigs")
    private @Nullable Output<ChannelNamespaceHandlerConfigsArgs> handlerConfigs;

    /**
     * @return Configuration for the `on_publish` and `on_subscribe` handlers. See Handler Configs below.
     * 
     */
    public Optional<Output<ChannelNamespaceHandlerConfigsArgs>> handlerConfigs() {
        return Optional.ofNullable(this.handlerConfigs);
    }

    /**
     * Name of the channel namespace.
     * 
     * The following arguments are optional:
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the channel namespace.
     * 
     * The following arguments are optional:
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Authorization modes to use for publishing messages on the channel namespace. This configuration overrides the default API authorization configuration. See Auth Modes below.
     * 
     */
    @Import(name="publishAuthModes")
    private @Nullable Output<List<ChannelNamespacePublishAuthModeArgs>> publishAuthModes;

    /**
     * @return Authorization modes to use for publishing messages on the channel namespace. This configuration overrides the default API authorization configuration. See Auth Modes below.
     * 
     */
    public Optional<Output<List<ChannelNamespacePublishAuthModeArgs>>> publishAuthModes() {
        return Optional.ofNullable(this.publishAuthModes);
    }

    /**
     * Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * Authorization modes to use for subscribing to messages on the channel namespace. This configuration overrides the default API authorization configuration. See Auth Modes below.
     * 
     */
    @Import(name="subscribeAuthModes")
    private @Nullable Output<List<ChannelNamespaceSubscribeAuthModeArgs>> subscribeAuthModes;

    /**
     * @return Authorization modes to use for subscribing to messages on the channel namespace. This configuration overrides the default API authorization configuration. See Auth Modes below.
     * 
     */
    public Optional<Output<List<ChannelNamespaceSubscribeAuthModeArgs>>> subscribeAuthModes() {
        return Optional.ofNullable(this.subscribeAuthModes);
    }

    /**
     * Map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     */
    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    /**
     * @return Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     */
    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    private ChannelNamespaceState() {}

    private ChannelNamespaceState(ChannelNamespaceState $) {
        this.apiId = $.apiId;
        this.channelNamespaceArn = $.channelNamespaceArn;
        this.codeHandlers = $.codeHandlers;
        this.handlerConfigs = $.handlerConfigs;
        this.name = $.name;
        this.publishAuthModes = $.publishAuthModes;
        this.region = $.region;
        this.subscribeAuthModes = $.subscribeAuthModes;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ChannelNamespaceState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ChannelNamespaceState $;

        public Builder() {
            $ = new ChannelNamespaceState();
        }

        public Builder(ChannelNamespaceState defaults) {
            $ = new ChannelNamespaceState(Objects.requireNonNull(defaults));
        }

        /**
         * @param apiId Event API ID.
         * 
         * @return builder
         * 
         */
        public Builder apiId(@Nullable Output<String> apiId) {
            $.apiId = apiId;
            return this;
        }

        /**
         * @param apiId Event API ID.
         * 
         * @return builder
         * 
         */
        public Builder apiId(String apiId) {
            return apiId(Output.of(apiId));
        }

        /**
         * @param channelNamespaceArn ARN of the channel namespace.
         * 
         * @return builder
         * 
         */
        public Builder channelNamespaceArn(@Nullable Output<String> channelNamespaceArn) {
            $.channelNamespaceArn = channelNamespaceArn;
            return this;
        }

        /**
         * @param channelNamespaceArn ARN of the channel namespace.
         * 
         * @return builder
         * 
         */
        public Builder channelNamespaceArn(String channelNamespaceArn) {
            return channelNamespaceArn(Output.of(channelNamespaceArn));
        }

        /**
         * @param codeHandlers Event handler functions that run custom business logic to process published events and subscribe requests.
         * 
         * @return builder
         * 
         */
        public Builder codeHandlers(@Nullable Output<String> codeHandlers) {
            $.codeHandlers = codeHandlers;
            return this;
        }

        /**
         * @param codeHandlers Event handler functions that run custom business logic to process published events and subscribe requests.
         * 
         * @return builder
         * 
         */
        public Builder codeHandlers(String codeHandlers) {
            return codeHandlers(Output.of(codeHandlers));
        }

        /**
         * @param handlerConfigs Configuration for the `on_publish` and `on_subscribe` handlers. See Handler Configs below.
         * 
         * @return builder
         * 
         */
        public Builder handlerConfigs(@Nullable Output<ChannelNamespaceHandlerConfigsArgs> handlerConfigs) {
            $.handlerConfigs = handlerConfigs;
            return this;
        }

        /**
         * @param handlerConfigs Configuration for the `on_publish` and `on_subscribe` handlers. See Handler Configs below.
         * 
         * @return builder
         * 
         */
        public Builder handlerConfigs(ChannelNamespaceHandlerConfigsArgs handlerConfigs) {
            return handlerConfigs(Output.of(handlerConfigs));
        }

        /**
         * @param name Name of the channel namespace.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the channel namespace.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param publishAuthModes Authorization modes to use for publishing messages on the channel namespace. This configuration overrides the default API authorization configuration. See Auth Modes below.
         * 
         * @return builder
         * 
         */
        public Builder publishAuthModes(@Nullable Output<List<ChannelNamespacePublishAuthModeArgs>> publishAuthModes) {
            $.publishAuthModes = publishAuthModes;
            return this;
        }

        /**
         * @param publishAuthModes Authorization modes to use for publishing messages on the channel namespace. This configuration overrides the default API authorization configuration. See Auth Modes below.
         * 
         * @return builder
         * 
         */
        public Builder publishAuthModes(List<ChannelNamespacePublishAuthModeArgs> publishAuthModes) {
            return publishAuthModes(Output.of(publishAuthModes));
        }

        /**
         * @param publishAuthModes Authorization modes to use for publishing messages on the channel namespace. This configuration overrides the default API authorization configuration. See Auth Modes below.
         * 
         * @return builder
         * 
         */
        public Builder publishAuthModes(ChannelNamespacePublishAuthModeArgs... publishAuthModes) {
            return publishAuthModes(List.of(publishAuthModes));
        }

        /**
         * @param region Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param subscribeAuthModes Authorization modes to use for subscribing to messages on the channel namespace. This configuration overrides the default API authorization configuration. See Auth Modes below.
         * 
         * @return builder
         * 
         */
        public Builder subscribeAuthModes(@Nullable Output<List<ChannelNamespaceSubscribeAuthModeArgs>> subscribeAuthModes) {
            $.subscribeAuthModes = subscribeAuthModes;
            return this;
        }

        /**
         * @param subscribeAuthModes Authorization modes to use for subscribing to messages on the channel namespace. This configuration overrides the default API authorization configuration. See Auth Modes below.
         * 
         * @return builder
         * 
         */
        public Builder subscribeAuthModes(List<ChannelNamespaceSubscribeAuthModeArgs> subscribeAuthModes) {
            return subscribeAuthModes(Output.of(subscribeAuthModes));
        }

        /**
         * @param subscribeAuthModes Authorization modes to use for subscribing to messages on the channel namespace. This configuration overrides the default API authorization configuration. See Auth Modes below.
         * 
         * @return builder
         * 
         */
        public Builder subscribeAuthModes(ChannelNamespaceSubscribeAuthModeArgs... subscribeAuthModes) {
            return subscribeAuthModes(List.of(subscribeAuthModes));
        }

        /**
         * @param tags Map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tagsAll Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
         * 
         * @return builder
         * 
         */
        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        /**
         * @param tagsAll Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
         * 
         * @return builder
         * 
         */
        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        public ChannelNamespaceState build() {
            return $;
        }
    }

}
