// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.waf.inputs;

import com.pulumi.aws.waf.inputs.SqlInjectionMatchSetSqlInjectionMatchTupleFieldToMatchArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class SqlInjectionMatchSetSqlInjectionMatchTupleArgs extends com.pulumi.resources.ResourceArgs {

    public static final SqlInjectionMatchSetSqlInjectionMatchTupleArgs Empty = new SqlInjectionMatchSetSqlInjectionMatchTupleArgs();

    /**
     * Specifies where in a web request to look for snippets of malicious SQL code.
     * 
     */
    @Import(name="fieldToMatch", required=true)
    private Output<SqlInjectionMatchSetSqlInjectionMatchTupleFieldToMatchArgs> fieldToMatch;

    /**
     * @return Specifies where in a web request to look for snippets of malicious SQL code.
     * 
     */
    public Output<SqlInjectionMatchSetSqlInjectionMatchTupleFieldToMatchArgs> fieldToMatch() {
        return this.fieldToMatch;
    }

    /**
     * Text transformations used to eliminate unusual formatting that attackers use in web requests in an effort to bypass AWS WAF.
     * If you specify a transformation, AWS WAF performs the transformation on `field_to_match` before inspecting a request for a match.
     * e.g., `CMD_LINE`, `HTML_ENTITY_DECODE` or `NONE`.
     * See [docs](http://docs.aws.amazon.com/waf/latest/APIReference/API_SqlInjectionMatchTuple.html#WAF-Type-SqlInjectionMatchTuple-TextTransformation)
     * for all supported values.
     * 
     */
    @Import(name="textTransformation", required=true)
    private Output<String> textTransformation;

    /**
     * @return Text transformations used to eliminate unusual formatting that attackers use in web requests in an effort to bypass AWS WAF.
     * If you specify a transformation, AWS WAF performs the transformation on `field_to_match` before inspecting a request for a match.
     * e.g., `CMD_LINE`, `HTML_ENTITY_DECODE` or `NONE`.
     * See [docs](http://docs.aws.amazon.com/waf/latest/APIReference/API_SqlInjectionMatchTuple.html#WAF-Type-SqlInjectionMatchTuple-TextTransformation)
     * for all supported values.
     * 
     */
    public Output<String> textTransformation() {
        return this.textTransformation;
    }

    private SqlInjectionMatchSetSqlInjectionMatchTupleArgs() {}

    private SqlInjectionMatchSetSqlInjectionMatchTupleArgs(SqlInjectionMatchSetSqlInjectionMatchTupleArgs $) {
        this.fieldToMatch = $.fieldToMatch;
        this.textTransformation = $.textTransformation;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SqlInjectionMatchSetSqlInjectionMatchTupleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SqlInjectionMatchSetSqlInjectionMatchTupleArgs $;

        public Builder() {
            $ = new SqlInjectionMatchSetSqlInjectionMatchTupleArgs();
        }

        public Builder(SqlInjectionMatchSetSqlInjectionMatchTupleArgs defaults) {
            $ = new SqlInjectionMatchSetSqlInjectionMatchTupleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param fieldToMatch Specifies where in a web request to look for snippets of malicious SQL code.
         * 
         * @return builder
         * 
         */
        public Builder fieldToMatch(Output<SqlInjectionMatchSetSqlInjectionMatchTupleFieldToMatchArgs> fieldToMatch) {
            $.fieldToMatch = fieldToMatch;
            return this;
        }

        /**
         * @param fieldToMatch Specifies where in a web request to look for snippets of malicious SQL code.
         * 
         * @return builder
         * 
         */
        public Builder fieldToMatch(SqlInjectionMatchSetSqlInjectionMatchTupleFieldToMatchArgs fieldToMatch) {
            return fieldToMatch(Output.of(fieldToMatch));
        }

        /**
         * @param textTransformation Text transformations used to eliminate unusual formatting that attackers use in web requests in an effort to bypass AWS WAF.
         * If you specify a transformation, AWS WAF performs the transformation on `field_to_match` before inspecting a request for a match.
         * e.g., `CMD_LINE`, `HTML_ENTITY_DECODE` or `NONE`.
         * See [docs](http://docs.aws.amazon.com/waf/latest/APIReference/API_SqlInjectionMatchTuple.html#WAF-Type-SqlInjectionMatchTuple-TextTransformation)
         * for all supported values.
         * 
         * @return builder
         * 
         */
        public Builder textTransformation(Output<String> textTransformation) {
            $.textTransformation = textTransformation;
            return this;
        }

        /**
         * @param textTransformation Text transformations used to eliminate unusual formatting that attackers use in web requests in an effort to bypass AWS WAF.
         * If you specify a transformation, AWS WAF performs the transformation on `field_to_match` before inspecting a request for a match.
         * e.g., `CMD_LINE`, `HTML_ENTITY_DECODE` or `NONE`.
         * See [docs](http://docs.aws.amazon.com/waf/latest/APIReference/API_SqlInjectionMatchTuple.html#WAF-Type-SqlInjectionMatchTuple-TextTransformation)
         * for all supported values.
         * 
         * @return builder
         * 
         */
        public Builder textTransformation(String textTransformation) {
            return textTransformation(Output.of(textTransformation));
        }

        public SqlInjectionMatchSetSqlInjectionMatchTupleArgs build() {
            if ($.fieldToMatch == null) {
                throw new MissingRequiredPropertyException("SqlInjectionMatchSetSqlInjectionMatchTupleArgs", "fieldToMatch");
            }
            if ($.textTransformation == null) {
                throw new MissingRequiredPropertyException("SqlInjectionMatchSetSqlInjectionMatchTupleArgs", "textTransformation");
            }
            return $;
        }
    }

}
