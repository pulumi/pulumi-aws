// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.guardduty;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IPSetArgs extends com.pulumi.resources.ResourceArgs {

    public static final IPSetArgs Empty = new IPSetArgs();

    @Import(name="activate", required=true)
    private Output<Boolean> activate;

    public Output<Boolean> activate() {
        return this.activate;
    }

    @Import(name="detectorId", required=true)
    private Output<String> detectorId;

    public Output<String> detectorId() {
        return this.detectorId;
    }

    @Import(name="format", required=true)
    private Output<String> format;

    public Output<String> format() {
        return this.format;
    }

    @Import(name="location", required=true)
    private Output<String> location;

    public Output<String> location() {
        return this.location;
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private IPSetArgs() {}

    private IPSetArgs(IPSetArgs $) {
        this.activate = $.activate;
        this.detectorId = $.detectorId;
        this.format = $.format;
        this.location = $.location;
        this.name = $.name;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IPSetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IPSetArgs $;

        public Builder() {
            $ = new IPSetArgs();
        }

        public Builder(IPSetArgs defaults) {
            $ = new IPSetArgs(Objects.requireNonNull(defaults));
        }

        public Builder activate(Output<Boolean> activate) {
            $.activate = activate;
            return this;
        }

        public Builder activate(Boolean activate) {
            return activate(Output.of(activate));
        }

        public Builder detectorId(Output<String> detectorId) {
            $.detectorId = detectorId;
            return this;
        }

        public Builder detectorId(String detectorId) {
            return detectorId(Output.of(detectorId));
        }

        public Builder format(Output<String> format) {
            $.format = format;
            return this;
        }

        public Builder format(String format) {
            return format(Output.of(format));
        }

        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public IPSetArgs build() {
            $.activate = Objects.requireNonNull($.activate, "expected parameter 'activate' to be non-null");
            $.detectorId = Objects.requireNonNull($.detectorId, "expected parameter 'detectorId' to be non-null");
            $.format = Objects.requireNonNull($.format, "expected parameter 'format' to be non-null");
            $.location = Objects.requireNonNull($.location, "expected parameter 'location' to be non-null");
            return $;
        }
    }

}
