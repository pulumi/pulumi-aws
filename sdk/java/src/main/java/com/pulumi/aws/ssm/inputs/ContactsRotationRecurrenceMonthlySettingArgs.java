// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ssm.inputs;

import com.pulumi.aws.ssm.inputs.ContactsRotationRecurrenceMonthlySettingHandOffTimeArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ContactsRotationRecurrenceMonthlySettingArgs extends com.pulumi.resources.ResourceArgs {

    public static final ContactsRotationRecurrenceMonthlySettingArgs Empty = new ContactsRotationRecurrenceMonthlySettingArgs();

    /**
     * (Required) The day of the month when monthly recurring on-call rotations begin.
     * 
     */
    @Import(name="dayOfMonth", required=true)
    private Output<Integer> dayOfMonth;

    /**
     * @return (Required) The day of the month when monthly recurring on-call rotations begin.
     * 
     */
    public Output<Integer> dayOfMonth() {
        return this.dayOfMonth;
    }

    /**
     * (Required) The hand off time. See Hand Off Time for more details.
     * 
     */
    @Import(name="handOffTime")
    private @Nullable Output<ContactsRotationRecurrenceMonthlySettingHandOffTimeArgs> handOffTime;

    /**
     * @return (Required) The hand off time. See Hand Off Time for more details.
     * 
     */
    public Optional<Output<ContactsRotationRecurrenceMonthlySettingHandOffTimeArgs>> handOffTime() {
        return Optional.ofNullable(this.handOffTime);
    }

    private ContactsRotationRecurrenceMonthlySettingArgs() {}

    private ContactsRotationRecurrenceMonthlySettingArgs(ContactsRotationRecurrenceMonthlySettingArgs $) {
        this.dayOfMonth = $.dayOfMonth;
        this.handOffTime = $.handOffTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ContactsRotationRecurrenceMonthlySettingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ContactsRotationRecurrenceMonthlySettingArgs $;

        public Builder() {
            $ = new ContactsRotationRecurrenceMonthlySettingArgs();
        }

        public Builder(ContactsRotationRecurrenceMonthlySettingArgs defaults) {
            $ = new ContactsRotationRecurrenceMonthlySettingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dayOfMonth (Required) The day of the month when monthly recurring on-call rotations begin.
         * 
         * @return builder
         * 
         */
        public Builder dayOfMonth(Output<Integer> dayOfMonth) {
            $.dayOfMonth = dayOfMonth;
            return this;
        }

        /**
         * @param dayOfMonth (Required) The day of the month when monthly recurring on-call rotations begin.
         * 
         * @return builder
         * 
         */
        public Builder dayOfMonth(Integer dayOfMonth) {
            return dayOfMonth(Output.of(dayOfMonth));
        }

        /**
         * @param handOffTime (Required) The hand off time. See Hand Off Time for more details.
         * 
         * @return builder
         * 
         */
        public Builder handOffTime(@Nullable Output<ContactsRotationRecurrenceMonthlySettingHandOffTimeArgs> handOffTime) {
            $.handOffTime = handOffTime;
            return this;
        }

        /**
         * @param handOffTime (Required) The hand off time. See Hand Off Time for more details.
         * 
         * @return builder
         * 
         */
        public Builder handOffTime(ContactsRotationRecurrenceMonthlySettingHandOffTimeArgs handOffTime) {
            return handOffTime(Output.of(handOffTime));
        }

        public ContactsRotationRecurrenceMonthlySettingArgs build() {
            if ($.dayOfMonth == null) {
                throw new MissingRequiredPropertyException("ContactsRotationRecurrenceMonthlySettingArgs", "dayOfMonth");
            }
            return $;
        }
    }

}
