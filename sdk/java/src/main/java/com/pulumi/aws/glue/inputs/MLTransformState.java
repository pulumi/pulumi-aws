// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.glue.inputs;

import com.pulumi.aws.glue.inputs.MLTransformInputRecordTableArgs;
import com.pulumi.aws.glue.inputs.MLTransformParametersArgs;
import com.pulumi.aws.glue.inputs.MLTransformSchemaArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MLTransformState extends com.pulumi.resources.ResourceArgs {

    public static final MLTransformState Empty = new MLTransformState();

    @Import(name="arn")
    private @Nullable Output<String> arn;

    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="glueVersion")
    private @Nullable Output<String> glueVersion;

    public Optional<Output<String>> glueVersion() {
        return Optional.ofNullable(this.glueVersion);
    }

    @Import(name="inputRecordTables")
    private @Nullable Output<List<MLTransformInputRecordTableArgs>> inputRecordTables;

    public Optional<Output<List<MLTransformInputRecordTableArgs>>> inputRecordTables() {
        return Optional.ofNullable(this.inputRecordTables);
    }

    @Import(name="labelCount")
    private @Nullable Output<Integer> labelCount;

    public Optional<Output<Integer>> labelCount() {
        return Optional.ofNullable(this.labelCount);
    }

    @Import(name="maxCapacity")
    private @Nullable Output<Double> maxCapacity;

    public Optional<Output<Double>> maxCapacity() {
        return Optional.ofNullable(this.maxCapacity);
    }

    @Import(name="maxRetries")
    private @Nullable Output<Integer> maxRetries;

    public Optional<Output<Integer>> maxRetries() {
        return Optional.ofNullable(this.maxRetries);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="numberOfWorkers")
    private @Nullable Output<Integer> numberOfWorkers;

    public Optional<Output<Integer>> numberOfWorkers() {
        return Optional.ofNullable(this.numberOfWorkers);
    }

    @Import(name="parameters")
    private @Nullable Output<MLTransformParametersArgs> parameters;

    public Optional<Output<MLTransformParametersArgs>> parameters() {
        return Optional.ofNullable(this.parameters);
    }

    @Import(name="roleArn")
    private @Nullable Output<String> roleArn;

    public Optional<Output<String>> roleArn() {
        return Optional.ofNullable(this.roleArn);
    }

    @Import(name="schemas")
    private @Nullable Output<List<MLTransformSchemaArgs>> schemas;

    public Optional<Output<List<MLTransformSchemaArgs>>> schemas() {
        return Optional.ofNullable(this.schemas);
    }

    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    @Import(name="timeout")
    private @Nullable Output<Integer> timeout;

    public Optional<Output<Integer>> timeout() {
        return Optional.ofNullable(this.timeout);
    }

    @Import(name="workerType")
    private @Nullable Output<String> workerType;

    public Optional<Output<String>> workerType() {
        return Optional.ofNullable(this.workerType);
    }

    private MLTransformState() {}

    private MLTransformState(MLTransformState $) {
        this.arn = $.arn;
        this.description = $.description;
        this.glueVersion = $.glueVersion;
        this.inputRecordTables = $.inputRecordTables;
        this.labelCount = $.labelCount;
        this.maxCapacity = $.maxCapacity;
        this.maxRetries = $.maxRetries;
        this.name = $.name;
        this.numberOfWorkers = $.numberOfWorkers;
        this.parameters = $.parameters;
        this.roleArn = $.roleArn;
        this.schemas = $.schemas;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
        this.timeout = $.timeout;
        this.workerType = $.workerType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MLTransformState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MLTransformState $;

        public Builder() {
            $ = new MLTransformState();
        }

        public Builder(MLTransformState defaults) {
            $ = new MLTransformState(Objects.requireNonNull(defaults));
        }

        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder glueVersion(@Nullable Output<String> glueVersion) {
            $.glueVersion = glueVersion;
            return this;
        }

        public Builder glueVersion(String glueVersion) {
            return glueVersion(Output.of(glueVersion));
        }

        public Builder inputRecordTables(@Nullable Output<List<MLTransformInputRecordTableArgs>> inputRecordTables) {
            $.inputRecordTables = inputRecordTables;
            return this;
        }

        public Builder inputRecordTables(List<MLTransformInputRecordTableArgs> inputRecordTables) {
            return inputRecordTables(Output.of(inputRecordTables));
        }

        public Builder inputRecordTables(MLTransformInputRecordTableArgs... inputRecordTables) {
            return inputRecordTables(List.of(inputRecordTables));
        }

        public Builder labelCount(@Nullable Output<Integer> labelCount) {
            $.labelCount = labelCount;
            return this;
        }

        public Builder labelCount(Integer labelCount) {
            return labelCount(Output.of(labelCount));
        }

        public Builder maxCapacity(@Nullable Output<Double> maxCapacity) {
            $.maxCapacity = maxCapacity;
            return this;
        }

        public Builder maxCapacity(Double maxCapacity) {
            return maxCapacity(Output.of(maxCapacity));
        }

        public Builder maxRetries(@Nullable Output<Integer> maxRetries) {
            $.maxRetries = maxRetries;
            return this;
        }

        public Builder maxRetries(Integer maxRetries) {
            return maxRetries(Output.of(maxRetries));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder numberOfWorkers(@Nullable Output<Integer> numberOfWorkers) {
            $.numberOfWorkers = numberOfWorkers;
            return this;
        }

        public Builder numberOfWorkers(Integer numberOfWorkers) {
            return numberOfWorkers(Output.of(numberOfWorkers));
        }

        public Builder parameters(@Nullable Output<MLTransformParametersArgs> parameters) {
            $.parameters = parameters;
            return this;
        }

        public Builder parameters(MLTransformParametersArgs parameters) {
            return parameters(Output.of(parameters));
        }

        public Builder roleArn(@Nullable Output<String> roleArn) {
            $.roleArn = roleArn;
            return this;
        }

        public Builder roleArn(String roleArn) {
            return roleArn(Output.of(roleArn));
        }

        public Builder schemas(@Nullable Output<List<MLTransformSchemaArgs>> schemas) {
            $.schemas = schemas;
            return this;
        }

        public Builder schemas(List<MLTransformSchemaArgs> schemas) {
            return schemas(Output.of(schemas));
        }

        public Builder schemas(MLTransformSchemaArgs... schemas) {
            return schemas(List.of(schemas));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        public Builder timeout(@Nullable Output<Integer> timeout) {
            $.timeout = timeout;
            return this;
        }

        public Builder timeout(Integer timeout) {
            return timeout(Output.of(timeout));
        }

        public Builder workerType(@Nullable Output<String> workerType) {
            $.workerType = workerType;
            return this;
        }

        public Builder workerType(String workerType) {
            return workerType(Output.of(workerType));
        }

        public MLTransformState build() {
            return $;
        }
    }

}
