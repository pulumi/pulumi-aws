// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.apigateway.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UsagePlanQuotaSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final UsagePlanQuotaSettingsArgs Empty = new UsagePlanQuotaSettingsArgs();

    /**
     * Maximum number of requests that can be made in a given time period.
     * 
     */
    @Import(name="limit", required=true)
    private Output<Integer> limit;

    /**
     * @return Maximum number of requests that can be made in a given time period.
     * 
     */
    public Output<Integer> limit() {
        return this.limit;
    }

    /**
     * Number of requests subtracted from the given limit in the initial time period.
     * 
     */
    @Import(name="offset")
    private @Nullable Output<Integer> offset;

    /**
     * @return Number of requests subtracted from the given limit in the initial time period.
     * 
     */
    public Optional<Output<Integer>> offset() {
        return Optional.ofNullable(this.offset);
    }

    /**
     * Time period in which the limit applies. Valid values are &#34;DAY&#34;, &#34;WEEK&#34; or &#34;MONTH&#34;.
     * 
     */
    @Import(name="period", required=true)
    private Output<String> period;

    /**
     * @return Time period in which the limit applies. Valid values are &#34;DAY&#34;, &#34;WEEK&#34; or &#34;MONTH&#34;.
     * 
     */
    public Output<String> period() {
        return this.period;
    }

    private UsagePlanQuotaSettingsArgs() {}

    private UsagePlanQuotaSettingsArgs(UsagePlanQuotaSettingsArgs $) {
        this.limit = $.limit;
        this.offset = $.offset;
        this.period = $.period;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UsagePlanQuotaSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UsagePlanQuotaSettingsArgs $;

        public Builder() {
            $ = new UsagePlanQuotaSettingsArgs();
        }

        public Builder(UsagePlanQuotaSettingsArgs defaults) {
            $ = new UsagePlanQuotaSettingsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param limit Maximum number of requests that can be made in a given time period.
         * 
         * @return builder
         * 
         */
        public Builder limit(Output<Integer> limit) {
            $.limit = limit;
            return this;
        }

        /**
         * @param limit Maximum number of requests that can be made in a given time period.
         * 
         * @return builder
         * 
         */
        public Builder limit(Integer limit) {
            return limit(Output.of(limit));
        }

        /**
         * @param offset Number of requests subtracted from the given limit in the initial time period.
         * 
         * @return builder
         * 
         */
        public Builder offset(@Nullable Output<Integer> offset) {
            $.offset = offset;
            return this;
        }

        /**
         * @param offset Number of requests subtracted from the given limit in the initial time period.
         * 
         * @return builder
         * 
         */
        public Builder offset(Integer offset) {
            return offset(Output.of(offset));
        }

        /**
         * @param period Time period in which the limit applies. Valid values are &#34;DAY&#34;, &#34;WEEK&#34; or &#34;MONTH&#34;.
         * 
         * @return builder
         * 
         */
        public Builder period(Output<String> period) {
            $.period = period;
            return this;
        }

        /**
         * @param period Time period in which the limit applies. Valid values are &#34;DAY&#34;, &#34;WEEK&#34; or &#34;MONTH&#34;.
         * 
         * @return builder
         * 
         */
        public Builder period(String period) {
            return period(Output.of(period));
        }

        public UsagePlanQuotaSettingsArgs build() {
            if ($.limit == null) {
                throw new MissingRequiredPropertyException("UsagePlanQuotaSettingsArgs", "limit");
            }
            if ($.period == null) {
                throw new MissingRequiredPropertyException("UsagePlanQuotaSettingsArgs", "period");
            }
            return $;
        }
    }

}
