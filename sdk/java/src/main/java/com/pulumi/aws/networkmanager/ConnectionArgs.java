// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.networkmanager;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConnectionArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConnectionArgs Empty = new ConnectionArgs();

    /**
     * The ID of the second device in the connection.
     * 
     */
    @Import(name="connectedDeviceId", required=true)
    private Output<String> connectedDeviceId;

    /**
     * @return The ID of the second device in the connection.
     * 
     */
    public Output<String> connectedDeviceId() {
        return this.connectedDeviceId;
    }

    /**
     * The ID of the link for the second device.
     * 
     */
    @Import(name="connectedLinkId")
    private @Nullable Output<String> connectedLinkId;

    /**
     * @return The ID of the link for the second device.
     * 
     */
    public Optional<Output<String>> connectedLinkId() {
        return Optional.ofNullable(this.connectedLinkId);
    }

    /**
     * A description of the connection.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A description of the connection.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The ID of the first device in the connection.
     * 
     */
    @Import(name="deviceId", required=true)
    private Output<String> deviceId;

    /**
     * @return The ID of the first device in the connection.
     * 
     */
    public Output<String> deviceId() {
        return this.deviceId;
    }

    /**
     * The ID of the global network.
     * 
     */
    @Import(name="globalNetworkId", required=true)
    private Output<String> globalNetworkId;

    /**
     * @return The ID of the global network.
     * 
     */
    public Output<String> globalNetworkId() {
        return this.globalNetworkId;
    }

    /**
     * The ID of the link for the first device.
     * 
     */
    @Import(name="linkId")
    private @Nullable Output<String> linkId;

    /**
     * @return The ID of the link for the first device.
     * 
     */
    public Optional<Output<String>> linkId() {
        return Optional.ofNullable(this.linkId);
    }

    /**
     * Key-value tags for the connection. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Key-value tags for the connection. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private ConnectionArgs() {}

    private ConnectionArgs(ConnectionArgs $) {
        this.connectedDeviceId = $.connectedDeviceId;
        this.connectedLinkId = $.connectedLinkId;
        this.description = $.description;
        this.deviceId = $.deviceId;
        this.globalNetworkId = $.globalNetworkId;
        this.linkId = $.linkId;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectionArgs $;

        public Builder() {
            $ = new ConnectionArgs();
        }

        public Builder(ConnectionArgs defaults) {
            $ = new ConnectionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param connectedDeviceId The ID of the second device in the connection.
         * 
         * @return builder
         * 
         */
        public Builder connectedDeviceId(Output<String> connectedDeviceId) {
            $.connectedDeviceId = connectedDeviceId;
            return this;
        }

        /**
         * @param connectedDeviceId The ID of the second device in the connection.
         * 
         * @return builder
         * 
         */
        public Builder connectedDeviceId(String connectedDeviceId) {
            return connectedDeviceId(Output.of(connectedDeviceId));
        }

        /**
         * @param connectedLinkId The ID of the link for the second device.
         * 
         * @return builder
         * 
         */
        public Builder connectedLinkId(@Nullable Output<String> connectedLinkId) {
            $.connectedLinkId = connectedLinkId;
            return this;
        }

        /**
         * @param connectedLinkId The ID of the link for the second device.
         * 
         * @return builder
         * 
         */
        public Builder connectedLinkId(String connectedLinkId) {
            return connectedLinkId(Output.of(connectedLinkId));
        }

        /**
         * @param description A description of the connection.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A description of the connection.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param deviceId The ID of the first device in the connection.
         * 
         * @return builder
         * 
         */
        public Builder deviceId(Output<String> deviceId) {
            $.deviceId = deviceId;
            return this;
        }

        /**
         * @param deviceId The ID of the first device in the connection.
         * 
         * @return builder
         * 
         */
        public Builder deviceId(String deviceId) {
            return deviceId(Output.of(deviceId));
        }

        /**
         * @param globalNetworkId The ID of the global network.
         * 
         * @return builder
         * 
         */
        public Builder globalNetworkId(Output<String> globalNetworkId) {
            $.globalNetworkId = globalNetworkId;
            return this;
        }

        /**
         * @param globalNetworkId The ID of the global network.
         * 
         * @return builder
         * 
         */
        public Builder globalNetworkId(String globalNetworkId) {
            return globalNetworkId(Output.of(globalNetworkId));
        }

        /**
         * @param linkId The ID of the link for the first device.
         * 
         * @return builder
         * 
         */
        public Builder linkId(@Nullable Output<String> linkId) {
            $.linkId = linkId;
            return this;
        }

        /**
         * @param linkId The ID of the link for the first device.
         * 
         * @return builder
         * 
         */
        public Builder linkId(String linkId) {
            return linkId(Output.of(linkId));
        }

        /**
         * @param tags Key-value tags for the connection. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Key-value tags for the connection. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public ConnectionArgs build() {
            $.connectedDeviceId = Objects.requireNonNull($.connectedDeviceId, "expected parameter 'connectedDeviceId' to be non-null");
            $.deviceId = Objects.requireNonNull($.deviceId, "expected parameter 'deviceId' to be non-null");
            $.globalNetworkId = Objects.requireNonNull($.globalNetworkId, "expected parameter 'globalNetworkId' to be non-null");
            return $;
        }
    }

}
