// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.msk.inputs;

import com.pulumi.aws.msk.inputs.ClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfoProvisionedThroughputArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfoArgs extends com.pulumi.resources.ResourceArgs {

    public static final ClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfoArgs Empty = new ClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfoArgs();

    /**
     * A block that contains EBS volume provisioned throughput information. To provision storage throughput, you must choose broker type kafka.m5.4xlarge or larger. See below.
     * 
     */
    @Import(name="provisionedThroughput")
    private @Nullable Output<ClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfoProvisionedThroughputArgs> provisionedThroughput;

    /**
     * @return A block that contains EBS volume provisioned throughput information. To provision storage throughput, you must choose broker type kafka.m5.4xlarge or larger. See below.
     * 
     */
    public Optional<Output<ClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfoProvisionedThroughputArgs>> provisionedThroughput() {
        return Optional.ofNullable(this.provisionedThroughput);
    }

    /**
     * The size in GiB of the EBS volume for the data drive on each broker node. Minimum value of `1` and maximum value of `16384`.
     * 
     */
    @Import(name="volumeSize")
    private @Nullable Output<Integer> volumeSize;

    /**
     * @return The size in GiB of the EBS volume for the data drive on each broker node. Minimum value of `1` and maximum value of `16384`.
     * 
     */
    public Optional<Output<Integer>> volumeSize() {
        return Optional.ofNullable(this.volumeSize);
    }

    private ClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfoArgs() {}

    private ClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfoArgs(ClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfoArgs $) {
        this.provisionedThroughput = $.provisionedThroughput;
        this.volumeSize = $.volumeSize;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfoArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfoArgs $;

        public Builder() {
            $ = new ClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfoArgs();
        }

        public Builder(ClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfoArgs defaults) {
            $ = new ClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfoArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param provisionedThroughput A block that contains EBS volume provisioned throughput information. To provision storage throughput, you must choose broker type kafka.m5.4xlarge or larger. See below.
         * 
         * @return builder
         * 
         */
        public Builder provisionedThroughput(@Nullable Output<ClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfoProvisionedThroughputArgs> provisionedThroughput) {
            $.provisionedThroughput = provisionedThroughput;
            return this;
        }

        /**
         * @param provisionedThroughput A block that contains EBS volume provisioned throughput information. To provision storage throughput, you must choose broker type kafka.m5.4xlarge or larger. See below.
         * 
         * @return builder
         * 
         */
        public Builder provisionedThroughput(ClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfoProvisionedThroughputArgs provisionedThroughput) {
            return provisionedThroughput(Output.of(provisionedThroughput));
        }

        /**
         * @param volumeSize The size in GiB of the EBS volume for the data drive on each broker node. Minimum value of `1` and maximum value of `16384`.
         * 
         * @return builder
         * 
         */
        public Builder volumeSize(@Nullable Output<Integer> volumeSize) {
            $.volumeSize = volumeSize;
            return this;
        }

        /**
         * @param volumeSize The size in GiB of the EBS volume for the data drive on each broker node. Minimum value of `1` and maximum value of `16384`.
         * 
         * @return builder
         * 
         */
        public Builder volumeSize(Integer volumeSize) {
            return volumeSize(Output.of(volumeSize));
        }

        public ClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfoArgs build() {
            return $;
        }
    }

}
