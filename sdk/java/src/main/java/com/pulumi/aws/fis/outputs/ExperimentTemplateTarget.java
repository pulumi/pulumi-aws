// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.fis.outputs;

import com.pulumi.aws.fis.outputs.ExperimentTemplateTargetFilter;
import com.pulumi.aws.fis.outputs.ExperimentTemplateTargetResourceTag;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class ExperimentTemplateTarget {
    /**
     * @return Filter(s) for the target. Filters can be used to select resources based on specific attributes returned by the respective describe action of the resource type. For more information, see [Targets for AWS FIS](https://docs.aws.amazon.com/fis/latest/userguide/targets.html#target-filters). See below.
     * 
     */
    private @Nullable List<ExperimentTemplateTargetFilter> filters;
    /**
     * @return Friendly name given to the target.
     * 
     */
    private String name;
    /**
     * @return Set of ARNs of the resources to target with an action. Conflicts with `resource_tag`.
     * 
     */
    private @Nullable List<String> resourceArns;
    /**
     * @return Tag(s) the resources need to have to be considered a valid target for an action. Conflicts with `resource_arns`. See below.
     * 
     * &gt; **NOTE:** The `target` configuration block requires either `resource_arns` or `resource_tag`.
     * 
     */
    private @Nullable List<ExperimentTemplateTargetResourceTag> resourceTags;
    /**
     * @return AWS resource type. The resource type must be supported for the specified action. To find out what resource types are supported, see [Targets for AWS FIS](https://docs.aws.amazon.com/fis/latest/userguide/targets.html#resource-types).
     * 
     */
    private String resourceType;
    /**
     * @return Scopes the identified resources. Valid values are `ALL` (all identified resources), `COUNT(n)` (randomly select `n` of the identified resources), `PERCENT(n)` (randomly select `n` percent of the identified resources).
     * 
     */
    private String selectionMode;

    private ExperimentTemplateTarget() {}
    /**
     * @return Filter(s) for the target. Filters can be used to select resources based on specific attributes returned by the respective describe action of the resource type. For more information, see [Targets for AWS FIS](https://docs.aws.amazon.com/fis/latest/userguide/targets.html#target-filters). See below.
     * 
     */
    public List<ExperimentTemplateTargetFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return Friendly name given to the target.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Set of ARNs of the resources to target with an action. Conflicts with `resource_tag`.
     * 
     */
    public List<String> resourceArns() {
        return this.resourceArns == null ? List.of() : this.resourceArns;
    }
    /**
     * @return Tag(s) the resources need to have to be considered a valid target for an action. Conflicts with `resource_arns`. See below.
     * 
     * &gt; **NOTE:** The `target` configuration block requires either `resource_arns` or `resource_tag`.
     * 
     */
    public List<ExperimentTemplateTargetResourceTag> resourceTags() {
        return this.resourceTags == null ? List.of() : this.resourceTags;
    }
    /**
     * @return AWS resource type. The resource type must be supported for the specified action. To find out what resource types are supported, see [Targets for AWS FIS](https://docs.aws.amazon.com/fis/latest/userguide/targets.html#resource-types).
     * 
     */
    public String resourceType() {
        return this.resourceType;
    }
    /**
     * @return Scopes the identified resources. Valid values are `ALL` (all identified resources), `COUNT(n)` (randomly select `n` of the identified resources), `PERCENT(n)` (randomly select `n` percent of the identified resources).
     * 
     */
    public String selectionMode() {
        return this.selectionMode;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ExperimentTemplateTarget defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<ExperimentTemplateTargetFilter> filters;
        private String name;
        private @Nullable List<String> resourceArns;
        private @Nullable List<ExperimentTemplateTargetResourceTag> resourceTags;
        private String resourceType;
        private String selectionMode;
        public Builder() {}
        public Builder(ExperimentTemplateTarget defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.filters = defaults.filters;
    	      this.name = defaults.name;
    	      this.resourceArns = defaults.resourceArns;
    	      this.resourceTags = defaults.resourceTags;
    	      this.resourceType = defaults.resourceType;
    	      this.selectionMode = defaults.selectionMode;
        }

        @CustomType.Setter
        public Builder filters(@Nullable List<ExperimentTemplateTargetFilter> filters) {
            this.filters = filters;
            return this;
        }
        public Builder filters(ExperimentTemplateTargetFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder resourceArns(@Nullable List<String> resourceArns) {
            this.resourceArns = resourceArns;
            return this;
        }
        public Builder resourceArns(String... resourceArns) {
            return resourceArns(List.of(resourceArns));
        }
        @CustomType.Setter
        public Builder resourceTags(@Nullable List<ExperimentTemplateTargetResourceTag> resourceTags) {
            this.resourceTags = resourceTags;
            return this;
        }
        public Builder resourceTags(ExperimentTemplateTargetResourceTag... resourceTags) {
            return resourceTags(List.of(resourceTags));
        }
        @CustomType.Setter
        public Builder resourceType(String resourceType) {
            this.resourceType = Objects.requireNonNull(resourceType);
            return this;
        }
        @CustomType.Setter
        public Builder selectionMode(String selectionMode) {
            this.selectionMode = Objects.requireNonNull(selectionMode);
            return this;
        }
        public ExperimentTemplateTarget build() {
            final var o = new ExperimentTemplateTarget();
            o.filters = filters;
            o.name = name;
            o.resourceArns = resourceArns;
            o.resourceTags = resourceTags;
            o.resourceType = resourceType;
            o.selectionMode = selectionMode;
            return o;
        }
    }
}
