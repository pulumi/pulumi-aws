// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.networkmanager;

import com.pulumi.aws.networkmanager.inputs.DxGatewayAttachmentTimeoutsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DxGatewayAttachmentArgs extends com.pulumi.resources.ResourceArgs {

    public static final DxGatewayAttachmentArgs Empty = new DxGatewayAttachmentArgs();

    /**
     * ID of the Cloud WAN core network to which the Direct Connect gateway attachment should be attached.
     * 
     */
    @Import(name="coreNetworkId", required=true)
    private Output<String> coreNetworkId;

    /**
     * @return ID of the Cloud WAN core network to which the Direct Connect gateway attachment should be attached.
     * 
     */
    public Output<String> coreNetworkId() {
        return this.coreNetworkId;
    }

    /**
     * ARN of the Direct Connect gateway attachment.
     * 
     */
    @Import(name="directConnectGatewayArn", required=true)
    private Output<String> directConnectGatewayArn;

    /**
     * @return ARN of the Direct Connect gateway attachment.
     * 
     */
    public Output<String> directConnectGatewayArn() {
        return this.directConnectGatewayArn;
    }

    /**
     * One or more core network edge locations to associate with the Direct Connect gateway attachment.
     * 
     * The following arguments are optional:
     * 
     */
    @Import(name="edgeLocations", required=true)
    private Output<List<String>> edgeLocations;

    /**
     * @return One or more core network edge locations to associate with the Direct Connect gateway attachment.
     * 
     * The following arguments are optional:
     * 
     */
    public Output<List<String>> edgeLocations() {
        return this.edgeLocations;
    }

    /**
     * Key-value tags for the attachment. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Key-value tags for the attachment. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="timeouts")
    private @Nullable Output<DxGatewayAttachmentTimeoutsArgs> timeouts;

    public Optional<Output<DxGatewayAttachmentTimeoutsArgs>> timeouts() {
        return Optional.ofNullable(this.timeouts);
    }

    private DxGatewayAttachmentArgs() {}

    private DxGatewayAttachmentArgs(DxGatewayAttachmentArgs $) {
        this.coreNetworkId = $.coreNetworkId;
        this.directConnectGatewayArn = $.directConnectGatewayArn;
        this.edgeLocations = $.edgeLocations;
        this.tags = $.tags;
        this.timeouts = $.timeouts;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DxGatewayAttachmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DxGatewayAttachmentArgs $;

        public Builder() {
            $ = new DxGatewayAttachmentArgs();
        }

        public Builder(DxGatewayAttachmentArgs defaults) {
            $ = new DxGatewayAttachmentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param coreNetworkId ID of the Cloud WAN core network to which the Direct Connect gateway attachment should be attached.
         * 
         * @return builder
         * 
         */
        public Builder coreNetworkId(Output<String> coreNetworkId) {
            $.coreNetworkId = coreNetworkId;
            return this;
        }

        /**
         * @param coreNetworkId ID of the Cloud WAN core network to which the Direct Connect gateway attachment should be attached.
         * 
         * @return builder
         * 
         */
        public Builder coreNetworkId(String coreNetworkId) {
            return coreNetworkId(Output.of(coreNetworkId));
        }

        /**
         * @param directConnectGatewayArn ARN of the Direct Connect gateway attachment.
         * 
         * @return builder
         * 
         */
        public Builder directConnectGatewayArn(Output<String> directConnectGatewayArn) {
            $.directConnectGatewayArn = directConnectGatewayArn;
            return this;
        }

        /**
         * @param directConnectGatewayArn ARN of the Direct Connect gateway attachment.
         * 
         * @return builder
         * 
         */
        public Builder directConnectGatewayArn(String directConnectGatewayArn) {
            return directConnectGatewayArn(Output.of(directConnectGatewayArn));
        }

        /**
         * @param edgeLocations One or more core network edge locations to associate with the Direct Connect gateway attachment.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder edgeLocations(Output<List<String>> edgeLocations) {
            $.edgeLocations = edgeLocations;
            return this;
        }

        /**
         * @param edgeLocations One or more core network edge locations to associate with the Direct Connect gateway attachment.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder edgeLocations(List<String> edgeLocations) {
            return edgeLocations(Output.of(edgeLocations));
        }

        /**
         * @param edgeLocations One or more core network edge locations to associate with the Direct Connect gateway attachment.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder edgeLocations(String... edgeLocations) {
            return edgeLocations(List.of(edgeLocations));
        }

        /**
         * @param tags Key-value tags for the attachment. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Key-value tags for the attachment. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder timeouts(@Nullable Output<DxGatewayAttachmentTimeoutsArgs> timeouts) {
            $.timeouts = timeouts;
            return this;
        }

        public Builder timeouts(DxGatewayAttachmentTimeoutsArgs timeouts) {
            return timeouts(Output.of(timeouts));
        }

        public DxGatewayAttachmentArgs build() {
            if ($.coreNetworkId == null) {
                throw new MissingRequiredPropertyException("DxGatewayAttachmentArgs", "coreNetworkId");
            }
            if ($.directConnectGatewayArn == null) {
                throw new MissingRequiredPropertyException("DxGatewayAttachmentArgs", "directConnectGatewayArn");
            }
            if ($.edgeLocations == null) {
                throw new MissingRequiredPropertyException("DxGatewayAttachmentArgs", "edgeLocations");
            }
            return $;
        }
    }

}
