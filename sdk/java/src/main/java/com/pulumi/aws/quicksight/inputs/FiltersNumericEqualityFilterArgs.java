// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.inputs;

import com.pulumi.aws.quicksight.inputs.AggregationFunctionArgs;
import com.pulumi.aws.quicksight.inputs.ColumnArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FiltersNumericEqualityFilterArgs extends com.pulumi.resources.ResourceArgs {

    public static final FiltersNumericEqualityFilterArgs Empty = new FiltersNumericEqualityFilterArgs();

    @Import(name="aggregationFunction")
    private @Nullable Output<AggregationFunctionArgs> aggregationFunction;

    public Optional<Output<AggregationFunctionArgs>> aggregationFunction() {
        return Optional.ofNullable(this.aggregationFunction);
    }

    @Import(name="column", required=true)
    private Output<ColumnArgs> column;

    public Output<ColumnArgs> column() {
        return this.column;
    }

    @Import(name="filterId", required=true)
    private Output<String> filterId;

    public Output<String> filterId() {
        return this.filterId;
    }

    @Import(name="matchOperator", required=true)
    private Output<String> matchOperator;

    public Output<String> matchOperator() {
        return this.matchOperator;
    }

    @Import(name="nullOption", required=true)
    private Output<String> nullOption;

    public Output<String> nullOption() {
        return this.nullOption;
    }

    @Import(name="parameterName")
    private @Nullable Output<String> parameterName;

    public Optional<Output<String>> parameterName() {
        return Optional.ofNullable(this.parameterName);
    }

    @Import(name="selectAllOptions")
    private @Nullable Output<String> selectAllOptions;

    public Optional<Output<String>> selectAllOptions() {
        return Optional.ofNullable(this.selectAllOptions);
    }

    @Import(name="value")
    private @Nullable Output<Double> value;

    public Optional<Output<Double>> value() {
        return Optional.ofNullable(this.value);
    }

    private FiltersNumericEqualityFilterArgs() {}

    private FiltersNumericEqualityFilterArgs(FiltersNumericEqualityFilterArgs $) {
        this.aggregationFunction = $.aggregationFunction;
        this.column = $.column;
        this.filterId = $.filterId;
        this.matchOperator = $.matchOperator;
        this.nullOption = $.nullOption;
        this.parameterName = $.parameterName;
        this.selectAllOptions = $.selectAllOptions;
        this.value = $.value;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FiltersNumericEqualityFilterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FiltersNumericEqualityFilterArgs $;

        public Builder() {
            $ = new FiltersNumericEqualityFilterArgs();
        }

        public Builder(FiltersNumericEqualityFilterArgs defaults) {
            $ = new FiltersNumericEqualityFilterArgs(Objects.requireNonNull(defaults));
        }

        public Builder aggregationFunction(@Nullable Output<AggregationFunctionArgs> aggregationFunction) {
            $.aggregationFunction = aggregationFunction;
            return this;
        }

        public Builder aggregationFunction(AggregationFunctionArgs aggregationFunction) {
            return aggregationFunction(Output.of(aggregationFunction));
        }

        public Builder column(Output<ColumnArgs> column) {
            $.column = column;
            return this;
        }

        public Builder column(ColumnArgs column) {
            return column(Output.of(column));
        }

        public Builder filterId(Output<String> filterId) {
            $.filterId = filterId;
            return this;
        }

        public Builder filterId(String filterId) {
            return filterId(Output.of(filterId));
        }

        public Builder matchOperator(Output<String> matchOperator) {
            $.matchOperator = matchOperator;
            return this;
        }

        public Builder matchOperator(String matchOperator) {
            return matchOperator(Output.of(matchOperator));
        }

        public Builder nullOption(Output<String> nullOption) {
            $.nullOption = nullOption;
            return this;
        }

        public Builder nullOption(String nullOption) {
            return nullOption(Output.of(nullOption));
        }

        public Builder parameterName(@Nullable Output<String> parameterName) {
            $.parameterName = parameterName;
            return this;
        }

        public Builder parameterName(String parameterName) {
            return parameterName(Output.of(parameterName));
        }

        public Builder selectAllOptions(@Nullable Output<String> selectAllOptions) {
            $.selectAllOptions = selectAllOptions;
            return this;
        }

        public Builder selectAllOptions(String selectAllOptions) {
            return selectAllOptions(Output.of(selectAllOptions));
        }

        public Builder value(@Nullable Output<Double> value) {
            $.value = value;
            return this;
        }

        public Builder value(Double value) {
            return value(Output.of(value));
        }

        public FiltersNumericEqualityFilterArgs build() {
            if ($.column == null) {
                throw new MissingRequiredPropertyException("FiltersNumericEqualityFilterArgs", "column");
            }
            if ($.filterId == null) {
                throw new MissingRequiredPropertyException("FiltersNumericEqualityFilterArgs", "filterId");
            }
            if ($.matchOperator == null) {
                throw new MissingRequiredPropertyException("FiltersNumericEqualityFilterArgs", "matchOperator");
            }
            if ($.nullOption == null) {
                throw new MissingRequiredPropertyException("FiltersNumericEqualityFilterArgs", "nullOption");
            }
            return $;
        }
    }

}
