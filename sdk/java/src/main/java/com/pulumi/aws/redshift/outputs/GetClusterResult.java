// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.redshift.outputs;

import com.pulumi.aws.redshift.outputs.GetClusterClusterNode;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetClusterResult {
    /**
     * @return Whether major version upgrades can be applied during maintenance period
     * 
     */
    private @Nullable Boolean allowVersionUpgrade;
    /**
     * @return The value represents how the cluster is configured to use AQUA.
     * 
     */
    private @Nullable String aquaConfigurationStatus;
    /**
     * @return ARN of cluster.
     * 
     */
    private @Nullable String arn;
    /**
     * @return The backup retention period
     * 
     */
    private @Nullable Integer automatedSnapshotRetentionPeriod;
    /**
     * @return Availability zone of the cluster
     * 
     */
    private @Nullable String availabilityZone;
    /**
     * @return Indicates whether the cluster is able to be relocated to another availability zone.
     * 
     */
    private @Nullable Boolean availabilityZoneRelocationEnabled;
    /**
     * @return Name of the S3 bucket where the log files are to be stored
     * 
     */
    private @Nullable String bucketName;
    /**
     * @return Cluster identifier
     * 
     */
    private String clusterIdentifier;
    /**
     * @return The namespace Amazon Resource Name (ARN) of the cluster
     * 
     */
    private @Nullable String clusterNamespaceArn;
    /**
     * @return Nodes in the cluster. Cluster node blocks are documented below
     * 
     */
    private @Nullable List<GetClusterClusterNode> clusterNodes;
    /**
     * @return The name of the parameter group to be associated with this cluster
     * 
     */
    private @Nullable String clusterParameterGroupName;
    /**
     * @return Public key for the cluster
     * 
     */
    private @Nullable String clusterPublicKey;
    /**
     * @return The cluster revision number
     * 
     */
    private @Nullable String clusterRevisionNumber;
    /**
     * @return The name of a cluster subnet group to be associated with this cluster
     * 
     */
    private @Nullable String clusterSubnetGroupName;
    /**
     * @return Cluster type
     * 
     */
    private @Nullable String clusterType;
    private @Nullable String clusterVersion;
    /**
     * @return Name of the default database in the cluster
     * 
     */
    private @Nullable String databaseName;
    /**
     * @return The ARN for the IAM role that was set as default for the cluster when the cluster was created.
     * 
     */
    private @Nullable String defaultIamRoleArn;
    /**
     * @return Elastic IP of the cluster
     * 
     */
    private @Nullable String elasticIp;
    /**
     * @return Whether cluster logging is enabled
     * 
     */
    private @Nullable Boolean enableLogging;
    /**
     * @return Whether the cluster data is encrypted
     * 
     */
    private @Nullable Boolean encrypted;
    /**
     * @return Cluster endpoint
     * 
     */
    private @Nullable String endpoint;
    /**
     * @return Whether enhanced VPC routing is enabled
     * 
     */
    private @Nullable Boolean enhancedVpcRouting;
    /**
     * @return IAM roles associated to the cluster
     * 
     */
    private @Nullable List<String> iamRoles;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private @Nullable String id;
    /**
     * @return KMS encryption key associated to the cluster
     * 
     */
    private @Nullable String kmsKeyId;
    /**
     * @return The log destination type.
     * 
     */
    private @Nullable String logDestinationType;
    /**
     * @return Collection of exported log types. Log types include the connection log, user log and user activity log.
     * 
     */
    private @Nullable List<String> logExports;
    /**
     * @return The name of the maintenance track for the restored cluster.
     * 
     */
    private @Nullable String maintenanceTrackName;
    /**
     * @return (Optional)  The default number of days to retain a manual snapshot.
     * 
     */
    private @Nullable Integer manualSnapshotRetentionPeriod;
    /**
     * @return Username for the master DB user
     * 
     */
    private @Nullable String masterUsername;
    /**
     * @return Cluster node type
     * 
     */
    private @Nullable String nodeType;
    /**
     * @return Number of nodes in the cluster
     * 
     */
    private @Nullable Integer numberOfNodes;
    /**
     * @return Port the cluster responds on
     * 
     */
    private @Nullable Integer port;
    /**
     * @return The maintenance window
     * 
     */
    private @Nullable String preferredMaintenanceWindow;
    /**
     * @return Whether the cluster is publicly accessible
     * 
     */
    private @Nullable Boolean publiclyAccessible;
    /**
     * @return Folder inside the S3 bucket where the log files are stored
     * 
     */
    private @Nullable String s3KeyPrefix;
    /**
     * @return Tags associated to the cluster
     * 
     */
    private @Nullable Map<String,String> tags;
    /**
     * @return VPC Id associated with the cluster
     * 
     */
    private @Nullable String vpcId;
    /**
     * @return The VPC security group Ids associated with the cluster
     * 
     */
    private @Nullable List<String> vpcSecurityGroupIds;

    private GetClusterResult() {}
    /**
     * @return Whether major version upgrades can be applied during maintenance period
     * 
     */
    public Optional<Boolean> allowVersionUpgrade() {
        return Optional.ofNullable(this.allowVersionUpgrade);
    }
    /**
     * @return The value represents how the cluster is configured to use AQUA.
     * 
     */
    public Optional<String> aquaConfigurationStatus() {
        return Optional.ofNullable(this.aquaConfigurationStatus);
    }
    /**
     * @return ARN of cluster.
     * 
     */
    public Optional<String> arn() {
        return Optional.ofNullable(this.arn);
    }
    /**
     * @return The backup retention period
     * 
     */
    public Optional<Integer> automatedSnapshotRetentionPeriod() {
        return Optional.ofNullable(this.automatedSnapshotRetentionPeriod);
    }
    /**
     * @return Availability zone of the cluster
     * 
     */
    public Optional<String> availabilityZone() {
        return Optional.ofNullable(this.availabilityZone);
    }
    /**
     * @return Indicates whether the cluster is able to be relocated to another availability zone.
     * 
     */
    public Optional<Boolean> availabilityZoneRelocationEnabled() {
        return Optional.ofNullable(this.availabilityZoneRelocationEnabled);
    }
    /**
     * @return Name of the S3 bucket where the log files are to be stored
     * 
     */
    public Optional<String> bucketName() {
        return Optional.ofNullable(this.bucketName);
    }
    /**
     * @return Cluster identifier
     * 
     */
    public String clusterIdentifier() {
        return this.clusterIdentifier;
    }
    /**
     * @return The namespace Amazon Resource Name (ARN) of the cluster
     * 
     */
    public Optional<String> clusterNamespaceArn() {
        return Optional.ofNullable(this.clusterNamespaceArn);
    }
    /**
     * @return Nodes in the cluster. Cluster node blocks are documented below
     * 
     */
    public List<GetClusterClusterNode> clusterNodes() {
        return this.clusterNodes == null ? List.of() : this.clusterNodes;
    }
    /**
     * @return The name of the parameter group to be associated with this cluster
     * 
     */
    public Optional<String> clusterParameterGroupName() {
        return Optional.ofNullable(this.clusterParameterGroupName);
    }
    /**
     * @return Public key for the cluster
     * 
     */
    public Optional<String> clusterPublicKey() {
        return Optional.ofNullable(this.clusterPublicKey);
    }
    /**
     * @return The cluster revision number
     * 
     */
    public Optional<String> clusterRevisionNumber() {
        return Optional.ofNullable(this.clusterRevisionNumber);
    }
    /**
     * @return The name of a cluster subnet group to be associated with this cluster
     * 
     */
    public Optional<String> clusterSubnetGroupName() {
        return Optional.ofNullable(this.clusterSubnetGroupName);
    }
    /**
     * @return Cluster type
     * 
     */
    public Optional<String> clusterType() {
        return Optional.ofNullable(this.clusterType);
    }
    public Optional<String> clusterVersion() {
        return Optional.ofNullable(this.clusterVersion);
    }
    /**
     * @return Name of the default database in the cluster
     * 
     */
    public Optional<String> databaseName() {
        return Optional.ofNullable(this.databaseName);
    }
    /**
     * @return The ARN for the IAM role that was set as default for the cluster when the cluster was created.
     * 
     */
    public Optional<String> defaultIamRoleArn() {
        return Optional.ofNullable(this.defaultIamRoleArn);
    }
    /**
     * @return Elastic IP of the cluster
     * 
     */
    public Optional<String> elasticIp() {
        return Optional.ofNullable(this.elasticIp);
    }
    /**
     * @return Whether cluster logging is enabled
     * 
     */
    public Optional<Boolean> enableLogging() {
        return Optional.ofNullable(this.enableLogging);
    }
    /**
     * @return Whether the cluster data is encrypted
     * 
     */
    public Optional<Boolean> encrypted() {
        return Optional.ofNullable(this.encrypted);
    }
    /**
     * @return Cluster endpoint
     * 
     */
    public Optional<String> endpoint() {
        return Optional.ofNullable(this.endpoint);
    }
    /**
     * @return Whether enhanced VPC routing is enabled
     * 
     */
    public Optional<Boolean> enhancedVpcRouting() {
        return Optional.ofNullable(this.enhancedVpcRouting);
    }
    /**
     * @return IAM roles associated to the cluster
     * 
     */
    public List<String> iamRoles() {
        return this.iamRoles == null ? List.of() : this.iamRoles;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return KMS encryption key associated to the cluster
     * 
     */
    public Optional<String> kmsKeyId() {
        return Optional.ofNullable(this.kmsKeyId);
    }
    /**
     * @return The log destination type.
     * 
     */
    public Optional<String> logDestinationType() {
        return Optional.ofNullable(this.logDestinationType);
    }
    /**
     * @return Collection of exported log types. Log types include the connection log, user log and user activity log.
     * 
     */
    public List<String> logExports() {
        return this.logExports == null ? List.of() : this.logExports;
    }
    /**
     * @return The name of the maintenance track for the restored cluster.
     * 
     */
    public Optional<String> maintenanceTrackName() {
        return Optional.ofNullable(this.maintenanceTrackName);
    }
    /**
     * @return (Optional)  The default number of days to retain a manual snapshot.
     * 
     */
    public Optional<Integer> manualSnapshotRetentionPeriod() {
        return Optional.ofNullable(this.manualSnapshotRetentionPeriod);
    }
    /**
     * @return Username for the master DB user
     * 
     */
    public Optional<String> masterUsername() {
        return Optional.ofNullable(this.masterUsername);
    }
    /**
     * @return Cluster node type
     * 
     */
    public Optional<String> nodeType() {
        return Optional.ofNullable(this.nodeType);
    }
    /**
     * @return Number of nodes in the cluster
     * 
     */
    public Optional<Integer> numberOfNodes() {
        return Optional.ofNullable(this.numberOfNodes);
    }
    /**
     * @return Port the cluster responds on
     * 
     */
    public Optional<Integer> port() {
        return Optional.ofNullable(this.port);
    }
    /**
     * @return The maintenance window
     * 
     */
    public Optional<String> preferredMaintenanceWindow() {
        return Optional.ofNullable(this.preferredMaintenanceWindow);
    }
    /**
     * @return Whether the cluster is publicly accessible
     * 
     */
    public Optional<Boolean> publiclyAccessible() {
        return Optional.ofNullable(this.publiclyAccessible);
    }
    /**
     * @return Folder inside the S3 bucket where the log files are stored
     * 
     */
    public Optional<String> s3KeyPrefix() {
        return Optional.ofNullable(this.s3KeyPrefix);
    }
    /**
     * @return Tags associated to the cluster
     * 
     */
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * @return VPC Id associated with the cluster
     * 
     */
    public Optional<String> vpcId() {
        return Optional.ofNullable(this.vpcId);
    }
    /**
     * @return The VPC security group Ids associated with the cluster
     * 
     */
    public List<String> vpcSecurityGroupIds() {
        return this.vpcSecurityGroupIds == null ? List.of() : this.vpcSecurityGroupIds;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetClusterResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean allowVersionUpgrade;
        private @Nullable String aquaConfigurationStatus;
        private @Nullable String arn;
        private @Nullable Integer automatedSnapshotRetentionPeriod;
        private @Nullable String availabilityZone;
        private @Nullable Boolean availabilityZoneRelocationEnabled;
        private @Nullable String bucketName;
        private String clusterIdentifier;
        private @Nullable String clusterNamespaceArn;
        private @Nullable List<GetClusterClusterNode> clusterNodes;
        private @Nullable String clusterParameterGroupName;
        private @Nullable String clusterPublicKey;
        private @Nullable String clusterRevisionNumber;
        private @Nullable String clusterSubnetGroupName;
        private @Nullable String clusterType;
        private @Nullable String clusterVersion;
        private @Nullable String databaseName;
        private @Nullable String defaultIamRoleArn;
        private @Nullable String elasticIp;
        private @Nullable Boolean enableLogging;
        private @Nullable Boolean encrypted;
        private @Nullable String endpoint;
        private @Nullable Boolean enhancedVpcRouting;
        private @Nullable List<String> iamRoles;
        private @Nullable String id;
        private @Nullable String kmsKeyId;
        private @Nullable String logDestinationType;
        private @Nullable List<String> logExports;
        private @Nullable String maintenanceTrackName;
        private @Nullable Integer manualSnapshotRetentionPeriod;
        private @Nullable String masterUsername;
        private @Nullable String nodeType;
        private @Nullable Integer numberOfNodes;
        private @Nullable Integer port;
        private @Nullable String preferredMaintenanceWindow;
        private @Nullable Boolean publiclyAccessible;
        private @Nullable String s3KeyPrefix;
        private @Nullable Map<String,String> tags;
        private @Nullable String vpcId;
        private @Nullable List<String> vpcSecurityGroupIds;
        public Builder() {}
        public Builder(GetClusterResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowVersionUpgrade = defaults.allowVersionUpgrade;
    	      this.aquaConfigurationStatus = defaults.aquaConfigurationStatus;
    	      this.arn = defaults.arn;
    	      this.automatedSnapshotRetentionPeriod = defaults.automatedSnapshotRetentionPeriod;
    	      this.availabilityZone = defaults.availabilityZone;
    	      this.availabilityZoneRelocationEnabled = defaults.availabilityZoneRelocationEnabled;
    	      this.bucketName = defaults.bucketName;
    	      this.clusterIdentifier = defaults.clusterIdentifier;
    	      this.clusterNamespaceArn = defaults.clusterNamespaceArn;
    	      this.clusterNodes = defaults.clusterNodes;
    	      this.clusterParameterGroupName = defaults.clusterParameterGroupName;
    	      this.clusterPublicKey = defaults.clusterPublicKey;
    	      this.clusterRevisionNumber = defaults.clusterRevisionNumber;
    	      this.clusterSubnetGroupName = defaults.clusterSubnetGroupName;
    	      this.clusterType = defaults.clusterType;
    	      this.clusterVersion = defaults.clusterVersion;
    	      this.databaseName = defaults.databaseName;
    	      this.defaultIamRoleArn = defaults.defaultIamRoleArn;
    	      this.elasticIp = defaults.elasticIp;
    	      this.enableLogging = defaults.enableLogging;
    	      this.encrypted = defaults.encrypted;
    	      this.endpoint = defaults.endpoint;
    	      this.enhancedVpcRouting = defaults.enhancedVpcRouting;
    	      this.iamRoles = defaults.iamRoles;
    	      this.id = defaults.id;
    	      this.kmsKeyId = defaults.kmsKeyId;
    	      this.logDestinationType = defaults.logDestinationType;
    	      this.logExports = defaults.logExports;
    	      this.maintenanceTrackName = defaults.maintenanceTrackName;
    	      this.manualSnapshotRetentionPeriod = defaults.manualSnapshotRetentionPeriod;
    	      this.masterUsername = defaults.masterUsername;
    	      this.nodeType = defaults.nodeType;
    	      this.numberOfNodes = defaults.numberOfNodes;
    	      this.port = defaults.port;
    	      this.preferredMaintenanceWindow = defaults.preferredMaintenanceWindow;
    	      this.publiclyAccessible = defaults.publiclyAccessible;
    	      this.s3KeyPrefix = defaults.s3KeyPrefix;
    	      this.tags = defaults.tags;
    	      this.vpcId = defaults.vpcId;
    	      this.vpcSecurityGroupIds = defaults.vpcSecurityGroupIds;
        }

        @CustomType.Setter
        public Builder allowVersionUpgrade(@Nullable Boolean allowVersionUpgrade) {
            this.allowVersionUpgrade = allowVersionUpgrade;
            return this;
        }
        @CustomType.Setter
        public Builder aquaConfigurationStatus(@Nullable String aquaConfigurationStatus) {
            this.aquaConfigurationStatus = aquaConfigurationStatus;
            return this;
        }
        @CustomType.Setter
        public Builder arn(@Nullable String arn) {
            this.arn = arn;
            return this;
        }
        @CustomType.Setter
        public Builder automatedSnapshotRetentionPeriod(@Nullable Integer automatedSnapshotRetentionPeriod) {
            this.automatedSnapshotRetentionPeriod = automatedSnapshotRetentionPeriod;
            return this;
        }
        @CustomType.Setter
        public Builder availabilityZone(@Nullable String availabilityZone) {
            this.availabilityZone = availabilityZone;
            return this;
        }
        @CustomType.Setter
        public Builder availabilityZoneRelocationEnabled(@Nullable Boolean availabilityZoneRelocationEnabled) {
            this.availabilityZoneRelocationEnabled = availabilityZoneRelocationEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder bucketName(@Nullable String bucketName) {
            this.bucketName = bucketName;
            return this;
        }
        @CustomType.Setter
        public Builder clusterIdentifier(String clusterIdentifier) {
            this.clusterIdentifier = Objects.requireNonNull(clusterIdentifier);
            return this;
        }
        @CustomType.Setter
        public Builder clusterNamespaceArn(@Nullable String clusterNamespaceArn) {
            this.clusterNamespaceArn = clusterNamespaceArn;
            return this;
        }
        @CustomType.Setter
        public Builder clusterNodes(@Nullable List<GetClusterClusterNode> clusterNodes) {
            this.clusterNodes = clusterNodes;
            return this;
        }
        public Builder clusterNodes(GetClusterClusterNode... clusterNodes) {
            return clusterNodes(List.of(clusterNodes));
        }
        @CustomType.Setter
        public Builder clusterParameterGroupName(@Nullable String clusterParameterGroupName) {
            this.clusterParameterGroupName = clusterParameterGroupName;
            return this;
        }
        @CustomType.Setter
        public Builder clusterPublicKey(@Nullable String clusterPublicKey) {
            this.clusterPublicKey = clusterPublicKey;
            return this;
        }
        @CustomType.Setter
        public Builder clusterRevisionNumber(@Nullable String clusterRevisionNumber) {
            this.clusterRevisionNumber = clusterRevisionNumber;
            return this;
        }
        @CustomType.Setter
        public Builder clusterSubnetGroupName(@Nullable String clusterSubnetGroupName) {
            this.clusterSubnetGroupName = clusterSubnetGroupName;
            return this;
        }
        @CustomType.Setter
        public Builder clusterType(@Nullable String clusterType) {
            this.clusterType = clusterType;
            return this;
        }
        @CustomType.Setter
        public Builder clusterVersion(@Nullable String clusterVersion) {
            this.clusterVersion = clusterVersion;
            return this;
        }
        @CustomType.Setter
        public Builder databaseName(@Nullable String databaseName) {
            this.databaseName = databaseName;
            return this;
        }
        @CustomType.Setter
        public Builder defaultIamRoleArn(@Nullable String defaultIamRoleArn) {
            this.defaultIamRoleArn = defaultIamRoleArn;
            return this;
        }
        @CustomType.Setter
        public Builder elasticIp(@Nullable String elasticIp) {
            this.elasticIp = elasticIp;
            return this;
        }
        @CustomType.Setter
        public Builder enableLogging(@Nullable Boolean enableLogging) {
            this.enableLogging = enableLogging;
            return this;
        }
        @CustomType.Setter
        public Builder encrypted(@Nullable Boolean encrypted) {
            this.encrypted = encrypted;
            return this;
        }
        @CustomType.Setter
        public Builder endpoint(@Nullable String endpoint) {
            this.endpoint = endpoint;
            return this;
        }
        @CustomType.Setter
        public Builder enhancedVpcRouting(@Nullable Boolean enhancedVpcRouting) {
            this.enhancedVpcRouting = enhancedVpcRouting;
            return this;
        }
        @CustomType.Setter
        public Builder iamRoles(@Nullable List<String> iamRoles) {
            this.iamRoles = iamRoles;
            return this;
        }
        public Builder iamRoles(String... iamRoles) {
            return iamRoles(List.of(iamRoles));
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder kmsKeyId(@Nullable String kmsKeyId) {
            this.kmsKeyId = kmsKeyId;
            return this;
        }
        @CustomType.Setter
        public Builder logDestinationType(@Nullable String logDestinationType) {
            this.logDestinationType = logDestinationType;
            return this;
        }
        @CustomType.Setter
        public Builder logExports(@Nullable List<String> logExports) {
            this.logExports = logExports;
            return this;
        }
        public Builder logExports(String... logExports) {
            return logExports(List.of(logExports));
        }
        @CustomType.Setter
        public Builder maintenanceTrackName(@Nullable String maintenanceTrackName) {
            this.maintenanceTrackName = maintenanceTrackName;
            return this;
        }
        @CustomType.Setter
        public Builder manualSnapshotRetentionPeriod(@Nullable Integer manualSnapshotRetentionPeriod) {
            this.manualSnapshotRetentionPeriod = manualSnapshotRetentionPeriod;
            return this;
        }
        @CustomType.Setter
        public Builder masterUsername(@Nullable String masterUsername) {
            this.masterUsername = masterUsername;
            return this;
        }
        @CustomType.Setter
        public Builder nodeType(@Nullable String nodeType) {
            this.nodeType = nodeType;
            return this;
        }
        @CustomType.Setter
        public Builder numberOfNodes(@Nullable Integer numberOfNodes) {
            this.numberOfNodes = numberOfNodes;
            return this;
        }
        @CustomType.Setter
        public Builder port(@Nullable Integer port) {
            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder preferredMaintenanceWindow(@Nullable String preferredMaintenanceWindow) {
            this.preferredMaintenanceWindow = preferredMaintenanceWindow;
            return this;
        }
        @CustomType.Setter
        public Builder publiclyAccessible(@Nullable Boolean publiclyAccessible) {
            this.publiclyAccessible = publiclyAccessible;
            return this;
        }
        @CustomType.Setter
        public Builder s3KeyPrefix(@Nullable String s3KeyPrefix) {
            this.s3KeyPrefix = s3KeyPrefix;
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder vpcId(@Nullable String vpcId) {
            this.vpcId = vpcId;
            return this;
        }
        @CustomType.Setter
        public Builder vpcSecurityGroupIds(@Nullable List<String> vpcSecurityGroupIds) {
            this.vpcSecurityGroupIds = vpcSecurityGroupIds;
            return this;
        }
        public Builder vpcSecurityGroupIds(String... vpcSecurityGroupIds) {
            return vpcSecurityGroupIds(List.of(vpcSecurityGroupIds));
        }
        public GetClusterResult build() {
            final var o = new GetClusterResult();
            o.allowVersionUpgrade = allowVersionUpgrade;
            o.aquaConfigurationStatus = aquaConfigurationStatus;
            o.arn = arn;
            o.automatedSnapshotRetentionPeriod = automatedSnapshotRetentionPeriod;
            o.availabilityZone = availabilityZone;
            o.availabilityZoneRelocationEnabled = availabilityZoneRelocationEnabled;
            o.bucketName = bucketName;
            o.clusterIdentifier = clusterIdentifier;
            o.clusterNamespaceArn = clusterNamespaceArn;
            o.clusterNodes = clusterNodes;
            o.clusterParameterGroupName = clusterParameterGroupName;
            o.clusterPublicKey = clusterPublicKey;
            o.clusterRevisionNumber = clusterRevisionNumber;
            o.clusterSubnetGroupName = clusterSubnetGroupName;
            o.clusterType = clusterType;
            o.clusterVersion = clusterVersion;
            o.databaseName = databaseName;
            o.defaultIamRoleArn = defaultIamRoleArn;
            o.elasticIp = elasticIp;
            o.enableLogging = enableLogging;
            o.encrypted = encrypted;
            o.endpoint = endpoint;
            o.enhancedVpcRouting = enhancedVpcRouting;
            o.iamRoles = iamRoles;
            o.id = id;
            o.kmsKeyId = kmsKeyId;
            o.logDestinationType = logDestinationType;
            o.logExports = logExports;
            o.maintenanceTrackName = maintenanceTrackName;
            o.manualSnapshotRetentionPeriod = manualSnapshotRetentionPeriod;
            o.masterUsername = masterUsername;
            o.nodeType = nodeType;
            o.numberOfNodes = numberOfNodes;
            o.port = port;
            o.preferredMaintenanceWindow = preferredMaintenanceWindow;
            o.publiclyAccessible = publiclyAccessible;
            o.s3KeyPrefix = s3KeyPrefix;
            o.tags = tags;
            o.vpcId = vpcId;
            o.vpcSecurityGroupIds = vpcSecurityGroupIds;
            return o;
        }
    }
}
