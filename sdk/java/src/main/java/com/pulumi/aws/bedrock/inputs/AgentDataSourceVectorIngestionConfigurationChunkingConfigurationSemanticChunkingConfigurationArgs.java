// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.bedrock.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.util.Objects;


public final class AgentDataSourceVectorIngestionConfigurationChunkingConfigurationSemanticChunkingConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final AgentDataSourceVectorIngestionConfigurationChunkingConfigurationSemanticChunkingConfigurationArgs Empty = new AgentDataSourceVectorIngestionConfigurationChunkingConfigurationSemanticChunkingConfigurationArgs();

    /**
     * The dissimilarity threshold for splitting chunks.
     * 
     */
    @Import(name="breakpointPercentileThreshold", required=true)
    private Output<Double> breakpointPercentileThreshold;

    /**
     * @return The dissimilarity threshold for splitting chunks.
     * 
     */
    public Output<Double> breakpointPercentileThreshold() {
        return this.breakpointPercentileThreshold;
    }

    /**
     * The buffer size.
     * 
     */
    @Import(name="bufferSize", required=true)
    private Output<Double> bufferSize;

    /**
     * @return The buffer size.
     * 
     */
    public Output<Double> bufferSize() {
        return this.bufferSize;
    }

    /**
     * The maximum number of tokens a chunk can contain.
     * 
     */
    @Import(name="maxToken", required=true)
    private Output<Double> maxToken;

    /**
     * @return The maximum number of tokens a chunk can contain.
     * 
     */
    public Output<Double> maxToken() {
        return this.maxToken;
    }

    private AgentDataSourceVectorIngestionConfigurationChunkingConfigurationSemanticChunkingConfigurationArgs() {}

    private AgentDataSourceVectorIngestionConfigurationChunkingConfigurationSemanticChunkingConfigurationArgs(AgentDataSourceVectorIngestionConfigurationChunkingConfigurationSemanticChunkingConfigurationArgs $) {
        this.breakpointPercentileThreshold = $.breakpointPercentileThreshold;
        this.bufferSize = $.bufferSize;
        this.maxToken = $.maxToken;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AgentDataSourceVectorIngestionConfigurationChunkingConfigurationSemanticChunkingConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AgentDataSourceVectorIngestionConfigurationChunkingConfigurationSemanticChunkingConfigurationArgs $;

        public Builder() {
            $ = new AgentDataSourceVectorIngestionConfigurationChunkingConfigurationSemanticChunkingConfigurationArgs();
        }

        public Builder(AgentDataSourceVectorIngestionConfigurationChunkingConfigurationSemanticChunkingConfigurationArgs defaults) {
            $ = new AgentDataSourceVectorIngestionConfigurationChunkingConfigurationSemanticChunkingConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param breakpointPercentileThreshold The dissimilarity threshold for splitting chunks.
         * 
         * @return builder
         * 
         */
        public Builder breakpointPercentileThreshold(Output<Double> breakpointPercentileThreshold) {
            $.breakpointPercentileThreshold = breakpointPercentileThreshold;
            return this;
        }

        /**
         * @param breakpointPercentileThreshold The dissimilarity threshold for splitting chunks.
         * 
         * @return builder
         * 
         */
        public Builder breakpointPercentileThreshold(Double breakpointPercentileThreshold) {
            return breakpointPercentileThreshold(Output.of(breakpointPercentileThreshold));
        }

        /**
         * @param bufferSize The buffer size.
         * 
         * @return builder
         * 
         */
        public Builder bufferSize(Output<Double> bufferSize) {
            $.bufferSize = bufferSize;
            return this;
        }

        /**
         * @param bufferSize The buffer size.
         * 
         * @return builder
         * 
         */
        public Builder bufferSize(Double bufferSize) {
            return bufferSize(Output.of(bufferSize));
        }

        /**
         * @param maxToken The maximum number of tokens a chunk can contain.
         * 
         * @return builder
         * 
         */
        public Builder maxToken(Output<Double> maxToken) {
            $.maxToken = maxToken;
            return this;
        }

        /**
         * @param maxToken The maximum number of tokens a chunk can contain.
         * 
         * @return builder
         * 
         */
        public Builder maxToken(Double maxToken) {
            return maxToken(Output.of(maxToken));
        }

        public AgentDataSourceVectorIngestionConfigurationChunkingConfigurationSemanticChunkingConfigurationArgs build() {
            if ($.breakpointPercentileThreshold == null) {
                throw new MissingRequiredPropertyException("AgentDataSourceVectorIngestionConfigurationChunkingConfigurationSemanticChunkingConfigurationArgs", "breakpointPercentileThreshold");
            }
            if ($.bufferSize == null) {
                throw new MissingRequiredPropertyException("AgentDataSourceVectorIngestionConfigurationChunkingConfigurationSemanticChunkingConfigurationArgs", "bufferSize");
            }
            if ($.maxToken == null) {
                throw new MissingRequiredPropertyException("AgentDataSourceVectorIngestionConfigurationChunkingConfigurationSemanticChunkingConfigurationArgs", "maxToken");
            }
            return $;
        }
    }

}
