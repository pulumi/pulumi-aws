// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.medialive.inputs;

import com.pulumi.aws.medialive.inputs.ChannelEncoderSettingsAvailBlankingAvailBlankingImageArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ChannelEncoderSettingsAvailBlankingArgs extends com.pulumi.resources.ResourceArgs {

    public static final ChannelEncoderSettingsAvailBlankingArgs Empty = new ChannelEncoderSettingsAvailBlankingArgs();

    /**
     * Blanking image to be used. See Avail Blanking Image for more details.
     * 
     */
    @Import(name="availBlankingImage")
    private @Nullable Output<ChannelEncoderSettingsAvailBlankingAvailBlankingImageArgs> availBlankingImage;

    /**
     * @return Blanking image to be used. See Avail Blanking Image for more details.
     * 
     */
    public Optional<Output<ChannelEncoderSettingsAvailBlankingAvailBlankingImageArgs>> availBlankingImage() {
        return Optional.ofNullable(this.availBlankingImage);
    }

    /**
     * When set to enabled, causes video, audio and captions to be blanked when insertion metadata is added.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return When set to enabled, causes video, audio and captions to be blanked when insertion metadata is added.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    private ChannelEncoderSettingsAvailBlankingArgs() {}

    private ChannelEncoderSettingsAvailBlankingArgs(ChannelEncoderSettingsAvailBlankingArgs $) {
        this.availBlankingImage = $.availBlankingImage;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ChannelEncoderSettingsAvailBlankingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ChannelEncoderSettingsAvailBlankingArgs $;

        public Builder() {
            $ = new ChannelEncoderSettingsAvailBlankingArgs();
        }

        public Builder(ChannelEncoderSettingsAvailBlankingArgs defaults) {
            $ = new ChannelEncoderSettingsAvailBlankingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param availBlankingImage Blanking image to be used. See Avail Blanking Image for more details.
         * 
         * @return builder
         * 
         */
        public Builder availBlankingImage(@Nullable Output<ChannelEncoderSettingsAvailBlankingAvailBlankingImageArgs> availBlankingImage) {
            $.availBlankingImage = availBlankingImage;
            return this;
        }

        /**
         * @param availBlankingImage Blanking image to be used. See Avail Blanking Image for more details.
         * 
         * @return builder
         * 
         */
        public Builder availBlankingImage(ChannelEncoderSettingsAvailBlankingAvailBlankingImageArgs availBlankingImage) {
            return availBlankingImage(Output.of(availBlankingImage));
        }

        /**
         * @param state When set to enabled, causes video, audio and captions to be blanked when insertion metadata is added.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state When set to enabled, causes video, audio and captions to be blanked when insertion metadata is added.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        public ChannelEncoderSettingsAvailBlankingArgs build() {
            return $;
        }
    }

}
