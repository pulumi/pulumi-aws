// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.securitylake;

import com.pulumi.aws.securitylake.inputs.SubscriberNotificationConfigurationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SubscriberNotificationArgs extends com.pulumi.resources.ResourceArgs {

    public static final SubscriberNotificationArgs Empty = new SubscriberNotificationArgs();

    /**
     * Specify the configuration using which you want to create the subscriber notification..
     * 
     */
    @Import(name="configuration")
    private @Nullable Output<SubscriberNotificationConfigurationArgs> configuration;

    /**
     * @return Specify the configuration using which you want to create the subscriber notification..
     * 
     */
    public Optional<Output<SubscriberNotificationConfigurationArgs>> configuration() {
        return Optional.ofNullable(this.configuration);
    }

    /**
     * The subscriber ID for the notification subscription.
     * 
     */
    @Import(name="subscriberId", required=true)
    private Output<String> subscriberId;

    /**
     * @return The subscriber ID for the notification subscription.
     * 
     */
    public Output<String> subscriberId() {
        return this.subscriberId;
    }

    private SubscriberNotificationArgs() {}

    private SubscriberNotificationArgs(SubscriberNotificationArgs $) {
        this.configuration = $.configuration;
        this.subscriberId = $.subscriberId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SubscriberNotificationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SubscriberNotificationArgs $;

        public Builder() {
            $ = new SubscriberNotificationArgs();
        }

        public Builder(SubscriberNotificationArgs defaults) {
            $ = new SubscriberNotificationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param configuration Specify the configuration using which you want to create the subscriber notification..
         * 
         * @return builder
         * 
         */
        public Builder configuration(@Nullable Output<SubscriberNotificationConfigurationArgs> configuration) {
            $.configuration = configuration;
            return this;
        }

        /**
         * @param configuration Specify the configuration using which you want to create the subscriber notification..
         * 
         * @return builder
         * 
         */
        public Builder configuration(SubscriberNotificationConfigurationArgs configuration) {
            return configuration(Output.of(configuration));
        }

        /**
         * @param subscriberId The subscriber ID for the notification subscription.
         * 
         * @return builder
         * 
         */
        public Builder subscriberId(Output<String> subscriberId) {
            $.subscriberId = subscriberId;
            return this;
        }

        /**
         * @param subscriberId The subscriber ID for the notification subscription.
         * 
         * @return builder
         * 
         */
        public Builder subscriberId(String subscriberId) {
            return subscriberId(Output.of(subscriberId));
        }

        public SubscriberNotificationArgs build() {
            if ($.subscriberId == null) {
                throw new MissingRequiredPropertyException("SubscriberNotificationArgs", "subscriberId");
            }
            return $;
        }
    }

}
