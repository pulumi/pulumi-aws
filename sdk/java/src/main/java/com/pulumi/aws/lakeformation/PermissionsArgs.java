// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.lakeformation;

import com.pulumi.aws.lakeformation.inputs.PermissionsDataLocationArgs;
import com.pulumi.aws.lakeformation.inputs.PermissionsDatabaseArgs;
import com.pulumi.aws.lakeformation.inputs.PermissionsLfTagArgs;
import com.pulumi.aws.lakeformation.inputs.PermissionsLfTagPolicyArgs;
import com.pulumi.aws.lakeformation.inputs.PermissionsTableArgs;
import com.pulumi.aws.lakeformation.inputs.PermissionsTableWithColumnsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PermissionsArgs extends com.pulumi.resources.ResourceArgs {

    public static final PermissionsArgs Empty = new PermissionsArgs();

    @Import(name="catalogId")
    private @Nullable Output<String> catalogId;

    public Optional<Output<String>> catalogId() {
        return Optional.ofNullable(this.catalogId);
    }

    @Import(name="catalogResource")
    private @Nullable Output<Boolean> catalogResource;

    public Optional<Output<Boolean>> catalogResource() {
        return Optional.ofNullable(this.catalogResource);
    }

    @Import(name="dataLocation")
    private @Nullable Output<PermissionsDataLocationArgs> dataLocation;

    public Optional<Output<PermissionsDataLocationArgs>> dataLocation() {
        return Optional.ofNullable(this.dataLocation);
    }

    @Import(name="database")
    private @Nullable Output<PermissionsDatabaseArgs> database;

    public Optional<Output<PermissionsDatabaseArgs>> database() {
        return Optional.ofNullable(this.database);
    }

    @Import(name="lfTag")
    private @Nullable Output<PermissionsLfTagArgs> lfTag;

    public Optional<Output<PermissionsLfTagArgs>> lfTag() {
        return Optional.ofNullable(this.lfTag);
    }

    @Import(name="lfTagPolicy")
    private @Nullable Output<PermissionsLfTagPolicyArgs> lfTagPolicy;

    public Optional<Output<PermissionsLfTagPolicyArgs>> lfTagPolicy() {
        return Optional.ofNullable(this.lfTagPolicy);
    }

    @Import(name="permissions", required=true)
    private Output<List<String>> permissions;

    public Output<List<String>> permissions() {
        return this.permissions;
    }

    @Import(name="permissionsWithGrantOptions")
    private @Nullable Output<List<String>> permissionsWithGrantOptions;

    public Optional<Output<List<String>>> permissionsWithGrantOptions() {
        return Optional.ofNullable(this.permissionsWithGrantOptions);
    }

    @Import(name="principal", required=true)
    private Output<String> principal;

    public Output<String> principal() {
        return this.principal;
    }

    @Import(name="table")
    private @Nullable Output<PermissionsTableArgs> table;

    public Optional<Output<PermissionsTableArgs>> table() {
        return Optional.ofNullable(this.table);
    }

    @Import(name="tableWithColumns")
    private @Nullable Output<PermissionsTableWithColumnsArgs> tableWithColumns;

    public Optional<Output<PermissionsTableWithColumnsArgs>> tableWithColumns() {
        return Optional.ofNullable(this.tableWithColumns);
    }

    private PermissionsArgs() {}

    private PermissionsArgs(PermissionsArgs $) {
        this.catalogId = $.catalogId;
        this.catalogResource = $.catalogResource;
        this.dataLocation = $.dataLocation;
        this.database = $.database;
        this.lfTag = $.lfTag;
        this.lfTagPolicy = $.lfTagPolicy;
        this.permissions = $.permissions;
        this.permissionsWithGrantOptions = $.permissionsWithGrantOptions;
        this.principal = $.principal;
        this.table = $.table;
        this.tableWithColumns = $.tableWithColumns;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PermissionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PermissionsArgs $;

        public Builder() {
            $ = new PermissionsArgs();
        }

        public Builder(PermissionsArgs defaults) {
            $ = new PermissionsArgs(Objects.requireNonNull(defaults));
        }

        public Builder catalogId(@Nullable Output<String> catalogId) {
            $.catalogId = catalogId;
            return this;
        }

        public Builder catalogId(String catalogId) {
            return catalogId(Output.of(catalogId));
        }

        public Builder catalogResource(@Nullable Output<Boolean> catalogResource) {
            $.catalogResource = catalogResource;
            return this;
        }

        public Builder catalogResource(Boolean catalogResource) {
            return catalogResource(Output.of(catalogResource));
        }

        public Builder dataLocation(@Nullable Output<PermissionsDataLocationArgs> dataLocation) {
            $.dataLocation = dataLocation;
            return this;
        }

        public Builder dataLocation(PermissionsDataLocationArgs dataLocation) {
            return dataLocation(Output.of(dataLocation));
        }

        public Builder database(@Nullable Output<PermissionsDatabaseArgs> database) {
            $.database = database;
            return this;
        }

        public Builder database(PermissionsDatabaseArgs database) {
            return database(Output.of(database));
        }

        public Builder lfTag(@Nullable Output<PermissionsLfTagArgs> lfTag) {
            $.lfTag = lfTag;
            return this;
        }

        public Builder lfTag(PermissionsLfTagArgs lfTag) {
            return lfTag(Output.of(lfTag));
        }

        public Builder lfTagPolicy(@Nullable Output<PermissionsLfTagPolicyArgs> lfTagPolicy) {
            $.lfTagPolicy = lfTagPolicy;
            return this;
        }

        public Builder lfTagPolicy(PermissionsLfTagPolicyArgs lfTagPolicy) {
            return lfTagPolicy(Output.of(lfTagPolicy));
        }

        public Builder permissions(Output<List<String>> permissions) {
            $.permissions = permissions;
            return this;
        }

        public Builder permissions(List<String> permissions) {
            return permissions(Output.of(permissions));
        }

        public Builder permissions(String... permissions) {
            return permissions(List.of(permissions));
        }

        public Builder permissionsWithGrantOptions(@Nullable Output<List<String>> permissionsWithGrantOptions) {
            $.permissionsWithGrantOptions = permissionsWithGrantOptions;
            return this;
        }

        public Builder permissionsWithGrantOptions(List<String> permissionsWithGrantOptions) {
            return permissionsWithGrantOptions(Output.of(permissionsWithGrantOptions));
        }

        public Builder permissionsWithGrantOptions(String... permissionsWithGrantOptions) {
            return permissionsWithGrantOptions(List.of(permissionsWithGrantOptions));
        }

        public Builder principal(Output<String> principal) {
            $.principal = principal;
            return this;
        }

        public Builder principal(String principal) {
            return principal(Output.of(principal));
        }

        public Builder table(@Nullable Output<PermissionsTableArgs> table) {
            $.table = table;
            return this;
        }

        public Builder table(PermissionsTableArgs table) {
            return table(Output.of(table));
        }

        public Builder tableWithColumns(@Nullable Output<PermissionsTableWithColumnsArgs> tableWithColumns) {
            $.tableWithColumns = tableWithColumns;
            return this;
        }

        public Builder tableWithColumns(PermissionsTableWithColumnsArgs tableWithColumns) {
            return tableWithColumns(Output.of(tableWithColumns));
        }

        public PermissionsArgs build() {
            $.permissions = Objects.requireNonNull($.permissions, "expected parameter 'permissions' to be non-null");
            $.principal = Objects.requireNonNull($.principal, "expected parameter 'principal' to be non-null");
            return $;
        }
    }

}
