// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.cloudfront;

import com.pulumi.aws.cloudfront.inputs.FieldLevelEncryptionConfigContentTypeProfileConfigArgs;
import com.pulumi.aws.cloudfront.inputs.FieldLevelEncryptionConfigQueryArgProfileConfigArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FieldLevelEncryptionConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final FieldLevelEncryptionConfigArgs Empty = new FieldLevelEncryptionConfigArgs();

    /**
     * An optional comment about the Field Level Encryption Config.
     * 
     */
    @Import(name="comment")
    private @Nullable Output<String> comment;

    /**
     * @return An optional comment about the Field Level Encryption Config.
     * 
     */
    public Optional<Output<String>> comment() {
        return Optional.ofNullable(this.comment);
    }

    /**
     * Content Type Profile Config specifies when to forward content if a content type isn&#39;t recognized and profiles to use as by default in a request if a query argument doesn&#39;t specify a profile to use.
     * 
     */
    @Import(name="contentTypeProfileConfig", required=true)
    private Output<FieldLevelEncryptionConfigContentTypeProfileConfigArgs> contentTypeProfileConfig;

    /**
     * @return Content Type Profile Config specifies when to forward content if a content type isn&#39;t recognized and profiles to use as by default in a request if a query argument doesn&#39;t specify a profile to use.
     * 
     */
    public Output<FieldLevelEncryptionConfigContentTypeProfileConfigArgs> contentTypeProfileConfig() {
        return this.contentTypeProfileConfig;
    }

    /**
     * Query Arg Profile Config that specifies when to forward content if a profile isn&#39;t found and the profile that can be provided as a query argument in a request.
     * 
     */
    @Import(name="queryArgProfileConfig", required=true)
    private Output<FieldLevelEncryptionConfigQueryArgProfileConfigArgs> queryArgProfileConfig;

    /**
     * @return Query Arg Profile Config that specifies when to forward content if a profile isn&#39;t found and the profile that can be provided as a query argument in a request.
     * 
     */
    public Output<FieldLevelEncryptionConfigQueryArgProfileConfigArgs> queryArgProfileConfig() {
        return this.queryArgProfileConfig;
    }

    private FieldLevelEncryptionConfigArgs() {}

    private FieldLevelEncryptionConfigArgs(FieldLevelEncryptionConfigArgs $) {
        this.comment = $.comment;
        this.contentTypeProfileConfig = $.contentTypeProfileConfig;
        this.queryArgProfileConfig = $.queryArgProfileConfig;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FieldLevelEncryptionConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FieldLevelEncryptionConfigArgs $;

        public Builder() {
            $ = new FieldLevelEncryptionConfigArgs();
        }

        public Builder(FieldLevelEncryptionConfigArgs defaults) {
            $ = new FieldLevelEncryptionConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param comment An optional comment about the Field Level Encryption Config.
         * 
         * @return builder
         * 
         */
        public Builder comment(@Nullable Output<String> comment) {
            $.comment = comment;
            return this;
        }

        /**
         * @param comment An optional comment about the Field Level Encryption Config.
         * 
         * @return builder
         * 
         */
        public Builder comment(String comment) {
            return comment(Output.of(comment));
        }

        /**
         * @param contentTypeProfileConfig Content Type Profile Config specifies when to forward content if a content type isn&#39;t recognized and profiles to use as by default in a request if a query argument doesn&#39;t specify a profile to use.
         * 
         * @return builder
         * 
         */
        public Builder contentTypeProfileConfig(Output<FieldLevelEncryptionConfigContentTypeProfileConfigArgs> contentTypeProfileConfig) {
            $.contentTypeProfileConfig = contentTypeProfileConfig;
            return this;
        }

        /**
         * @param contentTypeProfileConfig Content Type Profile Config specifies when to forward content if a content type isn&#39;t recognized and profiles to use as by default in a request if a query argument doesn&#39;t specify a profile to use.
         * 
         * @return builder
         * 
         */
        public Builder contentTypeProfileConfig(FieldLevelEncryptionConfigContentTypeProfileConfigArgs contentTypeProfileConfig) {
            return contentTypeProfileConfig(Output.of(contentTypeProfileConfig));
        }

        /**
         * @param queryArgProfileConfig Query Arg Profile Config that specifies when to forward content if a profile isn&#39;t found and the profile that can be provided as a query argument in a request.
         * 
         * @return builder
         * 
         */
        public Builder queryArgProfileConfig(Output<FieldLevelEncryptionConfigQueryArgProfileConfigArgs> queryArgProfileConfig) {
            $.queryArgProfileConfig = queryArgProfileConfig;
            return this;
        }

        /**
         * @param queryArgProfileConfig Query Arg Profile Config that specifies when to forward content if a profile isn&#39;t found and the profile that can be provided as a query argument in a request.
         * 
         * @return builder
         * 
         */
        public Builder queryArgProfileConfig(FieldLevelEncryptionConfigQueryArgProfileConfigArgs queryArgProfileConfig) {
            return queryArgProfileConfig(Output.of(queryArgProfileConfig));
        }

        public FieldLevelEncryptionConfigArgs build() {
            $.contentTypeProfileConfig = Objects.requireNonNull($.contentTypeProfileConfig, "expected parameter 'contentTypeProfileConfig' to be non-null");
            $.queryArgProfileConfig = Objects.requireNonNull($.queryArgProfileConfig, "expected parameter 'queryArgProfileConfig' to be non-null");
            return $;
        }
    }

}
