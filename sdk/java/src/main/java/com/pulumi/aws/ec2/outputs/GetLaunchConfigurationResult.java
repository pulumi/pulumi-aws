// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ec2.outputs;

import com.pulumi.aws.ec2.outputs.GetLaunchConfigurationEbsBlockDevice;
import com.pulumi.aws.ec2.outputs.GetLaunchConfigurationEphemeralBlockDevice;
import com.pulumi.aws.ec2.outputs.GetLaunchConfigurationMetadataOption;
import com.pulumi.aws.ec2.outputs.GetLaunchConfigurationRootBlockDevice;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetLaunchConfigurationResult {
    /**
     * @return Amazon Resource Name of the launch configuration.
     * 
     */
    private @Nullable String arn;
    /**
     * @return Whether a Public IP address is associated with the instance.
     * 
     */
    private @Nullable Boolean associatePublicIpAddress;
    /**
     * @return EBS Block Devices attached to the instance.
     * 
     */
    private @Nullable List<GetLaunchConfigurationEbsBlockDevice> ebsBlockDevices;
    /**
     * @return Whether the launched EC2 instance will be EBS-optimized.
     * 
     */
    private @Nullable Boolean ebsOptimized;
    /**
     * @return Whether Detailed Monitoring is Enabled.
     * 
     */
    private @Nullable Boolean enableMonitoring;
    /**
     * @return The Ephemeral volumes on the instance.
     * 
     */
    private @Nullable List<GetLaunchConfigurationEphemeralBlockDevice> ephemeralBlockDevices;
    /**
     * @return The IAM Instance Profile to associate with launched instances.
     * 
     */
    private @Nullable String iamInstanceProfile;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private @Nullable String id;
    /**
     * @return EC2 Image ID of the instance.
     * 
     */
    private @Nullable String imageId;
    /**
     * @return Instance Type of the instance to launch.
     * 
     */
    private @Nullable String instanceType;
    /**
     * @return Key Name that should be used for the instance.
     * 
     */
    private @Nullable String keyName;
    /**
     * @return Metadata options for the instance.
     * 
     */
    private @Nullable List<GetLaunchConfigurationMetadataOption> metadataOptions;
    /**
     * @return Name of the launch configuration.
     * 
     */
    private String name;
    /**
     * @return Tenancy of the instance.
     * 
     */
    private @Nullable String placementTenancy;
    /**
     * @return Root Block Device of the instance.
     * 
     */
    private @Nullable List<GetLaunchConfigurationRootBlockDevice> rootBlockDevices;
    /**
     * @return List of associated Security Group IDS.
     * 
     */
    private @Nullable List<String> securityGroups;
    /**
     * @return Price to use for reserving Spot instances.
     * 
     */
    private @Nullable String spotPrice;
    /**
     * @return User Data of the instance.
     * 
     */
    private @Nullable String userData;

    private GetLaunchConfigurationResult() {}
    /**
     * @return Amazon Resource Name of the launch configuration.
     * 
     */
    public Optional<String> arn() {
        return Optional.ofNullable(this.arn);
    }
    /**
     * @return Whether a Public IP address is associated with the instance.
     * 
     */
    public Optional<Boolean> associatePublicIpAddress() {
        return Optional.ofNullable(this.associatePublicIpAddress);
    }
    /**
     * @return EBS Block Devices attached to the instance.
     * 
     */
    public List<GetLaunchConfigurationEbsBlockDevice> ebsBlockDevices() {
        return this.ebsBlockDevices == null ? List.of() : this.ebsBlockDevices;
    }
    /**
     * @return Whether the launched EC2 instance will be EBS-optimized.
     * 
     */
    public Optional<Boolean> ebsOptimized() {
        return Optional.ofNullable(this.ebsOptimized);
    }
    /**
     * @return Whether Detailed Monitoring is Enabled.
     * 
     */
    public Optional<Boolean> enableMonitoring() {
        return Optional.ofNullable(this.enableMonitoring);
    }
    /**
     * @return The Ephemeral volumes on the instance.
     * 
     */
    public List<GetLaunchConfigurationEphemeralBlockDevice> ephemeralBlockDevices() {
        return this.ephemeralBlockDevices == null ? List.of() : this.ephemeralBlockDevices;
    }
    /**
     * @return The IAM Instance Profile to associate with launched instances.
     * 
     */
    public Optional<String> iamInstanceProfile() {
        return Optional.ofNullable(this.iamInstanceProfile);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return EC2 Image ID of the instance.
     * 
     */
    public Optional<String> imageId() {
        return Optional.ofNullable(this.imageId);
    }
    /**
     * @return Instance Type of the instance to launch.
     * 
     */
    public Optional<String> instanceType() {
        return Optional.ofNullable(this.instanceType);
    }
    /**
     * @return Key Name that should be used for the instance.
     * 
     */
    public Optional<String> keyName() {
        return Optional.ofNullable(this.keyName);
    }
    /**
     * @return Metadata options for the instance.
     * 
     */
    public List<GetLaunchConfigurationMetadataOption> metadataOptions() {
        return this.metadataOptions == null ? List.of() : this.metadataOptions;
    }
    /**
     * @return Name of the launch configuration.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Tenancy of the instance.
     * 
     */
    public Optional<String> placementTenancy() {
        return Optional.ofNullable(this.placementTenancy);
    }
    /**
     * @return Root Block Device of the instance.
     * 
     */
    public List<GetLaunchConfigurationRootBlockDevice> rootBlockDevices() {
        return this.rootBlockDevices == null ? List.of() : this.rootBlockDevices;
    }
    /**
     * @return List of associated Security Group IDS.
     * 
     */
    public List<String> securityGroups() {
        return this.securityGroups == null ? List.of() : this.securityGroups;
    }
    /**
     * @return Price to use for reserving Spot instances.
     * 
     */
    public Optional<String> spotPrice() {
        return Optional.ofNullable(this.spotPrice);
    }
    /**
     * @return User Data of the instance.
     * 
     */
    public Optional<String> userData() {
        return Optional.ofNullable(this.userData);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetLaunchConfigurationResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String arn;
        private @Nullable Boolean associatePublicIpAddress;
        private @Nullable List<GetLaunchConfigurationEbsBlockDevice> ebsBlockDevices;
        private @Nullable Boolean ebsOptimized;
        private @Nullable Boolean enableMonitoring;
        private @Nullable List<GetLaunchConfigurationEphemeralBlockDevice> ephemeralBlockDevices;
        private @Nullable String iamInstanceProfile;
        private @Nullable String id;
        private @Nullable String imageId;
        private @Nullable String instanceType;
        private @Nullable String keyName;
        private @Nullable List<GetLaunchConfigurationMetadataOption> metadataOptions;
        private String name;
        private @Nullable String placementTenancy;
        private @Nullable List<GetLaunchConfigurationRootBlockDevice> rootBlockDevices;
        private @Nullable List<String> securityGroups;
        private @Nullable String spotPrice;
        private @Nullable String userData;
        public Builder() {}
        public Builder(GetLaunchConfigurationResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.associatePublicIpAddress = defaults.associatePublicIpAddress;
    	      this.ebsBlockDevices = defaults.ebsBlockDevices;
    	      this.ebsOptimized = defaults.ebsOptimized;
    	      this.enableMonitoring = defaults.enableMonitoring;
    	      this.ephemeralBlockDevices = defaults.ephemeralBlockDevices;
    	      this.iamInstanceProfile = defaults.iamInstanceProfile;
    	      this.id = defaults.id;
    	      this.imageId = defaults.imageId;
    	      this.instanceType = defaults.instanceType;
    	      this.keyName = defaults.keyName;
    	      this.metadataOptions = defaults.metadataOptions;
    	      this.name = defaults.name;
    	      this.placementTenancy = defaults.placementTenancy;
    	      this.rootBlockDevices = defaults.rootBlockDevices;
    	      this.securityGroups = defaults.securityGroups;
    	      this.spotPrice = defaults.spotPrice;
    	      this.userData = defaults.userData;
        }

        @CustomType.Setter
        public Builder arn(@Nullable String arn) {
            this.arn = arn;
            return this;
        }
        @CustomType.Setter
        public Builder associatePublicIpAddress(@Nullable Boolean associatePublicIpAddress) {
            this.associatePublicIpAddress = associatePublicIpAddress;
            return this;
        }
        @CustomType.Setter
        public Builder ebsBlockDevices(@Nullable List<GetLaunchConfigurationEbsBlockDevice> ebsBlockDevices) {
            this.ebsBlockDevices = ebsBlockDevices;
            return this;
        }
        public Builder ebsBlockDevices(GetLaunchConfigurationEbsBlockDevice... ebsBlockDevices) {
            return ebsBlockDevices(List.of(ebsBlockDevices));
        }
        @CustomType.Setter
        public Builder ebsOptimized(@Nullable Boolean ebsOptimized) {
            this.ebsOptimized = ebsOptimized;
            return this;
        }
        @CustomType.Setter
        public Builder enableMonitoring(@Nullable Boolean enableMonitoring) {
            this.enableMonitoring = enableMonitoring;
            return this;
        }
        @CustomType.Setter
        public Builder ephemeralBlockDevices(@Nullable List<GetLaunchConfigurationEphemeralBlockDevice> ephemeralBlockDevices) {
            this.ephemeralBlockDevices = ephemeralBlockDevices;
            return this;
        }
        public Builder ephemeralBlockDevices(GetLaunchConfigurationEphemeralBlockDevice... ephemeralBlockDevices) {
            return ephemeralBlockDevices(List.of(ephemeralBlockDevices));
        }
        @CustomType.Setter
        public Builder iamInstanceProfile(@Nullable String iamInstanceProfile) {
            this.iamInstanceProfile = iamInstanceProfile;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder imageId(@Nullable String imageId) {
            this.imageId = imageId;
            return this;
        }
        @CustomType.Setter
        public Builder instanceType(@Nullable String instanceType) {
            this.instanceType = instanceType;
            return this;
        }
        @CustomType.Setter
        public Builder keyName(@Nullable String keyName) {
            this.keyName = keyName;
            return this;
        }
        @CustomType.Setter
        public Builder metadataOptions(@Nullable List<GetLaunchConfigurationMetadataOption> metadataOptions) {
            this.metadataOptions = metadataOptions;
            return this;
        }
        public Builder metadataOptions(GetLaunchConfigurationMetadataOption... metadataOptions) {
            return metadataOptions(List.of(metadataOptions));
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder placementTenancy(@Nullable String placementTenancy) {
            this.placementTenancy = placementTenancy;
            return this;
        }
        @CustomType.Setter
        public Builder rootBlockDevices(@Nullable List<GetLaunchConfigurationRootBlockDevice> rootBlockDevices) {
            this.rootBlockDevices = rootBlockDevices;
            return this;
        }
        public Builder rootBlockDevices(GetLaunchConfigurationRootBlockDevice... rootBlockDevices) {
            return rootBlockDevices(List.of(rootBlockDevices));
        }
        @CustomType.Setter
        public Builder securityGroups(@Nullable List<String> securityGroups) {
            this.securityGroups = securityGroups;
            return this;
        }
        public Builder securityGroups(String... securityGroups) {
            return securityGroups(List.of(securityGroups));
        }
        @CustomType.Setter
        public Builder spotPrice(@Nullable String spotPrice) {
            this.spotPrice = spotPrice;
            return this;
        }
        @CustomType.Setter
        public Builder userData(@Nullable String userData) {
            this.userData = userData;
            return this;
        }
        public GetLaunchConfigurationResult build() {
            final var o = new GetLaunchConfigurationResult();
            o.arn = arn;
            o.associatePublicIpAddress = associatePublicIpAddress;
            o.ebsBlockDevices = ebsBlockDevices;
            o.ebsOptimized = ebsOptimized;
            o.enableMonitoring = enableMonitoring;
            o.ephemeralBlockDevices = ephemeralBlockDevices;
            o.iamInstanceProfile = iamInstanceProfile;
            o.id = id;
            o.imageId = imageId;
            o.instanceType = instanceType;
            o.keyName = keyName;
            o.metadataOptions = metadataOptions;
            o.name = name;
            o.placementTenancy = placementTenancy;
            o.rootBlockDevices = rootBlockDevices;
            o.securityGroups = securityGroups;
            o.spotPrice = spotPrice;
            o.userData = userData;
            return o;
        }
    }
}
