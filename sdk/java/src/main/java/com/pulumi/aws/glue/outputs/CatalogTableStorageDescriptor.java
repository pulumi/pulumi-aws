// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.glue.outputs;

import com.pulumi.aws.glue.outputs.CatalogTableStorageDescriptorColumn;
import com.pulumi.aws.glue.outputs.CatalogTableStorageDescriptorSchemaReference;
import com.pulumi.aws.glue.outputs.CatalogTableStorageDescriptorSerDeInfo;
import com.pulumi.aws.glue.outputs.CatalogTableStorageDescriptorSkewedInfo;
import com.pulumi.aws.glue.outputs.CatalogTableStorageDescriptorSortColumn;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class CatalogTableStorageDescriptor {
    /**
     * @return List of reducer grouping columns, clustering columns, and bucketing columns in the table.
     * 
     */
    private @Nullable List<String> bucketColumns;
    /**
     * @return Configuration block for columns in the table. See `columns` below.
     * 
     */
    private @Nullable List<CatalogTableStorageDescriptorColumn> columns;
    /**
     * @return Whether the data in the table is compressed.
     * 
     */
    private @Nullable Boolean compressed;
    /**
     * @return Input format: SequenceFileInputFormat (binary), or TextInputFormat, or a custom format.
     * 
     */
    private @Nullable String inputFormat;
    /**
     * @return Physical location of the table. By default this takes the form of the warehouse location, followed by the database location in the warehouse, followed by the table name.
     * 
     */
    private @Nullable String location;
    /**
     * @return Must be specified if the table contains any dimension columns.
     * 
     */
    private @Nullable Integer numberOfBuckets;
    /**
     * @return Output format: SequenceFileOutputFormat (binary), or IgnoreKeyTextOutputFormat, or a custom format.
     * 
     */
    private @Nullable String outputFormat;
    /**
     * @return User-supplied properties in key-value form.
     * 
     */
    private @Nullable Map<String,String> parameters;
    /**
     * @return Object that references a schema stored in the AWS Glue Schema Registry. When creating a table, you can pass an empty list of columns for the schema, and instead use a schema reference. See Schema Reference below.
     * 
     */
    private @Nullable CatalogTableStorageDescriptorSchemaReference schemaReference;
    /**
     * @return Configuration block for serialization and deserialization (&#34;SerDe&#34;) information. See `ser_de_info` below.
     * 
     */
    private @Nullable CatalogTableStorageDescriptorSerDeInfo serDeInfo;
    /**
     * @return Configuration block with information about values that appear very frequently in a column (skewed values). See `skewed_info` below.
     * 
     */
    private @Nullable CatalogTableStorageDescriptorSkewedInfo skewedInfo;
    /**
     * @return Configuration block for the sort order of each bucket in the table. See `sort_columns` below.
     * 
     */
    private @Nullable List<CatalogTableStorageDescriptorSortColumn> sortColumns;
    /**
     * @return Whether the table data is stored in subdirectories.
     * 
     */
    private @Nullable Boolean storedAsSubDirectories;

    private CatalogTableStorageDescriptor() {}
    /**
     * @return List of reducer grouping columns, clustering columns, and bucketing columns in the table.
     * 
     */
    public List<String> bucketColumns() {
        return this.bucketColumns == null ? List.of() : this.bucketColumns;
    }
    /**
     * @return Configuration block for columns in the table. See `columns` below.
     * 
     */
    public List<CatalogTableStorageDescriptorColumn> columns() {
        return this.columns == null ? List.of() : this.columns;
    }
    /**
     * @return Whether the data in the table is compressed.
     * 
     */
    public Optional<Boolean> compressed() {
        return Optional.ofNullable(this.compressed);
    }
    /**
     * @return Input format: SequenceFileInputFormat (binary), or TextInputFormat, or a custom format.
     * 
     */
    public Optional<String> inputFormat() {
        return Optional.ofNullable(this.inputFormat);
    }
    /**
     * @return Physical location of the table. By default this takes the form of the warehouse location, followed by the database location in the warehouse, followed by the table name.
     * 
     */
    public Optional<String> location() {
        return Optional.ofNullable(this.location);
    }
    /**
     * @return Must be specified if the table contains any dimension columns.
     * 
     */
    public Optional<Integer> numberOfBuckets() {
        return Optional.ofNullable(this.numberOfBuckets);
    }
    /**
     * @return Output format: SequenceFileOutputFormat (binary), or IgnoreKeyTextOutputFormat, or a custom format.
     * 
     */
    public Optional<String> outputFormat() {
        return Optional.ofNullable(this.outputFormat);
    }
    /**
     * @return User-supplied properties in key-value form.
     * 
     */
    public Map<String,String> parameters() {
        return this.parameters == null ? Map.of() : this.parameters;
    }
    /**
     * @return Object that references a schema stored in the AWS Glue Schema Registry. When creating a table, you can pass an empty list of columns for the schema, and instead use a schema reference. See Schema Reference below.
     * 
     */
    public Optional<CatalogTableStorageDescriptorSchemaReference> schemaReference() {
        return Optional.ofNullable(this.schemaReference);
    }
    /**
     * @return Configuration block for serialization and deserialization (&#34;SerDe&#34;) information. See `ser_de_info` below.
     * 
     */
    public Optional<CatalogTableStorageDescriptorSerDeInfo> serDeInfo() {
        return Optional.ofNullable(this.serDeInfo);
    }
    /**
     * @return Configuration block with information about values that appear very frequently in a column (skewed values). See `skewed_info` below.
     * 
     */
    public Optional<CatalogTableStorageDescriptorSkewedInfo> skewedInfo() {
        return Optional.ofNullable(this.skewedInfo);
    }
    /**
     * @return Configuration block for the sort order of each bucket in the table. See `sort_columns` below.
     * 
     */
    public List<CatalogTableStorageDescriptorSortColumn> sortColumns() {
        return this.sortColumns == null ? List.of() : this.sortColumns;
    }
    /**
     * @return Whether the table data is stored in subdirectories.
     * 
     */
    public Optional<Boolean> storedAsSubDirectories() {
        return Optional.ofNullable(this.storedAsSubDirectories);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CatalogTableStorageDescriptor defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> bucketColumns;
        private @Nullable List<CatalogTableStorageDescriptorColumn> columns;
        private @Nullable Boolean compressed;
        private @Nullable String inputFormat;
        private @Nullable String location;
        private @Nullable Integer numberOfBuckets;
        private @Nullable String outputFormat;
        private @Nullable Map<String,String> parameters;
        private @Nullable CatalogTableStorageDescriptorSchemaReference schemaReference;
        private @Nullable CatalogTableStorageDescriptorSerDeInfo serDeInfo;
        private @Nullable CatalogTableStorageDescriptorSkewedInfo skewedInfo;
        private @Nullable List<CatalogTableStorageDescriptorSortColumn> sortColumns;
        private @Nullable Boolean storedAsSubDirectories;
        public Builder() {}
        public Builder(CatalogTableStorageDescriptor defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bucketColumns = defaults.bucketColumns;
    	      this.columns = defaults.columns;
    	      this.compressed = defaults.compressed;
    	      this.inputFormat = defaults.inputFormat;
    	      this.location = defaults.location;
    	      this.numberOfBuckets = defaults.numberOfBuckets;
    	      this.outputFormat = defaults.outputFormat;
    	      this.parameters = defaults.parameters;
    	      this.schemaReference = defaults.schemaReference;
    	      this.serDeInfo = defaults.serDeInfo;
    	      this.skewedInfo = defaults.skewedInfo;
    	      this.sortColumns = defaults.sortColumns;
    	      this.storedAsSubDirectories = defaults.storedAsSubDirectories;
        }

        @CustomType.Setter
        public Builder bucketColumns(@Nullable List<String> bucketColumns) {

            this.bucketColumns = bucketColumns;
            return this;
        }
        public Builder bucketColumns(String... bucketColumns) {
            return bucketColumns(List.of(bucketColumns));
        }
        @CustomType.Setter
        public Builder columns(@Nullable List<CatalogTableStorageDescriptorColumn> columns) {

            this.columns = columns;
            return this;
        }
        public Builder columns(CatalogTableStorageDescriptorColumn... columns) {
            return columns(List.of(columns));
        }
        @CustomType.Setter
        public Builder compressed(@Nullable Boolean compressed) {

            this.compressed = compressed;
            return this;
        }
        @CustomType.Setter
        public Builder inputFormat(@Nullable String inputFormat) {

            this.inputFormat = inputFormat;
            return this;
        }
        @CustomType.Setter
        public Builder location(@Nullable String location) {

            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder numberOfBuckets(@Nullable Integer numberOfBuckets) {

            this.numberOfBuckets = numberOfBuckets;
            return this;
        }
        @CustomType.Setter
        public Builder outputFormat(@Nullable String outputFormat) {

            this.outputFormat = outputFormat;
            return this;
        }
        @CustomType.Setter
        public Builder parameters(@Nullable Map<String,String> parameters) {

            this.parameters = parameters;
            return this;
        }
        @CustomType.Setter
        public Builder schemaReference(@Nullable CatalogTableStorageDescriptorSchemaReference schemaReference) {

            this.schemaReference = schemaReference;
            return this;
        }
        @CustomType.Setter
        public Builder serDeInfo(@Nullable CatalogTableStorageDescriptorSerDeInfo serDeInfo) {

            this.serDeInfo = serDeInfo;
            return this;
        }
        @CustomType.Setter
        public Builder skewedInfo(@Nullable CatalogTableStorageDescriptorSkewedInfo skewedInfo) {

            this.skewedInfo = skewedInfo;
            return this;
        }
        @CustomType.Setter
        public Builder sortColumns(@Nullable List<CatalogTableStorageDescriptorSortColumn> sortColumns) {

            this.sortColumns = sortColumns;
            return this;
        }
        public Builder sortColumns(CatalogTableStorageDescriptorSortColumn... sortColumns) {
            return sortColumns(List.of(sortColumns));
        }
        @CustomType.Setter
        public Builder storedAsSubDirectories(@Nullable Boolean storedAsSubDirectories) {

            this.storedAsSubDirectories = storedAsSubDirectories;
            return this;
        }
        public CatalogTableStorageDescriptor build() {
            final var _resultValue = new CatalogTableStorageDescriptor();
            _resultValue.bucketColumns = bucketColumns;
            _resultValue.columns = columns;
            _resultValue.compressed = compressed;
            _resultValue.inputFormat = inputFormat;
            _resultValue.location = location;
            _resultValue.numberOfBuckets = numberOfBuckets;
            _resultValue.outputFormat = outputFormat;
            _resultValue.parameters = parameters;
            _resultValue.schemaReference = schemaReference;
            _resultValue.serDeInfo = serDeInfo;
            _resultValue.skewedInfo = skewedInfo;
            _resultValue.sortColumns = sortColumns;
            _resultValue.storedAsSubDirectories = storedAsSubDirectories;
            return _resultValue;
        }
    }
}
