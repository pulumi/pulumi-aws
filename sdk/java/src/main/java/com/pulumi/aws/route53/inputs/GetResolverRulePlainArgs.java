// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.route53.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetResolverRulePlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetResolverRulePlainArgs Empty = new GetResolverRulePlainArgs();

    /**
     * Domain name the desired resolver rule forwards DNS queries for. Conflicts with `resolverRuleId`.
     * 
     */
    @Import(name="domainName")
    private @Nullable String domainName;

    /**
     * @return Domain name the desired resolver rule forwards DNS queries for. Conflicts with `resolverRuleId`.
     * 
     */
    public Optional<String> domainName() {
        return Optional.ofNullable(this.domainName);
    }

    /**
     * Friendly name of the desired resolver rule. Conflicts with `resolverRuleId`.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    /**
     * @return Friendly name of the desired resolver rule. Conflicts with `resolverRuleId`.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     * 
     */
    @Import(name="region")
    private @Nullable String region;

    /**
     * @return Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     * 
     */
    public Optional<String> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * ID of the outbound resolver endpoint of the desired resolver rule. Conflicts with `resolverRuleId`.
     * 
     */
    @Import(name="resolverEndpointId")
    private @Nullable String resolverEndpointId;

    /**
     * @return ID of the outbound resolver endpoint of the desired resolver rule. Conflicts with `resolverRuleId`.
     * 
     */
    public Optional<String> resolverEndpointId() {
        return Optional.ofNullable(this.resolverEndpointId);
    }

    /**
     * ID of the desired resolver rule. Conflicts with `domainName`, `name`, `resolverEndpointId` and `ruleType`.
     * 
     */
    @Import(name="resolverRuleId")
    private @Nullable String resolverRuleId;

    /**
     * @return ID of the desired resolver rule. Conflicts with `domainName`, `name`, `resolverEndpointId` and `ruleType`.
     * 
     */
    public Optional<String> resolverRuleId() {
        return Optional.ofNullable(this.resolverRuleId);
    }

    /**
     * Rule type of the desired resolver rule. Valid values are `FORWARD`, `SYSTEM` and `RECURSIVE`. Conflicts with `resolverRuleId`.
     * 
     */
    @Import(name="ruleType")
    private @Nullable String ruleType;

    /**
     * @return Rule type of the desired resolver rule. Valid values are `FORWARD`, `SYSTEM` and `RECURSIVE`. Conflicts with `resolverRuleId`.
     * 
     */
    public Optional<String> ruleType() {
        return Optional.ofNullable(this.ruleType);
    }

    /**
     * Map of tags assigned to the resolver rule.
     * 
     */
    @Import(name="tags")
    private @Nullable Map<String,String> tags;

    /**
     * @return Map of tags assigned to the resolver rule.
     * 
     */
    public Optional<Map<String,String>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private GetResolverRulePlainArgs() {}

    private GetResolverRulePlainArgs(GetResolverRulePlainArgs $) {
        this.domainName = $.domainName;
        this.name = $.name;
        this.region = $.region;
        this.resolverEndpointId = $.resolverEndpointId;
        this.resolverRuleId = $.resolverRuleId;
        this.ruleType = $.ruleType;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetResolverRulePlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetResolverRulePlainArgs $;

        public Builder() {
            $ = new GetResolverRulePlainArgs();
        }

        public Builder(GetResolverRulePlainArgs defaults) {
            $ = new GetResolverRulePlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param domainName Domain name the desired resolver rule forwards DNS queries for. Conflicts with `resolverRuleId`.
         * 
         * @return builder
         * 
         */
        public Builder domainName(@Nullable String domainName) {
            $.domainName = domainName;
            return this;
        }

        /**
         * @param name Friendly name of the desired resolver rule. Conflicts with `resolverRuleId`.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        /**
         * @param region Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable String region) {
            $.region = region;
            return this;
        }

        /**
         * @param resolverEndpointId ID of the outbound resolver endpoint of the desired resolver rule. Conflicts with `resolverRuleId`.
         * 
         * @return builder
         * 
         */
        public Builder resolverEndpointId(@Nullable String resolverEndpointId) {
            $.resolverEndpointId = resolverEndpointId;
            return this;
        }

        /**
         * @param resolverRuleId ID of the desired resolver rule. Conflicts with `domainName`, `name`, `resolverEndpointId` and `ruleType`.
         * 
         * @return builder
         * 
         */
        public Builder resolverRuleId(@Nullable String resolverRuleId) {
            $.resolverRuleId = resolverRuleId;
            return this;
        }

        /**
         * @param ruleType Rule type of the desired resolver rule. Valid values are `FORWARD`, `SYSTEM` and `RECURSIVE`. Conflicts with `resolverRuleId`.
         * 
         * @return builder
         * 
         */
        public Builder ruleType(@Nullable String ruleType) {
            $.ruleType = ruleType;
            return this;
        }

        /**
         * @param tags Map of tags assigned to the resolver rule.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Map<String,String> tags) {
            $.tags = tags;
            return this;
        }

        public GetResolverRulePlainArgs build() {
            return $;
        }
    }

}
