// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.glue.inputs;

import com.pulumi.aws.glue.inputs.PartitionStorageDescriptorColumnArgs;
import com.pulumi.aws.glue.inputs.PartitionStorageDescriptorSerDeInfoArgs;
import com.pulumi.aws.glue.inputs.PartitionStorageDescriptorSkewedInfoArgs;
import com.pulumi.aws.glue.inputs.PartitionStorageDescriptorSortColumnArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PartitionStorageDescriptorArgs extends com.pulumi.resources.ResourceArgs {

    public static final PartitionStorageDescriptorArgs Empty = new PartitionStorageDescriptorArgs();

    @Import(name="bucketColumns")
    private @Nullable Output<List<String>> bucketColumns;

    public Optional<Output<List<String>>> bucketColumns() {
        return Optional.ofNullable(this.bucketColumns);
    }

    @Import(name="columns")
    private @Nullable Output<List<PartitionStorageDescriptorColumnArgs>> columns;

    public Optional<Output<List<PartitionStorageDescriptorColumnArgs>>> columns() {
        return Optional.ofNullable(this.columns);
    }

    @Import(name="compressed")
    private @Nullable Output<Boolean> compressed;

    public Optional<Output<Boolean>> compressed() {
        return Optional.ofNullable(this.compressed);
    }

    @Import(name="inputFormat")
    private @Nullable Output<String> inputFormat;

    public Optional<Output<String>> inputFormat() {
        return Optional.ofNullable(this.inputFormat);
    }

    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    @Import(name="numberOfBuckets")
    private @Nullable Output<Integer> numberOfBuckets;

    public Optional<Output<Integer>> numberOfBuckets() {
        return Optional.ofNullable(this.numberOfBuckets);
    }

    @Import(name="outputFormat")
    private @Nullable Output<String> outputFormat;

    public Optional<Output<String>> outputFormat() {
        return Optional.ofNullable(this.outputFormat);
    }

    @Import(name="parameters")
    private @Nullable Output<Map<String,String>> parameters;

    public Optional<Output<Map<String,String>>> parameters() {
        return Optional.ofNullable(this.parameters);
    }

    @Import(name="serDeInfo")
    private @Nullable Output<PartitionStorageDescriptorSerDeInfoArgs> serDeInfo;

    public Optional<Output<PartitionStorageDescriptorSerDeInfoArgs>> serDeInfo() {
        return Optional.ofNullable(this.serDeInfo);
    }

    @Import(name="skewedInfo")
    private @Nullable Output<PartitionStorageDescriptorSkewedInfoArgs> skewedInfo;

    public Optional<Output<PartitionStorageDescriptorSkewedInfoArgs>> skewedInfo() {
        return Optional.ofNullable(this.skewedInfo);
    }

    @Import(name="sortColumns")
    private @Nullable Output<List<PartitionStorageDescriptorSortColumnArgs>> sortColumns;

    public Optional<Output<List<PartitionStorageDescriptorSortColumnArgs>>> sortColumns() {
        return Optional.ofNullable(this.sortColumns);
    }

    @Import(name="storedAsSubDirectories")
    private @Nullable Output<Boolean> storedAsSubDirectories;

    public Optional<Output<Boolean>> storedAsSubDirectories() {
        return Optional.ofNullable(this.storedAsSubDirectories);
    }

    private PartitionStorageDescriptorArgs() {}

    private PartitionStorageDescriptorArgs(PartitionStorageDescriptorArgs $) {
        this.bucketColumns = $.bucketColumns;
        this.columns = $.columns;
        this.compressed = $.compressed;
        this.inputFormat = $.inputFormat;
        this.location = $.location;
        this.numberOfBuckets = $.numberOfBuckets;
        this.outputFormat = $.outputFormat;
        this.parameters = $.parameters;
        this.serDeInfo = $.serDeInfo;
        this.skewedInfo = $.skewedInfo;
        this.sortColumns = $.sortColumns;
        this.storedAsSubDirectories = $.storedAsSubDirectories;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PartitionStorageDescriptorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PartitionStorageDescriptorArgs $;

        public Builder() {
            $ = new PartitionStorageDescriptorArgs();
        }

        public Builder(PartitionStorageDescriptorArgs defaults) {
            $ = new PartitionStorageDescriptorArgs(Objects.requireNonNull(defaults));
        }

        public Builder bucketColumns(@Nullable Output<List<String>> bucketColumns) {
            $.bucketColumns = bucketColumns;
            return this;
        }

        public Builder bucketColumns(List<String> bucketColumns) {
            return bucketColumns(Output.of(bucketColumns));
        }

        public Builder bucketColumns(String... bucketColumns) {
            return bucketColumns(List.of(bucketColumns));
        }

        public Builder columns(@Nullable Output<List<PartitionStorageDescriptorColumnArgs>> columns) {
            $.columns = columns;
            return this;
        }

        public Builder columns(List<PartitionStorageDescriptorColumnArgs> columns) {
            return columns(Output.of(columns));
        }

        public Builder columns(PartitionStorageDescriptorColumnArgs... columns) {
            return columns(List.of(columns));
        }

        public Builder compressed(@Nullable Output<Boolean> compressed) {
            $.compressed = compressed;
            return this;
        }

        public Builder compressed(Boolean compressed) {
            return compressed(Output.of(compressed));
        }

        public Builder inputFormat(@Nullable Output<String> inputFormat) {
            $.inputFormat = inputFormat;
            return this;
        }

        public Builder inputFormat(String inputFormat) {
            return inputFormat(Output.of(inputFormat));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder numberOfBuckets(@Nullable Output<Integer> numberOfBuckets) {
            $.numberOfBuckets = numberOfBuckets;
            return this;
        }

        public Builder numberOfBuckets(Integer numberOfBuckets) {
            return numberOfBuckets(Output.of(numberOfBuckets));
        }

        public Builder outputFormat(@Nullable Output<String> outputFormat) {
            $.outputFormat = outputFormat;
            return this;
        }

        public Builder outputFormat(String outputFormat) {
            return outputFormat(Output.of(outputFormat));
        }

        public Builder parameters(@Nullable Output<Map<String,String>> parameters) {
            $.parameters = parameters;
            return this;
        }

        public Builder parameters(Map<String,String> parameters) {
            return parameters(Output.of(parameters));
        }

        public Builder serDeInfo(@Nullable Output<PartitionStorageDescriptorSerDeInfoArgs> serDeInfo) {
            $.serDeInfo = serDeInfo;
            return this;
        }

        public Builder serDeInfo(PartitionStorageDescriptorSerDeInfoArgs serDeInfo) {
            return serDeInfo(Output.of(serDeInfo));
        }

        public Builder skewedInfo(@Nullable Output<PartitionStorageDescriptorSkewedInfoArgs> skewedInfo) {
            $.skewedInfo = skewedInfo;
            return this;
        }

        public Builder skewedInfo(PartitionStorageDescriptorSkewedInfoArgs skewedInfo) {
            return skewedInfo(Output.of(skewedInfo));
        }

        public Builder sortColumns(@Nullable Output<List<PartitionStorageDescriptorSortColumnArgs>> sortColumns) {
            $.sortColumns = sortColumns;
            return this;
        }

        public Builder sortColumns(List<PartitionStorageDescriptorSortColumnArgs> sortColumns) {
            return sortColumns(Output.of(sortColumns));
        }

        public Builder sortColumns(PartitionStorageDescriptorSortColumnArgs... sortColumns) {
            return sortColumns(List.of(sortColumns));
        }

        public Builder storedAsSubDirectories(@Nullable Output<Boolean> storedAsSubDirectories) {
            $.storedAsSubDirectories = storedAsSubDirectories;
            return this;
        }

        public Builder storedAsSubDirectories(Boolean storedAsSubDirectories) {
            return storedAsSubDirectories(Output.of(storedAsSubDirectories));
        }

        public PartitionStorageDescriptorArgs build() {
            return $;
        }
    }

}
