// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ecs.outputs;

import com.pulumi.aws.ecs.outputs.CapacityProviderManagedInstancesProviderInstanceLaunchTemplateInstanceRequirements;
import com.pulumi.aws.ecs.outputs.CapacityProviderManagedInstancesProviderInstanceLaunchTemplateNetworkConfiguration;
import com.pulumi.aws.ecs.outputs.CapacityProviderManagedInstancesProviderInstanceLaunchTemplateStorageConfiguration;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class CapacityProviderManagedInstancesProviderInstanceLaunchTemplate {
    /**
     * @return The Amazon Resource Name (ARN) of the instance profile that Amazon ECS applies to Amazon ECS Managed Instances. This instance profile must include the necessary permissions for your tasks to access AWS services and resources. For more information, see [Amazon ECS instance profile for Managed Instances](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/instance_IAM_role.html) in the Amazon ECS Developer Guide.
     * 
     */
    private String ec2InstanceProfileArn;
    /**
     * @return The instance requirements. You can specify the instance types and instance requirements such as vCPU count, memory, network performance, and accelerator specifications. Amazon ECS automatically selects the instances that match the specified criteria. Detailed below.
     * 
     */
    private @Nullable CapacityProviderManagedInstancesProviderInstanceLaunchTemplateInstanceRequirements instanceRequirements;
    /**
     * @return CloudWatch provides two categories of monitoring: basic monitoring and detailed monitoring. By default, your managed instance is configured for basic monitoring. You can optionally enable detailed monitoring to help you more quickly identify and act on operational issues. You can enable or turn off detailed monitoring at launch or when the managed instance is running or stopped. For more information, see [Detailed monitoring for Amazon ECS Managed Instances](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cloudwatch-metrics.html) in the Amazon ECS Developer Guide. Valid values are `BASIC` and `DETAILED`.
     * 
     */
    private @Nullable String monitoring;
    /**
     * @return The network configuration for Amazon ECS Managed Instances. This specifies the subnets and security groups that instances use for network connectivity. Detailed below.
     * 
     */
    private CapacityProviderManagedInstancesProviderInstanceLaunchTemplateNetworkConfiguration networkConfiguration;
    /**
     * @return The storage configuration for Amazon ECS Managed Instances. This defines the root volume size and type for the instances. Detailed below.
     * 
     */
    private @Nullable CapacityProviderManagedInstancesProviderInstanceLaunchTemplateStorageConfiguration storageConfiguration;

    private CapacityProviderManagedInstancesProviderInstanceLaunchTemplate() {}
    /**
     * @return The Amazon Resource Name (ARN) of the instance profile that Amazon ECS applies to Amazon ECS Managed Instances. This instance profile must include the necessary permissions for your tasks to access AWS services and resources. For more information, see [Amazon ECS instance profile for Managed Instances](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/instance_IAM_role.html) in the Amazon ECS Developer Guide.
     * 
     */
    public String ec2InstanceProfileArn() {
        return this.ec2InstanceProfileArn;
    }
    /**
     * @return The instance requirements. You can specify the instance types and instance requirements such as vCPU count, memory, network performance, and accelerator specifications. Amazon ECS automatically selects the instances that match the specified criteria. Detailed below.
     * 
     */
    public Optional<CapacityProviderManagedInstancesProviderInstanceLaunchTemplateInstanceRequirements> instanceRequirements() {
        return Optional.ofNullable(this.instanceRequirements);
    }
    /**
     * @return CloudWatch provides two categories of monitoring: basic monitoring and detailed monitoring. By default, your managed instance is configured for basic monitoring. You can optionally enable detailed monitoring to help you more quickly identify and act on operational issues. You can enable or turn off detailed monitoring at launch or when the managed instance is running or stopped. For more information, see [Detailed monitoring for Amazon ECS Managed Instances](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cloudwatch-metrics.html) in the Amazon ECS Developer Guide. Valid values are `BASIC` and `DETAILED`.
     * 
     */
    public Optional<String> monitoring() {
        return Optional.ofNullable(this.monitoring);
    }
    /**
     * @return The network configuration for Amazon ECS Managed Instances. This specifies the subnets and security groups that instances use for network connectivity. Detailed below.
     * 
     */
    public CapacityProviderManagedInstancesProviderInstanceLaunchTemplateNetworkConfiguration networkConfiguration() {
        return this.networkConfiguration;
    }
    /**
     * @return The storage configuration for Amazon ECS Managed Instances. This defines the root volume size and type for the instances. Detailed below.
     * 
     */
    public Optional<CapacityProviderManagedInstancesProviderInstanceLaunchTemplateStorageConfiguration> storageConfiguration() {
        return Optional.ofNullable(this.storageConfiguration);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CapacityProviderManagedInstancesProviderInstanceLaunchTemplate defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String ec2InstanceProfileArn;
        private @Nullable CapacityProviderManagedInstancesProviderInstanceLaunchTemplateInstanceRequirements instanceRequirements;
        private @Nullable String monitoring;
        private CapacityProviderManagedInstancesProviderInstanceLaunchTemplateNetworkConfiguration networkConfiguration;
        private @Nullable CapacityProviderManagedInstancesProviderInstanceLaunchTemplateStorageConfiguration storageConfiguration;
        public Builder() {}
        public Builder(CapacityProviderManagedInstancesProviderInstanceLaunchTemplate defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ec2InstanceProfileArn = defaults.ec2InstanceProfileArn;
    	      this.instanceRequirements = defaults.instanceRequirements;
    	      this.monitoring = defaults.monitoring;
    	      this.networkConfiguration = defaults.networkConfiguration;
    	      this.storageConfiguration = defaults.storageConfiguration;
        }

        @CustomType.Setter
        public Builder ec2InstanceProfileArn(String ec2InstanceProfileArn) {
            if (ec2InstanceProfileArn == null) {
              throw new MissingRequiredPropertyException("CapacityProviderManagedInstancesProviderInstanceLaunchTemplate", "ec2InstanceProfileArn");
            }
            this.ec2InstanceProfileArn = ec2InstanceProfileArn;
            return this;
        }
        @CustomType.Setter
        public Builder instanceRequirements(@Nullable CapacityProviderManagedInstancesProviderInstanceLaunchTemplateInstanceRequirements instanceRequirements) {

            this.instanceRequirements = instanceRequirements;
            return this;
        }
        @CustomType.Setter
        public Builder monitoring(@Nullable String monitoring) {

            this.monitoring = monitoring;
            return this;
        }
        @CustomType.Setter
        public Builder networkConfiguration(CapacityProviderManagedInstancesProviderInstanceLaunchTemplateNetworkConfiguration networkConfiguration) {
            if (networkConfiguration == null) {
              throw new MissingRequiredPropertyException("CapacityProviderManagedInstancesProviderInstanceLaunchTemplate", "networkConfiguration");
            }
            this.networkConfiguration = networkConfiguration;
            return this;
        }
        @CustomType.Setter
        public Builder storageConfiguration(@Nullable CapacityProviderManagedInstancesProviderInstanceLaunchTemplateStorageConfiguration storageConfiguration) {

            this.storageConfiguration = storageConfiguration;
            return this;
        }
        public CapacityProviderManagedInstancesProviderInstanceLaunchTemplate build() {
            final var _resultValue = new CapacityProviderManagedInstancesProviderInstanceLaunchTemplate();
            _resultValue.ec2InstanceProfileArn = ec2InstanceProfileArn;
            _resultValue.instanceRequirements = instanceRequirements;
            _resultValue.monitoring = monitoring;
            _resultValue.networkConfiguration = networkConfiguration;
            _resultValue.storageConfiguration = storageConfiguration;
            return _resultValue;
        }
    }
}
