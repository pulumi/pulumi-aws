// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.msk.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ReplicatorReplicationInfoListTopicReplicationArgs extends com.pulumi.resources.ResourceArgs {

    public static final ReplicatorReplicationInfoListTopicReplicationArgs Empty = new ReplicatorReplicationInfoListTopicReplicationArgs();

    /**
     * Whether to periodically configure remote topic ACLs to match their corresponding upstream topics.
     * 
     */
    @Import(name="copyAccessControlListsForTopics")
    private @Nullable Output<Boolean> copyAccessControlListsForTopics;

    /**
     * @return Whether to periodically configure remote topic ACLs to match their corresponding upstream topics.
     * 
     */
    public Optional<Output<Boolean>> copyAccessControlListsForTopics() {
        return Optional.ofNullable(this.copyAccessControlListsForTopics);
    }

    /**
     * Whether to periodically configure remote topics to match their corresponding upstream topics.
     * 
     */
    @Import(name="copyTopicConfigurations")
    private @Nullable Output<Boolean> copyTopicConfigurations;

    /**
     * @return Whether to periodically configure remote topics to match their corresponding upstream topics.
     * 
     */
    public Optional<Output<Boolean>> copyTopicConfigurations() {
        return Optional.ofNullable(this.copyTopicConfigurations);
    }

    /**
     * Whether to periodically check for new topics and partitions.
     * 
     */
    @Import(name="detectAndCopyNewTopics")
    private @Nullable Output<Boolean> detectAndCopyNewTopics;

    /**
     * @return Whether to periodically check for new topics and partitions.
     * 
     */
    public Optional<Output<Boolean>> detectAndCopyNewTopics() {
        return Optional.ofNullable(this.detectAndCopyNewTopics);
    }

    /**
     * List of regular expression patterns indicating the topics that should not be replica.
     * 
     */
    @Import(name="topicsToExcludes")
    private @Nullable Output<List<String>> topicsToExcludes;

    /**
     * @return List of regular expression patterns indicating the topics that should not be replica.
     * 
     */
    public Optional<Output<List<String>>> topicsToExcludes() {
        return Optional.ofNullable(this.topicsToExcludes);
    }

    /**
     * List of regular expression patterns indicating the topics to copy.
     * 
     */
    @Import(name="topicsToReplicates", required=true)
    private Output<List<String>> topicsToReplicates;

    /**
     * @return List of regular expression patterns indicating the topics to copy.
     * 
     */
    public Output<List<String>> topicsToReplicates() {
        return this.topicsToReplicates;
    }

    private ReplicatorReplicationInfoListTopicReplicationArgs() {}

    private ReplicatorReplicationInfoListTopicReplicationArgs(ReplicatorReplicationInfoListTopicReplicationArgs $) {
        this.copyAccessControlListsForTopics = $.copyAccessControlListsForTopics;
        this.copyTopicConfigurations = $.copyTopicConfigurations;
        this.detectAndCopyNewTopics = $.detectAndCopyNewTopics;
        this.topicsToExcludes = $.topicsToExcludes;
        this.topicsToReplicates = $.topicsToReplicates;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ReplicatorReplicationInfoListTopicReplicationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ReplicatorReplicationInfoListTopicReplicationArgs $;

        public Builder() {
            $ = new ReplicatorReplicationInfoListTopicReplicationArgs();
        }

        public Builder(ReplicatorReplicationInfoListTopicReplicationArgs defaults) {
            $ = new ReplicatorReplicationInfoListTopicReplicationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param copyAccessControlListsForTopics Whether to periodically configure remote topic ACLs to match their corresponding upstream topics.
         * 
         * @return builder
         * 
         */
        public Builder copyAccessControlListsForTopics(@Nullable Output<Boolean> copyAccessControlListsForTopics) {
            $.copyAccessControlListsForTopics = copyAccessControlListsForTopics;
            return this;
        }

        /**
         * @param copyAccessControlListsForTopics Whether to periodically configure remote topic ACLs to match their corresponding upstream topics.
         * 
         * @return builder
         * 
         */
        public Builder copyAccessControlListsForTopics(Boolean copyAccessControlListsForTopics) {
            return copyAccessControlListsForTopics(Output.of(copyAccessControlListsForTopics));
        }

        /**
         * @param copyTopicConfigurations Whether to periodically configure remote topics to match their corresponding upstream topics.
         * 
         * @return builder
         * 
         */
        public Builder copyTopicConfigurations(@Nullable Output<Boolean> copyTopicConfigurations) {
            $.copyTopicConfigurations = copyTopicConfigurations;
            return this;
        }

        /**
         * @param copyTopicConfigurations Whether to periodically configure remote topics to match their corresponding upstream topics.
         * 
         * @return builder
         * 
         */
        public Builder copyTopicConfigurations(Boolean copyTopicConfigurations) {
            return copyTopicConfigurations(Output.of(copyTopicConfigurations));
        }

        /**
         * @param detectAndCopyNewTopics Whether to periodically check for new topics and partitions.
         * 
         * @return builder
         * 
         */
        public Builder detectAndCopyNewTopics(@Nullable Output<Boolean> detectAndCopyNewTopics) {
            $.detectAndCopyNewTopics = detectAndCopyNewTopics;
            return this;
        }

        /**
         * @param detectAndCopyNewTopics Whether to periodically check for new topics and partitions.
         * 
         * @return builder
         * 
         */
        public Builder detectAndCopyNewTopics(Boolean detectAndCopyNewTopics) {
            return detectAndCopyNewTopics(Output.of(detectAndCopyNewTopics));
        }

        /**
         * @param topicsToExcludes List of regular expression patterns indicating the topics that should not be replica.
         * 
         * @return builder
         * 
         */
        public Builder topicsToExcludes(@Nullable Output<List<String>> topicsToExcludes) {
            $.topicsToExcludes = topicsToExcludes;
            return this;
        }

        /**
         * @param topicsToExcludes List of regular expression patterns indicating the topics that should not be replica.
         * 
         * @return builder
         * 
         */
        public Builder topicsToExcludes(List<String> topicsToExcludes) {
            return topicsToExcludes(Output.of(topicsToExcludes));
        }

        /**
         * @param topicsToExcludes List of regular expression patterns indicating the topics that should not be replica.
         * 
         * @return builder
         * 
         */
        public Builder topicsToExcludes(String... topicsToExcludes) {
            return topicsToExcludes(List.of(topicsToExcludes));
        }

        /**
         * @param topicsToReplicates List of regular expression patterns indicating the topics to copy.
         * 
         * @return builder
         * 
         */
        public Builder topicsToReplicates(Output<List<String>> topicsToReplicates) {
            $.topicsToReplicates = topicsToReplicates;
            return this;
        }

        /**
         * @param topicsToReplicates List of regular expression patterns indicating the topics to copy.
         * 
         * @return builder
         * 
         */
        public Builder topicsToReplicates(List<String> topicsToReplicates) {
            return topicsToReplicates(Output.of(topicsToReplicates));
        }

        /**
         * @param topicsToReplicates List of regular expression patterns indicating the topics to copy.
         * 
         * @return builder
         * 
         */
        public Builder topicsToReplicates(String... topicsToReplicates) {
            return topicsToReplicates(List.of(topicsToReplicates));
        }

        public ReplicatorReplicationInfoListTopicReplicationArgs build() {
            $.topicsToReplicates = Objects.requireNonNull($.topicsToReplicates, "expected parameter 'topicsToReplicates' to be non-null");
            return $;
        }
    }

}
