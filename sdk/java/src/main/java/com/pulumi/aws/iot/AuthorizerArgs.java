// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.iot;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AuthorizerArgs extends com.pulumi.resources.ResourceArgs {

    public static final AuthorizerArgs Empty = new AuthorizerArgs();

    /**
     * The ARN of the authorizer&#39;s Lambda function.
     * 
     */
    @Import(name="authorizerFunctionArn", required=true)
    private Output<String> authorizerFunctionArn;

    /**
     * @return The ARN of the authorizer&#39;s Lambda function.
     * 
     */
    public Output<String> authorizerFunctionArn() {
        return this.authorizerFunctionArn;
    }

    /**
     * Specifies whether the HTTP caching is enabled or not. Default: `false`.
     * 
     */
    @Import(name="enableCachingForHttp")
    private @Nullable Output<Boolean> enableCachingForHttp;

    /**
     * @return Specifies whether the HTTP caching is enabled or not. Default: `false`.
     * 
     */
    public Optional<Output<Boolean>> enableCachingForHttp() {
        return Optional.ofNullable(this.enableCachingForHttp);
    }

    /**
     * The name of the authorizer.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the authorizer.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Specifies whether AWS IoT validates the token signature in an authorization request. Default: `false`.
     * 
     */
    @Import(name="signingDisabled")
    private @Nullable Output<Boolean> signingDisabled;

    /**
     * @return Specifies whether AWS IoT validates the token signature in an authorization request. Default: `false`.
     * 
     */
    public Optional<Output<Boolean>> signingDisabled() {
        return Optional.ofNullable(this.signingDisabled);
    }

    /**
     * The status of Authorizer request at creation. Valid values: `ACTIVE`, `INACTIVE`. Default: `ACTIVE`.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of Authorizer request at creation. Valid values: `ACTIVE`, `INACTIVE`. Default: `ACTIVE`.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The name of the token key used to extract the token from the HTTP headers. This value is required if signing is enabled in your authorizer.
     * 
     */
    @Import(name="tokenKeyName")
    private @Nullable Output<String> tokenKeyName;

    /**
     * @return The name of the token key used to extract the token from the HTTP headers. This value is required if signing is enabled in your authorizer.
     * 
     */
    public Optional<Output<String>> tokenKeyName() {
        return Optional.ofNullable(this.tokenKeyName);
    }

    /**
     * The public keys used to verify the digital signature returned by your custom authentication service. This value is required if signing is enabled in your authorizer.
     * 
     */
    @Import(name="tokenSigningPublicKeys")
    private @Nullable Output<Map<String,String>> tokenSigningPublicKeys;

    /**
     * @return The public keys used to verify the digital signature returned by your custom authentication service. This value is required if signing is enabled in your authorizer.
     * 
     */
    public Optional<Output<Map<String,String>>> tokenSigningPublicKeys() {
        return Optional.ofNullable(this.tokenSigningPublicKeys);
    }

    private AuthorizerArgs() {}

    private AuthorizerArgs(AuthorizerArgs $) {
        this.authorizerFunctionArn = $.authorizerFunctionArn;
        this.enableCachingForHttp = $.enableCachingForHttp;
        this.name = $.name;
        this.signingDisabled = $.signingDisabled;
        this.status = $.status;
        this.tokenKeyName = $.tokenKeyName;
        this.tokenSigningPublicKeys = $.tokenSigningPublicKeys;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AuthorizerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AuthorizerArgs $;

        public Builder() {
            $ = new AuthorizerArgs();
        }

        public Builder(AuthorizerArgs defaults) {
            $ = new AuthorizerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param authorizerFunctionArn The ARN of the authorizer&#39;s Lambda function.
         * 
         * @return builder
         * 
         */
        public Builder authorizerFunctionArn(Output<String> authorizerFunctionArn) {
            $.authorizerFunctionArn = authorizerFunctionArn;
            return this;
        }

        /**
         * @param authorizerFunctionArn The ARN of the authorizer&#39;s Lambda function.
         * 
         * @return builder
         * 
         */
        public Builder authorizerFunctionArn(String authorizerFunctionArn) {
            return authorizerFunctionArn(Output.of(authorizerFunctionArn));
        }

        /**
         * @param enableCachingForHttp Specifies whether the HTTP caching is enabled or not. Default: `false`.
         * 
         * @return builder
         * 
         */
        public Builder enableCachingForHttp(@Nullable Output<Boolean> enableCachingForHttp) {
            $.enableCachingForHttp = enableCachingForHttp;
            return this;
        }

        /**
         * @param enableCachingForHttp Specifies whether the HTTP caching is enabled or not. Default: `false`.
         * 
         * @return builder
         * 
         */
        public Builder enableCachingForHttp(Boolean enableCachingForHttp) {
            return enableCachingForHttp(Output.of(enableCachingForHttp));
        }

        /**
         * @param name The name of the authorizer.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the authorizer.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param signingDisabled Specifies whether AWS IoT validates the token signature in an authorization request. Default: `false`.
         * 
         * @return builder
         * 
         */
        public Builder signingDisabled(@Nullable Output<Boolean> signingDisabled) {
            $.signingDisabled = signingDisabled;
            return this;
        }

        /**
         * @param signingDisabled Specifies whether AWS IoT validates the token signature in an authorization request. Default: `false`.
         * 
         * @return builder
         * 
         */
        public Builder signingDisabled(Boolean signingDisabled) {
            return signingDisabled(Output.of(signingDisabled));
        }

        /**
         * @param status The status of Authorizer request at creation. Valid values: `ACTIVE`, `INACTIVE`. Default: `ACTIVE`.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of Authorizer request at creation. Valid values: `ACTIVE`, `INACTIVE`. Default: `ACTIVE`.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param tokenKeyName The name of the token key used to extract the token from the HTTP headers. This value is required if signing is enabled in your authorizer.
         * 
         * @return builder
         * 
         */
        public Builder tokenKeyName(@Nullable Output<String> tokenKeyName) {
            $.tokenKeyName = tokenKeyName;
            return this;
        }

        /**
         * @param tokenKeyName The name of the token key used to extract the token from the HTTP headers. This value is required if signing is enabled in your authorizer.
         * 
         * @return builder
         * 
         */
        public Builder tokenKeyName(String tokenKeyName) {
            return tokenKeyName(Output.of(tokenKeyName));
        }

        /**
         * @param tokenSigningPublicKeys The public keys used to verify the digital signature returned by your custom authentication service. This value is required if signing is enabled in your authorizer.
         * 
         * @return builder
         * 
         */
        public Builder tokenSigningPublicKeys(@Nullable Output<Map<String,String>> tokenSigningPublicKeys) {
            $.tokenSigningPublicKeys = tokenSigningPublicKeys;
            return this;
        }

        /**
         * @param tokenSigningPublicKeys The public keys used to verify the digital signature returned by your custom authentication service. This value is required if signing is enabled in your authorizer.
         * 
         * @return builder
         * 
         */
        public Builder tokenSigningPublicKeys(Map<String,String> tokenSigningPublicKeys) {
            return tokenSigningPublicKeys(Output.of(tokenSigningPublicKeys));
        }

        public AuthorizerArgs build() {
            if ($.authorizerFunctionArn == null) {
                throw new MissingRequiredPropertyException("AuthorizerArgs", "authorizerFunctionArn");
            }
            return $;
        }
    }

}
