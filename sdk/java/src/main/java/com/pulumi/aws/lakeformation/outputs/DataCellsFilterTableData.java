// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.lakeformation.outputs;

import com.pulumi.aws.lakeformation.outputs.DataCellsFilterTableDataColumnWildcard;
import com.pulumi.aws.lakeformation.outputs.DataCellsFilterTableDataRowFilter;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DataCellsFilterTableData {
    /**
     * @return A list of column names and/or nested column attributes.
     * 
     */
    private @Nullable List<String> columnNames;
    private @Nullable DataCellsFilterTableDataColumnWildcard columnWildcard;
    /**
     * @return The name of the database.
     * 
     */
    private String databaseName;
    /**
     * @return The name of the data cells filter.
     * 
     */
    private String name;
    /**
     * @return A PartiQL predicate. See Row Filter below for details.
     * 
     */
    private @Nullable DataCellsFilterTableDataRowFilter rowFilter;
    /**
     * @return The ID of the Data Catalog.
     * 
     */
    private String tableCatalogId;
    /**
     * @return The name of the table.
     * 
     */
    private String tableName;
    /**
     * @return ID of the data cells filter version.
     * 
     */
    private @Nullable String versionId;

    private DataCellsFilterTableData() {}
    /**
     * @return A list of column names and/or nested column attributes.
     * 
     */
    public List<String> columnNames() {
        return this.columnNames == null ? List.of() : this.columnNames;
    }
    public Optional<DataCellsFilterTableDataColumnWildcard> columnWildcard() {
        return Optional.ofNullable(this.columnWildcard);
    }
    /**
     * @return The name of the database.
     * 
     */
    public String databaseName() {
        return this.databaseName;
    }
    /**
     * @return The name of the data cells filter.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return A PartiQL predicate. See Row Filter below for details.
     * 
     */
    public Optional<DataCellsFilterTableDataRowFilter> rowFilter() {
        return Optional.ofNullable(this.rowFilter);
    }
    /**
     * @return The ID of the Data Catalog.
     * 
     */
    public String tableCatalogId() {
        return this.tableCatalogId;
    }
    /**
     * @return The name of the table.
     * 
     */
    public String tableName() {
        return this.tableName;
    }
    /**
     * @return ID of the data cells filter version.
     * 
     */
    public Optional<String> versionId() {
        return Optional.ofNullable(this.versionId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DataCellsFilterTableData defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> columnNames;
        private @Nullable DataCellsFilterTableDataColumnWildcard columnWildcard;
        private String databaseName;
        private String name;
        private @Nullable DataCellsFilterTableDataRowFilter rowFilter;
        private String tableCatalogId;
        private String tableName;
        private @Nullable String versionId;
        public Builder() {}
        public Builder(DataCellsFilterTableData defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.columnNames = defaults.columnNames;
    	      this.columnWildcard = defaults.columnWildcard;
    	      this.databaseName = defaults.databaseName;
    	      this.name = defaults.name;
    	      this.rowFilter = defaults.rowFilter;
    	      this.tableCatalogId = defaults.tableCatalogId;
    	      this.tableName = defaults.tableName;
    	      this.versionId = defaults.versionId;
        }

        @CustomType.Setter
        public Builder columnNames(@Nullable List<String> columnNames) {

            this.columnNames = columnNames;
            return this;
        }
        public Builder columnNames(String... columnNames) {
            return columnNames(List.of(columnNames));
        }
        @CustomType.Setter
        public Builder columnWildcard(@Nullable DataCellsFilterTableDataColumnWildcard columnWildcard) {

            this.columnWildcard = columnWildcard;
            return this;
        }
        @CustomType.Setter
        public Builder databaseName(String databaseName) {
            if (databaseName == null) {
              throw new MissingRequiredPropertyException("DataCellsFilterTableData", "databaseName");
            }
            this.databaseName = databaseName;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("DataCellsFilterTableData", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder rowFilter(@Nullable DataCellsFilterTableDataRowFilter rowFilter) {

            this.rowFilter = rowFilter;
            return this;
        }
        @CustomType.Setter
        public Builder tableCatalogId(String tableCatalogId) {
            if (tableCatalogId == null) {
              throw new MissingRequiredPropertyException("DataCellsFilterTableData", "tableCatalogId");
            }
            this.tableCatalogId = tableCatalogId;
            return this;
        }
        @CustomType.Setter
        public Builder tableName(String tableName) {
            if (tableName == null) {
              throw new MissingRequiredPropertyException("DataCellsFilterTableData", "tableName");
            }
            this.tableName = tableName;
            return this;
        }
        @CustomType.Setter
        public Builder versionId(@Nullable String versionId) {

            this.versionId = versionId;
            return this;
        }
        public DataCellsFilterTableData build() {
            final var _resultValue = new DataCellsFilterTableData();
            _resultValue.columnNames = columnNames;
            _resultValue.columnWildcard = columnWildcard;
            _resultValue.databaseName = databaseName;
            _resultValue.name = name;
            _resultValue.rowFilter = rowFilter;
            _resultValue.tableCatalogId = tableCatalogId;
            _resultValue.tableName = tableName;
            _resultValue.versionId = versionId;
            return _resultValue;
        }
    }
}
