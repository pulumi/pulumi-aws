// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.emr.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetSupportedInstanceTypesSupportedInstanceType {
    /**
     * @return CPU architecture.
     * 
     */
    private String architecture;
    /**
     * @return Indicates whether the instance type supports Amazon EBS optimization.
     * 
     */
    private Boolean ebsOptimizedAvailable;
    /**
     * @return Indicates whether the instance type uses Amazon EBS optimization by default.
     * 
     */
    private Boolean ebsOptimizedByDefault;
    /**
     * @return Indicates whether the instance type only supports Amazon EBS.
     * 
     */
    private Boolean ebsStorageOnly;
    /**
     * @return The Amazon EC2 family and generation for the instance type.
     * 
     */
    private String instanceFamilyId;
    /**
     * @return Indicates whether the instance type only supports 64-bit architecture.
     * 
     */
    private Boolean is64BitsOnly;
    /**
     * @return Memory that is available to Amazon EMR from the instance type.
     * 
     */
    private Double memoryGb;
    /**
     * @return Number of disks for the instance type.
     * 
     */
    private Integer numberOfDisks;
    /**
     * @return Storage capacity of the instance type.
     * 
     */
    private Integer storageGb;
    /**
     * @return Amazon EC2 instance type. For example, `m5.xlarge`.
     * 
     */
    private String type;
    /**
     * @return The number of vCPUs available for the instance type.
     * 
     */
    private Integer vcpu;

    private GetSupportedInstanceTypesSupportedInstanceType() {}
    /**
     * @return CPU architecture.
     * 
     */
    public String architecture() {
        return this.architecture;
    }
    /**
     * @return Indicates whether the instance type supports Amazon EBS optimization.
     * 
     */
    public Boolean ebsOptimizedAvailable() {
        return this.ebsOptimizedAvailable;
    }
    /**
     * @return Indicates whether the instance type uses Amazon EBS optimization by default.
     * 
     */
    public Boolean ebsOptimizedByDefault() {
        return this.ebsOptimizedByDefault;
    }
    /**
     * @return Indicates whether the instance type only supports Amazon EBS.
     * 
     */
    public Boolean ebsStorageOnly() {
        return this.ebsStorageOnly;
    }
    /**
     * @return The Amazon EC2 family and generation for the instance type.
     * 
     */
    public String instanceFamilyId() {
        return this.instanceFamilyId;
    }
    /**
     * @return Indicates whether the instance type only supports 64-bit architecture.
     * 
     */
    public Boolean is64BitsOnly() {
        return this.is64BitsOnly;
    }
    /**
     * @return Memory that is available to Amazon EMR from the instance type.
     * 
     */
    public Double memoryGb() {
        return this.memoryGb;
    }
    /**
     * @return Number of disks for the instance type.
     * 
     */
    public Integer numberOfDisks() {
        return this.numberOfDisks;
    }
    /**
     * @return Storage capacity of the instance type.
     * 
     */
    public Integer storageGb() {
        return this.storageGb;
    }
    /**
     * @return Amazon EC2 instance type. For example, `m5.xlarge`.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return The number of vCPUs available for the instance type.
     * 
     */
    public Integer vcpu() {
        return this.vcpu;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSupportedInstanceTypesSupportedInstanceType defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String architecture;
        private Boolean ebsOptimizedAvailable;
        private Boolean ebsOptimizedByDefault;
        private Boolean ebsStorageOnly;
        private String instanceFamilyId;
        private Boolean is64BitsOnly;
        private Double memoryGb;
        private Integer numberOfDisks;
        private Integer storageGb;
        private String type;
        private Integer vcpu;
        public Builder() {}
        public Builder(GetSupportedInstanceTypesSupportedInstanceType defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.architecture = defaults.architecture;
    	      this.ebsOptimizedAvailable = defaults.ebsOptimizedAvailable;
    	      this.ebsOptimizedByDefault = defaults.ebsOptimizedByDefault;
    	      this.ebsStorageOnly = defaults.ebsStorageOnly;
    	      this.instanceFamilyId = defaults.instanceFamilyId;
    	      this.is64BitsOnly = defaults.is64BitsOnly;
    	      this.memoryGb = defaults.memoryGb;
    	      this.numberOfDisks = defaults.numberOfDisks;
    	      this.storageGb = defaults.storageGb;
    	      this.type = defaults.type;
    	      this.vcpu = defaults.vcpu;
        }

        @CustomType.Setter
        public Builder architecture(String architecture) {
            this.architecture = Objects.requireNonNull(architecture);
            return this;
        }
        @CustomType.Setter
        public Builder ebsOptimizedAvailable(Boolean ebsOptimizedAvailable) {
            this.ebsOptimizedAvailable = Objects.requireNonNull(ebsOptimizedAvailable);
            return this;
        }
        @CustomType.Setter
        public Builder ebsOptimizedByDefault(Boolean ebsOptimizedByDefault) {
            this.ebsOptimizedByDefault = Objects.requireNonNull(ebsOptimizedByDefault);
            return this;
        }
        @CustomType.Setter
        public Builder ebsStorageOnly(Boolean ebsStorageOnly) {
            this.ebsStorageOnly = Objects.requireNonNull(ebsStorageOnly);
            return this;
        }
        @CustomType.Setter
        public Builder instanceFamilyId(String instanceFamilyId) {
            this.instanceFamilyId = Objects.requireNonNull(instanceFamilyId);
            return this;
        }
        @CustomType.Setter
        public Builder is64BitsOnly(Boolean is64BitsOnly) {
            this.is64BitsOnly = Objects.requireNonNull(is64BitsOnly);
            return this;
        }
        @CustomType.Setter
        public Builder memoryGb(Double memoryGb) {
            this.memoryGb = Objects.requireNonNull(memoryGb);
            return this;
        }
        @CustomType.Setter
        public Builder numberOfDisks(Integer numberOfDisks) {
            this.numberOfDisks = Objects.requireNonNull(numberOfDisks);
            return this;
        }
        @CustomType.Setter
        public Builder storageGb(Integer storageGb) {
            this.storageGb = Objects.requireNonNull(storageGb);
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        @CustomType.Setter
        public Builder vcpu(Integer vcpu) {
            this.vcpu = Objects.requireNonNull(vcpu);
            return this;
        }
        public GetSupportedInstanceTypesSupportedInstanceType build() {
            final var o = new GetSupportedInstanceTypesSupportedInstanceType();
            o.architecture = architecture;
            o.ebsOptimizedAvailable = ebsOptimizedAvailable;
            o.ebsOptimizedByDefault = ebsOptimizedByDefault;
            o.ebsStorageOnly = ebsStorageOnly;
            o.instanceFamilyId = instanceFamilyId;
            o.is64BitsOnly = is64BitsOnly;
            o.memoryGb = memoryGb;
            o.numberOfDisks = numberOfDisks;
            o.storageGb = storageGb;
            o.type = type;
            o.vcpu = vcpu;
            return o;
        }
    }
}
