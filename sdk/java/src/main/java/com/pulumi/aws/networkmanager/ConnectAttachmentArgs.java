// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.networkmanager;

import com.pulumi.aws.networkmanager.inputs.ConnectAttachmentOptionsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConnectAttachmentArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConnectAttachmentArgs Empty = new ConnectAttachmentArgs();

    /**
     * The ID of a core network where you want to create the attachment.
     * 
     */
    @Import(name="coreNetworkId", required=true)
    private Output<String> coreNetworkId;

    /**
     * @return The ID of a core network where you want to create the attachment.
     * 
     */
    public Output<String> coreNetworkId() {
        return this.coreNetworkId;
    }

    /**
     * The Region where the edge is located.
     * 
     */
    @Import(name="edgeLocation", required=true)
    private Output<String> edgeLocation;

    /**
     * @return The Region where the edge is located.
     * 
     */
    public Output<String> edgeLocation() {
        return this.edgeLocation;
    }

    /**
     * Options for creating an attachment.
     * 
     * The following arguments are optional:
     * 
     */
    @Import(name="options", required=true)
    private Output<ConnectAttachmentOptionsArgs> options;

    /**
     * @return Options for creating an attachment.
     * 
     * The following arguments are optional:
     * 
     */
    public Output<ConnectAttachmentOptionsArgs> options() {
        return this.options;
    }

    /**
     * Key-value tags for the attachment. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Key-value tags for the attachment. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The ID of the attachment between the two connections.
     * 
     */
    @Import(name="transportAttachmentId", required=true)
    private Output<String> transportAttachmentId;

    /**
     * @return The ID of the attachment between the two connections.
     * 
     */
    public Output<String> transportAttachmentId() {
        return this.transportAttachmentId;
    }

    private ConnectAttachmentArgs() {}

    private ConnectAttachmentArgs(ConnectAttachmentArgs $) {
        this.coreNetworkId = $.coreNetworkId;
        this.edgeLocation = $.edgeLocation;
        this.options = $.options;
        this.tags = $.tags;
        this.transportAttachmentId = $.transportAttachmentId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectAttachmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectAttachmentArgs $;

        public Builder() {
            $ = new ConnectAttachmentArgs();
        }

        public Builder(ConnectAttachmentArgs defaults) {
            $ = new ConnectAttachmentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param coreNetworkId The ID of a core network where you want to create the attachment.
         * 
         * @return builder
         * 
         */
        public Builder coreNetworkId(Output<String> coreNetworkId) {
            $.coreNetworkId = coreNetworkId;
            return this;
        }

        /**
         * @param coreNetworkId The ID of a core network where you want to create the attachment.
         * 
         * @return builder
         * 
         */
        public Builder coreNetworkId(String coreNetworkId) {
            return coreNetworkId(Output.of(coreNetworkId));
        }

        /**
         * @param edgeLocation The Region where the edge is located.
         * 
         * @return builder
         * 
         */
        public Builder edgeLocation(Output<String> edgeLocation) {
            $.edgeLocation = edgeLocation;
            return this;
        }

        /**
         * @param edgeLocation The Region where the edge is located.
         * 
         * @return builder
         * 
         */
        public Builder edgeLocation(String edgeLocation) {
            return edgeLocation(Output.of(edgeLocation));
        }

        /**
         * @param options Options for creating an attachment.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder options(Output<ConnectAttachmentOptionsArgs> options) {
            $.options = options;
            return this;
        }

        /**
         * @param options Options for creating an attachment.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder options(ConnectAttachmentOptionsArgs options) {
            return options(Output.of(options));
        }

        /**
         * @param tags Key-value tags for the attachment. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Key-value tags for the attachment. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param transportAttachmentId The ID of the attachment between the two connections.
         * 
         * @return builder
         * 
         */
        public Builder transportAttachmentId(Output<String> transportAttachmentId) {
            $.transportAttachmentId = transportAttachmentId;
            return this;
        }

        /**
         * @param transportAttachmentId The ID of the attachment between the two connections.
         * 
         * @return builder
         * 
         */
        public Builder transportAttachmentId(String transportAttachmentId) {
            return transportAttachmentId(Output.of(transportAttachmentId));
        }

        public ConnectAttachmentArgs build() {
            $.coreNetworkId = Objects.requireNonNull($.coreNetworkId, "expected parameter 'coreNetworkId' to be non-null");
            $.edgeLocation = Objects.requireNonNull($.edgeLocation, "expected parameter 'edgeLocation' to be non-null");
            $.options = Objects.requireNonNull($.options, "expected parameter 'options' to be non-null");
            $.transportAttachmentId = Objects.requireNonNull($.transportAttachmentId, "expected parameter 'transportAttachmentId' to be non-null");
            return $;
        }
    }

}
