// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.verifiedpermissions.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelectionIdentityTokenOnlyArgs extends com.pulumi.resources.ResourceArgs {

    public static final IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelectionIdentityTokenOnlyArgs Empty = new IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelectionIdentityTokenOnlyArgs();

    /**
     * The ID token audience, or client ID, claim values that you want to accept in your policy store from an OIDC identity provider.
     * 
     */
    @Import(name="clientIds")
    private @Nullable Output<List<String>> clientIds;

    /**
     * @return The ID token audience, or client ID, claim values that you want to accept in your policy store from an OIDC identity provider.
     * 
     */
    public Optional<Output<List<String>>> clientIds() {
        return Optional.ofNullable(this.clientIds);
    }

    /**
     * The claim that determines the principal in OIDC access tokens.
     * 
     */
    @Import(name="principalIdClaim")
    private @Nullable Output<String> principalIdClaim;

    /**
     * @return The claim that determines the principal in OIDC access tokens.
     * 
     */
    public Optional<Output<String>> principalIdClaim() {
        return Optional.ofNullable(this.principalIdClaim);
    }

    private IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelectionIdentityTokenOnlyArgs() {}

    private IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelectionIdentityTokenOnlyArgs(IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelectionIdentityTokenOnlyArgs $) {
        this.clientIds = $.clientIds;
        this.principalIdClaim = $.principalIdClaim;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelectionIdentityTokenOnlyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelectionIdentityTokenOnlyArgs $;

        public Builder() {
            $ = new IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelectionIdentityTokenOnlyArgs();
        }

        public Builder(IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelectionIdentityTokenOnlyArgs defaults) {
            $ = new IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelectionIdentityTokenOnlyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clientIds The ID token audience, or client ID, claim values that you want to accept in your policy store from an OIDC identity provider.
         * 
         * @return builder
         * 
         */
        public Builder clientIds(@Nullable Output<List<String>> clientIds) {
            $.clientIds = clientIds;
            return this;
        }

        /**
         * @param clientIds The ID token audience, or client ID, claim values that you want to accept in your policy store from an OIDC identity provider.
         * 
         * @return builder
         * 
         */
        public Builder clientIds(List<String> clientIds) {
            return clientIds(Output.of(clientIds));
        }

        /**
         * @param clientIds The ID token audience, or client ID, claim values that you want to accept in your policy store from an OIDC identity provider.
         * 
         * @return builder
         * 
         */
        public Builder clientIds(String... clientIds) {
            return clientIds(List.of(clientIds));
        }

        /**
         * @param principalIdClaim The claim that determines the principal in OIDC access tokens.
         * 
         * @return builder
         * 
         */
        public Builder principalIdClaim(@Nullable Output<String> principalIdClaim) {
            $.principalIdClaim = principalIdClaim;
            return this;
        }

        /**
         * @param principalIdClaim The claim that determines the principal in OIDC access tokens.
         * 
         * @return builder
         * 
         */
        public Builder principalIdClaim(String principalIdClaim) {
            return principalIdClaim(Output.of(principalIdClaim));
        }

        public IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelectionIdentityTokenOnlyArgs build() {
            return $;
        }
    }

}
