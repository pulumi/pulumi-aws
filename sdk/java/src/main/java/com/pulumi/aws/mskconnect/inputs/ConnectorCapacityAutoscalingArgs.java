// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.mskconnect.inputs;

import com.pulumi.aws.mskconnect.inputs.ConnectorCapacityAutoscalingScaleInPolicyArgs;
import com.pulumi.aws.mskconnect.inputs.ConnectorCapacityAutoscalingScaleOutPolicyArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConnectorCapacityAutoscalingArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConnectorCapacityAutoscalingArgs Empty = new ConnectorCapacityAutoscalingArgs();

    /**
     * The maximum number of workers allocated to the connector.
     * 
     */
    @Import(name="maxWorkerCount", required=true)
    private Output<Integer> maxWorkerCount;

    /**
     * @return The maximum number of workers allocated to the connector.
     * 
     */
    public Output<Integer> maxWorkerCount() {
        return this.maxWorkerCount;
    }

    /**
     * The number of microcontroller units (MCUs) allocated to each connector worker. Valid values: `1`, `2`, `4`, `8`. The default value is `1`.
     * 
     */
    @Import(name="mcuCount")
    private @Nullable Output<Integer> mcuCount;

    /**
     * @return The number of microcontroller units (MCUs) allocated to each connector worker. Valid values: `1`, `2`, `4`, `8`. The default value is `1`.
     * 
     */
    public Optional<Output<Integer>> mcuCount() {
        return Optional.ofNullable(this.mcuCount);
    }

    /**
     * The minimum number of workers allocated to the connector.
     * 
     */
    @Import(name="minWorkerCount", required=true)
    private Output<Integer> minWorkerCount;

    /**
     * @return The minimum number of workers allocated to the connector.
     * 
     */
    public Output<Integer> minWorkerCount() {
        return this.minWorkerCount;
    }

    /**
     * The scale-in policy for the connector. See below.
     * 
     */
    @Import(name="scaleInPolicy")
    private @Nullable Output<ConnectorCapacityAutoscalingScaleInPolicyArgs> scaleInPolicy;

    /**
     * @return The scale-in policy for the connector. See below.
     * 
     */
    public Optional<Output<ConnectorCapacityAutoscalingScaleInPolicyArgs>> scaleInPolicy() {
        return Optional.ofNullable(this.scaleInPolicy);
    }

    /**
     * The scale-out policy for the connector. See below.
     * 
     */
    @Import(name="scaleOutPolicy")
    private @Nullable Output<ConnectorCapacityAutoscalingScaleOutPolicyArgs> scaleOutPolicy;

    /**
     * @return The scale-out policy for the connector. See below.
     * 
     */
    public Optional<Output<ConnectorCapacityAutoscalingScaleOutPolicyArgs>> scaleOutPolicy() {
        return Optional.ofNullable(this.scaleOutPolicy);
    }

    private ConnectorCapacityAutoscalingArgs() {}

    private ConnectorCapacityAutoscalingArgs(ConnectorCapacityAutoscalingArgs $) {
        this.maxWorkerCount = $.maxWorkerCount;
        this.mcuCount = $.mcuCount;
        this.minWorkerCount = $.minWorkerCount;
        this.scaleInPolicy = $.scaleInPolicy;
        this.scaleOutPolicy = $.scaleOutPolicy;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectorCapacityAutoscalingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectorCapacityAutoscalingArgs $;

        public Builder() {
            $ = new ConnectorCapacityAutoscalingArgs();
        }

        public Builder(ConnectorCapacityAutoscalingArgs defaults) {
            $ = new ConnectorCapacityAutoscalingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param maxWorkerCount The maximum number of workers allocated to the connector.
         * 
         * @return builder
         * 
         */
        public Builder maxWorkerCount(Output<Integer> maxWorkerCount) {
            $.maxWorkerCount = maxWorkerCount;
            return this;
        }

        /**
         * @param maxWorkerCount The maximum number of workers allocated to the connector.
         * 
         * @return builder
         * 
         */
        public Builder maxWorkerCount(Integer maxWorkerCount) {
            return maxWorkerCount(Output.of(maxWorkerCount));
        }

        /**
         * @param mcuCount The number of microcontroller units (MCUs) allocated to each connector worker. Valid values: `1`, `2`, `4`, `8`. The default value is `1`.
         * 
         * @return builder
         * 
         */
        public Builder mcuCount(@Nullable Output<Integer> mcuCount) {
            $.mcuCount = mcuCount;
            return this;
        }

        /**
         * @param mcuCount The number of microcontroller units (MCUs) allocated to each connector worker. Valid values: `1`, `2`, `4`, `8`. The default value is `1`.
         * 
         * @return builder
         * 
         */
        public Builder mcuCount(Integer mcuCount) {
            return mcuCount(Output.of(mcuCount));
        }

        /**
         * @param minWorkerCount The minimum number of workers allocated to the connector.
         * 
         * @return builder
         * 
         */
        public Builder minWorkerCount(Output<Integer> minWorkerCount) {
            $.minWorkerCount = minWorkerCount;
            return this;
        }

        /**
         * @param minWorkerCount The minimum number of workers allocated to the connector.
         * 
         * @return builder
         * 
         */
        public Builder minWorkerCount(Integer minWorkerCount) {
            return minWorkerCount(Output.of(minWorkerCount));
        }

        /**
         * @param scaleInPolicy The scale-in policy for the connector. See below.
         * 
         * @return builder
         * 
         */
        public Builder scaleInPolicy(@Nullable Output<ConnectorCapacityAutoscalingScaleInPolicyArgs> scaleInPolicy) {
            $.scaleInPolicy = scaleInPolicy;
            return this;
        }

        /**
         * @param scaleInPolicy The scale-in policy for the connector. See below.
         * 
         * @return builder
         * 
         */
        public Builder scaleInPolicy(ConnectorCapacityAutoscalingScaleInPolicyArgs scaleInPolicy) {
            return scaleInPolicy(Output.of(scaleInPolicy));
        }

        /**
         * @param scaleOutPolicy The scale-out policy for the connector. See below.
         * 
         * @return builder
         * 
         */
        public Builder scaleOutPolicy(@Nullable Output<ConnectorCapacityAutoscalingScaleOutPolicyArgs> scaleOutPolicy) {
            $.scaleOutPolicy = scaleOutPolicy;
            return this;
        }

        /**
         * @param scaleOutPolicy The scale-out policy for the connector. See below.
         * 
         * @return builder
         * 
         */
        public Builder scaleOutPolicy(ConnectorCapacityAutoscalingScaleOutPolicyArgs scaleOutPolicy) {
            return scaleOutPolicy(Output.of(scaleOutPolicy));
        }

        public ConnectorCapacityAutoscalingArgs build() {
            if ($.maxWorkerCount == null) {
                throw new MissingRequiredPropertyException("ConnectorCapacityAutoscalingArgs", "maxWorkerCount");
            }
            if ($.minWorkerCount == null) {
                throw new MissingRequiredPropertyException("ConnectorCapacityAutoscalingArgs", "minWorkerCount");
            }
            return $;
        }
    }

}
