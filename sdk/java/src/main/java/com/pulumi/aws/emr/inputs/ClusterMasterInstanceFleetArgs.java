// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.emr.inputs;

import com.pulumi.aws.emr.inputs.ClusterMasterInstanceFleetInstanceTypeConfigArgs;
import com.pulumi.aws.emr.inputs.ClusterMasterInstanceFleetLaunchSpecificationsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClusterMasterInstanceFleetArgs extends com.pulumi.resources.ResourceArgs {

    public static final ClusterMasterInstanceFleetArgs Empty = new ClusterMasterInstanceFleetArgs();

    /**
     * ID of the cluster.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return ID of the cluster.
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Configuration block for instance fleet.
     * 
     */
    @Import(name="instanceTypeConfigs")
    private @Nullable Output<List<ClusterMasterInstanceFleetInstanceTypeConfigArgs>> instanceTypeConfigs;

    /**
     * @return Configuration block for instance fleet.
     * 
     */
    public Optional<Output<List<ClusterMasterInstanceFleetInstanceTypeConfigArgs>>> instanceTypeConfigs() {
        return Optional.ofNullable(this.instanceTypeConfigs);
    }

    /**
     * Configuration block for launch specification.
     * 
     */
    @Import(name="launchSpecifications")
    private @Nullable Output<ClusterMasterInstanceFleetLaunchSpecificationsArgs> launchSpecifications;

    /**
     * @return Configuration block for launch specification.
     * 
     */
    public Optional<Output<ClusterMasterInstanceFleetLaunchSpecificationsArgs>> launchSpecifications() {
        return Optional.ofNullable(this.launchSpecifications);
    }

    /**
     * Friendly name given to the instance fleet.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Friendly name given to the instance fleet.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="provisionedOnDemandCapacity")
    private @Nullable Output<Integer> provisionedOnDemandCapacity;

    public Optional<Output<Integer>> provisionedOnDemandCapacity() {
        return Optional.ofNullable(this.provisionedOnDemandCapacity);
    }

    @Import(name="provisionedSpotCapacity")
    private @Nullable Output<Integer> provisionedSpotCapacity;

    public Optional<Output<Integer>> provisionedSpotCapacity() {
        return Optional.ofNullable(this.provisionedSpotCapacity);
    }

    /**
     * Target capacity of On-Demand units for the instance fleet, which determines how many On-Demand instances to provision.
     * 
     */
    @Import(name="targetOnDemandCapacity")
    private @Nullable Output<Integer> targetOnDemandCapacity;

    /**
     * @return Target capacity of On-Demand units for the instance fleet, which determines how many On-Demand instances to provision.
     * 
     */
    public Optional<Output<Integer>> targetOnDemandCapacity() {
        return Optional.ofNullable(this.targetOnDemandCapacity);
    }

    /**
     * Target capacity of Spot units for the instance fleet, which determines how many Spot instances to provision.
     * 
     */
    @Import(name="targetSpotCapacity")
    private @Nullable Output<Integer> targetSpotCapacity;

    /**
     * @return Target capacity of Spot units for the instance fleet, which determines how many Spot instances to provision.
     * 
     */
    public Optional<Output<Integer>> targetSpotCapacity() {
        return Optional.ofNullable(this.targetSpotCapacity);
    }

    private ClusterMasterInstanceFleetArgs() {}

    private ClusterMasterInstanceFleetArgs(ClusterMasterInstanceFleetArgs $) {
        this.id = $.id;
        this.instanceTypeConfigs = $.instanceTypeConfigs;
        this.launchSpecifications = $.launchSpecifications;
        this.name = $.name;
        this.provisionedOnDemandCapacity = $.provisionedOnDemandCapacity;
        this.provisionedSpotCapacity = $.provisionedSpotCapacity;
        this.targetOnDemandCapacity = $.targetOnDemandCapacity;
        this.targetSpotCapacity = $.targetSpotCapacity;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClusterMasterInstanceFleetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClusterMasterInstanceFleetArgs $;

        public Builder() {
            $ = new ClusterMasterInstanceFleetArgs();
        }

        public Builder(ClusterMasterInstanceFleetArgs defaults) {
            $ = new ClusterMasterInstanceFleetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param id ID of the cluster.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id ID of the cluster.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param instanceTypeConfigs Configuration block for instance fleet.
         * 
         * @return builder
         * 
         */
        public Builder instanceTypeConfigs(@Nullable Output<List<ClusterMasterInstanceFleetInstanceTypeConfigArgs>> instanceTypeConfigs) {
            $.instanceTypeConfigs = instanceTypeConfigs;
            return this;
        }

        /**
         * @param instanceTypeConfigs Configuration block for instance fleet.
         * 
         * @return builder
         * 
         */
        public Builder instanceTypeConfigs(List<ClusterMasterInstanceFleetInstanceTypeConfigArgs> instanceTypeConfigs) {
            return instanceTypeConfigs(Output.of(instanceTypeConfigs));
        }

        /**
         * @param instanceTypeConfigs Configuration block for instance fleet.
         * 
         * @return builder
         * 
         */
        public Builder instanceTypeConfigs(ClusterMasterInstanceFleetInstanceTypeConfigArgs... instanceTypeConfigs) {
            return instanceTypeConfigs(List.of(instanceTypeConfigs));
        }

        /**
         * @param launchSpecifications Configuration block for launch specification.
         * 
         * @return builder
         * 
         */
        public Builder launchSpecifications(@Nullable Output<ClusterMasterInstanceFleetLaunchSpecificationsArgs> launchSpecifications) {
            $.launchSpecifications = launchSpecifications;
            return this;
        }

        /**
         * @param launchSpecifications Configuration block for launch specification.
         * 
         * @return builder
         * 
         */
        public Builder launchSpecifications(ClusterMasterInstanceFleetLaunchSpecificationsArgs launchSpecifications) {
            return launchSpecifications(Output.of(launchSpecifications));
        }

        /**
         * @param name Friendly name given to the instance fleet.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Friendly name given to the instance fleet.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder provisionedOnDemandCapacity(@Nullable Output<Integer> provisionedOnDemandCapacity) {
            $.provisionedOnDemandCapacity = provisionedOnDemandCapacity;
            return this;
        }

        public Builder provisionedOnDemandCapacity(Integer provisionedOnDemandCapacity) {
            return provisionedOnDemandCapacity(Output.of(provisionedOnDemandCapacity));
        }

        public Builder provisionedSpotCapacity(@Nullable Output<Integer> provisionedSpotCapacity) {
            $.provisionedSpotCapacity = provisionedSpotCapacity;
            return this;
        }

        public Builder provisionedSpotCapacity(Integer provisionedSpotCapacity) {
            return provisionedSpotCapacity(Output.of(provisionedSpotCapacity));
        }

        /**
         * @param targetOnDemandCapacity Target capacity of On-Demand units for the instance fleet, which determines how many On-Demand instances to provision.
         * 
         * @return builder
         * 
         */
        public Builder targetOnDemandCapacity(@Nullable Output<Integer> targetOnDemandCapacity) {
            $.targetOnDemandCapacity = targetOnDemandCapacity;
            return this;
        }

        /**
         * @param targetOnDemandCapacity Target capacity of On-Demand units for the instance fleet, which determines how many On-Demand instances to provision.
         * 
         * @return builder
         * 
         */
        public Builder targetOnDemandCapacity(Integer targetOnDemandCapacity) {
            return targetOnDemandCapacity(Output.of(targetOnDemandCapacity));
        }

        /**
         * @param targetSpotCapacity Target capacity of Spot units for the instance fleet, which determines how many Spot instances to provision.
         * 
         * @return builder
         * 
         */
        public Builder targetSpotCapacity(@Nullable Output<Integer> targetSpotCapacity) {
            $.targetSpotCapacity = targetSpotCapacity;
            return this;
        }

        /**
         * @param targetSpotCapacity Target capacity of Spot units for the instance fleet, which determines how many Spot instances to provision.
         * 
         * @return builder
         * 
         */
        public Builder targetSpotCapacity(Integer targetSpotCapacity) {
            return targetSpotCapacity(Output.of(targetSpotCapacity));
        }

        public ClusterMasterInstanceFleetArgs build() {
            return $;
        }
    }

}
