// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.medialive.outputs;

import com.pulumi.aws.medialive.outputs.ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsDestination;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettings {
    private @Nullable String acquisitionPointId;
    private @Nullable String audioOnlyTimecodeControl;
    /**
     * @return Setting to allow self signed or verified RTMP certificates.
     * 
     */
    private @Nullable String certificateMode;
    /**
     * @return Number of seconds to wait before retrying connection to the flash media server if the connection is lost.
     * 
     */
    private @Nullable Integer connectionRetryInterval;
    /**
     * @return A director and base filename where archive files should be written. See Destination for more details.
     * 
     */
    private ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsDestination destination;
    private @Nullable String eventId;
    private @Nullable String eventIdMode;
    private @Nullable String eventStopBehavior;
    private @Nullable Integer filecacheDuration;
    private @Nullable Integer fragmentLength;
    /**
     * @return Controls the behavior of the RTMP group if input becomes unavailable.
     * 
     */
    private @Nullable String inputLossAction;
    /**
     * @return Number of retry attempts.
     * 
     */
    private @Nullable Integer numRetries;
    /**
     * @return Number of seconds to wait until a restart is initiated.
     * 
     */
    private @Nullable Integer restartDelay;
    private @Nullable String segmentationMode;
    private @Nullable Integer sendDelayMs;
    private @Nullable String sparseTrackType;
    private @Nullable String streamManifestBehavior;
    private @Nullable String timestampOffset;
    private @Nullable String timestampOffsetMode;

    private ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettings() {}
    public Optional<String> acquisitionPointId() {
        return Optional.ofNullable(this.acquisitionPointId);
    }
    public Optional<String> audioOnlyTimecodeControl() {
        return Optional.ofNullable(this.audioOnlyTimecodeControl);
    }
    /**
     * @return Setting to allow self signed or verified RTMP certificates.
     * 
     */
    public Optional<String> certificateMode() {
        return Optional.ofNullable(this.certificateMode);
    }
    /**
     * @return Number of seconds to wait before retrying connection to the flash media server if the connection is lost.
     * 
     */
    public Optional<Integer> connectionRetryInterval() {
        return Optional.ofNullable(this.connectionRetryInterval);
    }
    /**
     * @return A director and base filename where archive files should be written. See Destination for more details.
     * 
     */
    public ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsDestination destination() {
        return this.destination;
    }
    public Optional<String> eventId() {
        return Optional.ofNullable(this.eventId);
    }
    public Optional<String> eventIdMode() {
        return Optional.ofNullable(this.eventIdMode);
    }
    public Optional<String> eventStopBehavior() {
        return Optional.ofNullable(this.eventStopBehavior);
    }
    public Optional<Integer> filecacheDuration() {
        return Optional.ofNullable(this.filecacheDuration);
    }
    public Optional<Integer> fragmentLength() {
        return Optional.ofNullable(this.fragmentLength);
    }
    /**
     * @return Controls the behavior of the RTMP group if input becomes unavailable.
     * 
     */
    public Optional<String> inputLossAction() {
        return Optional.ofNullable(this.inputLossAction);
    }
    /**
     * @return Number of retry attempts.
     * 
     */
    public Optional<Integer> numRetries() {
        return Optional.ofNullable(this.numRetries);
    }
    /**
     * @return Number of seconds to wait until a restart is initiated.
     * 
     */
    public Optional<Integer> restartDelay() {
        return Optional.ofNullable(this.restartDelay);
    }
    public Optional<String> segmentationMode() {
        return Optional.ofNullable(this.segmentationMode);
    }
    public Optional<Integer> sendDelayMs() {
        return Optional.ofNullable(this.sendDelayMs);
    }
    public Optional<String> sparseTrackType() {
        return Optional.ofNullable(this.sparseTrackType);
    }
    public Optional<String> streamManifestBehavior() {
        return Optional.ofNullable(this.streamManifestBehavior);
    }
    public Optional<String> timestampOffset() {
        return Optional.ofNullable(this.timestampOffset);
    }
    public Optional<String> timestampOffsetMode() {
        return Optional.ofNullable(this.timestampOffsetMode);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettings defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String acquisitionPointId;
        private @Nullable String audioOnlyTimecodeControl;
        private @Nullable String certificateMode;
        private @Nullable Integer connectionRetryInterval;
        private ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsDestination destination;
        private @Nullable String eventId;
        private @Nullable String eventIdMode;
        private @Nullable String eventStopBehavior;
        private @Nullable Integer filecacheDuration;
        private @Nullable Integer fragmentLength;
        private @Nullable String inputLossAction;
        private @Nullable Integer numRetries;
        private @Nullable Integer restartDelay;
        private @Nullable String segmentationMode;
        private @Nullable Integer sendDelayMs;
        private @Nullable String sparseTrackType;
        private @Nullable String streamManifestBehavior;
        private @Nullable String timestampOffset;
        private @Nullable String timestampOffsetMode;
        public Builder() {}
        public Builder(ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettings defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.acquisitionPointId = defaults.acquisitionPointId;
    	      this.audioOnlyTimecodeControl = defaults.audioOnlyTimecodeControl;
    	      this.certificateMode = defaults.certificateMode;
    	      this.connectionRetryInterval = defaults.connectionRetryInterval;
    	      this.destination = defaults.destination;
    	      this.eventId = defaults.eventId;
    	      this.eventIdMode = defaults.eventIdMode;
    	      this.eventStopBehavior = defaults.eventStopBehavior;
    	      this.filecacheDuration = defaults.filecacheDuration;
    	      this.fragmentLength = defaults.fragmentLength;
    	      this.inputLossAction = defaults.inputLossAction;
    	      this.numRetries = defaults.numRetries;
    	      this.restartDelay = defaults.restartDelay;
    	      this.segmentationMode = defaults.segmentationMode;
    	      this.sendDelayMs = defaults.sendDelayMs;
    	      this.sparseTrackType = defaults.sparseTrackType;
    	      this.streamManifestBehavior = defaults.streamManifestBehavior;
    	      this.timestampOffset = defaults.timestampOffset;
    	      this.timestampOffsetMode = defaults.timestampOffsetMode;
        }

        @CustomType.Setter
        public Builder acquisitionPointId(@Nullable String acquisitionPointId) {

            this.acquisitionPointId = acquisitionPointId;
            return this;
        }
        @CustomType.Setter
        public Builder audioOnlyTimecodeControl(@Nullable String audioOnlyTimecodeControl) {

            this.audioOnlyTimecodeControl = audioOnlyTimecodeControl;
            return this;
        }
        @CustomType.Setter
        public Builder certificateMode(@Nullable String certificateMode) {

            this.certificateMode = certificateMode;
            return this;
        }
        @CustomType.Setter
        public Builder connectionRetryInterval(@Nullable Integer connectionRetryInterval) {

            this.connectionRetryInterval = connectionRetryInterval;
            return this;
        }
        @CustomType.Setter
        public Builder destination(ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsDestination destination) {
            if (destination == null) {
              throw new MissingRequiredPropertyException("ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettings", "destination");
            }
            this.destination = destination;
            return this;
        }
        @CustomType.Setter
        public Builder eventId(@Nullable String eventId) {

            this.eventId = eventId;
            return this;
        }
        @CustomType.Setter
        public Builder eventIdMode(@Nullable String eventIdMode) {

            this.eventIdMode = eventIdMode;
            return this;
        }
        @CustomType.Setter
        public Builder eventStopBehavior(@Nullable String eventStopBehavior) {

            this.eventStopBehavior = eventStopBehavior;
            return this;
        }
        @CustomType.Setter
        public Builder filecacheDuration(@Nullable Integer filecacheDuration) {

            this.filecacheDuration = filecacheDuration;
            return this;
        }
        @CustomType.Setter
        public Builder fragmentLength(@Nullable Integer fragmentLength) {

            this.fragmentLength = fragmentLength;
            return this;
        }
        @CustomType.Setter
        public Builder inputLossAction(@Nullable String inputLossAction) {

            this.inputLossAction = inputLossAction;
            return this;
        }
        @CustomType.Setter
        public Builder numRetries(@Nullable Integer numRetries) {

            this.numRetries = numRetries;
            return this;
        }
        @CustomType.Setter
        public Builder restartDelay(@Nullable Integer restartDelay) {

            this.restartDelay = restartDelay;
            return this;
        }
        @CustomType.Setter
        public Builder segmentationMode(@Nullable String segmentationMode) {

            this.segmentationMode = segmentationMode;
            return this;
        }
        @CustomType.Setter
        public Builder sendDelayMs(@Nullable Integer sendDelayMs) {

            this.sendDelayMs = sendDelayMs;
            return this;
        }
        @CustomType.Setter
        public Builder sparseTrackType(@Nullable String sparseTrackType) {

            this.sparseTrackType = sparseTrackType;
            return this;
        }
        @CustomType.Setter
        public Builder streamManifestBehavior(@Nullable String streamManifestBehavior) {

            this.streamManifestBehavior = streamManifestBehavior;
            return this;
        }
        @CustomType.Setter
        public Builder timestampOffset(@Nullable String timestampOffset) {

            this.timestampOffset = timestampOffset;
            return this;
        }
        @CustomType.Setter
        public Builder timestampOffsetMode(@Nullable String timestampOffsetMode) {

            this.timestampOffsetMode = timestampOffsetMode;
            return this;
        }
        public ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettings build() {
            final var _resultValue = new ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettings();
            _resultValue.acquisitionPointId = acquisitionPointId;
            _resultValue.audioOnlyTimecodeControl = audioOnlyTimecodeControl;
            _resultValue.certificateMode = certificateMode;
            _resultValue.connectionRetryInterval = connectionRetryInterval;
            _resultValue.destination = destination;
            _resultValue.eventId = eventId;
            _resultValue.eventIdMode = eventIdMode;
            _resultValue.eventStopBehavior = eventStopBehavior;
            _resultValue.filecacheDuration = filecacheDuration;
            _resultValue.fragmentLength = fragmentLength;
            _resultValue.inputLossAction = inputLossAction;
            _resultValue.numRetries = numRetries;
            _resultValue.restartDelay = restartDelay;
            _resultValue.segmentationMode = segmentationMode;
            _resultValue.sendDelayMs = sendDelayMs;
            _resultValue.sparseTrackType = sparseTrackType;
            _resultValue.streamManifestBehavior = streamManifestBehavior;
            _resultValue.timestampOffset = timestampOffset;
            _resultValue.timestampOffsetMode = timestampOffsetMode;
            return _resultValue;
        }
    }
}
