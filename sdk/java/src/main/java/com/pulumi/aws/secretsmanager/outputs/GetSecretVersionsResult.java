// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.secretsmanager.outputs;

import com.pulumi.aws.secretsmanager.outputs.GetSecretVersionsVersion;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetSecretVersionsResult {
    /**
     * @return ARN of the secret.
     * 
     */
    private String arn;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private @Nullable Boolean includeDeprecated;
    private String name;
    private String secretId;
    /**
     * @return List of the versions of the secret. Attributes are specified below.
     * 
     */
    private List<GetSecretVersionsVersion> versions;

    private GetSecretVersionsResult() {}
    /**
     * @return ARN of the secret.
     * 
     */
    public String arn() {
        return this.arn;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Optional<Boolean> includeDeprecated() {
        return Optional.ofNullable(this.includeDeprecated);
    }
    public String name() {
        return this.name;
    }
    public String secretId() {
        return this.secretId;
    }
    /**
     * @return List of the versions of the secret. Attributes are specified below.
     * 
     */
    public List<GetSecretVersionsVersion> versions() {
        return this.versions;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSecretVersionsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String arn;
        private String id;
        private @Nullable Boolean includeDeprecated;
        private String name;
        private String secretId;
        private List<GetSecretVersionsVersion> versions;
        public Builder() {}
        public Builder(GetSecretVersionsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.id = defaults.id;
    	      this.includeDeprecated = defaults.includeDeprecated;
    	      this.name = defaults.name;
    	      this.secretId = defaults.secretId;
    	      this.versions = defaults.versions;
        }

        @CustomType.Setter
        public Builder arn(String arn) {
            if (arn == null) {
              throw new MissingRequiredPropertyException("GetSecretVersionsResult", "arn");
            }
            this.arn = arn;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetSecretVersionsResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder includeDeprecated(@Nullable Boolean includeDeprecated) {

            this.includeDeprecated = includeDeprecated;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetSecretVersionsResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder secretId(String secretId) {
            if (secretId == null) {
              throw new MissingRequiredPropertyException("GetSecretVersionsResult", "secretId");
            }
            this.secretId = secretId;
            return this;
        }
        @CustomType.Setter
        public Builder versions(List<GetSecretVersionsVersion> versions) {
            if (versions == null) {
              throw new MissingRequiredPropertyException("GetSecretVersionsResult", "versions");
            }
            this.versions = versions;
            return this;
        }
        public Builder versions(GetSecretVersionsVersion... versions) {
            return versions(List.of(versions));
        }
        public GetSecretVersionsResult build() {
            final var _resultValue = new GetSecretVersionsResult();
            _resultValue.arn = arn;
            _resultValue.id = id;
            _resultValue.includeDeprecated = includeDeprecated;
            _resultValue.name = name;
            _resultValue.secretId = secretId;
            _resultValue.versions = versions;
            return _resultValue;
        }
    }
}
