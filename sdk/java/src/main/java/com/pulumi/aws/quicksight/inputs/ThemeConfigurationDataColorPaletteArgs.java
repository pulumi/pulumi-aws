// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ThemeConfigurationDataColorPaletteArgs extends com.pulumi.resources.ResourceArgs {

    public static final ThemeConfigurationDataColorPaletteArgs Empty = new ThemeConfigurationDataColorPaletteArgs();

    /**
     * List of hexadecimal codes for the colors. Minimum of 8 items and maximum of 20 items.
     * 
     */
    @Import(name="colors")
    private @Nullable Output<List<String>> colors;

    /**
     * @return List of hexadecimal codes for the colors. Minimum of 8 items and maximum of 20 items.
     * 
     */
    public Optional<Output<List<String>>> colors() {
        return Optional.ofNullable(this.colors);
    }

    /**
     * The hexadecimal code of a color that applies to charts where a lack of data is highlighted.
     * 
     */
    @Import(name="emptyFillColor")
    private @Nullable Output<String> emptyFillColor;

    /**
     * @return The hexadecimal code of a color that applies to charts where a lack of data is highlighted.
     * 
     */
    public Optional<Output<String>> emptyFillColor() {
        return Optional.ofNullable(this.emptyFillColor);
    }

    /**
     * The minimum and maximum hexadecimal codes that describe a color gradient. List of exactly 2 items.
     * 
     */
    @Import(name="minMaxGradients")
    private @Nullable Output<List<String>> minMaxGradients;

    /**
     * @return The minimum and maximum hexadecimal codes that describe a color gradient. List of exactly 2 items.
     * 
     */
    public Optional<Output<List<String>>> minMaxGradients() {
        return Optional.ofNullable(this.minMaxGradients);
    }

    private ThemeConfigurationDataColorPaletteArgs() {}

    private ThemeConfigurationDataColorPaletteArgs(ThemeConfigurationDataColorPaletteArgs $) {
        this.colors = $.colors;
        this.emptyFillColor = $.emptyFillColor;
        this.minMaxGradients = $.minMaxGradients;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ThemeConfigurationDataColorPaletteArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ThemeConfigurationDataColorPaletteArgs $;

        public Builder() {
            $ = new ThemeConfigurationDataColorPaletteArgs();
        }

        public Builder(ThemeConfigurationDataColorPaletteArgs defaults) {
            $ = new ThemeConfigurationDataColorPaletteArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param colors List of hexadecimal codes for the colors. Minimum of 8 items and maximum of 20 items.
         * 
         * @return builder
         * 
         */
        public Builder colors(@Nullable Output<List<String>> colors) {
            $.colors = colors;
            return this;
        }

        /**
         * @param colors List of hexadecimal codes for the colors. Minimum of 8 items and maximum of 20 items.
         * 
         * @return builder
         * 
         */
        public Builder colors(List<String> colors) {
            return colors(Output.of(colors));
        }

        /**
         * @param colors List of hexadecimal codes for the colors. Minimum of 8 items and maximum of 20 items.
         * 
         * @return builder
         * 
         */
        public Builder colors(String... colors) {
            return colors(List.of(colors));
        }

        /**
         * @param emptyFillColor The hexadecimal code of a color that applies to charts where a lack of data is highlighted.
         * 
         * @return builder
         * 
         */
        public Builder emptyFillColor(@Nullable Output<String> emptyFillColor) {
            $.emptyFillColor = emptyFillColor;
            return this;
        }

        /**
         * @param emptyFillColor The hexadecimal code of a color that applies to charts where a lack of data is highlighted.
         * 
         * @return builder
         * 
         */
        public Builder emptyFillColor(String emptyFillColor) {
            return emptyFillColor(Output.of(emptyFillColor));
        }

        /**
         * @param minMaxGradients The minimum and maximum hexadecimal codes that describe a color gradient. List of exactly 2 items.
         * 
         * @return builder
         * 
         */
        public Builder minMaxGradients(@Nullable Output<List<String>> minMaxGradients) {
            $.minMaxGradients = minMaxGradients;
            return this;
        }

        /**
         * @param minMaxGradients The minimum and maximum hexadecimal codes that describe a color gradient. List of exactly 2 items.
         * 
         * @return builder
         * 
         */
        public Builder minMaxGradients(List<String> minMaxGradients) {
            return minMaxGradients(Output.of(minMaxGradients));
        }

        /**
         * @param minMaxGradients The minimum and maximum hexadecimal codes that describe a color gradient. List of exactly 2 items.
         * 
         * @return builder
         * 
         */
        public Builder minMaxGradients(String... minMaxGradients) {
            return minMaxGradients(List.of(minMaxGradients));
        }

        public ThemeConfigurationDataColorPaletteArgs build() {
            return $;
        }
    }

}
