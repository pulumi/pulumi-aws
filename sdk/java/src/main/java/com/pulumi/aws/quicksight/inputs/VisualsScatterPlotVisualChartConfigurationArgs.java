// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.inputs;

import com.pulumi.aws.quicksight.inputs.AxisDisplayOptionsArgs;
import com.pulumi.aws.quicksight.inputs.ChartAxisLabelOptionsArgs;
import com.pulumi.aws.quicksight.inputs.DataLabelsOptionsArgs;
import com.pulumi.aws.quicksight.inputs.LegendOptionsArgs;
import com.pulumi.aws.quicksight.inputs.TooltipOptionsArgs;
import com.pulumi.aws.quicksight.inputs.VisualPaletteArgs;
import com.pulumi.aws.quicksight.inputs.VisualsScatterPlotVisualChartConfigurationFieldWellsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VisualsScatterPlotVisualChartConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final VisualsScatterPlotVisualChartConfigurationArgs Empty = new VisualsScatterPlotVisualChartConfigurationArgs();

    @Import(name="dataLabels")
    private @Nullable Output<DataLabelsOptionsArgs> dataLabels;

    public Optional<Output<DataLabelsOptionsArgs>> dataLabels() {
        return Optional.ofNullable(this.dataLabels);
    }

    @Import(name="fieldWells")
    private @Nullable Output<VisualsScatterPlotVisualChartConfigurationFieldWellsArgs> fieldWells;

    public Optional<Output<VisualsScatterPlotVisualChartConfigurationFieldWellsArgs>> fieldWells() {
        return Optional.ofNullable(this.fieldWells);
    }

    @Import(name="legend")
    private @Nullable Output<LegendOptionsArgs> legend;

    public Optional<Output<LegendOptionsArgs>> legend() {
        return Optional.ofNullable(this.legend);
    }

    @Import(name="tooltip")
    private @Nullable Output<TooltipOptionsArgs> tooltip;

    public Optional<Output<TooltipOptionsArgs>> tooltip() {
        return Optional.ofNullable(this.tooltip);
    }

    @Import(name="visualPalette")
    private @Nullable Output<VisualPaletteArgs> visualPalette;

    public Optional<Output<VisualPaletteArgs>> visualPalette() {
        return Optional.ofNullable(this.visualPalette);
    }

    @Import(name="xAxisDisplayOptions")
    private @Nullable Output<AxisDisplayOptionsArgs> xAxisDisplayOptions;

    public Optional<Output<AxisDisplayOptionsArgs>> xAxisDisplayOptions() {
        return Optional.ofNullable(this.xAxisDisplayOptions);
    }

    @Import(name="xAxisLabelOptions")
    private @Nullable Output<ChartAxisLabelOptionsArgs> xAxisLabelOptions;

    public Optional<Output<ChartAxisLabelOptionsArgs>> xAxisLabelOptions() {
        return Optional.ofNullable(this.xAxisLabelOptions);
    }

    @Import(name="yAxisDisplayOptions")
    private @Nullable Output<AxisDisplayOptionsArgs> yAxisDisplayOptions;

    public Optional<Output<AxisDisplayOptionsArgs>> yAxisDisplayOptions() {
        return Optional.ofNullable(this.yAxisDisplayOptions);
    }

    @Import(name="yAxisLabelOptions")
    private @Nullable Output<ChartAxisLabelOptionsArgs> yAxisLabelOptions;

    public Optional<Output<ChartAxisLabelOptionsArgs>> yAxisLabelOptions() {
        return Optional.ofNullable(this.yAxisLabelOptions);
    }

    private VisualsScatterPlotVisualChartConfigurationArgs() {}

    private VisualsScatterPlotVisualChartConfigurationArgs(VisualsScatterPlotVisualChartConfigurationArgs $) {
        this.dataLabels = $.dataLabels;
        this.fieldWells = $.fieldWells;
        this.legend = $.legend;
        this.tooltip = $.tooltip;
        this.visualPalette = $.visualPalette;
        this.xAxisDisplayOptions = $.xAxisDisplayOptions;
        this.xAxisLabelOptions = $.xAxisLabelOptions;
        this.yAxisDisplayOptions = $.yAxisDisplayOptions;
        this.yAxisLabelOptions = $.yAxisLabelOptions;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VisualsScatterPlotVisualChartConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VisualsScatterPlotVisualChartConfigurationArgs $;

        public Builder() {
            $ = new VisualsScatterPlotVisualChartConfigurationArgs();
        }

        public Builder(VisualsScatterPlotVisualChartConfigurationArgs defaults) {
            $ = new VisualsScatterPlotVisualChartConfigurationArgs(Objects.requireNonNull(defaults));
        }

        public Builder dataLabels(@Nullable Output<DataLabelsOptionsArgs> dataLabels) {
            $.dataLabels = dataLabels;
            return this;
        }

        public Builder dataLabels(DataLabelsOptionsArgs dataLabels) {
            return dataLabels(Output.of(dataLabels));
        }

        public Builder fieldWells(@Nullable Output<VisualsScatterPlotVisualChartConfigurationFieldWellsArgs> fieldWells) {
            $.fieldWells = fieldWells;
            return this;
        }

        public Builder fieldWells(VisualsScatterPlotVisualChartConfigurationFieldWellsArgs fieldWells) {
            return fieldWells(Output.of(fieldWells));
        }

        public Builder legend(@Nullable Output<LegendOptionsArgs> legend) {
            $.legend = legend;
            return this;
        }

        public Builder legend(LegendOptionsArgs legend) {
            return legend(Output.of(legend));
        }

        public Builder tooltip(@Nullable Output<TooltipOptionsArgs> tooltip) {
            $.tooltip = tooltip;
            return this;
        }

        public Builder tooltip(TooltipOptionsArgs tooltip) {
            return tooltip(Output.of(tooltip));
        }

        public Builder visualPalette(@Nullable Output<VisualPaletteArgs> visualPalette) {
            $.visualPalette = visualPalette;
            return this;
        }

        public Builder visualPalette(VisualPaletteArgs visualPalette) {
            return visualPalette(Output.of(visualPalette));
        }

        public Builder xAxisDisplayOptions(@Nullable Output<AxisDisplayOptionsArgs> xAxisDisplayOptions) {
            $.xAxisDisplayOptions = xAxisDisplayOptions;
            return this;
        }

        public Builder xAxisDisplayOptions(AxisDisplayOptionsArgs xAxisDisplayOptions) {
            return xAxisDisplayOptions(Output.of(xAxisDisplayOptions));
        }

        public Builder xAxisLabelOptions(@Nullable Output<ChartAxisLabelOptionsArgs> xAxisLabelOptions) {
            $.xAxisLabelOptions = xAxisLabelOptions;
            return this;
        }

        public Builder xAxisLabelOptions(ChartAxisLabelOptionsArgs xAxisLabelOptions) {
            return xAxisLabelOptions(Output.of(xAxisLabelOptions));
        }

        public Builder yAxisDisplayOptions(@Nullable Output<AxisDisplayOptionsArgs> yAxisDisplayOptions) {
            $.yAxisDisplayOptions = yAxisDisplayOptions;
            return this;
        }

        public Builder yAxisDisplayOptions(AxisDisplayOptionsArgs yAxisDisplayOptions) {
            return yAxisDisplayOptions(Output.of(yAxisDisplayOptions));
        }

        public Builder yAxisLabelOptions(@Nullable Output<ChartAxisLabelOptionsArgs> yAxisLabelOptions) {
            $.yAxisLabelOptions = yAxisLabelOptions;
            return this;
        }

        public Builder yAxisLabelOptions(ChartAxisLabelOptionsArgs yAxisLabelOptions) {
            return yAxisLabelOptions(Output.of(yAxisLabelOptions));
        }

        public VisualsScatterPlotVisualChartConfigurationArgs build() {
            return $;
        }
    }

}
