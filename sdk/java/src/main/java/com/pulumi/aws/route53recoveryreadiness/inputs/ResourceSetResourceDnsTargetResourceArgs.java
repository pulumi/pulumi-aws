// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.route53recoveryreadiness.inputs;

import com.pulumi.aws.route53recoveryreadiness.inputs.ResourceSetResourceDnsTargetResourceTargetResourceArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ResourceSetResourceDnsTargetResourceArgs extends com.pulumi.resources.ResourceArgs {

    public static final ResourceSetResourceDnsTargetResourceArgs Empty = new ResourceSetResourceDnsTargetResourceArgs();

    /**
     * DNS Name that acts as the ingress point to a portion of application.
     * 
     */
    @Import(name="domainName", required=true)
    private Output<String> domainName;

    /**
     * @return DNS Name that acts as the ingress point to a portion of application.
     * 
     */
    public Output<String> domainName() {
        return this.domainName;
    }

    /**
     * Hosted Zone ARN that contains the DNS record with the provided name of target resource.
     * 
     */
    @Import(name="hostedZoneArn")
    private @Nullable Output<String> hostedZoneArn;

    /**
     * @return Hosted Zone ARN that contains the DNS record with the provided name of target resource.
     * 
     */
    public Optional<Output<String>> hostedZoneArn() {
        return Optional.ofNullable(this.hostedZoneArn);
    }

    /**
     * Route53 record set id to uniquely identify a record given a `domain_name` and a `record_type`.
     * 
     */
    @Import(name="recordSetId")
    private @Nullable Output<String> recordSetId;

    /**
     * @return Route53 record set id to uniquely identify a record given a `domain_name` and a `record_type`.
     * 
     */
    public Optional<Output<String>> recordSetId() {
        return Optional.ofNullable(this.recordSetId);
    }

    /**
     * Type of DNS Record of target resource.
     * 
     */
    @Import(name="recordType")
    private @Nullable Output<String> recordType;

    /**
     * @return Type of DNS Record of target resource.
     * 
     */
    public Optional<Output<String>> recordType() {
        return Optional.ofNullable(this.recordType);
    }

    /**
     * Target resource the R53 record specified with the above params points to.
     * 
     */
    @Import(name="targetResource")
    private @Nullable Output<ResourceSetResourceDnsTargetResourceTargetResourceArgs> targetResource;

    /**
     * @return Target resource the R53 record specified with the above params points to.
     * 
     */
    public Optional<Output<ResourceSetResourceDnsTargetResourceTargetResourceArgs>> targetResource() {
        return Optional.ofNullable(this.targetResource);
    }

    private ResourceSetResourceDnsTargetResourceArgs() {}

    private ResourceSetResourceDnsTargetResourceArgs(ResourceSetResourceDnsTargetResourceArgs $) {
        this.domainName = $.domainName;
        this.hostedZoneArn = $.hostedZoneArn;
        this.recordSetId = $.recordSetId;
        this.recordType = $.recordType;
        this.targetResource = $.targetResource;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ResourceSetResourceDnsTargetResourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ResourceSetResourceDnsTargetResourceArgs $;

        public Builder() {
            $ = new ResourceSetResourceDnsTargetResourceArgs();
        }

        public Builder(ResourceSetResourceDnsTargetResourceArgs defaults) {
            $ = new ResourceSetResourceDnsTargetResourceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param domainName DNS Name that acts as the ingress point to a portion of application.
         * 
         * @return builder
         * 
         */
        public Builder domainName(Output<String> domainName) {
            $.domainName = domainName;
            return this;
        }

        /**
         * @param domainName DNS Name that acts as the ingress point to a portion of application.
         * 
         * @return builder
         * 
         */
        public Builder domainName(String domainName) {
            return domainName(Output.of(domainName));
        }

        /**
         * @param hostedZoneArn Hosted Zone ARN that contains the DNS record with the provided name of target resource.
         * 
         * @return builder
         * 
         */
        public Builder hostedZoneArn(@Nullable Output<String> hostedZoneArn) {
            $.hostedZoneArn = hostedZoneArn;
            return this;
        }

        /**
         * @param hostedZoneArn Hosted Zone ARN that contains the DNS record with the provided name of target resource.
         * 
         * @return builder
         * 
         */
        public Builder hostedZoneArn(String hostedZoneArn) {
            return hostedZoneArn(Output.of(hostedZoneArn));
        }

        /**
         * @param recordSetId Route53 record set id to uniquely identify a record given a `domain_name` and a `record_type`.
         * 
         * @return builder
         * 
         */
        public Builder recordSetId(@Nullable Output<String> recordSetId) {
            $.recordSetId = recordSetId;
            return this;
        }

        /**
         * @param recordSetId Route53 record set id to uniquely identify a record given a `domain_name` and a `record_type`.
         * 
         * @return builder
         * 
         */
        public Builder recordSetId(String recordSetId) {
            return recordSetId(Output.of(recordSetId));
        }

        /**
         * @param recordType Type of DNS Record of target resource.
         * 
         * @return builder
         * 
         */
        public Builder recordType(@Nullable Output<String> recordType) {
            $.recordType = recordType;
            return this;
        }

        /**
         * @param recordType Type of DNS Record of target resource.
         * 
         * @return builder
         * 
         */
        public Builder recordType(String recordType) {
            return recordType(Output.of(recordType));
        }

        /**
         * @param targetResource Target resource the R53 record specified with the above params points to.
         * 
         * @return builder
         * 
         */
        public Builder targetResource(@Nullable Output<ResourceSetResourceDnsTargetResourceTargetResourceArgs> targetResource) {
            $.targetResource = targetResource;
            return this;
        }

        /**
         * @param targetResource Target resource the R53 record specified with the above params points to.
         * 
         * @return builder
         * 
         */
        public Builder targetResource(ResourceSetResourceDnsTargetResourceTargetResourceArgs targetResource) {
            return targetResource(Output.of(targetResource));
        }

        public ResourceSetResourceDnsTargetResourceArgs build() {
            if ($.domainName == null) {
                throw new MissingRequiredPropertyException("ResourceSetResourceDnsTargetResourceArgs", "domainName");
            }
            return $;
        }
    }

}
