// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ec2.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SubnetCidrReservationState extends com.pulumi.resources.ResourceArgs {

    public static final SubnetCidrReservationState Empty = new SubnetCidrReservationState();

    /**
     * The CIDR block for the reservation.
     * 
     */
    @Import(name="cidrBlock")
    private @Nullable Output<String> cidrBlock;

    /**
     * @return The CIDR block for the reservation.
     * 
     */
    public Optional<Output<String>> cidrBlock() {
        return Optional.ofNullable(this.cidrBlock);
    }

    /**
     * A brief description of the reservation.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A brief description of the reservation.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * ID of the AWS account that owns this CIDR reservation.
     * 
     */
    @Import(name="ownerId")
    private @Nullable Output<String> ownerId;

    /**
     * @return ID of the AWS account that owns this CIDR reservation.
     * 
     */
    public Optional<Output<String>> ownerId() {
        return Optional.ofNullable(this.ownerId);
    }

    /**
     * The type of reservation to create. Valid values: `explicit`, `prefix`
     * 
     */
    @Import(name="reservationType")
    private @Nullable Output<String> reservationType;

    /**
     * @return The type of reservation to create. Valid values: `explicit`, `prefix`
     * 
     */
    public Optional<Output<String>> reservationType() {
        return Optional.ofNullable(this.reservationType);
    }

    /**
     * The ID of the subnet to create the reservation for.
     * 
     */
    @Import(name="subnetId")
    private @Nullable Output<String> subnetId;

    /**
     * @return The ID of the subnet to create the reservation for.
     * 
     */
    public Optional<Output<String>> subnetId() {
        return Optional.ofNullable(this.subnetId);
    }

    private SubnetCidrReservationState() {}

    private SubnetCidrReservationState(SubnetCidrReservationState $) {
        this.cidrBlock = $.cidrBlock;
        this.description = $.description;
        this.ownerId = $.ownerId;
        this.reservationType = $.reservationType;
        this.subnetId = $.subnetId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SubnetCidrReservationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SubnetCidrReservationState $;

        public Builder() {
            $ = new SubnetCidrReservationState();
        }

        public Builder(SubnetCidrReservationState defaults) {
            $ = new SubnetCidrReservationState(Objects.requireNonNull(defaults));
        }

        /**
         * @param cidrBlock The CIDR block for the reservation.
         * 
         * @return builder
         * 
         */
        public Builder cidrBlock(@Nullable Output<String> cidrBlock) {
            $.cidrBlock = cidrBlock;
            return this;
        }

        /**
         * @param cidrBlock The CIDR block for the reservation.
         * 
         * @return builder
         * 
         */
        public Builder cidrBlock(String cidrBlock) {
            return cidrBlock(Output.of(cidrBlock));
        }

        /**
         * @param description A brief description of the reservation.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A brief description of the reservation.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param ownerId ID of the AWS account that owns this CIDR reservation.
         * 
         * @return builder
         * 
         */
        public Builder ownerId(@Nullable Output<String> ownerId) {
            $.ownerId = ownerId;
            return this;
        }

        /**
         * @param ownerId ID of the AWS account that owns this CIDR reservation.
         * 
         * @return builder
         * 
         */
        public Builder ownerId(String ownerId) {
            return ownerId(Output.of(ownerId));
        }

        /**
         * @param reservationType The type of reservation to create. Valid values: `explicit`, `prefix`
         * 
         * @return builder
         * 
         */
        public Builder reservationType(@Nullable Output<String> reservationType) {
            $.reservationType = reservationType;
            return this;
        }

        /**
         * @param reservationType The type of reservation to create. Valid values: `explicit`, `prefix`
         * 
         * @return builder
         * 
         */
        public Builder reservationType(String reservationType) {
            return reservationType(Output.of(reservationType));
        }

        /**
         * @param subnetId The ID of the subnet to create the reservation for.
         * 
         * @return builder
         * 
         */
        public Builder subnetId(@Nullable Output<String> subnetId) {
            $.subnetId = subnetId;
            return this;
        }

        /**
         * @param subnetId The ID of the subnet to create the reservation for.
         * 
         * @return builder
         * 
         */
        public Builder subnetId(String subnetId) {
            return subnetId(Output.of(subnetId));
        }

        public SubnetCidrReservationState build() {
            return $;
        }
    }

}
