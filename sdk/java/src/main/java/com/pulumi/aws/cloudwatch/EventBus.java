// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.cloudwatch;

import com.pulumi.aws.Utilities;
import com.pulumi.aws.cloudwatch.EventBusArgs;
import com.pulumi.aws.cloudwatch.inputs.EventBusState;
import com.pulumi.aws.cloudwatch.outputs.EventBusDeadLetterConfig;
import com.pulumi.aws.cloudwatch.outputs.EventBusLogConfig;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provides an EventBridge event bus resource.
 * 
 * &gt; **Note:** EventBridge was formerly known as CloudWatch Events. The functionality is identical.
 * 
 * ## Example Usage
 * 
 * ### Basic Usages
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.aws.cloudwatch.EventBus;
 * import com.pulumi.aws.cloudwatch.EventBusArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var messenger = new EventBus("messenger", EventBusArgs.builder()
 *             .name("chat-messages")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.aws.cloudwatch.CloudwatchFunctions;
 * import com.pulumi.aws.cloudwatch.inputs.GetEventSourceArgs;
 * import com.pulumi.aws.cloudwatch.EventBus;
 * import com.pulumi.aws.cloudwatch.EventBusArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var examplepartner = CloudwatchFunctions.getEventSource(GetEventSourceArgs.builder()
 *             .namePrefix("aws.partner/examplepartner.com")
 *             .build());
 * 
 *         var examplepartnerEventBus = new EventBus("examplepartnerEventBus", EventBusArgs.builder()
 *             .name(examplepartner.name())
 *             .description("Event bus for example partner events")
 *             .eventSourceName(examplepartner.name())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ### Logging to CloudWatch Logs, S3, and Data Firehose
 * 
 * See [Configuring logs for Amazon EventBridge event buses](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-event-bus-logs.html) for more details.
 * 
 * #### Required Resources
 * 
 * * EventBridge Event Bus with `log_config` configured
 * * Log destinations:
 *   
 *     * CloudWatch Logs log group
 *     * S3 bucket
 *     * Data Firehose delivery stream
 * 
 * * Resource-based policy or tagging for the service-linked role:
 *   
 *     * CloudWatch Logs log group - `aws.cloudwatch.LogResourcePolicy` to allow `delivery.logs.amazonaws.com` to put logs into the log group
 *     * S3 bucket - `aws.s3.BucketPolicy` to allow `delivery.logs.amazonaws.com` to put logs into the bucket
 *     * Data Firehose delivery stream - tagging the delivery stream with `LogDeliveryEnabled = &#34;true&#34;` to allow the service-linked role `AWSServiceRoleForLogDelivery` to deliver logs
 * 
 * * CloudWatch Logs Delivery:
 *   
 *     * `aws.cloudwatch.LogDeliverySource` for each log type (INFO, ERROR, TRACE)
 *     * `aws.cloudwatch.LogDeliveryDestination` for the log destination (S3 bucket, CloudWatch Logs log group, or Data Firehose delivery stream)
 *     * `aws.cloudwatch.LogDelivery` to link each log typeâ€™s delivery source to the delivery destination
 * 
 * ### Example Usage
 * 
 * The following example demonstrates how to set up logging for an EventBridge event bus to all three destinations: CloudWatch Logs, S3, and Data Firehose.
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.aws.AwsFunctions;
 * import com.pulumi.aws.inputs.GetCallerIdentityArgs;
 * import com.pulumi.aws.cloudwatch.EventBus;
 * import com.pulumi.aws.cloudwatch.EventBusArgs;
 * import com.pulumi.aws.cloudwatch.inputs.EventBusLogConfigArgs;
 * import com.pulumi.aws.cloudwatch.LogDeliverySource;
 * import com.pulumi.aws.cloudwatch.LogDeliverySourceArgs;
 * import com.pulumi.aws.s3.Bucket;
 * import com.pulumi.aws.s3.BucketArgs;
 * import com.pulumi.aws.iam.IamFunctions;
 * import com.pulumi.aws.iam.inputs.GetPolicyDocumentArgs;
 * import com.pulumi.aws.s3.BucketPolicy;
 * import com.pulumi.aws.s3.BucketPolicyArgs;
 * import com.pulumi.aws.cloudwatch.LogDeliveryDestination;
 * import com.pulumi.aws.cloudwatch.LogDeliveryDestinationArgs;
 * import com.pulumi.aws.cloudwatch.inputs.LogDeliveryDestinationDeliveryDestinationConfigurationArgs;
 * import com.pulumi.aws.cloudwatch.LogDelivery;
 * import com.pulumi.aws.cloudwatch.LogDeliveryArgs;
 * import com.pulumi.aws.cloudwatch.LogGroup;
 * import com.pulumi.aws.cloudwatch.LogGroupArgs;
 * import com.pulumi.aws.cloudwatch.LogResourcePolicy;
 * import com.pulumi.aws.cloudwatch.LogResourcePolicyArgs;
 * import com.pulumi.aws.kinesis.FirehoseDeliveryStream;
 * import com.pulumi.aws.kinesis.FirehoseDeliveryStreamArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var current = AwsFunctions.getCallerIdentity(GetCallerIdentityArgs.builder()
 *             .build());
 * 
 *         var example = new EventBus("example", EventBusArgs.builder()
 *             .name("example-event-bus")
 *             .logConfig(EventBusLogConfigArgs.builder()
 *                 .includeDetail("FULL")
 *                 .level("TRACE")
 *                 .build())
 *             .build());
 * 
 *         // CloudWatch Log Delivery Sources for INFO, ERROR, and TRACE logs
 *         var infoLogs = new LogDeliverySource("infoLogs", LogDeliverySourceArgs.builder()
 *             .name(example.name().applyValue(_name -> String.format("EventBusSource-%s-INFO_LOGS", _name)))
 *             .logType("INFO_LOGS")
 *             .resourceArn(example.arn())
 *             .build());
 * 
 *         var errorLogs = new LogDeliverySource("errorLogs", LogDeliverySourceArgs.builder()
 *             .name(example.name().applyValue(_name -> String.format("EventBusSource-%s-ERROR_LOGS", _name)))
 *             .logType("ERROR_LOGS")
 *             .resourceArn(example.arn())
 *             .build());
 * 
 *         var traceLogs = new LogDeliverySource("traceLogs", LogDeliverySourceArgs.builder()
 *             .name(example.name().applyValue(_name -> String.format("EventBusSource-%s-TRACE_LOGS", _name)))
 *             .logType("TRACE_LOGS")
 *             .resourceArn(example.arn())
 *             .build());
 * 
 *         // Logging to S3 Bucket
 *         var exampleBucket = new Bucket("exampleBucket", BucketArgs.builder()
 *             .bucket("example-event-bus-logs")
 *             .build());
 * 
 *         final var bucket = Output.tuple(exampleBucket.arn(), infoLogs.arn(), errorLogs.arn(), traceLogs.arn()).applyValue(values -> {
 *             var exampleBucketArn = values.t1;
 *             var infoLogsArn = values.t2;
 *             var errorLogsArn = values.t3;
 *             var traceLogsArn = values.t4;
 *             return IamFunctions.getPolicyDocument(GetPolicyDocumentArgs.builder()
 *                 .statements(GetPolicyDocumentStatementArgs.builder()
 *                     .effect("Allow")
 *                     .principals(GetPolicyDocumentStatementPrincipalArgs.builder()
 *                         .type("Service")
 *                         .identifiers("delivery.logs.amazonaws.com")
 *                         .build())
 *                     .actions("s3:PutObject")
 *                     .resources(String.format("%s/AWSLogs/%s/EventBusLogs/*", exampleBucketArn,current.accountId()))
 *                     .conditions(                    
 *                         GetPolicyDocumentStatementConditionArgs.builder()
 *                             .test("StringEquals")
 *                             .variable("s3:x-amz-acl")
 *                             .values("bucket-owner-full-control")
 *                             .build(),
 *                         GetPolicyDocumentStatementConditionArgs.builder()
 *                             .test("StringEquals")
 *                             .variable("aws:SourceAccount")
 *                             .values(current.accountId())
 *                             .build(),
 *                         GetPolicyDocumentStatementConditionArgs.builder()
 *                             .test("ArnLike")
 *                             .variable("aws:SourceArn")
 *                             .values(                            
 *                                 infoLogsArn,
 *                                 errorLogsArn,
 *                                 traceLogsArn)
 *                             .build())
 *                     .build())
 *                 .build());
 *         });
 * 
 *         var exampleBucketPolicy = new BucketPolicy("exampleBucketPolicy", BucketPolicyArgs.builder()
 *             .bucket(exampleBucket.bucket())
 *             .policy(bucket.json())
 *             .build());
 * 
 *         var s3 = new LogDeliveryDestination("s3", LogDeliveryDestinationArgs.builder()
 *             .name(example.name().applyValue(_name -> String.format("EventsDeliveryDestination-%s-S3", _name)))
 *             .deliveryDestinationConfiguration(LogDeliveryDestinationDeliveryDestinationConfigurationArgs.builder()
 *                 .destinationResourceArn(exampleBucket.arn())
 *                 .build())
 *             .build());
 * 
 *         var s3InfoLogs = new LogDelivery("s3InfoLogs", LogDeliveryArgs.builder()
 *             .deliveryDestinationArn(s3.arn())
 *             .deliverySourceName(infoLogs.name())
 *             .build());
 * 
 *         var s3ErrorLogs = new LogDelivery("s3ErrorLogs", LogDeliveryArgs.builder()
 *             .deliveryDestinationArn(s3.arn())
 *             .deliverySourceName(errorLogs.name())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(s3InfoLogs)
 *                 .build());
 * 
 *         var s3TraceLogs = new LogDelivery("s3TraceLogs", LogDeliveryArgs.builder()
 *             .deliveryDestinationArn(s3.arn())
 *             .deliverySourceName(traceLogs.name())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(s3ErrorLogs)
 *                 .build());
 * 
 *         // Logging to CloudWatch Log Group
 *         var eventBusLogs = new LogGroup("eventBusLogs", LogGroupArgs.builder()
 *             .name(example.name().applyValue(_name -> String.format("/aws/vendedlogs/events/event-bus/%s", _name)))
 *             .build());
 * 
 *         final var cwlogs = Output.tuple(eventBusLogs.arn(), infoLogs.arn(), errorLogs.arn(), traceLogs.arn()).applyValue(values -> {
 *             var eventBusLogsArn = values.t1;
 *             var infoLogsArn = values.t2;
 *             var errorLogsArn = values.t3;
 *             var traceLogsArn = values.t4;
 *             return IamFunctions.getPolicyDocument(GetPolicyDocumentArgs.builder()
 *                 .statements(GetPolicyDocumentStatementArgs.builder()
 *                     .effect("Allow")
 *                     .principals(GetPolicyDocumentStatementPrincipalArgs.builder()
 *                         .type("Service")
 *                         .identifiers("delivery.logs.amazonaws.com")
 *                         .build())
 *                     .actions(                    
 *                         "logs:CreateLogStream",
 *                         "logs:PutLogEvents")
 *                     .resources(String.format("%s:log-stream:*", eventBusLogsArn))
 *                     .conditions(                    
 *                         GetPolicyDocumentStatementConditionArgs.builder()
 *                             .test("StringEquals")
 *                             .variable("aws:SourceAccount")
 *                             .values(current.accountId())
 *                             .build(),
 *                         GetPolicyDocumentStatementConditionArgs.builder()
 *                             .test("ArnLike")
 *                             .variable("aws:SourceArn")
 *                             .values(                            
 *                                 infoLogsArn,
 *                                 errorLogsArn,
 *                                 traceLogsArn)
 *                             .build())
 *                     .build())
 *                 .build());
 *         });
 * 
 *         var exampleLogResourcePolicy = new LogResourcePolicy("exampleLogResourcePolicy", LogResourcePolicyArgs.builder()
 *             .policyDocument(cwlogs.json())
 *             .policyName(example.name().applyValue(_name -> String.format("AWSLogDeliveryWrite-%s", _name)))
 *             .build());
 * 
 *         var cwlogsLogDeliveryDestination = new LogDeliveryDestination("cwlogsLogDeliveryDestination", LogDeliveryDestinationArgs.builder()
 *             .name(example.name().applyValue(_name -> String.format("EventsDeliveryDestination-%s-CWLogs", _name)))
 *             .deliveryDestinationConfiguration(LogDeliveryDestinationDeliveryDestinationConfigurationArgs.builder()
 *                 .destinationResourceArn(eventBusLogs.arn())
 *                 .build())
 *             .build());
 * 
 *         var cwlogsInfoLogs = new LogDelivery("cwlogsInfoLogs", LogDeliveryArgs.builder()
 *             .deliveryDestinationArn(cwlogsLogDeliveryDestination.arn())
 *             .deliverySourceName(infoLogs.name())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(s3InfoLogs)
 *                 .build());
 * 
 *         var cwlogsErrorLogs = new LogDelivery("cwlogsErrorLogs", LogDeliveryArgs.builder()
 *             .deliveryDestinationArn(cwlogsLogDeliveryDestination.arn())
 *             .deliverySourceName(errorLogs.name())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(                
 *                     s3ErrorLogs,
 *                     cwlogsInfoLogs)
 *                 .build());
 * 
 *         var cwlogsTraceLogs = new LogDelivery("cwlogsTraceLogs", LogDeliveryArgs.builder()
 *             .deliveryDestinationArn(cwlogsLogDeliveryDestination.arn())
 *             .deliverySourceName(traceLogs.name())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(                
 *                     s3TraceLogs,
 *                     cwlogsErrorLogs)
 *                 .build());
 * 
 *         // Logging to Data Firehose
 *         var cloudfrontLogs = new FirehoseDeliveryStream("cloudfrontLogs", FirehoseDeliveryStreamArgs.builder()
 *             .tags(Map.of("LogDeliveryEnabled", "true"))
 *             .build());
 * 
 *         var firehose = new LogDeliveryDestination("firehose", LogDeliveryDestinationArgs.builder()
 *             .name(example.name().applyValue(_name -> String.format("EventsDeliveryDestination-%s-Firehose", _name)))
 *             .deliveryDestinationConfiguration(LogDeliveryDestinationDeliveryDestinationConfigurationArgs.builder()
 *                 .destinationResourceArn(cloudfrontLogs.arn())
 *                 .build())
 *             .build());
 * 
 *         var firehoseInfoLogs = new LogDelivery("firehoseInfoLogs", LogDeliveryArgs.builder()
 *             .deliveryDestinationArn(firehose.arn())
 *             .deliverySourceName(infoLogs.name())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(cwlogsInfoLogs)
 *                 .build());
 * 
 *         var firehoseErrorLogs = new LogDelivery("firehoseErrorLogs", LogDeliveryArgs.builder()
 *             .deliveryDestinationArn(firehose.arn())
 *             .deliverySourceName(errorLogs.name())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(                
 *                     cwlogsErrorLogs,
 *                     firehoseInfoLogs)
 *                 .build());
 * 
 *         var firehoseTraceLogs = new LogDelivery("firehoseTraceLogs", LogDeliveryArgs.builder()
 *             .deliveryDestinationArn(firehose.arn())
 *             .deliverySourceName(traceLogs.name())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(                
 *                     cwlogsTraceLogs,
 *                     firehoseErrorLogs)
 *                 .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Using `pulumi import`, import EventBridge event buses using the name of the event bus (which can also be a partner event source name). For example:
 * 
 * ```sh
 * $ pulumi import aws:cloudwatch/eventBus:EventBus messenger chat-messages
 * ```
 * 
 */
@ResourceType(type="aws:cloudwatch/eventBus:EventBus")
public class EventBus extends com.pulumi.resources.CustomResource {
    /**
     * ARN of the event bus.
     * 
     */
    @Export(name="arn", refs={String.class}, tree="[0]")
    private Output<String> arn;

    /**
     * @return ARN of the event bus.
     * 
     */
    public Output<String> arn() {
        return this.arn;
    }
    /**
     * Configuration details of the Amazon SQS queue for EventBridge to use as a dead-letter queue (DLQ). This block supports the following arguments:
     * 
     */
    @Export(name="deadLetterConfig", refs={EventBusDeadLetterConfig.class}, tree="[0]")
    private Output</* @Nullable */ EventBusDeadLetterConfig> deadLetterConfig;

    /**
     * @return Configuration details of the Amazon SQS queue for EventBridge to use as a dead-letter queue (DLQ). This block supports the following arguments:
     * 
     */
    public Output<Optional<EventBusDeadLetterConfig>> deadLetterConfig() {
        return Codegen.optional(this.deadLetterConfig);
    }
    /**
     * Event bus description.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return Event bus description.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * Partner event source that the new event bus will be matched with. Must match `name`.
     * 
     */
    @Export(name="eventSourceName", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> eventSourceName;

    /**
     * @return Partner event source that the new event bus will be matched with. Must match `name`.
     * 
     */
    public Output<Optional<String>> eventSourceName() {
        return Codegen.optional(this.eventSourceName);
    }
    /**
     * Identifier of the AWS KMS customer managed key for EventBridge to use, if you choose to use a customer managed key to encrypt events on this event bus. The identifier can be the key Amazon Resource Name (ARN), KeyId, key alias, or key alias ARN.
     * 
     */
    @Export(name="kmsKeyIdentifier", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> kmsKeyIdentifier;

    /**
     * @return Identifier of the AWS KMS customer managed key for EventBridge to use, if you choose to use a customer managed key to encrypt events on this event bus. The identifier can be the key Amazon Resource Name (ARN), KeyId, key alias, or key alias ARN.
     * 
     */
    public Output<Optional<String>> kmsKeyIdentifier() {
        return Codegen.optional(this.kmsKeyIdentifier);
    }
    /**
     * Block for logging configuration settings for the event bus.
     * 
     */
    @Export(name="logConfig", refs={EventBusLogConfig.class}, tree="[0]")
    private Output</* @Nullable */ EventBusLogConfig> logConfig;

    /**
     * @return Block for logging configuration settings for the event bus.
     * 
     */
    public Output<Optional<EventBusLogConfig>> logConfig() {
        return Codegen.optional(this.logConfig);
    }
    /**
     * Name of the new event bus. The names of custom event buses can&#39;t contain the / character. To create a partner event bus, ensure that the `name` matches the `event_source_name`.
     * 
     * The following arguments are optional:
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of the new event bus. The names of custom event buses can&#39;t contain the / character. To create a partner event bus, ensure that the `name` matches the `event_source_name`.
     * 
     * The following arguments are optional:
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     * 
     */
    @Export(name="region", refs={String.class}, tree="[0]")
    private Output<String> region;

    /**
     * @return Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     * 
     */
    public Output<String> region() {
        return this.region;
    }
    /**
     * Map of tags assigned to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Export(name="tags", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return Map of tags assigned to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Output<Optional<Map<String,String>>> tags() {
        return Codegen.optional(this.tags);
    }
    /**
     * Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     */
    @Export(name="tagsAll", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> tagsAll;

    /**
     * @return Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     */
    public Output<Map<String,String>> tagsAll() {
        return this.tagsAll;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public EventBus(java.lang.String name) {
        this(name, EventBusArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public EventBus(java.lang.String name, @Nullable EventBusArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public EventBus(java.lang.String name, @Nullable EventBusArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("aws:cloudwatch/eventBus:EventBus", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private EventBus(java.lang.String name, Output<java.lang.String> id, @Nullable EventBusState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("aws:cloudwatch/eventBus:EventBus", name, state, makeResourceOptions(options, id), false);
    }

    private static EventBusArgs makeArgs(@Nullable EventBusArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? EventBusArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static EventBus get(java.lang.String name, Output<java.lang.String> id, @Nullable EventBusState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new EventBus(name, id, state, options);
    }
}
