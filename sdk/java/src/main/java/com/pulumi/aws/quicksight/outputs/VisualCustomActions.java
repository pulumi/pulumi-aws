// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.outputs;

import com.pulumi.aws.quicksight.outputs.VisualCustomActionsActionOperation;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class VisualCustomActions {
    private List<VisualCustomActionsActionOperation> actionOperations;
    private String customActionId;
    /**
     * @return Display name for the dashboard.
     * 
     */
    private String name;
    /**
     * @return The dashboard creation status.
     * 
     */
    private String status;
    private String trigger;

    private VisualCustomActions() {}
    public List<VisualCustomActionsActionOperation> actionOperations() {
        return this.actionOperations;
    }
    public String customActionId() {
        return this.customActionId;
    }
    /**
     * @return Display name for the dashboard.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The dashboard creation status.
     * 
     */
    public String status() {
        return this.status;
    }
    public String trigger() {
        return this.trigger;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VisualCustomActions defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<VisualCustomActionsActionOperation> actionOperations;
        private String customActionId;
        private String name;
        private String status;
        private String trigger;
        public Builder() {}
        public Builder(VisualCustomActions defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.actionOperations = defaults.actionOperations;
    	      this.customActionId = defaults.customActionId;
    	      this.name = defaults.name;
    	      this.status = defaults.status;
    	      this.trigger = defaults.trigger;
        }

        @CustomType.Setter
        public Builder actionOperations(List<VisualCustomActionsActionOperation> actionOperations) {
            if (actionOperations == null) {
              throw new MissingRequiredPropertyException("VisualCustomActions", "actionOperations");
            }
            this.actionOperations = actionOperations;
            return this;
        }
        public Builder actionOperations(VisualCustomActionsActionOperation... actionOperations) {
            return actionOperations(List.of(actionOperations));
        }
        @CustomType.Setter
        public Builder customActionId(String customActionId) {
            if (customActionId == null) {
              throw new MissingRequiredPropertyException("VisualCustomActions", "customActionId");
            }
            this.customActionId = customActionId;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("VisualCustomActions", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("VisualCustomActions", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder trigger(String trigger) {
            if (trigger == null) {
              throw new MissingRequiredPropertyException("VisualCustomActions", "trigger");
            }
            this.trigger = trigger;
            return this;
        }
        public VisualCustomActions build() {
            final var _resultValue = new VisualCustomActions();
            _resultValue.actionOperations = actionOperations;
            _resultValue.customActionId = customActionId;
            _resultValue.name = name;
            _resultValue.status = status;
            _resultValue.trigger = trigger;
            return _resultValue;
        }
    }
}
