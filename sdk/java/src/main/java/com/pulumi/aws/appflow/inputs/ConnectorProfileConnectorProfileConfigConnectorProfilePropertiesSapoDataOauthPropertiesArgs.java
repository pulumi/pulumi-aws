// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.appflow.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOauthPropertiesArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOauthPropertiesArgs Empty = new ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOauthPropertiesArgs();

    /**
     * The authorization code url required to redirect to SAP Login Page to fetch authorization code for OAuth type authentication.
     * 
     */
    @Import(name="authCodeUrl", required=true)
    private Output<String> authCodeUrl;

    /**
     * @return The authorization code url required to redirect to SAP Login Page to fetch authorization code for OAuth type authentication.
     * 
     */
    public Output<String> authCodeUrl() {
        return this.authCodeUrl;
    }

    /**
     * The OAuth scopes required for OAuth type authentication.
     * 
     */
    @Import(name="oauthScopes", required=true)
    private Output<List<String>> oauthScopes;

    /**
     * @return The OAuth scopes required for OAuth type authentication.
     * 
     */
    public Output<List<String>> oauthScopes() {
        return this.oauthScopes;
    }

    /**
     * The token URL required for OAuth 2.0 authentication.
     * 
     */
    @Import(name="tokenUrl", required=true)
    private Output<String> tokenUrl;

    /**
     * @return The token URL required for OAuth 2.0 authentication.
     * 
     */
    public Output<String> tokenUrl() {
        return this.tokenUrl;
    }

    private ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOauthPropertiesArgs() {}

    private ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOauthPropertiesArgs(ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOauthPropertiesArgs $) {
        this.authCodeUrl = $.authCodeUrl;
        this.oauthScopes = $.oauthScopes;
        this.tokenUrl = $.tokenUrl;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOauthPropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOauthPropertiesArgs $;

        public Builder() {
            $ = new ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOauthPropertiesArgs();
        }

        public Builder(ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOauthPropertiesArgs defaults) {
            $ = new ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOauthPropertiesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param authCodeUrl The authorization code url required to redirect to SAP Login Page to fetch authorization code for OAuth type authentication.
         * 
         * @return builder
         * 
         */
        public Builder authCodeUrl(Output<String> authCodeUrl) {
            $.authCodeUrl = authCodeUrl;
            return this;
        }

        /**
         * @param authCodeUrl The authorization code url required to redirect to SAP Login Page to fetch authorization code for OAuth type authentication.
         * 
         * @return builder
         * 
         */
        public Builder authCodeUrl(String authCodeUrl) {
            return authCodeUrl(Output.of(authCodeUrl));
        }

        /**
         * @param oauthScopes The OAuth scopes required for OAuth type authentication.
         * 
         * @return builder
         * 
         */
        public Builder oauthScopes(Output<List<String>> oauthScopes) {
            $.oauthScopes = oauthScopes;
            return this;
        }

        /**
         * @param oauthScopes The OAuth scopes required for OAuth type authentication.
         * 
         * @return builder
         * 
         */
        public Builder oauthScopes(List<String> oauthScopes) {
            return oauthScopes(Output.of(oauthScopes));
        }

        /**
         * @param oauthScopes The OAuth scopes required for OAuth type authentication.
         * 
         * @return builder
         * 
         */
        public Builder oauthScopes(String... oauthScopes) {
            return oauthScopes(List.of(oauthScopes));
        }

        /**
         * @param tokenUrl The token URL required for OAuth 2.0 authentication.
         * 
         * @return builder
         * 
         */
        public Builder tokenUrl(Output<String> tokenUrl) {
            $.tokenUrl = tokenUrl;
            return this;
        }

        /**
         * @param tokenUrl The token URL required for OAuth 2.0 authentication.
         * 
         * @return builder
         * 
         */
        public Builder tokenUrl(String tokenUrl) {
            return tokenUrl(Output.of(tokenUrl));
        }

        public ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOauthPropertiesArgs build() {
            $.authCodeUrl = Objects.requireNonNull($.authCodeUrl, "expected parameter 'authCodeUrl' to be non-null");
            $.oauthScopes = Objects.requireNonNull($.oauthScopes, "expected parameter 'oauthScopes' to be non-null");
            $.tokenUrl = Objects.requireNonNull($.tokenUrl, "expected parameter 'tokenUrl' to be non-null");
            return $;
        }
    }

}
