// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.cloudwatch.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class EventTargetRedshiftTarget {
    /**
     * @return The name of the database.
     * 
     */
    private String database;
    /**
     * @return The database user name.
     * 
     */
    private @Nullable String dbUser;
    /**
     * @return The name or ARN of the secret that enables access to the database.
     * 
     */
    private @Nullable String secretsManagerArn;
    /**
     * @return The SQL statement text to run.
     * 
     */
    private @Nullable String sql;
    /**
     * @return The name of the SQL statement.
     * 
     */
    private @Nullable String statementName;
    /**
     * @return Indicates whether to send an event back to EventBridge after the SQL statement runs.
     * 
     */
    private @Nullable Boolean withEvent;

    private EventTargetRedshiftTarget() {}
    /**
     * @return The name of the database.
     * 
     */
    public String database() {
        return this.database;
    }
    /**
     * @return The database user name.
     * 
     */
    public Optional<String> dbUser() {
        return Optional.ofNullable(this.dbUser);
    }
    /**
     * @return The name or ARN of the secret that enables access to the database.
     * 
     */
    public Optional<String> secretsManagerArn() {
        return Optional.ofNullable(this.secretsManagerArn);
    }
    /**
     * @return The SQL statement text to run.
     * 
     */
    public Optional<String> sql() {
        return Optional.ofNullable(this.sql);
    }
    /**
     * @return The name of the SQL statement.
     * 
     */
    public Optional<String> statementName() {
        return Optional.ofNullable(this.statementName);
    }
    /**
     * @return Indicates whether to send an event back to EventBridge after the SQL statement runs.
     * 
     */
    public Optional<Boolean> withEvent() {
        return Optional.ofNullable(this.withEvent);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EventTargetRedshiftTarget defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String database;
        private @Nullable String dbUser;
        private @Nullable String secretsManagerArn;
        private @Nullable String sql;
        private @Nullable String statementName;
        private @Nullable Boolean withEvent;
        public Builder() {}
        public Builder(EventTargetRedshiftTarget defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.database = defaults.database;
    	      this.dbUser = defaults.dbUser;
    	      this.secretsManagerArn = defaults.secretsManagerArn;
    	      this.sql = defaults.sql;
    	      this.statementName = defaults.statementName;
    	      this.withEvent = defaults.withEvent;
        }

        @CustomType.Setter
        public Builder database(String database) {
            if (database == null) {
              throw new MissingRequiredPropertyException("EventTargetRedshiftTarget", "database");
            }
            this.database = database;
            return this;
        }
        @CustomType.Setter
        public Builder dbUser(@Nullable String dbUser) {

            this.dbUser = dbUser;
            return this;
        }
        @CustomType.Setter
        public Builder secretsManagerArn(@Nullable String secretsManagerArn) {

            this.secretsManagerArn = secretsManagerArn;
            return this;
        }
        @CustomType.Setter
        public Builder sql(@Nullable String sql) {

            this.sql = sql;
            return this;
        }
        @CustomType.Setter
        public Builder statementName(@Nullable String statementName) {

            this.statementName = statementName;
            return this;
        }
        @CustomType.Setter
        public Builder withEvent(@Nullable Boolean withEvent) {

            this.withEvent = withEvent;
            return this;
        }
        public EventTargetRedshiftTarget build() {
            final var _resultValue = new EventTargetRedshiftTarget();
            _resultValue.database = database;
            _resultValue.dbUser = dbUser;
            _resultValue.secretsManagerArn = secretsManagerArn;
            _resultValue.sql = sql;
            _resultValue.statementName = statementName;
            _resultValue.withEvent = withEvent;
            return _resultValue;
        }
    }
}
