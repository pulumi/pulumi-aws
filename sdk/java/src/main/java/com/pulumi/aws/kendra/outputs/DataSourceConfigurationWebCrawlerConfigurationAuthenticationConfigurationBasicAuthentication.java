// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.kendra.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class DataSourceConfigurationWebCrawlerConfigurationAuthenticationConfigurationBasicAuthentication {
    /**
     * @return Your secret ARN, which you can create in AWS Secrets Manager. You use a secret if basic authentication credentials are required to connect to a website. The secret stores your credentials of user name and password.
     * 
     */
    private String credentials;
    /**
     * @return The name of the website host you want to connect to using authentication credentials. For example, the host name of `https://a.example.com/page1.html` is `&#34;a.example.com&#34;`.
     * 
     */
    private String host;
    /**
     * @return The port number of the website host you want to connect to using authentication credentials. For example, the port for `https://a.example.com/page1.html` is `443`, the standard port for HTTPS.
     * 
     */
    private Integer port;

    private DataSourceConfigurationWebCrawlerConfigurationAuthenticationConfigurationBasicAuthentication() {}
    /**
     * @return Your secret ARN, which you can create in AWS Secrets Manager. You use a secret if basic authentication credentials are required to connect to a website. The secret stores your credentials of user name and password.
     * 
     */
    public String credentials() {
        return this.credentials;
    }
    /**
     * @return The name of the website host you want to connect to using authentication credentials. For example, the host name of `https://a.example.com/page1.html` is `&#34;a.example.com&#34;`.
     * 
     */
    public String host() {
        return this.host;
    }
    /**
     * @return The port number of the website host you want to connect to using authentication credentials. For example, the port for `https://a.example.com/page1.html` is `443`, the standard port for HTTPS.
     * 
     */
    public Integer port() {
        return this.port;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DataSourceConfigurationWebCrawlerConfigurationAuthenticationConfigurationBasicAuthentication defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String credentials;
        private String host;
        private Integer port;
        public Builder() {}
        public Builder(DataSourceConfigurationWebCrawlerConfigurationAuthenticationConfigurationBasicAuthentication defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.credentials = defaults.credentials;
    	      this.host = defaults.host;
    	      this.port = defaults.port;
        }

        @CustomType.Setter
        public Builder credentials(String credentials) {
            if (credentials == null) {
              throw new MissingRequiredPropertyException("DataSourceConfigurationWebCrawlerConfigurationAuthenticationConfigurationBasicAuthentication", "credentials");
            }
            this.credentials = credentials;
            return this;
        }
        @CustomType.Setter
        public Builder host(String host) {
            if (host == null) {
              throw new MissingRequiredPropertyException("DataSourceConfigurationWebCrawlerConfigurationAuthenticationConfigurationBasicAuthentication", "host");
            }
            this.host = host;
            return this;
        }
        @CustomType.Setter
        public Builder port(Integer port) {
            if (port == null) {
              throw new MissingRequiredPropertyException("DataSourceConfigurationWebCrawlerConfigurationAuthenticationConfigurationBasicAuthentication", "port");
            }
            this.port = port;
            return this;
        }
        public DataSourceConfigurationWebCrawlerConfigurationAuthenticationConfigurationBasicAuthentication build() {
            final var _resultValue = new DataSourceConfigurationWebCrawlerConfigurationAuthenticationConfigurationBasicAuthentication();
            _resultValue.credentials = credentials;
            _resultValue.host = host;
            _resultValue.port = port;
            return _resultValue;
        }
    }
}
