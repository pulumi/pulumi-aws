// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.datazone.inputs;

import com.pulumi.aws.datazone.inputs.EnvironmentLastDeploymentArgs;
import com.pulumi.aws.datazone.inputs.EnvironmentProvisionedResourceArgs;
import com.pulumi.aws.datazone.inputs.EnvironmentTimeoutsArgs;
import com.pulumi.aws.datazone.inputs.EnvironmentUserParameterArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EnvironmentState extends com.pulumi.resources.ResourceArgs {

    public static final EnvironmentState Empty = new EnvironmentState();

    /**
     * The ID of the Amazon Web Services account where the environment exists
     * 
     */
    @Import(name="accountIdentifier")
    private @Nullable Output<String> accountIdentifier;

    /**
     * @return The ID of the Amazon Web Services account where the environment exists
     * 
     */
    public Optional<Output<String>> accountIdentifier() {
        return Optional.ofNullable(this.accountIdentifier);
    }

    /**
     * The Amazon Web Services region where the environment exists.
     * 
     */
    @Import(name="accountRegion")
    private @Nullable Output<String> accountRegion;

    /**
     * @return The Amazon Web Services region where the environment exists.
     * 
     */
    public Optional<Output<String>> accountRegion() {
        return Optional.ofNullable(this.accountRegion);
    }

    /**
     * The blueprint with which the environment is created.
     * 
     */
    @Import(name="blueprintIdentifier")
    private @Nullable Output<String> blueprintIdentifier;

    /**
     * @return The blueprint with which the environment is created.
     * 
     */
    public Optional<Output<String>> blueprintIdentifier() {
        return Optional.ofNullable(this.blueprintIdentifier);
    }

    /**
     * The time the environment was created.
     * 
     */
    @Import(name="createdAt")
    private @Nullable Output<String> createdAt;

    /**
     * @return The time the environment was created.
     * 
     */
    public Optional<Output<String>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    /**
     * The user who created the environment.
     * 
     */
    @Import(name="createdBy")
    private @Nullable Output<String> createdBy;

    /**
     * @return The user who created the environment.
     * 
     */
    public Optional<Output<String>> createdBy() {
        return Optional.ofNullable(this.createdBy);
    }

    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The ID of the domain where the environment exists.
     * 
     */
    @Import(name="domainIdentifier")
    private @Nullable Output<String> domainIdentifier;

    /**
     * @return The ID of the domain where the environment exists.
     * 
     */
    public Optional<Output<String>> domainIdentifier() {
        return Optional.ofNullable(this.domainIdentifier);
    }

    /**
     * The business glossary terms that can be used in this environment.
     * 
     */
    @Import(name="glossaryTerms")
    private @Nullable Output<List<String>> glossaryTerms;

    /**
     * @return The business glossary terms that can be used in this environment.
     * 
     */
    public Optional<Output<List<String>>> glossaryTerms() {
        return Optional.ofNullable(this.glossaryTerms);
    }

    /**
     * The details of the last deployment of the environment.
     * 
     */
    @Import(name="lastDeployments")
    private @Nullable Output<List<EnvironmentLastDeploymentArgs>> lastDeployments;

    /**
     * @return The details of the last deployment of the environment.
     * 
     */
    public Optional<Output<List<EnvironmentLastDeploymentArgs>>> lastDeployments() {
        return Optional.ofNullable(this.lastDeployments);
    }

    /**
     * The name of the environment.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the environment.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the profile with which the environment is created.
     * 
     */
    @Import(name="profileIdentifier")
    private @Nullable Output<String> profileIdentifier;

    /**
     * @return The ID of the profile with which the environment is created.
     * 
     */
    public Optional<Output<String>> profileIdentifier() {
        return Optional.ofNullable(this.profileIdentifier);
    }

    /**
     * The ID of the project where the environment exists.
     * 
     * The following arguments are optional:
     * 
     */
    @Import(name="projectIdentifier")
    private @Nullable Output<String> projectIdentifier;

    /**
     * @return The ID of the project where the environment exists.
     * 
     * The following arguments are optional:
     * 
     */
    public Optional<Output<String>> projectIdentifier() {
        return Optional.ofNullable(this.projectIdentifier);
    }

    /**
     * The provider of the environment.
     * 
     */
    @Import(name="providerEnvironment")
    private @Nullable Output<String> providerEnvironment;

    /**
     * @return The provider of the environment.
     * 
     */
    public Optional<Output<String>> providerEnvironment() {
        return Optional.ofNullable(this.providerEnvironment);
    }

    @Import(name="provisionedResources")
    private @Nullable Output<List<EnvironmentProvisionedResourceArgs>> provisionedResources;

    public Optional<Output<List<EnvironmentProvisionedResourceArgs>>> provisionedResources() {
        return Optional.ofNullable(this.provisionedResources);
    }

    @Import(name="timeouts")
    private @Nullable Output<EnvironmentTimeoutsArgs> timeouts;

    public Optional<Output<EnvironmentTimeoutsArgs>> timeouts() {
        return Optional.ofNullable(this.timeouts);
    }

    /**
     * The user parameters that are used in the environment. See User Parameters for more information.
     * 
     */
    @Import(name="userParameters")
    private @Nullable Output<List<EnvironmentUserParameterArgs>> userParameters;

    /**
     * @return The user parameters that are used in the environment. See User Parameters for more information.
     * 
     */
    public Optional<Output<List<EnvironmentUserParameterArgs>>> userParameters() {
        return Optional.ofNullable(this.userParameters);
    }

    private EnvironmentState() {}

    private EnvironmentState(EnvironmentState $) {
        this.accountIdentifier = $.accountIdentifier;
        this.accountRegion = $.accountRegion;
        this.blueprintIdentifier = $.blueprintIdentifier;
        this.createdAt = $.createdAt;
        this.createdBy = $.createdBy;
        this.description = $.description;
        this.domainIdentifier = $.domainIdentifier;
        this.glossaryTerms = $.glossaryTerms;
        this.lastDeployments = $.lastDeployments;
        this.name = $.name;
        this.profileIdentifier = $.profileIdentifier;
        this.projectIdentifier = $.projectIdentifier;
        this.providerEnvironment = $.providerEnvironment;
        this.provisionedResources = $.provisionedResources;
        this.timeouts = $.timeouts;
        this.userParameters = $.userParameters;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EnvironmentState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EnvironmentState $;

        public Builder() {
            $ = new EnvironmentState();
        }

        public Builder(EnvironmentState defaults) {
            $ = new EnvironmentState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountIdentifier The ID of the Amazon Web Services account where the environment exists
         * 
         * @return builder
         * 
         */
        public Builder accountIdentifier(@Nullable Output<String> accountIdentifier) {
            $.accountIdentifier = accountIdentifier;
            return this;
        }

        /**
         * @param accountIdentifier The ID of the Amazon Web Services account where the environment exists
         * 
         * @return builder
         * 
         */
        public Builder accountIdentifier(String accountIdentifier) {
            return accountIdentifier(Output.of(accountIdentifier));
        }

        /**
         * @param accountRegion The Amazon Web Services region where the environment exists.
         * 
         * @return builder
         * 
         */
        public Builder accountRegion(@Nullable Output<String> accountRegion) {
            $.accountRegion = accountRegion;
            return this;
        }

        /**
         * @param accountRegion The Amazon Web Services region where the environment exists.
         * 
         * @return builder
         * 
         */
        public Builder accountRegion(String accountRegion) {
            return accountRegion(Output.of(accountRegion));
        }

        /**
         * @param blueprintIdentifier The blueprint with which the environment is created.
         * 
         * @return builder
         * 
         */
        public Builder blueprintIdentifier(@Nullable Output<String> blueprintIdentifier) {
            $.blueprintIdentifier = blueprintIdentifier;
            return this;
        }

        /**
         * @param blueprintIdentifier The blueprint with which the environment is created.
         * 
         * @return builder
         * 
         */
        public Builder blueprintIdentifier(String blueprintIdentifier) {
            return blueprintIdentifier(Output.of(blueprintIdentifier));
        }

        /**
         * @param createdAt The time the environment was created.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(@Nullable Output<String> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        /**
         * @param createdAt The time the environment was created.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(String createdAt) {
            return createdAt(Output.of(createdAt));
        }

        /**
         * @param createdBy The user who created the environment.
         * 
         * @return builder
         * 
         */
        public Builder createdBy(@Nullable Output<String> createdBy) {
            $.createdBy = createdBy;
            return this;
        }

        /**
         * @param createdBy The user who created the environment.
         * 
         * @return builder
         * 
         */
        public Builder createdBy(String createdBy) {
            return createdBy(Output.of(createdBy));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param domainIdentifier The ID of the domain where the environment exists.
         * 
         * @return builder
         * 
         */
        public Builder domainIdentifier(@Nullable Output<String> domainIdentifier) {
            $.domainIdentifier = domainIdentifier;
            return this;
        }

        /**
         * @param domainIdentifier The ID of the domain where the environment exists.
         * 
         * @return builder
         * 
         */
        public Builder domainIdentifier(String domainIdentifier) {
            return domainIdentifier(Output.of(domainIdentifier));
        }

        /**
         * @param glossaryTerms The business glossary terms that can be used in this environment.
         * 
         * @return builder
         * 
         */
        public Builder glossaryTerms(@Nullable Output<List<String>> glossaryTerms) {
            $.glossaryTerms = glossaryTerms;
            return this;
        }

        /**
         * @param glossaryTerms The business glossary terms that can be used in this environment.
         * 
         * @return builder
         * 
         */
        public Builder glossaryTerms(List<String> glossaryTerms) {
            return glossaryTerms(Output.of(glossaryTerms));
        }

        /**
         * @param glossaryTerms The business glossary terms that can be used in this environment.
         * 
         * @return builder
         * 
         */
        public Builder glossaryTerms(String... glossaryTerms) {
            return glossaryTerms(List.of(glossaryTerms));
        }

        /**
         * @param lastDeployments The details of the last deployment of the environment.
         * 
         * @return builder
         * 
         */
        public Builder lastDeployments(@Nullable Output<List<EnvironmentLastDeploymentArgs>> lastDeployments) {
            $.lastDeployments = lastDeployments;
            return this;
        }

        /**
         * @param lastDeployments The details of the last deployment of the environment.
         * 
         * @return builder
         * 
         */
        public Builder lastDeployments(List<EnvironmentLastDeploymentArgs> lastDeployments) {
            return lastDeployments(Output.of(lastDeployments));
        }

        /**
         * @param lastDeployments The details of the last deployment of the environment.
         * 
         * @return builder
         * 
         */
        public Builder lastDeployments(EnvironmentLastDeploymentArgs... lastDeployments) {
            return lastDeployments(List.of(lastDeployments));
        }

        /**
         * @param name The name of the environment.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the environment.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param profileIdentifier The ID of the profile with which the environment is created.
         * 
         * @return builder
         * 
         */
        public Builder profileIdentifier(@Nullable Output<String> profileIdentifier) {
            $.profileIdentifier = profileIdentifier;
            return this;
        }

        /**
         * @param profileIdentifier The ID of the profile with which the environment is created.
         * 
         * @return builder
         * 
         */
        public Builder profileIdentifier(String profileIdentifier) {
            return profileIdentifier(Output.of(profileIdentifier));
        }

        /**
         * @param projectIdentifier The ID of the project where the environment exists.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder projectIdentifier(@Nullable Output<String> projectIdentifier) {
            $.projectIdentifier = projectIdentifier;
            return this;
        }

        /**
         * @param projectIdentifier The ID of the project where the environment exists.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder projectIdentifier(String projectIdentifier) {
            return projectIdentifier(Output.of(projectIdentifier));
        }

        /**
         * @param providerEnvironment The provider of the environment.
         * 
         * @return builder
         * 
         */
        public Builder providerEnvironment(@Nullable Output<String> providerEnvironment) {
            $.providerEnvironment = providerEnvironment;
            return this;
        }

        /**
         * @param providerEnvironment The provider of the environment.
         * 
         * @return builder
         * 
         */
        public Builder providerEnvironment(String providerEnvironment) {
            return providerEnvironment(Output.of(providerEnvironment));
        }

        public Builder provisionedResources(@Nullable Output<List<EnvironmentProvisionedResourceArgs>> provisionedResources) {
            $.provisionedResources = provisionedResources;
            return this;
        }

        public Builder provisionedResources(List<EnvironmentProvisionedResourceArgs> provisionedResources) {
            return provisionedResources(Output.of(provisionedResources));
        }

        public Builder provisionedResources(EnvironmentProvisionedResourceArgs... provisionedResources) {
            return provisionedResources(List.of(provisionedResources));
        }

        public Builder timeouts(@Nullable Output<EnvironmentTimeoutsArgs> timeouts) {
            $.timeouts = timeouts;
            return this;
        }

        public Builder timeouts(EnvironmentTimeoutsArgs timeouts) {
            return timeouts(Output.of(timeouts));
        }

        /**
         * @param userParameters The user parameters that are used in the environment. See User Parameters for more information.
         * 
         * @return builder
         * 
         */
        public Builder userParameters(@Nullable Output<List<EnvironmentUserParameterArgs>> userParameters) {
            $.userParameters = userParameters;
            return this;
        }

        /**
         * @param userParameters The user parameters that are used in the environment. See User Parameters for more information.
         * 
         * @return builder
         * 
         */
        public Builder userParameters(List<EnvironmentUserParameterArgs> userParameters) {
            return userParameters(Output.of(userParameters));
        }

        /**
         * @param userParameters The user parameters that are used in the environment. See User Parameters for more information.
         * 
         * @return builder
         * 
         */
        public Builder userParameters(EnvironmentUserParameterArgs... userParameters) {
            return userParameters(List.of(userParameters));
        }

        public EnvironmentState build() {
            return $;
        }
    }

}
