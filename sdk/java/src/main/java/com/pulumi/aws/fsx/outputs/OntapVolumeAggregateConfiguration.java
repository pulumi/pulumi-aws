// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.fsx.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class OntapVolumeAggregateConfiguration {
    /**
     * @return Used to specify the names of the aggregates on which the volume will be created. Each aggregate needs to be in the format aggrX where X is the number of the aggregate.
     * 
     */
    private @Nullable List<String> aggregates;
    /**
     * @return Used to explicitly set the number of constituents within the FlexGroup per storage aggregate. the default value is `8`.
     * 
     */
    private @Nullable Integer constituentsPerAggregate;
    /**
     * @return The total amount of constituents for a `FLEXGROUP` volume. This would equal constituents_per_aggregate x aggregates.
     * 
     */
    private @Nullable Integer totalConstituents;

    private OntapVolumeAggregateConfiguration() {}
    /**
     * @return Used to specify the names of the aggregates on which the volume will be created. Each aggregate needs to be in the format aggrX where X is the number of the aggregate.
     * 
     */
    public List<String> aggregates() {
        return this.aggregates == null ? List.of() : this.aggregates;
    }
    /**
     * @return Used to explicitly set the number of constituents within the FlexGroup per storage aggregate. the default value is `8`.
     * 
     */
    public Optional<Integer> constituentsPerAggregate() {
        return Optional.ofNullable(this.constituentsPerAggregate);
    }
    /**
     * @return The total amount of constituents for a `FLEXGROUP` volume. This would equal constituents_per_aggregate x aggregates.
     * 
     */
    public Optional<Integer> totalConstituents() {
        return Optional.ofNullable(this.totalConstituents);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(OntapVolumeAggregateConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> aggregates;
        private @Nullable Integer constituentsPerAggregate;
        private @Nullable Integer totalConstituents;
        public Builder() {}
        public Builder(OntapVolumeAggregateConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aggregates = defaults.aggregates;
    	      this.constituentsPerAggregate = defaults.constituentsPerAggregate;
    	      this.totalConstituents = defaults.totalConstituents;
        }

        @CustomType.Setter
        public Builder aggregates(@Nullable List<String> aggregates) {

            this.aggregates = aggregates;
            return this;
        }
        public Builder aggregates(String... aggregates) {
            return aggregates(List.of(aggregates));
        }
        @CustomType.Setter
        public Builder constituentsPerAggregate(@Nullable Integer constituentsPerAggregate) {

            this.constituentsPerAggregate = constituentsPerAggregate;
            return this;
        }
        @CustomType.Setter
        public Builder totalConstituents(@Nullable Integer totalConstituents) {

            this.totalConstituents = totalConstituents;
            return this;
        }
        public OntapVolumeAggregateConfiguration build() {
            final var _resultValue = new OntapVolumeAggregateConfiguration();
            _resultValue.aggregates = aggregates;
            _resultValue.constituentsPerAggregate = constituentsPerAggregate;
            _resultValue.totalConstituents = totalConstituents;
            return _resultValue;
        }
    }
}
