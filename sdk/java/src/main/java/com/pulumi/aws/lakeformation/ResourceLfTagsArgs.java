// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.lakeformation;

import com.pulumi.aws.lakeformation.inputs.ResourceLfTagsDatabaseArgs;
import com.pulumi.aws.lakeformation.inputs.ResourceLfTagsLfTagArgs;
import com.pulumi.aws.lakeformation.inputs.ResourceLfTagsTableArgs;
import com.pulumi.aws.lakeformation.inputs.ResourceLfTagsTableWithColumnsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ResourceLfTagsArgs extends com.pulumi.resources.ResourceArgs {

    public static final ResourceLfTagsArgs Empty = new ResourceLfTagsArgs();

    @Import(name="catalogId")
    private @Nullable Output<String> catalogId;

    public Optional<Output<String>> catalogId() {
        return Optional.ofNullable(this.catalogId);
    }

    @Import(name="database")
    private @Nullable Output<ResourceLfTagsDatabaseArgs> database;

    public Optional<Output<ResourceLfTagsDatabaseArgs>> database() {
        return Optional.ofNullable(this.database);
    }

    @Import(name="lfTags", required=true)
    private Output<List<ResourceLfTagsLfTagArgs>> lfTags;

    public Output<List<ResourceLfTagsLfTagArgs>> lfTags() {
        return this.lfTags;
    }

    @Import(name="table")
    private @Nullable Output<ResourceLfTagsTableArgs> table;

    public Optional<Output<ResourceLfTagsTableArgs>> table() {
        return Optional.ofNullable(this.table);
    }

    @Import(name="tableWithColumns")
    private @Nullable Output<ResourceLfTagsTableWithColumnsArgs> tableWithColumns;

    public Optional<Output<ResourceLfTagsTableWithColumnsArgs>> tableWithColumns() {
        return Optional.ofNullable(this.tableWithColumns);
    }

    private ResourceLfTagsArgs() {}

    private ResourceLfTagsArgs(ResourceLfTagsArgs $) {
        this.catalogId = $.catalogId;
        this.database = $.database;
        this.lfTags = $.lfTags;
        this.table = $.table;
        this.tableWithColumns = $.tableWithColumns;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ResourceLfTagsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ResourceLfTagsArgs $;

        public Builder() {
            $ = new ResourceLfTagsArgs();
        }

        public Builder(ResourceLfTagsArgs defaults) {
            $ = new ResourceLfTagsArgs(Objects.requireNonNull(defaults));
        }

        public Builder catalogId(@Nullable Output<String> catalogId) {
            $.catalogId = catalogId;
            return this;
        }

        public Builder catalogId(String catalogId) {
            return catalogId(Output.of(catalogId));
        }

        public Builder database(@Nullable Output<ResourceLfTagsDatabaseArgs> database) {
            $.database = database;
            return this;
        }

        public Builder database(ResourceLfTagsDatabaseArgs database) {
            return database(Output.of(database));
        }

        public Builder lfTags(Output<List<ResourceLfTagsLfTagArgs>> lfTags) {
            $.lfTags = lfTags;
            return this;
        }

        public Builder lfTags(List<ResourceLfTagsLfTagArgs> lfTags) {
            return lfTags(Output.of(lfTags));
        }

        public Builder lfTags(ResourceLfTagsLfTagArgs... lfTags) {
            return lfTags(List.of(lfTags));
        }

        public Builder table(@Nullable Output<ResourceLfTagsTableArgs> table) {
            $.table = table;
            return this;
        }

        public Builder table(ResourceLfTagsTableArgs table) {
            return table(Output.of(table));
        }

        public Builder tableWithColumns(@Nullable Output<ResourceLfTagsTableWithColumnsArgs> tableWithColumns) {
            $.tableWithColumns = tableWithColumns;
            return this;
        }

        public Builder tableWithColumns(ResourceLfTagsTableWithColumnsArgs tableWithColumns) {
            return tableWithColumns(Output.of(tableWithColumns));
        }

        public ResourceLfTagsArgs build() {
            $.lfTags = Objects.requireNonNull($.lfTags, "expected parameter 'lfTags' to be non-null");
            return $;
        }
    }

}
