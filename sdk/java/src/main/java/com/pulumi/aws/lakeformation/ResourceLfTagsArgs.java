// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.lakeformation;

import com.pulumi.aws.lakeformation.inputs.ResourceLfTagsDatabaseArgs;
import com.pulumi.aws.lakeformation.inputs.ResourceLfTagsLfTagArgs;
import com.pulumi.aws.lakeformation.inputs.ResourceLfTagsTableArgs;
import com.pulumi.aws.lakeformation.inputs.ResourceLfTagsTableWithColumnsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ResourceLfTagsArgs extends com.pulumi.resources.ResourceArgs {

    public static final ResourceLfTagsArgs Empty = new ResourceLfTagsArgs();

    /**
     * Identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment.
     * 
     */
    @Import(name="catalogId")
    private @Nullable Output<String> catalogId;

    /**
     * @return Identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment.
     * 
     */
    public Optional<Output<String>> catalogId() {
        return Optional.ofNullable(this.catalogId);
    }

    /**
     * Configuration block for a database resource. See below.
     * 
     */
    @Import(name="database")
    private @Nullable Output<ResourceLfTagsDatabaseArgs> database;

    /**
     * @return Configuration block for a database resource. See below.
     * 
     */
    public Optional<Output<ResourceLfTagsDatabaseArgs>> database() {
        return Optional.ofNullable(this.database);
    }

    /**
     * Set of LF-tags to attach to the resource. See below.
     * 
     * Exactly one of the following is required:
     * 
     */
    @Import(name="lfTags", required=true)
    private Output<List<ResourceLfTagsLfTagArgs>> lfTags;

    /**
     * @return Set of LF-tags to attach to the resource. See below.
     * 
     * Exactly one of the following is required:
     * 
     */
    public Output<List<ResourceLfTagsLfTagArgs>> lfTags() {
        return this.lfTags;
    }

    /**
     * Configuration block for a table resource. See below.
     * 
     */
    @Import(name="table")
    private @Nullable Output<ResourceLfTagsTableArgs> table;

    /**
     * @return Configuration block for a table resource. See below.
     * 
     */
    public Optional<Output<ResourceLfTagsTableArgs>> table() {
        return Optional.ofNullable(this.table);
    }

    /**
     * Configuration block for a table with columns resource. See below.
     * 
     * The following arguments are optional:
     * 
     */
    @Import(name="tableWithColumns")
    private @Nullable Output<ResourceLfTagsTableWithColumnsArgs> tableWithColumns;

    /**
     * @return Configuration block for a table with columns resource. See below.
     * 
     * The following arguments are optional:
     * 
     */
    public Optional<Output<ResourceLfTagsTableWithColumnsArgs>> tableWithColumns() {
        return Optional.ofNullable(this.tableWithColumns);
    }

    private ResourceLfTagsArgs() {}

    private ResourceLfTagsArgs(ResourceLfTagsArgs $) {
        this.catalogId = $.catalogId;
        this.database = $.database;
        this.lfTags = $.lfTags;
        this.table = $.table;
        this.tableWithColumns = $.tableWithColumns;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ResourceLfTagsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ResourceLfTagsArgs $;

        public Builder() {
            $ = new ResourceLfTagsArgs();
        }

        public Builder(ResourceLfTagsArgs defaults) {
            $ = new ResourceLfTagsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param catalogId Identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment.
         * 
         * @return builder
         * 
         */
        public Builder catalogId(@Nullable Output<String> catalogId) {
            $.catalogId = catalogId;
            return this;
        }

        /**
         * @param catalogId Identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment.
         * 
         * @return builder
         * 
         */
        public Builder catalogId(String catalogId) {
            return catalogId(Output.of(catalogId));
        }

        /**
         * @param database Configuration block for a database resource. See below.
         * 
         * @return builder
         * 
         */
        public Builder database(@Nullable Output<ResourceLfTagsDatabaseArgs> database) {
            $.database = database;
            return this;
        }

        /**
         * @param database Configuration block for a database resource. See below.
         * 
         * @return builder
         * 
         */
        public Builder database(ResourceLfTagsDatabaseArgs database) {
            return database(Output.of(database));
        }

        /**
         * @param lfTags Set of LF-tags to attach to the resource. See below.
         * 
         * Exactly one of the following is required:
         * 
         * @return builder
         * 
         */
        public Builder lfTags(Output<List<ResourceLfTagsLfTagArgs>> lfTags) {
            $.lfTags = lfTags;
            return this;
        }

        /**
         * @param lfTags Set of LF-tags to attach to the resource. See below.
         * 
         * Exactly one of the following is required:
         * 
         * @return builder
         * 
         */
        public Builder lfTags(List<ResourceLfTagsLfTagArgs> lfTags) {
            return lfTags(Output.of(lfTags));
        }

        /**
         * @param lfTags Set of LF-tags to attach to the resource. See below.
         * 
         * Exactly one of the following is required:
         * 
         * @return builder
         * 
         */
        public Builder lfTags(ResourceLfTagsLfTagArgs... lfTags) {
            return lfTags(List.of(lfTags));
        }

        /**
         * @param table Configuration block for a table resource. See below.
         * 
         * @return builder
         * 
         */
        public Builder table(@Nullable Output<ResourceLfTagsTableArgs> table) {
            $.table = table;
            return this;
        }

        /**
         * @param table Configuration block for a table resource. See below.
         * 
         * @return builder
         * 
         */
        public Builder table(ResourceLfTagsTableArgs table) {
            return table(Output.of(table));
        }

        /**
         * @param tableWithColumns Configuration block for a table with columns resource. See below.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder tableWithColumns(@Nullable Output<ResourceLfTagsTableWithColumnsArgs> tableWithColumns) {
            $.tableWithColumns = tableWithColumns;
            return this;
        }

        /**
         * @param tableWithColumns Configuration block for a table with columns resource. See below.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder tableWithColumns(ResourceLfTagsTableWithColumnsArgs tableWithColumns) {
            return tableWithColumns(Output.of(tableWithColumns));
        }

        public ResourceLfTagsArgs build() {
            if ($.lfTags == null) {
                throw new MissingRequiredPropertyException("ResourceLfTagsArgs", "lfTags");
            }
            return $;
        }
    }

}
