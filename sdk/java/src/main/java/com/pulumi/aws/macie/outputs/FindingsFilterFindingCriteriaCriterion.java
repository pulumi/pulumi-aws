// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.macie.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class FindingsFilterFindingCriteriaCriterion {
    /**
     * @return The value for the property exclusively matches (equals an exact match for) all the specified values. If you specify multiple values, Amazon Macie uses AND logic to join the values.
     * 
     */
    private @Nullable List<String> eqExactMatches;
    /**
     * @return The value for the property matches (equals) the specified value. If you specify multiple values, Amazon Macie uses OR logic to join the values.
     * 
     */
    private @Nullable List<String> eqs;
    /**
     * @return The name of the field to be evaluated.
     * 
     */
    private String field;
    /**
     * @return The value for the property is greater than the specified value.
     * 
     */
    private @Nullable String gt;
    /**
     * @return The value for the property is greater than or equal to the specified value.
     * 
     */
    private @Nullable String gte;
    /**
     * @return The value for the property is less than the specified value.
     * 
     */
    private @Nullable String lt;
    /**
     * @return The value for the property is less than or equal to the specified value.
     * 
     */
    private @Nullable String lte;
    /**
     * @return The value for the property doesn&#39;t match (doesn&#39;t equal) the specified value. If you specify multiple values, Amazon Macie uses OR logic to join the values.
     * 
     */
    private @Nullable List<String> neqs;

    private FindingsFilterFindingCriteriaCriterion() {}
    /**
     * @return The value for the property exclusively matches (equals an exact match for) all the specified values. If you specify multiple values, Amazon Macie uses AND logic to join the values.
     * 
     */
    public List<String> eqExactMatches() {
        return this.eqExactMatches == null ? List.of() : this.eqExactMatches;
    }
    /**
     * @return The value for the property matches (equals) the specified value. If you specify multiple values, Amazon Macie uses OR logic to join the values.
     * 
     */
    public List<String> eqs() {
        return this.eqs == null ? List.of() : this.eqs;
    }
    /**
     * @return The name of the field to be evaluated.
     * 
     */
    public String field() {
        return this.field;
    }
    /**
     * @return The value for the property is greater than the specified value.
     * 
     */
    public Optional<String> gt() {
        return Optional.ofNullable(this.gt);
    }
    /**
     * @return The value for the property is greater than or equal to the specified value.
     * 
     */
    public Optional<String> gte() {
        return Optional.ofNullable(this.gte);
    }
    /**
     * @return The value for the property is less than the specified value.
     * 
     */
    public Optional<String> lt() {
        return Optional.ofNullable(this.lt);
    }
    /**
     * @return The value for the property is less than or equal to the specified value.
     * 
     */
    public Optional<String> lte() {
        return Optional.ofNullable(this.lte);
    }
    /**
     * @return The value for the property doesn&#39;t match (doesn&#39;t equal) the specified value. If you specify multiple values, Amazon Macie uses OR logic to join the values.
     * 
     */
    public List<String> neqs() {
        return this.neqs == null ? List.of() : this.neqs;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FindingsFilterFindingCriteriaCriterion defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> eqExactMatches;
        private @Nullable List<String> eqs;
        private String field;
        private @Nullable String gt;
        private @Nullable String gte;
        private @Nullable String lt;
        private @Nullable String lte;
        private @Nullable List<String> neqs;
        public Builder() {}
        public Builder(FindingsFilterFindingCriteriaCriterion defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.eqExactMatches = defaults.eqExactMatches;
    	      this.eqs = defaults.eqs;
    	      this.field = defaults.field;
    	      this.gt = defaults.gt;
    	      this.gte = defaults.gte;
    	      this.lt = defaults.lt;
    	      this.lte = defaults.lte;
    	      this.neqs = defaults.neqs;
        }

        @CustomType.Setter
        public Builder eqExactMatches(@Nullable List<String> eqExactMatches) {
            this.eqExactMatches = eqExactMatches;
            return this;
        }
        public Builder eqExactMatches(String... eqExactMatches) {
            return eqExactMatches(List.of(eqExactMatches));
        }
        @CustomType.Setter
        public Builder eqs(@Nullable List<String> eqs) {
            this.eqs = eqs;
            return this;
        }
        public Builder eqs(String... eqs) {
            return eqs(List.of(eqs));
        }
        @CustomType.Setter
        public Builder field(String field) {
            this.field = Objects.requireNonNull(field);
            return this;
        }
        @CustomType.Setter
        public Builder gt(@Nullable String gt) {
            this.gt = gt;
            return this;
        }
        @CustomType.Setter
        public Builder gte(@Nullable String gte) {
            this.gte = gte;
            return this;
        }
        @CustomType.Setter
        public Builder lt(@Nullable String lt) {
            this.lt = lt;
            return this;
        }
        @CustomType.Setter
        public Builder lte(@Nullable String lte) {
            this.lte = lte;
            return this;
        }
        @CustomType.Setter
        public Builder neqs(@Nullable List<String> neqs) {
            this.neqs = neqs;
            return this;
        }
        public Builder neqs(String... neqs) {
            return neqs(List.of(neqs));
        }
        public FindingsFilterFindingCriteriaCriterion build() {
            final var o = new FindingsFilterFindingCriteriaCriterion();
            o.eqExactMatches = eqExactMatches;
            o.eqs = eqs;
            o.field = field;
            o.gt = gt;
            o.gte = gte;
            o.lt = lt;
            o.lte = lte;
            o.neqs = neqs;
            return o;
        }
    }
}
