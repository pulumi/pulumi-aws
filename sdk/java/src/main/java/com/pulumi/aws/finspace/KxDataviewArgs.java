// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.finspace;

import com.pulumi.aws.finspace.inputs.KxDataviewSegmentConfigurationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class KxDataviewArgs extends com.pulumi.resources.ResourceArgs {

    public static final KxDataviewArgs Empty = new KxDataviewArgs();

    /**
     * The option to specify whether you want to apply all the future additions and corrections automatically to the dataview, when you ingest new changesets. The default value is false.
     * 
     */
    @Import(name="autoUpdate", required=true)
    private Output<Boolean> autoUpdate;

    /**
     * @return The option to specify whether you want to apply all the future additions and corrections automatically to the dataview, when you ingest new changesets. The default value is false.
     * 
     */
    public Output<Boolean> autoUpdate() {
        return this.autoUpdate;
    }

    /**
     * The identifier of the availability zones. If attaching a volume, the volume must be in the same availability zone as the dataview that you are attaching to.
     * 
     */
    @Import(name="availabilityZoneId")
    private @Nullable Output<String> availabilityZoneId;

    /**
     * @return The identifier of the availability zones. If attaching a volume, the volume must be in the same availability zone as the dataview that you are attaching to.
     * 
     */
    public Optional<Output<String>> availabilityZoneId() {
        return Optional.ofNullable(this.availabilityZoneId);
    }

    /**
     * The number of availability zones you want to assign per cluster. This can be one of the following:
     * 
     */
    @Import(name="azMode", required=true)
    private Output<String> azMode;

    /**
     * @return The number of availability zones you want to assign per cluster. This can be one of the following:
     * 
     */
    public Output<String> azMode() {
        return this.azMode;
    }

    /**
     * A unique identifier of the changeset of the database that you want to use to ingest data.
     * 
     */
    @Import(name="changesetId")
    private @Nullable Output<String> changesetId;

    /**
     * @return A unique identifier of the changeset of the database that you want to use to ingest data.
     * 
     */
    public Optional<Output<String>> changesetId() {
        return Optional.ofNullable(this.changesetId);
    }

    /**
     * The name of the database where you want to create a dataview.
     * 
     */
    @Import(name="databaseName", required=true)
    private Output<String> databaseName;

    /**
     * @return The name of the database where you want to create a dataview.
     * 
     */
    public Output<String> databaseName() {
        return this.databaseName;
    }

    /**
     * A description for the dataview.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A description for the dataview.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Unique identifier for the KX environment.
     * 
     */
    @Import(name="environmentId", required=true)
    private Output<String> environmentId;

    /**
     * @return Unique identifier for the KX environment.
     * 
     */
    public Output<String> environmentId() {
        return this.environmentId;
    }

    /**
     * A unique identifier for the dataview.
     * 
     * The following arguments are optional:
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return A unique identifier for the dataview.
     * 
     * The following arguments are optional:
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The configuration that contains the database path of the data that you want to place on each selected volume. Each segment must have a unique database path for each volume. If you do not explicitly specify any database path for a volume, they are accessible from the cluster through the default S3/object store segment. See segment_configurations below.
     * 
     */
    @Import(name="segmentConfigurations")
    private @Nullable Output<List<KxDataviewSegmentConfigurationArgs>> segmentConfigurations;

    /**
     * @return The configuration that contains the database path of the data that you want to place on each selected volume. Each segment must have a unique database path for each volume. If you do not explicitly specify any database path for a volume, they are accessible from the cluster through the default S3/object store segment. See segment_configurations below.
     * 
     */
    public Optional<Output<List<KxDataviewSegmentConfigurationArgs>>> segmentConfigurations() {
        return Optional.ofNullable(this.segmentConfigurations);
    }

    /**
     * Key-value mapping of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Key-value mapping of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private KxDataviewArgs() {}

    private KxDataviewArgs(KxDataviewArgs $) {
        this.autoUpdate = $.autoUpdate;
        this.availabilityZoneId = $.availabilityZoneId;
        this.azMode = $.azMode;
        this.changesetId = $.changesetId;
        this.databaseName = $.databaseName;
        this.description = $.description;
        this.environmentId = $.environmentId;
        this.name = $.name;
        this.segmentConfigurations = $.segmentConfigurations;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(KxDataviewArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private KxDataviewArgs $;

        public Builder() {
            $ = new KxDataviewArgs();
        }

        public Builder(KxDataviewArgs defaults) {
            $ = new KxDataviewArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param autoUpdate The option to specify whether you want to apply all the future additions and corrections automatically to the dataview, when you ingest new changesets. The default value is false.
         * 
         * @return builder
         * 
         */
        public Builder autoUpdate(Output<Boolean> autoUpdate) {
            $.autoUpdate = autoUpdate;
            return this;
        }

        /**
         * @param autoUpdate The option to specify whether you want to apply all the future additions and corrections automatically to the dataview, when you ingest new changesets. The default value is false.
         * 
         * @return builder
         * 
         */
        public Builder autoUpdate(Boolean autoUpdate) {
            return autoUpdate(Output.of(autoUpdate));
        }

        /**
         * @param availabilityZoneId The identifier of the availability zones. If attaching a volume, the volume must be in the same availability zone as the dataview that you are attaching to.
         * 
         * @return builder
         * 
         */
        public Builder availabilityZoneId(@Nullable Output<String> availabilityZoneId) {
            $.availabilityZoneId = availabilityZoneId;
            return this;
        }

        /**
         * @param availabilityZoneId The identifier of the availability zones. If attaching a volume, the volume must be in the same availability zone as the dataview that you are attaching to.
         * 
         * @return builder
         * 
         */
        public Builder availabilityZoneId(String availabilityZoneId) {
            return availabilityZoneId(Output.of(availabilityZoneId));
        }

        /**
         * @param azMode The number of availability zones you want to assign per cluster. This can be one of the following:
         * 
         * @return builder
         * 
         */
        public Builder azMode(Output<String> azMode) {
            $.azMode = azMode;
            return this;
        }

        /**
         * @param azMode The number of availability zones you want to assign per cluster. This can be one of the following:
         * 
         * @return builder
         * 
         */
        public Builder azMode(String azMode) {
            return azMode(Output.of(azMode));
        }

        /**
         * @param changesetId A unique identifier of the changeset of the database that you want to use to ingest data.
         * 
         * @return builder
         * 
         */
        public Builder changesetId(@Nullable Output<String> changesetId) {
            $.changesetId = changesetId;
            return this;
        }

        /**
         * @param changesetId A unique identifier of the changeset of the database that you want to use to ingest data.
         * 
         * @return builder
         * 
         */
        public Builder changesetId(String changesetId) {
            return changesetId(Output.of(changesetId));
        }

        /**
         * @param databaseName The name of the database where you want to create a dataview.
         * 
         * @return builder
         * 
         */
        public Builder databaseName(Output<String> databaseName) {
            $.databaseName = databaseName;
            return this;
        }

        /**
         * @param databaseName The name of the database where you want to create a dataview.
         * 
         * @return builder
         * 
         */
        public Builder databaseName(String databaseName) {
            return databaseName(Output.of(databaseName));
        }

        /**
         * @param description A description for the dataview.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A description for the dataview.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param environmentId Unique identifier for the KX environment.
         * 
         * @return builder
         * 
         */
        public Builder environmentId(Output<String> environmentId) {
            $.environmentId = environmentId;
            return this;
        }

        /**
         * @param environmentId Unique identifier for the KX environment.
         * 
         * @return builder
         * 
         */
        public Builder environmentId(String environmentId) {
            return environmentId(Output.of(environmentId));
        }

        /**
         * @param name A unique identifier for the dataview.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A unique identifier for the dataview.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param segmentConfigurations The configuration that contains the database path of the data that you want to place on each selected volume. Each segment must have a unique database path for each volume. If you do not explicitly specify any database path for a volume, they are accessible from the cluster through the default S3/object store segment. See segment_configurations below.
         * 
         * @return builder
         * 
         */
        public Builder segmentConfigurations(@Nullable Output<List<KxDataviewSegmentConfigurationArgs>> segmentConfigurations) {
            $.segmentConfigurations = segmentConfigurations;
            return this;
        }

        /**
         * @param segmentConfigurations The configuration that contains the database path of the data that you want to place on each selected volume. Each segment must have a unique database path for each volume. If you do not explicitly specify any database path for a volume, they are accessible from the cluster through the default S3/object store segment. See segment_configurations below.
         * 
         * @return builder
         * 
         */
        public Builder segmentConfigurations(List<KxDataviewSegmentConfigurationArgs> segmentConfigurations) {
            return segmentConfigurations(Output.of(segmentConfigurations));
        }

        /**
         * @param segmentConfigurations The configuration that contains the database path of the data that you want to place on each selected volume. Each segment must have a unique database path for each volume. If you do not explicitly specify any database path for a volume, they are accessible from the cluster through the default S3/object store segment. See segment_configurations below.
         * 
         * @return builder
         * 
         */
        public Builder segmentConfigurations(KxDataviewSegmentConfigurationArgs... segmentConfigurations) {
            return segmentConfigurations(List.of(segmentConfigurations));
        }

        /**
         * @param tags Key-value mapping of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Key-value mapping of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public KxDataviewArgs build() {
            if ($.autoUpdate == null) {
                throw new MissingRequiredPropertyException("KxDataviewArgs", "autoUpdate");
            }
            if ($.azMode == null) {
                throw new MissingRequiredPropertyException("KxDataviewArgs", "azMode");
            }
            if ($.databaseName == null) {
                throw new MissingRequiredPropertyException("KxDataviewArgs", "databaseName");
            }
            if ($.environmentId == null) {
                throw new MissingRequiredPropertyException("KxDataviewArgs", "environmentId");
            }
            return $;
        }
    }

}
