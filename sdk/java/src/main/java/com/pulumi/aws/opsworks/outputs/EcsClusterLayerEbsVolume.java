// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.opsworks.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class EcsClusterLayerEbsVolume {
    private @Nullable Boolean encrypted;
    /**
     * @return For PIOPS volumes, the IOPS per disk.
     * 
     */
    private @Nullable Integer iops;
    /**
     * @return The path to mount the EBS volume on the layer&#39;s instances.
     * 
     */
    private String mountPoint;
    /**
     * @return The number of disks to use for the EBS volume.
     * 
     */
    private Integer numberOfDisks;
    /**
     * @return The RAID level to use for the volume.
     * 
     */
    private @Nullable String raidLevel;
    /**
     * @return The size of the volume in gigabytes.
     * 
     */
    private Integer size;
    /**
     * @return The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
     * 
     */
    private @Nullable String type;

    private EcsClusterLayerEbsVolume() {}
    public Optional<Boolean> encrypted() {
        return Optional.ofNullable(this.encrypted);
    }
    /**
     * @return For PIOPS volumes, the IOPS per disk.
     * 
     */
    public Optional<Integer> iops() {
        return Optional.ofNullable(this.iops);
    }
    /**
     * @return The path to mount the EBS volume on the layer&#39;s instances.
     * 
     */
    public String mountPoint() {
        return this.mountPoint;
    }
    /**
     * @return The number of disks to use for the EBS volume.
     * 
     */
    public Integer numberOfDisks() {
        return this.numberOfDisks;
    }
    /**
     * @return The RAID level to use for the volume.
     * 
     */
    public Optional<String> raidLevel() {
        return Optional.ofNullable(this.raidLevel);
    }
    /**
     * @return The size of the volume in gigabytes.
     * 
     */
    public Integer size() {
        return this.size;
    }
    /**
     * @return The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EcsClusterLayerEbsVolume defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean encrypted;
        private @Nullable Integer iops;
        private String mountPoint;
        private Integer numberOfDisks;
        private @Nullable String raidLevel;
        private Integer size;
        private @Nullable String type;
        public Builder() {}
        public Builder(EcsClusterLayerEbsVolume defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.encrypted = defaults.encrypted;
    	      this.iops = defaults.iops;
    	      this.mountPoint = defaults.mountPoint;
    	      this.numberOfDisks = defaults.numberOfDisks;
    	      this.raidLevel = defaults.raidLevel;
    	      this.size = defaults.size;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder encrypted(@Nullable Boolean encrypted) {
            this.encrypted = encrypted;
            return this;
        }
        @CustomType.Setter
        public Builder iops(@Nullable Integer iops) {
            this.iops = iops;
            return this;
        }
        @CustomType.Setter
        public Builder mountPoint(String mountPoint) {
            this.mountPoint = Objects.requireNonNull(mountPoint);
            return this;
        }
        @CustomType.Setter
        public Builder numberOfDisks(Integer numberOfDisks) {
            this.numberOfDisks = Objects.requireNonNull(numberOfDisks);
            return this;
        }
        @CustomType.Setter
        public Builder raidLevel(@Nullable String raidLevel) {
            this.raidLevel = raidLevel;
            return this;
        }
        @CustomType.Setter
        public Builder size(Integer size) {
            this.size = Objects.requireNonNull(size);
            return this;
        }
        @CustomType.Setter
        public Builder type(@Nullable String type) {
            this.type = type;
            return this;
        }
        public EcsClusterLayerEbsVolume build() {
            final var o = new EcsClusterLayerEbsVolume();
            o.encrypted = encrypted;
            o.iops = iops;
            o.mountPoint = mountPoint;
            o.numberOfDisks = numberOfDisks;
            o.raidLevel = raidLevel;
            o.size = size;
            o.type = type;
            return o;
        }
    }
}
