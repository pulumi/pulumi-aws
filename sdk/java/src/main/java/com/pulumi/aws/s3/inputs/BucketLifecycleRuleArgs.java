// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.s3.inputs;

import com.pulumi.aws.s3.inputs.BucketLifecycleRuleExpirationArgs;
import com.pulumi.aws.s3.inputs.BucketLifecycleRuleNoncurrentVersionExpirationArgs;
import com.pulumi.aws.s3.inputs.BucketLifecycleRuleNoncurrentVersionTransitionArgs;
import com.pulumi.aws.s3.inputs.BucketLifecycleRuleTransitionArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BucketLifecycleRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final BucketLifecycleRuleArgs Empty = new BucketLifecycleRuleArgs();

    /**
     * Specifies the number of days after initiating a multipart upload when the multipart upload must be completed.
     * 
     */
    @Import(name="abortIncompleteMultipartUploadDays")
    private @Nullable Output<Integer> abortIncompleteMultipartUploadDays;

    /**
     * @return Specifies the number of days after initiating a multipart upload when the multipart upload must be completed.
     * 
     */
    public Optional<Output<Integer>> abortIncompleteMultipartUploadDays() {
        return Optional.ofNullable(this.abortIncompleteMultipartUploadDays);
    }

    /**
     * Specifies lifecycle rule status.
     * 
     */
    @Import(name="enabled", required=true)
    private Output<Boolean> enabled;

    /**
     * @return Specifies lifecycle rule status.
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }

    /**
     * Specifies a period in the object&#39;s expire (documented below).
     * 
     */
    @Import(name="expiration")
    private @Nullable Output<BucketLifecycleRuleExpirationArgs> expiration;

    /**
     * @return Specifies a period in the object&#39;s expire (documented below).
     * 
     */
    public Optional<Output<BucketLifecycleRuleExpirationArgs>> expiration() {
        return Optional.ofNullable(this.expiration);
    }

    /**
     * Unique identifier for the rule. Must be less than or equal to 255 characters in length.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return Unique identifier for the rule. Must be less than or equal to 255 characters in length.
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Specifies when noncurrent object versions expire (documented below).
     * 
     */
    @Import(name="noncurrentVersionExpiration")
    private @Nullable Output<BucketLifecycleRuleNoncurrentVersionExpirationArgs> noncurrentVersionExpiration;

    /**
     * @return Specifies when noncurrent object versions expire (documented below).
     * 
     */
    public Optional<Output<BucketLifecycleRuleNoncurrentVersionExpirationArgs>> noncurrentVersionExpiration() {
        return Optional.ofNullable(this.noncurrentVersionExpiration);
    }

    /**
     * Specifies when noncurrent object versions transitions (documented below).
     * 
     * At least one of `abort_incomplete_multipart_upload_days`, `expiration`, `transition`, `noncurrent_version_expiration`, `noncurrent_version_transition` must be specified.
     * 
     */
    @Import(name="noncurrentVersionTransitions")
    private @Nullable Output<List<BucketLifecycleRuleNoncurrentVersionTransitionArgs>> noncurrentVersionTransitions;

    /**
     * @return Specifies when noncurrent object versions transitions (documented below).
     * 
     * At least one of `abort_incomplete_multipart_upload_days`, `expiration`, `transition`, `noncurrent_version_expiration`, `noncurrent_version_transition` must be specified.
     * 
     */
    public Optional<Output<List<BucketLifecycleRuleNoncurrentVersionTransitionArgs>>> noncurrentVersionTransitions() {
        return Optional.ofNullable(this.noncurrentVersionTransitions);
    }

    /**
     * Object key prefix identifying one or more objects to which the rule applies.
     * 
     */
    @Import(name="prefix")
    private @Nullable Output<String> prefix;

    /**
     * @return Object key prefix identifying one or more objects to which the rule applies.
     * 
     */
    public Optional<Output<String>> prefix() {
        return Optional.ofNullable(this.prefix);
    }

    /**
     * Specifies object tags key and value.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Specifies object tags key and value.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Specifies a period in the object&#39;s transitions (documented below).
     * 
     */
    @Import(name="transitions")
    private @Nullable Output<List<BucketLifecycleRuleTransitionArgs>> transitions;

    /**
     * @return Specifies a period in the object&#39;s transitions (documented below).
     * 
     */
    public Optional<Output<List<BucketLifecycleRuleTransitionArgs>>> transitions() {
        return Optional.ofNullable(this.transitions);
    }

    private BucketLifecycleRuleArgs() {}

    private BucketLifecycleRuleArgs(BucketLifecycleRuleArgs $) {
        this.abortIncompleteMultipartUploadDays = $.abortIncompleteMultipartUploadDays;
        this.enabled = $.enabled;
        this.expiration = $.expiration;
        this.id = $.id;
        this.noncurrentVersionExpiration = $.noncurrentVersionExpiration;
        this.noncurrentVersionTransitions = $.noncurrentVersionTransitions;
        this.prefix = $.prefix;
        this.tags = $.tags;
        this.transitions = $.transitions;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BucketLifecycleRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BucketLifecycleRuleArgs $;

        public Builder() {
            $ = new BucketLifecycleRuleArgs();
        }

        public Builder(BucketLifecycleRuleArgs defaults) {
            $ = new BucketLifecycleRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param abortIncompleteMultipartUploadDays Specifies the number of days after initiating a multipart upload when the multipart upload must be completed.
         * 
         * @return builder
         * 
         */
        public Builder abortIncompleteMultipartUploadDays(@Nullable Output<Integer> abortIncompleteMultipartUploadDays) {
            $.abortIncompleteMultipartUploadDays = abortIncompleteMultipartUploadDays;
            return this;
        }

        /**
         * @param abortIncompleteMultipartUploadDays Specifies the number of days after initiating a multipart upload when the multipart upload must be completed.
         * 
         * @return builder
         * 
         */
        public Builder abortIncompleteMultipartUploadDays(Integer abortIncompleteMultipartUploadDays) {
            return abortIncompleteMultipartUploadDays(Output.of(abortIncompleteMultipartUploadDays));
        }

        /**
         * @param enabled Specifies lifecycle rule status.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Specifies lifecycle rule status.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param expiration Specifies a period in the object&#39;s expire (documented below).
         * 
         * @return builder
         * 
         */
        public Builder expiration(@Nullable Output<BucketLifecycleRuleExpirationArgs> expiration) {
            $.expiration = expiration;
            return this;
        }

        /**
         * @param expiration Specifies a period in the object&#39;s expire (documented below).
         * 
         * @return builder
         * 
         */
        public Builder expiration(BucketLifecycleRuleExpirationArgs expiration) {
            return expiration(Output.of(expiration));
        }

        /**
         * @param id Unique identifier for the rule. Must be less than or equal to 255 characters in length.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id Unique identifier for the rule. Must be less than or equal to 255 characters in length.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param noncurrentVersionExpiration Specifies when noncurrent object versions expire (documented below).
         * 
         * @return builder
         * 
         */
        public Builder noncurrentVersionExpiration(@Nullable Output<BucketLifecycleRuleNoncurrentVersionExpirationArgs> noncurrentVersionExpiration) {
            $.noncurrentVersionExpiration = noncurrentVersionExpiration;
            return this;
        }

        /**
         * @param noncurrentVersionExpiration Specifies when noncurrent object versions expire (documented below).
         * 
         * @return builder
         * 
         */
        public Builder noncurrentVersionExpiration(BucketLifecycleRuleNoncurrentVersionExpirationArgs noncurrentVersionExpiration) {
            return noncurrentVersionExpiration(Output.of(noncurrentVersionExpiration));
        }

        /**
         * @param noncurrentVersionTransitions Specifies when noncurrent object versions transitions (documented below).
         * 
         * At least one of `abort_incomplete_multipart_upload_days`, `expiration`, `transition`, `noncurrent_version_expiration`, `noncurrent_version_transition` must be specified.
         * 
         * @return builder
         * 
         */
        public Builder noncurrentVersionTransitions(@Nullable Output<List<BucketLifecycleRuleNoncurrentVersionTransitionArgs>> noncurrentVersionTransitions) {
            $.noncurrentVersionTransitions = noncurrentVersionTransitions;
            return this;
        }

        /**
         * @param noncurrentVersionTransitions Specifies when noncurrent object versions transitions (documented below).
         * 
         * At least one of `abort_incomplete_multipart_upload_days`, `expiration`, `transition`, `noncurrent_version_expiration`, `noncurrent_version_transition` must be specified.
         * 
         * @return builder
         * 
         */
        public Builder noncurrentVersionTransitions(List<BucketLifecycleRuleNoncurrentVersionTransitionArgs> noncurrentVersionTransitions) {
            return noncurrentVersionTransitions(Output.of(noncurrentVersionTransitions));
        }

        /**
         * @param noncurrentVersionTransitions Specifies when noncurrent object versions transitions (documented below).
         * 
         * At least one of `abort_incomplete_multipart_upload_days`, `expiration`, `transition`, `noncurrent_version_expiration`, `noncurrent_version_transition` must be specified.
         * 
         * @return builder
         * 
         */
        public Builder noncurrentVersionTransitions(BucketLifecycleRuleNoncurrentVersionTransitionArgs... noncurrentVersionTransitions) {
            return noncurrentVersionTransitions(List.of(noncurrentVersionTransitions));
        }

        /**
         * @param prefix Object key prefix identifying one or more objects to which the rule applies.
         * 
         * @return builder
         * 
         */
        public Builder prefix(@Nullable Output<String> prefix) {
            $.prefix = prefix;
            return this;
        }

        /**
         * @param prefix Object key prefix identifying one or more objects to which the rule applies.
         * 
         * @return builder
         * 
         */
        public Builder prefix(String prefix) {
            return prefix(Output.of(prefix));
        }

        /**
         * @param tags Specifies object tags key and value.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Specifies object tags key and value.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param transitions Specifies a period in the object&#39;s transitions (documented below).
         * 
         * @return builder
         * 
         */
        public Builder transitions(@Nullable Output<List<BucketLifecycleRuleTransitionArgs>> transitions) {
            $.transitions = transitions;
            return this;
        }

        /**
         * @param transitions Specifies a period in the object&#39;s transitions (documented below).
         * 
         * @return builder
         * 
         */
        public Builder transitions(List<BucketLifecycleRuleTransitionArgs> transitions) {
            return transitions(Output.of(transitions));
        }

        /**
         * @param transitions Specifies a period in the object&#39;s transitions (documented below).
         * 
         * @return builder
         * 
         */
        public Builder transitions(BucketLifecycleRuleTransitionArgs... transitions) {
            return transitions(List.of(transitions));
        }

        public BucketLifecycleRuleArgs build() {
            $.enabled = Objects.requireNonNull($.enabled, "expected parameter 'enabled' to be non-null");
            return $;
        }
    }

}
