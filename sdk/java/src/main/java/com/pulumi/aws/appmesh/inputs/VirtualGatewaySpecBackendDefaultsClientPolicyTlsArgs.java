// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.appmesh.inputs;

import com.pulumi.aws.appmesh.inputs.VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateArgs;
import com.pulumi.aws.appmesh.inputs.VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VirtualGatewaySpecBackendDefaultsClientPolicyTlsArgs extends com.pulumi.resources.ResourceArgs {

    public static final VirtualGatewaySpecBackendDefaultsClientPolicyTlsArgs Empty = new VirtualGatewaySpecBackendDefaultsClientPolicyTlsArgs();

    /**
     * Listener&#39;s TLS certificate.
     * 
     */
    @Import(name="certificate")
    private @Nullable Output<VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateArgs> certificate;

    /**
     * @return Listener&#39;s TLS certificate.
     * 
     */
    public Optional<Output<VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateArgs>> certificate() {
        return Optional.ofNullable(this.certificate);
    }

    /**
     * Whether the policy is enforced. Default is `true`.
     * 
     */
    @Import(name="enforce")
    private @Nullable Output<Boolean> enforce;

    /**
     * @return Whether the policy is enforced. Default is `true`.
     * 
     */
    public Optional<Output<Boolean>> enforce() {
        return Optional.ofNullable(this.enforce);
    }

    /**
     * One or more ports that the policy is enforced for.
     * 
     */
    @Import(name="ports")
    private @Nullable Output<List<Integer>> ports;

    /**
     * @return One or more ports that the policy is enforced for.
     * 
     */
    public Optional<Output<List<Integer>>> ports() {
        return Optional.ofNullable(this.ports);
    }

    /**
     * Listener&#39;s Transport Layer Security (TLS) validation context.
     * 
     */
    @Import(name="validation", required=true)
    private Output<VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationArgs> validation;

    /**
     * @return Listener&#39;s Transport Layer Security (TLS) validation context.
     * 
     */
    public Output<VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationArgs> validation() {
        return this.validation;
    }

    private VirtualGatewaySpecBackendDefaultsClientPolicyTlsArgs() {}

    private VirtualGatewaySpecBackendDefaultsClientPolicyTlsArgs(VirtualGatewaySpecBackendDefaultsClientPolicyTlsArgs $) {
        this.certificate = $.certificate;
        this.enforce = $.enforce;
        this.ports = $.ports;
        this.validation = $.validation;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VirtualGatewaySpecBackendDefaultsClientPolicyTlsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VirtualGatewaySpecBackendDefaultsClientPolicyTlsArgs $;

        public Builder() {
            $ = new VirtualGatewaySpecBackendDefaultsClientPolicyTlsArgs();
        }

        public Builder(VirtualGatewaySpecBackendDefaultsClientPolicyTlsArgs defaults) {
            $ = new VirtualGatewaySpecBackendDefaultsClientPolicyTlsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificate Listener&#39;s TLS certificate.
         * 
         * @return builder
         * 
         */
        public Builder certificate(@Nullable Output<VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateArgs> certificate) {
            $.certificate = certificate;
            return this;
        }

        /**
         * @param certificate Listener&#39;s TLS certificate.
         * 
         * @return builder
         * 
         */
        public Builder certificate(VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateArgs certificate) {
            return certificate(Output.of(certificate));
        }

        /**
         * @param enforce Whether the policy is enforced. Default is `true`.
         * 
         * @return builder
         * 
         */
        public Builder enforce(@Nullable Output<Boolean> enforce) {
            $.enforce = enforce;
            return this;
        }

        /**
         * @param enforce Whether the policy is enforced. Default is `true`.
         * 
         * @return builder
         * 
         */
        public Builder enforce(Boolean enforce) {
            return enforce(Output.of(enforce));
        }

        /**
         * @param ports One or more ports that the policy is enforced for.
         * 
         * @return builder
         * 
         */
        public Builder ports(@Nullable Output<List<Integer>> ports) {
            $.ports = ports;
            return this;
        }

        /**
         * @param ports One or more ports that the policy is enforced for.
         * 
         * @return builder
         * 
         */
        public Builder ports(List<Integer> ports) {
            return ports(Output.of(ports));
        }

        /**
         * @param ports One or more ports that the policy is enforced for.
         * 
         * @return builder
         * 
         */
        public Builder ports(Integer... ports) {
            return ports(List.of(ports));
        }

        /**
         * @param validation Listener&#39;s Transport Layer Security (TLS) validation context.
         * 
         * @return builder
         * 
         */
        public Builder validation(Output<VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationArgs> validation) {
            $.validation = validation;
            return this;
        }

        /**
         * @param validation Listener&#39;s Transport Layer Security (TLS) validation context.
         * 
         * @return builder
         * 
         */
        public Builder validation(VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationArgs validation) {
            return validation(Output.of(validation));
        }

        public VirtualGatewaySpecBackendDefaultsClientPolicyTlsArgs build() {
            if ($.validation == null) {
                throw new MissingRequiredPropertyException("VirtualGatewaySpecBackendDefaultsClientPolicyTlsArgs", "validation");
            }
            return $;
        }
    }

}
