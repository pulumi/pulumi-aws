// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.inputs;

import com.pulumi.aws.quicksight.inputs.DataSetPhysicalTableMapCustomSqlColumnArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DataSetPhysicalTableMapCustomSqlArgs extends com.pulumi.resources.ResourceArgs {

    public static final DataSetPhysicalTableMapCustomSqlArgs Empty = new DataSetPhysicalTableMapCustomSqlArgs();

    /**
     * Column schema from the SQL query result set. See columns.
     * 
     */
    @Import(name="columns")
    private @Nullable Output<List<DataSetPhysicalTableMapCustomSqlColumnArgs>> columns;

    /**
     * @return Column schema from the SQL query result set. See columns.
     * 
     */
    public Optional<Output<List<DataSetPhysicalTableMapCustomSqlColumnArgs>>> columns() {
        return Optional.ofNullable(this.columns);
    }

    /**
     * ARN of the data source.
     * 
     */
    @Import(name="dataSourceArn", required=true)
    private Output<String> dataSourceArn;

    /**
     * @return ARN of the data source.
     * 
     */
    public Output<String> dataSourceArn() {
        return this.dataSourceArn;
    }

    /**
     * Display name for the SQL query result.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Display name for the SQL query result.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * SQL query.
     * 
     */
    @Import(name="sqlQuery", required=true)
    private Output<String> sqlQuery;

    /**
     * @return SQL query.
     * 
     */
    public Output<String> sqlQuery() {
        return this.sqlQuery;
    }

    private DataSetPhysicalTableMapCustomSqlArgs() {}

    private DataSetPhysicalTableMapCustomSqlArgs(DataSetPhysicalTableMapCustomSqlArgs $) {
        this.columns = $.columns;
        this.dataSourceArn = $.dataSourceArn;
        this.name = $.name;
        this.sqlQuery = $.sqlQuery;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DataSetPhysicalTableMapCustomSqlArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DataSetPhysicalTableMapCustomSqlArgs $;

        public Builder() {
            $ = new DataSetPhysicalTableMapCustomSqlArgs();
        }

        public Builder(DataSetPhysicalTableMapCustomSqlArgs defaults) {
            $ = new DataSetPhysicalTableMapCustomSqlArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param columns Column schema from the SQL query result set. See columns.
         * 
         * @return builder
         * 
         */
        public Builder columns(@Nullable Output<List<DataSetPhysicalTableMapCustomSqlColumnArgs>> columns) {
            $.columns = columns;
            return this;
        }

        /**
         * @param columns Column schema from the SQL query result set. See columns.
         * 
         * @return builder
         * 
         */
        public Builder columns(List<DataSetPhysicalTableMapCustomSqlColumnArgs> columns) {
            return columns(Output.of(columns));
        }

        /**
         * @param columns Column schema from the SQL query result set. See columns.
         * 
         * @return builder
         * 
         */
        public Builder columns(DataSetPhysicalTableMapCustomSqlColumnArgs... columns) {
            return columns(List.of(columns));
        }

        /**
         * @param dataSourceArn ARN of the data source.
         * 
         * @return builder
         * 
         */
        public Builder dataSourceArn(Output<String> dataSourceArn) {
            $.dataSourceArn = dataSourceArn;
            return this;
        }

        /**
         * @param dataSourceArn ARN of the data source.
         * 
         * @return builder
         * 
         */
        public Builder dataSourceArn(String dataSourceArn) {
            return dataSourceArn(Output.of(dataSourceArn));
        }

        /**
         * @param name Display name for the SQL query result.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Display name for the SQL query result.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param sqlQuery SQL query.
         * 
         * @return builder
         * 
         */
        public Builder sqlQuery(Output<String> sqlQuery) {
            $.sqlQuery = sqlQuery;
            return this;
        }

        /**
         * @param sqlQuery SQL query.
         * 
         * @return builder
         * 
         */
        public Builder sqlQuery(String sqlQuery) {
            return sqlQuery(Output.of(sqlQuery));
        }

        public DataSetPhysicalTableMapCustomSqlArgs build() {
            $.dataSourceArn = Objects.requireNonNull($.dataSourceArn, "expected parameter 'dataSourceArn' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.sqlQuery = Objects.requireNonNull($.sqlQuery, "expected parameter 'sqlQuery' to be non-null");
            return $;
        }
    }

}
