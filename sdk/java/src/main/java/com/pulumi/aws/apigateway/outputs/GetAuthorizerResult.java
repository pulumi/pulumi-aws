// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.apigateway.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetAuthorizerResult {
    /**
     * @return ARN of the API Gateway Authorizer.
     * 
     */
    private String arn;
    /**
     * @return Credentials required for the authorizer.
     * 
     */
    private String authorizerCredentials;
    private String authorizerId;
    /**
     * @return TTL of cached authorizer results in seconds.
     * 
     */
    private Integer authorizerResultTtlInSeconds;
    /**
     * @return Authorizer&#39;s Uniform Resource Identifier (URI).
     * 
     */
    private String authorizerUri;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Source of the identity in an incoming request.
     * 
     */
    private String identitySource;
    /**
     * @return Validation expression for the incoming identity.
     * 
     */
    private String identityValidationExpression;
    /**
     * @return Name of the authorizer.
     * 
     */
    private String name;
    /**
     * @return List of the Amazon Cognito user pool ARNs.
     * 
     */
    private List<String> providerArns;
    private String restApiId;
    /**
     * @return Type of the authorizer.
     * 
     */
    private String type;

    private GetAuthorizerResult() {}
    /**
     * @return ARN of the API Gateway Authorizer.
     * 
     */
    public String arn() {
        return this.arn;
    }
    /**
     * @return Credentials required for the authorizer.
     * 
     */
    public String authorizerCredentials() {
        return this.authorizerCredentials;
    }
    public String authorizerId() {
        return this.authorizerId;
    }
    /**
     * @return TTL of cached authorizer results in seconds.
     * 
     */
    public Integer authorizerResultTtlInSeconds() {
        return this.authorizerResultTtlInSeconds;
    }
    /**
     * @return Authorizer&#39;s Uniform Resource Identifier (URI).
     * 
     */
    public String authorizerUri() {
        return this.authorizerUri;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Source of the identity in an incoming request.
     * 
     */
    public String identitySource() {
        return this.identitySource;
    }
    /**
     * @return Validation expression for the incoming identity.
     * 
     */
    public String identityValidationExpression() {
        return this.identityValidationExpression;
    }
    /**
     * @return Name of the authorizer.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return List of the Amazon Cognito user pool ARNs.
     * 
     */
    public List<String> providerArns() {
        return this.providerArns;
    }
    public String restApiId() {
        return this.restApiId;
    }
    /**
     * @return Type of the authorizer.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAuthorizerResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String arn;
        private String authorizerCredentials;
        private String authorizerId;
        private Integer authorizerResultTtlInSeconds;
        private String authorizerUri;
        private String id;
        private String identitySource;
        private String identityValidationExpression;
        private String name;
        private List<String> providerArns;
        private String restApiId;
        private String type;
        public Builder() {}
        public Builder(GetAuthorizerResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.authorizerCredentials = defaults.authorizerCredentials;
    	      this.authorizerId = defaults.authorizerId;
    	      this.authorizerResultTtlInSeconds = defaults.authorizerResultTtlInSeconds;
    	      this.authorizerUri = defaults.authorizerUri;
    	      this.id = defaults.id;
    	      this.identitySource = defaults.identitySource;
    	      this.identityValidationExpression = defaults.identityValidationExpression;
    	      this.name = defaults.name;
    	      this.providerArns = defaults.providerArns;
    	      this.restApiId = defaults.restApiId;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder arn(String arn) {
            if (arn == null) {
              throw new MissingRequiredPropertyException("GetAuthorizerResult", "arn");
            }
            this.arn = arn;
            return this;
        }
        @CustomType.Setter
        public Builder authorizerCredentials(String authorizerCredentials) {
            if (authorizerCredentials == null) {
              throw new MissingRequiredPropertyException("GetAuthorizerResult", "authorizerCredentials");
            }
            this.authorizerCredentials = authorizerCredentials;
            return this;
        }
        @CustomType.Setter
        public Builder authorizerId(String authorizerId) {
            if (authorizerId == null) {
              throw new MissingRequiredPropertyException("GetAuthorizerResult", "authorizerId");
            }
            this.authorizerId = authorizerId;
            return this;
        }
        @CustomType.Setter
        public Builder authorizerResultTtlInSeconds(Integer authorizerResultTtlInSeconds) {
            if (authorizerResultTtlInSeconds == null) {
              throw new MissingRequiredPropertyException("GetAuthorizerResult", "authorizerResultTtlInSeconds");
            }
            this.authorizerResultTtlInSeconds = authorizerResultTtlInSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder authorizerUri(String authorizerUri) {
            if (authorizerUri == null) {
              throw new MissingRequiredPropertyException("GetAuthorizerResult", "authorizerUri");
            }
            this.authorizerUri = authorizerUri;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetAuthorizerResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder identitySource(String identitySource) {
            if (identitySource == null) {
              throw new MissingRequiredPropertyException("GetAuthorizerResult", "identitySource");
            }
            this.identitySource = identitySource;
            return this;
        }
        @CustomType.Setter
        public Builder identityValidationExpression(String identityValidationExpression) {
            if (identityValidationExpression == null) {
              throw new MissingRequiredPropertyException("GetAuthorizerResult", "identityValidationExpression");
            }
            this.identityValidationExpression = identityValidationExpression;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetAuthorizerResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder providerArns(List<String> providerArns) {
            if (providerArns == null) {
              throw new MissingRequiredPropertyException("GetAuthorizerResult", "providerArns");
            }
            this.providerArns = providerArns;
            return this;
        }
        public Builder providerArns(String... providerArns) {
            return providerArns(List.of(providerArns));
        }
        @CustomType.Setter
        public Builder restApiId(String restApiId) {
            if (restApiId == null) {
              throw new MissingRequiredPropertyException("GetAuthorizerResult", "restApiId");
            }
            this.restApiId = restApiId;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetAuthorizerResult", "type");
            }
            this.type = type;
            return this;
        }
        public GetAuthorizerResult build() {
            final var _resultValue = new GetAuthorizerResult();
            _resultValue.arn = arn;
            _resultValue.authorizerCredentials = authorizerCredentials;
            _resultValue.authorizerId = authorizerId;
            _resultValue.authorizerResultTtlInSeconds = authorizerResultTtlInSeconds;
            _resultValue.authorizerUri = authorizerUri;
            _resultValue.id = id;
            _resultValue.identitySource = identitySource;
            _resultValue.identityValidationExpression = identityValidationExpression;
            _resultValue.name = name;
            _resultValue.providerArns = providerArns;
            _resultValue.restApiId = restApiId;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
