// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.vpc;

import com.pulumi.aws.vpc.inputs.RouteServerPeerBgpOptionsArgs;
import com.pulumi.aws.vpc.inputs.RouteServerPeerTimeoutsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RouteServerPeerArgs extends com.pulumi.resources.ResourceArgs {

    public static final RouteServerPeerArgs Empty = new RouteServerPeerArgs();

    /**
     * The BGP options for the peer, including ASN (Autonomous System Number) and BFD (Bidrectional Forwarding Detection) settings. Configuration block with BGP Options configuration Detailed below
     * 
     */
    @Import(name="bgpOptions")
    private @Nullable Output<RouteServerPeerBgpOptionsArgs> bgpOptions;

    /**
     * @return The BGP options for the peer, including ASN (Autonomous System Number) and BFD (Bidrectional Forwarding Detection) settings. Configuration block with BGP Options configuration Detailed below
     * 
     */
    public Optional<Output<RouteServerPeerBgpOptionsArgs>> bgpOptions() {
        return Optional.ofNullable(this.bgpOptions);
    }

    /**
     * The IPv4 address of the peer device.
     * 
     */
    @Import(name="peerAddress", required=true)
    private Output<String> peerAddress;

    /**
     * @return The IPv4 address of the peer device.
     * 
     */
    public Output<String> peerAddress() {
        return this.peerAddress;
    }

    /**
     * The ID of the route server endpoint for which to create a peer.
     * 
     */
    @Import(name="routeServerEndpointId", required=true)
    private Output<String> routeServerEndpointId;

    /**
     * @return The ID of the route server endpoint for which to create a peer.
     * 
     */
    public Output<String> routeServerEndpointId() {
        return this.routeServerEndpointId;
    }

    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="timeouts")
    private @Nullable Output<RouteServerPeerTimeoutsArgs> timeouts;

    public Optional<Output<RouteServerPeerTimeoutsArgs>> timeouts() {
        return Optional.ofNullable(this.timeouts);
    }

    private RouteServerPeerArgs() {}

    private RouteServerPeerArgs(RouteServerPeerArgs $) {
        this.bgpOptions = $.bgpOptions;
        this.peerAddress = $.peerAddress;
        this.routeServerEndpointId = $.routeServerEndpointId;
        this.tags = $.tags;
        this.timeouts = $.timeouts;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RouteServerPeerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RouteServerPeerArgs $;

        public Builder() {
            $ = new RouteServerPeerArgs();
        }

        public Builder(RouteServerPeerArgs defaults) {
            $ = new RouteServerPeerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bgpOptions The BGP options for the peer, including ASN (Autonomous System Number) and BFD (Bidrectional Forwarding Detection) settings. Configuration block with BGP Options configuration Detailed below
         * 
         * @return builder
         * 
         */
        public Builder bgpOptions(@Nullable Output<RouteServerPeerBgpOptionsArgs> bgpOptions) {
            $.bgpOptions = bgpOptions;
            return this;
        }

        /**
         * @param bgpOptions The BGP options for the peer, including ASN (Autonomous System Number) and BFD (Bidrectional Forwarding Detection) settings. Configuration block with BGP Options configuration Detailed below
         * 
         * @return builder
         * 
         */
        public Builder bgpOptions(RouteServerPeerBgpOptionsArgs bgpOptions) {
            return bgpOptions(Output.of(bgpOptions));
        }

        /**
         * @param peerAddress The IPv4 address of the peer device.
         * 
         * @return builder
         * 
         */
        public Builder peerAddress(Output<String> peerAddress) {
            $.peerAddress = peerAddress;
            return this;
        }

        /**
         * @param peerAddress The IPv4 address of the peer device.
         * 
         * @return builder
         * 
         */
        public Builder peerAddress(String peerAddress) {
            return peerAddress(Output.of(peerAddress));
        }

        /**
         * @param routeServerEndpointId The ID of the route server endpoint for which to create a peer.
         * 
         * @return builder
         * 
         */
        public Builder routeServerEndpointId(Output<String> routeServerEndpointId) {
            $.routeServerEndpointId = routeServerEndpointId;
            return this;
        }

        /**
         * @param routeServerEndpointId The ID of the route server endpoint for which to create a peer.
         * 
         * @return builder
         * 
         */
        public Builder routeServerEndpointId(String routeServerEndpointId) {
            return routeServerEndpointId(Output.of(routeServerEndpointId));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder timeouts(@Nullable Output<RouteServerPeerTimeoutsArgs> timeouts) {
            $.timeouts = timeouts;
            return this;
        }

        public Builder timeouts(RouteServerPeerTimeoutsArgs timeouts) {
            return timeouts(Output.of(timeouts));
        }

        public RouteServerPeerArgs build() {
            if ($.peerAddress == null) {
                throw new MissingRequiredPropertyException("RouteServerPeerArgs", "peerAddress");
            }
            if ($.routeServerEndpointId == null) {
                throw new MissingRequiredPropertyException("RouteServerPeerArgs", "routeServerEndpointId");
            }
            return $;
        }
    }

}
