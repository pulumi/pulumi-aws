// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.medialive.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3SettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3SettingsArgs Empty = new ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3SettingsArgs();

    /**
     * Sets the attenuation control.
     * 
     */
    @Import(name="attenuationControl")
    private @Nullable Output<String> attenuationControl;

    /**
     * @return Sets the attenuation control.
     * 
     */
    public Optional<Output<String>> attenuationControl() {
        return Optional.ofNullable(this.attenuationControl);
    }

    /**
     * Average bitrate in bits/second.
     * 
     */
    @Import(name="bitrate")
    private @Nullable Output<Double> bitrate;

    /**
     * @return Average bitrate in bits/second.
     * 
     */
    public Optional<Output<Double>> bitrate() {
        return Optional.ofNullable(this.bitrate);
    }

    /**
     * Specifies the bitstream mode (bsmod) for the emitted AC-3 stream.
     * 
     */
    @Import(name="bitstreamMode")
    private @Nullable Output<String> bitstreamMode;

    /**
     * @return Specifies the bitstream mode (bsmod) for the emitted AC-3 stream.
     * 
     */
    public Optional<Output<String>> bitstreamMode() {
        return Optional.ofNullable(this.bitstreamMode);
    }

    /**
     * Dolby Digital Plus coding mode.
     * 
     */
    @Import(name="codingMode")
    private @Nullable Output<String> codingMode;

    /**
     * @return Dolby Digital Plus coding mode.
     * 
     */
    public Optional<Output<String>> codingMode() {
        return Optional.ofNullable(this.codingMode);
    }

    @Import(name="dcFilter")
    private @Nullable Output<String> dcFilter;

    public Optional<Output<String>> dcFilter() {
        return Optional.ofNullable(this.dcFilter);
    }

    /**
     * Sets the dialnorm for the output.
     * 
     */
    @Import(name="dialnorm")
    private @Nullable Output<Integer> dialnorm;

    /**
     * @return Sets the dialnorm for the output.
     * 
     */
    public Optional<Output<Integer>> dialnorm() {
        return Optional.ofNullable(this.dialnorm);
    }

    /**
     * Sets the Dolby dynamic range compression profile.
     * 
     */
    @Import(name="drcLine")
    private @Nullable Output<String> drcLine;

    /**
     * @return Sets the Dolby dynamic range compression profile.
     * 
     */
    public Optional<Output<String>> drcLine() {
        return Optional.ofNullable(this.drcLine);
    }

    /**
     * Sets the profile for heavy Dolby dynamic range compression.
     * 
     */
    @Import(name="drcRf")
    private @Nullable Output<String> drcRf;

    /**
     * @return Sets the profile for heavy Dolby dynamic range compression.
     * 
     */
    public Optional<Output<String>> drcRf() {
        return Optional.ofNullable(this.drcRf);
    }

    @Import(name="lfeControl")
    private @Nullable Output<String> lfeControl;

    public Optional<Output<String>> lfeControl() {
        return Optional.ofNullable(this.lfeControl);
    }

    /**
     * When set to enabled, applies a 120Hz lowpass filter to the LFE channel prior to encoding.
     * 
     */
    @Import(name="lfeFilter")
    private @Nullable Output<String> lfeFilter;

    /**
     * @return When set to enabled, applies a 120Hz lowpass filter to the LFE channel prior to encoding.
     * 
     */
    public Optional<Output<String>> lfeFilter() {
        return Optional.ofNullable(this.lfeFilter);
    }

    @Import(name="loRoCenterMixLevel")
    private @Nullable Output<Double> loRoCenterMixLevel;

    public Optional<Output<Double>> loRoCenterMixLevel() {
        return Optional.ofNullable(this.loRoCenterMixLevel);
    }

    @Import(name="loRoSurroundMixLevel")
    private @Nullable Output<Double> loRoSurroundMixLevel;

    public Optional<Output<Double>> loRoSurroundMixLevel() {
        return Optional.ofNullable(this.loRoSurroundMixLevel);
    }

    @Import(name="ltRtCenterMixLevel")
    private @Nullable Output<Double> ltRtCenterMixLevel;

    public Optional<Output<Double>> ltRtCenterMixLevel() {
        return Optional.ofNullable(this.ltRtCenterMixLevel);
    }

    @Import(name="ltRtSurroundMixLevel")
    private @Nullable Output<Double> ltRtSurroundMixLevel;

    public Optional<Output<Double>> ltRtSurroundMixLevel() {
        return Optional.ofNullable(this.ltRtSurroundMixLevel);
    }

    /**
     * Metadata control.
     * 
     */
    @Import(name="metadataControl")
    private @Nullable Output<String> metadataControl;

    /**
     * @return Metadata control.
     * 
     */
    public Optional<Output<String>> metadataControl() {
        return Optional.ofNullable(this.metadataControl);
    }

    @Import(name="passthroughControl")
    private @Nullable Output<String> passthroughControl;

    public Optional<Output<String>> passthroughControl() {
        return Optional.ofNullable(this.passthroughControl);
    }

    @Import(name="phaseControl")
    private @Nullable Output<String> phaseControl;

    public Optional<Output<String>> phaseControl() {
        return Optional.ofNullable(this.phaseControl);
    }

    @Import(name="stereoDownmix")
    private @Nullable Output<String> stereoDownmix;

    public Optional<Output<String>> stereoDownmix() {
        return Optional.ofNullable(this.stereoDownmix);
    }

    @Import(name="surroundExMode")
    private @Nullable Output<String> surroundExMode;

    public Optional<Output<String>> surroundExMode() {
        return Optional.ofNullable(this.surroundExMode);
    }

    @Import(name="surroundMode")
    private @Nullable Output<String> surroundMode;

    public Optional<Output<String>> surroundMode() {
        return Optional.ofNullable(this.surroundMode);
    }

    private ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3SettingsArgs() {}

    private ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3SettingsArgs(ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3SettingsArgs $) {
        this.attenuationControl = $.attenuationControl;
        this.bitrate = $.bitrate;
        this.bitstreamMode = $.bitstreamMode;
        this.codingMode = $.codingMode;
        this.dcFilter = $.dcFilter;
        this.dialnorm = $.dialnorm;
        this.drcLine = $.drcLine;
        this.drcRf = $.drcRf;
        this.lfeControl = $.lfeControl;
        this.lfeFilter = $.lfeFilter;
        this.loRoCenterMixLevel = $.loRoCenterMixLevel;
        this.loRoSurroundMixLevel = $.loRoSurroundMixLevel;
        this.ltRtCenterMixLevel = $.ltRtCenterMixLevel;
        this.ltRtSurroundMixLevel = $.ltRtSurroundMixLevel;
        this.metadataControl = $.metadataControl;
        this.passthroughControl = $.passthroughControl;
        this.phaseControl = $.phaseControl;
        this.stereoDownmix = $.stereoDownmix;
        this.surroundExMode = $.surroundExMode;
        this.surroundMode = $.surroundMode;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3SettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3SettingsArgs $;

        public Builder() {
            $ = new ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3SettingsArgs();
        }

        public Builder(ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3SettingsArgs defaults) {
            $ = new ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3SettingsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param attenuationControl Sets the attenuation control.
         * 
         * @return builder
         * 
         */
        public Builder attenuationControl(@Nullable Output<String> attenuationControl) {
            $.attenuationControl = attenuationControl;
            return this;
        }

        /**
         * @param attenuationControl Sets the attenuation control.
         * 
         * @return builder
         * 
         */
        public Builder attenuationControl(String attenuationControl) {
            return attenuationControl(Output.of(attenuationControl));
        }

        /**
         * @param bitrate Average bitrate in bits/second.
         * 
         * @return builder
         * 
         */
        public Builder bitrate(@Nullable Output<Double> bitrate) {
            $.bitrate = bitrate;
            return this;
        }

        /**
         * @param bitrate Average bitrate in bits/second.
         * 
         * @return builder
         * 
         */
        public Builder bitrate(Double bitrate) {
            return bitrate(Output.of(bitrate));
        }

        /**
         * @param bitstreamMode Specifies the bitstream mode (bsmod) for the emitted AC-3 stream.
         * 
         * @return builder
         * 
         */
        public Builder bitstreamMode(@Nullable Output<String> bitstreamMode) {
            $.bitstreamMode = bitstreamMode;
            return this;
        }

        /**
         * @param bitstreamMode Specifies the bitstream mode (bsmod) for the emitted AC-3 stream.
         * 
         * @return builder
         * 
         */
        public Builder bitstreamMode(String bitstreamMode) {
            return bitstreamMode(Output.of(bitstreamMode));
        }

        /**
         * @param codingMode Dolby Digital Plus coding mode.
         * 
         * @return builder
         * 
         */
        public Builder codingMode(@Nullable Output<String> codingMode) {
            $.codingMode = codingMode;
            return this;
        }

        /**
         * @param codingMode Dolby Digital Plus coding mode.
         * 
         * @return builder
         * 
         */
        public Builder codingMode(String codingMode) {
            return codingMode(Output.of(codingMode));
        }

        public Builder dcFilter(@Nullable Output<String> dcFilter) {
            $.dcFilter = dcFilter;
            return this;
        }

        public Builder dcFilter(String dcFilter) {
            return dcFilter(Output.of(dcFilter));
        }

        /**
         * @param dialnorm Sets the dialnorm for the output.
         * 
         * @return builder
         * 
         */
        public Builder dialnorm(@Nullable Output<Integer> dialnorm) {
            $.dialnorm = dialnorm;
            return this;
        }

        /**
         * @param dialnorm Sets the dialnorm for the output.
         * 
         * @return builder
         * 
         */
        public Builder dialnorm(Integer dialnorm) {
            return dialnorm(Output.of(dialnorm));
        }

        /**
         * @param drcLine Sets the Dolby dynamic range compression profile.
         * 
         * @return builder
         * 
         */
        public Builder drcLine(@Nullable Output<String> drcLine) {
            $.drcLine = drcLine;
            return this;
        }

        /**
         * @param drcLine Sets the Dolby dynamic range compression profile.
         * 
         * @return builder
         * 
         */
        public Builder drcLine(String drcLine) {
            return drcLine(Output.of(drcLine));
        }

        /**
         * @param drcRf Sets the profile for heavy Dolby dynamic range compression.
         * 
         * @return builder
         * 
         */
        public Builder drcRf(@Nullable Output<String> drcRf) {
            $.drcRf = drcRf;
            return this;
        }

        /**
         * @param drcRf Sets the profile for heavy Dolby dynamic range compression.
         * 
         * @return builder
         * 
         */
        public Builder drcRf(String drcRf) {
            return drcRf(Output.of(drcRf));
        }

        public Builder lfeControl(@Nullable Output<String> lfeControl) {
            $.lfeControl = lfeControl;
            return this;
        }

        public Builder lfeControl(String lfeControl) {
            return lfeControl(Output.of(lfeControl));
        }

        /**
         * @param lfeFilter When set to enabled, applies a 120Hz lowpass filter to the LFE channel prior to encoding.
         * 
         * @return builder
         * 
         */
        public Builder lfeFilter(@Nullable Output<String> lfeFilter) {
            $.lfeFilter = lfeFilter;
            return this;
        }

        /**
         * @param lfeFilter When set to enabled, applies a 120Hz lowpass filter to the LFE channel prior to encoding.
         * 
         * @return builder
         * 
         */
        public Builder lfeFilter(String lfeFilter) {
            return lfeFilter(Output.of(lfeFilter));
        }

        public Builder loRoCenterMixLevel(@Nullable Output<Double> loRoCenterMixLevel) {
            $.loRoCenterMixLevel = loRoCenterMixLevel;
            return this;
        }

        public Builder loRoCenterMixLevel(Double loRoCenterMixLevel) {
            return loRoCenterMixLevel(Output.of(loRoCenterMixLevel));
        }

        public Builder loRoSurroundMixLevel(@Nullable Output<Double> loRoSurroundMixLevel) {
            $.loRoSurroundMixLevel = loRoSurroundMixLevel;
            return this;
        }

        public Builder loRoSurroundMixLevel(Double loRoSurroundMixLevel) {
            return loRoSurroundMixLevel(Output.of(loRoSurroundMixLevel));
        }

        public Builder ltRtCenterMixLevel(@Nullable Output<Double> ltRtCenterMixLevel) {
            $.ltRtCenterMixLevel = ltRtCenterMixLevel;
            return this;
        }

        public Builder ltRtCenterMixLevel(Double ltRtCenterMixLevel) {
            return ltRtCenterMixLevel(Output.of(ltRtCenterMixLevel));
        }

        public Builder ltRtSurroundMixLevel(@Nullable Output<Double> ltRtSurroundMixLevel) {
            $.ltRtSurroundMixLevel = ltRtSurroundMixLevel;
            return this;
        }

        public Builder ltRtSurroundMixLevel(Double ltRtSurroundMixLevel) {
            return ltRtSurroundMixLevel(Output.of(ltRtSurroundMixLevel));
        }

        /**
         * @param metadataControl Metadata control.
         * 
         * @return builder
         * 
         */
        public Builder metadataControl(@Nullable Output<String> metadataControl) {
            $.metadataControl = metadataControl;
            return this;
        }

        /**
         * @param metadataControl Metadata control.
         * 
         * @return builder
         * 
         */
        public Builder metadataControl(String metadataControl) {
            return metadataControl(Output.of(metadataControl));
        }

        public Builder passthroughControl(@Nullable Output<String> passthroughControl) {
            $.passthroughControl = passthroughControl;
            return this;
        }

        public Builder passthroughControl(String passthroughControl) {
            return passthroughControl(Output.of(passthroughControl));
        }

        public Builder phaseControl(@Nullable Output<String> phaseControl) {
            $.phaseControl = phaseControl;
            return this;
        }

        public Builder phaseControl(String phaseControl) {
            return phaseControl(Output.of(phaseControl));
        }

        public Builder stereoDownmix(@Nullable Output<String> stereoDownmix) {
            $.stereoDownmix = stereoDownmix;
            return this;
        }

        public Builder stereoDownmix(String stereoDownmix) {
            return stereoDownmix(Output.of(stereoDownmix));
        }

        public Builder surroundExMode(@Nullable Output<String> surroundExMode) {
            $.surroundExMode = surroundExMode;
            return this;
        }

        public Builder surroundExMode(String surroundExMode) {
            return surroundExMode(Output.of(surroundExMode));
        }

        public Builder surroundMode(@Nullable Output<String> surroundMode) {
            $.surroundMode = surroundMode;
            return this;
        }

        public Builder surroundMode(String surroundMode) {
            return surroundMode(Output.of(surroundMode));
        }

        public ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3SettingsArgs build() {
            return $;
        }
    }

}
