// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.rum.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AppMonitorAppMonitorConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final AppMonitorAppMonitorConfigurationArgs Empty = new AppMonitorAppMonitorConfigurationArgs();

    /**
     * If you set this to `true`, RUM web client sets two cookies, a session cookie  and a user cookie. The cookies allow the RUM web client to collect data relating to the number of users an application has and the behavior of the application across a sequence of events. Cookies are stored in the top-level domain of the current page.
     * 
     */
    @Import(name="allowCookies")
    private @Nullable Output<Boolean> allowCookies;

    /**
     * @return If you set this to `true`, RUM web client sets two cookies, a session cookie  and a user cookie. The cookies allow the RUM web client to collect data relating to the number of users an application has and the behavior of the application across a sequence of events. Cookies are stored in the top-level domain of the current page.
     * 
     */
    public Optional<Output<Boolean>> allowCookies() {
        return Optional.ofNullable(this.allowCookies);
    }

    /**
     * If you set this to `true`, RUM enables X-Ray tracing for the user sessions  that RUM samples. RUM adds an X-Ray trace header to allowed HTTP requests. It also records an X-Ray segment for allowed HTTP requests.
     * 
     */
    @Import(name="enableXray")
    private @Nullable Output<Boolean> enableXray;

    /**
     * @return If you set this to `true`, RUM enables X-Ray tracing for the user sessions  that RUM samples. RUM adds an X-Ray trace header to allowed HTTP requests. It also records an X-Ray segment for allowed HTTP requests.
     * 
     */
    public Optional<Output<Boolean>> enableXray() {
        return Optional.ofNullable(this.enableXray);
    }

    /**
     * A list of URLs in your website or application to exclude from RUM data collection.
     * 
     */
    @Import(name="excludedPages")
    private @Nullable Output<List<String>> excludedPages;

    /**
     * @return A list of URLs in your website or application to exclude from RUM data collection.
     * 
     */
    public Optional<Output<List<String>>> excludedPages() {
        return Optional.ofNullable(this.excludedPages);
    }

    /**
     * A list of pages in the CloudWatch RUM console that are to be displayed with a &#34;favorite&#34; icon.
     * 
     */
    @Import(name="favoritePages")
    private @Nullable Output<List<String>> favoritePages;

    /**
     * @return A list of pages in the CloudWatch RUM console that are to be displayed with a &#34;favorite&#34; icon.
     * 
     */
    public Optional<Output<List<String>>> favoritePages() {
        return Optional.ofNullable(this.favoritePages);
    }

    /**
     * The ARN of the guest IAM role that is attached to the Amazon Cognito identity pool that is used to authorize the sending of data to RUM.
     * 
     */
    @Import(name="guestRoleArn")
    private @Nullable Output<String> guestRoleArn;

    /**
     * @return The ARN of the guest IAM role that is attached to the Amazon Cognito identity pool that is used to authorize the sending of data to RUM.
     * 
     */
    public Optional<Output<String>> guestRoleArn() {
        return Optional.ofNullable(this.guestRoleArn);
    }

    /**
     * The ID of the Amazon Cognito identity pool that is used to authorize the sending of data to RUM.
     * 
     */
    @Import(name="identityPoolId")
    private @Nullable Output<String> identityPoolId;

    /**
     * @return The ID of the Amazon Cognito identity pool that is used to authorize the sending of data to RUM.
     * 
     */
    public Optional<Output<String>> identityPoolId() {
        return Optional.ofNullable(this.identityPoolId);
    }

    /**
     * If this app monitor is to collect data from only certain pages in your application, this structure lists those pages.
     * 
     */
    @Import(name="includedPages")
    private @Nullable Output<List<String>> includedPages;

    /**
     * @return If this app monitor is to collect data from only certain pages in your application, this structure lists those pages.
     * 
     */
    public Optional<Output<List<String>>> includedPages() {
        return Optional.ofNullable(this.includedPages);
    }

    /**
     * Specifies the percentage of user sessions to use for RUM data collection. Choosing a higher percentage gives you more data but also incurs more costs. The number you specify is the percentage of user sessions that will be used. Default value is `0.1`.
     * 
     */
    @Import(name="sessionSampleRate")
    private @Nullable Output<Double> sessionSampleRate;

    /**
     * @return Specifies the percentage of user sessions to use for RUM data collection. Choosing a higher percentage gives you more data but also incurs more costs. The number you specify is the percentage of user sessions that will be used. Default value is `0.1`.
     * 
     */
    public Optional<Output<Double>> sessionSampleRate() {
        return Optional.ofNullable(this.sessionSampleRate);
    }

    /**
     * An array that lists the types of telemetry data that this app monitor is to collect. Valid values are `errors`, `performance`, and `http`.
     * 
     */
    @Import(name="telemetries")
    private @Nullable Output<List<String>> telemetries;

    /**
     * @return An array that lists the types of telemetry data that this app monitor is to collect. Valid values are `errors`, `performance`, and `http`.
     * 
     */
    public Optional<Output<List<String>>> telemetries() {
        return Optional.ofNullable(this.telemetries);
    }

    private AppMonitorAppMonitorConfigurationArgs() {}

    private AppMonitorAppMonitorConfigurationArgs(AppMonitorAppMonitorConfigurationArgs $) {
        this.allowCookies = $.allowCookies;
        this.enableXray = $.enableXray;
        this.excludedPages = $.excludedPages;
        this.favoritePages = $.favoritePages;
        this.guestRoleArn = $.guestRoleArn;
        this.identityPoolId = $.identityPoolId;
        this.includedPages = $.includedPages;
        this.sessionSampleRate = $.sessionSampleRate;
        this.telemetries = $.telemetries;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AppMonitorAppMonitorConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AppMonitorAppMonitorConfigurationArgs $;

        public Builder() {
            $ = new AppMonitorAppMonitorConfigurationArgs();
        }

        public Builder(AppMonitorAppMonitorConfigurationArgs defaults) {
            $ = new AppMonitorAppMonitorConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowCookies If you set this to `true`, RUM web client sets two cookies, a session cookie  and a user cookie. The cookies allow the RUM web client to collect data relating to the number of users an application has and the behavior of the application across a sequence of events. Cookies are stored in the top-level domain of the current page.
         * 
         * @return builder
         * 
         */
        public Builder allowCookies(@Nullable Output<Boolean> allowCookies) {
            $.allowCookies = allowCookies;
            return this;
        }

        /**
         * @param allowCookies If you set this to `true`, RUM web client sets two cookies, a session cookie  and a user cookie. The cookies allow the RUM web client to collect data relating to the number of users an application has and the behavior of the application across a sequence of events. Cookies are stored in the top-level domain of the current page.
         * 
         * @return builder
         * 
         */
        public Builder allowCookies(Boolean allowCookies) {
            return allowCookies(Output.of(allowCookies));
        }

        /**
         * @param enableXray If you set this to `true`, RUM enables X-Ray tracing for the user sessions  that RUM samples. RUM adds an X-Ray trace header to allowed HTTP requests. It also records an X-Ray segment for allowed HTTP requests.
         * 
         * @return builder
         * 
         */
        public Builder enableXray(@Nullable Output<Boolean> enableXray) {
            $.enableXray = enableXray;
            return this;
        }

        /**
         * @param enableXray If you set this to `true`, RUM enables X-Ray tracing for the user sessions  that RUM samples. RUM adds an X-Ray trace header to allowed HTTP requests. It also records an X-Ray segment for allowed HTTP requests.
         * 
         * @return builder
         * 
         */
        public Builder enableXray(Boolean enableXray) {
            return enableXray(Output.of(enableXray));
        }

        /**
         * @param excludedPages A list of URLs in your website or application to exclude from RUM data collection.
         * 
         * @return builder
         * 
         */
        public Builder excludedPages(@Nullable Output<List<String>> excludedPages) {
            $.excludedPages = excludedPages;
            return this;
        }

        /**
         * @param excludedPages A list of URLs in your website or application to exclude from RUM data collection.
         * 
         * @return builder
         * 
         */
        public Builder excludedPages(List<String> excludedPages) {
            return excludedPages(Output.of(excludedPages));
        }

        /**
         * @param excludedPages A list of URLs in your website or application to exclude from RUM data collection.
         * 
         * @return builder
         * 
         */
        public Builder excludedPages(String... excludedPages) {
            return excludedPages(List.of(excludedPages));
        }

        /**
         * @param favoritePages A list of pages in the CloudWatch RUM console that are to be displayed with a &#34;favorite&#34; icon.
         * 
         * @return builder
         * 
         */
        public Builder favoritePages(@Nullable Output<List<String>> favoritePages) {
            $.favoritePages = favoritePages;
            return this;
        }

        /**
         * @param favoritePages A list of pages in the CloudWatch RUM console that are to be displayed with a &#34;favorite&#34; icon.
         * 
         * @return builder
         * 
         */
        public Builder favoritePages(List<String> favoritePages) {
            return favoritePages(Output.of(favoritePages));
        }

        /**
         * @param favoritePages A list of pages in the CloudWatch RUM console that are to be displayed with a &#34;favorite&#34; icon.
         * 
         * @return builder
         * 
         */
        public Builder favoritePages(String... favoritePages) {
            return favoritePages(List.of(favoritePages));
        }

        /**
         * @param guestRoleArn The ARN of the guest IAM role that is attached to the Amazon Cognito identity pool that is used to authorize the sending of data to RUM.
         * 
         * @return builder
         * 
         */
        public Builder guestRoleArn(@Nullable Output<String> guestRoleArn) {
            $.guestRoleArn = guestRoleArn;
            return this;
        }

        /**
         * @param guestRoleArn The ARN of the guest IAM role that is attached to the Amazon Cognito identity pool that is used to authorize the sending of data to RUM.
         * 
         * @return builder
         * 
         */
        public Builder guestRoleArn(String guestRoleArn) {
            return guestRoleArn(Output.of(guestRoleArn));
        }

        /**
         * @param identityPoolId The ID of the Amazon Cognito identity pool that is used to authorize the sending of data to RUM.
         * 
         * @return builder
         * 
         */
        public Builder identityPoolId(@Nullable Output<String> identityPoolId) {
            $.identityPoolId = identityPoolId;
            return this;
        }

        /**
         * @param identityPoolId The ID of the Amazon Cognito identity pool that is used to authorize the sending of data to RUM.
         * 
         * @return builder
         * 
         */
        public Builder identityPoolId(String identityPoolId) {
            return identityPoolId(Output.of(identityPoolId));
        }

        /**
         * @param includedPages If this app monitor is to collect data from only certain pages in your application, this structure lists those pages.
         * 
         * @return builder
         * 
         */
        public Builder includedPages(@Nullable Output<List<String>> includedPages) {
            $.includedPages = includedPages;
            return this;
        }

        /**
         * @param includedPages If this app monitor is to collect data from only certain pages in your application, this structure lists those pages.
         * 
         * @return builder
         * 
         */
        public Builder includedPages(List<String> includedPages) {
            return includedPages(Output.of(includedPages));
        }

        /**
         * @param includedPages If this app monitor is to collect data from only certain pages in your application, this structure lists those pages.
         * 
         * @return builder
         * 
         */
        public Builder includedPages(String... includedPages) {
            return includedPages(List.of(includedPages));
        }

        /**
         * @param sessionSampleRate Specifies the percentage of user sessions to use for RUM data collection. Choosing a higher percentage gives you more data but also incurs more costs. The number you specify is the percentage of user sessions that will be used. Default value is `0.1`.
         * 
         * @return builder
         * 
         */
        public Builder sessionSampleRate(@Nullable Output<Double> sessionSampleRate) {
            $.sessionSampleRate = sessionSampleRate;
            return this;
        }

        /**
         * @param sessionSampleRate Specifies the percentage of user sessions to use for RUM data collection. Choosing a higher percentage gives you more data but also incurs more costs. The number you specify is the percentage of user sessions that will be used. Default value is `0.1`.
         * 
         * @return builder
         * 
         */
        public Builder sessionSampleRate(Double sessionSampleRate) {
            return sessionSampleRate(Output.of(sessionSampleRate));
        }

        /**
         * @param telemetries An array that lists the types of telemetry data that this app monitor is to collect. Valid values are `errors`, `performance`, and `http`.
         * 
         * @return builder
         * 
         */
        public Builder telemetries(@Nullable Output<List<String>> telemetries) {
            $.telemetries = telemetries;
            return this;
        }

        /**
         * @param telemetries An array that lists the types of telemetry data that this app monitor is to collect. Valid values are `errors`, `performance`, and `http`.
         * 
         * @return builder
         * 
         */
        public Builder telemetries(List<String> telemetries) {
            return telemetries(Output.of(telemetries));
        }

        /**
         * @param telemetries An array that lists the types of telemetry data that this app monitor is to collect. Valid values are `errors`, `performance`, and `http`.
         * 
         * @return builder
         * 
         */
        public Builder telemetries(String... telemetries) {
            return telemetries(List.of(telemetries));
        }

        public AppMonitorAppMonitorConfigurationArgs build() {
            return $;
        }
    }

}
