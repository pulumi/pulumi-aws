// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ecs.outputs;

import com.pulumi.aws.ecs.outputs.ServiceDeploymentConfigurationLifecycleHook;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ServiceDeploymentConfiguration {
    /**
     * @return Number of minutes to wait after a new deployment is fully provisioned before terminating the old deployment. Only used when `strategy` is set to `BLUE_GREEN`.
     * 
     */
    private @Nullable String bakeTimeInMinutes;
    /**
     * @return Configuration block for lifecycle hooks that are invoked during deployments. See below.
     * 
     */
    private @Nullable List<ServiceDeploymentConfigurationLifecycleHook> lifecycleHooks;
    /**
     * @return Type of deployment strategy. Valid values: `ROLLING`, `BLUE_GREEN`. Default: `ROLLING`.
     * 
     */
    private @Nullable String strategy;

    private ServiceDeploymentConfiguration() {}
    /**
     * @return Number of minutes to wait after a new deployment is fully provisioned before terminating the old deployment. Only used when `strategy` is set to `BLUE_GREEN`.
     * 
     */
    public Optional<String> bakeTimeInMinutes() {
        return Optional.ofNullable(this.bakeTimeInMinutes);
    }
    /**
     * @return Configuration block for lifecycle hooks that are invoked during deployments. See below.
     * 
     */
    public List<ServiceDeploymentConfigurationLifecycleHook> lifecycleHooks() {
        return this.lifecycleHooks == null ? List.of() : this.lifecycleHooks;
    }
    /**
     * @return Type of deployment strategy. Valid values: `ROLLING`, `BLUE_GREEN`. Default: `ROLLING`.
     * 
     */
    public Optional<String> strategy() {
        return Optional.ofNullable(this.strategy);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ServiceDeploymentConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String bakeTimeInMinutes;
        private @Nullable List<ServiceDeploymentConfigurationLifecycleHook> lifecycleHooks;
        private @Nullable String strategy;
        public Builder() {}
        public Builder(ServiceDeploymentConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bakeTimeInMinutes = defaults.bakeTimeInMinutes;
    	      this.lifecycleHooks = defaults.lifecycleHooks;
    	      this.strategy = defaults.strategy;
        }

        @CustomType.Setter
        public Builder bakeTimeInMinutes(@Nullable String bakeTimeInMinutes) {

            this.bakeTimeInMinutes = bakeTimeInMinutes;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleHooks(@Nullable List<ServiceDeploymentConfigurationLifecycleHook> lifecycleHooks) {

            this.lifecycleHooks = lifecycleHooks;
            return this;
        }
        public Builder lifecycleHooks(ServiceDeploymentConfigurationLifecycleHook... lifecycleHooks) {
            return lifecycleHooks(List.of(lifecycleHooks));
        }
        @CustomType.Setter
        public Builder strategy(@Nullable String strategy) {

            this.strategy = strategy;
            return this;
        }
        public ServiceDeploymentConfiguration build() {
            final var _resultValue = new ServiceDeploymentConfiguration();
            _resultValue.bakeTimeInMinutes = bakeTimeInMinutes;
            _resultValue.lifecycleHooks = lifecycleHooks;
            _resultValue.strategy = strategy;
            return _resultValue;
        }
    }
}
