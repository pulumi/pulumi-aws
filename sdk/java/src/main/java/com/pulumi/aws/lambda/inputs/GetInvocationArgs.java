// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.lambda.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetInvocationArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetInvocationArgs Empty = new GetInvocationArgs();

    /**
     * Name of the lambda function.
     * 
     */
    @Import(name="functionName", required=true)
    private Output<String> functionName;

    /**
     * @return Name of the lambda function.
     * 
     */
    public Output<String> functionName() {
        return this.functionName;
    }

    /**
     * String in JSON format that is passed as payload to the lambda function.
     * 
     */
    @Import(name="input", required=true)
    private Output<String> input;

    /**
     * @return String in JSON format that is passed as payload to the lambda function.
     * 
     */
    public Output<String> input() {
        return this.input;
    }

    /**
     * Qualifier (a.k.a version) of the lambda function. Defaults
     * to `$LATEST`.
     * 
     */
    @Import(name="qualifier")
    private @Nullable Output<String> qualifier;

    /**
     * @return Qualifier (a.k.a version) of the lambda function. Defaults
     * to `$LATEST`.
     * 
     */
    public Optional<Output<String>> qualifier() {
        return Optional.ofNullable(this.qualifier);
    }

    private GetInvocationArgs() {}

    private GetInvocationArgs(GetInvocationArgs $) {
        this.functionName = $.functionName;
        this.input = $.input;
        this.qualifier = $.qualifier;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetInvocationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetInvocationArgs $;

        public Builder() {
            $ = new GetInvocationArgs();
        }

        public Builder(GetInvocationArgs defaults) {
            $ = new GetInvocationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param functionName Name of the lambda function.
         * 
         * @return builder
         * 
         */
        public Builder functionName(Output<String> functionName) {
            $.functionName = functionName;
            return this;
        }

        /**
         * @param functionName Name of the lambda function.
         * 
         * @return builder
         * 
         */
        public Builder functionName(String functionName) {
            return functionName(Output.of(functionName));
        }

        /**
         * @param input String in JSON format that is passed as payload to the lambda function.
         * 
         * @return builder
         * 
         */
        public Builder input(Output<String> input) {
            $.input = input;
            return this;
        }

        /**
         * @param input String in JSON format that is passed as payload to the lambda function.
         * 
         * @return builder
         * 
         */
        public Builder input(String input) {
            return input(Output.of(input));
        }

        /**
         * @param qualifier Qualifier (a.k.a version) of the lambda function. Defaults
         * to `$LATEST`.
         * 
         * @return builder
         * 
         */
        public Builder qualifier(@Nullable Output<String> qualifier) {
            $.qualifier = qualifier;
            return this;
        }

        /**
         * @param qualifier Qualifier (a.k.a version) of the lambda function. Defaults
         * to `$LATEST`.
         * 
         * @return builder
         * 
         */
        public Builder qualifier(String qualifier) {
            return qualifier(Output.of(qualifier));
        }

        public GetInvocationArgs build() {
            if ($.functionName == null) {
                throw new MissingRequiredPropertyException("GetInvocationArgs", "functionName");
            }
            if ($.input == null) {
                throw new MissingRequiredPropertyException("GetInvocationArgs", "input");
            }
            return $;
        }
    }

}
