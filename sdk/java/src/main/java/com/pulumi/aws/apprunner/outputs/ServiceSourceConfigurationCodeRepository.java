// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.apprunner.outputs;

import com.pulumi.aws.apprunner.outputs.ServiceSourceConfigurationCodeRepositoryCodeConfiguration;
import com.pulumi.aws.apprunner.outputs.ServiceSourceConfigurationCodeRepositorySourceCodeVersion;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ServiceSourceConfigurationCodeRepository {
    /**
     * @return Configuration for building and running the service from a source code repository. See Code Configuration below for more details.
     * 
     */
    private @Nullable ServiceSourceConfigurationCodeRepositoryCodeConfiguration codeConfiguration;
    /**
     * @return Location of the repository that contains the source code.
     * 
     */
    private String repositoryUrl;
    /**
     * @return Version that should be used within the source code repository. See Source Code Version below for more details.
     * 
     */
    private ServiceSourceConfigurationCodeRepositorySourceCodeVersion sourceCodeVersion;
    /**
     * @return The path of the directory that stores source code and configuration files. The build and start commands also execute from here. The path is absolute from root and, if not specified, defaults to the repository root.
     * 
     */
    private @Nullable String sourceDirectory;

    private ServiceSourceConfigurationCodeRepository() {}
    /**
     * @return Configuration for building and running the service from a source code repository. See Code Configuration below for more details.
     * 
     */
    public Optional<ServiceSourceConfigurationCodeRepositoryCodeConfiguration> codeConfiguration() {
        return Optional.ofNullable(this.codeConfiguration);
    }
    /**
     * @return Location of the repository that contains the source code.
     * 
     */
    public String repositoryUrl() {
        return this.repositoryUrl;
    }
    /**
     * @return Version that should be used within the source code repository. See Source Code Version below for more details.
     * 
     */
    public ServiceSourceConfigurationCodeRepositorySourceCodeVersion sourceCodeVersion() {
        return this.sourceCodeVersion;
    }
    /**
     * @return The path of the directory that stores source code and configuration files. The build and start commands also execute from here. The path is absolute from root and, if not specified, defaults to the repository root.
     * 
     */
    public Optional<String> sourceDirectory() {
        return Optional.ofNullable(this.sourceDirectory);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ServiceSourceConfigurationCodeRepository defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable ServiceSourceConfigurationCodeRepositoryCodeConfiguration codeConfiguration;
        private String repositoryUrl;
        private ServiceSourceConfigurationCodeRepositorySourceCodeVersion sourceCodeVersion;
        private @Nullable String sourceDirectory;
        public Builder() {}
        public Builder(ServiceSourceConfigurationCodeRepository defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.codeConfiguration = defaults.codeConfiguration;
    	      this.repositoryUrl = defaults.repositoryUrl;
    	      this.sourceCodeVersion = defaults.sourceCodeVersion;
    	      this.sourceDirectory = defaults.sourceDirectory;
        }

        @CustomType.Setter
        public Builder codeConfiguration(@Nullable ServiceSourceConfigurationCodeRepositoryCodeConfiguration codeConfiguration) {
            this.codeConfiguration = codeConfiguration;
            return this;
        }
        @CustomType.Setter
        public Builder repositoryUrl(String repositoryUrl) {
            this.repositoryUrl = Objects.requireNonNull(repositoryUrl);
            return this;
        }
        @CustomType.Setter
        public Builder sourceCodeVersion(ServiceSourceConfigurationCodeRepositorySourceCodeVersion sourceCodeVersion) {
            this.sourceCodeVersion = Objects.requireNonNull(sourceCodeVersion);
            return this;
        }
        @CustomType.Setter
        public Builder sourceDirectory(@Nullable String sourceDirectory) {
            this.sourceDirectory = sourceDirectory;
            return this;
        }
        public ServiceSourceConfigurationCodeRepository build() {
            final var _resultValue = new ServiceSourceConfigurationCodeRepository();
            _resultValue.codeConfiguration = codeConfiguration;
            _resultValue.repositoryUrl = repositoryUrl;
            _resultValue.sourceCodeVersion = sourceCodeVersion;
            _resultValue.sourceDirectory = sourceDirectory;
            return _resultValue;
        }
    }
}
