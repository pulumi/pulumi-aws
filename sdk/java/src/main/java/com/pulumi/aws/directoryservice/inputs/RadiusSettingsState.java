// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.directoryservice.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RadiusSettingsState extends com.pulumi.resources.ResourceArgs {

    public static final RadiusSettingsState Empty = new RadiusSettingsState();

    @Import(name="authenticationProtocol")
    private @Nullable Output<String> authenticationProtocol;

    public Optional<Output<String>> authenticationProtocol() {
        return Optional.ofNullable(this.authenticationProtocol);
    }

    @Import(name="directoryId")
    private @Nullable Output<String> directoryId;

    public Optional<Output<String>> directoryId() {
        return Optional.ofNullable(this.directoryId);
    }

    @Import(name="displayLabel")
    private @Nullable Output<String> displayLabel;

    public Optional<Output<String>> displayLabel() {
        return Optional.ofNullable(this.displayLabel);
    }

    @Import(name="radiusPort")
    private @Nullable Output<Integer> radiusPort;

    public Optional<Output<Integer>> radiusPort() {
        return Optional.ofNullable(this.radiusPort);
    }

    @Import(name="radiusRetries")
    private @Nullable Output<Integer> radiusRetries;

    public Optional<Output<Integer>> radiusRetries() {
        return Optional.ofNullable(this.radiusRetries);
    }

    @Import(name="radiusServers")
    private @Nullable Output<List<String>> radiusServers;

    public Optional<Output<List<String>>> radiusServers() {
        return Optional.ofNullable(this.radiusServers);
    }

    @Import(name="radiusTimeout")
    private @Nullable Output<Integer> radiusTimeout;

    public Optional<Output<Integer>> radiusTimeout() {
        return Optional.ofNullable(this.radiusTimeout);
    }

    @Import(name="sharedSecret")
    private @Nullable Output<String> sharedSecret;

    public Optional<Output<String>> sharedSecret() {
        return Optional.ofNullable(this.sharedSecret);
    }

    @Import(name="useSameUsername")
    private @Nullable Output<Boolean> useSameUsername;

    public Optional<Output<Boolean>> useSameUsername() {
        return Optional.ofNullable(this.useSameUsername);
    }

    private RadiusSettingsState() {}

    private RadiusSettingsState(RadiusSettingsState $) {
        this.authenticationProtocol = $.authenticationProtocol;
        this.directoryId = $.directoryId;
        this.displayLabel = $.displayLabel;
        this.radiusPort = $.radiusPort;
        this.radiusRetries = $.radiusRetries;
        this.radiusServers = $.radiusServers;
        this.radiusTimeout = $.radiusTimeout;
        this.sharedSecret = $.sharedSecret;
        this.useSameUsername = $.useSameUsername;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RadiusSettingsState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RadiusSettingsState $;

        public Builder() {
            $ = new RadiusSettingsState();
        }

        public Builder(RadiusSettingsState defaults) {
            $ = new RadiusSettingsState(Objects.requireNonNull(defaults));
        }

        public Builder authenticationProtocol(@Nullable Output<String> authenticationProtocol) {
            $.authenticationProtocol = authenticationProtocol;
            return this;
        }

        public Builder authenticationProtocol(String authenticationProtocol) {
            return authenticationProtocol(Output.of(authenticationProtocol));
        }

        public Builder directoryId(@Nullable Output<String> directoryId) {
            $.directoryId = directoryId;
            return this;
        }

        public Builder directoryId(String directoryId) {
            return directoryId(Output.of(directoryId));
        }

        public Builder displayLabel(@Nullable Output<String> displayLabel) {
            $.displayLabel = displayLabel;
            return this;
        }

        public Builder displayLabel(String displayLabel) {
            return displayLabel(Output.of(displayLabel));
        }

        public Builder radiusPort(@Nullable Output<Integer> radiusPort) {
            $.radiusPort = radiusPort;
            return this;
        }

        public Builder radiusPort(Integer radiusPort) {
            return radiusPort(Output.of(radiusPort));
        }

        public Builder radiusRetries(@Nullable Output<Integer> radiusRetries) {
            $.radiusRetries = radiusRetries;
            return this;
        }

        public Builder radiusRetries(Integer radiusRetries) {
            return radiusRetries(Output.of(radiusRetries));
        }

        public Builder radiusServers(@Nullable Output<List<String>> radiusServers) {
            $.radiusServers = radiusServers;
            return this;
        }

        public Builder radiusServers(List<String> radiusServers) {
            return radiusServers(Output.of(radiusServers));
        }

        public Builder radiusServers(String... radiusServers) {
            return radiusServers(List.of(radiusServers));
        }

        public Builder radiusTimeout(@Nullable Output<Integer> radiusTimeout) {
            $.radiusTimeout = radiusTimeout;
            return this;
        }

        public Builder radiusTimeout(Integer radiusTimeout) {
            return radiusTimeout(Output.of(radiusTimeout));
        }

        public Builder sharedSecret(@Nullable Output<String> sharedSecret) {
            $.sharedSecret = sharedSecret;
            return this;
        }

        public Builder sharedSecret(String sharedSecret) {
            return sharedSecret(Output.of(sharedSecret));
        }

        public Builder useSameUsername(@Nullable Output<Boolean> useSameUsername) {
            $.useSameUsername = useSameUsername;
            return this;
        }

        public Builder useSameUsername(Boolean useSameUsername) {
            return useSameUsername(Output.of(useSameUsername));
        }

        public RadiusSettingsState build() {
            return $;
        }
    }

}
