// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.medialive.outputs;

import com.pulumi.aws.medialive.outputs.ChannelEncoderSettingsAudioDescriptionAudioNormalizationSettings;
import com.pulumi.aws.medialive.outputs.ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettings;
import com.pulumi.aws.medialive.outputs.ChannelEncoderSettingsAudioDescriptionCodecSettings;
import com.pulumi.aws.medialive.outputs.ChannelEncoderSettingsAudioDescriptionRemixSettings;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ChannelEncoderSettingsAudioDescription {
    /**
     * @return Advanced audio normalization settings. See Audio Normalization Settings for more details.
     * 
     */
    private @Nullable ChannelEncoderSettingsAudioDescriptionAudioNormalizationSettings audioNormalizationSettings;
    /**
     * @return The name of the audio selector used as the source for this AudioDescription.
     * 
     */
    private String audioSelectorName;
    /**
     * @return Applies only if audioTypeControl is useConfigured. The values for audioType are defined in ISO-IEC 13818-1.
     * 
     */
    private @Nullable String audioType;
    /**
     * @return Determined how audio type is determined.
     * 
     */
    private @Nullable String audioTypeControl;
    /**
     * @return Settings to configure one or more solutions that insert audio watermarks in the audio encode. See Audio Watermark Settings for more details.
     * 
     */
    private @Nullable ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettings audioWatermarkSettings;
    /**
     * @return Audio codec settings. See Audio Codec Settings for more details.
     * 
     */
    private @Nullable ChannelEncoderSettingsAudioDescriptionCodecSettings codecSettings;
    /**
     * @return Selects a specific three-letter language code from within an audio source.
     * 
     */
    private @Nullable String languageCode;
    private @Nullable String languageCodeControl;
    /**
     * @return The name of this audio description.
     * 
     */
    private String name;
    private @Nullable ChannelEncoderSettingsAudioDescriptionRemixSettings remixSettings;
    /**
     * @return Stream name RTMP destinations (URLs of type rtmp://)
     * 
     */
    private @Nullable String streamName;

    private ChannelEncoderSettingsAudioDescription() {}
    /**
     * @return Advanced audio normalization settings. See Audio Normalization Settings for more details.
     * 
     */
    public Optional<ChannelEncoderSettingsAudioDescriptionAudioNormalizationSettings> audioNormalizationSettings() {
        return Optional.ofNullable(this.audioNormalizationSettings);
    }
    /**
     * @return The name of the audio selector used as the source for this AudioDescription.
     * 
     */
    public String audioSelectorName() {
        return this.audioSelectorName;
    }
    /**
     * @return Applies only if audioTypeControl is useConfigured. The values for audioType are defined in ISO-IEC 13818-1.
     * 
     */
    public Optional<String> audioType() {
        return Optional.ofNullable(this.audioType);
    }
    /**
     * @return Determined how audio type is determined.
     * 
     */
    public Optional<String> audioTypeControl() {
        return Optional.ofNullable(this.audioTypeControl);
    }
    /**
     * @return Settings to configure one or more solutions that insert audio watermarks in the audio encode. See Audio Watermark Settings for more details.
     * 
     */
    public Optional<ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettings> audioWatermarkSettings() {
        return Optional.ofNullable(this.audioWatermarkSettings);
    }
    /**
     * @return Audio codec settings. See Audio Codec Settings for more details.
     * 
     */
    public Optional<ChannelEncoderSettingsAudioDescriptionCodecSettings> codecSettings() {
        return Optional.ofNullable(this.codecSettings);
    }
    /**
     * @return Selects a specific three-letter language code from within an audio source.
     * 
     */
    public Optional<String> languageCode() {
        return Optional.ofNullable(this.languageCode);
    }
    public Optional<String> languageCodeControl() {
        return Optional.ofNullable(this.languageCodeControl);
    }
    /**
     * @return The name of this audio description.
     * 
     */
    public String name() {
        return this.name;
    }
    public Optional<ChannelEncoderSettingsAudioDescriptionRemixSettings> remixSettings() {
        return Optional.ofNullable(this.remixSettings);
    }
    /**
     * @return Stream name RTMP destinations (URLs of type rtmp://)
     * 
     */
    public Optional<String> streamName() {
        return Optional.ofNullable(this.streamName);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ChannelEncoderSettingsAudioDescription defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable ChannelEncoderSettingsAudioDescriptionAudioNormalizationSettings audioNormalizationSettings;
        private String audioSelectorName;
        private @Nullable String audioType;
        private @Nullable String audioTypeControl;
        private @Nullable ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettings audioWatermarkSettings;
        private @Nullable ChannelEncoderSettingsAudioDescriptionCodecSettings codecSettings;
        private @Nullable String languageCode;
        private @Nullable String languageCodeControl;
        private String name;
        private @Nullable ChannelEncoderSettingsAudioDescriptionRemixSettings remixSettings;
        private @Nullable String streamName;
        public Builder() {}
        public Builder(ChannelEncoderSettingsAudioDescription defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.audioNormalizationSettings = defaults.audioNormalizationSettings;
    	      this.audioSelectorName = defaults.audioSelectorName;
    	      this.audioType = defaults.audioType;
    	      this.audioTypeControl = defaults.audioTypeControl;
    	      this.audioWatermarkSettings = defaults.audioWatermarkSettings;
    	      this.codecSettings = defaults.codecSettings;
    	      this.languageCode = defaults.languageCode;
    	      this.languageCodeControl = defaults.languageCodeControl;
    	      this.name = defaults.name;
    	      this.remixSettings = defaults.remixSettings;
    	      this.streamName = defaults.streamName;
        }

        @CustomType.Setter
        public Builder audioNormalizationSettings(@Nullable ChannelEncoderSettingsAudioDescriptionAudioNormalizationSettings audioNormalizationSettings) {
            this.audioNormalizationSettings = audioNormalizationSettings;
            return this;
        }
        @CustomType.Setter
        public Builder audioSelectorName(String audioSelectorName) {
            this.audioSelectorName = Objects.requireNonNull(audioSelectorName);
            return this;
        }
        @CustomType.Setter
        public Builder audioType(@Nullable String audioType) {
            this.audioType = audioType;
            return this;
        }
        @CustomType.Setter
        public Builder audioTypeControl(@Nullable String audioTypeControl) {
            this.audioTypeControl = audioTypeControl;
            return this;
        }
        @CustomType.Setter
        public Builder audioWatermarkSettings(@Nullable ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettings audioWatermarkSettings) {
            this.audioWatermarkSettings = audioWatermarkSettings;
            return this;
        }
        @CustomType.Setter
        public Builder codecSettings(@Nullable ChannelEncoderSettingsAudioDescriptionCodecSettings codecSettings) {
            this.codecSettings = codecSettings;
            return this;
        }
        @CustomType.Setter
        public Builder languageCode(@Nullable String languageCode) {
            this.languageCode = languageCode;
            return this;
        }
        @CustomType.Setter
        public Builder languageCodeControl(@Nullable String languageCodeControl) {
            this.languageCodeControl = languageCodeControl;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder remixSettings(@Nullable ChannelEncoderSettingsAudioDescriptionRemixSettings remixSettings) {
            this.remixSettings = remixSettings;
            return this;
        }
        @CustomType.Setter
        public Builder streamName(@Nullable String streamName) {
            this.streamName = streamName;
            return this;
        }
        public ChannelEncoderSettingsAudioDescription build() {
            final var o = new ChannelEncoderSettingsAudioDescription();
            o.audioNormalizationSettings = audioNormalizationSettings;
            o.audioSelectorName = audioSelectorName;
            o.audioType = audioType;
            o.audioTypeControl = audioTypeControl;
            o.audioWatermarkSettings = audioWatermarkSettings;
            o.codecSettings = codecSettings;
            o.languageCode = languageCode;
            o.languageCodeControl = languageCodeControl;
            o.name = name;
            o.remixSettings = remixSettings;
            o.streamName = streamName;
            return o;
        }
    }
}
