// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.outputs;

import com.pulumi.aws.quicksight.outputs.DataLabelsOptionsDataLabelType;
import com.pulumi.aws.quicksight.outputs.FontConfiguration;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DataLabelsOptions {
    private @Nullable String categoryLabelVisibility;
    private @Nullable List<DataLabelsOptionsDataLabelType> dataLabelTypes;
    private @Nullable String labelColor;
    private @Nullable String labelContent;
    private @Nullable FontConfiguration labelFontConfiguration;
    private @Nullable String measureLabelVisibility;
    private @Nullable String overlap;
    private @Nullable String position;
    private @Nullable String visibility;

    private DataLabelsOptions() {}
    public Optional<String> categoryLabelVisibility() {
        return Optional.ofNullable(this.categoryLabelVisibility);
    }
    public List<DataLabelsOptionsDataLabelType> dataLabelTypes() {
        return this.dataLabelTypes == null ? List.of() : this.dataLabelTypes;
    }
    public Optional<String> labelColor() {
        return Optional.ofNullable(this.labelColor);
    }
    public Optional<String> labelContent() {
        return Optional.ofNullable(this.labelContent);
    }
    public Optional<FontConfiguration> labelFontConfiguration() {
        return Optional.ofNullable(this.labelFontConfiguration);
    }
    public Optional<String> measureLabelVisibility() {
        return Optional.ofNullable(this.measureLabelVisibility);
    }
    public Optional<String> overlap() {
        return Optional.ofNullable(this.overlap);
    }
    public Optional<String> position() {
        return Optional.ofNullable(this.position);
    }
    public Optional<String> visibility() {
        return Optional.ofNullable(this.visibility);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DataLabelsOptions defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String categoryLabelVisibility;
        private @Nullable List<DataLabelsOptionsDataLabelType> dataLabelTypes;
        private @Nullable String labelColor;
        private @Nullable String labelContent;
        private @Nullable FontConfiguration labelFontConfiguration;
        private @Nullable String measureLabelVisibility;
        private @Nullable String overlap;
        private @Nullable String position;
        private @Nullable String visibility;
        public Builder() {}
        public Builder(DataLabelsOptions defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.categoryLabelVisibility = defaults.categoryLabelVisibility;
    	      this.dataLabelTypes = defaults.dataLabelTypes;
    	      this.labelColor = defaults.labelColor;
    	      this.labelContent = defaults.labelContent;
    	      this.labelFontConfiguration = defaults.labelFontConfiguration;
    	      this.measureLabelVisibility = defaults.measureLabelVisibility;
    	      this.overlap = defaults.overlap;
    	      this.position = defaults.position;
    	      this.visibility = defaults.visibility;
        }

        @CustomType.Setter
        public Builder categoryLabelVisibility(@Nullable String categoryLabelVisibility) {

            this.categoryLabelVisibility = categoryLabelVisibility;
            return this;
        }
        @CustomType.Setter
        public Builder dataLabelTypes(@Nullable List<DataLabelsOptionsDataLabelType> dataLabelTypes) {

            this.dataLabelTypes = dataLabelTypes;
            return this;
        }
        public Builder dataLabelTypes(DataLabelsOptionsDataLabelType... dataLabelTypes) {
            return dataLabelTypes(List.of(dataLabelTypes));
        }
        @CustomType.Setter
        public Builder labelColor(@Nullable String labelColor) {

            this.labelColor = labelColor;
            return this;
        }
        @CustomType.Setter
        public Builder labelContent(@Nullable String labelContent) {

            this.labelContent = labelContent;
            return this;
        }
        @CustomType.Setter
        public Builder labelFontConfiguration(@Nullable FontConfiguration labelFontConfiguration) {

            this.labelFontConfiguration = labelFontConfiguration;
            return this;
        }
        @CustomType.Setter
        public Builder measureLabelVisibility(@Nullable String measureLabelVisibility) {

            this.measureLabelVisibility = measureLabelVisibility;
            return this;
        }
        @CustomType.Setter
        public Builder overlap(@Nullable String overlap) {

            this.overlap = overlap;
            return this;
        }
        @CustomType.Setter
        public Builder position(@Nullable String position) {

            this.position = position;
            return this;
        }
        @CustomType.Setter
        public Builder visibility(@Nullable String visibility) {

            this.visibility = visibility;
            return this;
        }
        public DataLabelsOptions build() {
            final var _resultValue = new DataLabelsOptions();
            _resultValue.categoryLabelVisibility = categoryLabelVisibility;
            _resultValue.dataLabelTypes = dataLabelTypes;
            _resultValue.labelColor = labelColor;
            _resultValue.labelContent = labelContent;
            _resultValue.labelFontConfiguration = labelFontConfiguration;
            _resultValue.measureLabelVisibility = measureLabelVisibility;
            _resultValue.overlap = overlap;
            _resultValue.position = position;
            _resultValue.visibility = visibility;
            return _resultValue;
        }
    }
}
