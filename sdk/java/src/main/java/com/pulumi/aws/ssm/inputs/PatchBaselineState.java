// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ssm.inputs;

import com.pulumi.aws.ssm.inputs.PatchBaselineApprovalRuleArgs;
import com.pulumi.aws.ssm.inputs.PatchBaselineGlobalFilterArgs;
import com.pulumi.aws.ssm.inputs.PatchBaselineSourceArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PatchBaselineState extends com.pulumi.resources.ResourceArgs {

    public static final PatchBaselineState Empty = new PatchBaselineState();

    @Import(name="approvalRules")
    private @Nullable Output<List<PatchBaselineApprovalRuleArgs>> approvalRules;

    public Optional<Output<List<PatchBaselineApprovalRuleArgs>>> approvalRules() {
        return Optional.ofNullable(this.approvalRules);
    }

    @Import(name="approvedPatches")
    private @Nullable Output<List<String>> approvedPatches;

    public Optional<Output<List<String>>> approvedPatches() {
        return Optional.ofNullable(this.approvedPatches);
    }

    @Import(name="approvedPatchesComplianceLevel")
    private @Nullable Output<String> approvedPatchesComplianceLevel;

    public Optional<Output<String>> approvedPatchesComplianceLevel() {
        return Optional.ofNullable(this.approvedPatchesComplianceLevel);
    }

    @Import(name="approvedPatchesEnableNonSecurity")
    private @Nullable Output<Boolean> approvedPatchesEnableNonSecurity;

    public Optional<Output<Boolean>> approvedPatchesEnableNonSecurity() {
        return Optional.ofNullable(this.approvedPatchesEnableNonSecurity);
    }

    @Import(name="arn")
    private @Nullable Output<String> arn;

    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="globalFilters")
    private @Nullable Output<List<PatchBaselineGlobalFilterArgs>> globalFilters;

    public Optional<Output<List<PatchBaselineGlobalFilterArgs>>> globalFilters() {
        return Optional.ofNullable(this.globalFilters);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="operatingSystem")
    private @Nullable Output<String> operatingSystem;

    public Optional<Output<String>> operatingSystem() {
        return Optional.ofNullable(this.operatingSystem);
    }

    @Import(name="rejectedPatches")
    private @Nullable Output<List<String>> rejectedPatches;

    public Optional<Output<List<String>>> rejectedPatches() {
        return Optional.ofNullable(this.rejectedPatches);
    }

    @Import(name="rejectedPatchesAction")
    private @Nullable Output<String> rejectedPatchesAction;

    public Optional<Output<String>> rejectedPatchesAction() {
        return Optional.ofNullable(this.rejectedPatchesAction);
    }

    @Import(name="sources")
    private @Nullable Output<List<PatchBaselineSourceArgs>> sources;

    public Optional<Output<List<PatchBaselineSourceArgs>>> sources() {
        return Optional.ofNullable(this.sources);
    }

    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    private PatchBaselineState() {}

    private PatchBaselineState(PatchBaselineState $) {
        this.approvalRules = $.approvalRules;
        this.approvedPatches = $.approvedPatches;
        this.approvedPatchesComplianceLevel = $.approvedPatchesComplianceLevel;
        this.approvedPatchesEnableNonSecurity = $.approvedPatchesEnableNonSecurity;
        this.arn = $.arn;
        this.description = $.description;
        this.globalFilters = $.globalFilters;
        this.name = $.name;
        this.operatingSystem = $.operatingSystem;
        this.rejectedPatches = $.rejectedPatches;
        this.rejectedPatchesAction = $.rejectedPatchesAction;
        this.sources = $.sources;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PatchBaselineState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PatchBaselineState $;

        public Builder() {
            $ = new PatchBaselineState();
        }

        public Builder(PatchBaselineState defaults) {
            $ = new PatchBaselineState(Objects.requireNonNull(defaults));
        }

        public Builder approvalRules(@Nullable Output<List<PatchBaselineApprovalRuleArgs>> approvalRules) {
            $.approvalRules = approvalRules;
            return this;
        }

        public Builder approvalRules(List<PatchBaselineApprovalRuleArgs> approvalRules) {
            return approvalRules(Output.of(approvalRules));
        }

        public Builder approvalRules(PatchBaselineApprovalRuleArgs... approvalRules) {
            return approvalRules(List.of(approvalRules));
        }

        public Builder approvedPatches(@Nullable Output<List<String>> approvedPatches) {
            $.approvedPatches = approvedPatches;
            return this;
        }

        public Builder approvedPatches(List<String> approvedPatches) {
            return approvedPatches(Output.of(approvedPatches));
        }

        public Builder approvedPatches(String... approvedPatches) {
            return approvedPatches(List.of(approvedPatches));
        }

        public Builder approvedPatchesComplianceLevel(@Nullable Output<String> approvedPatchesComplianceLevel) {
            $.approvedPatchesComplianceLevel = approvedPatchesComplianceLevel;
            return this;
        }

        public Builder approvedPatchesComplianceLevel(String approvedPatchesComplianceLevel) {
            return approvedPatchesComplianceLevel(Output.of(approvedPatchesComplianceLevel));
        }

        public Builder approvedPatchesEnableNonSecurity(@Nullable Output<Boolean> approvedPatchesEnableNonSecurity) {
            $.approvedPatchesEnableNonSecurity = approvedPatchesEnableNonSecurity;
            return this;
        }

        public Builder approvedPatchesEnableNonSecurity(Boolean approvedPatchesEnableNonSecurity) {
            return approvedPatchesEnableNonSecurity(Output.of(approvedPatchesEnableNonSecurity));
        }

        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder globalFilters(@Nullable Output<List<PatchBaselineGlobalFilterArgs>> globalFilters) {
            $.globalFilters = globalFilters;
            return this;
        }

        public Builder globalFilters(List<PatchBaselineGlobalFilterArgs> globalFilters) {
            return globalFilters(Output.of(globalFilters));
        }

        public Builder globalFilters(PatchBaselineGlobalFilterArgs... globalFilters) {
            return globalFilters(List.of(globalFilters));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder operatingSystem(@Nullable Output<String> operatingSystem) {
            $.operatingSystem = operatingSystem;
            return this;
        }

        public Builder operatingSystem(String operatingSystem) {
            return operatingSystem(Output.of(operatingSystem));
        }

        public Builder rejectedPatches(@Nullable Output<List<String>> rejectedPatches) {
            $.rejectedPatches = rejectedPatches;
            return this;
        }

        public Builder rejectedPatches(List<String> rejectedPatches) {
            return rejectedPatches(Output.of(rejectedPatches));
        }

        public Builder rejectedPatches(String... rejectedPatches) {
            return rejectedPatches(List.of(rejectedPatches));
        }

        public Builder rejectedPatchesAction(@Nullable Output<String> rejectedPatchesAction) {
            $.rejectedPatchesAction = rejectedPatchesAction;
            return this;
        }

        public Builder rejectedPatchesAction(String rejectedPatchesAction) {
            return rejectedPatchesAction(Output.of(rejectedPatchesAction));
        }

        public Builder sources(@Nullable Output<List<PatchBaselineSourceArgs>> sources) {
            $.sources = sources;
            return this;
        }

        public Builder sources(List<PatchBaselineSourceArgs> sources) {
            return sources(Output.of(sources));
        }

        public Builder sources(PatchBaselineSourceArgs... sources) {
            return sources(List.of(sources));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        public PatchBaselineState build() {
            return $;
        }
    }

}
