// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.route53.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class HealthCheckState extends com.pulumi.resources.ResourceArgs {

    public static final HealthCheckState Empty = new HealthCheckState();

    @Import(name="arn")
    private @Nullable Output<String> arn;

    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    @Import(name="childHealthThreshold")
    private @Nullable Output<Integer> childHealthThreshold;

    public Optional<Output<Integer>> childHealthThreshold() {
        return Optional.ofNullable(this.childHealthThreshold);
    }

    @Import(name="childHealthchecks")
    private @Nullable Output<List<String>> childHealthchecks;

    public Optional<Output<List<String>>> childHealthchecks() {
        return Optional.ofNullable(this.childHealthchecks);
    }

    @Import(name="cloudwatchAlarmName")
    private @Nullable Output<String> cloudwatchAlarmName;

    public Optional<Output<String>> cloudwatchAlarmName() {
        return Optional.ofNullable(this.cloudwatchAlarmName);
    }

    @Import(name="cloudwatchAlarmRegion")
    private @Nullable Output<String> cloudwatchAlarmRegion;

    public Optional<Output<String>> cloudwatchAlarmRegion() {
        return Optional.ofNullable(this.cloudwatchAlarmRegion);
    }

    @Import(name="disabled")
    private @Nullable Output<Boolean> disabled;

    public Optional<Output<Boolean>> disabled() {
        return Optional.ofNullable(this.disabled);
    }

    @Import(name="enableSni")
    private @Nullable Output<Boolean> enableSni;

    public Optional<Output<Boolean>> enableSni() {
        return Optional.ofNullable(this.enableSni);
    }

    @Import(name="failureThreshold")
    private @Nullable Output<Integer> failureThreshold;

    public Optional<Output<Integer>> failureThreshold() {
        return Optional.ofNullable(this.failureThreshold);
    }

    @Import(name="fqdn")
    private @Nullable Output<String> fqdn;

    public Optional<Output<String>> fqdn() {
        return Optional.ofNullable(this.fqdn);
    }

    @Import(name="insufficientDataHealthStatus")
    private @Nullable Output<String> insufficientDataHealthStatus;

    public Optional<Output<String>> insufficientDataHealthStatus() {
        return Optional.ofNullable(this.insufficientDataHealthStatus);
    }

    @Import(name="invertHealthcheck")
    private @Nullable Output<Boolean> invertHealthcheck;

    public Optional<Output<Boolean>> invertHealthcheck() {
        return Optional.ofNullable(this.invertHealthcheck);
    }

    @Import(name="ipAddress")
    private @Nullable Output<String> ipAddress;

    public Optional<Output<String>> ipAddress() {
        return Optional.ofNullable(this.ipAddress);
    }

    @Import(name="measureLatency")
    private @Nullable Output<Boolean> measureLatency;

    public Optional<Output<Boolean>> measureLatency() {
        return Optional.ofNullable(this.measureLatency);
    }

    @Import(name="port")
    private @Nullable Output<Integer> port;

    public Optional<Output<Integer>> port() {
        return Optional.ofNullable(this.port);
    }

    @Import(name="referenceName")
    private @Nullable Output<String> referenceName;

    public Optional<Output<String>> referenceName() {
        return Optional.ofNullable(this.referenceName);
    }

    @Import(name="regions")
    private @Nullable Output<List<String>> regions;

    public Optional<Output<List<String>>> regions() {
        return Optional.ofNullable(this.regions);
    }

    @Import(name="requestInterval")
    private @Nullable Output<Integer> requestInterval;

    public Optional<Output<Integer>> requestInterval() {
        return Optional.ofNullable(this.requestInterval);
    }

    @Import(name="resourcePath")
    private @Nullable Output<String> resourcePath;

    public Optional<Output<String>> resourcePath() {
        return Optional.ofNullable(this.resourcePath);
    }

    @Import(name="routingControlArn")
    private @Nullable Output<String> routingControlArn;

    public Optional<Output<String>> routingControlArn() {
        return Optional.ofNullable(this.routingControlArn);
    }

    @Import(name="searchString")
    private @Nullable Output<String> searchString;

    public Optional<Output<String>> searchString() {
        return Optional.ofNullable(this.searchString);
    }

    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    @Import(name="type")
    private @Nullable Output<String> type;

    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private HealthCheckState() {}

    private HealthCheckState(HealthCheckState $) {
        this.arn = $.arn;
        this.childHealthThreshold = $.childHealthThreshold;
        this.childHealthchecks = $.childHealthchecks;
        this.cloudwatchAlarmName = $.cloudwatchAlarmName;
        this.cloudwatchAlarmRegion = $.cloudwatchAlarmRegion;
        this.disabled = $.disabled;
        this.enableSni = $.enableSni;
        this.failureThreshold = $.failureThreshold;
        this.fqdn = $.fqdn;
        this.insufficientDataHealthStatus = $.insufficientDataHealthStatus;
        this.invertHealthcheck = $.invertHealthcheck;
        this.ipAddress = $.ipAddress;
        this.measureLatency = $.measureLatency;
        this.port = $.port;
        this.referenceName = $.referenceName;
        this.regions = $.regions;
        this.requestInterval = $.requestInterval;
        this.resourcePath = $.resourcePath;
        this.routingControlArn = $.routingControlArn;
        this.searchString = $.searchString;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HealthCheckState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HealthCheckState $;

        public Builder() {
            $ = new HealthCheckState();
        }

        public Builder(HealthCheckState defaults) {
            $ = new HealthCheckState(Objects.requireNonNull(defaults));
        }

        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        public Builder childHealthThreshold(@Nullable Output<Integer> childHealthThreshold) {
            $.childHealthThreshold = childHealthThreshold;
            return this;
        }

        public Builder childHealthThreshold(Integer childHealthThreshold) {
            return childHealthThreshold(Output.of(childHealthThreshold));
        }

        public Builder childHealthchecks(@Nullable Output<List<String>> childHealthchecks) {
            $.childHealthchecks = childHealthchecks;
            return this;
        }

        public Builder childHealthchecks(List<String> childHealthchecks) {
            return childHealthchecks(Output.of(childHealthchecks));
        }

        public Builder childHealthchecks(String... childHealthchecks) {
            return childHealthchecks(List.of(childHealthchecks));
        }

        public Builder cloudwatchAlarmName(@Nullable Output<String> cloudwatchAlarmName) {
            $.cloudwatchAlarmName = cloudwatchAlarmName;
            return this;
        }

        public Builder cloudwatchAlarmName(String cloudwatchAlarmName) {
            return cloudwatchAlarmName(Output.of(cloudwatchAlarmName));
        }

        public Builder cloudwatchAlarmRegion(@Nullable Output<String> cloudwatchAlarmRegion) {
            $.cloudwatchAlarmRegion = cloudwatchAlarmRegion;
            return this;
        }

        public Builder cloudwatchAlarmRegion(String cloudwatchAlarmRegion) {
            return cloudwatchAlarmRegion(Output.of(cloudwatchAlarmRegion));
        }

        public Builder disabled(@Nullable Output<Boolean> disabled) {
            $.disabled = disabled;
            return this;
        }

        public Builder disabled(Boolean disabled) {
            return disabled(Output.of(disabled));
        }

        public Builder enableSni(@Nullable Output<Boolean> enableSni) {
            $.enableSni = enableSni;
            return this;
        }

        public Builder enableSni(Boolean enableSni) {
            return enableSni(Output.of(enableSni));
        }

        public Builder failureThreshold(@Nullable Output<Integer> failureThreshold) {
            $.failureThreshold = failureThreshold;
            return this;
        }

        public Builder failureThreshold(Integer failureThreshold) {
            return failureThreshold(Output.of(failureThreshold));
        }

        public Builder fqdn(@Nullable Output<String> fqdn) {
            $.fqdn = fqdn;
            return this;
        }

        public Builder fqdn(String fqdn) {
            return fqdn(Output.of(fqdn));
        }

        public Builder insufficientDataHealthStatus(@Nullable Output<String> insufficientDataHealthStatus) {
            $.insufficientDataHealthStatus = insufficientDataHealthStatus;
            return this;
        }

        public Builder insufficientDataHealthStatus(String insufficientDataHealthStatus) {
            return insufficientDataHealthStatus(Output.of(insufficientDataHealthStatus));
        }

        public Builder invertHealthcheck(@Nullable Output<Boolean> invertHealthcheck) {
            $.invertHealthcheck = invertHealthcheck;
            return this;
        }

        public Builder invertHealthcheck(Boolean invertHealthcheck) {
            return invertHealthcheck(Output.of(invertHealthcheck));
        }

        public Builder ipAddress(@Nullable Output<String> ipAddress) {
            $.ipAddress = ipAddress;
            return this;
        }

        public Builder ipAddress(String ipAddress) {
            return ipAddress(Output.of(ipAddress));
        }

        public Builder measureLatency(@Nullable Output<Boolean> measureLatency) {
            $.measureLatency = measureLatency;
            return this;
        }

        public Builder measureLatency(Boolean measureLatency) {
            return measureLatency(Output.of(measureLatency));
        }

        public Builder port(@Nullable Output<Integer> port) {
            $.port = port;
            return this;
        }

        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        public Builder referenceName(@Nullable Output<String> referenceName) {
            $.referenceName = referenceName;
            return this;
        }

        public Builder referenceName(String referenceName) {
            return referenceName(Output.of(referenceName));
        }

        public Builder regions(@Nullable Output<List<String>> regions) {
            $.regions = regions;
            return this;
        }

        public Builder regions(List<String> regions) {
            return regions(Output.of(regions));
        }

        public Builder regions(String... regions) {
            return regions(List.of(regions));
        }

        public Builder requestInterval(@Nullable Output<Integer> requestInterval) {
            $.requestInterval = requestInterval;
            return this;
        }

        public Builder requestInterval(Integer requestInterval) {
            return requestInterval(Output.of(requestInterval));
        }

        public Builder resourcePath(@Nullable Output<String> resourcePath) {
            $.resourcePath = resourcePath;
            return this;
        }

        public Builder resourcePath(String resourcePath) {
            return resourcePath(Output.of(resourcePath));
        }

        public Builder routingControlArn(@Nullable Output<String> routingControlArn) {
            $.routingControlArn = routingControlArn;
            return this;
        }

        public Builder routingControlArn(String routingControlArn) {
            return routingControlArn(Output.of(routingControlArn));
        }

        public Builder searchString(@Nullable Output<String> searchString) {
            $.searchString = searchString;
            return this;
        }

        public Builder searchString(String searchString) {
            return searchString(Output.of(searchString));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        public Builder type(String type) {
            return type(Output.of(type));
        }

        public HealthCheckState build() {
            return $;
        }
    }

}
