// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.inputs;

import com.pulumi.aws.quicksight.inputs.DataLabelsOptionsArgs;
import com.pulumi.aws.quicksight.inputs.TooltipOptionsArgs;
import com.pulumi.aws.quicksight.inputs.VisualPaletteArgs;
import com.pulumi.aws.quicksight.inputs.VisualsGaugeChartVisualChartConfigurationFieldWellsArgs;
import com.pulumi.aws.quicksight.inputs.VisualsGaugeChartVisualChartConfigurationGaugeChartOptionsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VisualsGaugeChartVisualChartConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final VisualsGaugeChartVisualChartConfigurationArgs Empty = new VisualsGaugeChartVisualChartConfigurationArgs();

    @Import(name="dataLabels")
    private @Nullable Output<DataLabelsOptionsArgs> dataLabels;

    public Optional<Output<DataLabelsOptionsArgs>> dataLabels() {
        return Optional.ofNullable(this.dataLabels);
    }

    @Import(name="fieldWells")
    private @Nullable Output<VisualsGaugeChartVisualChartConfigurationFieldWellsArgs> fieldWells;

    public Optional<Output<VisualsGaugeChartVisualChartConfigurationFieldWellsArgs>> fieldWells() {
        return Optional.ofNullable(this.fieldWells);
    }

    @Import(name="gaugeChartOptions")
    private @Nullable Output<VisualsGaugeChartVisualChartConfigurationGaugeChartOptionsArgs> gaugeChartOptions;

    public Optional<Output<VisualsGaugeChartVisualChartConfigurationGaugeChartOptionsArgs>> gaugeChartOptions() {
        return Optional.ofNullable(this.gaugeChartOptions);
    }

    @Import(name="tooltip")
    private @Nullable Output<TooltipOptionsArgs> tooltip;

    public Optional<Output<TooltipOptionsArgs>> tooltip() {
        return Optional.ofNullable(this.tooltip);
    }

    @Import(name="visualPalette")
    private @Nullable Output<VisualPaletteArgs> visualPalette;

    public Optional<Output<VisualPaletteArgs>> visualPalette() {
        return Optional.ofNullable(this.visualPalette);
    }

    private VisualsGaugeChartVisualChartConfigurationArgs() {}

    private VisualsGaugeChartVisualChartConfigurationArgs(VisualsGaugeChartVisualChartConfigurationArgs $) {
        this.dataLabels = $.dataLabels;
        this.fieldWells = $.fieldWells;
        this.gaugeChartOptions = $.gaugeChartOptions;
        this.tooltip = $.tooltip;
        this.visualPalette = $.visualPalette;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VisualsGaugeChartVisualChartConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VisualsGaugeChartVisualChartConfigurationArgs $;

        public Builder() {
            $ = new VisualsGaugeChartVisualChartConfigurationArgs();
        }

        public Builder(VisualsGaugeChartVisualChartConfigurationArgs defaults) {
            $ = new VisualsGaugeChartVisualChartConfigurationArgs(Objects.requireNonNull(defaults));
        }

        public Builder dataLabels(@Nullable Output<DataLabelsOptionsArgs> dataLabels) {
            $.dataLabels = dataLabels;
            return this;
        }

        public Builder dataLabels(DataLabelsOptionsArgs dataLabels) {
            return dataLabels(Output.of(dataLabels));
        }

        public Builder fieldWells(@Nullable Output<VisualsGaugeChartVisualChartConfigurationFieldWellsArgs> fieldWells) {
            $.fieldWells = fieldWells;
            return this;
        }

        public Builder fieldWells(VisualsGaugeChartVisualChartConfigurationFieldWellsArgs fieldWells) {
            return fieldWells(Output.of(fieldWells));
        }

        public Builder gaugeChartOptions(@Nullable Output<VisualsGaugeChartVisualChartConfigurationGaugeChartOptionsArgs> gaugeChartOptions) {
            $.gaugeChartOptions = gaugeChartOptions;
            return this;
        }

        public Builder gaugeChartOptions(VisualsGaugeChartVisualChartConfigurationGaugeChartOptionsArgs gaugeChartOptions) {
            return gaugeChartOptions(Output.of(gaugeChartOptions));
        }

        public Builder tooltip(@Nullable Output<TooltipOptionsArgs> tooltip) {
            $.tooltip = tooltip;
            return this;
        }

        public Builder tooltip(TooltipOptionsArgs tooltip) {
            return tooltip(Output.of(tooltip));
        }

        public Builder visualPalette(@Nullable Output<VisualPaletteArgs> visualPalette) {
            $.visualPalette = visualPalette;
            return this;
        }

        public Builder visualPalette(VisualPaletteArgs visualPalette) {
            return visualPalette(Output.of(visualPalette));
        }

        public VisualsGaugeChartVisualChartConfigurationArgs build() {
            return $;
        }
    }

}
