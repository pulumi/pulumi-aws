// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.codebuild;

import com.pulumi.aws.codebuild.inputs.ReportGroupExportConfigArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ReportGroupArgs extends com.pulumi.resources.ResourceArgs {

    public static final ReportGroupArgs Empty = new ReportGroupArgs();

    /**
     * If `true`, deletes any reports that belong to a report group before deleting the report group. If `false`, you must delete any reports in the report group before deleting it. Default value is `false`.
     * 
     */
    @Import(name="deleteReports")
    private @Nullable Output<Boolean> deleteReports;

    /**
     * @return If `true`, deletes any reports that belong to a report group before deleting the report group. If `false`, you must delete any reports in the report group before deleting it. Default value is `false`.
     * 
     */
    public Optional<Output<Boolean>> deleteReports() {
        return Optional.ofNullable(this.deleteReports);
    }

    /**
     * Information about the destination where the raw data of this Report Group is exported. see Export Config documented below.
     * 
     */
    @Import(name="exportConfig", required=true)
    private Output<ReportGroupExportConfigArgs> exportConfig;

    /**
     * @return Information about the destination where the raw data of this Report Group is exported. see Export Config documented below.
     * 
     */
    public Output<ReportGroupExportConfigArgs> exportConfig() {
        return this.exportConfig;
    }

    /**
     * The name of a Report Group.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of a Report Group.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Key-value mapping of resource tags. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Key-value mapping of resource tags. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The type of the Report Group. Valid value are `TEST` and `CODE_COVERAGE`.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return The type of the Report Group. Valid value are `TEST` and `CODE_COVERAGE`.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private ReportGroupArgs() {}

    private ReportGroupArgs(ReportGroupArgs $) {
        this.deleteReports = $.deleteReports;
        this.exportConfig = $.exportConfig;
        this.name = $.name;
        this.tags = $.tags;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ReportGroupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ReportGroupArgs $;

        public Builder() {
            $ = new ReportGroupArgs();
        }

        public Builder(ReportGroupArgs defaults) {
            $ = new ReportGroupArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param deleteReports If `true`, deletes any reports that belong to a report group before deleting the report group. If `false`, you must delete any reports in the report group before deleting it. Default value is `false`.
         * 
         * @return builder
         * 
         */
        public Builder deleteReports(@Nullable Output<Boolean> deleteReports) {
            $.deleteReports = deleteReports;
            return this;
        }

        /**
         * @param deleteReports If `true`, deletes any reports that belong to a report group before deleting the report group. If `false`, you must delete any reports in the report group before deleting it. Default value is `false`.
         * 
         * @return builder
         * 
         */
        public Builder deleteReports(Boolean deleteReports) {
            return deleteReports(Output.of(deleteReports));
        }

        /**
         * @param exportConfig Information about the destination where the raw data of this Report Group is exported. see Export Config documented below.
         * 
         * @return builder
         * 
         */
        public Builder exportConfig(Output<ReportGroupExportConfigArgs> exportConfig) {
            $.exportConfig = exportConfig;
            return this;
        }

        /**
         * @param exportConfig Information about the destination where the raw data of this Report Group is exported. see Export Config documented below.
         * 
         * @return builder
         * 
         */
        public Builder exportConfig(ReportGroupExportConfigArgs exportConfig) {
            return exportConfig(Output.of(exportConfig));
        }

        /**
         * @param name The name of a Report Group.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of a Report Group.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param tags Key-value mapping of resource tags. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Key-value mapping of resource tags. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param type The type of the Report Group. Valid value are `TEST` and `CODE_COVERAGE`.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of the Report Group. Valid value are `TEST` and `CODE_COVERAGE`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public ReportGroupArgs build() {
            if ($.exportConfig == null) {
                throw new MissingRequiredPropertyException("ReportGroupArgs", "exportConfig");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("ReportGroupArgs", "type");
            }
            return $;
        }
    }

}
