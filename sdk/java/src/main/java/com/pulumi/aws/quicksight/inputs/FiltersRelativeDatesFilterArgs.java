// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.inputs;

import com.pulumi.aws.quicksight.inputs.ColumnArgs;
import com.pulumi.aws.quicksight.inputs.FiltersRelativeDatesFilterAnchorDateConfigurationArgs;
import com.pulumi.aws.quicksight.inputs.FiltersRelativeDatesFilterExcludePeriodConfigurationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FiltersRelativeDatesFilterArgs extends com.pulumi.resources.ResourceArgs {

    public static final FiltersRelativeDatesFilterArgs Empty = new FiltersRelativeDatesFilterArgs();

    @Import(name="anchorDateConfiguration", required=true)
    private Output<FiltersRelativeDatesFilterAnchorDateConfigurationArgs> anchorDateConfiguration;

    public Output<FiltersRelativeDatesFilterAnchorDateConfigurationArgs> anchorDateConfiguration() {
        return this.anchorDateConfiguration;
    }

    @Import(name="column", required=true)
    private Output<ColumnArgs> column;

    public Output<ColumnArgs> column() {
        return this.column;
    }

    @Import(name="excludePeriodConfiguration")
    private @Nullable Output<FiltersRelativeDatesFilterExcludePeriodConfigurationArgs> excludePeriodConfiguration;

    public Optional<Output<FiltersRelativeDatesFilterExcludePeriodConfigurationArgs>> excludePeriodConfiguration() {
        return Optional.ofNullable(this.excludePeriodConfiguration);
    }

    @Import(name="filterId", required=true)
    private Output<String> filterId;

    public Output<String> filterId() {
        return this.filterId;
    }

    @Import(name="minimumGranularity", required=true)
    private Output<String> minimumGranularity;

    public Output<String> minimumGranularity() {
        return this.minimumGranularity;
    }

    @Import(name="nullOption", required=true)
    private Output<String> nullOption;

    public Output<String> nullOption() {
        return this.nullOption;
    }

    @Import(name="parameterName")
    private @Nullable Output<String> parameterName;

    public Optional<Output<String>> parameterName() {
        return Optional.ofNullable(this.parameterName);
    }

    @Import(name="relativeDateType", required=true)
    private Output<String> relativeDateType;

    public Output<String> relativeDateType() {
        return this.relativeDateType;
    }

    @Import(name="relativeDateValue")
    private @Nullable Output<Integer> relativeDateValue;

    public Optional<Output<Integer>> relativeDateValue() {
        return Optional.ofNullable(this.relativeDateValue);
    }

    @Import(name="timeGranularity", required=true)
    private Output<String> timeGranularity;

    public Output<String> timeGranularity() {
        return this.timeGranularity;
    }

    private FiltersRelativeDatesFilterArgs() {}

    private FiltersRelativeDatesFilterArgs(FiltersRelativeDatesFilterArgs $) {
        this.anchorDateConfiguration = $.anchorDateConfiguration;
        this.column = $.column;
        this.excludePeriodConfiguration = $.excludePeriodConfiguration;
        this.filterId = $.filterId;
        this.minimumGranularity = $.minimumGranularity;
        this.nullOption = $.nullOption;
        this.parameterName = $.parameterName;
        this.relativeDateType = $.relativeDateType;
        this.relativeDateValue = $.relativeDateValue;
        this.timeGranularity = $.timeGranularity;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FiltersRelativeDatesFilterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FiltersRelativeDatesFilterArgs $;

        public Builder() {
            $ = new FiltersRelativeDatesFilterArgs();
        }

        public Builder(FiltersRelativeDatesFilterArgs defaults) {
            $ = new FiltersRelativeDatesFilterArgs(Objects.requireNonNull(defaults));
        }

        public Builder anchorDateConfiguration(Output<FiltersRelativeDatesFilterAnchorDateConfigurationArgs> anchorDateConfiguration) {
            $.anchorDateConfiguration = anchorDateConfiguration;
            return this;
        }

        public Builder anchorDateConfiguration(FiltersRelativeDatesFilterAnchorDateConfigurationArgs anchorDateConfiguration) {
            return anchorDateConfiguration(Output.of(anchorDateConfiguration));
        }

        public Builder column(Output<ColumnArgs> column) {
            $.column = column;
            return this;
        }

        public Builder column(ColumnArgs column) {
            return column(Output.of(column));
        }

        public Builder excludePeriodConfiguration(@Nullable Output<FiltersRelativeDatesFilterExcludePeriodConfigurationArgs> excludePeriodConfiguration) {
            $.excludePeriodConfiguration = excludePeriodConfiguration;
            return this;
        }

        public Builder excludePeriodConfiguration(FiltersRelativeDatesFilterExcludePeriodConfigurationArgs excludePeriodConfiguration) {
            return excludePeriodConfiguration(Output.of(excludePeriodConfiguration));
        }

        public Builder filterId(Output<String> filterId) {
            $.filterId = filterId;
            return this;
        }

        public Builder filterId(String filterId) {
            return filterId(Output.of(filterId));
        }

        public Builder minimumGranularity(Output<String> minimumGranularity) {
            $.minimumGranularity = minimumGranularity;
            return this;
        }

        public Builder minimumGranularity(String minimumGranularity) {
            return minimumGranularity(Output.of(minimumGranularity));
        }

        public Builder nullOption(Output<String> nullOption) {
            $.nullOption = nullOption;
            return this;
        }

        public Builder nullOption(String nullOption) {
            return nullOption(Output.of(nullOption));
        }

        public Builder parameterName(@Nullable Output<String> parameterName) {
            $.parameterName = parameterName;
            return this;
        }

        public Builder parameterName(String parameterName) {
            return parameterName(Output.of(parameterName));
        }

        public Builder relativeDateType(Output<String> relativeDateType) {
            $.relativeDateType = relativeDateType;
            return this;
        }

        public Builder relativeDateType(String relativeDateType) {
            return relativeDateType(Output.of(relativeDateType));
        }

        public Builder relativeDateValue(@Nullable Output<Integer> relativeDateValue) {
            $.relativeDateValue = relativeDateValue;
            return this;
        }

        public Builder relativeDateValue(Integer relativeDateValue) {
            return relativeDateValue(Output.of(relativeDateValue));
        }

        public Builder timeGranularity(Output<String> timeGranularity) {
            $.timeGranularity = timeGranularity;
            return this;
        }

        public Builder timeGranularity(String timeGranularity) {
            return timeGranularity(Output.of(timeGranularity));
        }

        public FiltersRelativeDatesFilterArgs build() {
            if ($.anchorDateConfiguration == null) {
                throw new MissingRequiredPropertyException("FiltersRelativeDatesFilterArgs", "anchorDateConfiguration");
            }
            if ($.column == null) {
                throw new MissingRequiredPropertyException("FiltersRelativeDatesFilterArgs", "column");
            }
            if ($.filterId == null) {
                throw new MissingRequiredPropertyException("FiltersRelativeDatesFilterArgs", "filterId");
            }
            if ($.minimumGranularity == null) {
                throw new MissingRequiredPropertyException("FiltersRelativeDatesFilterArgs", "minimumGranularity");
            }
            if ($.nullOption == null) {
                throw new MissingRequiredPropertyException("FiltersRelativeDatesFilterArgs", "nullOption");
            }
            if ($.relativeDateType == null) {
                throw new MissingRequiredPropertyException("FiltersRelativeDatesFilterArgs", "relativeDateType");
            }
            if ($.timeGranularity == null) {
                throw new MissingRequiredPropertyException("FiltersRelativeDatesFilterArgs", "timeGranularity");
            }
            return $;
        }
    }

}
