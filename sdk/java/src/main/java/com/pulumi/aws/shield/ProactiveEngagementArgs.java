// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.shield;

import com.pulumi.aws.shield.inputs.ProactiveEngagementEmergencyContactArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProactiveEngagementArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProactiveEngagementArgs Empty = new ProactiveEngagementArgs();

    /**
     * One or more emergency contacts. You must provide at least one phone number in the emergency contact list. See `emergency_contacts`.
     * 
     */
    @Import(name="emergencyContacts")
    private @Nullable Output<List<ProactiveEngagementEmergencyContactArgs>> emergencyContacts;

    /**
     * @return One or more emergency contacts. You must provide at least one phone number in the emergency contact list. See `emergency_contacts`.
     * 
     */
    public Optional<Output<List<ProactiveEngagementEmergencyContactArgs>>> emergencyContacts() {
        return Optional.ofNullable(this.emergencyContacts);
    }

    /**
     * Boolean value indicating if Proactive Engagement should be enabled or not.
     * 
     */
    @Import(name="enabled", required=true)
    private Output<Boolean> enabled;

    /**
     * @return Boolean value indicating if Proactive Engagement should be enabled or not.
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }

    private ProactiveEngagementArgs() {}

    private ProactiveEngagementArgs(ProactiveEngagementArgs $) {
        this.emergencyContacts = $.emergencyContacts;
        this.enabled = $.enabled;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProactiveEngagementArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProactiveEngagementArgs $;

        public Builder() {
            $ = new ProactiveEngagementArgs();
        }

        public Builder(ProactiveEngagementArgs defaults) {
            $ = new ProactiveEngagementArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param emergencyContacts One or more emergency contacts. You must provide at least one phone number in the emergency contact list. See `emergency_contacts`.
         * 
         * @return builder
         * 
         */
        public Builder emergencyContacts(@Nullable Output<List<ProactiveEngagementEmergencyContactArgs>> emergencyContacts) {
            $.emergencyContacts = emergencyContacts;
            return this;
        }

        /**
         * @param emergencyContacts One or more emergency contacts. You must provide at least one phone number in the emergency contact list. See `emergency_contacts`.
         * 
         * @return builder
         * 
         */
        public Builder emergencyContacts(List<ProactiveEngagementEmergencyContactArgs> emergencyContacts) {
            return emergencyContacts(Output.of(emergencyContacts));
        }

        /**
         * @param emergencyContacts One or more emergency contacts. You must provide at least one phone number in the emergency contact list. See `emergency_contacts`.
         * 
         * @return builder
         * 
         */
        public Builder emergencyContacts(ProactiveEngagementEmergencyContactArgs... emergencyContacts) {
            return emergencyContacts(List.of(emergencyContacts));
        }

        /**
         * @param enabled Boolean value indicating if Proactive Engagement should be enabled or not.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Boolean value indicating if Proactive Engagement should be enabled or not.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        public ProactiveEngagementArgs build() {
            if ($.enabled == null) {
                throw new MissingRequiredPropertyException("ProactiveEngagementArgs", "enabled");
            }
            return $;
        }
    }

}
