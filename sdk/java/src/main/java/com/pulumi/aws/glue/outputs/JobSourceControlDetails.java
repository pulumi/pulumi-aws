// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.glue.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class JobSourceControlDetails {
    /**
     * @return The type of authentication, which can be an authentication token stored in Amazon Web Services Secrets Manager, or a personal access token. Valid values are: `PERSONAL_ACCESS_TOKEN` and `AWS_SECRETS_MANAGER`.
     * 
     */
    private @Nullable String authStrategy;
    /**
     * @return The value of an authorization token.
     * 
     */
    private @Nullable String authToken;
    /**
     * @return A branch in the remote repository.
     * 
     */
    private @Nullable String branch;
    /**
     * @return A folder in the remote repository.
     * 
     */
    private @Nullable String folder;
    /**
     * @return The last commit ID for a commit in the remote repository.
     * 
     */
    private @Nullable String lastCommitId;
    /**
     * @return The owner of the remote repository that contains the job artifacts.
     * 
     */
    private @Nullable String owner;
    /**
     * @return The provider for the remote repository. Valid values are: `GITHUB`, `GITLAB`, `BITBUCKET`, and `AWS_CODE_COMMIT`.
     * 
     */
    private @Nullable String provider;
    /**
     * @return The name of the remote repository that contains the job artifacts.
     * 
     */
    private @Nullable String repository;

    private JobSourceControlDetails() {}
    /**
     * @return The type of authentication, which can be an authentication token stored in Amazon Web Services Secrets Manager, or a personal access token. Valid values are: `PERSONAL_ACCESS_TOKEN` and `AWS_SECRETS_MANAGER`.
     * 
     */
    public Optional<String> authStrategy() {
        return Optional.ofNullable(this.authStrategy);
    }
    /**
     * @return The value of an authorization token.
     * 
     */
    public Optional<String> authToken() {
        return Optional.ofNullable(this.authToken);
    }
    /**
     * @return A branch in the remote repository.
     * 
     */
    public Optional<String> branch() {
        return Optional.ofNullable(this.branch);
    }
    /**
     * @return A folder in the remote repository.
     * 
     */
    public Optional<String> folder() {
        return Optional.ofNullable(this.folder);
    }
    /**
     * @return The last commit ID for a commit in the remote repository.
     * 
     */
    public Optional<String> lastCommitId() {
        return Optional.ofNullable(this.lastCommitId);
    }
    /**
     * @return The owner of the remote repository that contains the job artifacts.
     * 
     */
    public Optional<String> owner() {
        return Optional.ofNullable(this.owner);
    }
    /**
     * @return The provider for the remote repository. Valid values are: `GITHUB`, `GITLAB`, `BITBUCKET`, and `AWS_CODE_COMMIT`.
     * 
     */
    public Optional<String> provider() {
        return Optional.ofNullable(this.provider);
    }
    /**
     * @return The name of the remote repository that contains the job artifacts.
     * 
     */
    public Optional<String> repository() {
        return Optional.ofNullable(this.repository);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(JobSourceControlDetails defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String authStrategy;
        private @Nullable String authToken;
        private @Nullable String branch;
        private @Nullable String folder;
        private @Nullable String lastCommitId;
        private @Nullable String owner;
        private @Nullable String provider;
        private @Nullable String repository;
        public Builder() {}
        public Builder(JobSourceControlDetails defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authStrategy = defaults.authStrategy;
    	      this.authToken = defaults.authToken;
    	      this.branch = defaults.branch;
    	      this.folder = defaults.folder;
    	      this.lastCommitId = defaults.lastCommitId;
    	      this.owner = defaults.owner;
    	      this.provider = defaults.provider;
    	      this.repository = defaults.repository;
        }

        @CustomType.Setter
        public Builder authStrategy(@Nullable String authStrategy) {

            this.authStrategy = authStrategy;
            return this;
        }
        @CustomType.Setter
        public Builder authToken(@Nullable String authToken) {

            this.authToken = authToken;
            return this;
        }
        @CustomType.Setter
        public Builder branch(@Nullable String branch) {

            this.branch = branch;
            return this;
        }
        @CustomType.Setter
        public Builder folder(@Nullable String folder) {

            this.folder = folder;
            return this;
        }
        @CustomType.Setter
        public Builder lastCommitId(@Nullable String lastCommitId) {

            this.lastCommitId = lastCommitId;
            return this;
        }
        @CustomType.Setter
        public Builder owner(@Nullable String owner) {

            this.owner = owner;
            return this;
        }
        @CustomType.Setter
        public Builder provider(@Nullable String provider) {

            this.provider = provider;
            return this;
        }
        @CustomType.Setter
        public Builder repository(@Nullable String repository) {

            this.repository = repository;
            return this;
        }
        public JobSourceControlDetails build() {
            final var _resultValue = new JobSourceControlDetails();
            _resultValue.authStrategy = authStrategy;
            _resultValue.authToken = authToken;
            _resultValue.branch = branch;
            _resultValue.folder = folder;
            _resultValue.lastCommitId = lastCommitId;
            _resultValue.owner = owner;
            _resultValue.provider = provider;
            _resultValue.repository = repository;
            return _resultValue;
        }
    }
}
