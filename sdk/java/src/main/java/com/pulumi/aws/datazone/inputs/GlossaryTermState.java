// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.datazone.inputs;

import com.pulumi.aws.datazone.inputs.GlossaryTermTermRelationsArgs;
import com.pulumi.aws.datazone.inputs.GlossaryTermTimeoutsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GlossaryTermState extends com.pulumi.resources.ResourceArgs {

    public static final GlossaryTermState Empty = new GlossaryTermState();

    /**
     * Time of glossary term creation.
     * 
     */
    @Import(name="createdAt")
    private @Nullable Output<String> createdAt;

    /**
     * @return Time of glossary term creation.
     * 
     */
    public Optional<Output<String>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    /**
     * Creator of glossary term.
     * 
     */
    @Import(name="createdBy")
    private @Nullable Output<String> createdBy;

    /**
     * @return Creator of glossary term.
     * 
     */
    public Optional<Output<String>> createdBy() {
        return Optional.ofNullable(this.createdBy);
    }

    /**
     * Identifier of domain.
     * 
     */
    @Import(name="domainIdentifier")
    private @Nullable Output<String> domainIdentifier;

    /**
     * @return Identifier of domain.
     * 
     */
    public Optional<Output<String>> domainIdentifier() {
        return Optional.ofNullable(this.domainIdentifier);
    }

    /**
     * Identifier of glossary.
     * 
     */
    @Import(name="glossaryIdentifier")
    private @Nullable Output<String> glossaryIdentifier;

    /**
     * @return Identifier of glossary.
     * 
     */
    public Optional<Output<String>> glossaryIdentifier() {
        return Optional.ofNullable(this.glossaryIdentifier);
    }

    /**
     * Long description of entry.
     * 
     */
    @Import(name="longDescription")
    private @Nullable Output<String> longDescription;

    /**
     * @return Long description of entry.
     * 
     */
    public Optional<Output<String>> longDescription() {
        return Optional.ofNullable(this.longDescription);
    }

    /**
     * Name of glossary term.
     * 
     * The following arguments are optional:
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of glossary term.
     * 
     * The following arguments are optional:
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Short description of entry.
     * 
     */
    @Import(name="shortDescription")
    private @Nullable Output<String> shortDescription;

    /**
     * @return Short description of entry.
     * 
     */
    public Optional<Output<String>> shortDescription() {
        return Optional.ofNullable(this.shortDescription);
    }

    /**
     * If glossary term is ENABLED or DISABLED.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return If glossary term is ENABLED or DISABLED.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Object classifying the term relations through the following attributes:
     * 
     */
    @Import(name="termRelations")
    private @Nullable Output<GlossaryTermTermRelationsArgs> termRelations;

    /**
     * @return Object classifying the term relations through the following attributes:
     * 
     */
    public Optional<Output<GlossaryTermTermRelationsArgs>> termRelations() {
        return Optional.ofNullable(this.termRelations);
    }

    @Import(name="timeouts")
    private @Nullable Output<GlossaryTermTimeoutsArgs> timeouts;

    public Optional<Output<GlossaryTermTimeoutsArgs>> timeouts() {
        return Optional.ofNullable(this.timeouts);
    }

    private GlossaryTermState() {}

    private GlossaryTermState(GlossaryTermState $) {
        this.createdAt = $.createdAt;
        this.createdBy = $.createdBy;
        this.domainIdentifier = $.domainIdentifier;
        this.glossaryIdentifier = $.glossaryIdentifier;
        this.longDescription = $.longDescription;
        this.name = $.name;
        this.shortDescription = $.shortDescription;
        this.status = $.status;
        this.termRelations = $.termRelations;
        this.timeouts = $.timeouts;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GlossaryTermState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GlossaryTermState $;

        public Builder() {
            $ = new GlossaryTermState();
        }

        public Builder(GlossaryTermState defaults) {
            $ = new GlossaryTermState(Objects.requireNonNull(defaults));
        }

        /**
         * @param createdAt Time of glossary term creation.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(@Nullable Output<String> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        /**
         * @param createdAt Time of glossary term creation.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(String createdAt) {
            return createdAt(Output.of(createdAt));
        }

        /**
         * @param createdBy Creator of glossary term.
         * 
         * @return builder
         * 
         */
        public Builder createdBy(@Nullable Output<String> createdBy) {
            $.createdBy = createdBy;
            return this;
        }

        /**
         * @param createdBy Creator of glossary term.
         * 
         * @return builder
         * 
         */
        public Builder createdBy(String createdBy) {
            return createdBy(Output.of(createdBy));
        }

        /**
         * @param domainIdentifier Identifier of domain.
         * 
         * @return builder
         * 
         */
        public Builder domainIdentifier(@Nullable Output<String> domainIdentifier) {
            $.domainIdentifier = domainIdentifier;
            return this;
        }

        /**
         * @param domainIdentifier Identifier of domain.
         * 
         * @return builder
         * 
         */
        public Builder domainIdentifier(String domainIdentifier) {
            return domainIdentifier(Output.of(domainIdentifier));
        }

        /**
         * @param glossaryIdentifier Identifier of glossary.
         * 
         * @return builder
         * 
         */
        public Builder glossaryIdentifier(@Nullable Output<String> glossaryIdentifier) {
            $.glossaryIdentifier = glossaryIdentifier;
            return this;
        }

        /**
         * @param glossaryIdentifier Identifier of glossary.
         * 
         * @return builder
         * 
         */
        public Builder glossaryIdentifier(String glossaryIdentifier) {
            return glossaryIdentifier(Output.of(glossaryIdentifier));
        }

        /**
         * @param longDescription Long description of entry.
         * 
         * @return builder
         * 
         */
        public Builder longDescription(@Nullable Output<String> longDescription) {
            $.longDescription = longDescription;
            return this;
        }

        /**
         * @param longDescription Long description of entry.
         * 
         * @return builder
         * 
         */
        public Builder longDescription(String longDescription) {
            return longDescription(Output.of(longDescription));
        }

        /**
         * @param name Name of glossary term.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of glossary term.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param shortDescription Short description of entry.
         * 
         * @return builder
         * 
         */
        public Builder shortDescription(@Nullable Output<String> shortDescription) {
            $.shortDescription = shortDescription;
            return this;
        }

        /**
         * @param shortDescription Short description of entry.
         * 
         * @return builder
         * 
         */
        public Builder shortDescription(String shortDescription) {
            return shortDescription(Output.of(shortDescription));
        }

        /**
         * @param status If glossary term is ENABLED or DISABLED.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status If glossary term is ENABLED or DISABLED.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param termRelations Object classifying the term relations through the following attributes:
         * 
         * @return builder
         * 
         */
        public Builder termRelations(@Nullable Output<GlossaryTermTermRelationsArgs> termRelations) {
            $.termRelations = termRelations;
            return this;
        }

        /**
         * @param termRelations Object classifying the term relations through the following attributes:
         * 
         * @return builder
         * 
         */
        public Builder termRelations(GlossaryTermTermRelationsArgs termRelations) {
            return termRelations(Output.of(termRelations));
        }

        public Builder timeouts(@Nullable Output<GlossaryTermTimeoutsArgs> timeouts) {
            $.timeouts = timeouts;
            return this;
        }

        public Builder timeouts(GlossaryTermTimeoutsArgs timeouts) {
            return timeouts(Output.of(timeouts));
        }

        public GlossaryTermState build() {
            return $;
        }
    }

}
