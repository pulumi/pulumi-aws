// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.lightsail.inputs;

import com.pulumi.aws.lightsail.inputs.LbCertificateDomainValidationRecordArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LbCertificateState extends com.pulumi.resources.ResourceArgs {

    public static final LbCertificateState Empty = new LbCertificateState();

    /**
     * The ARN of the lightsail certificate.
     * 
     */
    @Import(name="arn")
    private @Nullable Output<String> arn;

    /**
     * @return The ARN of the lightsail certificate.
     * 
     */
    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    /**
     * The timestamp when the instance was created.
     * 
     */
    @Import(name="createdAt")
    private @Nullable Output<String> createdAt;

    /**
     * @return The timestamp when the instance was created.
     * 
     */
    public Optional<Output<String>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    /**
     * The domain name (e.g., example.com) for your SSL/TLS certificate.
     * 
     */
    @Import(name="domainName")
    private @Nullable Output<String> domainName;

    /**
     * @return The domain name (e.g., example.com) for your SSL/TLS certificate.
     * 
     */
    public Optional<Output<String>> domainName() {
        return Optional.ofNullable(this.domainName);
    }

    @Import(name="domainValidationRecords")
    private @Nullable Output<List<LbCertificateDomainValidationRecordArgs>> domainValidationRecords;

    public Optional<Output<List<LbCertificateDomainValidationRecordArgs>>> domainValidationRecords() {
        return Optional.ofNullable(this.domainValidationRecords);
    }

    /**
     * The load balancer name where you want to create the SSL/TLS certificate.
     * 
     */
    @Import(name="lbName")
    private @Nullable Output<String> lbName;

    /**
     * @return The load balancer name where you want to create the SSL/TLS certificate.
     * 
     */
    public Optional<Output<String>> lbName() {
        return Optional.ofNullable(this.lbName);
    }

    /**
     * The SSL/TLS certificate name.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The SSL/TLS certificate name.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Set of domains that should be SANs in the issued certificate. `domain_name` attribute is automatically added as a Subject Alternative Name.
     * 
     */
    @Import(name="subjectAlternativeNames")
    private @Nullable Output<List<String>> subjectAlternativeNames;

    /**
     * @return Set of domains that should be SANs in the issued certificate. `domain_name` attribute is automatically added as a Subject Alternative Name.
     * 
     */
    public Optional<Output<List<String>>> subjectAlternativeNames() {
        return Optional.ofNullable(this.subjectAlternativeNames);
    }

    @Import(name="supportCode")
    private @Nullable Output<String> supportCode;

    public Optional<Output<String>> supportCode() {
        return Optional.ofNullable(this.supportCode);
    }

    private LbCertificateState() {}

    private LbCertificateState(LbCertificateState $) {
        this.arn = $.arn;
        this.createdAt = $.createdAt;
        this.domainName = $.domainName;
        this.domainValidationRecords = $.domainValidationRecords;
        this.lbName = $.lbName;
        this.name = $.name;
        this.subjectAlternativeNames = $.subjectAlternativeNames;
        this.supportCode = $.supportCode;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LbCertificateState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LbCertificateState $;

        public Builder() {
            $ = new LbCertificateState();
        }

        public Builder(LbCertificateState defaults) {
            $ = new LbCertificateState(Objects.requireNonNull(defaults));
        }

        /**
         * @param arn The ARN of the lightsail certificate.
         * 
         * @return builder
         * 
         */
        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        /**
         * @param arn The ARN of the lightsail certificate.
         * 
         * @return builder
         * 
         */
        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        /**
         * @param createdAt The timestamp when the instance was created.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(@Nullable Output<String> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        /**
         * @param createdAt The timestamp when the instance was created.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(String createdAt) {
            return createdAt(Output.of(createdAt));
        }

        /**
         * @param domainName The domain name (e.g., example.com) for your SSL/TLS certificate.
         * 
         * @return builder
         * 
         */
        public Builder domainName(@Nullable Output<String> domainName) {
            $.domainName = domainName;
            return this;
        }

        /**
         * @param domainName The domain name (e.g., example.com) for your SSL/TLS certificate.
         * 
         * @return builder
         * 
         */
        public Builder domainName(String domainName) {
            return domainName(Output.of(domainName));
        }

        public Builder domainValidationRecords(@Nullable Output<List<LbCertificateDomainValidationRecordArgs>> domainValidationRecords) {
            $.domainValidationRecords = domainValidationRecords;
            return this;
        }

        public Builder domainValidationRecords(List<LbCertificateDomainValidationRecordArgs> domainValidationRecords) {
            return domainValidationRecords(Output.of(domainValidationRecords));
        }

        public Builder domainValidationRecords(LbCertificateDomainValidationRecordArgs... domainValidationRecords) {
            return domainValidationRecords(List.of(domainValidationRecords));
        }

        /**
         * @param lbName The load balancer name where you want to create the SSL/TLS certificate.
         * 
         * @return builder
         * 
         */
        public Builder lbName(@Nullable Output<String> lbName) {
            $.lbName = lbName;
            return this;
        }

        /**
         * @param lbName The load balancer name where you want to create the SSL/TLS certificate.
         * 
         * @return builder
         * 
         */
        public Builder lbName(String lbName) {
            return lbName(Output.of(lbName));
        }

        /**
         * @param name The SSL/TLS certificate name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The SSL/TLS certificate name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param subjectAlternativeNames Set of domains that should be SANs in the issued certificate. `domain_name` attribute is automatically added as a Subject Alternative Name.
         * 
         * @return builder
         * 
         */
        public Builder subjectAlternativeNames(@Nullable Output<List<String>> subjectAlternativeNames) {
            $.subjectAlternativeNames = subjectAlternativeNames;
            return this;
        }

        /**
         * @param subjectAlternativeNames Set of domains that should be SANs in the issued certificate. `domain_name` attribute is automatically added as a Subject Alternative Name.
         * 
         * @return builder
         * 
         */
        public Builder subjectAlternativeNames(List<String> subjectAlternativeNames) {
            return subjectAlternativeNames(Output.of(subjectAlternativeNames));
        }

        /**
         * @param subjectAlternativeNames Set of domains that should be SANs in the issued certificate. `domain_name` attribute is automatically added as a Subject Alternative Name.
         * 
         * @return builder
         * 
         */
        public Builder subjectAlternativeNames(String... subjectAlternativeNames) {
            return subjectAlternativeNames(List.of(subjectAlternativeNames));
        }

        public Builder supportCode(@Nullable Output<String> supportCode) {
            $.supportCode = supportCode;
            return this;
        }

        public Builder supportCode(String supportCode) {
            return supportCode(Output.of(supportCode));
        }

        public LbCertificateState build() {
            return $;
        }
    }

}
