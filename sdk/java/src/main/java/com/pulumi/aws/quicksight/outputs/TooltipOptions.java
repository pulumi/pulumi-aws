// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.outputs;

import com.pulumi.aws.quicksight.outputs.TooltipOptionsFieldBaseTooltip;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class TooltipOptions {
    private @Nullable TooltipOptionsFieldBaseTooltip fieldBaseTooltip;
    private @Nullable String selectedTooltipType;
    private @Nullable String tooltipVisibility;

    private TooltipOptions() {}
    public Optional<TooltipOptionsFieldBaseTooltip> fieldBaseTooltip() {
        return Optional.ofNullable(this.fieldBaseTooltip);
    }
    public Optional<String> selectedTooltipType() {
        return Optional.ofNullable(this.selectedTooltipType);
    }
    public Optional<String> tooltipVisibility() {
        return Optional.ofNullable(this.tooltipVisibility);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TooltipOptions defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable TooltipOptionsFieldBaseTooltip fieldBaseTooltip;
        private @Nullable String selectedTooltipType;
        private @Nullable String tooltipVisibility;
        public Builder() {}
        public Builder(TooltipOptions defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.fieldBaseTooltip = defaults.fieldBaseTooltip;
    	      this.selectedTooltipType = defaults.selectedTooltipType;
    	      this.tooltipVisibility = defaults.tooltipVisibility;
        }

        @CustomType.Setter
        public Builder fieldBaseTooltip(@Nullable TooltipOptionsFieldBaseTooltip fieldBaseTooltip) {

            this.fieldBaseTooltip = fieldBaseTooltip;
            return this;
        }
        @CustomType.Setter
        public Builder selectedTooltipType(@Nullable String selectedTooltipType) {

            this.selectedTooltipType = selectedTooltipType;
            return this;
        }
        @CustomType.Setter
        public Builder tooltipVisibility(@Nullable String tooltipVisibility) {

            this.tooltipVisibility = tooltipVisibility;
            return this;
        }
        public TooltipOptions build() {
            final var _resultValue = new TooltipOptions();
            _resultValue.fieldBaseTooltip = fieldBaseTooltip;
            _resultValue.selectedTooltipType = selectedTooltipType;
            _resultValue.tooltipVisibility = tooltipVisibility;
            return _resultValue;
        }
    }
}
