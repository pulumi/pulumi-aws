// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.datasync.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TaskOptionsArgs extends com.pulumi.resources.ResourceArgs {

    public static final TaskOptionsArgs Empty = new TaskOptionsArgs();

    @Import(name="atime")
    private @Nullable Output<String> atime;

    public Optional<Output<String>> atime() {
        return Optional.ofNullable(this.atime);
    }

    @Import(name="bytesPerSecond")
    private @Nullable Output<Integer> bytesPerSecond;

    public Optional<Output<Integer>> bytesPerSecond() {
        return Optional.ofNullable(this.bytesPerSecond);
    }

    @Import(name="gid")
    private @Nullable Output<String> gid;

    public Optional<Output<String>> gid() {
        return Optional.ofNullable(this.gid);
    }

    @Import(name="logLevel")
    private @Nullable Output<String> logLevel;

    public Optional<Output<String>> logLevel() {
        return Optional.ofNullable(this.logLevel);
    }

    @Import(name="mtime")
    private @Nullable Output<String> mtime;

    public Optional<Output<String>> mtime() {
        return Optional.ofNullable(this.mtime);
    }

    @Import(name="overwriteMode")
    private @Nullable Output<String> overwriteMode;

    public Optional<Output<String>> overwriteMode() {
        return Optional.ofNullable(this.overwriteMode);
    }

    @Import(name="posixPermissions")
    private @Nullable Output<String> posixPermissions;

    public Optional<Output<String>> posixPermissions() {
        return Optional.ofNullable(this.posixPermissions);
    }

    @Import(name="preserveDeletedFiles")
    private @Nullable Output<String> preserveDeletedFiles;

    public Optional<Output<String>> preserveDeletedFiles() {
        return Optional.ofNullable(this.preserveDeletedFiles);
    }

    @Import(name="preserveDevices")
    private @Nullable Output<String> preserveDevices;

    public Optional<Output<String>> preserveDevices() {
        return Optional.ofNullable(this.preserveDevices);
    }

    @Import(name="securityDescriptorCopyFlags")
    private @Nullable Output<String> securityDescriptorCopyFlags;

    public Optional<Output<String>> securityDescriptorCopyFlags() {
        return Optional.ofNullable(this.securityDescriptorCopyFlags);
    }

    @Import(name="taskQueueing")
    private @Nullable Output<String> taskQueueing;

    public Optional<Output<String>> taskQueueing() {
        return Optional.ofNullable(this.taskQueueing);
    }

    @Import(name="transferMode")
    private @Nullable Output<String> transferMode;

    public Optional<Output<String>> transferMode() {
        return Optional.ofNullable(this.transferMode);
    }

    @Import(name="uid")
    private @Nullable Output<String> uid;

    public Optional<Output<String>> uid() {
        return Optional.ofNullable(this.uid);
    }

    @Import(name="verifyMode")
    private @Nullable Output<String> verifyMode;

    public Optional<Output<String>> verifyMode() {
        return Optional.ofNullable(this.verifyMode);
    }

    private TaskOptionsArgs() {}

    private TaskOptionsArgs(TaskOptionsArgs $) {
        this.atime = $.atime;
        this.bytesPerSecond = $.bytesPerSecond;
        this.gid = $.gid;
        this.logLevel = $.logLevel;
        this.mtime = $.mtime;
        this.overwriteMode = $.overwriteMode;
        this.posixPermissions = $.posixPermissions;
        this.preserveDeletedFiles = $.preserveDeletedFiles;
        this.preserveDevices = $.preserveDevices;
        this.securityDescriptorCopyFlags = $.securityDescriptorCopyFlags;
        this.taskQueueing = $.taskQueueing;
        this.transferMode = $.transferMode;
        this.uid = $.uid;
        this.verifyMode = $.verifyMode;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TaskOptionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TaskOptionsArgs $;

        public Builder() {
            $ = new TaskOptionsArgs();
        }

        public Builder(TaskOptionsArgs defaults) {
            $ = new TaskOptionsArgs(Objects.requireNonNull(defaults));
        }

        public Builder atime(@Nullable Output<String> atime) {
            $.atime = atime;
            return this;
        }

        public Builder atime(String atime) {
            return atime(Output.of(atime));
        }

        public Builder bytesPerSecond(@Nullable Output<Integer> bytesPerSecond) {
            $.bytesPerSecond = bytesPerSecond;
            return this;
        }

        public Builder bytesPerSecond(Integer bytesPerSecond) {
            return bytesPerSecond(Output.of(bytesPerSecond));
        }

        public Builder gid(@Nullable Output<String> gid) {
            $.gid = gid;
            return this;
        }

        public Builder gid(String gid) {
            return gid(Output.of(gid));
        }

        public Builder logLevel(@Nullable Output<String> logLevel) {
            $.logLevel = logLevel;
            return this;
        }

        public Builder logLevel(String logLevel) {
            return logLevel(Output.of(logLevel));
        }

        public Builder mtime(@Nullable Output<String> mtime) {
            $.mtime = mtime;
            return this;
        }

        public Builder mtime(String mtime) {
            return mtime(Output.of(mtime));
        }

        public Builder overwriteMode(@Nullable Output<String> overwriteMode) {
            $.overwriteMode = overwriteMode;
            return this;
        }

        public Builder overwriteMode(String overwriteMode) {
            return overwriteMode(Output.of(overwriteMode));
        }

        public Builder posixPermissions(@Nullable Output<String> posixPermissions) {
            $.posixPermissions = posixPermissions;
            return this;
        }

        public Builder posixPermissions(String posixPermissions) {
            return posixPermissions(Output.of(posixPermissions));
        }

        public Builder preserveDeletedFiles(@Nullable Output<String> preserveDeletedFiles) {
            $.preserveDeletedFiles = preserveDeletedFiles;
            return this;
        }

        public Builder preserveDeletedFiles(String preserveDeletedFiles) {
            return preserveDeletedFiles(Output.of(preserveDeletedFiles));
        }

        public Builder preserveDevices(@Nullable Output<String> preserveDevices) {
            $.preserveDevices = preserveDevices;
            return this;
        }

        public Builder preserveDevices(String preserveDevices) {
            return preserveDevices(Output.of(preserveDevices));
        }

        public Builder securityDescriptorCopyFlags(@Nullable Output<String> securityDescriptorCopyFlags) {
            $.securityDescriptorCopyFlags = securityDescriptorCopyFlags;
            return this;
        }

        public Builder securityDescriptorCopyFlags(String securityDescriptorCopyFlags) {
            return securityDescriptorCopyFlags(Output.of(securityDescriptorCopyFlags));
        }

        public Builder taskQueueing(@Nullable Output<String> taskQueueing) {
            $.taskQueueing = taskQueueing;
            return this;
        }

        public Builder taskQueueing(String taskQueueing) {
            return taskQueueing(Output.of(taskQueueing));
        }

        public Builder transferMode(@Nullable Output<String> transferMode) {
            $.transferMode = transferMode;
            return this;
        }

        public Builder transferMode(String transferMode) {
            return transferMode(Output.of(transferMode));
        }

        public Builder uid(@Nullable Output<String> uid) {
            $.uid = uid;
            return this;
        }

        public Builder uid(String uid) {
            return uid(Output.of(uid));
        }

        public Builder verifyMode(@Nullable Output<String> verifyMode) {
            $.verifyMode = verifyMode;
            return this;
        }

        public Builder verifyMode(String verifyMode) {
            return verifyMode(Output.of(verifyMode));
        }

        public TaskOptionsArgs build() {
            return $;
        }
    }

}
