// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.networkfirewall.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FirewallPolicyFirewallPolicyStatefulEngineOptionsFlowTimeoutsArgs extends com.pulumi.resources.ResourceArgs {

    public static final FirewallPolicyFirewallPolicyStatefulEngineOptionsFlowTimeoutsArgs Empty = new FirewallPolicyFirewallPolicyStatefulEngineOptionsFlowTimeoutsArgs();

    /**
     * Number of seconds that can pass without any TCP traffic sent through the firewall before the firewall determines that the connection is idle. After the idle timeout passes, data packets are dropped, however, the next TCP SYN packet is considered a new flow and is processed by the firewall. Clients or targets can use TCP keepalive packets to reset the idle timeout. Default value: `350`.
     * 
     */
    @Import(name="tcpIdleTimeoutSeconds")
    private @Nullable Output<Integer> tcpIdleTimeoutSeconds;

    /**
     * @return Number of seconds that can pass without any TCP traffic sent through the firewall before the firewall determines that the connection is idle. After the idle timeout passes, data packets are dropped, however, the next TCP SYN packet is considered a new flow and is processed by the firewall. Clients or targets can use TCP keepalive packets to reset the idle timeout. Default value: `350`.
     * 
     */
    public Optional<Output<Integer>> tcpIdleTimeoutSeconds() {
        return Optional.ofNullable(this.tcpIdleTimeoutSeconds);
    }

    private FirewallPolicyFirewallPolicyStatefulEngineOptionsFlowTimeoutsArgs() {}

    private FirewallPolicyFirewallPolicyStatefulEngineOptionsFlowTimeoutsArgs(FirewallPolicyFirewallPolicyStatefulEngineOptionsFlowTimeoutsArgs $) {
        this.tcpIdleTimeoutSeconds = $.tcpIdleTimeoutSeconds;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FirewallPolicyFirewallPolicyStatefulEngineOptionsFlowTimeoutsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FirewallPolicyFirewallPolicyStatefulEngineOptionsFlowTimeoutsArgs $;

        public Builder() {
            $ = new FirewallPolicyFirewallPolicyStatefulEngineOptionsFlowTimeoutsArgs();
        }

        public Builder(FirewallPolicyFirewallPolicyStatefulEngineOptionsFlowTimeoutsArgs defaults) {
            $ = new FirewallPolicyFirewallPolicyStatefulEngineOptionsFlowTimeoutsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param tcpIdleTimeoutSeconds Number of seconds that can pass without any TCP traffic sent through the firewall before the firewall determines that the connection is idle. After the idle timeout passes, data packets are dropped, however, the next TCP SYN packet is considered a new flow and is processed by the firewall. Clients or targets can use TCP keepalive packets to reset the idle timeout. Default value: `350`.
         * 
         * @return builder
         * 
         */
        public Builder tcpIdleTimeoutSeconds(@Nullable Output<Integer> tcpIdleTimeoutSeconds) {
            $.tcpIdleTimeoutSeconds = tcpIdleTimeoutSeconds;
            return this;
        }

        /**
         * @param tcpIdleTimeoutSeconds Number of seconds that can pass without any TCP traffic sent through the firewall before the firewall determines that the connection is idle. After the idle timeout passes, data packets are dropped, however, the next TCP SYN packet is considered a new flow and is processed by the firewall. Clients or targets can use TCP keepalive packets to reset the idle timeout. Default value: `350`.
         * 
         * @return builder
         * 
         */
        public Builder tcpIdleTimeoutSeconds(Integer tcpIdleTimeoutSeconds) {
            return tcpIdleTimeoutSeconds(Output.of(tcpIdleTimeoutSeconds));
        }

        public FirewallPolicyFirewallPolicyStatefulEngineOptionsFlowTimeoutsArgs build() {
            return $;
        }
    }

}
