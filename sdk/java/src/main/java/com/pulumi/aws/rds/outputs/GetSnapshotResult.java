// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.rds.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetSnapshotResult {
    /**
     * @return Allocated storage size in gigabytes (GB).
     * 
     */
    private Integer allocatedStorage;
    /**
     * @return Name of the Availability Zone the DB instance was located in at the time of the DB snapshot.
     * 
     */
    private String availabilityZone;
    private @Nullable String dbInstanceIdentifier;
    /**
     * @return ARN for the DB snapshot.
     * 
     */
    private String dbSnapshotArn;
    private @Nullable String dbSnapshotIdentifier;
    /**
     * @return Whether the DB snapshot is encrypted.
     * 
     */
    private Boolean encrypted;
    /**
     * @return Name of the database engine.
     * 
     */
    private String engine;
    /**
     * @return Version of the database engine.
     * 
     */
    private String engineVersion;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private @Nullable Boolean includePublic;
    private @Nullable Boolean includeShared;
    /**
     * @return Provisioned IOPS (I/O operations per second) value of the DB instance at the time of the snapshot.
     * 
     */
    private Integer iops;
    /**
     * @return ARN for the KMS encryption key.
     * 
     */
    private String kmsKeyId;
    /**
     * @return License model information for the restored DB instance.
     * 
     */
    private String licenseModel;
    private @Nullable Boolean mostRecent;
    /**
     * @return Provides the option group name for the DB snapshot.
     * 
     */
    private String optionGroupName;
    private Integer port;
    /**
     * @return Provides the time when the snapshot was taken, in Universal Coordinated Time (UTC).
     * 
     */
    private String snapshotCreateTime;
    private @Nullable String snapshotType;
    /**
     * @return DB snapshot ARN that the DB snapshot was copied from. It only has value in case of cross customer or cross region copy.
     * 
     */
    private String sourceDbSnapshotIdentifier;
    /**
     * @return Region that the DB snapshot was created in or copied from.
     * 
     */
    private String sourceRegion;
    /**
     * @return Status of this DB snapshot.
     * 
     */
    private String status;
    /**
     * @return Storage type associated with DB snapshot.
     * 
     */
    private String storageType;
    private Map<String,String> tags;
    /**
     * @return ID of the VPC associated with the DB snapshot.
     * 
     */
    private String vpcId;

    private GetSnapshotResult() {}
    /**
     * @return Allocated storage size in gigabytes (GB).
     * 
     */
    public Integer allocatedStorage() {
        return this.allocatedStorage;
    }
    /**
     * @return Name of the Availability Zone the DB instance was located in at the time of the DB snapshot.
     * 
     */
    public String availabilityZone() {
        return this.availabilityZone;
    }
    public Optional<String> dbInstanceIdentifier() {
        return Optional.ofNullable(this.dbInstanceIdentifier);
    }
    /**
     * @return ARN for the DB snapshot.
     * 
     */
    public String dbSnapshotArn() {
        return this.dbSnapshotArn;
    }
    public Optional<String> dbSnapshotIdentifier() {
        return Optional.ofNullable(this.dbSnapshotIdentifier);
    }
    /**
     * @return Whether the DB snapshot is encrypted.
     * 
     */
    public Boolean encrypted() {
        return this.encrypted;
    }
    /**
     * @return Name of the database engine.
     * 
     */
    public String engine() {
        return this.engine;
    }
    /**
     * @return Version of the database engine.
     * 
     */
    public String engineVersion() {
        return this.engineVersion;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Optional<Boolean> includePublic() {
        return Optional.ofNullable(this.includePublic);
    }
    public Optional<Boolean> includeShared() {
        return Optional.ofNullable(this.includeShared);
    }
    /**
     * @return Provisioned IOPS (I/O operations per second) value of the DB instance at the time of the snapshot.
     * 
     */
    public Integer iops() {
        return this.iops;
    }
    /**
     * @return ARN for the KMS encryption key.
     * 
     */
    public String kmsKeyId() {
        return this.kmsKeyId;
    }
    /**
     * @return License model information for the restored DB instance.
     * 
     */
    public String licenseModel() {
        return this.licenseModel;
    }
    public Optional<Boolean> mostRecent() {
        return Optional.ofNullable(this.mostRecent);
    }
    /**
     * @return Provides the option group name for the DB snapshot.
     * 
     */
    public String optionGroupName() {
        return this.optionGroupName;
    }
    public Integer port() {
        return this.port;
    }
    /**
     * @return Provides the time when the snapshot was taken, in Universal Coordinated Time (UTC).
     * 
     */
    public String snapshotCreateTime() {
        return this.snapshotCreateTime;
    }
    public Optional<String> snapshotType() {
        return Optional.ofNullable(this.snapshotType);
    }
    /**
     * @return DB snapshot ARN that the DB snapshot was copied from. It only has value in case of cross customer or cross region copy.
     * 
     */
    public String sourceDbSnapshotIdentifier() {
        return this.sourceDbSnapshotIdentifier;
    }
    /**
     * @return Region that the DB snapshot was created in or copied from.
     * 
     */
    public String sourceRegion() {
        return this.sourceRegion;
    }
    /**
     * @return Status of this DB snapshot.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return Storage type associated with DB snapshot.
     * 
     */
    public String storageType() {
        return this.storageType;
    }
    public Map<String,String> tags() {
        return this.tags;
    }
    /**
     * @return ID of the VPC associated with the DB snapshot.
     * 
     */
    public String vpcId() {
        return this.vpcId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSnapshotResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer allocatedStorage;
        private String availabilityZone;
        private @Nullable String dbInstanceIdentifier;
        private String dbSnapshotArn;
        private @Nullable String dbSnapshotIdentifier;
        private Boolean encrypted;
        private String engine;
        private String engineVersion;
        private String id;
        private @Nullable Boolean includePublic;
        private @Nullable Boolean includeShared;
        private Integer iops;
        private String kmsKeyId;
        private String licenseModel;
        private @Nullable Boolean mostRecent;
        private String optionGroupName;
        private Integer port;
        private String snapshotCreateTime;
        private @Nullable String snapshotType;
        private String sourceDbSnapshotIdentifier;
        private String sourceRegion;
        private String status;
        private String storageType;
        private Map<String,String> tags;
        private String vpcId;
        public Builder() {}
        public Builder(GetSnapshotResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allocatedStorage = defaults.allocatedStorage;
    	      this.availabilityZone = defaults.availabilityZone;
    	      this.dbInstanceIdentifier = defaults.dbInstanceIdentifier;
    	      this.dbSnapshotArn = defaults.dbSnapshotArn;
    	      this.dbSnapshotIdentifier = defaults.dbSnapshotIdentifier;
    	      this.encrypted = defaults.encrypted;
    	      this.engine = defaults.engine;
    	      this.engineVersion = defaults.engineVersion;
    	      this.id = defaults.id;
    	      this.includePublic = defaults.includePublic;
    	      this.includeShared = defaults.includeShared;
    	      this.iops = defaults.iops;
    	      this.kmsKeyId = defaults.kmsKeyId;
    	      this.licenseModel = defaults.licenseModel;
    	      this.mostRecent = defaults.mostRecent;
    	      this.optionGroupName = defaults.optionGroupName;
    	      this.port = defaults.port;
    	      this.snapshotCreateTime = defaults.snapshotCreateTime;
    	      this.snapshotType = defaults.snapshotType;
    	      this.sourceDbSnapshotIdentifier = defaults.sourceDbSnapshotIdentifier;
    	      this.sourceRegion = defaults.sourceRegion;
    	      this.status = defaults.status;
    	      this.storageType = defaults.storageType;
    	      this.tags = defaults.tags;
    	      this.vpcId = defaults.vpcId;
        }

        @CustomType.Setter
        public Builder allocatedStorage(Integer allocatedStorage) {
            if (allocatedStorage == null) {
              throw new MissingRequiredPropertyException("GetSnapshotResult", "allocatedStorage");
            }
            this.allocatedStorage = allocatedStorage;
            return this;
        }
        @CustomType.Setter
        public Builder availabilityZone(String availabilityZone) {
            if (availabilityZone == null) {
              throw new MissingRequiredPropertyException("GetSnapshotResult", "availabilityZone");
            }
            this.availabilityZone = availabilityZone;
            return this;
        }
        @CustomType.Setter
        public Builder dbInstanceIdentifier(@Nullable String dbInstanceIdentifier) {

            this.dbInstanceIdentifier = dbInstanceIdentifier;
            return this;
        }
        @CustomType.Setter
        public Builder dbSnapshotArn(String dbSnapshotArn) {
            if (dbSnapshotArn == null) {
              throw new MissingRequiredPropertyException("GetSnapshotResult", "dbSnapshotArn");
            }
            this.dbSnapshotArn = dbSnapshotArn;
            return this;
        }
        @CustomType.Setter
        public Builder dbSnapshotIdentifier(@Nullable String dbSnapshotIdentifier) {

            this.dbSnapshotIdentifier = dbSnapshotIdentifier;
            return this;
        }
        @CustomType.Setter
        public Builder encrypted(Boolean encrypted) {
            if (encrypted == null) {
              throw new MissingRequiredPropertyException("GetSnapshotResult", "encrypted");
            }
            this.encrypted = encrypted;
            return this;
        }
        @CustomType.Setter
        public Builder engine(String engine) {
            if (engine == null) {
              throw new MissingRequiredPropertyException("GetSnapshotResult", "engine");
            }
            this.engine = engine;
            return this;
        }
        @CustomType.Setter
        public Builder engineVersion(String engineVersion) {
            if (engineVersion == null) {
              throw new MissingRequiredPropertyException("GetSnapshotResult", "engineVersion");
            }
            this.engineVersion = engineVersion;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetSnapshotResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder includePublic(@Nullable Boolean includePublic) {

            this.includePublic = includePublic;
            return this;
        }
        @CustomType.Setter
        public Builder includeShared(@Nullable Boolean includeShared) {

            this.includeShared = includeShared;
            return this;
        }
        @CustomType.Setter
        public Builder iops(Integer iops) {
            if (iops == null) {
              throw new MissingRequiredPropertyException("GetSnapshotResult", "iops");
            }
            this.iops = iops;
            return this;
        }
        @CustomType.Setter
        public Builder kmsKeyId(String kmsKeyId) {
            if (kmsKeyId == null) {
              throw new MissingRequiredPropertyException("GetSnapshotResult", "kmsKeyId");
            }
            this.kmsKeyId = kmsKeyId;
            return this;
        }
        @CustomType.Setter
        public Builder licenseModel(String licenseModel) {
            if (licenseModel == null) {
              throw new MissingRequiredPropertyException("GetSnapshotResult", "licenseModel");
            }
            this.licenseModel = licenseModel;
            return this;
        }
        @CustomType.Setter
        public Builder mostRecent(@Nullable Boolean mostRecent) {

            this.mostRecent = mostRecent;
            return this;
        }
        @CustomType.Setter
        public Builder optionGroupName(String optionGroupName) {
            if (optionGroupName == null) {
              throw new MissingRequiredPropertyException("GetSnapshotResult", "optionGroupName");
            }
            this.optionGroupName = optionGroupName;
            return this;
        }
        @CustomType.Setter
        public Builder port(Integer port) {
            if (port == null) {
              throw new MissingRequiredPropertyException("GetSnapshotResult", "port");
            }
            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder snapshotCreateTime(String snapshotCreateTime) {
            if (snapshotCreateTime == null) {
              throw new MissingRequiredPropertyException("GetSnapshotResult", "snapshotCreateTime");
            }
            this.snapshotCreateTime = snapshotCreateTime;
            return this;
        }
        @CustomType.Setter
        public Builder snapshotType(@Nullable String snapshotType) {

            this.snapshotType = snapshotType;
            return this;
        }
        @CustomType.Setter
        public Builder sourceDbSnapshotIdentifier(String sourceDbSnapshotIdentifier) {
            if (sourceDbSnapshotIdentifier == null) {
              throw new MissingRequiredPropertyException("GetSnapshotResult", "sourceDbSnapshotIdentifier");
            }
            this.sourceDbSnapshotIdentifier = sourceDbSnapshotIdentifier;
            return this;
        }
        @CustomType.Setter
        public Builder sourceRegion(String sourceRegion) {
            if (sourceRegion == null) {
              throw new MissingRequiredPropertyException("GetSnapshotResult", "sourceRegion");
            }
            this.sourceRegion = sourceRegion;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetSnapshotResult", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder storageType(String storageType) {
            if (storageType == null) {
              throw new MissingRequiredPropertyException("GetSnapshotResult", "storageType");
            }
            this.storageType = storageType;
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetSnapshotResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder vpcId(String vpcId) {
            if (vpcId == null) {
              throw new MissingRequiredPropertyException("GetSnapshotResult", "vpcId");
            }
            this.vpcId = vpcId;
            return this;
        }
        public GetSnapshotResult build() {
            final var _resultValue = new GetSnapshotResult();
            _resultValue.allocatedStorage = allocatedStorage;
            _resultValue.availabilityZone = availabilityZone;
            _resultValue.dbInstanceIdentifier = dbInstanceIdentifier;
            _resultValue.dbSnapshotArn = dbSnapshotArn;
            _resultValue.dbSnapshotIdentifier = dbSnapshotIdentifier;
            _resultValue.encrypted = encrypted;
            _resultValue.engine = engine;
            _resultValue.engineVersion = engineVersion;
            _resultValue.id = id;
            _resultValue.includePublic = includePublic;
            _resultValue.includeShared = includeShared;
            _resultValue.iops = iops;
            _resultValue.kmsKeyId = kmsKeyId;
            _resultValue.licenseModel = licenseModel;
            _resultValue.mostRecent = mostRecent;
            _resultValue.optionGroupName = optionGroupName;
            _resultValue.port = port;
            _resultValue.snapshotCreateTime = snapshotCreateTime;
            _resultValue.snapshotType = snapshotType;
            _resultValue.sourceDbSnapshotIdentifier = sourceDbSnapshotIdentifier;
            _resultValue.sourceRegion = sourceRegion;
            _resultValue.status = status;
            _resultValue.storageType = storageType;
            _resultValue.tags = tags;
            _resultValue.vpcId = vpcId;
            return _resultValue;
        }
    }
}
