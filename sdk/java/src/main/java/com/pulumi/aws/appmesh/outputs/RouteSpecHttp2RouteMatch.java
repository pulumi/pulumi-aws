// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.appmesh.outputs;

import com.pulumi.aws.appmesh.outputs.RouteSpecHttp2RouteMatchHeader;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class RouteSpecHttp2RouteMatch {
    /**
     * @return Client request headers to match on.
     * 
     */
    private @Nullable List<RouteSpecHttp2RouteMatchHeader> headers;
    /**
     * @return Client request header method to match on. Valid values: `GET`, `HEAD`, `POST`, `PUT`, `DELETE`, `CONNECT`, `OPTIONS`, `TRACE`, `PATCH`.
     * 
     */
    private @Nullable String method;
    /**
     * @return Value sent by the client must begin with the specified characters. Must be between 1 and 255 characters in length.
     * This parameter must always start with /, which by itself matches all requests to the virtual router service name.
     * 
     */
    private String prefix;
    /**
     * @return Client request header scheme to match on. Valid values: `http`, `https`.
     * 
     */
    private @Nullable String scheme;

    private RouteSpecHttp2RouteMatch() {}
    /**
     * @return Client request headers to match on.
     * 
     */
    public List<RouteSpecHttp2RouteMatchHeader> headers() {
        return this.headers == null ? List.of() : this.headers;
    }
    /**
     * @return Client request header method to match on. Valid values: `GET`, `HEAD`, `POST`, `PUT`, `DELETE`, `CONNECT`, `OPTIONS`, `TRACE`, `PATCH`.
     * 
     */
    public Optional<String> method() {
        return Optional.ofNullable(this.method);
    }
    /**
     * @return Value sent by the client must begin with the specified characters. Must be between 1 and 255 characters in length.
     * This parameter must always start with /, which by itself matches all requests to the virtual router service name.
     * 
     */
    public String prefix() {
        return this.prefix;
    }
    /**
     * @return Client request header scheme to match on. Valid values: `http`, `https`.
     * 
     */
    public Optional<String> scheme() {
        return Optional.ofNullable(this.scheme);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RouteSpecHttp2RouteMatch defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<RouteSpecHttp2RouteMatchHeader> headers;
        private @Nullable String method;
        private String prefix;
        private @Nullable String scheme;
        public Builder() {}
        public Builder(RouteSpecHttp2RouteMatch defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.headers = defaults.headers;
    	      this.method = defaults.method;
    	      this.prefix = defaults.prefix;
    	      this.scheme = defaults.scheme;
        }

        @CustomType.Setter
        public Builder headers(@Nullable List<RouteSpecHttp2RouteMatchHeader> headers) {
            this.headers = headers;
            return this;
        }
        public Builder headers(RouteSpecHttp2RouteMatchHeader... headers) {
            return headers(List.of(headers));
        }
        @CustomType.Setter
        public Builder method(@Nullable String method) {
            this.method = method;
            return this;
        }
        @CustomType.Setter
        public Builder prefix(String prefix) {
            this.prefix = Objects.requireNonNull(prefix);
            return this;
        }
        @CustomType.Setter
        public Builder scheme(@Nullable String scheme) {
            this.scheme = scheme;
            return this;
        }
        public RouteSpecHttp2RouteMatch build() {
            final var o = new RouteSpecHttp2RouteMatch();
            o.headers = headers;
            o.method = method;
            o.prefix = prefix;
            o.scheme = scheme;
            return o;
        }
    }
}
