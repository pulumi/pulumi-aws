// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.bedrock;

import com.pulumi.aws.Utilities;
import com.pulumi.aws.bedrock.AgentcoreMemoryStrategyArgs;
import com.pulumi.aws.bedrock.inputs.AgentcoreMemoryStrategyState;
import com.pulumi.aws.bedrock.outputs.AgentcoreMemoryStrategyConfiguration;
import com.pulumi.aws.bedrock.outputs.AgentcoreMemoryStrategyTimeouts;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages an AWS Bedrock AgentCore Memory Strategy. Memory strategies define how the agent processes and organizes information within a memory, such as semantic understanding, summarization, or custom processing logic.
 * 
 * **Important Limitations:**
 * 
 * - Each memory can have a maximum of 6 strategies total
 * - Only one strategy of each built-in type (`SEMANTIC`, `SUMMARIZATION`, `USER_PREFERENCE`) can exist per memory
 * - Multiple `CUSTOM` strategies are allowed (subject to the total limit of 6)
 * 
 * ## Example Usage
 * 
 * ### Semantic Strategy
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.aws.bedrock.AgentcoreMemoryStrategy;
 * import com.pulumi.aws.bedrock.AgentcoreMemoryStrategyArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var semantic = new AgentcoreMemoryStrategy("semantic", AgentcoreMemoryStrategyArgs.builder()
 *             .name("semantic-strategy")
 *             .memoryId(example.id())
 *             .type("SEMANTIC")
 *             .description("Semantic understanding strategy")
 *             .namespaces("default")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ### Summarization Strategy
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.aws.bedrock.AgentcoreMemoryStrategy;
 * import com.pulumi.aws.bedrock.AgentcoreMemoryStrategyArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var summary = new AgentcoreMemoryStrategy("summary", AgentcoreMemoryStrategyArgs.builder()
 *             .name("summary-strategy")
 *             .memoryId(example.id())
 *             .type("SUMMARIZATION")
 *             .description("Text summarization strategy")
 *             .namespaces("{sessionId}")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ### User Preference Strategy
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.aws.bedrock.AgentcoreMemoryStrategy;
 * import com.pulumi.aws.bedrock.AgentcoreMemoryStrategyArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var userPref = new AgentcoreMemoryStrategy("userPref", AgentcoreMemoryStrategyArgs.builder()
 *             .name("user-preference-strategy")
 *             .memoryId(example.id())
 *             .type("USER_PREFERENCE")
 *             .description("User preference tracking strategy")
 *             .namespaces("preferences")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ### Custom Strategy with Semantic Override
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.aws.bedrock.AgentcoreMemoryStrategy;
 * import com.pulumi.aws.bedrock.AgentcoreMemoryStrategyArgs;
 * import com.pulumi.aws.bedrock.inputs.AgentcoreMemoryStrategyConfigurationArgs;
 * import com.pulumi.aws.bedrock.inputs.AgentcoreMemoryStrategyConfigurationConsolidationArgs;
 * import com.pulumi.aws.bedrock.inputs.AgentcoreMemoryStrategyConfigurationExtractionArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var customSemantic = new AgentcoreMemoryStrategy("customSemantic", AgentcoreMemoryStrategyArgs.builder()
 *             .name("custom-semantic-strategy")
 *             .memoryId(example.id())
 *             .memoryExecutionRoleArn(example.memoryExecutionRoleArn())
 *             .type("CUSTOM")
 *             .description("Custom semantic processing strategy")
 *             .namespaces("{sessionId}")
 *             .configuration(AgentcoreMemoryStrategyConfigurationArgs.builder()
 *                 .type("SEMANTIC_OVERRIDE")
 *                 .consolidation(AgentcoreMemoryStrategyConfigurationConsolidationArgs.builder()
 *                     .appendToPrompt("Focus on extracting key semantic relationships and concepts")
 *                     .modelId("anthropic.claude-3-sonnet-20240229-v1:0")
 *                     .build())
 *                 .extraction(AgentcoreMemoryStrategyConfigurationExtractionArgs.builder()
 *                     .appendToPrompt("Extract and categorize semantic information")
 *                     .modelId("anthropic.claude-3-haiku-20240307-v1:0")
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ### Custom Strategy with Summary Override
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.aws.bedrock.AgentcoreMemoryStrategy;
 * import com.pulumi.aws.bedrock.AgentcoreMemoryStrategyArgs;
 * import com.pulumi.aws.bedrock.inputs.AgentcoreMemoryStrategyConfigurationArgs;
 * import com.pulumi.aws.bedrock.inputs.AgentcoreMemoryStrategyConfigurationConsolidationArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var customSummary = new AgentcoreMemoryStrategy("customSummary", AgentcoreMemoryStrategyArgs.builder()
 *             .name("custom-summary-strategy")
 *             .memoryId(example.id())
 *             .type("CUSTOM")
 *             .description("Custom summarization strategy")
 *             .namespaces("summaries")
 *             .configuration(AgentcoreMemoryStrategyConfigurationArgs.builder()
 *                 .type("SUMMARY_OVERRIDE")
 *                 .consolidation(AgentcoreMemoryStrategyConfigurationConsolidationArgs.builder()
 *                     .appendToPrompt("Create concise summaries while preserving key details")
 *                     .modelId("anthropic.claude-3-sonnet-20240229-v1:0")
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ### Custom Strategy with User Preference Override
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.aws.bedrock.AgentcoreMemoryStrategy;
 * import com.pulumi.aws.bedrock.AgentcoreMemoryStrategyArgs;
 * import com.pulumi.aws.bedrock.inputs.AgentcoreMemoryStrategyConfigurationArgs;
 * import com.pulumi.aws.bedrock.inputs.AgentcoreMemoryStrategyConfigurationConsolidationArgs;
 * import com.pulumi.aws.bedrock.inputs.AgentcoreMemoryStrategyConfigurationExtractionArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var customUserPref = new AgentcoreMemoryStrategy("customUserPref", AgentcoreMemoryStrategyArgs.builder()
 *             .name("custom-user-preference-strategy")
 *             .memoryId(example.id())
 *             .type("CUSTOM")
 *             .description("Custom user preference tracking strategy")
 *             .namespaces("user_prefs")
 *             .configuration(AgentcoreMemoryStrategyConfigurationArgs.builder()
 *                 .type("USER_PREFERENCE_OVERRIDE")
 *                 .consolidation(AgentcoreMemoryStrategyConfigurationConsolidationArgs.builder()
 *                     .appendToPrompt("Consolidate user preferences and behavioral patterns")
 *                     .modelId("anthropic.claude-3-sonnet-20240229-v1:0")
 *                     .build())
 *                 .extraction(AgentcoreMemoryStrategyConfigurationExtractionArgs.builder()
 *                     .appendToPrompt("Extract user preferences and interaction patterns")
 *                     .modelId("anthropic.claude-3-haiku-20240307-v1:0")
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ## Import
 * 
 * Using `pulumi import`, import Bedrock AgentCore Memory Strategy using the `memory_id,strategy_id`. For example:
 * 
 * ```sh
 * $ pulumi import aws:bedrock/agentcoreMemoryStrategy:AgentcoreMemoryStrategy example MEMORY1234567890,STRATEGY0987654321
 * ```
 * 
 */
@ResourceType(type="aws:bedrock/agentcoreMemoryStrategy:AgentcoreMemoryStrategy")
public class AgentcoreMemoryStrategy extends com.pulumi.resources.CustomResource {
    /**
     * Custom configuration block. Required when `type` is `CUSTOM`, must be omitted for other types. See `configuration` below.
     * 
     */
    @Export(name="configuration", refs={AgentcoreMemoryStrategyConfiguration.class}, tree="[0]")
    private Output</* @Nullable */ AgentcoreMemoryStrategyConfiguration> configuration;

    /**
     * @return Custom configuration block. Required when `type` is `CUSTOM`, must be omitted for other types. See `configuration` below.
     * 
     */
    public Output<Optional<AgentcoreMemoryStrategyConfiguration>> configuration() {
        return Codegen.optional(this.configuration);
    }
    /**
     * Description of the memory strategy.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return Description of the memory strategy.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    @Export(name="memoryExecutionRoleArn", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> memoryExecutionRoleArn;

    public Output<Optional<String>> memoryExecutionRoleArn() {
        return Codegen.optional(this.memoryExecutionRoleArn);
    }
    /**
     * ID of the memory to associate with this strategy. Changing this forces a new resource.
     * 
     */
    @Export(name="memoryId", refs={String.class}, tree="[0]")
    private Output<String> memoryId;

    /**
     * @return ID of the memory to associate with this strategy. Changing this forces a new resource.
     * 
     */
    public Output<String> memoryId() {
        return this.memoryId;
    }
    @Export(name="memoryStrategyId", refs={String.class}, tree="[0]")
    private Output<String> memoryStrategyId;

    public Output<String> memoryStrategyId() {
        return this.memoryStrategyId;
    }
    /**
     * Name of the memory strategy.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of the memory strategy.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Set of namespace identifiers where this strategy applies. Namespaces help organize and scope memory content.
     * 
     * The following arguments are optional:
     * 
     */
    @Export(name="namespaces", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> namespaces;

    /**
     * @return Set of namespace identifiers where this strategy applies. Namespaces help organize and scope memory content.
     * 
     * The following arguments are optional:
     * 
     */
    public Output<List<String>> namespaces() {
        return this.namespaces;
    }
    /**
     * Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     * 
     */
    @Export(name="region", refs={String.class}, tree="[0]")
    private Output<String> region;

    /**
     * @return Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     * 
     */
    public Output<String> region() {
        return this.region;
    }
    @Export(name="timeouts", refs={AgentcoreMemoryStrategyTimeouts.class}, tree="[0]")
    private Output</* @Nullable */ AgentcoreMemoryStrategyTimeouts> timeouts;

    public Output<Optional<AgentcoreMemoryStrategyTimeouts>> timeouts() {
        return Codegen.optional(this.timeouts);
    }
    /**
     * Type of memory strategy. Valid values: `SEMANTIC`, `SUMMARIZATION`, `USER_PREFERENCE`, `CUSTOM`. Changing this forces a new resource. Note that only one strategy of each built-in type (`SEMANTIC`, `SUMMARIZATION`, `USER_PREFERENCE`) can exist per memory.
     * 
     */
    @Export(name="type", refs={String.class}, tree="[0]")
    private Output<String> type;

    /**
     * @return Type of memory strategy. Valid values: `SEMANTIC`, `SUMMARIZATION`, `USER_PREFERENCE`, `CUSTOM`. Changing this forces a new resource. Note that only one strategy of each built-in type (`SEMANTIC`, `SUMMARIZATION`, `USER_PREFERENCE`) can exist per memory.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public AgentcoreMemoryStrategy(java.lang.String name) {
        this(name, AgentcoreMemoryStrategyArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public AgentcoreMemoryStrategy(java.lang.String name, AgentcoreMemoryStrategyArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public AgentcoreMemoryStrategy(java.lang.String name, AgentcoreMemoryStrategyArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("aws:bedrock/agentcoreMemoryStrategy:AgentcoreMemoryStrategy", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private AgentcoreMemoryStrategy(java.lang.String name, Output<java.lang.String> id, @Nullable AgentcoreMemoryStrategyState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("aws:bedrock/agentcoreMemoryStrategy:AgentcoreMemoryStrategy", name, state, makeResourceOptions(options, id), false);
    }

    private static AgentcoreMemoryStrategyArgs makeArgs(AgentcoreMemoryStrategyArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? AgentcoreMemoryStrategyArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static AgentcoreMemoryStrategy get(java.lang.String name, Output<java.lang.String> id, @Nullable AgentcoreMemoryStrategyState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new AgentcoreMemoryStrategy(name, id, state, options);
    }
}
