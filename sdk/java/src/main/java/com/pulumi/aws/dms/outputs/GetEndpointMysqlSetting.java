// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.dms.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetEndpointMysqlSetting {
    private String afterConnectScript;
    private String authenticationMethod;
    private Boolean cleanSourceMetadataOnMismatch;
    private Integer eventsPollInterval;
    private Integer executeTimeout;
    private Integer maxFileSize;
    private Integer parallelLoadThreads;
    private String serverTimezone;
    private String serviceAccessRoleArn;
    private String targetDbType;

    private GetEndpointMysqlSetting() {}
    public String afterConnectScript() {
        return this.afterConnectScript;
    }
    public String authenticationMethod() {
        return this.authenticationMethod;
    }
    public Boolean cleanSourceMetadataOnMismatch() {
        return this.cleanSourceMetadataOnMismatch;
    }
    public Integer eventsPollInterval() {
        return this.eventsPollInterval;
    }
    public Integer executeTimeout() {
        return this.executeTimeout;
    }
    public Integer maxFileSize() {
        return this.maxFileSize;
    }
    public Integer parallelLoadThreads() {
        return this.parallelLoadThreads;
    }
    public String serverTimezone() {
        return this.serverTimezone;
    }
    public String serviceAccessRoleArn() {
        return this.serviceAccessRoleArn;
    }
    public String targetDbType() {
        return this.targetDbType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetEndpointMysqlSetting defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String afterConnectScript;
        private String authenticationMethod;
        private Boolean cleanSourceMetadataOnMismatch;
        private Integer eventsPollInterval;
        private Integer executeTimeout;
        private Integer maxFileSize;
        private Integer parallelLoadThreads;
        private String serverTimezone;
        private String serviceAccessRoleArn;
        private String targetDbType;
        public Builder() {}
        public Builder(GetEndpointMysqlSetting defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.afterConnectScript = defaults.afterConnectScript;
    	      this.authenticationMethod = defaults.authenticationMethod;
    	      this.cleanSourceMetadataOnMismatch = defaults.cleanSourceMetadataOnMismatch;
    	      this.eventsPollInterval = defaults.eventsPollInterval;
    	      this.executeTimeout = defaults.executeTimeout;
    	      this.maxFileSize = defaults.maxFileSize;
    	      this.parallelLoadThreads = defaults.parallelLoadThreads;
    	      this.serverTimezone = defaults.serverTimezone;
    	      this.serviceAccessRoleArn = defaults.serviceAccessRoleArn;
    	      this.targetDbType = defaults.targetDbType;
        }

        @CustomType.Setter
        public Builder afterConnectScript(String afterConnectScript) {
            if (afterConnectScript == null) {
              throw new MissingRequiredPropertyException("GetEndpointMysqlSetting", "afterConnectScript");
            }
            this.afterConnectScript = afterConnectScript;
            return this;
        }
        @CustomType.Setter
        public Builder authenticationMethod(String authenticationMethod) {
            if (authenticationMethod == null) {
              throw new MissingRequiredPropertyException("GetEndpointMysqlSetting", "authenticationMethod");
            }
            this.authenticationMethod = authenticationMethod;
            return this;
        }
        @CustomType.Setter
        public Builder cleanSourceMetadataOnMismatch(Boolean cleanSourceMetadataOnMismatch) {
            if (cleanSourceMetadataOnMismatch == null) {
              throw new MissingRequiredPropertyException("GetEndpointMysqlSetting", "cleanSourceMetadataOnMismatch");
            }
            this.cleanSourceMetadataOnMismatch = cleanSourceMetadataOnMismatch;
            return this;
        }
        @CustomType.Setter
        public Builder eventsPollInterval(Integer eventsPollInterval) {
            if (eventsPollInterval == null) {
              throw new MissingRequiredPropertyException("GetEndpointMysqlSetting", "eventsPollInterval");
            }
            this.eventsPollInterval = eventsPollInterval;
            return this;
        }
        @CustomType.Setter
        public Builder executeTimeout(Integer executeTimeout) {
            if (executeTimeout == null) {
              throw new MissingRequiredPropertyException("GetEndpointMysqlSetting", "executeTimeout");
            }
            this.executeTimeout = executeTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder maxFileSize(Integer maxFileSize) {
            if (maxFileSize == null) {
              throw new MissingRequiredPropertyException("GetEndpointMysqlSetting", "maxFileSize");
            }
            this.maxFileSize = maxFileSize;
            return this;
        }
        @CustomType.Setter
        public Builder parallelLoadThreads(Integer parallelLoadThreads) {
            if (parallelLoadThreads == null) {
              throw new MissingRequiredPropertyException("GetEndpointMysqlSetting", "parallelLoadThreads");
            }
            this.parallelLoadThreads = parallelLoadThreads;
            return this;
        }
        @CustomType.Setter
        public Builder serverTimezone(String serverTimezone) {
            if (serverTimezone == null) {
              throw new MissingRequiredPropertyException("GetEndpointMysqlSetting", "serverTimezone");
            }
            this.serverTimezone = serverTimezone;
            return this;
        }
        @CustomType.Setter
        public Builder serviceAccessRoleArn(String serviceAccessRoleArn) {
            if (serviceAccessRoleArn == null) {
              throw new MissingRequiredPropertyException("GetEndpointMysqlSetting", "serviceAccessRoleArn");
            }
            this.serviceAccessRoleArn = serviceAccessRoleArn;
            return this;
        }
        @CustomType.Setter
        public Builder targetDbType(String targetDbType) {
            if (targetDbType == null) {
              throw new MissingRequiredPropertyException("GetEndpointMysqlSetting", "targetDbType");
            }
            this.targetDbType = targetDbType;
            return this;
        }
        public GetEndpointMysqlSetting build() {
            final var _resultValue = new GetEndpointMysqlSetting();
            _resultValue.afterConnectScript = afterConnectScript;
            _resultValue.authenticationMethod = authenticationMethod;
            _resultValue.cleanSourceMetadataOnMismatch = cleanSourceMetadataOnMismatch;
            _resultValue.eventsPollInterval = eventsPollInterval;
            _resultValue.executeTimeout = executeTimeout;
            _resultValue.maxFileSize = maxFileSize;
            _resultValue.parallelLoadThreads = parallelLoadThreads;
            _resultValue.serverTimezone = serverTimezone;
            _resultValue.serviceAccessRoleArn = serviceAccessRoleArn;
            _resultValue.targetDbType = targetDbType;
            return _resultValue;
        }
    }
}
