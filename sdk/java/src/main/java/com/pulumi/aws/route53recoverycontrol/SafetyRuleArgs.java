// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.route53recoverycontrol;

import com.pulumi.aws.route53recoverycontrol.inputs.SafetyRuleRuleConfigArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SafetyRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final SafetyRuleArgs Empty = new SafetyRuleArgs();

    @Import(name="assertedControls")
    private @Nullable Output<List<String>> assertedControls;

    public Optional<Output<List<String>>> assertedControls() {
        return Optional.ofNullable(this.assertedControls);
    }

    @Import(name="controlPanelArn", required=true)
    private Output<String> controlPanelArn;

    public Output<String> controlPanelArn() {
        return this.controlPanelArn;
    }

    @Import(name="gatingControls")
    private @Nullable Output<List<String>> gatingControls;

    public Optional<Output<List<String>>> gatingControls() {
        return Optional.ofNullable(this.gatingControls);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="ruleConfig", required=true)
    private Output<SafetyRuleRuleConfigArgs> ruleConfig;

    public Output<SafetyRuleRuleConfigArgs> ruleConfig() {
        return this.ruleConfig;
    }

    @Import(name="targetControls")
    private @Nullable Output<List<String>> targetControls;

    public Optional<Output<List<String>>> targetControls() {
        return Optional.ofNullable(this.targetControls);
    }

    @Import(name="waitPeriodMs", required=true)
    private Output<Integer> waitPeriodMs;

    public Output<Integer> waitPeriodMs() {
        return this.waitPeriodMs;
    }

    private SafetyRuleArgs() {}

    private SafetyRuleArgs(SafetyRuleArgs $) {
        this.assertedControls = $.assertedControls;
        this.controlPanelArn = $.controlPanelArn;
        this.gatingControls = $.gatingControls;
        this.name = $.name;
        this.ruleConfig = $.ruleConfig;
        this.targetControls = $.targetControls;
        this.waitPeriodMs = $.waitPeriodMs;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SafetyRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SafetyRuleArgs $;

        public Builder() {
            $ = new SafetyRuleArgs();
        }

        public Builder(SafetyRuleArgs defaults) {
            $ = new SafetyRuleArgs(Objects.requireNonNull(defaults));
        }

        public Builder assertedControls(@Nullable Output<List<String>> assertedControls) {
            $.assertedControls = assertedControls;
            return this;
        }

        public Builder assertedControls(List<String> assertedControls) {
            return assertedControls(Output.of(assertedControls));
        }

        public Builder assertedControls(String... assertedControls) {
            return assertedControls(List.of(assertedControls));
        }

        public Builder controlPanelArn(Output<String> controlPanelArn) {
            $.controlPanelArn = controlPanelArn;
            return this;
        }

        public Builder controlPanelArn(String controlPanelArn) {
            return controlPanelArn(Output.of(controlPanelArn));
        }

        public Builder gatingControls(@Nullable Output<List<String>> gatingControls) {
            $.gatingControls = gatingControls;
            return this;
        }

        public Builder gatingControls(List<String> gatingControls) {
            return gatingControls(Output.of(gatingControls));
        }

        public Builder gatingControls(String... gatingControls) {
            return gatingControls(List.of(gatingControls));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder ruleConfig(Output<SafetyRuleRuleConfigArgs> ruleConfig) {
            $.ruleConfig = ruleConfig;
            return this;
        }

        public Builder ruleConfig(SafetyRuleRuleConfigArgs ruleConfig) {
            return ruleConfig(Output.of(ruleConfig));
        }

        public Builder targetControls(@Nullable Output<List<String>> targetControls) {
            $.targetControls = targetControls;
            return this;
        }

        public Builder targetControls(List<String> targetControls) {
            return targetControls(Output.of(targetControls));
        }

        public Builder targetControls(String... targetControls) {
            return targetControls(List.of(targetControls));
        }

        public Builder waitPeriodMs(Output<Integer> waitPeriodMs) {
            $.waitPeriodMs = waitPeriodMs;
            return this;
        }

        public Builder waitPeriodMs(Integer waitPeriodMs) {
            return waitPeriodMs(Output.of(waitPeriodMs));
        }

        public SafetyRuleArgs build() {
            $.controlPanelArn = Objects.requireNonNull($.controlPanelArn, "expected parameter 'controlPanelArn' to be non-null");
            $.ruleConfig = Objects.requireNonNull($.ruleConfig, "expected parameter 'ruleConfig' to be non-null");
            $.waitPeriodMs = Objects.requireNonNull($.waitPeriodMs, "expected parameter 'waitPeriodMs' to be non-null");
            return $;
        }
    }

}
