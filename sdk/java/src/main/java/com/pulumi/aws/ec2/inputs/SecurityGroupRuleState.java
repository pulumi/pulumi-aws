// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ec2.inputs;

import com.pulumi.aws.ec2.enums.ProtocolType;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SecurityGroupRuleState extends com.pulumi.resources.ResourceArgs {

    public static final SecurityGroupRuleState Empty = new SecurityGroupRuleState();

    @Import(name="cidrBlocks")
    private @Nullable Output<List<String>> cidrBlocks;

    public Optional<Output<List<String>>> cidrBlocks() {
        return Optional.ofNullable(this.cidrBlocks);
    }

    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="fromPort")
    private @Nullable Output<Integer> fromPort;

    public Optional<Output<Integer>> fromPort() {
        return Optional.ofNullable(this.fromPort);
    }

    @Import(name="ipv6CidrBlocks")
    private @Nullable Output<List<String>> ipv6CidrBlocks;

    public Optional<Output<List<String>>> ipv6CidrBlocks() {
        return Optional.ofNullable(this.ipv6CidrBlocks);
    }

    @Import(name="prefixListIds")
    private @Nullable Output<List<String>> prefixListIds;

    public Optional<Output<List<String>>> prefixListIds() {
        return Optional.ofNullable(this.prefixListIds);
    }

    @Import(name="protocol")
    private @Nullable Output<Either<String,ProtocolType>> protocol;

    public Optional<Output<Either<String,ProtocolType>>> protocol() {
        return Optional.ofNullable(this.protocol);
    }

    @Import(name="securityGroupId")
    private @Nullable Output<String> securityGroupId;

    public Optional<Output<String>> securityGroupId() {
        return Optional.ofNullable(this.securityGroupId);
    }

    @Import(name="securityGroupRuleId")
    private @Nullable Output<String> securityGroupRuleId;

    public Optional<Output<String>> securityGroupRuleId() {
        return Optional.ofNullable(this.securityGroupRuleId);
    }

    @Import(name="self")
    private @Nullable Output<Boolean> self;

    public Optional<Output<Boolean>> self() {
        return Optional.ofNullable(this.self);
    }

    @Import(name="sourceSecurityGroupId")
    private @Nullable Output<String> sourceSecurityGroupId;

    public Optional<Output<String>> sourceSecurityGroupId() {
        return Optional.ofNullable(this.sourceSecurityGroupId);
    }

    @Import(name="toPort")
    private @Nullable Output<Integer> toPort;

    public Optional<Output<Integer>> toPort() {
        return Optional.ofNullable(this.toPort);
    }

    @Import(name="type")
    private @Nullable Output<String> type;

    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private SecurityGroupRuleState() {}

    private SecurityGroupRuleState(SecurityGroupRuleState $) {
        this.cidrBlocks = $.cidrBlocks;
        this.description = $.description;
        this.fromPort = $.fromPort;
        this.ipv6CidrBlocks = $.ipv6CidrBlocks;
        this.prefixListIds = $.prefixListIds;
        this.protocol = $.protocol;
        this.securityGroupId = $.securityGroupId;
        this.securityGroupRuleId = $.securityGroupRuleId;
        this.self = $.self;
        this.sourceSecurityGroupId = $.sourceSecurityGroupId;
        this.toPort = $.toPort;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SecurityGroupRuleState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SecurityGroupRuleState $;

        public Builder() {
            $ = new SecurityGroupRuleState();
        }

        public Builder(SecurityGroupRuleState defaults) {
            $ = new SecurityGroupRuleState(Objects.requireNonNull(defaults));
        }

        public Builder cidrBlocks(@Nullable Output<List<String>> cidrBlocks) {
            $.cidrBlocks = cidrBlocks;
            return this;
        }

        public Builder cidrBlocks(List<String> cidrBlocks) {
            return cidrBlocks(Output.of(cidrBlocks));
        }

        public Builder cidrBlocks(String... cidrBlocks) {
            return cidrBlocks(List.of(cidrBlocks));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder fromPort(@Nullable Output<Integer> fromPort) {
            $.fromPort = fromPort;
            return this;
        }

        public Builder fromPort(Integer fromPort) {
            return fromPort(Output.of(fromPort));
        }

        public Builder ipv6CidrBlocks(@Nullable Output<List<String>> ipv6CidrBlocks) {
            $.ipv6CidrBlocks = ipv6CidrBlocks;
            return this;
        }

        public Builder ipv6CidrBlocks(List<String> ipv6CidrBlocks) {
            return ipv6CidrBlocks(Output.of(ipv6CidrBlocks));
        }

        public Builder ipv6CidrBlocks(String... ipv6CidrBlocks) {
            return ipv6CidrBlocks(List.of(ipv6CidrBlocks));
        }

        public Builder prefixListIds(@Nullable Output<List<String>> prefixListIds) {
            $.prefixListIds = prefixListIds;
            return this;
        }

        public Builder prefixListIds(List<String> prefixListIds) {
            return prefixListIds(Output.of(prefixListIds));
        }

        public Builder prefixListIds(String... prefixListIds) {
            return prefixListIds(List.of(prefixListIds));
        }

        public Builder protocol(@Nullable Output<Either<String,ProtocolType>> protocol) {
            $.protocol = protocol;
            return this;
        }

        public Builder protocol(Either<String,ProtocolType> protocol) {
            return protocol(Output.of(protocol));
        }

        public Builder protocol(String protocol) {
            return protocol(Either.ofLeft(protocol));
        }

        public Builder protocol(ProtocolType protocol) {
            return protocol(Either.ofRight(protocol));
        }

        public Builder securityGroupId(@Nullable Output<String> securityGroupId) {
            $.securityGroupId = securityGroupId;
            return this;
        }

        public Builder securityGroupId(String securityGroupId) {
            return securityGroupId(Output.of(securityGroupId));
        }

        public Builder securityGroupRuleId(@Nullable Output<String> securityGroupRuleId) {
            $.securityGroupRuleId = securityGroupRuleId;
            return this;
        }

        public Builder securityGroupRuleId(String securityGroupRuleId) {
            return securityGroupRuleId(Output.of(securityGroupRuleId));
        }

        public Builder self(@Nullable Output<Boolean> self) {
            $.self = self;
            return this;
        }

        public Builder self(Boolean self) {
            return self(Output.of(self));
        }

        public Builder sourceSecurityGroupId(@Nullable Output<String> sourceSecurityGroupId) {
            $.sourceSecurityGroupId = sourceSecurityGroupId;
            return this;
        }

        public Builder sourceSecurityGroupId(String sourceSecurityGroupId) {
            return sourceSecurityGroupId(Output.of(sourceSecurityGroupId));
        }

        public Builder toPort(@Nullable Output<Integer> toPort) {
            $.toPort = toPort;
            return this;
        }

        public Builder toPort(Integer toPort) {
            return toPort(Output.of(toPort));
        }

        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        public Builder type(String type) {
            return type(Output.of(type));
        }

        public SecurityGroupRuleState build() {
            return $;
        }
    }

}
