// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.codecatalyst.outputs;

import com.pulumi.aws.codecatalyst.outputs.GetDevEnvironmentIde;
import com.pulumi.aws.codecatalyst.outputs.GetDevEnvironmentPersistentStorage;
import com.pulumi.aws.codecatalyst.outputs.GetDevEnvironmentRepository;
import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDevEnvironmentResult {
    /**
     * @return The user-specified alias for the Dev Environment.
     * 
     */
    private @Nullable String alias;
    /**
     * @return The system-generated unique ID of the user who created the Dev Environment.
     * 
     */
    private @Nullable String creatorId;
    private String envId;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Information about the integrated development environment (IDE) configured for a Dev Environment.
     * 
     */
    private List<GetDevEnvironmentIde> ides;
    /**
     * @return The amount of time the Dev Environment will run without any activity detected before stopping, in minutes. Only whole integers are allowed. Dev Environments consume compute minutes when running.
     * 
     */
    private Integer inactivityTimeoutMinutes;
    /**
     * @return The Amazon EC2 instace type to use for the Dev Environment.
     * 
     */
    private String instanceType;
    /**
     * @return The time when the Dev Environment was last updated, in coordinated universal time (UTC) timestamp format as specified in [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339#section-5.6).
     * 
     */
    private String lastUpdatedTime;
    /**
     * @return Information about the amount of storage allocated to the Dev Environment.
     * 
     */
    private List<GetDevEnvironmentPersistentStorage> persistentStorages;
    private String projectName;
    /**
     * @return The source repository that contains the branch to clone into the Dev Environment.
     * 
     */
    private @Nullable List<GetDevEnvironmentRepository> repositories;
    private String spaceName;
    /**
     * @return The current status of the Dev Environment. From: PENDING | RUNNING | STARTING | STOPPING | STOPPED | FAILED | DELETING | DELETED.
     * 
     */
    private String status;
    /**
     * @return The reason for the status.
     * 
     */
    private String statusReason;
    private Map<String,String> tags;

    private GetDevEnvironmentResult() {}
    /**
     * @return The user-specified alias for the Dev Environment.
     * 
     */
    public Optional<String> alias() {
        return Optional.ofNullable(this.alias);
    }
    /**
     * @return The system-generated unique ID of the user who created the Dev Environment.
     * 
     */
    public Optional<String> creatorId() {
        return Optional.ofNullable(this.creatorId);
    }
    public String envId() {
        return this.envId;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Information about the integrated development environment (IDE) configured for a Dev Environment.
     * 
     */
    public List<GetDevEnvironmentIde> ides() {
        return this.ides;
    }
    /**
     * @return The amount of time the Dev Environment will run without any activity detected before stopping, in minutes. Only whole integers are allowed. Dev Environments consume compute minutes when running.
     * 
     */
    public Integer inactivityTimeoutMinutes() {
        return this.inactivityTimeoutMinutes;
    }
    /**
     * @return The Amazon EC2 instace type to use for the Dev Environment.
     * 
     */
    public String instanceType() {
        return this.instanceType;
    }
    /**
     * @return The time when the Dev Environment was last updated, in coordinated universal time (UTC) timestamp format as specified in [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339#section-5.6).
     * 
     */
    public String lastUpdatedTime() {
        return this.lastUpdatedTime;
    }
    /**
     * @return Information about the amount of storage allocated to the Dev Environment.
     * 
     */
    public List<GetDevEnvironmentPersistentStorage> persistentStorages() {
        return this.persistentStorages;
    }
    public String projectName() {
        return this.projectName;
    }
    /**
     * @return The source repository that contains the branch to clone into the Dev Environment.
     * 
     */
    public List<GetDevEnvironmentRepository> repositories() {
        return this.repositories == null ? List.of() : this.repositories;
    }
    public String spaceName() {
        return this.spaceName;
    }
    /**
     * @return The current status of the Dev Environment. From: PENDING | RUNNING | STARTING | STOPPING | STOPPED | FAILED | DELETING | DELETED.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return The reason for the status.
     * 
     */
    public String statusReason() {
        return this.statusReason;
    }
    public Map<String,String> tags() {
        return this.tags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDevEnvironmentResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String alias;
        private @Nullable String creatorId;
        private String envId;
        private String id;
        private List<GetDevEnvironmentIde> ides;
        private Integer inactivityTimeoutMinutes;
        private String instanceType;
        private String lastUpdatedTime;
        private List<GetDevEnvironmentPersistentStorage> persistentStorages;
        private String projectName;
        private @Nullable List<GetDevEnvironmentRepository> repositories;
        private String spaceName;
        private String status;
        private String statusReason;
        private Map<String,String> tags;
        public Builder() {}
        public Builder(GetDevEnvironmentResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.alias = defaults.alias;
    	      this.creatorId = defaults.creatorId;
    	      this.envId = defaults.envId;
    	      this.id = defaults.id;
    	      this.ides = defaults.ides;
    	      this.inactivityTimeoutMinutes = defaults.inactivityTimeoutMinutes;
    	      this.instanceType = defaults.instanceType;
    	      this.lastUpdatedTime = defaults.lastUpdatedTime;
    	      this.persistentStorages = defaults.persistentStorages;
    	      this.projectName = defaults.projectName;
    	      this.repositories = defaults.repositories;
    	      this.spaceName = defaults.spaceName;
    	      this.status = defaults.status;
    	      this.statusReason = defaults.statusReason;
    	      this.tags = defaults.tags;
        }

        @CustomType.Setter
        public Builder alias(@Nullable String alias) {
            this.alias = alias;
            return this;
        }
        @CustomType.Setter
        public Builder creatorId(@Nullable String creatorId) {
            this.creatorId = creatorId;
            return this;
        }
        @CustomType.Setter
        public Builder envId(String envId) {
            this.envId = Objects.requireNonNull(envId);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder ides(List<GetDevEnvironmentIde> ides) {
            this.ides = Objects.requireNonNull(ides);
            return this;
        }
        public Builder ides(GetDevEnvironmentIde... ides) {
            return ides(List.of(ides));
        }
        @CustomType.Setter
        public Builder inactivityTimeoutMinutes(Integer inactivityTimeoutMinutes) {
            this.inactivityTimeoutMinutes = Objects.requireNonNull(inactivityTimeoutMinutes);
            return this;
        }
        @CustomType.Setter
        public Builder instanceType(String instanceType) {
            this.instanceType = Objects.requireNonNull(instanceType);
            return this;
        }
        @CustomType.Setter
        public Builder lastUpdatedTime(String lastUpdatedTime) {
            this.lastUpdatedTime = Objects.requireNonNull(lastUpdatedTime);
            return this;
        }
        @CustomType.Setter
        public Builder persistentStorages(List<GetDevEnvironmentPersistentStorage> persistentStorages) {
            this.persistentStorages = Objects.requireNonNull(persistentStorages);
            return this;
        }
        public Builder persistentStorages(GetDevEnvironmentPersistentStorage... persistentStorages) {
            return persistentStorages(List.of(persistentStorages));
        }
        @CustomType.Setter
        public Builder projectName(String projectName) {
            this.projectName = Objects.requireNonNull(projectName);
            return this;
        }
        @CustomType.Setter
        public Builder repositories(@Nullable List<GetDevEnvironmentRepository> repositories) {
            this.repositories = repositories;
            return this;
        }
        public Builder repositories(GetDevEnvironmentRepository... repositories) {
            return repositories(List.of(repositories));
        }
        @CustomType.Setter
        public Builder spaceName(String spaceName) {
            this.spaceName = Objects.requireNonNull(spaceName);
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        @CustomType.Setter
        public Builder statusReason(String statusReason) {
            this.statusReason = Objects.requireNonNull(statusReason);
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        public GetDevEnvironmentResult build() {
            final var o = new GetDevEnvironmentResult();
            o.alias = alias;
            o.creatorId = creatorId;
            o.envId = envId;
            o.id = id;
            o.ides = ides;
            o.inactivityTimeoutMinutes = inactivityTimeoutMinutes;
            o.instanceType = instanceType;
            o.lastUpdatedTime = lastUpdatedTime;
            o.persistentStorages = persistentStorages;
            o.projectName = projectName;
            o.repositories = repositories;
            o.spaceName = spaceName;
            o.status = status;
            o.statusReason = statusReason;
            o.tags = tags;
            return o;
        }
    }
}
