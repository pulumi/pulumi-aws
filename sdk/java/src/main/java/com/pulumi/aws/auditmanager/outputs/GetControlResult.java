// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.auditmanager.outputs;

import com.pulumi.aws.auditmanager.outputs.GetControlControlMappingSource;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetControlResult {
    private @Nullable String actionPlanInstructions;
    private @Nullable String actionPlanTitle;
    private @Nullable String arn;
    private @Nullable List<GetControlControlMappingSource> controlMappingSources;
    private @Nullable String description;
    private @Nullable String id;
    private String name;
    private @Nullable Map<String,String> tags;
    private @Nullable String testingInformation;
    private String type;

    private GetControlResult() {}
    public Optional<String> actionPlanInstructions() {
        return Optional.ofNullable(this.actionPlanInstructions);
    }
    public Optional<String> actionPlanTitle() {
        return Optional.ofNullable(this.actionPlanTitle);
    }
    public Optional<String> arn() {
        return Optional.ofNullable(this.arn);
    }
    public List<GetControlControlMappingSource> controlMappingSources() {
        return this.controlMappingSources == null ? List.of() : this.controlMappingSources;
    }
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    public String name() {
        return this.name;
    }
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    public Optional<String> testingInformation() {
        return Optional.ofNullable(this.testingInformation);
    }
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetControlResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String actionPlanInstructions;
        private @Nullable String actionPlanTitle;
        private @Nullable String arn;
        private @Nullable List<GetControlControlMappingSource> controlMappingSources;
        private @Nullable String description;
        private @Nullable String id;
        private String name;
        private @Nullable Map<String,String> tags;
        private @Nullable String testingInformation;
        private String type;
        public Builder() {}
        public Builder(GetControlResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.actionPlanInstructions = defaults.actionPlanInstructions;
    	      this.actionPlanTitle = defaults.actionPlanTitle;
    	      this.arn = defaults.arn;
    	      this.controlMappingSources = defaults.controlMappingSources;
    	      this.description = defaults.description;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.tags = defaults.tags;
    	      this.testingInformation = defaults.testingInformation;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder actionPlanInstructions(@Nullable String actionPlanInstructions) {
            this.actionPlanInstructions = actionPlanInstructions;
            return this;
        }
        @CustomType.Setter
        public Builder actionPlanTitle(@Nullable String actionPlanTitle) {
            this.actionPlanTitle = actionPlanTitle;
            return this;
        }
        @CustomType.Setter
        public Builder arn(@Nullable String arn) {
            this.arn = arn;
            return this;
        }
        @CustomType.Setter
        public Builder controlMappingSources(@Nullable List<GetControlControlMappingSource> controlMappingSources) {
            this.controlMappingSources = controlMappingSources;
            return this;
        }
        public Builder controlMappingSources(GetControlControlMappingSource... controlMappingSources) {
            return controlMappingSources(List.of(controlMappingSources));
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder testingInformation(@Nullable String testingInformation) {
            this.testingInformation = testingInformation;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public GetControlResult build() {
            final var o = new GetControlResult();
            o.actionPlanInstructions = actionPlanInstructions;
            o.actionPlanTitle = actionPlanTitle;
            o.arn = arn;
            o.controlMappingSources = controlMappingSources;
            o.description = description;
            o.id = id;
            o.name = name;
            o.tags = tags;
            o.testingInformation = testingInformation;
            o.type = type;
            return o;
        }
    }
}
