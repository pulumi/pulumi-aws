// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.mskconnect.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ConnectorCapacityProvisionedCapacity {
    /**
     * @return The number of microcontroller units (MCUs) allocated to each connector worker. Valid values: `1`, `2`, `4`, `8`. The default value is `1`.
     * 
     */
    private @Nullable Integer mcuCount;
    /**
     * @return The number of workers that are allocated to the connector.
     * 
     */
    private Integer workerCount;

    private ConnectorCapacityProvisionedCapacity() {}
    /**
     * @return The number of microcontroller units (MCUs) allocated to each connector worker. Valid values: `1`, `2`, `4`, `8`. The default value is `1`.
     * 
     */
    public Optional<Integer> mcuCount() {
        return Optional.ofNullable(this.mcuCount);
    }
    /**
     * @return The number of workers that are allocated to the connector.
     * 
     */
    public Integer workerCount() {
        return this.workerCount;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConnectorCapacityProvisionedCapacity defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer mcuCount;
        private Integer workerCount;
        public Builder() {}
        public Builder(ConnectorCapacityProvisionedCapacity defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.mcuCount = defaults.mcuCount;
    	      this.workerCount = defaults.workerCount;
        }

        @CustomType.Setter
        public Builder mcuCount(@Nullable Integer mcuCount) {

            this.mcuCount = mcuCount;
            return this;
        }
        @CustomType.Setter
        public Builder workerCount(Integer workerCount) {
            if (workerCount == null) {
              throw new MissingRequiredPropertyException("ConnectorCapacityProvisionedCapacity", "workerCount");
            }
            this.workerCount = workerCount;
            return this;
        }
        public ConnectorCapacityProvisionedCapacity build() {
            final var _resultValue = new ConnectorCapacityProvisionedCapacity();
            _resultValue.mcuCount = mcuCount;
            _resultValue.workerCount = workerCount;
            return _resultValue;
        }
    }
}
