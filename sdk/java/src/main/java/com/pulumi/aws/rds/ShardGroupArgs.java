// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.rds;

import com.pulumi.aws.rds.inputs.ShardGroupTimeoutsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ShardGroupArgs extends com.pulumi.resources.ResourceArgs {

    public static final ShardGroupArgs Empty = new ShardGroupArgs();

    /**
     * Specifies whether to create standby DB shard groups for the DB shard group. Valid values are:
     * 
     */
    @Import(name="computeRedundancy")
    private @Nullable Output<Integer> computeRedundancy;

    /**
     * @return Specifies whether to create standby DB shard groups for the DB shard group. Valid values are:
     * 
     */
    public Optional<Output<Integer>> computeRedundancy() {
        return Optional.ofNullable(this.computeRedundancy);
    }

    /**
     * The name of the primary DB cluster for the DB shard group.
     * 
     */
    @Import(name="dbClusterIdentifier", required=true)
    private Output<String> dbClusterIdentifier;

    /**
     * @return The name of the primary DB cluster for the DB shard group.
     * 
     */
    public Output<String> dbClusterIdentifier() {
        return this.dbClusterIdentifier;
    }

    /**
     * The name of the DB shard group.
     * 
     */
    @Import(name="dbShardGroupIdentifier", required=true)
    private Output<String> dbShardGroupIdentifier;

    /**
     * @return The name of the DB shard group.
     * 
     */
    public Output<String> dbShardGroupIdentifier() {
        return this.dbShardGroupIdentifier;
    }

    /**
     * The maximum capacity of the DB shard group in Aurora capacity units (ACUs).
     * 
     */
    @Import(name="maxAcu", required=true)
    private Output<Double> maxAcu;

    /**
     * @return The maximum capacity of the DB shard group in Aurora capacity units (ACUs).
     * 
     */
    public Output<Double> maxAcu() {
        return this.maxAcu;
    }

    /**
     * The minimum capacity of the DB shard group in Aurora capacity units (ACUs).
     * 
     */
    @Import(name="minAcu")
    private @Nullable Output<Double> minAcu;

    /**
     * @return The minimum capacity of the DB shard group in Aurora capacity units (ACUs).
     * 
     */
    public Optional<Output<Double>> minAcu() {
        return Optional.ofNullable(this.minAcu);
    }

    /**
     * Indicates whether the DB shard group is publicly accessible.
     * 
     */
    @Import(name="publiclyAccessible")
    private @Nullable Output<Boolean> publiclyAccessible;

    /**
     * @return Indicates whether the DB shard group is publicly accessible.
     * 
     */
    public Optional<Output<Boolean>> publiclyAccessible() {
        return Optional.ofNullable(this.publiclyAccessible);
    }

    /**
     * Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     * For more detailed documentation about each argument, refer to the [AWS official documentation](https://docs.aws.amazon.com/cli/latest/reference/rds/create-shard-group.html).
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     * For more detailed documentation about each argument, refer to the [AWS official documentation](https://docs.aws.amazon.com/cli/latest/reference/rds/create-shard-group.html).
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="timeouts")
    private @Nullable Output<ShardGroupTimeoutsArgs> timeouts;

    public Optional<Output<ShardGroupTimeoutsArgs>> timeouts() {
        return Optional.ofNullable(this.timeouts);
    }

    private ShardGroupArgs() {}

    private ShardGroupArgs(ShardGroupArgs $) {
        this.computeRedundancy = $.computeRedundancy;
        this.dbClusterIdentifier = $.dbClusterIdentifier;
        this.dbShardGroupIdentifier = $.dbShardGroupIdentifier;
        this.maxAcu = $.maxAcu;
        this.minAcu = $.minAcu;
        this.publiclyAccessible = $.publiclyAccessible;
        this.tags = $.tags;
        this.timeouts = $.timeouts;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ShardGroupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ShardGroupArgs $;

        public Builder() {
            $ = new ShardGroupArgs();
        }

        public Builder(ShardGroupArgs defaults) {
            $ = new ShardGroupArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param computeRedundancy Specifies whether to create standby DB shard groups for the DB shard group. Valid values are:
         * 
         * @return builder
         * 
         */
        public Builder computeRedundancy(@Nullable Output<Integer> computeRedundancy) {
            $.computeRedundancy = computeRedundancy;
            return this;
        }

        /**
         * @param computeRedundancy Specifies whether to create standby DB shard groups for the DB shard group. Valid values are:
         * 
         * @return builder
         * 
         */
        public Builder computeRedundancy(Integer computeRedundancy) {
            return computeRedundancy(Output.of(computeRedundancy));
        }

        /**
         * @param dbClusterIdentifier The name of the primary DB cluster for the DB shard group.
         * 
         * @return builder
         * 
         */
        public Builder dbClusterIdentifier(Output<String> dbClusterIdentifier) {
            $.dbClusterIdentifier = dbClusterIdentifier;
            return this;
        }

        /**
         * @param dbClusterIdentifier The name of the primary DB cluster for the DB shard group.
         * 
         * @return builder
         * 
         */
        public Builder dbClusterIdentifier(String dbClusterIdentifier) {
            return dbClusterIdentifier(Output.of(dbClusterIdentifier));
        }

        /**
         * @param dbShardGroupIdentifier The name of the DB shard group.
         * 
         * @return builder
         * 
         */
        public Builder dbShardGroupIdentifier(Output<String> dbShardGroupIdentifier) {
            $.dbShardGroupIdentifier = dbShardGroupIdentifier;
            return this;
        }

        /**
         * @param dbShardGroupIdentifier The name of the DB shard group.
         * 
         * @return builder
         * 
         */
        public Builder dbShardGroupIdentifier(String dbShardGroupIdentifier) {
            return dbShardGroupIdentifier(Output.of(dbShardGroupIdentifier));
        }

        /**
         * @param maxAcu The maximum capacity of the DB shard group in Aurora capacity units (ACUs).
         * 
         * @return builder
         * 
         */
        public Builder maxAcu(Output<Double> maxAcu) {
            $.maxAcu = maxAcu;
            return this;
        }

        /**
         * @param maxAcu The maximum capacity of the DB shard group in Aurora capacity units (ACUs).
         * 
         * @return builder
         * 
         */
        public Builder maxAcu(Double maxAcu) {
            return maxAcu(Output.of(maxAcu));
        }

        /**
         * @param minAcu The minimum capacity of the DB shard group in Aurora capacity units (ACUs).
         * 
         * @return builder
         * 
         */
        public Builder minAcu(@Nullable Output<Double> minAcu) {
            $.minAcu = minAcu;
            return this;
        }

        /**
         * @param minAcu The minimum capacity of the DB shard group in Aurora capacity units (ACUs).
         * 
         * @return builder
         * 
         */
        public Builder minAcu(Double minAcu) {
            return minAcu(Output.of(minAcu));
        }

        /**
         * @param publiclyAccessible Indicates whether the DB shard group is publicly accessible.
         * 
         * @return builder
         * 
         */
        public Builder publiclyAccessible(@Nullable Output<Boolean> publiclyAccessible) {
            $.publiclyAccessible = publiclyAccessible;
            return this;
        }

        /**
         * @param publiclyAccessible Indicates whether the DB shard group is publicly accessible.
         * 
         * @return builder
         * 
         */
        public Builder publiclyAccessible(Boolean publiclyAccessible) {
            return publiclyAccessible(Output.of(publiclyAccessible));
        }

        /**
         * @param tags Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * For more detailed documentation about each argument, refer to the [AWS official documentation](https://docs.aws.amazon.com/cli/latest/reference/rds/create-shard-group.html).
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * For more detailed documentation about each argument, refer to the [AWS official documentation](https://docs.aws.amazon.com/cli/latest/reference/rds/create-shard-group.html).
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder timeouts(@Nullable Output<ShardGroupTimeoutsArgs> timeouts) {
            $.timeouts = timeouts;
            return this;
        }

        public Builder timeouts(ShardGroupTimeoutsArgs timeouts) {
            return timeouts(Output.of(timeouts));
        }

        public ShardGroupArgs build() {
            if ($.dbClusterIdentifier == null) {
                throw new MissingRequiredPropertyException("ShardGroupArgs", "dbClusterIdentifier");
            }
            if ($.dbShardGroupIdentifier == null) {
                throw new MissingRequiredPropertyException("ShardGroupArgs", "dbShardGroupIdentifier");
            }
            if ($.maxAcu == null) {
                throw new MissingRequiredPropertyException("ShardGroupArgs", "maxAcu");
            }
            return $;
        }
    }

}
