// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.finspace.inputs;

import com.pulumi.aws.finspace.inputs.KxClusterAutoScalingConfigurationArgs;
import com.pulumi.aws.finspace.inputs.KxClusterCacheStorageConfigurationArgs;
import com.pulumi.aws.finspace.inputs.KxClusterCapacityConfigurationArgs;
import com.pulumi.aws.finspace.inputs.KxClusterCodeArgs;
import com.pulumi.aws.finspace.inputs.KxClusterDatabaseArgs;
import com.pulumi.aws.finspace.inputs.KxClusterSavedownStorageConfigurationArgs;
import com.pulumi.aws.finspace.inputs.KxClusterVpcConfigurationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class KxClusterState extends com.pulumi.resources.ResourceArgs {

    public static final KxClusterState Empty = new KxClusterState();

    /**
     * Amazon Resource Name (ARN) identifier of the KX cluster.
     * 
     */
    @Import(name="arn")
    private @Nullable Output<String> arn;

    /**
     * @return Amazon Resource Name (ARN) identifier of the KX cluster.
     * 
     */
    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    /**
     * Configuration based on which FinSpace will scale in or scale out nodes in your cluster. See auto_scaling_configuration.
     * 
     */
    @Import(name="autoScalingConfiguration")
    private @Nullable Output<KxClusterAutoScalingConfigurationArgs> autoScalingConfiguration;

    /**
     * @return Configuration based on which FinSpace will scale in or scale out nodes in your cluster. See auto_scaling_configuration.
     * 
     */
    public Optional<Output<KxClusterAutoScalingConfigurationArgs>> autoScalingConfiguration() {
        return Optional.ofNullable(this.autoScalingConfiguration);
    }

    /**
     * The availability zone identifiers for the requested regions. Required when `az_mode` is set to SINGLE.
     * 
     */
    @Import(name="availabilityZoneId")
    private @Nullable Output<String> availabilityZoneId;

    /**
     * @return The availability zone identifiers for the requested regions. Required when `az_mode` is set to SINGLE.
     * 
     */
    public Optional<Output<String>> availabilityZoneId() {
        return Optional.ofNullable(this.availabilityZoneId);
    }

    /**
     * The number of availability zones you want to assign per cluster. This can be one of the following:
     * * SINGLE - Assigns one availability zone per cluster.
     * * MULTI - Assigns all the availability zones per cluster.
     * 
     */
    @Import(name="azMode")
    private @Nullable Output<String> azMode;

    /**
     * @return The number of availability zones you want to assign per cluster. This can be one of the following:
     * * SINGLE - Assigns one availability zone per cluster.
     * * MULTI - Assigns all the availability zones per cluster.
     * 
     */
    public Optional<Output<String>> azMode() {
        return Optional.ofNullable(this.azMode);
    }

    /**
     * Configurations for a read only cache storage associated with a cluster. This cache will be stored as an FSx Lustre that reads from the S3 store. See cache_storage_configuration.
     * 
     */
    @Import(name="cacheStorageConfigurations")
    private @Nullable Output<List<KxClusterCacheStorageConfigurationArgs>> cacheStorageConfigurations;

    /**
     * @return Configurations for a read only cache storage associated with a cluster. This cache will be stored as an FSx Lustre that reads from the S3 store. See cache_storage_configuration.
     * 
     */
    public Optional<Output<List<KxClusterCacheStorageConfigurationArgs>>> cacheStorageConfigurations() {
        return Optional.ofNullable(this.cacheStorageConfigurations);
    }

    /**
     * Structure for the metadata of a cluster. Includes information like the CPUs needed, memory of instances, and number of instances. See capacity_configuration.
     * 
     */
    @Import(name="capacityConfiguration")
    private @Nullable Output<KxClusterCapacityConfigurationArgs> capacityConfiguration;

    /**
     * @return Structure for the metadata of a cluster. Includes information like the CPUs needed, memory of instances, and number of instances. See capacity_configuration.
     * 
     */
    public Optional<Output<KxClusterCapacityConfigurationArgs>> capacityConfiguration() {
        return Optional.ofNullable(this.capacityConfiguration);
    }

    /**
     * Details of the custom code that you want to use inside a cluster when analyzing data. Consists of the S3 source bucket, location, object version, and the relative path from where the custom code is loaded into the cluster. See code.
     * 
     */
    @Import(name="code")
    private @Nullable Output<KxClusterCodeArgs> code;

    /**
     * @return Details of the custom code that you want to use inside a cluster when analyzing data. Consists of the S3 source bucket, location, object version, and the relative path from where the custom code is loaded into the cluster. See code.
     * 
     */
    public Optional<Output<KxClusterCodeArgs>> code() {
        return Optional.ofNullable(this.code);
    }

    /**
     * List of key-value pairs to make available inside the cluster.
     * 
     */
    @Import(name="commandLineArguments")
    private @Nullable Output<Map<String,String>> commandLineArguments;

    /**
     * @return List of key-value pairs to make available inside the cluster.
     * 
     */
    public Optional<Output<Map<String,String>>> commandLineArguments() {
        return Optional.ofNullable(this.commandLineArguments);
    }

    /**
     * Timestamp at which the cluster is created in FinSpace. Value determined as epoch time in seconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000.
     * 
     */
    @Import(name="createdTimestamp")
    private @Nullable Output<String> createdTimestamp;

    /**
     * @return Timestamp at which the cluster is created in FinSpace. Value determined as epoch time in seconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000.
     * 
     */
    public Optional<Output<String>> createdTimestamp() {
        return Optional.ofNullable(this.createdTimestamp);
    }

    /**
     * KX database that will be available for querying. Defined below.
     * 
     */
    @Import(name="databases")
    private @Nullable Output<List<KxClusterDatabaseArgs>> databases;

    /**
     * @return KX database that will be available for querying. Defined below.
     * 
     */
    public Optional<Output<List<KxClusterDatabaseArgs>>> databases() {
        return Optional.ofNullable(this.databases);
    }

    /**
     * Description of the cluster.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the cluster.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Unique identifier for the KX environment.
     * 
     */
    @Import(name="environmentId")
    private @Nullable Output<String> environmentId;

    /**
     * @return Unique identifier for the KX environment.
     * 
     */
    public Optional<Output<String>> environmentId() {
        return Optional.ofNullable(this.environmentId);
    }

    /**
     * An IAM role that defines a set of permissions associated with a cluster. These permissions are assumed when a cluster attempts to access another cluster.
     * 
     */
    @Import(name="executionRole")
    private @Nullable Output<String> executionRole;

    /**
     * @return An IAM role that defines a set of permissions associated with a cluster. These permissions are assumed when a cluster attempts to access another cluster.
     * 
     */
    public Optional<Output<String>> executionRole() {
        return Optional.ofNullable(this.executionRole);
    }

    /**
     * Path to Q program that will be run at launch of a cluster. This is a relative path within .zip file that contains the custom code, which will be loaded on the cluster. It must include the file name itself. For example, somedir/init.q.
     * 
     */
    @Import(name="initializationScript")
    private @Nullable Output<String> initializationScript;

    /**
     * @return Path to Q program that will be run at launch of a cluster. This is a relative path within .zip file that contains the custom code, which will be loaded on the cluster. It must include the file name itself. For example, somedir/init.q.
     * 
     */
    public Optional<Output<String>> initializationScript() {
        return Optional.ofNullable(this.initializationScript);
    }

    /**
     * Last timestamp at which the cluster was updated in FinSpace. Value determined as epoch time in seconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000.
     * 
     */
    @Import(name="lastModifiedTimestamp")
    private @Nullable Output<String> lastModifiedTimestamp;

    /**
     * @return Last timestamp at which the cluster was updated in FinSpace. Value determined as epoch time in seconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000.
     * 
     */
    public Optional<Output<String>> lastModifiedTimestamp() {
        return Optional.ofNullable(this.lastModifiedTimestamp);
    }

    /**
     * Unique name for the cluster that you want to create.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Unique name for the cluster that you want to create.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Version of FinSpace Managed kdb to run.
     * 
     */
    @Import(name="releaseLabel")
    private @Nullable Output<String> releaseLabel;

    /**
     * @return Version of FinSpace Managed kdb to run.
     * 
     */
    public Optional<Output<String>> releaseLabel() {
        return Optional.ofNullable(this.releaseLabel);
    }

    /**
     * Size and type of the temporary storage that is used to hold data during the savedown process. This parameter is required when you choose `type` as RDB. All the data written to this storage space is lost when the cluster node is restarted. See savedown_storage_configuration.
     * 
     */
    @Import(name="savedownStorageConfiguration")
    private @Nullable Output<KxClusterSavedownStorageConfigurationArgs> savedownStorageConfiguration;

    /**
     * @return Size and type of the temporary storage that is used to hold data during the savedown process. This parameter is required when you choose `type` as RDB. All the data written to this storage space is lost when the cluster node is restarted. See savedown_storage_configuration.
     * 
     */
    public Optional<Output<KxClusterSavedownStorageConfigurationArgs>> savedownStorageConfiguration() {
        return Optional.ofNullable(this.savedownStorageConfiguration);
    }

    @Import(name="status")
    private @Nullable Output<String> status;

    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    @Import(name="statusReason")
    private @Nullable Output<String> statusReason;

    public Optional<Output<String>> statusReason() {
        return Optional.ofNullable(this.statusReason);
    }

    /**
     * Key-value mapping of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Key-value mapping of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     */
    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    /**
     * @return Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     */
    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    /**
     * Type of KDB database. The following types are available:
     * * HDB - Historical Database. The data is only accessible with read-only permissions from one of the FinSpace managed KX databases mounted to the cluster.
     * * RDB - Realtime Database. This type of database captures all the data from a ticker plant and stores it in memory until the end of day, after which it writes all of its data to a disk and reloads the HDB. This cluster type requires local storage for temporary storage of data during the savedown process. If you specify this field in your request, you must provide the `savedownStorageConfiguration` parameter.
     * * GATEWAY - A gateway cluster allows you to access data across processes in kdb systems. It allows you to create your own routing logic using the initialization scripts and custom code. This type of cluster does not require a  writable local storage.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Type of KDB database. The following types are available:
     * * HDB - Historical Database. The data is only accessible with read-only permissions from one of the FinSpace managed KX databases mounted to the cluster.
     * * RDB - Realtime Database. This type of database captures all the data from a ticker plant and stores it in memory until the end of day, after which it writes all of its data to a disk and reloads the HDB. This cluster type requires local storage for temporary storage of data during the savedown process. If you specify this field in your request, you must provide the `savedownStorageConfiguration` parameter.
     * * GATEWAY - A gateway cluster allows you to access data across processes in kdb systems. It allows you to create your own routing logic using the initialization scripts and custom code. This type of cluster does not require a  writable local storage.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * Configuration details about the network where the Privatelink endpoint of the cluster resides. See vpc_configuration.
     * 
     * The following arguments are optional:
     * 
     */
    @Import(name="vpcConfiguration")
    private @Nullable Output<KxClusterVpcConfigurationArgs> vpcConfiguration;

    /**
     * @return Configuration details about the network where the Privatelink endpoint of the cluster resides. See vpc_configuration.
     * 
     * The following arguments are optional:
     * 
     */
    public Optional<Output<KxClusterVpcConfigurationArgs>> vpcConfiguration() {
        return Optional.ofNullable(this.vpcConfiguration);
    }

    private KxClusterState() {}

    private KxClusterState(KxClusterState $) {
        this.arn = $.arn;
        this.autoScalingConfiguration = $.autoScalingConfiguration;
        this.availabilityZoneId = $.availabilityZoneId;
        this.azMode = $.azMode;
        this.cacheStorageConfigurations = $.cacheStorageConfigurations;
        this.capacityConfiguration = $.capacityConfiguration;
        this.code = $.code;
        this.commandLineArguments = $.commandLineArguments;
        this.createdTimestamp = $.createdTimestamp;
        this.databases = $.databases;
        this.description = $.description;
        this.environmentId = $.environmentId;
        this.executionRole = $.executionRole;
        this.initializationScript = $.initializationScript;
        this.lastModifiedTimestamp = $.lastModifiedTimestamp;
        this.name = $.name;
        this.releaseLabel = $.releaseLabel;
        this.savedownStorageConfiguration = $.savedownStorageConfiguration;
        this.status = $.status;
        this.statusReason = $.statusReason;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
        this.type = $.type;
        this.vpcConfiguration = $.vpcConfiguration;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(KxClusterState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private KxClusterState $;

        public Builder() {
            $ = new KxClusterState();
        }

        public Builder(KxClusterState defaults) {
            $ = new KxClusterState(Objects.requireNonNull(defaults));
        }

        /**
         * @param arn Amazon Resource Name (ARN) identifier of the KX cluster.
         * 
         * @return builder
         * 
         */
        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        /**
         * @param arn Amazon Resource Name (ARN) identifier of the KX cluster.
         * 
         * @return builder
         * 
         */
        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        /**
         * @param autoScalingConfiguration Configuration based on which FinSpace will scale in or scale out nodes in your cluster. See auto_scaling_configuration.
         * 
         * @return builder
         * 
         */
        public Builder autoScalingConfiguration(@Nullable Output<KxClusterAutoScalingConfigurationArgs> autoScalingConfiguration) {
            $.autoScalingConfiguration = autoScalingConfiguration;
            return this;
        }

        /**
         * @param autoScalingConfiguration Configuration based on which FinSpace will scale in or scale out nodes in your cluster. See auto_scaling_configuration.
         * 
         * @return builder
         * 
         */
        public Builder autoScalingConfiguration(KxClusterAutoScalingConfigurationArgs autoScalingConfiguration) {
            return autoScalingConfiguration(Output.of(autoScalingConfiguration));
        }

        /**
         * @param availabilityZoneId The availability zone identifiers for the requested regions. Required when `az_mode` is set to SINGLE.
         * 
         * @return builder
         * 
         */
        public Builder availabilityZoneId(@Nullable Output<String> availabilityZoneId) {
            $.availabilityZoneId = availabilityZoneId;
            return this;
        }

        /**
         * @param availabilityZoneId The availability zone identifiers for the requested regions. Required when `az_mode` is set to SINGLE.
         * 
         * @return builder
         * 
         */
        public Builder availabilityZoneId(String availabilityZoneId) {
            return availabilityZoneId(Output.of(availabilityZoneId));
        }

        /**
         * @param azMode The number of availability zones you want to assign per cluster. This can be one of the following:
         * * SINGLE - Assigns one availability zone per cluster.
         * * MULTI - Assigns all the availability zones per cluster.
         * 
         * @return builder
         * 
         */
        public Builder azMode(@Nullable Output<String> azMode) {
            $.azMode = azMode;
            return this;
        }

        /**
         * @param azMode The number of availability zones you want to assign per cluster. This can be one of the following:
         * * SINGLE - Assigns one availability zone per cluster.
         * * MULTI - Assigns all the availability zones per cluster.
         * 
         * @return builder
         * 
         */
        public Builder azMode(String azMode) {
            return azMode(Output.of(azMode));
        }

        /**
         * @param cacheStorageConfigurations Configurations for a read only cache storage associated with a cluster. This cache will be stored as an FSx Lustre that reads from the S3 store. See cache_storage_configuration.
         * 
         * @return builder
         * 
         */
        public Builder cacheStorageConfigurations(@Nullable Output<List<KxClusterCacheStorageConfigurationArgs>> cacheStorageConfigurations) {
            $.cacheStorageConfigurations = cacheStorageConfigurations;
            return this;
        }

        /**
         * @param cacheStorageConfigurations Configurations for a read only cache storage associated with a cluster. This cache will be stored as an FSx Lustre that reads from the S3 store. See cache_storage_configuration.
         * 
         * @return builder
         * 
         */
        public Builder cacheStorageConfigurations(List<KxClusterCacheStorageConfigurationArgs> cacheStorageConfigurations) {
            return cacheStorageConfigurations(Output.of(cacheStorageConfigurations));
        }

        /**
         * @param cacheStorageConfigurations Configurations for a read only cache storage associated with a cluster. This cache will be stored as an FSx Lustre that reads from the S3 store. See cache_storage_configuration.
         * 
         * @return builder
         * 
         */
        public Builder cacheStorageConfigurations(KxClusterCacheStorageConfigurationArgs... cacheStorageConfigurations) {
            return cacheStorageConfigurations(List.of(cacheStorageConfigurations));
        }

        /**
         * @param capacityConfiguration Structure for the metadata of a cluster. Includes information like the CPUs needed, memory of instances, and number of instances. See capacity_configuration.
         * 
         * @return builder
         * 
         */
        public Builder capacityConfiguration(@Nullable Output<KxClusterCapacityConfigurationArgs> capacityConfiguration) {
            $.capacityConfiguration = capacityConfiguration;
            return this;
        }

        /**
         * @param capacityConfiguration Structure for the metadata of a cluster. Includes information like the CPUs needed, memory of instances, and number of instances. See capacity_configuration.
         * 
         * @return builder
         * 
         */
        public Builder capacityConfiguration(KxClusterCapacityConfigurationArgs capacityConfiguration) {
            return capacityConfiguration(Output.of(capacityConfiguration));
        }

        /**
         * @param code Details of the custom code that you want to use inside a cluster when analyzing data. Consists of the S3 source bucket, location, object version, and the relative path from where the custom code is loaded into the cluster. See code.
         * 
         * @return builder
         * 
         */
        public Builder code(@Nullable Output<KxClusterCodeArgs> code) {
            $.code = code;
            return this;
        }

        /**
         * @param code Details of the custom code that you want to use inside a cluster when analyzing data. Consists of the S3 source bucket, location, object version, and the relative path from where the custom code is loaded into the cluster. See code.
         * 
         * @return builder
         * 
         */
        public Builder code(KxClusterCodeArgs code) {
            return code(Output.of(code));
        }

        /**
         * @param commandLineArguments List of key-value pairs to make available inside the cluster.
         * 
         * @return builder
         * 
         */
        public Builder commandLineArguments(@Nullable Output<Map<String,String>> commandLineArguments) {
            $.commandLineArguments = commandLineArguments;
            return this;
        }

        /**
         * @param commandLineArguments List of key-value pairs to make available inside the cluster.
         * 
         * @return builder
         * 
         */
        public Builder commandLineArguments(Map<String,String> commandLineArguments) {
            return commandLineArguments(Output.of(commandLineArguments));
        }

        /**
         * @param createdTimestamp Timestamp at which the cluster is created in FinSpace. Value determined as epoch time in seconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000.
         * 
         * @return builder
         * 
         */
        public Builder createdTimestamp(@Nullable Output<String> createdTimestamp) {
            $.createdTimestamp = createdTimestamp;
            return this;
        }

        /**
         * @param createdTimestamp Timestamp at which the cluster is created in FinSpace. Value determined as epoch time in seconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000.
         * 
         * @return builder
         * 
         */
        public Builder createdTimestamp(String createdTimestamp) {
            return createdTimestamp(Output.of(createdTimestamp));
        }

        /**
         * @param databases KX database that will be available for querying. Defined below.
         * 
         * @return builder
         * 
         */
        public Builder databases(@Nullable Output<List<KxClusterDatabaseArgs>> databases) {
            $.databases = databases;
            return this;
        }

        /**
         * @param databases KX database that will be available for querying. Defined below.
         * 
         * @return builder
         * 
         */
        public Builder databases(List<KxClusterDatabaseArgs> databases) {
            return databases(Output.of(databases));
        }

        /**
         * @param databases KX database that will be available for querying. Defined below.
         * 
         * @return builder
         * 
         */
        public Builder databases(KxClusterDatabaseArgs... databases) {
            return databases(List.of(databases));
        }

        /**
         * @param description Description of the cluster.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the cluster.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param environmentId Unique identifier for the KX environment.
         * 
         * @return builder
         * 
         */
        public Builder environmentId(@Nullable Output<String> environmentId) {
            $.environmentId = environmentId;
            return this;
        }

        /**
         * @param environmentId Unique identifier for the KX environment.
         * 
         * @return builder
         * 
         */
        public Builder environmentId(String environmentId) {
            return environmentId(Output.of(environmentId));
        }

        /**
         * @param executionRole An IAM role that defines a set of permissions associated with a cluster. These permissions are assumed when a cluster attempts to access another cluster.
         * 
         * @return builder
         * 
         */
        public Builder executionRole(@Nullable Output<String> executionRole) {
            $.executionRole = executionRole;
            return this;
        }

        /**
         * @param executionRole An IAM role that defines a set of permissions associated with a cluster. These permissions are assumed when a cluster attempts to access another cluster.
         * 
         * @return builder
         * 
         */
        public Builder executionRole(String executionRole) {
            return executionRole(Output.of(executionRole));
        }

        /**
         * @param initializationScript Path to Q program that will be run at launch of a cluster. This is a relative path within .zip file that contains the custom code, which will be loaded on the cluster. It must include the file name itself. For example, somedir/init.q.
         * 
         * @return builder
         * 
         */
        public Builder initializationScript(@Nullable Output<String> initializationScript) {
            $.initializationScript = initializationScript;
            return this;
        }

        /**
         * @param initializationScript Path to Q program that will be run at launch of a cluster. This is a relative path within .zip file that contains the custom code, which will be loaded on the cluster. It must include the file name itself. For example, somedir/init.q.
         * 
         * @return builder
         * 
         */
        public Builder initializationScript(String initializationScript) {
            return initializationScript(Output.of(initializationScript));
        }

        /**
         * @param lastModifiedTimestamp Last timestamp at which the cluster was updated in FinSpace. Value determined as epoch time in seconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000.
         * 
         * @return builder
         * 
         */
        public Builder lastModifiedTimestamp(@Nullable Output<String> lastModifiedTimestamp) {
            $.lastModifiedTimestamp = lastModifiedTimestamp;
            return this;
        }

        /**
         * @param lastModifiedTimestamp Last timestamp at which the cluster was updated in FinSpace. Value determined as epoch time in seconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000.
         * 
         * @return builder
         * 
         */
        public Builder lastModifiedTimestamp(String lastModifiedTimestamp) {
            return lastModifiedTimestamp(Output.of(lastModifiedTimestamp));
        }

        /**
         * @param name Unique name for the cluster that you want to create.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Unique name for the cluster that you want to create.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param releaseLabel Version of FinSpace Managed kdb to run.
         * 
         * @return builder
         * 
         */
        public Builder releaseLabel(@Nullable Output<String> releaseLabel) {
            $.releaseLabel = releaseLabel;
            return this;
        }

        /**
         * @param releaseLabel Version of FinSpace Managed kdb to run.
         * 
         * @return builder
         * 
         */
        public Builder releaseLabel(String releaseLabel) {
            return releaseLabel(Output.of(releaseLabel));
        }

        /**
         * @param savedownStorageConfiguration Size and type of the temporary storage that is used to hold data during the savedown process. This parameter is required when you choose `type` as RDB. All the data written to this storage space is lost when the cluster node is restarted. See savedown_storage_configuration.
         * 
         * @return builder
         * 
         */
        public Builder savedownStorageConfiguration(@Nullable Output<KxClusterSavedownStorageConfigurationArgs> savedownStorageConfiguration) {
            $.savedownStorageConfiguration = savedownStorageConfiguration;
            return this;
        }

        /**
         * @param savedownStorageConfiguration Size and type of the temporary storage that is used to hold data during the savedown process. This parameter is required when you choose `type` as RDB. All the data written to this storage space is lost when the cluster node is restarted. See savedown_storage_configuration.
         * 
         * @return builder
         * 
         */
        public Builder savedownStorageConfiguration(KxClusterSavedownStorageConfigurationArgs savedownStorageConfiguration) {
            return savedownStorageConfiguration(Output.of(savedownStorageConfiguration));
        }

        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        public Builder status(String status) {
            return status(Output.of(status));
        }

        public Builder statusReason(@Nullable Output<String> statusReason) {
            $.statusReason = statusReason;
            return this;
        }

        public Builder statusReason(String statusReason) {
            return statusReason(Output.of(statusReason));
        }

        /**
         * @param tags Key-value mapping of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Key-value mapping of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tagsAll Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
         * 
         * @return builder
         * 
         */
        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        /**
         * @param tagsAll Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
         * 
         * @return builder
         * 
         */
        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        /**
         * @param type Type of KDB database. The following types are available:
         * * HDB - Historical Database. The data is only accessible with read-only permissions from one of the FinSpace managed KX databases mounted to the cluster.
         * * RDB - Realtime Database. This type of database captures all the data from a ticker plant and stores it in memory until the end of day, after which it writes all of its data to a disk and reloads the HDB. This cluster type requires local storage for temporary storage of data during the savedown process. If you specify this field in your request, you must provide the `savedownStorageConfiguration` parameter.
         * * GATEWAY - A gateway cluster allows you to access data across processes in kdb systems. It allows you to create your own routing logic using the initialization scripts and custom code. This type of cluster does not require a  writable local storage.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of KDB database. The following types are available:
         * * HDB - Historical Database. The data is only accessible with read-only permissions from one of the FinSpace managed KX databases mounted to the cluster.
         * * RDB - Realtime Database. This type of database captures all the data from a ticker plant and stores it in memory until the end of day, after which it writes all of its data to a disk and reloads the HDB. This cluster type requires local storage for temporary storage of data during the savedown process. If you specify this field in your request, you must provide the `savedownStorageConfiguration` parameter.
         * * GATEWAY - A gateway cluster allows you to access data across processes in kdb systems. It allows you to create your own routing logic using the initialization scripts and custom code. This type of cluster does not require a  writable local storage.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param vpcConfiguration Configuration details about the network where the Privatelink endpoint of the cluster resides. See vpc_configuration.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder vpcConfiguration(@Nullable Output<KxClusterVpcConfigurationArgs> vpcConfiguration) {
            $.vpcConfiguration = vpcConfiguration;
            return this;
        }

        /**
         * @param vpcConfiguration Configuration details about the network where the Privatelink endpoint of the cluster resides. See vpc_configuration.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder vpcConfiguration(KxClusterVpcConfigurationArgs vpcConfiguration) {
            return vpcConfiguration(Output.of(vpcConfiguration));
        }

        public KxClusterState build() {
            return $;
        }
    }

}
