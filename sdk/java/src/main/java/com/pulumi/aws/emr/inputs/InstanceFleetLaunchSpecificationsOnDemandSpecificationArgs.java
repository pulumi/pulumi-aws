// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.emr.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class InstanceFleetLaunchSpecificationsOnDemandSpecificationArgs extends com.pulumi.resources.ResourceArgs {

    public static final InstanceFleetLaunchSpecificationsOnDemandSpecificationArgs Empty = new InstanceFleetLaunchSpecificationsOnDemandSpecificationArgs();

    /**
     * Specifies one of the following strategies to launch Spot Instance fleets: `price-capacity-optimized`, `capacity-optimized`, `lowest-price`, or `diversified`. For more information on the provisioning strategies, see [Allocation strategies for Spot Instances](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-fleet-allocation-strategy.html).
     * 
     */
    @Import(name="allocationStrategy", required=true)
    private Output<String> allocationStrategy;

    /**
     * @return Specifies one of the following strategies to launch Spot Instance fleets: `price-capacity-optimized`, `capacity-optimized`, `lowest-price`, or `diversified`. For more information on the provisioning strategies, see [Allocation strategies for Spot Instances](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-fleet-allocation-strategy.html).
     * 
     */
    public Output<String> allocationStrategy() {
        return this.allocationStrategy;
    }

    private InstanceFleetLaunchSpecificationsOnDemandSpecificationArgs() {}

    private InstanceFleetLaunchSpecificationsOnDemandSpecificationArgs(InstanceFleetLaunchSpecificationsOnDemandSpecificationArgs $) {
        this.allocationStrategy = $.allocationStrategy;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceFleetLaunchSpecificationsOnDemandSpecificationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceFleetLaunchSpecificationsOnDemandSpecificationArgs $;

        public Builder() {
            $ = new InstanceFleetLaunchSpecificationsOnDemandSpecificationArgs();
        }

        public Builder(InstanceFleetLaunchSpecificationsOnDemandSpecificationArgs defaults) {
            $ = new InstanceFleetLaunchSpecificationsOnDemandSpecificationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allocationStrategy Specifies one of the following strategies to launch Spot Instance fleets: `price-capacity-optimized`, `capacity-optimized`, `lowest-price`, or `diversified`. For more information on the provisioning strategies, see [Allocation strategies for Spot Instances](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-fleet-allocation-strategy.html).
         * 
         * @return builder
         * 
         */
        public Builder allocationStrategy(Output<String> allocationStrategy) {
            $.allocationStrategy = allocationStrategy;
            return this;
        }

        /**
         * @param allocationStrategy Specifies one of the following strategies to launch Spot Instance fleets: `price-capacity-optimized`, `capacity-optimized`, `lowest-price`, or `diversified`. For more information on the provisioning strategies, see [Allocation strategies for Spot Instances](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-fleet-allocation-strategy.html).
         * 
         * @return builder
         * 
         */
        public Builder allocationStrategy(String allocationStrategy) {
            return allocationStrategy(Output.of(allocationStrategy));
        }

        public InstanceFleetLaunchSpecificationsOnDemandSpecificationArgs build() {
            if ($.allocationStrategy == null) {
                throw new MissingRequiredPropertyException("InstanceFleetLaunchSpecificationsOnDemandSpecificationArgs", "allocationStrategy");
            }
            return $;
        }
    }

}
