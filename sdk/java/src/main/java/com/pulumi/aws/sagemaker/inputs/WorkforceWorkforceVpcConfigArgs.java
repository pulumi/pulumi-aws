// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.sagemaker.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WorkforceWorkforceVpcConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final WorkforceWorkforceVpcConfigArgs Empty = new WorkforceWorkforceVpcConfigArgs();

    /**
     * The VPC security group IDs. The security groups must be for the same VPC as specified in the subnet.
     * 
     */
    @Import(name="securityGroupIds")
    private @Nullable Output<List<String>> securityGroupIds;

    /**
     * @return The VPC security group IDs. The security groups must be for the same VPC as specified in the subnet.
     * 
     */
    public Optional<Output<List<String>>> securityGroupIds() {
        return Optional.ofNullable(this.securityGroupIds);
    }

    /**
     * The ID of the subnets in the VPC that you want to connect.
     * 
     */
    @Import(name="subnets")
    private @Nullable Output<List<String>> subnets;

    /**
     * @return The ID of the subnets in the VPC that you want to connect.
     * 
     */
    public Optional<Output<List<String>>> subnets() {
        return Optional.ofNullable(this.subnets);
    }

    @Import(name="vpcEndpointId")
    private @Nullable Output<String> vpcEndpointId;

    public Optional<Output<String>> vpcEndpointId() {
        return Optional.ofNullable(this.vpcEndpointId);
    }

    /**
     * The ID of the VPC that the workforce uses for communication.
     * 
     */
    @Import(name="vpcId")
    private @Nullable Output<String> vpcId;

    /**
     * @return The ID of the VPC that the workforce uses for communication.
     * 
     */
    public Optional<Output<String>> vpcId() {
        return Optional.ofNullable(this.vpcId);
    }

    private WorkforceWorkforceVpcConfigArgs() {}

    private WorkforceWorkforceVpcConfigArgs(WorkforceWorkforceVpcConfigArgs $) {
        this.securityGroupIds = $.securityGroupIds;
        this.subnets = $.subnets;
        this.vpcEndpointId = $.vpcEndpointId;
        this.vpcId = $.vpcId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WorkforceWorkforceVpcConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WorkforceWorkforceVpcConfigArgs $;

        public Builder() {
            $ = new WorkforceWorkforceVpcConfigArgs();
        }

        public Builder(WorkforceWorkforceVpcConfigArgs defaults) {
            $ = new WorkforceWorkforceVpcConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param securityGroupIds The VPC security group IDs. The security groups must be for the same VPC as specified in the subnet.
         * 
         * @return builder
         * 
         */
        public Builder securityGroupIds(@Nullable Output<List<String>> securityGroupIds) {
            $.securityGroupIds = securityGroupIds;
            return this;
        }

        /**
         * @param securityGroupIds The VPC security group IDs. The security groups must be for the same VPC as specified in the subnet.
         * 
         * @return builder
         * 
         */
        public Builder securityGroupIds(List<String> securityGroupIds) {
            return securityGroupIds(Output.of(securityGroupIds));
        }

        /**
         * @param securityGroupIds The VPC security group IDs. The security groups must be for the same VPC as specified in the subnet.
         * 
         * @return builder
         * 
         */
        public Builder securityGroupIds(String... securityGroupIds) {
            return securityGroupIds(List.of(securityGroupIds));
        }

        /**
         * @param subnets The ID of the subnets in the VPC that you want to connect.
         * 
         * @return builder
         * 
         */
        public Builder subnets(@Nullable Output<List<String>> subnets) {
            $.subnets = subnets;
            return this;
        }

        /**
         * @param subnets The ID of the subnets in the VPC that you want to connect.
         * 
         * @return builder
         * 
         */
        public Builder subnets(List<String> subnets) {
            return subnets(Output.of(subnets));
        }

        /**
         * @param subnets The ID of the subnets in the VPC that you want to connect.
         * 
         * @return builder
         * 
         */
        public Builder subnets(String... subnets) {
            return subnets(List.of(subnets));
        }

        public Builder vpcEndpointId(@Nullable Output<String> vpcEndpointId) {
            $.vpcEndpointId = vpcEndpointId;
            return this;
        }

        public Builder vpcEndpointId(String vpcEndpointId) {
            return vpcEndpointId(Output.of(vpcEndpointId));
        }

        /**
         * @param vpcId The ID of the VPC that the workforce uses for communication.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(@Nullable Output<String> vpcId) {
            $.vpcId = vpcId;
            return this;
        }

        /**
         * @param vpcId The ID of the VPC that the workforce uses for communication.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(String vpcId) {
            return vpcId(Output.of(vpcId));
        }

        public WorkforceWorkforceVpcConfigArgs build() {
            return $;
        }
    }

}
