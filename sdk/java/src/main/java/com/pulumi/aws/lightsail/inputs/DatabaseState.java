// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.lightsail.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DatabaseState extends com.pulumi.resources.ResourceArgs {

    public static final DatabaseState Empty = new DatabaseState();

    /**
     * Whether to apply changes immediately. When false, applies changes during the preferred maintenance window. Some changes may cause an outage.
     * 
     */
    @Import(name="applyImmediately")
    private @Nullable Output<Boolean> applyImmediately;

    /**
     * @return Whether to apply changes immediately. When false, applies changes during the preferred maintenance window. Some changes may cause an outage.
     * 
     */
    public Optional<Output<Boolean>> applyImmediately() {
        return Optional.ofNullable(this.applyImmediately);
    }

    /**
     * ARN of the database (matches `id`).
     * 
     */
    @Import(name="arn")
    private @Nullable Output<String> arn;

    /**
     * @return ARN of the database (matches `id`).
     * 
     */
    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    /**
     * Availability Zone in which to create your database. Use the us-east-2a case-sensitive format.
     * 
     */
    @Import(name="availabilityZone")
    private @Nullable Output<String> availabilityZone;

    /**
     * @return Availability Zone in which to create your database. Use the us-east-2a case-sensitive format.
     * 
     */
    public Optional<Output<String>> availabilityZone() {
        return Optional.ofNullable(this.availabilityZone);
    }

    /**
     * Whether to enable automated backup retention for your database. When false, disables automated backup retention for your database. Disabling backup retention deletes all automated database backups. Before disabling this, you may want to create a snapshot of your database.
     * 
     */
    @Import(name="backupRetentionEnabled")
    private @Nullable Output<Boolean> backupRetentionEnabled;

    /**
     * @return Whether to enable automated backup retention for your database. When false, disables automated backup retention for your database. Disabling backup retention deletes all automated database backups. Before disabling this, you may want to create a snapshot of your database.
     * 
     */
    public Optional<Output<Boolean>> backupRetentionEnabled() {
        return Optional.ofNullable(this.backupRetentionEnabled);
    }

    /**
     * Blueprint ID for your database. A blueprint describes the major engine version of a database. You can get a list of database blueprints IDs by using the AWS CLI command: `aws lightsail get-relational-database-blueprints`
     * 
     */
    @Import(name="blueprintId")
    private @Nullable Output<String> blueprintId;

    /**
     * @return Blueprint ID for your database. A blueprint describes the major engine version of a database. You can get a list of database blueprints IDs by using the AWS CLI command: `aws lightsail get-relational-database-blueprints`
     * 
     */
    public Optional<Output<String>> blueprintId() {
        return Optional.ofNullable(this.blueprintId);
    }

    /**
     * Bundle ID for your database. A bundle describes the performance specifications for your database (see list below). You can get a list of database bundle IDs by using the AWS CLI command: `aws lightsail get-relational-database-bundles`.
     * 
     */
    @Import(name="bundleId")
    private @Nullable Output<String> bundleId;

    /**
     * @return Bundle ID for your database. A bundle describes the performance specifications for your database (see list below). You can get a list of database bundle IDs by using the AWS CLI command: `aws lightsail get-relational-database-bundles`.
     * 
     */
    public Optional<Output<String>> bundleId() {
        return Optional.ofNullable(this.bundleId);
    }

    /**
     * Certificate associated with the database.
     * 
     */
    @Import(name="caCertificateIdentifier")
    private @Nullable Output<String> caCertificateIdentifier;

    /**
     * @return Certificate associated with the database.
     * 
     */
    public Optional<Output<String>> caCertificateIdentifier() {
        return Optional.ofNullable(this.caCertificateIdentifier);
    }

    /**
     * Number of vCPUs for the database.
     * 
     */
    @Import(name="cpuCount")
    private @Nullable Output<Integer> cpuCount;

    /**
     * @return Number of vCPUs for the database.
     * 
     */
    public Optional<Output<Integer>> cpuCount() {
        return Optional.ofNullable(this.cpuCount);
    }

    /**
     * Date and time when the database was created.
     * 
     */
    @Import(name="createdAt")
    private @Nullable Output<String> createdAt;

    /**
     * @return Date and time when the database was created.
     * 
     */
    public Optional<Output<String>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    /**
     * Size of the disk for the database.
     * 
     */
    @Import(name="diskSize")
    private @Nullable Output<Double> diskSize;

    /**
     * @return Size of the disk for the database.
     * 
     */
    public Optional<Output<Double>> diskSize() {
        return Optional.ofNullable(this.diskSize);
    }

    /**
     * Database software (for example, MySQL).
     * 
     */
    @Import(name="engine")
    private @Nullable Output<String> engine;

    /**
     * @return Database software (for example, MySQL).
     * 
     */
    public Optional<Output<String>> engine() {
        return Optional.ofNullable(this.engine);
    }

    /**
     * Database engine version (for example, 5.7.23).
     * 
     */
    @Import(name="engineVersion")
    private @Nullable Output<String> engineVersion;

    /**
     * @return Database engine version (for example, 5.7.23).
     * 
     */
    public Optional<Output<String>> engineVersion() {
        return Optional.ofNullable(this.engineVersion);
    }

    /**
     * Name of the database snapshot created if skip final snapshot is false, which is the default value for that parameter.
     * 
     */
    @Import(name="finalSnapshotName")
    private @Nullable Output<String> finalSnapshotName;

    /**
     * @return Name of the database snapshot created if skip final snapshot is false, which is the default value for that parameter.
     * 
     */
    public Optional<Output<String>> finalSnapshotName() {
        return Optional.ofNullable(this.finalSnapshotName);
    }

    /**
     * Name of the master database created when the Lightsail database resource is created.
     * 
     */
    @Import(name="masterDatabaseName")
    private @Nullable Output<String> masterDatabaseName;

    /**
     * @return Name of the master database created when the Lightsail database resource is created.
     * 
     */
    public Optional<Output<String>> masterDatabaseName() {
        return Optional.ofNullable(this.masterDatabaseName);
    }

    /**
     * Master endpoint FQDN for the database.
     * 
     */
    @Import(name="masterEndpointAddress")
    private @Nullable Output<String> masterEndpointAddress;

    /**
     * @return Master endpoint FQDN for the database.
     * 
     */
    public Optional<Output<String>> masterEndpointAddress() {
        return Optional.ofNullable(this.masterEndpointAddress);
    }

    /**
     * Master endpoint network port for the database.
     * 
     */
    @Import(name="masterEndpointPort")
    private @Nullable Output<Integer> masterEndpointPort;

    /**
     * @return Master endpoint network port for the database.
     * 
     */
    public Optional<Output<Integer>> masterEndpointPort() {
        return Optional.ofNullable(this.masterEndpointPort);
    }

    /**
     * Password for the master user of your database. The password can include any printable ASCII character except &#34;/&#34;, &#34;&#34;&#34;, or &#34;{@literal @}&#34;.
     * 
     */
    @Import(name="masterPassword")
    private @Nullable Output<String> masterPassword;

    /**
     * @return Password for the master user of your database. The password can include any printable ASCII character except &#34;/&#34;, &#34;&#34;&#34;, or &#34;{@literal @}&#34;.
     * 
     */
    public Optional<Output<String>> masterPassword() {
        return Optional.ofNullable(this.masterPassword);
    }

    /**
     * Master user name for your database.
     * 
     */
    @Import(name="masterUsername")
    private @Nullable Output<String> masterUsername;

    /**
     * @return Master user name for your database.
     * 
     */
    public Optional<Output<String>> masterUsername() {
        return Optional.ofNullable(this.masterUsername);
    }

    /**
     * Daily time range during which automated backups are created for your database if automated backups are enabled. Must be in the hh24:mi-hh24:mi format. Example: `16:00-16:30`. Specified in Coordinated Universal Time (UTC).
     * 
     */
    @Import(name="preferredBackupWindow")
    private @Nullable Output<String> preferredBackupWindow;

    /**
     * @return Daily time range during which automated backups are created for your database if automated backups are enabled. Must be in the hh24:mi-hh24:mi format. Example: `16:00-16:30`. Specified in Coordinated Universal Time (UTC).
     * 
     */
    public Optional<Output<String>> preferredBackupWindow() {
        return Optional.ofNullable(this.preferredBackupWindow);
    }

    /**
     * Weekly time range during which system maintenance can occur on your database. Must be in the ddd:hh24:mi-ddd:hh24:mi format. Specified in Coordinated Universal Time (UTC). Example: `Tue:17:00-Tue:17:30`
     * 
     */
    @Import(name="preferredMaintenanceWindow")
    private @Nullable Output<String> preferredMaintenanceWindow;

    /**
     * @return Weekly time range during which system maintenance can occur on your database. Must be in the ddd:hh24:mi-ddd:hh24:mi format. Specified in Coordinated Universal Time (UTC). Example: `Tue:17:00-Tue:17:30`
     * 
     */
    public Optional<Output<String>> preferredMaintenanceWindow() {
        return Optional.ofNullable(this.preferredMaintenanceWindow);
    }

    /**
     * Whether the database is accessible to resources outside of your Lightsail account. A value of true specifies a database that is available to resources outside of your Lightsail account. A value of false specifies a database that is available only to your Lightsail resources in the same region as your database.
     * 
     */
    @Import(name="publiclyAccessible")
    private @Nullable Output<Boolean> publiclyAccessible;

    /**
     * @return Whether the database is accessible to resources outside of your Lightsail account. A value of true specifies a database that is available to resources outside of your Lightsail account. A value of false specifies a database that is available only to your Lightsail resources in the same region as your database.
     * 
     */
    public Optional<Output<Boolean>> publiclyAccessible() {
        return Optional.ofNullable(this.publiclyAccessible);
    }

    /**
     * Amount of RAM in GB for the database.
     * 
     */
    @Import(name="ramSize")
    private @Nullable Output<Double> ramSize;

    /**
     * @return Amount of RAM in GB for the database.
     * 
     */
    public Optional<Output<Double>> ramSize() {
        return Optional.ofNullable(this.ramSize);
    }

    /**
     * Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * Name to use for your Lightsail database resource. Names be unique within each AWS Region in your Lightsail account.
     * 
     * The following arguments are optional:
     * 
     */
    @Import(name="relationalDatabaseName")
    private @Nullable Output<String> relationalDatabaseName;

    /**
     * @return Name to use for your Lightsail database resource. Names be unique within each AWS Region in your Lightsail account.
     * 
     * The following arguments are optional:
     * 
     */
    public Optional<Output<String>> relationalDatabaseName() {
        return Optional.ofNullable(this.relationalDatabaseName);
    }

    /**
     * Secondary Availability Zone of a high availability database. The secondary database is used for failover support of a high availability database.
     * 
     */
    @Import(name="secondaryAvailabilityZone")
    private @Nullable Output<String> secondaryAvailabilityZone;

    /**
     * @return Secondary Availability Zone of a high availability database. The secondary database is used for failover support of a high availability database.
     * 
     */
    public Optional<Output<String>> secondaryAvailabilityZone() {
        return Optional.ofNullable(this.secondaryAvailabilityZone);
    }

    /**
     * Whether a final database snapshot is created before your database is deleted. If true is specified, no database snapshot is created. If false is specified, a database snapshot is created before your database is deleted. You must specify the final relational database snapshot name parameter if the skip final snapshot parameter is false.
     * 
     */
    @Import(name="skipFinalSnapshot")
    private @Nullable Output<Boolean> skipFinalSnapshot;

    /**
     * @return Whether a final database snapshot is created before your database is deleted. If true is specified, no database snapshot is created. If false is specified, a database snapshot is created before your database is deleted. You must specify the final relational database snapshot name parameter if the skip final snapshot parameter is false.
     * 
     */
    public Optional<Output<Boolean>> skipFinalSnapshot() {
        return Optional.ofNullable(this.skipFinalSnapshot);
    }

    /**
     * Support code for the database. Include this code in your email to support when you have questions about a database in Lightsail. This code enables our support team to look up your Lightsail information more easily.
     * 
     */
    @Import(name="supportCode")
    private @Nullable Output<String> supportCode;

    /**
     * @return Support code for the database. Include this code in your email to support when you have questions about a database in Lightsail. This code enables our support team to look up your Lightsail information more easily.
     * 
     */
    public Optional<Output<String>> supportCode() {
        return Optional.ofNullable(this.supportCode);
    }

    /**
     * Map of tags to assign to the resource. To create a key-only tag, use an empty string as the value. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Map of tags to assign to the resource. To create a key-only tag, use an empty string as the value. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     */
    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    /**
     * @return Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     */
    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    private DatabaseState() {}

    private DatabaseState(DatabaseState $) {
        this.applyImmediately = $.applyImmediately;
        this.arn = $.arn;
        this.availabilityZone = $.availabilityZone;
        this.backupRetentionEnabled = $.backupRetentionEnabled;
        this.blueprintId = $.blueprintId;
        this.bundleId = $.bundleId;
        this.caCertificateIdentifier = $.caCertificateIdentifier;
        this.cpuCount = $.cpuCount;
        this.createdAt = $.createdAt;
        this.diskSize = $.diskSize;
        this.engine = $.engine;
        this.engineVersion = $.engineVersion;
        this.finalSnapshotName = $.finalSnapshotName;
        this.masterDatabaseName = $.masterDatabaseName;
        this.masterEndpointAddress = $.masterEndpointAddress;
        this.masterEndpointPort = $.masterEndpointPort;
        this.masterPassword = $.masterPassword;
        this.masterUsername = $.masterUsername;
        this.preferredBackupWindow = $.preferredBackupWindow;
        this.preferredMaintenanceWindow = $.preferredMaintenanceWindow;
        this.publiclyAccessible = $.publiclyAccessible;
        this.ramSize = $.ramSize;
        this.region = $.region;
        this.relationalDatabaseName = $.relationalDatabaseName;
        this.secondaryAvailabilityZone = $.secondaryAvailabilityZone;
        this.skipFinalSnapshot = $.skipFinalSnapshot;
        this.supportCode = $.supportCode;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatabaseState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatabaseState $;

        public Builder() {
            $ = new DatabaseState();
        }

        public Builder(DatabaseState defaults) {
            $ = new DatabaseState(Objects.requireNonNull(defaults));
        }

        /**
         * @param applyImmediately Whether to apply changes immediately. When false, applies changes during the preferred maintenance window. Some changes may cause an outage.
         * 
         * @return builder
         * 
         */
        public Builder applyImmediately(@Nullable Output<Boolean> applyImmediately) {
            $.applyImmediately = applyImmediately;
            return this;
        }

        /**
         * @param applyImmediately Whether to apply changes immediately. When false, applies changes during the preferred maintenance window. Some changes may cause an outage.
         * 
         * @return builder
         * 
         */
        public Builder applyImmediately(Boolean applyImmediately) {
            return applyImmediately(Output.of(applyImmediately));
        }

        /**
         * @param arn ARN of the database (matches `id`).
         * 
         * @return builder
         * 
         */
        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        /**
         * @param arn ARN of the database (matches `id`).
         * 
         * @return builder
         * 
         */
        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        /**
         * @param availabilityZone Availability Zone in which to create your database. Use the us-east-2a case-sensitive format.
         * 
         * @return builder
         * 
         */
        public Builder availabilityZone(@Nullable Output<String> availabilityZone) {
            $.availabilityZone = availabilityZone;
            return this;
        }

        /**
         * @param availabilityZone Availability Zone in which to create your database. Use the us-east-2a case-sensitive format.
         * 
         * @return builder
         * 
         */
        public Builder availabilityZone(String availabilityZone) {
            return availabilityZone(Output.of(availabilityZone));
        }

        /**
         * @param backupRetentionEnabled Whether to enable automated backup retention for your database. When false, disables automated backup retention for your database. Disabling backup retention deletes all automated database backups. Before disabling this, you may want to create a snapshot of your database.
         * 
         * @return builder
         * 
         */
        public Builder backupRetentionEnabled(@Nullable Output<Boolean> backupRetentionEnabled) {
            $.backupRetentionEnabled = backupRetentionEnabled;
            return this;
        }

        /**
         * @param backupRetentionEnabled Whether to enable automated backup retention for your database. When false, disables automated backup retention for your database. Disabling backup retention deletes all automated database backups. Before disabling this, you may want to create a snapshot of your database.
         * 
         * @return builder
         * 
         */
        public Builder backupRetentionEnabled(Boolean backupRetentionEnabled) {
            return backupRetentionEnabled(Output.of(backupRetentionEnabled));
        }

        /**
         * @param blueprintId Blueprint ID for your database. A blueprint describes the major engine version of a database. You can get a list of database blueprints IDs by using the AWS CLI command: `aws lightsail get-relational-database-blueprints`
         * 
         * @return builder
         * 
         */
        public Builder blueprintId(@Nullable Output<String> blueprintId) {
            $.blueprintId = blueprintId;
            return this;
        }

        /**
         * @param blueprintId Blueprint ID for your database. A blueprint describes the major engine version of a database. You can get a list of database blueprints IDs by using the AWS CLI command: `aws lightsail get-relational-database-blueprints`
         * 
         * @return builder
         * 
         */
        public Builder blueprintId(String blueprintId) {
            return blueprintId(Output.of(blueprintId));
        }

        /**
         * @param bundleId Bundle ID for your database. A bundle describes the performance specifications for your database (see list below). You can get a list of database bundle IDs by using the AWS CLI command: `aws lightsail get-relational-database-bundles`.
         * 
         * @return builder
         * 
         */
        public Builder bundleId(@Nullable Output<String> bundleId) {
            $.bundleId = bundleId;
            return this;
        }

        /**
         * @param bundleId Bundle ID for your database. A bundle describes the performance specifications for your database (see list below). You can get a list of database bundle IDs by using the AWS CLI command: `aws lightsail get-relational-database-bundles`.
         * 
         * @return builder
         * 
         */
        public Builder bundleId(String bundleId) {
            return bundleId(Output.of(bundleId));
        }

        /**
         * @param caCertificateIdentifier Certificate associated with the database.
         * 
         * @return builder
         * 
         */
        public Builder caCertificateIdentifier(@Nullable Output<String> caCertificateIdentifier) {
            $.caCertificateIdentifier = caCertificateIdentifier;
            return this;
        }

        /**
         * @param caCertificateIdentifier Certificate associated with the database.
         * 
         * @return builder
         * 
         */
        public Builder caCertificateIdentifier(String caCertificateIdentifier) {
            return caCertificateIdentifier(Output.of(caCertificateIdentifier));
        }

        /**
         * @param cpuCount Number of vCPUs for the database.
         * 
         * @return builder
         * 
         */
        public Builder cpuCount(@Nullable Output<Integer> cpuCount) {
            $.cpuCount = cpuCount;
            return this;
        }

        /**
         * @param cpuCount Number of vCPUs for the database.
         * 
         * @return builder
         * 
         */
        public Builder cpuCount(Integer cpuCount) {
            return cpuCount(Output.of(cpuCount));
        }

        /**
         * @param createdAt Date and time when the database was created.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(@Nullable Output<String> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        /**
         * @param createdAt Date and time when the database was created.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(String createdAt) {
            return createdAt(Output.of(createdAt));
        }

        /**
         * @param diskSize Size of the disk for the database.
         * 
         * @return builder
         * 
         */
        public Builder diskSize(@Nullable Output<Double> diskSize) {
            $.diskSize = diskSize;
            return this;
        }

        /**
         * @param diskSize Size of the disk for the database.
         * 
         * @return builder
         * 
         */
        public Builder diskSize(Double diskSize) {
            return diskSize(Output.of(diskSize));
        }

        /**
         * @param engine Database software (for example, MySQL).
         * 
         * @return builder
         * 
         */
        public Builder engine(@Nullable Output<String> engine) {
            $.engine = engine;
            return this;
        }

        /**
         * @param engine Database software (for example, MySQL).
         * 
         * @return builder
         * 
         */
        public Builder engine(String engine) {
            return engine(Output.of(engine));
        }

        /**
         * @param engineVersion Database engine version (for example, 5.7.23).
         * 
         * @return builder
         * 
         */
        public Builder engineVersion(@Nullable Output<String> engineVersion) {
            $.engineVersion = engineVersion;
            return this;
        }

        /**
         * @param engineVersion Database engine version (for example, 5.7.23).
         * 
         * @return builder
         * 
         */
        public Builder engineVersion(String engineVersion) {
            return engineVersion(Output.of(engineVersion));
        }

        /**
         * @param finalSnapshotName Name of the database snapshot created if skip final snapshot is false, which is the default value for that parameter.
         * 
         * @return builder
         * 
         */
        public Builder finalSnapshotName(@Nullable Output<String> finalSnapshotName) {
            $.finalSnapshotName = finalSnapshotName;
            return this;
        }

        /**
         * @param finalSnapshotName Name of the database snapshot created if skip final snapshot is false, which is the default value for that parameter.
         * 
         * @return builder
         * 
         */
        public Builder finalSnapshotName(String finalSnapshotName) {
            return finalSnapshotName(Output.of(finalSnapshotName));
        }

        /**
         * @param masterDatabaseName Name of the master database created when the Lightsail database resource is created.
         * 
         * @return builder
         * 
         */
        public Builder masterDatabaseName(@Nullable Output<String> masterDatabaseName) {
            $.masterDatabaseName = masterDatabaseName;
            return this;
        }

        /**
         * @param masterDatabaseName Name of the master database created when the Lightsail database resource is created.
         * 
         * @return builder
         * 
         */
        public Builder masterDatabaseName(String masterDatabaseName) {
            return masterDatabaseName(Output.of(masterDatabaseName));
        }

        /**
         * @param masterEndpointAddress Master endpoint FQDN for the database.
         * 
         * @return builder
         * 
         */
        public Builder masterEndpointAddress(@Nullable Output<String> masterEndpointAddress) {
            $.masterEndpointAddress = masterEndpointAddress;
            return this;
        }

        /**
         * @param masterEndpointAddress Master endpoint FQDN for the database.
         * 
         * @return builder
         * 
         */
        public Builder masterEndpointAddress(String masterEndpointAddress) {
            return masterEndpointAddress(Output.of(masterEndpointAddress));
        }

        /**
         * @param masterEndpointPort Master endpoint network port for the database.
         * 
         * @return builder
         * 
         */
        public Builder masterEndpointPort(@Nullable Output<Integer> masterEndpointPort) {
            $.masterEndpointPort = masterEndpointPort;
            return this;
        }

        /**
         * @param masterEndpointPort Master endpoint network port for the database.
         * 
         * @return builder
         * 
         */
        public Builder masterEndpointPort(Integer masterEndpointPort) {
            return masterEndpointPort(Output.of(masterEndpointPort));
        }

        /**
         * @param masterPassword Password for the master user of your database. The password can include any printable ASCII character except &#34;/&#34;, &#34;&#34;&#34;, or &#34;{@literal @}&#34;.
         * 
         * @return builder
         * 
         */
        public Builder masterPassword(@Nullable Output<String> masterPassword) {
            $.masterPassword = masterPassword;
            return this;
        }

        /**
         * @param masterPassword Password for the master user of your database. The password can include any printable ASCII character except &#34;/&#34;, &#34;&#34;&#34;, or &#34;{@literal @}&#34;.
         * 
         * @return builder
         * 
         */
        public Builder masterPassword(String masterPassword) {
            return masterPassword(Output.of(masterPassword));
        }

        /**
         * @param masterUsername Master user name for your database.
         * 
         * @return builder
         * 
         */
        public Builder masterUsername(@Nullable Output<String> masterUsername) {
            $.masterUsername = masterUsername;
            return this;
        }

        /**
         * @param masterUsername Master user name for your database.
         * 
         * @return builder
         * 
         */
        public Builder masterUsername(String masterUsername) {
            return masterUsername(Output.of(masterUsername));
        }

        /**
         * @param preferredBackupWindow Daily time range during which automated backups are created for your database if automated backups are enabled. Must be in the hh24:mi-hh24:mi format. Example: `16:00-16:30`. Specified in Coordinated Universal Time (UTC).
         * 
         * @return builder
         * 
         */
        public Builder preferredBackupWindow(@Nullable Output<String> preferredBackupWindow) {
            $.preferredBackupWindow = preferredBackupWindow;
            return this;
        }

        /**
         * @param preferredBackupWindow Daily time range during which automated backups are created for your database if automated backups are enabled. Must be in the hh24:mi-hh24:mi format. Example: `16:00-16:30`. Specified in Coordinated Universal Time (UTC).
         * 
         * @return builder
         * 
         */
        public Builder preferredBackupWindow(String preferredBackupWindow) {
            return preferredBackupWindow(Output.of(preferredBackupWindow));
        }

        /**
         * @param preferredMaintenanceWindow Weekly time range during which system maintenance can occur on your database. Must be in the ddd:hh24:mi-ddd:hh24:mi format. Specified in Coordinated Universal Time (UTC). Example: `Tue:17:00-Tue:17:30`
         * 
         * @return builder
         * 
         */
        public Builder preferredMaintenanceWindow(@Nullable Output<String> preferredMaintenanceWindow) {
            $.preferredMaintenanceWindow = preferredMaintenanceWindow;
            return this;
        }

        /**
         * @param preferredMaintenanceWindow Weekly time range during which system maintenance can occur on your database. Must be in the ddd:hh24:mi-ddd:hh24:mi format. Specified in Coordinated Universal Time (UTC). Example: `Tue:17:00-Tue:17:30`
         * 
         * @return builder
         * 
         */
        public Builder preferredMaintenanceWindow(String preferredMaintenanceWindow) {
            return preferredMaintenanceWindow(Output.of(preferredMaintenanceWindow));
        }

        /**
         * @param publiclyAccessible Whether the database is accessible to resources outside of your Lightsail account. A value of true specifies a database that is available to resources outside of your Lightsail account. A value of false specifies a database that is available only to your Lightsail resources in the same region as your database.
         * 
         * @return builder
         * 
         */
        public Builder publiclyAccessible(@Nullable Output<Boolean> publiclyAccessible) {
            $.publiclyAccessible = publiclyAccessible;
            return this;
        }

        /**
         * @param publiclyAccessible Whether the database is accessible to resources outside of your Lightsail account. A value of true specifies a database that is available to resources outside of your Lightsail account. A value of false specifies a database that is available only to your Lightsail resources in the same region as your database.
         * 
         * @return builder
         * 
         */
        public Builder publiclyAccessible(Boolean publiclyAccessible) {
            return publiclyAccessible(Output.of(publiclyAccessible));
        }

        /**
         * @param ramSize Amount of RAM in GB for the database.
         * 
         * @return builder
         * 
         */
        public Builder ramSize(@Nullable Output<Double> ramSize) {
            $.ramSize = ramSize;
            return this;
        }

        /**
         * @param ramSize Amount of RAM in GB for the database.
         * 
         * @return builder
         * 
         */
        public Builder ramSize(Double ramSize) {
            return ramSize(Output.of(ramSize));
        }

        /**
         * @param region Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param relationalDatabaseName Name to use for your Lightsail database resource. Names be unique within each AWS Region in your Lightsail account.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder relationalDatabaseName(@Nullable Output<String> relationalDatabaseName) {
            $.relationalDatabaseName = relationalDatabaseName;
            return this;
        }

        /**
         * @param relationalDatabaseName Name to use for your Lightsail database resource. Names be unique within each AWS Region in your Lightsail account.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder relationalDatabaseName(String relationalDatabaseName) {
            return relationalDatabaseName(Output.of(relationalDatabaseName));
        }

        /**
         * @param secondaryAvailabilityZone Secondary Availability Zone of a high availability database. The secondary database is used for failover support of a high availability database.
         * 
         * @return builder
         * 
         */
        public Builder secondaryAvailabilityZone(@Nullable Output<String> secondaryAvailabilityZone) {
            $.secondaryAvailabilityZone = secondaryAvailabilityZone;
            return this;
        }

        /**
         * @param secondaryAvailabilityZone Secondary Availability Zone of a high availability database. The secondary database is used for failover support of a high availability database.
         * 
         * @return builder
         * 
         */
        public Builder secondaryAvailabilityZone(String secondaryAvailabilityZone) {
            return secondaryAvailabilityZone(Output.of(secondaryAvailabilityZone));
        }

        /**
         * @param skipFinalSnapshot Whether a final database snapshot is created before your database is deleted. If true is specified, no database snapshot is created. If false is specified, a database snapshot is created before your database is deleted. You must specify the final relational database snapshot name parameter if the skip final snapshot parameter is false.
         * 
         * @return builder
         * 
         */
        public Builder skipFinalSnapshot(@Nullable Output<Boolean> skipFinalSnapshot) {
            $.skipFinalSnapshot = skipFinalSnapshot;
            return this;
        }

        /**
         * @param skipFinalSnapshot Whether a final database snapshot is created before your database is deleted. If true is specified, no database snapshot is created. If false is specified, a database snapshot is created before your database is deleted. You must specify the final relational database snapshot name parameter if the skip final snapshot parameter is false.
         * 
         * @return builder
         * 
         */
        public Builder skipFinalSnapshot(Boolean skipFinalSnapshot) {
            return skipFinalSnapshot(Output.of(skipFinalSnapshot));
        }

        /**
         * @param supportCode Support code for the database. Include this code in your email to support when you have questions about a database in Lightsail. This code enables our support team to look up your Lightsail information more easily.
         * 
         * @return builder
         * 
         */
        public Builder supportCode(@Nullable Output<String> supportCode) {
            $.supportCode = supportCode;
            return this;
        }

        /**
         * @param supportCode Support code for the database. Include this code in your email to support when you have questions about a database in Lightsail. This code enables our support team to look up your Lightsail information more easily.
         * 
         * @return builder
         * 
         */
        public Builder supportCode(String supportCode) {
            return supportCode(Output.of(supportCode));
        }

        /**
         * @param tags Map of tags to assign to the resource. To create a key-only tag, use an empty string as the value. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Map of tags to assign to the resource. To create a key-only tag, use an empty string as the value. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tagsAll Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
         * 
         * @return builder
         * 
         */
        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        /**
         * @param tagsAll Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
         * 
         * @return builder
         * 
         */
        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        public DatabaseState build() {
            return $;
        }
    }

}
