// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.efs.inputs;

import com.pulumi.aws.efs.inputs.AccessPointPosixUserArgs;
import com.pulumi.aws.efs.inputs.AccessPointRootDirectoryArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AccessPointState extends com.pulumi.resources.ResourceArgs {

    public static final AccessPointState Empty = new AccessPointState();

    /**
     * ARN of the access point.
     * 
     */
    @Import(name="arn")
    private @Nullable Output<String> arn;

    /**
     * @return ARN of the access point.
     * 
     */
    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    /**
     * ARN of the file system.
     * 
     */
    @Import(name="fileSystemArn")
    private @Nullable Output<String> fileSystemArn;

    /**
     * @return ARN of the file system.
     * 
     */
    public Optional<Output<String>> fileSystemArn() {
        return Optional.ofNullable(this.fileSystemArn);
    }

    /**
     * ID of the file system for which the access point is intended.
     * 
     */
    @Import(name="fileSystemId")
    private @Nullable Output<String> fileSystemId;

    /**
     * @return ID of the file system for which the access point is intended.
     * 
     */
    public Optional<Output<String>> fileSystemId() {
        return Optional.ofNullable(this.fileSystemId);
    }

    @Import(name="ownerId")
    private @Nullable Output<String> ownerId;

    public Optional<Output<String>> ownerId() {
        return Optional.ofNullable(this.ownerId);
    }

    /**
     * Operating system user and group applied to all file system requests made using the access point. Detailed below.
     * 
     */
    @Import(name="posixUser")
    private @Nullable Output<AccessPointPosixUserArgs> posixUser;

    /**
     * @return Operating system user and group applied to all file system requests made using the access point. Detailed below.
     * 
     */
    public Optional<Output<AccessPointPosixUserArgs>> posixUser() {
        return Optional.ofNullable(this.posixUser);
    }

    /**
     * Directory on the Amazon EFS file system that the access point provides access to. Detailed below.
     * 
     */
    @Import(name="rootDirectory")
    private @Nullable Output<AccessPointRootDirectoryArgs> rootDirectory;

    /**
     * @return Directory on the Amazon EFS file system that the access point provides access to. Detailed below.
     * 
     */
    public Optional<Output<AccessPointRootDirectoryArgs>> rootDirectory() {
        return Optional.ofNullable(this.rootDirectory);
    }

    /**
     * Key-value mapping of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Key-value mapping of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     */
    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    /**
     * @return Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     */
    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    private AccessPointState() {}

    private AccessPointState(AccessPointState $) {
        this.arn = $.arn;
        this.fileSystemArn = $.fileSystemArn;
        this.fileSystemId = $.fileSystemId;
        this.ownerId = $.ownerId;
        this.posixUser = $.posixUser;
        this.rootDirectory = $.rootDirectory;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AccessPointState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AccessPointState $;

        public Builder() {
            $ = new AccessPointState();
        }

        public Builder(AccessPointState defaults) {
            $ = new AccessPointState(Objects.requireNonNull(defaults));
        }

        /**
         * @param arn ARN of the access point.
         * 
         * @return builder
         * 
         */
        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        /**
         * @param arn ARN of the access point.
         * 
         * @return builder
         * 
         */
        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        /**
         * @param fileSystemArn ARN of the file system.
         * 
         * @return builder
         * 
         */
        public Builder fileSystemArn(@Nullable Output<String> fileSystemArn) {
            $.fileSystemArn = fileSystemArn;
            return this;
        }

        /**
         * @param fileSystemArn ARN of the file system.
         * 
         * @return builder
         * 
         */
        public Builder fileSystemArn(String fileSystemArn) {
            return fileSystemArn(Output.of(fileSystemArn));
        }

        /**
         * @param fileSystemId ID of the file system for which the access point is intended.
         * 
         * @return builder
         * 
         */
        public Builder fileSystemId(@Nullable Output<String> fileSystemId) {
            $.fileSystemId = fileSystemId;
            return this;
        }

        /**
         * @param fileSystemId ID of the file system for which the access point is intended.
         * 
         * @return builder
         * 
         */
        public Builder fileSystemId(String fileSystemId) {
            return fileSystemId(Output.of(fileSystemId));
        }

        public Builder ownerId(@Nullable Output<String> ownerId) {
            $.ownerId = ownerId;
            return this;
        }

        public Builder ownerId(String ownerId) {
            return ownerId(Output.of(ownerId));
        }

        /**
         * @param posixUser Operating system user and group applied to all file system requests made using the access point. Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder posixUser(@Nullable Output<AccessPointPosixUserArgs> posixUser) {
            $.posixUser = posixUser;
            return this;
        }

        /**
         * @param posixUser Operating system user and group applied to all file system requests made using the access point. Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder posixUser(AccessPointPosixUserArgs posixUser) {
            return posixUser(Output.of(posixUser));
        }

        /**
         * @param rootDirectory Directory on the Amazon EFS file system that the access point provides access to. Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder rootDirectory(@Nullable Output<AccessPointRootDirectoryArgs> rootDirectory) {
            $.rootDirectory = rootDirectory;
            return this;
        }

        /**
         * @param rootDirectory Directory on the Amazon EFS file system that the access point provides access to. Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder rootDirectory(AccessPointRootDirectoryArgs rootDirectory) {
            return rootDirectory(Output.of(rootDirectory));
        }

        /**
         * @param tags Key-value mapping of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Key-value mapping of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tagsAll Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
         * 
         * @return builder
         * 
         */
        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        /**
         * @param tagsAll Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
         * 
         * @return builder
         * 
         */
        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        public AccessPointState build() {
            return $;
        }
    }

}
