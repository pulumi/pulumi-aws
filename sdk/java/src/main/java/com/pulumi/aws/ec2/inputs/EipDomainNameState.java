// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ec2.inputs;

import com.pulumi.aws.ec2.inputs.EipDomainNameTimeoutsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EipDomainNameState extends com.pulumi.resources.ResourceArgs {

    public static final EipDomainNameState Empty = new EipDomainNameState();

    /**
     * The allocation ID.
     * 
     */
    @Import(name="allocationId")
    private @Nullable Output<String> allocationId;

    /**
     * @return The allocation ID.
     * 
     */
    public Optional<Output<String>> allocationId() {
        return Optional.ofNullable(this.allocationId);
    }

    /**
     * The domain name to modify for the IP address.
     * 
     */
    @Import(name="domainName")
    private @Nullable Output<String> domainName;

    /**
     * @return The domain name to modify for the IP address.
     * 
     */
    public Optional<Output<String>> domainName() {
        return Optional.ofNullable(this.domainName);
    }

    /**
     * The DNS pointer (PTR) record for the IP address.
     * 
     */
    @Import(name="ptrRecord")
    private @Nullable Output<String> ptrRecord;

    /**
     * @return The DNS pointer (PTR) record for the IP address.
     * 
     */
    public Optional<Output<String>> ptrRecord() {
        return Optional.ofNullable(this.ptrRecord);
    }

    @Import(name="timeouts")
    private @Nullable Output<EipDomainNameTimeoutsArgs> timeouts;

    public Optional<Output<EipDomainNameTimeoutsArgs>> timeouts() {
        return Optional.ofNullable(this.timeouts);
    }

    private EipDomainNameState() {}

    private EipDomainNameState(EipDomainNameState $) {
        this.allocationId = $.allocationId;
        this.domainName = $.domainName;
        this.ptrRecord = $.ptrRecord;
        this.timeouts = $.timeouts;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EipDomainNameState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EipDomainNameState $;

        public Builder() {
            $ = new EipDomainNameState();
        }

        public Builder(EipDomainNameState defaults) {
            $ = new EipDomainNameState(Objects.requireNonNull(defaults));
        }

        /**
         * @param allocationId The allocation ID.
         * 
         * @return builder
         * 
         */
        public Builder allocationId(@Nullable Output<String> allocationId) {
            $.allocationId = allocationId;
            return this;
        }

        /**
         * @param allocationId The allocation ID.
         * 
         * @return builder
         * 
         */
        public Builder allocationId(String allocationId) {
            return allocationId(Output.of(allocationId));
        }

        /**
         * @param domainName The domain name to modify for the IP address.
         * 
         * @return builder
         * 
         */
        public Builder domainName(@Nullable Output<String> domainName) {
            $.domainName = domainName;
            return this;
        }

        /**
         * @param domainName The domain name to modify for the IP address.
         * 
         * @return builder
         * 
         */
        public Builder domainName(String domainName) {
            return domainName(Output.of(domainName));
        }

        /**
         * @param ptrRecord The DNS pointer (PTR) record for the IP address.
         * 
         * @return builder
         * 
         */
        public Builder ptrRecord(@Nullable Output<String> ptrRecord) {
            $.ptrRecord = ptrRecord;
            return this;
        }

        /**
         * @param ptrRecord The DNS pointer (PTR) record for the IP address.
         * 
         * @return builder
         * 
         */
        public Builder ptrRecord(String ptrRecord) {
            return ptrRecord(Output.of(ptrRecord));
        }

        public Builder timeouts(@Nullable Output<EipDomainNameTimeoutsArgs> timeouts) {
            $.timeouts = timeouts;
            return this;
        }

        public Builder timeouts(EipDomainNameTimeoutsArgs timeouts) {
            return timeouts(Output.of(timeouts));
        }

        public EipDomainNameState build() {
            return $;
        }
    }

}
