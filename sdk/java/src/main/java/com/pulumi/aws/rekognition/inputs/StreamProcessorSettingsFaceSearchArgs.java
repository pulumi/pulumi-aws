// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.rekognition.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class StreamProcessorSettingsFaceSearchArgs extends com.pulumi.resources.ResourceArgs {

    public static final StreamProcessorSettingsFaceSearchArgs Empty = new StreamProcessorSettingsFaceSearchArgs();

    /**
     * ID of a collection that contains faces that you want to search for.
     * 
     */
    @Import(name="collectionId", required=true)
    private Output<String> collectionId;

    /**
     * @return ID of a collection that contains faces that you want to search for.
     * 
     */
    public Output<String> collectionId() {
        return this.collectionId;
    }

    /**
     * Minimum face match confidence score that must be met to return a result for a recognized face.
     * 
     */
    @Import(name="faceMatchThreshold")
    private @Nullable Output<Double> faceMatchThreshold;

    /**
     * @return Minimum face match confidence score that must be met to return a result for a recognized face.
     * 
     */
    public Optional<Output<Double>> faceMatchThreshold() {
        return Optional.ofNullable(this.faceMatchThreshold);
    }

    private StreamProcessorSettingsFaceSearchArgs() {}

    private StreamProcessorSettingsFaceSearchArgs(StreamProcessorSettingsFaceSearchArgs $) {
        this.collectionId = $.collectionId;
        this.faceMatchThreshold = $.faceMatchThreshold;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StreamProcessorSettingsFaceSearchArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StreamProcessorSettingsFaceSearchArgs $;

        public Builder() {
            $ = new StreamProcessorSettingsFaceSearchArgs();
        }

        public Builder(StreamProcessorSettingsFaceSearchArgs defaults) {
            $ = new StreamProcessorSettingsFaceSearchArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param collectionId ID of a collection that contains faces that you want to search for.
         * 
         * @return builder
         * 
         */
        public Builder collectionId(Output<String> collectionId) {
            $.collectionId = collectionId;
            return this;
        }

        /**
         * @param collectionId ID of a collection that contains faces that you want to search for.
         * 
         * @return builder
         * 
         */
        public Builder collectionId(String collectionId) {
            return collectionId(Output.of(collectionId));
        }

        /**
         * @param faceMatchThreshold Minimum face match confidence score that must be met to return a result for a recognized face.
         * 
         * @return builder
         * 
         */
        public Builder faceMatchThreshold(@Nullable Output<Double> faceMatchThreshold) {
            $.faceMatchThreshold = faceMatchThreshold;
            return this;
        }

        /**
         * @param faceMatchThreshold Minimum face match confidence score that must be met to return a result for a recognized face.
         * 
         * @return builder
         * 
         */
        public Builder faceMatchThreshold(Double faceMatchThreshold) {
            return faceMatchThreshold(Output.of(faceMatchThreshold));
        }

        public StreamProcessorSettingsFaceSearchArgs build() {
            if ($.collectionId == null) {
                throw new MissingRequiredPropertyException("StreamProcessorSettingsFaceSearchArgs", "collectionId");
            }
            return $;
        }
    }

}
