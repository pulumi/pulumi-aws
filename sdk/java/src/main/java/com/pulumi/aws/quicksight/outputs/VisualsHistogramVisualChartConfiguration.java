// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.outputs;

import com.pulumi.aws.quicksight.outputs.AxisDisplayOptions;
import com.pulumi.aws.quicksight.outputs.ChartAxisLabelOptions;
import com.pulumi.aws.quicksight.outputs.DataLabelsOptions;
import com.pulumi.aws.quicksight.outputs.TooltipOptions;
import com.pulumi.aws.quicksight.outputs.VisualPalette;
import com.pulumi.aws.quicksight.outputs.VisualsHistogramVisualChartConfigurationBinOptions;
import com.pulumi.aws.quicksight.outputs.VisualsHistogramVisualChartConfigurationFieldWells;
import com.pulumi.core.annotations.CustomType;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class VisualsHistogramVisualChartConfiguration {
    private @Nullable VisualsHistogramVisualChartConfigurationBinOptions binOptions;
    private @Nullable DataLabelsOptions dataLabels;
    private @Nullable VisualsHistogramVisualChartConfigurationFieldWells fieldWells;
    private @Nullable TooltipOptions tooltip;
    private @Nullable VisualPalette visualPalette;
    private @Nullable AxisDisplayOptions xAxisDisplayOptions;
    private @Nullable ChartAxisLabelOptions xAxisLabelOptions;
    private @Nullable AxisDisplayOptions yAxisDisplayOptions;

    private VisualsHistogramVisualChartConfiguration() {}
    public Optional<VisualsHistogramVisualChartConfigurationBinOptions> binOptions() {
        return Optional.ofNullable(this.binOptions);
    }
    public Optional<DataLabelsOptions> dataLabels() {
        return Optional.ofNullable(this.dataLabels);
    }
    public Optional<VisualsHistogramVisualChartConfigurationFieldWells> fieldWells() {
        return Optional.ofNullable(this.fieldWells);
    }
    public Optional<TooltipOptions> tooltip() {
        return Optional.ofNullable(this.tooltip);
    }
    public Optional<VisualPalette> visualPalette() {
        return Optional.ofNullable(this.visualPalette);
    }
    public Optional<AxisDisplayOptions> xAxisDisplayOptions() {
        return Optional.ofNullable(this.xAxisDisplayOptions);
    }
    public Optional<ChartAxisLabelOptions> xAxisLabelOptions() {
        return Optional.ofNullable(this.xAxisLabelOptions);
    }
    public Optional<AxisDisplayOptions> yAxisDisplayOptions() {
        return Optional.ofNullable(this.yAxisDisplayOptions);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VisualsHistogramVisualChartConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable VisualsHistogramVisualChartConfigurationBinOptions binOptions;
        private @Nullable DataLabelsOptions dataLabels;
        private @Nullable VisualsHistogramVisualChartConfigurationFieldWells fieldWells;
        private @Nullable TooltipOptions tooltip;
        private @Nullable VisualPalette visualPalette;
        private @Nullable AxisDisplayOptions xAxisDisplayOptions;
        private @Nullable ChartAxisLabelOptions xAxisLabelOptions;
        private @Nullable AxisDisplayOptions yAxisDisplayOptions;
        public Builder() {}
        public Builder(VisualsHistogramVisualChartConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.binOptions = defaults.binOptions;
    	      this.dataLabels = defaults.dataLabels;
    	      this.fieldWells = defaults.fieldWells;
    	      this.tooltip = defaults.tooltip;
    	      this.visualPalette = defaults.visualPalette;
    	      this.xAxisDisplayOptions = defaults.xAxisDisplayOptions;
    	      this.xAxisLabelOptions = defaults.xAxisLabelOptions;
    	      this.yAxisDisplayOptions = defaults.yAxisDisplayOptions;
        }

        @CustomType.Setter
        public Builder binOptions(@Nullable VisualsHistogramVisualChartConfigurationBinOptions binOptions) {

            this.binOptions = binOptions;
            return this;
        }
        @CustomType.Setter
        public Builder dataLabels(@Nullable DataLabelsOptions dataLabels) {

            this.dataLabels = dataLabels;
            return this;
        }
        @CustomType.Setter
        public Builder fieldWells(@Nullable VisualsHistogramVisualChartConfigurationFieldWells fieldWells) {

            this.fieldWells = fieldWells;
            return this;
        }
        @CustomType.Setter
        public Builder tooltip(@Nullable TooltipOptions tooltip) {

            this.tooltip = tooltip;
            return this;
        }
        @CustomType.Setter
        public Builder visualPalette(@Nullable VisualPalette visualPalette) {

            this.visualPalette = visualPalette;
            return this;
        }
        @CustomType.Setter
        public Builder xAxisDisplayOptions(@Nullable AxisDisplayOptions xAxisDisplayOptions) {

            this.xAxisDisplayOptions = xAxisDisplayOptions;
            return this;
        }
        @CustomType.Setter
        public Builder xAxisLabelOptions(@Nullable ChartAxisLabelOptions xAxisLabelOptions) {

            this.xAxisLabelOptions = xAxisLabelOptions;
            return this;
        }
        @CustomType.Setter
        public Builder yAxisDisplayOptions(@Nullable AxisDisplayOptions yAxisDisplayOptions) {

            this.yAxisDisplayOptions = yAxisDisplayOptions;
            return this;
        }
        public VisualsHistogramVisualChartConfiguration build() {
            final var _resultValue = new VisualsHistogramVisualChartConfiguration();
            _resultValue.binOptions = binOptions;
            _resultValue.dataLabels = dataLabels;
            _resultValue.fieldWells = fieldWells;
            _resultValue.tooltip = tooltip;
            _resultValue.visualPalette = visualPalette;
            _resultValue.xAxisDisplayOptions = xAxisDisplayOptions;
            _resultValue.xAxisLabelOptions = xAxisLabelOptions;
            _resultValue.yAxisDisplayOptions = yAxisDisplayOptions;
            return _resultValue;
        }
    }
}
