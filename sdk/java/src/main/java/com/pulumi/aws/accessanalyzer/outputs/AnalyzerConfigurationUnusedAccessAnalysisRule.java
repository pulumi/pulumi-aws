// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.accessanalyzer.outputs;

import com.pulumi.aws.accessanalyzer.outputs.AnalyzerConfigurationUnusedAccessAnalysisRuleExclusion;
import com.pulumi.core.annotations.CustomType;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class AnalyzerConfigurationUnusedAccessAnalysisRule {
    /**
     * @return A block for the analyzer rules containing criteria to exclude from analysis. Documented below
     * 
     */
    private @Nullable List<AnalyzerConfigurationUnusedAccessAnalysisRuleExclusion> exclusions;

    private AnalyzerConfigurationUnusedAccessAnalysisRule() {}
    /**
     * @return A block for the analyzer rules containing criteria to exclude from analysis. Documented below
     * 
     */
    public List<AnalyzerConfigurationUnusedAccessAnalysisRuleExclusion> exclusions() {
        return this.exclusions == null ? List.of() : this.exclusions;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AnalyzerConfigurationUnusedAccessAnalysisRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<AnalyzerConfigurationUnusedAccessAnalysisRuleExclusion> exclusions;
        public Builder() {}
        public Builder(AnalyzerConfigurationUnusedAccessAnalysisRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.exclusions = defaults.exclusions;
        }

        @CustomType.Setter
        public Builder exclusions(@Nullable List<AnalyzerConfigurationUnusedAccessAnalysisRuleExclusion> exclusions) {

            this.exclusions = exclusions;
            return this;
        }
        public Builder exclusions(AnalyzerConfigurationUnusedAccessAnalysisRuleExclusion... exclusions) {
            return exclusions(List.of(exclusions));
        }
        public AnalyzerConfigurationUnusedAccessAnalysisRule build() {
            final var _resultValue = new AnalyzerConfigurationUnusedAccessAnalysisRule();
            _resultValue.exclusions = exclusions;
            return _resultValue;
        }
    }
}
