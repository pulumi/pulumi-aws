// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.s3.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BucketV2LifecycleRuleNoncurrentVersionTransitionArgs extends com.pulumi.resources.ResourceArgs {

    public static final BucketV2LifecycleRuleNoncurrentVersionTransitionArgs Empty = new BucketV2LifecycleRuleNoncurrentVersionTransitionArgs();

    /**
     * Specifies the number of days noncurrent object versions transition.
     * 
     */
    @Import(name="days")
    private @Nullable Output<Integer> days;

    /**
     * @return Specifies the number of days noncurrent object versions transition.
     * 
     */
    public Optional<Output<Integer>> days() {
        return Optional.ofNullable(this.days);
    }

    /**
     * Specifies the Amazon S3 [storage class](https://docs.aws.amazon.com/AmazonS3/latest/API/API_Transition.html#AmazonS3-Type-Transition-StorageClass) to which you want the object to transition.
     * 
     */
    @Import(name="storageClass", required=true)
    private Output<String> storageClass;

    /**
     * @return Specifies the Amazon S3 [storage class](https://docs.aws.amazon.com/AmazonS3/latest/API/API_Transition.html#AmazonS3-Type-Transition-StorageClass) to which you want the object to transition.
     * 
     */
    public Output<String> storageClass() {
        return this.storageClass;
    }

    private BucketV2LifecycleRuleNoncurrentVersionTransitionArgs() {}

    private BucketV2LifecycleRuleNoncurrentVersionTransitionArgs(BucketV2LifecycleRuleNoncurrentVersionTransitionArgs $) {
        this.days = $.days;
        this.storageClass = $.storageClass;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BucketV2LifecycleRuleNoncurrentVersionTransitionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BucketV2LifecycleRuleNoncurrentVersionTransitionArgs $;

        public Builder() {
            $ = new BucketV2LifecycleRuleNoncurrentVersionTransitionArgs();
        }

        public Builder(BucketV2LifecycleRuleNoncurrentVersionTransitionArgs defaults) {
            $ = new BucketV2LifecycleRuleNoncurrentVersionTransitionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param days Specifies the number of days noncurrent object versions transition.
         * 
         * @return builder
         * 
         */
        public Builder days(@Nullable Output<Integer> days) {
            $.days = days;
            return this;
        }

        /**
         * @param days Specifies the number of days noncurrent object versions transition.
         * 
         * @return builder
         * 
         */
        public Builder days(Integer days) {
            return days(Output.of(days));
        }

        /**
         * @param storageClass Specifies the Amazon S3 [storage class](https://docs.aws.amazon.com/AmazonS3/latest/API/API_Transition.html#AmazonS3-Type-Transition-StorageClass) to which you want the object to transition.
         * 
         * @return builder
         * 
         */
        public Builder storageClass(Output<String> storageClass) {
            $.storageClass = storageClass;
            return this;
        }

        /**
         * @param storageClass Specifies the Amazon S3 [storage class](https://docs.aws.amazon.com/AmazonS3/latest/API/API_Transition.html#AmazonS3-Type-Transition-StorageClass) to which you want the object to transition.
         * 
         * @return builder
         * 
         */
        public Builder storageClass(String storageClass) {
            return storageClass(Output.of(storageClass));
        }

        public BucketV2LifecycleRuleNoncurrentVersionTransitionArgs build() {
            if ($.storageClass == null) {
                throw new MissingRequiredPropertyException("BucketV2LifecycleRuleNoncurrentVersionTransitionArgs", "storageClass");
            }
            return $;
        }
    }

}
