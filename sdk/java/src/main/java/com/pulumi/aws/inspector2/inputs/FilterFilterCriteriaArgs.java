// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.inspector2.inputs;

import com.pulumi.aws.inspector2.inputs.FilterFilterCriteriaAwsAccountIdArgs;
import com.pulumi.aws.inspector2.inputs.FilterFilterCriteriaCodeVulnerabilityDetectorNameArgs;
import com.pulumi.aws.inspector2.inputs.FilterFilterCriteriaCodeVulnerabilityDetectorTagArgs;
import com.pulumi.aws.inspector2.inputs.FilterFilterCriteriaCodeVulnerabilityFilePathArgs;
import com.pulumi.aws.inspector2.inputs.FilterFilterCriteriaComponentIdArgs;
import com.pulumi.aws.inspector2.inputs.FilterFilterCriteriaComponentTypeArgs;
import com.pulumi.aws.inspector2.inputs.FilterFilterCriteriaEc2InstanceImageIdArgs;
import com.pulumi.aws.inspector2.inputs.FilterFilterCriteriaEc2InstanceSubnetIdArgs;
import com.pulumi.aws.inspector2.inputs.FilterFilterCriteriaEc2InstanceVpcIdArgs;
import com.pulumi.aws.inspector2.inputs.FilterFilterCriteriaEcrImageArchitectureArgs;
import com.pulumi.aws.inspector2.inputs.FilterFilterCriteriaEcrImageHashArgs;
import com.pulumi.aws.inspector2.inputs.FilterFilterCriteriaEcrImagePushedAtArgs;
import com.pulumi.aws.inspector2.inputs.FilterFilterCriteriaEcrImageRegistryArgs;
import com.pulumi.aws.inspector2.inputs.FilterFilterCriteriaEcrImageRepositoryNameArgs;
import com.pulumi.aws.inspector2.inputs.FilterFilterCriteriaEcrImageTagArgs;
import com.pulumi.aws.inspector2.inputs.FilterFilterCriteriaEpssScoreArgs;
import com.pulumi.aws.inspector2.inputs.FilterFilterCriteriaExploitAvailableArgs;
import com.pulumi.aws.inspector2.inputs.FilterFilterCriteriaFindingArnArgs;
import com.pulumi.aws.inspector2.inputs.FilterFilterCriteriaFindingStatusArgs;
import com.pulumi.aws.inspector2.inputs.FilterFilterCriteriaFindingTypeArgs;
import com.pulumi.aws.inspector2.inputs.FilterFilterCriteriaFirstObservedAtArgs;
import com.pulumi.aws.inspector2.inputs.FilterFilterCriteriaFixAvailableArgs;
import com.pulumi.aws.inspector2.inputs.FilterFilterCriteriaInspectorScoreArgs;
import com.pulumi.aws.inspector2.inputs.FilterFilterCriteriaLambdaFunctionExecutionRoleArnArgs;
import com.pulumi.aws.inspector2.inputs.FilterFilterCriteriaLambdaFunctionLastModifiedAtArgs;
import com.pulumi.aws.inspector2.inputs.FilterFilterCriteriaLambdaFunctionLayerArgs;
import com.pulumi.aws.inspector2.inputs.FilterFilterCriteriaLambdaFunctionNameArgs;
import com.pulumi.aws.inspector2.inputs.FilterFilterCriteriaLambdaFunctionRuntimeArgs;
import com.pulumi.aws.inspector2.inputs.FilterFilterCriteriaLastObservedAtArgs;
import com.pulumi.aws.inspector2.inputs.FilterFilterCriteriaNetworkProtocolArgs;
import com.pulumi.aws.inspector2.inputs.FilterFilterCriteriaPortRangeArgs;
import com.pulumi.aws.inspector2.inputs.FilterFilterCriteriaRelatedVulnerabilityArgs;
import com.pulumi.aws.inspector2.inputs.FilterFilterCriteriaResourceIdArgs;
import com.pulumi.aws.inspector2.inputs.FilterFilterCriteriaResourceTagArgs;
import com.pulumi.aws.inspector2.inputs.FilterFilterCriteriaResourceTypeArgs;
import com.pulumi.aws.inspector2.inputs.FilterFilterCriteriaSeverityArgs;
import com.pulumi.aws.inspector2.inputs.FilterFilterCriteriaTitleArgs;
import com.pulumi.aws.inspector2.inputs.FilterFilterCriteriaUpdatedAtArgs;
import com.pulumi.aws.inspector2.inputs.FilterFilterCriteriaVendorSeverityArgs;
import com.pulumi.aws.inspector2.inputs.FilterFilterCriteriaVulnerabilityIdArgs;
import com.pulumi.aws.inspector2.inputs.FilterFilterCriteriaVulnerabilitySourceArgs;
import com.pulumi.aws.inspector2.inputs.FilterFilterCriteriaVulnerablePackageArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FilterFilterCriteriaArgs extends com.pulumi.resources.ResourceArgs {

    public static final FilterFilterCriteriaArgs Empty = new FilterFilterCriteriaArgs();

    /**
     * (Optional) The AWS account ID in which the finding was generated. Documented below.
     * 
     */
    @Import(name="awsAccountIds")
    private @Nullable Output<List<FilterFilterCriteriaAwsAccountIdArgs>> awsAccountIds;

    /**
     * @return (Optional) The AWS account ID in which the finding was generated. Documented below.
     * 
     */
    public Optional<Output<List<FilterFilterCriteriaAwsAccountIdArgs>>> awsAccountIds() {
        return Optional.ofNullable(this.awsAccountIds);
    }

    /**
     * (Optional) The ID of the component. Documented below.
     * 
     */
    @Import(name="codeVulnerabilityDetectorNames")
    private @Nullable Output<List<FilterFilterCriteriaCodeVulnerabilityDetectorNameArgs>> codeVulnerabilityDetectorNames;

    /**
     * @return (Optional) The ID of the component. Documented below.
     * 
     */
    public Optional<Output<List<FilterFilterCriteriaCodeVulnerabilityDetectorNameArgs>>> codeVulnerabilityDetectorNames() {
        return Optional.ofNullable(this.codeVulnerabilityDetectorNames);
    }

    /**
     * (Optional) The ID of the component. Documented below.
     * 
     */
    @Import(name="codeVulnerabilityDetectorTags")
    private @Nullable Output<List<FilterFilterCriteriaCodeVulnerabilityDetectorTagArgs>> codeVulnerabilityDetectorTags;

    /**
     * @return (Optional) The ID of the component. Documented below.
     * 
     */
    public Optional<Output<List<FilterFilterCriteriaCodeVulnerabilityDetectorTagArgs>>> codeVulnerabilityDetectorTags() {
        return Optional.ofNullable(this.codeVulnerabilityDetectorTags);
    }

    /**
     * (Optional) The ID of the component. Documented below.
     * 
     */
    @Import(name="codeVulnerabilityFilePaths")
    private @Nullable Output<List<FilterFilterCriteriaCodeVulnerabilityFilePathArgs>> codeVulnerabilityFilePaths;

    /**
     * @return (Optional) The ID of the component. Documented below.
     * 
     */
    public Optional<Output<List<FilterFilterCriteriaCodeVulnerabilityFilePathArgs>>> codeVulnerabilityFilePaths() {
        return Optional.ofNullable(this.codeVulnerabilityFilePaths);
    }

    /**
     * (Optional) The ID of the component. Documented below.
     * 
     */
    @Import(name="componentIds")
    private @Nullable Output<List<FilterFilterCriteriaComponentIdArgs>> componentIds;

    /**
     * @return (Optional) The ID of the component. Documented below.
     * 
     */
    public Optional<Output<List<FilterFilterCriteriaComponentIdArgs>>> componentIds() {
        return Optional.ofNullable(this.componentIds);
    }

    /**
     * (Optional) The type of the component. Documented below.
     * 
     */
    @Import(name="componentTypes")
    private @Nullable Output<List<FilterFilterCriteriaComponentTypeArgs>> componentTypes;

    /**
     * @return (Optional) The type of the component. Documented below.
     * 
     */
    public Optional<Output<List<FilterFilterCriteriaComponentTypeArgs>>> componentTypes() {
        return Optional.ofNullable(this.componentTypes);
    }

    /**
     * (Optional) The ID of the Amazon Machine Image (AMI). Documented below.
     * 
     */
    @Import(name="ec2InstanceImageIds")
    private @Nullable Output<List<FilterFilterCriteriaEc2InstanceImageIdArgs>> ec2InstanceImageIds;

    /**
     * @return (Optional) The ID of the Amazon Machine Image (AMI). Documented below.
     * 
     */
    public Optional<Output<List<FilterFilterCriteriaEc2InstanceImageIdArgs>>> ec2InstanceImageIds() {
        return Optional.ofNullable(this.ec2InstanceImageIds);
    }

    /**
     * (Optional) The ID of the subnet. Documented below.
     * 
     */
    @Import(name="ec2InstanceSubnetIds")
    private @Nullable Output<List<FilterFilterCriteriaEc2InstanceSubnetIdArgs>> ec2InstanceSubnetIds;

    /**
     * @return (Optional) The ID of the subnet. Documented below.
     * 
     */
    public Optional<Output<List<FilterFilterCriteriaEc2InstanceSubnetIdArgs>>> ec2InstanceSubnetIds() {
        return Optional.ofNullable(this.ec2InstanceSubnetIds);
    }

    /**
     * (Optional) The ID of the VPC. Documented below.
     * 
     */
    @Import(name="ec2InstanceVpcIds")
    private @Nullable Output<List<FilterFilterCriteriaEc2InstanceVpcIdArgs>> ec2InstanceVpcIds;

    /**
     * @return (Optional) The ID of the VPC. Documented below.
     * 
     */
    public Optional<Output<List<FilterFilterCriteriaEc2InstanceVpcIdArgs>>> ec2InstanceVpcIds() {
        return Optional.ofNullable(this.ec2InstanceVpcIds);
    }

    /**
     * (Optional) The architecture of the ECR image. Documented below.
     * 
     */
    @Import(name="ecrImageArchitectures")
    private @Nullable Output<List<FilterFilterCriteriaEcrImageArchitectureArgs>> ecrImageArchitectures;

    /**
     * @return (Optional) The architecture of the ECR image. Documented below.
     * 
     */
    public Optional<Output<List<FilterFilterCriteriaEcrImageArchitectureArgs>>> ecrImageArchitectures() {
        return Optional.ofNullable(this.ecrImageArchitectures);
    }

    /**
     * (Optional) The SHA256 hash of the ECR image. Documented below.
     * 
     */
    @Import(name="ecrImageHashes")
    private @Nullable Output<List<FilterFilterCriteriaEcrImageHashArgs>> ecrImageHashes;

    /**
     * @return (Optional) The SHA256 hash of the ECR image. Documented below.
     * 
     */
    public Optional<Output<List<FilterFilterCriteriaEcrImageHashArgs>>> ecrImageHashes() {
        return Optional.ofNullable(this.ecrImageHashes);
    }

    /**
     * (Optional) The date range when the image was pushed. Documented below.
     * 
     */
    @Import(name="ecrImagePushedAts")
    private @Nullable Output<List<FilterFilterCriteriaEcrImagePushedAtArgs>> ecrImagePushedAts;

    /**
     * @return (Optional) The date range when the image was pushed. Documented below.
     * 
     */
    public Optional<Output<List<FilterFilterCriteriaEcrImagePushedAtArgs>>> ecrImagePushedAts() {
        return Optional.ofNullable(this.ecrImagePushedAts);
    }

    /**
     * (Optional) The registry of the ECR image. Documented below.
     * 
     */
    @Import(name="ecrImageRegistries")
    private @Nullable Output<List<FilterFilterCriteriaEcrImageRegistryArgs>> ecrImageRegistries;

    /**
     * @return (Optional) The registry of the ECR image. Documented below.
     * 
     */
    public Optional<Output<List<FilterFilterCriteriaEcrImageRegistryArgs>>> ecrImageRegistries() {
        return Optional.ofNullable(this.ecrImageRegistries);
    }

    /**
     * (Optional) The name of the ECR repository. Documented below.
     * 
     */
    @Import(name="ecrImageRepositoryNames")
    private @Nullable Output<List<FilterFilterCriteriaEcrImageRepositoryNameArgs>> ecrImageRepositoryNames;

    /**
     * @return (Optional) The name of the ECR repository. Documented below.
     * 
     */
    public Optional<Output<List<FilterFilterCriteriaEcrImageRepositoryNameArgs>>> ecrImageRepositoryNames() {
        return Optional.ofNullable(this.ecrImageRepositoryNames);
    }

    /**
     * (Optional) The tags associated with the ECR image. Documented below.
     * 
     */
    @Import(name="ecrImageTags")
    private @Nullable Output<List<FilterFilterCriteriaEcrImageTagArgs>> ecrImageTags;

    /**
     * @return (Optional) The tags associated with the ECR image. Documented below.
     * 
     */
    public Optional<Output<List<FilterFilterCriteriaEcrImageTagArgs>>> ecrImageTags() {
        return Optional.ofNullable(this.ecrImageTags);
    }

    /**
     * (Optional) EPSS (Exploit Prediction Scoring System) Score of the finding. Documented below.
     * 
     */
    @Import(name="epssScores")
    private @Nullable Output<List<FilterFilterCriteriaEpssScoreArgs>> epssScores;

    /**
     * @return (Optional) EPSS (Exploit Prediction Scoring System) Score of the finding. Documented below.
     * 
     */
    public Optional<Output<List<FilterFilterCriteriaEpssScoreArgs>>> epssScores() {
        return Optional.ofNullable(this.epssScores);
    }

    /**
     * (Optional) Availability of exploits. Documented below.
     * 
     */
    @Import(name="exploitAvailables")
    private @Nullable Output<List<FilterFilterCriteriaExploitAvailableArgs>> exploitAvailables;

    /**
     * @return (Optional) Availability of exploits. Documented below.
     * 
     */
    public Optional<Output<List<FilterFilterCriteriaExploitAvailableArgs>>> exploitAvailables() {
        return Optional.ofNullable(this.exploitAvailables);
    }

    /**
     * (Optional) The ARN of the finding. Documented below.
     * 
     */
    @Import(name="findingArns")
    private @Nullable Output<List<FilterFilterCriteriaFindingArnArgs>> findingArns;

    /**
     * @return (Optional) The ARN of the finding. Documented below.
     * 
     */
    public Optional<Output<List<FilterFilterCriteriaFindingArnArgs>>> findingArns() {
        return Optional.ofNullable(this.findingArns);
    }

    /**
     * (Optional) The status of the finding. Documented below.
     * 
     */
    @Import(name="findingStatuses")
    private @Nullable Output<List<FilterFilterCriteriaFindingStatusArgs>> findingStatuses;

    /**
     * @return (Optional) The status of the finding. Documented below.
     * 
     */
    public Optional<Output<List<FilterFilterCriteriaFindingStatusArgs>>> findingStatuses() {
        return Optional.ofNullable(this.findingStatuses);
    }

    /**
     * (Optional) The type of the finding. Documented below.
     * 
     */
    @Import(name="findingTypes")
    private @Nullable Output<List<FilterFilterCriteriaFindingTypeArgs>> findingTypes;

    /**
     * @return (Optional) The type of the finding. Documented below.
     * 
     */
    public Optional<Output<List<FilterFilterCriteriaFindingTypeArgs>>> findingTypes() {
        return Optional.ofNullable(this.findingTypes);
    }

    /**
     * (Optional) When the finding was first observed. Documented below.
     * 
     */
    @Import(name="firstObservedAts")
    private @Nullable Output<List<FilterFilterCriteriaFirstObservedAtArgs>> firstObservedAts;

    /**
     * @return (Optional) When the finding was first observed. Documented below.
     * 
     */
    public Optional<Output<List<FilterFilterCriteriaFirstObservedAtArgs>>> firstObservedAts() {
        return Optional.ofNullable(this.firstObservedAts);
    }

    /**
     * (Optional) Availability of the fix. Documented below.
     * 
     */
    @Import(name="fixAvailables")
    private @Nullable Output<List<FilterFilterCriteriaFixAvailableArgs>> fixAvailables;

    /**
     * @return (Optional) Availability of the fix. Documented below.
     * 
     */
    public Optional<Output<List<FilterFilterCriteriaFixAvailableArgs>>> fixAvailables() {
        return Optional.ofNullable(this.fixAvailables);
    }

    /**
     * (Optional) The Inspector score given to the finding. Documented below.
     * 
     */
    @Import(name="inspectorScores")
    private @Nullable Output<List<FilterFilterCriteriaInspectorScoreArgs>> inspectorScores;

    /**
     * @return (Optional) The Inspector score given to the finding. Documented below.
     * 
     */
    public Optional<Output<List<FilterFilterCriteriaInspectorScoreArgs>>> inspectorScores() {
        return Optional.ofNullable(this.inspectorScores);
    }

    /**
     * (Optional) Lambda execution role ARN. Documented below.
     * 
     */
    @Import(name="lambdaFunctionExecutionRoleArns")
    private @Nullable Output<List<FilterFilterCriteriaLambdaFunctionExecutionRoleArnArgs>> lambdaFunctionExecutionRoleArns;

    /**
     * @return (Optional) Lambda execution role ARN. Documented below.
     * 
     */
    public Optional<Output<List<FilterFilterCriteriaLambdaFunctionExecutionRoleArnArgs>>> lambdaFunctionExecutionRoleArns() {
        return Optional.ofNullable(this.lambdaFunctionExecutionRoleArns);
    }

    /**
     * (Optional) Last modified timestamp of the lambda function. Documented below.
     * 
     */
    @Import(name="lambdaFunctionLastModifiedAts")
    private @Nullable Output<List<FilterFilterCriteriaLambdaFunctionLastModifiedAtArgs>> lambdaFunctionLastModifiedAts;

    /**
     * @return (Optional) Last modified timestamp of the lambda function. Documented below.
     * 
     */
    public Optional<Output<List<FilterFilterCriteriaLambdaFunctionLastModifiedAtArgs>>> lambdaFunctionLastModifiedAts() {
        return Optional.ofNullable(this.lambdaFunctionLastModifiedAts);
    }

    /**
     * (Optional) Lambda function layers. Documented below.
     * 
     */
    @Import(name="lambdaFunctionLayers")
    private @Nullable Output<List<FilterFilterCriteriaLambdaFunctionLayerArgs>> lambdaFunctionLayers;

    /**
     * @return (Optional) Lambda function layers. Documented below.
     * 
     */
    public Optional<Output<List<FilterFilterCriteriaLambdaFunctionLayerArgs>>> lambdaFunctionLayers() {
        return Optional.ofNullable(this.lambdaFunctionLayers);
    }

    /**
     * (Optional) Lambda function name. Documented below.
     * 
     */
    @Import(name="lambdaFunctionNames")
    private @Nullable Output<List<FilterFilterCriteriaLambdaFunctionNameArgs>> lambdaFunctionNames;

    /**
     * @return (Optional) Lambda function name. Documented below.
     * 
     */
    public Optional<Output<List<FilterFilterCriteriaLambdaFunctionNameArgs>>> lambdaFunctionNames() {
        return Optional.ofNullable(this.lambdaFunctionNames);
    }

    /**
     * (Optional) Lambda function runtime. Documented below.
     * 
     */
    @Import(name="lambdaFunctionRuntimes")
    private @Nullable Output<List<FilterFilterCriteriaLambdaFunctionRuntimeArgs>> lambdaFunctionRuntimes;

    /**
     * @return (Optional) Lambda function runtime. Documented below.
     * 
     */
    public Optional<Output<List<FilterFilterCriteriaLambdaFunctionRuntimeArgs>>> lambdaFunctionRuntimes() {
        return Optional.ofNullable(this.lambdaFunctionRuntimes);
    }

    /**
     * (Optional) When the finding was last observed. Documented below.
     * 
     */
    @Import(name="lastObservedAts")
    private @Nullable Output<List<FilterFilterCriteriaLastObservedAtArgs>> lastObservedAts;

    /**
     * @return (Optional) When the finding was last observed. Documented below.
     * 
     */
    public Optional<Output<List<FilterFilterCriteriaLastObservedAtArgs>>> lastObservedAts() {
        return Optional.ofNullable(this.lastObservedAts);
    }

    /**
     * (Optional) The network protocol of the finding. Documented below.
     * 
     */
    @Import(name="networkProtocols")
    private @Nullable Output<List<FilterFilterCriteriaNetworkProtocolArgs>> networkProtocols;

    /**
     * @return (Optional) The network protocol of the finding. Documented below.
     * 
     */
    public Optional<Output<List<FilterFilterCriteriaNetworkProtocolArgs>>> networkProtocols() {
        return Optional.ofNullable(this.networkProtocols);
    }

    /**
     * (Optional) The port range of the finding. Documented below.
     * 
     */
    @Import(name="portRanges")
    private @Nullable Output<List<FilterFilterCriteriaPortRangeArgs>> portRanges;

    /**
     * @return (Optional) The port range of the finding. Documented below.
     * 
     */
    public Optional<Output<List<FilterFilterCriteriaPortRangeArgs>>> portRanges() {
        return Optional.ofNullable(this.portRanges);
    }

    /**
     * (Optional) Related vulnerabilities. Documented below.
     * 
     */
    @Import(name="relatedVulnerabilities")
    private @Nullable Output<List<FilterFilterCriteriaRelatedVulnerabilityArgs>> relatedVulnerabilities;

    /**
     * @return (Optional) Related vulnerabilities. Documented below.
     * 
     */
    public Optional<Output<List<FilterFilterCriteriaRelatedVulnerabilityArgs>>> relatedVulnerabilities() {
        return Optional.ofNullable(this.relatedVulnerabilities);
    }

    /**
     * (Optional) The ID of the resource. Documented below.
     * 
     */
    @Import(name="resourceIds")
    private @Nullable Output<List<FilterFilterCriteriaResourceIdArgs>> resourceIds;

    /**
     * @return (Optional) The ID of the resource. Documented below.
     * 
     */
    public Optional<Output<List<FilterFilterCriteriaResourceIdArgs>>> resourceIds() {
        return Optional.ofNullable(this.resourceIds);
    }

    /**
     * (Optional) The tags of the resource. Documented below.
     * 
     */
    @Import(name="resourceTags")
    private @Nullable Output<List<FilterFilterCriteriaResourceTagArgs>> resourceTags;

    /**
     * @return (Optional) The tags of the resource. Documented below.
     * 
     */
    public Optional<Output<List<FilterFilterCriteriaResourceTagArgs>>> resourceTags() {
        return Optional.ofNullable(this.resourceTags);
    }

    /**
     * (Optional) The type of the resource. Documented below.
     * 
     */
    @Import(name="resourceTypes")
    private @Nullable Output<List<FilterFilterCriteriaResourceTypeArgs>> resourceTypes;

    /**
     * @return (Optional) The type of the resource. Documented below.
     * 
     */
    public Optional<Output<List<FilterFilterCriteriaResourceTypeArgs>>> resourceTypes() {
        return Optional.ofNullable(this.resourceTypes);
    }

    /**
     * (Optional) The severity of the finding. Documented below.
     * 
     */
    @Import(name="severities")
    private @Nullable Output<List<FilterFilterCriteriaSeverityArgs>> severities;

    /**
     * @return (Optional) The severity of the finding. Documented below.
     * 
     */
    public Optional<Output<List<FilterFilterCriteriaSeverityArgs>>> severities() {
        return Optional.ofNullable(this.severities);
    }

    /**
     * (Optional) The title of the finding. Documented below.
     * 
     */
    @Import(name="titles")
    private @Nullable Output<List<FilterFilterCriteriaTitleArgs>> titles;

    /**
     * @return (Optional) The title of the finding. Documented below.
     * 
     */
    public Optional<Output<List<FilterFilterCriteriaTitleArgs>>> titles() {
        return Optional.ofNullable(this.titles);
    }

    /**
     * (Optional) When the finding was last updated. Documented below.
     * 
     */
    @Import(name="updatedAts")
    private @Nullable Output<List<FilterFilterCriteriaUpdatedAtArgs>> updatedAts;

    /**
     * @return (Optional) When the finding was last updated. Documented below.
     * 
     */
    public Optional<Output<List<FilterFilterCriteriaUpdatedAtArgs>>> updatedAts() {
        return Optional.ofNullable(this.updatedAts);
    }

    /**
     * (Optional) The severity as reported by the vendor. Documented below.
     * 
     */
    @Import(name="vendorSeverities")
    private @Nullable Output<List<FilterFilterCriteriaVendorSeverityArgs>> vendorSeverities;

    /**
     * @return (Optional) The severity as reported by the vendor. Documented below.
     * 
     */
    public Optional<Output<List<FilterFilterCriteriaVendorSeverityArgs>>> vendorSeverities() {
        return Optional.ofNullable(this.vendorSeverities);
    }

    /**
     * (Optional) The ID of the vulnerability. Documented below.
     * 
     */
    @Import(name="vulnerabilityIds")
    private @Nullable Output<List<FilterFilterCriteriaVulnerabilityIdArgs>> vulnerabilityIds;

    /**
     * @return (Optional) The ID of the vulnerability. Documented below.
     * 
     */
    public Optional<Output<List<FilterFilterCriteriaVulnerabilityIdArgs>>> vulnerabilityIds() {
        return Optional.ofNullable(this.vulnerabilityIds);
    }

    /**
     * (Optional) The source of the vulnerability. Documented below.
     * 
     */
    @Import(name="vulnerabilitySources")
    private @Nullable Output<List<FilterFilterCriteriaVulnerabilitySourceArgs>> vulnerabilitySources;

    /**
     * @return (Optional) The source of the vulnerability. Documented below.
     * 
     */
    public Optional<Output<List<FilterFilterCriteriaVulnerabilitySourceArgs>>> vulnerabilitySources() {
        return Optional.ofNullable(this.vulnerabilitySources);
    }

    /**
     * (Optional) Details about vulnerable packages. Documented below.
     * 
     */
    @Import(name="vulnerablePackages")
    private @Nullable Output<List<FilterFilterCriteriaVulnerablePackageArgs>> vulnerablePackages;

    /**
     * @return (Optional) Details about vulnerable packages. Documented below.
     * 
     */
    public Optional<Output<List<FilterFilterCriteriaVulnerablePackageArgs>>> vulnerablePackages() {
        return Optional.ofNullable(this.vulnerablePackages);
    }

    private FilterFilterCriteriaArgs() {}

    private FilterFilterCriteriaArgs(FilterFilterCriteriaArgs $) {
        this.awsAccountIds = $.awsAccountIds;
        this.codeVulnerabilityDetectorNames = $.codeVulnerabilityDetectorNames;
        this.codeVulnerabilityDetectorTags = $.codeVulnerabilityDetectorTags;
        this.codeVulnerabilityFilePaths = $.codeVulnerabilityFilePaths;
        this.componentIds = $.componentIds;
        this.componentTypes = $.componentTypes;
        this.ec2InstanceImageIds = $.ec2InstanceImageIds;
        this.ec2InstanceSubnetIds = $.ec2InstanceSubnetIds;
        this.ec2InstanceVpcIds = $.ec2InstanceVpcIds;
        this.ecrImageArchitectures = $.ecrImageArchitectures;
        this.ecrImageHashes = $.ecrImageHashes;
        this.ecrImagePushedAts = $.ecrImagePushedAts;
        this.ecrImageRegistries = $.ecrImageRegistries;
        this.ecrImageRepositoryNames = $.ecrImageRepositoryNames;
        this.ecrImageTags = $.ecrImageTags;
        this.epssScores = $.epssScores;
        this.exploitAvailables = $.exploitAvailables;
        this.findingArns = $.findingArns;
        this.findingStatuses = $.findingStatuses;
        this.findingTypes = $.findingTypes;
        this.firstObservedAts = $.firstObservedAts;
        this.fixAvailables = $.fixAvailables;
        this.inspectorScores = $.inspectorScores;
        this.lambdaFunctionExecutionRoleArns = $.lambdaFunctionExecutionRoleArns;
        this.lambdaFunctionLastModifiedAts = $.lambdaFunctionLastModifiedAts;
        this.lambdaFunctionLayers = $.lambdaFunctionLayers;
        this.lambdaFunctionNames = $.lambdaFunctionNames;
        this.lambdaFunctionRuntimes = $.lambdaFunctionRuntimes;
        this.lastObservedAts = $.lastObservedAts;
        this.networkProtocols = $.networkProtocols;
        this.portRanges = $.portRanges;
        this.relatedVulnerabilities = $.relatedVulnerabilities;
        this.resourceIds = $.resourceIds;
        this.resourceTags = $.resourceTags;
        this.resourceTypes = $.resourceTypes;
        this.severities = $.severities;
        this.titles = $.titles;
        this.updatedAts = $.updatedAts;
        this.vendorSeverities = $.vendorSeverities;
        this.vulnerabilityIds = $.vulnerabilityIds;
        this.vulnerabilitySources = $.vulnerabilitySources;
        this.vulnerablePackages = $.vulnerablePackages;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FilterFilterCriteriaArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FilterFilterCriteriaArgs $;

        public Builder() {
            $ = new FilterFilterCriteriaArgs();
        }

        public Builder(FilterFilterCriteriaArgs defaults) {
            $ = new FilterFilterCriteriaArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param awsAccountIds (Optional) The AWS account ID in which the finding was generated. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder awsAccountIds(@Nullable Output<List<FilterFilterCriteriaAwsAccountIdArgs>> awsAccountIds) {
            $.awsAccountIds = awsAccountIds;
            return this;
        }

        /**
         * @param awsAccountIds (Optional) The AWS account ID in which the finding was generated. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder awsAccountIds(List<FilterFilterCriteriaAwsAccountIdArgs> awsAccountIds) {
            return awsAccountIds(Output.of(awsAccountIds));
        }

        /**
         * @param awsAccountIds (Optional) The AWS account ID in which the finding was generated. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder awsAccountIds(FilterFilterCriteriaAwsAccountIdArgs... awsAccountIds) {
            return awsAccountIds(List.of(awsAccountIds));
        }

        /**
         * @param codeVulnerabilityDetectorNames (Optional) The ID of the component. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder codeVulnerabilityDetectorNames(@Nullable Output<List<FilterFilterCriteriaCodeVulnerabilityDetectorNameArgs>> codeVulnerabilityDetectorNames) {
            $.codeVulnerabilityDetectorNames = codeVulnerabilityDetectorNames;
            return this;
        }

        /**
         * @param codeVulnerabilityDetectorNames (Optional) The ID of the component. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder codeVulnerabilityDetectorNames(List<FilterFilterCriteriaCodeVulnerabilityDetectorNameArgs> codeVulnerabilityDetectorNames) {
            return codeVulnerabilityDetectorNames(Output.of(codeVulnerabilityDetectorNames));
        }

        /**
         * @param codeVulnerabilityDetectorNames (Optional) The ID of the component. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder codeVulnerabilityDetectorNames(FilterFilterCriteriaCodeVulnerabilityDetectorNameArgs... codeVulnerabilityDetectorNames) {
            return codeVulnerabilityDetectorNames(List.of(codeVulnerabilityDetectorNames));
        }

        /**
         * @param codeVulnerabilityDetectorTags (Optional) The ID of the component. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder codeVulnerabilityDetectorTags(@Nullable Output<List<FilterFilterCriteriaCodeVulnerabilityDetectorTagArgs>> codeVulnerabilityDetectorTags) {
            $.codeVulnerabilityDetectorTags = codeVulnerabilityDetectorTags;
            return this;
        }

        /**
         * @param codeVulnerabilityDetectorTags (Optional) The ID of the component. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder codeVulnerabilityDetectorTags(List<FilterFilterCriteriaCodeVulnerabilityDetectorTagArgs> codeVulnerabilityDetectorTags) {
            return codeVulnerabilityDetectorTags(Output.of(codeVulnerabilityDetectorTags));
        }

        /**
         * @param codeVulnerabilityDetectorTags (Optional) The ID of the component. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder codeVulnerabilityDetectorTags(FilterFilterCriteriaCodeVulnerabilityDetectorTagArgs... codeVulnerabilityDetectorTags) {
            return codeVulnerabilityDetectorTags(List.of(codeVulnerabilityDetectorTags));
        }

        /**
         * @param codeVulnerabilityFilePaths (Optional) The ID of the component. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder codeVulnerabilityFilePaths(@Nullable Output<List<FilterFilterCriteriaCodeVulnerabilityFilePathArgs>> codeVulnerabilityFilePaths) {
            $.codeVulnerabilityFilePaths = codeVulnerabilityFilePaths;
            return this;
        }

        /**
         * @param codeVulnerabilityFilePaths (Optional) The ID of the component. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder codeVulnerabilityFilePaths(List<FilterFilterCriteriaCodeVulnerabilityFilePathArgs> codeVulnerabilityFilePaths) {
            return codeVulnerabilityFilePaths(Output.of(codeVulnerabilityFilePaths));
        }

        /**
         * @param codeVulnerabilityFilePaths (Optional) The ID of the component. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder codeVulnerabilityFilePaths(FilterFilterCriteriaCodeVulnerabilityFilePathArgs... codeVulnerabilityFilePaths) {
            return codeVulnerabilityFilePaths(List.of(codeVulnerabilityFilePaths));
        }

        /**
         * @param componentIds (Optional) The ID of the component. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder componentIds(@Nullable Output<List<FilterFilterCriteriaComponentIdArgs>> componentIds) {
            $.componentIds = componentIds;
            return this;
        }

        /**
         * @param componentIds (Optional) The ID of the component. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder componentIds(List<FilterFilterCriteriaComponentIdArgs> componentIds) {
            return componentIds(Output.of(componentIds));
        }

        /**
         * @param componentIds (Optional) The ID of the component. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder componentIds(FilterFilterCriteriaComponentIdArgs... componentIds) {
            return componentIds(List.of(componentIds));
        }

        /**
         * @param componentTypes (Optional) The type of the component. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder componentTypes(@Nullable Output<List<FilterFilterCriteriaComponentTypeArgs>> componentTypes) {
            $.componentTypes = componentTypes;
            return this;
        }

        /**
         * @param componentTypes (Optional) The type of the component. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder componentTypes(List<FilterFilterCriteriaComponentTypeArgs> componentTypes) {
            return componentTypes(Output.of(componentTypes));
        }

        /**
         * @param componentTypes (Optional) The type of the component. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder componentTypes(FilterFilterCriteriaComponentTypeArgs... componentTypes) {
            return componentTypes(List.of(componentTypes));
        }

        /**
         * @param ec2InstanceImageIds (Optional) The ID of the Amazon Machine Image (AMI). Documented below.
         * 
         * @return builder
         * 
         */
        public Builder ec2InstanceImageIds(@Nullable Output<List<FilterFilterCriteriaEc2InstanceImageIdArgs>> ec2InstanceImageIds) {
            $.ec2InstanceImageIds = ec2InstanceImageIds;
            return this;
        }

        /**
         * @param ec2InstanceImageIds (Optional) The ID of the Amazon Machine Image (AMI). Documented below.
         * 
         * @return builder
         * 
         */
        public Builder ec2InstanceImageIds(List<FilterFilterCriteriaEc2InstanceImageIdArgs> ec2InstanceImageIds) {
            return ec2InstanceImageIds(Output.of(ec2InstanceImageIds));
        }

        /**
         * @param ec2InstanceImageIds (Optional) The ID of the Amazon Machine Image (AMI). Documented below.
         * 
         * @return builder
         * 
         */
        public Builder ec2InstanceImageIds(FilterFilterCriteriaEc2InstanceImageIdArgs... ec2InstanceImageIds) {
            return ec2InstanceImageIds(List.of(ec2InstanceImageIds));
        }

        /**
         * @param ec2InstanceSubnetIds (Optional) The ID of the subnet. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder ec2InstanceSubnetIds(@Nullable Output<List<FilterFilterCriteriaEc2InstanceSubnetIdArgs>> ec2InstanceSubnetIds) {
            $.ec2InstanceSubnetIds = ec2InstanceSubnetIds;
            return this;
        }

        /**
         * @param ec2InstanceSubnetIds (Optional) The ID of the subnet. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder ec2InstanceSubnetIds(List<FilterFilterCriteriaEc2InstanceSubnetIdArgs> ec2InstanceSubnetIds) {
            return ec2InstanceSubnetIds(Output.of(ec2InstanceSubnetIds));
        }

        /**
         * @param ec2InstanceSubnetIds (Optional) The ID of the subnet. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder ec2InstanceSubnetIds(FilterFilterCriteriaEc2InstanceSubnetIdArgs... ec2InstanceSubnetIds) {
            return ec2InstanceSubnetIds(List.of(ec2InstanceSubnetIds));
        }

        /**
         * @param ec2InstanceVpcIds (Optional) The ID of the VPC. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder ec2InstanceVpcIds(@Nullable Output<List<FilterFilterCriteriaEc2InstanceVpcIdArgs>> ec2InstanceVpcIds) {
            $.ec2InstanceVpcIds = ec2InstanceVpcIds;
            return this;
        }

        /**
         * @param ec2InstanceVpcIds (Optional) The ID of the VPC. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder ec2InstanceVpcIds(List<FilterFilterCriteriaEc2InstanceVpcIdArgs> ec2InstanceVpcIds) {
            return ec2InstanceVpcIds(Output.of(ec2InstanceVpcIds));
        }

        /**
         * @param ec2InstanceVpcIds (Optional) The ID of the VPC. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder ec2InstanceVpcIds(FilterFilterCriteriaEc2InstanceVpcIdArgs... ec2InstanceVpcIds) {
            return ec2InstanceVpcIds(List.of(ec2InstanceVpcIds));
        }

        /**
         * @param ecrImageArchitectures (Optional) The architecture of the ECR image. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder ecrImageArchitectures(@Nullable Output<List<FilterFilterCriteriaEcrImageArchitectureArgs>> ecrImageArchitectures) {
            $.ecrImageArchitectures = ecrImageArchitectures;
            return this;
        }

        /**
         * @param ecrImageArchitectures (Optional) The architecture of the ECR image. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder ecrImageArchitectures(List<FilterFilterCriteriaEcrImageArchitectureArgs> ecrImageArchitectures) {
            return ecrImageArchitectures(Output.of(ecrImageArchitectures));
        }

        /**
         * @param ecrImageArchitectures (Optional) The architecture of the ECR image. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder ecrImageArchitectures(FilterFilterCriteriaEcrImageArchitectureArgs... ecrImageArchitectures) {
            return ecrImageArchitectures(List.of(ecrImageArchitectures));
        }

        /**
         * @param ecrImageHashes (Optional) The SHA256 hash of the ECR image. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder ecrImageHashes(@Nullable Output<List<FilterFilterCriteriaEcrImageHashArgs>> ecrImageHashes) {
            $.ecrImageHashes = ecrImageHashes;
            return this;
        }

        /**
         * @param ecrImageHashes (Optional) The SHA256 hash of the ECR image. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder ecrImageHashes(List<FilterFilterCriteriaEcrImageHashArgs> ecrImageHashes) {
            return ecrImageHashes(Output.of(ecrImageHashes));
        }

        /**
         * @param ecrImageHashes (Optional) The SHA256 hash of the ECR image. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder ecrImageHashes(FilterFilterCriteriaEcrImageHashArgs... ecrImageHashes) {
            return ecrImageHashes(List.of(ecrImageHashes));
        }

        /**
         * @param ecrImagePushedAts (Optional) The date range when the image was pushed. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder ecrImagePushedAts(@Nullable Output<List<FilterFilterCriteriaEcrImagePushedAtArgs>> ecrImagePushedAts) {
            $.ecrImagePushedAts = ecrImagePushedAts;
            return this;
        }

        /**
         * @param ecrImagePushedAts (Optional) The date range when the image was pushed. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder ecrImagePushedAts(List<FilterFilterCriteriaEcrImagePushedAtArgs> ecrImagePushedAts) {
            return ecrImagePushedAts(Output.of(ecrImagePushedAts));
        }

        /**
         * @param ecrImagePushedAts (Optional) The date range when the image was pushed. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder ecrImagePushedAts(FilterFilterCriteriaEcrImagePushedAtArgs... ecrImagePushedAts) {
            return ecrImagePushedAts(List.of(ecrImagePushedAts));
        }

        /**
         * @param ecrImageRegistries (Optional) The registry of the ECR image. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder ecrImageRegistries(@Nullable Output<List<FilterFilterCriteriaEcrImageRegistryArgs>> ecrImageRegistries) {
            $.ecrImageRegistries = ecrImageRegistries;
            return this;
        }

        /**
         * @param ecrImageRegistries (Optional) The registry of the ECR image. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder ecrImageRegistries(List<FilterFilterCriteriaEcrImageRegistryArgs> ecrImageRegistries) {
            return ecrImageRegistries(Output.of(ecrImageRegistries));
        }

        /**
         * @param ecrImageRegistries (Optional) The registry of the ECR image. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder ecrImageRegistries(FilterFilterCriteriaEcrImageRegistryArgs... ecrImageRegistries) {
            return ecrImageRegistries(List.of(ecrImageRegistries));
        }

        /**
         * @param ecrImageRepositoryNames (Optional) The name of the ECR repository. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder ecrImageRepositoryNames(@Nullable Output<List<FilterFilterCriteriaEcrImageRepositoryNameArgs>> ecrImageRepositoryNames) {
            $.ecrImageRepositoryNames = ecrImageRepositoryNames;
            return this;
        }

        /**
         * @param ecrImageRepositoryNames (Optional) The name of the ECR repository. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder ecrImageRepositoryNames(List<FilterFilterCriteriaEcrImageRepositoryNameArgs> ecrImageRepositoryNames) {
            return ecrImageRepositoryNames(Output.of(ecrImageRepositoryNames));
        }

        /**
         * @param ecrImageRepositoryNames (Optional) The name of the ECR repository. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder ecrImageRepositoryNames(FilterFilterCriteriaEcrImageRepositoryNameArgs... ecrImageRepositoryNames) {
            return ecrImageRepositoryNames(List.of(ecrImageRepositoryNames));
        }

        /**
         * @param ecrImageTags (Optional) The tags associated with the ECR image. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder ecrImageTags(@Nullable Output<List<FilterFilterCriteriaEcrImageTagArgs>> ecrImageTags) {
            $.ecrImageTags = ecrImageTags;
            return this;
        }

        /**
         * @param ecrImageTags (Optional) The tags associated with the ECR image. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder ecrImageTags(List<FilterFilterCriteriaEcrImageTagArgs> ecrImageTags) {
            return ecrImageTags(Output.of(ecrImageTags));
        }

        /**
         * @param ecrImageTags (Optional) The tags associated with the ECR image. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder ecrImageTags(FilterFilterCriteriaEcrImageTagArgs... ecrImageTags) {
            return ecrImageTags(List.of(ecrImageTags));
        }

        /**
         * @param epssScores (Optional) EPSS (Exploit Prediction Scoring System) Score of the finding. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder epssScores(@Nullable Output<List<FilterFilterCriteriaEpssScoreArgs>> epssScores) {
            $.epssScores = epssScores;
            return this;
        }

        /**
         * @param epssScores (Optional) EPSS (Exploit Prediction Scoring System) Score of the finding. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder epssScores(List<FilterFilterCriteriaEpssScoreArgs> epssScores) {
            return epssScores(Output.of(epssScores));
        }

        /**
         * @param epssScores (Optional) EPSS (Exploit Prediction Scoring System) Score of the finding. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder epssScores(FilterFilterCriteriaEpssScoreArgs... epssScores) {
            return epssScores(List.of(epssScores));
        }

        /**
         * @param exploitAvailables (Optional) Availability of exploits. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder exploitAvailables(@Nullable Output<List<FilterFilterCriteriaExploitAvailableArgs>> exploitAvailables) {
            $.exploitAvailables = exploitAvailables;
            return this;
        }

        /**
         * @param exploitAvailables (Optional) Availability of exploits. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder exploitAvailables(List<FilterFilterCriteriaExploitAvailableArgs> exploitAvailables) {
            return exploitAvailables(Output.of(exploitAvailables));
        }

        /**
         * @param exploitAvailables (Optional) Availability of exploits. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder exploitAvailables(FilterFilterCriteriaExploitAvailableArgs... exploitAvailables) {
            return exploitAvailables(List.of(exploitAvailables));
        }

        /**
         * @param findingArns (Optional) The ARN of the finding. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder findingArns(@Nullable Output<List<FilterFilterCriteriaFindingArnArgs>> findingArns) {
            $.findingArns = findingArns;
            return this;
        }

        /**
         * @param findingArns (Optional) The ARN of the finding. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder findingArns(List<FilterFilterCriteriaFindingArnArgs> findingArns) {
            return findingArns(Output.of(findingArns));
        }

        /**
         * @param findingArns (Optional) The ARN of the finding. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder findingArns(FilterFilterCriteriaFindingArnArgs... findingArns) {
            return findingArns(List.of(findingArns));
        }

        /**
         * @param findingStatuses (Optional) The status of the finding. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder findingStatuses(@Nullable Output<List<FilterFilterCriteriaFindingStatusArgs>> findingStatuses) {
            $.findingStatuses = findingStatuses;
            return this;
        }

        /**
         * @param findingStatuses (Optional) The status of the finding. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder findingStatuses(List<FilterFilterCriteriaFindingStatusArgs> findingStatuses) {
            return findingStatuses(Output.of(findingStatuses));
        }

        /**
         * @param findingStatuses (Optional) The status of the finding. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder findingStatuses(FilterFilterCriteriaFindingStatusArgs... findingStatuses) {
            return findingStatuses(List.of(findingStatuses));
        }

        /**
         * @param findingTypes (Optional) The type of the finding. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder findingTypes(@Nullable Output<List<FilterFilterCriteriaFindingTypeArgs>> findingTypes) {
            $.findingTypes = findingTypes;
            return this;
        }

        /**
         * @param findingTypes (Optional) The type of the finding. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder findingTypes(List<FilterFilterCriteriaFindingTypeArgs> findingTypes) {
            return findingTypes(Output.of(findingTypes));
        }

        /**
         * @param findingTypes (Optional) The type of the finding. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder findingTypes(FilterFilterCriteriaFindingTypeArgs... findingTypes) {
            return findingTypes(List.of(findingTypes));
        }

        /**
         * @param firstObservedAts (Optional) When the finding was first observed. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder firstObservedAts(@Nullable Output<List<FilterFilterCriteriaFirstObservedAtArgs>> firstObservedAts) {
            $.firstObservedAts = firstObservedAts;
            return this;
        }

        /**
         * @param firstObservedAts (Optional) When the finding was first observed. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder firstObservedAts(List<FilterFilterCriteriaFirstObservedAtArgs> firstObservedAts) {
            return firstObservedAts(Output.of(firstObservedAts));
        }

        /**
         * @param firstObservedAts (Optional) When the finding was first observed. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder firstObservedAts(FilterFilterCriteriaFirstObservedAtArgs... firstObservedAts) {
            return firstObservedAts(List.of(firstObservedAts));
        }

        /**
         * @param fixAvailables (Optional) Availability of the fix. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder fixAvailables(@Nullable Output<List<FilterFilterCriteriaFixAvailableArgs>> fixAvailables) {
            $.fixAvailables = fixAvailables;
            return this;
        }

        /**
         * @param fixAvailables (Optional) Availability of the fix. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder fixAvailables(List<FilterFilterCriteriaFixAvailableArgs> fixAvailables) {
            return fixAvailables(Output.of(fixAvailables));
        }

        /**
         * @param fixAvailables (Optional) Availability of the fix. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder fixAvailables(FilterFilterCriteriaFixAvailableArgs... fixAvailables) {
            return fixAvailables(List.of(fixAvailables));
        }

        /**
         * @param inspectorScores (Optional) The Inspector score given to the finding. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder inspectorScores(@Nullable Output<List<FilterFilterCriteriaInspectorScoreArgs>> inspectorScores) {
            $.inspectorScores = inspectorScores;
            return this;
        }

        /**
         * @param inspectorScores (Optional) The Inspector score given to the finding. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder inspectorScores(List<FilterFilterCriteriaInspectorScoreArgs> inspectorScores) {
            return inspectorScores(Output.of(inspectorScores));
        }

        /**
         * @param inspectorScores (Optional) The Inspector score given to the finding. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder inspectorScores(FilterFilterCriteriaInspectorScoreArgs... inspectorScores) {
            return inspectorScores(List.of(inspectorScores));
        }

        /**
         * @param lambdaFunctionExecutionRoleArns (Optional) Lambda execution role ARN. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder lambdaFunctionExecutionRoleArns(@Nullable Output<List<FilterFilterCriteriaLambdaFunctionExecutionRoleArnArgs>> lambdaFunctionExecutionRoleArns) {
            $.lambdaFunctionExecutionRoleArns = lambdaFunctionExecutionRoleArns;
            return this;
        }

        /**
         * @param lambdaFunctionExecutionRoleArns (Optional) Lambda execution role ARN. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder lambdaFunctionExecutionRoleArns(List<FilterFilterCriteriaLambdaFunctionExecutionRoleArnArgs> lambdaFunctionExecutionRoleArns) {
            return lambdaFunctionExecutionRoleArns(Output.of(lambdaFunctionExecutionRoleArns));
        }

        /**
         * @param lambdaFunctionExecutionRoleArns (Optional) Lambda execution role ARN. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder lambdaFunctionExecutionRoleArns(FilterFilterCriteriaLambdaFunctionExecutionRoleArnArgs... lambdaFunctionExecutionRoleArns) {
            return lambdaFunctionExecutionRoleArns(List.of(lambdaFunctionExecutionRoleArns));
        }

        /**
         * @param lambdaFunctionLastModifiedAts (Optional) Last modified timestamp of the lambda function. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder lambdaFunctionLastModifiedAts(@Nullable Output<List<FilterFilterCriteriaLambdaFunctionLastModifiedAtArgs>> lambdaFunctionLastModifiedAts) {
            $.lambdaFunctionLastModifiedAts = lambdaFunctionLastModifiedAts;
            return this;
        }

        /**
         * @param lambdaFunctionLastModifiedAts (Optional) Last modified timestamp of the lambda function. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder lambdaFunctionLastModifiedAts(List<FilterFilterCriteriaLambdaFunctionLastModifiedAtArgs> lambdaFunctionLastModifiedAts) {
            return lambdaFunctionLastModifiedAts(Output.of(lambdaFunctionLastModifiedAts));
        }

        /**
         * @param lambdaFunctionLastModifiedAts (Optional) Last modified timestamp of the lambda function. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder lambdaFunctionLastModifiedAts(FilterFilterCriteriaLambdaFunctionLastModifiedAtArgs... lambdaFunctionLastModifiedAts) {
            return lambdaFunctionLastModifiedAts(List.of(lambdaFunctionLastModifiedAts));
        }

        /**
         * @param lambdaFunctionLayers (Optional) Lambda function layers. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder lambdaFunctionLayers(@Nullable Output<List<FilterFilterCriteriaLambdaFunctionLayerArgs>> lambdaFunctionLayers) {
            $.lambdaFunctionLayers = lambdaFunctionLayers;
            return this;
        }

        /**
         * @param lambdaFunctionLayers (Optional) Lambda function layers. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder lambdaFunctionLayers(List<FilterFilterCriteriaLambdaFunctionLayerArgs> lambdaFunctionLayers) {
            return lambdaFunctionLayers(Output.of(lambdaFunctionLayers));
        }

        /**
         * @param lambdaFunctionLayers (Optional) Lambda function layers. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder lambdaFunctionLayers(FilterFilterCriteriaLambdaFunctionLayerArgs... lambdaFunctionLayers) {
            return lambdaFunctionLayers(List.of(lambdaFunctionLayers));
        }

        /**
         * @param lambdaFunctionNames (Optional) Lambda function name. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder lambdaFunctionNames(@Nullable Output<List<FilterFilterCriteriaLambdaFunctionNameArgs>> lambdaFunctionNames) {
            $.lambdaFunctionNames = lambdaFunctionNames;
            return this;
        }

        /**
         * @param lambdaFunctionNames (Optional) Lambda function name. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder lambdaFunctionNames(List<FilterFilterCriteriaLambdaFunctionNameArgs> lambdaFunctionNames) {
            return lambdaFunctionNames(Output.of(lambdaFunctionNames));
        }

        /**
         * @param lambdaFunctionNames (Optional) Lambda function name. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder lambdaFunctionNames(FilterFilterCriteriaLambdaFunctionNameArgs... lambdaFunctionNames) {
            return lambdaFunctionNames(List.of(lambdaFunctionNames));
        }

        /**
         * @param lambdaFunctionRuntimes (Optional) Lambda function runtime. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder lambdaFunctionRuntimes(@Nullable Output<List<FilterFilterCriteriaLambdaFunctionRuntimeArgs>> lambdaFunctionRuntimes) {
            $.lambdaFunctionRuntimes = lambdaFunctionRuntimes;
            return this;
        }

        /**
         * @param lambdaFunctionRuntimes (Optional) Lambda function runtime. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder lambdaFunctionRuntimes(List<FilterFilterCriteriaLambdaFunctionRuntimeArgs> lambdaFunctionRuntimes) {
            return lambdaFunctionRuntimes(Output.of(lambdaFunctionRuntimes));
        }

        /**
         * @param lambdaFunctionRuntimes (Optional) Lambda function runtime. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder lambdaFunctionRuntimes(FilterFilterCriteriaLambdaFunctionRuntimeArgs... lambdaFunctionRuntimes) {
            return lambdaFunctionRuntimes(List.of(lambdaFunctionRuntimes));
        }

        /**
         * @param lastObservedAts (Optional) When the finding was last observed. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder lastObservedAts(@Nullable Output<List<FilterFilterCriteriaLastObservedAtArgs>> lastObservedAts) {
            $.lastObservedAts = lastObservedAts;
            return this;
        }

        /**
         * @param lastObservedAts (Optional) When the finding was last observed. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder lastObservedAts(List<FilterFilterCriteriaLastObservedAtArgs> lastObservedAts) {
            return lastObservedAts(Output.of(lastObservedAts));
        }

        /**
         * @param lastObservedAts (Optional) When the finding was last observed. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder lastObservedAts(FilterFilterCriteriaLastObservedAtArgs... lastObservedAts) {
            return lastObservedAts(List.of(lastObservedAts));
        }

        /**
         * @param networkProtocols (Optional) The network protocol of the finding. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder networkProtocols(@Nullable Output<List<FilterFilterCriteriaNetworkProtocolArgs>> networkProtocols) {
            $.networkProtocols = networkProtocols;
            return this;
        }

        /**
         * @param networkProtocols (Optional) The network protocol of the finding. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder networkProtocols(List<FilterFilterCriteriaNetworkProtocolArgs> networkProtocols) {
            return networkProtocols(Output.of(networkProtocols));
        }

        /**
         * @param networkProtocols (Optional) The network protocol of the finding. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder networkProtocols(FilterFilterCriteriaNetworkProtocolArgs... networkProtocols) {
            return networkProtocols(List.of(networkProtocols));
        }

        /**
         * @param portRanges (Optional) The port range of the finding. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder portRanges(@Nullable Output<List<FilterFilterCriteriaPortRangeArgs>> portRanges) {
            $.portRanges = portRanges;
            return this;
        }

        /**
         * @param portRanges (Optional) The port range of the finding. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder portRanges(List<FilterFilterCriteriaPortRangeArgs> portRanges) {
            return portRanges(Output.of(portRanges));
        }

        /**
         * @param portRanges (Optional) The port range of the finding. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder portRanges(FilterFilterCriteriaPortRangeArgs... portRanges) {
            return portRanges(List.of(portRanges));
        }

        /**
         * @param relatedVulnerabilities (Optional) Related vulnerabilities. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder relatedVulnerabilities(@Nullable Output<List<FilterFilterCriteriaRelatedVulnerabilityArgs>> relatedVulnerabilities) {
            $.relatedVulnerabilities = relatedVulnerabilities;
            return this;
        }

        /**
         * @param relatedVulnerabilities (Optional) Related vulnerabilities. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder relatedVulnerabilities(List<FilterFilterCriteriaRelatedVulnerabilityArgs> relatedVulnerabilities) {
            return relatedVulnerabilities(Output.of(relatedVulnerabilities));
        }

        /**
         * @param relatedVulnerabilities (Optional) Related vulnerabilities. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder relatedVulnerabilities(FilterFilterCriteriaRelatedVulnerabilityArgs... relatedVulnerabilities) {
            return relatedVulnerabilities(List.of(relatedVulnerabilities));
        }

        /**
         * @param resourceIds (Optional) The ID of the resource. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder resourceIds(@Nullable Output<List<FilterFilterCriteriaResourceIdArgs>> resourceIds) {
            $.resourceIds = resourceIds;
            return this;
        }

        /**
         * @param resourceIds (Optional) The ID of the resource. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder resourceIds(List<FilterFilterCriteriaResourceIdArgs> resourceIds) {
            return resourceIds(Output.of(resourceIds));
        }

        /**
         * @param resourceIds (Optional) The ID of the resource. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder resourceIds(FilterFilterCriteriaResourceIdArgs... resourceIds) {
            return resourceIds(List.of(resourceIds));
        }

        /**
         * @param resourceTags (Optional) The tags of the resource. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder resourceTags(@Nullable Output<List<FilterFilterCriteriaResourceTagArgs>> resourceTags) {
            $.resourceTags = resourceTags;
            return this;
        }

        /**
         * @param resourceTags (Optional) The tags of the resource. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder resourceTags(List<FilterFilterCriteriaResourceTagArgs> resourceTags) {
            return resourceTags(Output.of(resourceTags));
        }

        /**
         * @param resourceTags (Optional) The tags of the resource. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder resourceTags(FilterFilterCriteriaResourceTagArgs... resourceTags) {
            return resourceTags(List.of(resourceTags));
        }

        /**
         * @param resourceTypes (Optional) The type of the resource. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder resourceTypes(@Nullable Output<List<FilterFilterCriteriaResourceTypeArgs>> resourceTypes) {
            $.resourceTypes = resourceTypes;
            return this;
        }

        /**
         * @param resourceTypes (Optional) The type of the resource. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder resourceTypes(List<FilterFilterCriteriaResourceTypeArgs> resourceTypes) {
            return resourceTypes(Output.of(resourceTypes));
        }

        /**
         * @param resourceTypes (Optional) The type of the resource. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder resourceTypes(FilterFilterCriteriaResourceTypeArgs... resourceTypes) {
            return resourceTypes(List.of(resourceTypes));
        }

        /**
         * @param severities (Optional) The severity of the finding. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder severities(@Nullable Output<List<FilterFilterCriteriaSeverityArgs>> severities) {
            $.severities = severities;
            return this;
        }

        /**
         * @param severities (Optional) The severity of the finding. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder severities(List<FilterFilterCriteriaSeverityArgs> severities) {
            return severities(Output.of(severities));
        }

        /**
         * @param severities (Optional) The severity of the finding. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder severities(FilterFilterCriteriaSeverityArgs... severities) {
            return severities(List.of(severities));
        }

        /**
         * @param titles (Optional) The title of the finding. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder titles(@Nullable Output<List<FilterFilterCriteriaTitleArgs>> titles) {
            $.titles = titles;
            return this;
        }

        /**
         * @param titles (Optional) The title of the finding. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder titles(List<FilterFilterCriteriaTitleArgs> titles) {
            return titles(Output.of(titles));
        }

        /**
         * @param titles (Optional) The title of the finding. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder titles(FilterFilterCriteriaTitleArgs... titles) {
            return titles(List.of(titles));
        }

        /**
         * @param updatedAts (Optional) When the finding was last updated. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder updatedAts(@Nullable Output<List<FilterFilterCriteriaUpdatedAtArgs>> updatedAts) {
            $.updatedAts = updatedAts;
            return this;
        }

        /**
         * @param updatedAts (Optional) When the finding was last updated. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder updatedAts(List<FilterFilterCriteriaUpdatedAtArgs> updatedAts) {
            return updatedAts(Output.of(updatedAts));
        }

        /**
         * @param updatedAts (Optional) When the finding was last updated. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder updatedAts(FilterFilterCriteriaUpdatedAtArgs... updatedAts) {
            return updatedAts(List.of(updatedAts));
        }

        /**
         * @param vendorSeverities (Optional) The severity as reported by the vendor. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder vendorSeverities(@Nullable Output<List<FilterFilterCriteriaVendorSeverityArgs>> vendorSeverities) {
            $.vendorSeverities = vendorSeverities;
            return this;
        }

        /**
         * @param vendorSeverities (Optional) The severity as reported by the vendor. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder vendorSeverities(List<FilterFilterCriteriaVendorSeverityArgs> vendorSeverities) {
            return vendorSeverities(Output.of(vendorSeverities));
        }

        /**
         * @param vendorSeverities (Optional) The severity as reported by the vendor. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder vendorSeverities(FilterFilterCriteriaVendorSeverityArgs... vendorSeverities) {
            return vendorSeverities(List.of(vendorSeverities));
        }

        /**
         * @param vulnerabilityIds (Optional) The ID of the vulnerability. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder vulnerabilityIds(@Nullable Output<List<FilterFilterCriteriaVulnerabilityIdArgs>> vulnerabilityIds) {
            $.vulnerabilityIds = vulnerabilityIds;
            return this;
        }

        /**
         * @param vulnerabilityIds (Optional) The ID of the vulnerability. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder vulnerabilityIds(List<FilterFilterCriteriaVulnerabilityIdArgs> vulnerabilityIds) {
            return vulnerabilityIds(Output.of(vulnerabilityIds));
        }

        /**
         * @param vulnerabilityIds (Optional) The ID of the vulnerability. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder vulnerabilityIds(FilterFilterCriteriaVulnerabilityIdArgs... vulnerabilityIds) {
            return vulnerabilityIds(List.of(vulnerabilityIds));
        }

        /**
         * @param vulnerabilitySources (Optional) The source of the vulnerability. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder vulnerabilitySources(@Nullable Output<List<FilterFilterCriteriaVulnerabilitySourceArgs>> vulnerabilitySources) {
            $.vulnerabilitySources = vulnerabilitySources;
            return this;
        }

        /**
         * @param vulnerabilitySources (Optional) The source of the vulnerability. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder vulnerabilitySources(List<FilterFilterCriteriaVulnerabilitySourceArgs> vulnerabilitySources) {
            return vulnerabilitySources(Output.of(vulnerabilitySources));
        }

        /**
         * @param vulnerabilitySources (Optional) The source of the vulnerability. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder vulnerabilitySources(FilterFilterCriteriaVulnerabilitySourceArgs... vulnerabilitySources) {
            return vulnerabilitySources(List.of(vulnerabilitySources));
        }

        /**
         * @param vulnerablePackages (Optional) Details about vulnerable packages. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder vulnerablePackages(@Nullable Output<List<FilterFilterCriteriaVulnerablePackageArgs>> vulnerablePackages) {
            $.vulnerablePackages = vulnerablePackages;
            return this;
        }

        /**
         * @param vulnerablePackages (Optional) Details about vulnerable packages. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder vulnerablePackages(List<FilterFilterCriteriaVulnerablePackageArgs> vulnerablePackages) {
            return vulnerablePackages(Output.of(vulnerablePackages));
        }

        /**
         * @param vulnerablePackages (Optional) Details about vulnerable packages. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder vulnerablePackages(FilterFilterCriteriaVulnerablePackageArgs... vulnerablePackages) {
            return vulnerablePackages(List.of(vulnerablePackages));
        }

        public FilterFilterCriteriaArgs build() {
            return $;
        }
    }

}
