// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.pipes.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class PipeTargetParametersLambdaFunctionParametersArgs extends com.pulumi.resources.ResourceArgs {

    public static final PipeTargetParametersLambdaFunctionParametersArgs Empty = new PipeTargetParametersLambdaFunctionParametersArgs();

    @Import(name="invocationType", required=true)
    private Output<String> invocationType;

    public Output<String> invocationType() {
        return this.invocationType;
    }

    private PipeTargetParametersLambdaFunctionParametersArgs() {}

    private PipeTargetParametersLambdaFunctionParametersArgs(PipeTargetParametersLambdaFunctionParametersArgs $) {
        this.invocationType = $.invocationType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PipeTargetParametersLambdaFunctionParametersArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PipeTargetParametersLambdaFunctionParametersArgs $;

        public Builder() {
            $ = new PipeTargetParametersLambdaFunctionParametersArgs();
        }

        public Builder(PipeTargetParametersLambdaFunctionParametersArgs defaults) {
            $ = new PipeTargetParametersLambdaFunctionParametersArgs(Objects.requireNonNull(defaults));
        }

        public Builder invocationType(Output<String> invocationType) {
            $.invocationType = invocationType;
            return this;
        }

        public Builder invocationType(String invocationType) {
            return invocationType(Output.of(invocationType));
        }

        public PipeTargetParametersLambdaFunctionParametersArgs build() {
            if ($.invocationType == null) {
                throw new MissingRequiredPropertyException("PipeTargetParametersLambdaFunctionParametersArgs", "invocationType");
            }
            return $;
        }
    }

}
