// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetThemeConfigurationUiColorPalette {
    /**
     * @return Color (hexadecimal) that applies to selected states and buttons.
     * 
     */
    private String accent;
    /**
     * @return Color (hexadecimal) that applies to any text or other elements that appear over the accent color.
     * 
     */
    private String accentForeground;
    /**
     * @return Color (hexadecimal) that applies to error messages.
     * 
     */
    private String danger;
    /**
     * @return Color (hexadecimal) that applies to any text or other elements that appear over the error color.
     * 
     */
    private String dangerForeground;
    /**
     * @return Color (hexadecimal) that applies to the names of fields that are identified as dimensions.
     * 
     */
    private String dimension;
    /**
     * @return Color (hexadecimal) that applies to any text or other elements that appear over the dimension color.
     * 
     */
    private String dimensionForeground;
    /**
     * @return Color (hexadecimal) that applies to the names of fields that are identified as measures.
     * 
     */
    private String measure;
    /**
     * @return Color (hexadecimal) that applies to any text or other elements that appear over the measure color.
     * 
     */
    private String measureForeground;
    /**
     * @return Color (hexadecimal) that applies to visuals and other high emphasis UI.
     * 
     */
    private String primaryBackground;
    /**
     * @return Color (hexadecimal) of text and other foreground elements that appear over the primary background regions, such as grid lines, borders, table banding, icons, and so on.
     * 
     */
    private String primaryForeground;
    /**
     * @return Color (hexadecimal) that applies to the sheet background and sheet controls.
     * 
     */
    private String secondaryBackground;
    /**
     * @return Color (hexadecimal) that applies to any sheet title, sheet control text, or UI that appears over the secondary background.
     * 
     */
    private String secondaryForeground;
    /**
     * @return Color (hexadecimal) that applies to success messages, for example the check mark for a successful download.
     * 
     */
    private String success;
    /**
     * @return Color (hexadecimal) that applies to any text or other elements that appear over the success color.
     * 
     */
    private String successForeground;
    /**
     * @return Color (hexadecimal) that applies to warning and informational messages.
     * 
     */
    private String warning;
    /**
     * @return Color (hexadecimal) that applies to any text or other elements that appear over the warning color.
     * 
     */
    private String warningForeground;

    private GetThemeConfigurationUiColorPalette() {}
    /**
     * @return Color (hexadecimal) that applies to selected states and buttons.
     * 
     */
    public String accent() {
        return this.accent;
    }
    /**
     * @return Color (hexadecimal) that applies to any text or other elements that appear over the accent color.
     * 
     */
    public String accentForeground() {
        return this.accentForeground;
    }
    /**
     * @return Color (hexadecimal) that applies to error messages.
     * 
     */
    public String danger() {
        return this.danger;
    }
    /**
     * @return Color (hexadecimal) that applies to any text or other elements that appear over the error color.
     * 
     */
    public String dangerForeground() {
        return this.dangerForeground;
    }
    /**
     * @return Color (hexadecimal) that applies to the names of fields that are identified as dimensions.
     * 
     */
    public String dimension() {
        return this.dimension;
    }
    /**
     * @return Color (hexadecimal) that applies to any text or other elements that appear over the dimension color.
     * 
     */
    public String dimensionForeground() {
        return this.dimensionForeground;
    }
    /**
     * @return Color (hexadecimal) that applies to the names of fields that are identified as measures.
     * 
     */
    public String measure() {
        return this.measure;
    }
    /**
     * @return Color (hexadecimal) that applies to any text or other elements that appear over the measure color.
     * 
     */
    public String measureForeground() {
        return this.measureForeground;
    }
    /**
     * @return Color (hexadecimal) that applies to visuals and other high emphasis UI.
     * 
     */
    public String primaryBackground() {
        return this.primaryBackground;
    }
    /**
     * @return Color (hexadecimal) of text and other foreground elements that appear over the primary background regions, such as grid lines, borders, table banding, icons, and so on.
     * 
     */
    public String primaryForeground() {
        return this.primaryForeground;
    }
    /**
     * @return Color (hexadecimal) that applies to the sheet background and sheet controls.
     * 
     */
    public String secondaryBackground() {
        return this.secondaryBackground;
    }
    /**
     * @return Color (hexadecimal) that applies to any sheet title, sheet control text, or UI that appears over the secondary background.
     * 
     */
    public String secondaryForeground() {
        return this.secondaryForeground;
    }
    /**
     * @return Color (hexadecimal) that applies to success messages, for example the check mark for a successful download.
     * 
     */
    public String success() {
        return this.success;
    }
    /**
     * @return Color (hexadecimal) that applies to any text or other elements that appear over the success color.
     * 
     */
    public String successForeground() {
        return this.successForeground;
    }
    /**
     * @return Color (hexadecimal) that applies to warning and informational messages.
     * 
     */
    public String warning() {
        return this.warning;
    }
    /**
     * @return Color (hexadecimal) that applies to any text or other elements that appear over the warning color.
     * 
     */
    public String warningForeground() {
        return this.warningForeground;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetThemeConfigurationUiColorPalette defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accent;
        private String accentForeground;
        private String danger;
        private String dangerForeground;
        private String dimension;
        private String dimensionForeground;
        private String measure;
        private String measureForeground;
        private String primaryBackground;
        private String primaryForeground;
        private String secondaryBackground;
        private String secondaryForeground;
        private String success;
        private String successForeground;
        private String warning;
        private String warningForeground;
        public Builder() {}
        public Builder(GetThemeConfigurationUiColorPalette defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accent = defaults.accent;
    	      this.accentForeground = defaults.accentForeground;
    	      this.danger = defaults.danger;
    	      this.dangerForeground = defaults.dangerForeground;
    	      this.dimension = defaults.dimension;
    	      this.dimensionForeground = defaults.dimensionForeground;
    	      this.measure = defaults.measure;
    	      this.measureForeground = defaults.measureForeground;
    	      this.primaryBackground = defaults.primaryBackground;
    	      this.primaryForeground = defaults.primaryForeground;
    	      this.secondaryBackground = defaults.secondaryBackground;
    	      this.secondaryForeground = defaults.secondaryForeground;
    	      this.success = defaults.success;
    	      this.successForeground = defaults.successForeground;
    	      this.warning = defaults.warning;
    	      this.warningForeground = defaults.warningForeground;
        }

        @CustomType.Setter
        public Builder accent(String accent) {
            if (accent == null) {
              throw new MissingRequiredPropertyException("GetThemeConfigurationUiColorPalette", "accent");
            }
            this.accent = accent;
            return this;
        }
        @CustomType.Setter
        public Builder accentForeground(String accentForeground) {
            if (accentForeground == null) {
              throw new MissingRequiredPropertyException("GetThemeConfigurationUiColorPalette", "accentForeground");
            }
            this.accentForeground = accentForeground;
            return this;
        }
        @CustomType.Setter
        public Builder danger(String danger) {
            if (danger == null) {
              throw new MissingRequiredPropertyException("GetThemeConfigurationUiColorPalette", "danger");
            }
            this.danger = danger;
            return this;
        }
        @CustomType.Setter
        public Builder dangerForeground(String dangerForeground) {
            if (dangerForeground == null) {
              throw new MissingRequiredPropertyException("GetThemeConfigurationUiColorPalette", "dangerForeground");
            }
            this.dangerForeground = dangerForeground;
            return this;
        }
        @CustomType.Setter
        public Builder dimension(String dimension) {
            if (dimension == null) {
              throw new MissingRequiredPropertyException("GetThemeConfigurationUiColorPalette", "dimension");
            }
            this.dimension = dimension;
            return this;
        }
        @CustomType.Setter
        public Builder dimensionForeground(String dimensionForeground) {
            if (dimensionForeground == null) {
              throw new MissingRequiredPropertyException("GetThemeConfigurationUiColorPalette", "dimensionForeground");
            }
            this.dimensionForeground = dimensionForeground;
            return this;
        }
        @CustomType.Setter
        public Builder measure(String measure) {
            if (measure == null) {
              throw new MissingRequiredPropertyException("GetThemeConfigurationUiColorPalette", "measure");
            }
            this.measure = measure;
            return this;
        }
        @CustomType.Setter
        public Builder measureForeground(String measureForeground) {
            if (measureForeground == null) {
              throw new MissingRequiredPropertyException("GetThemeConfigurationUiColorPalette", "measureForeground");
            }
            this.measureForeground = measureForeground;
            return this;
        }
        @CustomType.Setter
        public Builder primaryBackground(String primaryBackground) {
            if (primaryBackground == null) {
              throw new MissingRequiredPropertyException("GetThemeConfigurationUiColorPalette", "primaryBackground");
            }
            this.primaryBackground = primaryBackground;
            return this;
        }
        @CustomType.Setter
        public Builder primaryForeground(String primaryForeground) {
            if (primaryForeground == null) {
              throw new MissingRequiredPropertyException("GetThemeConfigurationUiColorPalette", "primaryForeground");
            }
            this.primaryForeground = primaryForeground;
            return this;
        }
        @CustomType.Setter
        public Builder secondaryBackground(String secondaryBackground) {
            if (secondaryBackground == null) {
              throw new MissingRequiredPropertyException("GetThemeConfigurationUiColorPalette", "secondaryBackground");
            }
            this.secondaryBackground = secondaryBackground;
            return this;
        }
        @CustomType.Setter
        public Builder secondaryForeground(String secondaryForeground) {
            if (secondaryForeground == null) {
              throw new MissingRequiredPropertyException("GetThemeConfigurationUiColorPalette", "secondaryForeground");
            }
            this.secondaryForeground = secondaryForeground;
            return this;
        }
        @CustomType.Setter
        public Builder success(String success) {
            if (success == null) {
              throw new MissingRequiredPropertyException("GetThemeConfigurationUiColorPalette", "success");
            }
            this.success = success;
            return this;
        }
        @CustomType.Setter
        public Builder successForeground(String successForeground) {
            if (successForeground == null) {
              throw new MissingRequiredPropertyException("GetThemeConfigurationUiColorPalette", "successForeground");
            }
            this.successForeground = successForeground;
            return this;
        }
        @CustomType.Setter
        public Builder warning(String warning) {
            if (warning == null) {
              throw new MissingRequiredPropertyException("GetThemeConfigurationUiColorPalette", "warning");
            }
            this.warning = warning;
            return this;
        }
        @CustomType.Setter
        public Builder warningForeground(String warningForeground) {
            if (warningForeground == null) {
              throw new MissingRequiredPropertyException("GetThemeConfigurationUiColorPalette", "warningForeground");
            }
            this.warningForeground = warningForeground;
            return this;
        }
        public GetThemeConfigurationUiColorPalette build() {
            final var _resultValue = new GetThemeConfigurationUiColorPalette();
            _resultValue.accent = accent;
            _resultValue.accentForeground = accentForeground;
            _resultValue.danger = danger;
            _resultValue.dangerForeground = dangerForeground;
            _resultValue.dimension = dimension;
            _resultValue.dimensionForeground = dimensionForeground;
            _resultValue.measure = measure;
            _resultValue.measureForeground = measureForeground;
            _resultValue.primaryBackground = primaryBackground;
            _resultValue.primaryForeground = primaryForeground;
            _resultValue.secondaryBackground = secondaryBackground;
            _resultValue.secondaryForeground = secondaryForeground;
            _resultValue.success = success;
            _resultValue.successForeground = successForeground;
            _resultValue.warning = warning;
            _resultValue.warningForeground = warningForeground;
            return _resultValue;
        }
    }
}
