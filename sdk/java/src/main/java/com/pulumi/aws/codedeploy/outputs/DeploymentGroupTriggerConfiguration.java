// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.codedeploy.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class DeploymentGroupTriggerConfiguration {
    /**
     * @return The event type or types for which notifications are triggered. Some values that are supported: `DeploymentStart`, `DeploymentSuccess`, `DeploymentFailure`, `DeploymentStop`, `DeploymentRollback`, `InstanceStart`, `InstanceSuccess`, `InstanceFailure`.  See [the CodeDeploy documentation](http://docs.aws.amazon.com/codedeploy/latest/userguide/monitoring-sns-event-notifications-create-trigger.html) for all possible values.
     * 
     */
    private List<String> triggerEvents;
    /**
     * @return The name of the notification trigger.
     * 
     */
    private String triggerName;
    /**
     * @return The ARN of the SNS topic through which notifications are sent.
     * 
     */
    private String triggerTargetArn;

    private DeploymentGroupTriggerConfiguration() {}
    /**
     * @return The event type or types for which notifications are triggered. Some values that are supported: `DeploymentStart`, `DeploymentSuccess`, `DeploymentFailure`, `DeploymentStop`, `DeploymentRollback`, `InstanceStart`, `InstanceSuccess`, `InstanceFailure`.  See [the CodeDeploy documentation](http://docs.aws.amazon.com/codedeploy/latest/userguide/monitoring-sns-event-notifications-create-trigger.html) for all possible values.
     * 
     */
    public List<String> triggerEvents() {
        return this.triggerEvents;
    }
    /**
     * @return The name of the notification trigger.
     * 
     */
    public String triggerName() {
        return this.triggerName;
    }
    /**
     * @return The ARN of the SNS topic through which notifications are sent.
     * 
     */
    public String triggerTargetArn() {
        return this.triggerTargetArn;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DeploymentGroupTriggerConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> triggerEvents;
        private String triggerName;
        private String triggerTargetArn;
        public Builder() {}
        public Builder(DeploymentGroupTriggerConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.triggerEvents = defaults.triggerEvents;
    	      this.triggerName = defaults.triggerName;
    	      this.triggerTargetArn = defaults.triggerTargetArn;
        }

        @CustomType.Setter
        public Builder triggerEvents(List<String> triggerEvents) {
            if (triggerEvents == null) {
              throw new MissingRequiredPropertyException("DeploymentGroupTriggerConfiguration", "triggerEvents");
            }
            this.triggerEvents = triggerEvents;
            return this;
        }
        public Builder triggerEvents(String... triggerEvents) {
            return triggerEvents(List.of(triggerEvents));
        }
        @CustomType.Setter
        public Builder triggerName(String triggerName) {
            if (triggerName == null) {
              throw new MissingRequiredPropertyException("DeploymentGroupTriggerConfiguration", "triggerName");
            }
            this.triggerName = triggerName;
            return this;
        }
        @CustomType.Setter
        public Builder triggerTargetArn(String triggerTargetArn) {
            if (triggerTargetArn == null) {
              throw new MissingRequiredPropertyException("DeploymentGroupTriggerConfiguration", "triggerTargetArn");
            }
            this.triggerTargetArn = triggerTargetArn;
            return this;
        }
        public DeploymentGroupTriggerConfiguration build() {
            final var _resultValue = new DeploymentGroupTriggerConfiguration();
            _resultValue.triggerEvents = triggerEvents;
            _resultValue.triggerName = triggerName;
            _resultValue.triggerTargetArn = triggerTargetArn;
            return _resultValue;
        }
    }
}
