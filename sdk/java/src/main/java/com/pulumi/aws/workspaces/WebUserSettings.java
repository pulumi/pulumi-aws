// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.workspaces;

import com.pulumi.aws.Utilities;
import com.pulumi.aws.workspaces.WebUserSettingsArgs;
import com.pulumi.aws.workspaces.inputs.WebUserSettingsState;
import com.pulumi.aws.workspaces.outputs.WebUserSettingsCookieSynchronizationConfiguration;
import com.pulumi.aws.workspaces.outputs.WebUserSettingsToolbarConfiguration;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Resource for managing an AWS WorkSpaces Web User Settings resource. Once associated with a web portal, user settings control how users can transfer data between a streaming session and their local devices.
 * 
 * ## Example Usage
 * 
 * ### Basic Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.aws.workspaces.WebUserSettings;
 * import com.pulumi.aws.workspaces.WebUserSettingsArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new WebUserSettings("example", WebUserSettingsArgs.builder()
 *             .copyAllowed("Enabled")
 *             .downloadAllowed("Enabled")
 *             .pasteAllowed("Enabled")
 *             .printAllowed("Enabled")
 *             .uploadAllowed("Enabled")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ### With Toolbar Configuration
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.aws.workspaces.WebUserSettings;
 * import com.pulumi.aws.workspaces.WebUserSettingsArgs;
 * import com.pulumi.aws.workspaces.inputs.WebUserSettingsToolbarConfigurationArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new WebUserSettings("example", WebUserSettingsArgs.builder()
 *             .copyAllowed("Enabled")
 *             .downloadAllowed("Enabled")
 *             .pasteAllowed("Enabled")
 *             .printAllowed("Enabled")
 *             .uploadAllowed("Enabled")
 *             .toolbarConfiguration(WebUserSettingsToolbarConfigurationArgs.builder()
 *                 .toolbarType("Docked")
 *                 .visualMode("Dark")
 *                 .hiddenToolbarItems(                
 *                     "Webcam",
 *                     "Microphone")
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ### Complete Example
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.aws.kms.Key;
 * import com.pulumi.aws.kms.KeyArgs;
 * import com.pulumi.aws.workspaces.WebUserSettings;
 * import com.pulumi.aws.workspaces.WebUserSettingsArgs;
 * import com.pulumi.aws.workspaces.inputs.WebUserSettingsToolbarConfigurationArgs;
 * import com.pulumi.aws.workspaces.inputs.WebUserSettingsCookieSynchronizationConfigurationArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new Key("example", KeyArgs.builder()
 *             .description("KMS key for WorkSpaces Web User Settings")
 *             .deletionWindowInDays(7)
 *             .build());
 * 
 *         var exampleWebUserSettings = new WebUserSettings("exampleWebUserSettings", WebUserSettingsArgs.builder()
 *             .copyAllowed("Enabled")
 *             .downloadAllowed("Enabled")
 *             .pasteAllowed("Enabled")
 *             .printAllowed("Enabled")
 *             .uploadAllowed("Enabled")
 *             .deepLinkAllowed("Enabled")
 *             .disconnectTimeoutInMinutes(30)
 *             .idleDisconnectTimeoutInMinutes(15)
 *             .customerManagedKey(example.arn())
 *             .additionalEncryptionContext(Map.of("Environment", "Production"))
 *             .toolbarConfiguration(WebUserSettingsToolbarConfigurationArgs.builder()
 *                 .toolbarType("Docked")
 *                 .visualMode("Dark")
 *                 .hiddenToolbarItems(                
 *                     "Webcam",
 *                     "Microphone")
 *                 .maxDisplayResolution("size1920X1080")
 *                 .build())
 *             .cookieSynchronizationConfiguration(WebUserSettingsCookieSynchronizationConfigurationArgs.builder()
 *                 .allowlists(WebUserSettingsCookieSynchronizationConfigurationAllowlistArgs.builder()
 *                     .domain("example.com")
 *                     .path("/path")
 *                     .build())
 *                 .blocklists(WebUserSettingsCookieSynchronizationConfigurationBlocklistArgs.builder()
 *                     .domain("blocked.com")
 *                     .build())
 *                 .build())
 *             .tags(Map.of("Name", "example-user-settings"))
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Using `pulumi import`, import WorkSpaces Web User Settings using the `user_settings_arn`. For example:
 * 
 * ```sh
 * $ pulumi import aws:workspaces/webUserSettings:WebUserSettings example arn:aws:workspacesweb:us-west-2:123456789012:usersettings/abcdef12345
 * ```
 * 
 */
@ResourceType(type="aws:workspaces/webUserSettings:WebUserSettings")
public class WebUserSettings extends com.pulumi.resources.CustomResource {
    /**
     * Additional encryption context for the user settings.
     * 
     */
    @Export(name="additionalEncryptionContext", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> additionalEncryptionContext;

    /**
     * @return Additional encryption context for the user settings.
     * 
     */
    public Output<Optional<Map<String,String>>> additionalEncryptionContext() {
        return Codegen.optional(this.additionalEncryptionContext);
    }
    /**
     * List of web portal ARNs to associate with the user settings.
     * 
     */
    @Export(name="associatedPortalArns", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> associatedPortalArns;

    /**
     * @return List of web portal ARNs to associate with the user settings.
     * 
     */
    public Output<List<String>> associatedPortalArns() {
        return this.associatedPortalArns;
    }
    /**
     * Configuration that specifies which cookies should be synchronized from the end user&#39;s local browser to the remote browser. Detailed below.
     * 
     */
    @Export(name="cookieSynchronizationConfiguration", refs={WebUserSettingsCookieSynchronizationConfiguration.class}, tree="[0]")
    private Output</* @Nullable */ WebUserSettingsCookieSynchronizationConfiguration> cookieSynchronizationConfiguration;

    /**
     * @return Configuration that specifies which cookies should be synchronized from the end user&#39;s local browser to the remote browser. Detailed below.
     * 
     */
    public Output<Optional<WebUserSettingsCookieSynchronizationConfiguration>> cookieSynchronizationConfiguration() {
        return Codegen.optional(this.cookieSynchronizationConfiguration);
    }
    /**
     * Specifies whether the user can copy text from the streaming session to the local device. Valid values are `Enabled` or `Disabled`.
     * 
     */
    @Export(name="copyAllowed", refs={String.class}, tree="[0]")
    private Output<String> copyAllowed;

    /**
     * @return Specifies whether the user can copy text from the streaming session to the local device. Valid values are `Enabled` or `Disabled`.
     * 
     */
    public Output<String> copyAllowed() {
        return this.copyAllowed;
    }
    /**
     * ARN of the customer managed KMS key.
     * 
     */
    @Export(name="customerManagedKey", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> customerManagedKey;

    /**
     * @return ARN of the customer managed KMS key.
     * 
     */
    public Output<Optional<String>> customerManagedKey() {
        return Codegen.optional(this.customerManagedKey);
    }
    /**
     * Specifies whether the user can use deep links that open automatically when connecting to a session. Valid values are `Enabled` or `Disabled`.
     * 
     */
    @Export(name="deepLinkAllowed", refs={String.class}, tree="[0]")
    private Output<String> deepLinkAllowed;

    /**
     * @return Specifies whether the user can use deep links that open automatically when connecting to a session. Valid values are `Enabled` or `Disabled`.
     * 
     */
    public Output<String> deepLinkAllowed() {
        return this.deepLinkAllowed;
    }
    /**
     * Amount of time that a streaming session remains active after users disconnect. Value must be between 1 and 600 minutes.
     * 
     */
    @Export(name="disconnectTimeoutInMinutes", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> disconnectTimeoutInMinutes;

    /**
     * @return Amount of time that a streaming session remains active after users disconnect. Value must be between 1 and 600 minutes.
     * 
     */
    public Output<Optional<Integer>> disconnectTimeoutInMinutes() {
        return Codegen.optional(this.disconnectTimeoutInMinutes);
    }
    /**
     * Specifies whether the user can download files from the streaming session to the local device. Valid values are `Enabled` or `Disabled`.
     * 
     */
    @Export(name="downloadAllowed", refs={String.class}, tree="[0]")
    private Output<String> downloadAllowed;

    /**
     * @return Specifies whether the user can download files from the streaming session to the local device. Valid values are `Enabled` or `Disabled`.
     * 
     */
    public Output<String> downloadAllowed() {
        return this.downloadAllowed;
    }
    /**
     * Amount of time that users can be idle before they are disconnected from their streaming session. Value must be between 0 and 60 minutes.
     * 
     */
    @Export(name="idleDisconnectTimeoutInMinutes", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> idleDisconnectTimeoutInMinutes;

    /**
     * @return Amount of time that users can be idle before they are disconnected from their streaming session. Value must be between 0 and 60 minutes.
     * 
     */
    public Output<Optional<Integer>> idleDisconnectTimeoutInMinutes() {
        return Codegen.optional(this.idleDisconnectTimeoutInMinutes);
    }
    /**
     * Specifies whether the user can paste text from the local device to the streaming session. Valid values are `Enabled` or `Disabled`.
     * 
     */
    @Export(name="pasteAllowed", refs={String.class}, tree="[0]")
    private Output<String> pasteAllowed;

    /**
     * @return Specifies whether the user can paste text from the local device to the streaming session. Valid values are `Enabled` or `Disabled`.
     * 
     */
    public Output<String> pasteAllowed() {
        return this.pasteAllowed;
    }
    /**
     * Specifies whether the user can print to the local device. Valid values are `Enabled` or `Disabled`.
     * 
     */
    @Export(name="printAllowed", refs={String.class}, tree="[0]")
    private Output<String> printAllowed;

    /**
     * @return Specifies whether the user can print to the local device. Valid values are `Enabled` or `Disabled`.
     * 
     */
    public Output<String> printAllowed() {
        return this.printAllowed;
    }
    /**
     * Map of tags assigned to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Export(name="tags", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return Map of tags assigned to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Output<Optional<Map<String,String>>> tags() {
        return Codegen.optional(this.tags);
    }
    /**
     * Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @Export(name="tagsAll", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> tagsAll;

    /**
     * @return Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     */
    public Output<Map<String,String>> tagsAll() {
        return this.tagsAll;
    }
    /**
     * Configuration of the toolbar. Detailed below.
     * 
     */
    @Export(name="toolbarConfiguration", refs={WebUserSettingsToolbarConfiguration.class}, tree="[0]")
    private Output</* @Nullable */ WebUserSettingsToolbarConfiguration> toolbarConfiguration;

    /**
     * @return Configuration of the toolbar. Detailed below.
     * 
     */
    public Output<Optional<WebUserSettingsToolbarConfiguration>> toolbarConfiguration() {
        return Codegen.optional(this.toolbarConfiguration);
    }
    /**
     * Specifies whether the user can upload files from the local device to the streaming session. Valid values are `Enabled` or `Disabled`.
     * 
     * The following arguments are optional:
     * 
     */
    @Export(name="uploadAllowed", refs={String.class}, tree="[0]")
    private Output<String> uploadAllowed;

    /**
     * @return Specifies whether the user can upload files from the local device to the streaming session. Valid values are `Enabled` or `Disabled`.
     * 
     * The following arguments are optional:
     * 
     */
    public Output<String> uploadAllowed() {
        return this.uploadAllowed;
    }
    /**
     * ARN of the user settings resource.
     * 
     */
    @Export(name="userSettingsArn", refs={String.class}, tree="[0]")
    private Output<String> userSettingsArn;

    /**
     * @return ARN of the user settings resource.
     * 
     */
    public Output<String> userSettingsArn() {
        return this.userSettingsArn;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public WebUserSettings(java.lang.String name) {
        this(name, WebUserSettingsArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public WebUserSettings(java.lang.String name, WebUserSettingsArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public WebUserSettings(java.lang.String name, WebUserSettingsArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("aws:workspaces/webUserSettings:WebUserSettings", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private WebUserSettings(java.lang.String name, Output<java.lang.String> id, @Nullable WebUserSettingsState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("aws:workspaces/webUserSettings:WebUserSettings", name, state, makeResourceOptions(options, id), false);
    }

    private static WebUserSettingsArgs makeArgs(WebUserSettingsArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? WebUserSettingsArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static WebUserSettings get(java.lang.String name, Output<java.lang.String> id, @Nullable WebUserSettingsState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new WebUserSettings(name, id, state, options);
    }
}
