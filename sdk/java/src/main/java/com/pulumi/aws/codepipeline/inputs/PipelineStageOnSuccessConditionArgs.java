// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.codepipeline.inputs;

import com.pulumi.aws.codepipeline.inputs.PipelineStageOnSuccessConditionRuleArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PipelineStageOnSuccessConditionArgs extends com.pulumi.resources.ResourceArgs {

    public static final PipelineStageOnSuccessConditionArgs Empty = new PipelineStageOnSuccessConditionArgs();

    /**
     * The action to be done when the condition is met. For example, rolling back an execution for a failure condition. Possible values are `ROLLBACK`, `FAIL`, `RETRY` and `SKIP`.
     * 
     */
    @Import(name="result")
    private @Nullable Output<String> result;

    /**
     * @return The action to be done when the condition is met. For example, rolling back an execution for a failure condition. Possible values are `ROLLBACK`, `FAIL`, `RETRY` and `SKIP`.
     * 
     */
    public Optional<Output<String>> result() {
        return Optional.ofNullable(this.result);
    }

    /**
     * The rules that make up the condition. Defined as a `rule` block below.
     * 
     */
    @Import(name="rules", required=true)
    private Output<List<PipelineStageOnSuccessConditionRuleArgs>> rules;

    /**
     * @return The rules that make up the condition. Defined as a `rule` block below.
     * 
     */
    public Output<List<PipelineStageOnSuccessConditionRuleArgs>> rules() {
        return this.rules;
    }

    private PipelineStageOnSuccessConditionArgs() {}

    private PipelineStageOnSuccessConditionArgs(PipelineStageOnSuccessConditionArgs $) {
        this.result = $.result;
        this.rules = $.rules;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PipelineStageOnSuccessConditionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PipelineStageOnSuccessConditionArgs $;

        public Builder() {
            $ = new PipelineStageOnSuccessConditionArgs();
        }

        public Builder(PipelineStageOnSuccessConditionArgs defaults) {
            $ = new PipelineStageOnSuccessConditionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param result The action to be done when the condition is met. For example, rolling back an execution for a failure condition. Possible values are `ROLLBACK`, `FAIL`, `RETRY` and `SKIP`.
         * 
         * @return builder
         * 
         */
        public Builder result(@Nullable Output<String> result) {
            $.result = result;
            return this;
        }

        /**
         * @param result The action to be done when the condition is met. For example, rolling back an execution for a failure condition. Possible values are `ROLLBACK`, `FAIL`, `RETRY` and `SKIP`.
         * 
         * @return builder
         * 
         */
        public Builder result(String result) {
            return result(Output.of(result));
        }

        /**
         * @param rules The rules that make up the condition. Defined as a `rule` block below.
         * 
         * @return builder
         * 
         */
        public Builder rules(Output<List<PipelineStageOnSuccessConditionRuleArgs>> rules) {
            $.rules = rules;
            return this;
        }

        /**
         * @param rules The rules that make up the condition. Defined as a `rule` block below.
         * 
         * @return builder
         * 
         */
        public Builder rules(List<PipelineStageOnSuccessConditionRuleArgs> rules) {
            return rules(Output.of(rules));
        }

        /**
         * @param rules The rules that make up the condition. Defined as a `rule` block below.
         * 
         * @return builder
         * 
         */
        public Builder rules(PipelineStageOnSuccessConditionRuleArgs... rules) {
            return rules(List.of(rules));
        }

        public PipelineStageOnSuccessConditionArgs build() {
            if ($.rules == null) {
                throw new MissingRequiredPropertyException("PipelineStageOnSuccessConditionArgs", "rules");
            }
            return $;
        }
    }

}
