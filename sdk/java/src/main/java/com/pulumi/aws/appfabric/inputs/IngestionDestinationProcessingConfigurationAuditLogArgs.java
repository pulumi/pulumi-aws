// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.appfabric.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class IngestionDestinationProcessingConfigurationAuditLogArgs extends com.pulumi.resources.ResourceArgs {

    public static final IngestionDestinationProcessingConfigurationAuditLogArgs Empty = new IngestionDestinationProcessingConfigurationAuditLogArgs();

    /**
     * The format in which the audit logs need to be formatted. Valid values: `json`, `parquet`.
     * 
     */
    @Import(name="format", required=true)
    private Output<String> format;

    /**
     * @return The format in which the audit logs need to be formatted. Valid values: `json`, `parquet`.
     * 
     */
    public Output<String> format() {
        return this.format;
    }

    /**
     * The event schema in which the audit logs need to be formatted. Valid values: `ocsf`, `raw`.
     * 
     */
    @Import(name="schema", required=true)
    private Output<String> schema;

    /**
     * @return The event schema in which the audit logs need to be formatted. Valid values: `ocsf`, `raw`.
     * 
     */
    public Output<String> schema() {
        return this.schema;
    }

    private IngestionDestinationProcessingConfigurationAuditLogArgs() {}

    private IngestionDestinationProcessingConfigurationAuditLogArgs(IngestionDestinationProcessingConfigurationAuditLogArgs $) {
        this.format = $.format;
        this.schema = $.schema;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IngestionDestinationProcessingConfigurationAuditLogArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IngestionDestinationProcessingConfigurationAuditLogArgs $;

        public Builder() {
            $ = new IngestionDestinationProcessingConfigurationAuditLogArgs();
        }

        public Builder(IngestionDestinationProcessingConfigurationAuditLogArgs defaults) {
            $ = new IngestionDestinationProcessingConfigurationAuditLogArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param format The format in which the audit logs need to be formatted. Valid values: `json`, `parquet`.
         * 
         * @return builder
         * 
         */
        public Builder format(Output<String> format) {
            $.format = format;
            return this;
        }

        /**
         * @param format The format in which the audit logs need to be formatted. Valid values: `json`, `parquet`.
         * 
         * @return builder
         * 
         */
        public Builder format(String format) {
            return format(Output.of(format));
        }

        /**
         * @param schema The event schema in which the audit logs need to be formatted. Valid values: `ocsf`, `raw`.
         * 
         * @return builder
         * 
         */
        public Builder schema(Output<String> schema) {
            $.schema = schema;
            return this;
        }

        /**
         * @param schema The event schema in which the audit logs need to be formatted. Valid values: `ocsf`, `raw`.
         * 
         * @return builder
         * 
         */
        public Builder schema(String schema) {
            return schema(Output.of(schema));
        }

        public IngestionDestinationProcessingConfigurationAuditLogArgs build() {
            if ($.format == null) {
                throw new MissingRequiredPropertyException("IngestionDestinationProcessingConfigurationAuditLogArgs", "format");
            }
            if ($.schema == null) {
                throw new MissingRequiredPropertyException("IngestionDestinationProcessingConfigurationAuditLogArgs", "schema");
            }
            return $;
        }
    }

}
