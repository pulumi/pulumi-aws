// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.opensearch.outputs;

import com.pulumi.aws.opensearch.outputs.GetDomainAdvancedSecurityOption;
import com.pulumi.aws.opensearch.outputs.GetDomainAutoTuneOption;
import com.pulumi.aws.opensearch.outputs.GetDomainClusterConfig;
import com.pulumi.aws.opensearch.outputs.GetDomainCognitoOption;
import com.pulumi.aws.opensearch.outputs.GetDomainEbsOption;
import com.pulumi.aws.opensearch.outputs.GetDomainEncryptionAtRest;
import com.pulumi.aws.opensearch.outputs.GetDomainLogPublishingOption;
import com.pulumi.aws.opensearch.outputs.GetDomainNodeToNodeEncryption;
import com.pulumi.aws.opensearch.outputs.GetDomainOffPeakWindowOptions;
import com.pulumi.aws.opensearch.outputs.GetDomainSnapshotOption;
import com.pulumi.aws.opensearch.outputs.GetDomainSoftwareUpdateOption;
import com.pulumi.aws.opensearch.outputs.GetDomainVpcOption;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDomainResult {
    /**
     * @return Policy document attached to the domain.
     * 
     */
    private String accessPolicies;
    /**
     * @return Key-value string pairs to specify advanced configuration options.
     * 
     */
    private Map<String,String> advancedOptions;
    /**
     * @return Status of the OpenSearch domain&#39;s advanced security options. The block consists of the following attributes:
     * 
     */
    private List<GetDomainAdvancedSecurityOption> advancedSecurityOptions;
    /**
     * @return ARN of the domain.
     * 
     */
    private String arn;
    /**
     * @return Configuration of the Auto-Tune options of the domain.
     * 
     */
    private List<GetDomainAutoTuneOption> autoTuneOptions;
    /**
     * @return Cluster configuration of the domain.
     * 
     */
    private List<GetDomainClusterConfig> clusterConfigs;
    /**
     * @return Domain Amazon Cognito Authentication options for Dashboard.
     * 
     */
    private List<GetDomainCognitoOption> cognitoOptions;
    /**
     * @return Status of the creation of the domain.
     * 
     */
    private Boolean created;
    /**
     * @return Domain-specific endpoint used to access the [Dashboard application](https://docs.aws.amazon.com/opensearch-service/latest/developerguide/dashboards.html).
     * 
     */
    private String dashboardEndpoint;
    /**
     * @return Status of the deletion of the domain.
     * 
     */
    private Boolean deleted;
    /**
     * @return Unique identifier for the domain.
     * 
     */
    private String domainId;
    private String domainName;
    /**
     * @return EBS Options for the instances in the domain.
     * 
     */
    private List<GetDomainEbsOption> ebsOptions;
    /**
     * @return Domain encryption at rest related options.
     * 
     */
    private List<GetDomainEncryptionAtRest> encryptionAtRests;
    /**
     * @return Domain-specific endpoint used to submit index, search, and data upload requests.
     * 
     */
    private String endpoint;
    /**
     * @return OpenSearch version for the domain.
     * 
     */
    private String engineVersion;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return (**Deprecated**) Domain-specific endpoint for kibana without https scheme. Use the `dashboard_endpoint` attribute instead.
     * 
     * @deprecated
     * use &#39;dashboard_endpoint&#39; attribute instead
     * 
     */
    @Deprecated /* use 'dashboard_endpoint' attribute instead */
    private String kibanaEndpoint;
    /**
     * @return Domain log publishing related options.
     * 
     */
    private List<GetDomainLogPublishingOption> logPublishingOptions;
    /**
     * @return Domain in transit encryption related options.
     * 
     */
    private List<GetDomainNodeToNodeEncryption> nodeToNodeEncryptions;
    /**
     * @return Off Peak update options
     * 
     */
    private @Nullable GetDomainOffPeakWindowOptions offPeakWindowOptions;
    /**
     * @return Status of a configuration change in the domain.
     * 
     */
    private Boolean processing;
    /**
     * @return Domain snapshot related options.
     * 
     */
    private List<GetDomainSnapshotOption> snapshotOptions;
    /**
     * @return Software update options for the domain
     * 
     */
    private List<GetDomainSoftwareUpdateOption> softwareUpdateOptions;
    /**
     * @return Tags assigned to the domain.
     * 
     */
    private Map<String,String> tags;
    /**
     * @return VPC Options for private OpenSearch domains.
     * 
     */
    private List<GetDomainVpcOption> vpcOptions;

    private GetDomainResult() {}
    /**
     * @return Policy document attached to the domain.
     * 
     */
    public String accessPolicies() {
        return this.accessPolicies;
    }
    /**
     * @return Key-value string pairs to specify advanced configuration options.
     * 
     */
    public Map<String,String> advancedOptions() {
        return this.advancedOptions;
    }
    /**
     * @return Status of the OpenSearch domain&#39;s advanced security options. The block consists of the following attributes:
     * 
     */
    public List<GetDomainAdvancedSecurityOption> advancedSecurityOptions() {
        return this.advancedSecurityOptions;
    }
    /**
     * @return ARN of the domain.
     * 
     */
    public String arn() {
        return this.arn;
    }
    /**
     * @return Configuration of the Auto-Tune options of the domain.
     * 
     */
    public List<GetDomainAutoTuneOption> autoTuneOptions() {
        return this.autoTuneOptions;
    }
    /**
     * @return Cluster configuration of the domain.
     * 
     */
    public List<GetDomainClusterConfig> clusterConfigs() {
        return this.clusterConfigs;
    }
    /**
     * @return Domain Amazon Cognito Authentication options for Dashboard.
     * 
     */
    public List<GetDomainCognitoOption> cognitoOptions() {
        return this.cognitoOptions;
    }
    /**
     * @return Status of the creation of the domain.
     * 
     */
    public Boolean created() {
        return this.created;
    }
    /**
     * @return Domain-specific endpoint used to access the [Dashboard application](https://docs.aws.amazon.com/opensearch-service/latest/developerguide/dashboards.html).
     * 
     */
    public String dashboardEndpoint() {
        return this.dashboardEndpoint;
    }
    /**
     * @return Status of the deletion of the domain.
     * 
     */
    public Boolean deleted() {
        return this.deleted;
    }
    /**
     * @return Unique identifier for the domain.
     * 
     */
    public String domainId() {
        return this.domainId;
    }
    public String domainName() {
        return this.domainName;
    }
    /**
     * @return EBS Options for the instances in the domain.
     * 
     */
    public List<GetDomainEbsOption> ebsOptions() {
        return this.ebsOptions;
    }
    /**
     * @return Domain encryption at rest related options.
     * 
     */
    public List<GetDomainEncryptionAtRest> encryptionAtRests() {
        return this.encryptionAtRests;
    }
    /**
     * @return Domain-specific endpoint used to submit index, search, and data upload requests.
     * 
     */
    public String endpoint() {
        return this.endpoint;
    }
    /**
     * @return OpenSearch version for the domain.
     * 
     */
    public String engineVersion() {
        return this.engineVersion;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return (**Deprecated**) Domain-specific endpoint for kibana without https scheme. Use the `dashboard_endpoint` attribute instead.
     * 
     * @deprecated
     * use &#39;dashboard_endpoint&#39; attribute instead
     * 
     */
    @Deprecated /* use 'dashboard_endpoint' attribute instead */
    public String kibanaEndpoint() {
        return this.kibanaEndpoint;
    }
    /**
     * @return Domain log publishing related options.
     * 
     */
    public List<GetDomainLogPublishingOption> logPublishingOptions() {
        return this.logPublishingOptions;
    }
    /**
     * @return Domain in transit encryption related options.
     * 
     */
    public List<GetDomainNodeToNodeEncryption> nodeToNodeEncryptions() {
        return this.nodeToNodeEncryptions;
    }
    /**
     * @return Off Peak update options
     * 
     */
    public Optional<GetDomainOffPeakWindowOptions> offPeakWindowOptions() {
        return Optional.ofNullable(this.offPeakWindowOptions);
    }
    /**
     * @return Status of a configuration change in the domain.
     * 
     */
    public Boolean processing() {
        return this.processing;
    }
    /**
     * @return Domain snapshot related options.
     * 
     */
    public List<GetDomainSnapshotOption> snapshotOptions() {
        return this.snapshotOptions;
    }
    /**
     * @return Software update options for the domain
     * 
     */
    public List<GetDomainSoftwareUpdateOption> softwareUpdateOptions() {
        return this.softwareUpdateOptions;
    }
    /**
     * @return Tags assigned to the domain.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }
    /**
     * @return VPC Options for private OpenSearch domains.
     * 
     */
    public List<GetDomainVpcOption> vpcOptions() {
        return this.vpcOptions;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDomainResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accessPolicies;
        private Map<String,String> advancedOptions;
        private List<GetDomainAdvancedSecurityOption> advancedSecurityOptions;
        private String arn;
        private List<GetDomainAutoTuneOption> autoTuneOptions;
        private List<GetDomainClusterConfig> clusterConfigs;
        private List<GetDomainCognitoOption> cognitoOptions;
        private Boolean created;
        private String dashboardEndpoint;
        private Boolean deleted;
        private String domainId;
        private String domainName;
        private List<GetDomainEbsOption> ebsOptions;
        private List<GetDomainEncryptionAtRest> encryptionAtRests;
        private String endpoint;
        private String engineVersion;
        private String id;
        private String kibanaEndpoint;
        private List<GetDomainLogPublishingOption> logPublishingOptions;
        private List<GetDomainNodeToNodeEncryption> nodeToNodeEncryptions;
        private @Nullable GetDomainOffPeakWindowOptions offPeakWindowOptions;
        private Boolean processing;
        private List<GetDomainSnapshotOption> snapshotOptions;
        private List<GetDomainSoftwareUpdateOption> softwareUpdateOptions;
        private Map<String,String> tags;
        private List<GetDomainVpcOption> vpcOptions;
        public Builder() {}
        public Builder(GetDomainResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessPolicies = defaults.accessPolicies;
    	      this.advancedOptions = defaults.advancedOptions;
    	      this.advancedSecurityOptions = defaults.advancedSecurityOptions;
    	      this.arn = defaults.arn;
    	      this.autoTuneOptions = defaults.autoTuneOptions;
    	      this.clusterConfigs = defaults.clusterConfigs;
    	      this.cognitoOptions = defaults.cognitoOptions;
    	      this.created = defaults.created;
    	      this.dashboardEndpoint = defaults.dashboardEndpoint;
    	      this.deleted = defaults.deleted;
    	      this.domainId = defaults.domainId;
    	      this.domainName = defaults.domainName;
    	      this.ebsOptions = defaults.ebsOptions;
    	      this.encryptionAtRests = defaults.encryptionAtRests;
    	      this.endpoint = defaults.endpoint;
    	      this.engineVersion = defaults.engineVersion;
    	      this.id = defaults.id;
    	      this.kibanaEndpoint = defaults.kibanaEndpoint;
    	      this.logPublishingOptions = defaults.logPublishingOptions;
    	      this.nodeToNodeEncryptions = defaults.nodeToNodeEncryptions;
    	      this.offPeakWindowOptions = defaults.offPeakWindowOptions;
    	      this.processing = defaults.processing;
    	      this.snapshotOptions = defaults.snapshotOptions;
    	      this.softwareUpdateOptions = defaults.softwareUpdateOptions;
    	      this.tags = defaults.tags;
    	      this.vpcOptions = defaults.vpcOptions;
        }

        @CustomType.Setter
        public Builder accessPolicies(String accessPolicies) {
            if (accessPolicies == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "accessPolicies");
            }
            this.accessPolicies = accessPolicies;
            return this;
        }
        @CustomType.Setter
        public Builder advancedOptions(Map<String,String> advancedOptions) {
            if (advancedOptions == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "advancedOptions");
            }
            this.advancedOptions = advancedOptions;
            return this;
        }
        @CustomType.Setter
        public Builder advancedSecurityOptions(List<GetDomainAdvancedSecurityOption> advancedSecurityOptions) {
            if (advancedSecurityOptions == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "advancedSecurityOptions");
            }
            this.advancedSecurityOptions = advancedSecurityOptions;
            return this;
        }
        public Builder advancedSecurityOptions(GetDomainAdvancedSecurityOption... advancedSecurityOptions) {
            return advancedSecurityOptions(List.of(advancedSecurityOptions));
        }
        @CustomType.Setter
        public Builder arn(String arn) {
            if (arn == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "arn");
            }
            this.arn = arn;
            return this;
        }
        @CustomType.Setter
        public Builder autoTuneOptions(List<GetDomainAutoTuneOption> autoTuneOptions) {
            if (autoTuneOptions == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "autoTuneOptions");
            }
            this.autoTuneOptions = autoTuneOptions;
            return this;
        }
        public Builder autoTuneOptions(GetDomainAutoTuneOption... autoTuneOptions) {
            return autoTuneOptions(List.of(autoTuneOptions));
        }
        @CustomType.Setter
        public Builder clusterConfigs(List<GetDomainClusterConfig> clusterConfigs) {
            if (clusterConfigs == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "clusterConfigs");
            }
            this.clusterConfigs = clusterConfigs;
            return this;
        }
        public Builder clusterConfigs(GetDomainClusterConfig... clusterConfigs) {
            return clusterConfigs(List.of(clusterConfigs));
        }
        @CustomType.Setter
        public Builder cognitoOptions(List<GetDomainCognitoOption> cognitoOptions) {
            if (cognitoOptions == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "cognitoOptions");
            }
            this.cognitoOptions = cognitoOptions;
            return this;
        }
        public Builder cognitoOptions(GetDomainCognitoOption... cognitoOptions) {
            return cognitoOptions(List.of(cognitoOptions));
        }
        @CustomType.Setter
        public Builder created(Boolean created) {
            if (created == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "created");
            }
            this.created = created;
            return this;
        }
        @CustomType.Setter
        public Builder dashboardEndpoint(String dashboardEndpoint) {
            if (dashboardEndpoint == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "dashboardEndpoint");
            }
            this.dashboardEndpoint = dashboardEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder deleted(Boolean deleted) {
            if (deleted == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "deleted");
            }
            this.deleted = deleted;
            return this;
        }
        @CustomType.Setter
        public Builder domainId(String domainId) {
            if (domainId == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "domainId");
            }
            this.domainId = domainId;
            return this;
        }
        @CustomType.Setter
        public Builder domainName(String domainName) {
            if (domainName == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "domainName");
            }
            this.domainName = domainName;
            return this;
        }
        @CustomType.Setter
        public Builder ebsOptions(List<GetDomainEbsOption> ebsOptions) {
            if (ebsOptions == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "ebsOptions");
            }
            this.ebsOptions = ebsOptions;
            return this;
        }
        public Builder ebsOptions(GetDomainEbsOption... ebsOptions) {
            return ebsOptions(List.of(ebsOptions));
        }
        @CustomType.Setter
        public Builder encryptionAtRests(List<GetDomainEncryptionAtRest> encryptionAtRests) {
            if (encryptionAtRests == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "encryptionAtRests");
            }
            this.encryptionAtRests = encryptionAtRests;
            return this;
        }
        public Builder encryptionAtRests(GetDomainEncryptionAtRest... encryptionAtRests) {
            return encryptionAtRests(List.of(encryptionAtRests));
        }
        @CustomType.Setter
        public Builder endpoint(String endpoint) {
            if (endpoint == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "endpoint");
            }
            this.endpoint = endpoint;
            return this;
        }
        @CustomType.Setter
        public Builder engineVersion(String engineVersion) {
            if (engineVersion == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "engineVersion");
            }
            this.engineVersion = engineVersion;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder kibanaEndpoint(String kibanaEndpoint) {
            if (kibanaEndpoint == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "kibanaEndpoint");
            }
            this.kibanaEndpoint = kibanaEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder logPublishingOptions(List<GetDomainLogPublishingOption> logPublishingOptions) {
            if (logPublishingOptions == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "logPublishingOptions");
            }
            this.logPublishingOptions = logPublishingOptions;
            return this;
        }
        public Builder logPublishingOptions(GetDomainLogPublishingOption... logPublishingOptions) {
            return logPublishingOptions(List.of(logPublishingOptions));
        }
        @CustomType.Setter
        public Builder nodeToNodeEncryptions(List<GetDomainNodeToNodeEncryption> nodeToNodeEncryptions) {
            if (nodeToNodeEncryptions == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "nodeToNodeEncryptions");
            }
            this.nodeToNodeEncryptions = nodeToNodeEncryptions;
            return this;
        }
        public Builder nodeToNodeEncryptions(GetDomainNodeToNodeEncryption... nodeToNodeEncryptions) {
            return nodeToNodeEncryptions(List.of(nodeToNodeEncryptions));
        }
        @CustomType.Setter
        public Builder offPeakWindowOptions(@Nullable GetDomainOffPeakWindowOptions offPeakWindowOptions) {

            this.offPeakWindowOptions = offPeakWindowOptions;
            return this;
        }
        @CustomType.Setter
        public Builder processing(Boolean processing) {
            if (processing == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "processing");
            }
            this.processing = processing;
            return this;
        }
        @CustomType.Setter
        public Builder snapshotOptions(List<GetDomainSnapshotOption> snapshotOptions) {
            if (snapshotOptions == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "snapshotOptions");
            }
            this.snapshotOptions = snapshotOptions;
            return this;
        }
        public Builder snapshotOptions(GetDomainSnapshotOption... snapshotOptions) {
            return snapshotOptions(List.of(snapshotOptions));
        }
        @CustomType.Setter
        public Builder softwareUpdateOptions(List<GetDomainSoftwareUpdateOption> softwareUpdateOptions) {
            if (softwareUpdateOptions == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "softwareUpdateOptions");
            }
            this.softwareUpdateOptions = softwareUpdateOptions;
            return this;
        }
        public Builder softwareUpdateOptions(GetDomainSoftwareUpdateOption... softwareUpdateOptions) {
            return softwareUpdateOptions(List.of(softwareUpdateOptions));
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder vpcOptions(List<GetDomainVpcOption> vpcOptions) {
            if (vpcOptions == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "vpcOptions");
            }
            this.vpcOptions = vpcOptions;
            return this;
        }
        public Builder vpcOptions(GetDomainVpcOption... vpcOptions) {
            return vpcOptions(List.of(vpcOptions));
        }
        public GetDomainResult build() {
            final var _resultValue = new GetDomainResult();
            _resultValue.accessPolicies = accessPolicies;
            _resultValue.advancedOptions = advancedOptions;
            _resultValue.advancedSecurityOptions = advancedSecurityOptions;
            _resultValue.arn = arn;
            _resultValue.autoTuneOptions = autoTuneOptions;
            _resultValue.clusterConfigs = clusterConfigs;
            _resultValue.cognitoOptions = cognitoOptions;
            _resultValue.created = created;
            _resultValue.dashboardEndpoint = dashboardEndpoint;
            _resultValue.deleted = deleted;
            _resultValue.domainId = domainId;
            _resultValue.domainName = domainName;
            _resultValue.ebsOptions = ebsOptions;
            _resultValue.encryptionAtRests = encryptionAtRests;
            _resultValue.endpoint = endpoint;
            _resultValue.engineVersion = engineVersion;
            _resultValue.id = id;
            _resultValue.kibanaEndpoint = kibanaEndpoint;
            _resultValue.logPublishingOptions = logPublishingOptions;
            _resultValue.nodeToNodeEncryptions = nodeToNodeEncryptions;
            _resultValue.offPeakWindowOptions = offPeakWindowOptions;
            _resultValue.processing = processing;
            _resultValue.snapshotOptions = snapshotOptions;
            _resultValue.softwareUpdateOptions = softwareUpdateOptions;
            _resultValue.tags = tags;
            _resultValue.vpcOptions = vpcOptions;
            return _resultValue;
        }
    }
}
