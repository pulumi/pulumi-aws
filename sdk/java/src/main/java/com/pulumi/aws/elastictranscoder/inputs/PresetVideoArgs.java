// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.elastictranscoder.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PresetVideoArgs extends com.pulumi.resources.ResourceArgs {

    public static final PresetVideoArgs Empty = new PresetVideoArgs();

    /**
     * The display aspect ratio of the video in the output file. Valid values are: `auto`, `1:1`, `4:3`, `3:2`, `16:9`. (Note; to better control resolution and aspect ratio of output videos, we recommend that you use the values `max_width`, `max_height`, `sizing_policy`, `padding_policy`, and `display_aspect_ratio` instead of `resolution` and `aspect_ratio`.)
     * 
     */
    @Import(name="aspectRatio")
    private @Nullable Output<String> aspectRatio;

    /**
     * @return The display aspect ratio of the video in the output file. Valid values are: `auto`, `1:1`, `4:3`, `3:2`, `16:9`. (Note; to better control resolution and aspect ratio of output videos, we recommend that you use the values `max_width`, `max_height`, `sizing_policy`, `padding_policy`, and `display_aspect_ratio` instead of `resolution` and `aspect_ratio`.)
     * 
     */
    public Optional<Output<String>> aspectRatio() {
        return Optional.ofNullable(this.aspectRatio);
    }

    /**
     * The bit rate of the video stream in the output file, in kilobits/second. You can configure variable bit rate or constant bit rate encoding.
     * 
     */
    @Import(name="bitRate")
    private @Nullable Output<String> bitRate;

    /**
     * @return The bit rate of the video stream in the output file, in kilobits/second. You can configure variable bit rate or constant bit rate encoding.
     * 
     */
    public Optional<Output<String>> bitRate() {
        return Optional.ofNullable(this.bitRate);
    }

    /**
     * The video codec for the output file. Valid values are `gif`, `H.264`, `mpeg2`, `vp8`, and `vp9`.
     * 
     */
    @Import(name="codec")
    private @Nullable Output<String> codec;

    /**
     * @return The video codec for the output file. Valid values are `gif`, `H.264`, `mpeg2`, `vp8`, and `vp9`.
     * 
     */
    public Optional<Output<String>> codec() {
        return Optional.ofNullable(this.codec);
    }

    /**
     * The value that Elastic Transcoder adds to the metadata in the output file. If you set DisplayAspectRatio to auto, Elastic Transcoder chooses an aspect ratio that ensures square pixels. If you specify another option, Elastic Transcoder sets that value in the output file.
     * 
     */
    @Import(name="displayAspectRatio")
    private @Nullable Output<String> displayAspectRatio;

    /**
     * @return The value that Elastic Transcoder adds to the metadata in the output file. If you set DisplayAspectRatio to auto, Elastic Transcoder chooses an aspect ratio that ensures square pixels. If you specify another option, Elastic Transcoder sets that value in the output file.
     * 
     */
    public Optional<Output<String>> displayAspectRatio() {
        return Optional.ofNullable(this.displayAspectRatio);
    }

    /**
     * Whether to use a fixed value for Video:FixedGOP. Not applicable for containers of type gif. Valid values are true and false. Also known as, Fixed Number of Frames Between Keyframes.
     * 
     */
    @Import(name="fixedGop")
    private @Nullable Output<String> fixedGop;

    /**
     * @return Whether to use a fixed value for Video:FixedGOP. Not applicable for containers of type gif. Valid values are true and false. Also known as, Fixed Number of Frames Between Keyframes.
     * 
     */
    public Optional<Output<String>> fixedGop() {
        return Optional.ofNullable(this.fixedGop);
    }

    /**
     * The frames per second for the video stream in the output file. The following values are valid: `auto`, `10`, `15`, `23.97`, `24`, `25`, `29.97`, `30`, `50`, `60`.
     * 
     */
    @Import(name="frameRate")
    private @Nullable Output<String> frameRate;

    /**
     * @return The frames per second for the video stream in the output file. The following values are valid: `auto`, `10`, `15`, `23.97`, `24`, `25`, `29.97`, `30`, `50`, `60`.
     * 
     */
    public Optional<Output<String>> frameRate() {
        return Optional.ofNullable(this.frameRate);
    }

    /**
     * The maximum number of frames between key frames. Not applicable for containers of type gif.
     * 
     */
    @Import(name="keyframesMaxDist")
    private @Nullable Output<String> keyframesMaxDist;

    /**
     * @return The maximum number of frames between key frames. Not applicable for containers of type gif.
     * 
     */
    public Optional<Output<String>> keyframesMaxDist() {
        return Optional.ofNullable(this.keyframesMaxDist);
    }

    /**
     * If you specify auto for FrameRate, Elastic Transcoder uses the frame rate of the input video for the frame rate of the output video, up to the maximum frame rate. If you do not specify a MaxFrameRate, Elastic Transcoder will use a default of 30.
     * 
     */
    @Import(name="maxFrameRate")
    private @Nullable Output<String> maxFrameRate;

    /**
     * @return If you specify auto for FrameRate, Elastic Transcoder uses the frame rate of the input video for the frame rate of the output video, up to the maximum frame rate. If you do not specify a MaxFrameRate, Elastic Transcoder will use a default of 30.
     * 
     */
    public Optional<Output<String>> maxFrameRate() {
        return Optional.ofNullable(this.maxFrameRate);
    }

    /**
     * The maximum height of the output video in pixels. If you specify auto, Elastic Transcoder uses 1080 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 96 and 3072, inclusive.
     * 
     */
    @Import(name="maxHeight")
    private @Nullable Output<String> maxHeight;

    /**
     * @return The maximum height of the output video in pixels. If you specify auto, Elastic Transcoder uses 1080 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 96 and 3072, inclusive.
     * 
     */
    public Optional<Output<String>> maxHeight() {
        return Optional.ofNullable(this.maxHeight);
    }

    /**
     * The maximum width of the output video in pixels. If you specify auto, Elastic Transcoder uses 1920 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 128 and 4096, inclusive.
     * 
     */
    @Import(name="maxWidth")
    private @Nullable Output<String> maxWidth;

    /**
     * @return The maximum width of the output video in pixels. If you specify auto, Elastic Transcoder uses 1920 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 128 and 4096, inclusive.
     * 
     */
    public Optional<Output<String>> maxWidth() {
        return Optional.ofNullable(this.maxWidth);
    }

    /**
     * When you set PaddingPolicy to Pad, Elastic Transcoder might add black bars to the top and bottom and/or left and right sides of the output video to make the total size of the output video match the values that you specified for `max_width` and `max_height`.
     * 
     */
    @Import(name="paddingPolicy")
    private @Nullable Output<String> paddingPolicy;

    /**
     * @return When you set PaddingPolicy to Pad, Elastic Transcoder might add black bars to the top and bottom and/or left and right sides of the output video to make the total size of the output video match the values that you specified for `max_width` and `max_height`.
     * 
     */
    public Optional<Output<String>> paddingPolicy() {
        return Optional.ofNullable(this.paddingPolicy);
    }

    /**
     * The width and height of the video in the output file, in pixels. Valid values are `auto` and `widthxheight`. (see note for `aspect_ratio`)
     * 
     */
    @Import(name="resolution")
    private @Nullable Output<String> resolution;

    /**
     * @return The width and height of the video in the output file, in pixels. Valid values are `auto` and `widthxheight`. (see note for `aspect_ratio`)
     * 
     */
    public Optional<Output<String>> resolution() {
        return Optional.ofNullable(this.resolution);
    }

    /**
     * A value that controls scaling of the output video. Valid values are: `Fit`, `Fill`, `Stretch`, `Keep`, `ShrinkToFit`, `ShrinkToFill`.
     * 
     */
    @Import(name="sizingPolicy")
    private @Nullable Output<String> sizingPolicy;

    /**
     * @return A value that controls scaling of the output video. Valid values are: `Fit`, `Fill`, `Stretch`, `Keep`, `ShrinkToFit`, `ShrinkToFill`.
     * 
     */
    public Optional<Output<String>> sizingPolicy() {
        return Optional.ofNullable(this.sizingPolicy);
    }

    private PresetVideoArgs() {}

    private PresetVideoArgs(PresetVideoArgs $) {
        this.aspectRatio = $.aspectRatio;
        this.bitRate = $.bitRate;
        this.codec = $.codec;
        this.displayAspectRatio = $.displayAspectRatio;
        this.fixedGop = $.fixedGop;
        this.frameRate = $.frameRate;
        this.keyframesMaxDist = $.keyframesMaxDist;
        this.maxFrameRate = $.maxFrameRate;
        this.maxHeight = $.maxHeight;
        this.maxWidth = $.maxWidth;
        this.paddingPolicy = $.paddingPolicy;
        this.resolution = $.resolution;
        this.sizingPolicy = $.sizingPolicy;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PresetVideoArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PresetVideoArgs $;

        public Builder() {
            $ = new PresetVideoArgs();
        }

        public Builder(PresetVideoArgs defaults) {
            $ = new PresetVideoArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param aspectRatio The display aspect ratio of the video in the output file. Valid values are: `auto`, `1:1`, `4:3`, `3:2`, `16:9`. (Note; to better control resolution and aspect ratio of output videos, we recommend that you use the values `max_width`, `max_height`, `sizing_policy`, `padding_policy`, and `display_aspect_ratio` instead of `resolution` and `aspect_ratio`.)
         * 
         * @return builder
         * 
         */
        public Builder aspectRatio(@Nullable Output<String> aspectRatio) {
            $.aspectRatio = aspectRatio;
            return this;
        }

        /**
         * @param aspectRatio The display aspect ratio of the video in the output file. Valid values are: `auto`, `1:1`, `4:3`, `3:2`, `16:9`. (Note; to better control resolution and aspect ratio of output videos, we recommend that you use the values `max_width`, `max_height`, `sizing_policy`, `padding_policy`, and `display_aspect_ratio` instead of `resolution` and `aspect_ratio`.)
         * 
         * @return builder
         * 
         */
        public Builder aspectRatio(String aspectRatio) {
            return aspectRatio(Output.of(aspectRatio));
        }

        /**
         * @param bitRate The bit rate of the video stream in the output file, in kilobits/second. You can configure variable bit rate or constant bit rate encoding.
         * 
         * @return builder
         * 
         */
        public Builder bitRate(@Nullable Output<String> bitRate) {
            $.bitRate = bitRate;
            return this;
        }

        /**
         * @param bitRate The bit rate of the video stream in the output file, in kilobits/second. You can configure variable bit rate or constant bit rate encoding.
         * 
         * @return builder
         * 
         */
        public Builder bitRate(String bitRate) {
            return bitRate(Output.of(bitRate));
        }

        /**
         * @param codec The video codec for the output file. Valid values are `gif`, `H.264`, `mpeg2`, `vp8`, and `vp9`.
         * 
         * @return builder
         * 
         */
        public Builder codec(@Nullable Output<String> codec) {
            $.codec = codec;
            return this;
        }

        /**
         * @param codec The video codec for the output file. Valid values are `gif`, `H.264`, `mpeg2`, `vp8`, and `vp9`.
         * 
         * @return builder
         * 
         */
        public Builder codec(String codec) {
            return codec(Output.of(codec));
        }

        /**
         * @param displayAspectRatio The value that Elastic Transcoder adds to the metadata in the output file. If you set DisplayAspectRatio to auto, Elastic Transcoder chooses an aspect ratio that ensures square pixels. If you specify another option, Elastic Transcoder sets that value in the output file.
         * 
         * @return builder
         * 
         */
        public Builder displayAspectRatio(@Nullable Output<String> displayAspectRatio) {
            $.displayAspectRatio = displayAspectRatio;
            return this;
        }

        /**
         * @param displayAspectRatio The value that Elastic Transcoder adds to the metadata in the output file. If you set DisplayAspectRatio to auto, Elastic Transcoder chooses an aspect ratio that ensures square pixels. If you specify another option, Elastic Transcoder sets that value in the output file.
         * 
         * @return builder
         * 
         */
        public Builder displayAspectRatio(String displayAspectRatio) {
            return displayAspectRatio(Output.of(displayAspectRatio));
        }

        /**
         * @param fixedGop Whether to use a fixed value for Video:FixedGOP. Not applicable for containers of type gif. Valid values are true and false. Also known as, Fixed Number of Frames Between Keyframes.
         * 
         * @return builder
         * 
         */
        public Builder fixedGop(@Nullable Output<String> fixedGop) {
            $.fixedGop = fixedGop;
            return this;
        }

        /**
         * @param fixedGop Whether to use a fixed value for Video:FixedGOP. Not applicable for containers of type gif. Valid values are true and false. Also known as, Fixed Number of Frames Between Keyframes.
         * 
         * @return builder
         * 
         */
        public Builder fixedGop(String fixedGop) {
            return fixedGop(Output.of(fixedGop));
        }

        /**
         * @param frameRate The frames per second for the video stream in the output file. The following values are valid: `auto`, `10`, `15`, `23.97`, `24`, `25`, `29.97`, `30`, `50`, `60`.
         * 
         * @return builder
         * 
         */
        public Builder frameRate(@Nullable Output<String> frameRate) {
            $.frameRate = frameRate;
            return this;
        }

        /**
         * @param frameRate The frames per second for the video stream in the output file. The following values are valid: `auto`, `10`, `15`, `23.97`, `24`, `25`, `29.97`, `30`, `50`, `60`.
         * 
         * @return builder
         * 
         */
        public Builder frameRate(String frameRate) {
            return frameRate(Output.of(frameRate));
        }

        /**
         * @param keyframesMaxDist The maximum number of frames between key frames. Not applicable for containers of type gif.
         * 
         * @return builder
         * 
         */
        public Builder keyframesMaxDist(@Nullable Output<String> keyframesMaxDist) {
            $.keyframesMaxDist = keyframesMaxDist;
            return this;
        }

        /**
         * @param keyframesMaxDist The maximum number of frames between key frames. Not applicable for containers of type gif.
         * 
         * @return builder
         * 
         */
        public Builder keyframesMaxDist(String keyframesMaxDist) {
            return keyframesMaxDist(Output.of(keyframesMaxDist));
        }

        /**
         * @param maxFrameRate If you specify auto for FrameRate, Elastic Transcoder uses the frame rate of the input video for the frame rate of the output video, up to the maximum frame rate. If you do not specify a MaxFrameRate, Elastic Transcoder will use a default of 30.
         * 
         * @return builder
         * 
         */
        public Builder maxFrameRate(@Nullable Output<String> maxFrameRate) {
            $.maxFrameRate = maxFrameRate;
            return this;
        }

        /**
         * @param maxFrameRate If you specify auto for FrameRate, Elastic Transcoder uses the frame rate of the input video for the frame rate of the output video, up to the maximum frame rate. If you do not specify a MaxFrameRate, Elastic Transcoder will use a default of 30.
         * 
         * @return builder
         * 
         */
        public Builder maxFrameRate(String maxFrameRate) {
            return maxFrameRate(Output.of(maxFrameRate));
        }

        /**
         * @param maxHeight The maximum height of the output video in pixels. If you specify auto, Elastic Transcoder uses 1080 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 96 and 3072, inclusive.
         * 
         * @return builder
         * 
         */
        public Builder maxHeight(@Nullable Output<String> maxHeight) {
            $.maxHeight = maxHeight;
            return this;
        }

        /**
         * @param maxHeight The maximum height of the output video in pixels. If you specify auto, Elastic Transcoder uses 1080 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 96 and 3072, inclusive.
         * 
         * @return builder
         * 
         */
        public Builder maxHeight(String maxHeight) {
            return maxHeight(Output.of(maxHeight));
        }

        /**
         * @param maxWidth The maximum width of the output video in pixels. If you specify auto, Elastic Transcoder uses 1920 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 128 and 4096, inclusive.
         * 
         * @return builder
         * 
         */
        public Builder maxWidth(@Nullable Output<String> maxWidth) {
            $.maxWidth = maxWidth;
            return this;
        }

        /**
         * @param maxWidth The maximum width of the output video in pixels. If you specify auto, Elastic Transcoder uses 1920 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 128 and 4096, inclusive.
         * 
         * @return builder
         * 
         */
        public Builder maxWidth(String maxWidth) {
            return maxWidth(Output.of(maxWidth));
        }

        /**
         * @param paddingPolicy When you set PaddingPolicy to Pad, Elastic Transcoder might add black bars to the top and bottom and/or left and right sides of the output video to make the total size of the output video match the values that you specified for `max_width` and `max_height`.
         * 
         * @return builder
         * 
         */
        public Builder paddingPolicy(@Nullable Output<String> paddingPolicy) {
            $.paddingPolicy = paddingPolicy;
            return this;
        }

        /**
         * @param paddingPolicy When you set PaddingPolicy to Pad, Elastic Transcoder might add black bars to the top and bottom and/or left and right sides of the output video to make the total size of the output video match the values that you specified for `max_width` and `max_height`.
         * 
         * @return builder
         * 
         */
        public Builder paddingPolicy(String paddingPolicy) {
            return paddingPolicy(Output.of(paddingPolicy));
        }

        /**
         * @param resolution The width and height of the video in the output file, in pixels. Valid values are `auto` and `widthxheight`. (see note for `aspect_ratio`)
         * 
         * @return builder
         * 
         */
        public Builder resolution(@Nullable Output<String> resolution) {
            $.resolution = resolution;
            return this;
        }

        /**
         * @param resolution The width and height of the video in the output file, in pixels. Valid values are `auto` and `widthxheight`. (see note for `aspect_ratio`)
         * 
         * @return builder
         * 
         */
        public Builder resolution(String resolution) {
            return resolution(Output.of(resolution));
        }

        /**
         * @param sizingPolicy A value that controls scaling of the output video. Valid values are: `Fit`, `Fill`, `Stretch`, `Keep`, `ShrinkToFit`, `ShrinkToFill`.
         * 
         * @return builder
         * 
         */
        public Builder sizingPolicy(@Nullable Output<String> sizingPolicy) {
            $.sizingPolicy = sizingPolicy;
            return this;
        }

        /**
         * @param sizingPolicy A value that controls scaling of the output video. Valid values are: `Fit`, `Fill`, `Stretch`, `Keep`, `ShrinkToFit`, `ShrinkToFill`.
         * 
         * @return builder
         * 
         */
        public Builder sizingPolicy(String sizingPolicy) {
            return sizingPolicy(Output.of(sizingPolicy));
        }

        public PresetVideoArgs build() {
            return $;
        }
    }

}
