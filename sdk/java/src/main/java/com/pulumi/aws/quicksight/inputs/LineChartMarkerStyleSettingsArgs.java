// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LineChartMarkerStyleSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final LineChartMarkerStyleSettingsArgs Empty = new LineChartMarkerStyleSettingsArgs();

    @Import(name="markerColor")
    private @Nullable Output<String> markerColor;

    public Optional<Output<String>> markerColor() {
        return Optional.ofNullable(this.markerColor);
    }

    @Import(name="markerShape")
    private @Nullable Output<String> markerShape;

    public Optional<Output<String>> markerShape() {
        return Optional.ofNullable(this.markerShape);
    }

    @Import(name="markerSize")
    private @Nullable Output<String> markerSize;

    public Optional<Output<String>> markerSize() {
        return Optional.ofNullable(this.markerSize);
    }

    @Import(name="markerVisibility")
    private @Nullable Output<String> markerVisibility;

    public Optional<Output<String>> markerVisibility() {
        return Optional.ofNullable(this.markerVisibility);
    }

    private LineChartMarkerStyleSettingsArgs() {}

    private LineChartMarkerStyleSettingsArgs(LineChartMarkerStyleSettingsArgs $) {
        this.markerColor = $.markerColor;
        this.markerShape = $.markerShape;
        this.markerSize = $.markerSize;
        this.markerVisibility = $.markerVisibility;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LineChartMarkerStyleSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LineChartMarkerStyleSettingsArgs $;

        public Builder() {
            $ = new LineChartMarkerStyleSettingsArgs();
        }

        public Builder(LineChartMarkerStyleSettingsArgs defaults) {
            $ = new LineChartMarkerStyleSettingsArgs(Objects.requireNonNull(defaults));
        }

        public Builder markerColor(@Nullable Output<String> markerColor) {
            $.markerColor = markerColor;
            return this;
        }

        public Builder markerColor(String markerColor) {
            return markerColor(Output.of(markerColor));
        }

        public Builder markerShape(@Nullable Output<String> markerShape) {
            $.markerShape = markerShape;
            return this;
        }

        public Builder markerShape(String markerShape) {
            return markerShape(Output.of(markerShape));
        }

        public Builder markerSize(@Nullable Output<String> markerSize) {
            $.markerSize = markerSize;
            return this;
        }

        public Builder markerSize(String markerSize) {
            return markerSize(Output.of(markerSize));
        }

        public Builder markerVisibility(@Nullable Output<String> markerVisibility) {
            $.markerVisibility = markerVisibility;
            return this;
        }

        public Builder markerVisibility(String markerVisibility) {
            return markerVisibility(Output.of(markerVisibility));
        }

        public LineChartMarkerStyleSettingsArgs build() {
            return $;
        }
    }

}
