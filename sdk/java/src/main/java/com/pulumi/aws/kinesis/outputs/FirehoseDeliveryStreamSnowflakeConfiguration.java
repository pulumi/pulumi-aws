// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.kinesis.outputs;

import com.pulumi.aws.kinesis.outputs.FirehoseDeliveryStreamSnowflakeConfigurationCloudwatchLoggingOptions;
import com.pulumi.aws.kinesis.outputs.FirehoseDeliveryStreamSnowflakeConfigurationProcessingConfiguration;
import com.pulumi.aws.kinesis.outputs.FirehoseDeliveryStreamSnowflakeConfigurationS3Configuration;
import com.pulumi.aws.kinesis.outputs.FirehoseDeliveryStreamSnowflakeConfigurationSecretsManagerConfiguration;
import com.pulumi.aws.kinesis.outputs.FirehoseDeliveryStreamSnowflakeConfigurationSnowflakeRoleConfiguration;
import com.pulumi.aws.kinesis.outputs.FirehoseDeliveryStreamSnowflakeConfigurationSnowflakeVpcConfiguration;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class FirehoseDeliveryStreamSnowflakeConfiguration {
    /**
     * @return The URL of the Snowflake account. Format: https://[account_identifier].snowflakecomputing.com.
     * 
     */
    private String accountUrl;
    /**
     * @return Buffer incoming data for the specified period of time, in seconds between 0 to 900, before delivering it to the destination.  The default value is 0s.
     * 
     */
    private @Nullable Integer bufferingInterval;
    /**
     * @return Buffer incoming data to the specified size, in MBs between 1 to 128, before delivering it to the destination.  The default value is 1MB.
     * 
     */
    private @Nullable Integer bufferingSize;
    /**
     * @return The CloudWatch Logging Options for the delivery stream. See `cloudwatch_logging_options` block below for details.
     * 
     */
    private @Nullable FirehoseDeliveryStreamSnowflakeConfigurationCloudwatchLoggingOptions cloudwatchLoggingOptions;
    /**
     * @return The name of the content column.
     * 
     */
    private @Nullable String contentColumnName;
    /**
     * @return The data loading option.
     * 
     */
    private @Nullable String dataLoadingOption;
    /**
     * @return The Snowflake database name.
     * 
     */
    private String database;
    /**
     * @return The passphrase for the private key.
     * 
     */
    private @Nullable String keyPassphrase;
    /**
     * @return The name of the metadata column.
     * 
     */
    private @Nullable String metadataColumnName;
    /**
     * @return The private key for authentication. This value is required if `secrets_manager_configuration` is not provided.
     * 
     */
    private @Nullable String privateKey;
    /**
     * @return The processing configuration. See `processing_configuration` block below for details.
     * 
     */
    private @Nullable FirehoseDeliveryStreamSnowflakeConfigurationProcessingConfiguration processingConfiguration;
    /**
     * @return After an initial failure to deliver to Snowflake, the total amount of time, in seconds between 0 to 7200, during which Firehose re-attempts delivery (including the first attempt).  After this time has elapsed, the failed documents are written to Amazon S3.  The default value is 60s.  There will be no retry if the value is 0.
     * 
     */
    private @Nullable Integer retryDuration;
    /**
     * @return The ARN of the IAM role.
     * 
     */
    private String roleArn;
    /**
     * @return The S3 backup mode.
     * 
     */
    private @Nullable String s3BackupMode;
    /**
     * @return The S3 configuration. See `s3_configuration` block below for details.
     * 
     */
    private FirehoseDeliveryStreamSnowflakeConfigurationS3Configuration s3Configuration;
    /**
     * @return The Snowflake schema name.
     * 
     */
    private String schema;
    /**
     * @return The Secrets Manager configuration. See `secrets_manager_configuration` block below for details. This value is required if `user` and `private_key` are not provided.
     * 
     */
    private @Nullable FirehoseDeliveryStreamSnowflakeConfigurationSecretsManagerConfiguration secretsManagerConfiguration;
    /**
     * @return The configuration for Snowflake role.
     * 
     */
    private @Nullable FirehoseDeliveryStreamSnowflakeConfigurationSnowflakeRoleConfiguration snowflakeRoleConfiguration;
    /**
     * @return The VPC configuration for Snowflake.
     * 
     */
    private @Nullable FirehoseDeliveryStreamSnowflakeConfigurationSnowflakeVpcConfiguration snowflakeVpcConfiguration;
    /**
     * @return The Snowflake table name.
     * 
     */
    private String table;
    /**
     * @return The user for authentication. This value is required if `secrets_manager_configuration` is not provided.
     * 
     */
    private @Nullable String user;

    private FirehoseDeliveryStreamSnowflakeConfiguration() {}
    /**
     * @return The URL of the Snowflake account. Format: https://[account_identifier].snowflakecomputing.com.
     * 
     */
    public String accountUrl() {
        return this.accountUrl;
    }
    /**
     * @return Buffer incoming data for the specified period of time, in seconds between 0 to 900, before delivering it to the destination.  The default value is 0s.
     * 
     */
    public Optional<Integer> bufferingInterval() {
        return Optional.ofNullable(this.bufferingInterval);
    }
    /**
     * @return Buffer incoming data to the specified size, in MBs between 1 to 128, before delivering it to the destination.  The default value is 1MB.
     * 
     */
    public Optional<Integer> bufferingSize() {
        return Optional.ofNullable(this.bufferingSize);
    }
    /**
     * @return The CloudWatch Logging Options for the delivery stream. See `cloudwatch_logging_options` block below for details.
     * 
     */
    public Optional<FirehoseDeliveryStreamSnowflakeConfigurationCloudwatchLoggingOptions> cloudwatchLoggingOptions() {
        return Optional.ofNullable(this.cloudwatchLoggingOptions);
    }
    /**
     * @return The name of the content column.
     * 
     */
    public Optional<String> contentColumnName() {
        return Optional.ofNullable(this.contentColumnName);
    }
    /**
     * @return The data loading option.
     * 
     */
    public Optional<String> dataLoadingOption() {
        return Optional.ofNullable(this.dataLoadingOption);
    }
    /**
     * @return The Snowflake database name.
     * 
     */
    public String database() {
        return this.database;
    }
    /**
     * @return The passphrase for the private key.
     * 
     */
    public Optional<String> keyPassphrase() {
        return Optional.ofNullable(this.keyPassphrase);
    }
    /**
     * @return The name of the metadata column.
     * 
     */
    public Optional<String> metadataColumnName() {
        return Optional.ofNullable(this.metadataColumnName);
    }
    /**
     * @return The private key for authentication. This value is required if `secrets_manager_configuration` is not provided.
     * 
     */
    public Optional<String> privateKey() {
        return Optional.ofNullable(this.privateKey);
    }
    /**
     * @return The processing configuration. See `processing_configuration` block below for details.
     * 
     */
    public Optional<FirehoseDeliveryStreamSnowflakeConfigurationProcessingConfiguration> processingConfiguration() {
        return Optional.ofNullable(this.processingConfiguration);
    }
    /**
     * @return After an initial failure to deliver to Snowflake, the total amount of time, in seconds between 0 to 7200, during which Firehose re-attempts delivery (including the first attempt).  After this time has elapsed, the failed documents are written to Amazon S3.  The default value is 60s.  There will be no retry if the value is 0.
     * 
     */
    public Optional<Integer> retryDuration() {
        return Optional.ofNullable(this.retryDuration);
    }
    /**
     * @return The ARN of the IAM role.
     * 
     */
    public String roleArn() {
        return this.roleArn;
    }
    /**
     * @return The S3 backup mode.
     * 
     */
    public Optional<String> s3BackupMode() {
        return Optional.ofNullable(this.s3BackupMode);
    }
    /**
     * @return The S3 configuration. See `s3_configuration` block below for details.
     * 
     */
    public FirehoseDeliveryStreamSnowflakeConfigurationS3Configuration s3Configuration() {
        return this.s3Configuration;
    }
    /**
     * @return The Snowflake schema name.
     * 
     */
    public String schema() {
        return this.schema;
    }
    /**
     * @return The Secrets Manager configuration. See `secrets_manager_configuration` block below for details. This value is required if `user` and `private_key` are not provided.
     * 
     */
    public Optional<FirehoseDeliveryStreamSnowflakeConfigurationSecretsManagerConfiguration> secretsManagerConfiguration() {
        return Optional.ofNullable(this.secretsManagerConfiguration);
    }
    /**
     * @return The configuration for Snowflake role.
     * 
     */
    public Optional<FirehoseDeliveryStreamSnowflakeConfigurationSnowflakeRoleConfiguration> snowflakeRoleConfiguration() {
        return Optional.ofNullable(this.snowflakeRoleConfiguration);
    }
    /**
     * @return The VPC configuration for Snowflake.
     * 
     */
    public Optional<FirehoseDeliveryStreamSnowflakeConfigurationSnowflakeVpcConfiguration> snowflakeVpcConfiguration() {
        return Optional.ofNullable(this.snowflakeVpcConfiguration);
    }
    /**
     * @return The Snowflake table name.
     * 
     */
    public String table() {
        return this.table;
    }
    /**
     * @return The user for authentication. This value is required if `secrets_manager_configuration` is not provided.
     * 
     */
    public Optional<String> user() {
        return Optional.ofNullable(this.user);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FirehoseDeliveryStreamSnowflakeConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accountUrl;
        private @Nullable Integer bufferingInterval;
        private @Nullable Integer bufferingSize;
        private @Nullable FirehoseDeliveryStreamSnowflakeConfigurationCloudwatchLoggingOptions cloudwatchLoggingOptions;
        private @Nullable String contentColumnName;
        private @Nullable String dataLoadingOption;
        private String database;
        private @Nullable String keyPassphrase;
        private @Nullable String metadataColumnName;
        private @Nullable String privateKey;
        private @Nullable FirehoseDeliveryStreamSnowflakeConfigurationProcessingConfiguration processingConfiguration;
        private @Nullable Integer retryDuration;
        private String roleArn;
        private @Nullable String s3BackupMode;
        private FirehoseDeliveryStreamSnowflakeConfigurationS3Configuration s3Configuration;
        private String schema;
        private @Nullable FirehoseDeliveryStreamSnowflakeConfigurationSecretsManagerConfiguration secretsManagerConfiguration;
        private @Nullable FirehoseDeliveryStreamSnowflakeConfigurationSnowflakeRoleConfiguration snowflakeRoleConfiguration;
        private @Nullable FirehoseDeliveryStreamSnowflakeConfigurationSnowflakeVpcConfiguration snowflakeVpcConfiguration;
        private String table;
        private @Nullable String user;
        public Builder() {}
        public Builder(FirehoseDeliveryStreamSnowflakeConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountUrl = defaults.accountUrl;
    	      this.bufferingInterval = defaults.bufferingInterval;
    	      this.bufferingSize = defaults.bufferingSize;
    	      this.cloudwatchLoggingOptions = defaults.cloudwatchLoggingOptions;
    	      this.contentColumnName = defaults.contentColumnName;
    	      this.dataLoadingOption = defaults.dataLoadingOption;
    	      this.database = defaults.database;
    	      this.keyPassphrase = defaults.keyPassphrase;
    	      this.metadataColumnName = defaults.metadataColumnName;
    	      this.privateKey = defaults.privateKey;
    	      this.processingConfiguration = defaults.processingConfiguration;
    	      this.retryDuration = defaults.retryDuration;
    	      this.roleArn = defaults.roleArn;
    	      this.s3BackupMode = defaults.s3BackupMode;
    	      this.s3Configuration = defaults.s3Configuration;
    	      this.schema = defaults.schema;
    	      this.secretsManagerConfiguration = defaults.secretsManagerConfiguration;
    	      this.snowflakeRoleConfiguration = defaults.snowflakeRoleConfiguration;
    	      this.snowflakeVpcConfiguration = defaults.snowflakeVpcConfiguration;
    	      this.table = defaults.table;
    	      this.user = defaults.user;
        }

        @CustomType.Setter
        public Builder accountUrl(String accountUrl) {
            if (accountUrl == null) {
              throw new MissingRequiredPropertyException("FirehoseDeliveryStreamSnowflakeConfiguration", "accountUrl");
            }
            this.accountUrl = accountUrl;
            return this;
        }
        @CustomType.Setter
        public Builder bufferingInterval(@Nullable Integer bufferingInterval) {

            this.bufferingInterval = bufferingInterval;
            return this;
        }
        @CustomType.Setter
        public Builder bufferingSize(@Nullable Integer bufferingSize) {

            this.bufferingSize = bufferingSize;
            return this;
        }
        @CustomType.Setter
        public Builder cloudwatchLoggingOptions(@Nullable FirehoseDeliveryStreamSnowflakeConfigurationCloudwatchLoggingOptions cloudwatchLoggingOptions) {

            this.cloudwatchLoggingOptions = cloudwatchLoggingOptions;
            return this;
        }
        @CustomType.Setter
        public Builder contentColumnName(@Nullable String contentColumnName) {

            this.contentColumnName = contentColumnName;
            return this;
        }
        @CustomType.Setter
        public Builder dataLoadingOption(@Nullable String dataLoadingOption) {

            this.dataLoadingOption = dataLoadingOption;
            return this;
        }
        @CustomType.Setter
        public Builder database(String database) {
            if (database == null) {
              throw new MissingRequiredPropertyException("FirehoseDeliveryStreamSnowflakeConfiguration", "database");
            }
            this.database = database;
            return this;
        }
        @CustomType.Setter
        public Builder keyPassphrase(@Nullable String keyPassphrase) {

            this.keyPassphrase = keyPassphrase;
            return this;
        }
        @CustomType.Setter
        public Builder metadataColumnName(@Nullable String metadataColumnName) {

            this.metadataColumnName = metadataColumnName;
            return this;
        }
        @CustomType.Setter
        public Builder privateKey(@Nullable String privateKey) {

            this.privateKey = privateKey;
            return this;
        }
        @CustomType.Setter
        public Builder processingConfiguration(@Nullable FirehoseDeliveryStreamSnowflakeConfigurationProcessingConfiguration processingConfiguration) {

            this.processingConfiguration = processingConfiguration;
            return this;
        }
        @CustomType.Setter
        public Builder retryDuration(@Nullable Integer retryDuration) {

            this.retryDuration = retryDuration;
            return this;
        }
        @CustomType.Setter
        public Builder roleArn(String roleArn) {
            if (roleArn == null) {
              throw new MissingRequiredPropertyException("FirehoseDeliveryStreamSnowflakeConfiguration", "roleArn");
            }
            this.roleArn = roleArn;
            return this;
        }
        @CustomType.Setter
        public Builder s3BackupMode(@Nullable String s3BackupMode) {

            this.s3BackupMode = s3BackupMode;
            return this;
        }
        @CustomType.Setter
        public Builder s3Configuration(FirehoseDeliveryStreamSnowflakeConfigurationS3Configuration s3Configuration) {
            if (s3Configuration == null) {
              throw new MissingRequiredPropertyException("FirehoseDeliveryStreamSnowflakeConfiguration", "s3Configuration");
            }
            this.s3Configuration = s3Configuration;
            return this;
        }
        @CustomType.Setter
        public Builder schema(String schema) {
            if (schema == null) {
              throw new MissingRequiredPropertyException("FirehoseDeliveryStreamSnowflakeConfiguration", "schema");
            }
            this.schema = schema;
            return this;
        }
        @CustomType.Setter
        public Builder secretsManagerConfiguration(@Nullable FirehoseDeliveryStreamSnowflakeConfigurationSecretsManagerConfiguration secretsManagerConfiguration) {

            this.secretsManagerConfiguration = secretsManagerConfiguration;
            return this;
        }
        @CustomType.Setter
        public Builder snowflakeRoleConfiguration(@Nullable FirehoseDeliveryStreamSnowflakeConfigurationSnowflakeRoleConfiguration snowflakeRoleConfiguration) {

            this.snowflakeRoleConfiguration = snowflakeRoleConfiguration;
            return this;
        }
        @CustomType.Setter
        public Builder snowflakeVpcConfiguration(@Nullable FirehoseDeliveryStreamSnowflakeConfigurationSnowflakeVpcConfiguration snowflakeVpcConfiguration) {

            this.snowflakeVpcConfiguration = snowflakeVpcConfiguration;
            return this;
        }
        @CustomType.Setter
        public Builder table(String table) {
            if (table == null) {
              throw new MissingRequiredPropertyException("FirehoseDeliveryStreamSnowflakeConfiguration", "table");
            }
            this.table = table;
            return this;
        }
        @CustomType.Setter
        public Builder user(@Nullable String user) {

            this.user = user;
            return this;
        }
        public FirehoseDeliveryStreamSnowflakeConfiguration build() {
            final var _resultValue = new FirehoseDeliveryStreamSnowflakeConfiguration();
            _resultValue.accountUrl = accountUrl;
            _resultValue.bufferingInterval = bufferingInterval;
            _resultValue.bufferingSize = bufferingSize;
            _resultValue.cloudwatchLoggingOptions = cloudwatchLoggingOptions;
            _resultValue.contentColumnName = contentColumnName;
            _resultValue.dataLoadingOption = dataLoadingOption;
            _resultValue.database = database;
            _resultValue.keyPassphrase = keyPassphrase;
            _resultValue.metadataColumnName = metadataColumnName;
            _resultValue.privateKey = privateKey;
            _resultValue.processingConfiguration = processingConfiguration;
            _resultValue.retryDuration = retryDuration;
            _resultValue.roleArn = roleArn;
            _resultValue.s3BackupMode = s3BackupMode;
            _resultValue.s3Configuration = s3Configuration;
            _resultValue.schema = schema;
            _resultValue.secretsManagerConfiguration = secretsManagerConfiguration;
            _resultValue.snowflakeRoleConfiguration = snowflakeRoleConfiguration;
            _resultValue.snowflakeVpcConfiguration = snowflakeVpcConfiguration;
            _resultValue.table = table;
            _resultValue.user = user;
            return _resultValue;
        }
    }
}
