// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.batch.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetComputeEnvironmentResult {
    /**
     * @return ARN of the compute environment.
     * 
     */
    private String arn;
    private String computeEnvironmentName;
    /**
     * @return ARN of the underlying Amazon ECS cluster used by the compute environment.
     * 
     */
    private String ecsClusterArn;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return ARN of the IAM role that allows AWS Batch to make calls to other AWS services on your behalf.
     * 
     */
    private String serviceRole;
    /**
     * @return State of the compute environment (for example, `ENABLED` or `DISABLED`). If the state is `ENABLED`, then the compute environment accepts jobs from a queue and can scale out automatically based on queues.
     * 
     */
    private String state;
    /**
     * @return Current status of the compute environment (for example, `CREATING` or `VALID`).
     * 
     */
    private String status;
    /**
     * @return Short, human-readable string to provide additional details about the current status of the compute environment.
     * 
     */
    private String statusReason;
    /**
     * @return Key-value map of resource tags
     * 
     */
    private Map<String,String> tags;
    /**
     * @return Type of the compute environment (for example, `MANAGED` or `UNMANAGED`).
     * 
     */
    private String type;

    private GetComputeEnvironmentResult() {}
    /**
     * @return ARN of the compute environment.
     * 
     */
    public String arn() {
        return this.arn;
    }
    public String computeEnvironmentName() {
        return this.computeEnvironmentName;
    }
    /**
     * @return ARN of the underlying Amazon ECS cluster used by the compute environment.
     * 
     */
    public String ecsClusterArn() {
        return this.ecsClusterArn;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return ARN of the IAM role that allows AWS Batch to make calls to other AWS services on your behalf.
     * 
     */
    public String serviceRole() {
        return this.serviceRole;
    }
    /**
     * @return State of the compute environment (for example, `ENABLED` or `DISABLED`). If the state is `ENABLED`, then the compute environment accepts jobs from a queue and can scale out automatically based on queues.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Current status of the compute environment (for example, `CREATING` or `VALID`).
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return Short, human-readable string to provide additional details about the current status of the compute environment.
     * 
     */
    public String statusReason() {
        return this.statusReason;
    }
    /**
     * @return Key-value map of resource tags
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }
    /**
     * @return Type of the compute environment (for example, `MANAGED` or `UNMANAGED`).
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetComputeEnvironmentResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String arn;
        private String computeEnvironmentName;
        private String ecsClusterArn;
        private String id;
        private String serviceRole;
        private String state;
        private String status;
        private String statusReason;
        private Map<String,String> tags;
        private String type;
        public Builder() {}
        public Builder(GetComputeEnvironmentResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.computeEnvironmentName = defaults.computeEnvironmentName;
    	      this.ecsClusterArn = defaults.ecsClusterArn;
    	      this.id = defaults.id;
    	      this.serviceRole = defaults.serviceRole;
    	      this.state = defaults.state;
    	      this.status = defaults.status;
    	      this.statusReason = defaults.statusReason;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder arn(String arn) {
            if (arn == null) {
              throw new MissingRequiredPropertyException("GetComputeEnvironmentResult", "arn");
            }
            this.arn = arn;
            return this;
        }
        @CustomType.Setter
        public Builder computeEnvironmentName(String computeEnvironmentName) {
            if (computeEnvironmentName == null) {
              throw new MissingRequiredPropertyException("GetComputeEnvironmentResult", "computeEnvironmentName");
            }
            this.computeEnvironmentName = computeEnvironmentName;
            return this;
        }
        @CustomType.Setter
        public Builder ecsClusterArn(String ecsClusterArn) {
            if (ecsClusterArn == null) {
              throw new MissingRequiredPropertyException("GetComputeEnvironmentResult", "ecsClusterArn");
            }
            this.ecsClusterArn = ecsClusterArn;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetComputeEnvironmentResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder serviceRole(String serviceRole) {
            if (serviceRole == null) {
              throw new MissingRequiredPropertyException("GetComputeEnvironmentResult", "serviceRole");
            }
            this.serviceRole = serviceRole;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetComputeEnvironmentResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetComputeEnvironmentResult", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder statusReason(String statusReason) {
            if (statusReason == null) {
              throw new MissingRequiredPropertyException("GetComputeEnvironmentResult", "statusReason");
            }
            this.statusReason = statusReason;
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetComputeEnvironmentResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetComputeEnvironmentResult", "type");
            }
            this.type = type;
            return this;
        }
        public GetComputeEnvironmentResult build() {
            final var _resultValue = new GetComputeEnvironmentResult();
            _resultValue.arn = arn;
            _resultValue.computeEnvironmentName = computeEnvironmentName;
            _resultValue.ecsClusterArn = ecsClusterArn;
            _resultValue.id = id;
            _resultValue.serviceRole = serviceRole;
            _resultValue.state = state;
            _resultValue.status = status;
            _resultValue.statusReason = statusReason;
            _resultValue.tags = tags;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
