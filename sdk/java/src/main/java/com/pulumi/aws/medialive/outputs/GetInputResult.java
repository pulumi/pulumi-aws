// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.medialive.outputs;

import com.pulumi.aws.medialive.outputs.GetInputDestination;
import com.pulumi.aws.medialive.outputs.GetInputInputDevice;
import com.pulumi.aws.medialive.outputs.GetInputMediaConnectFlow;
import com.pulumi.aws.medialive.outputs.GetInputSource;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetInputResult {
    /**
     * @return ARN of the Input.
     * 
     */
    private String arn;
    /**
     * @return Channels attached to Input.
     * 
     */
    private List<String> attachedChannels;
    private List<GetInputDestination> destinations;
    private String id;
    /**
     * @return The input class.
     * 
     */
    private String inputClass;
    /**
     * @return Settings for the devices.
     * 
     */
    private List<GetInputInputDevice> inputDevices;
    /**
     * @return A list of IDs for all Inputs which are partners of this one.
     * 
     */
    private List<String> inputPartnerIds;
    /**
     * @return Source type of the input.
     * 
     */
    private String inputSourceType;
    /**
     * @return A list of the MediaConnect Flows.
     * 
     */
    private List<GetInputMediaConnectFlow> mediaConnectFlows;
    /**
     * @return Name of the input.
     * 
     */
    private String name;
    /**
     * @return The ARN of the role this input assumes during and after creation.
     * 
     */
    private String roleArn;
    /**
     * @return List of input security groups.
     * 
     */
    private List<String> securityGroups;
    /**
     * @return The source URLs for a PULL-type input.
     * 
     */
    private List<GetInputSource> sources;
    /**
     * @return The state of the input.
     * 
     */
    private String state;
    /**
     * @return A map of tags assigned to the Input.
     * 
     */
    private Map<String,String> tags;
    /**
     * @return The type of the input.
     * 
     */
    private String type;

    private GetInputResult() {}
    /**
     * @return ARN of the Input.
     * 
     */
    public String arn() {
        return this.arn;
    }
    /**
     * @return Channels attached to Input.
     * 
     */
    public List<String> attachedChannels() {
        return this.attachedChannels;
    }
    public List<GetInputDestination> destinations() {
        return this.destinations;
    }
    public String id() {
        return this.id;
    }
    /**
     * @return The input class.
     * 
     */
    public String inputClass() {
        return this.inputClass;
    }
    /**
     * @return Settings for the devices.
     * 
     */
    public List<GetInputInputDevice> inputDevices() {
        return this.inputDevices;
    }
    /**
     * @return A list of IDs for all Inputs which are partners of this one.
     * 
     */
    public List<String> inputPartnerIds() {
        return this.inputPartnerIds;
    }
    /**
     * @return Source type of the input.
     * 
     */
    public String inputSourceType() {
        return this.inputSourceType;
    }
    /**
     * @return A list of the MediaConnect Flows.
     * 
     */
    public List<GetInputMediaConnectFlow> mediaConnectFlows() {
        return this.mediaConnectFlows;
    }
    /**
     * @return Name of the input.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The ARN of the role this input assumes during and after creation.
     * 
     */
    public String roleArn() {
        return this.roleArn;
    }
    /**
     * @return List of input security groups.
     * 
     */
    public List<String> securityGroups() {
        return this.securityGroups;
    }
    /**
     * @return The source URLs for a PULL-type input.
     * 
     */
    public List<GetInputSource> sources() {
        return this.sources;
    }
    /**
     * @return The state of the input.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return A map of tags assigned to the Input.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }
    /**
     * @return The type of the input.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInputResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String arn;
        private List<String> attachedChannels;
        private List<GetInputDestination> destinations;
        private String id;
        private String inputClass;
        private List<GetInputInputDevice> inputDevices;
        private List<String> inputPartnerIds;
        private String inputSourceType;
        private List<GetInputMediaConnectFlow> mediaConnectFlows;
        private String name;
        private String roleArn;
        private List<String> securityGroups;
        private List<GetInputSource> sources;
        private String state;
        private Map<String,String> tags;
        private String type;
        public Builder() {}
        public Builder(GetInputResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.attachedChannels = defaults.attachedChannels;
    	      this.destinations = defaults.destinations;
    	      this.id = defaults.id;
    	      this.inputClass = defaults.inputClass;
    	      this.inputDevices = defaults.inputDevices;
    	      this.inputPartnerIds = defaults.inputPartnerIds;
    	      this.inputSourceType = defaults.inputSourceType;
    	      this.mediaConnectFlows = defaults.mediaConnectFlows;
    	      this.name = defaults.name;
    	      this.roleArn = defaults.roleArn;
    	      this.securityGroups = defaults.securityGroups;
    	      this.sources = defaults.sources;
    	      this.state = defaults.state;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder arn(String arn) {
            if (arn == null) {
              throw new MissingRequiredPropertyException("GetInputResult", "arn");
            }
            this.arn = arn;
            return this;
        }
        @CustomType.Setter
        public Builder attachedChannels(List<String> attachedChannels) {
            if (attachedChannels == null) {
              throw new MissingRequiredPropertyException("GetInputResult", "attachedChannels");
            }
            this.attachedChannels = attachedChannels;
            return this;
        }
        public Builder attachedChannels(String... attachedChannels) {
            return attachedChannels(List.of(attachedChannels));
        }
        @CustomType.Setter
        public Builder destinations(List<GetInputDestination> destinations) {
            if (destinations == null) {
              throw new MissingRequiredPropertyException("GetInputResult", "destinations");
            }
            this.destinations = destinations;
            return this;
        }
        public Builder destinations(GetInputDestination... destinations) {
            return destinations(List.of(destinations));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetInputResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder inputClass(String inputClass) {
            if (inputClass == null) {
              throw new MissingRequiredPropertyException("GetInputResult", "inputClass");
            }
            this.inputClass = inputClass;
            return this;
        }
        @CustomType.Setter
        public Builder inputDevices(List<GetInputInputDevice> inputDevices) {
            if (inputDevices == null) {
              throw new MissingRequiredPropertyException("GetInputResult", "inputDevices");
            }
            this.inputDevices = inputDevices;
            return this;
        }
        public Builder inputDevices(GetInputInputDevice... inputDevices) {
            return inputDevices(List.of(inputDevices));
        }
        @CustomType.Setter
        public Builder inputPartnerIds(List<String> inputPartnerIds) {
            if (inputPartnerIds == null) {
              throw new MissingRequiredPropertyException("GetInputResult", "inputPartnerIds");
            }
            this.inputPartnerIds = inputPartnerIds;
            return this;
        }
        public Builder inputPartnerIds(String... inputPartnerIds) {
            return inputPartnerIds(List.of(inputPartnerIds));
        }
        @CustomType.Setter
        public Builder inputSourceType(String inputSourceType) {
            if (inputSourceType == null) {
              throw new MissingRequiredPropertyException("GetInputResult", "inputSourceType");
            }
            this.inputSourceType = inputSourceType;
            return this;
        }
        @CustomType.Setter
        public Builder mediaConnectFlows(List<GetInputMediaConnectFlow> mediaConnectFlows) {
            if (mediaConnectFlows == null) {
              throw new MissingRequiredPropertyException("GetInputResult", "mediaConnectFlows");
            }
            this.mediaConnectFlows = mediaConnectFlows;
            return this;
        }
        public Builder mediaConnectFlows(GetInputMediaConnectFlow... mediaConnectFlows) {
            return mediaConnectFlows(List.of(mediaConnectFlows));
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetInputResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder roleArn(String roleArn) {
            if (roleArn == null) {
              throw new MissingRequiredPropertyException("GetInputResult", "roleArn");
            }
            this.roleArn = roleArn;
            return this;
        }
        @CustomType.Setter
        public Builder securityGroups(List<String> securityGroups) {
            if (securityGroups == null) {
              throw new MissingRequiredPropertyException("GetInputResult", "securityGroups");
            }
            this.securityGroups = securityGroups;
            return this;
        }
        public Builder securityGroups(String... securityGroups) {
            return securityGroups(List.of(securityGroups));
        }
        @CustomType.Setter
        public Builder sources(List<GetInputSource> sources) {
            if (sources == null) {
              throw new MissingRequiredPropertyException("GetInputResult", "sources");
            }
            this.sources = sources;
            return this;
        }
        public Builder sources(GetInputSource... sources) {
            return sources(List.of(sources));
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetInputResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetInputResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetInputResult", "type");
            }
            this.type = type;
            return this;
        }
        public GetInputResult build() {
            final var _resultValue = new GetInputResult();
            _resultValue.arn = arn;
            _resultValue.attachedChannels = attachedChannels;
            _resultValue.destinations = destinations;
            _resultValue.id = id;
            _resultValue.inputClass = inputClass;
            _resultValue.inputDevices = inputDevices;
            _resultValue.inputPartnerIds = inputPartnerIds;
            _resultValue.inputSourceType = inputSourceType;
            _resultValue.mediaConnectFlows = mediaConnectFlows;
            _resultValue.name = name;
            _resultValue.roleArn = roleArn;
            _resultValue.securityGroups = securityGroups;
            _resultValue.sources = sources;
            _resultValue.state = state;
            _resultValue.tags = tags;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
