// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.codepipeline.inputs;

import com.pulumi.aws.codepipeline.inputs.PipelineStageOnFailureConditionRuleRuleTypeIdArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PipelineStageOnFailureConditionRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final PipelineStageOnFailureConditionRuleArgs Empty = new PipelineStageOnFailureConditionRuleArgs();

    /**
     * The shell commands to run with your commands rule in CodePipeline. All commands are supported except multi-line formats.
     * 
     */
    @Import(name="commands")
    private @Nullable Output<List<String>> commands;

    /**
     * @return The shell commands to run with your commands rule in CodePipeline. All commands are supported except multi-line formats.
     * 
     */
    public Optional<Output<List<String>>> commands() {
        return Optional.ofNullable(this.commands);
    }

    /**
     * The action configuration fields for the rule. Configurations options for rule types and providers can be found in the [Rule structure reference](https://docs.aws.amazon.com/codepipeline/latest/userguide/rule-reference.html).
     * 
     */
    @Import(name="configuration")
    private @Nullable Output<Map<String,String>> configuration;

    /**
     * @return The action configuration fields for the rule. Configurations options for rule types and providers can be found in the [Rule structure reference](https://docs.aws.amazon.com/codepipeline/latest/userguide/rule-reference.html).
     * 
     */
    public Optional<Output<Map<String,String>>> configuration() {
        return Optional.ofNullable(this.configuration);
    }

    /**
     * The list of the input artifacts fields for the rule, such as specifying an input file for the rule.
     * 
     */
    @Import(name="inputArtifacts")
    private @Nullable Output<List<String>> inputArtifacts;

    /**
     * @return The list of the input artifacts fields for the rule, such as specifying an input file for the rule.
     * 
     */
    public Optional<Output<List<String>>> inputArtifacts() {
        return Optional.ofNullable(this.inputArtifacts);
    }

    /**
     * The name of the rule that is created for the condition, such as `VariableCheck`.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the rule that is created for the condition, such as `VariableCheck`.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The Region for the condition associated with the rule.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return The Region for the condition associated with the rule.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The pipeline role ARN associated with the rule.
     * 
     */
    @Import(name="roleArn")
    private @Nullable Output<String> roleArn;

    /**
     * @return The pipeline role ARN associated with the rule.
     * 
     */
    public Optional<Output<String>> roleArn() {
        return Optional.ofNullable(this.roleArn);
    }

    /**
     * The ID for the rule type, which is made up of the combined values for `category`, `owner`, `provider`, and `version`. Defined as an `rule_type_id` block below.
     * 
     */
    @Import(name="ruleTypeId", required=true)
    private Output<PipelineStageOnFailureConditionRuleRuleTypeIdArgs> ruleTypeId;

    /**
     * @return The ID for the rule type, which is made up of the combined values for `category`, `owner`, `provider`, and `version`. Defined as an `rule_type_id` block below.
     * 
     */
    public Output<PipelineStageOnFailureConditionRuleRuleTypeIdArgs> ruleTypeId() {
        return this.ruleTypeId;
    }

    /**
     * The action timeout for the rule.
     * 
     */
    @Import(name="timeoutInMinutes")
    private @Nullable Output<Integer> timeoutInMinutes;

    /**
     * @return The action timeout for the rule.
     * 
     */
    public Optional<Output<Integer>> timeoutInMinutes() {
        return Optional.ofNullable(this.timeoutInMinutes);
    }

    private PipelineStageOnFailureConditionRuleArgs() {}

    private PipelineStageOnFailureConditionRuleArgs(PipelineStageOnFailureConditionRuleArgs $) {
        this.commands = $.commands;
        this.configuration = $.configuration;
        this.inputArtifacts = $.inputArtifacts;
        this.name = $.name;
        this.region = $.region;
        this.roleArn = $.roleArn;
        this.ruleTypeId = $.ruleTypeId;
        this.timeoutInMinutes = $.timeoutInMinutes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PipelineStageOnFailureConditionRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PipelineStageOnFailureConditionRuleArgs $;

        public Builder() {
            $ = new PipelineStageOnFailureConditionRuleArgs();
        }

        public Builder(PipelineStageOnFailureConditionRuleArgs defaults) {
            $ = new PipelineStageOnFailureConditionRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param commands The shell commands to run with your commands rule in CodePipeline. All commands are supported except multi-line formats.
         * 
         * @return builder
         * 
         */
        public Builder commands(@Nullable Output<List<String>> commands) {
            $.commands = commands;
            return this;
        }

        /**
         * @param commands The shell commands to run with your commands rule in CodePipeline. All commands are supported except multi-line formats.
         * 
         * @return builder
         * 
         */
        public Builder commands(List<String> commands) {
            return commands(Output.of(commands));
        }

        /**
         * @param commands The shell commands to run with your commands rule in CodePipeline. All commands are supported except multi-line formats.
         * 
         * @return builder
         * 
         */
        public Builder commands(String... commands) {
            return commands(List.of(commands));
        }

        /**
         * @param configuration The action configuration fields for the rule. Configurations options for rule types and providers can be found in the [Rule structure reference](https://docs.aws.amazon.com/codepipeline/latest/userguide/rule-reference.html).
         * 
         * @return builder
         * 
         */
        public Builder configuration(@Nullable Output<Map<String,String>> configuration) {
            $.configuration = configuration;
            return this;
        }

        /**
         * @param configuration The action configuration fields for the rule. Configurations options for rule types and providers can be found in the [Rule structure reference](https://docs.aws.amazon.com/codepipeline/latest/userguide/rule-reference.html).
         * 
         * @return builder
         * 
         */
        public Builder configuration(Map<String,String> configuration) {
            return configuration(Output.of(configuration));
        }

        /**
         * @param inputArtifacts The list of the input artifacts fields for the rule, such as specifying an input file for the rule.
         * 
         * @return builder
         * 
         */
        public Builder inputArtifacts(@Nullable Output<List<String>> inputArtifacts) {
            $.inputArtifacts = inputArtifacts;
            return this;
        }

        /**
         * @param inputArtifacts The list of the input artifacts fields for the rule, such as specifying an input file for the rule.
         * 
         * @return builder
         * 
         */
        public Builder inputArtifacts(List<String> inputArtifacts) {
            return inputArtifacts(Output.of(inputArtifacts));
        }

        /**
         * @param inputArtifacts The list of the input artifacts fields for the rule, such as specifying an input file for the rule.
         * 
         * @return builder
         * 
         */
        public Builder inputArtifacts(String... inputArtifacts) {
            return inputArtifacts(List.of(inputArtifacts));
        }

        /**
         * @param name The name of the rule that is created for the condition, such as `VariableCheck`.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the rule that is created for the condition, such as `VariableCheck`.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param region The Region for the condition associated with the rule.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The Region for the condition associated with the rule.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param roleArn The pipeline role ARN associated with the rule.
         * 
         * @return builder
         * 
         */
        public Builder roleArn(@Nullable Output<String> roleArn) {
            $.roleArn = roleArn;
            return this;
        }

        /**
         * @param roleArn The pipeline role ARN associated with the rule.
         * 
         * @return builder
         * 
         */
        public Builder roleArn(String roleArn) {
            return roleArn(Output.of(roleArn));
        }

        /**
         * @param ruleTypeId The ID for the rule type, which is made up of the combined values for `category`, `owner`, `provider`, and `version`. Defined as an `rule_type_id` block below.
         * 
         * @return builder
         * 
         */
        public Builder ruleTypeId(Output<PipelineStageOnFailureConditionRuleRuleTypeIdArgs> ruleTypeId) {
            $.ruleTypeId = ruleTypeId;
            return this;
        }

        /**
         * @param ruleTypeId The ID for the rule type, which is made up of the combined values for `category`, `owner`, `provider`, and `version`. Defined as an `rule_type_id` block below.
         * 
         * @return builder
         * 
         */
        public Builder ruleTypeId(PipelineStageOnFailureConditionRuleRuleTypeIdArgs ruleTypeId) {
            return ruleTypeId(Output.of(ruleTypeId));
        }

        /**
         * @param timeoutInMinutes The action timeout for the rule.
         * 
         * @return builder
         * 
         */
        public Builder timeoutInMinutes(@Nullable Output<Integer> timeoutInMinutes) {
            $.timeoutInMinutes = timeoutInMinutes;
            return this;
        }

        /**
         * @param timeoutInMinutes The action timeout for the rule.
         * 
         * @return builder
         * 
         */
        public Builder timeoutInMinutes(Integer timeoutInMinutes) {
            return timeoutInMinutes(Output.of(timeoutInMinutes));
        }

        public PipelineStageOnFailureConditionRuleArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("PipelineStageOnFailureConditionRuleArgs", "name");
            }
            if ($.ruleTypeId == null) {
                throw new MissingRequiredPropertyException("PipelineStageOnFailureConditionRuleArgs", "ruleTypeId");
            }
            return $;
        }
    }

}
