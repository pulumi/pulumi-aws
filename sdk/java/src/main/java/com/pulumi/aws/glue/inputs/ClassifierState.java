// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.glue.inputs;

import com.pulumi.aws.glue.inputs.ClassifierCsvClassifierArgs;
import com.pulumi.aws.glue.inputs.ClassifierGrokClassifierArgs;
import com.pulumi.aws.glue.inputs.ClassifierJsonClassifierArgs;
import com.pulumi.aws.glue.inputs.ClassifierXmlClassifierArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClassifierState extends com.pulumi.resources.ResourceArgs {

    public static final ClassifierState Empty = new ClassifierState();

    /**
     * A classifier for Csv content. Defined below.
     * 
     */
    @Import(name="csvClassifier")
    private @Nullable Output<ClassifierCsvClassifierArgs> csvClassifier;

    /**
     * @return A classifier for Csv content. Defined below.
     * 
     */
    public Optional<Output<ClassifierCsvClassifierArgs>> csvClassifier() {
        return Optional.ofNullable(this.csvClassifier);
    }

    /**
     * A classifier that uses grok patterns. Defined below.
     * 
     */
    @Import(name="grokClassifier")
    private @Nullable Output<ClassifierGrokClassifierArgs> grokClassifier;

    /**
     * @return A classifier that uses grok patterns. Defined below.
     * 
     */
    public Optional<Output<ClassifierGrokClassifierArgs>> grokClassifier() {
        return Optional.ofNullable(this.grokClassifier);
    }

    /**
     * A classifier for JSON content. Defined below.
     * 
     */
    @Import(name="jsonClassifier")
    private @Nullable Output<ClassifierJsonClassifierArgs> jsonClassifier;

    /**
     * @return A classifier for JSON content. Defined below.
     * 
     */
    public Optional<Output<ClassifierJsonClassifierArgs>> jsonClassifier() {
        return Optional.ofNullable(this.jsonClassifier);
    }

    /**
     * The name of the classifier.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the classifier.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * A classifier for XML content. Defined below.
     * 
     */
    @Import(name="xmlClassifier")
    private @Nullable Output<ClassifierXmlClassifierArgs> xmlClassifier;

    /**
     * @return A classifier for XML content. Defined below.
     * 
     */
    public Optional<Output<ClassifierXmlClassifierArgs>> xmlClassifier() {
        return Optional.ofNullable(this.xmlClassifier);
    }

    private ClassifierState() {}

    private ClassifierState(ClassifierState $) {
        this.csvClassifier = $.csvClassifier;
        this.grokClassifier = $.grokClassifier;
        this.jsonClassifier = $.jsonClassifier;
        this.name = $.name;
        this.xmlClassifier = $.xmlClassifier;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClassifierState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClassifierState $;

        public Builder() {
            $ = new ClassifierState();
        }

        public Builder(ClassifierState defaults) {
            $ = new ClassifierState(Objects.requireNonNull(defaults));
        }

        /**
         * @param csvClassifier A classifier for Csv content. Defined below.
         * 
         * @return builder
         * 
         */
        public Builder csvClassifier(@Nullable Output<ClassifierCsvClassifierArgs> csvClassifier) {
            $.csvClassifier = csvClassifier;
            return this;
        }

        /**
         * @param csvClassifier A classifier for Csv content. Defined below.
         * 
         * @return builder
         * 
         */
        public Builder csvClassifier(ClassifierCsvClassifierArgs csvClassifier) {
            return csvClassifier(Output.of(csvClassifier));
        }

        /**
         * @param grokClassifier A classifier that uses grok patterns. Defined below.
         * 
         * @return builder
         * 
         */
        public Builder grokClassifier(@Nullable Output<ClassifierGrokClassifierArgs> grokClassifier) {
            $.grokClassifier = grokClassifier;
            return this;
        }

        /**
         * @param grokClassifier A classifier that uses grok patterns. Defined below.
         * 
         * @return builder
         * 
         */
        public Builder grokClassifier(ClassifierGrokClassifierArgs grokClassifier) {
            return grokClassifier(Output.of(grokClassifier));
        }

        /**
         * @param jsonClassifier A classifier for JSON content. Defined below.
         * 
         * @return builder
         * 
         */
        public Builder jsonClassifier(@Nullable Output<ClassifierJsonClassifierArgs> jsonClassifier) {
            $.jsonClassifier = jsonClassifier;
            return this;
        }

        /**
         * @param jsonClassifier A classifier for JSON content. Defined below.
         * 
         * @return builder
         * 
         */
        public Builder jsonClassifier(ClassifierJsonClassifierArgs jsonClassifier) {
            return jsonClassifier(Output.of(jsonClassifier));
        }

        /**
         * @param name The name of the classifier.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the classifier.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param xmlClassifier A classifier for XML content. Defined below.
         * 
         * @return builder
         * 
         */
        public Builder xmlClassifier(@Nullable Output<ClassifierXmlClassifierArgs> xmlClassifier) {
            $.xmlClassifier = xmlClassifier;
            return this;
        }

        /**
         * @param xmlClassifier A classifier for XML content. Defined below.
         * 
         * @return builder
         * 
         */
        public Builder xmlClassifier(ClassifierXmlClassifierArgs xmlClassifier) {
            return xmlClassifier(Output.of(xmlClassifier));
        }

        public ClassifierState build() {
            return $;
        }
    }

}
