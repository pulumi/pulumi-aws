// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.bedrock.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class AgentAgentPromptOverrideConfigurationPromptConfigurationInferenceConfiguration {
    /**
     * @return Maximum number of tokens to allow in the generated response.
     * 
     */
    private Integer maxLength;
    /**
     * @return List of stop sequences. A stop sequence is a sequence of characters that causes the model to stop generating the response.
     * 
     */
    private List<String> stopSequences;
    /**
     * @return Likelihood of the model selecting higher-probability options while generating a response. A lower value makes the model more likely to choose higher-probability options, while a higher value makes the model more likely to choose lower-probability options.
     * 
     */
    private Double temperature;
    /**
     * @return Number of top most-likely candidates, between 0 and 500, from which the model chooses the next token in the sequence.
     * 
     */
    private Integer topK;
    /**
     * @return Top percentage of the probability distribution of next tokens, between 0 and 1 (denoting 0% and 100%), from which the model chooses the next token in the sequence.
     * 
     */
    private Double topP;

    private AgentAgentPromptOverrideConfigurationPromptConfigurationInferenceConfiguration() {}
    /**
     * @return Maximum number of tokens to allow in the generated response.
     * 
     */
    public Integer maxLength() {
        return this.maxLength;
    }
    /**
     * @return List of stop sequences. A stop sequence is a sequence of characters that causes the model to stop generating the response.
     * 
     */
    public List<String> stopSequences() {
        return this.stopSequences;
    }
    /**
     * @return Likelihood of the model selecting higher-probability options while generating a response. A lower value makes the model more likely to choose higher-probability options, while a higher value makes the model more likely to choose lower-probability options.
     * 
     */
    public Double temperature() {
        return this.temperature;
    }
    /**
     * @return Number of top most-likely candidates, between 0 and 500, from which the model chooses the next token in the sequence.
     * 
     */
    public Integer topK() {
        return this.topK;
    }
    /**
     * @return Top percentage of the probability distribution of next tokens, between 0 and 1 (denoting 0% and 100%), from which the model chooses the next token in the sequence.
     * 
     */
    public Double topP() {
        return this.topP;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AgentAgentPromptOverrideConfigurationPromptConfigurationInferenceConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer maxLength;
        private List<String> stopSequences;
        private Double temperature;
        private Integer topK;
        private Double topP;
        public Builder() {}
        public Builder(AgentAgentPromptOverrideConfigurationPromptConfigurationInferenceConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.maxLength = defaults.maxLength;
    	      this.stopSequences = defaults.stopSequences;
    	      this.temperature = defaults.temperature;
    	      this.topK = defaults.topK;
    	      this.topP = defaults.topP;
        }

        @CustomType.Setter
        public Builder maxLength(Integer maxLength) {
            if (maxLength == null) {
              throw new MissingRequiredPropertyException("AgentAgentPromptOverrideConfigurationPromptConfigurationInferenceConfiguration", "maxLength");
            }
            this.maxLength = maxLength;
            return this;
        }
        @CustomType.Setter
        public Builder stopSequences(List<String> stopSequences) {
            if (stopSequences == null) {
              throw new MissingRequiredPropertyException("AgentAgentPromptOverrideConfigurationPromptConfigurationInferenceConfiguration", "stopSequences");
            }
            this.stopSequences = stopSequences;
            return this;
        }
        public Builder stopSequences(String... stopSequences) {
            return stopSequences(List.of(stopSequences));
        }
        @CustomType.Setter
        public Builder temperature(Double temperature) {
            if (temperature == null) {
              throw new MissingRequiredPropertyException("AgentAgentPromptOverrideConfigurationPromptConfigurationInferenceConfiguration", "temperature");
            }
            this.temperature = temperature;
            return this;
        }
        @CustomType.Setter
        public Builder topK(Integer topK) {
            if (topK == null) {
              throw new MissingRequiredPropertyException("AgentAgentPromptOverrideConfigurationPromptConfigurationInferenceConfiguration", "topK");
            }
            this.topK = topK;
            return this;
        }
        @CustomType.Setter
        public Builder topP(Double topP) {
            if (topP == null) {
              throw new MissingRequiredPropertyException("AgentAgentPromptOverrideConfigurationPromptConfigurationInferenceConfiguration", "topP");
            }
            this.topP = topP;
            return this;
        }
        public AgentAgentPromptOverrideConfigurationPromptConfigurationInferenceConfiguration build() {
            final var _resultValue = new AgentAgentPromptOverrideConfigurationPromptConfigurationInferenceConfiguration();
            _resultValue.maxLength = maxLength;
            _resultValue.stopSequences = stopSequences;
            _resultValue.temperature = temperature;
            _resultValue.topK = topK;
            _resultValue.topP = topP;
            return _resultValue;
        }
    }
}
