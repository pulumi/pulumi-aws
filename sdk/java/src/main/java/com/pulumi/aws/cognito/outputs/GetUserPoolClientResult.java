// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.cognito.outputs;

import com.pulumi.aws.cognito.outputs.GetUserPoolClientAnalyticsConfiguration;
import com.pulumi.aws.cognito.outputs.GetUserPoolClientTokenValidityUnit;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetUserPoolClientResult {
    /**
     * @return (Optional) Time limit, between 5 minutes and 1 day, after which the access token is no longer valid and cannot be used. This value will be overridden if you have entered a value in `token_validity_units`.
     * 
     */
    private Integer accessTokenValidity;
    /**
     * @return (Optional) List of allowed OAuth flows (code, implicit, client_credentials).
     * 
     */
    private List<String> allowedOauthFlows;
    /**
     * @return (Optional) Whether the client is allowed to follow the OAuth protocol when interacting with Cognito user pools.
     * 
     */
    private Boolean allowedOauthFlowsUserPoolClient;
    /**
     * @return (Optional) List of allowed OAuth scopes (phone, email, openid, profile, and aws.cognito.signin.user.admin).
     * 
     */
    private List<String> allowedOauthScopes;
    /**
     * @return (Optional) Configuration block for Amazon Pinpoint analytics for collecting metrics for this user pool. Detailed below.
     * 
     */
    private List<GetUserPoolClientAnalyticsConfiguration> analyticsConfigurations;
    /**
     * @return (Optional) List of allowed callback URLs for the identity providers.
     * 
     */
    private List<String> callbackUrls;
    private String clientId;
    /**
     * @return Client secret of the user pool client.
     * 
     */
    private String clientSecret;
    /**
     * @return (Optional) Default redirect URI. Must be in the list of callback URLs.
     * 
     */
    private String defaultRedirectUri;
    private Boolean enablePropagateAdditionalUserContextData;
    /**
     * @return (Optional) Enables or disables token revocation.
     * 
     */
    private Boolean enableTokenRevocation;
    /**
     * @return (Optional) List of authentication flows (ADMIN_NO_SRP_AUTH, CUSTOM_AUTH_FLOW_ONLY, USER_PASSWORD_AUTH, ALLOW_ADMIN_USER_PASSWORD_AUTH, ALLOW_CUSTOM_AUTH, ALLOW_USER_PASSWORD_AUTH, ALLOW_USER_SRP_AUTH, ALLOW_REFRESH_TOKEN_AUTH).
     * 
     */
    private List<String> explicitAuthFlows;
    /**
     * @return (Optional) Should an application secret be generated.
     * 
     */
    private Boolean generateSecret;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return (Optional) Time limit, between 5 minutes and 1 day, after which the ID token is no longer valid and cannot be used. This value will be overridden if you have entered a value in `token_validity_units`.
     * 
     */
    private Integer idTokenValidity;
    /**
     * @return (Optional) List of allowed logout URLs for the identity providers.
     * 
     */
    private List<String> logoutUrls;
    private String name;
    /**
     * @return (Optional) Choose which errors and responses are returned by Cognito APIs during authentication, account confirmation, and password recovery when the user does not exist in the user pool. When set to `ENABLED` and the user does not exist, authentication returns an error indicating either the username or password was incorrect, and account confirmation and password recovery return a response indicating a code was sent to a simulated destination. When set to `LEGACY`, those APIs will return a `UserNotFoundException` exception if the user does not exist in the user pool.
     * 
     */
    private String preventUserExistenceErrors;
    /**
     * @return (Optional) List of user pool attributes the application client can read from.
     * 
     */
    private List<String> readAttributes;
    /**
     * @return (Optional) Time limit in days refresh tokens are valid for.
     * 
     */
    private Integer refreshTokenValidity;
    /**
     * @return (Optional) List of provider names for the identity providers that are supported on this client. Uses the `provider_name` attribute of `aws.cognito.IdentityProvider` resource(s), or the equivalent string(s).
     * 
     */
    private List<String> supportedIdentityProviders;
    /**
     * @return (Optional) Configuration block for units in which the validity times are represented in. Detailed below.
     * 
     */
    private List<GetUserPoolClientTokenValidityUnit> tokenValidityUnits;
    private String userPoolId;
    /**
     * @return (Optional) List of user pool attributes the application client can write to.
     * 
     */
    private List<String> writeAttributes;

    private GetUserPoolClientResult() {}
    /**
     * @return (Optional) Time limit, between 5 minutes and 1 day, after which the access token is no longer valid and cannot be used. This value will be overridden if you have entered a value in `token_validity_units`.
     * 
     */
    public Integer accessTokenValidity() {
        return this.accessTokenValidity;
    }
    /**
     * @return (Optional) List of allowed OAuth flows (code, implicit, client_credentials).
     * 
     */
    public List<String> allowedOauthFlows() {
        return this.allowedOauthFlows;
    }
    /**
     * @return (Optional) Whether the client is allowed to follow the OAuth protocol when interacting with Cognito user pools.
     * 
     */
    public Boolean allowedOauthFlowsUserPoolClient() {
        return this.allowedOauthFlowsUserPoolClient;
    }
    /**
     * @return (Optional) List of allowed OAuth scopes (phone, email, openid, profile, and aws.cognito.signin.user.admin).
     * 
     */
    public List<String> allowedOauthScopes() {
        return this.allowedOauthScopes;
    }
    /**
     * @return (Optional) Configuration block for Amazon Pinpoint analytics for collecting metrics for this user pool. Detailed below.
     * 
     */
    public List<GetUserPoolClientAnalyticsConfiguration> analyticsConfigurations() {
        return this.analyticsConfigurations;
    }
    /**
     * @return (Optional) List of allowed callback URLs for the identity providers.
     * 
     */
    public List<String> callbackUrls() {
        return this.callbackUrls;
    }
    public String clientId() {
        return this.clientId;
    }
    /**
     * @return Client secret of the user pool client.
     * 
     */
    public String clientSecret() {
        return this.clientSecret;
    }
    /**
     * @return (Optional) Default redirect URI. Must be in the list of callback URLs.
     * 
     */
    public String defaultRedirectUri() {
        return this.defaultRedirectUri;
    }
    public Boolean enablePropagateAdditionalUserContextData() {
        return this.enablePropagateAdditionalUserContextData;
    }
    /**
     * @return (Optional) Enables or disables token revocation.
     * 
     */
    public Boolean enableTokenRevocation() {
        return this.enableTokenRevocation;
    }
    /**
     * @return (Optional) List of authentication flows (ADMIN_NO_SRP_AUTH, CUSTOM_AUTH_FLOW_ONLY, USER_PASSWORD_AUTH, ALLOW_ADMIN_USER_PASSWORD_AUTH, ALLOW_CUSTOM_AUTH, ALLOW_USER_PASSWORD_AUTH, ALLOW_USER_SRP_AUTH, ALLOW_REFRESH_TOKEN_AUTH).
     * 
     */
    public List<String> explicitAuthFlows() {
        return this.explicitAuthFlows;
    }
    /**
     * @return (Optional) Should an application secret be generated.
     * 
     */
    public Boolean generateSecret() {
        return this.generateSecret;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return (Optional) Time limit, between 5 minutes and 1 day, after which the ID token is no longer valid and cannot be used. This value will be overridden if you have entered a value in `token_validity_units`.
     * 
     */
    public Integer idTokenValidity() {
        return this.idTokenValidity;
    }
    /**
     * @return (Optional) List of allowed logout URLs for the identity providers.
     * 
     */
    public List<String> logoutUrls() {
        return this.logoutUrls;
    }
    public String name() {
        return this.name;
    }
    /**
     * @return (Optional) Choose which errors and responses are returned by Cognito APIs during authentication, account confirmation, and password recovery when the user does not exist in the user pool. When set to `ENABLED` and the user does not exist, authentication returns an error indicating either the username or password was incorrect, and account confirmation and password recovery return a response indicating a code was sent to a simulated destination. When set to `LEGACY`, those APIs will return a `UserNotFoundException` exception if the user does not exist in the user pool.
     * 
     */
    public String preventUserExistenceErrors() {
        return this.preventUserExistenceErrors;
    }
    /**
     * @return (Optional) List of user pool attributes the application client can read from.
     * 
     */
    public List<String> readAttributes() {
        return this.readAttributes;
    }
    /**
     * @return (Optional) Time limit in days refresh tokens are valid for.
     * 
     */
    public Integer refreshTokenValidity() {
        return this.refreshTokenValidity;
    }
    /**
     * @return (Optional) List of provider names for the identity providers that are supported on this client. Uses the `provider_name` attribute of `aws.cognito.IdentityProvider` resource(s), or the equivalent string(s).
     * 
     */
    public List<String> supportedIdentityProviders() {
        return this.supportedIdentityProviders;
    }
    /**
     * @return (Optional) Configuration block for units in which the validity times are represented in. Detailed below.
     * 
     */
    public List<GetUserPoolClientTokenValidityUnit> tokenValidityUnits() {
        return this.tokenValidityUnits;
    }
    public String userPoolId() {
        return this.userPoolId;
    }
    /**
     * @return (Optional) List of user pool attributes the application client can write to.
     * 
     */
    public List<String> writeAttributes() {
        return this.writeAttributes;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetUserPoolClientResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer accessTokenValidity;
        private List<String> allowedOauthFlows;
        private Boolean allowedOauthFlowsUserPoolClient;
        private List<String> allowedOauthScopes;
        private List<GetUserPoolClientAnalyticsConfiguration> analyticsConfigurations;
        private List<String> callbackUrls;
        private String clientId;
        private String clientSecret;
        private String defaultRedirectUri;
        private Boolean enablePropagateAdditionalUserContextData;
        private Boolean enableTokenRevocation;
        private List<String> explicitAuthFlows;
        private Boolean generateSecret;
        private String id;
        private Integer idTokenValidity;
        private List<String> logoutUrls;
        private String name;
        private String preventUserExistenceErrors;
        private List<String> readAttributes;
        private Integer refreshTokenValidity;
        private List<String> supportedIdentityProviders;
        private List<GetUserPoolClientTokenValidityUnit> tokenValidityUnits;
        private String userPoolId;
        private List<String> writeAttributes;
        public Builder() {}
        public Builder(GetUserPoolClientResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessTokenValidity = defaults.accessTokenValidity;
    	      this.allowedOauthFlows = defaults.allowedOauthFlows;
    	      this.allowedOauthFlowsUserPoolClient = defaults.allowedOauthFlowsUserPoolClient;
    	      this.allowedOauthScopes = defaults.allowedOauthScopes;
    	      this.analyticsConfigurations = defaults.analyticsConfigurations;
    	      this.callbackUrls = defaults.callbackUrls;
    	      this.clientId = defaults.clientId;
    	      this.clientSecret = defaults.clientSecret;
    	      this.defaultRedirectUri = defaults.defaultRedirectUri;
    	      this.enablePropagateAdditionalUserContextData = defaults.enablePropagateAdditionalUserContextData;
    	      this.enableTokenRevocation = defaults.enableTokenRevocation;
    	      this.explicitAuthFlows = defaults.explicitAuthFlows;
    	      this.generateSecret = defaults.generateSecret;
    	      this.id = defaults.id;
    	      this.idTokenValidity = defaults.idTokenValidity;
    	      this.logoutUrls = defaults.logoutUrls;
    	      this.name = defaults.name;
    	      this.preventUserExistenceErrors = defaults.preventUserExistenceErrors;
    	      this.readAttributes = defaults.readAttributes;
    	      this.refreshTokenValidity = defaults.refreshTokenValidity;
    	      this.supportedIdentityProviders = defaults.supportedIdentityProviders;
    	      this.tokenValidityUnits = defaults.tokenValidityUnits;
    	      this.userPoolId = defaults.userPoolId;
    	      this.writeAttributes = defaults.writeAttributes;
        }

        @CustomType.Setter
        public Builder accessTokenValidity(Integer accessTokenValidity) {
            if (accessTokenValidity == null) {
              throw new MissingRequiredPropertyException("GetUserPoolClientResult", "accessTokenValidity");
            }
            this.accessTokenValidity = accessTokenValidity;
            return this;
        }
        @CustomType.Setter
        public Builder allowedOauthFlows(List<String> allowedOauthFlows) {
            if (allowedOauthFlows == null) {
              throw new MissingRequiredPropertyException("GetUserPoolClientResult", "allowedOauthFlows");
            }
            this.allowedOauthFlows = allowedOauthFlows;
            return this;
        }
        public Builder allowedOauthFlows(String... allowedOauthFlows) {
            return allowedOauthFlows(List.of(allowedOauthFlows));
        }
        @CustomType.Setter
        public Builder allowedOauthFlowsUserPoolClient(Boolean allowedOauthFlowsUserPoolClient) {
            if (allowedOauthFlowsUserPoolClient == null) {
              throw new MissingRequiredPropertyException("GetUserPoolClientResult", "allowedOauthFlowsUserPoolClient");
            }
            this.allowedOauthFlowsUserPoolClient = allowedOauthFlowsUserPoolClient;
            return this;
        }
        @CustomType.Setter
        public Builder allowedOauthScopes(List<String> allowedOauthScopes) {
            if (allowedOauthScopes == null) {
              throw new MissingRequiredPropertyException("GetUserPoolClientResult", "allowedOauthScopes");
            }
            this.allowedOauthScopes = allowedOauthScopes;
            return this;
        }
        public Builder allowedOauthScopes(String... allowedOauthScopes) {
            return allowedOauthScopes(List.of(allowedOauthScopes));
        }
        @CustomType.Setter
        public Builder analyticsConfigurations(List<GetUserPoolClientAnalyticsConfiguration> analyticsConfigurations) {
            if (analyticsConfigurations == null) {
              throw new MissingRequiredPropertyException("GetUserPoolClientResult", "analyticsConfigurations");
            }
            this.analyticsConfigurations = analyticsConfigurations;
            return this;
        }
        public Builder analyticsConfigurations(GetUserPoolClientAnalyticsConfiguration... analyticsConfigurations) {
            return analyticsConfigurations(List.of(analyticsConfigurations));
        }
        @CustomType.Setter
        public Builder callbackUrls(List<String> callbackUrls) {
            if (callbackUrls == null) {
              throw new MissingRequiredPropertyException("GetUserPoolClientResult", "callbackUrls");
            }
            this.callbackUrls = callbackUrls;
            return this;
        }
        public Builder callbackUrls(String... callbackUrls) {
            return callbackUrls(List.of(callbackUrls));
        }
        @CustomType.Setter
        public Builder clientId(String clientId) {
            if (clientId == null) {
              throw new MissingRequiredPropertyException("GetUserPoolClientResult", "clientId");
            }
            this.clientId = clientId;
            return this;
        }
        @CustomType.Setter
        public Builder clientSecret(String clientSecret) {
            if (clientSecret == null) {
              throw new MissingRequiredPropertyException("GetUserPoolClientResult", "clientSecret");
            }
            this.clientSecret = clientSecret;
            return this;
        }
        @CustomType.Setter
        public Builder defaultRedirectUri(String defaultRedirectUri) {
            if (defaultRedirectUri == null) {
              throw new MissingRequiredPropertyException("GetUserPoolClientResult", "defaultRedirectUri");
            }
            this.defaultRedirectUri = defaultRedirectUri;
            return this;
        }
        @CustomType.Setter
        public Builder enablePropagateAdditionalUserContextData(Boolean enablePropagateAdditionalUserContextData) {
            if (enablePropagateAdditionalUserContextData == null) {
              throw new MissingRequiredPropertyException("GetUserPoolClientResult", "enablePropagateAdditionalUserContextData");
            }
            this.enablePropagateAdditionalUserContextData = enablePropagateAdditionalUserContextData;
            return this;
        }
        @CustomType.Setter
        public Builder enableTokenRevocation(Boolean enableTokenRevocation) {
            if (enableTokenRevocation == null) {
              throw new MissingRequiredPropertyException("GetUserPoolClientResult", "enableTokenRevocation");
            }
            this.enableTokenRevocation = enableTokenRevocation;
            return this;
        }
        @CustomType.Setter
        public Builder explicitAuthFlows(List<String> explicitAuthFlows) {
            if (explicitAuthFlows == null) {
              throw new MissingRequiredPropertyException("GetUserPoolClientResult", "explicitAuthFlows");
            }
            this.explicitAuthFlows = explicitAuthFlows;
            return this;
        }
        public Builder explicitAuthFlows(String... explicitAuthFlows) {
            return explicitAuthFlows(List.of(explicitAuthFlows));
        }
        @CustomType.Setter
        public Builder generateSecret(Boolean generateSecret) {
            if (generateSecret == null) {
              throw new MissingRequiredPropertyException("GetUserPoolClientResult", "generateSecret");
            }
            this.generateSecret = generateSecret;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetUserPoolClientResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder idTokenValidity(Integer idTokenValidity) {
            if (idTokenValidity == null) {
              throw new MissingRequiredPropertyException("GetUserPoolClientResult", "idTokenValidity");
            }
            this.idTokenValidity = idTokenValidity;
            return this;
        }
        @CustomType.Setter
        public Builder logoutUrls(List<String> logoutUrls) {
            if (logoutUrls == null) {
              throw new MissingRequiredPropertyException("GetUserPoolClientResult", "logoutUrls");
            }
            this.logoutUrls = logoutUrls;
            return this;
        }
        public Builder logoutUrls(String... logoutUrls) {
            return logoutUrls(List.of(logoutUrls));
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetUserPoolClientResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder preventUserExistenceErrors(String preventUserExistenceErrors) {
            if (preventUserExistenceErrors == null) {
              throw new MissingRequiredPropertyException("GetUserPoolClientResult", "preventUserExistenceErrors");
            }
            this.preventUserExistenceErrors = preventUserExistenceErrors;
            return this;
        }
        @CustomType.Setter
        public Builder readAttributes(List<String> readAttributes) {
            if (readAttributes == null) {
              throw new MissingRequiredPropertyException("GetUserPoolClientResult", "readAttributes");
            }
            this.readAttributes = readAttributes;
            return this;
        }
        public Builder readAttributes(String... readAttributes) {
            return readAttributes(List.of(readAttributes));
        }
        @CustomType.Setter
        public Builder refreshTokenValidity(Integer refreshTokenValidity) {
            if (refreshTokenValidity == null) {
              throw new MissingRequiredPropertyException("GetUserPoolClientResult", "refreshTokenValidity");
            }
            this.refreshTokenValidity = refreshTokenValidity;
            return this;
        }
        @CustomType.Setter
        public Builder supportedIdentityProviders(List<String> supportedIdentityProviders) {
            if (supportedIdentityProviders == null) {
              throw new MissingRequiredPropertyException("GetUserPoolClientResult", "supportedIdentityProviders");
            }
            this.supportedIdentityProviders = supportedIdentityProviders;
            return this;
        }
        public Builder supportedIdentityProviders(String... supportedIdentityProviders) {
            return supportedIdentityProviders(List.of(supportedIdentityProviders));
        }
        @CustomType.Setter
        public Builder tokenValidityUnits(List<GetUserPoolClientTokenValidityUnit> tokenValidityUnits) {
            if (tokenValidityUnits == null) {
              throw new MissingRequiredPropertyException("GetUserPoolClientResult", "tokenValidityUnits");
            }
            this.tokenValidityUnits = tokenValidityUnits;
            return this;
        }
        public Builder tokenValidityUnits(GetUserPoolClientTokenValidityUnit... tokenValidityUnits) {
            return tokenValidityUnits(List.of(tokenValidityUnits));
        }
        @CustomType.Setter
        public Builder userPoolId(String userPoolId) {
            if (userPoolId == null) {
              throw new MissingRequiredPropertyException("GetUserPoolClientResult", "userPoolId");
            }
            this.userPoolId = userPoolId;
            return this;
        }
        @CustomType.Setter
        public Builder writeAttributes(List<String> writeAttributes) {
            if (writeAttributes == null) {
              throw new MissingRequiredPropertyException("GetUserPoolClientResult", "writeAttributes");
            }
            this.writeAttributes = writeAttributes;
            return this;
        }
        public Builder writeAttributes(String... writeAttributes) {
            return writeAttributes(List.of(writeAttributes));
        }
        public GetUserPoolClientResult build() {
            final var _resultValue = new GetUserPoolClientResult();
            _resultValue.accessTokenValidity = accessTokenValidity;
            _resultValue.allowedOauthFlows = allowedOauthFlows;
            _resultValue.allowedOauthFlowsUserPoolClient = allowedOauthFlowsUserPoolClient;
            _resultValue.allowedOauthScopes = allowedOauthScopes;
            _resultValue.analyticsConfigurations = analyticsConfigurations;
            _resultValue.callbackUrls = callbackUrls;
            _resultValue.clientId = clientId;
            _resultValue.clientSecret = clientSecret;
            _resultValue.defaultRedirectUri = defaultRedirectUri;
            _resultValue.enablePropagateAdditionalUserContextData = enablePropagateAdditionalUserContextData;
            _resultValue.enableTokenRevocation = enableTokenRevocation;
            _resultValue.explicitAuthFlows = explicitAuthFlows;
            _resultValue.generateSecret = generateSecret;
            _resultValue.id = id;
            _resultValue.idTokenValidity = idTokenValidity;
            _resultValue.logoutUrls = logoutUrls;
            _resultValue.name = name;
            _resultValue.preventUserExistenceErrors = preventUserExistenceErrors;
            _resultValue.readAttributes = readAttributes;
            _resultValue.refreshTokenValidity = refreshTokenValidity;
            _resultValue.supportedIdentityProviders = supportedIdentityProviders;
            _resultValue.tokenValidityUnits = tokenValidityUnits;
            _resultValue.userPoolId = userPoolId;
            _resultValue.writeAttributes = writeAttributes;
            return _resultValue;
        }
    }
}
