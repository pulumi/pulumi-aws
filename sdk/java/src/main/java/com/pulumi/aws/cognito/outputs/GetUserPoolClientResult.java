// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.cognito.outputs;

import com.pulumi.aws.cognito.outputs.GetUserPoolClientAnalyticsConfiguration;
import com.pulumi.aws.cognito.outputs.GetUserPoolClientTokenValidityUnit;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetUserPoolClientResult {
    /**
     * @return (Optional) Time limit, between 5 minutes and 1 day, after which the access token is no longer valid and cannot be used. This value will be overridden if you have entered a value in `token_validity_units`.
     * 
     */
    private @Nullable Integer accessTokenValidity;
    /**
     * @return (Optional) List of allowed OAuth flows (code, implicit, client_credentials).
     * 
     */
    private @Nullable List<String> allowedOauthFlows;
    /**
     * @return (Optional) Whether the client is allowed to follow the OAuth protocol when interacting with Cognito user pools.
     * 
     */
    private @Nullable Boolean allowedOauthFlowsUserPoolClient;
    /**
     * @return (Optional) List of allowed OAuth scopes (phone, email, openid, profile, and aws.cognito.signin.user.admin).
     * 
     */
    private @Nullable List<String> allowedOauthScopes;
    /**
     * @return (Optional) Configuration block for Amazon Pinpoint analytics for collecting metrics for this user pool. Detailed below.
     * 
     */
    private @Nullable List<GetUserPoolClientAnalyticsConfiguration> analyticsConfigurations;
    /**
     * @return (Optional) List of allowed callback URLs for the identity providers.
     * 
     */
    private @Nullable List<String> callbackUrls;
    private String clientId;
    /**
     * @return Client secret of the user pool client.
     * 
     */
    private @Nullable String clientSecret;
    /**
     * @return (Optional) Default redirect URI. Must be in the list of callback URLs.
     * 
     */
    private @Nullable String defaultRedirectUri;
    private @Nullable Boolean enablePropagateAdditionalUserContextData;
    /**
     * @return (Optional) Enables or disables token revocation.
     * 
     */
    private @Nullable Boolean enableTokenRevocation;
    /**
     * @return (Optional) List of authentication flows (ADMIN_NO_SRP_AUTH, CUSTOM_AUTH_FLOW_ONLY, USER_PASSWORD_AUTH, ALLOW_ADMIN_USER_PASSWORD_AUTH, ALLOW_CUSTOM_AUTH, ALLOW_USER_PASSWORD_AUTH, ALLOW_USER_SRP_AUTH, ALLOW_REFRESH_TOKEN_AUTH).
     * 
     */
    private @Nullable List<String> explicitAuthFlows;
    /**
     * @return (Optional) Should an application secret be generated.
     * 
     */
    private @Nullable Boolean generateSecret;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private @Nullable String id;
    /**
     * @return (Optional) Time limit, between 5 minutes and 1 day, after which the ID token is no longer valid and cannot be used. This value will be overridden if you have entered a value in `token_validity_units`.
     * 
     */
    private @Nullable Integer idTokenValidity;
    /**
     * @return (Optional) List of allowed logout URLs for the identity providers.
     * 
     */
    private @Nullable List<String> logoutUrls;
    private @Nullable String name;
    /**
     * @return (Optional) Choose which errors and responses are returned by Cognito APIs during authentication, account confirmation, and password recovery when the user does not exist in the user pool. When set to `ENABLED` and the user does not exist, authentication returns an error indicating either the username or password was incorrect, and account confirmation and password recovery return a response indicating a code was sent to a simulated destination. When set to `LEGACY`, those APIs will return a `UserNotFoundException` exception if the user does not exist in the user pool.
     * 
     */
    private @Nullable String preventUserExistenceErrors;
    /**
     * @return (Optional) List of user pool attributes the application client can read from.
     * 
     */
    private @Nullable List<String> readAttributes;
    /**
     * @return (Optional) Time limit in days refresh tokens are valid for.
     * 
     */
    private @Nullable Integer refreshTokenValidity;
    /**
     * @return (Optional) List of provider names for the identity providers that are supported on this client. Uses the `provider_name` attribute of `aws.cognito.IdentityProvider` resource(s), or the equivalent string(s).
     * 
     */
    private @Nullable List<String> supportedIdentityProviders;
    /**
     * @return (Optional) Configuration block for units in which the validity times are represented in. Detailed below.
     * 
     */
    private @Nullable List<GetUserPoolClientTokenValidityUnit> tokenValidityUnits;
    private String userPoolId;
    /**
     * @return (Optional) List of user pool attributes the application client can write to.
     * 
     */
    private @Nullable List<String> writeAttributes;

    private GetUserPoolClientResult() {}
    /**
     * @return (Optional) Time limit, between 5 minutes and 1 day, after which the access token is no longer valid and cannot be used. This value will be overridden if you have entered a value in `token_validity_units`.
     * 
     */
    public Optional<Integer> accessTokenValidity() {
        return Optional.ofNullable(this.accessTokenValidity);
    }
    /**
     * @return (Optional) List of allowed OAuth flows (code, implicit, client_credentials).
     * 
     */
    public List<String> allowedOauthFlows() {
        return this.allowedOauthFlows == null ? List.of() : this.allowedOauthFlows;
    }
    /**
     * @return (Optional) Whether the client is allowed to follow the OAuth protocol when interacting with Cognito user pools.
     * 
     */
    public Optional<Boolean> allowedOauthFlowsUserPoolClient() {
        return Optional.ofNullable(this.allowedOauthFlowsUserPoolClient);
    }
    /**
     * @return (Optional) List of allowed OAuth scopes (phone, email, openid, profile, and aws.cognito.signin.user.admin).
     * 
     */
    public List<String> allowedOauthScopes() {
        return this.allowedOauthScopes == null ? List.of() : this.allowedOauthScopes;
    }
    /**
     * @return (Optional) Configuration block for Amazon Pinpoint analytics for collecting metrics for this user pool. Detailed below.
     * 
     */
    public List<GetUserPoolClientAnalyticsConfiguration> analyticsConfigurations() {
        return this.analyticsConfigurations == null ? List.of() : this.analyticsConfigurations;
    }
    /**
     * @return (Optional) List of allowed callback URLs for the identity providers.
     * 
     */
    public List<String> callbackUrls() {
        return this.callbackUrls == null ? List.of() : this.callbackUrls;
    }
    public String clientId() {
        return this.clientId;
    }
    /**
     * @return Client secret of the user pool client.
     * 
     */
    public Optional<String> clientSecret() {
        return Optional.ofNullable(this.clientSecret);
    }
    /**
     * @return (Optional) Default redirect URI. Must be in the list of callback URLs.
     * 
     */
    public Optional<String> defaultRedirectUri() {
        return Optional.ofNullable(this.defaultRedirectUri);
    }
    public Optional<Boolean> enablePropagateAdditionalUserContextData() {
        return Optional.ofNullable(this.enablePropagateAdditionalUserContextData);
    }
    /**
     * @return (Optional) Enables or disables token revocation.
     * 
     */
    public Optional<Boolean> enableTokenRevocation() {
        return Optional.ofNullable(this.enableTokenRevocation);
    }
    /**
     * @return (Optional) List of authentication flows (ADMIN_NO_SRP_AUTH, CUSTOM_AUTH_FLOW_ONLY, USER_PASSWORD_AUTH, ALLOW_ADMIN_USER_PASSWORD_AUTH, ALLOW_CUSTOM_AUTH, ALLOW_USER_PASSWORD_AUTH, ALLOW_USER_SRP_AUTH, ALLOW_REFRESH_TOKEN_AUTH).
     * 
     */
    public List<String> explicitAuthFlows() {
        return this.explicitAuthFlows == null ? List.of() : this.explicitAuthFlows;
    }
    /**
     * @return (Optional) Should an application secret be generated.
     * 
     */
    public Optional<Boolean> generateSecret() {
        return Optional.ofNullable(this.generateSecret);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return (Optional) Time limit, between 5 minutes and 1 day, after which the ID token is no longer valid and cannot be used. This value will be overridden if you have entered a value in `token_validity_units`.
     * 
     */
    public Optional<Integer> idTokenValidity() {
        return Optional.ofNullable(this.idTokenValidity);
    }
    /**
     * @return (Optional) List of allowed logout URLs for the identity providers.
     * 
     */
    public List<String> logoutUrls() {
        return this.logoutUrls == null ? List.of() : this.logoutUrls;
    }
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return (Optional) Choose which errors and responses are returned by Cognito APIs during authentication, account confirmation, and password recovery when the user does not exist in the user pool. When set to `ENABLED` and the user does not exist, authentication returns an error indicating either the username or password was incorrect, and account confirmation and password recovery return a response indicating a code was sent to a simulated destination. When set to `LEGACY`, those APIs will return a `UserNotFoundException` exception if the user does not exist in the user pool.
     * 
     */
    public Optional<String> preventUserExistenceErrors() {
        return Optional.ofNullable(this.preventUserExistenceErrors);
    }
    /**
     * @return (Optional) List of user pool attributes the application client can read from.
     * 
     */
    public List<String> readAttributes() {
        return this.readAttributes == null ? List.of() : this.readAttributes;
    }
    /**
     * @return (Optional) Time limit in days refresh tokens are valid for.
     * 
     */
    public Optional<Integer> refreshTokenValidity() {
        return Optional.ofNullable(this.refreshTokenValidity);
    }
    /**
     * @return (Optional) List of provider names for the identity providers that are supported on this client. Uses the `provider_name` attribute of `aws.cognito.IdentityProvider` resource(s), or the equivalent string(s).
     * 
     */
    public List<String> supportedIdentityProviders() {
        return this.supportedIdentityProviders == null ? List.of() : this.supportedIdentityProviders;
    }
    /**
     * @return (Optional) Configuration block for units in which the validity times are represented in. Detailed below.
     * 
     */
    public List<GetUserPoolClientTokenValidityUnit> tokenValidityUnits() {
        return this.tokenValidityUnits == null ? List.of() : this.tokenValidityUnits;
    }
    public String userPoolId() {
        return this.userPoolId;
    }
    /**
     * @return (Optional) List of user pool attributes the application client can write to.
     * 
     */
    public List<String> writeAttributes() {
        return this.writeAttributes == null ? List.of() : this.writeAttributes;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetUserPoolClientResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer accessTokenValidity;
        private @Nullable List<String> allowedOauthFlows;
        private @Nullable Boolean allowedOauthFlowsUserPoolClient;
        private @Nullable List<String> allowedOauthScopes;
        private @Nullable List<GetUserPoolClientAnalyticsConfiguration> analyticsConfigurations;
        private @Nullable List<String> callbackUrls;
        private String clientId;
        private @Nullable String clientSecret;
        private @Nullable String defaultRedirectUri;
        private @Nullable Boolean enablePropagateAdditionalUserContextData;
        private @Nullable Boolean enableTokenRevocation;
        private @Nullable List<String> explicitAuthFlows;
        private @Nullable Boolean generateSecret;
        private @Nullable String id;
        private @Nullable Integer idTokenValidity;
        private @Nullable List<String> logoutUrls;
        private @Nullable String name;
        private @Nullable String preventUserExistenceErrors;
        private @Nullable List<String> readAttributes;
        private @Nullable Integer refreshTokenValidity;
        private @Nullable List<String> supportedIdentityProviders;
        private @Nullable List<GetUserPoolClientTokenValidityUnit> tokenValidityUnits;
        private String userPoolId;
        private @Nullable List<String> writeAttributes;
        public Builder() {}
        public Builder(GetUserPoolClientResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessTokenValidity = defaults.accessTokenValidity;
    	      this.allowedOauthFlows = defaults.allowedOauthFlows;
    	      this.allowedOauthFlowsUserPoolClient = defaults.allowedOauthFlowsUserPoolClient;
    	      this.allowedOauthScopes = defaults.allowedOauthScopes;
    	      this.analyticsConfigurations = defaults.analyticsConfigurations;
    	      this.callbackUrls = defaults.callbackUrls;
    	      this.clientId = defaults.clientId;
    	      this.clientSecret = defaults.clientSecret;
    	      this.defaultRedirectUri = defaults.defaultRedirectUri;
    	      this.enablePropagateAdditionalUserContextData = defaults.enablePropagateAdditionalUserContextData;
    	      this.enableTokenRevocation = defaults.enableTokenRevocation;
    	      this.explicitAuthFlows = defaults.explicitAuthFlows;
    	      this.generateSecret = defaults.generateSecret;
    	      this.id = defaults.id;
    	      this.idTokenValidity = defaults.idTokenValidity;
    	      this.logoutUrls = defaults.logoutUrls;
    	      this.name = defaults.name;
    	      this.preventUserExistenceErrors = defaults.preventUserExistenceErrors;
    	      this.readAttributes = defaults.readAttributes;
    	      this.refreshTokenValidity = defaults.refreshTokenValidity;
    	      this.supportedIdentityProviders = defaults.supportedIdentityProviders;
    	      this.tokenValidityUnits = defaults.tokenValidityUnits;
    	      this.userPoolId = defaults.userPoolId;
    	      this.writeAttributes = defaults.writeAttributes;
        }

        @CustomType.Setter
        public Builder accessTokenValidity(@Nullable Integer accessTokenValidity) {
            this.accessTokenValidity = accessTokenValidity;
            return this;
        }
        @CustomType.Setter
        public Builder allowedOauthFlows(@Nullable List<String> allowedOauthFlows) {
            this.allowedOauthFlows = allowedOauthFlows;
            return this;
        }
        public Builder allowedOauthFlows(String... allowedOauthFlows) {
            return allowedOauthFlows(List.of(allowedOauthFlows));
        }
        @CustomType.Setter
        public Builder allowedOauthFlowsUserPoolClient(@Nullable Boolean allowedOauthFlowsUserPoolClient) {
            this.allowedOauthFlowsUserPoolClient = allowedOauthFlowsUserPoolClient;
            return this;
        }
        @CustomType.Setter
        public Builder allowedOauthScopes(@Nullable List<String> allowedOauthScopes) {
            this.allowedOauthScopes = allowedOauthScopes;
            return this;
        }
        public Builder allowedOauthScopes(String... allowedOauthScopes) {
            return allowedOauthScopes(List.of(allowedOauthScopes));
        }
        @CustomType.Setter
        public Builder analyticsConfigurations(@Nullable List<GetUserPoolClientAnalyticsConfiguration> analyticsConfigurations) {
            this.analyticsConfigurations = analyticsConfigurations;
            return this;
        }
        public Builder analyticsConfigurations(GetUserPoolClientAnalyticsConfiguration... analyticsConfigurations) {
            return analyticsConfigurations(List.of(analyticsConfigurations));
        }
        @CustomType.Setter
        public Builder callbackUrls(@Nullable List<String> callbackUrls) {
            this.callbackUrls = callbackUrls;
            return this;
        }
        public Builder callbackUrls(String... callbackUrls) {
            return callbackUrls(List.of(callbackUrls));
        }
        @CustomType.Setter
        public Builder clientId(String clientId) {
            this.clientId = Objects.requireNonNull(clientId);
            return this;
        }
        @CustomType.Setter
        public Builder clientSecret(@Nullable String clientSecret) {
            this.clientSecret = clientSecret;
            return this;
        }
        @CustomType.Setter
        public Builder defaultRedirectUri(@Nullable String defaultRedirectUri) {
            this.defaultRedirectUri = defaultRedirectUri;
            return this;
        }
        @CustomType.Setter
        public Builder enablePropagateAdditionalUserContextData(@Nullable Boolean enablePropagateAdditionalUserContextData) {
            this.enablePropagateAdditionalUserContextData = enablePropagateAdditionalUserContextData;
            return this;
        }
        @CustomType.Setter
        public Builder enableTokenRevocation(@Nullable Boolean enableTokenRevocation) {
            this.enableTokenRevocation = enableTokenRevocation;
            return this;
        }
        @CustomType.Setter
        public Builder explicitAuthFlows(@Nullable List<String> explicitAuthFlows) {
            this.explicitAuthFlows = explicitAuthFlows;
            return this;
        }
        public Builder explicitAuthFlows(String... explicitAuthFlows) {
            return explicitAuthFlows(List.of(explicitAuthFlows));
        }
        @CustomType.Setter
        public Builder generateSecret(@Nullable Boolean generateSecret) {
            this.generateSecret = generateSecret;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder idTokenValidity(@Nullable Integer idTokenValidity) {
            this.idTokenValidity = idTokenValidity;
            return this;
        }
        @CustomType.Setter
        public Builder logoutUrls(@Nullable List<String> logoutUrls) {
            this.logoutUrls = logoutUrls;
            return this;
        }
        public Builder logoutUrls(String... logoutUrls) {
            return logoutUrls(List.of(logoutUrls));
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder preventUserExistenceErrors(@Nullable String preventUserExistenceErrors) {
            this.preventUserExistenceErrors = preventUserExistenceErrors;
            return this;
        }
        @CustomType.Setter
        public Builder readAttributes(@Nullable List<String> readAttributes) {
            this.readAttributes = readAttributes;
            return this;
        }
        public Builder readAttributes(String... readAttributes) {
            return readAttributes(List.of(readAttributes));
        }
        @CustomType.Setter
        public Builder refreshTokenValidity(@Nullable Integer refreshTokenValidity) {
            this.refreshTokenValidity = refreshTokenValidity;
            return this;
        }
        @CustomType.Setter
        public Builder supportedIdentityProviders(@Nullable List<String> supportedIdentityProviders) {
            this.supportedIdentityProviders = supportedIdentityProviders;
            return this;
        }
        public Builder supportedIdentityProviders(String... supportedIdentityProviders) {
            return supportedIdentityProviders(List.of(supportedIdentityProviders));
        }
        @CustomType.Setter
        public Builder tokenValidityUnits(@Nullable List<GetUserPoolClientTokenValidityUnit> tokenValidityUnits) {
            this.tokenValidityUnits = tokenValidityUnits;
            return this;
        }
        public Builder tokenValidityUnits(GetUserPoolClientTokenValidityUnit... tokenValidityUnits) {
            return tokenValidityUnits(List.of(tokenValidityUnits));
        }
        @CustomType.Setter
        public Builder userPoolId(String userPoolId) {
            this.userPoolId = Objects.requireNonNull(userPoolId);
            return this;
        }
        @CustomType.Setter
        public Builder writeAttributes(@Nullable List<String> writeAttributes) {
            this.writeAttributes = writeAttributes;
            return this;
        }
        public Builder writeAttributes(String... writeAttributes) {
            return writeAttributes(List.of(writeAttributes));
        }
        public GetUserPoolClientResult build() {
            final var o = new GetUserPoolClientResult();
            o.accessTokenValidity = accessTokenValidity;
            o.allowedOauthFlows = allowedOauthFlows;
            o.allowedOauthFlowsUserPoolClient = allowedOauthFlowsUserPoolClient;
            o.allowedOauthScopes = allowedOauthScopes;
            o.analyticsConfigurations = analyticsConfigurations;
            o.callbackUrls = callbackUrls;
            o.clientId = clientId;
            o.clientSecret = clientSecret;
            o.defaultRedirectUri = defaultRedirectUri;
            o.enablePropagateAdditionalUserContextData = enablePropagateAdditionalUserContextData;
            o.enableTokenRevocation = enableTokenRevocation;
            o.explicitAuthFlows = explicitAuthFlows;
            o.generateSecret = generateSecret;
            o.id = id;
            o.idTokenValidity = idTokenValidity;
            o.logoutUrls = logoutUrls;
            o.name = name;
            o.preventUserExistenceErrors = preventUserExistenceErrors;
            o.readAttributes = readAttributes;
            o.refreshTokenValidity = refreshTokenValidity;
            o.supportedIdentityProviders = supportedIdentityProviders;
            o.tokenValidityUnits = tokenValidityUnits;
            o.userPoolId = userPoolId;
            o.writeAttributes = writeAttributes;
            return o;
        }
    }
}
