// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.iam.outputs;

import com.pulumi.aws.iam.outputs.GetPrincipalPolicySimulationResultMatchedStatement;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetPrincipalPolicySimulationResult {
    /**
     * @return The name of the single IAM action used for this particular request.
     * 
     */
    private @Nullable String actionName;
    /**
     * @return `true` if `decision` is &#34;allowed&#34;, and `false` otherwise.
     * 
     */
    private @Nullable Boolean allowed;
    /**
     * @return The raw decision determined from all of the policies in scope; either &#34;allowed&#34;, &#34;explicitDeny&#34;, or &#34;implicitDeny&#34;.
     * 
     */
    private @Nullable String decision;
    /**
     * @return A map of arbitrary metadata entries returned by the policy simulator for this request.
     * 
     */
    private @Nullable Map<String,String> decisionDetails;
    /**
     * @return A nested set of objects describing which policies contained statements that were relevant to this simulation request. Each object has attributes `source_policy_id` and `source_policy_type` to identify one of the policies.
     * 
     */
    private @Nullable List<GetPrincipalPolicySimulationResultMatchedStatement> matchedStatements;
    /**
     * @return A set of context keys (or condition keys) that were needed by some of the policies contributing to this result but not specified using a `context` block in the configuration. Missing or incorrect context keys will typically cause a simulated request to be disallowed.
     * 
     */
    private @Nullable List<String> missingContextKeys;
    /**
     * @return ARN of the resource that was used for this particular request. When you specify multiple actions and multiple resource ARNs, that causes a separate policy request for each combination of unique action and resource.
     * 
     */
    private @Nullable String resourceArn;

    private GetPrincipalPolicySimulationResult() {}
    /**
     * @return The name of the single IAM action used for this particular request.
     * 
     */
    public Optional<String> actionName() {
        return Optional.ofNullable(this.actionName);
    }
    /**
     * @return `true` if `decision` is &#34;allowed&#34;, and `false` otherwise.
     * 
     */
    public Optional<Boolean> allowed() {
        return Optional.ofNullable(this.allowed);
    }
    /**
     * @return The raw decision determined from all of the policies in scope; either &#34;allowed&#34;, &#34;explicitDeny&#34;, or &#34;implicitDeny&#34;.
     * 
     */
    public Optional<String> decision() {
        return Optional.ofNullable(this.decision);
    }
    /**
     * @return A map of arbitrary metadata entries returned by the policy simulator for this request.
     * 
     */
    public Map<String,String> decisionDetails() {
        return this.decisionDetails == null ? Map.of() : this.decisionDetails;
    }
    /**
     * @return A nested set of objects describing which policies contained statements that were relevant to this simulation request. Each object has attributes `source_policy_id` and `source_policy_type` to identify one of the policies.
     * 
     */
    public List<GetPrincipalPolicySimulationResultMatchedStatement> matchedStatements() {
        return this.matchedStatements == null ? List.of() : this.matchedStatements;
    }
    /**
     * @return A set of context keys (or condition keys) that were needed by some of the policies contributing to this result but not specified using a `context` block in the configuration. Missing or incorrect context keys will typically cause a simulated request to be disallowed.
     * 
     */
    public List<String> missingContextKeys() {
        return this.missingContextKeys == null ? List.of() : this.missingContextKeys;
    }
    /**
     * @return ARN of the resource that was used for this particular request. When you specify multiple actions and multiple resource ARNs, that causes a separate policy request for each combination of unique action and resource.
     * 
     */
    public Optional<String> resourceArn() {
        return Optional.ofNullable(this.resourceArn);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPrincipalPolicySimulationResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String actionName;
        private @Nullable Boolean allowed;
        private @Nullable String decision;
        private @Nullable Map<String,String> decisionDetails;
        private @Nullable List<GetPrincipalPolicySimulationResultMatchedStatement> matchedStatements;
        private @Nullable List<String> missingContextKeys;
        private @Nullable String resourceArn;
        public Builder() {}
        public Builder(GetPrincipalPolicySimulationResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.actionName = defaults.actionName;
    	      this.allowed = defaults.allowed;
    	      this.decision = defaults.decision;
    	      this.decisionDetails = defaults.decisionDetails;
    	      this.matchedStatements = defaults.matchedStatements;
    	      this.missingContextKeys = defaults.missingContextKeys;
    	      this.resourceArn = defaults.resourceArn;
        }

        @CustomType.Setter
        public Builder actionName(@Nullable String actionName) {
            this.actionName = actionName;
            return this;
        }
        @CustomType.Setter
        public Builder allowed(@Nullable Boolean allowed) {
            this.allowed = allowed;
            return this;
        }
        @CustomType.Setter
        public Builder decision(@Nullable String decision) {
            this.decision = decision;
            return this;
        }
        @CustomType.Setter
        public Builder decisionDetails(@Nullable Map<String,String> decisionDetails) {
            this.decisionDetails = decisionDetails;
            return this;
        }
        @CustomType.Setter
        public Builder matchedStatements(@Nullable List<GetPrincipalPolicySimulationResultMatchedStatement> matchedStatements) {
            this.matchedStatements = matchedStatements;
            return this;
        }
        public Builder matchedStatements(GetPrincipalPolicySimulationResultMatchedStatement... matchedStatements) {
            return matchedStatements(List.of(matchedStatements));
        }
        @CustomType.Setter
        public Builder missingContextKeys(@Nullable List<String> missingContextKeys) {
            this.missingContextKeys = missingContextKeys;
            return this;
        }
        public Builder missingContextKeys(String... missingContextKeys) {
            return missingContextKeys(List.of(missingContextKeys));
        }
        @CustomType.Setter
        public Builder resourceArn(@Nullable String resourceArn) {
            this.resourceArn = resourceArn;
            return this;
        }
        public GetPrincipalPolicySimulationResult build() {
            final var o = new GetPrincipalPolicySimulationResult();
            o.actionName = actionName;
            o.allowed = allowed;
            o.decision = decision;
            o.decisionDetails = decisionDetails;
            o.matchedStatements = matchedStatements;
            o.missingContextKeys = missingContextKeys;
            o.resourceArn = resourceArn;
            return o;
        }
    }
}
