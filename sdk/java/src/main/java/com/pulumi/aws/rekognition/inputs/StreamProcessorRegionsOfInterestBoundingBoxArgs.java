// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.rekognition.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class StreamProcessorRegionsOfInterestBoundingBoxArgs extends com.pulumi.resources.ResourceArgs {

    public static final StreamProcessorRegionsOfInterestBoundingBoxArgs Empty = new StreamProcessorRegionsOfInterestBoundingBoxArgs();

    /**
     * Height of the bounding box as a ratio of the overall image height.
     * 
     */
    @Import(name="height")
    private @Nullable Output<Double> height;

    /**
     * @return Height of the bounding box as a ratio of the overall image height.
     * 
     */
    public Optional<Output<Double>> height() {
        return Optional.ofNullable(this.height);
    }

    /**
     * Left coordinate of the bounding box as a ratio of overall image width.
     * 
     */
    @Import(name="left")
    private @Nullable Output<Double> left;

    /**
     * @return Left coordinate of the bounding box as a ratio of overall image width.
     * 
     */
    public Optional<Output<Double>> left() {
        return Optional.ofNullable(this.left);
    }

    /**
     * Top coordinate of the bounding box as a ratio of overall image height.
     * 
     */
    @Import(name="top")
    private @Nullable Output<Double> top;

    /**
     * @return Top coordinate of the bounding box as a ratio of overall image height.
     * 
     */
    public Optional<Output<Double>> top() {
        return Optional.ofNullable(this.top);
    }

    /**
     * Width of the bounding box as a ratio of the overall image width.
     * 
     */
    @Import(name="width")
    private @Nullable Output<Double> width;

    /**
     * @return Width of the bounding box as a ratio of the overall image width.
     * 
     */
    public Optional<Output<Double>> width() {
        return Optional.ofNullable(this.width);
    }

    private StreamProcessorRegionsOfInterestBoundingBoxArgs() {}

    private StreamProcessorRegionsOfInterestBoundingBoxArgs(StreamProcessorRegionsOfInterestBoundingBoxArgs $) {
        this.height = $.height;
        this.left = $.left;
        this.top = $.top;
        this.width = $.width;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StreamProcessorRegionsOfInterestBoundingBoxArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StreamProcessorRegionsOfInterestBoundingBoxArgs $;

        public Builder() {
            $ = new StreamProcessorRegionsOfInterestBoundingBoxArgs();
        }

        public Builder(StreamProcessorRegionsOfInterestBoundingBoxArgs defaults) {
            $ = new StreamProcessorRegionsOfInterestBoundingBoxArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param height Height of the bounding box as a ratio of the overall image height.
         * 
         * @return builder
         * 
         */
        public Builder height(@Nullable Output<Double> height) {
            $.height = height;
            return this;
        }

        /**
         * @param height Height of the bounding box as a ratio of the overall image height.
         * 
         * @return builder
         * 
         */
        public Builder height(Double height) {
            return height(Output.of(height));
        }

        /**
         * @param left Left coordinate of the bounding box as a ratio of overall image width.
         * 
         * @return builder
         * 
         */
        public Builder left(@Nullable Output<Double> left) {
            $.left = left;
            return this;
        }

        /**
         * @param left Left coordinate of the bounding box as a ratio of overall image width.
         * 
         * @return builder
         * 
         */
        public Builder left(Double left) {
            return left(Output.of(left));
        }

        /**
         * @param top Top coordinate of the bounding box as a ratio of overall image height.
         * 
         * @return builder
         * 
         */
        public Builder top(@Nullable Output<Double> top) {
            $.top = top;
            return this;
        }

        /**
         * @param top Top coordinate of the bounding box as a ratio of overall image height.
         * 
         * @return builder
         * 
         */
        public Builder top(Double top) {
            return top(Output.of(top));
        }

        /**
         * @param width Width of the bounding box as a ratio of the overall image width.
         * 
         * @return builder
         * 
         */
        public Builder width(@Nullable Output<Double> width) {
            $.width = width;
            return this;
        }

        /**
         * @param width Width of the bounding box as a ratio of the overall image width.
         * 
         * @return builder
         * 
         */
        public Builder width(Double width) {
            return width(Output.of(width));
        }

        public StreamProcessorRegionsOfInterestBoundingBoxArgs build() {
            return $;
        }
    }

}
