// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.workspacesweb.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class TrustStoreCertificate {
    /**
     * @return Certificate body in PEM format.
     * 
     */
    private String body;
    /**
     * @return Certificate issuer.
     * 
     */
    private @Nullable String issuer;
    /**
     * @return Date and time when the certificate expires in RFC3339 format.
     * 
     */
    private @Nullable String notValidAfter;
    /**
     * @return Date and time when the certificate becomes valid in RFC3339 format.
     * 
     */
    private @Nullable String notValidBefore;
    /**
     * @return Certificate subject.
     * 
     */
    private @Nullable String subject;
    /**
     * @return Certificate thumbprint.
     * 
     */
    private @Nullable String thumbprint;

    private TrustStoreCertificate() {}
    /**
     * @return Certificate body in PEM format.
     * 
     */
    public String body() {
        return this.body;
    }
    /**
     * @return Certificate issuer.
     * 
     */
    public Optional<String> issuer() {
        return Optional.ofNullable(this.issuer);
    }
    /**
     * @return Date and time when the certificate expires in RFC3339 format.
     * 
     */
    public Optional<String> notValidAfter() {
        return Optional.ofNullable(this.notValidAfter);
    }
    /**
     * @return Date and time when the certificate becomes valid in RFC3339 format.
     * 
     */
    public Optional<String> notValidBefore() {
        return Optional.ofNullable(this.notValidBefore);
    }
    /**
     * @return Certificate subject.
     * 
     */
    public Optional<String> subject() {
        return Optional.ofNullable(this.subject);
    }
    /**
     * @return Certificate thumbprint.
     * 
     */
    public Optional<String> thumbprint() {
        return Optional.ofNullable(this.thumbprint);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TrustStoreCertificate defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String body;
        private @Nullable String issuer;
        private @Nullable String notValidAfter;
        private @Nullable String notValidBefore;
        private @Nullable String subject;
        private @Nullable String thumbprint;
        public Builder() {}
        public Builder(TrustStoreCertificate defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.body = defaults.body;
    	      this.issuer = defaults.issuer;
    	      this.notValidAfter = defaults.notValidAfter;
    	      this.notValidBefore = defaults.notValidBefore;
    	      this.subject = defaults.subject;
    	      this.thumbprint = defaults.thumbprint;
        }

        @CustomType.Setter
        public Builder body(String body) {
            if (body == null) {
              throw new MissingRequiredPropertyException("TrustStoreCertificate", "body");
            }
            this.body = body;
            return this;
        }
        @CustomType.Setter
        public Builder issuer(@Nullable String issuer) {

            this.issuer = issuer;
            return this;
        }
        @CustomType.Setter
        public Builder notValidAfter(@Nullable String notValidAfter) {

            this.notValidAfter = notValidAfter;
            return this;
        }
        @CustomType.Setter
        public Builder notValidBefore(@Nullable String notValidBefore) {

            this.notValidBefore = notValidBefore;
            return this;
        }
        @CustomType.Setter
        public Builder subject(@Nullable String subject) {

            this.subject = subject;
            return this;
        }
        @CustomType.Setter
        public Builder thumbprint(@Nullable String thumbprint) {

            this.thumbprint = thumbprint;
            return this;
        }
        public TrustStoreCertificate build() {
            final var _resultValue = new TrustStoreCertificate();
            _resultValue.body = body;
            _resultValue.issuer = issuer;
            _resultValue.notValidAfter = notValidAfter;
            _resultValue.notValidBefore = notValidBefore;
            _resultValue.subject = subject;
            _resultValue.thumbprint = thumbprint;
            return _resultValue;
        }
    }
}
