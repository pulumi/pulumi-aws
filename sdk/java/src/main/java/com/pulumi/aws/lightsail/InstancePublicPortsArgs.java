// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.lightsail;

import com.pulumi.aws.lightsail.inputs.InstancePublicPortsPortInfoArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstancePublicPortsArgs extends com.pulumi.resources.ResourceArgs {

    public static final InstancePublicPortsArgs Empty = new InstancePublicPortsArgs();

    /**
     * Name of the instance for which to open ports.
     * 
     */
    @Import(name="instanceName", required=true)
    private Output<String> instanceName;

    /**
     * @return Name of the instance for which to open ports.
     * 
     */
    public Output<String> instanceName() {
        return this.instanceName;
    }

    /**
     * Descriptor of the ports to open for the specified instance. AWS closes all currently open ports that are not included in this argument. See `portInfo` Block for details.
     * 
     * The following arguments are optional:
     * 
     */
    @Import(name="portInfos", required=true)
    private Output<List<InstancePublicPortsPortInfoArgs>> portInfos;

    /**
     * @return Descriptor of the ports to open for the specified instance. AWS closes all currently open ports that are not included in this argument. See `portInfo` Block for details.
     * 
     * The following arguments are optional:
     * 
     */
    public Output<List<InstancePublicPortsPortInfoArgs>> portInfos() {
        return this.portInfos;
    }

    /**
     * Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    private InstancePublicPortsArgs() {}

    private InstancePublicPortsArgs(InstancePublicPortsArgs $) {
        this.instanceName = $.instanceName;
        this.portInfos = $.portInfos;
        this.region = $.region;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstancePublicPortsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstancePublicPortsArgs $;

        public Builder() {
            $ = new InstancePublicPortsArgs();
        }

        public Builder(InstancePublicPortsArgs defaults) {
            $ = new InstancePublicPortsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param instanceName Name of the instance for which to open ports.
         * 
         * @return builder
         * 
         */
        public Builder instanceName(Output<String> instanceName) {
            $.instanceName = instanceName;
            return this;
        }

        /**
         * @param instanceName Name of the instance for which to open ports.
         * 
         * @return builder
         * 
         */
        public Builder instanceName(String instanceName) {
            return instanceName(Output.of(instanceName));
        }

        /**
         * @param portInfos Descriptor of the ports to open for the specified instance. AWS closes all currently open ports that are not included in this argument. See `portInfo` Block for details.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder portInfos(Output<List<InstancePublicPortsPortInfoArgs>> portInfos) {
            $.portInfos = portInfos;
            return this;
        }

        /**
         * @param portInfos Descriptor of the ports to open for the specified instance. AWS closes all currently open ports that are not included in this argument. See `portInfo` Block for details.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder portInfos(List<InstancePublicPortsPortInfoArgs> portInfos) {
            return portInfos(Output.of(portInfos));
        }

        /**
         * @param portInfos Descriptor of the ports to open for the specified instance. AWS closes all currently open ports that are not included in this argument. See `portInfo` Block for details.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder portInfos(InstancePublicPortsPortInfoArgs... portInfos) {
            return portInfos(List.of(portInfos));
        }

        /**
         * @param region Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        public InstancePublicPortsArgs build() {
            if ($.instanceName == null) {
                throw new MissingRequiredPropertyException("InstancePublicPortsArgs", "instanceName");
            }
            if ($.portInfos == null) {
                throw new MissingRequiredPropertyException("InstancePublicPortsArgs", "portInfos");
            }
            return $;
        }
    }

}
