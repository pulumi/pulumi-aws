// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.inputs;

import com.pulumi.aws.quicksight.inputs.ChartAxisLabelOptionsArgs;
import com.pulumi.aws.quicksight.inputs.ColorScaleArgs;
import com.pulumi.aws.quicksight.inputs.DataLabelsOptionsArgs;
import com.pulumi.aws.quicksight.inputs.LegendOptionsArgs;
import com.pulumi.aws.quicksight.inputs.TooltipOptionsArgs;
import com.pulumi.aws.quicksight.inputs.VisualsHeatMapVisualChartConfigurationFieldWellsArgs;
import com.pulumi.aws.quicksight.inputs.VisualsHeatMapVisualChartConfigurationSortConfigurationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VisualsHeatMapVisualChartConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final VisualsHeatMapVisualChartConfigurationArgs Empty = new VisualsHeatMapVisualChartConfigurationArgs();

    @Import(name="colorScale")
    private @Nullable Output<ColorScaleArgs> colorScale;

    public Optional<Output<ColorScaleArgs>> colorScale() {
        return Optional.ofNullable(this.colorScale);
    }

    @Import(name="columnLabelOptions")
    private @Nullable Output<ChartAxisLabelOptionsArgs> columnLabelOptions;

    public Optional<Output<ChartAxisLabelOptionsArgs>> columnLabelOptions() {
        return Optional.ofNullable(this.columnLabelOptions);
    }

    @Import(name="dataLabels")
    private @Nullable Output<DataLabelsOptionsArgs> dataLabels;

    public Optional<Output<DataLabelsOptionsArgs>> dataLabels() {
        return Optional.ofNullable(this.dataLabels);
    }

    @Import(name="fieldWells")
    private @Nullable Output<VisualsHeatMapVisualChartConfigurationFieldWellsArgs> fieldWells;

    public Optional<Output<VisualsHeatMapVisualChartConfigurationFieldWellsArgs>> fieldWells() {
        return Optional.ofNullable(this.fieldWells);
    }

    @Import(name="legend")
    private @Nullable Output<LegendOptionsArgs> legend;

    public Optional<Output<LegendOptionsArgs>> legend() {
        return Optional.ofNullable(this.legend);
    }

    @Import(name="rowLabelOptions")
    private @Nullable Output<ChartAxisLabelOptionsArgs> rowLabelOptions;

    public Optional<Output<ChartAxisLabelOptionsArgs>> rowLabelOptions() {
        return Optional.ofNullable(this.rowLabelOptions);
    }

    @Import(name="sortConfiguration")
    private @Nullable Output<VisualsHeatMapVisualChartConfigurationSortConfigurationArgs> sortConfiguration;

    public Optional<Output<VisualsHeatMapVisualChartConfigurationSortConfigurationArgs>> sortConfiguration() {
        return Optional.ofNullable(this.sortConfiguration);
    }

    @Import(name="tooltip")
    private @Nullable Output<TooltipOptionsArgs> tooltip;

    public Optional<Output<TooltipOptionsArgs>> tooltip() {
        return Optional.ofNullable(this.tooltip);
    }

    private VisualsHeatMapVisualChartConfigurationArgs() {}

    private VisualsHeatMapVisualChartConfigurationArgs(VisualsHeatMapVisualChartConfigurationArgs $) {
        this.colorScale = $.colorScale;
        this.columnLabelOptions = $.columnLabelOptions;
        this.dataLabels = $.dataLabels;
        this.fieldWells = $.fieldWells;
        this.legend = $.legend;
        this.rowLabelOptions = $.rowLabelOptions;
        this.sortConfiguration = $.sortConfiguration;
        this.tooltip = $.tooltip;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VisualsHeatMapVisualChartConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VisualsHeatMapVisualChartConfigurationArgs $;

        public Builder() {
            $ = new VisualsHeatMapVisualChartConfigurationArgs();
        }

        public Builder(VisualsHeatMapVisualChartConfigurationArgs defaults) {
            $ = new VisualsHeatMapVisualChartConfigurationArgs(Objects.requireNonNull(defaults));
        }

        public Builder colorScale(@Nullable Output<ColorScaleArgs> colorScale) {
            $.colorScale = colorScale;
            return this;
        }

        public Builder colorScale(ColorScaleArgs colorScale) {
            return colorScale(Output.of(colorScale));
        }

        public Builder columnLabelOptions(@Nullable Output<ChartAxisLabelOptionsArgs> columnLabelOptions) {
            $.columnLabelOptions = columnLabelOptions;
            return this;
        }

        public Builder columnLabelOptions(ChartAxisLabelOptionsArgs columnLabelOptions) {
            return columnLabelOptions(Output.of(columnLabelOptions));
        }

        public Builder dataLabels(@Nullable Output<DataLabelsOptionsArgs> dataLabels) {
            $.dataLabels = dataLabels;
            return this;
        }

        public Builder dataLabels(DataLabelsOptionsArgs dataLabels) {
            return dataLabels(Output.of(dataLabels));
        }

        public Builder fieldWells(@Nullable Output<VisualsHeatMapVisualChartConfigurationFieldWellsArgs> fieldWells) {
            $.fieldWells = fieldWells;
            return this;
        }

        public Builder fieldWells(VisualsHeatMapVisualChartConfigurationFieldWellsArgs fieldWells) {
            return fieldWells(Output.of(fieldWells));
        }

        public Builder legend(@Nullable Output<LegendOptionsArgs> legend) {
            $.legend = legend;
            return this;
        }

        public Builder legend(LegendOptionsArgs legend) {
            return legend(Output.of(legend));
        }

        public Builder rowLabelOptions(@Nullable Output<ChartAxisLabelOptionsArgs> rowLabelOptions) {
            $.rowLabelOptions = rowLabelOptions;
            return this;
        }

        public Builder rowLabelOptions(ChartAxisLabelOptionsArgs rowLabelOptions) {
            return rowLabelOptions(Output.of(rowLabelOptions));
        }

        public Builder sortConfiguration(@Nullable Output<VisualsHeatMapVisualChartConfigurationSortConfigurationArgs> sortConfiguration) {
            $.sortConfiguration = sortConfiguration;
            return this;
        }

        public Builder sortConfiguration(VisualsHeatMapVisualChartConfigurationSortConfigurationArgs sortConfiguration) {
            return sortConfiguration(Output.of(sortConfiguration));
        }

        public Builder tooltip(@Nullable Output<TooltipOptionsArgs> tooltip) {
            $.tooltip = tooltip;
            return this;
        }

        public Builder tooltip(TooltipOptionsArgs tooltip) {
            return tooltip(Output.of(tooltip));
        }

        public VisualsHeatMapVisualChartConfigurationArgs build() {
            return $;
        }
    }

}
