// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.codepipeline.outputs;

import com.pulumi.aws.codepipeline.outputs.PipelineTriggerGitConfigurationPullRequest;
import com.pulumi.aws.codepipeline.outputs.PipelineTriggerGitConfigurationPush;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class PipelineTriggerGitConfiguration {
    /**
     * @return The field where the repository event that will start the pipeline is specified as pull requests. A `pull_request` block is documented below.
     * 
     */
    private @Nullable List<PipelineTriggerGitConfigurationPullRequest> pullRequests;
    /**
     * @return The field where the repository event that will start the pipeline, such as pushing Git tags, is specified with details. A `push` block is documented below.
     * 
     */
    private @Nullable List<PipelineTriggerGitConfigurationPush> pushes;
    /**
     * @return The name of the pipeline source action where the trigger configuration.
     * 
     */
    private String sourceActionName;

    private PipelineTriggerGitConfiguration() {}
    /**
     * @return The field where the repository event that will start the pipeline is specified as pull requests. A `pull_request` block is documented below.
     * 
     */
    public List<PipelineTriggerGitConfigurationPullRequest> pullRequests() {
        return this.pullRequests == null ? List.of() : this.pullRequests;
    }
    /**
     * @return The field where the repository event that will start the pipeline, such as pushing Git tags, is specified with details. A `push` block is documented below.
     * 
     */
    public List<PipelineTriggerGitConfigurationPush> pushes() {
        return this.pushes == null ? List.of() : this.pushes;
    }
    /**
     * @return The name of the pipeline source action where the trigger configuration.
     * 
     */
    public String sourceActionName() {
        return this.sourceActionName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PipelineTriggerGitConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<PipelineTriggerGitConfigurationPullRequest> pullRequests;
        private @Nullable List<PipelineTriggerGitConfigurationPush> pushes;
        private String sourceActionName;
        public Builder() {}
        public Builder(PipelineTriggerGitConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.pullRequests = defaults.pullRequests;
    	      this.pushes = defaults.pushes;
    	      this.sourceActionName = defaults.sourceActionName;
        }

        @CustomType.Setter
        public Builder pullRequests(@Nullable List<PipelineTriggerGitConfigurationPullRequest> pullRequests) {

            this.pullRequests = pullRequests;
            return this;
        }
        public Builder pullRequests(PipelineTriggerGitConfigurationPullRequest... pullRequests) {
            return pullRequests(List.of(pullRequests));
        }
        @CustomType.Setter
        public Builder pushes(@Nullable List<PipelineTriggerGitConfigurationPush> pushes) {

            this.pushes = pushes;
            return this;
        }
        public Builder pushes(PipelineTriggerGitConfigurationPush... pushes) {
            return pushes(List.of(pushes));
        }
        @CustomType.Setter
        public Builder sourceActionName(String sourceActionName) {
            if (sourceActionName == null) {
              throw new MissingRequiredPropertyException("PipelineTriggerGitConfiguration", "sourceActionName");
            }
            this.sourceActionName = sourceActionName;
            return this;
        }
        public PipelineTriggerGitConfiguration build() {
            final var _resultValue = new PipelineTriggerGitConfiguration();
            _resultValue.pullRequests = pullRequests;
            _resultValue.pushes = pushes;
            _resultValue.sourceActionName = sourceActionName;
            return _resultValue;
        }
    }
}
