// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ec2clientvpn.outputs;

import com.pulumi.aws.ec2clientvpn.outputs.GetEndpointAuthenticationOption;
import com.pulumi.aws.ec2clientvpn.outputs.GetEndpointClientConnectOption;
import com.pulumi.aws.ec2clientvpn.outputs.GetEndpointClientLoginBannerOption;
import com.pulumi.aws.ec2clientvpn.outputs.GetEndpointConnectionLogOption;
import com.pulumi.aws.ec2clientvpn.outputs.GetEndpointFilter;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetEndpointResult {
    /**
     * @return The ARN of the Client VPN endpoint.
     * 
     */
    private @Nullable String arn;
    /**
     * @return Information about the authentication method used by the Client VPN endpoint.
     * 
     */
    private @Nullable List<GetEndpointAuthenticationOption> authenticationOptions;
    /**
     * @return IPv4 address range, in CIDR notation, from which client IP addresses are assigned.
     * 
     */
    private @Nullable String clientCidrBlock;
    /**
     * @return The options for managing connection authorization for new client connections.
     * 
     */
    private @Nullable List<GetEndpointClientConnectOption> clientConnectOptions;
    /**
     * @return Options for enabling a customizable text banner that will be displayed on AWS provided clients when a VPN session is established.
     * 
     */
    private @Nullable List<GetEndpointClientLoginBannerOption> clientLoginBannerOptions;
    private @Nullable String clientVpnEndpointId;
    /**
     * @return Information about the client connection logging options for the Client VPN endpoint.
     * 
     */
    private @Nullable List<GetEndpointConnectionLogOption> connectionLogOptions;
    /**
     * @return Brief description of the endpoint.
     * 
     */
    private @Nullable String description;
    /**
     * @return DNS name to be used by clients when connecting to the Client VPN endpoint.
     * 
     */
    private @Nullable String dnsName;
    /**
     * @return Information about the DNS servers to be used for DNS resolution.
     * 
     */
    private @Nullable List<String> dnsServers;
    private @Nullable List<GetEndpointFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private @Nullable String id;
    /**
     * @return IDs of the security groups for the target network associated with the Client VPN endpoint.
     * 
     */
    private @Nullable List<String> securityGroupIds;
    /**
     * @return Whether the self-service portal for the Client VPN endpoint is enabled.
     * 
     */
    private @Nullable String selfServicePortal;
    /**
     * @return The URL of the self-service portal.
     * 
     */
    private @Nullable String selfServicePortalUrl;
    /**
     * @return The ARN of the server certificate.
     * 
     */
    private @Nullable String serverCertificateArn;
    /**
     * @return The maximum VPN session duration time in hours.
     * 
     */
    private @Nullable Integer sessionTimeoutHours;
    /**
     * @return Whether split-tunnel is enabled in the AWS Client VPN endpoint.
     * 
     */
    private @Nullable Boolean splitTunnel;
    private @Nullable Map<String,String> tags;
    /**
     * @return Transport protocol used by the Client VPN endpoint.
     * 
     */
    private @Nullable String transportProtocol;
    /**
     * @return ID of the VPC associated with the Client VPN endpoint.
     * 
     */
    private @Nullable String vpcId;
    /**
     * @return Port number for the Client VPN endpoint.
     * 
     */
    private @Nullable Integer vpnPort;

    private GetEndpointResult() {}
    /**
     * @return The ARN of the Client VPN endpoint.
     * 
     */
    public Optional<String> arn() {
        return Optional.ofNullable(this.arn);
    }
    /**
     * @return Information about the authentication method used by the Client VPN endpoint.
     * 
     */
    public List<GetEndpointAuthenticationOption> authenticationOptions() {
        return this.authenticationOptions == null ? List.of() : this.authenticationOptions;
    }
    /**
     * @return IPv4 address range, in CIDR notation, from which client IP addresses are assigned.
     * 
     */
    public Optional<String> clientCidrBlock() {
        return Optional.ofNullable(this.clientCidrBlock);
    }
    /**
     * @return The options for managing connection authorization for new client connections.
     * 
     */
    public List<GetEndpointClientConnectOption> clientConnectOptions() {
        return this.clientConnectOptions == null ? List.of() : this.clientConnectOptions;
    }
    /**
     * @return Options for enabling a customizable text banner that will be displayed on AWS provided clients when a VPN session is established.
     * 
     */
    public List<GetEndpointClientLoginBannerOption> clientLoginBannerOptions() {
        return this.clientLoginBannerOptions == null ? List.of() : this.clientLoginBannerOptions;
    }
    public Optional<String> clientVpnEndpointId() {
        return Optional.ofNullable(this.clientVpnEndpointId);
    }
    /**
     * @return Information about the client connection logging options for the Client VPN endpoint.
     * 
     */
    public List<GetEndpointConnectionLogOption> connectionLogOptions() {
        return this.connectionLogOptions == null ? List.of() : this.connectionLogOptions;
    }
    /**
     * @return Brief description of the endpoint.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return DNS name to be used by clients when connecting to the Client VPN endpoint.
     * 
     */
    public Optional<String> dnsName() {
        return Optional.ofNullable(this.dnsName);
    }
    /**
     * @return Information about the DNS servers to be used for DNS resolution.
     * 
     */
    public List<String> dnsServers() {
        return this.dnsServers == null ? List.of() : this.dnsServers;
    }
    public List<GetEndpointFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return IDs of the security groups for the target network associated with the Client VPN endpoint.
     * 
     */
    public List<String> securityGroupIds() {
        return this.securityGroupIds == null ? List.of() : this.securityGroupIds;
    }
    /**
     * @return Whether the self-service portal for the Client VPN endpoint is enabled.
     * 
     */
    public Optional<String> selfServicePortal() {
        return Optional.ofNullable(this.selfServicePortal);
    }
    /**
     * @return The URL of the self-service portal.
     * 
     */
    public Optional<String> selfServicePortalUrl() {
        return Optional.ofNullable(this.selfServicePortalUrl);
    }
    /**
     * @return The ARN of the server certificate.
     * 
     */
    public Optional<String> serverCertificateArn() {
        return Optional.ofNullable(this.serverCertificateArn);
    }
    /**
     * @return The maximum VPN session duration time in hours.
     * 
     */
    public Optional<Integer> sessionTimeoutHours() {
        return Optional.ofNullable(this.sessionTimeoutHours);
    }
    /**
     * @return Whether split-tunnel is enabled in the AWS Client VPN endpoint.
     * 
     */
    public Optional<Boolean> splitTunnel() {
        return Optional.ofNullable(this.splitTunnel);
    }
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * @return Transport protocol used by the Client VPN endpoint.
     * 
     */
    public Optional<String> transportProtocol() {
        return Optional.ofNullable(this.transportProtocol);
    }
    /**
     * @return ID of the VPC associated with the Client VPN endpoint.
     * 
     */
    public Optional<String> vpcId() {
        return Optional.ofNullable(this.vpcId);
    }
    /**
     * @return Port number for the Client VPN endpoint.
     * 
     */
    public Optional<Integer> vpnPort() {
        return Optional.ofNullable(this.vpnPort);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetEndpointResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String arn;
        private @Nullable List<GetEndpointAuthenticationOption> authenticationOptions;
        private @Nullable String clientCidrBlock;
        private @Nullable List<GetEndpointClientConnectOption> clientConnectOptions;
        private @Nullable List<GetEndpointClientLoginBannerOption> clientLoginBannerOptions;
        private @Nullable String clientVpnEndpointId;
        private @Nullable List<GetEndpointConnectionLogOption> connectionLogOptions;
        private @Nullable String description;
        private @Nullable String dnsName;
        private @Nullable List<String> dnsServers;
        private @Nullable List<GetEndpointFilter> filters;
        private @Nullable String id;
        private @Nullable List<String> securityGroupIds;
        private @Nullable String selfServicePortal;
        private @Nullable String selfServicePortalUrl;
        private @Nullable String serverCertificateArn;
        private @Nullable Integer sessionTimeoutHours;
        private @Nullable Boolean splitTunnel;
        private @Nullable Map<String,String> tags;
        private @Nullable String transportProtocol;
        private @Nullable String vpcId;
        private @Nullable Integer vpnPort;
        public Builder() {}
        public Builder(GetEndpointResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.authenticationOptions = defaults.authenticationOptions;
    	      this.clientCidrBlock = defaults.clientCidrBlock;
    	      this.clientConnectOptions = defaults.clientConnectOptions;
    	      this.clientLoginBannerOptions = defaults.clientLoginBannerOptions;
    	      this.clientVpnEndpointId = defaults.clientVpnEndpointId;
    	      this.connectionLogOptions = defaults.connectionLogOptions;
    	      this.description = defaults.description;
    	      this.dnsName = defaults.dnsName;
    	      this.dnsServers = defaults.dnsServers;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.securityGroupIds = defaults.securityGroupIds;
    	      this.selfServicePortal = defaults.selfServicePortal;
    	      this.selfServicePortalUrl = defaults.selfServicePortalUrl;
    	      this.serverCertificateArn = defaults.serverCertificateArn;
    	      this.sessionTimeoutHours = defaults.sessionTimeoutHours;
    	      this.splitTunnel = defaults.splitTunnel;
    	      this.tags = defaults.tags;
    	      this.transportProtocol = defaults.transportProtocol;
    	      this.vpcId = defaults.vpcId;
    	      this.vpnPort = defaults.vpnPort;
        }

        @CustomType.Setter
        public Builder arn(@Nullable String arn) {
            this.arn = arn;
            return this;
        }
        @CustomType.Setter
        public Builder authenticationOptions(@Nullable List<GetEndpointAuthenticationOption> authenticationOptions) {
            this.authenticationOptions = authenticationOptions;
            return this;
        }
        public Builder authenticationOptions(GetEndpointAuthenticationOption... authenticationOptions) {
            return authenticationOptions(List.of(authenticationOptions));
        }
        @CustomType.Setter
        public Builder clientCidrBlock(@Nullable String clientCidrBlock) {
            this.clientCidrBlock = clientCidrBlock;
            return this;
        }
        @CustomType.Setter
        public Builder clientConnectOptions(@Nullable List<GetEndpointClientConnectOption> clientConnectOptions) {
            this.clientConnectOptions = clientConnectOptions;
            return this;
        }
        public Builder clientConnectOptions(GetEndpointClientConnectOption... clientConnectOptions) {
            return clientConnectOptions(List.of(clientConnectOptions));
        }
        @CustomType.Setter
        public Builder clientLoginBannerOptions(@Nullable List<GetEndpointClientLoginBannerOption> clientLoginBannerOptions) {
            this.clientLoginBannerOptions = clientLoginBannerOptions;
            return this;
        }
        public Builder clientLoginBannerOptions(GetEndpointClientLoginBannerOption... clientLoginBannerOptions) {
            return clientLoginBannerOptions(List.of(clientLoginBannerOptions));
        }
        @CustomType.Setter
        public Builder clientVpnEndpointId(@Nullable String clientVpnEndpointId) {
            this.clientVpnEndpointId = clientVpnEndpointId;
            return this;
        }
        @CustomType.Setter
        public Builder connectionLogOptions(@Nullable List<GetEndpointConnectionLogOption> connectionLogOptions) {
            this.connectionLogOptions = connectionLogOptions;
            return this;
        }
        public Builder connectionLogOptions(GetEndpointConnectionLogOption... connectionLogOptions) {
            return connectionLogOptions(List.of(connectionLogOptions));
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder dnsName(@Nullable String dnsName) {
            this.dnsName = dnsName;
            return this;
        }
        @CustomType.Setter
        public Builder dnsServers(@Nullable List<String> dnsServers) {
            this.dnsServers = dnsServers;
            return this;
        }
        public Builder dnsServers(String... dnsServers) {
            return dnsServers(List.of(dnsServers));
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetEndpointFilter> filters) {
            this.filters = filters;
            return this;
        }
        public Builder filters(GetEndpointFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder securityGroupIds(@Nullable List<String> securityGroupIds) {
            this.securityGroupIds = securityGroupIds;
            return this;
        }
        public Builder securityGroupIds(String... securityGroupIds) {
            return securityGroupIds(List.of(securityGroupIds));
        }
        @CustomType.Setter
        public Builder selfServicePortal(@Nullable String selfServicePortal) {
            this.selfServicePortal = selfServicePortal;
            return this;
        }
        @CustomType.Setter
        public Builder selfServicePortalUrl(@Nullable String selfServicePortalUrl) {
            this.selfServicePortalUrl = selfServicePortalUrl;
            return this;
        }
        @CustomType.Setter
        public Builder serverCertificateArn(@Nullable String serverCertificateArn) {
            this.serverCertificateArn = serverCertificateArn;
            return this;
        }
        @CustomType.Setter
        public Builder sessionTimeoutHours(@Nullable Integer sessionTimeoutHours) {
            this.sessionTimeoutHours = sessionTimeoutHours;
            return this;
        }
        @CustomType.Setter
        public Builder splitTunnel(@Nullable Boolean splitTunnel) {
            this.splitTunnel = splitTunnel;
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder transportProtocol(@Nullable String transportProtocol) {
            this.transportProtocol = transportProtocol;
            return this;
        }
        @CustomType.Setter
        public Builder vpcId(@Nullable String vpcId) {
            this.vpcId = vpcId;
            return this;
        }
        @CustomType.Setter
        public Builder vpnPort(@Nullable Integer vpnPort) {
            this.vpnPort = vpnPort;
            return this;
        }
        public GetEndpointResult build() {
            final var o = new GetEndpointResult();
            o.arn = arn;
            o.authenticationOptions = authenticationOptions;
            o.clientCidrBlock = clientCidrBlock;
            o.clientConnectOptions = clientConnectOptions;
            o.clientLoginBannerOptions = clientLoginBannerOptions;
            o.clientVpnEndpointId = clientVpnEndpointId;
            o.connectionLogOptions = connectionLogOptions;
            o.description = description;
            o.dnsName = dnsName;
            o.dnsServers = dnsServers;
            o.filters = filters;
            o.id = id;
            o.securityGroupIds = securityGroupIds;
            o.selfServicePortal = selfServicePortal;
            o.selfServicePortalUrl = selfServicePortalUrl;
            o.serverCertificateArn = serverCertificateArn;
            o.sessionTimeoutHours = sessionTimeoutHours;
            o.splitTunnel = splitTunnel;
            o.tags = tags;
            o.transportProtocol = transportProtocol;
            o.vpcId = vpcId;
            o.vpnPort = vpnPort;
            return o;
        }
    }
}
