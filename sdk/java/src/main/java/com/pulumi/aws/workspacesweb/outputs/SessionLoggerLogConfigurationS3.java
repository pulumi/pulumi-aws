// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.workspacesweb.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class SessionLoggerLogConfigurationS3 {
    /**
     * @return S3 bucket name where logs are delivered.
     * 
     */
    private String bucket;
    /**
     * @return Expected bucket owner of the target S3 bucket.
     * 
     */
    private @Nullable String bucketOwner;
    /**
     * @return Folder structure that defines the organizational structure for log files in S3. Valid values: `FlatStructure`, `DateBasedStructure`.
     * 
     */
    private String folderStructure;
    /**
     * @return S3 path prefix that determines where log files are stored.
     * 
     */
    private @Nullable String keyPrefix;
    /**
     * @return Format of the log file written to S3. Valid values: `Json`, `Parquet`.
     * 
     */
    private String logFileFormat;

    private SessionLoggerLogConfigurationS3() {}
    /**
     * @return S3 bucket name where logs are delivered.
     * 
     */
    public String bucket() {
        return this.bucket;
    }
    /**
     * @return Expected bucket owner of the target S3 bucket.
     * 
     */
    public Optional<String> bucketOwner() {
        return Optional.ofNullable(this.bucketOwner);
    }
    /**
     * @return Folder structure that defines the organizational structure for log files in S3. Valid values: `FlatStructure`, `DateBasedStructure`.
     * 
     */
    public String folderStructure() {
        return this.folderStructure;
    }
    /**
     * @return S3 path prefix that determines where log files are stored.
     * 
     */
    public Optional<String> keyPrefix() {
        return Optional.ofNullable(this.keyPrefix);
    }
    /**
     * @return Format of the log file written to S3. Valid values: `Json`, `Parquet`.
     * 
     */
    public String logFileFormat() {
        return this.logFileFormat;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SessionLoggerLogConfigurationS3 defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String bucket;
        private @Nullable String bucketOwner;
        private String folderStructure;
        private @Nullable String keyPrefix;
        private String logFileFormat;
        public Builder() {}
        public Builder(SessionLoggerLogConfigurationS3 defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bucket = defaults.bucket;
    	      this.bucketOwner = defaults.bucketOwner;
    	      this.folderStructure = defaults.folderStructure;
    	      this.keyPrefix = defaults.keyPrefix;
    	      this.logFileFormat = defaults.logFileFormat;
        }

        @CustomType.Setter
        public Builder bucket(String bucket) {
            if (bucket == null) {
              throw new MissingRequiredPropertyException("SessionLoggerLogConfigurationS3", "bucket");
            }
            this.bucket = bucket;
            return this;
        }
        @CustomType.Setter
        public Builder bucketOwner(@Nullable String bucketOwner) {

            this.bucketOwner = bucketOwner;
            return this;
        }
        @CustomType.Setter
        public Builder folderStructure(String folderStructure) {
            if (folderStructure == null) {
              throw new MissingRequiredPropertyException("SessionLoggerLogConfigurationS3", "folderStructure");
            }
            this.folderStructure = folderStructure;
            return this;
        }
        @CustomType.Setter
        public Builder keyPrefix(@Nullable String keyPrefix) {

            this.keyPrefix = keyPrefix;
            return this;
        }
        @CustomType.Setter
        public Builder logFileFormat(String logFileFormat) {
            if (logFileFormat == null) {
              throw new MissingRequiredPropertyException("SessionLoggerLogConfigurationS3", "logFileFormat");
            }
            this.logFileFormat = logFileFormat;
            return this;
        }
        public SessionLoggerLogConfigurationS3 build() {
            final var _resultValue = new SessionLoggerLogConfigurationS3();
            _resultValue.bucket = bucket;
            _resultValue.bucketOwner = bucketOwner;
            _resultValue.folderStructure = folderStructure;
            _resultValue.keyPrefix = keyPrefix;
            _resultValue.logFileFormat = logFileFormat;
            return _resultValue;
        }
    }
}
