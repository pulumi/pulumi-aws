// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.apigateway;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MethodResponseArgs extends com.pulumi.resources.ResourceArgs {

    public static final MethodResponseArgs Empty = new MethodResponseArgs();

    @Import(name="httpMethod", required=true)
    private Output<String> httpMethod;

    public Output<String> httpMethod() {
        return this.httpMethod;
    }

    @Import(name="resourceId", required=true)
    private Output<String> resourceId;

    public Output<String> resourceId() {
        return this.resourceId;
    }

    @Import(name="responseModels")
    private @Nullable Output<Map<String,String>> responseModels;

    public Optional<Output<Map<String,String>>> responseModels() {
        return Optional.ofNullable(this.responseModels);
    }

    @Import(name="responseParameters")
    private @Nullable Output<Map<String,Boolean>> responseParameters;

    public Optional<Output<Map<String,Boolean>>> responseParameters() {
        return Optional.ofNullable(this.responseParameters);
    }

    @Import(name="restApi", required=true)
    private Output<String> restApi;

    public Output<String> restApi() {
        return this.restApi;
    }

    @Import(name="statusCode", required=true)
    private Output<String> statusCode;

    public Output<String> statusCode() {
        return this.statusCode;
    }

    private MethodResponseArgs() {}

    private MethodResponseArgs(MethodResponseArgs $) {
        this.httpMethod = $.httpMethod;
        this.resourceId = $.resourceId;
        this.responseModels = $.responseModels;
        this.responseParameters = $.responseParameters;
        this.restApi = $.restApi;
        this.statusCode = $.statusCode;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MethodResponseArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MethodResponseArgs $;

        public Builder() {
            $ = new MethodResponseArgs();
        }

        public Builder(MethodResponseArgs defaults) {
            $ = new MethodResponseArgs(Objects.requireNonNull(defaults));
        }

        public Builder httpMethod(Output<String> httpMethod) {
            $.httpMethod = httpMethod;
            return this;
        }

        public Builder httpMethod(String httpMethod) {
            return httpMethod(Output.of(httpMethod));
        }

        public Builder resourceId(Output<String> resourceId) {
            $.resourceId = resourceId;
            return this;
        }

        public Builder resourceId(String resourceId) {
            return resourceId(Output.of(resourceId));
        }

        public Builder responseModels(@Nullable Output<Map<String,String>> responseModels) {
            $.responseModels = responseModels;
            return this;
        }

        public Builder responseModels(Map<String,String> responseModels) {
            return responseModels(Output.of(responseModels));
        }

        public Builder responseParameters(@Nullable Output<Map<String,Boolean>> responseParameters) {
            $.responseParameters = responseParameters;
            return this;
        }

        public Builder responseParameters(Map<String,Boolean> responseParameters) {
            return responseParameters(Output.of(responseParameters));
        }

        public Builder restApi(Output<String> restApi) {
            $.restApi = restApi;
            return this;
        }

        public Builder restApi(String restApi) {
            return restApi(Output.of(restApi));
        }

        public Builder statusCode(Output<String> statusCode) {
            $.statusCode = statusCode;
            return this;
        }

        public Builder statusCode(String statusCode) {
            return statusCode(Output.of(statusCode));
        }

        public MethodResponseArgs build() {
            $.httpMethod = Objects.requireNonNull($.httpMethod, "expected parameter 'httpMethod' to be non-null");
            $.resourceId = Objects.requireNonNull($.resourceId, "expected parameter 'resourceId' to be non-null");
            $.restApi = Objects.requireNonNull($.restApi, "expected parameter 'restApi' to be non-null");
            $.statusCode = Objects.requireNonNull($.statusCode, "expected parameter 'statusCode' to be non-null");
            return $;
        }
    }

}
