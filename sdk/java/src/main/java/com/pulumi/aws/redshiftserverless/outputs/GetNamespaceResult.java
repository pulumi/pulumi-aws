// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.redshiftserverless.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetNamespaceResult {
    /**
     * @return The username of the administrator for the first database created in the namespace.
     * 
     */
    private String adminUsername;
    /**
     * @return Amazon Resource Name (ARN) of the Redshift Serverless Namespace.
     * 
     */
    private String arn;
    /**
     * @return The name of the first database created in the namespace.
     * 
     */
    private String dbName;
    /**
     * @return The Amazon Resource Name (ARN) of the IAM role to set as a default in the namespace. When specifying `default_iam_role_arn`, it also must be part of `iam_roles`.
     * 
     */
    private String defaultIamRoleArn;
    /**
     * @return A list of IAM roles to associate with the namespace.
     * 
     */
    private List<String> iamRoles;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The ARN of the Amazon Web Services Key Management Service key used to encrypt your data.
     * 
     */
    private String kmsKeyId;
    /**
     * @return The types of logs the namespace can export. Available export types are `userlog`, `connectionlog`, and `useractivitylog`.
     * 
     */
    private List<String> logExports;
    /**
     * @return The Redshift Namespace ID.
     * 
     */
    private String namespaceId;
    private String namespaceName;

    private GetNamespaceResult() {}
    /**
     * @return The username of the administrator for the first database created in the namespace.
     * 
     */
    public String adminUsername() {
        return this.adminUsername;
    }
    /**
     * @return Amazon Resource Name (ARN) of the Redshift Serverless Namespace.
     * 
     */
    public String arn() {
        return this.arn;
    }
    /**
     * @return The name of the first database created in the namespace.
     * 
     */
    public String dbName() {
        return this.dbName;
    }
    /**
     * @return The Amazon Resource Name (ARN) of the IAM role to set as a default in the namespace. When specifying `default_iam_role_arn`, it also must be part of `iam_roles`.
     * 
     */
    public String defaultIamRoleArn() {
        return this.defaultIamRoleArn;
    }
    /**
     * @return A list of IAM roles to associate with the namespace.
     * 
     */
    public List<String> iamRoles() {
        return this.iamRoles;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The ARN of the Amazon Web Services Key Management Service key used to encrypt your data.
     * 
     */
    public String kmsKeyId() {
        return this.kmsKeyId;
    }
    /**
     * @return The types of logs the namespace can export. Available export types are `userlog`, `connectionlog`, and `useractivitylog`.
     * 
     */
    public List<String> logExports() {
        return this.logExports;
    }
    /**
     * @return The Redshift Namespace ID.
     * 
     */
    public String namespaceId() {
        return this.namespaceId;
    }
    public String namespaceName() {
        return this.namespaceName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNamespaceResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String adminUsername;
        private String arn;
        private String dbName;
        private String defaultIamRoleArn;
        private List<String> iamRoles;
        private String id;
        private String kmsKeyId;
        private List<String> logExports;
        private String namespaceId;
        private String namespaceName;
        public Builder() {}
        public Builder(GetNamespaceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.adminUsername = defaults.adminUsername;
    	      this.arn = defaults.arn;
    	      this.dbName = defaults.dbName;
    	      this.defaultIamRoleArn = defaults.defaultIamRoleArn;
    	      this.iamRoles = defaults.iamRoles;
    	      this.id = defaults.id;
    	      this.kmsKeyId = defaults.kmsKeyId;
    	      this.logExports = defaults.logExports;
    	      this.namespaceId = defaults.namespaceId;
    	      this.namespaceName = defaults.namespaceName;
        }

        @CustomType.Setter
        public Builder adminUsername(String adminUsername) {
            if (adminUsername == null) {
              throw new MissingRequiredPropertyException("GetNamespaceResult", "adminUsername");
            }
            this.adminUsername = adminUsername;
            return this;
        }
        @CustomType.Setter
        public Builder arn(String arn) {
            if (arn == null) {
              throw new MissingRequiredPropertyException("GetNamespaceResult", "arn");
            }
            this.arn = arn;
            return this;
        }
        @CustomType.Setter
        public Builder dbName(String dbName) {
            if (dbName == null) {
              throw new MissingRequiredPropertyException("GetNamespaceResult", "dbName");
            }
            this.dbName = dbName;
            return this;
        }
        @CustomType.Setter
        public Builder defaultIamRoleArn(String defaultIamRoleArn) {
            if (defaultIamRoleArn == null) {
              throw new MissingRequiredPropertyException("GetNamespaceResult", "defaultIamRoleArn");
            }
            this.defaultIamRoleArn = defaultIamRoleArn;
            return this;
        }
        @CustomType.Setter
        public Builder iamRoles(List<String> iamRoles) {
            if (iamRoles == null) {
              throw new MissingRequiredPropertyException("GetNamespaceResult", "iamRoles");
            }
            this.iamRoles = iamRoles;
            return this;
        }
        public Builder iamRoles(String... iamRoles) {
            return iamRoles(List.of(iamRoles));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetNamespaceResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder kmsKeyId(String kmsKeyId) {
            if (kmsKeyId == null) {
              throw new MissingRequiredPropertyException("GetNamespaceResult", "kmsKeyId");
            }
            this.kmsKeyId = kmsKeyId;
            return this;
        }
        @CustomType.Setter
        public Builder logExports(List<String> logExports) {
            if (logExports == null) {
              throw new MissingRequiredPropertyException("GetNamespaceResult", "logExports");
            }
            this.logExports = logExports;
            return this;
        }
        public Builder logExports(String... logExports) {
            return logExports(List.of(logExports));
        }
        @CustomType.Setter
        public Builder namespaceId(String namespaceId) {
            if (namespaceId == null) {
              throw new MissingRequiredPropertyException("GetNamespaceResult", "namespaceId");
            }
            this.namespaceId = namespaceId;
            return this;
        }
        @CustomType.Setter
        public Builder namespaceName(String namespaceName) {
            if (namespaceName == null) {
              throw new MissingRequiredPropertyException("GetNamespaceResult", "namespaceName");
            }
            this.namespaceName = namespaceName;
            return this;
        }
        public GetNamespaceResult build() {
            final var _resultValue = new GetNamespaceResult();
            _resultValue.adminUsername = adminUsername;
            _resultValue.arn = arn;
            _resultValue.dbName = dbName;
            _resultValue.defaultIamRoleArn = defaultIamRoleArn;
            _resultValue.iamRoles = iamRoles;
            _resultValue.id = id;
            _resultValue.kmsKeyId = kmsKeyId;
            _resultValue.logExports = logExports;
            _resultValue.namespaceId = namespaceId;
            _resultValue.namespaceName = namespaceName;
            return _resultValue;
        }
    }
}
