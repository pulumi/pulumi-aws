// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.backup.outputs;

import com.pulumi.aws.backup.outputs.GetPlanRuleCopyAction;
import com.pulumi.aws.backup.outputs.GetPlanRuleLifecycle;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class GetPlanRule {
    private Integer completionWindow;
    private List<GetPlanRuleCopyAction> copyActions;
    private Boolean enableContinuousBackup;
    private List<GetPlanRuleLifecycle> lifecycles;
    private @Nullable Map<String,String> recoveryPointTags;
    private String ruleName;
    private String schedule;
    private Integer startWindow;
    private String targetVaultName;

    private GetPlanRule() {}
    public Integer completionWindow() {
        return this.completionWindow;
    }
    public List<GetPlanRuleCopyAction> copyActions() {
        return this.copyActions;
    }
    public Boolean enableContinuousBackup() {
        return this.enableContinuousBackup;
    }
    public List<GetPlanRuleLifecycle> lifecycles() {
        return this.lifecycles;
    }
    public Map<String,String> recoveryPointTags() {
        return this.recoveryPointTags == null ? Map.of() : this.recoveryPointTags;
    }
    public String ruleName() {
        return this.ruleName;
    }
    public String schedule() {
        return this.schedule;
    }
    public Integer startWindow() {
        return this.startWindow;
    }
    public String targetVaultName() {
        return this.targetVaultName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPlanRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer completionWindow;
        private List<GetPlanRuleCopyAction> copyActions;
        private Boolean enableContinuousBackup;
        private List<GetPlanRuleLifecycle> lifecycles;
        private @Nullable Map<String,String> recoveryPointTags;
        private String ruleName;
        private String schedule;
        private Integer startWindow;
        private String targetVaultName;
        public Builder() {}
        public Builder(GetPlanRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.completionWindow = defaults.completionWindow;
    	      this.copyActions = defaults.copyActions;
    	      this.enableContinuousBackup = defaults.enableContinuousBackup;
    	      this.lifecycles = defaults.lifecycles;
    	      this.recoveryPointTags = defaults.recoveryPointTags;
    	      this.ruleName = defaults.ruleName;
    	      this.schedule = defaults.schedule;
    	      this.startWindow = defaults.startWindow;
    	      this.targetVaultName = defaults.targetVaultName;
        }

        @CustomType.Setter
        public Builder completionWindow(Integer completionWindow) {
            if (completionWindow == null) {
              throw new MissingRequiredPropertyException("GetPlanRule", "completionWindow");
            }
            this.completionWindow = completionWindow;
            return this;
        }
        @CustomType.Setter
        public Builder copyActions(List<GetPlanRuleCopyAction> copyActions) {
            if (copyActions == null) {
              throw new MissingRequiredPropertyException("GetPlanRule", "copyActions");
            }
            this.copyActions = copyActions;
            return this;
        }
        public Builder copyActions(GetPlanRuleCopyAction... copyActions) {
            return copyActions(List.of(copyActions));
        }
        @CustomType.Setter
        public Builder enableContinuousBackup(Boolean enableContinuousBackup) {
            if (enableContinuousBackup == null) {
              throw new MissingRequiredPropertyException("GetPlanRule", "enableContinuousBackup");
            }
            this.enableContinuousBackup = enableContinuousBackup;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycles(List<GetPlanRuleLifecycle> lifecycles) {
            if (lifecycles == null) {
              throw new MissingRequiredPropertyException("GetPlanRule", "lifecycles");
            }
            this.lifecycles = lifecycles;
            return this;
        }
        public Builder lifecycles(GetPlanRuleLifecycle... lifecycles) {
            return lifecycles(List.of(lifecycles));
        }
        @CustomType.Setter
        public Builder recoveryPointTags(@Nullable Map<String,String> recoveryPointTags) {

            this.recoveryPointTags = recoveryPointTags;
            return this;
        }
        @CustomType.Setter
        public Builder ruleName(String ruleName) {
            if (ruleName == null) {
              throw new MissingRequiredPropertyException("GetPlanRule", "ruleName");
            }
            this.ruleName = ruleName;
            return this;
        }
        @CustomType.Setter
        public Builder schedule(String schedule) {
            if (schedule == null) {
              throw new MissingRequiredPropertyException("GetPlanRule", "schedule");
            }
            this.schedule = schedule;
            return this;
        }
        @CustomType.Setter
        public Builder startWindow(Integer startWindow) {
            if (startWindow == null) {
              throw new MissingRequiredPropertyException("GetPlanRule", "startWindow");
            }
            this.startWindow = startWindow;
            return this;
        }
        @CustomType.Setter
        public Builder targetVaultName(String targetVaultName) {
            if (targetVaultName == null) {
              throw new MissingRequiredPropertyException("GetPlanRule", "targetVaultName");
            }
            this.targetVaultName = targetVaultName;
            return this;
        }
        public GetPlanRule build() {
            final var _resultValue = new GetPlanRule();
            _resultValue.completionWindow = completionWindow;
            _resultValue.copyActions = copyActions;
            _resultValue.enableContinuousBackup = enableContinuousBackup;
            _resultValue.lifecycles = lifecycles;
            _resultValue.recoveryPointTags = recoveryPointTags;
            _resultValue.ruleName = ruleName;
            _resultValue.schedule = schedule;
            _resultValue.startWindow = startWindow;
            _resultValue.targetVaultName = targetVaultName;
            return _resultValue;
        }
    }
}
