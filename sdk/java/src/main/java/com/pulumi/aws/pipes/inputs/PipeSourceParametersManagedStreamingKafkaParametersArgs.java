// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.pipes.inputs;

import com.pulumi.aws.pipes.inputs.PipeSourceParametersManagedStreamingKafkaParametersCredentialsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PipeSourceParametersManagedStreamingKafkaParametersArgs extends com.pulumi.resources.ResourceArgs {

    public static final PipeSourceParametersManagedStreamingKafkaParametersArgs Empty = new PipeSourceParametersManagedStreamingKafkaParametersArgs();

    @Import(name="batchSize")
    private @Nullable Output<Integer> batchSize;

    public Optional<Output<Integer>> batchSize() {
        return Optional.ofNullable(this.batchSize);
    }

    @Import(name="consumerGroupId")
    private @Nullable Output<String> consumerGroupId;

    public Optional<Output<String>> consumerGroupId() {
        return Optional.ofNullable(this.consumerGroupId);
    }

    @Import(name="credentials")
    private @Nullable Output<PipeSourceParametersManagedStreamingKafkaParametersCredentialsArgs> credentials;

    public Optional<Output<PipeSourceParametersManagedStreamingKafkaParametersCredentialsArgs>> credentials() {
        return Optional.ofNullable(this.credentials);
    }

    @Import(name="maximumBatchingWindowInSeconds")
    private @Nullable Output<Integer> maximumBatchingWindowInSeconds;

    public Optional<Output<Integer>> maximumBatchingWindowInSeconds() {
        return Optional.ofNullable(this.maximumBatchingWindowInSeconds);
    }

    @Import(name="startingPosition")
    private @Nullable Output<String> startingPosition;

    public Optional<Output<String>> startingPosition() {
        return Optional.ofNullable(this.startingPosition);
    }

    @Import(name="topicName", required=true)
    private Output<String> topicName;

    public Output<String> topicName() {
        return this.topicName;
    }

    private PipeSourceParametersManagedStreamingKafkaParametersArgs() {}

    private PipeSourceParametersManagedStreamingKafkaParametersArgs(PipeSourceParametersManagedStreamingKafkaParametersArgs $) {
        this.batchSize = $.batchSize;
        this.consumerGroupId = $.consumerGroupId;
        this.credentials = $.credentials;
        this.maximumBatchingWindowInSeconds = $.maximumBatchingWindowInSeconds;
        this.startingPosition = $.startingPosition;
        this.topicName = $.topicName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PipeSourceParametersManagedStreamingKafkaParametersArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PipeSourceParametersManagedStreamingKafkaParametersArgs $;

        public Builder() {
            $ = new PipeSourceParametersManagedStreamingKafkaParametersArgs();
        }

        public Builder(PipeSourceParametersManagedStreamingKafkaParametersArgs defaults) {
            $ = new PipeSourceParametersManagedStreamingKafkaParametersArgs(Objects.requireNonNull(defaults));
        }

        public Builder batchSize(@Nullable Output<Integer> batchSize) {
            $.batchSize = batchSize;
            return this;
        }

        public Builder batchSize(Integer batchSize) {
            return batchSize(Output.of(batchSize));
        }

        public Builder consumerGroupId(@Nullable Output<String> consumerGroupId) {
            $.consumerGroupId = consumerGroupId;
            return this;
        }

        public Builder consumerGroupId(String consumerGroupId) {
            return consumerGroupId(Output.of(consumerGroupId));
        }

        public Builder credentials(@Nullable Output<PipeSourceParametersManagedStreamingKafkaParametersCredentialsArgs> credentials) {
            $.credentials = credentials;
            return this;
        }

        public Builder credentials(PipeSourceParametersManagedStreamingKafkaParametersCredentialsArgs credentials) {
            return credentials(Output.of(credentials));
        }

        public Builder maximumBatchingWindowInSeconds(@Nullable Output<Integer> maximumBatchingWindowInSeconds) {
            $.maximumBatchingWindowInSeconds = maximumBatchingWindowInSeconds;
            return this;
        }

        public Builder maximumBatchingWindowInSeconds(Integer maximumBatchingWindowInSeconds) {
            return maximumBatchingWindowInSeconds(Output.of(maximumBatchingWindowInSeconds));
        }

        public Builder startingPosition(@Nullable Output<String> startingPosition) {
            $.startingPosition = startingPosition;
            return this;
        }

        public Builder startingPosition(String startingPosition) {
            return startingPosition(Output.of(startingPosition));
        }

        public Builder topicName(Output<String> topicName) {
            $.topicName = topicName;
            return this;
        }

        public Builder topicName(String topicName) {
            return topicName(Output.of(topicName));
        }

        public PipeSourceParametersManagedStreamingKafkaParametersArgs build() {
            if ($.topicName == null) {
                throw new MissingRequiredPropertyException("PipeSourceParametersManagedStreamingKafkaParametersArgs", "topicName");
            }
            return $;
        }
    }

}
