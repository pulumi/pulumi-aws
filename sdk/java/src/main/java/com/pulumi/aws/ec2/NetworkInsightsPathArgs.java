// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ec2;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NetworkInsightsPathArgs extends com.pulumi.resources.ResourceArgs {

    public static final NetworkInsightsPathArgs Empty = new NetworkInsightsPathArgs();

    /**
     * ID of the resource which is the source of the path. Can be an Instance, Internet Gateway, Network Interface, Transit Gateway, VPC Endpoint, VPC Peering Connection or VPN Gateway.
     * 
     */
    @Import(name="destination", required=true)
    private Output<String> destination;

    /**
     * @return ID of the resource which is the source of the path. Can be an Instance, Internet Gateway, Network Interface, Transit Gateway, VPC Endpoint, VPC Peering Connection or VPN Gateway.
     * 
     */
    public Output<String> destination() {
        return this.destination;
    }

    /**
     * IP address of the destination resource.
     * 
     */
    @Import(name="destinationIp")
    private @Nullable Output<String> destinationIp;

    /**
     * @return IP address of the destination resource.
     * 
     */
    public Optional<Output<String>> destinationIp() {
        return Optional.ofNullable(this.destinationIp);
    }

    /**
     * Destination port to analyze access to.
     * 
     */
    @Import(name="destinationPort")
    private @Nullable Output<Integer> destinationPort;

    /**
     * @return Destination port to analyze access to.
     * 
     */
    public Optional<Output<Integer>> destinationPort() {
        return Optional.ofNullable(this.destinationPort);
    }

    /**
     * Protocol to use for analysis. Valid options are `tcp` or `udp`.
     * 
     */
    @Import(name="protocol", required=true)
    private Output<String> protocol;

    /**
     * @return Protocol to use for analysis. Valid options are `tcp` or `udp`.
     * 
     */
    public Output<String> protocol() {
        return this.protocol;
    }

    /**
     * ID of the resource which is the source of the path. Can be an Instance, Internet Gateway, Network Interface, Transit Gateway, VPC Endpoint, VPC Peering Connection or VPN Gateway.
     * 
     */
    @Import(name="source", required=true)
    private Output<String> source;

    /**
     * @return ID of the resource which is the source of the path. Can be an Instance, Internet Gateway, Network Interface, Transit Gateway, VPC Endpoint, VPC Peering Connection or VPN Gateway.
     * 
     */
    public Output<String> source() {
        return this.source;
    }

    /**
     * IP address of the source resource.
     * 
     */
    @Import(name="sourceIp")
    private @Nullable Output<String> sourceIp;

    /**
     * @return IP address of the source resource.
     * 
     */
    public Optional<Output<String>> sourceIp() {
        return Optional.ofNullable(this.sourceIp);
    }

    /**
     * Map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private NetworkInsightsPathArgs() {}

    private NetworkInsightsPathArgs(NetworkInsightsPathArgs $) {
        this.destination = $.destination;
        this.destinationIp = $.destinationIp;
        this.destinationPort = $.destinationPort;
        this.protocol = $.protocol;
        this.source = $.source;
        this.sourceIp = $.sourceIp;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NetworkInsightsPathArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NetworkInsightsPathArgs $;

        public Builder() {
            $ = new NetworkInsightsPathArgs();
        }

        public Builder(NetworkInsightsPathArgs defaults) {
            $ = new NetworkInsightsPathArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param destination ID of the resource which is the source of the path. Can be an Instance, Internet Gateway, Network Interface, Transit Gateway, VPC Endpoint, VPC Peering Connection or VPN Gateway.
         * 
         * @return builder
         * 
         */
        public Builder destination(Output<String> destination) {
            $.destination = destination;
            return this;
        }

        /**
         * @param destination ID of the resource which is the source of the path. Can be an Instance, Internet Gateway, Network Interface, Transit Gateway, VPC Endpoint, VPC Peering Connection or VPN Gateway.
         * 
         * @return builder
         * 
         */
        public Builder destination(String destination) {
            return destination(Output.of(destination));
        }

        /**
         * @param destinationIp IP address of the destination resource.
         * 
         * @return builder
         * 
         */
        public Builder destinationIp(@Nullable Output<String> destinationIp) {
            $.destinationIp = destinationIp;
            return this;
        }

        /**
         * @param destinationIp IP address of the destination resource.
         * 
         * @return builder
         * 
         */
        public Builder destinationIp(String destinationIp) {
            return destinationIp(Output.of(destinationIp));
        }

        /**
         * @param destinationPort Destination port to analyze access to.
         * 
         * @return builder
         * 
         */
        public Builder destinationPort(@Nullable Output<Integer> destinationPort) {
            $.destinationPort = destinationPort;
            return this;
        }

        /**
         * @param destinationPort Destination port to analyze access to.
         * 
         * @return builder
         * 
         */
        public Builder destinationPort(Integer destinationPort) {
            return destinationPort(Output.of(destinationPort));
        }

        /**
         * @param protocol Protocol to use for analysis. Valid options are `tcp` or `udp`.
         * 
         * @return builder
         * 
         */
        public Builder protocol(Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol Protocol to use for analysis. Valid options are `tcp` or `udp`.
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        /**
         * @param source ID of the resource which is the source of the path. Can be an Instance, Internet Gateway, Network Interface, Transit Gateway, VPC Endpoint, VPC Peering Connection or VPN Gateway.
         * 
         * @return builder
         * 
         */
        public Builder source(Output<String> source) {
            $.source = source;
            return this;
        }

        /**
         * @param source ID of the resource which is the source of the path. Can be an Instance, Internet Gateway, Network Interface, Transit Gateway, VPC Endpoint, VPC Peering Connection or VPN Gateway.
         * 
         * @return builder
         * 
         */
        public Builder source(String source) {
            return source(Output.of(source));
        }

        /**
         * @param sourceIp IP address of the source resource.
         * 
         * @return builder
         * 
         */
        public Builder sourceIp(@Nullable Output<String> sourceIp) {
            $.sourceIp = sourceIp;
            return this;
        }

        /**
         * @param sourceIp IP address of the source resource.
         * 
         * @return builder
         * 
         */
        public Builder sourceIp(String sourceIp) {
            return sourceIp(Output.of(sourceIp));
        }

        /**
         * @param tags Map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public NetworkInsightsPathArgs build() {
            $.destination = Objects.requireNonNull($.destination, "expected parameter 'destination' to be non-null");
            $.protocol = Objects.requireNonNull($.protocol, "expected parameter 'protocol' to be non-null");
            $.source = Objects.requireNonNull($.source, "expected parameter 'source' to be non-null");
            return $;
        }
    }

}
