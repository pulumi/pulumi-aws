// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.lightsail;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class StaticIpAttachmentArgs extends com.pulumi.resources.ResourceArgs {

    public static final StaticIpAttachmentArgs Empty = new StaticIpAttachmentArgs();

    /**
     * Name of the Lightsail instance to attach the IP to.
     * 
     */
    @Import(name="instanceName", required=true)
    private Output<String> instanceName;

    /**
     * @return Name of the Lightsail instance to attach the IP to.
     * 
     */
    public Output<String> instanceName() {
        return this.instanceName;
    }

    /**
     * Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * Name of the allocated static IP.
     * 
     * The following arguments are optional:
     * 
     */
    @Import(name="staticIpName", required=true)
    private Output<String> staticIpName;

    /**
     * @return Name of the allocated static IP.
     * 
     * The following arguments are optional:
     * 
     */
    public Output<String> staticIpName() {
        return this.staticIpName;
    }

    private StaticIpAttachmentArgs() {}

    private StaticIpAttachmentArgs(StaticIpAttachmentArgs $) {
        this.instanceName = $.instanceName;
        this.region = $.region;
        this.staticIpName = $.staticIpName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StaticIpAttachmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StaticIpAttachmentArgs $;

        public Builder() {
            $ = new StaticIpAttachmentArgs();
        }

        public Builder(StaticIpAttachmentArgs defaults) {
            $ = new StaticIpAttachmentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param instanceName Name of the Lightsail instance to attach the IP to.
         * 
         * @return builder
         * 
         */
        public Builder instanceName(Output<String> instanceName) {
            $.instanceName = instanceName;
            return this;
        }

        /**
         * @param instanceName Name of the Lightsail instance to attach the IP to.
         * 
         * @return builder
         * 
         */
        public Builder instanceName(String instanceName) {
            return instanceName(Output.of(instanceName));
        }

        /**
         * @param region Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param staticIpName Name of the allocated static IP.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder staticIpName(Output<String> staticIpName) {
            $.staticIpName = staticIpName;
            return this;
        }

        /**
         * @param staticIpName Name of the allocated static IP.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder staticIpName(String staticIpName) {
            return staticIpName(Output.of(staticIpName));
        }

        public StaticIpAttachmentArgs build() {
            if ($.instanceName == null) {
                throw new MissingRequiredPropertyException("StaticIpAttachmentArgs", "instanceName");
            }
            if ($.staticIpName == null) {
                throw new MissingRequiredPropertyException("StaticIpAttachmentArgs", "staticIpName");
            }
            return $;
        }
    }

}
