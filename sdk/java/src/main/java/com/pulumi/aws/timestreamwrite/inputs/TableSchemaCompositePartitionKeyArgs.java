// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.timestreamwrite.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TableSchemaCompositePartitionKeyArgs extends com.pulumi.resources.ResourceArgs {

    public static final TableSchemaCompositePartitionKeyArgs Empty = new TableSchemaCompositePartitionKeyArgs();

    /**
     * The level of enforcement for the specification of a dimension key in ingested records. Valid values: `REQUIRED`, `OPTIONAL`.
     * 
     */
    @Import(name="enforcementInRecord")
    private @Nullable Output<String> enforcementInRecord;

    /**
     * @return The level of enforcement for the specification of a dimension key in ingested records. Valid values: `REQUIRED`, `OPTIONAL`.
     * 
     */
    public Optional<Output<String>> enforcementInRecord() {
        return Optional.ofNullable(this.enforcementInRecord);
    }

    /**
     * The name of the attribute used for a dimension key.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the attribute used for a dimension key.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The type of the partition key. Valid values: `DIMENSION`, `MEASURE`.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return The type of the partition key. Valid values: `DIMENSION`, `MEASURE`.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private TableSchemaCompositePartitionKeyArgs() {}

    private TableSchemaCompositePartitionKeyArgs(TableSchemaCompositePartitionKeyArgs $) {
        this.enforcementInRecord = $.enforcementInRecord;
        this.name = $.name;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TableSchemaCompositePartitionKeyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TableSchemaCompositePartitionKeyArgs $;

        public Builder() {
            $ = new TableSchemaCompositePartitionKeyArgs();
        }

        public Builder(TableSchemaCompositePartitionKeyArgs defaults) {
            $ = new TableSchemaCompositePartitionKeyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param enforcementInRecord The level of enforcement for the specification of a dimension key in ingested records. Valid values: `REQUIRED`, `OPTIONAL`.
         * 
         * @return builder
         * 
         */
        public Builder enforcementInRecord(@Nullable Output<String> enforcementInRecord) {
            $.enforcementInRecord = enforcementInRecord;
            return this;
        }

        /**
         * @param enforcementInRecord The level of enforcement for the specification of a dimension key in ingested records. Valid values: `REQUIRED`, `OPTIONAL`.
         * 
         * @return builder
         * 
         */
        public Builder enforcementInRecord(String enforcementInRecord) {
            return enforcementInRecord(Output.of(enforcementInRecord));
        }

        /**
         * @param name The name of the attribute used for a dimension key.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the attribute used for a dimension key.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param type The type of the partition key. Valid values: `DIMENSION`, `MEASURE`.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of the partition key. Valid values: `DIMENSION`, `MEASURE`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public TableSchemaCompositePartitionKeyArgs build() {
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
