// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.appstream.outputs;

import com.pulumi.aws.appstream.outputs.GetImageApplication;
import com.pulumi.aws.appstream.outputs.GetImageImagePermission;
import com.pulumi.aws.appstream.outputs.GetImageStateChangeReason;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetImageResult {
    private List<GetImageApplication> applications;
    /**
     * @return Version of the AppStream 2.0 agent to use for instances that are launched from this image. Has a maximum length of 100 characters.
     * 
     */
    private String appstreamAgentVersion;
    /**
     * @return ARN of the image.
     * 
     */
    private String arn;
    /**
     * @return ARN of the image from which the image was created.
     * 
     */
    private String baseImageArn;
    /**
     * @return Time at which this image was created.
     * 
     */
    private String createdTime;
    /**
     * @return Description of image.
     * 
     */
    private String description;
    /**
     * @return Image name to display.
     * 
     */
    private String displayName;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The name of the image builder that was used to created the private image. If the image is sharedthen the value is null.
     * 
     */
    private String imageBuilderName;
    /**
     * @return Boolean to indicate whether an image builder can be launched from this image.
     * * `image error` - Resource error object that describes the error containing the following:
     * 
     */
    private Boolean imageBuilderSupported;
    /**
     * @return List of strings describing the image permissions containing the following:
     * 
     */
    private List<GetImageImagePermission> imagePermissions;
    private @Nullable Boolean mostRecent;
    private String name;
    private @Nullable String nameRegex;
    /**
     * @return Operating system platform of the image. Values will be from: WINDOWS | WINDOWS_SERVER_2016 | WINDOWS_SERVER_2019 | WINDOWS_SERVER_2022 | AMAZON_LINUX2
     * 
     */
    private String platform;
    private String publicBaseImageReleasedDate;
    /**
     * @return Current state of image. Image starts in PENDING state which changes to AVAILABLE if creation passes and FAILED if it fails. Values will be from: PENDING | AVAILABLE | FAILED | COPYING | DELETING | CREATING | IMPORTING.
     * 
     */
    private String state;
    private List<GetImageStateChangeReason> stateChangeReasons;
    private @Nullable String type;

    private GetImageResult() {}
    public List<GetImageApplication> applications() {
        return this.applications;
    }
    /**
     * @return Version of the AppStream 2.0 agent to use for instances that are launched from this image. Has a maximum length of 100 characters.
     * 
     */
    public String appstreamAgentVersion() {
        return this.appstreamAgentVersion;
    }
    /**
     * @return ARN of the image.
     * 
     */
    public String arn() {
        return this.arn;
    }
    /**
     * @return ARN of the image from which the image was created.
     * 
     */
    public String baseImageArn() {
        return this.baseImageArn;
    }
    /**
     * @return Time at which this image was created.
     * 
     */
    public String createdTime() {
        return this.createdTime;
    }
    /**
     * @return Description of image.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Image name to display.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The name of the image builder that was used to created the private image. If the image is sharedthen the value is null.
     * 
     */
    public String imageBuilderName() {
        return this.imageBuilderName;
    }
    /**
     * @return Boolean to indicate whether an image builder can be launched from this image.
     * * `image error` - Resource error object that describes the error containing the following:
     * 
     */
    public Boolean imageBuilderSupported() {
        return this.imageBuilderSupported;
    }
    /**
     * @return List of strings describing the image permissions containing the following:
     * 
     */
    public List<GetImageImagePermission> imagePermissions() {
        return this.imagePermissions;
    }
    public Optional<Boolean> mostRecent() {
        return Optional.ofNullable(this.mostRecent);
    }
    public String name() {
        return this.name;
    }
    public Optional<String> nameRegex() {
        return Optional.ofNullable(this.nameRegex);
    }
    /**
     * @return Operating system platform of the image. Values will be from: WINDOWS | WINDOWS_SERVER_2016 | WINDOWS_SERVER_2019 | WINDOWS_SERVER_2022 | AMAZON_LINUX2
     * 
     */
    public String platform() {
        return this.platform;
    }
    public String publicBaseImageReleasedDate() {
        return this.publicBaseImageReleasedDate;
    }
    /**
     * @return Current state of image. Image starts in PENDING state which changes to AVAILABLE if creation passes and FAILED if it fails. Values will be from: PENDING | AVAILABLE | FAILED | COPYING | DELETING | CREATING | IMPORTING.
     * 
     */
    public String state() {
        return this.state;
    }
    public List<GetImageStateChangeReason> stateChangeReasons() {
        return this.stateChangeReasons;
    }
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetImageResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetImageApplication> applications;
        private String appstreamAgentVersion;
        private String arn;
        private String baseImageArn;
        private String createdTime;
        private String description;
        private String displayName;
        private String id;
        private String imageBuilderName;
        private Boolean imageBuilderSupported;
        private List<GetImageImagePermission> imagePermissions;
        private @Nullable Boolean mostRecent;
        private String name;
        private @Nullable String nameRegex;
        private String platform;
        private String publicBaseImageReleasedDate;
        private String state;
        private List<GetImageStateChangeReason> stateChangeReasons;
        private @Nullable String type;
        public Builder() {}
        public Builder(GetImageResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applications = defaults.applications;
    	      this.appstreamAgentVersion = defaults.appstreamAgentVersion;
    	      this.arn = defaults.arn;
    	      this.baseImageArn = defaults.baseImageArn;
    	      this.createdTime = defaults.createdTime;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.id = defaults.id;
    	      this.imageBuilderName = defaults.imageBuilderName;
    	      this.imageBuilderSupported = defaults.imageBuilderSupported;
    	      this.imagePermissions = defaults.imagePermissions;
    	      this.mostRecent = defaults.mostRecent;
    	      this.name = defaults.name;
    	      this.nameRegex = defaults.nameRegex;
    	      this.platform = defaults.platform;
    	      this.publicBaseImageReleasedDate = defaults.publicBaseImageReleasedDate;
    	      this.state = defaults.state;
    	      this.stateChangeReasons = defaults.stateChangeReasons;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder applications(List<GetImageApplication> applications) {
            if (applications == null) {
              throw new MissingRequiredPropertyException("GetImageResult", "applications");
            }
            this.applications = applications;
            return this;
        }
        public Builder applications(GetImageApplication... applications) {
            return applications(List.of(applications));
        }
        @CustomType.Setter
        public Builder appstreamAgentVersion(String appstreamAgentVersion) {
            if (appstreamAgentVersion == null) {
              throw new MissingRequiredPropertyException("GetImageResult", "appstreamAgentVersion");
            }
            this.appstreamAgentVersion = appstreamAgentVersion;
            return this;
        }
        @CustomType.Setter
        public Builder arn(String arn) {
            if (arn == null) {
              throw new MissingRequiredPropertyException("GetImageResult", "arn");
            }
            this.arn = arn;
            return this;
        }
        @CustomType.Setter
        public Builder baseImageArn(String baseImageArn) {
            if (baseImageArn == null) {
              throw new MissingRequiredPropertyException("GetImageResult", "baseImageArn");
            }
            this.baseImageArn = baseImageArn;
            return this;
        }
        @CustomType.Setter
        public Builder createdTime(String createdTime) {
            if (createdTime == null) {
              throw new MissingRequiredPropertyException("GetImageResult", "createdTime");
            }
            this.createdTime = createdTime;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetImageResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetImageResult", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetImageResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder imageBuilderName(String imageBuilderName) {
            if (imageBuilderName == null) {
              throw new MissingRequiredPropertyException("GetImageResult", "imageBuilderName");
            }
            this.imageBuilderName = imageBuilderName;
            return this;
        }
        @CustomType.Setter
        public Builder imageBuilderSupported(Boolean imageBuilderSupported) {
            if (imageBuilderSupported == null) {
              throw new MissingRequiredPropertyException("GetImageResult", "imageBuilderSupported");
            }
            this.imageBuilderSupported = imageBuilderSupported;
            return this;
        }
        @CustomType.Setter
        public Builder imagePermissions(List<GetImageImagePermission> imagePermissions) {
            if (imagePermissions == null) {
              throw new MissingRequiredPropertyException("GetImageResult", "imagePermissions");
            }
            this.imagePermissions = imagePermissions;
            return this;
        }
        public Builder imagePermissions(GetImageImagePermission... imagePermissions) {
            return imagePermissions(List.of(imagePermissions));
        }
        @CustomType.Setter
        public Builder mostRecent(@Nullable Boolean mostRecent) {

            this.mostRecent = mostRecent;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetImageResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder nameRegex(@Nullable String nameRegex) {

            this.nameRegex = nameRegex;
            return this;
        }
        @CustomType.Setter
        public Builder platform(String platform) {
            if (platform == null) {
              throw new MissingRequiredPropertyException("GetImageResult", "platform");
            }
            this.platform = platform;
            return this;
        }
        @CustomType.Setter
        public Builder publicBaseImageReleasedDate(String publicBaseImageReleasedDate) {
            if (publicBaseImageReleasedDate == null) {
              throw new MissingRequiredPropertyException("GetImageResult", "publicBaseImageReleasedDate");
            }
            this.publicBaseImageReleasedDate = publicBaseImageReleasedDate;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetImageResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder stateChangeReasons(List<GetImageStateChangeReason> stateChangeReasons) {
            if (stateChangeReasons == null) {
              throw new MissingRequiredPropertyException("GetImageResult", "stateChangeReasons");
            }
            this.stateChangeReasons = stateChangeReasons;
            return this;
        }
        public Builder stateChangeReasons(GetImageStateChangeReason... stateChangeReasons) {
            return stateChangeReasons(List.of(stateChangeReasons));
        }
        @CustomType.Setter
        public Builder type(@Nullable String type) {

            this.type = type;
            return this;
        }
        public GetImageResult build() {
            final var _resultValue = new GetImageResult();
            _resultValue.applications = applications;
            _resultValue.appstreamAgentVersion = appstreamAgentVersion;
            _resultValue.arn = arn;
            _resultValue.baseImageArn = baseImageArn;
            _resultValue.createdTime = createdTime;
            _resultValue.description = description;
            _resultValue.displayName = displayName;
            _resultValue.id = id;
            _resultValue.imageBuilderName = imageBuilderName;
            _resultValue.imageBuilderSupported = imageBuilderSupported;
            _resultValue.imagePermissions = imagePermissions;
            _resultValue.mostRecent = mostRecent;
            _resultValue.name = name;
            _resultValue.nameRegex = nameRegex;
            _resultValue.platform = platform;
            _resultValue.publicBaseImageReleasedDate = publicBaseImageReleasedDate;
            _resultValue.state = state;
            _resultValue.stateChangeReasons = stateChangeReasons;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
