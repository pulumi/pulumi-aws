// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.batch.outputs;

import com.pulumi.aws.batch.outputs.GetJobQueueComputeEnvironmentOrder;
import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetJobQueueResult {
    /**
     * @return ARN of the job queue.
     * 
     */
    private String arn;
    /**
     * @return The compute environments that are attached to the job queue and the order in
     * which job placement is preferred. Compute environments are selected for job placement in ascending order.
     * * `compute_environment_order.#.order` - The order of the compute environment.
     * * `compute_environment_order.#.compute_environment` - The ARN of the compute environment.
     * 
     */
    private List<GetJobQueueComputeEnvironmentOrder> computeEnvironmentOrders;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String name;
    /**
     * @return Priority of the job queue. Job queues with a higher priority are evaluated first when
     * associated with the same compute environment.
     * 
     */
    private Integer priority;
    /**
     * @return The ARN of the fair share scheduling policy. If this attribute has a value, the job queue uses a fair share scheduling policy. If this attribute does not have a value, the job queue uses a first in, first out (FIFO) scheduling policy.
     * 
     */
    private String schedulingPolicyArn;
    /**
     * @return Describes the ability of the queue to accept new jobs (for example, `ENABLED` or `DISABLED`).
     * 
     */
    private String state;
    /**
     * @return Current status of the job queue (for example, `CREATING` or `VALID`).
     * 
     */
    private String status;
    /**
     * @return Short, human-readable string to provide additional details about the current status
     * of the job queue.
     * 
     */
    private String statusReason;
    /**
     * @return Key-value map of resource tags
     * 
     */
    private Map<String,String> tags;

    private GetJobQueueResult() {}
    /**
     * @return ARN of the job queue.
     * 
     */
    public String arn() {
        return this.arn;
    }
    /**
     * @return The compute environments that are attached to the job queue and the order in
     * which job placement is preferred. Compute environments are selected for job placement in ascending order.
     * * `compute_environment_order.#.order` - The order of the compute environment.
     * * `compute_environment_order.#.compute_environment` - The ARN of the compute environment.
     * 
     */
    public List<GetJobQueueComputeEnvironmentOrder> computeEnvironmentOrders() {
        return this.computeEnvironmentOrders;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String name() {
        return this.name;
    }
    /**
     * @return Priority of the job queue. Job queues with a higher priority are evaluated first when
     * associated with the same compute environment.
     * 
     */
    public Integer priority() {
        return this.priority;
    }
    /**
     * @return The ARN of the fair share scheduling policy. If this attribute has a value, the job queue uses a fair share scheduling policy. If this attribute does not have a value, the job queue uses a first in, first out (FIFO) scheduling policy.
     * 
     */
    public String schedulingPolicyArn() {
        return this.schedulingPolicyArn;
    }
    /**
     * @return Describes the ability of the queue to accept new jobs (for example, `ENABLED` or `DISABLED`).
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Current status of the job queue (for example, `CREATING` or `VALID`).
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return Short, human-readable string to provide additional details about the current status
     * of the job queue.
     * 
     */
    public String statusReason() {
        return this.statusReason;
    }
    /**
     * @return Key-value map of resource tags
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetJobQueueResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String arn;
        private List<GetJobQueueComputeEnvironmentOrder> computeEnvironmentOrders;
        private String id;
        private String name;
        private Integer priority;
        private String schedulingPolicyArn;
        private String state;
        private String status;
        private String statusReason;
        private Map<String,String> tags;
        public Builder() {}
        public Builder(GetJobQueueResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.computeEnvironmentOrders = defaults.computeEnvironmentOrders;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.priority = defaults.priority;
    	      this.schedulingPolicyArn = defaults.schedulingPolicyArn;
    	      this.state = defaults.state;
    	      this.status = defaults.status;
    	      this.statusReason = defaults.statusReason;
    	      this.tags = defaults.tags;
        }

        @CustomType.Setter
        public Builder arn(String arn) {
            this.arn = Objects.requireNonNull(arn);
            return this;
        }
        @CustomType.Setter
        public Builder computeEnvironmentOrders(List<GetJobQueueComputeEnvironmentOrder> computeEnvironmentOrders) {
            this.computeEnvironmentOrders = Objects.requireNonNull(computeEnvironmentOrders);
            return this;
        }
        public Builder computeEnvironmentOrders(GetJobQueueComputeEnvironmentOrder... computeEnvironmentOrders) {
            return computeEnvironmentOrders(List.of(computeEnvironmentOrders));
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder priority(Integer priority) {
            this.priority = Objects.requireNonNull(priority);
            return this;
        }
        @CustomType.Setter
        public Builder schedulingPolicyArn(String schedulingPolicyArn) {
            this.schedulingPolicyArn = Objects.requireNonNull(schedulingPolicyArn);
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        @CustomType.Setter
        public Builder statusReason(String statusReason) {
            this.statusReason = Objects.requireNonNull(statusReason);
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        public GetJobQueueResult build() {
            final var o = new GetJobQueueResult();
            o.arn = arn;
            o.computeEnvironmentOrders = computeEnvironmentOrders;
            o.id = id;
            o.name = name;
            o.priority = priority;
            o.schedulingPolicyArn = schedulingPolicyArn;
            o.state = state;
            o.status = status;
            o.statusReason = statusReason;
            o.tags = tags;
            return o;
        }
    }
}
