// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.lakeformation.outputs;

import com.pulumi.aws.lakeformation.outputs.GetDataLakeSettingsCreateDatabaseDefaultPermission;
import com.pulumi.aws.lakeformation.outputs.GetDataLakeSettingsCreateTableDefaultPermission;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDataLakeSettingsResult {
    /**
     * @return List of ARNs of AWS Lake Formation principals (IAM users or roles).
     * 
     */
    private List<String> admins;
    /**
     * @return Whether to allow Amazon EMR clusters to access data managed by Lake Formation.
     * 
     */
    private Boolean allowExternalDataFiltering;
    /**
     * @return Lake Formation relies on a privileged process secured by Amazon EMR or the third party integrator to tag the user&#39;s role while assuming it.
     * 
     */
    private List<String> authorizedSessionTagValueLists;
    private @Nullable String catalogId;
    /**
     * @return Up to three configuration blocks of principal permissions for default create database permissions. Detailed below.
     * 
     */
    private List<GetDataLakeSettingsCreateDatabaseDefaultPermission> createDatabaseDefaultPermissions;
    /**
     * @return Up to three configuration blocks of principal permissions for default create table permissions. Detailed below.
     * 
     */
    private List<GetDataLakeSettingsCreateTableDefaultPermission> createTableDefaultPermissions;
    /**
     * @return A list of the account IDs of Amazon Web Services accounts with Amazon EMR clusters that are to perform data filtering.
     * 
     */
    private List<String> externalDataFilteringAllowLists;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return List of ARNs of AWS Lake Formation principals (IAM users or roles) with only view access to the resources.
     * 
     */
    private List<String> readOnlyAdmins;
    /**
     * @return List of the resource-owning account IDs that the caller&#39;s account can use to share their user access details (user ARNs).
     * 
     */
    private List<String> trustedResourceOwners;

    private GetDataLakeSettingsResult() {}
    /**
     * @return List of ARNs of AWS Lake Formation principals (IAM users or roles).
     * 
     */
    public List<String> admins() {
        return this.admins;
    }
    /**
     * @return Whether to allow Amazon EMR clusters to access data managed by Lake Formation.
     * 
     */
    public Boolean allowExternalDataFiltering() {
        return this.allowExternalDataFiltering;
    }
    /**
     * @return Lake Formation relies on a privileged process secured by Amazon EMR or the third party integrator to tag the user&#39;s role while assuming it.
     * 
     */
    public List<String> authorizedSessionTagValueLists() {
        return this.authorizedSessionTagValueLists;
    }
    public Optional<String> catalogId() {
        return Optional.ofNullable(this.catalogId);
    }
    /**
     * @return Up to three configuration blocks of principal permissions for default create database permissions. Detailed below.
     * 
     */
    public List<GetDataLakeSettingsCreateDatabaseDefaultPermission> createDatabaseDefaultPermissions() {
        return this.createDatabaseDefaultPermissions;
    }
    /**
     * @return Up to three configuration blocks of principal permissions for default create table permissions. Detailed below.
     * 
     */
    public List<GetDataLakeSettingsCreateTableDefaultPermission> createTableDefaultPermissions() {
        return this.createTableDefaultPermissions;
    }
    /**
     * @return A list of the account IDs of Amazon Web Services accounts with Amazon EMR clusters that are to perform data filtering.
     * 
     */
    public List<String> externalDataFilteringAllowLists() {
        return this.externalDataFilteringAllowLists;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return List of ARNs of AWS Lake Formation principals (IAM users or roles) with only view access to the resources.
     * 
     */
    public List<String> readOnlyAdmins() {
        return this.readOnlyAdmins;
    }
    /**
     * @return List of the resource-owning account IDs that the caller&#39;s account can use to share their user access details (user ARNs).
     * 
     */
    public List<String> trustedResourceOwners() {
        return this.trustedResourceOwners;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDataLakeSettingsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> admins;
        private Boolean allowExternalDataFiltering;
        private List<String> authorizedSessionTagValueLists;
        private @Nullable String catalogId;
        private List<GetDataLakeSettingsCreateDatabaseDefaultPermission> createDatabaseDefaultPermissions;
        private List<GetDataLakeSettingsCreateTableDefaultPermission> createTableDefaultPermissions;
        private List<String> externalDataFilteringAllowLists;
        private String id;
        private List<String> readOnlyAdmins;
        private List<String> trustedResourceOwners;
        public Builder() {}
        public Builder(GetDataLakeSettingsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.admins = defaults.admins;
    	      this.allowExternalDataFiltering = defaults.allowExternalDataFiltering;
    	      this.authorizedSessionTagValueLists = defaults.authorizedSessionTagValueLists;
    	      this.catalogId = defaults.catalogId;
    	      this.createDatabaseDefaultPermissions = defaults.createDatabaseDefaultPermissions;
    	      this.createTableDefaultPermissions = defaults.createTableDefaultPermissions;
    	      this.externalDataFilteringAllowLists = defaults.externalDataFilteringAllowLists;
    	      this.id = defaults.id;
    	      this.readOnlyAdmins = defaults.readOnlyAdmins;
    	      this.trustedResourceOwners = defaults.trustedResourceOwners;
        }

        @CustomType.Setter
        public Builder admins(List<String> admins) {
            this.admins = Objects.requireNonNull(admins);
            return this;
        }
        public Builder admins(String... admins) {
            return admins(List.of(admins));
        }
        @CustomType.Setter
        public Builder allowExternalDataFiltering(Boolean allowExternalDataFiltering) {
            this.allowExternalDataFiltering = Objects.requireNonNull(allowExternalDataFiltering);
            return this;
        }
        @CustomType.Setter
        public Builder authorizedSessionTagValueLists(List<String> authorizedSessionTagValueLists) {
            this.authorizedSessionTagValueLists = Objects.requireNonNull(authorizedSessionTagValueLists);
            return this;
        }
        public Builder authorizedSessionTagValueLists(String... authorizedSessionTagValueLists) {
            return authorizedSessionTagValueLists(List.of(authorizedSessionTagValueLists));
        }
        @CustomType.Setter
        public Builder catalogId(@Nullable String catalogId) {
            this.catalogId = catalogId;
            return this;
        }
        @CustomType.Setter
        public Builder createDatabaseDefaultPermissions(List<GetDataLakeSettingsCreateDatabaseDefaultPermission> createDatabaseDefaultPermissions) {
            this.createDatabaseDefaultPermissions = Objects.requireNonNull(createDatabaseDefaultPermissions);
            return this;
        }
        public Builder createDatabaseDefaultPermissions(GetDataLakeSettingsCreateDatabaseDefaultPermission... createDatabaseDefaultPermissions) {
            return createDatabaseDefaultPermissions(List.of(createDatabaseDefaultPermissions));
        }
        @CustomType.Setter
        public Builder createTableDefaultPermissions(List<GetDataLakeSettingsCreateTableDefaultPermission> createTableDefaultPermissions) {
            this.createTableDefaultPermissions = Objects.requireNonNull(createTableDefaultPermissions);
            return this;
        }
        public Builder createTableDefaultPermissions(GetDataLakeSettingsCreateTableDefaultPermission... createTableDefaultPermissions) {
            return createTableDefaultPermissions(List.of(createTableDefaultPermissions));
        }
        @CustomType.Setter
        public Builder externalDataFilteringAllowLists(List<String> externalDataFilteringAllowLists) {
            this.externalDataFilteringAllowLists = Objects.requireNonNull(externalDataFilteringAllowLists);
            return this;
        }
        public Builder externalDataFilteringAllowLists(String... externalDataFilteringAllowLists) {
            return externalDataFilteringAllowLists(List.of(externalDataFilteringAllowLists));
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder readOnlyAdmins(List<String> readOnlyAdmins) {
            this.readOnlyAdmins = Objects.requireNonNull(readOnlyAdmins);
            return this;
        }
        public Builder readOnlyAdmins(String... readOnlyAdmins) {
            return readOnlyAdmins(List.of(readOnlyAdmins));
        }
        @CustomType.Setter
        public Builder trustedResourceOwners(List<String> trustedResourceOwners) {
            this.trustedResourceOwners = Objects.requireNonNull(trustedResourceOwners);
            return this;
        }
        public Builder trustedResourceOwners(String... trustedResourceOwners) {
            return trustedResourceOwners(List.of(trustedResourceOwners));
        }
        public GetDataLakeSettingsResult build() {
            final var _resultValue = new GetDataLakeSettingsResult();
            _resultValue.admins = admins;
            _resultValue.allowExternalDataFiltering = allowExternalDataFiltering;
            _resultValue.authorizedSessionTagValueLists = authorizedSessionTagValueLists;
            _resultValue.catalogId = catalogId;
            _resultValue.createDatabaseDefaultPermissions = createDatabaseDefaultPermissions;
            _resultValue.createTableDefaultPermissions = createTableDefaultPermissions;
            _resultValue.externalDataFilteringAllowLists = externalDataFilteringAllowLists;
            _resultValue.id = id;
            _resultValue.readOnlyAdmins = readOnlyAdmins;
            _resultValue.trustedResourceOwners = trustedResourceOwners;
            return _resultValue;
        }
    }
}
