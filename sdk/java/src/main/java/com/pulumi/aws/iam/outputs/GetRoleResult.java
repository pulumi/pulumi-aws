// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.iam.outputs;

import com.pulumi.aws.iam.outputs.GetRoleRoleLastUsed;
import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetRoleResult {
    /**
     * @return ARN of the role.
     * 
     */
    private @Nullable String arn;
    /**
     * @return Policy document associated with the role.
     * 
     */
    private @Nullable String assumeRolePolicy;
    /**
     * @return Creation date of the role in RFC 3339 format.
     * 
     */
    private @Nullable String createDate;
    /**
     * @return Description for the role.
     * 
     */
    private @Nullable String description;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private @Nullable String id;
    /**
     * @return Maximum session duration.
     * 
     */
    private @Nullable Integer maxSessionDuration;
    private String name;
    /**
     * @return Path to the role.
     * 
     */
    private @Nullable String path;
    /**
     * @return The ARN of the policy that is used to set the permissions boundary for the role.
     * 
     */
    private @Nullable String permissionsBoundary;
    /**
     * @return Contains information about the last time that an IAM role was used. See `role_last_used` for details.
     * 
     */
    private @Nullable List<GetRoleRoleLastUsed> roleLastUseds;
    /**
     * @return Tags attached to the role.
     * 
     */
    private @Nullable Map<String,String> tags;
    /**
     * @return Stable and unique string identifying the role.
     * 
     */
    private @Nullable String uniqueId;

    private GetRoleResult() {}
    /**
     * @return ARN of the role.
     * 
     */
    public Optional<String> arn() {
        return Optional.ofNullable(this.arn);
    }
    /**
     * @return Policy document associated with the role.
     * 
     */
    public Optional<String> assumeRolePolicy() {
        return Optional.ofNullable(this.assumeRolePolicy);
    }
    /**
     * @return Creation date of the role in RFC 3339 format.
     * 
     */
    public Optional<String> createDate() {
        return Optional.ofNullable(this.createDate);
    }
    /**
     * @return Description for the role.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Maximum session duration.
     * 
     */
    public Optional<Integer> maxSessionDuration() {
        return Optional.ofNullable(this.maxSessionDuration);
    }
    public String name() {
        return this.name;
    }
    /**
     * @return Path to the role.
     * 
     */
    public Optional<String> path() {
        return Optional.ofNullable(this.path);
    }
    /**
     * @return The ARN of the policy that is used to set the permissions boundary for the role.
     * 
     */
    public Optional<String> permissionsBoundary() {
        return Optional.ofNullable(this.permissionsBoundary);
    }
    /**
     * @return Contains information about the last time that an IAM role was used. See `role_last_used` for details.
     * 
     */
    public List<GetRoleRoleLastUsed> roleLastUseds() {
        return this.roleLastUseds == null ? List.of() : this.roleLastUseds;
    }
    /**
     * @return Tags attached to the role.
     * 
     */
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * @return Stable and unique string identifying the role.
     * 
     */
    public Optional<String> uniqueId() {
        return Optional.ofNullable(this.uniqueId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRoleResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String arn;
        private @Nullable String assumeRolePolicy;
        private @Nullable String createDate;
        private @Nullable String description;
        private @Nullable String id;
        private @Nullable Integer maxSessionDuration;
        private String name;
        private @Nullable String path;
        private @Nullable String permissionsBoundary;
        private @Nullable List<GetRoleRoleLastUsed> roleLastUseds;
        private @Nullable Map<String,String> tags;
        private @Nullable String uniqueId;
        public Builder() {}
        public Builder(GetRoleResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.assumeRolePolicy = defaults.assumeRolePolicy;
    	      this.createDate = defaults.createDate;
    	      this.description = defaults.description;
    	      this.id = defaults.id;
    	      this.maxSessionDuration = defaults.maxSessionDuration;
    	      this.name = defaults.name;
    	      this.path = defaults.path;
    	      this.permissionsBoundary = defaults.permissionsBoundary;
    	      this.roleLastUseds = defaults.roleLastUseds;
    	      this.tags = defaults.tags;
    	      this.uniqueId = defaults.uniqueId;
        }

        @CustomType.Setter
        public Builder arn(@Nullable String arn) {
            this.arn = arn;
            return this;
        }
        @CustomType.Setter
        public Builder assumeRolePolicy(@Nullable String assumeRolePolicy) {
            this.assumeRolePolicy = assumeRolePolicy;
            return this;
        }
        @CustomType.Setter
        public Builder createDate(@Nullable String createDate) {
            this.createDate = createDate;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder maxSessionDuration(@Nullable Integer maxSessionDuration) {
            this.maxSessionDuration = maxSessionDuration;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder path(@Nullable String path) {
            this.path = path;
            return this;
        }
        @CustomType.Setter
        public Builder permissionsBoundary(@Nullable String permissionsBoundary) {
            this.permissionsBoundary = permissionsBoundary;
            return this;
        }
        @CustomType.Setter
        public Builder roleLastUseds(@Nullable List<GetRoleRoleLastUsed> roleLastUseds) {
            this.roleLastUseds = roleLastUseds;
            return this;
        }
        public Builder roleLastUseds(GetRoleRoleLastUsed... roleLastUseds) {
            return roleLastUseds(List.of(roleLastUseds));
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder uniqueId(@Nullable String uniqueId) {
            this.uniqueId = uniqueId;
            return this;
        }
        public GetRoleResult build() {
            final var o = new GetRoleResult();
            o.arn = arn;
            o.assumeRolePolicy = assumeRolePolicy;
            o.createDate = createDate;
            o.description = description;
            o.id = id;
            o.maxSessionDuration = maxSessionDuration;
            o.name = name;
            o.path = path;
            o.permissionsBoundary = permissionsBoundary;
            o.roleLastUseds = roleLastUseds;
            o.tags = tags;
            o.uniqueId = uniqueId;
            return o;
        }
    }
}
