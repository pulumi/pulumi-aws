// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.apigateway;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DomainNameAccessAssociationArgs extends com.pulumi.resources.ResourceArgs {

    public static final DomainNameAccessAssociationArgs Empty = new DomainNameAccessAssociationArgs();

    /**
     * The identifier of the domain name access association source. For a `VPCE`, the value is the VPC endpoint ID.
     * 
     */
    @Import(name="accessAssociationSource", required=true)
    private Output<String> accessAssociationSource;

    /**
     * @return The identifier of the domain name access association source. For a `VPCE`, the value is the VPC endpoint ID.
     * 
     */
    public Output<String> accessAssociationSource() {
        return this.accessAssociationSource;
    }

    /**
     * The type of the domain name access association source. Valid values are `VPCE`.
     * 
     */
    @Import(name="accessAssociationSourceType", required=true)
    private Output<String> accessAssociationSourceType;

    /**
     * @return The type of the domain name access association source. Valid values are `VPCE`.
     * 
     */
    public Output<String> accessAssociationSourceType() {
        return this.accessAssociationSourceType;
    }

    /**
     * The ARN of the domain name.
     * 
     */
    @Import(name="domainNameArn", required=true)
    private Output<String> domainNameArn;

    /**
     * @return The ARN of the domain name.
     * 
     */
    public Output<String> domainNameArn() {
        return this.domainNameArn;
    }

    /**
     * Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private DomainNameAccessAssociationArgs() {}

    private DomainNameAccessAssociationArgs(DomainNameAccessAssociationArgs $) {
        this.accessAssociationSource = $.accessAssociationSource;
        this.accessAssociationSourceType = $.accessAssociationSourceType;
        this.domainNameArn = $.domainNameArn;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DomainNameAccessAssociationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DomainNameAccessAssociationArgs $;

        public Builder() {
            $ = new DomainNameAccessAssociationArgs();
        }

        public Builder(DomainNameAccessAssociationArgs defaults) {
            $ = new DomainNameAccessAssociationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessAssociationSource The identifier of the domain name access association source. For a `VPCE`, the value is the VPC endpoint ID.
         * 
         * @return builder
         * 
         */
        public Builder accessAssociationSource(Output<String> accessAssociationSource) {
            $.accessAssociationSource = accessAssociationSource;
            return this;
        }

        /**
         * @param accessAssociationSource The identifier of the domain name access association source. For a `VPCE`, the value is the VPC endpoint ID.
         * 
         * @return builder
         * 
         */
        public Builder accessAssociationSource(String accessAssociationSource) {
            return accessAssociationSource(Output.of(accessAssociationSource));
        }

        /**
         * @param accessAssociationSourceType The type of the domain name access association source. Valid values are `VPCE`.
         * 
         * @return builder
         * 
         */
        public Builder accessAssociationSourceType(Output<String> accessAssociationSourceType) {
            $.accessAssociationSourceType = accessAssociationSourceType;
            return this;
        }

        /**
         * @param accessAssociationSourceType The type of the domain name access association source. Valid values are `VPCE`.
         * 
         * @return builder
         * 
         */
        public Builder accessAssociationSourceType(String accessAssociationSourceType) {
            return accessAssociationSourceType(Output.of(accessAssociationSourceType));
        }

        /**
         * @param domainNameArn The ARN of the domain name.
         * 
         * @return builder
         * 
         */
        public Builder domainNameArn(Output<String> domainNameArn) {
            $.domainNameArn = domainNameArn;
            return this;
        }

        /**
         * @param domainNameArn The ARN of the domain name.
         * 
         * @return builder
         * 
         */
        public Builder domainNameArn(String domainNameArn) {
            return domainNameArn(Output.of(domainNameArn));
        }

        /**
         * @param tags Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public DomainNameAccessAssociationArgs build() {
            if ($.accessAssociationSource == null) {
                throw new MissingRequiredPropertyException("DomainNameAccessAssociationArgs", "accessAssociationSource");
            }
            if ($.accessAssociationSourceType == null) {
                throw new MissingRequiredPropertyException("DomainNameAccessAssociationArgs", "accessAssociationSourceType");
            }
            if ($.domainNameArn == null) {
                throw new MissingRequiredPropertyException("DomainNameAccessAssociationArgs", "domainNameArn");
            }
            return $;
        }
    }

}
