// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.sagemaker.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetPrebuiltEcrImageResult {
    private @Nullable String dnsSuffix;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private @Nullable String id;
    private @Nullable String imageTag;
    private @Nullable String region;
    /**
     * @return Account ID containing the image. For example, `469771592824`.
     * 
     */
    private @Nullable String registryId;
    /**
     * @return Docker image URL. For example, `341280168497.dkr.ecr.ca-central-1.amazonaws.com/sagemaker-sparkml-serving:2.4`.
     * 
     */
    private @Nullable String registryPath;
    private String repositoryName;

    private GetPrebuiltEcrImageResult() {}
    public Optional<String> dnsSuffix() {
        return Optional.ofNullable(this.dnsSuffix);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    public Optional<String> imageTag() {
        return Optional.ofNullable(this.imageTag);
    }
    public Optional<String> region() {
        return Optional.ofNullable(this.region);
    }
    /**
     * @return Account ID containing the image. For example, `469771592824`.
     * 
     */
    public Optional<String> registryId() {
        return Optional.ofNullable(this.registryId);
    }
    /**
     * @return Docker image URL. For example, `341280168497.dkr.ecr.ca-central-1.amazonaws.com/sagemaker-sparkml-serving:2.4`.
     * 
     */
    public Optional<String> registryPath() {
        return Optional.ofNullable(this.registryPath);
    }
    public String repositoryName() {
        return this.repositoryName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPrebuiltEcrImageResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String dnsSuffix;
        private @Nullable String id;
        private @Nullable String imageTag;
        private @Nullable String region;
        private @Nullable String registryId;
        private @Nullable String registryPath;
        private String repositoryName;
        public Builder() {}
        public Builder(GetPrebuiltEcrImageResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dnsSuffix = defaults.dnsSuffix;
    	      this.id = defaults.id;
    	      this.imageTag = defaults.imageTag;
    	      this.region = defaults.region;
    	      this.registryId = defaults.registryId;
    	      this.registryPath = defaults.registryPath;
    	      this.repositoryName = defaults.repositoryName;
        }

        @CustomType.Setter
        public Builder dnsSuffix(@Nullable String dnsSuffix) {
            this.dnsSuffix = dnsSuffix;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder imageTag(@Nullable String imageTag) {
            this.imageTag = imageTag;
            return this;
        }
        @CustomType.Setter
        public Builder region(@Nullable String region) {
            this.region = region;
            return this;
        }
        @CustomType.Setter
        public Builder registryId(@Nullable String registryId) {
            this.registryId = registryId;
            return this;
        }
        @CustomType.Setter
        public Builder registryPath(@Nullable String registryPath) {
            this.registryPath = registryPath;
            return this;
        }
        @CustomType.Setter
        public Builder repositoryName(String repositoryName) {
            this.repositoryName = Objects.requireNonNull(repositoryName);
            return this;
        }
        public GetPrebuiltEcrImageResult build() {
            final var o = new GetPrebuiltEcrImageResult();
            o.dnsSuffix = dnsSuffix;
            o.id = id;
            o.imageTag = imageTag;
            o.region = region;
            o.registryId = registryId;
            o.registryPath = registryPath;
            o.repositoryName = repositoryName;
            return o;
        }
    }
}
