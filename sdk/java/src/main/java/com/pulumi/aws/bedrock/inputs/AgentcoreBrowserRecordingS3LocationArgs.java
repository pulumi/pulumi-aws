// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.bedrock.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class AgentcoreBrowserRecordingS3LocationArgs extends com.pulumi.resources.ResourceArgs {

    public static final AgentcoreBrowserRecordingS3LocationArgs Empty = new AgentcoreBrowserRecordingS3LocationArgs();

    /**
     * Name of the S3 bucket where recordings are stored.
     * 
     */
    @Import(name="bucket", required=true)
    private Output<String> bucket;

    /**
     * @return Name of the S3 bucket where recordings are stored.
     * 
     */
    public Output<String> bucket() {
        return this.bucket;
    }

    /**
     * S3 key prefix for recording files.
     * 
     */
    @Import(name="prefix", required=true)
    private Output<String> prefix;

    /**
     * @return S3 key prefix for recording files.
     * 
     */
    public Output<String> prefix() {
        return this.prefix;
    }

    private AgentcoreBrowserRecordingS3LocationArgs() {}

    private AgentcoreBrowserRecordingS3LocationArgs(AgentcoreBrowserRecordingS3LocationArgs $) {
        this.bucket = $.bucket;
        this.prefix = $.prefix;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AgentcoreBrowserRecordingS3LocationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AgentcoreBrowserRecordingS3LocationArgs $;

        public Builder() {
            $ = new AgentcoreBrowserRecordingS3LocationArgs();
        }

        public Builder(AgentcoreBrowserRecordingS3LocationArgs defaults) {
            $ = new AgentcoreBrowserRecordingS3LocationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bucket Name of the S3 bucket where recordings are stored.
         * 
         * @return builder
         * 
         */
        public Builder bucket(Output<String> bucket) {
            $.bucket = bucket;
            return this;
        }

        /**
         * @param bucket Name of the S3 bucket where recordings are stored.
         * 
         * @return builder
         * 
         */
        public Builder bucket(String bucket) {
            return bucket(Output.of(bucket));
        }

        /**
         * @param prefix S3 key prefix for recording files.
         * 
         * @return builder
         * 
         */
        public Builder prefix(Output<String> prefix) {
            $.prefix = prefix;
            return this;
        }

        /**
         * @param prefix S3 key prefix for recording files.
         * 
         * @return builder
         * 
         */
        public Builder prefix(String prefix) {
            return prefix(Output.of(prefix));
        }

        public AgentcoreBrowserRecordingS3LocationArgs build() {
            if ($.bucket == null) {
                throw new MissingRequiredPropertyException("AgentcoreBrowserRecordingS3LocationArgs", "bucket");
            }
            if ($.prefix == null) {
                throw new MissingRequiredPropertyException("AgentcoreBrowserRecordingS3LocationArgs", "prefix");
            }
            return $;
        }
    }

}
