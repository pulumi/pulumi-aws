// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.lex.outputs;

import com.pulumi.aws.lex.outputs.V2modelsIntentConfirmationSettingCodeHook;
import com.pulumi.aws.lex.outputs.V2modelsIntentConfirmationSettingConfirmationConditional;
import com.pulumi.aws.lex.outputs.V2modelsIntentConfirmationSettingConfirmationNextStep;
import com.pulumi.aws.lex.outputs.V2modelsIntentConfirmationSettingConfirmationResponse;
import com.pulumi.aws.lex.outputs.V2modelsIntentConfirmationSettingDeclinationConditional;
import com.pulumi.aws.lex.outputs.V2modelsIntentConfirmationSettingDeclinationNextStep;
import com.pulumi.aws.lex.outputs.V2modelsIntentConfirmationSettingDeclinationResponse;
import com.pulumi.aws.lex.outputs.V2modelsIntentConfirmationSettingElicitationCodeHook;
import com.pulumi.aws.lex.outputs.V2modelsIntentConfirmationSettingFailureConditional;
import com.pulumi.aws.lex.outputs.V2modelsIntentConfirmationSettingFailureNextStep;
import com.pulumi.aws.lex.outputs.V2modelsIntentConfirmationSettingFailureResponse;
import com.pulumi.aws.lex.outputs.V2modelsIntentConfirmationSettingPromptSpecification;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class V2modelsIntentConfirmationSetting {
    /**
     * @return Whether the intent&#39;s confirmation is sent to the user. When this field is false, confirmation and declination responses aren&#39;t sent. If the active field isn&#39;t specified, the default is true.
     * 
     */
    private @Nullable Boolean active;
    /**
     * @return Configuration block for the intent&#39;s confirmation step. The dialog code hook is triggered based on these invocation settings when the confirmation next step or declination next step or failure next step is `invoke_dialog_code_hook`.  See `code_hook`.
     * 
     */
    private @Nullable V2modelsIntentConfirmationSettingCodeHook codeHook;
    /**
     * @return Configuration block for conditional branches to evaluate after the intent is closed. See `confirmation_conditional`.
     * 
     */
    private @Nullable V2modelsIntentConfirmationSettingConfirmationConditional confirmationConditional;
    /**
     * @return Configuration block for the next step that the bot executes when the customer confirms the intent. See `confirmation_next_step`.
     * 
     */
    private @Nullable V2modelsIntentConfirmationSettingConfirmationNextStep confirmationNextStep;
    /**
     * @return Configuration block for message groups that Amazon Lex uses to respond the user input. See `confirmation_response`.
     * 
     */
    private @Nullable V2modelsIntentConfirmationSettingConfirmationResponse confirmationResponse;
    /**
     * @return Configuration block for conditional branches to evaluate after the intent is declined. See `declination_conditional`.
     * 
     */
    private @Nullable V2modelsIntentConfirmationSettingDeclinationConditional declinationConditional;
    /**
     * @return Configuration block for the next step that the bot executes when the customer declines the intent. See `declination_next_step`.
     * 
     */
    private @Nullable V2modelsIntentConfirmationSettingDeclinationNextStep declinationNextStep;
    /**
     * @return Configuration block for when the user answers &#34;no&#34; to the question defined in `prompt_specification`, Amazon Lex responds with this response to acknowledge that the intent was canceled. See `declination_response`.
     * 
     */
    private @Nullable V2modelsIntentConfirmationSettingDeclinationResponse declinationResponse;
    /**
     * @return Configuration block for when the code hook is invoked during confirmation prompt retries. See `elicitation_code_hook`.
     * 
     */
    private @Nullable V2modelsIntentConfirmationSettingElicitationCodeHook elicitationCodeHook;
    /**
     * @return Configuration block for conditional branches. Branches are evaluated in the order that they are entered in the list. The first branch with a condition that evaluates to true is executed. The last branch in the list is the default branch. The default branch should not have any condition expression. The default branch is executed if no other branch has a matching condition. See `failure_conditional`.
     * 
     */
    private @Nullable V2modelsIntentConfirmationSettingFailureConditional failureConditional;
    /**
     * @return Configuration block for the next step to take in the conversation if the confirmation step fails. See `failure_next_step`.
     * 
     */
    private @Nullable V2modelsIntentConfirmationSettingFailureNextStep failureNextStep;
    /**
     * @return Configuration block for message groups that Amazon Lex uses to respond the user input. See `failure_response`.
     * 
     */
    private @Nullable V2modelsIntentConfirmationSettingFailureResponse failureResponse;
    /**
     * @return Configuration block for prompting the user to confirm the intent. This question should have a yes or no answer. Amazon Lex uses this prompt to ensure that the user acknowledges that the intent is ready for fulfillment. See `prompt_specification`.
     * 
     */
    private V2modelsIntentConfirmationSettingPromptSpecification promptSpecification;

    private V2modelsIntentConfirmationSetting() {}
    /**
     * @return Whether the intent&#39;s confirmation is sent to the user. When this field is false, confirmation and declination responses aren&#39;t sent. If the active field isn&#39;t specified, the default is true.
     * 
     */
    public Optional<Boolean> active() {
        return Optional.ofNullable(this.active);
    }
    /**
     * @return Configuration block for the intent&#39;s confirmation step. The dialog code hook is triggered based on these invocation settings when the confirmation next step or declination next step or failure next step is `invoke_dialog_code_hook`.  See `code_hook`.
     * 
     */
    public Optional<V2modelsIntentConfirmationSettingCodeHook> codeHook() {
        return Optional.ofNullable(this.codeHook);
    }
    /**
     * @return Configuration block for conditional branches to evaluate after the intent is closed. See `confirmation_conditional`.
     * 
     */
    public Optional<V2modelsIntentConfirmationSettingConfirmationConditional> confirmationConditional() {
        return Optional.ofNullable(this.confirmationConditional);
    }
    /**
     * @return Configuration block for the next step that the bot executes when the customer confirms the intent. See `confirmation_next_step`.
     * 
     */
    public Optional<V2modelsIntentConfirmationSettingConfirmationNextStep> confirmationNextStep() {
        return Optional.ofNullable(this.confirmationNextStep);
    }
    /**
     * @return Configuration block for message groups that Amazon Lex uses to respond the user input. See `confirmation_response`.
     * 
     */
    public Optional<V2modelsIntentConfirmationSettingConfirmationResponse> confirmationResponse() {
        return Optional.ofNullable(this.confirmationResponse);
    }
    /**
     * @return Configuration block for conditional branches to evaluate after the intent is declined. See `declination_conditional`.
     * 
     */
    public Optional<V2modelsIntentConfirmationSettingDeclinationConditional> declinationConditional() {
        return Optional.ofNullable(this.declinationConditional);
    }
    /**
     * @return Configuration block for the next step that the bot executes when the customer declines the intent. See `declination_next_step`.
     * 
     */
    public Optional<V2modelsIntentConfirmationSettingDeclinationNextStep> declinationNextStep() {
        return Optional.ofNullable(this.declinationNextStep);
    }
    /**
     * @return Configuration block for when the user answers &#34;no&#34; to the question defined in `prompt_specification`, Amazon Lex responds with this response to acknowledge that the intent was canceled. See `declination_response`.
     * 
     */
    public Optional<V2modelsIntentConfirmationSettingDeclinationResponse> declinationResponse() {
        return Optional.ofNullable(this.declinationResponse);
    }
    /**
     * @return Configuration block for when the code hook is invoked during confirmation prompt retries. See `elicitation_code_hook`.
     * 
     */
    public Optional<V2modelsIntentConfirmationSettingElicitationCodeHook> elicitationCodeHook() {
        return Optional.ofNullable(this.elicitationCodeHook);
    }
    /**
     * @return Configuration block for conditional branches. Branches are evaluated in the order that they are entered in the list. The first branch with a condition that evaluates to true is executed. The last branch in the list is the default branch. The default branch should not have any condition expression. The default branch is executed if no other branch has a matching condition. See `failure_conditional`.
     * 
     */
    public Optional<V2modelsIntentConfirmationSettingFailureConditional> failureConditional() {
        return Optional.ofNullable(this.failureConditional);
    }
    /**
     * @return Configuration block for the next step to take in the conversation if the confirmation step fails. See `failure_next_step`.
     * 
     */
    public Optional<V2modelsIntentConfirmationSettingFailureNextStep> failureNextStep() {
        return Optional.ofNullable(this.failureNextStep);
    }
    /**
     * @return Configuration block for message groups that Amazon Lex uses to respond the user input. See `failure_response`.
     * 
     */
    public Optional<V2modelsIntentConfirmationSettingFailureResponse> failureResponse() {
        return Optional.ofNullable(this.failureResponse);
    }
    /**
     * @return Configuration block for prompting the user to confirm the intent. This question should have a yes or no answer. Amazon Lex uses this prompt to ensure that the user acknowledges that the intent is ready for fulfillment. See `prompt_specification`.
     * 
     */
    public V2modelsIntentConfirmationSettingPromptSpecification promptSpecification() {
        return this.promptSpecification;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(V2modelsIntentConfirmationSetting defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean active;
        private @Nullable V2modelsIntentConfirmationSettingCodeHook codeHook;
        private @Nullable V2modelsIntentConfirmationSettingConfirmationConditional confirmationConditional;
        private @Nullable V2modelsIntentConfirmationSettingConfirmationNextStep confirmationNextStep;
        private @Nullable V2modelsIntentConfirmationSettingConfirmationResponse confirmationResponse;
        private @Nullable V2modelsIntentConfirmationSettingDeclinationConditional declinationConditional;
        private @Nullable V2modelsIntentConfirmationSettingDeclinationNextStep declinationNextStep;
        private @Nullable V2modelsIntentConfirmationSettingDeclinationResponse declinationResponse;
        private @Nullable V2modelsIntentConfirmationSettingElicitationCodeHook elicitationCodeHook;
        private @Nullable V2modelsIntentConfirmationSettingFailureConditional failureConditional;
        private @Nullable V2modelsIntentConfirmationSettingFailureNextStep failureNextStep;
        private @Nullable V2modelsIntentConfirmationSettingFailureResponse failureResponse;
        private V2modelsIntentConfirmationSettingPromptSpecification promptSpecification;
        public Builder() {}
        public Builder(V2modelsIntentConfirmationSetting defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.active = defaults.active;
    	      this.codeHook = defaults.codeHook;
    	      this.confirmationConditional = defaults.confirmationConditional;
    	      this.confirmationNextStep = defaults.confirmationNextStep;
    	      this.confirmationResponse = defaults.confirmationResponse;
    	      this.declinationConditional = defaults.declinationConditional;
    	      this.declinationNextStep = defaults.declinationNextStep;
    	      this.declinationResponse = defaults.declinationResponse;
    	      this.elicitationCodeHook = defaults.elicitationCodeHook;
    	      this.failureConditional = defaults.failureConditional;
    	      this.failureNextStep = defaults.failureNextStep;
    	      this.failureResponse = defaults.failureResponse;
    	      this.promptSpecification = defaults.promptSpecification;
        }

        @CustomType.Setter
        public Builder active(@Nullable Boolean active) {

            this.active = active;
            return this;
        }
        @CustomType.Setter
        public Builder codeHook(@Nullable V2modelsIntentConfirmationSettingCodeHook codeHook) {

            this.codeHook = codeHook;
            return this;
        }
        @CustomType.Setter
        public Builder confirmationConditional(@Nullable V2modelsIntentConfirmationSettingConfirmationConditional confirmationConditional) {

            this.confirmationConditional = confirmationConditional;
            return this;
        }
        @CustomType.Setter
        public Builder confirmationNextStep(@Nullable V2modelsIntentConfirmationSettingConfirmationNextStep confirmationNextStep) {

            this.confirmationNextStep = confirmationNextStep;
            return this;
        }
        @CustomType.Setter
        public Builder confirmationResponse(@Nullable V2modelsIntentConfirmationSettingConfirmationResponse confirmationResponse) {

            this.confirmationResponse = confirmationResponse;
            return this;
        }
        @CustomType.Setter
        public Builder declinationConditional(@Nullable V2modelsIntentConfirmationSettingDeclinationConditional declinationConditional) {

            this.declinationConditional = declinationConditional;
            return this;
        }
        @CustomType.Setter
        public Builder declinationNextStep(@Nullable V2modelsIntentConfirmationSettingDeclinationNextStep declinationNextStep) {

            this.declinationNextStep = declinationNextStep;
            return this;
        }
        @CustomType.Setter
        public Builder declinationResponse(@Nullable V2modelsIntentConfirmationSettingDeclinationResponse declinationResponse) {

            this.declinationResponse = declinationResponse;
            return this;
        }
        @CustomType.Setter
        public Builder elicitationCodeHook(@Nullable V2modelsIntentConfirmationSettingElicitationCodeHook elicitationCodeHook) {

            this.elicitationCodeHook = elicitationCodeHook;
            return this;
        }
        @CustomType.Setter
        public Builder failureConditional(@Nullable V2modelsIntentConfirmationSettingFailureConditional failureConditional) {

            this.failureConditional = failureConditional;
            return this;
        }
        @CustomType.Setter
        public Builder failureNextStep(@Nullable V2modelsIntentConfirmationSettingFailureNextStep failureNextStep) {

            this.failureNextStep = failureNextStep;
            return this;
        }
        @CustomType.Setter
        public Builder failureResponse(@Nullable V2modelsIntentConfirmationSettingFailureResponse failureResponse) {

            this.failureResponse = failureResponse;
            return this;
        }
        @CustomType.Setter
        public Builder promptSpecification(V2modelsIntentConfirmationSettingPromptSpecification promptSpecification) {
            if (promptSpecification == null) {
              throw new MissingRequiredPropertyException("V2modelsIntentConfirmationSetting", "promptSpecification");
            }
            this.promptSpecification = promptSpecification;
            return this;
        }
        public V2modelsIntentConfirmationSetting build() {
            final var _resultValue = new V2modelsIntentConfirmationSetting();
            _resultValue.active = active;
            _resultValue.codeHook = codeHook;
            _resultValue.confirmationConditional = confirmationConditional;
            _resultValue.confirmationNextStep = confirmationNextStep;
            _resultValue.confirmationResponse = confirmationResponse;
            _resultValue.declinationConditional = declinationConditional;
            _resultValue.declinationNextStep = declinationNextStep;
            _resultValue.declinationResponse = declinationResponse;
            _resultValue.elicitationCodeHook = elicitationCodeHook;
            _resultValue.failureConditional = failureConditional;
            _resultValue.failureNextStep = failureNextStep;
            _resultValue.failureResponse = failureResponse;
            _resultValue.promptSpecification = promptSpecification;
            return _resultValue;
        }
    }
}
