// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.securitylake.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DataLakeConfigurationLifecycleConfigurationTransitionArgs extends com.pulumi.resources.ResourceArgs {

    public static final DataLakeConfigurationLifecycleConfigurationTransitionArgs Empty = new DataLakeConfigurationLifecycleConfigurationTransitionArgs();

    /**
     * Number of days before data transition to a different S3 Storage Class in the Amazon Security Lake object.
     * 
     */
    @Import(name="days")
    private @Nullable Output<Integer> days;

    /**
     * @return Number of days before data transition to a different S3 Storage Class in the Amazon Security Lake object.
     * 
     */
    public Optional<Output<Integer>> days() {
        return Optional.ofNullable(this.days);
    }

    /**
     * The range of storage classes that you can choose from based on the data access, resiliency, and cost requirements of your workloads.
     * 
     */
    @Import(name="storageClass")
    private @Nullable Output<String> storageClass;

    /**
     * @return The range of storage classes that you can choose from based on the data access, resiliency, and cost requirements of your workloads.
     * 
     */
    public Optional<Output<String>> storageClass() {
        return Optional.ofNullable(this.storageClass);
    }

    private DataLakeConfigurationLifecycleConfigurationTransitionArgs() {}

    private DataLakeConfigurationLifecycleConfigurationTransitionArgs(DataLakeConfigurationLifecycleConfigurationTransitionArgs $) {
        this.days = $.days;
        this.storageClass = $.storageClass;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DataLakeConfigurationLifecycleConfigurationTransitionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DataLakeConfigurationLifecycleConfigurationTransitionArgs $;

        public Builder() {
            $ = new DataLakeConfigurationLifecycleConfigurationTransitionArgs();
        }

        public Builder(DataLakeConfigurationLifecycleConfigurationTransitionArgs defaults) {
            $ = new DataLakeConfigurationLifecycleConfigurationTransitionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param days Number of days before data transition to a different S3 Storage Class in the Amazon Security Lake object.
         * 
         * @return builder
         * 
         */
        public Builder days(@Nullable Output<Integer> days) {
            $.days = days;
            return this;
        }

        /**
         * @param days Number of days before data transition to a different S3 Storage Class in the Amazon Security Lake object.
         * 
         * @return builder
         * 
         */
        public Builder days(Integer days) {
            return days(Output.of(days));
        }

        /**
         * @param storageClass The range of storage classes that you can choose from based on the data access, resiliency, and cost requirements of your workloads.
         * 
         * @return builder
         * 
         */
        public Builder storageClass(@Nullable Output<String> storageClass) {
            $.storageClass = storageClass;
            return this;
        }

        /**
         * @param storageClass The range of storage classes that you can choose from based on the data access, resiliency, and cost requirements of your workloads.
         * 
         * @return builder
         * 
         */
        public Builder storageClass(String storageClass) {
            return storageClass(Output.of(storageClass));
        }

        public DataLakeConfigurationLifecycleConfigurationTransitionArgs build() {
            return $;
        }
    }

}
