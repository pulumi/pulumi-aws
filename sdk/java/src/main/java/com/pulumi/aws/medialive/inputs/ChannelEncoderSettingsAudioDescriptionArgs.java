// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.medialive.inputs;

import com.pulumi.aws.medialive.inputs.ChannelEncoderSettingsAudioDescriptionAudioNormalizationSettingsArgs;
import com.pulumi.aws.medialive.inputs.ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsArgs;
import com.pulumi.aws.medialive.inputs.ChannelEncoderSettingsAudioDescriptionCodecSettingsArgs;
import com.pulumi.aws.medialive.inputs.ChannelEncoderSettingsAudioDescriptionRemixSettingsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ChannelEncoderSettingsAudioDescriptionArgs extends com.pulumi.resources.ResourceArgs {

    public static final ChannelEncoderSettingsAudioDescriptionArgs Empty = new ChannelEncoderSettingsAudioDescriptionArgs();

    @Import(name="audioNormalizationSettings")
    private @Nullable Output<ChannelEncoderSettingsAudioDescriptionAudioNormalizationSettingsArgs> audioNormalizationSettings;

    public Optional<Output<ChannelEncoderSettingsAudioDescriptionAudioNormalizationSettingsArgs>> audioNormalizationSettings() {
        return Optional.ofNullable(this.audioNormalizationSettings);
    }

    @Import(name="audioSelectorName", required=true)
    private Output<String> audioSelectorName;

    public Output<String> audioSelectorName() {
        return this.audioSelectorName;
    }

    @Import(name="audioType")
    private @Nullable Output<String> audioType;

    public Optional<Output<String>> audioType() {
        return Optional.ofNullable(this.audioType);
    }

    @Import(name="audioTypeControl")
    private @Nullable Output<String> audioTypeControl;

    public Optional<Output<String>> audioTypeControl() {
        return Optional.ofNullable(this.audioTypeControl);
    }

    @Import(name="audioWatermarkSettings")
    private @Nullable Output<ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsArgs> audioWatermarkSettings;

    public Optional<Output<ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsArgs>> audioWatermarkSettings() {
        return Optional.ofNullable(this.audioWatermarkSettings);
    }

    @Import(name="codecSettings")
    private @Nullable Output<ChannelEncoderSettingsAudioDescriptionCodecSettingsArgs> codecSettings;

    public Optional<Output<ChannelEncoderSettingsAudioDescriptionCodecSettingsArgs>> codecSettings() {
        return Optional.ofNullable(this.codecSettings);
    }

    @Import(name="languageCode")
    private @Nullable Output<String> languageCode;

    public Optional<Output<String>> languageCode() {
        return Optional.ofNullable(this.languageCode);
    }

    @Import(name="languageCodeControl")
    private @Nullable Output<String> languageCodeControl;

    public Optional<Output<String>> languageCodeControl() {
        return Optional.ofNullable(this.languageCodeControl);
    }

    @Import(name="name", required=true)
    private Output<String> name;

    public Output<String> name() {
        return this.name;
    }

    @Import(name="remixSettings")
    private @Nullable Output<ChannelEncoderSettingsAudioDescriptionRemixSettingsArgs> remixSettings;

    public Optional<Output<ChannelEncoderSettingsAudioDescriptionRemixSettingsArgs>> remixSettings() {
        return Optional.ofNullable(this.remixSettings);
    }

    @Import(name="streamName")
    private @Nullable Output<String> streamName;

    public Optional<Output<String>> streamName() {
        return Optional.ofNullable(this.streamName);
    }

    private ChannelEncoderSettingsAudioDescriptionArgs() {}

    private ChannelEncoderSettingsAudioDescriptionArgs(ChannelEncoderSettingsAudioDescriptionArgs $) {
        this.audioNormalizationSettings = $.audioNormalizationSettings;
        this.audioSelectorName = $.audioSelectorName;
        this.audioType = $.audioType;
        this.audioTypeControl = $.audioTypeControl;
        this.audioWatermarkSettings = $.audioWatermarkSettings;
        this.codecSettings = $.codecSettings;
        this.languageCode = $.languageCode;
        this.languageCodeControl = $.languageCodeControl;
        this.name = $.name;
        this.remixSettings = $.remixSettings;
        this.streamName = $.streamName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ChannelEncoderSettingsAudioDescriptionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ChannelEncoderSettingsAudioDescriptionArgs $;

        public Builder() {
            $ = new ChannelEncoderSettingsAudioDescriptionArgs();
        }

        public Builder(ChannelEncoderSettingsAudioDescriptionArgs defaults) {
            $ = new ChannelEncoderSettingsAudioDescriptionArgs(Objects.requireNonNull(defaults));
        }

        public Builder audioNormalizationSettings(@Nullable Output<ChannelEncoderSettingsAudioDescriptionAudioNormalizationSettingsArgs> audioNormalizationSettings) {
            $.audioNormalizationSettings = audioNormalizationSettings;
            return this;
        }

        public Builder audioNormalizationSettings(ChannelEncoderSettingsAudioDescriptionAudioNormalizationSettingsArgs audioNormalizationSettings) {
            return audioNormalizationSettings(Output.of(audioNormalizationSettings));
        }

        public Builder audioSelectorName(Output<String> audioSelectorName) {
            $.audioSelectorName = audioSelectorName;
            return this;
        }

        public Builder audioSelectorName(String audioSelectorName) {
            return audioSelectorName(Output.of(audioSelectorName));
        }

        public Builder audioType(@Nullable Output<String> audioType) {
            $.audioType = audioType;
            return this;
        }

        public Builder audioType(String audioType) {
            return audioType(Output.of(audioType));
        }

        public Builder audioTypeControl(@Nullable Output<String> audioTypeControl) {
            $.audioTypeControl = audioTypeControl;
            return this;
        }

        public Builder audioTypeControl(String audioTypeControl) {
            return audioTypeControl(Output.of(audioTypeControl));
        }

        public Builder audioWatermarkSettings(@Nullable Output<ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsArgs> audioWatermarkSettings) {
            $.audioWatermarkSettings = audioWatermarkSettings;
            return this;
        }

        public Builder audioWatermarkSettings(ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsArgs audioWatermarkSettings) {
            return audioWatermarkSettings(Output.of(audioWatermarkSettings));
        }

        public Builder codecSettings(@Nullable Output<ChannelEncoderSettingsAudioDescriptionCodecSettingsArgs> codecSettings) {
            $.codecSettings = codecSettings;
            return this;
        }

        public Builder codecSettings(ChannelEncoderSettingsAudioDescriptionCodecSettingsArgs codecSettings) {
            return codecSettings(Output.of(codecSettings));
        }

        public Builder languageCode(@Nullable Output<String> languageCode) {
            $.languageCode = languageCode;
            return this;
        }

        public Builder languageCode(String languageCode) {
            return languageCode(Output.of(languageCode));
        }

        public Builder languageCodeControl(@Nullable Output<String> languageCodeControl) {
            $.languageCodeControl = languageCodeControl;
            return this;
        }

        public Builder languageCodeControl(String languageCodeControl) {
            return languageCodeControl(Output.of(languageCodeControl));
        }

        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder remixSettings(@Nullable Output<ChannelEncoderSettingsAudioDescriptionRemixSettingsArgs> remixSettings) {
            $.remixSettings = remixSettings;
            return this;
        }

        public Builder remixSettings(ChannelEncoderSettingsAudioDescriptionRemixSettingsArgs remixSettings) {
            return remixSettings(Output.of(remixSettings));
        }

        public Builder streamName(@Nullable Output<String> streamName) {
            $.streamName = streamName;
            return this;
        }

        public Builder streamName(String streamName) {
            return streamName(Output.of(streamName));
        }

        public ChannelEncoderSettingsAudioDescriptionArgs build() {
            $.audioSelectorName = Objects.requireNonNull($.audioSelectorName, "expected parameter 'audioSelectorName' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            return $;
        }
    }

}
