// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.batch.outputs;

import com.pulumi.aws.batch.outputs.GetJobDefinitionEksPropertyPodPropertyContainer;
import com.pulumi.aws.batch.outputs.GetJobDefinitionEksPropertyPodPropertyMetadata;
import com.pulumi.aws.batch.outputs.GetJobDefinitionEksPropertyPodPropertyVolume;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetJobDefinitionEksPropertyPodProperty {
    /**
     * @return The properties of the container that&#39;s used on the Amazon EKS pod. Array of EksContainer objects.
     * 
     */
    private List<GetJobDefinitionEksPropertyPodPropertyContainer> containers;
    /**
     * @return The DNS policy for the pod. The default value is ClusterFirst. If the hostNetwork parameter is not specified, the default is ClusterFirstWithHostNet. ClusterFirst indicates that any DNS query that does not match the configured cluster domain suffix is forwarded to the upstream nameserver inherited from the node.
     * 
     */
    private String dnsPolicy;
    /**
     * @return Indicates if the pod uses the hosts&#39; network IP address. The default value is true. Setting this to false enables the Kubernetes pod networking model. Most AWS Batch workloads are egress-only and don&#39;t require the overhead of IP allocation for each pod for incoming connections.
     * 
     */
    private Boolean hostNetwork;
    /**
     * @return Metadata about the Kubernetes pod.
     * 
     */
    private List<GetJobDefinitionEksPropertyPodPropertyMetadata> metadatas;
    /**
     * @return The name of the service account that&#39;s used to run the pod.
     * 
     */
    private Boolean serviceAccountName;
    /**
     * @return A list of data volumes used in a job.
     * 
     */
    private List<GetJobDefinitionEksPropertyPodPropertyVolume> volumes;

    private GetJobDefinitionEksPropertyPodProperty() {}
    /**
     * @return The properties of the container that&#39;s used on the Amazon EKS pod. Array of EksContainer objects.
     * 
     */
    public List<GetJobDefinitionEksPropertyPodPropertyContainer> containers() {
        return this.containers;
    }
    /**
     * @return The DNS policy for the pod. The default value is ClusterFirst. If the hostNetwork parameter is not specified, the default is ClusterFirstWithHostNet. ClusterFirst indicates that any DNS query that does not match the configured cluster domain suffix is forwarded to the upstream nameserver inherited from the node.
     * 
     */
    public String dnsPolicy() {
        return this.dnsPolicy;
    }
    /**
     * @return Indicates if the pod uses the hosts&#39; network IP address. The default value is true. Setting this to false enables the Kubernetes pod networking model. Most AWS Batch workloads are egress-only and don&#39;t require the overhead of IP allocation for each pod for incoming connections.
     * 
     */
    public Boolean hostNetwork() {
        return this.hostNetwork;
    }
    /**
     * @return Metadata about the Kubernetes pod.
     * 
     */
    public List<GetJobDefinitionEksPropertyPodPropertyMetadata> metadatas() {
        return this.metadatas;
    }
    /**
     * @return The name of the service account that&#39;s used to run the pod.
     * 
     */
    public Boolean serviceAccountName() {
        return this.serviceAccountName;
    }
    /**
     * @return A list of data volumes used in a job.
     * 
     */
    public List<GetJobDefinitionEksPropertyPodPropertyVolume> volumes() {
        return this.volumes;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetJobDefinitionEksPropertyPodProperty defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetJobDefinitionEksPropertyPodPropertyContainer> containers;
        private String dnsPolicy;
        private Boolean hostNetwork;
        private List<GetJobDefinitionEksPropertyPodPropertyMetadata> metadatas;
        private Boolean serviceAccountName;
        private List<GetJobDefinitionEksPropertyPodPropertyVolume> volumes;
        public Builder() {}
        public Builder(GetJobDefinitionEksPropertyPodProperty defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.containers = defaults.containers;
    	      this.dnsPolicy = defaults.dnsPolicy;
    	      this.hostNetwork = defaults.hostNetwork;
    	      this.metadatas = defaults.metadatas;
    	      this.serviceAccountName = defaults.serviceAccountName;
    	      this.volumes = defaults.volumes;
        }

        @CustomType.Setter
        public Builder containers(List<GetJobDefinitionEksPropertyPodPropertyContainer> containers) {
            if (containers == null) {
              throw new MissingRequiredPropertyException("GetJobDefinitionEksPropertyPodProperty", "containers");
            }
            this.containers = containers;
            return this;
        }
        public Builder containers(GetJobDefinitionEksPropertyPodPropertyContainer... containers) {
            return containers(List.of(containers));
        }
        @CustomType.Setter
        public Builder dnsPolicy(String dnsPolicy) {
            if (dnsPolicy == null) {
              throw new MissingRequiredPropertyException("GetJobDefinitionEksPropertyPodProperty", "dnsPolicy");
            }
            this.dnsPolicy = dnsPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder hostNetwork(Boolean hostNetwork) {
            if (hostNetwork == null) {
              throw new MissingRequiredPropertyException("GetJobDefinitionEksPropertyPodProperty", "hostNetwork");
            }
            this.hostNetwork = hostNetwork;
            return this;
        }
        @CustomType.Setter
        public Builder metadatas(List<GetJobDefinitionEksPropertyPodPropertyMetadata> metadatas) {
            if (metadatas == null) {
              throw new MissingRequiredPropertyException("GetJobDefinitionEksPropertyPodProperty", "metadatas");
            }
            this.metadatas = metadatas;
            return this;
        }
        public Builder metadatas(GetJobDefinitionEksPropertyPodPropertyMetadata... metadatas) {
            return metadatas(List.of(metadatas));
        }
        @CustomType.Setter
        public Builder serviceAccountName(Boolean serviceAccountName) {
            if (serviceAccountName == null) {
              throw new MissingRequiredPropertyException("GetJobDefinitionEksPropertyPodProperty", "serviceAccountName");
            }
            this.serviceAccountName = serviceAccountName;
            return this;
        }
        @CustomType.Setter
        public Builder volumes(List<GetJobDefinitionEksPropertyPodPropertyVolume> volumes) {
            if (volumes == null) {
              throw new MissingRequiredPropertyException("GetJobDefinitionEksPropertyPodProperty", "volumes");
            }
            this.volumes = volumes;
            return this;
        }
        public Builder volumes(GetJobDefinitionEksPropertyPodPropertyVolume... volumes) {
            return volumes(List.of(volumes));
        }
        public GetJobDefinitionEksPropertyPodProperty build() {
            final var _resultValue = new GetJobDefinitionEksPropertyPodProperty();
            _resultValue.containers = containers;
            _resultValue.dnsPolicy = dnsPolicy;
            _resultValue.hostNetwork = hostNetwork;
            _resultValue.metadatas = metadatas;
            _resultValue.serviceAccountName = serviceAccountName;
            _resultValue.volumes = volumes;
            return _resultValue;
        }
    }
}
