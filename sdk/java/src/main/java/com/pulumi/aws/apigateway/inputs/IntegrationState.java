// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.apigateway.inputs;

import com.pulumi.aws.apigateway.inputs.IntegrationTlsConfigArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IntegrationState extends com.pulumi.resources.ResourceArgs {

    public static final IntegrationState Empty = new IntegrationState();

    @Import(name="cacheKeyParameters")
    private @Nullable Output<List<String>> cacheKeyParameters;

    public Optional<Output<List<String>>> cacheKeyParameters() {
        return Optional.ofNullable(this.cacheKeyParameters);
    }

    @Import(name="cacheNamespace")
    private @Nullable Output<String> cacheNamespace;

    public Optional<Output<String>> cacheNamespace() {
        return Optional.ofNullable(this.cacheNamespace);
    }

    @Import(name="connectionId")
    private @Nullable Output<String> connectionId;

    public Optional<Output<String>> connectionId() {
        return Optional.ofNullable(this.connectionId);
    }

    @Import(name="connectionType")
    private @Nullable Output<String> connectionType;

    public Optional<Output<String>> connectionType() {
        return Optional.ofNullable(this.connectionType);
    }

    @Import(name="contentHandling")
    private @Nullable Output<String> contentHandling;

    public Optional<Output<String>> contentHandling() {
        return Optional.ofNullable(this.contentHandling);
    }

    @Import(name="credentials")
    private @Nullable Output<String> credentials;

    public Optional<Output<String>> credentials() {
        return Optional.ofNullable(this.credentials);
    }

    @Import(name="httpMethod")
    private @Nullable Output<String> httpMethod;

    public Optional<Output<String>> httpMethod() {
        return Optional.ofNullable(this.httpMethod);
    }

    @Import(name="integrationHttpMethod")
    private @Nullable Output<String> integrationHttpMethod;

    public Optional<Output<String>> integrationHttpMethod() {
        return Optional.ofNullable(this.integrationHttpMethod);
    }

    @Import(name="passthroughBehavior")
    private @Nullable Output<String> passthroughBehavior;

    public Optional<Output<String>> passthroughBehavior() {
        return Optional.ofNullable(this.passthroughBehavior);
    }

    @Import(name="requestParameters")
    private @Nullable Output<Map<String,String>> requestParameters;

    public Optional<Output<Map<String,String>>> requestParameters() {
        return Optional.ofNullable(this.requestParameters);
    }

    @Import(name="requestTemplates")
    private @Nullable Output<Map<String,String>> requestTemplates;

    public Optional<Output<Map<String,String>>> requestTemplates() {
        return Optional.ofNullable(this.requestTemplates);
    }

    @Import(name="resourceId")
    private @Nullable Output<String> resourceId;

    public Optional<Output<String>> resourceId() {
        return Optional.ofNullable(this.resourceId);
    }

    @Import(name="restApi")
    private @Nullable Output<String> restApi;

    public Optional<Output<String>> restApi() {
        return Optional.ofNullable(this.restApi);
    }

    @Import(name="timeoutMilliseconds")
    private @Nullable Output<Integer> timeoutMilliseconds;

    public Optional<Output<Integer>> timeoutMilliseconds() {
        return Optional.ofNullable(this.timeoutMilliseconds);
    }

    @Import(name="tlsConfig")
    private @Nullable Output<IntegrationTlsConfigArgs> tlsConfig;

    public Optional<Output<IntegrationTlsConfigArgs>> tlsConfig() {
        return Optional.ofNullable(this.tlsConfig);
    }

    @Import(name="type")
    private @Nullable Output<String> type;

    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    @Import(name="uri")
    private @Nullable Output<String> uri;

    public Optional<Output<String>> uri() {
        return Optional.ofNullable(this.uri);
    }

    private IntegrationState() {}

    private IntegrationState(IntegrationState $) {
        this.cacheKeyParameters = $.cacheKeyParameters;
        this.cacheNamespace = $.cacheNamespace;
        this.connectionId = $.connectionId;
        this.connectionType = $.connectionType;
        this.contentHandling = $.contentHandling;
        this.credentials = $.credentials;
        this.httpMethod = $.httpMethod;
        this.integrationHttpMethod = $.integrationHttpMethod;
        this.passthroughBehavior = $.passthroughBehavior;
        this.requestParameters = $.requestParameters;
        this.requestTemplates = $.requestTemplates;
        this.resourceId = $.resourceId;
        this.restApi = $.restApi;
        this.timeoutMilliseconds = $.timeoutMilliseconds;
        this.tlsConfig = $.tlsConfig;
        this.type = $.type;
        this.uri = $.uri;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IntegrationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IntegrationState $;

        public Builder() {
            $ = new IntegrationState();
        }

        public Builder(IntegrationState defaults) {
            $ = new IntegrationState(Objects.requireNonNull(defaults));
        }

        public Builder cacheKeyParameters(@Nullable Output<List<String>> cacheKeyParameters) {
            $.cacheKeyParameters = cacheKeyParameters;
            return this;
        }

        public Builder cacheKeyParameters(List<String> cacheKeyParameters) {
            return cacheKeyParameters(Output.of(cacheKeyParameters));
        }

        public Builder cacheKeyParameters(String... cacheKeyParameters) {
            return cacheKeyParameters(List.of(cacheKeyParameters));
        }

        public Builder cacheNamespace(@Nullable Output<String> cacheNamespace) {
            $.cacheNamespace = cacheNamespace;
            return this;
        }

        public Builder cacheNamespace(String cacheNamespace) {
            return cacheNamespace(Output.of(cacheNamespace));
        }

        public Builder connectionId(@Nullable Output<String> connectionId) {
            $.connectionId = connectionId;
            return this;
        }

        public Builder connectionId(String connectionId) {
            return connectionId(Output.of(connectionId));
        }

        public Builder connectionType(@Nullable Output<String> connectionType) {
            $.connectionType = connectionType;
            return this;
        }

        public Builder connectionType(String connectionType) {
            return connectionType(Output.of(connectionType));
        }

        public Builder contentHandling(@Nullable Output<String> contentHandling) {
            $.contentHandling = contentHandling;
            return this;
        }

        public Builder contentHandling(String contentHandling) {
            return contentHandling(Output.of(contentHandling));
        }

        public Builder credentials(@Nullable Output<String> credentials) {
            $.credentials = credentials;
            return this;
        }

        public Builder credentials(String credentials) {
            return credentials(Output.of(credentials));
        }

        public Builder httpMethod(@Nullable Output<String> httpMethod) {
            $.httpMethod = httpMethod;
            return this;
        }

        public Builder httpMethod(String httpMethod) {
            return httpMethod(Output.of(httpMethod));
        }

        public Builder integrationHttpMethod(@Nullable Output<String> integrationHttpMethod) {
            $.integrationHttpMethod = integrationHttpMethod;
            return this;
        }

        public Builder integrationHttpMethod(String integrationHttpMethod) {
            return integrationHttpMethod(Output.of(integrationHttpMethod));
        }

        public Builder passthroughBehavior(@Nullable Output<String> passthroughBehavior) {
            $.passthroughBehavior = passthroughBehavior;
            return this;
        }

        public Builder passthroughBehavior(String passthroughBehavior) {
            return passthroughBehavior(Output.of(passthroughBehavior));
        }

        public Builder requestParameters(@Nullable Output<Map<String,String>> requestParameters) {
            $.requestParameters = requestParameters;
            return this;
        }

        public Builder requestParameters(Map<String,String> requestParameters) {
            return requestParameters(Output.of(requestParameters));
        }

        public Builder requestTemplates(@Nullable Output<Map<String,String>> requestTemplates) {
            $.requestTemplates = requestTemplates;
            return this;
        }

        public Builder requestTemplates(Map<String,String> requestTemplates) {
            return requestTemplates(Output.of(requestTemplates));
        }

        public Builder resourceId(@Nullable Output<String> resourceId) {
            $.resourceId = resourceId;
            return this;
        }

        public Builder resourceId(String resourceId) {
            return resourceId(Output.of(resourceId));
        }

        public Builder restApi(@Nullable Output<String> restApi) {
            $.restApi = restApi;
            return this;
        }

        public Builder restApi(String restApi) {
            return restApi(Output.of(restApi));
        }

        public Builder timeoutMilliseconds(@Nullable Output<Integer> timeoutMilliseconds) {
            $.timeoutMilliseconds = timeoutMilliseconds;
            return this;
        }

        public Builder timeoutMilliseconds(Integer timeoutMilliseconds) {
            return timeoutMilliseconds(Output.of(timeoutMilliseconds));
        }

        public Builder tlsConfig(@Nullable Output<IntegrationTlsConfigArgs> tlsConfig) {
            $.tlsConfig = tlsConfig;
            return this;
        }

        public Builder tlsConfig(IntegrationTlsConfigArgs tlsConfig) {
            return tlsConfig(Output.of(tlsConfig));
        }

        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        public Builder type(String type) {
            return type(Output.of(type));
        }

        public Builder uri(@Nullable Output<String> uri) {
            $.uri = uri;
            return this;
        }

        public Builder uri(String uri) {
            return uri(Output.of(uri));
        }

        public IntegrationState build() {
            return $;
        }
    }

}
