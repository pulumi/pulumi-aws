// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.appmesh.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetVirtualNodeSpecListenerHealthCheck {
    private Integer healthyThreshold;
    private Integer intervalMillis;
    private String path;
    private Integer port;
    private String protocol;
    private Integer timeoutMillis;
    private Integer unhealthyThreshold;

    private GetVirtualNodeSpecListenerHealthCheck() {}
    public Integer healthyThreshold() {
        return this.healthyThreshold;
    }
    public Integer intervalMillis() {
        return this.intervalMillis;
    }
    public String path() {
        return this.path;
    }
    public Integer port() {
        return this.port;
    }
    public String protocol() {
        return this.protocol;
    }
    public Integer timeoutMillis() {
        return this.timeoutMillis;
    }
    public Integer unhealthyThreshold() {
        return this.unhealthyThreshold;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetVirtualNodeSpecListenerHealthCheck defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer healthyThreshold;
        private Integer intervalMillis;
        private String path;
        private Integer port;
        private String protocol;
        private Integer timeoutMillis;
        private Integer unhealthyThreshold;
        public Builder() {}
        public Builder(GetVirtualNodeSpecListenerHealthCheck defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.healthyThreshold = defaults.healthyThreshold;
    	      this.intervalMillis = defaults.intervalMillis;
    	      this.path = defaults.path;
    	      this.port = defaults.port;
    	      this.protocol = defaults.protocol;
    	      this.timeoutMillis = defaults.timeoutMillis;
    	      this.unhealthyThreshold = defaults.unhealthyThreshold;
        }

        @CustomType.Setter
        public Builder healthyThreshold(Integer healthyThreshold) {
            if (healthyThreshold == null) {
              throw new MissingRequiredPropertyException("GetVirtualNodeSpecListenerHealthCheck", "healthyThreshold");
            }
            this.healthyThreshold = healthyThreshold;
            return this;
        }
        @CustomType.Setter
        public Builder intervalMillis(Integer intervalMillis) {
            if (intervalMillis == null) {
              throw new MissingRequiredPropertyException("GetVirtualNodeSpecListenerHealthCheck", "intervalMillis");
            }
            this.intervalMillis = intervalMillis;
            return this;
        }
        @CustomType.Setter
        public Builder path(String path) {
            if (path == null) {
              throw new MissingRequiredPropertyException("GetVirtualNodeSpecListenerHealthCheck", "path");
            }
            this.path = path;
            return this;
        }
        @CustomType.Setter
        public Builder port(Integer port) {
            if (port == null) {
              throw new MissingRequiredPropertyException("GetVirtualNodeSpecListenerHealthCheck", "port");
            }
            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder protocol(String protocol) {
            if (protocol == null) {
              throw new MissingRequiredPropertyException("GetVirtualNodeSpecListenerHealthCheck", "protocol");
            }
            this.protocol = protocol;
            return this;
        }
        @CustomType.Setter
        public Builder timeoutMillis(Integer timeoutMillis) {
            if (timeoutMillis == null) {
              throw new MissingRequiredPropertyException("GetVirtualNodeSpecListenerHealthCheck", "timeoutMillis");
            }
            this.timeoutMillis = timeoutMillis;
            return this;
        }
        @CustomType.Setter
        public Builder unhealthyThreshold(Integer unhealthyThreshold) {
            if (unhealthyThreshold == null) {
              throw new MissingRequiredPropertyException("GetVirtualNodeSpecListenerHealthCheck", "unhealthyThreshold");
            }
            this.unhealthyThreshold = unhealthyThreshold;
            return this;
        }
        public GetVirtualNodeSpecListenerHealthCheck build() {
            final var _resultValue = new GetVirtualNodeSpecListenerHealthCheck();
            _resultValue.healthyThreshold = healthyThreshold;
            _resultValue.intervalMillis = intervalMillis;
            _resultValue.path = path;
            _resultValue.port = port;
            _resultValue.protocol = protocol;
            _resultValue.timeoutMillis = timeoutMillis;
            _resultValue.unhealthyThreshold = unhealthyThreshold;
            return _resultValue;
        }
    }
}
