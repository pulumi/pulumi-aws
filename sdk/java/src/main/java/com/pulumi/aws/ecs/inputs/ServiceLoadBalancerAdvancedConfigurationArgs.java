// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ecs.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceLoadBalancerAdvancedConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceLoadBalancerAdvancedConfigurationArgs Empty = new ServiceLoadBalancerAdvancedConfigurationArgs();

    /**
     * ARN of the alternate target group to use for Blue/Green deployments.
     * 
     */
    @Import(name="alternateTargetGroupArn", required=true)
    private Output<String> alternateTargetGroupArn;

    /**
     * @return ARN of the alternate target group to use for Blue/Green deployments.
     * 
     */
    public Output<String> alternateTargetGroupArn() {
        return this.alternateTargetGroupArn;
    }

    /**
     * ARN of the listener rule that routes production traffic.
     * 
     */
    @Import(name="productionListenerRule", required=true)
    private Output<String> productionListenerRule;

    /**
     * @return ARN of the listener rule that routes production traffic.
     * 
     */
    public Output<String> productionListenerRule() {
        return this.productionListenerRule;
    }

    /**
     * ARN of the IAM role that allows ECS to manage the target groups.
     * 
     */
    @Import(name="roleArn", required=true)
    private Output<String> roleArn;

    /**
     * @return ARN of the IAM role that allows ECS to manage the target groups.
     * 
     */
    public Output<String> roleArn() {
        return this.roleArn;
    }

    /**
     * ARN of the listener rule that routes test traffic.
     * 
     */
    @Import(name="testListenerRule")
    private @Nullable Output<String> testListenerRule;

    /**
     * @return ARN of the listener rule that routes test traffic.
     * 
     */
    public Optional<Output<String>> testListenerRule() {
        return Optional.ofNullable(this.testListenerRule);
    }

    private ServiceLoadBalancerAdvancedConfigurationArgs() {}

    private ServiceLoadBalancerAdvancedConfigurationArgs(ServiceLoadBalancerAdvancedConfigurationArgs $) {
        this.alternateTargetGroupArn = $.alternateTargetGroupArn;
        this.productionListenerRule = $.productionListenerRule;
        this.roleArn = $.roleArn;
        this.testListenerRule = $.testListenerRule;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceLoadBalancerAdvancedConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceLoadBalancerAdvancedConfigurationArgs $;

        public Builder() {
            $ = new ServiceLoadBalancerAdvancedConfigurationArgs();
        }

        public Builder(ServiceLoadBalancerAdvancedConfigurationArgs defaults) {
            $ = new ServiceLoadBalancerAdvancedConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param alternateTargetGroupArn ARN of the alternate target group to use for Blue/Green deployments.
         * 
         * @return builder
         * 
         */
        public Builder alternateTargetGroupArn(Output<String> alternateTargetGroupArn) {
            $.alternateTargetGroupArn = alternateTargetGroupArn;
            return this;
        }

        /**
         * @param alternateTargetGroupArn ARN of the alternate target group to use for Blue/Green deployments.
         * 
         * @return builder
         * 
         */
        public Builder alternateTargetGroupArn(String alternateTargetGroupArn) {
            return alternateTargetGroupArn(Output.of(alternateTargetGroupArn));
        }

        /**
         * @param productionListenerRule ARN of the listener rule that routes production traffic.
         * 
         * @return builder
         * 
         */
        public Builder productionListenerRule(Output<String> productionListenerRule) {
            $.productionListenerRule = productionListenerRule;
            return this;
        }

        /**
         * @param productionListenerRule ARN of the listener rule that routes production traffic.
         * 
         * @return builder
         * 
         */
        public Builder productionListenerRule(String productionListenerRule) {
            return productionListenerRule(Output.of(productionListenerRule));
        }

        /**
         * @param roleArn ARN of the IAM role that allows ECS to manage the target groups.
         * 
         * @return builder
         * 
         */
        public Builder roleArn(Output<String> roleArn) {
            $.roleArn = roleArn;
            return this;
        }

        /**
         * @param roleArn ARN of the IAM role that allows ECS to manage the target groups.
         * 
         * @return builder
         * 
         */
        public Builder roleArn(String roleArn) {
            return roleArn(Output.of(roleArn));
        }

        /**
         * @param testListenerRule ARN of the listener rule that routes test traffic.
         * 
         * @return builder
         * 
         */
        public Builder testListenerRule(@Nullable Output<String> testListenerRule) {
            $.testListenerRule = testListenerRule;
            return this;
        }

        /**
         * @param testListenerRule ARN of the listener rule that routes test traffic.
         * 
         * @return builder
         * 
         */
        public Builder testListenerRule(String testListenerRule) {
            return testListenerRule(Output.of(testListenerRule));
        }

        public ServiceLoadBalancerAdvancedConfigurationArgs build() {
            if ($.alternateTargetGroupArn == null) {
                throw new MissingRequiredPropertyException("ServiceLoadBalancerAdvancedConfigurationArgs", "alternateTargetGroupArn");
            }
            if ($.productionListenerRule == null) {
                throw new MissingRequiredPropertyException("ServiceLoadBalancerAdvancedConfigurationArgs", "productionListenerRule");
            }
            if ($.roleArn == null) {
                throw new MissingRequiredPropertyException("ServiceLoadBalancerAdvancedConfigurationArgs", "roleArn");
            }
            return $;
        }
    }

}
