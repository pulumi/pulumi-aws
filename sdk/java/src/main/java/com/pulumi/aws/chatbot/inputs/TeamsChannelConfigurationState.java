// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.chatbot.inputs;

import com.pulumi.aws.chatbot.inputs.TeamsChannelConfigurationTimeoutsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TeamsChannelConfigurationState extends com.pulumi.resources.ResourceArgs {

    public static final TeamsChannelConfigurationState Empty = new TeamsChannelConfigurationState();

    /**
     * ID of the Microsoft Teams channel.
     * 
     */
    @Import(name="channelId")
    private @Nullable Output<String> channelId;

    /**
     * @return ID of the Microsoft Teams channel.
     * 
     */
    public Optional<Output<String>> channelId() {
        return Optional.ofNullable(this.channelId);
    }

    /**
     * Name of the Microsoft Teams channel.
     * 
     */
    @Import(name="channelName")
    private @Nullable Output<String> channelName;

    /**
     * @return Name of the Microsoft Teams channel.
     * 
     */
    public Optional<Output<String>> channelName() {
        return Optional.ofNullable(this.channelName);
    }

    /**
     * ARN of the Microsoft Teams channel configuration.
     * 
     */
    @Import(name="chatConfigurationArn")
    private @Nullable Output<String> chatConfigurationArn;

    /**
     * @return ARN of the Microsoft Teams channel configuration.
     * 
     */
    public Optional<Output<String>> chatConfigurationArn() {
        return Optional.ofNullable(this.chatConfigurationArn);
    }

    /**
     * Name of the Microsoft Teams channel configuration.
     * 
     */
    @Import(name="configurationName")
    private @Nullable Output<String> configurationName;

    /**
     * @return Name of the Microsoft Teams channel configuration.
     * 
     */
    public Optional<Output<String>> configurationName() {
        return Optional.ofNullable(this.configurationName);
    }

    /**
     * List of IAM policy ARNs that are applied as channel guardrails. The AWS managed `AdministratorAccess` policy is applied by default if this is not set.
     * 
     */
    @Import(name="guardrailPolicyArns")
    private @Nullable Output<List<String>> guardrailPolicyArns;

    /**
     * @return List of IAM policy ARNs that are applied as channel guardrails. The AWS managed `AdministratorAccess` policy is applied by default if this is not set.
     * 
     */
    public Optional<Output<List<String>>> guardrailPolicyArns() {
        return Optional.ofNullable(this.guardrailPolicyArns);
    }

    /**
     * ARN of the IAM role that defines the permissions for AWS Chatbot. This is a user-defined role that AWS Chatbot will assume. This is not the service-linked role.
     * 
     */
    @Import(name="iamRoleArn")
    private @Nullable Output<String> iamRoleArn;

    /**
     * @return ARN of the IAM role that defines the permissions for AWS Chatbot. This is a user-defined role that AWS Chatbot will assume. This is not the service-linked role.
     * 
     */
    public Optional<Output<String>> iamRoleArn() {
        return Optional.ofNullable(this.iamRoleArn);
    }

    /**
     * Logging levels include `ERROR`, `INFO`, or `NONE`.
     * 
     */
    @Import(name="loggingLevel")
    private @Nullable Output<String> loggingLevel;

    /**
     * @return Logging levels include `ERROR`, `INFO`, or `NONE`.
     * 
     */
    public Optional<Output<String>> loggingLevel() {
        return Optional.ofNullable(this.loggingLevel);
    }

    /**
     * ARNs of the SNS topics that deliver notifications to AWS Chatbot.
     * 
     */
    @Import(name="snsTopicArns")
    private @Nullable Output<List<String>> snsTopicArns;

    /**
     * @return ARNs of the SNS topics that deliver notifications to AWS Chatbot.
     * 
     */
    public Optional<Output<List<String>>> snsTopicArns() {
        return Optional.ofNullable(this.snsTopicArns);
    }

    /**
     * Map of tags assigned to the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Map of tags assigned to the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    /**
     * @return Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    /**
     * ID of the Microsoft Team authorized with AWS Chatbot. To get the team ID, you must perform the initial authorization flow with Microsoft Teams in the AWS Chatbot console. Then you can copy and paste the team ID from the console.
     * 
     */
    @Import(name="teamId")
    private @Nullable Output<String> teamId;

    /**
     * @return ID of the Microsoft Team authorized with AWS Chatbot. To get the team ID, you must perform the initial authorization flow with Microsoft Teams in the AWS Chatbot console. Then you can copy and paste the team ID from the console.
     * 
     */
    public Optional<Output<String>> teamId() {
        return Optional.ofNullable(this.teamId);
    }

    /**
     * Name of the Microsoft Teams team.
     * 
     */
    @Import(name="teamName")
    private @Nullable Output<String> teamName;

    /**
     * @return Name of the Microsoft Teams team.
     * 
     */
    public Optional<Output<String>> teamName() {
        return Optional.ofNullable(this.teamName);
    }

    /**
     * ID of the Microsoft Teams tenant.
     * 
     * The following arguments are optional:
     * 
     */
    @Import(name="tenantId")
    private @Nullable Output<String> tenantId;

    /**
     * @return ID of the Microsoft Teams tenant.
     * 
     * The following arguments are optional:
     * 
     */
    public Optional<Output<String>> tenantId() {
        return Optional.ofNullable(this.tenantId);
    }

    @Import(name="timeouts")
    private @Nullable Output<TeamsChannelConfigurationTimeoutsArgs> timeouts;

    public Optional<Output<TeamsChannelConfigurationTimeoutsArgs>> timeouts() {
        return Optional.ofNullable(this.timeouts);
    }

    /**
     * Enables use of a user role requirement in your chat configuration.
     * 
     */
    @Import(name="userAuthorizationRequired")
    private @Nullable Output<Boolean> userAuthorizationRequired;

    /**
     * @return Enables use of a user role requirement in your chat configuration.
     * 
     */
    public Optional<Output<Boolean>> userAuthorizationRequired() {
        return Optional.ofNullable(this.userAuthorizationRequired);
    }

    private TeamsChannelConfigurationState() {}

    private TeamsChannelConfigurationState(TeamsChannelConfigurationState $) {
        this.channelId = $.channelId;
        this.channelName = $.channelName;
        this.chatConfigurationArn = $.chatConfigurationArn;
        this.configurationName = $.configurationName;
        this.guardrailPolicyArns = $.guardrailPolicyArns;
        this.iamRoleArn = $.iamRoleArn;
        this.loggingLevel = $.loggingLevel;
        this.snsTopicArns = $.snsTopicArns;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
        this.teamId = $.teamId;
        this.teamName = $.teamName;
        this.tenantId = $.tenantId;
        this.timeouts = $.timeouts;
        this.userAuthorizationRequired = $.userAuthorizationRequired;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TeamsChannelConfigurationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TeamsChannelConfigurationState $;

        public Builder() {
            $ = new TeamsChannelConfigurationState();
        }

        public Builder(TeamsChannelConfigurationState defaults) {
            $ = new TeamsChannelConfigurationState(Objects.requireNonNull(defaults));
        }

        /**
         * @param channelId ID of the Microsoft Teams channel.
         * 
         * @return builder
         * 
         */
        public Builder channelId(@Nullable Output<String> channelId) {
            $.channelId = channelId;
            return this;
        }

        /**
         * @param channelId ID of the Microsoft Teams channel.
         * 
         * @return builder
         * 
         */
        public Builder channelId(String channelId) {
            return channelId(Output.of(channelId));
        }

        /**
         * @param channelName Name of the Microsoft Teams channel.
         * 
         * @return builder
         * 
         */
        public Builder channelName(@Nullable Output<String> channelName) {
            $.channelName = channelName;
            return this;
        }

        /**
         * @param channelName Name of the Microsoft Teams channel.
         * 
         * @return builder
         * 
         */
        public Builder channelName(String channelName) {
            return channelName(Output.of(channelName));
        }

        /**
         * @param chatConfigurationArn ARN of the Microsoft Teams channel configuration.
         * 
         * @return builder
         * 
         */
        public Builder chatConfigurationArn(@Nullable Output<String> chatConfigurationArn) {
            $.chatConfigurationArn = chatConfigurationArn;
            return this;
        }

        /**
         * @param chatConfigurationArn ARN of the Microsoft Teams channel configuration.
         * 
         * @return builder
         * 
         */
        public Builder chatConfigurationArn(String chatConfigurationArn) {
            return chatConfigurationArn(Output.of(chatConfigurationArn));
        }

        /**
         * @param configurationName Name of the Microsoft Teams channel configuration.
         * 
         * @return builder
         * 
         */
        public Builder configurationName(@Nullable Output<String> configurationName) {
            $.configurationName = configurationName;
            return this;
        }

        /**
         * @param configurationName Name of the Microsoft Teams channel configuration.
         * 
         * @return builder
         * 
         */
        public Builder configurationName(String configurationName) {
            return configurationName(Output.of(configurationName));
        }

        /**
         * @param guardrailPolicyArns List of IAM policy ARNs that are applied as channel guardrails. The AWS managed `AdministratorAccess` policy is applied by default if this is not set.
         * 
         * @return builder
         * 
         */
        public Builder guardrailPolicyArns(@Nullable Output<List<String>> guardrailPolicyArns) {
            $.guardrailPolicyArns = guardrailPolicyArns;
            return this;
        }

        /**
         * @param guardrailPolicyArns List of IAM policy ARNs that are applied as channel guardrails. The AWS managed `AdministratorAccess` policy is applied by default if this is not set.
         * 
         * @return builder
         * 
         */
        public Builder guardrailPolicyArns(List<String> guardrailPolicyArns) {
            return guardrailPolicyArns(Output.of(guardrailPolicyArns));
        }

        /**
         * @param guardrailPolicyArns List of IAM policy ARNs that are applied as channel guardrails. The AWS managed `AdministratorAccess` policy is applied by default if this is not set.
         * 
         * @return builder
         * 
         */
        public Builder guardrailPolicyArns(String... guardrailPolicyArns) {
            return guardrailPolicyArns(List.of(guardrailPolicyArns));
        }

        /**
         * @param iamRoleArn ARN of the IAM role that defines the permissions for AWS Chatbot. This is a user-defined role that AWS Chatbot will assume. This is not the service-linked role.
         * 
         * @return builder
         * 
         */
        public Builder iamRoleArn(@Nullable Output<String> iamRoleArn) {
            $.iamRoleArn = iamRoleArn;
            return this;
        }

        /**
         * @param iamRoleArn ARN of the IAM role that defines the permissions for AWS Chatbot. This is a user-defined role that AWS Chatbot will assume. This is not the service-linked role.
         * 
         * @return builder
         * 
         */
        public Builder iamRoleArn(String iamRoleArn) {
            return iamRoleArn(Output.of(iamRoleArn));
        }

        /**
         * @param loggingLevel Logging levels include `ERROR`, `INFO`, or `NONE`.
         * 
         * @return builder
         * 
         */
        public Builder loggingLevel(@Nullable Output<String> loggingLevel) {
            $.loggingLevel = loggingLevel;
            return this;
        }

        /**
         * @param loggingLevel Logging levels include `ERROR`, `INFO`, or `NONE`.
         * 
         * @return builder
         * 
         */
        public Builder loggingLevel(String loggingLevel) {
            return loggingLevel(Output.of(loggingLevel));
        }

        /**
         * @param snsTopicArns ARNs of the SNS topics that deliver notifications to AWS Chatbot.
         * 
         * @return builder
         * 
         */
        public Builder snsTopicArns(@Nullable Output<List<String>> snsTopicArns) {
            $.snsTopicArns = snsTopicArns;
            return this;
        }

        /**
         * @param snsTopicArns ARNs of the SNS topics that deliver notifications to AWS Chatbot.
         * 
         * @return builder
         * 
         */
        public Builder snsTopicArns(List<String> snsTopicArns) {
            return snsTopicArns(Output.of(snsTopicArns));
        }

        /**
         * @param snsTopicArns ARNs of the SNS topics that deliver notifications to AWS Chatbot.
         * 
         * @return builder
         * 
         */
        public Builder snsTopicArns(String... snsTopicArns) {
            return snsTopicArns(List.of(snsTopicArns));
        }

        /**
         * @param tags Map of tags assigned to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Map of tags assigned to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tagsAll Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
         * 
         * @return builder
         * 
         * @deprecated
         * Please use `tags` instead.
         * 
         */
        @Deprecated /* Please use `tags` instead. */
        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        /**
         * @param tagsAll Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
         * 
         * @return builder
         * 
         * @deprecated
         * Please use `tags` instead.
         * 
         */
        @Deprecated /* Please use `tags` instead. */
        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        /**
         * @param teamId ID of the Microsoft Team authorized with AWS Chatbot. To get the team ID, you must perform the initial authorization flow with Microsoft Teams in the AWS Chatbot console. Then you can copy and paste the team ID from the console.
         * 
         * @return builder
         * 
         */
        public Builder teamId(@Nullable Output<String> teamId) {
            $.teamId = teamId;
            return this;
        }

        /**
         * @param teamId ID of the Microsoft Team authorized with AWS Chatbot. To get the team ID, you must perform the initial authorization flow with Microsoft Teams in the AWS Chatbot console. Then you can copy and paste the team ID from the console.
         * 
         * @return builder
         * 
         */
        public Builder teamId(String teamId) {
            return teamId(Output.of(teamId));
        }

        /**
         * @param teamName Name of the Microsoft Teams team.
         * 
         * @return builder
         * 
         */
        public Builder teamName(@Nullable Output<String> teamName) {
            $.teamName = teamName;
            return this;
        }

        /**
         * @param teamName Name of the Microsoft Teams team.
         * 
         * @return builder
         * 
         */
        public Builder teamName(String teamName) {
            return teamName(Output.of(teamName));
        }

        /**
         * @param tenantId ID of the Microsoft Teams tenant.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder tenantId(@Nullable Output<String> tenantId) {
            $.tenantId = tenantId;
            return this;
        }

        /**
         * @param tenantId ID of the Microsoft Teams tenant.
         * 
         * The following arguments are optional:
         * 
         * @return builder
         * 
         */
        public Builder tenantId(String tenantId) {
            return tenantId(Output.of(tenantId));
        }

        public Builder timeouts(@Nullable Output<TeamsChannelConfigurationTimeoutsArgs> timeouts) {
            $.timeouts = timeouts;
            return this;
        }

        public Builder timeouts(TeamsChannelConfigurationTimeoutsArgs timeouts) {
            return timeouts(Output.of(timeouts));
        }

        /**
         * @param userAuthorizationRequired Enables use of a user role requirement in your chat configuration.
         * 
         * @return builder
         * 
         */
        public Builder userAuthorizationRequired(@Nullable Output<Boolean> userAuthorizationRequired) {
            $.userAuthorizationRequired = userAuthorizationRequired;
            return this;
        }

        /**
         * @param userAuthorizationRequired Enables use of a user role requirement in your chat configuration.
         * 
         * @return builder
         * 
         */
        public Builder userAuthorizationRequired(Boolean userAuthorizationRequired) {
            return userAuthorizationRequired(Output.of(userAuthorizationRequired));
        }

        public TeamsChannelConfigurationState build() {
            return $;
        }
    }

}
