// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.lightsail.inputs;

import com.pulumi.aws.lightsail.inputs.InstancePublicPortsPortInfoArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstancePublicPortsState extends com.pulumi.resources.ResourceArgs {

    public static final InstancePublicPortsState Empty = new InstancePublicPortsState();

    /**
     * Name of the Lightsail Instance.
     * 
     */
    @Import(name="instanceName")
    private @Nullable Output<String> instanceName;

    /**
     * @return Name of the Lightsail Instance.
     * 
     */
    public Optional<Output<String>> instanceName() {
        return Optional.ofNullable(this.instanceName);
    }

    /**
     * Configuration block with port information. AWS closes all currently open ports that are not included in the `port_info`. Detailed below.
     * 
     */
    @Import(name="portInfos")
    private @Nullable Output<List<InstancePublicPortsPortInfoArgs>> portInfos;

    /**
     * @return Configuration block with port information. AWS closes all currently open ports that are not included in the `port_info`. Detailed below.
     * 
     */
    public Optional<Output<List<InstancePublicPortsPortInfoArgs>>> portInfos() {
        return Optional.ofNullable(this.portInfos);
    }

    private InstancePublicPortsState() {}

    private InstancePublicPortsState(InstancePublicPortsState $) {
        this.instanceName = $.instanceName;
        this.portInfos = $.portInfos;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstancePublicPortsState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstancePublicPortsState $;

        public Builder() {
            $ = new InstancePublicPortsState();
        }

        public Builder(InstancePublicPortsState defaults) {
            $ = new InstancePublicPortsState(Objects.requireNonNull(defaults));
        }

        /**
         * @param instanceName Name of the Lightsail Instance.
         * 
         * @return builder
         * 
         */
        public Builder instanceName(@Nullable Output<String> instanceName) {
            $.instanceName = instanceName;
            return this;
        }

        /**
         * @param instanceName Name of the Lightsail Instance.
         * 
         * @return builder
         * 
         */
        public Builder instanceName(String instanceName) {
            return instanceName(Output.of(instanceName));
        }

        /**
         * @param portInfos Configuration block with port information. AWS closes all currently open ports that are not included in the `port_info`. Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder portInfos(@Nullable Output<List<InstancePublicPortsPortInfoArgs>> portInfos) {
            $.portInfos = portInfos;
            return this;
        }

        /**
         * @param portInfos Configuration block with port information. AWS closes all currently open ports that are not included in the `port_info`. Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder portInfos(List<InstancePublicPortsPortInfoArgs> portInfos) {
            return portInfos(Output.of(portInfos));
        }

        /**
         * @param portInfos Configuration block with port information. AWS closes all currently open ports that are not included in the `port_info`. Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder portInfos(InstancePublicPortsPortInfoArgs... portInfos) {
            return portInfos(List.of(portInfos));
        }

        public InstancePublicPortsState build() {
            return $;
        }
    }

}
