// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.cloudwatch.inputs;

import com.pulumi.aws.cloudwatch.inputs.EventEndpointEventBusArgs;
import com.pulumi.aws.cloudwatch.inputs.EventEndpointReplicationConfigArgs;
import com.pulumi.aws.cloudwatch.inputs.EventEndpointRoutingConfigArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EventEndpointState extends com.pulumi.resources.ResourceArgs {

    public static final EventEndpointState Empty = new EventEndpointState();

    /**
     * The ARN of the endpoint that was created.
     * 
     */
    @Import(name="arn")
    private @Nullable Output<String> arn;

    /**
     * @return The ARN of the endpoint that was created.
     * 
     */
    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    /**
     * A description of the global endpoint.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A description of the global endpoint.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The URL of the endpoint that was created.
     * 
     */
    @Import(name="endpointUrl")
    private @Nullable Output<String> endpointUrl;

    /**
     * @return The URL of the endpoint that was created.
     * 
     */
    public Optional<Output<String>> endpointUrl() {
        return Optional.ofNullable(this.endpointUrl);
    }

    /**
     * The event buses to use. The names of the event buses must be identical in each Region. Exactly two event buses are required. Documented below.
     * 
     */
    @Import(name="eventBuses")
    private @Nullable Output<List<EventEndpointEventBusArgs>> eventBuses;

    /**
     * @return The event buses to use. The names of the event buses must be identical in each Region. Exactly two event buses are required. Documented below.
     * 
     */
    public Optional<Output<List<EventEndpointEventBusArgs>>> eventBuses() {
        return Optional.ofNullable(this.eventBuses);
    }

    /**
     * The name of the global endpoint.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the global endpoint.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Parameters used for replication. Documented below.
     * 
     */
    @Import(name="replicationConfig")
    private @Nullable Output<EventEndpointReplicationConfigArgs> replicationConfig;

    /**
     * @return Parameters used for replication. Documented below.
     * 
     */
    public Optional<Output<EventEndpointReplicationConfigArgs>> replicationConfig() {
        return Optional.ofNullable(this.replicationConfig);
    }

    /**
     * The ARN of the IAM role used for replication between event buses.
     * 
     */
    @Import(name="roleArn")
    private @Nullable Output<String> roleArn;

    /**
     * @return The ARN of the IAM role used for replication between event buses.
     * 
     */
    public Optional<Output<String>> roleArn() {
        return Optional.ofNullable(this.roleArn);
    }

    /**
     * Parameters used for routing, including the health check and secondary Region. Documented below.
     * 
     */
    @Import(name="routingConfig")
    private @Nullable Output<EventEndpointRoutingConfigArgs> routingConfig;

    /**
     * @return Parameters used for routing, including the health check and secondary Region. Documented below.
     * 
     */
    public Optional<Output<EventEndpointRoutingConfigArgs>> routingConfig() {
        return Optional.ofNullable(this.routingConfig);
    }

    private EventEndpointState() {}

    private EventEndpointState(EventEndpointState $) {
        this.arn = $.arn;
        this.description = $.description;
        this.endpointUrl = $.endpointUrl;
        this.eventBuses = $.eventBuses;
        this.name = $.name;
        this.replicationConfig = $.replicationConfig;
        this.roleArn = $.roleArn;
        this.routingConfig = $.routingConfig;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EventEndpointState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EventEndpointState $;

        public Builder() {
            $ = new EventEndpointState();
        }

        public Builder(EventEndpointState defaults) {
            $ = new EventEndpointState(Objects.requireNonNull(defaults));
        }

        /**
         * @param arn The ARN of the endpoint that was created.
         * 
         * @return builder
         * 
         */
        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        /**
         * @param arn The ARN of the endpoint that was created.
         * 
         * @return builder
         * 
         */
        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        /**
         * @param description A description of the global endpoint.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A description of the global endpoint.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param endpointUrl The URL of the endpoint that was created.
         * 
         * @return builder
         * 
         */
        public Builder endpointUrl(@Nullable Output<String> endpointUrl) {
            $.endpointUrl = endpointUrl;
            return this;
        }

        /**
         * @param endpointUrl The URL of the endpoint that was created.
         * 
         * @return builder
         * 
         */
        public Builder endpointUrl(String endpointUrl) {
            return endpointUrl(Output.of(endpointUrl));
        }

        /**
         * @param eventBuses The event buses to use. The names of the event buses must be identical in each Region. Exactly two event buses are required. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder eventBuses(@Nullable Output<List<EventEndpointEventBusArgs>> eventBuses) {
            $.eventBuses = eventBuses;
            return this;
        }

        /**
         * @param eventBuses The event buses to use. The names of the event buses must be identical in each Region. Exactly two event buses are required. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder eventBuses(List<EventEndpointEventBusArgs> eventBuses) {
            return eventBuses(Output.of(eventBuses));
        }

        /**
         * @param eventBuses The event buses to use. The names of the event buses must be identical in each Region. Exactly two event buses are required. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder eventBuses(EventEndpointEventBusArgs... eventBuses) {
            return eventBuses(List.of(eventBuses));
        }

        /**
         * @param name The name of the global endpoint.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the global endpoint.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param replicationConfig Parameters used for replication. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder replicationConfig(@Nullable Output<EventEndpointReplicationConfigArgs> replicationConfig) {
            $.replicationConfig = replicationConfig;
            return this;
        }

        /**
         * @param replicationConfig Parameters used for replication. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder replicationConfig(EventEndpointReplicationConfigArgs replicationConfig) {
            return replicationConfig(Output.of(replicationConfig));
        }

        /**
         * @param roleArn The ARN of the IAM role used for replication between event buses.
         * 
         * @return builder
         * 
         */
        public Builder roleArn(@Nullable Output<String> roleArn) {
            $.roleArn = roleArn;
            return this;
        }

        /**
         * @param roleArn The ARN of the IAM role used for replication between event buses.
         * 
         * @return builder
         * 
         */
        public Builder roleArn(String roleArn) {
            return roleArn(Output.of(roleArn));
        }

        /**
         * @param routingConfig Parameters used for routing, including the health check and secondary Region. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder routingConfig(@Nullable Output<EventEndpointRoutingConfigArgs> routingConfig) {
            $.routingConfig = routingConfig;
            return this;
        }

        /**
         * @param routingConfig Parameters used for routing, including the health check and secondary Region. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder routingConfig(EventEndpointRoutingConfigArgs routingConfig) {
            return routingConfig(Output.of(routingConfig));
        }

        public EventEndpointState build() {
            return $;
        }
    }

}
