// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.licensemanager.outputs;

import com.pulumi.aws.licensemanager.outputs.GetReceivedLicenseConsumptionConfigurationBorrowConfiguration;
import com.pulumi.aws.licensemanager.outputs.GetReceivedLicenseConsumptionConfigurationProvisionalConfiguration;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetReceivedLicenseConsumptionConfiguration {
    /**
     * @return Details about a borrow configuration. Detailed below
     * 
     */
    private List<GetReceivedLicenseConsumptionConfigurationBorrowConfiguration> borrowConfigurations;
    /**
     * @return Details about a provisional configuration. Detailed below
     * 
     */
    private List<GetReceivedLicenseConsumptionConfigurationProvisionalConfiguration> provisionalConfigurations;
    private String renewType;

    private GetReceivedLicenseConsumptionConfiguration() {}
    /**
     * @return Details about a borrow configuration. Detailed below
     * 
     */
    public List<GetReceivedLicenseConsumptionConfigurationBorrowConfiguration> borrowConfigurations() {
        return this.borrowConfigurations;
    }
    /**
     * @return Details about a provisional configuration. Detailed below
     * 
     */
    public List<GetReceivedLicenseConsumptionConfigurationProvisionalConfiguration> provisionalConfigurations() {
        return this.provisionalConfigurations;
    }
    public String renewType() {
        return this.renewType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetReceivedLicenseConsumptionConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetReceivedLicenseConsumptionConfigurationBorrowConfiguration> borrowConfigurations;
        private List<GetReceivedLicenseConsumptionConfigurationProvisionalConfiguration> provisionalConfigurations;
        private String renewType;
        public Builder() {}
        public Builder(GetReceivedLicenseConsumptionConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.borrowConfigurations = defaults.borrowConfigurations;
    	      this.provisionalConfigurations = defaults.provisionalConfigurations;
    	      this.renewType = defaults.renewType;
        }

        @CustomType.Setter
        public Builder borrowConfigurations(List<GetReceivedLicenseConsumptionConfigurationBorrowConfiguration> borrowConfigurations) {
            if (borrowConfigurations == null) {
              throw new MissingRequiredPropertyException("GetReceivedLicenseConsumptionConfiguration", "borrowConfigurations");
            }
            this.borrowConfigurations = borrowConfigurations;
            return this;
        }
        public Builder borrowConfigurations(GetReceivedLicenseConsumptionConfigurationBorrowConfiguration... borrowConfigurations) {
            return borrowConfigurations(List.of(borrowConfigurations));
        }
        @CustomType.Setter
        public Builder provisionalConfigurations(List<GetReceivedLicenseConsumptionConfigurationProvisionalConfiguration> provisionalConfigurations) {
            if (provisionalConfigurations == null) {
              throw new MissingRequiredPropertyException("GetReceivedLicenseConsumptionConfiguration", "provisionalConfigurations");
            }
            this.provisionalConfigurations = provisionalConfigurations;
            return this;
        }
        public Builder provisionalConfigurations(GetReceivedLicenseConsumptionConfigurationProvisionalConfiguration... provisionalConfigurations) {
            return provisionalConfigurations(List.of(provisionalConfigurations));
        }
        @CustomType.Setter
        public Builder renewType(String renewType) {
            if (renewType == null) {
              throw new MissingRequiredPropertyException("GetReceivedLicenseConsumptionConfiguration", "renewType");
            }
            this.renewType = renewType;
            return this;
        }
        public GetReceivedLicenseConsumptionConfiguration build() {
            final var _resultValue = new GetReceivedLicenseConsumptionConfiguration();
            _resultValue.borrowConfigurations = borrowConfigurations;
            _resultValue.provisionalConfigurations = provisionalConfigurations;
            _resultValue.renewType = renewType;
            return _resultValue;
        }
    }
}
