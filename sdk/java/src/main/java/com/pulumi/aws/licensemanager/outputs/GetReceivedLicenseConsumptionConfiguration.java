// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.licensemanager.outputs;

import com.pulumi.aws.licensemanager.outputs.GetReceivedLicenseConsumptionConfigurationBorrowConfiguration;
import com.pulumi.aws.licensemanager.outputs.GetReceivedLicenseConsumptionConfigurationProvisionalConfiguration;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetReceivedLicenseConsumptionConfiguration {
    /**
     * @return Details about a borrow configuration. Detailed below
     * 
     */
    private @Nullable List<GetReceivedLicenseConsumptionConfigurationBorrowConfiguration> borrowConfigurations;
    /**
     * @return Details about a provisional configuration. Detailed below
     * 
     */
    private @Nullable List<GetReceivedLicenseConsumptionConfigurationProvisionalConfiguration> provisionalConfigurations;
    private @Nullable String renewType;

    private GetReceivedLicenseConsumptionConfiguration() {}
    /**
     * @return Details about a borrow configuration. Detailed below
     * 
     */
    public List<GetReceivedLicenseConsumptionConfigurationBorrowConfiguration> borrowConfigurations() {
        return this.borrowConfigurations == null ? List.of() : this.borrowConfigurations;
    }
    /**
     * @return Details about a provisional configuration. Detailed below
     * 
     */
    public List<GetReceivedLicenseConsumptionConfigurationProvisionalConfiguration> provisionalConfigurations() {
        return this.provisionalConfigurations == null ? List.of() : this.provisionalConfigurations;
    }
    public Optional<String> renewType() {
        return Optional.ofNullable(this.renewType);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetReceivedLicenseConsumptionConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<GetReceivedLicenseConsumptionConfigurationBorrowConfiguration> borrowConfigurations;
        private @Nullable List<GetReceivedLicenseConsumptionConfigurationProvisionalConfiguration> provisionalConfigurations;
        private @Nullable String renewType;
        public Builder() {}
        public Builder(GetReceivedLicenseConsumptionConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.borrowConfigurations = defaults.borrowConfigurations;
    	      this.provisionalConfigurations = defaults.provisionalConfigurations;
    	      this.renewType = defaults.renewType;
        }

        @CustomType.Setter
        public Builder borrowConfigurations(@Nullable List<GetReceivedLicenseConsumptionConfigurationBorrowConfiguration> borrowConfigurations) {
            this.borrowConfigurations = borrowConfigurations;
            return this;
        }
        public Builder borrowConfigurations(GetReceivedLicenseConsumptionConfigurationBorrowConfiguration... borrowConfigurations) {
            return borrowConfigurations(List.of(borrowConfigurations));
        }
        @CustomType.Setter
        public Builder provisionalConfigurations(@Nullable List<GetReceivedLicenseConsumptionConfigurationProvisionalConfiguration> provisionalConfigurations) {
            this.provisionalConfigurations = provisionalConfigurations;
            return this;
        }
        public Builder provisionalConfigurations(GetReceivedLicenseConsumptionConfigurationProvisionalConfiguration... provisionalConfigurations) {
            return provisionalConfigurations(List.of(provisionalConfigurations));
        }
        @CustomType.Setter
        public Builder renewType(@Nullable String renewType) {
            this.renewType = renewType;
            return this;
        }
        public GetReceivedLicenseConsumptionConfiguration build() {
            final var o = new GetReceivedLicenseConsumptionConfiguration();
            o.borrowConfigurations = borrowConfigurations;
            o.provisionalConfigurations = provisionalConfigurations;
            o.renewType = renewType;
            return o;
        }
    }
}
