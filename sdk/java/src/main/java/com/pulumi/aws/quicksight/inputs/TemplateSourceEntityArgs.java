// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.inputs;

import com.pulumi.aws.quicksight.inputs.TemplateSourceEntitySourceAnalysisArgs;
import com.pulumi.aws.quicksight.inputs.TemplateSourceEntitySourceTemplateArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TemplateSourceEntityArgs extends com.pulumi.resources.ResourceArgs {

    public static final TemplateSourceEntityArgs Empty = new TemplateSourceEntityArgs();

    /**
     * The source analysis, if it is based on an analysis.. Only one of `source_analysis` or `source_template` should be configured. See source_analysis.
     * 
     */
    @Import(name="sourceAnalysis")
    private @Nullable Output<TemplateSourceEntitySourceAnalysisArgs> sourceAnalysis;

    /**
     * @return The source analysis, if it is based on an analysis.. Only one of `source_analysis` or `source_template` should be configured. See source_analysis.
     * 
     */
    public Optional<Output<TemplateSourceEntitySourceAnalysisArgs>> sourceAnalysis() {
        return Optional.ofNullable(this.sourceAnalysis);
    }

    /**
     * The source template, if it is based on an template.. Only one of `source_analysis` or `source_template` should be configured. See source_template.
     * 
     */
    @Import(name="sourceTemplate")
    private @Nullable Output<TemplateSourceEntitySourceTemplateArgs> sourceTemplate;

    /**
     * @return The source template, if it is based on an template.. Only one of `source_analysis` or `source_template` should be configured. See source_template.
     * 
     */
    public Optional<Output<TemplateSourceEntitySourceTemplateArgs>> sourceTemplate() {
        return Optional.ofNullable(this.sourceTemplate);
    }

    private TemplateSourceEntityArgs() {}

    private TemplateSourceEntityArgs(TemplateSourceEntityArgs $) {
        this.sourceAnalysis = $.sourceAnalysis;
        this.sourceTemplate = $.sourceTemplate;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TemplateSourceEntityArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TemplateSourceEntityArgs $;

        public Builder() {
            $ = new TemplateSourceEntityArgs();
        }

        public Builder(TemplateSourceEntityArgs defaults) {
            $ = new TemplateSourceEntityArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param sourceAnalysis The source analysis, if it is based on an analysis.. Only one of `source_analysis` or `source_template` should be configured. See source_analysis.
         * 
         * @return builder
         * 
         */
        public Builder sourceAnalysis(@Nullable Output<TemplateSourceEntitySourceAnalysisArgs> sourceAnalysis) {
            $.sourceAnalysis = sourceAnalysis;
            return this;
        }

        /**
         * @param sourceAnalysis The source analysis, if it is based on an analysis.. Only one of `source_analysis` or `source_template` should be configured. See source_analysis.
         * 
         * @return builder
         * 
         */
        public Builder sourceAnalysis(TemplateSourceEntitySourceAnalysisArgs sourceAnalysis) {
            return sourceAnalysis(Output.of(sourceAnalysis));
        }

        /**
         * @param sourceTemplate The source template, if it is based on an template.. Only one of `source_analysis` or `source_template` should be configured. See source_template.
         * 
         * @return builder
         * 
         */
        public Builder sourceTemplate(@Nullable Output<TemplateSourceEntitySourceTemplateArgs> sourceTemplate) {
            $.sourceTemplate = sourceTemplate;
            return this;
        }

        /**
         * @param sourceTemplate The source template, if it is based on an template.. Only one of `source_analysis` or `source_template` should be configured. See source_template.
         * 
         * @return builder
         * 
         */
        public Builder sourceTemplate(TemplateSourceEntitySourceTemplateArgs sourceTemplate) {
            return sourceTemplate(Output.of(sourceTemplate));
        }

        public TemplateSourceEntityArgs build() {
            return $;
        }
    }

}
