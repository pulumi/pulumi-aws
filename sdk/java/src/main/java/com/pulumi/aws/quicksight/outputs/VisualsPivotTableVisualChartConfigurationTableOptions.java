// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.outputs;

import com.pulumi.aws.quicksight.outputs.CellStyle;
import com.pulumi.aws.quicksight.outputs.VisualsPivotTableVisualChartConfigurationTableOptionsRowAlternateColorOptions;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class VisualsPivotTableVisualChartConfigurationTableOptions {
    private @Nullable CellStyle cellStyle;
    private @Nullable String collapsedRowDimensionsVisibility;
    private @Nullable CellStyle columnHeaderStyle;
    private @Nullable String columnNamesVisibility;
    private @Nullable String metricPlacement;
    private @Nullable VisualsPivotTableVisualChartConfigurationTableOptionsRowAlternateColorOptions rowAlternateColorOptions;
    private @Nullable CellStyle rowFieldNamesStyle;
    private @Nullable CellStyle rowHeaderStyle;
    private @Nullable String singleMetricVisibility;
    private @Nullable String toggleButtonsVisibility;

    private VisualsPivotTableVisualChartConfigurationTableOptions() {}
    public Optional<CellStyle> cellStyle() {
        return Optional.ofNullable(this.cellStyle);
    }
    public Optional<String> collapsedRowDimensionsVisibility() {
        return Optional.ofNullable(this.collapsedRowDimensionsVisibility);
    }
    public Optional<CellStyle> columnHeaderStyle() {
        return Optional.ofNullable(this.columnHeaderStyle);
    }
    public Optional<String> columnNamesVisibility() {
        return Optional.ofNullable(this.columnNamesVisibility);
    }
    public Optional<String> metricPlacement() {
        return Optional.ofNullable(this.metricPlacement);
    }
    public Optional<VisualsPivotTableVisualChartConfigurationTableOptionsRowAlternateColorOptions> rowAlternateColorOptions() {
        return Optional.ofNullable(this.rowAlternateColorOptions);
    }
    public Optional<CellStyle> rowFieldNamesStyle() {
        return Optional.ofNullable(this.rowFieldNamesStyle);
    }
    public Optional<CellStyle> rowHeaderStyle() {
        return Optional.ofNullable(this.rowHeaderStyle);
    }
    public Optional<String> singleMetricVisibility() {
        return Optional.ofNullable(this.singleMetricVisibility);
    }
    public Optional<String> toggleButtonsVisibility() {
        return Optional.ofNullable(this.toggleButtonsVisibility);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VisualsPivotTableVisualChartConfigurationTableOptions defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable CellStyle cellStyle;
        private @Nullable String collapsedRowDimensionsVisibility;
        private @Nullable CellStyle columnHeaderStyle;
        private @Nullable String columnNamesVisibility;
        private @Nullable String metricPlacement;
        private @Nullable VisualsPivotTableVisualChartConfigurationTableOptionsRowAlternateColorOptions rowAlternateColorOptions;
        private @Nullable CellStyle rowFieldNamesStyle;
        private @Nullable CellStyle rowHeaderStyle;
        private @Nullable String singleMetricVisibility;
        private @Nullable String toggleButtonsVisibility;
        public Builder() {}
        public Builder(VisualsPivotTableVisualChartConfigurationTableOptions defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cellStyle = defaults.cellStyle;
    	      this.collapsedRowDimensionsVisibility = defaults.collapsedRowDimensionsVisibility;
    	      this.columnHeaderStyle = defaults.columnHeaderStyle;
    	      this.columnNamesVisibility = defaults.columnNamesVisibility;
    	      this.metricPlacement = defaults.metricPlacement;
    	      this.rowAlternateColorOptions = defaults.rowAlternateColorOptions;
    	      this.rowFieldNamesStyle = defaults.rowFieldNamesStyle;
    	      this.rowHeaderStyle = defaults.rowHeaderStyle;
    	      this.singleMetricVisibility = defaults.singleMetricVisibility;
    	      this.toggleButtonsVisibility = defaults.toggleButtonsVisibility;
        }

        @CustomType.Setter
        public Builder cellStyle(@Nullable CellStyle cellStyle) {

            this.cellStyle = cellStyle;
            return this;
        }
        @CustomType.Setter
        public Builder collapsedRowDimensionsVisibility(@Nullable String collapsedRowDimensionsVisibility) {

            this.collapsedRowDimensionsVisibility = collapsedRowDimensionsVisibility;
            return this;
        }
        @CustomType.Setter
        public Builder columnHeaderStyle(@Nullable CellStyle columnHeaderStyle) {

            this.columnHeaderStyle = columnHeaderStyle;
            return this;
        }
        @CustomType.Setter
        public Builder columnNamesVisibility(@Nullable String columnNamesVisibility) {

            this.columnNamesVisibility = columnNamesVisibility;
            return this;
        }
        @CustomType.Setter
        public Builder metricPlacement(@Nullable String metricPlacement) {

            this.metricPlacement = metricPlacement;
            return this;
        }
        @CustomType.Setter
        public Builder rowAlternateColorOptions(@Nullable VisualsPivotTableVisualChartConfigurationTableOptionsRowAlternateColorOptions rowAlternateColorOptions) {

            this.rowAlternateColorOptions = rowAlternateColorOptions;
            return this;
        }
        @CustomType.Setter
        public Builder rowFieldNamesStyle(@Nullable CellStyle rowFieldNamesStyle) {

            this.rowFieldNamesStyle = rowFieldNamesStyle;
            return this;
        }
        @CustomType.Setter
        public Builder rowHeaderStyle(@Nullable CellStyle rowHeaderStyle) {

            this.rowHeaderStyle = rowHeaderStyle;
            return this;
        }
        @CustomType.Setter
        public Builder singleMetricVisibility(@Nullable String singleMetricVisibility) {

            this.singleMetricVisibility = singleMetricVisibility;
            return this;
        }
        @CustomType.Setter
        public Builder toggleButtonsVisibility(@Nullable String toggleButtonsVisibility) {

            this.toggleButtonsVisibility = toggleButtonsVisibility;
            return this;
        }
        public VisualsPivotTableVisualChartConfigurationTableOptions build() {
            final var _resultValue = new VisualsPivotTableVisualChartConfigurationTableOptions();
            _resultValue.cellStyle = cellStyle;
            _resultValue.collapsedRowDimensionsVisibility = collapsedRowDimensionsVisibility;
            _resultValue.columnHeaderStyle = columnHeaderStyle;
            _resultValue.columnNamesVisibility = columnNamesVisibility;
            _resultValue.metricPlacement = metricPlacement;
            _resultValue.rowAlternateColorOptions = rowAlternateColorOptions;
            _resultValue.rowFieldNamesStyle = rowFieldNamesStyle;
            _resultValue.rowHeaderStyle = rowHeaderStyle;
            _resultValue.singleMetricVisibility = singleMetricVisibility;
            _resultValue.toggleButtonsVisibility = toggleButtonsVisibility;
            return _resultValue;
        }
    }
}
