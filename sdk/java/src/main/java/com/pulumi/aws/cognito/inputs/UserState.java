// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.cognito.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UserState extends com.pulumi.resources.ResourceArgs {

    public static final UserState Empty = new UserState();

    @Import(name="attributes")
    private @Nullable Output<Map<String,String>> attributes;

    public Optional<Output<Map<String,String>>> attributes() {
        return Optional.ofNullable(this.attributes);
    }

    @Import(name="clientMetadata")
    private @Nullable Output<Map<String,String>> clientMetadata;

    public Optional<Output<Map<String,String>>> clientMetadata() {
        return Optional.ofNullable(this.clientMetadata);
    }

    @Import(name="creationDate")
    private @Nullable Output<String> creationDate;

    public Optional<Output<String>> creationDate() {
        return Optional.ofNullable(this.creationDate);
    }

    @Import(name="desiredDeliveryMediums")
    private @Nullable Output<List<String>> desiredDeliveryMediums;

    public Optional<Output<List<String>>> desiredDeliveryMediums() {
        return Optional.ofNullable(this.desiredDeliveryMediums);
    }

    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    @Import(name="forceAliasCreation")
    private @Nullable Output<Boolean> forceAliasCreation;

    public Optional<Output<Boolean>> forceAliasCreation() {
        return Optional.ofNullable(this.forceAliasCreation);
    }

    @Import(name="lastModifiedDate")
    private @Nullable Output<String> lastModifiedDate;

    public Optional<Output<String>> lastModifiedDate() {
        return Optional.ofNullable(this.lastModifiedDate);
    }

    @Import(name="messageAction")
    private @Nullable Output<String> messageAction;

    public Optional<Output<String>> messageAction() {
        return Optional.ofNullable(this.messageAction);
    }

    @Import(name="mfaSettingLists")
    private @Nullable Output<List<String>> mfaSettingLists;

    public Optional<Output<List<String>>> mfaSettingLists() {
        return Optional.ofNullable(this.mfaSettingLists);
    }

    @Import(name="password")
    private @Nullable Output<String> password;

    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    @Import(name="preferredMfaSetting")
    private @Nullable Output<String> preferredMfaSetting;

    public Optional<Output<String>> preferredMfaSetting() {
        return Optional.ofNullable(this.preferredMfaSetting);
    }

    @Import(name="status")
    private @Nullable Output<String> status;

    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    @Import(name="sub")
    private @Nullable Output<String> sub;

    public Optional<Output<String>> sub() {
        return Optional.ofNullable(this.sub);
    }

    @Import(name="temporaryPassword")
    private @Nullable Output<String> temporaryPassword;

    public Optional<Output<String>> temporaryPassword() {
        return Optional.ofNullable(this.temporaryPassword);
    }

    @Import(name="userPoolId")
    private @Nullable Output<String> userPoolId;

    public Optional<Output<String>> userPoolId() {
        return Optional.ofNullable(this.userPoolId);
    }

    @Import(name="username")
    private @Nullable Output<String> username;

    public Optional<Output<String>> username() {
        return Optional.ofNullable(this.username);
    }

    @Import(name="validationData")
    private @Nullable Output<Map<String,String>> validationData;

    public Optional<Output<Map<String,String>>> validationData() {
        return Optional.ofNullable(this.validationData);
    }

    private UserState() {}

    private UserState(UserState $) {
        this.attributes = $.attributes;
        this.clientMetadata = $.clientMetadata;
        this.creationDate = $.creationDate;
        this.desiredDeliveryMediums = $.desiredDeliveryMediums;
        this.enabled = $.enabled;
        this.forceAliasCreation = $.forceAliasCreation;
        this.lastModifiedDate = $.lastModifiedDate;
        this.messageAction = $.messageAction;
        this.mfaSettingLists = $.mfaSettingLists;
        this.password = $.password;
        this.preferredMfaSetting = $.preferredMfaSetting;
        this.status = $.status;
        this.sub = $.sub;
        this.temporaryPassword = $.temporaryPassword;
        this.userPoolId = $.userPoolId;
        this.username = $.username;
        this.validationData = $.validationData;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UserState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UserState $;

        public Builder() {
            $ = new UserState();
        }

        public Builder(UserState defaults) {
            $ = new UserState(Objects.requireNonNull(defaults));
        }

        public Builder attributes(@Nullable Output<Map<String,String>> attributes) {
            $.attributes = attributes;
            return this;
        }

        public Builder attributes(Map<String,String> attributes) {
            return attributes(Output.of(attributes));
        }

        public Builder clientMetadata(@Nullable Output<Map<String,String>> clientMetadata) {
            $.clientMetadata = clientMetadata;
            return this;
        }

        public Builder clientMetadata(Map<String,String> clientMetadata) {
            return clientMetadata(Output.of(clientMetadata));
        }

        public Builder creationDate(@Nullable Output<String> creationDate) {
            $.creationDate = creationDate;
            return this;
        }

        public Builder creationDate(String creationDate) {
            return creationDate(Output.of(creationDate));
        }

        public Builder desiredDeliveryMediums(@Nullable Output<List<String>> desiredDeliveryMediums) {
            $.desiredDeliveryMediums = desiredDeliveryMediums;
            return this;
        }

        public Builder desiredDeliveryMediums(List<String> desiredDeliveryMediums) {
            return desiredDeliveryMediums(Output.of(desiredDeliveryMediums));
        }

        public Builder desiredDeliveryMediums(String... desiredDeliveryMediums) {
            return desiredDeliveryMediums(List.of(desiredDeliveryMediums));
        }

        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        public Builder forceAliasCreation(@Nullable Output<Boolean> forceAliasCreation) {
            $.forceAliasCreation = forceAliasCreation;
            return this;
        }

        public Builder forceAliasCreation(Boolean forceAliasCreation) {
            return forceAliasCreation(Output.of(forceAliasCreation));
        }

        public Builder lastModifiedDate(@Nullable Output<String> lastModifiedDate) {
            $.lastModifiedDate = lastModifiedDate;
            return this;
        }

        public Builder lastModifiedDate(String lastModifiedDate) {
            return lastModifiedDate(Output.of(lastModifiedDate));
        }

        public Builder messageAction(@Nullable Output<String> messageAction) {
            $.messageAction = messageAction;
            return this;
        }

        public Builder messageAction(String messageAction) {
            return messageAction(Output.of(messageAction));
        }

        public Builder mfaSettingLists(@Nullable Output<List<String>> mfaSettingLists) {
            $.mfaSettingLists = mfaSettingLists;
            return this;
        }

        public Builder mfaSettingLists(List<String> mfaSettingLists) {
            return mfaSettingLists(Output.of(mfaSettingLists));
        }

        public Builder mfaSettingLists(String... mfaSettingLists) {
            return mfaSettingLists(List.of(mfaSettingLists));
        }

        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        public Builder password(String password) {
            return password(Output.of(password));
        }

        public Builder preferredMfaSetting(@Nullable Output<String> preferredMfaSetting) {
            $.preferredMfaSetting = preferredMfaSetting;
            return this;
        }

        public Builder preferredMfaSetting(String preferredMfaSetting) {
            return preferredMfaSetting(Output.of(preferredMfaSetting));
        }

        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        public Builder status(String status) {
            return status(Output.of(status));
        }

        public Builder sub(@Nullable Output<String> sub) {
            $.sub = sub;
            return this;
        }

        public Builder sub(String sub) {
            return sub(Output.of(sub));
        }

        public Builder temporaryPassword(@Nullable Output<String> temporaryPassword) {
            $.temporaryPassword = temporaryPassword;
            return this;
        }

        public Builder temporaryPassword(String temporaryPassword) {
            return temporaryPassword(Output.of(temporaryPassword));
        }

        public Builder userPoolId(@Nullable Output<String> userPoolId) {
            $.userPoolId = userPoolId;
            return this;
        }

        public Builder userPoolId(String userPoolId) {
            return userPoolId(Output.of(userPoolId));
        }

        public Builder username(@Nullable Output<String> username) {
            $.username = username;
            return this;
        }

        public Builder username(String username) {
            return username(Output.of(username));
        }

        public Builder validationData(@Nullable Output<Map<String,String>> validationData) {
            $.validationData = validationData;
            return this;
        }

        public Builder validationData(Map<String,String> validationData) {
            return validationData(Output.of(validationData));
        }

        public UserState build() {
            return $;
        }
    }

}
