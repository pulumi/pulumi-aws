// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.lightsail;

import com.pulumi.aws.Utilities;
import com.pulumi.aws.lightsail.DatabaseArgs;
import com.pulumi.aws.lightsail.inputs.DatabaseState;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages a Lightsail database. Use this resource to create and manage fully managed database instances with automated backups, monitoring, and maintenance in Lightsail.
 * 
 * &gt; **Note:** Lightsail is currently only supported in a limited number of AWS Regions, please see [&#34;Regions and Availability Zones&#34;](https://aws.amazon.com/about-aws/global-infrastructure/regional-product-services/) for more details
 * 
 * ## Example Usage
 * 
 * ### Basic MySQL Blueprint
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.aws.lightsail.Database;
 * import com.pulumi.aws.lightsail.DatabaseArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new Database("example", DatabaseArgs.builder()
 *             .relationalDatabaseName("example-database")
 *             .availabilityZone("us-east-1a")
 *             .masterDatabaseName("exampledb")
 *             .masterPassword("examplepassword123")
 *             .masterUsername("exampleuser")
 *             .blueprintId("mysql_8_0")
 *             .bundleId("micro_1_0")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ### Basic PostgreSQL Blueprint
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.aws.lightsail.Database;
 * import com.pulumi.aws.lightsail.DatabaseArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new Database("example", DatabaseArgs.builder()
 *             .relationalDatabaseName("example-database")
 *             .availabilityZone("us-east-1a")
 *             .masterDatabaseName("exampledb")
 *             .masterPassword("examplepassword123")
 *             .masterUsername("exampleuser")
 *             .blueprintId("postgres_12")
 *             .bundleId("micro_1_0")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ### Custom Backup and Maintenance Windows
 * 
 * Below is an example that sets a custom backup and maintenance window. Times are specified in UTC. This example will allow daily backups to take place between 16:00 and 16:30 each day. This example also requires any maintenance tasks (anything that would cause an outage, including changing some attributes) to take place on Tuesdays between 17:00 and 17:30. An action taken against this database that would cause an outage will wait until this time window to make the requested changes.
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.aws.lightsail.Database;
 * import com.pulumi.aws.lightsail.DatabaseArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new Database("example", DatabaseArgs.builder()
 *             .relationalDatabaseName("example-database")
 *             .availabilityZone("us-east-1a")
 *             .masterDatabaseName("exampledb")
 *             .masterPassword("examplepassword123")
 *             .masterUsername("exampleuser")
 *             .blueprintId("postgres_12")
 *             .bundleId("micro_1_0")
 *             .preferredBackupWindow("16:00-16:30")
 *             .preferredMaintenanceWindow("Tue:17:00-Tue:17:30")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ### Final Snapshots
 * 
 * To enable creating a final snapshot of your database on deletion, use the `finalSnapshotName` argument to provide a name to be used for the snapshot.
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.aws.lightsail.Database;
 * import com.pulumi.aws.lightsail.DatabaseArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new Database("example", DatabaseArgs.builder()
 *             .relationalDatabaseName("example-database")
 *             .availabilityZone("us-east-1a")
 *             .masterDatabaseName("exampledb")
 *             .masterPassword("examplepassword123")
 *             .masterUsername("exampleuser")
 *             .blueprintId("postgres_12")
 *             .bundleId("micro_1_0")
 *             .preferredBackupWindow("16:00-16:30")
 *             .preferredMaintenanceWindow("Tue:17:00-Tue:17:30")
 *             .finalSnapshotName("example-final-snapshot")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ### Apply Immediately
 * 
 * To enable applying changes immediately instead of waiting for a maintenance window, use the `applyImmediately` argument.
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.aws.lightsail.Database;
 * import com.pulumi.aws.lightsail.DatabaseArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new Database("example", DatabaseArgs.builder()
 *             .relationalDatabaseName("example-database")
 *             .availabilityZone("us-east-1a")
 *             .masterDatabaseName("exampledb")
 *             .masterPassword("examplepassword123")
 *             .masterUsername("exampleuser")
 *             .blueprintId("postgres_12")
 *             .bundleId("micro_1_0")
 *             .applyImmediately(true)
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ## Blueprint IDs
 * 
 * A list of all available Lightsail Blueprints for Relational Databases the [aws lightsail get-relational-database-blueprints](https://docs.aws.amazon.com/cli/latest/reference/lightsail/get-relational-database-blueprints.html) aws cli command.
 * 
 * ### Examples
 * 
 * - `mysql80`
 * - `postgres12`
 * 
 * ### Prefix
 * 
 * A Blueprint ID starts with a prefix of the engine type.
 * 
 * ### Suffix
 * 
 * A Blueprint ID has a suffix of the engine version.
 * 
 * ## Bundles
 * 
 * A list of all available Lightsail Bundles for Relational Databases the [aws lightsail get-relational-database-bundles](https://docs.aws.amazon.com/cli/latest/reference/lightsail/get-relational-database-bundles.html) aws cli command.
 * 
 * ### Examples
 * 
 * - `small10`
 * - `smallHa10`
 * - `large10`
 * - `largeHa10`
 * 
 * ### Prefix
 * 
 * A Bundle ID starts with one of the below size prefixes:
 * 
 * - `micro_`
 * - `small_`
 * - `medium_`
 * - `large_`
 * 
 * ### Infixes (Optional for HA Database)
 * 
 * A Bundle ID can have the following infix added in order to use the HA option of the selected bundle.
 * 
 * - `ha_`
 * 
 * ### Suffix
 * 
 * A Bundle ID ends with one of the following suffix: `10`
 * 
 * ## Import
 * 
 * Using `pulumi import`, import Lightsail Databases using their name. For example:
 * 
 * ```sh
 * $ pulumi import aws:lightsail/database:Database example example-database
 * ```
 * 
 */
@ResourceType(type="aws:lightsail/database:Database")
public class Database extends com.pulumi.resources.CustomResource {
    /**
     * Whether to apply changes immediately. When false, applies changes during the preferred maintenance window. Some changes may cause an outage.
     * 
     */
    @Export(name="applyImmediately", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> applyImmediately;

    /**
     * @return Whether to apply changes immediately. When false, applies changes during the preferred maintenance window. Some changes may cause an outage.
     * 
     */
    public Output<Boolean> applyImmediately() {
        return this.applyImmediately;
    }
    /**
     * ARN of the database (matches `id`).
     * 
     */
    @Export(name="arn", refs={String.class}, tree="[0]")
    private Output<String> arn;

    /**
     * @return ARN of the database (matches `id`).
     * 
     */
    public Output<String> arn() {
        return this.arn;
    }
    /**
     * Availability Zone in which to create your database. Use the us-east-2a case-sensitive format.
     * 
     */
    @Export(name="availabilityZone", refs={String.class}, tree="[0]")
    private Output<String> availabilityZone;

    /**
     * @return Availability Zone in which to create your database. Use the us-east-2a case-sensitive format.
     * 
     */
    public Output<String> availabilityZone() {
        return this.availabilityZone;
    }
    /**
     * Whether to enable automated backup retention for your database. When false, disables automated backup retention for your database. Disabling backup retention deletes all automated database backups. Before disabling this, you may want to create a snapshot of your database.
     * 
     */
    @Export(name="backupRetentionEnabled", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> backupRetentionEnabled;

    /**
     * @return Whether to enable automated backup retention for your database. When false, disables automated backup retention for your database. Disabling backup retention deletes all automated database backups. Before disabling this, you may want to create a snapshot of your database.
     * 
     */
    public Output<Optional<Boolean>> backupRetentionEnabled() {
        return Codegen.optional(this.backupRetentionEnabled);
    }
    /**
     * Blueprint ID for your database. A blueprint describes the major engine version of a database. You can get a list of database blueprints IDs by using the AWS CLI command: `aws lightsail get-relational-database-blueprints`
     * 
     */
    @Export(name="blueprintId", refs={String.class}, tree="[0]")
    private Output<String> blueprintId;

    /**
     * @return Blueprint ID for your database. A blueprint describes the major engine version of a database. You can get a list of database blueprints IDs by using the AWS CLI command: `aws lightsail get-relational-database-blueprints`
     * 
     */
    public Output<String> blueprintId() {
        return this.blueprintId;
    }
    /**
     * Bundle ID for your database. A bundle describes the performance specifications for your database (see list below). You can get a list of database bundle IDs by using the AWS CLI command: `aws lightsail get-relational-database-bundles`.
     * 
     */
    @Export(name="bundleId", refs={String.class}, tree="[0]")
    private Output<String> bundleId;

    /**
     * @return Bundle ID for your database. A bundle describes the performance specifications for your database (see list below). You can get a list of database bundle IDs by using the AWS CLI command: `aws lightsail get-relational-database-bundles`.
     * 
     */
    public Output<String> bundleId() {
        return this.bundleId;
    }
    /**
     * Certificate associated with the database.
     * 
     */
    @Export(name="caCertificateIdentifier", refs={String.class}, tree="[0]")
    private Output<String> caCertificateIdentifier;

    /**
     * @return Certificate associated with the database.
     * 
     */
    public Output<String> caCertificateIdentifier() {
        return this.caCertificateIdentifier;
    }
    /**
     * Number of vCPUs for the database.
     * 
     */
    @Export(name="cpuCount", refs={Integer.class}, tree="[0]")
    private Output<Integer> cpuCount;

    /**
     * @return Number of vCPUs for the database.
     * 
     */
    public Output<Integer> cpuCount() {
        return this.cpuCount;
    }
    /**
     * Date and time when the database was created.
     * 
     */
    @Export(name="createdAt", refs={String.class}, tree="[0]")
    private Output<String> createdAt;

    /**
     * @return Date and time when the database was created.
     * 
     */
    public Output<String> createdAt() {
        return this.createdAt;
    }
    /**
     * Size of the disk for the database.
     * 
     */
    @Export(name="diskSize", refs={Double.class}, tree="[0]")
    private Output<Double> diskSize;

    /**
     * @return Size of the disk for the database.
     * 
     */
    public Output<Double> diskSize() {
        return this.diskSize;
    }
    /**
     * Database software (for example, MySQL).
     * 
     */
    @Export(name="engine", refs={String.class}, tree="[0]")
    private Output<String> engine;

    /**
     * @return Database software (for example, MySQL).
     * 
     */
    public Output<String> engine() {
        return this.engine;
    }
    /**
     * Database engine version (for example, 5.7.23).
     * 
     */
    @Export(name="engineVersion", refs={String.class}, tree="[0]")
    private Output<String> engineVersion;

    /**
     * @return Database engine version (for example, 5.7.23).
     * 
     */
    public Output<String> engineVersion() {
        return this.engineVersion;
    }
    /**
     * Name of the database snapshot created if skip final snapshot is false, which is the default value for that parameter.
     * 
     */
    @Export(name="finalSnapshotName", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> finalSnapshotName;

    /**
     * @return Name of the database snapshot created if skip final snapshot is false, which is the default value for that parameter.
     * 
     */
    public Output<Optional<String>> finalSnapshotName() {
        return Codegen.optional(this.finalSnapshotName);
    }
    /**
     * Name of the master database created when the Lightsail database resource is created.
     * 
     */
    @Export(name="masterDatabaseName", refs={String.class}, tree="[0]")
    private Output<String> masterDatabaseName;

    /**
     * @return Name of the master database created when the Lightsail database resource is created.
     * 
     */
    public Output<String> masterDatabaseName() {
        return this.masterDatabaseName;
    }
    /**
     * Master endpoint FQDN for the database.
     * 
     */
    @Export(name="masterEndpointAddress", refs={String.class}, tree="[0]")
    private Output<String> masterEndpointAddress;

    /**
     * @return Master endpoint FQDN for the database.
     * 
     */
    public Output<String> masterEndpointAddress() {
        return this.masterEndpointAddress;
    }
    /**
     * Master endpoint network port for the database.
     * 
     */
    @Export(name="masterEndpointPort", refs={Integer.class}, tree="[0]")
    private Output<Integer> masterEndpointPort;

    /**
     * @return Master endpoint network port for the database.
     * 
     */
    public Output<Integer> masterEndpointPort() {
        return this.masterEndpointPort;
    }
    /**
     * Password for the master user of your database. The password can include any printable ASCII character except &#34;/&#34;, &#34;&#34;&#34;, or &#34;{@literal @}&#34;.
     * 
     */
    @Export(name="masterPassword", refs={String.class}, tree="[0]")
    private Output<String> masterPassword;

    /**
     * @return Password for the master user of your database. The password can include any printable ASCII character except &#34;/&#34;, &#34;&#34;&#34;, or &#34;{@literal @}&#34;.
     * 
     */
    public Output<String> masterPassword() {
        return this.masterPassword;
    }
    /**
     * Master user name for your database.
     * 
     */
    @Export(name="masterUsername", refs={String.class}, tree="[0]")
    private Output<String> masterUsername;

    /**
     * @return Master user name for your database.
     * 
     */
    public Output<String> masterUsername() {
        return this.masterUsername;
    }
    /**
     * Daily time range during which automated backups are created for your database if automated backups are enabled. Must be in the hh24:mi-hh24:mi format. Example: `16:00-16:30`. Specified in Coordinated Universal Time (UTC).
     * 
     */
    @Export(name="preferredBackupWindow", refs={String.class}, tree="[0]")
    private Output<String> preferredBackupWindow;

    /**
     * @return Daily time range during which automated backups are created for your database if automated backups are enabled. Must be in the hh24:mi-hh24:mi format. Example: `16:00-16:30`. Specified in Coordinated Universal Time (UTC).
     * 
     */
    public Output<String> preferredBackupWindow() {
        return this.preferredBackupWindow;
    }
    /**
     * Weekly time range during which system maintenance can occur on your database. Must be in the ddd:hh24:mi-ddd:hh24:mi format. Specified in Coordinated Universal Time (UTC). Example: `Tue:17:00-Tue:17:30`
     * 
     */
    @Export(name="preferredMaintenanceWindow", refs={String.class}, tree="[0]")
    private Output<String> preferredMaintenanceWindow;

    /**
     * @return Weekly time range during which system maintenance can occur on your database. Must be in the ddd:hh24:mi-ddd:hh24:mi format. Specified in Coordinated Universal Time (UTC). Example: `Tue:17:00-Tue:17:30`
     * 
     */
    public Output<String> preferredMaintenanceWindow() {
        return this.preferredMaintenanceWindow;
    }
    /**
     * Whether the database is accessible to resources outside of your Lightsail account. A value of true specifies a database that is available to resources outside of your Lightsail account. A value of false specifies a database that is available only to your Lightsail resources in the same region as your database.
     * 
     */
    @Export(name="publiclyAccessible", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> publiclyAccessible;

    /**
     * @return Whether the database is accessible to resources outside of your Lightsail account. A value of true specifies a database that is available to resources outside of your Lightsail account. A value of false specifies a database that is available only to your Lightsail resources in the same region as your database.
     * 
     */
    public Output<Optional<Boolean>> publiclyAccessible() {
        return Codegen.optional(this.publiclyAccessible);
    }
    /**
     * Amount of RAM in GB for the database.
     * 
     */
    @Export(name="ramSize", refs={Double.class}, tree="[0]")
    private Output<Double> ramSize;

    /**
     * @return Amount of RAM in GB for the database.
     * 
     */
    public Output<Double> ramSize() {
        return this.ramSize;
    }
    /**
     * Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     * 
     */
    @Export(name="region", refs={String.class}, tree="[0]")
    private Output<String> region;

    /**
     * @return Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     * 
     */
    public Output<String> region() {
        return this.region;
    }
    /**
     * Name to use for your Lightsail database resource. Names be unique within each AWS Region in your Lightsail account.
     * 
     * The following arguments are optional:
     * 
     */
    @Export(name="relationalDatabaseName", refs={String.class}, tree="[0]")
    private Output<String> relationalDatabaseName;

    /**
     * @return Name to use for your Lightsail database resource. Names be unique within each AWS Region in your Lightsail account.
     * 
     * The following arguments are optional:
     * 
     */
    public Output<String> relationalDatabaseName() {
        return this.relationalDatabaseName;
    }
    /**
     * Secondary Availability Zone of a high availability database. The secondary database is used for failover support of a high availability database.
     * 
     */
    @Export(name="secondaryAvailabilityZone", refs={String.class}, tree="[0]")
    private Output<String> secondaryAvailabilityZone;

    /**
     * @return Secondary Availability Zone of a high availability database. The secondary database is used for failover support of a high availability database.
     * 
     */
    public Output<String> secondaryAvailabilityZone() {
        return this.secondaryAvailabilityZone;
    }
    /**
     * Whether a final database snapshot is created before your database is deleted. If true is specified, no database snapshot is created. If false is specified, a database snapshot is created before your database is deleted. You must specify the final relational database snapshot name parameter if the skip final snapshot parameter is false.
     * 
     */
    @Export(name="skipFinalSnapshot", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> skipFinalSnapshot;

    /**
     * @return Whether a final database snapshot is created before your database is deleted. If true is specified, no database snapshot is created. If false is specified, a database snapshot is created before your database is deleted. You must specify the final relational database snapshot name parameter if the skip final snapshot parameter is false.
     * 
     */
    public Output<Optional<Boolean>> skipFinalSnapshot() {
        return Codegen.optional(this.skipFinalSnapshot);
    }
    /**
     * Support code for the database. Include this code in your email to support when you have questions about a database in Lightsail. This code enables our support team to look up your Lightsail information more easily.
     * 
     */
    @Export(name="supportCode", refs={String.class}, tree="[0]")
    private Output<String> supportCode;

    /**
     * @return Support code for the database. Include this code in your email to support when you have questions about a database in Lightsail. This code enables our support team to look up your Lightsail information more easily.
     * 
     */
    public Output<String> supportCode() {
        return this.supportCode;
    }
    /**
     * Map of tags to assign to the resource. To create a key-only tag, use an empty string as the value. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Export(name="tags", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return Map of tags to assign to the resource. To create a key-only tag, use an empty string as the value. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Output<Optional<Map<String,String>>> tags() {
        return Codegen.optional(this.tags);
    }
    /**
     * Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     * 
     */
    @Export(name="tagsAll", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> tagsAll;

    /**
     * @return Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     * 
     */
    public Output<Map<String,String>> tagsAll() {
        return this.tagsAll;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Database(java.lang.String name) {
        this(name, DatabaseArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Database(java.lang.String name, DatabaseArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Database(java.lang.String name, DatabaseArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("aws:lightsail/database:Database", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Database(java.lang.String name, Output<java.lang.String> id, @Nullable DatabaseState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("aws:lightsail/database:Database", name, state, makeResourceOptions(options, id), false);
    }

    private static DatabaseArgs makeArgs(DatabaseArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? DatabaseArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "masterPassword"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Database get(java.lang.String name, Output<java.lang.String> id, @Nullable DatabaseState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Database(name, id, state, options);
    }
}
