// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ssm.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigArgs Empty = new MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigArgs();

    /**
     * An Amazon Resource Name (ARN) for a Simple Notification Service (SNS) topic. Run Command pushes notifications about command status changes to this topic.
     * 
     */
    @Import(name="notificationArn")
    private @Nullable Output<String> notificationArn;

    /**
     * @return An Amazon Resource Name (ARN) for a Simple Notification Service (SNS) topic. Run Command pushes notifications about command status changes to this topic.
     * 
     */
    public Optional<Output<String>> notificationArn() {
        return Optional.ofNullable(this.notificationArn);
    }

    /**
     * The different events for which you can receive notifications. Valid values: `All`, `InProgress`, `Success`, `TimedOut`, `Cancelled`, and `Failed`
     * 
     */
    @Import(name="notificationEvents")
    private @Nullable Output<List<String>> notificationEvents;

    /**
     * @return The different events for which you can receive notifications. Valid values: `All`, `InProgress`, `Success`, `TimedOut`, `Cancelled`, and `Failed`
     * 
     */
    public Optional<Output<List<String>>> notificationEvents() {
        return Optional.ofNullable(this.notificationEvents);
    }

    /**
     * When specified with `Command`, receive notification when the status of a command changes. When specified with `Invocation`, for commands sent to multiple instances, receive notification on a per-instance basis when the status of a command changes. Valid values: `Command` and `Invocation`
     * 
     */
    @Import(name="notificationType")
    private @Nullable Output<String> notificationType;

    /**
     * @return When specified with `Command`, receive notification when the status of a command changes. When specified with `Invocation`, for commands sent to multiple instances, receive notification on a per-instance basis when the status of a command changes. Valid values: `Command` and `Invocation`
     * 
     */
    public Optional<Output<String>> notificationType() {
        return Optional.ofNullable(this.notificationType);
    }

    private MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigArgs() {}

    private MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigArgs(MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigArgs $) {
        this.notificationArn = $.notificationArn;
        this.notificationEvents = $.notificationEvents;
        this.notificationType = $.notificationType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigArgs $;

        public Builder() {
            $ = new MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigArgs();
        }

        public Builder(MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigArgs defaults) {
            $ = new MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param notificationArn An Amazon Resource Name (ARN) for a Simple Notification Service (SNS) topic. Run Command pushes notifications about command status changes to this topic.
         * 
         * @return builder
         * 
         */
        public Builder notificationArn(@Nullable Output<String> notificationArn) {
            $.notificationArn = notificationArn;
            return this;
        }

        /**
         * @param notificationArn An Amazon Resource Name (ARN) for a Simple Notification Service (SNS) topic. Run Command pushes notifications about command status changes to this topic.
         * 
         * @return builder
         * 
         */
        public Builder notificationArn(String notificationArn) {
            return notificationArn(Output.of(notificationArn));
        }

        /**
         * @param notificationEvents The different events for which you can receive notifications. Valid values: `All`, `InProgress`, `Success`, `TimedOut`, `Cancelled`, and `Failed`
         * 
         * @return builder
         * 
         */
        public Builder notificationEvents(@Nullable Output<List<String>> notificationEvents) {
            $.notificationEvents = notificationEvents;
            return this;
        }

        /**
         * @param notificationEvents The different events for which you can receive notifications. Valid values: `All`, `InProgress`, `Success`, `TimedOut`, `Cancelled`, and `Failed`
         * 
         * @return builder
         * 
         */
        public Builder notificationEvents(List<String> notificationEvents) {
            return notificationEvents(Output.of(notificationEvents));
        }

        /**
         * @param notificationEvents The different events for which you can receive notifications. Valid values: `All`, `InProgress`, `Success`, `TimedOut`, `Cancelled`, and `Failed`
         * 
         * @return builder
         * 
         */
        public Builder notificationEvents(String... notificationEvents) {
            return notificationEvents(List.of(notificationEvents));
        }

        /**
         * @param notificationType When specified with `Command`, receive notification when the status of a command changes. When specified with `Invocation`, for commands sent to multiple instances, receive notification on a per-instance basis when the status of a command changes. Valid values: `Command` and `Invocation`
         * 
         * @return builder
         * 
         */
        public Builder notificationType(@Nullable Output<String> notificationType) {
            $.notificationType = notificationType;
            return this;
        }

        /**
         * @param notificationType When specified with `Command`, receive notification when the status of a command changes. When specified with `Invocation`, for commands sent to multiple instances, receive notification on a per-instance basis when the status of a command changes. Valid values: `Command` and `Invocation`
         * 
         * @return builder
         * 
         */
        public Builder notificationType(String notificationType) {
            return notificationType(Output.of(notificationType));
        }

        public MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigArgs build() {
            return $;
        }
    }

}
