// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.lex.inputs;

import com.pulumi.aws.lex.inputs.V2modelsIntentConfirmationSettingCodeHookArgs;
import com.pulumi.aws.lex.inputs.V2modelsIntentConfirmationSettingConfirmationConditionalArgs;
import com.pulumi.aws.lex.inputs.V2modelsIntentConfirmationSettingConfirmationNextStepArgs;
import com.pulumi.aws.lex.inputs.V2modelsIntentConfirmationSettingConfirmationResponseArgs;
import com.pulumi.aws.lex.inputs.V2modelsIntentConfirmationSettingDeclinationConditionalArgs;
import com.pulumi.aws.lex.inputs.V2modelsIntentConfirmationSettingDeclinationNextStepArgs;
import com.pulumi.aws.lex.inputs.V2modelsIntentConfirmationSettingDeclinationResponseArgs;
import com.pulumi.aws.lex.inputs.V2modelsIntentConfirmationSettingElicitationCodeHookArgs;
import com.pulumi.aws.lex.inputs.V2modelsIntentConfirmationSettingFailureConditionalArgs;
import com.pulumi.aws.lex.inputs.V2modelsIntentConfirmationSettingFailureNextStepArgs;
import com.pulumi.aws.lex.inputs.V2modelsIntentConfirmationSettingFailureResponseArgs;
import com.pulumi.aws.lex.inputs.V2modelsIntentConfirmationSettingPromptSpecificationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class V2modelsIntentConfirmationSettingArgs extends com.pulumi.resources.ResourceArgs {

    public static final V2modelsIntentConfirmationSettingArgs Empty = new V2modelsIntentConfirmationSettingArgs();

    /**
     * Whether the intent&#39;s confirmation is sent to the user. When this field is false, confirmation and declination responses aren&#39;t sent. If the active field isn&#39;t specified, the default is true.
     * 
     */
    @Import(name="active")
    private @Nullable Output<Boolean> active;

    /**
     * @return Whether the intent&#39;s confirmation is sent to the user. When this field is false, confirmation and declination responses aren&#39;t sent. If the active field isn&#39;t specified, the default is true.
     * 
     */
    public Optional<Output<Boolean>> active() {
        return Optional.ofNullable(this.active);
    }

    /**
     * Configuration block for the intent&#39;s confirmation step. The dialog code hook is triggered based on these invocation settings when the confirmation next step or declination next step or failure next step is `invoke_dialog_code_hook`.  See `code_hook`.
     * 
     */
    @Import(name="codeHook")
    private @Nullable Output<V2modelsIntentConfirmationSettingCodeHookArgs> codeHook;

    /**
     * @return Configuration block for the intent&#39;s confirmation step. The dialog code hook is triggered based on these invocation settings when the confirmation next step or declination next step or failure next step is `invoke_dialog_code_hook`.  See `code_hook`.
     * 
     */
    public Optional<Output<V2modelsIntentConfirmationSettingCodeHookArgs>> codeHook() {
        return Optional.ofNullable(this.codeHook);
    }

    /**
     * Configuration block for conditional branches to evaluate after the intent is closed. See `confirmation_conditional`.
     * 
     */
    @Import(name="confirmationConditional")
    private @Nullable Output<V2modelsIntentConfirmationSettingConfirmationConditionalArgs> confirmationConditional;

    /**
     * @return Configuration block for conditional branches to evaluate after the intent is closed. See `confirmation_conditional`.
     * 
     */
    public Optional<Output<V2modelsIntentConfirmationSettingConfirmationConditionalArgs>> confirmationConditional() {
        return Optional.ofNullable(this.confirmationConditional);
    }

    /**
     * Configuration block for the next step that the bot executes when the customer confirms the intent. See `confirmation_next_step`.
     * 
     */
    @Import(name="confirmationNextStep")
    private @Nullable Output<V2modelsIntentConfirmationSettingConfirmationNextStepArgs> confirmationNextStep;

    /**
     * @return Configuration block for the next step that the bot executes when the customer confirms the intent. See `confirmation_next_step`.
     * 
     */
    public Optional<Output<V2modelsIntentConfirmationSettingConfirmationNextStepArgs>> confirmationNextStep() {
        return Optional.ofNullable(this.confirmationNextStep);
    }

    /**
     * Configuration block for message groups that Amazon Lex uses to respond the user input. See `confirmation_response`.
     * 
     */
    @Import(name="confirmationResponse")
    private @Nullable Output<V2modelsIntentConfirmationSettingConfirmationResponseArgs> confirmationResponse;

    /**
     * @return Configuration block for message groups that Amazon Lex uses to respond the user input. See `confirmation_response`.
     * 
     */
    public Optional<Output<V2modelsIntentConfirmationSettingConfirmationResponseArgs>> confirmationResponse() {
        return Optional.ofNullable(this.confirmationResponse);
    }

    /**
     * Configuration block for conditional branches to evaluate after the intent is declined. See `declination_conditional`.
     * 
     */
    @Import(name="declinationConditional")
    private @Nullable Output<V2modelsIntentConfirmationSettingDeclinationConditionalArgs> declinationConditional;

    /**
     * @return Configuration block for conditional branches to evaluate after the intent is declined. See `declination_conditional`.
     * 
     */
    public Optional<Output<V2modelsIntentConfirmationSettingDeclinationConditionalArgs>> declinationConditional() {
        return Optional.ofNullable(this.declinationConditional);
    }

    /**
     * Configuration block for the next step that the bot executes when the customer declines the intent. See `declination_next_step`.
     * 
     */
    @Import(name="declinationNextStep")
    private @Nullable Output<V2modelsIntentConfirmationSettingDeclinationNextStepArgs> declinationNextStep;

    /**
     * @return Configuration block for the next step that the bot executes when the customer declines the intent. See `declination_next_step`.
     * 
     */
    public Optional<Output<V2modelsIntentConfirmationSettingDeclinationNextStepArgs>> declinationNextStep() {
        return Optional.ofNullable(this.declinationNextStep);
    }

    /**
     * Configuration block for when the user answers &#34;no&#34; to the question defined in `prompt_specification`, Amazon Lex responds with this response to acknowledge that the intent was canceled. See `declination_response`.
     * 
     */
    @Import(name="declinationResponse")
    private @Nullable Output<V2modelsIntentConfirmationSettingDeclinationResponseArgs> declinationResponse;

    /**
     * @return Configuration block for when the user answers &#34;no&#34; to the question defined in `prompt_specification`, Amazon Lex responds with this response to acknowledge that the intent was canceled. See `declination_response`.
     * 
     */
    public Optional<Output<V2modelsIntentConfirmationSettingDeclinationResponseArgs>> declinationResponse() {
        return Optional.ofNullable(this.declinationResponse);
    }

    /**
     * Configuration block for when the code hook is invoked during confirmation prompt retries. See `elicitation_code_hook`.
     * 
     */
    @Import(name="elicitationCodeHook")
    private @Nullable Output<V2modelsIntentConfirmationSettingElicitationCodeHookArgs> elicitationCodeHook;

    /**
     * @return Configuration block for when the code hook is invoked during confirmation prompt retries. See `elicitation_code_hook`.
     * 
     */
    public Optional<Output<V2modelsIntentConfirmationSettingElicitationCodeHookArgs>> elicitationCodeHook() {
        return Optional.ofNullable(this.elicitationCodeHook);
    }

    /**
     * Configuration block for conditional branches. Branches are evaluated in the order that they are entered in the list. The first branch with a condition that evaluates to true is executed. The last branch in the list is the default branch. The default branch should not have any condition expression. The default branch is executed if no other branch has a matching condition. See `failure_conditional`.
     * 
     */
    @Import(name="failureConditional")
    private @Nullable Output<V2modelsIntentConfirmationSettingFailureConditionalArgs> failureConditional;

    /**
     * @return Configuration block for conditional branches. Branches are evaluated in the order that they are entered in the list. The first branch with a condition that evaluates to true is executed. The last branch in the list is the default branch. The default branch should not have any condition expression. The default branch is executed if no other branch has a matching condition. See `failure_conditional`.
     * 
     */
    public Optional<Output<V2modelsIntentConfirmationSettingFailureConditionalArgs>> failureConditional() {
        return Optional.ofNullable(this.failureConditional);
    }

    /**
     * Configuration block for the next step to take in the conversation if the confirmation step fails. See `failure_next_step`.
     * 
     */
    @Import(name="failureNextStep")
    private @Nullable Output<V2modelsIntentConfirmationSettingFailureNextStepArgs> failureNextStep;

    /**
     * @return Configuration block for the next step to take in the conversation if the confirmation step fails. See `failure_next_step`.
     * 
     */
    public Optional<Output<V2modelsIntentConfirmationSettingFailureNextStepArgs>> failureNextStep() {
        return Optional.ofNullable(this.failureNextStep);
    }

    /**
     * Configuration block for message groups that Amazon Lex uses to respond the user input. See `failure_response`.
     * 
     */
    @Import(name="failureResponse")
    private @Nullable Output<V2modelsIntentConfirmationSettingFailureResponseArgs> failureResponse;

    /**
     * @return Configuration block for message groups that Amazon Lex uses to respond the user input. See `failure_response`.
     * 
     */
    public Optional<Output<V2modelsIntentConfirmationSettingFailureResponseArgs>> failureResponse() {
        return Optional.ofNullable(this.failureResponse);
    }

    /**
     * Configuration block for prompting the user to confirm the intent. This question should have a yes or no answer. Amazon Lex uses this prompt to ensure that the user acknowledges that the intent is ready for fulfillment. See `prompt_specification`.
     * 
     */
    @Import(name="promptSpecification", required=true)
    private Output<V2modelsIntentConfirmationSettingPromptSpecificationArgs> promptSpecification;

    /**
     * @return Configuration block for prompting the user to confirm the intent. This question should have a yes or no answer. Amazon Lex uses this prompt to ensure that the user acknowledges that the intent is ready for fulfillment. See `prompt_specification`.
     * 
     */
    public Output<V2modelsIntentConfirmationSettingPromptSpecificationArgs> promptSpecification() {
        return this.promptSpecification;
    }

    private V2modelsIntentConfirmationSettingArgs() {}

    private V2modelsIntentConfirmationSettingArgs(V2modelsIntentConfirmationSettingArgs $) {
        this.active = $.active;
        this.codeHook = $.codeHook;
        this.confirmationConditional = $.confirmationConditional;
        this.confirmationNextStep = $.confirmationNextStep;
        this.confirmationResponse = $.confirmationResponse;
        this.declinationConditional = $.declinationConditional;
        this.declinationNextStep = $.declinationNextStep;
        this.declinationResponse = $.declinationResponse;
        this.elicitationCodeHook = $.elicitationCodeHook;
        this.failureConditional = $.failureConditional;
        this.failureNextStep = $.failureNextStep;
        this.failureResponse = $.failureResponse;
        this.promptSpecification = $.promptSpecification;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(V2modelsIntentConfirmationSettingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private V2modelsIntentConfirmationSettingArgs $;

        public Builder() {
            $ = new V2modelsIntentConfirmationSettingArgs();
        }

        public Builder(V2modelsIntentConfirmationSettingArgs defaults) {
            $ = new V2modelsIntentConfirmationSettingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param active Whether the intent&#39;s confirmation is sent to the user. When this field is false, confirmation and declination responses aren&#39;t sent. If the active field isn&#39;t specified, the default is true.
         * 
         * @return builder
         * 
         */
        public Builder active(@Nullable Output<Boolean> active) {
            $.active = active;
            return this;
        }

        /**
         * @param active Whether the intent&#39;s confirmation is sent to the user. When this field is false, confirmation and declination responses aren&#39;t sent. If the active field isn&#39;t specified, the default is true.
         * 
         * @return builder
         * 
         */
        public Builder active(Boolean active) {
            return active(Output.of(active));
        }

        /**
         * @param codeHook Configuration block for the intent&#39;s confirmation step. The dialog code hook is triggered based on these invocation settings when the confirmation next step or declination next step or failure next step is `invoke_dialog_code_hook`.  See `code_hook`.
         * 
         * @return builder
         * 
         */
        public Builder codeHook(@Nullable Output<V2modelsIntentConfirmationSettingCodeHookArgs> codeHook) {
            $.codeHook = codeHook;
            return this;
        }

        /**
         * @param codeHook Configuration block for the intent&#39;s confirmation step. The dialog code hook is triggered based on these invocation settings when the confirmation next step or declination next step or failure next step is `invoke_dialog_code_hook`.  See `code_hook`.
         * 
         * @return builder
         * 
         */
        public Builder codeHook(V2modelsIntentConfirmationSettingCodeHookArgs codeHook) {
            return codeHook(Output.of(codeHook));
        }

        /**
         * @param confirmationConditional Configuration block for conditional branches to evaluate after the intent is closed. See `confirmation_conditional`.
         * 
         * @return builder
         * 
         */
        public Builder confirmationConditional(@Nullable Output<V2modelsIntentConfirmationSettingConfirmationConditionalArgs> confirmationConditional) {
            $.confirmationConditional = confirmationConditional;
            return this;
        }

        /**
         * @param confirmationConditional Configuration block for conditional branches to evaluate after the intent is closed. See `confirmation_conditional`.
         * 
         * @return builder
         * 
         */
        public Builder confirmationConditional(V2modelsIntentConfirmationSettingConfirmationConditionalArgs confirmationConditional) {
            return confirmationConditional(Output.of(confirmationConditional));
        }

        /**
         * @param confirmationNextStep Configuration block for the next step that the bot executes when the customer confirms the intent. See `confirmation_next_step`.
         * 
         * @return builder
         * 
         */
        public Builder confirmationNextStep(@Nullable Output<V2modelsIntentConfirmationSettingConfirmationNextStepArgs> confirmationNextStep) {
            $.confirmationNextStep = confirmationNextStep;
            return this;
        }

        /**
         * @param confirmationNextStep Configuration block for the next step that the bot executes when the customer confirms the intent. See `confirmation_next_step`.
         * 
         * @return builder
         * 
         */
        public Builder confirmationNextStep(V2modelsIntentConfirmationSettingConfirmationNextStepArgs confirmationNextStep) {
            return confirmationNextStep(Output.of(confirmationNextStep));
        }

        /**
         * @param confirmationResponse Configuration block for message groups that Amazon Lex uses to respond the user input. See `confirmation_response`.
         * 
         * @return builder
         * 
         */
        public Builder confirmationResponse(@Nullable Output<V2modelsIntentConfirmationSettingConfirmationResponseArgs> confirmationResponse) {
            $.confirmationResponse = confirmationResponse;
            return this;
        }

        /**
         * @param confirmationResponse Configuration block for message groups that Amazon Lex uses to respond the user input. See `confirmation_response`.
         * 
         * @return builder
         * 
         */
        public Builder confirmationResponse(V2modelsIntentConfirmationSettingConfirmationResponseArgs confirmationResponse) {
            return confirmationResponse(Output.of(confirmationResponse));
        }

        /**
         * @param declinationConditional Configuration block for conditional branches to evaluate after the intent is declined. See `declination_conditional`.
         * 
         * @return builder
         * 
         */
        public Builder declinationConditional(@Nullable Output<V2modelsIntentConfirmationSettingDeclinationConditionalArgs> declinationConditional) {
            $.declinationConditional = declinationConditional;
            return this;
        }

        /**
         * @param declinationConditional Configuration block for conditional branches to evaluate after the intent is declined. See `declination_conditional`.
         * 
         * @return builder
         * 
         */
        public Builder declinationConditional(V2modelsIntentConfirmationSettingDeclinationConditionalArgs declinationConditional) {
            return declinationConditional(Output.of(declinationConditional));
        }

        /**
         * @param declinationNextStep Configuration block for the next step that the bot executes when the customer declines the intent. See `declination_next_step`.
         * 
         * @return builder
         * 
         */
        public Builder declinationNextStep(@Nullable Output<V2modelsIntentConfirmationSettingDeclinationNextStepArgs> declinationNextStep) {
            $.declinationNextStep = declinationNextStep;
            return this;
        }

        /**
         * @param declinationNextStep Configuration block for the next step that the bot executes when the customer declines the intent. See `declination_next_step`.
         * 
         * @return builder
         * 
         */
        public Builder declinationNextStep(V2modelsIntentConfirmationSettingDeclinationNextStepArgs declinationNextStep) {
            return declinationNextStep(Output.of(declinationNextStep));
        }

        /**
         * @param declinationResponse Configuration block for when the user answers &#34;no&#34; to the question defined in `prompt_specification`, Amazon Lex responds with this response to acknowledge that the intent was canceled. See `declination_response`.
         * 
         * @return builder
         * 
         */
        public Builder declinationResponse(@Nullable Output<V2modelsIntentConfirmationSettingDeclinationResponseArgs> declinationResponse) {
            $.declinationResponse = declinationResponse;
            return this;
        }

        /**
         * @param declinationResponse Configuration block for when the user answers &#34;no&#34; to the question defined in `prompt_specification`, Amazon Lex responds with this response to acknowledge that the intent was canceled. See `declination_response`.
         * 
         * @return builder
         * 
         */
        public Builder declinationResponse(V2modelsIntentConfirmationSettingDeclinationResponseArgs declinationResponse) {
            return declinationResponse(Output.of(declinationResponse));
        }

        /**
         * @param elicitationCodeHook Configuration block for when the code hook is invoked during confirmation prompt retries. See `elicitation_code_hook`.
         * 
         * @return builder
         * 
         */
        public Builder elicitationCodeHook(@Nullable Output<V2modelsIntentConfirmationSettingElicitationCodeHookArgs> elicitationCodeHook) {
            $.elicitationCodeHook = elicitationCodeHook;
            return this;
        }

        /**
         * @param elicitationCodeHook Configuration block for when the code hook is invoked during confirmation prompt retries. See `elicitation_code_hook`.
         * 
         * @return builder
         * 
         */
        public Builder elicitationCodeHook(V2modelsIntentConfirmationSettingElicitationCodeHookArgs elicitationCodeHook) {
            return elicitationCodeHook(Output.of(elicitationCodeHook));
        }

        /**
         * @param failureConditional Configuration block for conditional branches. Branches are evaluated in the order that they are entered in the list. The first branch with a condition that evaluates to true is executed. The last branch in the list is the default branch. The default branch should not have any condition expression. The default branch is executed if no other branch has a matching condition. See `failure_conditional`.
         * 
         * @return builder
         * 
         */
        public Builder failureConditional(@Nullable Output<V2modelsIntentConfirmationSettingFailureConditionalArgs> failureConditional) {
            $.failureConditional = failureConditional;
            return this;
        }

        /**
         * @param failureConditional Configuration block for conditional branches. Branches are evaluated in the order that they are entered in the list. The first branch with a condition that evaluates to true is executed. The last branch in the list is the default branch. The default branch should not have any condition expression. The default branch is executed if no other branch has a matching condition. See `failure_conditional`.
         * 
         * @return builder
         * 
         */
        public Builder failureConditional(V2modelsIntentConfirmationSettingFailureConditionalArgs failureConditional) {
            return failureConditional(Output.of(failureConditional));
        }

        /**
         * @param failureNextStep Configuration block for the next step to take in the conversation if the confirmation step fails. See `failure_next_step`.
         * 
         * @return builder
         * 
         */
        public Builder failureNextStep(@Nullable Output<V2modelsIntentConfirmationSettingFailureNextStepArgs> failureNextStep) {
            $.failureNextStep = failureNextStep;
            return this;
        }

        /**
         * @param failureNextStep Configuration block for the next step to take in the conversation if the confirmation step fails. See `failure_next_step`.
         * 
         * @return builder
         * 
         */
        public Builder failureNextStep(V2modelsIntentConfirmationSettingFailureNextStepArgs failureNextStep) {
            return failureNextStep(Output.of(failureNextStep));
        }

        /**
         * @param failureResponse Configuration block for message groups that Amazon Lex uses to respond the user input. See `failure_response`.
         * 
         * @return builder
         * 
         */
        public Builder failureResponse(@Nullable Output<V2modelsIntentConfirmationSettingFailureResponseArgs> failureResponse) {
            $.failureResponse = failureResponse;
            return this;
        }

        /**
         * @param failureResponse Configuration block for message groups that Amazon Lex uses to respond the user input. See `failure_response`.
         * 
         * @return builder
         * 
         */
        public Builder failureResponse(V2modelsIntentConfirmationSettingFailureResponseArgs failureResponse) {
            return failureResponse(Output.of(failureResponse));
        }

        /**
         * @param promptSpecification Configuration block for prompting the user to confirm the intent. This question should have a yes or no answer. Amazon Lex uses this prompt to ensure that the user acknowledges that the intent is ready for fulfillment. See `prompt_specification`.
         * 
         * @return builder
         * 
         */
        public Builder promptSpecification(Output<V2modelsIntentConfirmationSettingPromptSpecificationArgs> promptSpecification) {
            $.promptSpecification = promptSpecification;
            return this;
        }

        /**
         * @param promptSpecification Configuration block for prompting the user to confirm the intent. This question should have a yes or no answer. Amazon Lex uses this prompt to ensure that the user acknowledges that the intent is ready for fulfillment. See `prompt_specification`.
         * 
         * @return builder
         * 
         */
        public Builder promptSpecification(V2modelsIntentConfirmationSettingPromptSpecificationArgs promptSpecification) {
            return promptSpecification(Output.of(promptSpecification));
        }

        public V2modelsIntentConfirmationSettingArgs build() {
            if ($.promptSpecification == null) {
                throw new MissingRequiredPropertyException("V2modelsIntentConfirmationSettingArgs", "promptSpecification");
            }
            return $;
        }
    }

}
