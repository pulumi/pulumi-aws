// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ebs.outputs;

import com.pulumi.aws.ebs.outputs.GetVolumeFilter;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetVolumeResult {
    /**
     * @return Volume ARN (e.g., arn:aws:ec2:us-east-1:0123456789012:volume/vol-59fcb34e).
     * 
     */
    private @Nullable String arn;
    /**
     * @return AZ where the EBS volume exists.
     * 
     */
    private @Nullable String availabilityZone;
    /**
     * @return Whether the disk is encrypted.
     * 
     */
    private @Nullable Boolean encrypted;
    private @Nullable List<GetVolumeFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private @Nullable String id;
    /**
     * @return Amount of IOPS for the disk.
     * 
     */
    private @Nullable Integer iops;
    /**
     * @return ARN for the KMS encryption key.
     * 
     */
    private @Nullable String kmsKeyId;
    private @Nullable Boolean mostRecent;
    /**
     * @return (Optional) Specifies whether Amazon EBS Multi-Attach is enabled.
     * 
     */
    private @Nullable Boolean multiAttachEnabled;
    /**
     * @return ARN of the Outpost.
     * 
     */
    private @Nullable String outpostArn;
    /**
     * @return Size of the drive in GiBs.
     * 
     */
    private @Nullable Integer size;
    /**
     * @return Snapshot_id the EBS volume is based off.
     * 
     */
    private @Nullable String snapshotId;
    /**
     * @return Map of tags for the resource.
     * 
     */
    private @Nullable Map<String,String> tags;
    /**
     * @return Throughput that the volume supports, in MiB/s.
     * 
     */
    private @Nullable Integer throughput;
    /**
     * @return Volume ID (e.g., vol-59fcb34e).
     * 
     */
    private @Nullable String volumeId;
    /**
     * @return Type of EBS volume.
     * 
     */
    private @Nullable String volumeType;

    private GetVolumeResult() {}
    /**
     * @return Volume ARN (e.g., arn:aws:ec2:us-east-1:0123456789012:volume/vol-59fcb34e).
     * 
     */
    public Optional<String> arn() {
        return Optional.ofNullable(this.arn);
    }
    /**
     * @return AZ where the EBS volume exists.
     * 
     */
    public Optional<String> availabilityZone() {
        return Optional.ofNullable(this.availabilityZone);
    }
    /**
     * @return Whether the disk is encrypted.
     * 
     */
    public Optional<Boolean> encrypted() {
        return Optional.ofNullable(this.encrypted);
    }
    public List<GetVolumeFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Amount of IOPS for the disk.
     * 
     */
    public Optional<Integer> iops() {
        return Optional.ofNullable(this.iops);
    }
    /**
     * @return ARN for the KMS encryption key.
     * 
     */
    public Optional<String> kmsKeyId() {
        return Optional.ofNullable(this.kmsKeyId);
    }
    public Optional<Boolean> mostRecent() {
        return Optional.ofNullable(this.mostRecent);
    }
    /**
     * @return (Optional) Specifies whether Amazon EBS Multi-Attach is enabled.
     * 
     */
    public Optional<Boolean> multiAttachEnabled() {
        return Optional.ofNullable(this.multiAttachEnabled);
    }
    /**
     * @return ARN of the Outpost.
     * 
     */
    public Optional<String> outpostArn() {
        return Optional.ofNullable(this.outpostArn);
    }
    /**
     * @return Size of the drive in GiBs.
     * 
     */
    public Optional<Integer> size() {
        return Optional.ofNullable(this.size);
    }
    /**
     * @return Snapshot_id the EBS volume is based off.
     * 
     */
    public Optional<String> snapshotId() {
        return Optional.ofNullable(this.snapshotId);
    }
    /**
     * @return Map of tags for the resource.
     * 
     */
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * @return Throughput that the volume supports, in MiB/s.
     * 
     */
    public Optional<Integer> throughput() {
        return Optional.ofNullable(this.throughput);
    }
    /**
     * @return Volume ID (e.g., vol-59fcb34e).
     * 
     */
    public Optional<String> volumeId() {
        return Optional.ofNullable(this.volumeId);
    }
    /**
     * @return Type of EBS volume.
     * 
     */
    public Optional<String> volumeType() {
        return Optional.ofNullable(this.volumeType);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetVolumeResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String arn;
        private @Nullable String availabilityZone;
        private @Nullable Boolean encrypted;
        private @Nullable List<GetVolumeFilter> filters;
        private @Nullable String id;
        private @Nullable Integer iops;
        private @Nullable String kmsKeyId;
        private @Nullable Boolean mostRecent;
        private @Nullable Boolean multiAttachEnabled;
        private @Nullable String outpostArn;
        private @Nullable Integer size;
        private @Nullable String snapshotId;
        private @Nullable Map<String,String> tags;
        private @Nullable Integer throughput;
        private @Nullable String volumeId;
        private @Nullable String volumeType;
        public Builder() {}
        public Builder(GetVolumeResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.availabilityZone = defaults.availabilityZone;
    	      this.encrypted = defaults.encrypted;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.iops = defaults.iops;
    	      this.kmsKeyId = defaults.kmsKeyId;
    	      this.mostRecent = defaults.mostRecent;
    	      this.multiAttachEnabled = defaults.multiAttachEnabled;
    	      this.outpostArn = defaults.outpostArn;
    	      this.size = defaults.size;
    	      this.snapshotId = defaults.snapshotId;
    	      this.tags = defaults.tags;
    	      this.throughput = defaults.throughput;
    	      this.volumeId = defaults.volumeId;
    	      this.volumeType = defaults.volumeType;
        }

        @CustomType.Setter
        public Builder arn(@Nullable String arn) {
            this.arn = arn;
            return this;
        }
        @CustomType.Setter
        public Builder availabilityZone(@Nullable String availabilityZone) {
            this.availabilityZone = availabilityZone;
            return this;
        }
        @CustomType.Setter
        public Builder encrypted(@Nullable Boolean encrypted) {
            this.encrypted = encrypted;
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetVolumeFilter> filters) {
            this.filters = filters;
            return this;
        }
        public Builder filters(GetVolumeFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder iops(@Nullable Integer iops) {
            this.iops = iops;
            return this;
        }
        @CustomType.Setter
        public Builder kmsKeyId(@Nullable String kmsKeyId) {
            this.kmsKeyId = kmsKeyId;
            return this;
        }
        @CustomType.Setter
        public Builder mostRecent(@Nullable Boolean mostRecent) {
            this.mostRecent = mostRecent;
            return this;
        }
        @CustomType.Setter
        public Builder multiAttachEnabled(@Nullable Boolean multiAttachEnabled) {
            this.multiAttachEnabled = multiAttachEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder outpostArn(@Nullable String outpostArn) {
            this.outpostArn = outpostArn;
            return this;
        }
        @CustomType.Setter
        public Builder size(@Nullable Integer size) {
            this.size = size;
            return this;
        }
        @CustomType.Setter
        public Builder snapshotId(@Nullable String snapshotId) {
            this.snapshotId = snapshotId;
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder throughput(@Nullable Integer throughput) {
            this.throughput = throughput;
            return this;
        }
        @CustomType.Setter
        public Builder volumeId(@Nullable String volumeId) {
            this.volumeId = volumeId;
            return this;
        }
        @CustomType.Setter
        public Builder volumeType(@Nullable String volumeType) {
            this.volumeType = volumeType;
            return this;
        }
        public GetVolumeResult build() {
            final var o = new GetVolumeResult();
            o.arn = arn;
            o.availabilityZone = availabilityZone;
            o.encrypted = encrypted;
            o.filters = filters;
            o.id = id;
            o.iops = iops;
            o.kmsKeyId = kmsKeyId;
            o.mostRecent = mostRecent;
            o.multiAttachEnabled = multiAttachEnabled;
            o.outpostArn = outpostArn;
            o.size = size;
            o.snapshotId = snapshotId;
            o.tags = tags;
            o.throughput = throughput;
            o.volumeId = volumeId;
            o.volumeType = volumeType;
            return o;
        }
    }
}
