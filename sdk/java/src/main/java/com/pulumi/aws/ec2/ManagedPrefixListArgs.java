// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ec2;

import com.pulumi.aws.ec2.inputs.ManagedPrefixListEntryArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ManagedPrefixListArgs extends com.pulumi.resources.ResourceArgs {

    public static final ManagedPrefixListArgs Empty = new ManagedPrefixListArgs();

    /**
     * Address family (`IPv4` or `IPv6`) of this prefix list.
     * 
     */
    @Import(name="addressFamily", required=true)
    private Output<String> addressFamily;

    /**
     * @return Address family (`IPv4` or `IPv6`) of this prefix list.
     * 
     */
    public Output<String> addressFamily() {
        return this.addressFamily;
    }

    /**
     * Configuration block for prefix list entry. Detailed below. Different entries may have overlapping CIDR blocks, but a particular CIDR should not be duplicated.
     * 
     */
    @Import(name="entries")
    private @Nullable Output<List<ManagedPrefixListEntryArgs>> entries;

    /**
     * @return Configuration block for prefix list entry. Detailed below. Different entries may have overlapping CIDR blocks, but a particular CIDR should not be duplicated.
     * 
     */
    public Optional<Output<List<ManagedPrefixListEntryArgs>>> entries() {
        return Optional.ofNullable(this.entries);
    }

    /**
     * Maximum number of entries that this prefix list can contain.
     * 
     */
    @Import(name="maxEntries", required=true)
    private Output<Integer> maxEntries;

    /**
     * @return Maximum number of entries that this prefix list can contain.
     * 
     */
    public Output<Integer> maxEntries() {
        return this.maxEntries;
    }

    /**
     * Name of this resource. The name must not start with `com.amazonaws`.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of this resource. The name must not start with `com.amazonaws`.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Map of tags to assign to this resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Map of tags to assign to this resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private ManagedPrefixListArgs() {}

    private ManagedPrefixListArgs(ManagedPrefixListArgs $) {
        this.addressFamily = $.addressFamily;
        this.entries = $.entries;
        this.maxEntries = $.maxEntries;
        this.name = $.name;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ManagedPrefixListArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ManagedPrefixListArgs $;

        public Builder() {
            $ = new ManagedPrefixListArgs();
        }

        public Builder(ManagedPrefixListArgs defaults) {
            $ = new ManagedPrefixListArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param addressFamily Address family (`IPv4` or `IPv6`) of this prefix list.
         * 
         * @return builder
         * 
         */
        public Builder addressFamily(Output<String> addressFamily) {
            $.addressFamily = addressFamily;
            return this;
        }

        /**
         * @param addressFamily Address family (`IPv4` or `IPv6`) of this prefix list.
         * 
         * @return builder
         * 
         */
        public Builder addressFamily(String addressFamily) {
            return addressFamily(Output.of(addressFamily));
        }

        /**
         * @param entries Configuration block for prefix list entry. Detailed below. Different entries may have overlapping CIDR blocks, but a particular CIDR should not be duplicated.
         * 
         * @return builder
         * 
         */
        public Builder entries(@Nullable Output<List<ManagedPrefixListEntryArgs>> entries) {
            $.entries = entries;
            return this;
        }

        /**
         * @param entries Configuration block for prefix list entry. Detailed below. Different entries may have overlapping CIDR blocks, but a particular CIDR should not be duplicated.
         * 
         * @return builder
         * 
         */
        public Builder entries(List<ManagedPrefixListEntryArgs> entries) {
            return entries(Output.of(entries));
        }

        /**
         * @param entries Configuration block for prefix list entry. Detailed below. Different entries may have overlapping CIDR blocks, but a particular CIDR should not be duplicated.
         * 
         * @return builder
         * 
         */
        public Builder entries(ManagedPrefixListEntryArgs... entries) {
            return entries(List.of(entries));
        }

        /**
         * @param maxEntries Maximum number of entries that this prefix list can contain.
         * 
         * @return builder
         * 
         */
        public Builder maxEntries(Output<Integer> maxEntries) {
            $.maxEntries = maxEntries;
            return this;
        }

        /**
         * @param maxEntries Maximum number of entries that this prefix list can contain.
         * 
         * @return builder
         * 
         */
        public Builder maxEntries(Integer maxEntries) {
            return maxEntries(Output.of(maxEntries));
        }

        /**
         * @param name Name of this resource. The name must not start with `com.amazonaws`.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of this resource. The name must not start with `com.amazonaws`.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param tags Map of tags to assign to this resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Map of tags to assign to this resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public ManagedPrefixListArgs build() {
            if ($.addressFamily == null) {
                throw new MissingRequiredPropertyException("ManagedPrefixListArgs", "addressFamily");
            }
            if ($.maxEntries == null) {
                throw new MissingRequiredPropertyException("ManagedPrefixListArgs", "maxEntries");
            }
            return $;
        }
    }

}
