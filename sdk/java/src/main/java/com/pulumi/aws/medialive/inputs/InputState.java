// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.medialive.inputs;

import com.pulumi.aws.medialive.inputs.InputDestinationArgs;
import com.pulumi.aws.medialive.inputs.InputInputDeviceArgs;
import com.pulumi.aws.medialive.inputs.InputMediaConnectFlowArgs;
import com.pulumi.aws.medialive.inputs.InputSourceArgs;
import com.pulumi.aws.medialive.inputs.InputVpcArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InputState extends com.pulumi.resources.ResourceArgs {

    public static final InputState Empty = new InputState();

    @Import(name="arn")
    private @Nullable Output<String> arn;

    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    @Import(name="attachedChannels")
    private @Nullable Output<List<String>> attachedChannels;

    public Optional<Output<List<String>>> attachedChannels() {
        return Optional.ofNullable(this.attachedChannels);
    }

    @Import(name="destinations")
    private @Nullable Output<List<InputDestinationArgs>> destinations;

    public Optional<Output<List<InputDestinationArgs>>> destinations() {
        return Optional.ofNullable(this.destinations);
    }

    @Import(name="inputClass")
    private @Nullable Output<String> inputClass;

    public Optional<Output<String>> inputClass() {
        return Optional.ofNullable(this.inputClass);
    }

    @Import(name="inputDevices")
    private @Nullable Output<List<InputInputDeviceArgs>> inputDevices;

    public Optional<Output<List<InputInputDeviceArgs>>> inputDevices() {
        return Optional.ofNullable(this.inputDevices);
    }

    @Import(name="inputPartnerIds")
    private @Nullable Output<List<String>> inputPartnerIds;

    public Optional<Output<List<String>>> inputPartnerIds() {
        return Optional.ofNullable(this.inputPartnerIds);
    }

    @Import(name="inputSecurityGroups")
    private @Nullable Output<List<String>> inputSecurityGroups;

    public Optional<Output<List<String>>> inputSecurityGroups() {
        return Optional.ofNullable(this.inputSecurityGroups);
    }

    @Import(name="inputSourceType")
    private @Nullable Output<String> inputSourceType;

    public Optional<Output<String>> inputSourceType() {
        return Optional.ofNullable(this.inputSourceType);
    }

    @Import(name="mediaConnectFlows")
    private @Nullable Output<List<InputMediaConnectFlowArgs>> mediaConnectFlows;

    public Optional<Output<List<InputMediaConnectFlowArgs>>> mediaConnectFlows() {
        return Optional.ofNullable(this.mediaConnectFlows);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="roleArn")
    private @Nullable Output<String> roleArn;

    public Optional<Output<String>> roleArn() {
        return Optional.ofNullable(this.roleArn);
    }

    @Import(name="sources")
    private @Nullable Output<List<InputSourceArgs>> sources;

    public Optional<Output<List<InputSourceArgs>>> sources() {
        return Optional.ofNullable(this.sources);
    }

    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    @Import(name="type")
    private @Nullable Output<String> type;

    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    @Import(name="vpc")
    private @Nullable Output<InputVpcArgs> vpc;

    public Optional<Output<InputVpcArgs>> vpc() {
        return Optional.ofNullable(this.vpc);
    }

    private InputState() {}

    private InputState(InputState $) {
        this.arn = $.arn;
        this.attachedChannels = $.attachedChannels;
        this.destinations = $.destinations;
        this.inputClass = $.inputClass;
        this.inputDevices = $.inputDevices;
        this.inputPartnerIds = $.inputPartnerIds;
        this.inputSecurityGroups = $.inputSecurityGroups;
        this.inputSourceType = $.inputSourceType;
        this.mediaConnectFlows = $.mediaConnectFlows;
        this.name = $.name;
        this.roleArn = $.roleArn;
        this.sources = $.sources;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
        this.type = $.type;
        this.vpc = $.vpc;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InputState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InputState $;

        public Builder() {
            $ = new InputState();
        }

        public Builder(InputState defaults) {
            $ = new InputState(Objects.requireNonNull(defaults));
        }

        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        public Builder attachedChannels(@Nullable Output<List<String>> attachedChannels) {
            $.attachedChannels = attachedChannels;
            return this;
        }

        public Builder attachedChannels(List<String> attachedChannels) {
            return attachedChannels(Output.of(attachedChannels));
        }

        public Builder attachedChannels(String... attachedChannels) {
            return attachedChannels(List.of(attachedChannels));
        }

        public Builder destinations(@Nullable Output<List<InputDestinationArgs>> destinations) {
            $.destinations = destinations;
            return this;
        }

        public Builder destinations(List<InputDestinationArgs> destinations) {
            return destinations(Output.of(destinations));
        }

        public Builder destinations(InputDestinationArgs... destinations) {
            return destinations(List.of(destinations));
        }

        public Builder inputClass(@Nullable Output<String> inputClass) {
            $.inputClass = inputClass;
            return this;
        }

        public Builder inputClass(String inputClass) {
            return inputClass(Output.of(inputClass));
        }

        public Builder inputDevices(@Nullable Output<List<InputInputDeviceArgs>> inputDevices) {
            $.inputDevices = inputDevices;
            return this;
        }

        public Builder inputDevices(List<InputInputDeviceArgs> inputDevices) {
            return inputDevices(Output.of(inputDevices));
        }

        public Builder inputDevices(InputInputDeviceArgs... inputDevices) {
            return inputDevices(List.of(inputDevices));
        }

        public Builder inputPartnerIds(@Nullable Output<List<String>> inputPartnerIds) {
            $.inputPartnerIds = inputPartnerIds;
            return this;
        }

        public Builder inputPartnerIds(List<String> inputPartnerIds) {
            return inputPartnerIds(Output.of(inputPartnerIds));
        }

        public Builder inputPartnerIds(String... inputPartnerIds) {
            return inputPartnerIds(List.of(inputPartnerIds));
        }

        public Builder inputSecurityGroups(@Nullable Output<List<String>> inputSecurityGroups) {
            $.inputSecurityGroups = inputSecurityGroups;
            return this;
        }

        public Builder inputSecurityGroups(List<String> inputSecurityGroups) {
            return inputSecurityGroups(Output.of(inputSecurityGroups));
        }

        public Builder inputSecurityGroups(String... inputSecurityGroups) {
            return inputSecurityGroups(List.of(inputSecurityGroups));
        }

        public Builder inputSourceType(@Nullable Output<String> inputSourceType) {
            $.inputSourceType = inputSourceType;
            return this;
        }

        public Builder inputSourceType(String inputSourceType) {
            return inputSourceType(Output.of(inputSourceType));
        }

        public Builder mediaConnectFlows(@Nullable Output<List<InputMediaConnectFlowArgs>> mediaConnectFlows) {
            $.mediaConnectFlows = mediaConnectFlows;
            return this;
        }

        public Builder mediaConnectFlows(List<InputMediaConnectFlowArgs> mediaConnectFlows) {
            return mediaConnectFlows(Output.of(mediaConnectFlows));
        }

        public Builder mediaConnectFlows(InputMediaConnectFlowArgs... mediaConnectFlows) {
            return mediaConnectFlows(List.of(mediaConnectFlows));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder roleArn(@Nullable Output<String> roleArn) {
            $.roleArn = roleArn;
            return this;
        }

        public Builder roleArn(String roleArn) {
            return roleArn(Output.of(roleArn));
        }

        public Builder sources(@Nullable Output<List<InputSourceArgs>> sources) {
            $.sources = sources;
            return this;
        }

        public Builder sources(List<InputSourceArgs> sources) {
            return sources(Output.of(sources));
        }

        public Builder sources(InputSourceArgs... sources) {
            return sources(List.of(sources));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        public Builder type(String type) {
            return type(Output.of(type));
        }

        public Builder vpc(@Nullable Output<InputVpcArgs> vpc) {
            $.vpc = vpc;
            return this;
        }

        public Builder vpc(InputVpcArgs vpc) {
            return vpc(Output.of(vpc));
        }

        public InputState build() {
            return $;
        }
    }

}
