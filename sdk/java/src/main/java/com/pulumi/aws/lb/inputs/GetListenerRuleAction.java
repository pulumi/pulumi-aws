// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.lb.inputs;

import com.pulumi.aws.lb.inputs.GetListenerRuleActionAuthenticateCognito;
import com.pulumi.aws.lb.inputs.GetListenerRuleActionAuthenticateOidc;
import com.pulumi.aws.lb.inputs.GetListenerRuleActionFixedResponse;
import com.pulumi.aws.lb.inputs.GetListenerRuleActionForward;
import com.pulumi.aws.lb.inputs.GetListenerRuleActionRedirect;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetListenerRuleAction extends com.pulumi.resources.InvokeArgs {

    public static final GetListenerRuleAction Empty = new GetListenerRuleAction();

    /**
     * An action to authenticate using Amazon Cognito.
     * Detailed below.
     * 
     */
    @Import(name="authenticateCognito")
    private @Nullable GetListenerRuleActionAuthenticateCognito authenticateCognito;

    /**
     * @return An action to authenticate using Amazon Cognito.
     * Detailed below.
     * 
     */
    public Optional<GetListenerRuleActionAuthenticateCognito> authenticateCognito() {
        return Optional.ofNullable(this.authenticateCognito);
    }

    /**
     * An action to authenticate using OIDC.
     * Detailed below.
     * 
     */
    @Import(name="authenticateOidc")
    private @Nullable GetListenerRuleActionAuthenticateOidc authenticateOidc;

    /**
     * @return An action to authenticate using OIDC.
     * Detailed below.
     * 
     */
    public Optional<GetListenerRuleActionAuthenticateOidc> authenticateOidc() {
        return Optional.ofNullable(this.authenticateOidc);
    }

    /**
     * An action to return a fixed response.
     * Detailed below.
     * 
     */
    @Import(name="fixedResponse")
    private @Nullable GetListenerRuleActionFixedResponse fixedResponse;

    /**
     * @return An action to return a fixed response.
     * Detailed below.
     * 
     */
    public Optional<GetListenerRuleActionFixedResponse> fixedResponse() {
        return Optional.ofNullable(this.fixedResponse);
    }

    /**
     * An action to forward the request.
     * Detailed below.
     * 
     */
    @Import(name="forward")
    private @Nullable GetListenerRuleActionForward forward;

    /**
     * @return An action to forward the request.
     * Detailed below.
     * 
     */
    public Optional<GetListenerRuleActionForward> forward() {
        return Optional.ofNullable(this.forward);
    }

    /**
     * The evaluation order of the action.
     * 
     */
    @Import(name="order", required=true)
    private Double order;

    /**
     * @return The evaluation order of the action.
     * 
     */
    public Double order() {
        return this.order;
    }

    /**
     * An action to redirect the request.
     * Detailed below.
     * 
     */
    @Import(name="redirect")
    private @Nullable GetListenerRuleActionRedirect redirect;

    /**
     * @return An action to redirect the request.
     * Detailed below.
     * 
     */
    public Optional<GetListenerRuleActionRedirect> redirect() {
        return Optional.ofNullable(this.redirect);
    }

    /**
     * The type of the action, indicates which sub-block will be populated.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    /**
     * @return The type of the action, indicates which sub-block will be populated.
     * 
     */
    public String type() {
        return this.type;
    }

    private GetListenerRuleAction() {}

    private GetListenerRuleAction(GetListenerRuleAction $) {
        this.authenticateCognito = $.authenticateCognito;
        this.authenticateOidc = $.authenticateOidc;
        this.fixedResponse = $.fixedResponse;
        this.forward = $.forward;
        this.order = $.order;
        this.redirect = $.redirect;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetListenerRuleAction defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetListenerRuleAction $;

        public Builder() {
            $ = new GetListenerRuleAction();
        }

        public Builder(GetListenerRuleAction defaults) {
            $ = new GetListenerRuleAction(Objects.requireNonNull(defaults));
        }

        /**
         * @param authenticateCognito An action to authenticate using Amazon Cognito.
         * Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder authenticateCognito(@Nullable GetListenerRuleActionAuthenticateCognito authenticateCognito) {
            $.authenticateCognito = authenticateCognito;
            return this;
        }

        /**
         * @param authenticateOidc An action to authenticate using OIDC.
         * Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder authenticateOidc(@Nullable GetListenerRuleActionAuthenticateOidc authenticateOidc) {
            $.authenticateOidc = authenticateOidc;
            return this;
        }

        /**
         * @param fixedResponse An action to return a fixed response.
         * Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder fixedResponse(@Nullable GetListenerRuleActionFixedResponse fixedResponse) {
            $.fixedResponse = fixedResponse;
            return this;
        }

        /**
         * @param forward An action to forward the request.
         * Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder forward(@Nullable GetListenerRuleActionForward forward) {
            $.forward = forward;
            return this;
        }

        /**
         * @param order The evaluation order of the action.
         * 
         * @return builder
         * 
         */
        public Builder order(Double order) {
            $.order = order;
            return this;
        }

        /**
         * @param redirect An action to redirect the request.
         * Detailed below.
         * 
         * @return builder
         * 
         */
        public Builder redirect(@Nullable GetListenerRuleActionRedirect redirect) {
            $.redirect = redirect;
            return this;
        }

        /**
         * @param type The type of the action, indicates which sub-block will be populated.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public GetListenerRuleAction build() {
            if ($.order == null) {
                throw new MissingRequiredPropertyException("GetListenerRuleAction", "order");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("GetListenerRuleAction", "type");
            }
            return $;
        }
    }

}
