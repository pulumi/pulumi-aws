// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.verifiedpermissions.inputs;

import com.pulumi.aws.verifiedpermissions.inputs.IdentitySourceConfigurationCognitoUserPoolConfigurationGroupConfigurationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IdentitySourceConfigurationCognitoUserPoolConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final IdentitySourceConfigurationCognitoUserPoolConfigurationArgs Empty = new IdentitySourceConfigurationCognitoUserPoolConfigurationArgs();

    /**
     * The unique application client IDs that are associated with the specified Amazon Cognito user pool.
     * 
     */
    @Import(name="clientIds")
    private @Nullable Output<List<String>> clientIds;

    /**
     * @return The unique application client IDs that are associated with the specified Amazon Cognito user pool.
     * 
     */
    public Optional<Output<List<String>>> clientIds() {
        return Optional.ofNullable(this.clientIds);
    }

    /**
     * The type of entity that a policy store maps to groups from an Amazon Cognito user pool identity source. See Group Configuration below.
     * 
     */
    @Import(name="groupConfiguration")
    private @Nullable Output<IdentitySourceConfigurationCognitoUserPoolConfigurationGroupConfigurationArgs> groupConfiguration;

    /**
     * @return The type of entity that a policy store maps to groups from an Amazon Cognito user pool identity source. See Group Configuration below.
     * 
     */
    public Optional<Output<IdentitySourceConfigurationCognitoUserPoolConfigurationGroupConfigurationArgs>> groupConfiguration() {
        return Optional.ofNullable(this.groupConfiguration);
    }

    /**
     * The Amazon Resource Name (ARN) of the Amazon Cognito user pool that contains the identities to be authorized.
     * 
     */
    @Import(name="userPoolArn", required=true)
    private Output<String> userPoolArn;

    /**
     * @return The Amazon Resource Name (ARN) of the Amazon Cognito user pool that contains the identities to be authorized.
     * 
     */
    public Output<String> userPoolArn() {
        return this.userPoolArn;
    }

    private IdentitySourceConfigurationCognitoUserPoolConfigurationArgs() {}

    private IdentitySourceConfigurationCognitoUserPoolConfigurationArgs(IdentitySourceConfigurationCognitoUserPoolConfigurationArgs $) {
        this.clientIds = $.clientIds;
        this.groupConfiguration = $.groupConfiguration;
        this.userPoolArn = $.userPoolArn;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IdentitySourceConfigurationCognitoUserPoolConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IdentitySourceConfigurationCognitoUserPoolConfigurationArgs $;

        public Builder() {
            $ = new IdentitySourceConfigurationCognitoUserPoolConfigurationArgs();
        }

        public Builder(IdentitySourceConfigurationCognitoUserPoolConfigurationArgs defaults) {
            $ = new IdentitySourceConfigurationCognitoUserPoolConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clientIds The unique application client IDs that are associated with the specified Amazon Cognito user pool.
         * 
         * @return builder
         * 
         */
        public Builder clientIds(@Nullable Output<List<String>> clientIds) {
            $.clientIds = clientIds;
            return this;
        }

        /**
         * @param clientIds The unique application client IDs that are associated with the specified Amazon Cognito user pool.
         * 
         * @return builder
         * 
         */
        public Builder clientIds(List<String> clientIds) {
            return clientIds(Output.of(clientIds));
        }

        /**
         * @param clientIds The unique application client IDs that are associated with the specified Amazon Cognito user pool.
         * 
         * @return builder
         * 
         */
        public Builder clientIds(String... clientIds) {
            return clientIds(List.of(clientIds));
        }

        /**
         * @param groupConfiguration The type of entity that a policy store maps to groups from an Amazon Cognito user pool identity source. See Group Configuration below.
         * 
         * @return builder
         * 
         */
        public Builder groupConfiguration(@Nullable Output<IdentitySourceConfigurationCognitoUserPoolConfigurationGroupConfigurationArgs> groupConfiguration) {
            $.groupConfiguration = groupConfiguration;
            return this;
        }

        /**
         * @param groupConfiguration The type of entity that a policy store maps to groups from an Amazon Cognito user pool identity source. See Group Configuration below.
         * 
         * @return builder
         * 
         */
        public Builder groupConfiguration(IdentitySourceConfigurationCognitoUserPoolConfigurationGroupConfigurationArgs groupConfiguration) {
            return groupConfiguration(Output.of(groupConfiguration));
        }

        /**
         * @param userPoolArn The Amazon Resource Name (ARN) of the Amazon Cognito user pool that contains the identities to be authorized.
         * 
         * @return builder
         * 
         */
        public Builder userPoolArn(Output<String> userPoolArn) {
            $.userPoolArn = userPoolArn;
            return this;
        }

        /**
         * @param userPoolArn The Amazon Resource Name (ARN) of the Amazon Cognito user pool that contains the identities to be authorized.
         * 
         * @return builder
         * 
         */
        public Builder userPoolArn(String userPoolArn) {
            return userPoolArn(Output.of(userPoolArn));
        }

        public IdentitySourceConfigurationCognitoUserPoolConfigurationArgs build() {
            if ($.userPoolArn == null) {
                throw new MissingRequiredPropertyException("IdentitySourceConfigurationCognitoUserPoolConfigurationArgs", "userPoolArn");
            }
            return $;
        }
    }

}
