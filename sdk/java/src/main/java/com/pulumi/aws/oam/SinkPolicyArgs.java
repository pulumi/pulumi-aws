// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.oam;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class SinkPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final SinkPolicyArgs Empty = new SinkPolicyArgs();

    /**
     * JSON policy to use. If you are updating an existing policy, the entire existing policy is replaced by what you specify here.
     * 
     */
    @Import(name="policy", required=true)
    private Output<String> policy;

    /**
     * @return JSON policy to use. If you are updating an existing policy, the entire existing policy is replaced by what you specify here.
     * 
     */
    public Output<String> policy() {
        return this.policy;
    }

    /**
     * ARN of the sink to attach this policy to.
     * 
     */
    @Import(name="sinkIdentifier", required=true)
    private Output<String> sinkIdentifier;

    /**
     * @return ARN of the sink to attach this policy to.
     * 
     */
    public Output<String> sinkIdentifier() {
        return this.sinkIdentifier;
    }

    private SinkPolicyArgs() {}

    private SinkPolicyArgs(SinkPolicyArgs $) {
        this.policy = $.policy;
        this.sinkIdentifier = $.sinkIdentifier;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SinkPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SinkPolicyArgs $;

        public Builder() {
            $ = new SinkPolicyArgs();
        }

        public Builder(SinkPolicyArgs defaults) {
            $ = new SinkPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param policy JSON policy to use. If you are updating an existing policy, the entire existing policy is replaced by what you specify here.
         * 
         * @return builder
         * 
         */
        public Builder policy(Output<String> policy) {
            $.policy = policy;
            return this;
        }

        /**
         * @param policy JSON policy to use. If you are updating an existing policy, the entire existing policy is replaced by what you specify here.
         * 
         * @return builder
         * 
         */
        public Builder policy(String policy) {
            return policy(Output.of(policy));
        }

        /**
         * @param sinkIdentifier ARN of the sink to attach this policy to.
         * 
         * @return builder
         * 
         */
        public Builder sinkIdentifier(Output<String> sinkIdentifier) {
            $.sinkIdentifier = sinkIdentifier;
            return this;
        }

        /**
         * @param sinkIdentifier ARN of the sink to attach this policy to.
         * 
         * @return builder
         * 
         */
        public Builder sinkIdentifier(String sinkIdentifier) {
            return sinkIdentifier(Output.of(sinkIdentifier));
        }

        public SinkPolicyArgs build() {
            if ($.policy == null) {
                throw new MissingRequiredPropertyException("SinkPolicyArgs", "policy");
            }
            if ($.sinkIdentifier == null) {
                throw new MissingRequiredPropertyException("SinkPolicyArgs", "sinkIdentifier");
            }
            return $;
        }
    }

}
