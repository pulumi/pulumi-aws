// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.elasticloadbalancingv2.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ListenerCertificateState extends com.pulumi.resources.ResourceArgs {

    public static final ListenerCertificateState Empty = new ListenerCertificateState();

    /**
     * The ARN of the certificate to attach to the listener.
     * 
     */
    @Import(name="certificateArn")
    private @Nullable Output<String> certificateArn;

    /**
     * @return The ARN of the certificate to attach to the listener.
     * 
     */
    public Optional<Output<String>> certificateArn() {
        return Optional.ofNullable(this.certificateArn);
    }

    /**
     * The ARN of the listener to which to attach the certificate.
     * 
     */
    @Import(name="listenerArn")
    private @Nullable Output<String> listenerArn;

    /**
     * @return The ARN of the listener to which to attach the certificate.
     * 
     */
    public Optional<Output<String>> listenerArn() {
        return Optional.ofNullable(this.listenerArn);
    }

    private ListenerCertificateState() {}

    private ListenerCertificateState(ListenerCertificateState $) {
        this.certificateArn = $.certificateArn;
        this.listenerArn = $.listenerArn;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ListenerCertificateState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ListenerCertificateState $;

        public Builder() {
            $ = new ListenerCertificateState();
        }

        public Builder(ListenerCertificateState defaults) {
            $ = new ListenerCertificateState(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificateArn The ARN of the certificate to attach to the listener.
         * 
         * @return builder
         * 
         */
        public Builder certificateArn(@Nullable Output<String> certificateArn) {
            $.certificateArn = certificateArn;
            return this;
        }

        /**
         * @param certificateArn The ARN of the certificate to attach to the listener.
         * 
         * @return builder
         * 
         */
        public Builder certificateArn(String certificateArn) {
            return certificateArn(Output.of(certificateArn));
        }

        /**
         * @param listenerArn The ARN of the listener to which to attach the certificate.
         * 
         * @return builder
         * 
         */
        public Builder listenerArn(@Nullable Output<String> listenerArn) {
            $.listenerArn = listenerArn;
            return this;
        }

        /**
         * @param listenerArn The ARN of the listener to which to attach the certificate.
         * 
         * @return builder
         * 
         */
        public Builder listenerArn(String listenerArn) {
            return listenerArn(Output.of(listenerArn));
        }

        public ListenerCertificateState build() {
            return $;
        }
    }

}
