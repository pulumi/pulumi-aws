// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.s3.inputs;

import com.pulumi.aws.s3.inputs.BucketV2LifecycleRuleExpirationArgs;
import com.pulumi.aws.s3.inputs.BucketV2LifecycleRuleNoncurrentVersionExpirationArgs;
import com.pulumi.aws.s3.inputs.BucketV2LifecycleRuleNoncurrentVersionTransitionArgs;
import com.pulumi.aws.s3.inputs.BucketV2LifecycleRuleTransitionArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BucketV2LifecycleRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final BucketV2LifecycleRuleArgs Empty = new BucketV2LifecycleRuleArgs();

    @Import(name="abortIncompleteMultipartUploadDays")
    private @Nullable Output<Integer> abortIncompleteMultipartUploadDays;

    public Optional<Output<Integer>> abortIncompleteMultipartUploadDays() {
        return Optional.ofNullable(this.abortIncompleteMultipartUploadDays);
    }

    @Import(name="enabled", required=true)
    private Output<Boolean> enabled;

    public Output<Boolean> enabled() {
        return this.enabled;
    }

    @Import(name="expirations")
    private @Nullable Output<List<BucketV2LifecycleRuleExpirationArgs>> expirations;

    public Optional<Output<List<BucketV2LifecycleRuleExpirationArgs>>> expirations() {
        return Optional.ofNullable(this.expirations);
    }

    @Import(name="id")
    private @Nullable Output<String> id;

    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    @Import(name="noncurrentVersionExpirations")
    private @Nullable Output<List<BucketV2LifecycleRuleNoncurrentVersionExpirationArgs>> noncurrentVersionExpirations;

    public Optional<Output<List<BucketV2LifecycleRuleNoncurrentVersionExpirationArgs>>> noncurrentVersionExpirations() {
        return Optional.ofNullable(this.noncurrentVersionExpirations);
    }

    @Import(name="noncurrentVersionTransitions")
    private @Nullable Output<List<BucketV2LifecycleRuleNoncurrentVersionTransitionArgs>> noncurrentVersionTransitions;

    public Optional<Output<List<BucketV2LifecycleRuleNoncurrentVersionTransitionArgs>>> noncurrentVersionTransitions() {
        return Optional.ofNullable(this.noncurrentVersionTransitions);
    }

    @Import(name="prefix")
    private @Nullable Output<String> prefix;

    public Optional<Output<String>> prefix() {
        return Optional.ofNullable(this.prefix);
    }

    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="transitions")
    private @Nullable Output<List<BucketV2LifecycleRuleTransitionArgs>> transitions;

    public Optional<Output<List<BucketV2LifecycleRuleTransitionArgs>>> transitions() {
        return Optional.ofNullable(this.transitions);
    }

    private BucketV2LifecycleRuleArgs() {}

    private BucketV2LifecycleRuleArgs(BucketV2LifecycleRuleArgs $) {
        this.abortIncompleteMultipartUploadDays = $.abortIncompleteMultipartUploadDays;
        this.enabled = $.enabled;
        this.expirations = $.expirations;
        this.id = $.id;
        this.noncurrentVersionExpirations = $.noncurrentVersionExpirations;
        this.noncurrentVersionTransitions = $.noncurrentVersionTransitions;
        this.prefix = $.prefix;
        this.tags = $.tags;
        this.transitions = $.transitions;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BucketV2LifecycleRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BucketV2LifecycleRuleArgs $;

        public Builder() {
            $ = new BucketV2LifecycleRuleArgs();
        }

        public Builder(BucketV2LifecycleRuleArgs defaults) {
            $ = new BucketV2LifecycleRuleArgs(Objects.requireNonNull(defaults));
        }

        public Builder abortIncompleteMultipartUploadDays(@Nullable Output<Integer> abortIncompleteMultipartUploadDays) {
            $.abortIncompleteMultipartUploadDays = abortIncompleteMultipartUploadDays;
            return this;
        }

        public Builder abortIncompleteMultipartUploadDays(Integer abortIncompleteMultipartUploadDays) {
            return abortIncompleteMultipartUploadDays(Output.of(abortIncompleteMultipartUploadDays));
        }

        public Builder enabled(Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        public Builder expirations(@Nullable Output<List<BucketV2LifecycleRuleExpirationArgs>> expirations) {
            $.expirations = expirations;
            return this;
        }

        public Builder expirations(List<BucketV2LifecycleRuleExpirationArgs> expirations) {
            return expirations(Output.of(expirations));
        }

        public Builder expirations(BucketV2LifecycleRuleExpirationArgs... expirations) {
            return expirations(List.of(expirations));
        }

        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        public Builder id(String id) {
            return id(Output.of(id));
        }

        public Builder noncurrentVersionExpirations(@Nullable Output<List<BucketV2LifecycleRuleNoncurrentVersionExpirationArgs>> noncurrentVersionExpirations) {
            $.noncurrentVersionExpirations = noncurrentVersionExpirations;
            return this;
        }

        public Builder noncurrentVersionExpirations(List<BucketV2LifecycleRuleNoncurrentVersionExpirationArgs> noncurrentVersionExpirations) {
            return noncurrentVersionExpirations(Output.of(noncurrentVersionExpirations));
        }

        public Builder noncurrentVersionExpirations(BucketV2LifecycleRuleNoncurrentVersionExpirationArgs... noncurrentVersionExpirations) {
            return noncurrentVersionExpirations(List.of(noncurrentVersionExpirations));
        }

        public Builder noncurrentVersionTransitions(@Nullable Output<List<BucketV2LifecycleRuleNoncurrentVersionTransitionArgs>> noncurrentVersionTransitions) {
            $.noncurrentVersionTransitions = noncurrentVersionTransitions;
            return this;
        }

        public Builder noncurrentVersionTransitions(List<BucketV2LifecycleRuleNoncurrentVersionTransitionArgs> noncurrentVersionTransitions) {
            return noncurrentVersionTransitions(Output.of(noncurrentVersionTransitions));
        }

        public Builder noncurrentVersionTransitions(BucketV2LifecycleRuleNoncurrentVersionTransitionArgs... noncurrentVersionTransitions) {
            return noncurrentVersionTransitions(List.of(noncurrentVersionTransitions));
        }

        public Builder prefix(@Nullable Output<String> prefix) {
            $.prefix = prefix;
            return this;
        }

        public Builder prefix(String prefix) {
            return prefix(Output.of(prefix));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder transitions(@Nullable Output<List<BucketV2LifecycleRuleTransitionArgs>> transitions) {
            $.transitions = transitions;
            return this;
        }

        public Builder transitions(List<BucketV2LifecycleRuleTransitionArgs> transitions) {
            return transitions(Output.of(transitions));
        }

        public Builder transitions(BucketV2LifecycleRuleTransitionArgs... transitions) {
            return transitions(List.of(transitions));
        }

        public BucketV2LifecycleRuleArgs build() {
            $.enabled = Objects.requireNonNull($.enabled, "expected parameter 'enabled' to be non-null");
            return $;
        }
    }

}
