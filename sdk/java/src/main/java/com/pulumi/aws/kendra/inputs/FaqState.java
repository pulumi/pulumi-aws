// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.kendra.inputs;

import com.pulumi.aws.kendra.inputs.FaqS3PathArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FaqState extends com.pulumi.resources.ResourceArgs {

    public static final FaqState Empty = new FaqState();

    @Import(name="arn")
    private @Nullable Output<String> arn;

    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    @Import(name="createdAt")
    private @Nullable Output<String> createdAt;

    public Optional<Output<String>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="errorMessage")
    private @Nullable Output<String> errorMessage;

    public Optional<Output<String>> errorMessage() {
        return Optional.ofNullable(this.errorMessage);
    }

    @Import(name="faqId")
    private @Nullable Output<String> faqId;

    public Optional<Output<String>> faqId() {
        return Optional.ofNullable(this.faqId);
    }

    @Import(name="fileFormat")
    private @Nullable Output<String> fileFormat;

    public Optional<Output<String>> fileFormat() {
        return Optional.ofNullable(this.fileFormat);
    }

    @Import(name="indexId")
    private @Nullable Output<String> indexId;

    public Optional<Output<String>> indexId() {
        return Optional.ofNullable(this.indexId);
    }

    @Import(name="languageCode")
    private @Nullable Output<String> languageCode;

    public Optional<Output<String>> languageCode() {
        return Optional.ofNullable(this.languageCode);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="roleArn")
    private @Nullable Output<String> roleArn;

    public Optional<Output<String>> roleArn() {
        return Optional.ofNullable(this.roleArn);
    }

    @Import(name="s3Path")
    private @Nullable Output<FaqS3PathArgs> s3Path;

    public Optional<Output<FaqS3PathArgs>> s3Path() {
        return Optional.ofNullable(this.s3Path);
    }

    @Import(name="status")
    private @Nullable Output<String> status;

    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    @Import(name="updatedAt")
    private @Nullable Output<String> updatedAt;

    public Optional<Output<String>> updatedAt() {
        return Optional.ofNullable(this.updatedAt);
    }

    private FaqState() {}

    private FaqState(FaqState $) {
        this.arn = $.arn;
        this.createdAt = $.createdAt;
        this.description = $.description;
        this.errorMessage = $.errorMessage;
        this.faqId = $.faqId;
        this.fileFormat = $.fileFormat;
        this.indexId = $.indexId;
        this.languageCode = $.languageCode;
        this.name = $.name;
        this.roleArn = $.roleArn;
        this.s3Path = $.s3Path;
        this.status = $.status;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
        this.updatedAt = $.updatedAt;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FaqState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FaqState $;

        public Builder() {
            $ = new FaqState();
        }

        public Builder(FaqState defaults) {
            $ = new FaqState(Objects.requireNonNull(defaults));
        }

        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        public Builder createdAt(@Nullable Output<String> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        public Builder createdAt(String createdAt) {
            return createdAt(Output.of(createdAt));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder errorMessage(@Nullable Output<String> errorMessage) {
            $.errorMessage = errorMessage;
            return this;
        }

        public Builder errorMessage(String errorMessage) {
            return errorMessage(Output.of(errorMessage));
        }

        public Builder faqId(@Nullable Output<String> faqId) {
            $.faqId = faqId;
            return this;
        }

        public Builder faqId(String faqId) {
            return faqId(Output.of(faqId));
        }

        public Builder fileFormat(@Nullable Output<String> fileFormat) {
            $.fileFormat = fileFormat;
            return this;
        }

        public Builder fileFormat(String fileFormat) {
            return fileFormat(Output.of(fileFormat));
        }

        public Builder indexId(@Nullable Output<String> indexId) {
            $.indexId = indexId;
            return this;
        }

        public Builder indexId(String indexId) {
            return indexId(Output.of(indexId));
        }

        public Builder languageCode(@Nullable Output<String> languageCode) {
            $.languageCode = languageCode;
            return this;
        }

        public Builder languageCode(String languageCode) {
            return languageCode(Output.of(languageCode));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder roleArn(@Nullable Output<String> roleArn) {
            $.roleArn = roleArn;
            return this;
        }

        public Builder roleArn(String roleArn) {
            return roleArn(Output.of(roleArn));
        }

        public Builder s3Path(@Nullable Output<FaqS3PathArgs> s3Path) {
            $.s3Path = s3Path;
            return this;
        }

        public Builder s3Path(FaqS3PathArgs s3Path) {
            return s3Path(Output.of(s3Path));
        }

        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        public Builder status(String status) {
            return status(Output.of(status));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        public Builder updatedAt(@Nullable Output<String> updatedAt) {
            $.updatedAt = updatedAt;
            return this;
        }

        public Builder updatedAt(String updatedAt) {
            return updatedAt(Output.of(updatedAt));
        }

        public FaqState build() {
            return $;
        }
    }

}
