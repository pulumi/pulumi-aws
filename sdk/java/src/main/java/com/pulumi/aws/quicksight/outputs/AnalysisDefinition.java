// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.outputs;

import com.pulumi.aws.quicksight.outputs.AnalysisDefinitionAnalysisDefaults;
import com.pulumi.aws.quicksight.outputs.AnalysisDefinitionCalculatedField;
import com.pulumi.aws.quicksight.outputs.AnalysisDefinitionColumnConfiguration;
import com.pulumi.aws.quicksight.outputs.AnalysisDefinitionDataSetIdentifiersDeclaration;
import com.pulumi.aws.quicksight.outputs.AnalysisDefinitionFilterGroup;
import com.pulumi.aws.quicksight.outputs.AnalysisDefinitionParameterDeclaration;
import com.pulumi.aws.quicksight.outputs.AnalysisDefinitionSheet;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class AnalysisDefinition {
    /**
     * @return The configuration for default analysis settings. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_AnalysisDefaults.html).
     * 
     */
    private @Nullable AnalysisDefinitionAnalysisDefaults analysisDefaults;
    /**
     * @return A list of calculated field definitions for the analysis. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_CalculatedField.html).
     * 
     */
    private @Nullable List<AnalysisDefinitionCalculatedField> calculatedFields;
    /**
     * @return A list of analysis-level column configurations. Column configurations are used to set default formatting for a column that&#39;s used throughout an analysis. See AWS API Documentation for complete description.
     * 
     */
    private @Nullable List<AnalysisDefinitionColumnConfiguration> columnConfigurations;
    /**
     * @return A list dataset identifier declarations. With this mapping,you can use dataset identifiers instead of dataset Amazon Resource Names (ARNs) throughout the analysis sub-structures. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_DataSetIdentifierDeclaration.html).
     * 
     */
    private List<AnalysisDefinitionDataSetIdentifiersDeclaration> dataSetIdentifiersDeclarations;
    /**
     * @return A list of filter definitions for an analysis. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_FilterGroup.html). For more information, see [Filtering Data](https://docs.aws.amazon.com/quicksight/latest/user/filtering-visual-data.html) in Amazon QuickSight User Guide.
     * 
     */
    private @Nullable List<AnalysisDefinitionFilterGroup> filterGroups;
    private @Nullable List<AnalysisDefinitionParameterDeclaration> parameterDeclarations;
    /**
     * @return A list of sheet definitions for an analysis. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_SheetDefinition.html).
     * 
     */
    private @Nullable List<AnalysisDefinitionSheet> sheets;

    private AnalysisDefinition() {}
    /**
     * @return The configuration for default analysis settings. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_AnalysisDefaults.html).
     * 
     */
    public Optional<AnalysisDefinitionAnalysisDefaults> analysisDefaults() {
        return Optional.ofNullable(this.analysisDefaults);
    }
    /**
     * @return A list of calculated field definitions for the analysis. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_CalculatedField.html).
     * 
     */
    public List<AnalysisDefinitionCalculatedField> calculatedFields() {
        return this.calculatedFields == null ? List.of() : this.calculatedFields;
    }
    /**
     * @return A list of analysis-level column configurations. Column configurations are used to set default formatting for a column that&#39;s used throughout an analysis. See AWS API Documentation for complete description.
     * 
     */
    public List<AnalysisDefinitionColumnConfiguration> columnConfigurations() {
        return this.columnConfigurations == null ? List.of() : this.columnConfigurations;
    }
    /**
     * @return A list dataset identifier declarations. With this mapping,you can use dataset identifiers instead of dataset Amazon Resource Names (ARNs) throughout the analysis sub-structures. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_DataSetIdentifierDeclaration.html).
     * 
     */
    public List<AnalysisDefinitionDataSetIdentifiersDeclaration> dataSetIdentifiersDeclarations() {
        return this.dataSetIdentifiersDeclarations;
    }
    /**
     * @return A list of filter definitions for an analysis. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_FilterGroup.html). For more information, see [Filtering Data](https://docs.aws.amazon.com/quicksight/latest/user/filtering-visual-data.html) in Amazon QuickSight User Guide.
     * 
     */
    public List<AnalysisDefinitionFilterGroup> filterGroups() {
        return this.filterGroups == null ? List.of() : this.filterGroups;
    }
    public List<AnalysisDefinitionParameterDeclaration> parameterDeclarations() {
        return this.parameterDeclarations == null ? List.of() : this.parameterDeclarations;
    }
    /**
     * @return A list of sheet definitions for an analysis. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_SheetDefinition.html).
     * 
     */
    public List<AnalysisDefinitionSheet> sheets() {
        return this.sheets == null ? List.of() : this.sheets;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AnalysisDefinition defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable AnalysisDefinitionAnalysisDefaults analysisDefaults;
        private @Nullable List<AnalysisDefinitionCalculatedField> calculatedFields;
        private @Nullable List<AnalysisDefinitionColumnConfiguration> columnConfigurations;
        private List<AnalysisDefinitionDataSetIdentifiersDeclaration> dataSetIdentifiersDeclarations;
        private @Nullable List<AnalysisDefinitionFilterGroup> filterGroups;
        private @Nullable List<AnalysisDefinitionParameterDeclaration> parameterDeclarations;
        private @Nullable List<AnalysisDefinitionSheet> sheets;
        public Builder() {}
        public Builder(AnalysisDefinition defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.analysisDefaults = defaults.analysisDefaults;
    	      this.calculatedFields = defaults.calculatedFields;
    	      this.columnConfigurations = defaults.columnConfigurations;
    	      this.dataSetIdentifiersDeclarations = defaults.dataSetIdentifiersDeclarations;
    	      this.filterGroups = defaults.filterGroups;
    	      this.parameterDeclarations = defaults.parameterDeclarations;
    	      this.sheets = defaults.sheets;
        }

        @CustomType.Setter
        public Builder analysisDefaults(@Nullable AnalysisDefinitionAnalysisDefaults analysisDefaults) {

            this.analysisDefaults = analysisDefaults;
            return this;
        }
        @CustomType.Setter
        public Builder calculatedFields(@Nullable List<AnalysisDefinitionCalculatedField> calculatedFields) {

            this.calculatedFields = calculatedFields;
            return this;
        }
        public Builder calculatedFields(AnalysisDefinitionCalculatedField... calculatedFields) {
            return calculatedFields(List.of(calculatedFields));
        }
        @CustomType.Setter
        public Builder columnConfigurations(@Nullable List<AnalysisDefinitionColumnConfiguration> columnConfigurations) {

            this.columnConfigurations = columnConfigurations;
            return this;
        }
        public Builder columnConfigurations(AnalysisDefinitionColumnConfiguration... columnConfigurations) {
            return columnConfigurations(List.of(columnConfigurations));
        }
        @CustomType.Setter
        public Builder dataSetIdentifiersDeclarations(List<AnalysisDefinitionDataSetIdentifiersDeclaration> dataSetIdentifiersDeclarations) {
            if (dataSetIdentifiersDeclarations == null) {
              throw new MissingRequiredPropertyException("AnalysisDefinition", "dataSetIdentifiersDeclarations");
            }
            this.dataSetIdentifiersDeclarations = dataSetIdentifiersDeclarations;
            return this;
        }
        public Builder dataSetIdentifiersDeclarations(AnalysisDefinitionDataSetIdentifiersDeclaration... dataSetIdentifiersDeclarations) {
            return dataSetIdentifiersDeclarations(List.of(dataSetIdentifiersDeclarations));
        }
        @CustomType.Setter
        public Builder filterGroups(@Nullable List<AnalysisDefinitionFilterGroup> filterGroups) {

            this.filterGroups = filterGroups;
            return this;
        }
        public Builder filterGroups(AnalysisDefinitionFilterGroup... filterGroups) {
            return filterGroups(List.of(filterGroups));
        }
        @CustomType.Setter
        public Builder parameterDeclarations(@Nullable List<AnalysisDefinitionParameterDeclaration> parameterDeclarations) {

            this.parameterDeclarations = parameterDeclarations;
            return this;
        }
        public Builder parameterDeclarations(AnalysisDefinitionParameterDeclaration... parameterDeclarations) {
            return parameterDeclarations(List.of(parameterDeclarations));
        }
        @CustomType.Setter
        public Builder sheets(@Nullable List<AnalysisDefinitionSheet> sheets) {

            this.sheets = sheets;
            return this;
        }
        public Builder sheets(AnalysisDefinitionSheet... sheets) {
            return sheets(List.of(sheets));
        }
        public AnalysisDefinition build() {
            final var _resultValue = new AnalysisDefinition();
            _resultValue.analysisDefaults = analysisDefaults;
            _resultValue.calculatedFields = calculatedFields;
            _resultValue.columnConfigurations = columnConfigurations;
            _resultValue.dataSetIdentifiersDeclarations = dataSetIdentifiersDeclarations;
            _resultValue.filterGroups = filterGroups;
            _resultValue.parameterDeclarations = parameterDeclarations;
            _resultValue.sheets = sheets;
            return _resultValue;
        }
    }
}
