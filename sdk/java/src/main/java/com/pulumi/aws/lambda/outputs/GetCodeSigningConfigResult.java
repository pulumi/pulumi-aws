// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.lambda.outputs;

import com.pulumi.aws.lambda.outputs.GetCodeSigningConfigAllowedPublisher;
import com.pulumi.aws.lambda.outputs.GetCodeSigningConfigPolicy;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetCodeSigningConfigResult {
    /**
     * @return List of allowed publishers as signing profiles for this code signing configuration.
     * 
     */
    private List<GetCodeSigningConfigAllowedPublisher> allowedPublishers;
    private String arn;
    /**
     * @return Unique identifier for the code signing configuration.
     * 
     */
    private String configId;
    /**
     * @return Code signing configuration description.
     * 
     */
    private String description;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Date and time that the code signing configuration was last modified.
     * 
     */
    private String lastModified;
    /**
     * @return List of code signing policies that control the validation failure action for signature mismatch or expiry.
     * 
     */
    private List<GetCodeSigningConfigPolicy> policies;

    private GetCodeSigningConfigResult() {}
    /**
     * @return List of allowed publishers as signing profiles for this code signing configuration.
     * 
     */
    public List<GetCodeSigningConfigAllowedPublisher> allowedPublishers() {
        return this.allowedPublishers;
    }
    public String arn() {
        return this.arn;
    }
    /**
     * @return Unique identifier for the code signing configuration.
     * 
     */
    public String configId() {
        return this.configId;
    }
    /**
     * @return Code signing configuration description.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Date and time that the code signing configuration was last modified.
     * 
     */
    public String lastModified() {
        return this.lastModified;
    }
    /**
     * @return List of code signing policies that control the validation failure action for signature mismatch or expiry.
     * 
     */
    public List<GetCodeSigningConfigPolicy> policies() {
        return this.policies;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCodeSigningConfigResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetCodeSigningConfigAllowedPublisher> allowedPublishers;
        private String arn;
        private String configId;
        private String description;
        private String id;
        private String lastModified;
        private List<GetCodeSigningConfigPolicy> policies;
        public Builder() {}
        public Builder(GetCodeSigningConfigResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowedPublishers = defaults.allowedPublishers;
    	      this.arn = defaults.arn;
    	      this.configId = defaults.configId;
    	      this.description = defaults.description;
    	      this.id = defaults.id;
    	      this.lastModified = defaults.lastModified;
    	      this.policies = defaults.policies;
        }

        @CustomType.Setter
        public Builder allowedPublishers(List<GetCodeSigningConfigAllowedPublisher> allowedPublishers) {
            if (allowedPublishers == null) {
              throw new MissingRequiredPropertyException("GetCodeSigningConfigResult", "allowedPublishers");
            }
            this.allowedPublishers = allowedPublishers;
            return this;
        }
        public Builder allowedPublishers(GetCodeSigningConfigAllowedPublisher... allowedPublishers) {
            return allowedPublishers(List.of(allowedPublishers));
        }
        @CustomType.Setter
        public Builder arn(String arn) {
            if (arn == null) {
              throw new MissingRequiredPropertyException("GetCodeSigningConfigResult", "arn");
            }
            this.arn = arn;
            return this;
        }
        @CustomType.Setter
        public Builder configId(String configId) {
            if (configId == null) {
              throw new MissingRequiredPropertyException("GetCodeSigningConfigResult", "configId");
            }
            this.configId = configId;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetCodeSigningConfigResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetCodeSigningConfigResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder lastModified(String lastModified) {
            if (lastModified == null) {
              throw new MissingRequiredPropertyException("GetCodeSigningConfigResult", "lastModified");
            }
            this.lastModified = lastModified;
            return this;
        }
        @CustomType.Setter
        public Builder policies(List<GetCodeSigningConfigPolicy> policies) {
            if (policies == null) {
              throw new MissingRequiredPropertyException("GetCodeSigningConfigResult", "policies");
            }
            this.policies = policies;
            return this;
        }
        public Builder policies(GetCodeSigningConfigPolicy... policies) {
            return policies(List.of(policies));
        }
        public GetCodeSigningConfigResult build() {
            final var _resultValue = new GetCodeSigningConfigResult();
            _resultValue.allowedPublishers = allowedPublishers;
            _resultValue.arn = arn;
            _resultValue.configId = configId;
            _resultValue.description = description;
            _resultValue.id = id;
            _resultValue.lastModified = lastModified;
            _resultValue.policies = policies;
            return _resultValue;
        }
    }
}
