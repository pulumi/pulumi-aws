// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.verifiedpermissions.inputs;

import com.pulumi.aws.verifiedpermissions.inputs.IdentitySourceConfigurationOpenIdConnectConfigurationGroupConfigurationArgs;
import com.pulumi.aws.verifiedpermissions.inputs.IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelectionArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IdentitySourceConfigurationOpenIdConnectConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final IdentitySourceConfigurationOpenIdConnectConfigurationArgs Empty = new IdentitySourceConfigurationOpenIdConnectConfigurationArgs();

    /**
     * A descriptive string that you want to prefix to user entities from your OIDC identity provider.
     * 
     */
    @Import(name="entityIdPrefix")
    private @Nullable Output<String> entityIdPrefix;

    /**
     * @return A descriptive string that you want to prefix to user entities from your OIDC identity provider.
     * 
     */
    public Optional<Output<String>> entityIdPrefix() {
        return Optional.ofNullable(this.entityIdPrefix);
    }

    /**
     * The type of entity that a policy store maps to groups from an Amazon Cognito user pool identity source. See Group Configuration below.
     * 
     */
    @Import(name="groupConfiguration")
    private @Nullable Output<IdentitySourceConfigurationOpenIdConnectConfigurationGroupConfigurationArgs> groupConfiguration;

    /**
     * @return The type of entity that a policy store maps to groups from an Amazon Cognito user pool identity source. See Group Configuration below.
     * 
     */
    public Optional<Output<IdentitySourceConfigurationOpenIdConnectConfigurationGroupConfigurationArgs>> groupConfiguration() {
        return Optional.ofNullable(this.groupConfiguration);
    }

    /**
     * The issuer URL of an OIDC identity provider. This URL must have an OIDC discovery endpoint at the path `.well-known/openid-configuration`.
     * 
     */
    @Import(name="issuer", required=true)
    private Output<String> issuer;

    /**
     * @return The issuer URL of an OIDC identity provider. This URL must have an OIDC discovery endpoint at the path `.well-known/openid-configuration`.
     * 
     */
    public Output<String> issuer() {
        return this.issuer;
    }

    /**
     * The token type that you want to process from your OIDC identity provider. Your policy store can process either identity (ID) or access tokens from a given OIDC identity source. See Token Selection below.
     * 
     */
    @Import(name="tokenSelection")
    private @Nullable Output<IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelectionArgs> tokenSelection;

    /**
     * @return The token type that you want to process from your OIDC identity provider. Your policy store can process either identity (ID) or access tokens from a given OIDC identity source. See Token Selection below.
     * 
     */
    public Optional<Output<IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelectionArgs>> tokenSelection() {
        return Optional.ofNullable(this.tokenSelection);
    }

    private IdentitySourceConfigurationOpenIdConnectConfigurationArgs() {}

    private IdentitySourceConfigurationOpenIdConnectConfigurationArgs(IdentitySourceConfigurationOpenIdConnectConfigurationArgs $) {
        this.entityIdPrefix = $.entityIdPrefix;
        this.groupConfiguration = $.groupConfiguration;
        this.issuer = $.issuer;
        this.tokenSelection = $.tokenSelection;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IdentitySourceConfigurationOpenIdConnectConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IdentitySourceConfigurationOpenIdConnectConfigurationArgs $;

        public Builder() {
            $ = new IdentitySourceConfigurationOpenIdConnectConfigurationArgs();
        }

        public Builder(IdentitySourceConfigurationOpenIdConnectConfigurationArgs defaults) {
            $ = new IdentitySourceConfigurationOpenIdConnectConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param entityIdPrefix A descriptive string that you want to prefix to user entities from your OIDC identity provider.
         * 
         * @return builder
         * 
         */
        public Builder entityIdPrefix(@Nullable Output<String> entityIdPrefix) {
            $.entityIdPrefix = entityIdPrefix;
            return this;
        }

        /**
         * @param entityIdPrefix A descriptive string that you want to prefix to user entities from your OIDC identity provider.
         * 
         * @return builder
         * 
         */
        public Builder entityIdPrefix(String entityIdPrefix) {
            return entityIdPrefix(Output.of(entityIdPrefix));
        }

        /**
         * @param groupConfiguration The type of entity that a policy store maps to groups from an Amazon Cognito user pool identity source. See Group Configuration below.
         * 
         * @return builder
         * 
         */
        public Builder groupConfiguration(@Nullable Output<IdentitySourceConfigurationOpenIdConnectConfigurationGroupConfigurationArgs> groupConfiguration) {
            $.groupConfiguration = groupConfiguration;
            return this;
        }

        /**
         * @param groupConfiguration The type of entity that a policy store maps to groups from an Amazon Cognito user pool identity source. See Group Configuration below.
         * 
         * @return builder
         * 
         */
        public Builder groupConfiguration(IdentitySourceConfigurationOpenIdConnectConfigurationGroupConfigurationArgs groupConfiguration) {
            return groupConfiguration(Output.of(groupConfiguration));
        }

        /**
         * @param issuer The issuer URL of an OIDC identity provider. This URL must have an OIDC discovery endpoint at the path `.well-known/openid-configuration`.
         * 
         * @return builder
         * 
         */
        public Builder issuer(Output<String> issuer) {
            $.issuer = issuer;
            return this;
        }

        /**
         * @param issuer The issuer URL of an OIDC identity provider. This URL must have an OIDC discovery endpoint at the path `.well-known/openid-configuration`.
         * 
         * @return builder
         * 
         */
        public Builder issuer(String issuer) {
            return issuer(Output.of(issuer));
        }

        /**
         * @param tokenSelection The token type that you want to process from your OIDC identity provider. Your policy store can process either identity (ID) or access tokens from a given OIDC identity source. See Token Selection below.
         * 
         * @return builder
         * 
         */
        public Builder tokenSelection(@Nullable Output<IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelectionArgs> tokenSelection) {
            $.tokenSelection = tokenSelection;
            return this;
        }

        /**
         * @param tokenSelection The token type that you want to process from your OIDC identity provider. Your policy store can process either identity (ID) or access tokens from a given OIDC identity source. See Token Selection below.
         * 
         * @return builder
         * 
         */
        public Builder tokenSelection(IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelectionArgs tokenSelection) {
            return tokenSelection(Output.of(tokenSelection));
        }

        public IdentitySourceConfigurationOpenIdConnectConfigurationArgs build() {
            if ($.issuer == null) {
                throw new MissingRequiredPropertyException("IdentitySourceConfigurationOpenIdConnectConfigurationArgs", "issuer");
            }
            return $;
        }
    }

}
