// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.lakeformation.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class LfTagExpressionExpressionArgs extends com.pulumi.resources.ResourceArgs {

    public static final LfTagExpressionExpressionArgs Empty = new LfTagExpressionExpressionArgs();

    /**
     * The key-name for the LF-Tag.
     * 
     */
    @Import(name="tagKey", required=true)
    private Output<String> tagKey;

    /**
     * @return The key-name for the LF-Tag.
     * 
     */
    public Output<String> tagKey() {
        return this.tagKey;
    }

    /**
     * A list of possible values for the LF-Tag
     * 
     */
    @Import(name="tagValues", required=true)
    private Output<List<String>> tagValues;

    /**
     * @return A list of possible values for the LF-Tag
     * 
     */
    public Output<List<String>> tagValues() {
        return this.tagValues;
    }

    private LfTagExpressionExpressionArgs() {}

    private LfTagExpressionExpressionArgs(LfTagExpressionExpressionArgs $) {
        this.tagKey = $.tagKey;
        this.tagValues = $.tagValues;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LfTagExpressionExpressionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LfTagExpressionExpressionArgs $;

        public Builder() {
            $ = new LfTagExpressionExpressionArgs();
        }

        public Builder(LfTagExpressionExpressionArgs defaults) {
            $ = new LfTagExpressionExpressionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param tagKey The key-name for the LF-Tag.
         * 
         * @return builder
         * 
         */
        public Builder tagKey(Output<String> tagKey) {
            $.tagKey = tagKey;
            return this;
        }

        /**
         * @param tagKey The key-name for the LF-Tag.
         * 
         * @return builder
         * 
         */
        public Builder tagKey(String tagKey) {
            return tagKey(Output.of(tagKey));
        }

        /**
         * @param tagValues A list of possible values for the LF-Tag
         * 
         * @return builder
         * 
         */
        public Builder tagValues(Output<List<String>> tagValues) {
            $.tagValues = tagValues;
            return this;
        }

        /**
         * @param tagValues A list of possible values for the LF-Tag
         * 
         * @return builder
         * 
         */
        public Builder tagValues(List<String> tagValues) {
            return tagValues(Output.of(tagValues));
        }

        /**
         * @param tagValues A list of possible values for the LF-Tag
         * 
         * @return builder
         * 
         */
        public Builder tagValues(String... tagValues) {
            return tagValues(List.of(tagValues));
        }

        public LfTagExpressionExpressionArgs build() {
            if ($.tagKey == null) {
                throw new MissingRequiredPropertyException("LfTagExpressionExpressionArgs", "tagKey");
            }
            if ($.tagValues == null) {
                throw new MissingRequiredPropertyException("LfTagExpressionExpressionArgs", "tagValues");
            }
            return $;
        }
    }

}
