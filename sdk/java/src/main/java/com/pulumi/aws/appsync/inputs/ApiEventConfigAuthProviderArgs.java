// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.appsync.inputs;

import com.pulumi.aws.appsync.inputs.ApiEventConfigAuthProviderCognitoConfigArgs;
import com.pulumi.aws.appsync.inputs.ApiEventConfigAuthProviderLambdaAuthorizerConfigArgs;
import com.pulumi.aws.appsync.inputs.ApiEventConfigAuthProviderOpenidConnectConfigArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ApiEventConfigAuthProviderArgs extends com.pulumi.resources.ResourceArgs {

    public static final ApiEventConfigAuthProviderArgs Empty = new ApiEventConfigAuthProviderArgs();

    /**
     * Type of authentication provider. Valid values: `AMAZON_COGNITO_USER_POOLS`, `AWS_LAMBDA`, `OPENID_CONNECT`, `API_KEY`.
     * 
     */
    @Import(name="authType", required=true)
    private Output<String> authType;

    /**
     * @return Type of authentication provider. Valid values: `AMAZON_COGNITO_USER_POOLS`, `AWS_LAMBDA`, `OPENID_CONNECT`, `API_KEY`.
     * 
     */
    public Output<String> authType() {
        return this.authType;
    }

    /**
     * Configuration for Cognito user pool authentication. Required when `auth_type` is `AMAZON_COGNITO_USER_POOLS`. See Cognito Config below.
     * 
     */
    @Import(name="cognitoConfig")
    private @Nullable Output<ApiEventConfigAuthProviderCognitoConfigArgs> cognitoConfig;

    /**
     * @return Configuration for Cognito user pool authentication. Required when `auth_type` is `AMAZON_COGNITO_USER_POOLS`. See Cognito Config below.
     * 
     */
    public Optional<Output<ApiEventConfigAuthProviderCognitoConfigArgs>> cognitoConfig() {
        return Optional.ofNullable(this.cognitoConfig);
    }

    /**
     * Configuration for Lambda authorization. Required when `auth_type` is `AWS_LAMBDA`. See Lambda Authorizer Config below.
     * 
     */
    @Import(name="lambdaAuthorizerConfig")
    private @Nullable Output<ApiEventConfigAuthProviderLambdaAuthorizerConfigArgs> lambdaAuthorizerConfig;

    /**
     * @return Configuration for Lambda authorization. Required when `auth_type` is `AWS_LAMBDA`. See Lambda Authorizer Config below.
     * 
     */
    public Optional<Output<ApiEventConfigAuthProviderLambdaAuthorizerConfigArgs>> lambdaAuthorizerConfig() {
        return Optional.ofNullable(this.lambdaAuthorizerConfig);
    }

    /**
     * Configuration for OpenID Connect. Required when `auth_type` is `OPENID_CONNECT`. See OpenID Connect Config below.
     * 
     */
    @Import(name="openidConnectConfig")
    private @Nullable Output<ApiEventConfigAuthProviderOpenidConnectConfigArgs> openidConnectConfig;

    /**
     * @return Configuration for OpenID Connect. Required when `auth_type` is `OPENID_CONNECT`. See OpenID Connect Config below.
     * 
     */
    public Optional<Output<ApiEventConfigAuthProviderOpenidConnectConfigArgs>> openidConnectConfig() {
        return Optional.ofNullable(this.openidConnectConfig);
    }

    private ApiEventConfigAuthProviderArgs() {}

    private ApiEventConfigAuthProviderArgs(ApiEventConfigAuthProviderArgs $) {
        this.authType = $.authType;
        this.cognitoConfig = $.cognitoConfig;
        this.lambdaAuthorizerConfig = $.lambdaAuthorizerConfig;
        this.openidConnectConfig = $.openidConnectConfig;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApiEventConfigAuthProviderArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApiEventConfigAuthProviderArgs $;

        public Builder() {
            $ = new ApiEventConfigAuthProviderArgs();
        }

        public Builder(ApiEventConfigAuthProviderArgs defaults) {
            $ = new ApiEventConfigAuthProviderArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param authType Type of authentication provider. Valid values: `AMAZON_COGNITO_USER_POOLS`, `AWS_LAMBDA`, `OPENID_CONNECT`, `API_KEY`.
         * 
         * @return builder
         * 
         */
        public Builder authType(Output<String> authType) {
            $.authType = authType;
            return this;
        }

        /**
         * @param authType Type of authentication provider. Valid values: `AMAZON_COGNITO_USER_POOLS`, `AWS_LAMBDA`, `OPENID_CONNECT`, `API_KEY`.
         * 
         * @return builder
         * 
         */
        public Builder authType(String authType) {
            return authType(Output.of(authType));
        }

        /**
         * @param cognitoConfig Configuration for Cognito user pool authentication. Required when `auth_type` is `AMAZON_COGNITO_USER_POOLS`. See Cognito Config below.
         * 
         * @return builder
         * 
         */
        public Builder cognitoConfig(@Nullable Output<ApiEventConfigAuthProviderCognitoConfigArgs> cognitoConfig) {
            $.cognitoConfig = cognitoConfig;
            return this;
        }

        /**
         * @param cognitoConfig Configuration for Cognito user pool authentication. Required when `auth_type` is `AMAZON_COGNITO_USER_POOLS`. See Cognito Config below.
         * 
         * @return builder
         * 
         */
        public Builder cognitoConfig(ApiEventConfigAuthProviderCognitoConfigArgs cognitoConfig) {
            return cognitoConfig(Output.of(cognitoConfig));
        }

        /**
         * @param lambdaAuthorizerConfig Configuration for Lambda authorization. Required when `auth_type` is `AWS_LAMBDA`. See Lambda Authorizer Config below.
         * 
         * @return builder
         * 
         */
        public Builder lambdaAuthorizerConfig(@Nullable Output<ApiEventConfigAuthProviderLambdaAuthorizerConfigArgs> lambdaAuthorizerConfig) {
            $.lambdaAuthorizerConfig = lambdaAuthorizerConfig;
            return this;
        }

        /**
         * @param lambdaAuthorizerConfig Configuration for Lambda authorization. Required when `auth_type` is `AWS_LAMBDA`. See Lambda Authorizer Config below.
         * 
         * @return builder
         * 
         */
        public Builder lambdaAuthorizerConfig(ApiEventConfigAuthProviderLambdaAuthorizerConfigArgs lambdaAuthorizerConfig) {
            return lambdaAuthorizerConfig(Output.of(lambdaAuthorizerConfig));
        }

        /**
         * @param openidConnectConfig Configuration for OpenID Connect. Required when `auth_type` is `OPENID_CONNECT`. See OpenID Connect Config below.
         * 
         * @return builder
         * 
         */
        public Builder openidConnectConfig(@Nullable Output<ApiEventConfigAuthProviderOpenidConnectConfigArgs> openidConnectConfig) {
            $.openidConnectConfig = openidConnectConfig;
            return this;
        }

        /**
         * @param openidConnectConfig Configuration for OpenID Connect. Required when `auth_type` is `OPENID_CONNECT`. See OpenID Connect Config below.
         * 
         * @return builder
         * 
         */
        public Builder openidConnectConfig(ApiEventConfigAuthProviderOpenidConnectConfigArgs openidConnectConfig) {
            return openidConnectConfig(Output.of(openidConnectConfig));
        }

        public ApiEventConfigAuthProviderArgs build() {
            if ($.authType == null) {
                throw new MissingRequiredPropertyException("ApiEventConfigAuthProviderArgs", "authType");
            }
            return $;
        }
    }

}
