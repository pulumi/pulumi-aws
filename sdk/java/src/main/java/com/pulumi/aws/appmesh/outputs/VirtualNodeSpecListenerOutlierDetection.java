// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.appmesh.outputs;

import com.pulumi.aws.appmesh.outputs.VirtualNodeSpecListenerOutlierDetectionBaseEjectionDuration;
import com.pulumi.aws.appmesh.outputs.VirtualNodeSpecListenerOutlierDetectionInterval;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.util.Objects;

@CustomType
public final class VirtualNodeSpecListenerOutlierDetection {
    /**
     * @return Base amount of time for which a host is ejected.
     * 
     */
    private VirtualNodeSpecListenerOutlierDetectionBaseEjectionDuration baseEjectionDuration;
    /**
     * @return Time interval between ejection sweep analysis.
     * 
     */
    private VirtualNodeSpecListenerOutlierDetectionInterval interval;
    /**
     * @return Maximum percentage of hosts in load balancing pool for upstream service that can be ejected. Will eject at least one host regardless of the value.
     * Minimum value of `0`. Maximum value of `100`.
     * 
     */
    private Integer maxEjectionPercent;
    /**
     * @return Number of consecutive `5xx` errors required for ejection. Minimum value of `1`.
     * 
     */
    private Integer maxServerErrors;

    private VirtualNodeSpecListenerOutlierDetection() {}
    /**
     * @return Base amount of time for which a host is ejected.
     * 
     */
    public VirtualNodeSpecListenerOutlierDetectionBaseEjectionDuration baseEjectionDuration() {
        return this.baseEjectionDuration;
    }
    /**
     * @return Time interval between ejection sweep analysis.
     * 
     */
    public VirtualNodeSpecListenerOutlierDetectionInterval interval() {
        return this.interval;
    }
    /**
     * @return Maximum percentage of hosts in load balancing pool for upstream service that can be ejected. Will eject at least one host regardless of the value.
     * Minimum value of `0`. Maximum value of `100`.
     * 
     */
    public Integer maxEjectionPercent() {
        return this.maxEjectionPercent;
    }
    /**
     * @return Number of consecutive `5xx` errors required for ejection. Minimum value of `1`.
     * 
     */
    public Integer maxServerErrors() {
        return this.maxServerErrors;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VirtualNodeSpecListenerOutlierDetection defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private VirtualNodeSpecListenerOutlierDetectionBaseEjectionDuration baseEjectionDuration;
        private VirtualNodeSpecListenerOutlierDetectionInterval interval;
        private Integer maxEjectionPercent;
        private Integer maxServerErrors;
        public Builder() {}
        public Builder(VirtualNodeSpecListenerOutlierDetection defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.baseEjectionDuration = defaults.baseEjectionDuration;
    	      this.interval = defaults.interval;
    	      this.maxEjectionPercent = defaults.maxEjectionPercent;
    	      this.maxServerErrors = defaults.maxServerErrors;
        }

        @CustomType.Setter
        public Builder baseEjectionDuration(VirtualNodeSpecListenerOutlierDetectionBaseEjectionDuration baseEjectionDuration) {
            if (baseEjectionDuration == null) {
              throw new MissingRequiredPropertyException("VirtualNodeSpecListenerOutlierDetection", "baseEjectionDuration");
            }
            this.baseEjectionDuration = baseEjectionDuration;
            return this;
        }
        @CustomType.Setter
        public Builder interval(VirtualNodeSpecListenerOutlierDetectionInterval interval) {
            if (interval == null) {
              throw new MissingRequiredPropertyException("VirtualNodeSpecListenerOutlierDetection", "interval");
            }
            this.interval = interval;
            return this;
        }
        @CustomType.Setter
        public Builder maxEjectionPercent(Integer maxEjectionPercent) {
            if (maxEjectionPercent == null) {
              throw new MissingRequiredPropertyException("VirtualNodeSpecListenerOutlierDetection", "maxEjectionPercent");
            }
            this.maxEjectionPercent = maxEjectionPercent;
            return this;
        }
        @CustomType.Setter
        public Builder maxServerErrors(Integer maxServerErrors) {
            if (maxServerErrors == null) {
              throw new MissingRequiredPropertyException("VirtualNodeSpecListenerOutlierDetection", "maxServerErrors");
            }
            this.maxServerErrors = maxServerErrors;
            return this;
        }
        public VirtualNodeSpecListenerOutlierDetection build() {
            final var _resultValue = new VirtualNodeSpecListenerOutlierDetection();
            _resultValue.baseEjectionDuration = baseEjectionDuration;
            _resultValue.interval = interval;
            _resultValue.maxEjectionPercent = maxEjectionPercent;
            _resultValue.maxServerErrors = maxServerErrors;
            return _resultValue;
        }
    }
}
