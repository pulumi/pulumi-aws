// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.appfabric.inputs;

import com.pulumi.aws.appfabric.inputs.AppAuthorizationCredentialApiKeyCredentialArgs;
import com.pulumi.aws.appfabric.inputs.AppAuthorizationCredentialOauth2CredentialArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AppAuthorizationCredentialArgs extends com.pulumi.resources.ResourceArgs {

    public static final AppAuthorizationCredentialArgs Empty = new AppAuthorizationCredentialArgs();

    /**
     * Contains API key credential information.
     * 
     */
    @Import(name="apiKeyCredentials")
    private @Nullable Output<List<AppAuthorizationCredentialApiKeyCredentialArgs>> apiKeyCredentials;

    /**
     * @return Contains API key credential information.
     * 
     */
    public Optional<Output<List<AppAuthorizationCredentialApiKeyCredentialArgs>>> apiKeyCredentials() {
        return Optional.ofNullable(this.apiKeyCredentials);
    }

    /**
     * Contains OAuth2 client credential information.
     * 
     */
    @Import(name="oauth2Credential")
    private @Nullable Output<AppAuthorizationCredentialOauth2CredentialArgs> oauth2Credential;

    /**
     * @return Contains OAuth2 client credential information.
     * 
     */
    public Optional<Output<AppAuthorizationCredentialOauth2CredentialArgs>> oauth2Credential() {
        return Optional.ofNullable(this.oauth2Credential);
    }

    private AppAuthorizationCredentialArgs() {}

    private AppAuthorizationCredentialArgs(AppAuthorizationCredentialArgs $) {
        this.apiKeyCredentials = $.apiKeyCredentials;
        this.oauth2Credential = $.oauth2Credential;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AppAuthorizationCredentialArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AppAuthorizationCredentialArgs $;

        public Builder() {
            $ = new AppAuthorizationCredentialArgs();
        }

        public Builder(AppAuthorizationCredentialArgs defaults) {
            $ = new AppAuthorizationCredentialArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param apiKeyCredentials Contains API key credential information.
         * 
         * @return builder
         * 
         */
        public Builder apiKeyCredentials(@Nullable Output<List<AppAuthorizationCredentialApiKeyCredentialArgs>> apiKeyCredentials) {
            $.apiKeyCredentials = apiKeyCredentials;
            return this;
        }

        /**
         * @param apiKeyCredentials Contains API key credential information.
         * 
         * @return builder
         * 
         */
        public Builder apiKeyCredentials(List<AppAuthorizationCredentialApiKeyCredentialArgs> apiKeyCredentials) {
            return apiKeyCredentials(Output.of(apiKeyCredentials));
        }

        /**
         * @param apiKeyCredentials Contains API key credential information.
         * 
         * @return builder
         * 
         */
        public Builder apiKeyCredentials(AppAuthorizationCredentialApiKeyCredentialArgs... apiKeyCredentials) {
            return apiKeyCredentials(List.of(apiKeyCredentials));
        }

        /**
         * @param oauth2Credential Contains OAuth2 client credential information.
         * 
         * @return builder
         * 
         */
        public Builder oauth2Credential(@Nullable Output<AppAuthorizationCredentialOauth2CredentialArgs> oauth2Credential) {
            $.oauth2Credential = oauth2Credential;
            return this;
        }

        /**
         * @param oauth2Credential Contains OAuth2 client credential information.
         * 
         * @return builder
         * 
         */
        public Builder oauth2Credential(AppAuthorizationCredentialOauth2CredentialArgs oauth2Credential) {
            return oauth2Credential(Output.of(oauth2Credential));
        }

        public AppAuthorizationCredentialArgs build() {
            return $;
        }
    }

}
