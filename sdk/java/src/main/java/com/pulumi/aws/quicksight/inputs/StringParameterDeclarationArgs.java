// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.quicksight.inputs;

import com.pulumi.aws.quicksight.inputs.StringParameterDeclarationDefaultValuesArgs;
import com.pulumi.aws.quicksight.inputs.StringParameterDeclarationValuesWhenUnsetArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class StringParameterDeclarationArgs extends com.pulumi.resources.ResourceArgs {

    public static final StringParameterDeclarationArgs Empty = new StringParameterDeclarationArgs();

    @Import(name="defaultValues")
    private @Nullable Output<StringParameterDeclarationDefaultValuesArgs> defaultValues;

    public Optional<Output<StringParameterDeclarationDefaultValuesArgs>> defaultValues() {
        return Optional.ofNullable(this.defaultValues);
    }

    /**
     * Display name for the dashboard.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Display name for the dashboard.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    @Import(name="parameterValueType", required=true)
    private Output<String> parameterValueType;

    public Output<String> parameterValueType() {
        return this.parameterValueType;
    }

    @Import(name="valuesWhenUnset")
    private @Nullable Output<StringParameterDeclarationValuesWhenUnsetArgs> valuesWhenUnset;

    public Optional<Output<StringParameterDeclarationValuesWhenUnsetArgs>> valuesWhenUnset() {
        return Optional.ofNullable(this.valuesWhenUnset);
    }

    private StringParameterDeclarationArgs() {}

    private StringParameterDeclarationArgs(StringParameterDeclarationArgs $) {
        this.defaultValues = $.defaultValues;
        this.name = $.name;
        this.parameterValueType = $.parameterValueType;
        this.valuesWhenUnset = $.valuesWhenUnset;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StringParameterDeclarationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StringParameterDeclarationArgs $;

        public Builder() {
            $ = new StringParameterDeclarationArgs();
        }

        public Builder(StringParameterDeclarationArgs defaults) {
            $ = new StringParameterDeclarationArgs(Objects.requireNonNull(defaults));
        }

        public Builder defaultValues(@Nullable Output<StringParameterDeclarationDefaultValuesArgs> defaultValues) {
            $.defaultValues = defaultValues;
            return this;
        }

        public Builder defaultValues(StringParameterDeclarationDefaultValuesArgs defaultValues) {
            return defaultValues(Output.of(defaultValues));
        }

        /**
         * @param name Display name for the dashboard.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Display name for the dashboard.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder parameterValueType(Output<String> parameterValueType) {
            $.parameterValueType = parameterValueType;
            return this;
        }

        public Builder parameterValueType(String parameterValueType) {
            return parameterValueType(Output.of(parameterValueType));
        }

        public Builder valuesWhenUnset(@Nullable Output<StringParameterDeclarationValuesWhenUnsetArgs> valuesWhenUnset) {
            $.valuesWhenUnset = valuesWhenUnset;
            return this;
        }

        public Builder valuesWhenUnset(StringParameterDeclarationValuesWhenUnsetArgs valuesWhenUnset) {
            return valuesWhenUnset(Output.of(valuesWhenUnset));
        }

        public StringParameterDeclarationArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("StringParameterDeclarationArgs", "name");
            }
            if ($.parameterValueType == null) {
                throw new MissingRequiredPropertyException("StringParameterDeclarationArgs", "parameterValueType");
            }
            return $;
        }
    }

}
