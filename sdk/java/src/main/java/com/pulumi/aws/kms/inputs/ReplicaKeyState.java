// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.kms.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ReplicaKeyState extends com.pulumi.resources.ResourceArgs {

    public static final ReplicaKeyState Empty = new ReplicaKeyState();

    @Import(name="arn")
    private @Nullable Output<String> arn;

    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    @Import(name="bypassPolicyLockoutSafetyCheck")
    private @Nullable Output<Boolean> bypassPolicyLockoutSafetyCheck;

    public Optional<Output<Boolean>> bypassPolicyLockoutSafetyCheck() {
        return Optional.ofNullable(this.bypassPolicyLockoutSafetyCheck);
    }

    @Import(name="deletionWindowInDays")
    private @Nullable Output<Integer> deletionWindowInDays;

    public Optional<Output<Integer>> deletionWindowInDays() {
        return Optional.ofNullable(this.deletionWindowInDays);
    }

    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    @Import(name="keyId")
    private @Nullable Output<String> keyId;

    public Optional<Output<String>> keyId() {
        return Optional.ofNullable(this.keyId);
    }

    @Import(name="keyRotationEnabled")
    private @Nullable Output<Boolean> keyRotationEnabled;

    public Optional<Output<Boolean>> keyRotationEnabled() {
        return Optional.ofNullable(this.keyRotationEnabled);
    }

    @Import(name="keySpec")
    private @Nullable Output<String> keySpec;

    public Optional<Output<String>> keySpec() {
        return Optional.ofNullable(this.keySpec);
    }

    @Import(name="keyUsage")
    private @Nullable Output<String> keyUsage;

    public Optional<Output<String>> keyUsage() {
        return Optional.ofNullable(this.keyUsage);
    }

    @Import(name="policy")
    private @Nullable Output<String> policy;

    public Optional<Output<String>> policy() {
        return Optional.ofNullable(this.policy);
    }

    @Import(name="primaryKeyArn")
    private @Nullable Output<String> primaryKeyArn;

    public Optional<Output<String>> primaryKeyArn() {
        return Optional.ofNullable(this.primaryKeyArn);
    }

    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    private ReplicaKeyState() {}

    private ReplicaKeyState(ReplicaKeyState $) {
        this.arn = $.arn;
        this.bypassPolicyLockoutSafetyCheck = $.bypassPolicyLockoutSafetyCheck;
        this.deletionWindowInDays = $.deletionWindowInDays;
        this.description = $.description;
        this.enabled = $.enabled;
        this.keyId = $.keyId;
        this.keyRotationEnabled = $.keyRotationEnabled;
        this.keySpec = $.keySpec;
        this.keyUsage = $.keyUsage;
        this.policy = $.policy;
        this.primaryKeyArn = $.primaryKeyArn;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ReplicaKeyState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ReplicaKeyState $;

        public Builder() {
            $ = new ReplicaKeyState();
        }

        public Builder(ReplicaKeyState defaults) {
            $ = new ReplicaKeyState(Objects.requireNonNull(defaults));
        }

        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        public Builder bypassPolicyLockoutSafetyCheck(@Nullable Output<Boolean> bypassPolicyLockoutSafetyCheck) {
            $.bypassPolicyLockoutSafetyCheck = bypassPolicyLockoutSafetyCheck;
            return this;
        }

        public Builder bypassPolicyLockoutSafetyCheck(Boolean bypassPolicyLockoutSafetyCheck) {
            return bypassPolicyLockoutSafetyCheck(Output.of(bypassPolicyLockoutSafetyCheck));
        }

        public Builder deletionWindowInDays(@Nullable Output<Integer> deletionWindowInDays) {
            $.deletionWindowInDays = deletionWindowInDays;
            return this;
        }

        public Builder deletionWindowInDays(Integer deletionWindowInDays) {
            return deletionWindowInDays(Output.of(deletionWindowInDays));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        public Builder keyId(@Nullable Output<String> keyId) {
            $.keyId = keyId;
            return this;
        }

        public Builder keyId(String keyId) {
            return keyId(Output.of(keyId));
        }

        public Builder keyRotationEnabled(@Nullable Output<Boolean> keyRotationEnabled) {
            $.keyRotationEnabled = keyRotationEnabled;
            return this;
        }

        public Builder keyRotationEnabled(Boolean keyRotationEnabled) {
            return keyRotationEnabled(Output.of(keyRotationEnabled));
        }

        public Builder keySpec(@Nullable Output<String> keySpec) {
            $.keySpec = keySpec;
            return this;
        }

        public Builder keySpec(String keySpec) {
            return keySpec(Output.of(keySpec));
        }

        public Builder keyUsage(@Nullable Output<String> keyUsage) {
            $.keyUsage = keyUsage;
            return this;
        }

        public Builder keyUsage(String keyUsage) {
            return keyUsage(Output.of(keyUsage));
        }

        public Builder policy(@Nullable Output<String> policy) {
            $.policy = policy;
            return this;
        }

        public Builder policy(String policy) {
            return policy(Output.of(policy));
        }

        public Builder primaryKeyArn(@Nullable Output<String> primaryKeyArn) {
            $.primaryKeyArn = primaryKeyArn;
            return this;
        }

        public Builder primaryKeyArn(String primaryKeyArn) {
            return primaryKeyArn(Output.of(primaryKeyArn));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        public ReplicaKeyState build() {
            return $;
        }
    }

}
