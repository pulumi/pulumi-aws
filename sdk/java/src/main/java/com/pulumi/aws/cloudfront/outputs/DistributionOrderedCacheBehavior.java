// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.cloudfront.outputs;

import com.pulumi.aws.cloudfront.outputs.DistributionOrderedCacheBehaviorForwardedValues;
import com.pulumi.aws.cloudfront.outputs.DistributionOrderedCacheBehaviorFunctionAssociation;
import com.pulumi.aws.cloudfront.outputs.DistributionOrderedCacheBehaviorLambdaFunctionAssociation;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DistributionOrderedCacheBehavior {
    /**
     * @return Controls which HTTP methods CloudFront processes and forwards to your Amazon S3 bucket or your custom origin.
     * 
     */
    private List<String> allowedMethods;
    /**
     * @return Unique identifier of the cache policy that is attached to the cache behavior. If configuring the `default_cache_behavior` either `cache_policy_id` or `forwarded_values` must be set.
     * 
     */
    private @Nullable String cachePolicyId;
    /**
     * @return Controls whether CloudFront caches the response to requests using the specified HTTP methods.
     * 
     */
    private List<String> cachedMethods;
    /**
     * @return Whether you want CloudFront to automatically compress content for web requests that include `Accept-Encoding: gzip` in the request header (default: `false`).
     * 
     */
    private @Nullable Boolean compress;
    /**
     * @return Default amount of time (in seconds) that an object is in a CloudFront cache before CloudFront forwards another request in the absence of an `Cache-Control max-age` or `Expires` header.
     * 
     */
    private @Nullable Integer defaultTtl;
    /**
     * @return Field level encryption configuration ID.
     * 
     */
    private @Nullable String fieldLevelEncryptionId;
    /**
     * @return The forwarded values configuration that specifies how CloudFront handles query strings, cookies and headers (maximum one).
     * 
     */
    private @Nullable DistributionOrderedCacheBehaviorForwardedValues forwardedValues;
    /**
     * @return A config block that triggers a cloudfront function with specific actions (maximum 2).
     * 
     */
    private @Nullable List<DistributionOrderedCacheBehaviorFunctionAssociation> functionAssociations;
    /**
     * @return A config block that triggers a lambda function with specific actions (maximum 4).
     * 
     */
    private @Nullable List<DistributionOrderedCacheBehaviorLambdaFunctionAssociation> lambdaFunctionAssociations;
    /**
     * @return Maximum amount of time (in seconds) that an object is in a CloudFront cache before CloudFront forwards another request to your origin to determine whether the object has been updated. Only effective in the presence of `Cache-Control max-age`, `Cache-Control s-maxage`, and `Expires` headers.
     * 
     */
    private @Nullable Integer maxTtl;
    /**
     * @return Minimum amount of time that you want objects to stay in CloudFront caches before CloudFront queries your origin to see whether the object has been updated. Defaults to 0 seconds.
     * 
     */
    private @Nullable Integer minTtl;
    /**
     * @return Unique identifier of the origin request policy that is attached to the behavior.
     * 
     */
    private @Nullable String originRequestPolicyId;
    /**
     * @return Pattern (for example, `images/*.jpg`) that specifies which requests you want this cache behavior to apply to.
     * 
     */
    private String pathPattern;
    /**
     * @return ARN of the real-time log configuration that is attached to this cache behavior.
     * 
     */
    private @Nullable String realtimeLogConfigArn;
    /**
     * @return Identifier for a response headers policy.
     * 
     */
    private @Nullable String responseHeadersPolicyId;
    /**
     * @return Indicates whether you want to distribute media files in Microsoft Smooth Streaming format using the origin that is associated with this cache behavior.
     * 
     */
    private @Nullable Boolean smoothStreaming;
    /**
     * @return Value of ID for the origin that you want CloudFront to route requests to when a request matches the path pattern either for a cache behavior or for the default cache behavior.
     * 
     */
    private String targetOriginId;
    /**
     * @return List of key group IDs that CloudFront can use to validate signed URLs or signed cookies. See the [CloudFront User Guide](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-trusted-signers.html) for more information about this feature.
     * 
     */
    private @Nullable List<String> trustedKeyGroups;
    /**
     * @return List of AWS account IDs (or `self`) that you want to allow to create signed URLs for private content. See the [CloudFront User Guide](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-trusted-signers.html) for more information about this feature.
     * 
     */
    private @Nullable List<String> trustedSigners;
    /**
     * @return Use this element to specify the protocol that users can use to access the files in the origin specified by TargetOriginId when a request matches the path pattern in PathPattern. One of `allow-all`, `https-only`, or `redirect-to-https`.
     * 
     */
    private String viewerProtocolPolicy;

    private DistributionOrderedCacheBehavior() {}
    /**
     * @return Controls which HTTP methods CloudFront processes and forwards to your Amazon S3 bucket or your custom origin.
     * 
     */
    public List<String> allowedMethods() {
        return this.allowedMethods;
    }
    /**
     * @return Unique identifier of the cache policy that is attached to the cache behavior. If configuring the `default_cache_behavior` either `cache_policy_id` or `forwarded_values` must be set.
     * 
     */
    public Optional<String> cachePolicyId() {
        return Optional.ofNullable(this.cachePolicyId);
    }
    /**
     * @return Controls whether CloudFront caches the response to requests using the specified HTTP methods.
     * 
     */
    public List<String> cachedMethods() {
        return this.cachedMethods;
    }
    /**
     * @return Whether you want CloudFront to automatically compress content for web requests that include `Accept-Encoding: gzip` in the request header (default: `false`).
     * 
     */
    public Optional<Boolean> compress() {
        return Optional.ofNullable(this.compress);
    }
    /**
     * @return Default amount of time (in seconds) that an object is in a CloudFront cache before CloudFront forwards another request in the absence of an `Cache-Control max-age` or `Expires` header.
     * 
     */
    public Optional<Integer> defaultTtl() {
        return Optional.ofNullable(this.defaultTtl);
    }
    /**
     * @return Field level encryption configuration ID.
     * 
     */
    public Optional<String> fieldLevelEncryptionId() {
        return Optional.ofNullable(this.fieldLevelEncryptionId);
    }
    /**
     * @return The forwarded values configuration that specifies how CloudFront handles query strings, cookies and headers (maximum one).
     * 
     */
    public Optional<DistributionOrderedCacheBehaviorForwardedValues> forwardedValues() {
        return Optional.ofNullable(this.forwardedValues);
    }
    /**
     * @return A config block that triggers a cloudfront function with specific actions (maximum 2).
     * 
     */
    public List<DistributionOrderedCacheBehaviorFunctionAssociation> functionAssociations() {
        return this.functionAssociations == null ? List.of() : this.functionAssociations;
    }
    /**
     * @return A config block that triggers a lambda function with specific actions (maximum 4).
     * 
     */
    public List<DistributionOrderedCacheBehaviorLambdaFunctionAssociation> lambdaFunctionAssociations() {
        return this.lambdaFunctionAssociations == null ? List.of() : this.lambdaFunctionAssociations;
    }
    /**
     * @return Maximum amount of time (in seconds) that an object is in a CloudFront cache before CloudFront forwards another request to your origin to determine whether the object has been updated. Only effective in the presence of `Cache-Control max-age`, `Cache-Control s-maxage`, and `Expires` headers.
     * 
     */
    public Optional<Integer> maxTtl() {
        return Optional.ofNullable(this.maxTtl);
    }
    /**
     * @return Minimum amount of time that you want objects to stay in CloudFront caches before CloudFront queries your origin to see whether the object has been updated. Defaults to 0 seconds.
     * 
     */
    public Optional<Integer> minTtl() {
        return Optional.ofNullable(this.minTtl);
    }
    /**
     * @return Unique identifier of the origin request policy that is attached to the behavior.
     * 
     */
    public Optional<String> originRequestPolicyId() {
        return Optional.ofNullable(this.originRequestPolicyId);
    }
    /**
     * @return Pattern (for example, `images/*.jpg`) that specifies which requests you want this cache behavior to apply to.
     * 
     */
    public String pathPattern() {
        return this.pathPattern;
    }
    /**
     * @return ARN of the real-time log configuration that is attached to this cache behavior.
     * 
     */
    public Optional<String> realtimeLogConfigArn() {
        return Optional.ofNullable(this.realtimeLogConfigArn);
    }
    /**
     * @return Identifier for a response headers policy.
     * 
     */
    public Optional<String> responseHeadersPolicyId() {
        return Optional.ofNullable(this.responseHeadersPolicyId);
    }
    /**
     * @return Indicates whether you want to distribute media files in Microsoft Smooth Streaming format using the origin that is associated with this cache behavior.
     * 
     */
    public Optional<Boolean> smoothStreaming() {
        return Optional.ofNullable(this.smoothStreaming);
    }
    /**
     * @return Value of ID for the origin that you want CloudFront to route requests to when a request matches the path pattern either for a cache behavior or for the default cache behavior.
     * 
     */
    public String targetOriginId() {
        return this.targetOriginId;
    }
    /**
     * @return List of key group IDs that CloudFront can use to validate signed URLs or signed cookies. See the [CloudFront User Guide](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-trusted-signers.html) for more information about this feature.
     * 
     */
    public List<String> trustedKeyGroups() {
        return this.trustedKeyGroups == null ? List.of() : this.trustedKeyGroups;
    }
    /**
     * @return List of AWS account IDs (or `self`) that you want to allow to create signed URLs for private content. See the [CloudFront User Guide](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-trusted-signers.html) for more information about this feature.
     * 
     */
    public List<String> trustedSigners() {
        return this.trustedSigners == null ? List.of() : this.trustedSigners;
    }
    /**
     * @return Use this element to specify the protocol that users can use to access the files in the origin specified by TargetOriginId when a request matches the path pattern in PathPattern. One of `allow-all`, `https-only`, or `redirect-to-https`.
     * 
     */
    public String viewerProtocolPolicy() {
        return this.viewerProtocolPolicy;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DistributionOrderedCacheBehavior defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> allowedMethods;
        private @Nullable String cachePolicyId;
        private List<String> cachedMethods;
        private @Nullable Boolean compress;
        private @Nullable Integer defaultTtl;
        private @Nullable String fieldLevelEncryptionId;
        private @Nullable DistributionOrderedCacheBehaviorForwardedValues forwardedValues;
        private @Nullable List<DistributionOrderedCacheBehaviorFunctionAssociation> functionAssociations;
        private @Nullable List<DistributionOrderedCacheBehaviorLambdaFunctionAssociation> lambdaFunctionAssociations;
        private @Nullable Integer maxTtl;
        private @Nullable Integer minTtl;
        private @Nullable String originRequestPolicyId;
        private String pathPattern;
        private @Nullable String realtimeLogConfigArn;
        private @Nullable String responseHeadersPolicyId;
        private @Nullable Boolean smoothStreaming;
        private String targetOriginId;
        private @Nullable List<String> trustedKeyGroups;
        private @Nullable List<String> trustedSigners;
        private String viewerProtocolPolicy;
        public Builder() {}
        public Builder(DistributionOrderedCacheBehavior defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowedMethods = defaults.allowedMethods;
    	      this.cachePolicyId = defaults.cachePolicyId;
    	      this.cachedMethods = defaults.cachedMethods;
    	      this.compress = defaults.compress;
    	      this.defaultTtl = defaults.defaultTtl;
    	      this.fieldLevelEncryptionId = defaults.fieldLevelEncryptionId;
    	      this.forwardedValues = defaults.forwardedValues;
    	      this.functionAssociations = defaults.functionAssociations;
    	      this.lambdaFunctionAssociations = defaults.lambdaFunctionAssociations;
    	      this.maxTtl = defaults.maxTtl;
    	      this.minTtl = defaults.minTtl;
    	      this.originRequestPolicyId = defaults.originRequestPolicyId;
    	      this.pathPattern = defaults.pathPattern;
    	      this.realtimeLogConfigArn = defaults.realtimeLogConfigArn;
    	      this.responseHeadersPolicyId = defaults.responseHeadersPolicyId;
    	      this.smoothStreaming = defaults.smoothStreaming;
    	      this.targetOriginId = defaults.targetOriginId;
    	      this.trustedKeyGroups = defaults.trustedKeyGroups;
    	      this.trustedSigners = defaults.trustedSigners;
    	      this.viewerProtocolPolicy = defaults.viewerProtocolPolicy;
        }

        @CustomType.Setter
        public Builder allowedMethods(List<String> allowedMethods) {
            this.allowedMethods = Objects.requireNonNull(allowedMethods);
            return this;
        }
        public Builder allowedMethods(String... allowedMethods) {
            return allowedMethods(List.of(allowedMethods));
        }
        @CustomType.Setter
        public Builder cachePolicyId(@Nullable String cachePolicyId) {
            this.cachePolicyId = cachePolicyId;
            return this;
        }
        @CustomType.Setter
        public Builder cachedMethods(List<String> cachedMethods) {
            this.cachedMethods = Objects.requireNonNull(cachedMethods);
            return this;
        }
        public Builder cachedMethods(String... cachedMethods) {
            return cachedMethods(List.of(cachedMethods));
        }
        @CustomType.Setter
        public Builder compress(@Nullable Boolean compress) {
            this.compress = compress;
            return this;
        }
        @CustomType.Setter
        public Builder defaultTtl(@Nullable Integer defaultTtl) {
            this.defaultTtl = defaultTtl;
            return this;
        }
        @CustomType.Setter
        public Builder fieldLevelEncryptionId(@Nullable String fieldLevelEncryptionId) {
            this.fieldLevelEncryptionId = fieldLevelEncryptionId;
            return this;
        }
        @CustomType.Setter
        public Builder forwardedValues(@Nullable DistributionOrderedCacheBehaviorForwardedValues forwardedValues) {
            this.forwardedValues = forwardedValues;
            return this;
        }
        @CustomType.Setter
        public Builder functionAssociations(@Nullable List<DistributionOrderedCacheBehaviorFunctionAssociation> functionAssociations) {
            this.functionAssociations = functionAssociations;
            return this;
        }
        public Builder functionAssociations(DistributionOrderedCacheBehaviorFunctionAssociation... functionAssociations) {
            return functionAssociations(List.of(functionAssociations));
        }
        @CustomType.Setter
        public Builder lambdaFunctionAssociations(@Nullable List<DistributionOrderedCacheBehaviorLambdaFunctionAssociation> lambdaFunctionAssociations) {
            this.lambdaFunctionAssociations = lambdaFunctionAssociations;
            return this;
        }
        public Builder lambdaFunctionAssociations(DistributionOrderedCacheBehaviorLambdaFunctionAssociation... lambdaFunctionAssociations) {
            return lambdaFunctionAssociations(List.of(lambdaFunctionAssociations));
        }
        @CustomType.Setter
        public Builder maxTtl(@Nullable Integer maxTtl) {
            this.maxTtl = maxTtl;
            return this;
        }
        @CustomType.Setter
        public Builder minTtl(@Nullable Integer minTtl) {
            this.minTtl = minTtl;
            return this;
        }
        @CustomType.Setter
        public Builder originRequestPolicyId(@Nullable String originRequestPolicyId) {
            this.originRequestPolicyId = originRequestPolicyId;
            return this;
        }
        @CustomType.Setter
        public Builder pathPattern(String pathPattern) {
            this.pathPattern = Objects.requireNonNull(pathPattern);
            return this;
        }
        @CustomType.Setter
        public Builder realtimeLogConfigArn(@Nullable String realtimeLogConfigArn) {
            this.realtimeLogConfigArn = realtimeLogConfigArn;
            return this;
        }
        @CustomType.Setter
        public Builder responseHeadersPolicyId(@Nullable String responseHeadersPolicyId) {
            this.responseHeadersPolicyId = responseHeadersPolicyId;
            return this;
        }
        @CustomType.Setter
        public Builder smoothStreaming(@Nullable Boolean smoothStreaming) {
            this.smoothStreaming = smoothStreaming;
            return this;
        }
        @CustomType.Setter
        public Builder targetOriginId(String targetOriginId) {
            this.targetOriginId = Objects.requireNonNull(targetOriginId);
            return this;
        }
        @CustomType.Setter
        public Builder trustedKeyGroups(@Nullable List<String> trustedKeyGroups) {
            this.trustedKeyGroups = trustedKeyGroups;
            return this;
        }
        public Builder trustedKeyGroups(String... trustedKeyGroups) {
            return trustedKeyGroups(List.of(trustedKeyGroups));
        }
        @CustomType.Setter
        public Builder trustedSigners(@Nullable List<String> trustedSigners) {
            this.trustedSigners = trustedSigners;
            return this;
        }
        public Builder trustedSigners(String... trustedSigners) {
            return trustedSigners(List.of(trustedSigners));
        }
        @CustomType.Setter
        public Builder viewerProtocolPolicy(String viewerProtocolPolicy) {
            this.viewerProtocolPolicy = Objects.requireNonNull(viewerProtocolPolicy);
            return this;
        }
        public DistributionOrderedCacheBehavior build() {
            final var o = new DistributionOrderedCacheBehavior();
            o.allowedMethods = allowedMethods;
            o.cachePolicyId = cachePolicyId;
            o.cachedMethods = cachedMethods;
            o.compress = compress;
            o.defaultTtl = defaultTtl;
            o.fieldLevelEncryptionId = fieldLevelEncryptionId;
            o.forwardedValues = forwardedValues;
            o.functionAssociations = functionAssociations;
            o.lambdaFunctionAssociations = lambdaFunctionAssociations;
            o.maxTtl = maxTtl;
            o.minTtl = minTtl;
            o.originRequestPolicyId = originRequestPolicyId;
            o.pathPattern = pathPattern;
            o.realtimeLogConfigArn = realtimeLogConfigArn;
            o.responseHeadersPolicyId = responseHeadersPolicyId;
            o.smoothStreaming = smoothStreaming;
            o.targetOriginId = targetOriginId;
            o.trustedKeyGroups = trustedKeyGroups;
            o.trustedSigners = trustedSigners;
            o.viewerProtocolPolicy = viewerProtocolPolicy;
            return o;
        }
    }
}
