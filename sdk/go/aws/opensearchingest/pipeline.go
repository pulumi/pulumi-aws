// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package opensearchingest

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing an AWS OpenSearch Ingestion Pipeline.
//
// ## Example Usage
//
// ### Basic Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"encoding/json"
//	"fmt"
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws"
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/iam"
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/opensearchingest"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			current, err := aws.GetRegion(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"version": "2012-10-17",
//				"statement": []map[string]interface{}{
//					map[string]interface{}{
//						"action": "sts:AssumeRole",
//						"effect": "Allow",
//						"sid":    "",
//						"principal": map[string]interface{}{
//							"service": "osis-pipelines.amazonaws.com",
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			example, err := iam.NewRole(ctx, "example", &iam.RoleArgs{
//				AssumeRolePolicy: pulumi.String(json0),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = opensearchingest.NewPipeline(ctx, "example", &opensearchingest.PipelineArgs{
//				PipelineName: pulumi.String("example"),
//				PipelineConfigurationBody: example.Arn.ApplyT(func(arn string) (string, error) {
//					return fmt.Sprintf(`version: "2"
//
// example-pipeline:
//
//	source:
//	  http:
//	    path: "/example"
//	sink:
//	  - s3:
//	      aws:
//	        sts_role_arn: "%v"
//	        region: "%v"
//	      bucket: "example"
//	      threshold:
//	        event_collect_timeout: "60s"
//	      codec:
//	        ndjson:
//
// `, arn, current.Name), nil
//
//				}).(pulumi.StringOutput),
//				MaxUnits: pulumi.Int(1),
//				MinUnits: pulumi.Int(1),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ### Using file function
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/opensearchingest"
//	"github.com/pulumi/pulumi-std/sdk/go/std"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			invokeFile, err := std.File(ctx, &std.FileArgs{
//				Input: "example.yaml",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = opensearchingest.NewPipeline(ctx, "example", &opensearchingest.PipelineArgs{
//				PipelineName:              pulumi.String("example"),
//				PipelineConfigurationBody: invokeFile.Result,
//				MaxUnits:                  pulumi.Int(1),
//				MinUnits:                  pulumi.Int(1),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// Using `pulumi import`, import OpenSearch Ingestion Pipeline using the `id`. For example:
//
// ```sh
// $ pulumi import aws:opensearchingest/pipeline:Pipeline example example
// ```
type Pipeline struct {
	pulumi.CustomResourceState

	// Key-value pairs to configure persistent buffering for the pipeline. See `bufferOptions` below.
	BufferOptions PipelineBufferOptionsPtrOutput `pulumi:"bufferOptions"`
	// Key-value pairs to configure encryption for data that is written to a persistent buffer. See `encryptionAtRestOptions` below.
	EncryptionAtRestOptions PipelineEncryptionAtRestOptionsPtrOutput `pulumi:"encryptionAtRestOptions"`
	// The list of ingestion endpoints for the pipeline, which you can send data to.
	IngestEndpointUrls pulumi.StringArrayOutput `pulumi:"ingestEndpointUrls"`
	// Key-value pairs to configure log publishing. See `logPublishingOptions` below.
	LogPublishingOptions PipelineLogPublishingOptionsPtrOutput `pulumi:"logPublishingOptions"`
	// The maximum pipeline capacity, in Ingestion Compute Units (ICUs).
	MaxUnits pulumi.IntOutput `pulumi:"maxUnits"`
	// The minimum pipeline capacity, in Ingestion Compute Units (ICUs).
	MinUnits pulumi.IntOutput `pulumi:"minUnits"`
	// Amazon Resource Name (ARN) of the pipeline.
	PipelineArn pulumi.StringOutput `pulumi:"pipelineArn"`
	// The pipeline configuration in YAML format. This argument accepts the pipeline configuration as a string or within a .yaml file. If you provide the configuration as a string, each new line must be escaped with \n.
	PipelineConfigurationBody pulumi.StringOutput `pulumi:"pipelineConfigurationBody"`
	// The name of the OpenSearch Ingestion pipeline to create. Pipeline names are unique across the pipelines owned by an account within an AWS Region.
	//
	// The following arguments are optional:
	PipelineName pulumi.StringOutput `pulumi:"pipelineName"`
	// A map of tags to assign to the pipeline. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Deprecated: Please use `tags` instead.
	TagsAll  pulumi.StringMapOutput    `pulumi:"tagsAll"`
	Timeouts PipelineTimeoutsPtrOutput `pulumi:"timeouts"`
	// Container for the values required to configure VPC access for the pipeline. If you don't specify these values, OpenSearch Ingestion creates the pipeline with a public endpoint. See `vpcOptions` below.
	VpcOptions PipelineVpcOptionsPtrOutput `pulumi:"vpcOptions"`
}

// NewPipeline registers a new resource with the given unique name, arguments, and options.
func NewPipeline(ctx *pulumi.Context,
	name string, args *PipelineArgs, opts ...pulumi.ResourceOption) (*Pipeline, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MaxUnits == nil {
		return nil, errors.New("invalid value for required argument 'MaxUnits'")
	}
	if args.MinUnits == nil {
		return nil, errors.New("invalid value for required argument 'MinUnits'")
	}
	if args.PipelineConfigurationBody == nil {
		return nil, errors.New("invalid value for required argument 'PipelineConfigurationBody'")
	}
	if args.PipelineName == nil {
		return nil, errors.New("invalid value for required argument 'PipelineName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Pipeline
	err := ctx.RegisterResource("aws:opensearchingest/pipeline:Pipeline", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPipeline gets an existing Pipeline resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPipeline(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PipelineState, opts ...pulumi.ResourceOption) (*Pipeline, error) {
	var resource Pipeline
	err := ctx.ReadResource("aws:opensearchingest/pipeline:Pipeline", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Pipeline resources.
type pipelineState struct {
	// Key-value pairs to configure persistent buffering for the pipeline. See `bufferOptions` below.
	BufferOptions *PipelineBufferOptions `pulumi:"bufferOptions"`
	// Key-value pairs to configure encryption for data that is written to a persistent buffer. See `encryptionAtRestOptions` below.
	EncryptionAtRestOptions *PipelineEncryptionAtRestOptions `pulumi:"encryptionAtRestOptions"`
	// The list of ingestion endpoints for the pipeline, which you can send data to.
	IngestEndpointUrls []string `pulumi:"ingestEndpointUrls"`
	// Key-value pairs to configure log publishing. See `logPublishingOptions` below.
	LogPublishingOptions *PipelineLogPublishingOptions `pulumi:"logPublishingOptions"`
	// The maximum pipeline capacity, in Ingestion Compute Units (ICUs).
	MaxUnits *int `pulumi:"maxUnits"`
	// The minimum pipeline capacity, in Ingestion Compute Units (ICUs).
	MinUnits *int `pulumi:"minUnits"`
	// Amazon Resource Name (ARN) of the pipeline.
	PipelineArn *string `pulumi:"pipelineArn"`
	// The pipeline configuration in YAML format. This argument accepts the pipeline configuration as a string or within a .yaml file. If you provide the configuration as a string, each new line must be escaped with \n.
	PipelineConfigurationBody *string `pulumi:"pipelineConfigurationBody"`
	// The name of the OpenSearch Ingestion pipeline to create. Pipeline names are unique across the pipelines owned by an account within an AWS Region.
	//
	// The following arguments are optional:
	PipelineName *string `pulumi:"pipelineName"`
	// A map of tags to assign to the pipeline. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Deprecated: Please use `tags` instead.
	TagsAll  map[string]string `pulumi:"tagsAll"`
	Timeouts *PipelineTimeouts `pulumi:"timeouts"`
	// Container for the values required to configure VPC access for the pipeline. If you don't specify these values, OpenSearch Ingestion creates the pipeline with a public endpoint. See `vpcOptions` below.
	VpcOptions *PipelineVpcOptions `pulumi:"vpcOptions"`
}

type PipelineState struct {
	// Key-value pairs to configure persistent buffering for the pipeline. See `bufferOptions` below.
	BufferOptions PipelineBufferOptionsPtrInput
	// Key-value pairs to configure encryption for data that is written to a persistent buffer. See `encryptionAtRestOptions` below.
	EncryptionAtRestOptions PipelineEncryptionAtRestOptionsPtrInput
	// The list of ingestion endpoints for the pipeline, which you can send data to.
	IngestEndpointUrls pulumi.StringArrayInput
	// Key-value pairs to configure log publishing. See `logPublishingOptions` below.
	LogPublishingOptions PipelineLogPublishingOptionsPtrInput
	// The maximum pipeline capacity, in Ingestion Compute Units (ICUs).
	MaxUnits pulumi.IntPtrInput
	// The minimum pipeline capacity, in Ingestion Compute Units (ICUs).
	MinUnits pulumi.IntPtrInput
	// Amazon Resource Name (ARN) of the pipeline.
	PipelineArn pulumi.StringPtrInput
	// The pipeline configuration in YAML format. This argument accepts the pipeline configuration as a string or within a .yaml file. If you provide the configuration as a string, each new line must be escaped with \n.
	PipelineConfigurationBody pulumi.StringPtrInput
	// The name of the OpenSearch Ingestion pipeline to create. Pipeline names are unique across the pipelines owned by an account within an AWS Region.
	//
	// The following arguments are optional:
	PipelineName pulumi.StringPtrInput
	// A map of tags to assign to the pipeline. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// Deprecated: Please use `tags` instead.
	TagsAll  pulumi.StringMapInput
	Timeouts PipelineTimeoutsPtrInput
	// Container for the values required to configure VPC access for the pipeline. If you don't specify these values, OpenSearch Ingestion creates the pipeline with a public endpoint. See `vpcOptions` below.
	VpcOptions PipelineVpcOptionsPtrInput
}

func (PipelineState) ElementType() reflect.Type {
	return reflect.TypeOf((*pipelineState)(nil)).Elem()
}

type pipelineArgs struct {
	// Key-value pairs to configure persistent buffering for the pipeline. See `bufferOptions` below.
	BufferOptions *PipelineBufferOptions `pulumi:"bufferOptions"`
	// Key-value pairs to configure encryption for data that is written to a persistent buffer. See `encryptionAtRestOptions` below.
	EncryptionAtRestOptions *PipelineEncryptionAtRestOptions `pulumi:"encryptionAtRestOptions"`
	// Key-value pairs to configure log publishing. See `logPublishingOptions` below.
	LogPublishingOptions *PipelineLogPublishingOptions `pulumi:"logPublishingOptions"`
	// The maximum pipeline capacity, in Ingestion Compute Units (ICUs).
	MaxUnits int `pulumi:"maxUnits"`
	// The minimum pipeline capacity, in Ingestion Compute Units (ICUs).
	MinUnits int `pulumi:"minUnits"`
	// The pipeline configuration in YAML format. This argument accepts the pipeline configuration as a string or within a .yaml file. If you provide the configuration as a string, each new line must be escaped with \n.
	PipelineConfigurationBody string `pulumi:"pipelineConfigurationBody"`
	// The name of the OpenSearch Ingestion pipeline to create. Pipeline names are unique across the pipelines owned by an account within an AWS Region.
	//
	// The following arguments are optional:
	PipelineName string `pulumi:"pipelineName"`
	// A map of tags to assign to the pipeline. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags     map[string]string `pulumi:"tags"`
	Timeouts *PipelineTimeouts `pulumi:"timeouts"`
	// Container for the values required to configure VPC access for the pipeline. If you don't specify these values, OpenSearch Ingestion creates the pipeline with a public endpoint. See `vpcOptions` below.
	VpcOptions *PipelineVpcOptions `pulumi:"vpcOptions"`
}

// The set of arguments for constructing a Pipeline resource.
type PipelineArgs struct {
	// Key-value pairs to configure persistent buffering for the pipeline. See `bufferOptions` below.
	BufferOptions PipelineBufferOptionsPtrInput
	// Key-value pairs to configure encryption for data that is written to a persistent buffer. See `encryptionAtRestOptions` below.
	EncryptionAtRestOptions PipelineEncryptionAtRestOptionsPtrInput
	// Key-value pairs to configure log publishing. See `logPublishingOptions` below.
	LogPublishingOptions PipelineLogPublishingOptionsPtrInput
	// The maximum pipeline capacity, in Ingestion Compute Units (ICUs).
	MaxUnits pulumi.IntInput
	// The minimum pipeline capacity, in Ingestion Compute Units (ICUs).
	MinUnits pulumi.IntInput
	// The pipeline configuration in YAML format. This argument accepts the pipeline configuration as a string or within a .yaml file. If you provide the configuration as a string, each new line must be escaped with \n.
	PipelineConfigurationBody pulumi.StringInput
	// The name of the OpenSearch Ingestion pipeline to create. Pipeline names are unique across the pipelines owned by an account within an AWS Region.
	//
	// The following arguments are optional:
	PipelineName pulumi.StringInput
	// A map of tags to assign to the pipeline. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags     pulumi.StringMapInput
	Timeouts PipelineTimeoutsPtrInput
	// Container for the values required to configure VPC access for the pipeline. If you don't specify these values, OpenSearch Ingestion creates the pipeline with a public endpoint. See `vpcOptions` below.
	VpcOptions PipelineVpcOptionsPtrInput
}

func (PipelineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pipelineArgs)(nil)).Elem()
}

type PipelineInput interface {
	pulumi.Input

	ToPipelineOutput() PipelineOutput
	ToPipelineOutputWithContext(ctx context.Context) PipelineOutput
}

func (*Pipeline) ElementType() reflect.Type {
	return reflect.TypeOf((**Pipeline)(nil)).Elem()
}

func (i *Pipeline) ToPipelineOutput() PipelineOutput {
	return i.ToPipelineOutputWithContext(context.Background())
}

func (i *Pipeline) ToPipelineOutputWithContext(ctx context.Context) PipelineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineOutput)
}

// PipelineArrayInput is an input type that accepts PipelineArray and PipelineArrayOutput values.
// You can construct a concrete instance of `PipelineArrayInput` via:
//
//	PipelineArray{ PipelineArgs{...} }
type PipelineArrayInput interface {
	pulumi.Input

	ToPipelineArrayOutput() PipelineArrayOutput
	ToPipelineArrayOutputWithContext(context.Context) PipelineArrayOutput
}

type PipelineArray []PipelineInput

func (PipelineArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Pipeline)(nil)).Elem()
}

func (i PipelineArray) ToPipelineArrayOutput() PipelineArrayOutput {
	return i.ToPipelineArrayOutputWithContext(context.Background())
}

func (i PipelineArray) ToPipelineArrayOutputWithContext(ctx context.Context) PipelineArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineArrayOutput)
}

// PipelineMapInput is an input type that accepts PipelineMap and PipelineMapOutput values.
// You can construct a concrete instance of `PipelineMapInput` via:
//
//	PipelineMap{ "key": PipelineArgs{...} }
type PipelineMapInput interface {
	pulumi.Input

	ToPipelineMapOutput() PipelineMapOutput
	ToPipelineMapOutputWithContext(context.Context) PipelineMapOutput
}

type PipelineMap map[string]PipelineInput

func (PipelineMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Pipeline)(nil)).Elem()
}

func (i PipelineMap) ToPipelineMapOutput() PipelineMapOutput {
	return i.ToPipelineMapOutputWithContext(context.Background())
}

func (i PipelineMap) ToPipelineMapOutputWithContext(ctx context.Context) PipelineMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineMapOutput)
}

type PipelineOutput struct{ *pulumi.OutputState }

func (PipelineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Pipeline)(nil)).Elem()
}

func (o PipelineOutput) ToPipelineOutput() PipelineOutput {
	return o
}

func (o PipelineOutput) ToPipelineOutputWithContext(ctx context.Context) PipelineOutput {
	return o
}

// Key-value pairs to configure persistent buffering for the pipeline. See `bufferOptions` below.
func (o PipelineOutput) BufferOptions() PipelineBufferOptionsPtrOutput {
	return o.ApplyT(func(v *Pipeline) PipelineBufferOptionsPtrOutput { return v.BufferOptions }).(PipelineBufferOptionsPtrOutput)
}

// Key-value pairs to configure encryption for data that is written to a persistent buffer. See `encryptionAtRestOptions` below.
func (o PipelineOutput) EncryptionAtRestOptions() PipelineEncryptionAtRestOptionsPtrOutput {
	return o.ApplyT(func(v *Pipeline) PipelineEncryptionAtRestOptionsPtrOutput { return v.EncryptionAtRestOptions }).(PipelineEncryptionAtRestOptionsPtrOutput)
}

// The list of ingestion endpoints for the pipeline, which you can send data to.
func (o PipelineOutput) IngestEndpointUrls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Pipeline) pulumi.StringArrayOutput { return v.IngestEndpointUrls }).(pulumi.StringArrayOutput)
}

// Key-value pairs to configure log publishing. See `logPublishingOptions` below.
func (o PipelineOutput) LogPublishingOptions() PipelineLogPublishingOptionsPtrOutput {
	return o.ApplyT(func(v *Pipeline) PipelineLogPublishingOptionsPtrOutput { return v.LogPublishingOptions }).(PipelineLogPublishingOptionsPtrOutput)
}

// The maximum pipeline capacity, in Ingestion Compute Units (ICUs).
func (o PipelineOutput) MaxUnits() pulumi.IntOutput {
	return o.ApplyT(func(v *Pipeline) pulumi.IntOutput { return v.MaxUnits }).(pulumi.IntOutput)
}

// The minimum pipeline capacity, in Ingestion Compute Units (ICUs).
func (o PipelineOutput) MinUnits() pulumi.IntOutput {
	return o.ApplyT(func(v *Pipeline) pulumi.IntOutput { return v.MinUnits }).(pulumi.IntOutput)
}

// Amazon Resource Name (ARN) of the pipeline.
func (o PipelineOutput) PipelineArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Pipeline) pulumi.StringOutput { return v.PipelineArn }).(pulumi.StringOutput)
}

// The pipeline configuration in YAML format. This argument accepts the pipeline configuration as a string or within a .yaml file. If you provide the configuration as a string, each new line must be escaped with \n.
func (o PipelineOutput) PipelineConfigurationBody() pulumi.StringOutput {
	return o.ApplyT(func(v *Pipeline) pulumi.StringOutput { return v.PipelineConfigurationBody }).(pulumi.StringOutput)
}

// The name of the OpenSearch Ingestion pipeline to create. Pipeline names are unique across the pipelines owned by an account within an AWS Region.
//
// The following arguments are optional:
func (o PipelineOutput) PipelineName() pulumi.StringOutput {
	return o.ApplyT(func(v *Pipeline) pulumi.StringOutput { return v.PipelineName }).(pulumi.StringOutput)
}

// A map of tags to assign to the pipeline. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o PipelineOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Pipeline) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Deprecated: Please use `tags` instead.
func (o PipelineOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Pipeline) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o PipelineOutput) Timeouts() PipelineTimeoutsPtrOutput {
	return o.ApplyT(func(v *Pipeline) PipelineTimeoutsPtrOutput { return v.Timeouts }).(PipelineTimeoutsPtrOutput)
}

// Container for the values required to configure VPC access for the pipeline. If you don't specify these values, OpenSearch Ingestion creates the pipeline with a public endpoint. See `vpcOptions` below.
func (o PipelineOutput) VpcOptions() PipelineVpcOptionsPtrOutput {
	return o.ApplyT(func(v *Pipeline) PipelineVpcOptionsPtrOutput { return v.VpcOptions }).(PipelineVpcOptionsPtrOutput)
}

type PipelineArrayOutput struct{ *pulumi.OutputState }

func (PipelineArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Pipeline)(nil)).Elem()
}

func (o PipelineArrayOutput) ToPipelineArrayOutput() PipelineArrayOutput {
	return o
}

func (o PipelineArrayOutput) ToPipelineArrayOutputWithContext(ctx context.Context) PipelineArrayOutput {
	return o
}

func (o PipelineArrayOutput) Index(i pulumi.IntInput) PipelineOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Pipeline {
		return vs[0].([]*Pipeline)[vs[1].(int)]
	}).(PipelineOutput)
}

type PipelineMapOutput struct{ *pulumi.OutputState }

func (PipelineMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Pipeline)(nil)).Elem()
}

func (o PipelineMapOutput) ToPipelineMapOutput() PipelineMapOutput {
	return o
}

func (o PipelineMapOutput) ToPipelineMapOutputWithContext(ctx context.Context) PipelineMapOutput {
	return o
}

func (o PipelineMapOutput) MapIndex(k pulumi.StringInput) PipelineOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Pipeline {
		return vs[0].(map[string]*Pipeline)[vs[1].(string)]
	}).(PipelineOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineInput)(nil)).Elem(), &Pipeline{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineArrayInput)(nil)).Elem(), PipelineArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineMapInput)(nil)).Elem(), PipelineMap{})
	pulumi.RegisterOutputType(PipelineOutput{})
	pulumi.RegisterOutputType(PipelineArrayOutput{})
	pulumi.RegisterOutputType(PipelineMapOutput{})
}
