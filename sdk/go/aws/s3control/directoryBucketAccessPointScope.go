// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package s3control

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ### S3 Access Point Scope for a directory bucket in an AWS Local Zone
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws"
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/s3"
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/s3control"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			available, err := aws.GetAvailabilityZones(ctx, &aws.GetAvailabilityZonesArgs{
//				State: pulumi.StringRef("available"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			example, err := s3.NewDirectoryBucket(ctx, "example", &s3.DirectoryBucketArgs{
//				Bucket: pulumi.String("example--zoneId--x-s3"),
//				Location: &s3.DirectoryBucketLocationArgs{
//					Name: pulumi.String(available.ZoneIds[0]),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = s3.NewAccessPoint(ctx, "example", &s3.AccessPointArgs{
//				Bucket: example.ID(),
//				Name:   pulumi.String("example--zoneId--xa-s3"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = s3control.NewDirectoryBucketAccessPointScope(ctx, "example", &s3control.DirectoryBucketAccessPointScopeArgs{
//				Name:      pulumi.String("example--zoneId--xa-s3"),
//				AccountId: pulumi.String("123456789012"),
//				Scope: &s3control.DirectoryBucketAccessPointScopeScopeArgs{
//					Permissions: pulumi.StringArray{
//						pulumi.String("GetObject"),
//						pulumi.String("ListBucket"),
//					},
//					Prefixes: pulumi.StringArray{
//						pulumi.String("myobject1.csv"),
//						pulumi.String("myobject2*"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import Access Point Scope using access point name and AWS account ID separated by a colon (`,`). For example:
//
// ```sh
// $ pulumi import aws:s3control/directoryBucketAccessPointScope:DirectoryBucketAccessPointScope example example--zoneid--xa-s3,123456789012
// ```
type DirectoryBucketAccessPointScope struct {
	pulumi.CustomResourceState

	// The AWS account ID that owns the specified access point.
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// The name of the access point that you want to apply the scope to.
	Name pulumi.StringOutput `pulumi:"name"`
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region pulumi.StringOutput `pulumi:"region"`
	// . Scope is used to restrict access to specific prefixes, API operations, or a combination of both. To remove the `scope`, set it to `{permissions=[] prefixes=[]}`. The default scope is `{permissions=[] prefixes=[]}`.
	Scope DirectoryBucketAccessPointScopeScopePtrOutput `pulumi:"scope"`
}

// NewDirectoryBucketAccessPointScope registers a new resource with the given unique name, arguments, and options.
func NewDirectoryBucketAccessPointScope(ctx *pulumi.Context,
	name string, args *DirectoryBucketAccessPointScopeArgs, opts ...pulumi.ResourceOption) (*DirectoryBucketAccessPointScope, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DirectoryBucketAccessPointScope
	err := ctx.RegisterResource("aws:s3control/directoryBucketAccessPointScope:DirectoryBucketAccessPointScope", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDirectoryBucketAccessPointScope gets an existing DirectoryBucketAccessPointScope resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDirectoryBucketAccessPointScope(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DirectoryBucketAccessPointScopeState, opts ...pulumi.ResourceOption) (*DirectoryBucketAccessPointScope, error) {
	var resource DirectoryBucketAccessPointScope
	err := ctx.ReadResource("aws:s3control/directoryBucketAccessPointScope:DirectoryBucketAccessPointScope", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DirectoryBucketAccessPointScope resources.
type directoryBucketAccessPointScopeState struct {
	// The AWS account ID that owns the specified access point.
	AccountId *string `pulumi:"accountId"`
	// The name of the access point that you want to apply the scope to.
	Name *string `pulumi:"name"`
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region *string `pulumi:"region"`
	// . Scope is used to restrict access to specific prefixes, API operations, or a combination of both. To remove the `scope`, set it to `{permissions=[] prefixes=[]}`. The default scope is `{permissions=[] prefixes=[]}`.
	Scope *DirectoryBucketAccessPointScopeScope `pulumi:"scope"`
}

type DirectoryBucketAccessPointScopeState struct {
	// The AWS account ID that owns the specified access point.
	AccountId pulumi.StringPtrInput
	// The name of the access point that you want to apply the scope to.
	Name pulumi.StringPtrInput
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region pulumi.StringPtrInput
	// . Scope is used to restrict access to specific prefixes, API operations, or a combination of both. To remove the `scope`, set it to `{permissions=[] prefixes=[]}`. The default scope is `{permissions=[] prefixes=[]}`.
	Scope DirectoryBucketAccessPointScopeScopePtrInput
}

func (DirectoryBucketAccessPointScopeState) ElementType() reflect.Type {
	return reflect.TypeOf((*directoryBucketAccessPointScopeState)(nil)).Elem()
}

type directoryBucketAccessPointScopeArgs struct {
	// The AWS account ID that owns the specified access point.
	AccountId string `pulumi:"accountId"`
	// The name of the access point that you want to apply the scope to.
	Name *string `pulumi:"name"`
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region *string `pulumi:"region"`
	// . Scope is used to restrict access to specific prefixes, API operations, or a combination of both. To remove the `scope`, set it to `{permissions=[] prefixes=[]}`. The default scope is `{permissions=[] prefixes=[]}`.
	Scope *DirectoryBucketAccessPointScopeScope `pulumi:"scope"`
}

// The set of arguments for constructing a DirectoryBucketAccessPointScope resource.
type DirectoryBucketAccessPointScopeArgs struct {
	// The AWS account ID that owns the specified access point.
	AccountId pulumi.StringInput
	// The name of the access point that you want to apply the scope to.
	Name pulumi.StringPtrInput
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region pulumi.StringPtrInput
	// . Scope is used to restrict access to specific prefixes, API operations, or a combination of both. To remove the `scope`, set it to `{permissions=[] prefixes=[]}`. The default scope is `{permissions=[] prefixes=[]}`.
	Scope DirectoryBucketAccessPointScopeScopePtrInput
}

func (DirectoryBucketAccessPointScopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*directoryBucketAccessPointScopeArgs)(nil)).Elem()
}

type DirectoryBucketAccessPointScopeInput interface {
	pulumi.Input

	ToDirectoryBucketAccessPointScopeOutput() DirectoryBucketAccessPointScopeOutput
	ToDirectoryBucketAccessPointScopeOutputWithContext(ctx context.Context) DirectoryBucketAccessPointScopeOutput
}

func (*DirectoryBucketAccessPointScope) ElementType() reflect.Type {
	return reflect.TypeOf((**DirectoryBucketAccessPointScope)(nil)).Elem()
}

func (i *DirectoryBucketAccessPointScope) ToDirectoryBucketAccessPointScopeOutput() DirectoryBucketAccessPointScopeOutput {
	return i.ToDirectoryBucketAccessPointScopeOutputWithContext(context.Background())
}

func (i *DirectoryBucketAccessPointScope) ToDirectoryBucketAccessPointScopeOutputWithContext(ctx context.Context) DirectoryBucketAccessPointScopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DirectoryBucketAccessPointScopeOutput)
}

// DirectoryBucketAccessPointScopeArrayInput is an input type that accepts DirectoryBucketAccessPointScopeArray and DirectoryBucketAccessPointScopeArrayOutput values.
// You can construct a concrete instance of `DirectoryBucketAccessPointScopeArrayInput` via:
//
//	DirectoryBucketAccessPointScopeArray{ DirectoryBucketAccessPointScopeArgs{...} }
type DirectoryBucketAccessPointScopeArrayInput interface {
	pulumi.Input

	ToDirectoryBucketAccessPointScopeArrayOutput() DirectoryBucketAccessPointScopeArrayOutput
	ToDirectoryBucketAccessPointScopeArrayOutputWithContext(context.Context) DirectoryBucketAccessPointScopeArrayOutput
}

type DirectoryBucketAccessPointScopeArray []DirectoryBucketAccessPointScopeInput

func (DirectoryBucketAccessPointScopeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DirectoryBucketAccessPointScope)(nil)).Elem()
}

func (i DirectoryBucketAccessPointScopeArray) ToDirectoryBucketAccessPointScopeArrayOutput() DirectoryBucketAccessPointScopeArrayOutput {
	return i.ToDirectoryBucketAccessPointScopeArrayOutputWithContext(context.Background())
}

func (i DirectoryBucketAccessPointScopeArray) ToDirectoryBucketAccessPointScopeArrayOutputWithContext(ctx context.Context) DirectoryBucketAccessPointScopeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DirectoryBucketAccessPointScopeArrayOutput)
}

// DirectoryBucketAccessPointScopeMapInput is an input type that accepts DirectoryBucketAccessPointScopeMap and DirectoryBucketAccessPointScopeMapOutput values.
// You can construct a concrete instance of `DirectoryBucketAccessPointScopeMapInput` via:
//
//	DirectoryBucketAccessPointScopeMap{ "key": DirectoryBucketAccessPointScopeArgs{...} }
type DirectoryBucketAccessPointScopeMapInput interface {
	pulumi.Input

	ToDirectoryBucketAccessPointScopeMapOutput() DirectoryBucketAccessPointScopeMapOutput
	ToDirectoryBucketAccessPointScopeMapOutputWithContext(context.Context) DirectoryBucketAccessPointScopeMapOutput
}

type DirectoryBucketAccessPointScopeMap map[string]DirectoryBucketAccessPointScopeInput

func (DirectoryBucketAccessPointScopeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DirectoryBucketAccessPointScope)(nil)).Elem()
}

func (i DirectoryBucketAccessPointScopeMap) ToDirectoryBucketAccessPointScopeMapOutput() DirectoryBucketAccessPointScopeMapOutput {
	return i.ToDirectoryBucketAccessPointScopeMapOutputWithContext(context.Background())
}

func (i DirectoryBucketAccessPointScopeMap) ToDirectoryBucketAccessPointScopeMapOutputWithContext(ctx context.Context) DirectoryBucketAccessPointScopeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DirectoryBucketAccessPointScopeMapOutput)
}

type DirectoryBucketAccessPointScopeOutput struct{ *pulumi.OutputState }

func (DirectoryBucketAccessPointScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DirectoryBucketAccessPointScope)(nil)).Elem()
}

func (o DirectoryBucketAccessPointScopeOutput) ToDirectoryBucketAccessPointScopeOutput() DirectoryBucketAccessPointScopeOutput {
	return o
}

func (o DirectoryBucketAccessPointScopeOutput) ToDirectoryBucketAccessPointScopeOutputWithContext(ctx context.Context) DirectoryBucketAccessPointScopeOutput {
	return o
}

// The AWS account ID that owns the specified access point.
func (o DirectoryBucketAccessPointScopeOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *DirectoryBucketAccessPointScope) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// The name of the access point that you want to apply the scope to.
func (o DirectoryBucketAccessPointScopeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DirectoryBucketAccessPointScope) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
func (o DirectoryBucketAccessPointScopeOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *DirectoryBucketAccessPointScope) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// . Scope is used to restrict access to specific prefixes, API operations, or a combination of both. To remove the `scope`, set it to `{permissions=[] prefixes=[]}`. The default scope is `{permissions=[] prefixes=[]}`.
func (o DirectoryBucketAccessPointScopeOutput) Scope() DirectoryBucketAccessPointScopeScopePtrOutput {
	return o.ApplyT(func(v *DirectoryBucketAccessPointScope) DirectoryBucketAccessPointScopeScopePtrOutput { return v.Scope }).(DirectoryBucketAccessPointScopeScopePtrOutput)
}

type DirectoryBucketAccessPointScopeArrayOutput struct{ *pulumi.OutputState }

func (DirectoryBucketAccessPointScopeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DirectoryBucketAccessPointScope)(nil)).Elem()
}

func (o DirectoryBucketAccessPointScopeArrayOutput) ToDirectoryBucketAccessPointScopeArrayOutput() DirectoryBucketAccessPointScopeArrayOutput {
	return o
}

func (o DirectoryBucketAccessPointScopeArrayOutput) ToDirectoryBucketAccessPointScopeArrayOutputWithContext(ctx context.Context) DirectoryBucketAccessPointScopeArrayOutput {
	return o
}

func (o DirectoryBucketAccessPointScopeArrayOutput) Index(i pulumi.IntInput) DirectoryBucketAccessPointScopeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DirectoryBucketAccessPointScope {
		return vs[0].([]*DirectoryBucketAccessPointScope)[vs[1].(int)]
	}).(DirectoryBucketAccessPointScopeOutput)
}

type DirectoryBucketAccessPointScopeMapOutput struct{ *pulumi.OutputState }

func (DirectoryBucketAccessPointScopeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DirectoryBucketAccessPointScope)(nil)).Elem()
}

func (o DirectoryBucketAccessPointScopeMapOutput) ToDirectoryBucketAccessPointScopeMapOutput() DirectoryBucketAccessPointScopeMapOutput {
	return o
}

func (o DirectoryBucketAccessPointScopeMapOutput) ToDirectoryBucketAccessPointScopeMapOutputWithContext(ctx context.Context) DirectoryBucketAccessPointScopeMapOutput {
	return o
}

func (o DirectoryBucketAccessPointScopeMapOutput) MapIndex(k pulumi.StringInput) DirectoryBucketAccessPointScopeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DirectoryBucketAccessPointScope {
		return vs[0].(map[string]*DirectoryBucketAccessPointScope)[vs[1].(string)]
	}).(DirectoryBucketAccessPointScopeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DirectoryBucketAccessPointScopeInput)(nil)).Elem(), &DirectoryBucketAccessPointScope{})
	pulumi.RegisterInputType(reflect.TypeOf((*DirectoryBucketAccessPointScopeArrayInput)(nil)).Elem(), DirectoryBucketAccessPointScopeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DirectoryBucketAccessPointScopeMapInput)(nil)).Elem(), DirectoryBucketAccessPointScopeMap{})
	pulumi.RegisterOutputType(DirectoryBucketAccessPointScopeOutput{})
	pulumi.RegisterOutputType(DirectoryBucketAccessPointScopeArrayOutput{})
	pulumi.RegisterOutputType(DirectoryBucketAccessPointScopeMapOutput{})
}
