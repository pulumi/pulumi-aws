// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package s3control

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to manage an S3 Multi-Region Access Point associated with specified buckets.
//
// ## Example Usage
// ### Multiple AWS Buckets in Different Regions
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws"
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/s3"
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/s3control"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := aws.NewProvider(ctx, "primaryRegion", &aws.ProviderArgs{
//				Region: pulumi.String("us-east-1"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = aws.NewProvider(ctx, "secondaryRegion", &aws.ProviderArgs{
//				Region: pulumi.String("us-west-2"),
//			})
//			if err != nil {
//				return err
//			}
//			fooBucket, err := s3.NewBucketV2(ctx, "fooBucket", nil, pulumi.Provider(aws.Primary_region))
//			if err != nil {
//				return err
//			}
//			barBucket, err := s3.NewBucketV2(ctx, "barBucket", nil, pulumi.Provider(aws.Secondary_region))
//			if err != nil {
//				return err
//			}
//			_, err = s3control.NewMultiRegionAccessPoint(ctx, "example", &s3control.MultiRegionAccessPointArgs{
//				Details: &s3control.MultiRegionAccessPointDetailsArgs{
//					Name: pulumi.String("example"),
//					Regions: s3control.MultiRegionAccessPointDetailsRegionArray{
//						&s3control.MultiRegionAccessPointDetailsRegionArgs{
//							Bucket: fooBucket.ID(),
//						},
//						&s3control.MultiRegionAccessPointDetailsRegionArgs{
//							Bucket: barBucket.ID(),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Multi-Region Access Points can be imported using the `account_id` and `name` of the Multi-Region Access Point separated by a colon (`:`), e.g.
//
// ```sh
//
//	$ pulumi import aws:s3control/multiRegionAccessPoint:MultiRegionAccessPoint example 123456789012:example
//
// ```
type MultiRegionAccessPoint struct {
	pulumi.CustomResourceState

	// The AWS account ID for the owner of the buckets for which you want to create a Multi-Region Access Point. Defaults to automatically determined account ID of the AWS provider.
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// The alias for the Multi-Region Access Point.
	Alias pulumi.StringOutput `pulumi:"alias"`
	// Amazon Resource Name (ARN) of the Multi-Region Access Point.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// A configuration block containing details about the Multi-Region Access Point. See Details Configuration Block below for more details
	Details MultiRegionAccessPointDetailsOutput `pulumi:"details"`
	// The DNS domain name of the S3 Multi-Region Access Point in the format _`alias`_.accesspoint.s3-global.amazonaws.com. For more information, see the documentation on [Multi-Region Access Point Requests](https://docs.aws.amazon.com/AmazonS3/latest/userguide/MultiRegionAccessPointRequests.html).
	DomainName pulumi.StringOutput `pulumi:"domainName"`
	// The current status of the Multi-Region Access Point. One of: `READY`, `INCONSISTENT_ACROSS_REGIONS`, `CREATING`, `PARTIALLY_CREATED`, `PARTIALLY_DELETED`, `DELETING`.
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewMultiRegionAccessPoint registers a new resource with the given unique name, arguments, and options.
func NewMultiRegionAccessPoint(ctx *pulumi.Context,
	name string, args *MultiRegionAccessPointArgs, opts ...pulumi.ResourceOption) (*MultiRegionAccessPoint, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Details == nil {
		return nil, errors.New("invalid value for required argument 'Details'")
	}
	var resource MultiRegionAccessPoint
	err := ctx.RegisterResource("aws:s3control/multiRegionAccessPoint:MultiRegionAccessPoint", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMultiRegionAccessPoint gets an existing MultiRegionAccessPoint resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMultiRegionAccessPoint(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MultiRegionAccessPointState, opts ...pulumi.ResourceOption) (*MultiRegionAccessPoint, error) {
	var resource MultiRegionAccessPoint
	err := ctx.ReadResource("aws:s3control/multiRegionAccessPoint:MultiRegionAccessPoint", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MultiRegionAccessPoint resources.
type multiRegionAccessPointState struct {
	// The AWS account ID for the owner of the buckets for which you want to create a Multi-Region Access Point. Defaults to automatically determined account ID of the AWS provider.
	AccountId *string `pulumi:"accountId"`
	// The alias for the Multi-Region Access Point.
	Alias *string `pulumi:"alias"`
	// Amazon Resource Name (ARN) of the Multi-Region Access Point.
	Arn *string `pulumi:"arn"`
	// A configuration block containing details about the Multi-Region Access Point. See Details Configuration Block below for more details
	Details *MultiRegionAccessPointDetails `pulumi:"details"`
	// The DNS domain name of the S3 Multi-Region Access Point in the format _`alias`_.accesspoint.s3-global.amazonaws.com. For more information, see the documentation on [Multi-Region Access Point Requests](https://docs.aws.amazon.com/AmazonS3/latest/userguide/MultiRegionAccessPointRequests.html).
	DomainName *string `pulumi:"domainName"`
	// The current status of the Multi-Region Access Point. One of: `READY`, `INCONSISTENT_ACROSS_REGIONS`, `CREATING`, `PARTIALLY_CREATED`, `PARTIALLY_DELETED`, `DELETING`.
	Status *string `pulumi:"status"`
}

type MultiRegionAccessPointState struct {
	// The AWS account ID for the owner of the buckets for which you want to create a Multi-Region Access Point. Defaults to automatically determined account ID of the AWS provider.
	AccountId pulumi.StringPtrInput
	// The alias for the Multi-Region Access Point.
	Alias pulumi.StringPtrInput
	// Amazon Resource Name (ARN) of the Multi-Region Access Point.
	Arn pulumi.StringPtrInput
	// A configuration block containing details about the Multi-Region Access Point. See Details Configuration Block below for more details
	Details MultiRegionAccessPointDetailsPtrInput
	// The DNS domain name of the S3 Multi-Region Access Point in the format _`alias`_.accesspoint.s3-global.amazonaws.com. For more information, see the documentation on [Multi-Region Access Point Requests](https://docs.aws.amazon.com/AmazonS3/latest/userguide/MultiRegionAccessPointRequests.html).
	DomainName pulumi.StringPtrInput
	// The current status of the Multi-Region Access Point. One of: `READY`, `INCONSISTENT_ACROSS_REGIONS`, `CREATING`, `PARTIALLY_CREATED`, `PARTIALLY_DELETED`, `DELETING`.
	Status pulumi.StringPtrInput
}

func (MultiRegionAccessPointState) ElementType() reflect.Type {
	return reflect.TypeOf((*multiRegionAccessPointState)(nil)).Elem()
}

type multiRegionAccessPointArgs struct {
	// The AWS account ID for the owner of the buckets for which you want to create a Multi-Region Access Point. Defaults to automatically determined account ID of the AWS provider.
	AccountId *string `pulumi:"accountId"`
	// A configuration block containing details about the Multi-Region Access Point. See Details Configuration Block below for more details
	Details MultiRegionAccessPointDetails `pulumi:"details"`
}

// The set of arguments for constructing a MultiRegionAccessPoint resource.
type MultiRegionAccessPointArgs struct {
	// The AWS account ID for the owner of the buckets for which you want to create a Multi-Region Access Point. Defaults to automatically determined account ID of the AWS provider.
	AccountId pulumi.StringPtrInput
	// A configuration block containing details about the Multi-Region Access Point. See Details Configuration Block below for more details
	Details MultiRegionAccessPointDetailsInput
}

func (MultiRegionAccessPointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*multiRegionAccessPointArgs)(nil)).Elem()
}

type MultiRegionAccessPointInput interface {
	pulumi.Input

	ToMultiRegionAccessPointOutput() MultiRegionAccessPointOutput
	ToMultiRegionAccessPointOutputWithContext(ctx context.Context) MultiRegionAccessPointOutput
}

func (*MultiRegionAccessPoint) ElementType() reflect.Type {
	return reflect.TypeOf((**MultiRegionAccessPoint)(nil)).Elem()
}

func (i *MultiRegionAccessPoint) ToMultiRegionAccessPointOutput() MultiRegionAccessPointOutput {
	return i.ToMultiRegionAccessPointOutputWithContext(context.Background())
}

func (i *MultiRegionAccessPoint) ToMultiRegionAccessPointOutputWithContext(ctx context.Context) MultiRegionAccessPointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MultiRegionAccessPointOutput)
}

// MultiRegionAccessPointArrayInput is an input type that accepts MultiRegionAccessPointArray and MultiRegionAccessPointArrayOutput values.
// You can construct a concrete instance of `MultiRegionAccessPointArrayInput` via:
//
//	MultiRegionAccessPointArray{ MultiRegionAccessPointArgs{...} }
type MultiRegionAccessPointArrayInput interface {
	pulumi.Input

	ToMultiRegionAccessPointArrayOutput() MultiRegionAccessPointArrayOutput
	ToMultiRegionAccessPointArrayOutputWithContext(context.Context) MultiRegionAccessPointArrayOutput
}

type MultiRegionAccessPointArray []MultiRegionAccessPointInput

func (MultiRegionAccessPointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MultiRegionAccessPoint)(nil)).Elem()
}

func (i MultiRegionAccessPointArray) ToMultiRegionAccessPointArrayOutput() MultiRegionAccessPointArrayOutput {
	return i.ToMultiRegionAccessPointArrayOutputWithContext(context.Background())
}

func (i MultiRegionAccessPointArray) ToMultiRegionAccessPointArrayOutputWithContext(ctx context.Context) MultiRegionAccessPointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MultiRegionAccessPointArrayOutput)
}

// MultiRegionAccessPointMapInput is an input type that accepts MultiRegionAccessPointMap and MultiRegionAccessPointMapOutput values.
// You can construct a concrete instance of `MultiRegionAccessPointMapInput` via:
//
//	MultiRegionAccessPointMap{ "key": MultiRegionAccessPointArgs{...} }
type MultiRegionAccessPointMapInput interface {
	pulumi.Input

	ToMultiRegionAccessPointMapOutput() MultiRegionAccessPointMapOutput
	ToMultiRegionAccessPointMapOutputWithContext(context.Context) MultiRegionAccessPointMapOutput
}

type MultiRegionAccessPointMap map[string]MultiRegionAccessPointInput

func (MultiRegionAccessPointMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MultiRegionAccessPoint)(nil)).Elem()
}

func (i MultiRegionAccessPointMap) ToMultiRegionAccessPointMapOutput() MultiRegionAccessPointMapOutput {
	return i.ToMultiRegionAccessPointMapOutputWithContext(context.Background())
}

func (i MultiRegionAccessPointMap) ToMultiRegionAccessPointMapOutputWithContext(ctx context.Context) MultiRegionAccessPointMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MultiRegionAccessPointMapOutput)
}

type MultiRegionAccessPointOutput struct{ *pulumi.OutputState }

func (MultiRegionAccessPointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MultiRegionAccessPoint)(nil)).Elem()
}

func (o MultiRegionAccessPointOutput) ToMultiRegionAccessPointOutput() MultiRegionAccessPointOutput {
	return o
}

func (o MultiRegionAccessPointOutput) ToMultiRegionAccessPointOutputWithContext(ctx context.Context) MultiRegionAccessPointOutput {
	return o
}

// The AWS account ID for the owner of the buckets for which you want to create a Multi-Region Access Point. Defaults to automatically determined account ID of the AWS provider.
func (o MultiRegionAccessPointOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *MultiRegionAccessPoint) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// The alias for the Multi-Region Access Point.
func (o MultiRegionAccessPointOutput) Alias() pulumi.StringOutput {
	return o.ApplyT(func(v *MultiRegionAccessPoint) pulumi.StringOutput { return v.Alias }).(pulumi.StringOutput)
}

// Amazon Resource Name (ARN) of the Multi-Region Access Point.
func (o MultiRegionAccessPointOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *MultiRegionAccessPoint) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// A configuration block containing details about the Multi-Region Access Point. See Details Configuration Block below for more details
func (o MultiRegionAccessPointOutput) Details() MultiRegionAccessPointDetailsOutput {
	return o.ApplyT(func(v *MultiRegionAccessPoint) MultiRegionAccessPointDetailsOutput { return v.Details }).(MultiRegionAccessPointDetailsOutput)
}

// The DNS domain name of the S3 Multi-Region Access Point in the format _`alias`_.accesspoint.s3-global.amazonaws.com. For more information, see the documentation on [Multi-Region Access Point Requests](https://docs.aws.amazon.com/AmazonS3/latest/userguide/MultiRegionAccessPointRequests.html).
func (o MultiRegionAccessPointOutput) DomainName() pulumi.StringOutput {
	return o.ApplyT(func(v *MultiRegionAccessPoint) pulumi.StringOutput { return v.DomainName }).(pulumi.StringOutput)
}

// The current status of the Multi-Region Access Point. One of: `READY`, `INCONSISTENT_ACROSS_REGIONS`, `CREATING`, `PARTIALLY_CREATED`, `PARTIALLY_DELETED`, `DELETING`.
func (o MultiRegionAccessPointOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *MultiRegionAccessPoint) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type MultiRegionAccessPointArrayOutput struct{ *pulumi.OutputState }

func (MultiRegionAccessPointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MultiRegionAccessPoint)(nil)).Elem()
}

func (o MultiRegionAccessPointArrayOutput) ToMultiRegionAccessPointArrayOutput() MultiRegionAccessPointArrayOutput {
	return o
}

func (o MultiRegionAccessPointArrayOutput) ToMultiRegionAccessPointArrayOutputWithContext(ctx context.Context) MultiRegionAccessPointArrayOutput {
	return o
}

func (o MultiRegionAccessPointArrayOutput) Index(i pulumi.IntInput) MultiRegionAccessPointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MultiRegionAccessPoint {
		return vs[0].([]*MultiRegionAccessPoint)[vs[1].(int)]
	}).(MultiRegionAccessPointOutput)
}

type MultiRegionAccessPointMapOutput struct{ *pulumi.OutputState }

func (MultiRegionAccessPointMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MultiRegionAccessPoint)(nil)).Elem()
}

func (o MultiRegionAccessPointMapOutput) ToMultiRegionAccessPointMapOutput() MultiRegionAccessPointMapOutput {
	return o
}

func (o MultiRegionAccessPointMapOutput) ToMultiRegionAccessPointMapOutputWithContext(ctx context.Context) MultiRegionAccessPointMapOutput {
	return o
}

func (o MultiRegionAccessPointMapOutput) MapIndex(k pulumi.StringInput) MultiRegionAccessPointOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MultiRegionAccessPoint {
		return vs[0].(map[string]*MultiRegionAccessPoint)[vs[1].(string)]
	}).(MultiRegionAccessPointOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MultiRegionAccessPointInput)(nil)).Elem(), &MultiRegionAccessPoint{})
	pulumi.RegisterInputType(reflect.TypeOf((*MultiRegionAccessPointArrayInput)(nil)).Elem(), MultiRegionAccessPointArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MultiRegionAccessPointMapInput)(nil)).Elem(), MultiRegionAccessPointMap{})
	pulumi.RegisterOutputType(MultiRegionAccessPointOutput{})
	pulumi.RegisterOutputType(MultiRegionAccessPointArrayOutput{})
	pulumi.RegisterOutputType(MultiRegionAccessPointMapOutput{})
}
