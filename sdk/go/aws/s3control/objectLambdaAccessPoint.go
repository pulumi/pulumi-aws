// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package s3control

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ObjectLambdaAccessPoint struct {
	pulumi.CustomResourceState

	AccountId     pulumi.StringOutput                        `pulumi:"accountId"`
	Arn           pulumi.StringOutput                        `pulumi:"arn"`
	Configuration ObjectLambdaAccessPointConfigurationOutput `pulumi:"configuration"`
	Name          pulumi.StringOutput                        `pulumi:"name"`
}

// NewObjectLambdaAccessPoint registers a new resource with the given unique name, arguments, and options.
func NewObjectLambdaAccessPoint(ctx *pulumi.Context,
	name string, args *ObjectLambdaAccessPointArgs, opts ...pulumi.ResourceOption) (*ObjectLambdaAccessPoint, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	var resource ObjectLambdaAccessPoint
	err := ctx.RegisterResource("aws:s3control/objectLambdaAccessPoint:ObjectLambdaAccessPoint", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetObjectLambdaAccessPoint gets an existing ObjectLambdaAccessPoint resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetObjectLambdaAccessPoint(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ObjectLambdaAccessPointState, opts ...pulumi.ResourceOption) (*ObjectLambdaAccessPoint, error) {
	var resource ObjectLambdaAccessPoint
	err := ctx.ReadResource("aws:s3control/objectLambdaAccessPoint:ObjectLambdaAccessPoint", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ObjectLambdaAccessPoint resources.
type objectLambdaAccessPointState struct {
	AccountId     *string                               `pulumi:"accountId"`
	Arn           *string                               `pulumi:"arn"`
	Configuration *ObjectLambdaAccessPointConfiguration `pulumi:"configuration"`
	Name          *string                               `pulumi:"name"`
}

type ObjectLambdaAccessPointState struct {
	AccountId     pulumi.StringPtrInput
	Arn           pulumi.StringPtrInput
	Configuration ObjectLambdaAccessPointConfigurationPtrInput
	Name          pulumi.StringPtrInput
}

func (ObjectLambdaAccessPointState) ElementType() reflect.Type {
	return reflect.TypeOf((*objectLambdaAccessPointState)(nil)).Elem()
}

type objectLambdaAccessPointArgs struct {
	AccountId     *string                              `pulumi:"accountId"`
	Configuration ObjectLambdaAccessPointConfiguration `pulumi:"configuration"`
	Name          *string                              `pulumi:"name"`
}

// The set of arguments for constructing a ObjectLambdaAccessPoint resource.
type ObjectLambdaAccessPointArgs struct {
	AccountId     pulumi.StringPtrInput
	Configuration ObjectLambdaAccessPointConfigurationInput
	Name          pulumi.StringPtrInput
}

func (ObjectLambdaAccessPointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*objectLambdaAccessPointArgs)(nil)).Elem()
}

type ObjectLambdaAccessPointInput interface {
	pulumi.Input

	ToObjectLambdaAccessPointOutput() ObjectLambdaAccessPointOutput
	ToObjectLambdaAccessPointOutputWithContext(ctx context.Context) ObjectLambdaAccessPointOutput
}

func (*ObjectLambdaAccessPoint) ElementType() reflect.Type {
	return reflect.TypeOf((**ObjectLambdaAccessPoint)(nil)).Elem()
}

func (i *ObjectLambdaAccessPoint) ToObjectLambdaAccessPointOutput() ObjectLambdaAccessPointOutput {
	return i.ToObjectLambdaAccessPointOutputWithContext(context.Background())
}

func (i *ObjectLambdaAccessPoint) ToObjectLambdaAccessPointOutputWithContext(ctx context.Context) ObjectLambdaAccessPointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectLambdaAccessPointOutput)
}

// ObjectLambdaAccessPointArrayInput is an input type that accepts ObjectLambdaAccessPointArray and ObjectLambdaAccessPointArrayOutput values.
// You can construct a concrete instance of `ObjectLambdaAccessPointArrayInput` via:
//
//	ObjectLambdaAccessPointArray{ ObjectLambdaAccessPointArgs{...} }
type ObjectLambdaAccessPointArrayInput interface {
	pulumi.Input

	ToObjectLambdaAccessPointArrayOutput() ObjectLambdaAccessPointArrayOutput
	ToObjectLambdaAccessPointArrayOutputWithContext(context.Context) ObjectLambdaAccessPointArrayOutput
}

type ObjectLambdaAccessPointArray []ObjectLambdaAccessPointInput

func (ObjectLambdaAccessPointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ObjectLambdaAccessPoint)(nil)).Elem()
}

func (i ObjectLambdaAccessPointArray) ToObjectLambdaAccessPointArrayOutput() ObjectLambdaAccessPointArrayOutput {
	return i.ToObjectLambdaAccessPointArrayOutputWithContext(context.Background())
}

func (i ObjectLambdaAccessPointArray) ToObjectLambdaAccessPointArrayOutputWithContext(ctx context.Context) ObjectLambdaAccessPointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectLambdaAccessPointArrayOutput)
}

// ObjectLambdaAccessPointMapInput is an input type that accepts ObjectLambdaAccessPointMap and ObjectLambdaAccessPointMapOutput values.
// You can construct a concrete instance of `ObjectLambdaAccessPointMapInput` via:
//
//	ObjectLambdaAccessPointMap{ "key": ObjectLambdaAccessPointArgs{...} }
type ObjectLambdaAccessPointMapInput interface {
	pulumi.Input

	ToObjectLambdaAccessPointMapOutput() ObjectLambdaAccessPointMapOutput
	ToObjectLambdaAccessPointMapOutputWithContext(context.Context) ObjectLambdaAccessPointMapOutput
}

type ObjectLambdaAccessPointMap map[string]ObjectLambdaAccessPointInput

func (ObjectLambdaAccessPointMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ObjectLambdaAccessPoint)(nil)).Elem()
}

func (i ObjectLambdaAccessPointMap) ToObjectLambdaAccessPointMapOutput() ObjectLambdaAccessPointMapOutput {
	return i.ToObjectLambdaAccessPointMapOutputWithContext(context.Background())
}

func (i ObjectLambdaAccessPointMap) ToObjectLambdaAccessPointMapOutputWithContext(ctx context.Context) ObjectLambdaAccessPointMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectLambdaAccessPointMapOutput)
}

type ObjectLambdaAccessPointOutput struct{ *pulumi.OutputState }

func (ObjectLambdaAccessPointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ObjectLambdaAccessPoint)(nil)).Elem()
}

func (o ObjectLambdaAccessPointOutput) ToObjectLambdaAccessPointOutput() ObjectLambdaAccessPointOutput {
	return o
}

func (o ObjectLambdaAccessPointOutput) ToObjectLambdaAccessPointOutputWithContext(ctx context.Context) ObjectLambdaAccessPointOutput {
	return o
}

func (o ObjectLambdaAccessPointOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *ObjectLambdaAccessPoint) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

func (o ObjectLambdaAccessPointOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *ObjectLambdaAccessPoint) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o ObjectLambdaAccessPointOutput) Configuration() ObjectLambdaAccessPointConfigurationOutput {
	return o.ApplyT(func(v *ObjectLambdaAccessPoint) ObjectLambdaAccessPointConfigurationOutput { return v.Configuration }).(ObjectLambdaAccessPointConfigurationOutput)
}

func (o ObjectLambdaAccessPointOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ObjectLambdaAccessPoint) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type ObjectLambdaAccessPointArrayOutput struct{ *pulumi.OutputState }

func (ObjectLambdaAccessPointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ObjectLambdaAccessPoint)(nil)).Elem()
}

func (o ObjectLambdaAccessPointArrayOutput) ToObjectLambdaAccessPointArrayOutput() ObjectLambdaAccessPointArrayOutput {
	return o
}

func (o ObjectLambdaAccessPointArrayOutput) ToObjectLambdaAccessPointArrayOutputWithContext(ctx context.Context) ObjectLambdaAccessPointArrayOutput {
	return o
}

func (o ObjectLambdaAccessPointArrayOutput) Index(i pulumi.IntInput) ObjectLambdaAccessPointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ObjectLambdaAccessPoint {
		return vs[0].([]*ObjectLambdaAccessPoint)[vs[1].(int)]
	}).(ObjectLambdaAccessPointOutput)
}

type ObjectLambdaAccessPointMapOutput struct{ *pulumi.OutputState }

func (ObjectLambdaAccessPointMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ObjectLambdaAccessPoint)(nil)).Elem()
}

func (o ObjectLambdaAccessPointMapOutput) ToObjectLambdaAccessPointMapOutput() ObjectLambdaAccessPointMapOutput {
	return o
}

func (o ObjectLambdaAccessPointMapOutput) ToObjectLambdaAccessPointMapOutputWithContext(ctx context.Context) ObjectLambdaAccessPointMapOutput {
	return o
}

func (o ObjectLambdaAccessPointMapOutput) MapIndex(k pulumi.StringInput) ObjectLambdaAccessPointOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ObjectLambdaAccessPoint {
		return vs[0].(map[string]*ObjectLambdaAccessPoint)[vs[1].(string)]
	}).(ObjectLambdaAccessPointOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectLambdaAccessPointInput)(nil)).Elem(), &ObjectLambdaAccessPoint{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectLambdaAccessPointArrayInput)(nil)).Elem(), ObjectLambdaAccessPointArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectLambdaAccessPointMapInput)(nil)).Elem(), ObjectLambdaAccessPointMap{})
	pulumi.RegisterOutputType(ObjectLambdaAccessPointOutput{})
	pulumi.RegisterOutputType(ObjectLambdaAccessPointArrayOutput{})
	pulumi.RegisterOutputType(ObjectLambdaAccessPointMapOutput{})
}
