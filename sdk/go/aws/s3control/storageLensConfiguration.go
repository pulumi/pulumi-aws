// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package s3control

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type StorageLensConfiguration struct {
	pulumi.CustomResourceState

	AccountId                pulumi.StringOutput                                    `pulumi:"accountId"`
	Arn                      pulumi.StringOutput                                    `pulumi:"arn"`
	ConfigId                 pulumi.StringOutput                                    `pulumi:"configId"`
	StorageLensConfiguration StorageLensConfigurationStorageLensConfigurationOutput `pulumi:"storageLensConfiguration"`
	Tags                     pulumi.StringMapOutput                                 `pulumi:"tags"`
	TagsAll                  pulumi.StringMapOutput                                 `pulumi:"tagsAll"`
}

// NewStorageLensConfiguration registers a new resource with the given unique name, arguments, and options.
func NewStorageLensConfiguration(ctx *pulumi.Context,
	name string, args *StorageLensConfigurationArgs, opts ...pulumi.ResourceOption) (*StorageLensConfiguration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConfigId == nil {
		return nil, errors.New("invalid value for required argument 'ConfigId'")
	}
	if args.StorageLensConfiguration == nil {
		return nil, errors.New("invalid value for required argument 'StorageLensConfiguration'")
	}
	var resource StorageLensConfiguration
	err := ctx.RegisterResource("aws:s3control/storageLensConfiguration:StorageLensConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStorageLensConfiguration gets an existing StorageLensConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStorageLensConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StorageLensConfigurationState, opts ...pulumi.ResourceOption) (*StorageLensConfiguration, error) {
	var resource StorageLensConfiguration
	err := ctx.ReadResource("aws:s3control/storageLensConfiguration:StorageLensConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StorageLensConfiguration resources.
type storageLensConfigurationState struct {
	AccountId                *string                                           `pulumi:"accountId"`
	Arn                      *string                                           `pulumi:"arn"`
	ConfigId                 *string                                           `pulumi:"configId"`
	StorageLensConfiguration *StorageLensConfigurationStorageLensConfiguration `pulumi:"storageLensConfiguration"`
	Tags                     map[string]string                                 `pulumi:"tags"`
	TagsAll                  map[string]string                                 `pulumi:"tagsAll"`
}

type StorageLensConfigurationState struct {
	AccountId                pulumi.StringPtrInput
	Arn                      pulumi.StringPtrInput
	ConfigId                 pulumi.StringPtrInput
	StorageLensConfiguration StorageLensConfigurationStorageLensConfigurationPtrInput
	Tags                     pulumi.StringMapInput
	TagsAll                  pulumi.StringMapInput
}

func (StorageLensConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*storageLensConfigurationState)(nil)).Elem()
}

type storageLensConfigurationArgs struct {
	AccountId                *string                                          `pulumi:"accountId"`
	ConfigId                 string                                           `pulumi:"configId"`
	StorageLensConfiguration StorageLensConfigurationStorageLensConfiguration `pulumi:"storageLensConfiguration"`
	Tags                     map[string]string                                `pulumi:"tags"`
}

// The set of arguments for constructing a StorageLensConfiguration resource.
type StorageLensConfigurationArgs struct {
	AccountId                pulumi.StringPtrInput
	ConfigId                 pulumi.StringInput
	StorageLensConfiguration StorageLensConfigurationStorageLensConfigurationInput
	Tags                     pulumi.StringMapInput
}

func (StorageLensConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*storageLensConfigurationArgs)(nil)).Elem()
}

type StorageLensConfigurationInput interface {
	pulumi.Input

	ToStorageLensConfigurationOutput() StorageLensConfigurationOutput
	ToStorageLensConfigurationOutputWithContext(ctx context.Context) StorageLensConfigurationOutput
}

func (*StorageLensConfiguration) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageLensConfiguration)(nil)).Elem()
}

func (i *StorageLensConfiguration) ToStorageLensConfigurationOutput() StorageLensConfigurationOutput {
	return i.ToStorageLensConfigurationOutputWithContext(context.Background())
}

func (i *StorageLensConfiguration) ToStorageLensConfigurationOutputWithContext(ctx context.Context) StorageLensConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageLensConfigurationOutput)
}

// StorageLensConfigurationArrayInput is an input type that accepts StorageLensConfigurationArray and StorageLensConfigurationArrayOutput values.
// You can construct a concrete instance of `StorageLensConfigurationArrayInput` via:
//
//	StorageLensConfigurationArray{ StorageLensConfigurationArgs{...} }
type StorageLensConfigurationArrayInput interface {
	pulumi.Input

	ToStorageLensConfigurationArrayOutput() StorageLensConfigurationArrayOutput
	ToStorageLensConfigurationArrayOutputWithContext(context.Context) StorageLensConfigurationArrayOutput
}

type StorageLensConfigurationArray []StorageLensConfigurationInput

func (StorageLensConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StorageLensConfiguration)(nil)).Elem()
}

func (i StorageLensConfigurationArray) ToStorageLensConfigurationArrayOutput() StorageLensConfigurationArrayOutput {
	return i.ToStorageLensConfigurationArrayOutputWithContext(context.Background())
}

func (i StorageLensConfigurationArray) ToStorageLensConfigurationArrayOutputWithContext(ctx context.Context) StorageLensConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageLensConfigurationArrayOutput)
}

// StorageLensConfigurationMapInput is an input type that accepts StorageLensConfigurationMap and StorageLensConfigurationMapOutput values.
// You can construct a concrete instance of `StorageLensConfigurationMapInput` via:
//
//	StorageLensConfigurationMap{ "key": StorageLensConfigurationArgs{...} }
type StorageLensConfigurationMapInput interface {
	pulumi.Input

	ToStorageLensConfigurationMapOutput() StorageLensConfigurationMapOutput
	ToStorageLensConfigurationMapOutputWithContext(context.Context) StorageLensConfigurationMapOutput
}

type StorageLensConfigurationMap map[string]StorageLensConfigurationInput

func (StorageLensConfigurationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StorageLensConfiguration)(nil)).Elem()
}

func (i StorageLensConfigurationMap) ToStorageLensConfigurationMapOutput() StorageLensConfigurationMapOutput {
	return i.ToStorageLensConfigurationMapOutputWithContext(context.Background())
}

func (i StorageLensConfigurationMap) ToStorageLensConfigurationMapOutputWithContext(ctx context.Context) StorageLensConfigurationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageLensConfigurationMapOutput)
}

type StorageLensConfigurationOutput struct{ *pulumi.OutputState }

func (StorageLensConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageLensConfiguration)(nil)).Elem()
}

func (o StorageLensConfigurationOutput) ToStorageLensConfigurationOutput() StorageLensConfigurationOutput {
	return o
}

func (o StorageLensConfigurationOutput) ToStorageLensConfigurationOutputWithContext(ctx context.Context) StorageLensConfigurationOutput {
	return o
}

func (o StorageLensConfigurationOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *StorageLensConfiguration) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

func (o StorageLensConfigurationOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *StorageLensConfiguration) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o StorageLensConfigurationOutput) ConfigId() pulumi.StringOutput {
	return o.ApplyT(func(v *StorageLensConfiguration) pulumi.StringOutput { return v.ConfigId }).(pulumi.StringOutput)
}

func (o StorageLensConfigurationOutput) StorageLensConfiguration() StorageLensConfigurationStorageLensConfigurationOutput {
	return o.ApplyT(func(v *StorageLensConfiguration) StorageLensConfigurationStorageLensConfigurationOutput {
		return v.StorageLensConfiguration
	}).(StorageLensConfigurationStorageLensConfigurationOutput)
}

func (o StorageLensConfigurationOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *StorageLensConfiguration) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o StorageLensConfigurationOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *StorageLensConfiguration) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type StorageLensConfigurationArrayOutput struct{ *pulumi.OutputState }

func (StorageLensConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StorageLensConfiguration)(nil)).Elem()
}

func (o StorageLensConfigurationArrayOutput) ToStorageLensConfigurationArrayOutput() StorageLensConfigurationArrayOutput {
	return o
}

func (o StorageLensConfigurationArrayOutput) ToStorageLensConfigurationArrayOutputWithContext(ctx context.Context) StorageLensConfigurationArrayOutput {
	return o
}

func (o StorageLensConfigurationArrayOutput) Index(i pulumi.IntInput) StorageLensConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *StorageLensConfiguration {
		return vs[0].([]*StorageLensConfiguration)[vs[1].(int)]
	}).(StorageLensConfigurationOutput)
}

type StorageLensConfigurationMapOutput struct{ *pulumi.OutputState }

func (StorageLensConfigurationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StorageLensConfiguration)(nil)).Elem()
}

func (o StorageLensConfigurationMapOutput) ToStorageLensConfigurationMapOutput() StorageLensConfigurationMapOutput {
	return o
}

func (o StorageLensConfigurationMapOutput) ToStorageLensConfigurationMapOutputWithContext(ctx context.Context) StorageLensConfigurationMapOutput {
	return o
}

func (o StorageLensConfigurationMapOutput) MapIndex(k pulumi.StringInput) StorageLensConfigurationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *StorageLensConfiguration {
		return vs[0].(map[string]*StorageLensConfiguration)[vs[1].(string)]
	}).(StorageLensConfigurationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StorageLensConfigurationInput)(nil)).Elem(), &StorageLensConfiguration{})
	pulumi.RegisterInputType(reflect.TypeOf((*StorageLensConfigurationArrayInput)(nil)).Elem(), StorageLensConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StorageLensConfigurationMapInput)(nil)).Elem(), StorageLensConfigurationMap{})
	pulumi.RegisterOutputType(StorageLensConfigurationOutput{})
	pulumi.RegisterOutputType(StorageLensConfigurationArrayOutput{})
	pulumi.RegisterOutputType(StorageLensConfigurationMapOutput{})
}
