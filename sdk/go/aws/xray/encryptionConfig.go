// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package xray

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates and manages an AWS XRay Encryption Config.
//
// > **NOTE:** Removing this resource from the provider has no effect to the encryption configuration within X-Ray.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/xray"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := xray.NewEncryptionConfig(ctx, "example", &xray.EncryptionConfigArgs{
// 			Type: pulumi.String("NONE"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ### With KMS Key
//
// ```go
// package main
//
// import (
// 	"fmt"
//
// 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/kms"
// 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/xray"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		exampleKey, err := kms.NewKey(ctx, "exampleKey", &kms.KeyArgs{
// 			Description:          pulumi.String("Some Key"),
// 			DeletionWindowInDays: pulumi.Int(7),
// 			Policy:               pulumi.String(fmt.Sprintf("%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v", "{\n", "  \"Version\": \"2012-10-17\",\n", "  \"Id\": \"kms-tf-1\",\n", "  \"Statement\": [\n", "    {\n", "      \"Sid\": \"Enable IAM User Permissions\",\n", "      \"Effect\": \"Allow\",\n", "      \"Principal\": {\n", "        \"AWS\": \"*\"\n", "      },\n", "      \"Action\": \"kms:*\",\n", "      \"Resource\": \"*\"\n", "    }\n", "  ]\n", "}\n")),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = xray.NewEncryptionConfig(ctx, "exampleEncryptionConfig", &xray.EncryptionConfigArgs{
// 			Type:  pulumi.String("KMS"),
// 			KeyId: exampleKey.Arn,
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// XRay Encryption Config can be imported using the region name, e.g.,
//
// ```sh
//  $ pulumi import aws:xray/encryptionConfig:EncryptionConfig example us-west-2
// ```
type EncryptionConfig struct {
	pulumi.CustomResourceState

	// An AWS KMS customer master key (CMK) ARN.
	KeyId pulumi.StringPtrOutput `pulumi:"keyId"`
	// The type of encryption. Set to `KMS` to use your own key for encryption. Set to `NONE` for default encryption.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewEncryptionConfig registers a new resource with the given unique name, arguments, and options.
func NewEncryptionConfig(ctx *pulumi.Context,
	name string, args *EncryptionConfigArgs, opts ...pulumi.ResourceOption) (*EncryptionConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	var resource EncryptionConfig
	err := ctx.RegisterResource("aws:xray/encryptionConfig:EncryptionConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEncryptionConfig gets an existing EncryptionConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEncryptionConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EncryptionConfigState, opts ...pulumi.ResourceOption) (*EncryptionConfig, error) {
	var resource EncryptionConfig
	err := ctx.ReadResource("aws:xray/encryptionConfig:EncryptionConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EncryptionConfig resources.
type encryptionConfigState struct {
	// An AWS KMS customer master key (CMK) ARN.
	KeyId *string `pulumi:"keyId"`
	// The type of encryption. Set to `KMS` to use your own key for encryption. Set to `NONE` for default encryption.
	Type *string `pulumi:"type"`
}

type EncryptionConfigState struct {
	// An AWS KMS customer master key (CMK) ARN.
	KeyId pulumi.StringPtrInput
	// The type of encryption. Set to `KMS` to use your own key for encryption. Set to `NONE` for default encryption.
	Type pulumi.StringPtrInput
}

func (EncryptionConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*encryptionConfigState)(nil)).Elem()
}

type encryptionConfigArgs struct {
	// An AWS KMS customer master key (CMK) ARN.
	KeyId *string `pulumi:"keyId"`
	// The type of encryption. Set to `KMS` to use your own key for encryption. Set to `NONE` for default encryption.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a EncryptionConfig resource.
type EncryptionConfigArgs struct {
	// An AWS KMS customer master key (CMK) ARN.
	KeyId pulumi.StringPtrInput
	// The type of encryption. Set to `KMS` to use your own key for encryption. Set to `NONE` for default encryption.
	Type pulumi.StringInput
}

func (EncryptionConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*encryptionConfigArgs)(nil)).Elem()
}

type EncryptionConfigInput interface {
	pulumi.Input

	ToEncryptionConfigOutput() EncryptionConfigOutput
	ToEncryptionConfigOutputWithContext(ctx context.Context) EncryptionConfigOutput
}

func (*EncryptionConfig) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionConfig)(nil))
}

func (i *EncryptionConfig) ToEncryptionConfigOutput() EncryptionConfigOutput {
	return i.ToEncryptionConfigOutputWithContext(context.Background())
}

func (i *EncryptionConfig) ToEncryptionConfigOutputWithContext(ctx context.Context) EncryptionConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionConfigOutput)
}

func (i *EncryptionConfig) ToEncryptionConfigPtrOutput() EncryptionConfigPtrOutput {
	return i.ToEncryptionConfigPtrOutputWithContext(context.Background())
}

func (i *EncryptionConfig) ToEncryptionConfigPtrOutputWithContext(ctx context.Context) EncryptionConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionConfigPtrOutput)
}

type EncryptionConfigPtrInput interface {
	pulumi.Input

	ToEncryptionConfigPtrOutput() EncryptionConfigPtrOutput
	ToEncryptionConfigPtrOutputWithContext(ctx context.Context) EncryptionConfigPtrOutput
}

type encryptionConfigPtrType EncryptionConfigArgs

func (*encryptionConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionConfig)(nil))
}

func (i *encryptionConfigPtrType) ToEncryptionConfigPtrOutput() EncryptionConfigPtrOutput {
	return i.ToEncryptionConfigPtrOutputWithContext(context.Background())
}

func (i *encryptionConfigPtrType) ToEncryptionConfigPtrOutputWithContext(ctx context.Context) EncryptionConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionConfigPtrOutput)
}

// EncryptionConfigArrayInput is an input type that accepts EncryptionConfigArray and EncryptionConfigArrayOutput values.
// You can construct a concrete instance of `EncryptionConfigArrayInput` via:
//
//          EncryptionConfigArray{ EncryptionConfigArgs{...} }
type EncryptionConfigArrayInput interface {
	pulumi.Input

	ToEncryptionConfigArrayOutput() EncryptionConfigArrayOutput
	ToEncryptionConfigArrayOutputWithContext(context.Context) EncryptionConfigArrayOutput
}

type EncryptionConfigArray []EncryptionConfigInput

func (EncryptionConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EncryptionConfig)(nil)).Elem()
}

func (i EncryptionConfigArray) ToEncryptionConfigArrayOutput() EncryptionConfigArrayOutput {
	return i.ToEncryptionConfigArrayOutputWithContext(context.Background())
}

func (i EncryptionConfigArray) ToEncryptionConfigArrayOutputWithContext(ctx context.Context) EncryptionConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionConfigArrayOutput)
}

// EncryptionConfigMapInput is an input type that accepts EncryptionConfigMap and EncryptionConfigMapOutput values.
// You can construct a concrete instance of `EncryptionConfigMapInput` via:
//
//          EncryptionConfigMap{ "key": EncryptionConfigArgs{...} }
type EncryptionConfigMapInput interface {
	pulumi.Input

	ToEncryptionConfigMapOutput() EncryptionConfigMapOutput
	ToEncryptionConfigMapOutputWithContext(context.Context) EncryptionConfigMapOutput
}

type EncryptionConfigMap map[string]EncryptionConfigInput

func (EncryptionConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EncryptionConfig)(nil)).Elem()
}

func (i EncryptionConfigMap) ToEncryptionConfigMapOutput() EncryptionConfigMapOutput {
	return i.ToEncryptionConfigMapOutputWithContext(context.Background())
}

func (i EncryptionConfigMap) ToEncryptionConfigMapOutputWithContext(ctx context.Context) EncryptionConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionConfigMapOutput)
}

type EncryptionConfigOutput struct{ *pulumi.OutputState }

func (EncryptionConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionConfig)(nil))
}

func (o EncryptionConfigOutput) ToEncryptionConfigOutput() EncryptionConfigOutput {
	return o
}

func (o EncryptionConfigOutput) ToEncryptionConfigOutputWithContext(ctx context.Context) EncryptionConfigOutput {
	return o
}

func (o EncryptionConfigOutput) ToEncryptionConfigPtrOutput() EncryptionConfigPtrOutput {
	return o.ToEncryptionConfigPtrOutputWithContext(context.Background())
}

func (o EncryptionConfigOutput) ToEncryptionConfigPtrOutputWithContext(ctx context.Context) EncryptionConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EncryptionConfig) *EncryptionConfig {
		return &v
	}).(EncryptionConfigPtrOutput)
}

type EncryptionConfigPtrOutput struct{ *pulumi.OutputState }

func (EncryptionConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionConfig)(nil))
}

func (o EncryptionConfigPtrOutput) ToEncryptionConfigPtrOutput() EncryptionConfigPtrOutput {
	return o
}

func (o EncryptionConfigPtrOutput) ToEncryptionConfigPtrOutputWithContext(ctx context.Context) EncryptionConfigPtrOutput {
	return o
}

func (o EncryptionConfigPtrOutput) Elem() EncryptionConfigOutput {
	return o.ApplyT(func(v *EncryptionConfig) EncryptionConfig {
		if v != nil {
			return *v
		}
		var ret EncryptionConfig
		return ret
	}).(EncryptionConfigOutput)
}

type EncryptionConfigArrayOutput struct{ *pulumi.OutputState }

func (EncryptionConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EncryptionConfig)(nil))
}

func (o EncryptionConfigArrayOutput) ToEncryptionConfigArrayOutput() EncryptionConfigArrayOutput {
	return o
}

func (o EncryptionConfigArrayOutput) ToEncryptionConfigArrayOutputWithContext(ctx context.Context) EncryptionConfigArrayOutput {
	return o
}

func (o EncryptionConfigArrayOutput) Index(i pulumi.IntInput) EncryptionConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EncryptionConfig {
		return vs[0].([]EncryptionConfig)[vs[1].(int)]
	}).(EncryptionConfigOutput)
}

type EncryptionConfigMapOutput struct{ *pulumi.OutputState }

func (EncryptionConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]EncryptionConfig)(nil))
}

func (o EncryptionConfigMapOutput) ToEncryptionConfigMapOutput() EncryptionConfigMapOutput {
	return o
}

func (o EncryptionConfigMapOutput) ToEncryptionConfigMapOutputWithContext(ctx context.Context) EncryptionConfigMapOutput {
	return o
}

func (o EncryptionConfigMapOutput) MapIndex(k pulumi.StringInput) EncryptionConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) EncryptionConfig {
		return vs[0].(map[string]EncryptionConfig)[vs[1].(string)]
	}).(EncryptionConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EncryptionConfigInput)(nil)).Elem(), &EncryptionConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*EncryptionConfigPtrInput)(nil)).Elem(), &EncryptionConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*EncryptionConfigArrayInput)(nil)).Elem(), EncryptionConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EncryptionConfigMapInput)(nil)).Elem(), EncryptionConfigMap{})
	pulumi.RegisterOutputType(EncryptionConfigOutput{})
	pulumi.RegisterOutputType(EncryptionConfigPtrOutput{})
	pulumi.RegisterOutputType(EncryptionConfigArrayOutput{})
	pulumi.RegisterOutputType(EncryptionConfigMapOutput{})
}
