// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package xray

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SamplingRule struct {
	pulumi.CustomResourceState

	Arn           pulumi.StringOutput    `pulumi:"arn"`
	Attributes    pulumi.StringMapOutput `pulumi:"attributes"`
	FixedRate     pulumi.Float64Output   `pulumi:"fixedRate"`
	Host          pulumi.StringOutput    `pulumi:"host"`
	HttpMethod    pulumi.StringOutput    `pulumi:"httpMethod"`
	Priority      pulumi.IntOutput       `pulumi:"priority"`
	ReservoirSize pulumi.IntOutput       `pulumi:"reservoirSize"`
	ResourceArn   pulumi.StringOutput    `pulumi:"resourceArn"`
	RuleName      pulumi.StringPtrOutput `pulumi:"ruleName"`
	ServiceName   pulumi.StringOutput    `pulumi:"serviceName"`
	ServiceType   pulumi.StringOutput    `pulumi:"serviceType"`
	Tags          pulumi.StringMapOutput `pulumi:"tags"`
	TagsAll       pulumi.StringMapOutput `pulumi:"tagsAll"`
	UrlPath       pulumi.StringOutput    `pulumi:"urlPath"`
	Version       pulumi.IntOutput       `pulumi:"version"`
}

// NewSamplingRule registers a new resource with the given unique name, arguments, and options.
func NewSamplingRule(ctx *pulumi.Context,
	name string, args *SamplingRuleArgs, opts ...pulumi.ResourceOption) (*SamplingRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FixedRate == nil {
		return nil, errors.New("invalid value for required argument 'FixedRate'")
	}
	if args.Host == nil {
		return nil, errors.New("invalid value for required argument 'Host'")
	}
	if args.HttpMethod == nil {
		return nil, errors.New("invalid value for required argument 'HttpMethod'")
	}
	if args.Priority == nil {
		return nil, errors.New("invalid value for required argument 'Priority'")
	}
	if args.ReservoirSize == nil {
		return nil, errors.New("invalid value for required argument 'ReservoirSize'")
	}
	if args.ResourceArn == nil {
		return nil, errors.New("invalid value for required argument 'ResourceArn'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	if args.ServiceType == nil {
		return nil, errors.New("invalid value for required argument 'ServiceType'")
	}
	if args.UrlPath == nil {
		return nil, errors.New("invalid value for required argument 'UrlPath'")
	}
	if args.Version == nil {
		return nil, errors.New("invalid value for required argument 'Version'")
	}
	var resource SamplingRule
	err := ctx.RegisterResource("aws:xray/samplingRule:SamplingRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSamplingRule gets an existing SamplingRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSamplingRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SamplingRuleState, opts ...pulumi.ResourceOption) (*SamplingRule, error) {
	var resource SamplingRule
	err := ctx.ReadResource("aws:xray/samplingRule:SamplingRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SamplingRule resources.
type samplingRuleState struct {
	Arn           *string           `pulumi:"arn"`
	Attributes    map[string]string `pulumi:"attributes"`
	FixedRate     *float64          `pulumi:"fixedRate"`
	Host          *string           `pulumi:"host"`
	HttpMethod    *string           `pulumi:"httpMethod"`
	Priority      *int              `pulumi:"priority"`
	ReservoirSize *int              `pulumi:"reservoirSize"`
	ResourceArn   *string           `pulumi:"resourceArn"`
	RuleName      *string           `pulumi:"ruleName"`
	ServiceName   *string           `pulumi:"serviceName"`
	ServiceType   *string           `pulumi:"serviceType"`
	Tags          map[string]string `pulumi:"tags"`
	TagsAll       map[string]string `pulumi:"tagsAll"`
	UrlPath       *string           `pulumi:"urlPath"`
	Version       *int              `pulumi:"version"`
}

type SamplingRuleState struct {
	Arn           pulumi.StringPtrInput
	Attributes    pulumi.StringMapInput
	FixedRate     pulumi.Float64PtrInput
	Host          pulumi.StringPtrInput
	HttpMethod    pulumi.StringPtrInput
	Priority      pulumi.IntPtrInput
	ReservoirSize pulumi.IntPtrInput
	ResourceArn   pulumi.StringPtrInput
	RuleName      pulumi.StringPtrInput
	ServiceName   pulumi.StringPtrInput
	ServiceType   pulumi.StringPtrInput
	Tags          pulumi.StringMapInput
	TagsAll       pulumi.StringMapInput
	UrlPath       pulumi.StringPtrInput
	Version       pulumi.IntPtrInput
}

func (SamplingRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*samplingRuleState)(nil)).Elem()
}

type samplingRuleArgs struct {
	Attributes    map[string]string `pulumi:"attributes"`
	FixedRate     float64           `pulumi:"fixedRate"`
	Host          string            `pulumi:"host"`
	HttpMethod    string            `pulumi:"httpMethod"`
	Priority      int               `pulumi:"priority"`
	ReservoirSize int               `pulumi:"reservoirSize"`
	ResourceArn   string            `pulumi:"resourceArn"`
	RuleName      *string           `pulumi:"ruleName"`
	ServiceName   string            `pulumi:"serviceName"`
	ServiceType   string            `pulumi:"serviceType"`
	Tags          map[string]string `pulumi:"tags"`
	UrlPath       string            `pulumi:"urlPath"`
	Version       int               `pulumi:"version"`
}

// The set of arguments for constructing a SamplingRule resource.
type SamplingRuleArgs struct {
	Attributes    pulumi.StringMapInput
	FixedRate     pulumi.Float64Input
	Host          pulumi.StringInput
	HttpMethod    pulumi.StringInput
	Priority      pulumi.IntInput
	ReservoirSize pulumi.IntInput
	ResourceArn   pulumi.StringInput
	RuleName      pulumi.StringPtrInput
	ServiceName   pulumi.StringInput
	ServiceType   pulumi.StringInput
	Tags          pulumi.StringMapInput
	UrlPath       pulumi.StringInput
	Version       pulumi.IntInput
}

func (SamplingRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*samplingRuleArgs)(nil)).Elem()
}

type SamplingRuleInput interface {
	pulumi.Input

	ToSamplingRuleOutput() SamplingRuleOutput
	ToSamplingRuleOutputWithContext(ctx context.Context) SamplingRuleOutput
}

func (*SamplingRule) ElementType() reflect.Type {
	return reflect.TypeOf((**SamplingRule)(nil)).Elem()
}

func (i *SamplingRule) ToSamplingRuleOutput() SamplingRuleOutput {
	return i.ToSamplingRuleOutputWithContext(context.Background())
}

func (i *SamplingRule) ToSamplingRuleOutputWithContext(ctx context.Context) SamplingRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SamplingRuleOutput)
}

// SamplingRuleArrayInput is an input type that accepts SamplingRuleArray and SamplingRuleArrayOutput values.
// You can construct a concrete instance of `SamplingRuleArrayInput` via:
//
//	SamplingRuleArray{ SamplingRuleArgs{...} }
type SamplingRuleArrayInput interface {
	pulumi.Input

	ToSamplingRuleArrayOutput() SamplingRuleArrayOutput
	ToSamplingRuleArrayOutputWithContext(context.Context) SamplingRuleArrayOutput
}

type SamplingRuleArray []SamplingRuleInput

func (SamplingRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SamplingRule)(nil)).Elem()
}

func (i SamplingRuleArray) ToSamplingRuleArrayOutput() SamplingRuleArrayOutput {
	return i.ToSamplingRuleArrayOutputWithContext(context.Background())
}

func (i SamplingRuleArray) ToSamplingRuleArrayOutputWithContext(ctx context.Context) SamplingRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SamplingRuleArrayOutput)
}

// SamplingRuleMapInput is an input type that accepts SamplingRuleMap and SamplingRuleMapOutput values.
// You can construct a concrete instance of `SamplingRuleMapInput` via:
//
//	SamplingRuleMap{ "key": SamplingRuleArgs{...} }
type SamplingRuleMapInput interface {
	pulumi.Input

	ToSamplingRuleMapOutput() SamplingRuleMapOutput
	ToSamplingRuleMapOutputWithContext(context.Context) SamplingRuleMapOutput
}

type SamplingRuleMap map[string]SamplingRuleInput

func (SamplingRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SamplingRule)(nil)).Elem()
}

func (i SamplingRuleMap) ToSamplingRuleMapOutput() SamplingRuleMapOutput {
	return i.ToSamplingRuleMapOutputWithContext(context.Background())
}

func (i SamplingRuleMap) ToSamplingRuleMapOutputWithContext(ctx context.Context) SamplingRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SamplingRuleMapOutput)
}

type SamplingRuleOutput struct{ *pulumi.OutputState }

func (SamplingRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SamplingRule)(nil)).Elem()
}

func (o SamplingRuleOutput) ToSamplingRuleOutput() SamplingRuleOutput {
	return o
}

func (o SamplingRuleOutput) ToSamplingRuleOutputWithContext(ctx context.Context) SamplingRuleOutput {
	return o
}

func (o SamplingRuleOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *SamplingRule) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o SamplingRuleOutput) Attributes() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SamplingRule) pulumi.StringMapOutput { return v.Attributes }).(pulumi.StringMapOutput)
}

func (o SamplingRuleOutput) FixedRate() pulumi.Float64Output {
	return o.ApplyT(func(v *SamplingRule) pulumi.Float64Output { return v.FixedRate }).(pulumi.Float64Output)
}

func (o SamplingRuleOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v *SamplingRule) pulumi.StringOutput { return v.Host }).(pulumi.StringOutput)
}

func (o SamplingRuleOutput) HttpMethod() pulumi.StringOutput {
	return o.ApplyT(func(v *SamplingRule) pulumi.StringOutput { return v.HttpMethod }).(pulumi.StringOutput)
}

func (o SamplingRuleOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v *SamplingRule) pulumi.IntOutput { return v.Priority }).(pulumi.IntOutput)
}

func (o SamplingRuleOutput) ReservoirSize() pulumi.IntOutput {
	return o.ApplyT(func(v *SamplingRule) pulumi.IntOutput { return v.ReservoirSize }).(pulumi.IntOutput)
}

func (o SamplingRuleOutput) ResourceArn() pulumi.StringOutput {
	return o.ApplyT(func(v *SamplingRule) pulumi.StringOutput { return v.ResourceArn }).(pulumi.StringOutput)
}

func (o SamplingRuleOutput) RuleName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SamplingRule) pulumi.StringPtrOutput { return v.RuleName }).(pulumi.StringPtrOutput)
}

func (o SamplingRuleOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *SamplingRule) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

func (o SamplingRuleOutput) ServiceType() pulumi.StringOutput {
	return o.ApplyT(func(v *SamplingRule) pulumi.StringOutput { return v.ServiceType }).(pulumi.StringOutput)
}

func (o SamplingRuleOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SamplingRule) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o SamplingRuleOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SamplingRule) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o SamplingRuleOutput) UrlPath() pulumi.StringOutput {
	return o.ApplyT(func(v *SamplingRule) pulumi.StringOutput { return v.UrlPath }).(pulumi.StringOutput)
}

func (o SamplingRuleOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *SamplingRule) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

type SamplingRuleArrayOutput struct{ *pulumi.OutputState }

func (SamplingRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SamplingRule)(nil)).Elem()
}

func (o SamplingRuleArrayOutput) ToSamplingRuleArrayOutput() SamplingRuleArrayOutput {
	return o
}

func (o SamplingRuleArrayOutput) ToSamplingRuleArrayOutputWithContext(ctx context.Context) SamplingRuleArrayOutput {
	return o
}

func (o SamplingRuleArrayOutput) Index(i pulumi.IntInput) SamplingRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SamplingRule {
		return vs[0].([]*SamplingRule)[vs[1].(int)]
	}).(SamplingRuleOutput)
}

type SamplingRuleMapOutput struct{ *pulumi.OutputState }

func (SamplingRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SamplingRule)(nil)).Elem()
}

func (o SamplingRuleMapOutput) ToSamplingRuleMapOutput() SamplingRuleMapOutput {
	return o
}

func (o SamplingRuleMapOutput) ToSamplingRuleMapOutputWithContext(ctx context.Context) SamplingRuleMapOutput {
	return o
}

func (o SamplingRuleMapOutput) MapIndex(k pulumi.StringInput) SamplingRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SamplingRule {
		return vs[0].(map[string]*SamplingRule)[vs[1].(string)]
	}).(SamplingRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SamplingRuleInput)(nil)).Elem(), &SamplingRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*SamplingRuleArrayInput)(nil)).Elem(), SamplingRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SamplingRuleMapInput)(nil)).Elem(), SamplingRuleMap{})
	pulumi.RegisterOutputType(SamplingRuleOutput{})
	pulumi.RegisterOutputType(SamplingRuleArrayOutput{})
	pulumi.RegisterOutputType(SamplingRuleMapOutput{})
}
