// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bedrockmodel

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages Bedrock model invocation logging configuration.
//
// > Model invocation logging is configured per AWS region. To avoid overwriting settings, this resource should not be defined in multiple configurations.
//
// ## Example Usage
//
// ## Import
//
// Using `pulumi import`, import Bedrock custom model using the `id` set to the AWS region. For example:
//
// ```sh
//
//	$ pulumi import aws:bedrockmodel/invocationLoggingConfiguration:InvocationLoggingConfiguration my_config us-east-1
//
// ```
type InvocationLoggingConfiguration struct {
	pulumi.CustomResourceState

	// The logging configuration values to set. See `loggingConfig`.
	LoggingConfig InvocationLoggingConfigurationLoggingConfigPtrOutput `pulumi:"loggingConfig"`
}

// NewInvocationLoggingConfiguration registers a new resource with the given unique name, arguments, and options.
func NewInvocationLoggingConfiguration(ctx *pulumi.Context,
	name string, args *InvocationLoggingConfigurationArgs, opts ...pulumi.ResourceOption) (*InvocationLoggingConfiguration, error) {
	if args == nil {
		args = &InvocationLoggingConfigurationArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource InvocationLoggingConfiguration
	err := ctx.RegisterResource("aws:bedrockmodel/invocationLoggingConfiguration:InvocationLoggingConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInvocationLoggingConfiguration gets an existing InvocationLoggingConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInvocationLoggingConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InvocationLoggingConfigurationState, opts ...pulumi.ResourceOption) (*InvocationLoggingConfiguration, error) {
	var resource InvocationLoggingConfiguration
	err := ctx.ReadResource("aws:bedrockmodel/invocationLoggingConfiguration:InvocationLoggingConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InvocationLoggingConfiguration resources.
type invocationLoggingConfigurationState struct {
	// The logging configuration values to set. See `loggingConfig`.
	LoggingConfig *InvocationLoggingConfigurationLoggingConfig `pulumi:"loggingConfig"`
}

type InvocationLoggingConfigurationState struct {
	// The logging configuration values to set. See `loggingConfig`.
	LoggingConfig InvocationLoggingConfigurationLoggingConfigPtrInput
}

func (InvocationLoggingConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*invocationLoggingConfigurationState)(nil)).Elem()
}

type invocationLoggingConfigurationArgs struct {
	// The logging configuration values to set. See `loggingConfig`.
	LoggingConfig *InvocationLoggingConfigurationLoggingConfig `pulumi:"loggingConfig"`
}

// The set of arguments for constructing a InvocationLoggingConfiguration resource.
type InvocationLoggingConfigurationArgs struct {
	// The logging configuration values to set. See `loggingConfig`.
	LoggingConfig InvocationLoggingConfigurationLoggingConfigPtrInput
}

func (InvocationLoggingConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*invocationLoggingConfigurationArgs)(nil)).Elem()
}

type InvocationLoggingConfigurationInput interface {
	pulumi.Input

	ToInvocationLoggingConfigurationOutput() InvocationLoggingConfigurationOutput
	ToInvocationLoggingConfigurationOutputWithContext(ctx context.Context) InvocationLoggingConfigurationOutput
}

func (*InvocationLoggingConfiguration) ElementType() reflect.Type {
	return reflect.TypeOf((**InvocationLoggingConfiguration)(nil)).Elem()
}

func (i *InvocationLoggingConfiguration) ToInvocationLoggingConfigurationOutput() InvocationLoggingConfigurationOutput {
	return i.ToInvocationLoggingConfigurationOutputWithContext(context.Background())
}

func (i *InvocationLoggingConfiguration) ToInvocationLoggingConfigurationOutputWithContext(ctx context.Context) InvocationLoggingConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InvocationLoggingConfigurationOutput)
}

// InvocationLoggingConfigurationArrayInput is an input type that accepts InvocationLoggingConfigurationArray and InvocationLoggingConfigurationArrayOutput values.
// You can construct a concrete instance of `InvocationLoggingConfigurationArrayInput` via:
//
//	InvocationLoggingConfigurationArray{ InvocationLoggingConfigurationArgs{...} }
type InvocationLoggingConfigurationArrayInput interface {
	pulumi.Input

	ToInvocationLoggingConfigurationArrayOutput() InvocationLoggingConfigurationArrayOutput
	ToInvocationLoggingConfigurationArrayOutputWithContext(context.Context) InvocationLoggingConfigurationArrayOutput
}

type InvocationLoggingConfigurationArray []InvocationLoggingConfigurationInput

func (InvocationLoggingConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InvocationLoggingConfiguration)(nil)).Elem()
}

func (i InvocationLoggingConfigurationArray) ToInvocationLoggingConfigurationArrayOutput() InvocationLoggingConfigurationArrayOutput {
	return i.ToInvocationLoggingConfigurationArrayOutputWithContext(context.Background())
}

func (i InvocationLoggingConfigurationArray) ToInvocationLoggingConfigurationArrayOutputWithContext(ctx context.Context) InvocationLoggingConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InvocationLoggingConfigurationArrayOutput)
}

// InvocationLoggingConfigurationMapInput is an input type that accepts InvocationLoggingConfigurationMap and InvocationLoggingConfigurationMapOutput values.
// You can construct a concrete instance of `InvocationLoggingConfigurationMapInput` via:
//
//	InvocationLoggingConfigurationMap{ "key": InvocationLoggingConfigurationArgs{...} }
type InvocationLoggingConfigurationMapInput interface {
	pulumi.Input

	ToInvocationLoggingConfigurationMapOutput() InvocationLoggingConfigurationMapOutput
	ToInvocationLoggingConfigurationMapOutputWithContext(context.Context) InvocationLoggingConfigurationMapOutput
}

type InvocationLoggingConfigurationMap map[string]InvocationLoggingConfigurationInput

func (InvocationLoggingConfigurationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InvocationLoggingConfiguration)(nil)).Elem()
}

func (i InvocationLoggingConfigurationMap) ToInvocationLoggingConfigurationMapOutput() InvocationLoggingConfigurationMapOutput {
	return i.ToInvocationLoggingConfigurationMapOutputWithContext(context.Background())
}

func (i InvocationLoggingConfigurationMap) ToInvocationLoggingConfigurationMapOutputWithContext(ctx context.Context) InvocationLoggingConfigurationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InvocationLoggingConfigurationMapOutput)
}

type InvocationLoggingConfigurationOutput struct{ *pulumi.OutputState }

func (InvocationLoggingConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InvocationLoggingConfiguration)(nil)).Elem()
}

func (o InvocationLoggingConfigurationOutput) ToInvocationLoggingConfigurationOutput() InvocationLoggingConfigurationOutput {
	return o
}

func (o InvocationLoggingConfigurationOutput) ToInvocationLoggingConfigurationOutputWithContext(ctx context.Context) InvocationLoggingConfigurationOutput {
	return o
}

// The logging configuration values to set. See `loggingConfig`.
func (o InvocationLoggingConfigurationOutput) LoggingConfig() InvocationLoggingConfigurationLoggingConfigPtrOutput {
	return o.ApplyT(func(v *InvocationLoggingConfiguration) InvocationLoggingConfigurationLoggingConfigPtrOutput {
		return v.LoggingConfig
	}).(InvocationLoggingConfigurationLoggingConfigPtrOutput)
}

type InvocationLoggingConfigurationArrayOutput struct{ *pulumi.OutputState }

func (InvocationLoggingConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InvocationLoggingConfiguration)(nil)).Elem()
}

func (o InvocationLoggingConfigurationArrayOutput) ToInvocationLoggingConfigurationArrayOutput() InvocationLoggingConfigurationArrayOutput {
	return o
}

func (o InvocationLoggingConfigurationArrayOutput) ToInvocationLoggingConfigurationArrayOutputWithContext(ctx context.Context) InvocationLoggingConfigurationArrayOutput {
	return o
}

func (o InvocationLoggingConfigurationArrayOutput) Index(i pulumi.IntInput) InvocationLoggingConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *InvocationLoggingConfiguration {
		return vs[0].([]*InvocationLoggingConfiguration)[vs[1].(int)]
	}).(InvocationLoggingConfigurationOutput)
}

type InvocationLoggingConfigurationMapOutput struct{ *pulumi.OutputState }

func (InvocationLoggingConfigurationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InvocationLoggingConfiguration)(nil)).Elem()
}

func (o InvocationLoggingConfigurationMapOutput) ToInvocationLoggingConfigurationMapOutput() InvocationLoggingConfigurationMapOutput {
	return o
}

func (o InvocationLoggingConfigurationMapOutput) ToInvocationLoggingConfigurationMapOutputWithContext(ctx context.Context) InvocationLoggingConfigurationMapOutput {
	return o
}

func (o InvocationLoggingConfigurationMapOutput) MapIndex(k pulumi.StringInput) InvocationLoggingConfigurationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *InvocationLoggingConfiguration {
		return vs[0].(map[string]*InvocationLoggingConfiguration)[vs[1].(string)]
	}).(InvocationLoggingConfigurationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InvocationLoggingConfigurationInput)(nil)).Elem(), &InvocationLoggingConfiguration{})
	pulumi.RegisterInputType(reflect.TypeOf((*InvocationLoggingConfigurationArrayInput)(nil)).Elem(), InvocationLoggingConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InvocationLoggingConfigurationMapInput)(nil)).Elem(), InvocationLoggingConfigurationMap{})
	pulumi.RegisterOutputType(InvocationLoggingConfigurationOutput{})
	pulumi.RegisterOutputType(InvocationLoggingConfigurationArrayOutput{})
	pulumi.RegisterOutputType(InvocationLoggingConfigurationMapOutput{})
}
