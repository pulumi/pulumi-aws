// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mwaa

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Environment struct {
	pulumi.CustomResourceState

	AirflowConfigurationOptions  pulumi.StringMapOutput                `pulumi:"airflowConfigurationOptions"`
	AirflowVersion               pulumi.StringOutput                   `pulumi:"airflowVersion"`
	Arn                          pulumi.StringOutput                   `pulumi:"arn"`
	CreatedAt                    pulumi.StringOutput                   `pulumi:"createdAt"`
	DagS3Path                    pulumi.StringOutput                   `pulumi:"dagS3Path"`
	EnvironmentClass             pulumi.StringOutput                   `pulumi:"environmentClass"`
	ExecutionRoleArn             pulumi.StringOutput                   `pulumi:"executionRoleArn"`
	KmsKey                       pulumi.StringPtrOutput                `pulumi:"kmsKey"`
	LastUpdateds                 EnvironmentLastUpdatedArrayOutput     `pulumi:"lastUpdateds"`
	LoggingConfiguration         EnvironmentLoggingConfigurationOutput `pulumi:"loggingConfiguration"`
	MaxWorkers                   pulumi.IntOutput                      `pulumi:"maxWorkers"`
	MinWorkers                   pulumi.IntOutput                      `pulumi:"minWorkers"`
	Name                         pulumi.StringOutput                   `pulumi:"name"`
	NetworkConfiguration         EnvironmentNetworkConfigurationOutput `pulumi:"networkConfiguration"`
	PluginsS3ObjectVersion       pulumi.StringOutput                   `pulumi:"pluginsS3ObjectVersion"`
	PluginsS3Path                pulumi.StringPtrOutput                `pulumi:"pluginsS3Path"`
	RequirementsS3ObjectVersion  pulumi.StringOutput                   `pulumi:"requirementsS3ObjectVersion"`
	RequirementsS3Path           pulumi.StringPtrOutput                `pulumi:"requirementsS3Path"`
	Schedulers                   pulumi.IntOutput                      `pulumi:"schedulers"`
	ServiceRoleArn               pulumi.StringOutput                   `pulumi:"serviceRoleArn"`
	SourceBucketArn              pulumi.StringOutput                   `pulumi:"sourceBucketArn"`
	Status                       pulumi.StringOutput                   `pulumi:"status"`
	Tags                         pulumi.StringMapOutput                `pulumi:"tags"`
	TagsAll                      pulumi.StringMapOutput                `pulumi:"tagsAll"`
	WebserverAccessMode          pulumi.StringOutput                   `pulumi:"webserverAccessMode"`
	WebserverUrl                 pulumi.StringOutput                   `pulumi:"webserverUrl"`
	WeeklyMaintenanceWindowStart pulumi.StringOutput                   `pulumi:"weeklyMaintenanceWindowStart"`
}

// NewEnvironment registers a new resource with the given unique name, arguments, and options.
func NewEnvironment(ctx *pulumi.Context,
	name string, args *EnvironmentArgs, opts ...pulumi.ResourceOption) (*Environment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DagS3Path == nil {
		return nil, errors.New("invalid value for required argument 'DagS3Path'")
	}
	if args.ExecutionRoleArn == nil {
		return nil, errors.New("invalid value for required argument 'ExecutionRoleArn'")
	}
	if args.NetworkConfiguration == nil {
		return nil, errors.New("invalid value for required argument 'NetworkConfiguration'")
	}
	if args.SourceBucketArn == nil {
		return nil, errors.New("invalid value for required argument 'SourceBucketArn'")
	}
	if args.AirflowConfigurationOptions != nil {
		args.AirflowConfigurationOptions = pulumi.ToSecret(args.AirflowConfigurationOptions).(pulumi.StringMapInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"airflowConfigurationOptions",
	})
	opts = append(opts, secrets)
	var resource Environment
	err := ctx.RegisterResource("aws:mwaa/environment:Environment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEnvironment gets an existing Environment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEnvironment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EnvironmentState, opts ...pulumi.ResourceOption) (*Environment, error) {
	var resource Environment
	err := ctx.ReadResource("aws:mwaa/environment:Environment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Environment resources.
type environmentState struct {
	AirflowConfigurationOptions  map[string]string                `pulumi:"airflowConfigurationOptions"`
	AirflowVersion               *string                          `pulumi:"airflowVersion"`
	Arn                          *string                          `pulumi:"arn"`
	CreatedAt                    *string                          `pulumi:"createdAt"`
	DagS3Path                    *string                          `pulumi:"dagS3Path"`
	EnvironmentClass             *string                          `pulumi:"environmentClass"`
	ExecutionRoleArn             *string                          `pulumi:"executionRoleArn"`
	KmsKey                       *string                          `pulumi:"kmsKey"`
	LastUpdateds                 []EnvironmentLastUpdated         `pulumi:"lastUpdateds"`
	LoggingConfiguration         *EnvironmentLoggingConfiguration `pulumi:"loggingConfiguration"`
	MaxWorkers                   *int                             `pulumi:"maxWorkers"`
	MinWorkers                   *int                             `pulumi:"minWorkers"`
	Name                         *string                          `pulumi:"name"`
	NetworkConfiguration         *EnvironmentNetworkConfiguration `pulumi:"networkConfiguration"`
	PluginsS3ObjectVersion       *string                          `pulumi:"pluginsS3ObjectVersion"`
	PluginsS3Path                *string                          `pulumi:"pluginsS3Path"`
	RequirementsS3ObjectVersion  *string                          `pulumi:"requirementsS3ObjectVersion"`
	RequirementsS3Path           *string                          `pulumi:"requirementsS3Path"`
	Schedulers                   *int                             `pulumi:"schedulers"`
	ServiceRoleArn               *string                          `pulumi:"serviceRoleArn"`
	SourceBucketArn              *string                          `pulumi:"sourceBucketArn"`
	Status                       *string                          `pulumi:"status"`
	Tags                         map[string]string                `pulumi:"tags"`
	TagsAll                      map[string]string                `pulumi:"tagsAll"`
	WebserverAccessMode          *string                          `pulumi:"webserverAccessMode"`
	WebserverUrl                 *string                          `pulumi:"webserverUrl"`
	WeeklyMaintenanceWindowStart *string                          `pulumi:"weeklyMaintenanceWindowStart"`
}

type EnvironmentState struct {
	AirflowConfigurationOptions  pulumi.StringMapInput
	AirflowVersion               pulumi.StringPtrInput
	Arn                          pulumi.StringPtrInput
	CreatedAt                    pulumi.StringPtrInput
	DagS3Path                    pulumi.StringPtrInput
	EnvironmentClass             pulumi.StringPtrInput
	ExecutionRoleArn             pulumi.StringPtrInput
	KmsKey                       pulumi.StringPtrInput
	LastUpdateds                 EnvironmentLastUpdatedArrayInput
	LoggingConfiguration         EnvironmentLoggingConfigurationPtrInput
	MaxWorkers                   pulumi.IntPtrInput
	MinWorkers                   pulumi.IntPtrInput
	Name                         pulumi.StringPtrInput
	NetworkConfiguration         EnvironmentNetworkConfigurationPtrInput
	PluginsS3ObjectVersion       pulumi.StringPtrInput
	PluginsS3Path                pulumi.StringPtrInput
	RequirementsS3ObjectVersion  pulumi.StringPtrInput
	RequirementsS3Path           pulumi.StringPtrInput
	Schedulers                   pulumi.IntPtrInput
	ServiceRoleArn               pulumi.StringPtrInput
	SourceBucketArn              pulumi.StringPtrInput
	Status                       pulumi.StringPtrInput
	Tags                         pulumi.StringMapInput
	TagsAll                      pulumi.StringMapInput
	WebserverAccessMode          pulumi.StringPtrInput
	WebserverUrl                 pulumi.StringPtrInput
	WeeklyMaintenanceWindowStart pulumi.StringPtrInput
}

func (EnvironmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*environmentState)(nil)).Elem()
}

type environmentArgs struct {
	AirflowConfigurationOptions  map[string]string                `pulumi:"airflowConfigurationOptions"`
	AirflowVersion               *string                          `pulumi:"airflowVersion"`
	DagS3Path                    string                           `pulumi:"dagS3Path"`
	EnvironmentClass             *string                          `pulumi:"environmentClass"`
	ExecutionRoleArn             string                           `pulumi:"executionRoleArn"`
	KmsKey                       *string                          `pulumi:"kmsKey"`
	LoggingConfiguration         *EnvironmentLoggingConfiguration `pulumi:"loggingConfiguration"`
	MaxWorkers                   *int                             `pulumi:"maxWorkers"`
	MinWorkers                   *int                             `pulumi:"minWorkers"`
	Name                         *string                          `pulumi:"name"`
	NetworkConfiguration         EnvironmentNetworkConfiguration  `pulumi:"networkConfiguration"`
	PluginsS3ObjectVersion       *string                          `pulumi:"pluginsS3ObjectVersion"`
	PluginsS3Path                *string                          `pulumi:"pluginsS3Path"`
	RequirementsS3ObjectVersion  *string                          `pulumi:"requirementsS3ObjectVersion"`
	RequirementsS3Path           *string                          `pulumi:"requirementsS3Path"`
	Schedulers                   *int                             `pulumi:"schedulers"`
	SourceBucketArn              string                           `pulumi:"sourceBucketArn"`
	Tags                         map[string]string                `pulumi:"tags"`
	WebserverAccessMode          *string                          `pulumi:"webserverAccessMode"`
	WeeklyMaintenanceWindowStart *string                          `pulumi:"weeklyMaintenanceWindowStart"`
}

// The set of arguments for constructing a Environment resource.
type EnvironmentArgs struct {
	AirflowConfigurationOptions  pulumi.StringMapInput
	AirflowVersion               pulumi.StringPtrInput
	DagS3Path                    pulumi.StringInput
	EnvironmentClass             pulumi.StringPtrInput
	ExecutionRoleArn             pulumi.StringInput
	KmsKey                       pulumi.StringPtrInput
	LoggingConfiguration         EnvironmentLoggingConfigurationPtrInput
	MaxWorkers                   pulumi.IntPtrInput
	MinWorkers                   pulumi.IntPtrInput
	Name                         pulumi.StringPtrInput
	NetworkConfiguration         EnvironmentNetworkConfigurationInput
	PluginsS3ObjectVersion       pulumi.StringPtrInput
	PluginsS3Path                pulumi.StringPtrInput
	RequirementsS3ObjectVersion  pulumi.StringPtrInput
	RequirementsS3Path           pulumi.StringPtrInput
	Schedulers                   pulumi.IntPtrInput
	SourceBucketArn              pulumi.StringInput
	Tags                         pulumi.StringMapInput
	WebserverAccessMode          pulumi.StringPtrInput
	WeeklyMaintenanceWindowStart pulumi.StringPtrInput
}

func (EnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*environmentArgs)(nil)).Elem()
}

type EnvironmentInput interface {
	pulumi.Input

	ToEnvironmentOutput() EnvironmentOutput
	ToEnvironmentOutputWithContext(ctx context.Context) EnvironmentOutput
}

func (*Environment) ElementType() reflect.Type {
	return reflect.TypeOf((**Environment)(nil)).Elem()
}

func (i *Environment) ToEnvironmentOutput() EnvironmentOutput {
	return i.ToEnvironmentOutputWithContext(context.Background())
}

func (i *Environment) ToEnvironmentOutputWithContext(ctx context.Context) EnvironmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentOutput)
}

// EnvironmentArrayInput is an input type that accepts EnvironmentArray and EnvironmentArrayOutput values.
// You can construct a concrete instance of `EnvironmentArrayInput` via:
//
//	EnvironmentArray{ EnvironmentArgs{...} }
type EnvironmentArrayInput interface {
	pulumi.Input

	ToEnvironmentArrayOutput() EnvironmentArrayOutput
	ToEnvironmentArrayOutputWithContext(context.Context) EnvironmentArrayOutput
}

type EnvironmentArray []EnvironmentInput

func (EnvironmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Environment)(nil)).Elem()
}

func (i EnvironmentArray) ToEnvironmentArrayOutput() EnvironmentArrayOutput {
	return i.ToEnvironmentArrayOutputWithContext(context.Background())
}

func (i EnvironmentArray) ToEnvironmentArrayOutputWithContext(ctx context.Context) EnvironmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentArrayOutput)
}

// EnvironmentMapInput is an input type that accepts EnvironmentMap and EnvironmentMapOutput values.
// You can construct a concrete instance of `EnvironmentMapInput` via:
//
//	EnvironmentMap{ "key": EnvironmentArgs{...} }
type EnvironmentMapInput interface {
	pulumi.Input

	ToEnvironmentMapOutput() EnvironmentMapOutput
	ToEnvironmentMapOutputWithContext(context.Context) EnvironmentMapOutput
}

type EnvironmentMap map[string]EnvironmentInput

func (EnvironmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Environment)(nil)).Elem()
}

func (i EnvironmentMap) ToEnvironmentMapOutput() EnvironmentMapOutput {
	return i.ToEnvironmentMapOutputWithContext(context.Background())
}

func (i EnvironmentMap) ToEnvironmentMapOutputWithContext(ctx context.Context) EnvironmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentMapOutput)
}

type EnvironmentOutput struct{ *pulumi.OutputState }

func (EnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Environment)(nil)).Elem()
}

func (o EnvironmentOutput) ToEnvironmentOutput() EnvironmentOutput {
	return o
}

func (o EnvironmentOutput) ToEnvironmentOutputWithContext(ctx context.Context) EnvironmentOutput {
	return o
}

func (o EnvironmentOutput) AirflowConfigurationOptions() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Environment) pulumi.StringMapOutput { return v.AirflowConfigurationOptions }).(pulumi.StringMapOutput)
}

func (o EnvironmentOutput) AirflowVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Environment) pulumi.StringOutput { return v.AirflowVersion }).(pulumi.StringOutput)
}

func (o EnvironmentOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Environment) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o EnvironmentOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Environment) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o EnvironmentOutput) DagS3Path() pulumi.StringOutput {
	return o.ApplyT(func(v *Environment) pulumi.StringOutput { return v.DagS3Path }).(pulumi.StringOutput)
}

func (o EnvironmentOutput) EnvironmentClass() pulumi.StringOutput {
	return o.ApplyT(func(v *Environment) pulumi.StringOutput { return v.EnvironmentClass }).(pulumi.StringOutput)
}

func (o EnvironmentOutput) ExecutionRoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Environment) pulumi.StringOutput { return v.ExecutionRoleArn }).(pulumi.StringOutput)
}

func (o EnvironmentOutput) KmsKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Environment) pulumi.StringPtrOutput { return v.KmsKey }).(pulumi.StringPtrOutput)
}

func (o EnvironmentOutput) LastUpdateds() EnvironmentLastUpdatedArrayOutput {
	return o.ApplyT(func(v *Environment) EnvironmentLastUpdatedArrayOutput { return v.LastUpdateds }).(EnvironmentLastUpdatedArrayOutput)
}

func (o EnvironmentOutput) LoggingConfiguration() EnvironmentLoggingConfigurationOutput {
	return o.ApplyT(func(v *Environment) EnvironmentLoggingConfigurationOutput { return v.LoggingConfiguration }).(EnvironmentLoggingConfigurationOutput)
}

func (o EnvironmentOutput) MaxWorkers() pulumi.IntOutput {
	return o.ApplyT(func(v *Environment) pulumi.IntOutput { return v.MaxWorkers }).(pulumi.IntOutput)
}

func (o EnvironmentOutput) MinWorkers() pulumi.IntOutput {
	return o.ApplyT(func(v *Environment) pulumi.IntOutput { return v.MinWorkers }).(pulumi.IntOutput)
}

func (o EnvironmentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Environment) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o EnvironmentOutput) NetworkConfiguration() EnvironmentNetworkConfigurationOutput {
	return o.ApplyT(func(v *Environment) EnvironmentNetworkConfigurationOutput { return v.NetworkConfiguration }).(EnvironmentNetworkConfigurationOutput)
}

func (o EnvironmentOutput) PluginsS3ObjectVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Environment) pulumi.StringOutput { return v.PluginsS3ObjectVersion }).(pulumi.StringOutput)
}

func (o EnvironmentOutput) PluginsS3Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Environment) pulumi.StringPtrOutput { return v.PluginsS3Path }).(pulumi.StringPtrOutput)
}

func (o EnvironmentOutput) RequirementsS3ObjectVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Environment) pulumi.StringOutput { return v.RequirementsS3ObjectVersion }).(pulumi.StringOutput)
}

func (o EnvironmentOutput) RequirementsS3Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Environment) pulumi.StringPtrOutput { return v.RequirementsS3Path }).(pulumi.StringPtrOutput)
}

func (o EnvironmentOutput) Schedulers() pulumi.IntOutput {
	return o.ApplyT(func(v *Environment) pulumi.IntOutput { return v.Schedulers }).(pulumi.IntOutput)
}

func (o EnvironmentOutput) ServiceRoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Environment) pulumi.StringOutput { return v.ServiceRoleArn }).(pulumi.StringOutput)
}

func (o EnvironmentOutput) SourceBucketArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Environment) pulumi.StringOutput { return v.SourceBucketArn }).(pulumi.StringOutput)
}

func (o EnvironmentOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Environment) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o EnvironmentOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Environment) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o EnvironmentOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Environment) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o EnvironmentOutput) WebserverAccessMode() pulumi.StringOutput {
	return o.ApplyT(func(v *Environment) pulumi.StringOutput { return v.WebserverAccessMode }).(pulumi.StringOutput)
}

func (o EnvironmentOutput) WebserverUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *Environment) pulumi.StringOutput { return v.WebserverUrl }).(pulumi.StringOutput)
}

func (o EnvironmentOutput) WeeklyMaintenanceWindowStart() pulumi.StringOutput {
	return o.ApplyT(func(v *Environment) pulumi.StringOutput { return v.WeeklyMaintenanceWindowStart }).(pulumi.StringOutput)
}

type EnvironmentArrayOutput struct{ *pulumi.OutputState }

func (EnvironmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Environment)(nil)).Elem()
}

func (o EnvironmentArrayOutput) ToEnvironmentArrayOutput() EnvironmentArrayOutput {
	return o
}

func (o EnvironmentArrayOutput) ToEnvironmentArrayOutputWithContext(ctx context.Context) EnvironmentArrayOutput {
	return o
}

func (o EnvironmentArrayOutput) Index(i pulumi.IntInput) EnvironmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Environment {
		return vs[0].([]*Environment)[vs[1].(int)]
	}).(EnvironmentOutput)
}

type EnvironmentMapOutput struct{ *pulumi.OutputState }

func (EnvironmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Environment)(nil)).Elem()
}

func (o EnvironmentMapOutput) ToEnvironmentMapOutput() EnvironmentMapOutput {
	return o
}

func (o EnvironmentMapOutput) ToEnvironmentMapOutputWithContext(ctx context.Context) EnvironmentMapOutput {
	return o
}

func (o EnvironmentMapOutput) MapIndex(k pulumi.StringInput) EnvironmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Environment {
		return vs[0].(map[string]*Environment)[vs[1].(string)]
	}).(EnvironmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EnvironmentInput)(nil)).Elem(), &Environment{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvironmentArrayInput)(nil)).Elem(), EnvironmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvironmentMapInput)(nil)).Elem(), EnvironmentMap{})
	pulumi.RegisterOutputType(EnvironmentOutput{})
	pulumi.RegisterOutputType(EnvironmentArrayOutput{})
	pulumi.RegisterOutputType(EnvironmentMapOutput{})
}
