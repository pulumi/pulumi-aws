// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mediaconvert

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Retrieve information about a AWS Elemental MediaConvert Queue.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/mediaconvert"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := mediaconvert.LookupQueue(ctx, &mediaconvert.LookupQueueArgs{
//				Id: "tf-example-queue",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupQueue(ctx *pulumi.Context, args *LookupQueueArgs, opts ...pulumi.InvokeOption) (*LookupQueueResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupQueueResult
	err := ctx.Invoke("aws:mediaconvert/getQueue:getQueue", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getQueue.
type LookupQueueArgs struct {
	// Unique identifier of the queue. The same as `name`.
	Id string `pulumi:"id"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getQueue.
type LookupQueueResult struct {
	// The Arn of the queue.
	Arn string `pulumi:"arn"`
	Id  string `pulumi:"id"`
	// The same as `id`.
	Name string `pulumi:"name"`
	// The status of the queue.
	Status string `pulumi:"status"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	Tags map[string]string `pulumi:"tags"`
}

func LookupQueueOutput(ctx *pulumi.Context, args LookupQueueOutputArgs, opts ...pulumi.InvokeOption) LookupQueueResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupQueueResult, error) {
			args := v.(LookupQueueArgs)
			r, err := LookupQueue(ctx, &args, opts...)
			var s LookupQueueResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupQueueResultOutput)
}

// A collection of arguments for invoking getQueue.
type LookupQueueOutputArgs struct {
	// Unique identifier of the queue. The same as `name`.
	Id pulumi.StringInput `pulumi:"id"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (LookupQueueOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupQueueArgs)(nil)).Elem()
}

// A collection of values returned by getQueue.
type LookupQueueResultOutput struct{ *pulumi.OutputState }

func (LookupQueueResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupQueueResult)(nil)).Elem()
}

func (o LookupQueueResultOutput) ToLookupQueueResultOutput() LookupQueueResultOutput {
	return o
}

func (o LookupQueueResultOutput) ToLookupQueueResultOutputWithContext(ctx context.Context) LookupQueueResultOutput {
	return o
}

// The Arn of the queue.
func (o LookupQueueResultOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupQueueResult) string { return v.Arn }).(pulumi.StringOutput)
}

func (o LookupQueueResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupQueueResult) string { return v.Id }).(pulumi.StringOutput)
}

// The same as `id`.
func (o LookupQueueResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupQueueResult) string { return v.Name }).(pulumi.StringOutput)
}

// The status of the queue.
func (o LookupQueueResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupQueueResult) string { return v.Status }).(pulumi.StringOutput)
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o LookupQueueResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupQueueResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupQueueResultOutput{})
}
