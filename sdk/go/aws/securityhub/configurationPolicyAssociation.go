// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package securityhub

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages Security Hub configuration policy associations.
//
// > **NOTE:** This resource requires `securityhub.OrganizationConfiguration` to be configured with type `CENTRAL`. More information about Security Hub central configuration and configuration policies can be found in the [How Security Hub configuration policies work](https://docs.aws.amazon.com/securityhub/latest/userguide/configuration-policies-overview.html) documentation.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/securityhub"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := securityhub.NewFindingAggregator(ctx, "example", &securityhub.FindingAggregatorArgs{
//				LinkingMode: pulumi.String("ALL_REGIONS"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = securityhub.NewOrganizationConfiguration(ctx, "example", &securityhub.OrganizationConfigurationArgs{
//				AutoEnable:          pulumi.Bool(false),
//				AutoEnableStandards: pulumi.String("NONE"),
//				OrganizationConfiguration: &securityhub.OrganizationConfigurationOrganizationConfigurationArgs{
//					ConfigurationType: pulumi.String("CENTRAL"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleConfigurationPolicy, err := securityhub.NewConfigurationPolicy(ctx, "example", &securityhub.ConfigurationPolicyArgs{
//				Name:        pulumi.String("Example"),
//				Description: pulumi.String("This is an example configuration policy"),
//				ConfigurationPolicy: &securityhub.ConfigurationPolicyConfigurationPolicyArgs{
//					ServiceEnabled: pulumi.Bool(true),
//					EnabledStandardArns: pulumi.StringArray{
//						pulumi.String("arn:aws:securityhub:us-east-1::standards/aws-foundational-security-best-practices/v/1.0.0"),
//						pulumi.String("arn:aws:securityhub:::ruleset/cis-aws-foundations-benchmark/v/1.2.0"),
//					},
//					SecurityControlsConfiguration: &securityhub.ConfigurationPolicyConfigurationPolicySecurityControlsConfigurationArgs{
//						DisabledControlIdentifiers: pulumi.StringArray{},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = securityhub.NewConfigurationPolicyAssociation(ctx, "account_example", &securityhub.ConfigurationPolicyAssociationArgs{
//				TargetId: pulumi.String("123456789012"),
//				PolicyId: exampleConfigurationPolicy.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = securityhub.NewConfigurationPolicyAssociation(ctx, "root_example", &securityhub.ConfigurationPolicyAssociationArgs{
//				TargetId: pulumi.String("r-abcd"),
//				PolicyId: exampleConfigurationPolicy.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = securityhub.NewConfigurationPolicyAssociation(ctx, "ou_example", &securityhub.ConfigurationPolicyAssociationArgs{
//				TargetId: pulumi.String("ou-abcd-12345678"),
//				PolicyId: exampleConfigurationPolicy.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// Using `pulumi import`, import an existing Security Hub enabled account using the universally unique identifier (UUID) of the policy. For example:
//
// ```sh
// $ pulumi import aws:securityhub/configurationPolicyAssociation:ConfigurationPolicyAssociation example_account_association 123456789012
// ```
type ConfigurationPolicyAssociation struct {
	pulumi.CustomResourceState

	// The universally unique identifier (UUID) of the configuration policy.
	PolicyId pulumi.StringOutput `pulumi:"policyId"`
	// The identifier of the target account, organizational unit, or the root to associate with the specified configuration.
	TargetId pulumi.StringOutput `pulumi:"targetId"`
}

// NewConfigurationPolicyAssociation registers a new resource with the given unique name, arguments, and options.
func NewConfigurationPolicyAssociation(ctx *pulumi.Context,
	name string, args *ConfigurationPolicyAssociationArgs, opts ...pulumi.ResourceOption) (*ConfigurationPolicyAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PolicyId == nil {
		return nil, errors.New("invalid value for required argument 'PolicyId'")
	}
	if args.TargetId == nil {
		return nil, errors.New("invalid value for required argument 'TargetId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ConfigurationPolicyAssociation
	err := ctx.RegisterResource("aws:securityhub/configurationPolicyAssociation:ConfigurationPolicyAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConfigurationPolicyAssociation gets an existing ConfigurationPolicyAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConfigurationPolicyAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConfigurationPolicyAssociationState, opts ...pulumi.ResourceOption) (*ConfigurationPolicyAssociation, error) {
	var resource ConfigurationPolicyAssociation
	err := ctx.ReadResource("aws:securityhub/configurationPolicyAssociation:ConfigurationPolicyAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConfigurationPolicyAssociation resources.
type configurationPolicyAssociationState struct {
	// The universally unique identifier (UUID) of the configuration policy.
	PolicyId *string `pulumi:"policyId"`
	// The identifier of the target account, organizational unit, or the root to associate with the specified configuration.
	TargetId *string `pulumi:"targetId"`
}

type ConfigurationPolicyAssociationState struct {
	// The universally unique identifier (UUID) of the configuration policy.
	PolicyId pulumi.StringPtrInput
	// The identifier of the target account, organizational unit, or the root to associate with the specified configuration.
	TargetId pulumi.StringPtrInput
}

func (ConfigurationPolicyAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*configurationPolicyAssociationState)(nil)).Elem()
}

type configurationPolicyAssociationArgs struct {
	// The universally unique identifier (UUID) of the configuration policy.
	PolicyId string `pulumi:"policyId"`
	// The identifier of the target account, organizational unit, or the root to associate with the specified configuration.
	TargetId string `pulumi:"targetId"`
}

// The set of arguments for constructing a ConfigurationPolicyAssociation resource.
type ConfigurationPolicyAssociationArgs struct {
	// The universally unique identifier (UUID) of the configuration policy.
	PolicyId pulumi.StringInput
	// The identifier of the target account, organizational unit, or the root to associate with the specified configuration.
	TargetId pulumi.StringInput
}

func (ConfigurationPolicyAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*configurationPolicyAssociationArgs)(nil)).Elem()
}

type ConfigurationPolicyAssociationInput interface {
	pulumi.Input

	ToConfigurationPolicyAssociationOutput() ConfigurationPolicyAssociationOutput
	ToConfigurationPolicyAssociationOutputWithContext(ctx context.Context) ConfigurationPolicyAssociationOutput
}

func (*ConfigurationPolicyAssociation) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigurationPolicyAssociation)(nil)).Elem()
}

func (i *ConfigurationPolicyAssociation) ToConfigurationPolicyAssociationOutput() ConfigurationPolicyAssociationOutput {
	return i.ToConfigurationPolicyAssociationOutputWithContext(context.Background())
}

func (i *ConfigurationPolicyAssociation) ToConfigurationPolicyAssociationOutputWithContext(ctx context.Context) ConfigurationPolicyAssociationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigurationPolicyAssociationOutput)
}

// ConfigurationPolicyAssociationArrayInput is an input type that accepts ConfigurationPolicyAssociationArray and ConfigurationPolicyAssociationArrayOutput values.
// You can construct a concrete instance of `ConfigurationPolicyAssociationArrayInput` via:
//
//	ConfigurationPolicyAssociationArray{ ConfigurationPolicyAssociationArgs{...} }
type ConfigurationPolicyAssociationArrayInput interface {
	pulumi.Input

	ToConfigurationPolicyAssociationArrayOutput() ConfigurationPolicyAssociationArrayOutput
	ToConfigurationPolicyAssociationArrayOutputWithContext(context.Context) ConfigurationPolicyAssociationArrayOutput
}

type ConfigurationPolicyAssociationArray []ConfigurationPolicyAssociationInput

func (ConfigurationPolicyAssociationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConfigurationPolicyAssociation)(nil)).Elem()
}

func (i ConfigurationPolicyAssociationArray) ToConfigurationPolicyAssociationArrayOutput() ConfigurationPolicyAssociationArrayOutput {
	return i.ToConfigurationPolicyAssociationArrayOutputWithContext(context.Background())
}

func (i ConfigurationPolicyAssociationArray) ToConfigurationPolicyAssociationArrayOutputWithContext(ctx context.Context) ConfigurationPolicyAssociationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigurationPolicyAssociationArrayOutput)
}

// ConfigurationPolicyAssociationMapInput is an input type that accepts ConfigurationPolicyAssociationMap and ConfigurationPolicyAssociationMapOutput values.
// You can construct a concrete instance of `ConfigurationPolicyAssociationMapInput` via:
//
//	ConfigurationPolicyAssociationMap{ "key": ConfigurationPolicyAssociationArgs{...} }
type ConfigurationPolicyAssociationMapInput interface {
	pulumi.Input

	ToConfigurationPolicyAssociationMapOutput() ConfigurationPolicyAssociationMapOutput
	ToConfigurationPolicyAssociationMapOutputWithContext(context.Context) ConfigurationPolicyAssociationMapOutput
}

type ConfigurationPolicyAssociationMap map[string]ConfigurationPolicyAssociationInput

func (ConfigurationPolicyAssociationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConfigurationPolicyAssociation)(nil)).Elem()
}

func (i ConfigurationPolicyAssociationMap) ToConfigurationPolicyAssociationMapOutput() ConfigurationPolicyAssociationMapOutput {
	return i.ToConfigurationPolicyAssociationMapOutputWithContext(context.Background())
}

func (i ConfigurationPolicyAssociationMap) ToConfigurationPolicyAssociationMapOutputWithContext(ctx context.Context) ConfigurationPolicyAssociationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigurationPolicyAssociationMapOutput)
}

type ConfigurationPolicyAssociationOutput struct{ *pulumi.OutputState }

func (ConfigurationPolicyAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigurationPolicyAssociation)(nil)).Elem()
}

func (o ConfigurationPolicyAssociationOutput) ToConfigurationPolicyAssociationOutput() ConfigurationPolicyAssociationOutput {
	return o
}

func (o ConfigurationPolicyAssociationOutput) ToConfigurationPolicyAssociationOutputWithContext(ctx context.Context) ConfigurationPolicyAssociationOutput {
	return o
}

// The universally unique identifier (UUID) of the configuration policy.
func (o ConfigurationPolicyAssociationOutput) PolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *ConfigurationPolicyAssociation) pulumi.StringOutput { return v.PolicyId }).(pulumi.StringOutput)
}

// The identifier of the target account, organizational unit, or the root to associate with the specified configuration.
func (o ConfigurationPolicyAssociationOutput) TargetId() pulumi.StringOutput {
	return o.ApplyT(func(v *ConfigurationPolicyAssociation) pulumi.StringOutput { return v.TargetId }).(pulumi.StringOutput)
}

type ConfigurationPolicyAssociationArrayOutput struct{ *pulumi.OutputState }

func (ConfigurationPolicyAssociationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConfigurationPolicyAssociation)(nil)).Elem()
}

func (o ConfigurationPolicyAssociationArrayOutput) ToConfigurationPolicyAssociationArrayOutput() ConfigurationPolicyAssociationArrayOutput {
	return o
}

func (o ConfigurationPolicyAssociationArrayOutput) ToConfigurationPolicyAssociationArrayOutputWithContext(ctx context.Context) ConfigurationPolicyAssociationArrayOutput {
	return o
}

func (o ConfigurationPolicyAssociationArrayOutput) Index(i pulumi.IntInput) ConfigurationPolicyAssociationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ConfigurationPolicyAssociation {
		return vs[0].([]*ConfigurationPolicyAssociation)[vs[1].(int)]
	}).(ConfigurationPolicyAssociationOutput)
}

type ConfigurationPolicyAssociationMapOutput struct{ *pulumi.OutputState }

func (ConfigurationPolicyAssociationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConfigurationPolicyAssociation)(nil)).Elem()
}

func (o ConfigurationPolicyAssociationMapOutput) ToConfigurationPolicyAssociationMapOutput() ConfigurationPolicyAssociationMapOutput {
	return o
}

func (o ConfigurationPolicyAssociationMapOutput) ToConfigurationPolicyAssociationMapOutputWithContext(ctx context.Context) ConfigurationPolicyAssociationMapOutput {
	return o
}

func (o ConfigurationPolicyAssociationMapOutput) MapIndex(k pulumi.StringInput) ConfigurationPolicyAssociationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ConfigurationPolicyAssociation {
		return vs[0].(map[string]*ConfigurationPolicyAssociation)[vs[1].(string)]
	}).(ConfigurationPolicyAssociationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigurationPolicyAssociationInput)(nil)).Elem(), &ConfigurationPolicyAssociation{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigurationPolicyAssociationArrayInput)(nil)).Elem(), ConfigurationPolicyAssociationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigurationPolicyAssociationMapInput)(nil)).Elem(), ConfigurationPolicyAssociationMap{})
	pulumi.RegisterOutputType(ConfigurationPolicyAssociationOutput{})
	pulumi.RegisterOutputType(ConfigurationPolicyAssociationArrayOutput{})
	pulumi.RegisterOutputType(ConfigurationPolicyAssociationMapOutput{})
}
