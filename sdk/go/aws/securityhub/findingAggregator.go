// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package securityhub

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type FindingAggregator struct {
	pulumi.CustomResourceState

	LinkingMode      pulumi.StringOutput      `pulumi:"linkingMode"`
	SpecifiedRegions pulumi.StringArrayOutput `pulumi:"specifiedRegions"`
}

// NewFindingAggregator registers a new resource with the given unique name, arguments, and options.
func NewFindingAggregator(ctx *pulumi.Context,
	name string, args *FindingAggregatorArgs, opts ...pulumi.ResourceOption) (*FindingAggregator, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LinkingMode == nil {
		return nil, errors.New("invalid value for required argument 'LinkingMode'")
	}
	var resource FindingAggregator
	err := ctx.RegisterResource("aws:securityhub/findingAggregator:FindingAggregator", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFindingAggregator gets an existing FindingAggregator resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFindingAggregator(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FindingAggregatorState, opts ...pulumi.ResourceOption) (*FindingAggregator, error) {
	var resource FindingAggregator
	err := ctx.ReadResource("aws:securityhub/findingAggregator:FindingAggregator", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FindingAggregator resources.
type findingAggregatorState struct {
	LinkingMode      *string  `pulumi:"linkingMode"`
	SpecifiedRegions []string `pulumi:"specifiedRegions"`
}

type FindingAggregatorState struct {
	LinkingMode      pulumi.StringPtrInput
	SpecifiedRegions pulumi.StringArrayInput
}

func (FindingAggregatorState) ElementType() reflect.Type {
	return reflect.TypeOf((*findingAggregatorState)(nil)).Elem()
}

type findingAggregatorArgs struct {
	LinkingMode      string   `pulumi:"linkingMode"`
	SpecifiedRegions []string `pulumi:"specifiedRegions"`
}

// The set of arguments for constructing a FindingAggregator resource.
type FindingAggregatorArgs struct {
	LinkingMode      pulumi.StringInput
	SpecifiedRegions pulumi.StringArrayInput
}

func (FindingAggregatorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*findingAggregatorArgs)(nil)).Elem()
}

type FindingAggregatorInput interface {
	pulumi.Input

	ToFindingAggregatorOutput() FindingAggregatorOutput
	ToFindingAggregatorOutputWithContext(ctx context.Context) FindingAggregatorOutput
}

func (*FindingAggregator) ElementType() reflect.Type {
	return reflect.TypeOf((**FindingAggregator)(nil)).Elem()
}

func (i *FindingAggregator) ToFindingAggregatorOutput() FindingAggregatorOutput {
	return i.ToFindingAggregatorOutputWithContext(context.Background())
}

func (i *FindingAggregator) ToFindingAggregatorOutputWithContext(ctx context.Context) FindingAggregatorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FindingAggregatorOutput)
}

// FindingAggregatorArrayInput is an input type that accepts FindingAggregatorArray and FindingAggregatorArrayOutput values.
// You can construct a concrete instance of `FindingAggregatorArrayInput` via:
//
//	FindingAggregatorArray{ FindingAggregatorArgs{...} }
type FindingAggregatorArrayInput interface {
	pulumi.Input

	ToFindingAggregatorArrayOutput() FindingAggregatorArrayOutput
	ToFindingAggregatorArrayOutputWithContext(context.Context) FindingAggregatorArrayOutput
}

type FindingAggregatorArray []FindingAggregatorInput

func (FindingAggregatorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FindingAggregator)(nil)).Elem()
}

func (i FindingAggregatorArray) ToFindingAggregatorArrayOutput() FindingAggregatorArrayOutput {
	return i.ToFindingAggregatorArrayOutputWithContext(context.Background())
}

func (i FindingAggregatorArray) ToFindingAggregatorArrayOutputWithContext(ctx context.Context) FindingAggregatorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FindingAggregatorArrayOutput)
}

// FindingAggregatorMapInput is an input type that accepts FindingAggregatorMap and FindingAggregatorMapOutput values.
// You can construct a concrete instance of `FindingAggregatorMapInput` via:
//
//	FindingAggregatorMap{ "key": FindingAggregatorArgs{...} }
type FindingAggregatorMapInput interface {
	pulumi.Input

	ToFindingAggregatorMapOutput() FindingAggregatorMapOutput
	ToFindingAggregatorMapOutputWithContext(context.Context) FindingAggregatorMapOutput
}

type FindingAggregatorMap map[string]FindingAggregatorInput

func (FindingAggregatorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FindingAggregator)(nil)).Elem()
}

func (i FindingAggregatorMap) ToFindingAggregatorMapOutput() FindingAggregatorMapOutput {
	return i.ToFindingAggregatorMapOutputWithContext(context.Background())
}

func (i FindingAggregatorMap) ToFindingAggregatorMapOutputWithContext(ctx context.Context) FindingAggregatorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FindingAggregatorMapOutput)
}

type FindingAggregatorOutput struct{ *pulumi.OutputState }

func (FindingAggregatorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FindingAggregator)(nil)).Elem()
}

func (o FindingAggregatorOutput) ToFindingAggregatorOutput() FindingAggregatorOutput {
	return o
}

func (o FindingAggregatorOutput) ToFindingAggregatorOutputWithContext(ctx context.Context) FindingAggregatorOutput {
	return o
}

func (o FindingAggregatorOutput) LinkingMode() pulumi.StringOutput {
	return o.ApplyT(func(v *FindingAggregator) pulumi.StringOutput { return v.LinkingMode }).(pulumi.StringOutput)
}

func (o FindingAggregatorOutput) SpecifiedRegions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FindingAggregator) pulumi.StringArrayOutput { return v.SpecifiedRegions }).(pulumi.StringArrayOutput)
}

type FindingAggregatorArrayOutput struct{ *pulumi.OutputState }

func (FindingAggregatorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FindingAggregator)(nil)).Elem()
}

func (o FindingAggregatorArrayOutput) ToFindingAggregatorArrayOutput() FindingAggregatorArrayOutput {
	return o
}

func (o FindingAggregatorArrayOutput) ToFindingAggregatorArrayOutputWithContext(ctx context.Context) FindingAggregatorArrayOutput {
	return o
}

func (o FindingAggregatorArrayOutput) Index(i pulumi.IntInput) FindingAggregatorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FindingAggregator {
		return vs[0].([]*FindingAggregator)[vs[1].(int)]
	}).(FindingAggregatorOutput)
}

type FindingAggregatorMapOutput struct{ *pulumi.OutputState }

func (FindingAggregatorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FindingAggregator)(nil)).Elem()
}

func (o FindingAggregatorMapOutput) ToFindingAggregatorMapOutput() FindingAggregatorMapOutput {
	return o
}

func (o FindingAggregatorMapOutput) ToFindingAggregatorMapOutputWithContext(ctx context.Context) FindingAggregatorMapOutput {
	return o
}

func (o FindingAggregatorMapOutput) MapIndex(k pulumi.StringInput) FindingAggregatorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FindingAggregator {
		return vs[0].(map[string]*FindingAggregator)[vs[1].(string)]
	}).(FindingAggregatorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FindingAggregatorInput)(nil)).Elem(), &FindingAggregator{})
	pulumi.RegisterInputType(reflect.TypeOf((*FindingAggregatorArrayInput)(nil)).Elem(), FindingAggregatorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FindingAggregatorMapInput)(nil)).Elem(), FindingAggregatorMap{})
	pulumi.RegisterOutputType(FindingAggregatorOutput{})
	pulumi.RegisterOutputType(FindingAggregatorArrayOutput{})
	pulumi.RegisterOutputType(FindingAggregatorMapOutput{})
}
