// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package securityhub

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Security Hub finding aggregator. Security Hub needs to be enabled in a region in order for the aggregator to pull through findings.
//
// ## Example Usage
// ### All Regions Usage
//
// The following example will enable the aggregator for every region.
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/securityhub"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		exampleAccount, err := securityhub.NewAccount(ctx, "exampleAccount", nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = securityhub.NewFindingAggregator(ctx, "exampleFindingAggregator", &securityhub.FindingAggregatorArgs{
// 			LinkingMode: pulumi.String("ALL_REGIONS"),
// 		}, pulumi.DependsOn([]pulumi.Resource{
// 			exampleAccount,
// 		}))
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ### All Regions Except Specified Regions Usage
//
// The following example will enable the aggregator for every region except those specified in `specifiedRegions`.
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/securityhub"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		exampleAccount, err := securityhub.NewAccount(ctx, "exampleAccount", nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = securityhub.NewFindingAggregator(ctx, "exampleFindingAggregator", &securityhub.FindingAggregatorArgs{
// 			LinkingMode: pulumi.String("ALL_REGIONS_EXCEPT_SPECIFIED"),
// 			SpecifiedRegions: pulumi.StringArray{
// 				pulumi.String("eu-west-1"),
// 				pulumi.String("eu-west-2"),
// 			},
// 		}, pulumi.DependsOn([]pulumi.Resource{
// 			exampleAccount,
// 		}))
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ### Specified Regions Usage
//
// The following example will enable the aggregator for every region specified in `specifiedRegions`.
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/securityhub"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		exampleAccount, err := securityhub.NewAccount(ctx, "exampleAccount", nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = securityhub.NewFindingAggregator(ctx, "exampleFindingAggregator", &securityhub.FindingAggregatorArgs{
// 			LinkingMode: pulumi.String("SPECIFIED_REGIONS"),
// 			SpecifiedRegions: pulumi.StringArray{
// 				pulumi.String("eu-west-1"),
// 				pulumi.String("eu-west-2"),
// 			},
// 		}, pulumi.DependsOn([]pulumi.Resource{
// 			exampleAccount,
// 		}))
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// An existing Security Hub finding aggregator can be imported using the `arn`, e.g.,
//
// ```sh
//  $ pulumi import aws:securityhub/findingAggregator:FindingAggregator example arn:aws:securityhub:eu-west-1:123456789098:finding-aggregator/abcd1234-abcd-1234-1234-abcdef123456
// ```
type FindingAggregator struct {
	pulumi.CustomResourceState

	// Indicates whether to aggregate findings from all of the available Regions or from a specified list. The options are `ALL_REGIONS`, `ALL_REGIONS_EXCEPT_SPECIFIED` or `SPECIFIED_REGIONS`. When `ALL_REGIONS` or `ALL_REGIONS_EXCEPT_SPECIFIED` are used, Security Hub will automatically aggregate findings from new Regions as Security Hub supports them and you opt into them.
	LinkingMode pulumi.StringOutput `pulumi:"linkingMode"`
	// List of regions to include or exclude (required if `linkingMode` is set to `ALL_REGIONS_EXCEPT_SPECIFIED` or `SPECIFIED_REGIONS`)
	SpecifiedRegions pulumi.StringArrayOutput `pulumi:"specifiedRegions"`
}

// NewFindingAggregator registers a new resource with the given unique name, arguments, and options.
func NewFindingAggregator(ctx *pulumi.Context,
	name string, args *FindingAggregatorArgs, opts ...pulumi.ResourceOption) (*FindingAggregator, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LinkingMode == nil {
		return nil, errors.New("invalid value for required argument 'LinkingMode'")
	}
	var resource FindingAggregator
	err := ctx.RegisterResource("aws:securityhub/findingAggregator:FindingAggregator", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFindingAggregator gets an existing FindingAggregator resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFindingAggregator(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FindingAggregatorState, opts ...pulumi.ResourceOption) (*FindingAggregator, error) {
	var resource FindingAggregator
	err := ctx.ReadResource("aws:securityhub/findingAggregator:FindingAggregator", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FindingAggregator resources.
type findingAggregatorState struct {
	// Indicates whether to aggregate findings from all of the available Regions or from a specified list. The options are `ALL_REGIONS`, `ALL_REGIONS_EXCEPT_SPECIFIED` or `SPECIFIED_REGIONS`. When `ALL_REGIONS` or `ALL_REGIONS_EXCEPT_SPECIFIED` are used, Security Hub will automatically aggregate findings from new Regions as Security Hub supports them and you opt into them.
	LinkingMode *string `pulumi:"linkingMode"`
	// List of regions to include or exclude (required if `linkingMode` is set to `ALL_REGIONS_EXCEPT_SPECIFIED` or `SPECIFIED_REGIONS`)
	SpecifiedRegions []string `pulumi:"specifiedRegions"`
}

type FindingAggregatorState struct {
	// Indicates whether to aggregate findings from all of the available Regions or from a specified list. The options are `ALL_REGIONS`, `ALL_REGIONS_EXCEPT_SPECIFIED` or `SPECIFIED_REGIONS`. When `ALL_REGIONS` or `ALL_REGIONS_EXCEPT_SPECIFIED` are used, Security Hub will automatically aggregate findings from new Regions as Security Hub supports them and you opt into them.
	LinkingMode pulumi.StringPtrInput
	// List of regions to include or exclude (required if `linkingMode` is set to `ALL_REGIONS_EXCEPT_SPECIFIED` or `SPECIFIED_REGIONS`)
	SpecifiedRegions pulumi.StringArrayInput
}

func (FindingAggregatorState) ElementType() reflect.Type {
	return reflect.TypeOf((*findingAggregatorState)(nil)).Elem()
}

type findingAggregatorArgs struct {
	// Indicates whether to aggregate findings from all of the available Regions or from a specified list. The options are `ALL_REGIONS`, `ALL_REGIONS_EXCEPT_SPECIFIED` or `SPECIFIED_REGIONS`. When `ALL_REGIONS` or `ALL_REGIONS_EXCEPT_SPECIFIED` are used, Security Hub will automatically aggregate findings from new Regions as Security Hub supports them and you opt into them.
	LinkingMode string `pulumi:"linkingMode"`
	// List of regions to include or exclude (required if `linkingMode` is set to `ALL_REGIONS_EXCEPT_SPECIFIED` or `SPECIFIED_REGIONS`)
	SpecifiedRegions []string `pulumi:"specifiedRegions"`
}

// The set of arguments for constructing a FindingAggregator resource.
type FindingAggregatorArgs struct {
	// Indicates whether to aggregate findings from all of the available Regions or from a specified list. The options are `ALL_REGIONS`, `ALL_REGIONS_EXCEPT_SPECIFIED` or `SPECIFIED_REGIONS`. When `ALL_REGIONS` or `ALL_REGIONS_EXCEPT_SPECIFIED` are used, Security Hub will automatically aggregate findings from new Regions as Security Hub supports them and you opt into them.
	LinkingMode pulumi.StringInput
	// List of regions to include or exclude (required if `linkingMode` is set to `ALL_REGIONS_EXCEPT_SPECIFIED` or `SPECIFIED_REGIONS`)
	SpecifiedRegions pulumi.StringArrayInput
}

func (FindingAggregatorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*findingAggregatorArgs)(nil)).Elem()
}

type FindingAggregatorInput interface {
	pulumi.Input

	ToFindingAggregatorOutput() FindingAggregatorOutput
	ToFindingAggregatorOutputWithContext(ctx context.Context) FindingAggregatorOutput
}

func (*FindingAggregator) ElementType() reflect.Type {
	return reflect.TypeOf((**FindingAggregator)(nil)).Elem()
}

func (i *FindingAggregator) ToFindingAggregatorOutput() FindingAggregatorOutput {
	return i.ToFindingAggregatorOutputWithContext(context.Background())
}

func (i *FindingAggregator) ToFindingAggregatorOutputWithContext(ctx context.Context) FindingAggregatorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FindingAggregatorOutput)
}

// FindingAggregatorArrayInput is an input type that accepts FindingAggregatorArray and FindingAggregatorArrayOutput values.
// You can construct a concrete instance of `FindingAggregatorArrayInput` via:
//
//          FindingAggregatorArray{ FindingAggregatorArgs{...} }
type FindingAggregatorArrayInput interface {
	pulumi.Input

	ToFindingAggregatorArrayOutput() FindingAggregatorArrayOutput
	ToFindingAggregatorArrayOutputWithContext(context.Context) FindingAggregatorArrayOutput
}

type FindingAggregatorArray []FindingAggregatorInput

func (FindingAggregatorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FindingAggregator)(nil)).Elem()
}

func (i FindingAggregatorArray) ToFindingAggregatorArrayOutput() FindingAggregatorArrayOutput {
	return i.ToFindingAggregatorArrayOutputWithContext(context.Background())
}

func (i FindingAggregatorArray) ToFindingAggregatorArrayOutputWithContext(ctx context.Context) FindingAggregatorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FindingAggregatorArrayOutput)
}

// FindingAggregatorMapInput is an input type that accepts FindingAggregatorMap and FindingAggregatorMapOutput values.
// You can construct a concrete instance of `FindingAggregatorMapInput` via:
//
//          FindingAggregatorMap{ "key": FindingAggregatorArgs{...} }
type FindingAggregatorMapInput interface {
	pulumi.Input

	ToFindingAggregatorMapOutput() FindingAggregatorMapOutput
	ToFindingAggregatorMapOutputWithContext(context.Context) FindingAggregatorMapOutput
}

type FindingAggregatorMap map[string]FindingAggregatorInput

func (FindingAggregatorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FindingAggregator)(nil)).Elem()
}

func (i FindingAggregatorMap) ToFindingAggregatorMapOutput() FindingAggregatorMapOutput {
	return i.ToFindingAggregatorMapOutputWithContext(context.Background())
}

func (i FindingAggregatorMap) ToFindingAggregatorMapOutputWithContext(ctx context.Context) FindingAggregatorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FindingAggregatorMapOutput)
}

type FindingAggregatorOutput struct{ *pulumi.OutputState }

func (FindingAggregatorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FindingAggregator)(nil)).Elem()
}

func (o FindingAggregatorOutput) ToFindingAggregatorOutput() FindingAggregatorOutput {
	return o
}

func (o FindingAggregatorOutput) ToFindingAggregatorOutputWithContext(ctx context.Context) FindingAggregatorOutput {
	return o
}

type FindingAggregatorArrayOutput struct{ *pulumi.OutputState }

func (FindingAggregatorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FindingAggregator)(nil)).Elem()
}

func (o FindingAggregatorArrayOutput) ToFindingAggregatorArrayOutput() FindingAggregatorArrayOutput {
	return o
}

func (o FindingAggregatorArrayOutput) ToFindingAggregatorArrayOutputWithContext(ctx context.Context) FindingAggregatorArrayOutput {
	return o
}

func (o FindingAggregatorArrayOutput) Index(i pulumi.IntInput) FindingAggregatorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FindingAggregator {
		return vs[0].([]*FindingAggregator)[vs[1].(int)]
	}).(FindingAggregatorOutput)
}

type FindingAggregatorMapOutput struct{ *pulumi.OutputState }

func (FindingAggregatorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FindingAggregator)(nil)).Elem()
}

func (o FindingAggregatorMapOutput) ToFindingAggregatorMapOutput() FindingAggregatorMapOutput {
	return o
}

func (o FindingAggregatorMapOutput) ToFindingAggregatorMapOutputWithContext(ctx context.Context) FindingAggregatorMapOutput {
	return o
}

func (o FindingAggregatorMapOutput) MapIndex(k pulumi.StringInput) FindingAggregatorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FindingAggregator {
		return vs[0].(map[string]*FindingAggregator)[vs[1].(string)]
	}).(FindingAggregatorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FindingAggregatorInput)(nil)).Elem(), &FindingAggregator{})
	pulumi.RegisterInputType(reflect.TypeOf((*FindingAggregatorArrayInput)(nil)).Elem(), FindingAggregatorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FindingAggregatorMapInput)(nil)).Elem(), FindingAggregatorMap{})
	pulumi.RegisterOutputType(FindingAggregatorOutput{})
	pulumi.RegisterOutputType(FindingAggregatorArrayOutput{})
	pulumi.RegisterOutputType(FindingAggregatorMapOutput{})
}
