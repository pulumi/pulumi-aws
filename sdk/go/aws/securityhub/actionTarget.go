// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package securityhub

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Creates Security Hub custom action.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/securityhub"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleAccount, err := securityhub.NewAccount(ctx, "exampleAccount", nil)
//			if err != nil {
//				return err
//			}
//			_, err = securityhub.NewActionTarget(ctx, "exampleActionTarget", &securityhub.ActionTargetArgs{
//				Identifier:  pulumi.String("SendToChat"),
//				Description: pulumi.String("This is custom action sends selected findings to chat"),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				exampleAccount,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import Security Hub custom action using the action target ARN. For example:
//
// ```sh
//
//	$ pulumi import aws:securityhub/actionTarget:ActionTarget example arn:aws:securityhub:eu-west-1:312940875350:action/custom/a
//
// ```
type ActionTarget struct {
	pulumi.CustomResourceState

	// Amazon Resource Name (ARN) of the Security Hub custom action target.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The name of the custom action target.
	Description pulumi.StringOutput `pulumi:"description"`
	// The ID for the custom action target.
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// The description for the custom action target.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewActionTarget registers a new resource with the given unique name, arguments, and options.
func NewActionTarget(ctx *pulumi.Context,
	name string, args *ActionTargetArgs, opts ...pulumi.ResourceOption) (*ActionTarget, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.Identifier == nil {
		return nil, errors.New("invalid value for required argument 'Identifier'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ActionTarget
	err := ctx.RegisterResource("aws:securityhub/actionTarget:ActionTarget", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetActionTarget gets an existing ActionTarget resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetActionTarget(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ActionTargetState, opts ...pulumi.ResourceOption) (*ActionTarget, error) {
	var resource ActionTarget
	err := ctx.ReadResource("aws:securityhub/actionTarget:ActionTarget", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ActionTarget resources.
type actionTargetState struct {
	// Amazon Resource Name (ARN) of the Security Hub custom action target.
	Arn *string `pulumi:"arn"`
	// The name of the custom action target.
	Description *string `pulumi:"description"`
	// The ID for the custom action target.
	Identifier *string `pulumi:"identifier"`
	// The description for the custom action target.
	Name *string `pulumi:"name"`
}

type ActionTargetState struct {
	// Amazon Resource Name (ARN) of the Security Hub custom action target.
	Arn pulumi.StringPtrInput
	// The name of the custom action target.
	Description pulumi.StringPtrInput
	// The ID for the custom action target.
	Identifier pulumi.StringPtrInput
	// The description for the custom action target.
	Name pulumi.StringPtrInput
}

func (ActionTargetState) ElementType() reflect.Type {
	return reflect.TypeOf((*actionTargetState)(nil)).Elem()
}

type actionTargetArgs struct {
	// The name of the custom action target.
	Description string `pulumi:"description"`
	// The ID for the custom action target.
	Identifier string `pulumi:"identifier"`
	// The description for the custom action target.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a ActionTarget resource.
type ActionTargetArgs struct {
	// The name of the custom action target.
	Description pulumi.StringInput
	// The ID for the custom action target.
	Identifier pulumi.StringInput
	// The description for the custom action target.
	Name pulumi.StringPtrInput
}

func (ActionTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*actionTargetArgs)(nil)).Elem()
}

type ActionTargetInput interface {
	pulumi.Input

	ToActionTargetOutput() ActionTargetOutput
	ToActionTargetOutputWithContext(ctx context.Context) ActionTargetOutput
}

func (*ActionTarget) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionTarget)(nil)).Elem()
}

func (i *ActionTarget) ToActionTargetOutput() ActionTargetOutput {
	return i.ToActionTargetOutputWithContext(context.Background())
}

func (i *ActionTarget) ToActionTargetOutputWithContext(ctx context.Context) ActionTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionTargetOutput)
}

func (i *ActionTarget) ToOutput(ctx context.Context) pulumix.Output[*ActionTarget] {
	return pulumix.Output[*ActionTarget]{
		OutputState: i.ToActionTargetOutputWithContext(ctx).OutputState,
	}
}

// ActionTargetArrayInput is an input type that accepts ActionTargetArray and ActionTargetArrayOutput values.
// You can construct a concrete instance of `ActionTargetArrayInput` via:
//
//	ActionTargetArray{ ActionTargetArgs{...} }
type ActionTargetArrayInput interface {
	pulumi.Input

	ToActionTargetArrayOutput() ActionTargetArrayOutput
	ToActionTargetArrayOutputWithContext(context.Context) ActionTargetArrayOutput
}

type ActionTargetArray []ActionTargetInput

func (ActionTargetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ActionTarget)(nil)).Elem()
}

func (i ActionTargetArray) ToActionTargetArrayOutput() ActionTargetArrayOutput {
	return i.ToActionTargetArrayOutputWithContext(context.Background())
}

func (i ActionTargetArray) ToActionTargetArrayOutputWithContext(ctx context.Context) ActionTargetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionTargetArrayOutput)
}

func (i ActionTargetArray) ToOutput(ctx context.Context) pulumix.Output[[]*ActionTarget] {
	return pulumix.Output[[]*ActionTarget]{
		OutputState: i.ToActionTargetArrayOutputWithContext(ctx).OutputState,
	}
}

// ActionTargetMapInput is an input type that accepts ActionTargetMap and ActionTargetMapOutput values.
// You can construct a concrete instance of `ActionTargetMapInput` via:
//
//	ActionTargetMap{ "key": ActionTargetArgs{...} }
type ActionTargetMapInput interface {
	pulumi.Input

	ToActionTargetMapOutput() ActionTargetMapOutput
	ToActionTargetMapOutputWithContext(context.Context) ActionTargetMapOutput
}

type ActionTargetMap map[string]ActionTargetInput

func (ActionTargetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ActionTarget)(nil)).Elem()
}

func (i ActionTargetMap) ToActionTargetMapOutput() ActionTargetMapOutput {
	return i.ToActionTargetMapOutputWithContext(context.Background())
}

func (i ActionTargetMap) ToActionTargetMapOutputWithContext(ctx context.Context) ActionTargetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionTargetMapOutput)
}

func (i ActionTargetMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*ActionTarget] {
	return pulumix.Output[map[string]*ActionTarget]{
		OutputState: i.ToActionTargetMapOutputWithContext(ctx).OutputState,
	}
}

type ActionTargetOutput struct{ *pulumi.OutputState }

func (ActionTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionTarget)(nil)).Elem()
}

func (o ActionTargetOutput) ToActionTargetOutput() ActionTargetOutput {
	return o
}

func (o ActionTargetOutput) ToActionTargetOutputWithContext(ctx context.Context) ActionTargetOutput {
	return o
}

func (o ActionTargetOutput) ToOutput(ctx context.Context) pulumix.Output[*ActionTarget] {
	return pulumix.Output[*ActionTarget]{
		OutputState: o.OutputState,
	}
}

// Amazon Resource Name (ARN) of the Security Hub custom action target.
func (o ActionTargetOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *ActionTarget) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The name of the custom action target.
func (o ActionTargetOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *ActionTarget) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The ID for the custom action target.
func (o ActionTargetOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *ActionTarget) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// The description for the custom action target.
func (o ActionTargetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ActionTarget) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type ActionTargetArrayOutput struct{ *pulumi.OutputState }

func (ActionTargetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ActionTarget)(nil)).Elem()
}

func (o ActionTargetArrayOutput) ToActionTargetArrayOutput() ActionTargetArrayOutput {
	return o
}

func (o ActionTargetArrayOutput) ToActionTargetArrayOutputWithContext(ctx context.Context) ActionTargetArrayOutput {
	return o
}

func (o ActionTargetArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*ActionTarget] {
	return pulumix.Output[[]*ActionTarget]{
		OutputState: o.OutputState,
	}
}

func (o ActionTargetArrayOutput) Index(i pulumi.IntInput) ActionTargetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ActionTarget {
		return vs[0].([]*ActionTarget)[vs[1].(int)]
	}).(ActionTargetOutput)
}

type ActionTargetMapOutput struct{ *pulumi.OutputState }

func (ActionTargetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ActionTarget)(nil)).Elem()
}

func (o ActionTargetMapOutput) ToActionTargetMapOutput() ActionTargetMapOutput {
	return o
}

func (o ActionTargetMapOutput) ToActionTargetMapOutputWithContext(ctx context.Context) ActionTargetMapOutput {
	return o
}

func (o ActionTargetMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*ActionTarget] {
	return pulumix.Output[map[string]*ActionTarget]{
		OutputState: o.OutputState,
	}
}

func (o ActionTargetMapOutput) MapIndex(k pulumi.StringInput) ActionTargetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ActionTarget {
		return vs[0].(map[string]*ActionTarget)[vs[1].(string)]
	}).(ActionTargetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ActionTargetInput)(nil)).Elem(), &ActionTarget{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionTargetArrayInput)(nil)).Elem(), ActionTargetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionTargetMapInput)(nil)).Elem(), ActionTargetMap{})
	pulumi.RegisterOutputType(ActionTargetOutput{})
	pulumi.RegisterOutputType(ActionTargetArrayOutput{})
	pulumi.RegisterOutputType(ActionTargetMapOutput{})
}
