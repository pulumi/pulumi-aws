// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package securityhub

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ### Basic usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/securityhub"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := securityhub.NewAccount(ctx, "example", nil)
//			if err != nil {
//				return err
//			}
//			cisAwsFoundationsBenchmark, err := securityhub.NewStandardsSubscription(ctx, "cis_aws_foundations_benchmark", &securityhub.StandardsSubscriptionArgs{
//				StandardsArn: pulumi.String("arn:aws:securityhub:::ruleset/cis-aws-foundations-benchmark/v/1.2.0"),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				example,
//			}))
//			if err != nil {
//				return err
//			}
//			_, err = securityhub.NewStandardsControlAssociation(ctx, "cis_aws_foundations_benchmark_disable_iam_1", &securityhub.StandardsControlAssociationArgs{
//				StandardsArn:      cisAwsFoundationsBenchmark.StandardsArn,
//				SecurityControlId: pulumi.String("IAM.1"),
//				AssociationStatus: pulumi.String("DISABLED"),
//				UpdatedReason:     pulumi.String("Not needed"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type StandardsControlAssociation struct {
	pulumi.CustomResourceState

	// The desired enablement status of the control in the standard. Valid values: `ENABLED`, `DISABLED`.
	AssociationStatus pulumi.StringOutput `pulumi:"associationStatus"`
	// The unique identifier for the security control whose enablement status you want to update.
	SecurityControlId pulumi.StringOutput `pulumi:"securityControlId"`
	// The Amazon Resource Name (ARN) of the standard in which you want to update the control's enablement status.
	//
	// The following arguments are optional:
	StandardsArn pulumi.StringOutput `pulumi:"standardsArn"`
	// The reason for updating the control's enablement status in the standard. Required when `associationStatus` is `DISABLED`.
	UpdatedReason pulumi.StringPtrOutput `pulumi:"updatedReason"`
}

// NewStandardsControlAssociation registers a new resource with the given unique name, arguments, and options.
func NewStandardsControlAssociation(ctx *pulumi.Context,
	name string, args *StandardsControlAssociationArgs, opts ...pulumi.ResourceOption) (*StandardsControlAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AssociationStatus == nil {
		return nil, errors.New("invalid value for required argument 'AssociationStatus'")
	}
	if args.SecurityControlId == nil {
		return nil, errors.New("invalid value for required argument 'SecurityControlId'")
	}
	if args.StandardsArn == nil {
		return nil, errors.New("invalid value for required argument 'StandardsArn'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource StandardsControlAssociation
	err := ctx.RegisterResource("aws:securityhub/standardsControlAssociation:StandardsControlAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStandardsControlAssociation gets an existing StandardsControlAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStandardsControlAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StandardsControlAssociationState, opts ...pulumi.ResourceOption) (*StandardsControlAssociation, error) {
	var resource StandardsControlAssociation
	err := ctx.ReadResource("aws:securityhub/standardsControlAssociation:StandardsControlAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StandardsControlAssociation resources.
type standardsControlAssociationState struct {
	// The desired enablement status of the control in the standard. Valid values: `ENABLED`, `DISABLED`.
	AssociationStatus *string `pulumi:"associationStatus"`
	// The unique identifier for the security control whose enablement status you want to update.
	SecurityControlId *string `pulumi:"securityControlId"`
	// The Amazon Resource Name (ARN) of the standard in which you want to update the control's enablement status.
	//
	// The following arguments are optional:
	StandardsArn *string `pulumi:"standardsArn"`
	// The reason for updating the control's enablement status in the standard. Required when `associationStatus` is `DISABLED`.
	UpdatedReason *string `pulumi:"updatedReason"`
}

type StandardsControlAssociationState struct {
	// The desired enablement status of the control in the standard. Valid values: `ENABLED`, `DISABLED`.
	AssociationStatus pulumi.StringPtrInput
	// The unique identifier for the security control whose enablement status you want to update.
	SecurityControlId pulumi.StringPtrInput
	// The Amazon Resource Name (ARN) of the standard in which you want to update the control's enablement status.
	//
	// The following arguments are optional:
	StandardsArn pulumi.StringPtrInput
	// The reason for updating the control's enablement status in the standard. Required when `associationStatus` is `DISABLED`.
	UpdatedReason pulumi.StringPtrInput
}

func (StandardsControlAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*standardsControlAssociationState)(nil)).Elem()
}

type standardsControlAssociationArgs struct {
	// The desired enablement status of the control in the standard. Valid values: `ENABLED`, `DISABLED`.
	AssociationStatus string `pulumi:"associationStatus"`
	// The unique identifier for the security control whose enablement status you want to update.
	SecurityControlId string `pulumi:"securityControlId"`
	// The Amazon Resource Name (ARN) of the standard in which you want to update the control's enablement status.
	//
	// The following arguments are optional:
	StandardsArn string `pulumi:"standardsArn"`
	// The reason for updating the control's enablement status in the standard. Required when `associationStatus` is `DISABLED`.
	UpdatedReason *string `pulumi:"updatedReason"`
}

// The set of arguments for constructing a StandardsControlAssociation resource.
type StandardsControlAssociationArgs struct {
	// The desired enablement status of the control in the standard. Valid values: `ENABLED`, `DISABLED`.
	AssociationStatus pulumi.StringInput
	// The unique identifier for the security control whose enablement status you want to update.
	SecurityControlId pulumi.StringInput
	// The Amazon Resource Name (ARN) of the standard in which you want to update the control's enablement status.
	//
	// The following arguments are optional:
	StandardsArn pulumi.StringInput
	// The reason for updating the control's enablement status in the standard. Required when `associationStatus` is `DISABLED`.
	UpdatedReason pulumi.StringPtrInput
}

func (StandardsControlAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*standardsControlAssociationArgs)(nil)).Elem()
}

type StandardsControlAssociationInput interface {
	pulumi.Input

	ToStandardsControlAssociationOutput() StandardsControlAssociationOutput
	ToStandardsControlAssociationOutputWithContext(ctx context.Context) StandardsControlAssociationOutput
}

func (*StandardsControlAssociation) ElementType() reflect.Type {
	return reflect.TypeOf((**StandardsControlAssociation)(nil)).Elem()
}

func (i *StandardsControlAssociation) ToStandardsControlAssociationOutput() StandardsControlAssociationOutput {
	return i.ToStandardsControlAssociationOutputWithContext(context.Background())
}

func (i *StandardsControlAssociation) ToStandardsControlAssociationOutputWithContext(ctx context.Context) StandardsControlAssociationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StandardsControlAssociationOutput)
}

// StandardsControlAssociationArrayInput is an input type that accepts StandardsControlAssociationArray and StandardsControlAssociationArrayOutput values.
// You can construct a concrete instance of `StandardsControlAssociationArrayInput` via:
//
//	StandardsControlAssociationArray{ StandardsControlAssociationArgs{...} }
type StandardsControlAssociationArrayInput interface {
	pulumi.Input

	ToStandardsControlAssociationArrayOutput() StandardsControlAssociationArrayOutput
	ToStandardsControlAssociationArrayOutputWithContext(context.Context) StandardsControlAssociationArrayOutput
}

type StandardsControlAssociationArray []StandardsControlAssociationInput

func (StandardsControlAssociationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StandardsControlAssociation)(nil)).Elem()
}

func (i StandardsControlAssociationArray) ToStandardsControlAssociationArrayOutput() StandardsControlAssociationArrayOutput {
	return i.ToStandardsControlAssociationArrayOutputWithContext(context.Background())
}

func (i StandardsControlAssociationArray) ToStandardsControlAssociationArrayOutputWithContext(ctx context.Context) StandardsControlAssociationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StandardsControlAssociationArrayOutput)
}

// StandardsControlAssociationMapInput is an input type that accepts StandardsControlAssociationMap and StandardsControlAssociationMapOutput values.
// You can construct a concrete instance of `StandardsControlAssociationMapInput` via:
//
//	StandardsControlAssociationMap{ "key": StandardsControlAssociationArgs{...} }
type StandardsControlAssociationMapInput interface {
	pulumi.Input

	ToStandardsControlAssociationMapOutput() StandardsControlAssociationMapOutput
	ToStandardsControlAssociationMapOutputWithContext(context.Context) StandardsControlAssociationMapOutput
}

type StandardsControlAssociationMap map[string]StandardsControlAssociationInput

func (StandardsControlAssociationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StandardsControlAssociation)(nil)).Elem()
}

func (i StandardsControlAssociationMap) ToStandardsControlAssociationMapOutput() StandardsControlAssociationMapOutput {
	return i.ToStandardsControlAssociationMapOutputWithContext(context.Background())
}

func (i StandardsControlAssociationMap) ToStandardsControlAssociationMapOutputWithContext(ctx context.Context) StandardsControlAssociationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StandardsControlAssociationMapOutput)
}

type StandardsControlAssociationOutput struct{ *pulumi.OutputState }

func (StandardsControlAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StandardsControlAssociation)(nil)).Elem()
}

func (o StandardsControlAssociationOutput) ToStandardsControlAssociationOutput() StandardsControlAssociationOutput {
	return o
}

func (o StandardsControlAssociationOutput) ToStandardsControlAssociationOutputWithContext(ctx context.Context) StandardsControlAssociationOutput {
	return o
}

// The desired enablement status of the control in the standard. Valid values: `ENABLED`, `DISABLED`.
func (o StandardsControlAssociationOutput) AssociationStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *StandardsControlAssociation) pulumi.StringOutput { return v.AssociationStatus }).(pulumi.StringOutput)
}

// The unique identifier for the security control whose enablement status you want to update.
func (o StandardsControlAssociationOutput) SecurityControlId() pulumi.StringOutput {
	return o.ApplyT(func(v *StandardsControlAssociation) pulumi.StringOutput { return v.SecurityControlId }).(pulumi.StringOutput)
}

// The Amazon Resource Name (ARN) of the standard in which you want to update the control's enablement status.
//
// The following arguments are optional:
func (o StandardsControlAssociationOutput) StandardsArn() pulumi.StringOutput {
	return o.ApplyT(func(v *StandardsControlAssociation) pulumi.StringOutput { return v.StandardsArn }).(pulumi.StringOutput)
}

// The reason for updating the control's enablement status in the standard. Required when `associationStatus` is `DISABLED`.
func (o StandardsControlAssociationOutput) UpdatedReason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StandardsControlAssociation) pulumi.StringPtrOutput { return v.UpdatedReason }).(pulumi.StringPtrOutput)
}

type StandardsControlAssociationArrayOutput struct{ *pulumi.OutputState }

func (StandardsControlAssociationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StandardsControlAssociation)(nil)).Elem()
}

func (o StandardsControlAssociationArrayOutput) ToStandardsControlAssociationArrayOutput() StandardsControlAssociationArrayOutput {
	return o
}

func (o StandardsControlAssociationArrayOutput) ToStandardsControlAssociationArrayOutputWithContext(ctx context.Context) StandardsControlAssociationArrayOutput {
	return o
}

func (o StandardsControlAssociationArrayOutput) Index(i pulumi.IntInput) StandardsControlAssociationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *StandardsControlAssociation {
		return vs[0].([]*StandardsControlAssociation)[vs[1].(int)]
	}).(StandardsControlAssociationOutput)
}

type StandardsControlAssociationMapOutput struct{ *pulumi.OutputState }

func (StandardsControlAssociationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StandardsControlAssociation)(nil)).Elem()
}

func (o StandardsControlAssociationMapOutput) ToStandardsControlAssociationMapOutput() StandardsControlAssociationMapOutput {
	return o
}

func (o StandardsControlAssociationMapOutput) ToStandardsControlAssociationMapOutputWithContext(ctx context.Context) StandardsControlAssociationMapOutput {
	return o
}

func (o StandardsControlAssociationMapOutput) MapIndex(k pulumi.StringInput) StandardsControlAssociationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *StandardsControlAssociation {
		return vs[0].(map[string]*StandardsControlAssociation)[vs[1].(string)]
	}).(StandardsControlAssociationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StandardsControlAssociationInput)(nil)).Elem(), &StandardsControlAssociation{})
	pulumi.RegisterInputType(reflect.TypeOf((*StandardsControlAssociationArrayInput)(nil)).Elem(), StandardsControlAssociationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StandardsControlAssociationMapInput)(nil)).Elem(), StandardsControlAssociationMap{})
	pulumi.RegisterOutputType(StandardsControlAssociationOutput{})
	pulumi.RegisterOutputType(StandardsControlAssociationArrayOutput{})
	pulumi.RegisterOutputType(StandardsControlAssociationMapOutput{})
}
