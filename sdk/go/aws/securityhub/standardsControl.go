// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package securityhub

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type StandardsControl struct {
	pulumi.CustomResourceState

	// The identifier of the security standard control.
	ControlId pulumi.StringOutput `pulumi:"controlId"`
	// The control status could be `ENABLED` or `DISABLED`. You have to specify `disabledReason` argument for `DISABLED` control status.
	ControlStatus pulumi.StringOutput `pulumi:"controlStatus"`
	// The date and time that the status of the security standard control was most recently updated.
	ControlStatusUpdatedAt pulumi.StringOutput `pulumi:"controlStatusUpdatedAt"`
	// The standard control longer description. Provides information about what the control is checking for.
	Description pulumi.StringOutput `pulumi:"description"`
	// A description of the reason why you are disabling a security standard control. If you specify this attribute, `controlStatus` will be set to `DISABLED` automatically.
	DisabledReason pulumi.StringOutput `pulumi:"disabledReason"`
	// The list of requirements that are related to this control.
	RelatedRequirements pulumi.StringArrayOutput `pulumi:"relatedRequirements"`
	// A link to remediation information for the control in the Security Hub user documentation.
	RemediationUrl pulumi.StringOutput `pulumi:"remediationUrl"`
	// The severity of findings generated from this security standard control.
	SeverityRating pulumi.StringOutput `pulumi:"severityRating"`
	// The standards control ARN.
	StandardsControlArn pulumi.StringOutput `pulumi:"standardsControlArn"`
	// The standard control title.
	Title pulumi.StringOutput `pulumi:"title"`
}

// NewStandardsControl registers a new resource with the given unique name, arguments, and options.
func NewStandardsControl(ctx *pulumi.Context,
	name string, args *StandardsControlArgs, opts ...pulumi.ResourceOption) (*StandardsControl, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ControlStatus == nil {
		return nil, errors.New("invalid value for required argument 'ControlStatus'")
	}
	if args.StandardsControlArn == nil {
		return nil, errors.New("invalid value for required argument 'StandardsControlArn'")
	}
	var resource StandardsControl
	err := ctx.RegisterResource("aws:securityhub/standardsControl:StandardsControl", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStandardsControl gets an existing StandardsControl resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStandardsControl(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StandardsControlState, opts ...pulumi.ResourceOption) (*StandardsControl, error) {
	var resource StandardsControl
	err := ctx.ReadResource("aws:securityhub/standardsControl:StandardsControl", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StandardsControl resources.
type standardsControlState struct {
	// The identifier of the security standard control.
	ControlId *string `pulumi:"controlId"`
	// The control status could be `ENABLED` or `DISABLED`. You have to specify `disabledReason` argument for `DISABLED` control status.
	ControlStatus *string `pulumi:"controlStatus"`
	// The date and time that the status of the security standard control was most recently updated.
	ControlStatusUpdatedAt *string `pulumi:"controlStatusUpdatedAt"`
	// The standard control longer description. Provides information about what the control is checking for.
	Description *string `pulumi:"description"`
	// A description of the reason why you are disabling a security standard control. If you specify this attribute, `controlStatus` will be set to `DISABLED` automatically.
	DisabledReason *string `pulumi:"disabledReason"`
	// The list of requirements that are related to this control.
	RelatedRequirements []string `pulumi:"relatedRequirements"`
	// A link to remediation information for the control in the Security Hub user documentation.
	RemediationUrl *string `pulumi:"remediationUrl"`
	// The severity of findings generated from this security standard control.
	SeverityRating *string `pulumi:"severityRating"`
	// The standards control ARN.
	StandardsControlArn *string `pulumi:"standardsControlArn"`
	// The standard control title.
	Title *string `pulumi:"title"`
}

type StandardsControlState struct {
	// The identifier of the security standard control.
	ControlId pulumi.StringPtrInput
	// The control status could be `ENABLED` or `DISABLED`. You have to specify `disabledReason` argument for `DISABLED` control status.
	ControlStatus pulumi.StringPtrInput
	// The date and time that the status of the security standard control was most recently updated.
	ControlStatusUpdatedAt pulumi.StringPtrInput
	// The standard control longer description. Provides information about what the control is checking for.
	Description pulumi.StringPtrInput
	// A description of the reason why you are disabling a security standard control. If you specify this attribute, `controlStatus` will be set to `DISABLED` automatically.
	DisabledReason pulumi.StringPtrInput
	// The list of requirements that are related to this control.
	RelatedRequirements pulumi.StringArrayInput
	// A link to remediation information for the control in the Security Hub user documentation.
	RemediationUrl pulumi.StringPtrInput
	// The severity of findings generated from this security standard control.
	SeverityRating pulumi.StringPtrInput
	// The standards control ARN.
	StandardsControlArn pulumi.StringPtrInput
	// The standard control title.
	Title pulumi.StringPtrInput
}

func (StandardsControlState) ElementType() reflect.Type {
	return reflect.TypeOf((*standardsControlState)(nil)).Elem()
}

type standardsControlArgs struct {
	// The control status could be `ENABLED` or `DISABLED`. You have to specify `disabledReason` argument for `DISABLED` control status.
	ControlStatus string `pulumi:"controlStatus"`
	// A description of the reason why you are disabling a security standard control. If you specify this attribute, `controlStatus` will be set to `DISABLED` automatically.
	DisabledReason *string `pulumi:"disabledReason"`
	// The standards control ARN.
	StandardsControlArn string `pulumi:"standardsControlArn"`
}

// The set of arguments for constructing a StandardsControl resource.
type StandardsControlArgs struct {
	// The control status could be `ENABLED` or `DISABLED`. You have to specify `disabledReason` argument for `DISABLED` control status.
	ControlStatus pulumi.StringInput
	// A description of the reason why you are disabling a security standard control. If you specify this attribute, `controlStatus` will be set to `DISABLED` automatically.
	DisabledReason pulumi.StringPtrInput
	// The standards control ARN.
	StandardsControlArn pulumi.StringInput
}

func (StandardsControlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*standardsControlArgs)(nil)).Elem()
}

type StandardsControlInput interface {
	pulumi.Input

	ToStandardsControlOutput() StandardsControlOutput
	ToStandardsControlOutputWithContext(ctx context.Context) StandardsControlOutput
}

func (*StandardsControl) ElementType() reflect.Type {
	return reflect.TypeOf((*StandardsControl)(nil))
}

func (i *StandardsControl) ToStandardsControlOutput() StandardsControlOutput {
	return i.ToStandardsControlOutputWithContext(context.Background())
}

func (i *StandardsControl) ToStandardsControlOutputWithContext(ctx context.Context) StandardsControlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StandardsControlOutput)
}

func (i *StandardsControl) ToStandardsControlPtrOutput() StandardsControlPtrOutput {
	return i.ToStandardsControlPtrOutputWithContext(context.Background())
}

func (i *StandardsControl) ToStandardsControlPtrOutputWithContext(ctx context.Context) StandardsControlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StandardsControlPtrOutput)
}

type StandardsControlPtrInput interface {
	pulumi.Input

	ToStandardsControlPtrOutput() StandardsControlPtrOutput
	ToStandardsControlPtrOutputWithContext(ctx context.Context) StandardsControlPtrOutput
}

type standardsControlPtrType StandardsControlArgs

func (*standardsControlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StandardsControl)(nil))
}

func (i *standardsControlPtrType) ToStandardsControlPtrOutput() StandardsControlPtrOutput {
	return i.ToStandardsControlPtrOutputWithContext(context.Background())
}

func (i *standardsControlPtrType) ToStandardsControlPtrOutputWithContext(ctx context.Context) StandardsControlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StandardsControlPtrOutput)
}

// StandardsControlArrayInput is an input type that accepts StandardsControlArray and StandardsControlArrayOutput values.
// You can construct a concrete instance of `StandardsControlArrayInput` via:
//
//          StandardsControlArray{ StandardsControlArgs{...} }
type StandardsControlArrayInput interface {
	pulumi.Input

	ToStandardsControlArrayOutput() StandardsControlArrayOutput
	ToStandardsControlArrayOutputWithContext(context.Context) StandardsControlArrayOutput
}

type StandardsControlArray []StandardsControlInput

func (StandardsControlArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StandardsControl)(nil)).Elem()
}

func (i StandardsControlArray) ToStandardsControlArrayOutput() StandardsControlArrayOutput {
	return i.ToStandardsControlArrayOutputWithContext(context.Background())
}

func (i StandardsControlArray) ToStandardsControlArrayOutputWithContext(ctx context.Context) StandardsControlArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StandardsControlArrayOutput)
}

// StandardsControlMapInput is an input type that accepts StandardsControlMap and StandardsControlMapOutput values.
// You can construct a concrete instance of `StandardsControlMapInput` via:
//
//          StandardsControlMap{ "key": StandardsControlArgs{...} }
type StandardsControlMapInput interface {
	pulumi.Input

	ToStandardsControlMapOutput() StandardsControlMapOutput
	ToStandardsControlMapOutputWithContext(context.Context) StandardsControlMapOutput
}

type StandardsControlMap map[string]StandardsControlInput

func (StandardsControlMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StandardsControl)(nil)).Elem()
}

func (i StandardsControlMap) ToStandardsControlMapOutput() StandardsControlMapOutput {
	return i.ToStandardsControlMapOutputWithContext(context.Background())
}

func (i StandardsControlMap) ToStandardsControlMapOutputWithContext(ctx context.Context) StandardsControlMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StandardsControlMapOutput)
}

type StandardsControlOutput struct{ *pulumi.OutputState }

func (StandardsControlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StandardsControl)(nil))
}

func (o StandardsControlOutput) ToStandardsControlOutput() StandardsControlOutput {
	return o
}

func (o StandardsControlOutput) ToStandardsControlOutputWithContext(ctx context.Context) StandardsControlOutput {
	return o
}

func (o StandardsControlOutput) ToStandardsControlPtrOutput() StandardsControlPtrOutput {
	return o.ToStandardsControlPtrOutputWithContext(context.Background())
}

func (o StandardsControlOutput) ToStandardsControlPtrOutputWithContext(ctx context.Context) StandardsControlPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StandardsControl) *StandardsControl {
		return &v
	}).(StandardsControlPtrOutput)
}

type StandardsControlPtrOutput struct{ *pulumi.OutputState }

func (StandardsControlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StandardsControl)(nil))
}

func (o StandardsControlPtrOutput) ToStandardsControlPtrOutput() StandardsControlPtrOutput {
	return o
}

func (o StandardsControlPtrOutput) ToStandardsControlPtrOutputWithContext(ctx context.Context) StandardsControlPtrOutput {
	return o
}

func (o StandardsControlPtrOutput) Elem() StandardsControlOutput {
	return o.ApplyT(func(v *StandardsControl) StandardsControl {
		if v != nil {
			return *v
		}
		var ret StandardsControl
		return ret
	}).(StandardsControlOutput)
}

type StandardsControlArrayOutput struct{ *pulumi.OutputState }

func (StandardsControlArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StandardsControl)(nil))
}

func (o StandardsControlArrayOutput) ToStandardsControlArrayOutput() StandardsControlArrayOutput {
	return o
}

func (o StandardsControlArrayOutput) ToStandardsControlArrayOutputWithContext(ctx context.Context) StandardsControlArrayOutput {
	return o
}

func (o StandardsControlArrayOutput) Index(i pulumi.IntInput) StandardsControlOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StandardsControl {
		return vs[0].([]StandardsControl)[vs[1].(int)]
	}).(StandardsControlOutput)
}

type StandardsControlMapOutput struct{ *pulumi.OutputState }

func (StandardsControlMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]StandardsControl)(nil))
}

func (o StandardsControlMapOutput) ToStandardsControlMapOutput() StandardsControlMapOutput {
	return o
}

func (o StandardsControlMapOutput) ToStandardsControlMapOutputWithContext(ctx context.Context) StandardsControlMapOutput {
	return o
}

func (o StandardsControlMapOutput) MapIndex(k pulumi.StringInput) StandardsControlOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) StandardsControl {
		return vs[0].(map[string]StandardsControl)[vs[1].(string)]
	}).(StandardsControlOutput)
}

func init() {
	pulumi.RegisterOutputType(StandardsControlOutput{})
	pulumi.RegisterOutputType(StandardsControlPtrOutput{})
	pulumi.RegisterOutputType(StandardsControlArrayOutput{})
	pulumi.RegisterOutputType(StandardsControlMapOutput{})
}
