// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package securityhub

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type StandardsControl struct {
	pulumi.CustomResourceState

	ControlId              pulumi.StringOutput      `pulumi:"controlId"`
	ControlStatus          pulumi.StringOutput      `pulumi:"controlStatus"`
	ControlStatusUpdatedAt pulumi.StringOutput      `pulumi:"controlStatusUpdatedAt"`
	Description            pulumi.StringOutput      `pulumi:"description"`
	DisabledReason         pulumi.StringOutput      `pulumi:"disabledReason"`
	RelatedRequirements    pulumi.StringArrayOutput `pulumi:"relatedRequirements"`
	RemediationUrl         pulumi.StringOutput      `pulumi:"remediationUrl"`
	SeverityRating         pulumi.StringOutput      `pulumi:"severityRating"`
	StandardsControlArn    pulumi.StringOutput      `pulumi:"standardsControlArn"`
	Title                  pulumi.StringOutput      `pulumi:"title"`
}

// NewStandardsControl registers a new resource with the given unique name, arguments, and options.
func NewStandardsControl(ctx *pulumi.Context,
	name string, args *StandardsControlArgs, opts ...pulumi.ResourceOption) (*StandardsControl, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ControlStatus == nil {
		return nil, errors.New("invalid value for required argument 'ControlStatus'")
	}
	if args.StandardsControlArn == nil {
		return nil, errors.New("invalid value for required argument 'StandardsControlArn'")
	}
	var resource StandardsControl
	err := ctx.RegisterResource("aws:securityhub/standardsControl:StandardsControl", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStandardsControl gets an existing StandardsControl resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStandardsControl(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StandardsControlState, opts ...pulumi.ResourceOption) (*StandardsControl, error) {
	var resource StandardsControl
	err := ctx.ReadResource("aws:securityhub/standardsControl:StandardsControl", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StandardsControl resources.
type standardsControlState struct {
	ControlId              *string  `pulumi:"controlId"`
	ControlStatus          *string  `pulumi:"controlStatus"`
	ControlStatusUpdatedAt *string  `pulumi:"controlStatusUpdatedAt"`
	Description            *string  `pulumi:"description"`
	DisabledReason         *string  `pulumi:"disabledReason"`
	RelatedRequirements    []string `pulumi:"relatedRequirements"`
	RemediationUrl         *string  `pulumi:"remediationUrl"`
	SeverityRating         *string  `pulumi:"severityRating"`
	StandardsControlArn    *string  `pulumi:"standardsControlArn"`
	Title                  *string  `pulumi:"title"`
}

type StandardsControlState struct {
	ControlId              pulumi.StringPtrInput
	ControlStatus          pulumi.StringPtrInput
	ControlStatusUpdatedAt pulumi.StringPtrInput
	Description            pulumi.StringPtrInput
	DisabledReason         pulumi.StringPtrInput
	RelatedRequirements    pulumi.StringArrayInput
	RemediationUrl         pulumi.StringPtrInput
	SeverityRating         pulumi.StringPtrInput
	StandardsControlArn    pulumi.StringPtrInput
	Title                  pulumi.StringPtrInput
}

func (StandardsControlState) ElementType() reflect.Type {
	return reflect.TypeOf((*standardsControlState)(nil)).Elem()
}

type standardsControlArgs struct {
	ControlStatus       string  `pulumi:"controlStatus"`
	DisabledReason      *string `pulumi:"disabledReason"`
	StandardsControlArn string  `pulumi:"standardsControlArn"`
}

// The set of arguments for constructing a StandardsControl resource.
type StandardsControlArgs struct {
	ControlStatus       pulumi.StringInput
	DisabledReason      pulumi.StringPtrInput
	StandardsControlArn pulumi.StringInput
}

func (StandardsControlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*standardsControlArgs)(nil)).Elem()
}

type StandardsControlInput interface {
	pulumi.Input

	ToStandardsControlOutput() StandardsControlOutput
	ToStandardsControlOutputWithContext(ctx context.Context) StandardsControlOutput
}

func (*StandardsControl) ElementType() reflect.Type {
	return reflect.TypeOf((**StandardsControl)(nil)).Elem()
}

func (i *StandardsControl) ToStandardsControlOutput() StandardsControlOutput {
	return i.ToStandardsControlOutputWithContext(context.Background())
}

func (i *StandardsControl) ToStandardsControlOutputWithContext(ctx context.Context) StandardsControlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StandardsControlOutput)
}

// StandardsControlArrayInput is an input type that accepts StandardsControlArray and StandardsControlArrayOutput values.
// You can construct a concrete instance of `StandardsControlArrayInput` via:
//
//	StandardsControlArray{ StandardsControlArgs{...} }
type StandardsControlArrayInput interface {
	pulumi.Input

	ToStandardsControlArrayOutput() StandardsControlArrayOutput
	ToStandardsControlArrayOutputWithContext(context.Context) StandardsControlArrayOutput
}

type StandardsControlArray []StandardsControlInput

func (StandardsControlArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StandardsControl)(nil)).Elem()
}

func (i StandardsControlArray) ToStandardsControlArrayOutput() StandardsControlArrayOutput {
	return i.ToStandardsControlArrayOutputWithContext(context.Background())
}

func (i StandardsControlArray) ToStandardsControlArrayOutputWithContext(ctx context.Context) StandardsControlArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StandardsControlArrayOutput)
}

// StandardsControlMapInput is an input type that accepts StandardsControlMap and StandardsControlMapOutput values.
// You can construct a concrete instance of `StandardsControlMapInput` via:
//
//	StandardsControlMap{ "key": StandardsControlArgs{...} }
type StandardsControlMapInput interface {
	pulumi.Input

	ToStandardsControlMapOutput() StandardsControlMapOutput
	ToStandardsControlMapOutputWithContext(context.Context) StandardsControlMapOutput
}

type StandardsControlMap map[string]StandardsControlInput

func (StandardsControlMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StandardsControl)(nil)).Elem()
}

func (i StandardsControlMap) ToStandardsControlMapOutput() StandardsControlMapOutput {
	return i.ToStandardsControlMapOutputWithContext(context.Background())
}

func (i StandardsControlMap) ToStandardsControlMapOutputWithContext(ctx context.Context) StandardsControlMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StandardsControlMapOutput)
}

type StandardsControlOutput struct{ *pulumi.OutputState }

func (StandardsControlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StandardsControl)(nil)).Elem()
}

func (o StandardsControlOutput) ToStandardsControlOutput() StandardsControlOutput {
	return o
}

func (o StandardsControlOutput) ToStandardsControlOutputWithContext(ctx context.Context) StandardsControlOutput {
	return o
}

func (o StandardsControlOutput) ControlId() pulumi.StringOutput {
	return o.ApplyT(func(v *StandardsControl) pulumi.StringOutput { return v.ControlId }).(pulumi.StringOutput)
}

func (o StandardsControlOutput) ControlStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *StandardsControl) pulumi.StringOutput { return v.ControlStatus }).(pulumi.StringOutput)
}

func (o StandardsControlOutput) ControlStatusUpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *StandardsControl) pulumi.StringOutput { return v.ControlStatusUpdatedAt }).(pulumi.StringOutput)
}

func (o StandardsControlOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *StandardsControl) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

func (o StandardsControlOutput) DisabledReason() pulumi.StringOutput {
	return o.ApplyT(func(v *StandardsControl) pulumi.StringOutput { return v.DisabledReason }).(pulumi.StringOutput)
}

func (o StandardsControlOutput) RelatedRequirements() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *StandardsControl) pulumi.StringArrayOutput { return v.RelatedRequirements }).(pulumi.StringArrayOutput)
}

func (o StandardsControlOutput) RemediationUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *StandardsControl) pulumi.StringOutput { return v.RemediationUrl }).(pulumi.StringOutput)
}

func (o StandardsControlOutput) SeverityRating() pulumi.StringOutput {
	return o.ApplyT(func(v *StandardsControl) pulumi.StringOutput { return v.SeverityRating }).(pulumi.StringOutput)
}

func (o StandardsControlOutput) StandardsControlArn() pulumi.StringOutput {
	return o.ApplyT(func(v *StandardsControl) pulumi.StringOutput { return v.StandardsControlArn }).(pulumi.StringOutput)
}

func (o StandardsControlOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v *StandardsControl) pulumi.StringOutput { return v.Title }).(pulumi.StringOutput)
}

type StandardsControlArrayOutput struct{ *pulumi.OutputState }

func (StandardsControlArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StandardsControl)(nil)).Elem()
}

func (o StandardsControlArrayOutput) ToStandardsControlArrayOutput() StandardsControlArrayOutput {
	return o
}

func (o StandardsControlArrayOutput) ToStandardsControlArrayOutputWithContext(ctx context.Context) StandardsControlArrayOutput {
	return o
}

func (o StandardsControlArrayOutput) Index(i pulumi.IntInput) StandardsControlOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *StandardsControl {
		return vs[0].([]*StandardsControl)[vs[1].(int)]
	}).(StandardsControlOutput)
}

type StandardsControlMapOutput struct{ *pulumi.OutputState }

func (StandardsControlMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StandardsControl)(nil)).Elem()
}

func (o StandardsControlMapOutput) ToStandardsControlMapOutput() StandardsControlMapOutput {
	return o
}

func (o StandardsControlMapOutput) ToStandardsControlMapOutputWithContext(ctx context.Context) StandardsControlMapOutput {
	return o
}

func (o StandardsControlMapOutput) MapIndex(k pulumi.StringInput) StandardsControlOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *StandardsControl {
		return vs[0].(map[string]*StandardsControl)[vs[1].(string)]
	}).(StandardsControlOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StandardsControlInput)(nil)).Elem(), &StandardsControl{})
	pulumi.RegisterInputType(reflect.TypeOf((*StandardsControlArrayInput)(nil)).Elem(), StandardsControlArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StandardsControlMapInput)(nil)).Elem(), StandardsControlMap{})
	pulumi.RegisterOutputType(StandardsControlOutput{})
	pulumi.RegisterOutputType(StandardsControlArrayOutput{})
	pulumi.RegisterOutputType(StandardsControlMapOutput{})
}
