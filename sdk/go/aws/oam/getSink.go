// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package oam

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Data source for managing an AWS CloudWatch Observability Access Manager Sink.
//
// ## Example Usage
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/oam"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := oam.LookupSink(ctx, &oam.LookupSinkArgs{
//				SinkIdentifier: "arn:aws:oam:us-west-1:111111111111:sink/abcd1234-a123-456a-a12b-a123b456c789",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupSink(ctx *pulumi.Context, args *LookupSinkArgs, opts ...pulumi.InvokeOption) (*LookupSinkResult, error) {
	var rv LookupSinkResult
	err := ctx.Invoke("aws:oam/getSink:getSink", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSink.
type LookupSinkArgs struct {
	// ARN of the sink.
	SinkIdentifier string `pulumi:"sinkIdentifier"`
	// Tags assigned to the sink.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getSink.
type LookupSinkResult struct {
	// ARN of the sink.
	Arn string `pulumi:"arn"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Name of the sink.
	Name string `pulumi:"name"`
	// Random ID string that AWS generated as part of the sink ARN.
	SinkId         string `pulumi:"sinkId"`
	SinkIdentifier string `pulumi:"sinkIdentifier"`
	// Tags assigned to the sink.
	Tags map[string]string `pulumi:"tags"`
}

func LookupSinkOutput(ctx *pulumi.Context, args LookupSinkOutputArgs, opts ...pulumi.InvokeOption) LookupSinkResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupSinkResult, error) {
			args := v.(LookupSinkArgs)
			r, err := LookupSink(ctx, &args, opts...)
			var s LookupSinkResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupSinkResultOutput)
}

// A collection of arguments for invoking getSink.
type LookupSinkOutputArgs struct {
	// ARN of the sink.
	SinkIdentifier pulumi.StringInput `pulumi:"sinkIdentifier"`
	// Tags assigned to the sink.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (LookupSinkOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSinkArgs)(nil)).Elem()
}

// A collection of values returned by getSink.
type LookupSinkResultOutput struct{ *pulumi.OutputState }

func (LookupSinkResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSinkResult)(nil)).Elem()
}

func (o LookupSinkResultOutput) ToLookupSinkResultOutput() LookupSinkResultOutput {
	return o
}

func (o LookupSinkResultOutput) ToLookupSinkResultOutputWithContext(ctx context.Context) LookupSinkResultOutput {
	return o
}

// ARN of the sink.
func (o LookupSinkResultOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSinkResult) string { return v.Arn }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupSinkResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSinkResult) string { return v.Id }).(pulumi.StringOutput)
}

// Name of the sink.
func (o LookupSinkResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSinkResult) string { return v.Name }).(pulumi.StringOutput)
}

// Random ID string that AWS generated as part of the sink ARN.
func (o LookupSinkResultOutput) SinkId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSinkResult) string { return v.SinkId }).(pulumi.StringOutput)
}

func (o LookupSinkResultOutput) SinkIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSinkResult) string { return v.SinkIdentifier }).(pulumi.StringOutput)
}

// Tags assigned to the sink.
func (o LookupSinkResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupSinkResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSinkResultOutput{})
}
