// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package securitylake

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing an AWS Security Lake Subscriber.
//
// ## Import
//
// Using `pulumi import`, import Security Lake subscriber using the subscriber ID. For example:
//
// ```sh
// $ pulumi import aws:securitylake/subscriber:Subscriber example 9f3bfe79-d543-474d-a93c-f3846805d208
// ```
type Subscriber struct {
	pulumi.CustomResourceState

	AccessType pulumi.StringOutput `pulumi:"accessType"`
	// ARN of the Data Lake.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The Amazon Resource Name (ARN) which uniquely defines the AWS RAM resource share. Before accepting the RAM resource share invitation, you can view details related to the RAM resource share.
	ResourceShareArn pulumi.StringOutput `pulumi:"resourceShareArn"`
	// The name of the resource share.
	ResourceShareName pulumi.StringOutput `pulumi:"resourceShareName"`
	// The ARN of the IAM role to be used by the entity putting logs into your custom source partition.
	RoleArn pulumi.StringOutput `pulumi:"roleArn"`
	// The ARN for the Amazon Security Lake Amazon S3 bucket.
	S3BucketArn pulumi.StringOutput `pulumi:"s3BucketArn"`
	// The supported AWS services from which logs and events are collected. Security Lake supports log and event collection for natively supported AWS services.
	Source SubscriberSourcePtrOutput `pulumi:"source"`
	// The description for your subscriber account in Security Lake.
	SubscriberDescription pulumi.StringPtrOutput `pulumi:"subscriberDescription"`
	// The subscriber endpoint to which exception messages are posted.
	SubscriberEndpoint pulumi.StringOutput `pulumi:"subscriberEndpoint"`
	// The AWS identity used to access your data.
	SubscriberIdentity SubscriberSubscriberIdentityPtrOutput `pulumi:"subscriberIdentity"`
	// The name of your Security Lake subscriber account.
	SubscriberName pulumi.StringPtrOutput `pulumi:"subscriberName"`
	// The subscriber status of the Amazon Security Lake subscriber account.
	SubscriberStatus pulumi.StringOutput `pulumi:"subscriberStatus"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll  pulumi.StringMapOutput      `pulumi:"tagsAll"`
	Timeouts SubscriberTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewSubscriber registers a new resource with the given unique name, arguments, and options.
func NewSubscriber(ctx *pulumi.Context,
	name string, args *SubscriberArgs, opts ...pulumi.ResourceOption) (*Subscriber, error) {
	if args == nil {
		args = &SubscriberArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Subscriber
	err := ctx.RegisterResource("aws:securitylake/subscriber:Subscriber", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSubscriber gets an existing Subscriber resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSubscriber(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SubscriberState, opts ...pulumi.ResourceOption) (*Subscriber, error) {
	var resource Subscriber
	err := ctx.ReadResource("aws:securitylake/subscriber:Subscriber", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Subscriber resources.
type subscriberState struct {
	AccessType *string `pulumi:"accessType"`
	// ARN of the Data Lake.
	Arn *string `pulumi:"arn"`
	// The Amazon Resource Name (ARN) which uniquely defines the AWS RAM resource share. Before accepting the RAM resource share invitation, you can view details related to the RAM resource share.
	ResourceShareArn *string `pulumi:"resourceShareArn"`
	// The name of the resource share.
	ResourceShareName *string `pulumi:"resourceShareName"`
	// The ARN of the IAM role to be used by the entity putting logs into your custom source partition.
	RoleArn *string `pulumi:"roleArn"`
	// The ARN for the Amazon Security Lake Amazon S3 bucket.
	S3BucketArn *string `pulumi:"s3BucketArn"`
	// The supported AWS services from which logs and events are collected. Security Lake supports log and event collection for natively supported AWS services.
	Source *SubscriberSource `pulumi:"source"`
	// The description for your subscriber account in Security Lake.
	SubscriberDescription *string `pulumi:"subscriberDescription"`
	// The subscriber endpoint to which exception messages are posted.
	SubscriberEndpoint *string `pulumi:"subscriberEndpoint"`
	// The AWS identity used to access your data.
	SubscriberIdentity *SubscriberSubscriberIdentity `pulumi:"subscriberIdentity"`
	// The name of your Security Lake subscriber account.
	SubscriberName *string `pulumi:"subscriberName"`
	// The subscriber status of the Amazon Security Lake subscriber account.
	SubscriberStatus *string `pulumi:"subscriberStatus"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll  map[string]string   `pulumi:"tagsAll"`
	Timeouts *SubscriberTimeouts `pulumi:"timeouts"`
}

type SubscriberState struct {
	AccessType pulumi.StringPtrInput
	// ARN of the Data Lake.
	Arn pulumi.StringPtrInput
	// The Amazon Resource Name (ARN) which uniquely defines the AWS RAM resource share. Before accepting the RAM resource share invitation, you can view details related to the RAM resource share.
	ResourceShareArn pulumi.StringPtrInput
	// The name of the resource share.
	ResourceShareName pulumi.StringPtrInput
	// The ARN of the IAM role to be used by the entity putting logs into your custom source partition.
	RoleArn pulumi.StringPtrInput
	// The ARN for the Amazon Security Lake Amazon S3 bucket.
	S3BucketArn pulumi.StringPtrInput
	// The supported AWS services from which logs and events are collected. Security Lake supports log and event collection for natively supported AWS services.
	Source SubscriberSourcePtrInput
	// The description for your subscriber account in Security Lake.
	SubscriberDescription pulumi.StringPtrInput
	// The subscriber endpoint to which exception messages are posted.
	SubscriberEndpoint pulumi.StringPtrInput
	// The AWS identity used to access your data.
	SubscriberIdentity SubscriberSubscriberIdentityPtrInput
	// The name of your Security Lake subscriber account.
	SubscriberName pulumi.StringPtrInput
	// The subscriber status of the Amazon Security Lake subscriber account.
	SubscriberStatus pulumi.StringPtrInput
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll  pulumi.StringMapInput
	Timeouts SubscriberTimeoutsPtrInput
}

func (SubscriberState) ElementType() reflect.Type {
	return reflect.TypeOf((*subscriberState)(nil)).Elem()
}

type subscriberArgs struct {
	AccessType *string `pulumi:"accessType"`
	// The supported AWS services from which logs and events are collected. Security Lake supports log and event collection for natively supported AWS services.
	Source *SubscriberSource `pulumi:"source"`
	// The description for your subscriber account in Security Lake.
	SubscriberDescription *string `pulumi:"subscriberDescription"`
	// The AWS identity used to access your data.
	SubscriberIdentity *SubscriberSubscriberIdentity `pulumi:"subscriberIdentity"`
	// The name of your Security Lake subscriber account.
	SubscriberName *string `pulumi:"subscriberName"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags     map[string]string   `pulumi:"tags"`
	Timeouts *SubscriberTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a Subscriber resource.
type SubscriberArgs struct {
	AccessType pulumi.StringPtrInput
	// The supported AWS services from which logs and events are collected. Security Lake supports log and event collection for natively supported AWS services.
	Source SubscriberSourcePtrInput
	// The description for your subscriber account in Security Lake.
	SubscriberDescription pulumi.StringPtrInput
	// The AWS identity used to access your data.
	SubscriberIdentity SubscriberSubscriberIdentityPtrInput
	// The name of your Security Lake subscriber account.
	SubscriberName pulumi.StringPtrInput
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags     pulumi.StringMapInput
	Timeouts SubscriberTimeoutsPtrInput
}

func (SubscriberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*subscriberArgs)(nil)).Elem()
}

type SubscriberInput interface {
	pulumi.Input

	ToSubscriberOutput() SubscriberOutput
	ToSubscriberOutputWithContext(ctx context.Context) SubscriberOutput
}

func (*Subscriber) ElementType() reflect.Type {
	return reflect.TypeOf((**Subscriber)(nil)).Elem()
}

func (i *Subscriber) ToSubscriberOutput() SubscriberOutput {
	return i.ToSubscriberOutputWithContext(context.Background())
}

func (i *Subscriber) ToSubscriberOutputWithContext(ctx context.Context) SubscriberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriberOutput)
}

// SubscriberArrayInput is an input type that accepts SubscriberArray and SubscriberArrayOutput values.
// You can construct a concrete instance of `SubscriberArrayInput` via:
//
//	SubscriberArray{ SubscriberArgs{...} }
type SubscriberArrayInput interface {
	pulumi.Input

	ToSubscriberArrayOutput() SubscriberArrayOutput
	ToSubscriberArrayOutputWithContext(context.Context) SubscriberArrayOutput
}

type SubscriberArray []SubscriberInput

func (SubscriberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Subscriber)(nil)).Elem()
}

func (i SubscriberArray) ToSubscriberArrayOutput() SubscriberArrayOutput {
	return i.ToSubscriberArrayOutputWithContext(context.Background())
}

func (i SubscriberArray) ToSubscriberArrayOutputWithContext(ctx context.Context) SubscriberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriberArrayOutput)
}

// SubscriberMapInput is an input type that accepts SubscriberMap and SubscriberMapOutput values.
// You can construct a concrete instance of `SubscriberMapInput` via:
//
//	SubscriberMap{ "key": SubscriberArgs{...} }
type SubscriberMapInput interface {
	pulumi.Input

	ToSubscriberMapOutput() SubscriberMapOutput
	ToSubscriberMapOutputWithContext(context.Context) SubscriberMapOutput
}

type SubscriberMap map[string]SubscriberInput

func (SubscriberMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Subscriber)(nil)).Elem()
}

func (i SubscriberMap) ToSubscriberMapOutput() SubscriberMapOutput {
	return i.ToSubscriberMapOutputWithContext(context.Background())
}

func (i SubscriberMap) ToSubscriberMapOutputWithContext(ctx context.Context) SubscriberMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriberMapOutput)
}

type SubscriberOutput struct{ *pulumi.OutputState }

func (SubscriberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Subscriber)(nil)).Elem()
}

func (o SubscriberOutput) ToSubscriberOutput() SubscriberOutput {
	return o
}

func (o SubscriberOutput) ToSubscriberOutputWithContext(ctx context.Context) SubscriberOutput {
	return o
}

func (o SubscriberOutput) AccessType() pulumi.StringOutput {
	return o.ApplyT(func(v *Subscriber) pulumi.StringOutput { return v.AccessType }).(pulumi.StringOutput)
}

// ARN of the Data Lake.
func (o SubscriberOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Subscriber) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The Amazon Resource Name (ARN) which uniquely defines the AWS RAM resource share. Before accepting the RAM resource share invitation, you can view details related to the RAM resource share.
func (o SubscriberOutput) ResourceShareArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Subscriber) pulumi.StringOutput { return v.ResourceShareArn }).(pulumi.StringOutput)
}

// The name of the resource share.
func (o SubscriberOutput) ResourceShareName() pulumi.StringOutput {
	return o.ApplyT(func(v *Subscriber) pulumi.StringOutput { return v.ResourceShareName }).(pulumi.StringOutput)
}

// The ARN of the IAM role to be used by the entity putting logs into your custom source partition.
func (o SubscriberOutput) RoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Subscriber) pulumi.StringOutput { return v.RoleArn }).(pulumi.StringOutput)
}

// The ARN for the Amazon Security Lake Amazon S3 bucket.
func (o SubscriberOutput) S3BucketArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Subscriber) pulumi.StringOutput { return v.S3BucketArn }).(pulumi.StringOutput)
}

// The supported AWS services from which logs and events are collected. Security Lake supports log and event collection for natively supported AWS services.
func (o SubscriberOutput) Source() SubscriberSourcePtrOutput {
	return o.ApplyT(func(v *Subscriber) SubscriberSourcePtrOutput { return v.Source }).(SubscriberSourcePtrOutput)
}

// The description for your subscriber account in Security Lake.
func (o SubscriberOutput) SubscriberDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Subscriber) pulumi.StringPtrOutput { return v.SubscriberDescription }).(pulumi.StringPtrOutput)
}

// The subscriber endpoint to which exception messages are posted.
func (o SubscriberOutput) SubscriberEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *Subscriber) pulumi.StringOutput { return v.SubscriberEndpoint }).(pulumi.StringOutput)
}

// The AWS identity used to access your data.
func (o SubscriberOutput) SubscriberIdentity() SubscriberSubscriberIdentityPtrOutput {
	return o.ApplyT(func(v *Subscriber) SubscriberSubscriberIdentityPtrOutput { return v.SubscriberIdentity }).(SubscriberSubscriberIdentityPtrOutput)
}

// The name of your Security Lake subscriber account.
func (o SubscriberOutput) SubscriberName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Subscriber) pulumi.StringPtrOutput { return v.SubscriberName }).(pulumi.StringPtrOutput)
}

// The subscriber status of the Amazon Security Lake subscriber account.
func (o SubscriberOutput) SubscriberStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Subscriber) pulumi.StringOutput { return v.SubscriberStatus }).(pulumi.StringOutput)
}

// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o SubscriberOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Subscriber) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
//
// Deprecated: Please use `tags` instead.
func (o SubscriberOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Subscriber) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o SubscriberOutput) Timeouts() SubscriberTimeoutsPtrOutput {
	return o.ApplyT(func(v *Subscriber) SubscriberTimeoutsPtrOutput { return v.Timeouts }).(SubscriberTimeoutsPtrOutput)
}

type SubscriberArrayOutput struct{ *pulumi.OutputState }

func (SubscriberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Subscriber)(nil)).Elem()
}

func (o SubscriberArrayOutput) ToSubscriberArrayOutput() SubscriberArrayOutput {
	return o
}

func (o SubscriberArrayOutput) ToSubscriberArrayOutputWithContext(ctx context.Context) SubscriberArrayOutput {
	return o
}

func (o SubscriberArrayOutput) Index(i pulumi.IntInput) SubscriberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Subscriber {
		return vs[0].([]*Subscriber)[vs[1].(int)]
	}).(SubscriberOutput)
}

type SubscriberMapOutput struct{ *pulumi.OutputState }

func (SubscriberMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Subscriber)(nil)).Elem()
}

func (o SubscriberMapOutput) ToSubscriberMapOutput() SubscriberMapOutput {
	return o
}

func (o SubscriberMapOutput) ToSubscriberMapOutputWithContext(ctx context.Context) SubscriberMapOutput {
	return o
}

func (o SubscriberMapOutput) MapIndex(k pulumi.StringInput) SubscriberOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Subscriber {
		return vs[0].(map[string]*Subscriber)[vs[1].(string)]
	}).(SubscriberOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriberInput)(nil)).Elem(), &Subscriber{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriberArrayInput)(nil)).Elem(), SubscriberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriberMapInput)(nil)).Elem(), SubscriberMap{})
	pulumi.RegisterOutputType(SubscriberOutput{})
	pulumi.RegisterOutputType(SubscriberArrayOutput{})
	pulumi.RegisterOutputType(SubscriberMapOutput{})
}
