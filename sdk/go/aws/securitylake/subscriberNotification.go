// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package securitylake

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing an AWS Security Lake Subscriber Notification.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/securitylake"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := securitylake.NewSubscriberNotification(ctx, "test", &securitylake.SubscriberNotificationArgs{
//				SubscriberId: pulumi.Any(testAwsSecuritylakeSubscriber.Id),
//				Configuration: &securitylake.SubscriberNotificationConfigurationArgs{
//					SqsNotificationConfiguration: nil,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
type SubscriberNotification struct {
	pulumi.CustomResourceState

	// Specify the configuration using which you want to create the subscriber notification..
	Configuration SubscriberNotificationConfigurationPtrOutput `pulumi:"configuration"`
	EndpointId    pulumi.StringOutput                          `pulumi:"endpointId"`
	// The subscriber ID for the notification subscription.
	SubscriberId pulumi.StringOutput `pulumi:"subscriberId"`
}

// NewSubscriberNotification registers a new resource with the given unique name, arguments, and options.
func NewSubscriberNotification(ctx *pulumi.Context,
	name string, args *SubscriberNotificationArgs, opts ...pulumi.ResourceOption) (*SubscriberNotification, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SubscriberId == nil {
		return nil, errors.New("invalid value for required argument 'SubscriberId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SubscriberNotification
	err := ctx.RegisterResource("aws:securitylake/subscriberNotification:SubscriberNotification", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSubscriberNotification gets an existing SubscriberNotification resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSubscriberNotification(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SubscriberNotificationState, opts ...pulumi.ResourceOption) (*SubscriberNotification, error) {
	var resource SubscriberNotification
	err := ctx.ReadResource("aws:securitylake/subscriberNotification:SubscriberNotification", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SubscriberNotification resources.
type subscriberNotificationState struct {
	// Specify the configuration using which you want to create the subscriber notification..
	Configuration *SubscriberNotificationConfiguration `pulumi:"configuration"`
	EndpointId    *string                              `pulumi:"endpointId"`
	// The subscriber ID for the notification subscription.
	SubscriberId *string `pulumi:"subscriberId"`
}

type SubscriberNotificationState struct {
	// Specify the configuration using which you want to create the subscriber notification..
	Configuration SubscriberNotificationConfigurationPtrInput
	EndpointId    pulumi.StringPtrInput
	// The subscriber ID for the notification subscription.
	SubscriberId pulumi.StringPtrInput
}

func (SubscriberNotificationState) ElementType() reflect.Type {
	return reflect.TypeOf((*subscriberNotificationState)(nil)).Elem()
}

type subscriberNotificationArgs struct {
	// Specify the configuration using which you want to create the subscriber notification..
	Configuration *SubscriberNotificationConfiguration `pulumi:"configuration"`
	// The subscriber ID for the notification subscription.
	SubscriberId string `pulumi:"subscriberId"`
}

// The set of arguments for constructing a SubscriberNotification resource.
type SubscriberNotificationArgs struct {
	// Specify the configuration using which you want to create the subscriber notification..
	Configuration SubscriberNotificationConfigurationPtrInput
	// The subscriber ID for the notification subscription.
	SubscriberId pulumi.StringInput
}

func (SubscriberNotificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*subscriberNotificationArgs)(nil)).Elem()
}

type SubscriberNotificationInput interface {
	pulumi.Input

	ToSubscriberNotificationOutput() SubscriberNotificationOutput
	ToSubscriberNotificationOutputWithContext(ctx context.Context) SubscriberNotificationOutput
}

func (*SubscriberNotification) ElementType() reflect.Type {
	return reflect.TypeOf((**SubscriberNotification)(nil)).Elem()
}

func (i *SubscriberNotification) ToSubscriberNotificationOutput() SubscriberNotificationOutput {
	return i.ToSubscriberNotificationOutputWithContext(context.Background())
}

func (i *SubscriberNotification) ToSubscriberNotificationOutputWithContext(ctx context.Context) SubscriberNotificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriberNotificationOutput)
}

// SubscriberNotificationArrayInput is an input type that accepts SubscriberNotificationArray and SubscriberNotificationArrayOutput values.
// You can construct a concrete instance of `SubscriberNotificationArrayInput` via:
//
//	SubscriberNotificationArray{ SubscriberNotificationArgs{...} }
type SubscriberNotificationArrayInput interface {
	pulumi.Input

	ToSubscriberNotificationArrayOutput() SubscriberNotificationArrayOutput
	ToSubscriberNotificationArrayOutputWithContext(context.Context) SubscriberNotificationArrayOutput
}

type SubscriberNotificationArray []SubscriberNotificationInput

func (SubscriberNotificationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SubscriberNotification)(nil)).Elem()
}

func (i SubscriberNotificationArray) ToSubscriberNotificationArrayOutput() SubscriberNotificationArrayOutput {
	return i.ToSubscriberNotificationArrayOutputWithContext(context.Background())
}

func (i SubscriberNotificationArray) ToSubscriberNotificationArrayOutputWithContext(ctx context.Context) SubscriberNotificationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriberNotificationArrayOutput)
}

// SubscriberNotificationMapInput is an input type that accepts SubscriberNotificationMap and SubscriberNotificationMapOutput values.
// You can construct a concrete instance of `SubscriberNotificationMapInput` via:
//
//	SubscriberNotificationMap{ "key": SubscriberNotificationArgs{...} }
type SubscriberNotificationMapInput interface {
	pulumi.Input

	ToSubscriberNotificationMapOutput() SubscriberNotificationMapOutput
	ToSubscriberNotificationMapOutputWithContext(context.Context) SubscriberNotificationMapOutput
}

type SubscriberNotificationMap map[string]SubscriberNotificationInput

func (SubscriberNotificationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SubscriberNotification)(nil)).Elem()
}

func (i SubscriberNotificationMap) ToSubscriberNotificationMapOutput() SubscriberNotificationMapOutput {
	return i.ToSubscriberNotificationMapOutputWithContext(context.Background())
}

func (i SubscriberNotificationMap) ToSubscriberNotificationMapOutputWithContext(ctx context.Context) SubscriberNotificationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriberNotificationMapOutput)
}

type SubscriberNotificationOutput struct{ *pulumi.OutputState }

func (SubscriberNotificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubscriberNotification)(nil)).Elem()
}

func (o SubscriberNotificationOutput) ToSubscriberNotificationOutput() SubscriberNotificationOutput {
	return o
}

func (o SubscriberNotificationOutput) ToSubscriberNotificationOutputWithContext(ctx context.Context) SubscriberNotificationOutput {
	return o
}

// Specify the configuration using which you want to create the subscriber notification..
func (o SubscriberNotificationOutput) Configuration() SubscriberNotificationConfigurationPtrOutput {
	return o.ApplyT(func(v *SubscriberNotification) SubscriberNotificationConfigurationPtrOutput { return v.Configuration }).(SubscriberNotificationConfigurationPtrOutput)
}

func (o SubscriberNotificationOutput) EndpointId() pulumi.StringOutput {
	return o.ApplyT(func(v *SubscriberNotification) pulumi.StringOutput { return v.EndpointId }).(pulumi.StringOutput)
}

// The subscriber ID for the notification subscription.
func (o SubscriberNotificationOutput) SubscriberId() pulumi.StringOutput {
	return o.ApplyT(func(v *SubscriberNotification) pulumi.StringOutput { return v.SubscriberId }).(pulumi.StringOutput)
}

type SubscriberNotificationArrayOutput struct{ *pulumi.OutputState }

func (SubscriberNotificationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SubscriberNotification)(nil)).Elem()
}

func (o SubscriberNotificationArrayOutput) ToSubscriberNotificationArrayOutput() SubscriberNotificationArrayOutput {
	return o
}

func (o SubscriberNotificationArrayOutput) ToSubscriberNotificationArrayOutputWithContext(ctx context.Context) SubscriberNotificationArrayOutput {
	return o
}

func (o SubscriberNotificationArrayOutput) Index(i pulumi.IntInput) SubscriberNotificationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SubscriberNotification {
		return vs[0].([]*SubscriberNotification)[vs[1].(int)]
	}).(SubscriberNotificationOutput)
}

type SubscriberNotificationMapOutput struct{ *pulumi.OutputState }

func (SubscriberNotificationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SubscriberNotification)(nil)).Elem()
}

func (o SubscriberNotificationMapOutput) ToSubscriberNotificationMapOutput() SubscriberNotificationMapOutput {
	return o
}

func (o SubscriberNotificationMapOutput) ToSubscriberNotificationMapOutputWithContext(ctx context.Context) SubscriberNotificationMapOutput {
	return o
}

func (o SubscriberNotificationMapOutput) MapIndex(k pulumi.StringInput) SubscriberNotificationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SubscriberNotification {
		return vs[0].(map[string]*SubscriberNotification)[vs[1].(string)]
	}).(SubscriberNotificationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriberNotificationInput)(nil)).Elem(), &SubscriberNotification{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriberNotificationArrayInput)(nil)).Elem(), SubscriberNotificationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriberNotificationMapInput)(nil)).Elem(), SubscriberNotificationMap{})
	pulumi.RegisterOutputType(SubscriberNotificationOutput{})
	pulumi.RegisterOutputType(SubscriberNotificationArrayOutput{})
	pulumi.RegisterOutputType(SubscriberNotificationMapOutput{})
}
