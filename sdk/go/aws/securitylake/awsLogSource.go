// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package securitylake

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing an Amazon Security Lake AWS Log Source.
//
// ## Example Usage
//
// ### Basic Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/securitylake"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := securitylake.NewAwsLogSource(ctx, "test", &securitylake.AwsLogSourceArgs{
//				Source: &securitylake.AwsLogSourceSourceArgs{
//					Accounts: pulumi.StringArray{
//						pulumi.String("123456789012"),
//					},
//					Regions: pulumi.StringArray{
//						pulumi.String("eu-west-1"),
//					},
//					SourceName:    pulumi.String("ROUTE53"),
//					SourceVersion: pulumi.String("1.0"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// Using `pulumi import`, import AWS log sources using the source name. For example:
//
// ```sh
// $ pulumi import aws:securitylake/awsLogSource:AwsLogSource example ROUTE53
// ```
type AwsLogSource struct {
	pulumi.CustomResourceState

	// Specify the natively-supported AWS service to add as a source in Security Lake.
	Source AwsLogSourceSourcePtrOutput `pulumi:"source"`
}

// NewAwsLogSource registers a new resource with the given unique name, arguments, and options.
func NewAwsLogSource(ctx *pulumi.Context,
	name string, args *AwsLogSourceArgs, opts ...pulumi.ResourceOption) (*AwsLogSource, error) {
	if args == nil {
		args = &AwsLogSourceArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AwsLogSource
	err := ctx.RegisterResource("aws:securitylake/awsLogSource:AwsLogSource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAwsLogSource gets an existing AwsLogSource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAwsLogSource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AwsLogSourceState, opts ...pulumi.ResourceOption) (*AwsLogSource, error) {
	var resource AwsLogSource
	err := ctx.ReadResource("aws:securitylake/awsLogSource:AwsLogSource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AwsLogSource resources.
type awsLogSourceState struct {
	// Specify the natively-supported AWS service to add as a source in Security Lake.
	Source *AwsLogSourceSource `pulumi:"source"`
}

type AwsLogSourceState struct {
	// Specify the natively-supported AWS service to add as a source in Security Lake.
	Source AwsLogSourceSourcePtrInput
}

func (AwsLogSourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*awsLogSourceState)(nil)).Elem()
}

type awsLogSourceArgs struct {
	// Specify the natively-supported AWS service to add as a source in Security Lake.
	Source *AwsLogSourceSource `pulumi:"source"`
}

// The set of arguments for constructing a AwsLogSource resource.
type AwsLogSourceArgs struct {
	// Specify the natively-supported AWS service to add as a source in Security Lake.
	Source AwsLogSourceSourcePtrInput
}

func (AwsLogSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*awsLogSourceArgs)(nil)).Elem()
}

type AwsLogSourceInput interface {
	pulumi.Input

	ToAwsLogSourceOutput() AwsLogSourceOutput
	ToAwsLogSourceOutputWithContext(ctx context.Context) AwsLogSourceOutput
}

func (*AwsLogSource) ElementType() reflect.Type {
	return reflect.TypeOf((**AwsLogSource)(nil)).Elem()
}

func (i *AwsLogSource) ToAwsLogSourceOutput() AwsLogSourceOutput {
	return i.ToAwsLogSourceOutputWithContext(context.Background())
}

func (i *AwsLogSource) ToAwsLogSourceOutputWithContext(ctx context.Context) AwsLogSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsLogSourceOutput)
}

// AwsLogSourceArrayInput is an input type that accepts AwsLogSourceArray and AwsLogSourceArrayOutput values.
// You can construct a concrete instance of `AwsLogSourceArrayInput` via:
//
//	AwsLogSourceArray{ AwsLogSourceArgs{...} }
type AwsLogSourceArrayInput interface {
	pulumi.Input

	ToAwsLogSourceArrayOutput() AwsLogSourceArrayOutput
	ToAwsLogSourceArrayOutputWithContext(context.Context) AwsLogSourceArrayOutput
}

type AwsLogSourceArray []AwsLogSourceInput

func (AwsLogSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AwsLogSource)(nil)).Elem()
}

func (i AwsLogSourceArray) ToAwsLogSourceArrayOutput() AwsLogSourceArrayOutput {
	return i.ToAwsLogSourceArrayOutputWithContext(context.Background())
}

func (i AwsLogSourceArray) ToAwsLogSourceArrayOutputWithContext(ctx context.Context) AwsLogSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsLogSourceArrayOutput)
}

// AwsLogSourceMapInput is an input type that accepts AwsLogSourceMap and AwsLogSourceMapOutput values.
// You can construct a concrete instance of `AwsLogSourceMapInput` via:
//
//	AwsLogSourceMap{ "key": AwsLogSourceArgs{...} }
type AwsLogSourceMapInput interface {
	pulumi.Input

	ToAwsLogSourceMapOutput() AwsLogSourceMapOutput
	ToAwsLogSourceMapOutputWithContext(context.Context) AwsLogSourceMapOutput
}

type AwsLogSourceMap map[string]AwsLogSourceInput

func (AwsLogSourceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AwsLogSource)(nil)).Elem()
}

func (i AwsLogSourceMap) ToAwsLogSourceMapOutput() AwsLogSourceMapOutput {
	return i.ToAwsLogSourceMapOutputWithContext(context.Background())
}

func (i AwsLogSourceMap) ToAwsLogSourceMapOutputWithContext(ctx context.Context) AwsLogSourceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsLogSourceMapOutput)
}

type AwsLogSourceOutput struct{ *pulumi.OutputState }

func (AwsLogSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AwsLogSource)(nil)).Elem()
}

func (o AwsLogSourceOutput) ToAwsLogSourceOutput() AwsLogSourceOutput {
	return o
}

func (o AwsLogSourceOutput) ToAwsLogSourceOutputWithContext(ctx context.Context) AwsLogSourceOutput {
	return o
}

// Specify the natively-supported AWS service to add as a source in Security Lake.
func (o AwsLogSourceOutput) Source() AwsLogSourceSourcePtrOutput {
	return o.ApplyT(func(v *AwsLogSource) AwsLogSourceSourcePtrOutput { return v.Source }).(AwsLogSourceSourcePtrOutput)
}

type AwsLogSourceArrayOutput struct{ *pulumi.OutputState }

func (AwsLogSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AwsLogSource)(nil)).Elem()
}

func (o AwsLogSourceArrayOutput) ToAwsLogSourceArrayOutput() AwsLogSourceArrayOutput {
	return o
}

func (o AwsLogSourceArrayOutput) ToAwsLogSourceArrayOutputWithContext(ctx context.Context) AwsLogSourceArrayOutput {
	return o
}

func (o AwsLogSourceArrayOutput) Index(i pulumi.IntInput) AwsLogSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AwsLogSource {
		return vs[0].([]*AwsLogSource)[vs[1].(int)]
	}).(AwsLogSourceOutput)
}

type AwsLogSourceMapOutput struct{ *pulumi.OutputState }

func (AwsLogSourceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AwsLogSource)(nil)).Elem()
}

func (o AwsLogSourceMapOutput) ToAwsLogSourceMapOutput() AwsLogSourceMapOutput {
	return o
}

func (o AwsLogSourceMapOutput) ToAwsLogSourceMapOutputWithContext(ctx context.Context) AwsLogSourceMapOutput {
	return o
}

func (o AwsLogSourceMapOutput) MapIndex(k pulumi.StringInput) AwsLogSourceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AwsLogSource {
		return vs[0].(map[string]*AwsLogSource)[vs[1].(string)]
	}).(AwsLogSourceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AwsLogSourceInput)(nil)).Elem(), &AwsLogSource{})
	pulumi.RegisterInputType(reflect.TypeOf((*AwsLogSourceArrayInput)(nil)).Elem(), AwsLogSourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AwsLogSourceMapInput)(nil)).Elem(), AwsLogSourceMap{})
	pulumi.RegisterOutputType(AwsLogSourceOutput{})
	pulumi.RegisterOutputType(AwsLogSourceArrayOutput{})
	pulumi.RegisterOutputType(AwsLogSourceMapOutput{})
}
