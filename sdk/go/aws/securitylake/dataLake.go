// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package securitylake

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing an AWS Security Lake Data Lake.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/securitylake"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := securitylake.NewDataLake(ctx, "example", &securitylake.DataLakeArgs{
//				MetaStoreManagerRoleArn: pulumi.Any(aws_iam_role.Meta_store_manager.Arn),
//				Configuration: &securitylake.DataLakeConfigurationArgs{
//					Region: pulumi.String("eu-west-1"),
//					EncryptionConfigurations: pulumi.MapArray{
//						pulumi.Map{
//							"kmsKeyId": pulumi.Any("S3_MANAGED_KEY"),
//						},
//					},
//					LifecycleConfiguration: &securitylake.DataLakeConfigurationLifecycleConfigurationArgs{
//						Transitions: securitylake.DataLakeConfigurationLifecycleConfigurationTransitionArray{
//							&securitylake.DataLakeConfigurationLifecycleConfigurationTransitionArgs{
//								Days:         pulumi.Int(31),
//								StorageClass: pulumi.String("STANDARD_IA"),
//							},
//							&securitylake.DataLakeConfigurationLifecycleConfigurationTransitionArgs{
//								Days:         pulumi.Int(80),
//								StorageClass: pulumi.String("ONEZONE_IA"),
//							},
//						},
//						Expiration: &securitylake.DataLakeConfigurationLifecycleConfigurationExpirationArgs{
//							Days: pulumi.Int(300),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/securitylake"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := securitylake.NewDataLake(ctx, "example", &securitylake.DataLakeArgs{
//				MetaStoreManagerRoleArn: pulumi.Any(aws_iam_role.Meta_store_manager.Arn),
//				Configuration: &securitylake.DataLakeConfigurationArgs{
//					Region: pulumi.String("eu-west-1"),
//					EncryptionConfigurations: pulumi.MapArray{
//						pulumi.Map{
//							"kmsKeyId": pulumi.Any("S3_MANAGED_KEY"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import Security Hub standards subscriptions using the standards subscription ARN. For example:
//
// ```sh
//
//	$ pulumi import aws:securitylake/dataLake:DataLake example arn:aws:securitylake:eu-west-1:123456789012:data-lake/default
//
// ```
type DataLake struct {
	pulumi.CustomResourceState

	// ARN of the Data Lake.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// Specify the Region or Regions that will contribute data to the rollup region.
	Configuration DataLakeConfigurationPtrOutput `pulumi:"configuration"`
	// The Amazon Resource Name (ARN) used to create and update the AWS Glue table. This table contains partitions generated by the ingestion and normalization of AWS log sources and custom sources.
	MetaStoreManagerRoleArn pulumi.StringOutput `pulumi:"metaStoreManagerRoleArn"`
	// The ARN for the Amazon Security Lake Amazon S3 bucket.
	S3BucketArn pulumi.StringOutput `pulumi:"s3BucketArn"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll  pulumi.StringMapOutput    `pulumi:"tagsAll"`
	Timeouts DataLakeTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewDataLake registers a new resource with the given unique name, arguments, and options.
func NewDataLake(ctx *pulumi.Context,
	name string, args *DataLakeArgs, opts ...pulumi.ResourceOption) (*DataLake, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MetaStoreManagerRoleArn == nil {
		return nil, errors.New("invalid value for required argument 'MetaStoreManagerRoleArn'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"tagsAll",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DataLake
	err := ctx.RegisterResource("aws:securitylake/dataLake:DataLake", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDataLake gets an existing DataLake resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataLake(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DataLakeState, opts ...pulumi.ResourceOption) (*DataLake, error) {
	var resource DataLake
	err := ctx.ReadResource("aws:securitylake/dataLake:DataLake", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DataLake resources.
type dataLakeState struct {
	// ARN of the Data Lake.
	Arn *string `pulumi:"arn"`
	// Specify the Region or Regions that will contribute data to the rollup region.
	Configuration *DataLakeConfiguration `pulumi:"configuration"`
	// The Amazon Resource Name (ARN) used to create and update the AWS Glue table. This table contains partitions generated by the ingestion and normalization of AWS log sources and custom sources.
	MetaStoreManagerRoleArn *string `pulumi:"metaStoreManagerRoleArn"`
	// The ARN for the Amazon Security Lake Amazon S3 bucket.
	S3BucketArn *string `pulumi:"s3BucketArn"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll  map[string]string `pulumi:"tagsAll"`
	Timeouts *DataLakeTimeouts `pulumi:"timeouts"`
}

type DataLakeState struct {
	// ARN of the Data Lake.
	Arn pulumi.StringPtrInput
	// Specify the Region or Regions that will contribute data to the rollup region.
	Configuration DataLakeConfigurationPtrInput
	// The Amazon Resource Name (ARN) used to create and update the AWS Glue table. This table contains partitions generated by the ingestion and normalization of AWS log sources and custom sources.
	MetaStoreManagerRoleArn pulumi.StringPtrInput
	// The ARN for the Amazon Security Lake Amazon S3 bucket.
	S3BucketArn pulumi.StringPtrInput
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll  pulumi.StringMapInput
	Timeouts DataLakeTimeoutsPtrInput
}

func (DataLakeState) ElementType() reflect.Type {
	return reflect.TypeOf((*dataLakeState)(nil)).Elem()
}

type dataLakeArgs struct {
	// Specify the Region or Regions that will contribute data to the rollup region.
	Configuration *DataLakeConfiguration `pulumi:"configuration"`
	// The Amazon Resource Name (ARN) used to create and update the AWS Glue table. This table contains partitions generated by the ingestion and normalization of AWS log sources and custom sources.
	MetaStoreManagerRoleArn string `pulumi:"metaStoreManagerRoleArn"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags     map[string]string `pulumi:"tags"`
	Timeouts *DataLakeTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a DataLake resource.
type DataLakeArgs struct {
	// Specify the Region or Regions that will contribute data to the rollup region.
	Configuration DataLakeConfigurationPtrInput
	// The Amazon Resource Name (ARN) used to create and update the AWS Glue table. This table contains partitions generated by the ingestion and normalization of AWS log sources and custom sources.
	MetaStoreManagerRoleArn pulumi.StringInput
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags     pulumi.StringMapInput
	Timeouts DataLakeTimeoutsPtrInput
}

func (DataLakeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dataLakeArgs)(nil)).Elem()
}

type DataLakeInput interface {
	pulumi.Input

	ToDataLakeOutput() DataLakeOutput
	ToDataLakeOutputWithContext(ctx context.Context) DataLakeOutput
}

func (*DataLake) ElementType() reflect.Type {
	return reflect.TypeOf((**DataLake)(nil)).Elem()
}

func (i *DataLake) ToDataLakeOutput() DataLakeOutput {
	return i.ToDataLakeOutputWithContext(context.Background())
}

func (i *DataLake) ToDataLakeOutputWithContext(ctx context.Context) DataLakeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataLakeOutput)
}

// DataLakeArrayInput is an input type that accepts DataLakeArray and DataLakeArrayOutput values.
// You can construct a concrete instance of `DataLakeArrayInput` via:
//
//	DataLakeArray{ DataLakeArgs{...} }
type DataLakeArrayInput interface {
	pulumi.Input

	ToDataLakeArrayOutput() DataLakeArrayOutput
	ToDataLakeArrayOutputWithContext(context.Context) DataLakeArrayOutput
}

type DataLakeArray []DataLakeInput

func (DataLakeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DataLake)(nil)).Elem()
}

func (i DataLakeArray) ToDataLakeArrayOutput() DataLakeArrayOutput {
	return i.ToDataLakeArrayOutputWithContext(context.Background())
}

func (i DataLakeArray) ToDataLakeArrayOutputWithContext(ctx context.Context) DataLakeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataLakeArrayOutput)
}

// DataLakeMapInput is an input type that accepts DataLakeMap and DataLakeMapOutput values.
// You can construct a concrete instance of `DataLakeMapInput` via:
//
//	DataLakeMap{ "key": DataLakeArgs{...} }
type DataLakeMapInput interface {
	pulumi.Input

	ToDataLakeMapOutput() DataLakeMapOutput
	ToDataLakeMapOutputWithContext(context.Context) DataLakeMapOutput
}

type DataLakeMap map[string]DataLakeInput

func (DataLakeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DataLake)(nil)).Elem()
}

func (i DataLakeMap) ToDataLakeMapOutput() DataLakeMapOutput {
	return i.ToDataLakeMapOutputWithContext(context.Background())
}

func (i DataLakeMap) ToDataLakeMapOutputWithContext(ctx context.Context) DataLakeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataLakeMapOutput)
}

type DataLakeOutput struct{ *pulumi.OutputState }

func (DataLakeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataLake)(nil)).Elem()
}

func (o DataLakeOutput) ToDataLakeOutput() DataLakeOutput {
	return o
}

func (o DataLakeOutput) ToDataLakeOutputWithContext(ctx context.Context) DataLakeOutput {
	return o
}

// ARN of the Data Lake.
func (o DataLakeOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *DataLake) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// Specify the Region or Regions that will contribute data to the rollup region.
func (o DataLakeOutput) Configuration() DataLakeConfigurationPtrOutput {
	return o.ApplyT(func(v *DataLake) DataLakeConfigurationPtrOutput { return v.Configuration }).(DataLakeConfigurationPtrOutput)
}

// The Amazon Resource Name (ARN) used to create and update the AWS Glue table. This table contains partitions generated by the ingestion and normalization of AWS log sources and custom sources.
func (o DataLakeOutput) MetaStoreManagerRoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v *DataLake) pulumi.StringOutput { return v.MetaStoreManagerRoleArn }).(pulumi.StringOutput)
}

// The ARN for the Amazon Security Lake Amazon S3 bucket.
func (o DataLakeOutput) S3BucketArn() pulumi.StringOutput {
	return o.ApplyT(func(v *DataLake) pulumi.StringOutput { return v.S3BucketArn }).(pulumi.StringOutput)
}

// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o DataLakeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DataLake) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
//
// Deprecated: Please use `tags` instead.
func (o DataLakeOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DataLake) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o DataLakeOutput) Timeouts() DataLakeTimeoutsPtrOutput {
	return o.ApplyT(func(v *DataLake) DataLakeTimeoutsPtrOutput { return v.Timeouts }).(DataLakeTimeoutsPtrOutput)
}

type DataLakeArrayOutput struct{ *pulumi.OutputState }

func (DataLakeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DataLake)(nil)).Elem()
}

func (o DataLakeArrayOutput) ToDataLakeArrayOutput() DataLakeArrayOutput {
	return o
}

func (o DataLakeArrayOutput) ToDataLakeArrayOutputWithContext(ctx context.Context) DataLakeArrayOutput {
	return o
}

func (o DataLakeArrayOutput) Index(i pulumi.IntInput) DataLakeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DataLake {
		return vs[0].([]*DataLake)[vs[1].(int)]
	}).(DataLakeOutput)
}

type DataLakeMapOutput struct{ *pulumi.OutputState }

func (DataLakeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DataLake)(nil)).Elem()
}

func (o DataLakeMapOutput) ToDataLakeMapOutput() DataLakeMapOutput {
	return o
}

func (o DataLakeMapOutput) ToDataLakeMapOutputWithContext(ctx context.Context) DataLakeMapOutput {
	return o
}

func (o DataLakeMapOutput) MapIndex(k pulumi.StringInput) DataLakeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DataLake {
		return vs[0].(map[string]*DataLake)[vs[1].(string)]
	}).(DataLakeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DataLakeInput)(nil)).Elem(), &DataLake{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataLakeArrayInput)(nil)).Elem(), DataLakeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataLakeMapInput)(nil)).Elem(), DataLakeMap{})
	pulumi.RegisterOutputType(DataLakeOutput{})
	pulumi.RegisterOutputType(DataLakeArrayOutput{})
	pulumi.RegisterOutputType(DataLakeMapOutput{})
}
