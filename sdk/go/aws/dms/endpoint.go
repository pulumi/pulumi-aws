// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dms

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Endpoint struct {
	pulumi.CustomResourceState

	CertificateArn              pulumi.StringOutput                    `pulumi:"certificateArn"`
	DatabaseName                pulumi.StringPtrOutput                 `pulumi:"databaseName"`
	ElasticsearchSettings       EndpointElasticsearchSettingsPtrOutput `pulumi:"elasticsearchSettings"`
	EndpointArn                 pulumi.StringOutput                    `pulumi:"endpointArn"`
	EndpointId                  pulumi.StringOutput                    `pulumi:"endpointId"`
	EndpointType                pulumi.StringOutput                    `pulumi:"endpointType"`
	EngineName                  pulumi.StringOutput                    `pulumi:"engineName"`
	ExtraConnectionAttributes   pulumi.StringOutput                    `pulumi:"extraConnectionAttributes"`
	KafkaSettings               EndpointKafkaSettingsPtrOutput         `pulumi:"kafkaSettings"`
	KinesisSettings             EndpointKinesisSettingsPtrOutput       `pulumi:"kinesisSettings"`
	KmsKeyArn                   pulumi.StringOutput                    `pulumi:"kmsKeyArn"`
	MongodbSettings             EndpointMongodbSettingsPtrOutput       `pulumi:"mongodbSettings"`
	Password                    pulumi.StringPtrOutput                 `pulumi:"password"`
	Port                        pulumi.IntPtrOutput                    `pulumi:"port"`
	RedisSettings               EndpointRedisSettingsPtrOutput         `pulumi:"redisSettings"`
	RedshiftSettings            EndpointRedshiftSettingsOutput         `pulumi:"redshiftSettings"`
	S3Settings                  EndpointS3SettingsPtrOutput            `pulumi:"s3Settings"`
	SecretsManagerAccessRoleArn pulumi.StringPtrOutput                 `pulumi:"secretsManagerAccessRoleArn"`
	SecretsManagerArn           pulumi.StringPtrOutput                 `pulumi:"secretsManagerArn"`
	ServerName                  pulumi.StringPtrOutput                 `pulumi:"serverName"`
	ServiceAccessRole           pulumi.StringPtrOutput                 `pulumi:"serviceAccessRole"`
	SslMode                     pulumi.StringOutput                    `pulumi:"sslMode"`
	Tags                        pulumi.StringMapOutput                 `pulumi:"tags"`
	TagsAll                     pulumi.StringMapOutput                 `pulumi:"tagsAll"`
	Username                    pulumi.StringPtrOutput                 `pulumi:"username"`
}

// NewEndpoint registers a new resource with the given unique name, arguments, and options.
func NewEndpoint(ctx *pulumi.Context,
	name string, args *EndpointArgs, opts ...pulumi.ResourceOption) (*Endpoint, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EndpointId == nil {
		return nil, errors.New("invalid value for required argument 'EndpointId'")
	}
	if args.EndpointType == nil {
		return nil, errors.New("invalid value for required argument 'EndpointType'")
	}
	if args.EngineName == nil {
		return nil, errors.New("invalid value for required argument 'EngineName'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	var resource Endpoint
	err := ctx.RegisterResource("aws:dms/endpoint:Endpoint", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEndpoint gets an existing Endpoint resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEndpoint(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EndpointState, opts ...pulumi.ResourceOption) (*Endpoint, error) {
	var resource Endpoint
	err := ctx.ReadResource("aws:dms/endpoint:Endpoint", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Endpoint resources.
type endpointState struct {
	CertificateArn              *string                        `pulumi:"certificateArn"`
	DatabaseName                *string                        `pulumi:"databaseName"`
	ElasticsearchSettings       *EndpointElasticsearchSettings `pulumi:"elasticsearchSettings"`
	EndpointArn                 *string                        `pulumi:"endpointArn"`
	EndpointId                  *string                        `pulumi:"endpointId"`
	EndpointType                *string                        `pulumi:"endpointType"`
	EngineName                  *string                        `pulumi:"engineName"`
	ExtraConnectionAttributes   *string                        `pulumi:"extraConnectionAttributes"`
	KafkaSettings               *EndpointKafkaSettings         `pulumi:"kafkaSettings"`
	KinesisSettings             *EndpointKinesisSettings       `pulumi:"kinesisSettings"`
	KmsKeyArn                   *string                        `pulumi:"kmsKeyArn"`
	MongodbSettings             *EndpointMongodbSettings       `pulumi:"mongodbSettings"`
	Password                    *string                        `pulumi:"password"`
	Port                        *int                           `pulumi:"port"`
	RedisSettings               *EndpointRedisSettings         `pulumi:"redisSettings"`
	RedshiftSettings            *EndpointRedshiftSettings      `pulumi:"redshiftSettings"`
	S3Settings                  *EndpointS3Settings            `pulumi:"s3Settings"`
	SecretsManagerAccessRoleArn *string                        `pulumi:"secretsManagerAccessRoleArn"`
	SecretsManagerArn           *string                        `pulumi:"secretsManagerArn"`
	ServerName                  *string                        `pulumi:"serverName"`
	ServiceAccessRole           *string                        `pulumi:"serviceAccessRole"`
	SslMode                     *string                        `pulumi:"sslMode"`
	Tags                        map[string]string              `pulumi:"tags"`
	TagsAll                     map[string]string              `pulumi:"tagsAll"`
	Username                    *string                        `pulumi:"username"`
}

type EndpointState struct {
	CertificateArn              pulumi.StringPtrInput
	DatabaseName                pulumi.StringPtrInput
	ElasticsearchSettings       EndpointElasticsearchSettingsPtrInput
	EndpointArn                 pulumi.StringPtrInput
	EndpointId                  pulumi.StringPtrInput
	EndpointType                pulumi.StringPtrInput
	EngineName                  pulumi.StringPtrInput
	ExtraConnectionAttributes   pulumi.StringPtrInput
	KafkaSettings               EndpointKafkaSettingsPtrInput
	KinesisSettings             EndpointKinesisSettingsPtrInput
	KmsKeyArn                   pulumi.StringPtrInput
	MongodbSettings             EndpointMongodbSettingsPtrInput
	Password                    pulumi.StringPtrInput
	Port                        pulumi.IntPtrInput
	RedisSettings               EndpointRedisSettingsPtrInput
	RedshiftSettings            EndpointRedshiftSettingsPtrInput
	S3Settings                  EndpointS3SettingsPtrInput
	SecretsManagerAccessRoleArn pulumi.StringPtrInput
	SecretsManagerArn           pulumi.StringPtrInput
	ServerName                  pulumi.StringPtrInput
	ServiceAccessRole           pulumi.StringPtrInput
	SslMode                     pulumi.StringPtrInput
	Tags                        pulumi.StringMapInput
	TagsAll                     pulumi.StringMapInput
	Username                    pulumi.StringPtrInput
}

func (EndpointState) ElementType() reflect.Type {
	return reflect.TypeOf((*endpointState)(nil)).Elem()
}

type endpointArgs struct {
	CertificateArn              *string                        `pulumi:"certificateArn"`
	DatabaseName                *string                        `pulumi:"databaseName"`
	ElasticsearchSettings       *EndpointElasticsearchSettings `pulumi:"elasticsearchSettings"`
	EndpointId                  string                         `pulumi:"endpointId"`
	EndpointType                string                         `pulumi:"endpointType"`
	EngineName                  string                         `pulumi:"engineName"`
	ExtraConnectionAttributes   *string                        `pulumi:"extraConnectionAttributes"`
	KafkaSettings               *EndpointKafkaSettings         `pulumi:"kafkaSettings"`
	KinesisSettings             *EndpointKinesisSettings       `pulumi:"kinesisSettings"`
	KmsKeyArn                   *string                        `pulumi:"kmsKeyArn"`
	MongodbSettings             *EndpointMongodbSettings       `pulumi:"mongodbSettings"`
	Password                    *string                        `pulumi:"password"`
	Port                        *int                           `pulumi:"port"`
	RedisSettings               *EndpointRedisSettings         `pulumi:"redisSettings"`
	RedshiftSettings            *EndpointRedshiftSettings      `pulumi:"redshiftSettings"`
	S3Settings                  *EndpointS3Settings            `pulumi:"s3Settings"`
	SecretsManagerAccessRoleArn *string                        `pulumi:"secretsManagerAccessRoleArn"`
	SecretsManagerArn           *string                        `pulumi:"secretsManagerArn"`
	ServerName                  *string                        `pulumi:"serverName"`
	ServiceAccessRole           *string                        `pulumi:"serviceAccessRole"`
	SslMode                     *string                        `pulumi:"sslMode"`
	Tags                        map[string]string              `pulumi:"tags"`
	Username                    *string                        `pulumi:"username"`
}

// The set of arguments for constructing a Endpoint resource.
type EndpointArgs struct {
	CertificateArn              pulumi.StringPtrInput
	DatabaseName                pulumi.StringPtrInput
	ElasticsearchSettings       EndpointElasticsearchSettingsPtrInput
	EndpointId                  pulumi.StringInput
	EndpointType                pulumi.StringInput
	EngineName                  pulumi.StringInput
	ExtraConnectionAttributes   pulumi.StringPtrInput
	KafkaSettings               EndpointKafkaSettingsPtrInput
	KinesisSettings             EndpointKinesisSettingsPtrInput
	KmsKeyArn                   pulumi.StringPtrInput
	MongodbSettings             EndpointMongodbSettingsPtrInput
	Password                    pulumi.StringPtrInput
	Port                        pulumi.IntPtrInput
	RedisSettings               EndpointRedisSettingsPtrInput
	RedshiftSettings            EndpointRedshiftSettingsPtrInput
	S3Settings                  EndpointS3SettingsPtrInput
	SecretsManagerAccessRoleArn pulumi.StringPtrInput
	SecretsManagerArn           pulumi.StringPtrInput
	ServerName                  pulumi.StringPtrInput
	ServiceAccessRole           pulumi.StringPtrInput
	SslMode                     pulumi.StringPtrInput
	Tags                        pulumi.StringMapInput
	Username                    pulumi.StringPtrInput
}

func (EndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*endpointArgs)(nil)).Elem()
}

type EndpointInput interface {
	pulumi.Input

	ToEndpointOutput() EndpointOutput
	ToEndpointOutputWithContext(ctx context.Context) EndpointOutput
}

func (*Endpoint) ElementType() reflect.Type {
	return reflect.TypeOf((**Endpoint)(nil)).Elem()
}

func (i *Endpoint) ToEndpointOutput() EndpointOutput {
	return i.ToEndpointOutputWithContext(context.Background())
}

func (i *Endpoint) ToEndpointOutputWithContext(ctx context.Context) EndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointOutput)
}

// EndpointArrayInput is an input type that accepts EndpointArray and EndpointArrayOutput values.
// You can construct a concrete instance of `EndpointArrayInput` via:
//
//	EndpointArray{ EndpointArgs{...} }
type EndpointArrayInput interface {
	pulumi.Input

	ToEndpointArrayOutput() EndpointArrayOutput
	ToEndpointArrayOutputWithContext(context.Context) EndpointArrayOutput
}

type EndpointArray []EndpointInput

func (EndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Endpoint)(nil)).Elem()
}

func (i EndpointArray) ToEndpointArrayOutput() EndpointArrayOutput {
	return i.ToEndpointArrayOutputWithContext(context.Background())
}

func (i EndpointArray) ToEndpointArrayOutputWithContext(ctx context.Context) EndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointArrayOutput)
}

// EndpointMapInput is an input type that accepts EndpointMap and EndpointMapOutput values.
// You can construct a concrete instance of `EndpointMapInput` via:
//
//	EndpointMap{ "key": EndpointArgs{...} }
type EndpointMapInput interface {
	pulumi.Input

	ToEndpointMapOutput() EndpointMapOutput
	ToEndpointMapOutputWithContext(context.Context) EndpointMapOutput
}

type EndpointMap map[string]EndpointInput

func (EndpointMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Endpoint)(nil)).Elem()
}

func (i EndpointMap) ToEndpointMapOutput() EndpointMapOutput {
	return i.ToEndpointMapOutputWithContext(context.Background())
}

func (i EndpointMap) ToEndpointMapOutputWithContext(ctx context.Context) EndpointMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointMapOutput)
}

type EndpointOutput struct{ *pulumi.OutputState }

func (EndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Endpoint)(nil)).Elem()
}

func (o EndpointOutput) ToEndpointOutput() EndpointOutput {
	return o
}

func (o EndpointOutput) ToEndpointOutputWithContext(ctx context.Context) EndpointOutput {
	return o
}

func (o EndpointOutput) CertificateArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.StringOutput { return v.CertificateArn }).(pulumi.StringOutput)
}

func (o EndpointOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.StringPtrOutput { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

func (o EndpointOutput) ElasticsearchSettings() EndpointElasticsearchSettingsPtrOutput {
	return o.ApplyT(func(v *Endpoint) EndpointElasticsearchSettingsPtrOutput { return v.ElasticsearchSettings }).(EndpointElasticsearchSettingsPtrOutput)
}

func (o EndpointOutput) EndpointArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.StringOutput { return v.EndpointArn }).(pulumi.StringOutput)
}

func (o EndpointOutput) EndpointId() pulumi.StringOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.StringOutput { return v.EndpointId }).(pulumi.StringOutput)
}

func (o EndpointOutput) EndpointType() pulumi.StringOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.StringOutput { return v.EndpointType }).(pulumi.StringOutput)
}

func (o EndpointOutput) EngineName() pulumi.StringOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.StringOutput { return v.EngineName }).(pulumi.StringOutput)
}

func (o EndpointOutput) ExtraConnectionAttributes() pulumi.StringOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.StringOutput { return v.ExtraConnectionAttributes }).(pulumi.StringOutput)
}

func (o EndpointOutput) KafkaSettings() EndpointKafkaSettingsPtrOutput {
	return o.ApplyT(func(v *Endpoint) EndpointKafkaSettingsPtrOutput { return v.KafkaSettings }).(EndpointKafkaSettingsPtrOutput)
}

func (o EndpointOutput) KinesisSettings() EndpointKinesisSettingsPtrOutput {
	return o.ApplyT(func(v *Endpoint) EndpointKinesisSettingsPtrOutput { return v.KinesisSettings }).(EndpointKinesisSettingsPtrOutput)
}

func (o EndpointOutput) KmsKeyArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.StringOutput { return v.KmsKeyArn }).(pulumi.StringOutput)
}

func (o EndpointOutput) MongodbSettings() EndpointMongodbSettingsPtrOutput {
	return o.ApplyT(func(v *Endpoint) EndpointMongodbSettingsPtrOutput { return v.MongodbSettings }).(EndpointMongodbSettingsPtrOutput)
}

func (o EndpointOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

func (o EndpointOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.IntPtrOutput { return v.Port }).(pulumi.IntPtrOutput)
}

func (o EndpointOutput) RedisSettings() EndpointRedisSettingsPtrOutput {
	return o.ApplyT(func(v *Endpoint) EndpointRedisSettingsPtrOutput { return v.RedisSettings }).(EndpointRedisSettingsPtrOutput)
}

func (o EndpointOutput) RedshiftSettings() EndpointRedshiftSettingsOutput {
	return o.ApplyT(func(v *Endpoint) EndpointRedshiftSettingsOutput { return v.RedshiftSettings }).(EndpointRedshiftSettingsOutput)
}

func (o EndpointOutput) S3Settings() EndpointS3SettingsPtrOutput {
	return o.ApplyT(func(v *Endpoint) EndpointS3SettingsPtrOutput { return v.S3Settings }).(EndpointS3SettingsPtrOutput)
}

func (o EndpointOutput) SecretsManagerAccessRoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.StringPtrOutput { return v.SecretsManagerAccessRoleArn }).(pulumi.StringPtrOutput)
}

func (o EndpointOutput) SecretsManagerArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.StringPtrOutput { return v.SecretsManagerArn }).(pulumi.StringPtrOutput)
}

func (o EndpointOutput) ServerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.StringPtrOutput { return v.ServerName }).(pulumi.StringPtrOutput)
}

func (o EndpointOutput) ServiceAccessRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.StringPtrOutput { return v.ServiceAccessRole }).(pulumi.StringPtrOutput)
}

func (o EndpointOutput) SslMode() pulumi.StringOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.StringOutput { return v.SslMode }).(pulumi.StringOutput)
}

func (o EndpointOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o EndpointOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o EndpointOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.StringPtrOutput { return v.Username }).(pulumi.StringPtrOutput)
}

type EndpointArrayOutput struct{ *pulumi.OutputState }

func (EndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Endpoint)(nil)).Elem()
}

func (o EndpointArrayOutput) ToEndpointArrayOutput() EndpointArrayOutput {
	return o
}

func (o EndpointArrayOutput) ToEndpointArrayOutputWithContext(ctx context.Context) EndpointArrayOutput {
	return o
}

func (o EndpointArrayOutput) Index(i pulumi.IntInput) EndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Endpoint {
		return vs[0].([]*Endpoint)[vs[1].(int)]
	}).(EndpointOutput)
}

type EndpointMapOutput struct{ *pulumi.OutputState }

func (EndpointMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Endpoint)(nil)).Elem()
}

func (o EndpointMapOutput) ToEndpointMapOutput() EndpointMapOutput {
	return o
}

func (o EndpointMapOutput) ToEndpointMapOutputWithContext(ctx context.Context) EndpointMapOutput {
	return o
}

func (o EndpointMapOutput) MapIndex(k pulumi.StringInput) EndpointOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Endpoint {
		return vs[0].(map[string]*Endpoint)[vs[1].(string)]
	}).(EndpointOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointInput)(nil)).Elem(), &Endpoint{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointArrayInput)(nil)).Elem(), EndpointArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointMapInput)(nil)).Elem(), EndpointMap{})
	pulumi.RegisterOutputType(EndpointOutput{})
	pulumi.RegisterOutputType(EndpointArrayOutput{})
	pulumi.RegisterOutputType(EndpointMapOutput{})
}
