// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dms

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a DMS (Data Migration Service) S3 endpoint resource. DMS S3 endpoints can be created, updated, deleted, and imported.
//
// > **Note:** AWS is deprecating `extraConnectionAttributes`, such as used with `dms.Endpoint`. This resource is an alternative to `dms.Endpoint` and does not use `extraConnectionAttributes`. (AWS currently includes `extraConnectionAttributes` in the raw responses to the AWS Provider requests and so they may be visible in the logs.)
//
// > **Note:** Some of this resource's arguments have default values that come from the AWS Provider. Other default values are provided by AWS and subject to change without notice. When relying on AWS defaults, the provider state will often have a zero value. For example, the AWS Provider does not provide a default for `cdcMaxBatchInterval` but the AWS default is `60` (seconds). However, the provider state will show `0` since this is the value return by AWS when no value is present. Below, we aim to flag the defaults that come from AWS (_e.g._, "AWS default...").
//
// ## Example Usage
// ### Minimal Configuration
//
// This is the minimal configuration for an `dms.S3Endpoint`. This endpoint will rely on the AWS Provider and AWS defaults.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/dms"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dms.NewS3Endpoint(ctx, "example", &dms.S3EndpointArgs{
//				EndpointId:           pulumi.String("donnedtipi"),
//				EndpointType:         pulumi.String("target"),
//				BucketName:           pulumi.String("beckut_name"),
//				ServiceAccessRoleArn: pulumi.Any(aws_iam_role.Example.Arn),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				aws_iam_role_policy.Example,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Complete Configuration
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/dms"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dms.NewS3Endpoint(ctx, "example", &dms.S3EndpointArgs{
//				EndpointId:   pulumi.String("donnedtipi"),
//				EndpointType: pulumi.String("target"),
//				SslMode:      pulumi.String("none"),
//				Tags: pulumi.StringMap{
//					"Name":   pulumi.String("donnedtipi"),
//					"Update": pulumi.String("to-update"),
//					"Remove": pulumi.String("to-remove"),
//				},
//				AddColumnName:                        pulumi.Bool(true),
//				AddTrailingPaddingCharacter:          pulumi.Bool(false),
//				BucketFolder:                         pulumi.String("folder"),
//				BucketName:                           pulumi.String("bucket_name"),
//				CannedAclForObjects:                  pulumi.String("private"),
//				CdcInsertsAndUpdates:                 pulumi.Bool(true),
//				CdcInsertsOnly:                       pulumi.Bool(false),
//				CdcMaxBatchInterval:                  pulumi.Int(100),
//				CdcMinFileSize:                       pulumi.Int(16),
//				CdcPath:                              pulumi.String("cdc/path"),
//				CompressionType:                      pulumi.String("GZIP"),
//				CsvDelimiter:                         pulumi.String(";"),
//				CsvNoSupValue:                        pulumi.String("x"),
//				CsvNullValue:                         pulumi.String("?"),
//				CsvRowDelimiter:                      pulumi.String("\\r\\n"),
//				DataFormat:                           pulumi.String("parquet"),
//				DataPageSize:                         pulumi.Int(1100000),
//				DatePartitionDelimiter:               pulumi.String("UNDERSCORE"),
//				DatePartitionEnabled:                 pulumi.Bool(true),
//				DatePartitionSequence:                pulumi.String("yyyymmddhh"),
//				DatePartitionTimezone:                pulumi.String("Asia/Seoul"),
//				DictPageSizeLimit:                    pulumi.Int(1000000),
//				EnableStatistics:                     pulumi.Bool(false),
//				EncodingType:                         pulumi.String("plain"),
//				EncryptionMode:                       pulumi.String("SSE_S3"),
//				ExpectedBucketOwner:                  pulumi.Any(data.Aws_caller_identity.Current.Account_id),
//				ExternalTableDefinition:              pulumi.String("etd"),
//				IgnoreHeaderRows:                     pulumi.Int(1),
//				IncludeOpForFullLoad:                 pulumi.Bool(true),
//				MaxFileSize:                          pulumi.Int(1000000),
//				ParquetTimestampInMillisecond:        pulumi.Bool(true),
//				ParquetVersion:                       pulumi.String("parquet-2-0"),
//				PreserveTransactions:                 pulumi.Bool(false),
//				Rfc4180:                              pulumi.Bool(false),
//				RowGroupLength:                       pulumi.Int(11000),
//				ServerSideEncryptionKmsKeyId:         pulumi.Any(aws_kms_key.Example.Arn),
//				ServiceAccessRoleArn:                 pulumi.Any(aws_iam_role.Example.Arn),
//				TimestampColumnName:                  pulumi.String("tx_commit_time"),
//				UseCsvNoSupValue:                     pulumi.Bool(false),
//				UseTaskStartTimeForFullLoadTimestamp: pulumi.Bool(true),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				aws_iam_role_policy.Example,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Endpoints can be imported using the `endpoint_id`, e.g.,
//
// ```sh
//
//	$ pulumi import aws:dms/s3Endpoint:S3Endpoint example example-dms-endpoint-tf
//
// ```
type S3Endpoint struct {
	pulumi.CustomResourceState

	// Whether to add column name information to the .csv output file. Default is `false`.
	AddColumnName pulumi.BoolPtrOutput `pulumi:"addColumnName"`
	// Whether to add padding. Default is `false`. (Ignored for source endpoints.)
	AddTrailingPaddingCharacter pulumi.BoolPtrOutput `pulumi:"addTrailingPaddingCharacter"`
	// S3 object prefix.
	BucketFolder pulumi.StringPtrOutput `pulumi:"bucketFolder"`
	// S3 bucket name.
	BucketName pulumi.StringOutput `pulumi:"bucketName"`
	// Predefined (canned) access control list for objects created in an S3 bucket. Valid values include `NONE`, `PRIVATE`, `PUBLIC_READ`, `PUBLIC_READ_WRITE`, `AUTHENTICATED_READ`, `AWS_EXEC_READ`, `BUCKET_OWNER_READ`, and `BUCKET_OWNER_FULL_CONTROL`. (AWS default is `NONE`.)
	CannedAclForObjects pulumi.StringPtrOutput `pulumi:"cannedAclForObjects"`
	// Whether to write insert and update operations to .csv or .parquet output files. Default is `false`.
	CdcInsertsAndUpdates pulumi.BoolPtrOutput `pulumi:"cdcInsertsAndUpdates"`
	// Whether to write insert operations to .csv or .parquet output files. Default is `false`.
	CdcInsertsOnly pulumi.BoolPtrOutput `pulumi:"cdcInsertsOnly"`
	// Maximum length of the interval, defined in seconds, after which to output a file to Amazon S3. (AWS default is `60`.)
	CdcMaxBatchInterval pulumi.IntPtrOutput `pulumi:"cdcMaxBatchInterval"`
	// Minimum file size condition as defined in kilobytes to output a file to Amazon S3. (AWS default is 32000 KB.)
	CdcMinFileSize pulumi.IntPtrOutput `pulumi:"cdcMinFileSize"`
	// Folder path of CDC files. If `cdcPath` is set, AWS DMS reads CDC files from this path and replicates the data changes to the target endpoint. Supported in AWS DMS versions 3.4.2 and later.
	CdcPath pulumi.StringPtrOutput `pulumi:"cdcPath"`
	// ARN for the certificate.
	CertificateArn pulumi.StringOutput `pulumi:"certificateArn"`
	// Set to compress target files. Valid values are `GZIP` and `NONE`. Default is `NONE`. (Ignored for source endpoints.)
	CompressionType pulumi.StringPtrOutput `pulumi:"compressionType"`
	// Delimiter used to separate columns in the source files. Default is `,`.
	CsvDelimiter pulumi.StringPtrOutput `pulumi:"csvDelimiter"`
	// Only applies if output files for a CDC load are written in .csv format. If `useCsvNoSupValue` is set to `true`, string to use for all columns not included in the supplemental log. If you do not specify a string value, DMS uses the null value for these columns regardless of `useCsvNoSupValue`. (Ignored for source endpoints.)
	CsvNoSupValue pulumi.StringPtrOutput `pulumi:"csvNoSupValue"`
	// String to as null when writing to the target. (AWS default is `NULL`.)
	CsvNullValue pulumi.StringPtrOutput `pulumi:"csvNullValue"`
	// Delimiter used to separate rows in the source files. Default is newline (_i.e._, `\n`).
	CsvRowDelimiter pulumi.StringPtrOutput `pulumi:"csvRowDelimiter"`
	// Output format for the files that AWS DMS uses to create S3 objects. Valid values are `csv` and `parquet`.  (Ignored for source endpoints -- only `csv` is valid.)
	DataFormat pulumi.StringPtrOutput `pulumi:"dataFormat"`
	// Size of one data page in bytes. (AWS default is 1 MiB, _i.e._, `1048576`.)
	DataPageSize pulumi.IntPtrOutput `pulumi:"dataPageSize"`
	// Date separating delimiter to use during folder partitioning. Valid values are `SLASH`, `UNDERSCORE`, `DASH`, and `NONE`. (AWS default is `SLASH`.) (Ignored for source endpoints.)
	DatePartitionDelimiter pulumi.StringPtrOutput `pulumi:"datePartitionDelimiter"`
	// Partition S3 bucket folders based on transaction commit dates. Default is `false`. (Ignored for source endpoints.)
	DatePartitionEnabled pulumi.BoolPtrOutput `pulumi:"datePartitionEnabled"`
	// Date format to use during folder partitioning. Use this parameter when `datePartitionEnabled` is set to true. Valid values are `YYYYMMDD`, `YYYYMMDDHH`, `YYYYMM`, `MMYYYYDD`, and `DDMMYYYY`. (AWS default is `YYYYMMDD`.) (Ignored for source endpoints.)
	DatePartitionSequence pulumi.StringPtrOutput `pulumi:"datePartitionSequence"`
	// Convert the current UTC time to a timezone. The conversion occurs when a date partition folder is created and a CDC filename is generated. The timezone format is Area/Location (_e.g._, `Europe/Paris`). Use this when `datePartitionEnabled` is `true`. (Ignored for source endpoints.)
	DatePartitionTimezone pulumi.StringPtrOutput `pulumi:"datePartitionTimezone"`
	// Maximum size in bytes of an encoded dictionary page of a column. (AWS default is 1 MiB, _i.e._, `1048576`.)
	DictPageSizeLimit pulumi.IntPtrOutput `pulumi:"dictPageSizeLimit"`
	// Whether to enable statistics for Parquet pages and row groups. Default is `true`.
	EnableStatistics pulumi.BoolPtrOutput `pulumi:"enableStatistics"`
	// Type of encoding to use. Value values are `rleDictionary`, `plain`, and `plainDictionary`. (AWS default is `rleDictionary`.)
	EncodingType pulumi.StringPtrOutput `pulumi:"encodingType"`
	// Server-side encryption mode that you want to encrypt your .csv or .parquet object files copied to S3. Valid values are `SSE_S3` and `SSE_KMS`. (AWS default is `SSE_S3`.) (Ignored for source endpoints -- only `SSE_S3` is valid.)
	EncryptionMode pulumi.StringPtrOutput `pulumi:"encryptionMode"`
	// ARN for the endpoint.
	EndpointArn pulumi.StringOutput `pulumi:"endpointArn"`
	// Database endpoint identifier. Identifiers must contain from 1 to 255 alphanumeric characters or hyphens, begin with a letter, contain only ASCII letters, digits, and hyphens, not end with a hyphen, and not contain two consecutive hyphens.
	EndpointId pulumi.StringOutput `pulumi:"endpointId"`
	// Type of endpoint. Valid values are `source`, `target`.
	EndpointType pulumi.StringOutput `pulumi:"endpointType"`
	// Expanded name for the engine name.
	EngineDisplayName pulumi.StringOutput `pulumi:"engineDisplayName"`
	// Bucket owner to prevent sniping. Value is an AWS account ID.
	ExpectedBucketOwner pulumi.StringPtrOutput `pulumi:"expectedBucketOwner"`
	// Can be used for cross-account validation. Use it in another account with `dms.S3Endpoint` to create the endpoint cross-account.
	ExternalId pulumi.StringOutput `pulumi:"externalId"`
	// JSON document that describes how AWS DMS should interpret the data.
	ExternalTableDefinition pulumi.StringPtrOutput `pulumi:"externalTableDefinition"`
	// When this value is set to `1`, DMS ignores the first row header in a .csv file. (AWS default is `0`.)
	IgnoreHeaderRows pulumi.IntPtrOutput `pulumi:"ignoreHeaderRows"`
	// Whether to enable a full load to write INSERT operations to the .csv output files only to indicate how the rows were added to the source database. Default is `false`.
	IncludeOpForFullLoad pulumi.BoolPtrOutput `pulumi:"includeOpForFullLoad"`
	// ARN for the KMS key that will be used to encrypt the connection parameters. If you do not specify a value for `kmsKeyArn`, then AWS DMS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS region.
	KmsKeyArn pulumi.StringOutput `pulumi:"kmsKeyArn"`
	// Maximum size (in KB) of any .csv file to be created while migrating to an S3 target during full load. Valid values are from `1` to `1048576`. (AWS default is 1 GB, _i.e._, `1048576`.)
	MaxFileSize pulumi.IntPtrOutput `pulumi:"maxFileSize"`
	// Specifies the precision of any TIMESTAMP column values written to an S3 object file in .parquet format. Default is `false`. (Ignored for source endpoints.)
	ParquetTimestampInMillisecond pulumi.BoolPtrOutput `pulumi:"parquetTimestampInMillisecond"`
	// Version of the .parquet file format. Valid values are `parquet-1-0` and `parquet-2-0`. (AWS default is `parquet-1-0`.) (Ignored for source endpoints.)
	ParquetVersion pulumi.StringPtrOutput `pulumi:"parquetVersion"`
	// Whether DMS saves the transaction order for a CDC load on the S3 target specified by `cdcPath`. Default is `false`. (Ignored for source endpoints.)
	PreserveTransactions pulumi.BoolPtrOutput `pulumi:"preserveTransactions"`
	// For an S3 source, whether each leading double quotation mark has to be followed by an ending double quotation mark. Default is `true`.
	Rfc4180 pulumi.BoolPtrOutput `pulumi:"rfc4180"`
	// Number of rows in a row group. (AWS default is `10000`.)
	RowGroupLength pulumi.IntPtrOutput `pulumi:"rowGroupLength"`
	// When `encryptionMode` is `SSE_KMS`, ARN for the AWS KMS key. (Ignored for source endpoints -- only `SSE_S3` `encryptionMode` is valid.)
	ServerSideEncryptionKmsKeyId pulumi.StringPtrOutput `pulumi:"serverSideEncryptionKmsKeyId"`
	// ARN of the IAM role with permissions to the S3 Bucket.
	ServiceAccessRoleArn pulumi.StringOutput `pulumi:"serviceAccessRoleArn"`
	// SSL mode to use for the connection. Valid values are `none`, `require`, `verify-ca`, `verify-full`. (AWS default is `none`.)
	SslMode pulumi.StringOutput `pulumi:"sslMode"`
	// Status of the endpoint.
	Status pulumi.StringOutput `pulumi:"status"`
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumi.StringMapOutput `pulumi:"tagsAll"`
	// Column to add with timestamp information to the endpoint data for an Amazon S3 target.
	TimestampColumnName pulumi.StringPtrOutput `pulumi:"timestampColumnName"`
	// Whether to use `csvNoSupValue` for columns not included in the supplemental log. (Ignored for source endpoints.)
	UseCsvNoSupValue pulumi.BoolPtrOutput `pulumi:"useCsvNoSupValue"`
	// When set to `true`, uses the task start time as the timestamp column value instead of the time data is written to target. For full load, when set to `true`, each row of the timestamp column contains the task start time. For CDC loads, each row of the timestamp column contains the transaction commit time.When set to false, the full load timestamp in the timestamp column increments with the time data arrives at the target. Default is `false`.
	UseTaskStartTimeForFullLoadTimestamp pulumi.BoolPtrOutput `pulumi:"useTaskStartTimeForFullLoadTimestamp"`
}

// NewS3Endpoint registers a new resource with the given unique name, arguments, and options.
func NewS3Endpoint(ctx *pulumi.Context,
	name string, args *S3EndpointArgs, opts ...pulumi.ResourceOption) (*S3Endpoint, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BucketName == nil {
		return nil, errors.New("invalid value for required argument 'BucketName'")
	}
	if args.EndpointId == nil {
		return nil, errors.New("invalid value for required argument 'EndpointId'")
	}
	if args.EndpointType == nil {
		return nil, errors.New("invalid value for required argument 'EndpointType'")
	}
	if args.ServiceAccessRoleArn == nil {
		return nil, errors.New("invalid value for required argument 'ServiceAccessRoleArn'")
	}
	var resource S3Endpoint
	err := ctx.RegisterResource("aws:dms/s3Endpoint:S3Endpoint", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetS3Endpoint gets an existing S3Endpoint resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetS3Endpoint(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *S3EndpointState, opts ...pulumi.ResourceOption) (*S3Endpoint, error) {
	var resource S3Endpoint
	err := ctx.ReadResource("aws:dms/s3Endpoint:S3Endpoint", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering S3Endpoint resources.
type s3endpointState struct {
	// Whether to add column name information to the .csv output file. Default is `false`.
	AddColumnName *bool `pulumi:"addColumnName"`
	// Whether to add padding. Default is `false`. (Ignored for source endpoints.)
	AddTrailingPaddingCharacter *bool `pulumi:"addTrailingPaddingCharacter"`
	// S3 object prefix.
	BucketFolder *string `pulumi:"bucketFolder"`
	// S3 bucket name.
	BucketName *string `pulumi:"bucketName"`
	// Predefined (canned) access control list for objects created in an S3 bucket. Valid values include `NONE`, `PRIVATE`, `PUBLIC_READ`, `PUBLIC_READ_WRITE`, `AUTHENTICATED_READ`, `AWS_EXEC_READ`, `BUCKET_OWNER_READ`, and `BUCKET_OWNER_FULL_CONTROL`. (AWS default is `NONE`.)
	CannedAclForObjects *string `pulumi:"cannedAclForObjects"`
	// Whether to write insert and update operations to .csv or .parquet output files. Default is `false`.
	CdcInsertsAndUpdates *bool `pulumi:"cdcInsertsAndUpdates"`
	// Whether to write insert operations to .csv or .parquet output files. Default is `false`.
	CdcInsertsOnly *bool `pulumi:"cdcInsertsOnly"`
	// Maximum length of the interval, defined in seconds, after which to output a file to Amazon S3. (AWS default is `60`.)
	CdcMaxBatchInterval *int `pulumi:"cdcMaxBatchInterval"`
	// Minimum file size condition as defined in kilobytes to output a file to Amazon S3. (AWS default is 32000 KB.)
	CdcMinFileSize *int `pulumi:"cdcMinFileSize"`
	// Folder path of CDC files. If `cdcPath` is set, AWS DMS reads CDC files from this path and replicates the data changes to the target endpoint. Supported in AWS DMS versions 3.4.2 and later.
	CdcPath *string `pulumi:"cdcPath"`
	// ARN for the certificate.
	CertificateArn *string `pulumi:"certificateArn"`
	// Set to compress target files. Valid values are `GZIP` and `NONE`. Default is `NONE`. (Ignored for source endpoints.)
	CompressionType *string `pulumi:"compressionType"`
	// Delimiter used to separate columns in the source files. Default is `,`.
	CsvDelimiter *string `pulumi:"csvDelimiter"`
	// Only applies if output files for a CDC load are written in .csv format. If `useCsvNoSupValue` is set to `true`, string to use for all columns not included in the supplemental log. If you do not specify a string value, DMS uses the null value for these columns regardless of `useCsvNoSupValue`. (Ignored for source endpoints.)
	CsvNoSupValue *string `pulumi:"csvNoSupValue"`
	// String to as null when writing to the target. (AWS default is `NULL`.)
	CsvNullValue *string `pulumi:"csvNullValue"`
	// Delimiter used to separate rows in the source files. Default is newline (_i.e._, `\n`).
	CsvRowDelimiter *string `pulumi:"csvRowDelimiter"`
	// Output format for the files that AWS DMS uses to create S3 objects. Valid values are `csv` and `parquet`.  (Ignored for source endpoints -- only `csv` is valid.)
	DataFormat *string `pulumi:"dataFormat"`
	// Size of one data page in bytes. (AWS default is 1 MiB, _i.e._, `1048576`.)
	DataPageSize *int `pulumi:"dataPageSize"`
	// Date separating delimiter to use during folder partitioning. Valid values are `SLASH`, `UNDERSCORE`, `DASH`, and `NONE`. (AWS default is `SLASH`.) (Ignored for source endpoints.)
	DatePartitionDelimiter *string `pulumi:"datePartitionDelimiter"`
	// Partition S3 bucket folders based on transaction commit dates. Default is `false`. (Ignored for source endpoints.)
	DatePartitionEnabled *bool `pulumi:"datePartitionEnabled"`
	// Date format to use during folder partitioning. Use this parameter when `datePartitionEnabled` is set to true. Valid values are `YYYYMMDD`, `YYYYMMDDHH`, `YYYYMM`, `MMYYYYDD`, and `DDMMYYYY`. (AWS default is `YYYYMMDD`.) (Ignored for source endpoints.)
	DatePartitionSequence *string `pulumi:"datePartitionSequence"`
	// Convert the current UTC time to a timezone. The conversion occurs when a date partition folder is created and a CDC filename is generated. The timezone format is Area/Location (_e.g._, `Europe/Paris`). Use this when `datePartitionEnabled` is `true`. (Ignored for source endpoints.)
	DatePartitionTimezone *string `pulumi:"datePartitionTimezone"`
	// Maximum size in bytes of an encoded dictionary page of a column. (AWS default is 1 MiB, _i.e._, `1048576`.)
	DictPageSizeLimit *int `pulumi:"dictPageSizeLimit"`
	// Whether to enable statistics for Parquet pages and row groups. Default is `true`.
	EnableStatistics *bool `pulumi:"enableStatistics"`
	// Type of encoding to use. Value values are `rleDictionary`, `plain`, and `plainDictionary`. (AWS default is `rleDictionary`.)
	EncodingType *string `pulumi:"encodingType"`
	// Server-side encryption mode that you want to encrypt your .csv or .parquet object files copied to S3. Valid values are `SSE_S3` and `SSE_KMS`. (AWS default is `SSE_S3`.) (Ignored for source endpoints -- only `SSE_S3` is valid.)
	EncryptionMode *string `pulumi:"encryptionMode"`
	// ARN for the endpoint.
	EndpointArn *string `pulumi:"endpointArn"`
	// Database endpoint identifier. Identifiers must contain from 1 to 255 alphanumeric characters or hyphens, begin with a letter, contain only ASCII letters, digits, and hyphens, not end with a hyphen, and not contain two consecutive hyphens.
	EndpointId *string `pulumi:"endpointId"`
	// Type of endpoint. Valid values are `source`, `target`.
	EndpointType *string `pulumi:"endpointType"`
	// Expanded name for the engine name.
	EngineDisplayName *string `pulumi:"engineDisplayName"`
	// Bucket owner to prevent sniping. Value is an AWS account ID.
	ExpectedBucketOwner *string `pulumi:"expectedBucketOwner"`
	// Can be used for cross-account validation. Use it in another account with `dms.S3Endpoint` to create the endpoint cross-account.
	ExternalId *string `pulumi:"externalId"`
	// JSON document that describes how AWS DMS should interpret the data.
	ExternalTableDefinition *string `pulumi:"externalTableDefinition"`
	// When this value is set to `1`, DMS ignores the first row header in a .csv file. (AWS default is `0`.)
	IgnoreHeaderRows *int `pulumi:"ignoreHeaderRows"`
	// Whether to enable a full load to write INSERT operations to the .csv output files only to indicate how the rows were added to the source database. Default is `false`.
	IncludeOpForFullLoad *bool `pulumi:"includeOpForFullLoad"`
	// ARN for the KMS key that will be used to encrypt the connection parameters. If you do not specify a value for `kmsKeyArn`, then AWS DMS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS region.
	KmsKeyArn *string `pulumi:"kmsKeyArn"`
	// Maximum size (in KB) of any .csv file to be created while migrating to an S3 target during full load. Valid values are from `1` to `1048576`. (AWS default is 1 GB, _i.e._, `1048576`.)
	MaxFileSize *int `pulumi:"maxFileSize"`
	// Specifies the precision of any TIMESTAMP column values written to an S3 object file in .parquet format. Default is `false`. (Ignored for source endpoints.)
	ParquetTimestampInMillisecond *bool `pulumi:"parquetTimestampInMillisecond"`
	// Version of the .parquet file format. Valid values are `parquet-1-0` and `parquet-2-0`. (AWS default is `parquet-1-0`.) (Ignored for source endpoints.)
	ParquetVersion *string `pulumi:"parquetVersion"`
	// Whether DMS saves the transaction order for a CDC load on the S3 target specified by `cdcPath`. Default is `false`. (Ignored for source endpoints.)
	PreserveTransactions *bool `pulumi:"preserveTransactions"`
	// For an S3 source, whether each leading double quotation mark has to be followed by an ending double quotation mark. Default is `true`.
	Rfc4180 *bool `pulumi:"rfc4180"`
	// Number of rows in a row group. (AWS default is `10000`.)
	RowGroupLength *int `pulumi:"rowGroupLength"`
	// When `encryptionMode` is `SSE_KMS`, ARN for the AWS KMS key. (Ignored for source endpoints -- only `SSE_S3` `encryptionMode` is valid.)
	ServerSideEncryptionKmsKeyId *string `pulumi:"serverSideEncryptionKmsKeyId"`
	// ARN of the IAM role with permissions to the S3 Bucket.
	ServiceAccessRoleArn *string `pulumi:"serviceAccessRoleArn"`
	// SSL mode to use for the connection. Valid values are `none`, `require`, `verify-ca`, `verify-full`. (AWS default is `none`.)
	SslMode *string `pulumi:"sslMode"`
	// Status of the endpoint.
	Status *string `pulumi:"status"`
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// Column to add with timestamp information to the endpoint data for an Amazon S3 target.
	TimestampColumnName *string `pulumi:"timestampColumnName"`
	// Whether to use `csvNoSupValue` for columns not included in the supplemental log. (Ignored for source endpoints.)
	UseCsvNoSupValue *bool `pulumi:"useCsvNoSupValue"`
	// When set to `true`, uses the task start time as the timestamp column value instead of the time data is written to target. For full load, when set to `true`, each row of the timestamp column contains the task start time. For CDC loads, each row of the timestamp column contains the transaction commit time.When set to false, the full load timestamp in the timestamp column increments with the time data arrives at the target. Default is `false`.
	UseTaskStartTimeForFullLoadTimestamp *bool `pulumi:"useTaskStartTimeForFullLoadTimestamp"`
}

type S3EndpointState struct {
	// Whether to add column name information to the .csv output file. Default is `false`.
	AddColumnName pulumi.BoolPtrInput
	// Whether to add padding. Default is `false`. (Ignored for source endpoints.)
	AddTrailingPaddingCharacter pulumi.BoolPtrInput
	// S3 object prefix.
	BucketFolder pulumi.StringPtrInput
	// S3 bucket name.
	BucketName pulumi.StringPtrInput
	// Predefined (canned) access control list for objects created in an S3 bucket. Valid values include `NONE`, `PRIVATE`, `PUBLIC_READ`, `PUBLIC_READ_WRITE`, `AUTHENTICATED_READ`, `AWS_EXEC_READ`, `BUCKET_OWNER_READ`, and `BUCKET_OWNER_FULL_CONTROL`. (AWS default is `NONE`.)
	CannedAclForObjects pulumi.StringPtrInput
	// Whether to write insert and update operations to .csv or .parquet output files. Default is `false`.
	CdcInsertsAndUpdates pulumi.BoolPtrInput
	// Whether to write insert operations to .csv or .parquet output files. Default is `false`.
	CdcInsertsOnly pulumi.BoolPtrInput
	// Maximum length of the interval, defined in seconds, after which to output a file to Amazon S3. (AWS default is `60`.)
	CdcMaxBatchInterval pulumi.IntPtrInput
	// Minimum file size condition as defined in kilobytes to output a file to Amazon S3. (AWS default is 32000 KB.)
	CdcMinFileSize pulumi.IntPtrInput
	// Folder path of CDC files. If `cdcPath` is set, AWS DMS reads CDC files from this path and replicates the data changes to the target endpoint. Supported in AWS DMS versions 3.4.2 and later.
	CdcPath pulumi.StringPtrInput
	// ARN for the certificate.
	CertificateArn pulumi.StringPtrInput
	// Set to compress target files. Valid values are `GZIP` and `NONE`. Default is `NONE`. (Ignored for source endpoints.)
	CompressionType pulumi.StringPtrInput
	// Delimiter used to separate columns in the source files. Default is `,`.
	CsvDelimiter pulumi.StringPtrInput
	// Only applies if output files for a CDC load are written in .csv format. If `useCsvNoSupValue` is set to `true`, string to use for all columns not included in the supplemental log. If you do not specify a string value, DMS uses the null value for these columns regardless of `useCsvNoSupValue`. (Ignored for source endpoints.)
	CsvNoSupValue pulumi.StringPtrInput
	// String to as null when writing to the target. (AWS default is `NULL`.)
	CsvNullValue pulumi.StringPtrInput
	// Delimiter used to separate rows in the source files. Default is newline (_i.e._, `\n`).
	CsvRowDelimiter pulumi.StringPtrInput
	// Output format for the files that AWS DMS uses to create S3 objects. Valid values are `csv` and `parquet`.  (Ignored for source endpoints -- only `csv` is valid.)
	DataFormat pulumi.StringPtrInput
	// Size of one data page in bytes. (AWS default is 1 MiB, _i.e._, `1048576`.)
	DataPageSize pulumi.IntPtrInput
	// Date separating delimiter to use during folder partitioning. Valid values are `SLASH`, `UNDERSCORE`, `DASH`, and `NONE`. (AWS default is `SLASH`.) (Ignored for source endpoints.)
	DatePartitionDelimiter pulumi.StringPtrInput
	// Partition S3 bucket folders based on transaction commit dates. Default is `false`. (Ignored for source endpoints.)
	DatePartitionEnabled pulumi.BoolPtrInput
	// Date format to use during folder partitioning. Use this parameter when `datePartitionEnabled` is set to true. Valid values are `YYYYMMDD`, `YYYYMMDDHH`, `YYYYMM`, `MMYYYYDD`, and `DDMMYYYY`. (AWS default is `YYYYMMDD`.) (Ignored for source endpoints.)
	DatePartitionSequence pulumi.StringPtrInput
	// Convert the current UTC time to a timezone. The conversion occurs when a date partition folder is created and a CDC filename is generated. The timezone format is Area/Location (_e.g._, `Europe/Paris`). Use this when `datePartitionEnabled` is `true`. (Ignored for source endpoints.)
	DatePartitionTimezone pulumi.StringPtrInput
	// Maximum size in bytes of an encoded dictionary page of a column. (AWS default is 1 MiB, _i.e._, `1048576`.)
	DictPageSizeLimit pulumi.IntPtrInput
	// Whether to enable statistics for Parquet pages and row groups. Default is `true`.
	EnableStatistics pulumi.BoolPtrInput
	// Type of encoding to use. Value values are `rleDictionary`, `plain`, and `plainDictionary`. (AWS default is `rleDictionary`.)
	EncodingType pulumi.StringPtrInput
	// Server-side encryption mode that you want to encrypt your .csv or .parquet object files copied to S3. Valid values are `SSE_S3` and `SSE_KMS`. (AWS default is `SSE_S3`.) (Ignored for source endpoints -- only `SSE_S3` is valid.)
	EncryptionMode pulumi.StringPtrInput
	// ARN for the endpoint.
	EndpointArn pulumi.StringPtrInput
	// Database endpoint identifier. Identifiers must contain from 1 to 255 alphanumeric characters or hyphens, begin with a letter, contain only ASCII letters, digits, and hyphens, not end with a hyphen, and not contain two consecutive hyphens.
	EndpointId pulumi.StringPtrInput
	// Type of endpoint. Valid values are `source`, `target`.
	EndpointType pulumi.StringPtrInput
	// Expanded name for the engine name.
	EngineDisplayName pulumi.StringPtrInput
	// Bucket owner to prevent sniping. Value is an AWS account ID.
	ExpectedBucketOwner pulumi.StringPtrInput
	// Can be used for cross-account validation. Use it in another account with `dms.S3Endpoint` to create the endpoint cross-account.
	ExternalId pulumi.StringPtrInput
	// JSON document that describes how AWS DMS should interpret the data.
	ExternalTableDefinition pulumi.StringPtrInput
	// When this value is set to `1`, DMS ignores the first row header in a .csv file. (AWS default is `0`.)
	IgnoreHeaderRows pulumi.IntPtrInput
	// Whether to enable a full load to write INSERT operations to the .csv output files only to indicate how the rows were added to the source database. Default is `false`.
	IncludeOpForFullLoad pulumi.BoolPtrInput
	// ARN for the KMS key that will be used to encrypt the connection parameters. If you do not specify a value for `kmsKeyArn`, then AWS DMS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS region.
	KmsKeyArn pulumi.StringPtrInput
	// Maximum size (in KB) of any .csv file to be created while migrating to an S3 target during full load. Valid values are from `1` to `1048576`. (AWS default is 1 GB, _i.e._, `1048576`.)
	MaxFileSize pulumi.IntPtrInput
	// Specifies the precision of any TIMESTAMP column values written to an S3 object file in .parquet format. Default is `false`. (Ignored for source endpoints.)
	ParquetTimestampInMillisecond pulumi.BoolPtrInput
	// Version of the .parquet file format. Valid values are `parquet-1-0` and `parquet-2-0`. (AWS default is `parquet-1-0`.) (Ignored for source endpoints.)
	ParquetVersion pulumi.StringPtrInput
	// Whether DMS saves the transaction order for a CDC load on the S3 target specified by `cdcPath`. Default is `false`. (Ignored for source endpoints.)
	PreserveTransactions pulumi.BoolPtrInput
	// For an S3 source, whether each leading double quotation mark has to be followed by an ending double quotation mark. Default is `true`.
	Rfc4180 pulumi.BoolPtrInput
	// Number of rows in a row group. (AWS default is `10000`.)
	RowGroupLength pulumi.IntPtrInput
	// When `encryptionMode` is `SSE_KMS`, ARN for the AWS KMS key. (Ignored for source endpoints -- only `SSE_S3` `encryptionMode` is valid.)
	ServerSideEncryptionKmsKeyId pulumi.StringPtrInput
	// ARN of the IAM role with permissions to the S3 Bucket.
	ServiceAccessRoleArn pulumi.StringPtrInput
	// SSL mode to use for the connection. Valid values are `none`, `require`, `verify-ca`, `verify-full`. (AWS default is `none`.)
	SslMode pulumi.StringPtrInput
	// Status of the endpoint.
	Status pulumi.StringPtrInput
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumi.StringMapInput
	// Column to add with timestamp information to the endpoint data for an Amazon S3 target.
	TimestampColumnName pulumi.StringPtrInput
	// Whether to use `csvNoSupValue` for columns not included in the supplemental log. (Ignored for source endpoints.)
	UseCsvNoSupValue pulumi.BoolPtrInput
	// When set to `true`, uses the task start time as the timestamp column value instead of the time data is written to target. For full load, when set to `true`, each row of the timestamp column contains the task start time. For CDC loads, each row of the timestamp column contains the transaction commit time.When set to false, the full load timestamp in the timestamp column increments with the time data arrives at the target. Default is `false`.
	UseTaskStartTimeForFullLoadTimestamp pulumi.BoolPtrInput
}

func (S3EndpointState) ElementType() reflect.Type {
	return reflect.TypeOf((*s3endpointState)(nil)).Elem()
}

type s3endpointArgs struct {
	// Whether to add column name information to the .csv output file. Default is `false`.
	AddColumnName *bool `pulumi:"addColumnName"`
	// Whether to add padding. Default is `false`. (Ignored for source endpoints.)
	AddTrailingPaddingCharacter *bool `pulumi:"addTrailingPaddingCharacter"`
	// S3 object prefix.
	BucketFolder *string `pulumi:"bucketFolder"`
	// S3 bucket name.
	BucketName string `pulumi:"bucketName"`
	// Predefined (canned) access control list for objects created in an S3 bucket. Valid values include `NONE`, `PRIVATE`, `PUBLIC_READ`, `PUBLIC_READ_WRITE`, `AUTHENTICATED_READ`, `AWS_EXEC_READ`, `BUCKET_OWNER_READ`, and `BUCKET_OWNER_FULL_CONTROL`. (AWS default is `NONE`.)
	CannedAclForObjects *string `pulumi:"cannedAclForObjects"`
	// Whether to write insert and update operations to .csv or .parquet output files. Default is `false`.
	CdcInsertsAndUpdates *bool `pulumi:"cdcInsertsAndUpdates"`
	// Whether to write insert operations to .csv or .parquet output files. Default is `false`.
	CdcInsertsOnly *bool `pulumi:"cdcInsertsOnly"`
	// Maximum length of the interval, defined in seconds, after which to output a file to Amazon S3. (AWS default is `60`.)
	CdcMaxBatchInterval *int `pulumi:"cdcMaxBatchInterval"`
	// Minimum file size condition as defined in kilobytes to output a file to Amazon S3. (AWS default is 32000 KB.)
	CdcMinFileSize *int `pulumi:"cdcMinFileSize"`
	// Folder path of CDC files. If `cdcPath` is set, AWS DMS reads CDC files from this path and replicates the data changes to the target endpoint. Supported in AWS DMS versions 3.4.2 and later.
	CdcPath *string `pulumi:"cdcPath"`
	// ARN for the certificate.
	CertificateArn *string `pulumi:"certificateArn"`
	// Set to compress target files. Valid values are `GZIP` and `NONE`. Default is `NONE`. (Ignored for source endpoints.)
	CompressionType *string `pulumi:"compressionType"`
	// Delimiter used to separate columns in the source files. Default is `,`.
	CsvDelimiter *string `pulumi:"csvDelimiter"`
	// Only applies if output files for a CDC load are written in .csv format. If `useCsvNoSupValue` is set to `true`, string to use for all columns not included in the supplemental log. If you do not specify a string value, DMS uses the null value for these columns regardless of `useCsvNoSupValue`. (Ignored for source endpoints.)
	CsvNoSupValue *string `pulumi:"csvNoSupValue"`
	// String to as null when writing to the target. (AWS default is `NULL`.)
	CsvNullValue *string `pulumi:"csvNullValue"`
	// Delimiter used to separate rows in the source files. Default is newline (_i.e._, `\n`).
	CsvRowDelimiter *string `pulumi:"csvRowDelimiter"`
	// Output format for the files that AWS DMS uses to create S3 objects. Valid values are `csv` and `parquet`.  (Ignored for source endpoints -- only `csv` is valid.)
	DataFormat *string `pulumi:"dataFormat"`
	// Size of one data page in bytes. (AWS default is 1 MiB, _i.e._, `1048576`.)
	DataPageSize *int `pulumi:"dataPageSize"`
	// Date separating delimiter to use during folder partitioning. Valid values are `SLASH`, `UNDERSCORE`, `DASH`, and `NONE`. (AWS default is `SLASH`.) (Ignored for source endpoints.)
	DatePartitionDelimiter *string `pulumi:"datePartitionDelimiter"`
	// Partition S3 bucket folders based on transaction commit dates. Default is `false`. (Ignored for source endpoints.)
	DatePartitionEnabled *bool `pulumi:"datePartitionEnabled"`
	// Date format to use during folder partitioning. Use this parameter when `datePartitionEnabled` is set to true. Valid values are `YYYYMMDD`, `YYYYMMDDHH`, `YYYYMM`, `MMYYYYDD`, and `DDMMYYYY`. (AWS default is `YYYYMMDD`.) (Ignored for source endpoints.)
	DatePartitionSequence *string `pulumi:"datePartitionSequence"`
	// Convert the current UTC time to a timezone. The conversion occurs when a date partition folder is created and a CDC filename is generated. The timezone format is Area/Location (_e.g._, `Europe/Paris`). Use this when `datePartitionEnabled` is `true`. (Ignored for source endpoints.)
	DatePartitionTimezone *string `pulumi:"datePartitionTimezone"`
	// Maximum size in bytes of an encoded dictionary page of a column. (AWS default is 1 MiB, _i.e._, `1048576`.)
	DictPageSizeLimit *int `pulumi:"dictPageSizeLimit"`
	// Whether to enable statistics for Parquet pages and row groups. Default is `true`.
	EnableStatistics *bool `pulumi:"enableStatistics"`
	// Type of encoding to use. Value values are `rleDictionary`, `plain`, and `plainDictionary`. (AWS default is `rleDictionary`.)
	EncodingType *string `pulumi:"encodingType"`
	// Server-side encryption mode that you want to encrypt your .csv or .parquet object files copied to S3. Valid values are `SSE_S3` and `SSE_KMS`. (AWS default is `SSE_S3`.) (Ignored for source endpoints -- only `SSE_S3` is valid.)
	EncryptionMode *string `pulumi:"encryptionMode"`
	// Database endpoint identifier. Identifiers must contain from 1 to 255 alphanumeric characters or hyphens, begin with a letter, contain only ASCII letters, digits, and hyphens, not end with a hyphen, and not contain two consecutive hyphens.
	EndpointId string `pulumi:"endpointId"`
	// Type of endpoint. Valid values are `source`, `target`.
	EndpointType string `pulumi:"endpointType"`
	// Bucket owner to prevent sniping. Value is an AWS account ID.
	ExpectedBucketOwner *string `pulumi:"expectedBucketOwner"`
	// JSON document that describes how AWS DMS should interpret the data.
	ExternalTableDefinition *string `pulumi:"externalTableDefinition"`
	// When this value is set to `1`, DMS ignores the first row header in a .csv file. (AWS default is `0`.)
	IgnoreHeaderRows *int `pulumi:"ignoreHeaderRows"`
	// Whether to enable a full load to write INSERT operations to the .csv output files only to indicate how the rows were added to the source database. Default is `false`.
	IncludeOpForFullLoad *bool `pulumi:"includeOpForFullLoad"`
	// ARN for the KMS key that will be used to encrypt the connection parameters. If you do not specify a value for `kmsKeyArn`, then AWS DMS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS region.
	KmsKeyArn *string `pulumi:"kmsKeyArn"`
	// Maximum size (in KB) of any .csv file to be created while migrating to an S3 target during full load. Valid values are from `1` to `1048576`. (AWS default is 1 GB, _i.e._, `1048576`.)
	MaxFileSize *int `pulumi:"maxFileSize"`
	// Specifies the precision of any TIMESTAMP column values written to an S3 object file in .parquet format. Default is `false`. (Ignored for source endpoints.)
	ParquetTimestampInMillisecond *bool `pulumi:"parquetTimestampInMillisecond"`
	// Version of the .parquet file format. Valid values are `parquet-1-0` and `parquet-2-0`. (AWS default is `parquet-1-0`.) (Ignored for source endpoints.)
	ParquetVersion *string `pulumi:"parquetVersion"`
	// Whether DMS saves the transaction order for a CDC load on the S3 target specified by `cdcPath`. Default is `false`. (Ignored for source endpoints.)
	PreserveTransactions *bool `pulumi:"preserveTransactions"`
	// For an S3 source, whether each leading double quotation mark has to be followed by an ending double quotation mark. Default is `true`.
	Rfc4180 *bool `pulumi:"rfc4180"`
	// Number of rows in a row group. (AWS default is `10000`.)
	RowGroupLength *int `pulumi:"rowGroupLength"`
	// When `encryptionMode` is `SSE_KMS`, ARN for the AWS KMS key. (Ignored for source endpoints -- only `SSE_S3` `encryptionMode` is valid.)
	ServerSideEncryptionKmsKeyId *string `pulumi:"serverSideEncryptionKmsKeyId"`
	// ARN of the IAM role with permissions to the S3 Bucket.
	ServiceAccessRoleArn string `pulumi:"serviceAccessRoleArn"`
	// SSL mode to use for the connection. Valid values are `none`, `require`, `verify-ca`, `verify-full`. (AWS default is `none`.)
	SslMode *string `pulumi:"sslMode"`
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Column to add with timestamp information to the endpoint data for an Amazon S3 target.
	TimestampColumnName *string `pulumi:"timestampColumnName"`
	// Whether to use `csvNoSupValue` for columns not included in the supplemental log. (Ignored for source endpoints.)
	UseCsvNoSupValue *bool `pulumi:"useCsvNoSupValue"`
	// When set to `true`, uses the task start time as the timestamp column value instead of the time data is written to target. For full load, when set to `true`, each row of the timestamp column contains the task start time. For CDC loads, each row of the timestamp column contains the transaction commit time.When set to false, the full load timestamp in the timestamp column increments with the time data arrives at the target. Default is `false`.
	UseTaskStartTimeForFullLoadTimestamp *bool `pulumi:"useTaskStartTimeForFullLoadTimestamp"`
}

// The set of arguments for constructing a S3Endpoint resource.
type S3EndpointArgs struct {
	// Whether to add column name information to the .csv output file. Default is `false`.
	AddColumnName pulumi.BoolPtrInput
	// Whether to add padding. Default is `false`. (Ignored for source endpoints.)
	AddTrailingPaddingCharacter pulumi.BoolPtrInput
	// S3 object prefix.
	BucketFolder pulumi.StringPtrInput
	// S3 bucket name.
	BucketName pulumi.StringInput
	// Predefined (canned) access control list for objects created in an S3 bucket. Valid values include `NONE`, `PRIVATE`, `PUBLIC_READ`, `PUBLIC_READ_WRITE`, `AUTHENTICATED_READ`, `AWS_EXEC_READ`, `BUCKET_OWNER_READ`, and `BUCKET_OWNER_FULL_CONTROL`. (AWS default is `NONE`.)
	CannedAclForObjects pulumi.StringPtrInput
	// Whether to write insert and update operations to .csv or .parquet output files. Default is `false`.
	CdcInsertsAndUpdates pulumi.BoolPtrInput
	// Whether to write insert operations to .csv or .parquet output files. Default is `false`.
	CdcInsertsOnly pulumi.BoolPtrInput
	// Maximum length of the interval, defined in seconds, after which to output a file to Amazon S3. (AWS default is `60`.)
	CdcMaxBatchInterval pulumi.IntPtrInput
	// Minimum file size condition as defined in kilobytes to output a file to Amazon S3. (AWS default is 32000 KB.)
	CdcMinFileSize pulumi.IntPtrInput
	// Folder path of CDC files. If `cdcPath` is set, AWS DMS reads CDC files from this path and replicates the data changes to the target endpoint. Supported in AWS DMS versions 3.4.2 and later.
	CdcPath pulumi.StringPtrInput
	// ARN for the certificate.
	CertificateArn pulumi.StringPtrInput
	// Set to compress target files. Valid values are `GZIP` and `NONE`. Default is `NONE`. (Ignored for source endpoints.)
	CompressionType pulumi.StringPtrInput
	// Delimiter used to separate columns in the source files. Default is `,`.
	CsvDelimiter pulumi.StringPtrInput
	// Only applies if output files for a CDC load are written in .csv format. If `useCsvNoSupValue` is set to `true`, string to use for all columns not included in the supplemental log. If you do not specify a string value, DMS uses the null value for these columns regardless of `useCsvNoSupValue`. (Ignored for source endpoints.)
	CsvNoSupValue pulumi.StringPtrInput
	// String to as null when writing to the target. (AWS default is `NULL`.)
	CsvNullValue pulumi.StringPtrInput
	// Delimiter used to separate rows in the source files. Default is newline (_i.e._, `\n`).
	CsvRowDelimiter pulumi.StringPtrInput
	// Output format for the files that AWS DMS uses to create S3 objects. Valid values are `csv` and `parquet`.  (Ignored for source endpoints -- only `csv` is valid.)
	DataFormat pulumi.StringPtrInput
	// Size of one data page in bytes. (AWS default is 1 MiB, _i.e._, `1048576`.)
	DataPageSize pulumi.IntPtrInput
	// Date separating delimiter to use during folder partitioning. Valid values are `SLASH`, `UNDERSCORE`, `DASH`, and `NONE`. (AWS default is `SLASH`.) (Ignored for source endpoints.)
	DatePartitionDelimiter pulumi.StringPtrInput
	// Partition S3 bucket folders based on transaction commit dates. Default is `false`. (Ignored for source endpoints.)
	DatePartitionEnabled pulumi.BoolPtrInput
	// Date format to use during folder partitioning. Use this parameter when `datePartitionEnabled` is set to true. Valid values are `YYYYMMDD`, `YYYYMMDDHH`, `YYYYMM`, `MMYYYYDD`, and `DDMMYYYY`. (AWS default is `YYYYMMDD`.) (Ignored for source endpoints.)
	DatePartitionSequence pulumi.StringPtrInput
	// Convert the current UTC time to a timezone. The conversion occurs when a date partition folder is created and a CDC filename is generated. The timezone format is Area/Location (_e.g._, `Europe/Paris`). Use this when `datePartitionEnabled` is `true`. (Ignored for source endpoints.)
	DatePartitionTimezone pulumi.StringPtrInput
	// Maximum size in bytes of an encoded dictionary page of a column. (AWS default is 1 MiB, _i.e._, `1048576`.)
	DictPageSizeLimit pulumi.IntPtrInput
	// Whether to enable statistics for Parquet pages and row groups. Default is `true`.
	EnableStatistics pulumi.BoolPtrInput
	// Type of encoding to use. Value values are `rleDictionary`, `plain`, and `plainDictionary`. (AWS default is `rleDictionary`.)
	EncodingType pulumi.StringPtrInput
	// Server-side encryption mode that you want to encrypt your .csv or .parquet object files copied to S3. Valid values are `SSE_S3` and `SSE_KMS`. (AWS default is `SSE_S3`.) (Ignored for source endpoints -- only `SSE_S3` is valid.)
	EncryptionMode pulumi.StringPtrInput
	// Database endpoint identifier. Identifiers must contain from 1 to 255 alphanumeric characters or hyphens, begin with a letter, contain only ASCII letters, digits, and hyphens, not end with a hyphen, and not contain two consecutive hyphens.
	EndpointId pulumi.StringInput
	// Type of endpoint. Valid values are `source`, `target`.
	EndpointType pulumi.StringInput
	// Bucket owner to prevent sniping. Value is an AWS account ID.
	ExpectedBucketOwner pulumi.StringPtrInput
	// JSON document that describes how AWS DMS should interpret the data.
	ExternalTableDefinition pulumi.StringPtrInput
	// When this value is set to `1`, DMS ignores the first row header in a .csv file. (AWS default is `0`.)
	IgnoreHeaderRows pulumi.IntPtrInput
	// Whether to enable a full load to write INSERT operations to the .csv output files only to indicate how the rows were added to the source database. Default is `false`.
	IncludeOpForFullLoad pulumi.BoolPtrInput
	// ARN for the KMS key that will be used to encrypt the connection parameters. If you do not specify a value for `kmsKeyArn`, then AWS DMS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS region.
	KmsKeyArn pulumi.StringPtrInput
	// Maximum size (in KB) of any .csv file to be created while migrating to an S3 target during full load. Valid values are from `1` to `1048576`. (AWS default is 1 GB, _i.e._, `1048576`.)
	MaxFileSize pulumi.IntPtrInput
	// Specifies the precision of any TIMESTAMP column values written to an S3 object file in .parquet format. Default is `false`. (Ignored for source endpoints.)
	ParquetTimestampInMillisecond pulumi.BoolPtrInput
	// Version of the .parquet file format. Valid values are `parquet-1-0` and `parquet-2-0`. (AWS default is `parquet-1-0`.) (Ignored for source endpoints.)
	ParquetVersion pulumi.StringPtrInput
	// Whether DMS saves the transaction order for a CDC load on the S3 target specified by `cdcPath`. Default is `false`. (Ignored for source endpoints.)
	PreserveTransactions pulumi.BoolPtrInput
	// For an S3 source, whether each leading double quotation mark has to be followed by an ending double quotation mark. Default is `true`.
	Rfc4180 pulumi.BoolPtrInput
	// Number of rows in a row group. (AWS default is `10000`.)
	RowGroupLength pulumi.IntPtrInput
	// When `encryptionMode` is `SSE_KMS`, ARN for the AWS KMS key. (Ignored for source endpoints -- only `SSE_S3` `encryptionMode` is valid.)
	ServerSideEncryptionKmsKeyId pulumi.StringPtrInput
	// ARN of the IAM role with permissions to the S3 Bucket.
	ServiceAccessRoleArn pulumi.StringInput
	// SSL mode to use for the connection. Valid values are `none`, `require`, `verify-ca`, `verify-full`. (AWS default is `none`.)
	SslMode pulumi.StringPtrInput
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// Column to add with timestamp information to the endpoint data for an Amazon S3 target.
	TimestampColumnName pulumi.StringPtrInput
	// Whether to use `csvNoSupValue` for columns not included in the supplemental log. (Ignored for source endpoints.)
	UseCsvNoSupValue pulumi.BoolPtrInput
	// When set to `true`, uses the task start time as the timestamp column value instead of the time data is written to target. For full load, when set to `true`, each row of the timestamp column contains the task start time. For CDC loads, each row of the timestamp column contains the transaction commit time.When set to false, the full load timestamp in the timestamp column increments with the time data arrives at the target. Default is `false`.
	UseTaskStartTimeForFullLoadTimestamp pulumi.BoolPtrInput
}

func (S3EndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*s3endpointArgs)(nil)).Elem()
}

type S3EndpointInput interface {
	pulumi.Input

	ToS3EndpointOutput() S3EndpointOutput
	ToS3EndpointOutputWithContext(ctx context.Context) S3EndpointOutput
}

func (*S3Endpoint) ElementType() reflect.Type {
	return reflect.TypeOf((**S3Endpoint)(nil)).Elem()
}

func (i *S3Endpoint) ToS3EndpointOutput() S3EndpointOutput {
	return i.ToS3EndpointOutputWithContext(context.Background())
}

func (i *S3Endpoint) ToS3EndpointOutputWithContext(ctx context.Context) S3EndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3EndpointOutput)
}

// S3EndpointArrayInput is an input type that accepts S3EndpointArray and S3EndpointArrayOutput values.
// You can construct a concrete instance of `S3EndpointArrayInput` via:
//
//	S3EndpointArray{ S3EndpointArgs{...} }
type S3EndpointArrayInput interface {
	pulumi.Input

	ToS3EndpointArrayOutput() S3EndpointArrayOutput
	ToS3EndpointArrayOutputWithContext(context.Context) S3EndpointArrayOutput
}

type S3EndpointArray []S3EndpointInput

func (S3EndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*S3Endpoint)(nil)).Elem()
}

func (i S3EndpointArray) ToS3EndpointArrayOutput() S3EndpointArrayOutput {
	return i.ToS3EndpointArrayOutputWithContext(context.Background())
}

func (i S3EndpointArray) ToS3EndpointArrayOutputWithContext(ctx context.Context) S3EndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3EndpointArrayOutput)
}

// S3EndpointMapInput is an input type that accepts S3EndpointMap and S3EndpointMapOutput values.
// You can construct a concrete instance of `S3EndpointMapInput` via:
//
//	S3EndpointMap{ "key": S3EndpointArgs{...} }
type S3EndpointMapInput interface {
	pulumi.Input

	ToS3EndpointMapOutput() S3EndpointMapOutput
	ToS3EndpointMapOutputWithContext(context.Context) S3EndpointMapOutput
}

type S3EndpointMap map[string]S3EndpointInput

func (S3EndpointMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*S3Endpoint)(nil)).Elem()
}

func (i S3EndpointMap) ToS3EndpointMapOutput() S3EndpointMapOutput {
	return i.ToS3EndpointMapOutputWithContext(context.Background())
}

func (i S3EndpointMap) ToS3EndpointMapOutputWithContext(ctx context.Context) S3EndpointMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3EndpointMapOutput)
}

type S3EndpointOutput struct{ *pulumi.OutputState }

func (S3EndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**S3Endpoint)(nil)).Elem()
}

func (o S3EndpointOutput) ToS3EndpointOutput() S3EndpointOutput {
	return o
}

func (o S3EndpointOutput) ToS3EndpointOutputWithContext(ctx context.Context) S3EndpointOutput {
	return o
}

// Whether to add column name information to the .csv output file. Default is `false`.
func (o S3EndpointOutput) AddColumnName() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *S3Endpoint) pulumi.BoolPtrOutput { return v.AddColumnName }).(pulumi.BoolPtrOutput)
}

// Whether to add padding. Default is `false`. (Ignored for source endpoints.)
func (o S3EndpointOutput) AddTrailingPaddingCharacter() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *S3Endpoint) pulumi.BoolPtrOutput { return v.AddTrailingPaddingCharacter }).(pulumi.BoolPtrOutput)
}

// S3 object prefix.
func (o S3EndpointOutput) BucketFolder() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *S3Endpoint) pulumi.StringPtrOutput { return v.BucketFolder }).(pulumi.StringPtrOutput)
}

// S3 bucket name.
func (o S3EndpointOutput) BucketName() pulumi.StringOutput {
	return o.ApplyT(func(v *S3Endpoint) pulumi.StringOutput { return v.BucketName }).(pulumi.StringOutput)
}

// Predefined (canned) access control list for objects created in an S3 bucket. Valid values include `NONE`, `PRIVATE`, `PUBLIC_READ`, `PUBLIC_READ_WRITE`, `AUTHENTICATED_READ`, `AWS_EXEC_READ`, `BUCKET_OWNER_READ`, and `BUCKET_OWNER_FULL_CONTROL`. (AWS default is `NONE`.)
func (o S3EndpointOutput) CannedAclForObjects() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *S3Endpoint) pulumi.StringPtrOutput { return v.CannedAclForObjects }).(pulumi.StringPtrOutput)
}

// Whether to write insert and update operations to .csv or .parquet output files. Default is `false`.
func (o S3EndpointOutput) CdcInsertsAndUpdates() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *S3Endpoint) pulumi.BoolPtrOutput { return v.CdcInsertsAndUpdates }).(pulumi.BoolPtrOutput)
}

// Whether to write insert operations to .csv or .parquet output files. Default is `false`.
func (o S3EndpointOutput) CdcInsertsOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *S3Endpoint) pulumi.BoolPtrOutput { return v.CdcInsertsOnly }).(pulumi.BoolPtrOutput)
}

// Maximum length of the interval, defined in seconds, after which to output a file to Amazon S3. (AWS default is `60`.)
func (o S3EndpointOutput) CdcMaxBatchInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *S3Endpoint) pulumi.IntPtrOutput { return v.CdcMaxBatchInterval }).(pulumi.IntPtrOutput)
}

// Minimum file size condition as defined in kilobytes to output a file to Amazon S3. (AWS default is 32000 KB.)
func (o S3EndpointOutput) CdcMinFileSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *S3Endpoint) pulumi.IntPtrOutput { return v.CdcMinFileSize }).(pulumi.IntPtrOutput)
}

// Folder path of CDC files. If `cdcPath` is set, AWS DMS reads CDC files from this path and replicates the data changes to the target endpoint. Supported in AWS DMS versions 3.4.2 and later.
func (o S3EndpointOutput) CdcPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *S3Endpoint) pulumi.StringPtrOutput { return v.CdcPath }).(pulumi.StringPtrOutput)
}

// ARN for the certificate.
func (o S3EndpointOutput) CertificateArn() pulumi.StringOutput {
	return o.ApplyT(func(v *S3Endpoint) pulumi.StringOutput { return v.CertificateArn }).(pulumi.StringOutput)
}

// Set to compress target files. Valid values are `GZIP` and `NONE`. Default is `NONE`. (Ignored for source endpoints.)
func (o S3EndpointOutput) CompressionType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *S3Endpoint) pulumi.StringPtrOutput { return v.CompressionType }).(pulumi.StringPtrOutput)
}

// Delimiter used to separate columns in the source files. Default is `,`.
func (o S3EndpointOutput) CsvDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *S3Endpoint) pulumi.StringPtrOutput { return v.CsvDelimiter }).(pulumi.StringPtrOutput)
}

// Only applies if output files for a CDC load are written in .csv format. If `useCsvNoSupValue` is set to `true`, string to use for all columns not included in the supplemental log. If you do not specify a string value, DMS uses the null value for these columns regardless of `useCsvNoSupValue`. (Ignored for source endpoints.)
func (o S3EndpointOutput) CsvNoSupValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *S3Endpoint) pulumi.StringPtrOutput { return v.CsvNoSupValue }).(pulumi.StringPtrOutput)
}

// String to as null when writing to the target. (AWS default is `NULL`.)
func (o S3EndpointOutput) CsvNullValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *S3Endpoint) pulumi.StringPtrOutput { return v.CsvNullValue }).(pulumi.StringPtrOutput)
}

// Delimiter used to separate rows in the source files. Default is newline (_i.e._, `\n`).
func (o S3EndpointOutput) CsvRowDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *S3Endpoint) pulumi.StringPtrOutput { return v.CsvRowDelimiter }).(pulumi.StringPtrOutput)
}

// Output format for the files that AWS DMS uses to create S3 objects. Valid values are `csv` and `parquet`.  (Ignored for source endpoints -- only `csv` is valid.)
func (o S3EndpointOutput) DataFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *S3Endpoint) pulumi.StringPtrOutput { return v.DataFormat }).(pulumi.StringPtrOutput)
}

// Size of one data page in bytes. (AWS default is 1 MiB, _i.e._, `1048576`.)
func (o S3EndpointOutput) DataPageSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *S3Endpoint) pulumi.IntPtrOutput { return v.DataPageSize }).(pulumi.IntPtrOutput)
}

// Date separating delimiter to use during folder partitioning. Valid values are `SLASH`, `UNDERSCORE`, `DASH`, and `NONE`. (AWS default is `SLASH`.) (Ignored for source endpoints.)
func (o S3EndpointOutput) DatePartitionDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *S3Endpoint) pulumi.StringPtrOutput { return v.DatePartitionDelimiter }).(pulumi.StringPtrOutput)
}

// Partition S3 bucket folders based on transaction commit dates. Default is `false`. (Ignored for source endpoints.)
func (o S3EndpointOutput) DatePartitionEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *S3Endpoint) pulumi.BoolPtrOutput { return v.DatePartitionEnabled }).(pulumi.BoolPtrOutput)
}

// Date format to use during folder partitioning. Use this parameter when `datePartitionEnabled` is set to true. Valid values are `YYYYMMDD`, `YYYYMMDDHH`, `YYYYMM`, `MMYYYYDD`, and `DDMMYYYY`. (AWS default is `YYYYMMDD`.) (Ignored for source endpoints.)
func (o S3EndpointOutput) DatePartitionSequence() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *S3Endpoint) pulumi.StringPtrOutput { return v.DatePartitionSequence }).(pulumi.StringPtrOutput)
}

// Convert the current UTC time to a timezone. The conversion occurs when a date partition folder is created and a CDC filename is generated. The timezone format is Area/Location (_e.g._, `Europe/Paris`). Use this when `datePartitionEnabled` is `true`. (Ignored for source endpoints.)
func (o S3EndpointOutput) DatePartitionTimezone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *S3Endpoint) pulumi.StringPtrOutput { return v.DatePartitionTimezone }).(pulumi.StringPtrOutput)
}

// Maximum size in bytes of an encoded dictionary page of a column. (AWS default is 1 MiB, _i.e._, `1048576`.)
func (o S3EndpointOutput) DictPageSizeLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *S3Endpoint) pulumi.IntPtrOutput { return v.DictPageSizeLimit }).(pulumi.IntPtrOutput)
}

// Whether to enable statistics for Parquet pages and row groups. Default is `true`.
func (o S3EndpointOutput) EnableStatistics() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *S3Endpoint) pulumi.BoolPtrOutput { return v.EnableStatistics }).(pulumi.BoolPtrOutput)
}

// Type of encoding to use. Value values are `rleDictionary`, `plain`, and `plainDictionary`. (AWS default is `rleDictionary`.)
func (o S3EndpointOutput) EncodingType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *S3Endpoint) pulumi.StringPtrOutput { return v.EncodingType }).(pulumi.StringPtrOutput)
}

// Server-side encryption mode that you want to encrypt your .csv or .parquet object files copied to S3. Valid values are `SSE_S3` and `SSE_KMS`. (AWS default is `SSE_S3`.) (Ignored for source endpoints -- only `SSE_S3` is valid.)
func (o S3EndpointOutput) EncryptionMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *S3Endpoint) pulumi.StringPtrOutput { return v.EncryptionMode }).(pulumi.StringPtrOutput)
}

// ARN for the endpoint.
func (o S3EndpointOutput) EndpointArn() pulumi.StringOutput {
	return o.ApplyT(func(v *S3Endpoint) pulumi.StringOutput { return v.EndpointArn }).(pulumi.StringOutput)
}

// Database endpoint identifier. Identifiers must contain from 1 to 255 alphanumeric characters or hyphens, begin with a letter, contain only ASCII letters, digits, and hyphens, not end with a hyphen, and not contain two consecutive hyphens.
func (o S3EndpointOutput) EndpointId() pulumi.StringOutput {
	return o.ApplyT(func(v *S3Endpoint) pulumi.StringOutput { return v.EndpointId }).(pulumi.StringOutput)
}

// Type of endpoint. Valid values are `source`, `target`.
func (o S3EndpointOutput) EndpointType() pulumi.StringOutput {
	return o.ApplyT(func(v *S3Endpoint) pulumi.StringOutput { return v.EndpointType }).(pulumi.StringOutput)
}

// Expanded name for the engine name.
func (o S3EndpointOutput) EngineDisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *S3Endpoint) pulumi.StringOutput { return v.EngineDisplayName }).(pulumi.StringOutput)
}

// Bucket owner to prevent sniping. Value is an AWS account ID.
func (o S3EndpointOutput) ExpectedBucketOwner() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *S3Endpoint) pulumi.StringPtrOutput { return v.ExpectedBucketOwner }).(pulumi.StringPtrOutput)
}

// Can be used for cross-account validation. Use it in another account with `dms.S3Endpoint` to create the endpoint cross-account.
func (o S3EndpointOutput) ExternalId() pulumi.StringOutput {
	return o.ApplyT(func(v *S3Endpoint) pulumi.StringOutput { return v.ExternalId }).(pulumi.StringOutput)
}

// JSON document that describes how AWS DMS should interpret the data.
func (o S3EndpointOutput) ExternalTableDefinition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *S3Endpoint) pulumi.StringPtrOutput { return v.ExternalTableDefinition }).(pulumi.StringPtrOutput)
}

// When this value is set to `1`, DMS ignores the first row header in a .csv file. (AWS default is `0`.)
func (o S3EndpointOutput) IgnoreHeaderRows() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *S3Endpoint) pulumi.IntPtrOutput { return v.IgnoreHeaderRows }).(pulumi.IntPtrOutput)
}

// Whether to enable a full load to write INSERT operations to the .csv output files only to indicate how the rows were added to the source database. Default is `false`.
func (o S3EndpointOutput) IncludeOpForFullLoad() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *S3Endpoint) pulumi.BoolPtrOutput { return v.IncludeOpForFullLoad }).(pulumi.BoolPtrOutput)
}

// ARN for the KMS key that will be used to encrypt the connection parameters. If you do not specify a value for `kmsKeyArn`, then AWS DMS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS region.
func (o S3EndpointOutput) KmsKeyArn() pulumi.StringOutput {
	return o.ApplyT(func(v *S3Endpoint) pulumi.StringOutput { return v.KmsKeyArn }).(pulumi.StringOutput)
}

// Maximum size (in KB) of any .csv file to be created while migrating to an S3 target during full load. Valid values are from `1` to `1048576`. (AWS default is 1 GB, _i.e._, `1048576`.)
func (o S3EndpointOutput) MaxFileSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *S3Endpoint) pulumi.IntPtrOutput { return v.MaxFileSize }).(pulumi.IntPtrOutput)
}

// Specifies the precision of any TIMESTAMP column values written to an S3 object file in .parquet format. Default is `false`. (Ignored for source endpoints.)
func (o S3EndpointOutput) ParquetTimestampInMillisecond() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *S3Endpoint) pulumi.BoolPtrOutput { return v.ParquetTimestampInMillisecond }).(pulumi.BoolPtrOutput)
}

// Version of the .parquet file format. Valid values are `parquet-1-0` and `parquet-2-0`. (AWS default is `parquet-1-0`.) (Ignored for source endpoints.)
func (o S3EndpointOutput) ParquetVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *S3Endpoint) pulumi.StringPtrOutput { return v.ParquetVersion }).(pulumi.StringPtrOutput)
}

// Whether DMS saves the transaction order for a CDC load on the S3 target specified by `cdcPath`. Default is `false`. (Ignored for source endpoints.)
func (o S3EndpointOutput) PreserveTransactions() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *S3Endpoint) pulumi.BoolPtrOutput { return v.PreserveTransactions }).(pulumi.BoolPtrOutput)
}

// For an S3 source, whether each leading double quotation mark has to be followed by an ending double quotation mark. Default is `true`.
func (o S3EndpointOutput) Rfc4180() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *S3Endpoint) pulumi.BoolPtrOutput { return v.Rfc4180 }).(pulumi.BoolPtrOutput)
}

// Number of rows in a row group. (AWS default is `10000`.)
func (o S3EndpointOutput) RowGroupLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *S3Endpoint) pulumi.IntPtrOutput { return v.RowGroupLength }).(pulumi.IntPtrOutput)
}

// When `encryptionMode` is `SSE_KMS`, ARN for the AWS KMS key. (Ignored for source endpoints -- only `SSE_S3` `encryptionMode` is valid.)
func (o S3EndpointOutput) ServerSideEncryptionKmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *S3Endpoint) pulumi.StringPtrOutput { return v.ServerSideEncryptionKmsKeyId }).(pulumi.StringPtrOutput)
}

// ARN of the IAM role with permissions to the S3 Bucket.
func (o S3EndpointOutput) ServiceAccessRoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v *S3Endpoint) pulumi.StringOutput { return v.ServiceAccessRoleArn }).(pulumi.StringOutput)
}

// SSL mode to use for the connection. Valid values are `none`, `require`, `verify-ca`, `verify-full`. (AWS default is `none`.)
func (o S3EndpointOutput) SslMode() pulumi.StringOutput {
	return o.ApplyT(func(v *S3Endpoint) pulumi.StringOutput { return v.SslMode }).(pulumi.StringOutput)
}

// Status of the endpoint.
func (o S3EndpointOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *S3Endpoint) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o S3EndpointOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *S3Endpoint) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o S3EndpointOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *S3Endpoint) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

// Column to add with timestamp information to the endpoint data for an Amazon S3 target.
func (o S3EndpointOutput) TimestampColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *S3Endpoint) pulumi.StringPtrOutput { return v.TimestampColumnName }).(pulumi.StringPtrOutput)
}

// Whether to use `csvNoSupValue` for columns not included in the supplemental log. (Ignored for source endpoints.)
func (o S3EndpointOutput) UseCsvNoSupValue() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *S3Endpoint) pulumi.BoolPtrOutput { return v.UseCsvNoSupValue }).(pulumi.BoolPtrOutput)
}

// When set to `true`, uses the task start time as the timestamp column value instead of the time data is written to target. For full load, when set to `true`, each row of the timestamp column contains the task start time. For CDC loads, each row of the timestamp column contains the transaction commit time.When set to false, the full load timestamp in the timestamp column increments with the time data arrives at the target. Default is `false`.
func (o S3EndpointOutput) UseTaskStartTimeForFullLoadTimestamp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *S3Endpoint) pulumi.BoolPtrOutput { return v.UseTaskStartTimeForFullLoadTimestamp }).(pulumi.BoolPtrOutput)
}

type S3EndpointArrayOutput struct{ *pulumi.OutputState }

func (S3EndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*S3Endpoint)(nil)).Elem()
}

func (o S3EndpointArrayOutput) ToS3EndpointArrayOutput() S3EndpointArrayOutput {
	return o
}

func (o S3EndpointArrayOutput) ToS3EndpointArrayOutputWithContext(ctx context.Context) S3EndpointArrayOutput {
	return o
}

func (o S3EndpointArrayOutput) Index(i pulumi.IntInput) S3EndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *S3Endpoint {
		return vs[0].([]*S3Endpoint)[vs[1].(int)]
	}).(S3EndpointOutput)
}

type S3EndpointMapOutput struct{ *pulumi.OutputState }

func (S3EndpointMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*S3Endpoint)(nil)).Elem()
}

func (o S3EndpointMapOutput) ToS3EndpointMapOutput() S3EndpointMapOutput {
	return o
}

func (o S3EndpointMapOutput) ToS3EndpointMapOutputWithContext(ctx context.Context) S3EndpointMapOutput {
	return o
}

func (o S3EndpointMapOutput) MapIndex(k pulumi.StringInput) S3EndpointOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *S3Endpoint {
		return vs[0].(map[string]*S3Endpoint)[vs[1].(string)]
	}).(S3EndpointOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*S3EndpointInput)(nil)).Elem(), &S3Endpoint{})
	pulumi.RegisterInputType(reflect.TypeOf((*S3EndpointArrayInput)(nil)).Elem(), S3EndpointArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*S3EndpointMapInput)(nil)).Elem(), S3EndpointMap{})
	pulumi.RegisterOutputType(S3EndpointOutput{})
	pulumi.RegisterOutputType(S3EndpointArrayOutput{})
	pulumi.RegisterOutputType(S3EndpointMapOutput{})
}
