// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dms

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Data source for managing an AWS DMS (Database Migration) Certificate.
//
// ## Example Usage
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/dms"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dms.LookupCertificate(ctx, &dms.LookupCertificateArgs{
//				CertificateId: aws_dms_certificate.Test.Certificate_id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupCertificate(ctx *pulumi.Context, args *LookupCertificateArgs, opts ...pulumi.InvokeOption) (*LookupCertificateResult, error) {
	var rv LookupCertificateResult
	err := ctx.Invoke("aws:dms/getCertificate:getCertificate", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCertificate.
type LookupCertificateArgs struct {
	// A customer-assigned name for the certificate. Identifiers must begin with a letter and must contain only ASCII letters, digits, and hyphens. They can't end with a hyphen or contain two consecutive hyphens.
	CertificateId string            `pulumi:"certificateId"`
	Tags          map[string]string `pulumi:"tags"`
}

// A collection of values returned by getCertificate.
type LookupCertificateResult struct {
	// The Amazon Resource Name (ARN) for the certificate.
	CertificateArn string `pulumi:"certificateArn"`
	// The date that the certificate was created.
	CertificateCreationDate string `pulumi:"certificateCreationDate"`
	CertificateId           string `pulumi:"certificateId"`
	// The owner of the certificate.
	CertificateOwner string `pulumi:"certificateOwner"`
	// The contents of a .pem file, which contains an X.509 certificate.
	CertificatePem string `pulumi:"certificatePem"`
	// The owner of the certificate.
	CertificateWallet string `pulumi:"certificateWallet"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The key length of the cryptographic algorithm being used.
	KeyLength int `pulumi:"keyLength"`
	// The algorithm for the certificate.
	SigningAlgorithm string            `pulumi:"signingAlgorithm"`
	Tags             map[string]string `pulumi:"tags"`
	// The beginning date that the certificate is valid.
	ValidFromDate string `pulumi:"validFromDate"`
	// The final date that the certificate is valid.
	ValidToDate string `pulumi:"validToDate"`
}

func LookupCertificateOutput(ctx *pulumi.Context, args LookupCertificateOutputArgs, opts ...pulumi.InvokeOption) LookupCertificateResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupCertificateResult, error) {
			args := v.(LookupCertificateArgs)
			r, err := LookupCertificate(ctx, &args, opts...)
			var s LookupCertificateResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupCertificateResultOutput)
}

// A collection of arguments for invoking getCertificate.
type LookupCertificateOutputArgs struct {
	// A customer-assigned name for the certificate. Identifiers must begin with a letter and must contain only ASCII letters, digits, and hyphens. They can't end with a hyphen or contain two consecutive hyphens.
	CertificateId pulumi.StringInput    `pulumi:"certificateId"`
	Tags          pulumi.StringMapInput `pulumi:"tags"`
}

func (LookupCertificateOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCertificateArgs)(nil)).Elem()
}

// A collection of values returned by getCertificate.
type LookupCertificateResultOutput struct{ *pulumi.OutputState }

func (LookupCertificateResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCertificateResult)(nil)).Elem()
}

func (o LookupCertificateResultOutput) ToLookupCertificateResultOutput() LookupCertificateResultOutput {
	return o
}

func (o LookupCertificateResultOutput) ToLookupCertificateResultOutputWithContext(ctx context.Context) LookupCertificateResultOutput {
	return o
}

// The Amazon Resource Name (ARN) for the certificate.
func (o LookupCertificateResultOutput) CertificateArn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.CertificateArn }).(pulumi.StringOutput)
}

// The date that the certificate was created.
func (o LookupCertificateResultOutput) CertificateCreationDate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.CertificateCreationDate }).(pulumi.StringOutput)
}

func (o LookupCertificateResultOutput) CertificateId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.CertificateId }).(pulumi.StringOutput)
}

// The owner of the certificate.
func (o LookupCertificateResultOutput) CertificateOwner() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.CertificateOwner }).(pulumi.StringOutput)
}

// The contents of a .pem file, which contains an X.509 certificate.
func (o LookupCertificateResultOutput) CertificatePem() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.CertificatePem }).(pulumi.StringOutput)
}

// The owner of the certificate.
func (o LookupCertificateResultOutput) CertificateWallet() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.CertificateWallet }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupCertificateResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.Id }).(pulumi.StringOutput)
}

// The key length of the cryptographic algorithm being used.
func (o LookupCertificateResultOutput) KeyLength() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCertificateResult) int { return v.KeyLength }).(pulumi.IntOutput)
}

// The algorithm for the certificate.
func (o LookupCertificateResultOutput) SigningAlgorithm() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.SigningAlgorithm }).(pulumi.StringOutput)
}

func (o LookupCertificateResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupCertificateResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The beginning date that the certificate is valid.
func (o LookupCertificateResultOutput) ValidFromDate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.ValidFromDate }).(pulumi.StringOutput)
}

// The final date that the certificate is valid.
func (o LookupCertificateResultOutput) ValidToDate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.ValidToDate }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupCertificateResultOutput{})
}
