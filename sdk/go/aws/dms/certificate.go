// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package dms

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a DMS (Data Migration Service) certificate resource. DMS certificates can be created, deleted, and imported.
// 
// ~> **Note:** All arguments including the PEM encoded certificate will be stored in the raw state as plain-text.
// [Read more about sensitive data in state](/docs/state/sensitive-data.html).
type Certificate struct {
	s *pulumi.ResourceState
}

// NewCertificate registers a new resource with the given unique name, arguments, and options.
func NewCertificate(ctx *pulumi.Context,
	name string, args *CertificateArgs, opts ...pulumi.ResourceOpt) (*Certificate, error) {
	if args == nil || args.CertificateId == nil {
		return nil, errors.New("missing required argument 'CertificateId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["certificateId"] = nil
		inputs["certificatePem"] = nil
		inputs["certificateWallet"] = nil
	} else {
		inputs["certificateId"] = args.CertificateId
		inputs["certificatePem"] = args.CertificatePem
		inputs["certificateWallet"] = args.CertificateWallet
	}
	inputs["certificateArn"] = nil
	s, err := ctx.RegisterResource("aws:dms/certificate:Certificate", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Certificate{s: s}, nil
}

// GetCertificate gets an existing Certificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCertificate(ctx *pulumi.Context,
	name string, id pulumi.ID, state *CertificateState, opts ...pulumi.ResourceOpt) (*Certificate, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["certificateArn"] = state.CertificateArn
		inputs["certificateId"] = state.CertificateId
		inputs["certificatePem"] = state.CertificatePem
		inputs["certificateWallet"] = state.CertificateWallet
	}
	s, err := ctx.ReadResource("aws:dms/certificate:Certificate", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Certificate{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Certificate) URN() *pulumi.URNOutput {
	return r.s.URN
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Certificate) ID() *pulumi.IDOutput {
	return r.s.ID
}

// The Amazon Resource Name (ARN) for the certificate.
func (r *Certificate) CertificateArn() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["certificateArn"])
}

// The certificate identifier.
func (r *Certificate) CertificateId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["certificateId"])
}

// The contents of the .pem X.509 certificate file for the certificate. Either `certificate_pem` or `certificate_wallet` must be set.
func (r *Certificate) CertificatePem() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["certificatePem"])
}

// The contents of the Oracle Wallet certificate for use with SSL. Either `certificate_pem` or `certificate_wallet` must be set.
func (r *Certificate) CertificateWallet() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["certificateWallet"])
}

// Input properties used for looking up and filtering Certificate resources.
type CertificateState struct {
	// The Amazon Resource Name (ARN) for the certificate.
	CertificateArn interface{}
	// The certificate identifier.
	CertificateId interface{}
	// The contents of the .pem X.509 certificate file for the certificate. Either `certificate_pem` or `certificate_wallet` must be set.
	CertificatePem interface{}
	// The contents of the Oracle Wallet certificate for use with SSL. Either `certificate_pem` or `certificate_wallet` must be set.
	CertificateWallet interface{}
}

// The set of arguments for constructing a Certificate resource.
type CertificateArgs struct {
	// The certificate identifier.
	CertificateId interface{}
	// The contents of the .pem X.509 certificate file for the certificate. Either `certificate_pem` or `certificate_wallet` must be set.
	CertificatePem interface{}
	// The contents of the Oracle Wallet certificate for use with SSL. Either `certificate_pem` or `certificate_wallet` must be set.
	CertificateWallet interface{}
}
