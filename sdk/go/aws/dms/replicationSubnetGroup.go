// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dms

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ReplicationSubnetGroup struct {
	pulumi.CustomResourceState

	ReplicationSubnetGroupArn         pulumi.StringOutput      `pulumi:"replicationSubnetGroupArn"`
	ReplicationSubnetGroupDescription pulumi.StringOutput      `pulumi:"replicationSubnetGroupDescription"`
	ReplicationSubnetGroupId          pulumi.StringOutput      `pulumi:"replicationSubnetGroupId"`
	SubnetIds                         pulumi.StringArrayOutput `pulumi:"subnetIds"`
	Tags                              pulumi.StringMapOutput   `pulumi:"tags"`
	TagsAll                           pulumi.StringMapOutput   `pulumi:"tagsAll"`
	VpcId                             pulumi.StringOutput      `pulumi:"vpcId"`
}

// NewReplicationSubnetGroup registers a new resource with the given unique name, arguments, and options.
func NewReplicationSubnetGroup(ctx *pulumi.Context,
	name string, args *ReplicationSubnetGroupArgs, opts ...pulumi.ResourceOption) (*ReplicationSubnetGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ReplicationSubnetGroupDescription == nil {
		return nil, errors.New("invalid value for required argument 'ReplicationSubnetGroupDescription'")
	}
	if args.ReplicationSubnetGroupId == nil {
		return nil, errors.New("invalid value for required argument 'ReplicationSubnetGroupId'")
	}
	if args.SubnetIds == nil {
		return nil, errors.New("invalid value for required argument 'SubnetIds'")
	}
	var resource ReplicationSubnetGroup
	err := ctx.RegisterResource("aws:dms/replicationSubnetGroup:ReplicationSubnetGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetReplicationSubnetGroup gets an existing ReplicationSubnetGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetReplicationSubnetGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ReplicationSubnetGroupState, opts ...pulumi.ResourceOption) (*ReplicationSubnetGroup, error) {
	var resource ReplicationSubnetGroup
	err := ctx.ReadResource("aws:dms/replicationSubnetGroup:ReplicationSubnetGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ReplicationSubnetGroup resources.
type replicationSubnetGroupState struct {
	ReplicationSubnetGroupArn         *string           `pulumi:"replicationSubnetGroupArn"`
	ReplicationSubnetGroupDescription *string           `pulumi:"replicationSubnetGroupDescription"`
	ReplicationSubnetGroupId          *string           `pulumi:"replicationSubnetGroupId"`
	SubnetIds                         []string          `pulumi:"subnetIds"`
	Tags                              map[string]string `pulumi:"tags"`
	TagsAll                           map[string]string `pulumi:"tagsAll"`
	VpcId                             *string           `pulumi:"vpcId"`
}

type ReplicationSubnetGroupState struct {
	ReplicationSubnetGroupArn         pulumi.StringPtrInput
	ReplicationSubnetGroupDescription pulumi.StringPtrInput
	ReplicationSubnetGroupId          pulumi.StringPtrInput
	SubnetIds                         pulumi.StringArrayInput
	Tags                              pulumi.StringMapInput
	TagsAll                           pulumi.StringMapInput
	VpcId                             pulumi.StringPtrInput
}

func (ReplicationSubnetGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*replicationSubnetGroupState)(nil)).Elem()
}

type replicationSubnetGroupArgs struct {
	ReplicationSubnetGroupDescription string            `pulumi:"replicationSubnetGroupDescription"`
	ReplicationSubnetGroupId          string            `pulumi:"replicationSubnetGroupId"`
	SubnetIds                         []string          `pulumi:"subnetIds"`
	Tags                              map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a ReplicationSubnetGroup resource.
type ReplicationSubnetGroupArgs struct {
	ReplicationSubnetGroupDescription pulumi.StringInput
	ReplicationSubnetGroupId          pulumi.StringInput
	SubnetIds                         pulumi.StringArrayInput
	Tags                              pulumi.StringMapInput
}

func (ReplicationSubnetGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*replicationSubnetGroupArgs)(nil)).Elem()
}

type ReplicationSubnetGroupInput interface {
	pulumi.Input

	ToReplicationSubnetGroupOutput() ReplicationSubnetGroupOutput
	ToReplicationSubnetGroupOutputWithContext(ctx context.Context) ReplicationSubnetGroupOutput
}

func (*ReplicationSubnetGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**ReplicationSubnetGroup)(nil)).Elem()
}

func (i *ReplicationSubnetGroup) ToReplicationSubnetGroupOutput() ReplicationSubnetGroupOutput {
	return i.ToReplicationSubnetGroupOutputWithContext(context.Background())
}

func (i *ReplicationSubnetGroup) ToReplicationSubnetGroupOutputWithContext(ctx context.Context) ReplicationSubnetGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicationSubnetGroupOutput)
}

// ReplicationSubnetGroupArrayInput is an input type that accepts ReplicationSubnetGroupArray and ReplicationSubnetGroupArrayOutput values.
// You can construct a concrete instance of `ReplicationSubnetGroupArrayInput` via:
//
//	ReplicationSubnetGroupArray{ ReplicationSubnetGroupArgs{...} }
type ReplicationSubnetGroupArrayInput interface {
	pulumi.Input

	ToReplicationSubnetGroupArrayOutput() ReplicationSubnetGroupArrayOutput
	ToReplicationSubnetGroupArrayOutputWithContext(context.Context) ReplicationSubnetGroupArrayOutput
}

type ReplicationSubnetGroupArray []ReplicationSubnetGroupInput

func (ReplicationSubnetGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ReplicationSubnetGroup)(nil)).Elem()
}

func (i ReplicationSubnetGroupArray) ToReplicationSubnetGroupArrayOutput() ReplicationSubnetGroupArrayOutput {
	return i.ToReplicationSubnetGroupArrayOutputWithContext(context.Background())
}

func (i ReplicationSubnetGroupArray) ToReplicationSubnetGroupArrayOutputWithContext(ctx context.Context) ReplicationSubnetGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicationSubnetGroupArrayOutput)
}

// ReplicationSubnetGroupMapInput is an input type that accepts ReplicationSubnetGroupMap and ReplicationSubnetGroupMapOutput values.
// You can construct a concrete instance of `ReplicationSubnetGroupMapInput` via:
//
//	ReplicationSubnetGroupMap{ "key": ReplicationSubnetGroupArgs{...} }
type ReplicationSubnetGroupMapInput interface {
	pulumi.Input

	ToReplicationSubnetGroupMapOutput() ReplicationSubnetGroupMapOutput
	ToReplicationSubnetGroupMapOutputWithContext(context.Context) ReplicationSubnetGroupMapOutput
}

type ReplicationSubnetGroupMap map[string]ReplicationSubnetGroupInput

func (ReplicationSubnetGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ReplicationSubnetGroup)(nil)).Elem()
}

func (i ReplicationSubnetGroupMap) ToReplicationSubnetGroupMapOutput() ReplicationSubnetGroupMapOutput {
	return i.ToReplicationSubnetGroupMapOutputWithContext(context.Background())
}

func (i ReplicationSubnetGroupMap) ToReplicationSubnetGroupMapOutputWithContext(ctx context.Context) ReplicationSubnetGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicationSubnetGroupMapOutput)
}

type ReplicationSubnetGroupOutput struct{ *pulumi.OutputState }

func (ReplicationSubnetGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReplicationSubnetGroup)(nil)).Elem()
}

func (o ReplicationSubnetGroupOutput) ToReplicationSubnetGroupOutput() ReplicationSubnetGroupOutput {
	return o
}

func (o ReplicationSubnetGroupOutput) ToReplicationSubnetGroupOutputWithContext(ctx context.Context) ReplicationSubnetGroupOutput {
	return o
}

func (o ReplicationSubnetGroupOutput) ReplicationSubnetGroupArn() pulumi.StringOutput {
	return o.ApplyT(func(v *ReplicationSubnetGroup) pulumi.StringOutput { return v.ReplicationSubnetGroupArn }).(pulumi.StringOutput)
}

func (o ReplicationSubnetGroupOutput) ReplicationSubnetGroupDescription() pulumi.StringOutput {
	return o.ApplyT(func(v *ReplicationSubnetGroup) pulumi.StringOutput { return v.ReplicationSubnetGroupDescription }).(pulumi.StringOutput)
}

func (o ReplicationSubnetGroupOutput) ReplicationSubnetGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *ReplicationSubnetGroup) pulumi.StringOutput { return v.ReplicationSubnetGroupId }).(pulumi.StringOutput)
}

func (o ReplicationSubnetGroupOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ReplicationSubnetGroup) pulumi.StringArrayOutput { return v.SubnetIds }).(pulumi.StringArrayOutput)
}

func (o ReplicationSubnetGroupOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ReplicationSubnetGroup) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o ReplicationSubnetGroupOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ReplicationSubnetGroup) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o ReplicationSubnetGroupOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *ReplicationSubnetGroup) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

type ReplicationSubnetGroupArrayOutput struct{ *pulumi.OutputState }

func (ReplicationSubnetGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ReplicationSubnetGroup)(nil)).Elem()
}

func (o ReplicationSubnetGroupArrayOutput) ToReplicationSubnetGroupArrayOutput() ReplicationSubnetGroupArrayOutput {
	return o
}

func (o ReplicationSubnetGroupArrayOutput) ToReplicationSubnetGroupArrayOutputWithContext(ctx context.Context) ReplicationSubnetGroupArrayOutput {
	return o
}

func (o ReplicationSubnetGroupArrayOutput) Index(i pulumi.IntInput) ReplicationSubnetGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ReplicationSubnetGroup {
		return vs[0].([]*ReplicationSubnetGroup)[vs[1].(int)]
	}).(ReplicationSubnetGroupOutput)
}

type ReplicationSubnetGroupMapOutput struct{ *pulumi.OutputState }

func (ReplicationSubnetGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ReplicationSubnetGroup)(nil)).Elem()
}

func (o ReplicationSubnetGroupMapOutput) ToReplicationSubnetGroupMapOutput() ReplicationSubnetGroupMapOutput {
	return o
}

func (o ReplicationSubnetGroupMapOutput) ToReplicationSubnetGroupMapOutputWithContext(ctx context.Context) ReplicationSubnetGroupMapOutput {
	return o
}

func (o ReplicationSubnetGroupMapOutput) MapIndex(k pulumi.StringInput) ReplicationSubnetGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ReplicationSubnetGroup {
		return vs[0].(map[string]*ReplicationSubnetGroup)[vs[1].(string)]
	}).(ReplicationSubnetGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ReplicationSubnetGroupInput)(nil)).Elem(), &ReplicationSubnetGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReplicationSubnetGroupArrayInput)(nil)).Elem(), ReplicationSubnetGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReplicationSubnetGroupMapInput)(nil)).Elem(), ReplicationSubnetGroupMap{})
	pulumi.RegisterOutputType(ReplicationSubnetGroupOutput{})
	pulumi.RegisterOutputType(ReplicationSubnetGroupArrayOutput{})
	pulumi.RegisterOutputType(ReplicationSubnetGroupMapOutput{})
}
