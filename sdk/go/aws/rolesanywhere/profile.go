// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rolesanywhere

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Profile struct {
	pulumi.CustomResourceState

	Arn                       pulumi.StringOutput      `pulumi:"arn"`
	DurationSeconds           pulumi.IntOutput         `pulumi:"durationSeconds"`
	Enabled                   pulumi.BoolPtrOutput     `pulumi:"enabled"`
	ManagedPolicyArns         pulumi.StringArrayOutput `pulumi:"managedPolicyArns"`
	Name                      pulumi.StringOutput      `pulumi:"name"`
	RequireInstanceProperties pulumi.BoolPtrOutput     `pulumi:"requireInstanceProperties"`
	RoleArns                  pulumi.StringArrayOutput `pulumi:"roleArns"`
	SessionPolicy             pulumi.StringPtrOutput   `pulumi:"sessionPolicy"`
	Tags                      pulumi.StringMapOutput   `pulumi:"tags"`
	TagsAll                   pulumi.StringMapOutput   `pulumi:"tagsAll"`
}

// NewProfile registers a new resource with the given unique name, arguments, and options.
func NewProfile(ctx *pulumi.Context,
	name string, args *ProfileArgs, opts ...pulumi.ResourceOption) (*Profile, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RoleArns == nil {
		return nil, errors.New("invalid value for required argument 'RoleArns'")
	}
	var resource Profile
	err := ctx.RegisterResource("aws:rolesanywhere/profile:Profile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProfile gets an existing Profile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProfile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProfileState, opts ...pulumi.ResourceOption) (*Profile, error) {
	var resource Profile
	err := ctx.ReadResource("aws:rolesanywhere/profile:Profile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Profile resources.
type profileState struct {
	Arn                       *string           `pulumi:"arn"`
	DurationSeconds           *int              `pulumi:"durationSeconds"`
	Enabled                   *bool             `pulumi:"enabled"`
	ManagedPolicyArns         []string          `pulumi:"managedPolicyArns"`
	Name                      *string           `pulumi:"name"`
	RequireInstanceProperties *bool             `pulumi:"requireInstanceProperties"`
	RoleArns                  []string          `pulumi:"roleArns"`
	SessionPolicy             *string           `pulumi:"sessionPolicy"`
	Tags                      map[string]string `pulumi:"tags"`
	TagsAll                   map[string]string `pulumi:"tagsAll"`
}

type ProfileState struct {
	Arn                       pulumi.StringPtrInput
	DurationSeconds           pulumi.IntPtrInput
	Enabled                   pulumi.BoolPtrInput
	ManagedPolicyArns         pulumi.StringArrayInput
	Name                      pulumi.StringPtrInput
	RequireInstanceProperties pulumi.BoolPtrInput
	RoleArns                  pulumi.StringArrayInput
	SessionPolicy             pulumi.StringPtrInput
	Tags                      pulumi.StringMapInput
	TagsAll                   pulumi.StringMapInput
}

func (ProfileState) ElementType() reflect.Type {
	return reflect.TypeOf((*profileState)(nil)).Elem()
}

type profileArgs struct {
	DurationSeconds           *int              `pulumi:"durationSeconds"`
	Enabled                   *bool             `pulumi:"enabled"`
	ManagedPolicyArns         []string          `pulumi:"managedPolicyArns"`
	Name                      *string           `pulumi:"name"`
	RequireInstanceProperties *bool             `pulumi:"requireInstanceProperties"`
	RoleArns                  []string          `pulumi:"roleArns"`
	SessionPolicy             *string           `pulumi:"sessionPolicy"`
	Tags                      map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Profile resource.
type ProfileArgs struct {
	DurationSeconds           pulumi.IntPtrInput
	Enabled                   pulumi.BoolPtrInput
	ManagedPolicyArns         pulumi.StringArrayInput
	Name                      pulumi.StringPtrInput
	RequireInstanceProperties pulumi.BoolPtrInput
	RoleArns                  pulumi.StringArrayInput
	SessionPolicy             pulumi.StringPtrInput
	Tags                      pulumi.StringMapInput
}

func (ProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*profileArgs)(nil)).Elem()
}

type ProfileInput interface {
	pulumi.Input

	ToProfileOutput() ProfileOutput
	ToProfileOutputWithContext(ctx context.Context) ProfileOutput
}

func (*Profile) ElementType() reflect.Type {
	return reflect.TypeOf((**Profile)(nil)).Elem()
}

func (i *Profile) ToProfileOutput() ProfileOutput {
	return i.ToProfileOutputWithContext(context.Background())
}

func (i *Profile) ToProfileOutputWithContext(ctx context.Context) ProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileOutput)
}

// ProfileArrayInput is an input type that accepts ProfileArray and ProfileArrayOutput values.
// You can construct a concrete instance of `ProfileArrayInput` via:
//
//	ProfileArray{ ProfileArgs{...} }
type ProfileArrayInput interface {
	pulumi.Input

	ToProfileArrayOutput() ProfileArrayOutput
	ToProfileArrayOutputWithContext(context.Context) ProfileArrayOutput
}

type ProfileArray []ProfileInput

func (ProfileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Profile)(nil)).Elem()
}

func (i ProfileArray) ToProfileArrayOutput() ProfileArrayOutput {
	return i.ToProfileArrayOutputWithContext(context.Background())
}

func (i ProfileArray) ToProfileArrayOutputWithContext(ctx context.Context) ProfileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileArrayOutput)
}

// ProfileMapInput is an input type that accepts ProfileMap and ProfileMapOutput values.
// You can construct a concrete instance of `ProfileMapInput` via:
//
//	ProfileMap{ "key": ProfileArgs{...} }
type ProfileMapInput interface {
	pulumi.Input

	ToProfileMapOutput() ProfileMapOutput
	ToProfileMapOutputWithContext(context.Context) ProfileMapOutput
}

type ProfileMap map[string]ProfileInput

func (ProfileMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Profile)(nil)).Elem()
}

func (i ProfileMap) ToProfileMapOutput() ProfileMapOutput {
	return i.ToProfileMapOutputWithContext(context.Background())
}

func (i ProfileMap) ToProfileMapOutputWithContext(ctx context.Context) ProfileMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileMapOutput)
}

type ProfileOutput struct{ *pulumi.OutputState }

func (ProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Profile)(nil)).Elem()
}

func (o ProfileOutput) ToProfileOutput() ProfileOutput {
	return o
}

func (o ProfileOutput) ToProfileOutputWithContext(ctx context.Context) ProfileOutput {
	return o
}

func (o ProfileOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o ProfileOutput) DurationSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v *Profile) pulumi.IntOutput { return v.DurationSeconds }).(pulumi.IntOutput)
}

func (o ProfileOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Profile) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o ProfileOutput) ManagedPolicyArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringArrayOutput { return v.ManagedPolicyArns }).(pulumi.StringArrayOutput)
}

func (o ProfileOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ProfileOutput) RequireInstanceProperties() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Profile) pulumi.BoolPtrOutput { return v.RequireInstanceProperties }).(pulumi.BoolPtrOutput)
}

func (o ProfileOutput) RoleArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringArrayOutput { return v.RoleArns }).(pulumi.StringArrayOutput)
}

func (o ProfileOutput) SessionPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringPtrOutput { return v.SessionPolicy }).(pulumi.StringPtrOutput)
}

func (o ProfileOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o ProfileOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type ProfileArrayOutput struct{ *pulumi.OutputState }

func (ProfileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Profile)(nil)).Elem()
}

func (o ProfileArrayOutput) ToProfileArrayOutput() ProfileArrayOutput {
	return o
}

func (o ProfileArrayOutput) ToProfileArrayOutputWithContext(ctx context.Context) ProfileArrayOutput {
	return o
}

func (o ProfileArrayOutput) Index(i pulumi.IntInput) ProfileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Profile {
		return vs[0].([]*Profile)[vs[1].(int)]
	}).(ProfileOutput)
}

type ProfileMapOutput struct{ *pulumi.OutputState }

func (ProfileMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Profile)(nil)).Elem()
}

func (o ProfileMapOutput) ToProfileMapOutput() ProfileMapOutput {
	return o
}

func (o ProfileMapOutput) ToProfileMapOutputWithContext(ctx context.Context) ProfileMapOutput {
	return o
}

func (o ProfileMapOutput) MapIndex(k pulumi.StringInput) ProfileOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Profile {
		return vs[0].(map[string]*Profile)[vs[1].(string)]
	}).(ProfileOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileInput)(nil)).Elem(), &Profile{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileArrayInput)(nil)).Elem(), ProfileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileMapInput)(nil)).Elem(), ProfileMap{})
	pulumi.RegisterOutputType(ProfileOutput{})
	pulumi.RegisterOutputType(ProfileArrayOutput{})
	pulumi.RegisterOutputType(ProfileMapOutput{})
}
