// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ecs

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// > **Note:** To prevent a race condition during service deletion, make sure to set `dependsOn` to the related `iam.RolePolicy`; otherwise, the policy may be destroyed too soon and the ECS service will then get stuck in the `DRAINING` state.
//
// Provides an ECS service - effectively a task that is expected to run until an error occurs or a user terminates it (typically a webserver or a database).
//
// See [ECS Services section in AWS developer guide](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs_services.html).
//
//
// ## capacityProviderStrategy
//
// The `capacityProviderStrategy` configuration block supports the following:
//
// * `capacityProvider` - (Required) The short name or full Amazon Resource Name (ARN) of the capacity provider.
// * `weight` - (Required) The relative percentage of the total number of launched tasks that should use the specified capacity provider.
// * `base` - (Optional) The number of tasks, at a minimum, to run on the specified capacity provider. Only one capacity provider in a capacity provider strategy can have a base defined.
//
// ## deploymentController
//
// The `deploymentController` configuration block supports the following:
//
// * `type` - (Optional) Type of deployment controller. Valid values: `CODE_DEPLOY`, `ECS`. Default: `ECS`.
//
// ## loadBalancer
//
// `loadBalancer` supports the following:
//
// * `elbName` - (Required for ELB Classic) The name of the ELB (Classic) to associate with the service.
// * `targetGroupArn` - (Required for ALB/NLB) The ARN of the Load Balancer target group to associate with the service.
// * `containerName` - (Required) The name of the container to associate with the load balancer (as it appears in a container definition).
// * `containerPort` - (Required) The port on the container to associate with the load balancer.
//
// > **Version note:** Multiple `loadBalancer` configuration block support was added in version 2.22.0 of the provider. This allows configuration of [ECS service support for multiple target groups](https://aws.amazon.com/about-aws/whats-new/2019/07/amazon-ecs-services-now-support-multiple-load-balancer-target-groups/).
//
// ## orderedPlacementStrategy
//
// `orderedPlacementStrategy` supports the following:
//
// * `type` - (Required) The type of placement strategy. Must be one of: `binpack`, `random`, or `spread`
// * `field` - (Optional) For the `spread` placement strategy, valid values are `instanceId` (or `host`,
//  which has the same effect), or any platform or custom attribute that is applied to a container instance.
//  For the `binpack` type, valid values are `memory` and `cpu`. For the `random` type, this attribute is not
//  needed. For more information, see [Placement Strategy](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_PlacementStrategy.html).
//
// > **Note:** for `spread`, `host` and `instanceId` will be normalized, by AWS, to be `instanceId`. This means the statefile will show `instanceId` but your config will differ if you use `host`.
//
// ## placementConstraints
//
// `placementConstraints` support the following:
//
// * `type` - (Required) The type of constraint. The only valid values at this time are `memberOf` and `distinctInstance`.
// * `expression` -  (Optional) Cluster Query Language expression to apply to the constraint. Does not need to be specified
// for the `distinctInstance` type.
// For more information, see [Cluster Query Language in the Amazon EC2 Container
// Service Developer
// Guide](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html).
//
// ## networkConfiguration
//
// `networkConfiguration` support the following:
//
// * `subnets` - (Required) The subnets associated with the task or service.
// * `securityGroups` - (Optional) The security groups associated with the task or service. If you do not specify a security group, the default security group for the VPC is used.
// * `assignPublicIp` - (Optional) Assign a public IP address to the ENI (Fargate launch type only). Valid values are `true` or `false`. Default `false`.
//
// For more information, see [Task Networking](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html)
//
// ## serviceRegistries
//
// `serviceRegistries` support the following:
//
// * `registryArn` - (Required) The ARN of the Service Registry. The currently supported service registry is Amazon Route 53 Auto Naming Service(`servicediscovery.Service`). For more information, see [Service](https://docs.aws.amazon.com/Route53/latest/APIReference/API_autonaming_Service.html)
// * `port` - (Optional) The port value used if your Service Discovery service specified an SRV record.
// * `containerPort` - (Optional) The port value, already specified in the task definition, to be used for your service discovery service.
// * `containerName` - (Optional) The container name value, already specified in the task definition, to be used for your service discovery service.
type Service struct {
	pulumi.CustomResourceState

	// The capacity provider strategy to use for the service. Can be one or more.  Defined below.
	CapacityProviderStrategies ServiceCapacityProviderStrategyArrayOutput `pulumi:"capacityProviderStrategies"`
	// ARN of an ECS cluster
	Cluster pulumi.StringOutput `pulumi:"cluster"`
	// Configuration block containing deployment controller configuration. Defined below.
	DeploymentController ServiceDeploymentControllerPtrOutput `pulumi:"deploymentController"`
	// The upper limit (as a percentage of the service's desiredCount) of the number of running tasks that can be running in a service during a deployment. Not valid when using the `DAEMON` scheduling strategy.
	DeploymentMaximumPercent pulumi.IntPtrOutput `pulumi:"deploymentMaximumPercent"`
	// The lower limit (as a percentage of the service's desiredCount) of the number of running tasks that must remain running and healthy in a service during a deployment.
	DeploymentMinimumHealthyPercent pulumi.IntPtrOutput `pulumi:"deploymentMinimumHealthyPercent"`
	// The number of instances of the task definition to place and keep running. Defaults to 0. Do not specify if using the `DAEMON` scheduling strategy.
	DesiredCount pulumi.IntPtrOutput `pulumi:"desiredCount"`
	// Specifies whether to enable Amazon ECS managed tags for the tasks within the service.
	EnableEcsManagedTags pulumi.BoolPtrOutput `pulumi:"enableEcsManagedTags"`
	// Seconds to ignore failing load balancer health checks on newly instantiated tasks to prevent premature shutdown, up to 2147483647. Only valid for services configured to use load balancers.
	HealthCheckGracePeriodSeconds pulumi.IntPtrOutput `pulumi:"healthCheckGracePeriodSeconds"`
	// ARN of the IAM role that allows Amazon ECS to make calls to your load balancer on your behalf. This parameter is required if you are using a load balancer with your service, but only if your task definition does not use the `awsvpc` network mode. If using `awsvpc` network mode, do not specify this role. If your account has already created the Amazon ECS service-linked role, that role is used by default for your service unless you specify a role here.
	IamRole pulumi.StringOutput `pulumi:"iamRole"`
	// The launch type on which to run your service. The valid values are `EC2` and `FARGATE`. Defaults to `EC2`.
	LaunchType pulumi.StringOutput `pulumi:"launchType"`
	// A load balancer block. Load balancers documented below.
	LoadBalancers ServiceLoadBalancerArrayOutput `pulumi:"loadBalancers"`
	// The name of the service (up to 255 letters, numbers, hyphens, and underscores)
	Name pulumi.StringOutput `pulumi:"name"`
	// The network configuration for the service. This parameter is required for task definitions that use the `awsvpc` network mode to receive their own Elastic Network Interface, and it is not supported for other network modes.
	NetworkConfiguration ServiceNetworkConfigurationPtrOutput `pulumi:"networkConfiguration"`
	// Service level strategy rules that are taken into consideration during task placement. List from top to bottom in order of precedence. The maximum number of `orderedPlacementStrategy` blocks is `5`. Defined below.
	OrderedPlacementStrategies ServiceOrderedPlacementStrategyArrayOutput `pulumi:"orderedPlacementStrategies"`
	// rules that are taken into consideration during task placement. Maximum number of
	// `placementConstraints` is `10`. Defined below.
	PlacementConstraints ServicePlacementConstraintArrayOutput `pulumi:"placementConstraints"`
	// The platform version on which to run your service. Only applicable for `launchType` set to `FARGATE`. Defaults to `LATEST`. More information about Fargate platform versions can be found in the [AWS ECS User Guide](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html).
	PlatformVersion pulumi.StringOutput `pulumi:"platformVersion"`
	// Specifies whether to propagate the tags from the task definition or the service to the tasks. The valid values are `SERVICE` and `TASK_DEFINITION`.
	PropagateTags pulumi.StringPtrOutput `pulumi:"propagateTags"`
	// The scheduling strategy to use for the service. The valid values are `REPLICA` and `DAEMON`. Defaults to `REPLICA`. Note that [*Fargate tasks do not support the `DAEMON` scheduling strategy*](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/scheduling_tasks.html).
	SchedulingStrategy pulumi.StringPtrOutput `pulumi:"schedulingStrategy"`
	// The service discovery registries for the service. The maximum number of `serviceRegistries` blocks is `1`.
	ServiceRegistries ServiceServiceRegistriesPtrOutput `pulumi:"serviceRegistries"`
	// Key-value mapping of resource tags
	Tags pulumi.MapOutput `pulumi:"tags"`
	// The family and revision (`family:revision`) or full ARN of the task definition that you want to run in your service.
	TaskDefinition pulumi.StringOutput `pulumi:"taskDefinition"`
	// If `true`, this provider will wait for the service to reach a steady state (like [`aws ecs wait services-stable`](https://docs.aws.amazon.com/cli/latest/reference/ecs/wait/services-stable.html)) before continuing. Default `false`.
	WaitForSteadyState pulumi.BoolPtrOutput `pulumi:"waitForSteadyState"`
}

// NewService registers a new resource with the given unique name, arguments, and options.
func NewService(ctx *pulumi.Context,
	name string, args *ServiceArgs, opts ...pulumi.ResourceOption) (*Service, error) {
	if args == nil || args.TaskDefinition == nil {
		return nil, errors.New("missing required argument 'TaskDefinition'")
	}
	if args == nil {
		args = &ServiceArgs{}
	}
	var resource Service
	err := ctx.RegisterResource("aws:ecs/service:Service", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetService gets an existing Service resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceState, opts ...pulumi.ResourceOption) (*Service, error) {
	var resource Service
	err := ctx.ReadResource("aws:ecs/service:Service", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Service resources.
type serviceState struct {
	// The capacity provider strategy to use for the service. Can be one or more.  Defined below.
	CapacityProviderStrategies []ServiceCapacityProviderStrategy `pulumi:"capacityProviderStrategies"`
	// ARN of an ECS cluster
	Cluster *string `pulumi:"cluster"`
	// Configuration block containing deployment controller configuration. Defined below.
	DeploymentController *ServiceDeploymentController `pulumi:"deploymentController"`
	// The upper limit (as a percentage of the service's desiredCount) of the number of running tasks that can be running in a service during a deployment. Not valid when using the `DAEMON` scheduling strategy.
	DeploymentMaximumPercent *int `pulumi:"deploymentMaximumPercent"`
	// The lower limit (as a percentage of the service's desiredCount) of the number of running tasks that must remain running and healthy in a service during a deployment.
	DeploymentMinimumHealthyPercent *int `pulumi:"deploymentMinimumHealthyPercent"`
	// The number of instances of the task definition to place and keep running. Defaults to 0. Do not specify if using the `DAEMON` scheduling strategy.
	DesiredCount *int `pulumi:"desiredCount"`
	// Specifies whether to enable Amazon ECS managed tags for the tasks within the service.
	EnableEcsManagedTags *bool `pulumi:"enableEcsManagedTags"`
	// Seconds to ignore failing load balancer health checks on newly instantiated tasks to prevent premature shutdown, up to 2147483647. Only valid for services configured to use load balancers.
	HealthCheckGracePeriodSeconds *int `pulumi:"healthCheckGracePeriodSeconds"`
	// ARN of the IAM role that allows Amazon ECS to make calls to your load balancer on your behalf. This parameter is required if you are using a load balancer with your service, but only if your task definition does not use the `awsvpc` network mode. If using `awsvpc` network mode, do not specify this role. If your account has already created the Amazon ECS service-linked role, that role is used by default for your service unless you specify a role here.
	IamRole *string `pulumi:"iamRole"`
	// The launch type on which to run your service. The valid values are `EC2` and `FARGATE`. Defaults to `EC2`.
	LaunchType *string `pulumi:"launchType"`
	// A load balancer block. Load balancers documented below.
	LoadBalancers []ServiceLoadBalancer `pulumi:"loadBalancers"`
	// The name of the service (up to 255 letters, numbers, hyphens, and underscores)
	Name *string `pulumi:"name"`
	// The network configuration for the service. This parameter is required for task definitions that use the `awsvpc` network mode to receive their own Elastic Network Interface, and it is not supported for other network modes.
	NetworkConfiguration *ServiceNetworkConfiguration `pulumi:"networkConfiguration"`
	// Service level strategy rules that are taken into consideration during task placement. List from top to bottom in order of precedence. The maximum number of `orderedPlacementStrategy` blocks is `5`. Defined below.
	OrderedPlacementStrategies []ServiceOrderedPlacementStrategy `pulumi:"orderedPlacementStrategies"`
	// rules that are taken into consideration during task placement. Maximum number of
	// `placementConstraints` is `10`. Defined below.
	PlacementConstraints []ServicePlacementConstraint `pulumi:"placementConstraints"`
	// The platform version on which to run your service. Only applicable for `launchType` set to `FARGATE`. Defaults to `LATEST`. More information about Fargate platform versions can be found in the [AWS ECS User Guide](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html).
	PlatformVersion *string `pulumi:"platformVersion"`
	// Specifies whether to propagate the tags from the task definition or the service to the tasks. The valid values are `SERVICE` and `TASK_DEFINITION`.
	PropagateTags *string `pulumi:"propagateTags"`
	// The scheduling strategy to use for the service. The valid values are `REPLICA` and `DAEMON`. Defaults to `REPLICA`. Note that [*Fargate tasks do not support the `DAEMON` scheduling strategy*](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/scheduling_tasks.html).
	SchedulingStrategy *string `pulumi:"schedulingStrategy"`
	// The service discovery registries for the service. The maximum number of `serviceRegistries` blocks is `1`.
	ServiceRegistries *ServiceServiceRegistries `pulumi:"serviceRegistries"`
	// Key-value mapping of resource tags
	Tags map[string]interface{} `pulumi:"tags"`
	// The family and revision (`family:revision`) or full ARN of the task definition that you want to run in your service.
	TaskDefinition *string `pulumi:"taskDefinition"`
	// If `true`, this provider will wait for the service to reach a steady state (like [`aws ecs wait services-stable`](https://docs.aws.amazon.com/cli/latest/reference/ecs/wait/services-stable.html)) before continuing. Default `false`.
	WaitForSteadyState *bool `pulumi:"waitForSteadyState"`
}

type ServiceState struct {
	// The capacity provider strategy to use for the service. Can be one or more.  Defined below.
	CapacityProviderStrategies ServiceCapacityProviderStrategyArrayInput
	// ARN of an ECS cluster
	Cluster pulumi.StringPtrInput
	// Configuration block containing deployment controller configuration. Defined below.
	DeploymentController ServiceDeploymentControllerPtrInput
	// The upper limit (as a percentage of the service's desiredCount) of the number of running tasks that can be running in a service during a deployment. Not valid when using the `DAEMON` scheduling strategy.
	DeploymentMaximumPercent pulumi.IntPtrInput
	// The lower limit (as a percentage of the service's desiredCount) of the number of running tasks that must remain running and healthy in a service during a deployment.
	DeploymentMinimumHealthyPercent pulumi.IntPtrInput
	// The number of instances of the task definition to place and keep running. Defaults to 0. Do not specify if using the `DAEMON` scheduling strategy.
	DesiredCount pulumi.IntPtrInput
	// Specifies whether to enable Amazon ECS managed tags for the tasks within the service.
	EnableEcsManagedTags pulumi.BoolPtrInput
	// Seconds to ignore failing load balancer health checks on newly instantiated tasks to prevent premature shutdown, up to 2147483647. Only valid for services configured to use load balancers.
	HealthCheckGracePeriodSeconds pulumi.IntPtrInput
	// ARN of the IAM role that allows Amazon ECS to make calls to your load balancer on your behalf. This parameter is required if you are using a load balancer with your service, but only if your task definition does not use the `awsvpc` network mode. If using `awsvpc` network mode, do not specify this role. If your account has already created the Amazon ECS service-linked role, that role is used by default for your service unless you specify a role here.
	IamRole pulumi.StringPtrInput
	// The launch type on which to run your service. The valid values are `EC2` and `FARGATE`. Defaults to `EC2`.
	LaunchType pulumi.StringPtrInput
	// A load balancer block. Load balancers documented below.
	LoadBalancers ServiceLoadBalancerArrayInput
	// The name of the service (up to 255 letters, numbers, hyphens, and underscores)
	Name pulumi.StringPtrInput
	// The network configuration for the service. This parameter is required for task definitions that use the `awsvpc` network mode to receive their own Elastic Network Interface, and it is not supported for other network modes.
	NetworkConfiguration ServiceNetworkConfigurationPtrInput
	// Service level strategy rules that are taken into consideration during task placement. List from top to bottom in order of precedence. The maximum number of `orderedPlacementStrategy` blocks is `5`. Defined below.
	OrderedPlacementStrategies ServiceOrderedPlacementStrategyArrayInput
	// rules that are taken into consideration during task placement. Maximum number of
	// `placementConstraints` is `10`. Defined below.
	PlacementConstraints ServicePlacementConstraintArrayInput
	// The platform version on which to run your service. Only applicable for `launchType` set to `FARGATE`. Defaults to `LATEST`. More information about Fargate platform versions can be found in the [AWS ECS User Guide](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html).
	PlatformVersion pulumi.StringPtrInput
	// Specifies whether to propagate the tags from the task definition or the service to the tasks. The valid values are `SERVICE` and `TASK_DEFINITION`.
	PropagateTags pulumi.StringPtrInput
	// The scheduling strategy to use for the service. The valid values are `REPLICA` and `DAEMON`. Defaults to `REPLICA`. Note that [*Fargate tasks do not support the `DAEMON` scheduling strategy*](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/scheduling_tasks.html).
	SchedulingStrategy pulumi.StringPtrInput
	// The service discovery registries for the service. The maximum number of `serviceRegistries` blocks is `1`.
	ServiceRegistries ServiceServiceRegistriesPtrInput
	// Key-value mapping of resource tags
	Tags pulumi.MapInput
	// The family and revision (`family:revision`) or full ARN of the task definition that you want to run in your service.
	TaskDefinition pulumi.StringPtrInput
	// If `true`, this provider will wait for the service to reach a steady state (like [`aws ecs wait services-stable`](https://docs.aws.amazon.com/cli/latest/reference/ecs/wait/services-stable.html)) before continuing. Default `false`.
	WaitForSteadyState pulumi.BoolPtrInput
}

func (ServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceState)(nil)).Elem()
}

type serviceArgs struct {
	// The capacity provider strategy to use for the service. Can be one or more.  Defined below.
	CapacityProviderStrategies []ServiceCapacityProviderStrategy `pulumi:"capacityProviderStrategies"`
	// ARN of an ECS cluster
	Cluster *string `pulumi:"cluster"`
	// Configuration block containing deployment controller configuration. Defined below.
	DeploymentController *ServiceDeploymentController `pulumi:"deploymentController"`
	// The upper limit (as a percentage of the service's desiredCount) of the number of running tasks that can be running in a service during a deployment. Not valid when using the `DAEMON` scheduling strategy.
	DeploymentMaximumPercent *int `pulumi:"deploymentMaximumPercent"`
	// The lower limit (as a percentage of the service's desiredCount) of the number of running tasks that must remain running and healthy in a service during a deployment.
	DeploymentMinimumHealthyPercent *int `pulumi:"deploymentMinimumHealthyPercent"`
	// The number of instances of the task definition to place and keep running. Defaults to 0. Do not specify if using the `DAEMON` scheduling strategy.
	DesiredCount *int `pulumi:"desiredCount"`
	// Specifies whether to enable Amazon ECS managed tags for the tasks within the service.
	EnableEcsManagedTags *bool `pulumi:"enableEcsManagedTags"`
	// Seconds to ignore failing load balancer health checks on newly instantiated tasks to prevent premature shutdown, up to 2147483647. Only valid for services configured to use load balancers.
	HealthCheckGracePeriodSeconds *int `pulumi:"healthCheckGracePeriodSeconds"`
	// ARN of the IAM role that allows Amazon ECS to make calls to your load balancer on your behalf. This parameter is required if you are using a load balancer with your service, but only if your task definition does not use the `awsvpc` network mode. If using `awsvpc` network mode, do not specify this role. If your account has already created the Amazon ECS service-linked role, that role is used by default for your service unless you specify a role here.
	IamRole *string `pulumi:"iamRole"`
	// The launch type on which to run your service. The valid values are `EC2` and `FARGATE`. Defaults to `EC2`.
	LaunchType *string `pulumi:"launchType"`
	// A load balancer block. Load balancers documented below.
	LoadBalancers []ServiceLoadBalancer `pulumi:"loadBalancers"`
	// The name of the service (up to 255 letters, numbers, hyphens, and underscores)
	Name *string `pulumi:"name"`
	// The network configuration for the service. This parameter is required for task definitions that use the `awsvpc` network mode to receive their own Elastic Network Interface, and it is not supported for other network modes.
	NetworkConfiguration *ServiceNetworkConfiguration `pulumi:"networkConfiguration"`
	// Service level strategy rules that are taken into consideration during task placement. List from top to bottom in order of precedence. The maximum number of `orderedPlacementStrategy` blocks is `5`. Defined below.
	OrderedPlacementStrategies []ServiceOrderedPlacementStrategy `pulumi:"orderedPlacementStrategies"`
	// rules that are taken into consideration during task placement. Maximum number of
	// `placementConstraints` is `10`. Defined below.
	PlacementConstraints []ServicePlacementConstraint `pulumi:"placementConstraints"`
	// The platform version on which to run your service. Only applicable for `launchType` set to `FARGATE`. Defaults to `LATEST`. More information about Fargate platform versions can be found in the [AWS ECS User Guide](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html).
	PlatformVersion *string `pulumi:"platformVersion"`
	// Specifies whether to propagate the tags from the task definition or the service to the tasks. The valid values are `SERVICE` and `TASK_DEFINITION`.
	PropagateTags *string `pulumi:"propagateTags"`
	// The scheduling strategy to use for the service. The valid values are `REPLICA` and `DAEMON`. Defaults to `REPLICA`. Note that [*Fargate tasks do not support the `DAEMON` scheduling strategy*](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/scheduling_tasks.html).
	SchedulingStrategy *string `pulumi:"schedulingStrategy"`
	// The service discovery registries for the service. The maximum number of `serviceRegistries` blocks is `1`.
	ServiceRegistries *ServiceServiceRegistries `pulumi:"serviceRegistries"`
	// Key-value mapping of resource tags
	Tags map[string]interface{} `pulumi:"tags"`
	// The family and revision (`family:revision`) or full ARN of the task definition that you want to run in your service.
	TaskDefinition string `pulumi:"taskDefinition"`
	// If `true`, this provider will wait for the service to reach a steady state (like [`aws ecs wait services-stable`](https://docs.aws.amazon.com/cli/latest/reference/ecs/wait/services-stable.html)) before continuing. Default `false`.
	WaitForSteadyState *bool `pulumi:"waitForSteadyState"`
}

// The set of arguments for constructing a Service resource.
type ServiceArgs struct {
	// The capacity provider strategy to use for the service. Can be one or more.  Defined below.
	CapacityProviderStrategies ServiceCapacityProviderStrategyArrayInput
	// ARN of an ECS cluster
	Cluster pulumi.StringPtrInput
	// Configuration block containing deployment controller configuration. Defined below.
	DeploymentController ServiceDeploymentControllerPtrInput
	// The upper limit (as a percentage of the service's desiredCount) of the number of running tasks that can be running in a service during a deployment. Not valid when using the `DAEMON` scheduling strategy.
	DeploymentMaximumPercent pulumi.IntPtrInput
	// The lower limit (as a percentage of the service's desiredCount) of the number of running tasks that must remain running and healthy in a service during a deployment.
	DeploymentMinimumHealthyPercent pulumi.IntPtrInput
	// The number of instances of the task definition to place and keep running. Defaults to 0. Do not specify if using the `DAEMON` scheduling strategy.
	DesiredCount pulumi.IntPtrInput
	// Specifies whether to enable Amazon ECS managed tags for the tasks within the service.
	EnableEcsManagedTags pulumi.BoolPtrInput
	// Seconds to ignore failing load balancer health checks on newly instantiated tasks to prevent premature shutdown, up to 2147483647. Only valid for services configured to use load balancers.
	HealthCheckGracePeriodSeconds pulumi.IntPtrInput
	// ARN of the IAM role that allows Amazon ECS to make calls to your load balancer on your behalf. This parameter is required if you are using a load balancer with your service, but only if your task definition does not use the `awsvpc` network mode. If using `awsvpc` network mode, do not specify this role. If your account has already created the Amazon ECS service-linked role, that role is used by default for your service unless you specify a role here.
	IamRole pulumi.StringPtrInput
	// The launch type on which to run your service. The valid values are `EC2` and `FARGATE`. Defaults to `EC2`.
	LaunchType pulumi.StringPtrInput
	// A load balancer block. Load balancers documented below.
	LoadBalancers ServiceLoadBalancerArrayInput
	// The name of the service (up to 255 letters, numbers, hyphens, and underscores)
	Name pulumi.StringPtrInput
	// The network configuration for the service. This parameter is required for task definitions that use the `awsvpc` network mode to receive their own Elastic Network Interface, and it is not supported for other network modes.
	NetworkConfiguration ServiceNetworkConfigurationPtrInput
	// Service level strategy rules that are taken into consideration during task placement. List from top to bottom in order of precedence. The maximum number of `orderedPlacementStrategy` blocks is `5`. Defined below.
	OrderedPlacementStrategies ServiceOrderedPlacementStrategyArrayInput
	// rules that are taken into consideration during task placement. Maximum number of
	// `placementConstraints` is `10`. Defined below.
	PlacementConstraints ServicePlacementConstraintArrayInput
	// The platform version on which to run your service. Only applicable for `launchType` set to `FARGATE`. Defaults to `LATEST`. More information about Fargate platform versions can be found in the [AWS ECS User Guide](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html).
	PlatformVersion pulumi.StringPtrInput
	// Specifies whether to propagate the tags from the task definition or the service to the tasks. The valid values are `SERVICE` and `TASK_DEFINITION`.
	PropagateTags pulumi.StringPtrInput
	// The scheduling strategy to use for the service. The valid values are `REPLICA` and `DAEMON`. Defaults to `REPLICA`. Note that [*Fargate tasks do not support the `DAEMON` scheduling strategy*](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/scheduling_tasks.html).
	SchedulingStrategy pulumi.StringPtrInput
	// The service discovery registries for the service. The maximum number of `serviceRegistries` blocks is `1`.
	ServiceRegistries ServiceServiceRegistriesPtrInput
	// Key-value mapping of resource tags
	Tags pulumi.MapInput
	// The family and revision (`family:revision`) or full ARN of the task definition that you want to run in your service.
	TaskDefinition pulumi.StringInput
	// If `true`, this provider will wait for the service to reach a steady state (like [`aws ecs wait services-stable`](https://docs.aws.amazon.com/cli/latest/reference/ecs/wait/services-stable.html)) before continuing. Default `false`.
	WaitForSteadyState pulumi.BoolPtrInput
}

func (ServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceArgs)(nil)).Elem()
}
