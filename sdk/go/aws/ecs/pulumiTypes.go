// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ecs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type CapacityProviderAutoScalingGroupProvider struct {
	// - ARN of the associated auto scaling group.
	AutoScalingGroupArn string `pulumi:"autoScalingGroupArn"`
	// - Configuration block defining the parameters of the auto scaling. Detailed below.
	ManagedScaling *CapacityProviderAutoScalingGroupProviderManagedScaling `pulumi:"managedScaling"`
	// - Enables or disables container-aware termination of instances in the auto scaling group when scale-in happens. Valid values are `ENABLED` and `DISABLED`.
	ManagedTerminationProtection *string `pulumi:"managedTerminationProtection"`
}

// CapacityProviderAutoScalingGroupProviderInput is an input type that accepts CapacityProviderAutoScalingGroupProviderArgs and CapacityProviderAutoScalingGroupProviderOutput values.
// You can construct a concrete instance of `CapacityProviderAutoScalingGroupProviderInput` via:
//
//	CapacityProviderAutoScalingGroupProviderArgs{...}
type CapacityProviderAutoScalingGroupProviderInput interface {
	pulumi.Input

	ToCapacityProviderAutoScalingGroupProviderOutput() CapacityProviderAutoScalingGroupProviderOutput
	ToCapacityProviderAutoScalingGroupProviderOutputWithContext(context.Context) CapacityProviderAutoScalingGroupProviderOutput
}

type CapacityProviderAutoScalingGroupProviderArgs struct {
	// - ARN of the associated auto scaling group.
	AutoScalingGroupArn pulumi.StringInput `pulumi:"autoScalingGroupArn"`
	// - Configuration block defining the parameters of the auto scaling. Detailed below.
	ManagedScaling CapacityProviderAutoScalingGroupProviderManagedScalingPtrInput `pulumi:"managedScaling"`
	// - Enables or disables container-aware termination of instances in the auto scaling group when scale-in happens. Valid values are `ENABLED` and `DISABLED`.
	ManagedTerminationProtection pulumi.StringPtrInput `pulumi:"managedTerminationProtection"`
}

func (CapacityProviderAutoScalingGroupProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CapacityProviderAutoScalingGroupProvider)(nil)).Elem()
}

func (i CapacityProviderAutoScalingGroupProviderArgs) ToCapacityProviderAutoScalingGroupProviderOutput() CapacityProviderAutoScalingGroupProviderOutput {
	return i.ToCapacityProviderAutoScalingGroupProviderOutputWithContext(context.Background())
}

func (i CapacityProviderAutoScalingGroupProviderArgs) ToCapacityProviderAutoScalingGroupProviderOutputWithContext(ctx context.Context) CapacityProviderAutoScalingGroupProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapacityProviderAutoScalingGroupProviderOutput)
}

func (i CapacityProviderAutoScalingGroupProviderArgs) ToCapacityProviderAutoScalingGroupProviderPtrOutput() CapacityProviderAutoScalingGroupProviderPtrOutput {
	return i.ToCapacityProviderAutoScalingGroupProviderPtrOutputWithContext(context.Background())
}

func (i CapacityProviderAutoScalingGroupProviderArgs) ToCapacityProviderAutoScalingGroupProviderPtrOutputWithContext(ctx context.Context) CapacityProviderAutoScalingGroupProviderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapacityProviderAutoScalingGroupProviderOutput).ToCapacityProviderAutoScalingGroupProviderPtrOutputWithContext(ctx)
}

// CapacityProviderAutoScalingGroupProviderPtrInput is an input type that accepts CapacityProviderAutoScalingGroupProviderArgs, CapacityProviderAutoScalingGroupProviderPtr and CapacityProviderAutoScalingGroupProviderPtrOutput values.
// You can construct a concrete instance of `CapacityProviderAutoScalingGroupProviderPtrInput` via:
//
//	        CapacityProviderAutoScalingGroupProviderArgs{...}
//
//	or:
//
//	        nil
type CapacityProviderAutoScalingGroupProviderPtrInput interface {
	pulumi.Input

	ToCapacityProviderAutoScalingGroupProviderPtrOutput() CapacityProviderAutoScalingGroupProviderPtrOutput
	ToCapacityProviderAutoScalingGroupProviderPtrOutputWithContext(context.Context) CapacityProviderAutoScalingGroupProviderPtrOutput
}

type capacityProviderAutoScalingGroupProviderPtrType CapacityProviderAutoScalingGroupProviderArgs

func CapacityProviderAutoScalingGroupProviderPtr(v *CapacityProviderAutoScalingGroupProviderArgs) CapacityProviderAutoScalingGroupProviderPtrInput {
	return (*capacityProviderAutoScalingGroupProviderPtrType)(v)
}

func (*capacityProviderAutoScalingGroupProviderPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CapacityProviderAutoScalingGroupProvider)(nil)).Elem()
}

func (i *capacityProviderAutoScalingGroupProviderPtrType) ToCapacityProviderAutoScalingGroupProviderPtrOutput() CapacityProviderAutoScalingGroupProviderPtrOutput {
	return i.ToCapacityProviderAutoScalingGroupProviderPtrOutputWithContext(context.Background())
}

func (i *capacityProviderAutoScalingGroupProviderPtrType) ToCapacityProviderAutoScalingGroupProviderPtrOutputWithContext(ctx context.Context) CapacityProviderAutoScalingGroupProviderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapacityProviderAutoScalingGroupProviderPtrOutput)
}

type CapacityProviderAutoScalingGroupProviderOutput struct{ *pulumi.OutputState }

func (CapacityProviderAutoScalingGroupProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CapacityProviderAutoScalingGroupProvider)(nil)).Elem()
}

func (o CapacityProviderAutoScalingGroupProviderOutput) ToCapacityProviderAutoScalingGroupProviderOutput() CapacityProviderAutoScalingGroupProviderOutput {
	return o
}

func (o CapacityProviderAutoScalingGroupProviderOutput) ToCapacityProviderAutoScalingGroupProviderOutputWithContext(ctx context.Context) CapacityProviderAutoScalingGroupProviderOutput {
	return o
}

func (o CapacityProviderAutoScalingGroupProviderOutput) ToCapacityProviderAutoScalingGroupProviderPtrOutput() CapacityProviderAutoScalingGroupProviderPtrOutput {
	return o.ToCapacityProviderAutoScalingGroupProviderPtrOutputWithContext(context.Background())
}

func (o CapacityProviderAutoScalingGroupProviderOutput) ToCapacityProviderAutoScalingGroupProviderPtrOutputWithContext(ctx context.Context) CapacityProviderAutoScalingGroupProviderPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CapacityProviderAutoScalingGroupProvider) *CapacityProviderAutoScalingGroupProvider {
		return &v
	}).(CapacityProviderAutoScalingGroupProviderPtrOutput)
}

// - ARN of the associated auto scaling group.
func (o CapacityProviderAutoScalingGroupProviderOutput) AutoScalingGroupArn() pulumi.StringOutput {
	return o.ApplyT(func(v CapacityProviderAutoScalingGroupProvider) string { return v.AutoScalingGroupArn }).(pulumi.StringOutput)
}

// - Configuration block defining the parameters of the auto scaling. Detailed below.
func (o CapacityProviderAutoScalingGroupProviderOutput) ManagedScaling() CapacityProviderAutoScalingGroupProviderManagedScalingPtrOutput {
	return o.ApplyT(func(v CapacityProviderAutoScalingGroupProvider) *CapacityProviderAutoScalingGroupProviderManagedScaling {
		return v.ManagedScaling
	}).(CapacityProviderAutoScalingGroupProviderManagedScalingPtrOutput)
}

// - Enables or disables container-aware termination of instances in the auto scaling group when scale-in happens. Valid values are `ENABLED` and `DISABLED`.
func (o CapacityProviderAutoScalingGroupProviderOutput) ManagedTerminationProtection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CapacityProviderAutoScalingGroupProvider) *string { return v.ManagedTerminationProtection }).(pulumi.StringPtrOutput)
}

type CapacityProviderAutoScalingGroupProviderPtrOutput struct{ *pulumi.OutputState }

func (CapacityProviderAutoScalingGroupProviderPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CapacityProviderAutoScalingGroupProvider)(nil)).Elem()
}

func (o CapacityProviderAutoScalingGroupProviderPtrOutput) ToCapacityProviderAutoScalingGroupProviderPtrOutput() CapacityProviderAutoScalingGroupProviderPtrOutput {
	return o
}

func (o CapacityProviderAutoScalingGroupProviderPtrOutput) ToCapacityProviderAutoScalingGroupProviderPtrOutputWithContext(ctx context.Context) CapacityProviderAutoScalingGroupProviderPtrOutput {
	return o
}

func (o CapacityProviderAutoScalingGroupProviderPtrOutput) Elem() CapacityProviderAutoScalingGroupProviderOutput {
	return o.ApplyT(func(v *CapacityProviderAutoScalingGroupProvider) CapacityProviderAutoScalingGroupProvider {
		if v != nil {
			return *v
		}
		var ret CapacityProviderAutoScalingGroupProvider
		return ret
	}).(CapacityProviderAutoScalingGroupProviderOutput)
}

// - ARN of the associated auto scaling group.
func (o CapacityProviderAutoScalingGroupProviderPtrOutput) AutoScalingGroupArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CapacityProviderAutoScalingGroupProvider) *string {
		if v == nil {
			return nil
		}
		return &v.AutoScalingGroupArn
	}).(pulumi.StringPtrOutput)
}

// - Configuration block defining the parameters of the auto scaling. Detailed below.
func (o CapacityProviderAutoScalingGroupProviderPtrOutput) ManagedScaling() CapacityProviderAutoScalingGroupProviderManagedScalingPtrOutput {
	return o.ApplyT(func(v *CapacityProviderAutoScalingGroupProvider) *CapacityProviderAutoScalingGroupProviderManagedScaling {
		if v == nil {
			return nil
		}
		return v.ManagedScaling
	}).(CapacityProviderAutoScalingGroupProviderManagedScalingPtrOutput)
}

// - Enables or disables container-aware termination of instances in the auto scaling group when scale-in happens. Valid values are `ENABLED` and `DISABLED`.
func (o CapacityProviderAutoScalingGroupProviderPtrOutput) ManagedTerminationProtection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CapacityProviderAutoScalingGroupProvider) *string {
		if v == nil {
			return nil
		}
		return v.ManagedTerminationProtection
	}).(pulumi.StringPtrOutput)
}

type CapacityProviderAutoScalingGroupProviderManagedScaling struct {
	// Period of time, in seconds, after a newly launched Amazon EC2 instance can contribute to CloudWatch metrics for Auto Scaling group. If this parameter is omitted, the default value of 300 seconds is used.
	InstanceWarmupPeriod *int `pulumi:"instanceWarmupPeriod"`
	// Maximum step adjustment size. A number between 1 and 10,000.
	MaximumScalingStepSize *int `pulumi:"maximumScalingStepSize"`
	// Minimum step adjustment size. A number between 1 and 10,000.
	MinimumScalingStepSize *int `pulumi:"minimumScalingStepSize"`
	// Whether auto scaling is managed by ECS. Valid values are `ENABLED` and `DISABLED`.
	Status *string `pulumi:"status"`
	// Target utilization for the capacity provider. A number between 1 and 100.
	TargetCapacity *int `pulumi:"targetCapacity"`
}

// CapacityProviderAutoScalingGroupProviderManagedScalingInput is an input type that accepts CapacityProviderAutoScalingGroupProviderManagedScalingArgs and CapacityProviderAutoScalingGroupProviderManagedScalingOutput values.
// You can construct a concrete instance of `CapacityProviderAutoScalingGroupProviderManagedScalingInput` via:
//
//	CapacityProviderAutoScalingGroupProviderManagedScalingArgs{...}
type CapacityProviderAutoScalingGroupProviderManagedScalingInput interface {
	pulumi.Input

	ToCapacityProviderAutoScalingGroupProviderManagedScalingOutput() CapacityProviderAutoScalingGroupProviderManagedScalingOutput
	ToCapacityProviderAutoScalingGroupProviderManagedScalingOutputWithContext(context.Context) CapacityProviderAutoScalingGroupProviderManagedScalingOutput
}

type CapacityProviderAutoScalingGroupProviderManagedScalingArgs struct {
	// Period of time, in seconds, after a newly launched Amazon EC2 instance can contribute to CloudWatch metrics for Auto Scaling group. If this parameter is omitted, the default value of 300 seconds is used.
	InstanceWarmupPeriod pulumi.IntPtrInput `pulumi:"instanceWarmupPeriod"`
	// Maximum step adjustment size. A number between 1 and 10,000.
	MaximumScalingStepSize pulumi.IntPtrInput `pulumi:"maximumScalingStepSize"`
	// Minimum step adjustment size. A number between 1 and 10,000.
	MinimumScalingStepSize pulumi.IntPtrInput `pulumi:"minimumScalingStepSize"`
	// Whether auto scaling is managed by ECS. Valid values are `ENABLED` and `DISABLED`.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Target utilization for the capacity provider. A number between 1 and 100.
	TargetCapacity pulumi.IntPtrInput `pulumi:"targetCapacity"`
}

func (CapacityProviderAutoScalingGroupProviderManagedScalingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CapacityProviderAutoScalingGroupProviderManagedScaling)(nil)).Elem()
}

func (i CapacityProviderAutoScalingGroupProviderManagedScalingArgs) ToCapacityProviderAutoScalingGroupProviderManagedScalingOutput() CapacityProviderAutoScalingGroupProviderManagedScalingOutput {
	return i.ToCapacityProviderAutoScalingGroupProviderManagedScalingOutputWithContext(context.Background())
}

func (i CapacityProviderAutoScalingGroupProviderManagedScalingArgs) ToCapacityProviderAutoScalingGroupProviderManagedScalingOutputWithContext(ctx context.Context) CapacityProviderAutoScalingGroupProviderManagedScalingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapacityProviderAutoScalingGroupProviderManagedScalingOutput)
}

func (i CapacityProviderAutoScalingGroupProviderManagedScalingArgs) ToCapacityProviderAutoScalingGroupProviderManagedScalingPtrOutput() CapacityProviderAutoScalingGroupProviderManagedScalingPtrOutput {
	return i.ToCapacityProviderAutoScalingGroupProviderManagedScalingPtrOutputWithContext(context.Background())
}

func (i CapacityProviderAutoScalingGroupProviderManagedScalingArgs) ToCapacityProviderAutoScalingGroupProviderManagedScalingPtrOutputWithContext(ctx context.Context) CapacityProviderAutoScalingGroupProviderManagedScalingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapacityProviderAutoScalingGroupProviderManagedScalingOutput).ToCapacityProviderAutoScalingGroupProviderManagedScalingPtrOutputWithContext(ctx)
}

// CapacityProviderAutoScalingGroupProviderManagedScalingPtrInput is an input type that accepts CapacityProviderAutoScalingGroupProviderManagedScalingArgs, CapacityProviderAutoScalingGroupProviderManagedScalingPtr and CapacityProviderAutoScalingGroupProviderManagedScalingPtrOutput values.
// You can construct a concrete instance of `CapacityProviderAutoScalingGroupProviderManagedScalingPtrInput` via:
//
//	        CapacityProviderAutoScalingGroupProviderManagedScalingArgs{...}
//
//	or:
//
//	        nil
type CapacityProviderAutoScalingGroupProviderManagedScalingPtrInput interface {
	pulumi.Input

	ToCapacityProviderAutoScalingGroupProviderManagedScalingPtrOutput() CapacityProviderAutoScalingGroupProviderManagedScalingPtrOutput
	ToCapacityProviderAutoScalingGroupProviderManagedScalingPtrOutputWithContext(context.Context) CapacityProviderAutoScalingGroupProviderManagedScalingPtrOutput
}

type capacityProviderAutoScalingGroupProviderManagedScalingPtrType CapacityProviderAutoScalingGroupProviderManagedScalingArgs

func CapacityProviderAutoScalingGroupProviderManagedScalingPtr(v *CapacityProviderAutoScalingGroupProviderManagedScalingArgs) CapacityProviderAutoScalingGroupProviderManagedScalingPtrInput {
	return (*capacityProviderAutoScalingGroupProviderManagedScalingPtrType)(v)
}

func (*capacityProviderAutoScalingGroupProviderManagedScalingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CapacityProviderAutoScalingGroupProviderManagedScaling)(nil)).Elem()
}

func (i *capacityProviderAutoScalingGroupProviderManagedScalingPtrType) ToCapacityProviderAutoScalingGroupProviderManagedScalingPtrOutput() CapacityProviderAutoScalingGroupProviderManagedScalingPtrOutput {
	return i.ToCapacityProviderAutoScalingGroupProviderManagedScalingPtrOutputWithContext(context.Background())
}

func (i *capacityProviderAutoScalingGroupProviderManagedScalingPtrType) ToCapacityProviderAutoScalingGroupProviderManagedScalingPtrOutputWithContext(ctx context.Context) CapacityProviderAutoScalingGroupProviderManagedScalingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapacityProviderAutoScalingGroupProviderManagedScalingPtrOutput)
}

type CapacityProviderAutoScalingGroupProviderManagedScalingOutput struct{ *pulumi.OutputState }

func (CapacityProviderAutoScalingGroupProviderManagedScalingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CapacityProviderAutoScalingGroupProviderManagedScaling)(nil)).Elem()
}

func (o CapacityProviderAutoScalingGroupProviderManagedScalingOutput) ToCapacityProviderAutoScalingGroupProviderManagedScalingOutput() CapacityProviderAutoScalingGroupProviderManagedScalingOutput {
	return o
}

func (o CapacityProviderAutoScalingGroupProviderManagedScalingOutput) ToCapacityProviderAutoScalingGroupProviderManagedScalingOutputWithContext(ctx context.Context) CapacityProviderAutoScalingGroupProviderManagedScalingOutput {
	return o
}

func (o CapacityProviderAutoScalingGroupProviderManagedScalingOutput) ToCapacityProviderAutoScalingGroupProviderManagedScalingPtrOutput() CapacityProviderAutoScalingGroupProviderManagedScalingPtrOutput {
	return o.ToCapacityProviderAutoScalingGroupProviderManagedScalingPtrOutputWithContext(context.Background())
}

func (o CapacityProviderAutoScalingGroupProviderManagedScalingOutput) ToCapacityProviderAutoScalingGroupProviderManagedScalingPtrOutputWithContext(ctx context.Context) CapacityProviderAutoScalingGroupProviderManagedScalingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CapacityProviderAutoScalingGroupProviderManagedScaling) *CapacityProviderAutoScalingGroupProviderManagedScaling {
		return &v
	}).(CapacityProviderAutoScalingGroupProviderManagedScalingPtrOutput)
}

// Period of time, in seconds, after a newly launched Amazon EC2 instance can contribute to CloudWatch metrics for Auto Scaling group. If this parameter is omitted, the default value of 300 seconds is used.
func (o CapacityProviderAutoScalingGroupProviderManagedScalingOutput) InstanceWarmupPeriod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CapacityProviderAutoScalingGroupProviderManagedScaling) *int { return v.InstanceWarmupPeriod }).(pulumi.IntPtrOutput)
}

// Maximum step adjustment size. A number between 1 and 10,000.
func (o CapacityProviderAutoScalingGroupProviderManagedScalingOutput) MaximumScalingStepSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CapacityProviderAutoScalingGroupProviderManagedScaling) *int { return v.MaximumScalingStepSize }).(pulumi.IntPtrOutput)
}

// Minimum step adjustment size. A number between 1 and 10,000.
func (o CapacityProviderAutoScalingGroupProviderManagedScalingOutput) MinimumScalingStepSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CapacityProviderAutoScalingGroupProviderManagedScaling) *int { return v.MinimumScalingStepSize }).(pulumi.IntPtrOutput)
}

// Whether auto scaling is managed by ECS. Valid values are `ENABLED` and `DISABLED`.
func (o CapacityProviderAutoScalingGroupProviderManagedScalingOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CapacityProviderAutoScalingGroupProviderManagedScaling) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Target utilization for the capacity provider. A number between 1 and 100.
func (o CapacityProviderAutoScalingGroupProviderManagedScalingOutput) TargetCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CapacityProviderAutoScalingGroupProviderManagedScaling) *int { return v.TargetCapacity }).(pulumi.IntPtrOutput)
}

type CapacityProviderAutoScalingGroupProviderManagedScalingPtrOutput struct{ *pulumi.OutputState }

func (CapacityProviderAutoScalingGroupProviderManagedScalingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CapacityProviderAutoScalingGroupProviderManagedScaling)(nil)).Elem()
}

func (o CapacityProviderAutoScalingGroupProviderManagedScalingPtrOutput) ToCapacityProviderAutoScalingGroupProviderManagedScalingPtrOutput() CapacityProviderAutoScalingGroupProviderManagedScalingPtrOutput {
	return o
}

func (o CapacityProviderAutoScalingGroupProviderManagedScalingPtrOutput) ToCapacityProviderAutoScalingGroupProviderManagedScalingPtrOutputWithContext(ctx context.Context) CapacityProviderAutoScalingGroupProviderManagedScalingPtrOutput {
	return o
}

func (o CapacityProviderAutoScalingGroupProviderManagedScalingPtrOutput) Elem() CapacityProviderAutoScalingGroupProviderManagedScalingOutput {
	return o.ApplyT(func(v *CapacityProviderAutoScalingGroupProviderManagedScaling) CapacityProviderAutoScalingGroupProviderManagedScaling {
		if v != nil {
			return *v
		}
		var ret CapacityProviderAutoScalingGroupProviderManagedScaling
		return ret
	}).(CapacityProviderAutoScalingGroupProviderManagedScalingOutput)
}

// Period of time, in seconds, after a newly launched Amazon EC2 instance can contribute to CloudWatch metrics for Auto Scaling group. If this parameter is omitted, the default value of 300 seconds is used.
func (o CapacityProviderAutoScalingGroupProviderManagedScalingPtrOutput) InstanceWarmupPeriod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CapacityProviderAutoScalingGroupProviderManagedScaling) *int {
		if v == nil {
			return nil
		}
		return v.InstanceWarmupPeriod
	}).(pulumi.IntPtrOutput)
}

// Maximum step adjustment size. A number between 1 and 10,000.
func (o CapacityProviderAutoScalingGroupProviderManagedScalingPtrOutput) MaximumScalingStepSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CapacityProviderAutoScalingGroupProviderManagedScaling) *int {
		if v == nil {
			return nil
		}
		return v.MaximumScalingStepSize
	}).(pulumi.IntPtrOutput)
}

// Minimum step adjustment size. A number between 1 and 10,000.
func (o CapacityProviderAutoScalingGroupProviderManagedScalingPtrOutput) MinimumScalingStepSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CapacityProviderAutoScalingGroupProviderManagedScaling) *int {
		if v == nil {
			return nil
		}
		return v.MinimumScalingStepSize
	}).(pulumi.IntPtrOutput)
}

// Whether auto scaling is managed by ECS. Valid values are `ENABLED` and `DISABLED`.
func (o CapacityProviderAutoScalingGroupProviderManagedScalingPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CapacityProviderAutoScalingGroupProviderManagedScaling) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// Target utilization for the capacity provider. A number between 1 and 100.
func (o CapacityProviderAutoScalingGroupProviderManagedScalingPtrOutput) TargetCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CapacityProviderAutoScalingGroupProviderManagedScaling) *int {
		if v == nil {
			return nil
		}
		return v.TargetCapacity
	}).(pulumi.IntPtrOutput)
}

type ClusterCapacityProvidersDefaultCapacityProviderStrategy struct {
	// The number of tasks, at a minimum, to run on the specified capacity provider. Only one capacity provider in a capacity provider strategy can have a base defined. Defaults to `0`.
	Base *int `pulumi:"base"`
	// Name of the capacity provider.
	CapacityProvider string `pulumi:"capacityProvider"`
	// The relative percentage of the total number of launched tasks that should use the specified capacity provider. The `weight` value is taken into consideration after the `base` count of tasks has been satisfied. Defaults to `0`.
	Weight *int `pulumi:"weight"`
}

// ClusterCapacityProvidersDefaultCapacityProviderStrategyInput is an input type that accepts ClusterCapacityProvidersDefaultCapacityProviderStrategyArgs and ClusterCapacityProvidersDefaultCapacityProviderStrategyOutput values.
// You can construct a concrete instance of `ClusterCapacityProvidersDefaultCapacityProviderStrategyInput` via:
//
//	ClusterCapacityProvidersDefaultCapacityProviderStrategyArgs{...}
type ClusterCapacityProvidersDefaultCapacityProviderStrategyInput interface {
	pulumi.Input

	ToClusterCapacityProvidersDefaultCapacityProviderStrategyOutput() ClusterCapacityProvidersDefaultCapacityProviderStrategyOutput
	ToClusterCapacityProvidersDefaultCapacityProviderStrategyOutputWithContext(context.Context) ClusterCapacityProvidersDefaultCapacityProviderStrategyOutput
}

type ClusterCapacityProvidersDefaultCapacityProviderStrategyArgs struct {
	// The number of tasks, at a minimum, to run on the specified capacity provider. Only one capacity provider in a capacity provider strategy can have a base defined. Defaults to `0`.
	Base pulumi.IntPtrInput `pulumi:"base"`
	// Name of the capacity provider.
	CapacityProvider pulumi.StringInput `pulumi:"capacityProvider"`
	// The relative percentage of the total number of launched tasks that should use the specified capacity provider. The `weight` value is taken into consideration after the `base` count of tasks has been satisfied. Defaults to `0`.
	Weight pulumi.IntPtrInput `pulumi:"weight"`
}

func (ClusterCapacityProvidersDefaultCapacityProviderStrategyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCapacityProvidersDefaultCapacityProviderStrategy)(nil)).Elem()
}

func (i ClusterCapacityProvidersDefaultCapacityProviderStrategyArgs) ToClusterCapacityProvidersDefaultCapacityProviderStrategyOutput() ClusterCapacityProvidersDefaultCapacityProviderStrategyOutput {
	return i.ToClusterCapacityProvidersDefaultCapacityProviderStrategyOutputWithContext(context.Background())
}

func (i ClusterCapacityProvidersDefaultCapacityProviderStrategyArgs) ToClusterCapacityProvidersDefaultCapacityProviderStrategyOutputWithContext(ctx context.Context) ClusterCapacityProvidersDefaultCapacityProviderStrategyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCapacityProvidersDefaultCapacityProviderStrategyOutput)
}

// ClusterCapacityProvidersDefaultCapacityProviderStrategyArrayInput is an input type that accepts ClusterCapacityProvidersDefaultCapacityProviderStrategyArray and ClusterCapacityProvidersDefaultCapacityProviderStrategyArrayOutput values.
// You can construct a concrete instance of `ClusterCapacityProvidersDefaultCapacityProviderStrategyArrayInput` via:
//
//	ClusterCapacityProvidersDefaultCapacityProviderStrategyArray{ ClusterCapacityProvidersDefaultCapacityProviderStrategyArgs{...} }
type ClusterCapacityProvidersDefaultCapacityProviderStrategyArrayInput interface {
	pulumi.Input

	ToClusterCapacityProvidersDefaultCapacityProviderStrategyArrayOutput() ClusterCapacityProvidersDefaultCapacityProviderStrategyArrayOutput
	ToClusterCapacityProvidersDefaultCapacityProviderStrategyArrayOutputWithContext(context.Context) ClusterCapacityProvidersDefaultCapacityProviderStrategyArrayOutput
}

type ClusterCapacityProvidersDefaultCapacityProviderStrategyArray []ClusterCapacityProvidersDefaultCapacityProviderStrategyInput

func (ClusterCapacityProvidersDefaultCapacityProviderStrategyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterCapacityProvidersDefaultCapacityProviderStrategy)(nil)).Elem()
}

func (i ClusterCapacityProvidersDefaultCapacityProviderStrategyArray) ToClusterCapacityProvidersDefaultCapacityProviderStrategyArrayOutput() ClusterCapacityProvidersDefaultCapacityProviderStrategyArrayOutput {
	return i.ToClusterCapacityProvidersDefaultCapacityProviderStrategyArrayOutputWithContext(context.Background())
}

func (i ClusterCapacityProvidersDefaultCapacityProviderStrategyArray) ToClusterCapacityProvidersDefaultCapacityProviderStrategyArrayOutputWithContext(ctx context.Context) ClusterCapacityProvidersDefaultCapacityProviderStrategyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCapacityProvidersDefaultCapacityProviderStrategyArrayOutput)
}

type ClusterCapacityProvidersDefaultCapacityProviderStrategyOutput struct{ *pulumi.OutputState }

func (ClusterCapacityProvidersDefaultCapacityProviderStrategyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCapacityProvidersDefaultCapacityProviderStrategy)(nil)).Elem()
}

func (o ClusterCapacityProvidersDefaultCapacityProviderStrategyOutput) ToClusterCapacityProvidersDefaultCapacityProviderStrategyOutput() ClusterCapacityProvidersDefaultCapacityProviderStrategyOutput {
	return o
}

func (o ClusterCapacityProvidersDefaultCapacityProviderStrategyOutput) ToClusterCapacityProvidersDefaultCapacityProviderStrategyOutputWithContext(ctx context.Context) ClusterCapacityProvidersDefaultCapacityProviderStrategyOutput {
	return o
}

// The number of tasks, at a minimum, to run on the specified capacity provider. Only one capacity provider in a capacity provider strategy can have a base defined. Defaults to `0`.
func (o ClusterCapacityProvidersDefaultCapacityProviderStrategyOutput) Base() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClusterCapacityProvidersDefaultCapacityProviderStrategy) *int { return v.Base }).(pulumi.IntPtrOutput)
}

// Name of the capacity provider.
func (o ClusterCapacityProvidersDefaultCapacityProviderStrategyOutput) CapacityProvider() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterCapacityProvidersDefaultCapacityProviderStrategy) string { return v.CapacityProvider }).(pulumi.StringOutput)
}

// The relative percentage of the total number of launched tasks that should use the specified capacity provider. The `weight` value is taken into consideration after the `base` count of tasks has been satisfied. Defaults to `0`.
func (o ClusterCapacityProvidersDefaultCapacityProviderStrategyOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClusterCapacityProvidersDefaultCapacityProviderStrategy) *int { return v.Weight }).(pulumi.IntPtrOutput)
}

type ClusterCapacityProvidersDefaultCapacityProviderStrategyArrayOutput struct{ *pulumi.OutputState }

func (ClusterCapacityProvidersDefaultCapacityProviderStrategyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterCapacityProvidersDefaultCapacityProviderStrategy)(nil)).Elem()
}

func (o ClusterCapacityProvidersDefaultCapacityProviderStrategyArrayOutput) ToClusterCapacityProvidersDefaultCapacityProviderStrategyArrayOutput() ClusterCapacityProvidersDefaultCapacityProviderStrategyArrayOutput {
	return o
}

func (o ClusterCapacityProvidersDefaultCapacityProviderStrategyArrayOutput) ToClusterCapacityProvidersDefaultCapacityProviderStrategyArrayOutputWithContext(ctx context.Context) ClusterCapacityProvidersDefaultCapacityProviderStrategyArrayOutput {
	return o
}

func (o ClusterCapacityProvidersDefaultCapacityProviderStrategyArrayOutput) Index(i pulumi.IntInput) ClusterCapacityProvidersDefaultCapacityProviderStrategyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterCapacityProvidersDefaultCapacityProviderStrategy {
		return vs[0].([]ClusterCapacityProvidersDefaultCapacityProviderStrategy)[vs[1].(int)]
	}).(ClusterCapacityProvidersDefaultCapacityProviderStrategyOutput)
}

type ClusterConfiguration struct {
	// The details of the execute command configuration. Detailed below.
	ExecuteCommandConfiguration *ClusterConfigurationExecuteCommandConfiguration `pulumi:"executeCommandConfiguration"`
}

// ClusterConfigurationInput is an input type that accepts ClusterConfigurationArgs and ClusterConfigurationOutput values.
// You can construct a concrete instance of `ClusterConfigurationInput` via:
//
//	ClusterConfigurationArgs{...}
type ClusterConfigurationInput interface {
	pulumi.Input

	ToClusterConfigurationOutput() ClusterConfigurationOutput
	ToClusterConfigurationOutputWithContext(context.Context) ClusterConfigurationOutput
}

type ClusterConfigurationArgs struct {
	// The details of the execute command configuration. Detailed below.
	ExecuteCommandConfiguration ClusterConfigurationExecuteCommandConfigurationPtrInput `pulumi:"executeCommandConfiguration"`
}

func (ClusterConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterConfiguration)(nil)).Elem()
}

func (i ClusterConfigurationArgs) ToClusterConfigurationOutput() ClusterConfigurationOutput {
	return i.ToClusterConfigurationOutputWithContext(context.Background())
}

func (i ClusterConfigurationArgs) ToClusterConfigurationOutputWithContext(ctx context.Context) ClusterConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterConfigurationOutput)
}

func (i ClusterConfigurationArgs) ToClusterConfigurationPtrOutput() ClusterConfigurationPtrOutput {
	return i.ToClusterConfigurationPtrOutputWithContext(context.Background())
}

func (i ClusterConfigurationArgs) ToClusterConfigurationPtrOutputWithContext(ctx context.Context) ClusterConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterConfigurationOutput).ToClusterConfigurationPtrOutputWithContext(ctx)
}

// ClusterConfigurationPtrInput is an input type that accepts ClusterConfigurationArgs, ClusterConfigurationPtr and ClusterConfigurationPtrOutput values.
// You can construct a concrete instance of `ClusterConfigurationPtrInput` via:
//
//	        ClusterConfigurationArgs{...}
//
//	or:
//
//	        nil
type ClusterConfigurationPtrInput interface {
	pulumi.Input

	ToClusterConfigurationPtrOutput() ClusterConfigurationPtrOutput
	ToClusterConfigurationPtrOutputWithContext(context.Context) ClusterConfigurationPtrOutput
}

type clusterConfigurationPtrType ClusterConfigurationArgs

func ClusterConfigurationPtr(v *ClusterConfigurationArgs) ClusterConfigurationPtrInput {
	return (*clusterConfigurationPtrType)(v)
}

func (*clusterConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterConfiguration)(nil)).Elem()
}

func (i *clusterConfigurationPtrType) ToClusterConfigurationPtrOutput() ClusterConfigurationPtrOutput {
	return i.ToClusterConfigurationPtrOutputWithContext(context.Background())
}

func (i *clusterConfigurationPtrType) ToClusterConfigurationPtrOutputWithContext(ctx context.Context) ClusterConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterConfigurationPtrOutput)
}

type ClusterConfigurationOutput struct{ *pulumi.OutputState }

func (ClusterConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterConfiguration)(nil)).Elem()
}

func (o ClusterConfigurationOutput) ToClusterConfigurationOutput() ClusterConfigurationOutput {
	return o
}

func (o ClusterConfigurationOutput) ToClusterConfigurationOutputWithContext(ctx context.Context) ClusterConfigurationOutput {
	return o
}

func (o ClusterConfigurationOutput) ToClusterConfigurationPtrOutput() ClusterConfigurationPtrOutput {
	return o.ToClusterConfigurationPtrOutputWithContext(context.Background())
}

func (o ClusterConfigurationOutput) ToClusterConfigurationPtrOutputWithContext(ctx context.Context) ClusterConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterConfiguration) *ClusterConfiguration {
		return &v
	}).(ClusterConfigurationPtrOutput)
}

// The details of the execute command configuration. Detailed below.
func (o ClusterConfigurationOutput) ExecuteCommandConfiguration() ClusterConfigurationExecuteCommandConfigurationPtrOutput {
	return o.ApplyT(func(v ClusterConfiguration) *ClusterConfigurationExecuteCommandConfiguration {
		return v.ExecuteCommandConfiguration
	}).(ClusterConfigurationExecuteCommandConfigurationPtrOutput)
}

type ClusterConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ClusterConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterConfiguration)(nil)).Elem()
}

func (o ClusterConfigurationPtrOutput) ToClusterConfigurationPtrOutput() ClusterConfigurationPtrOutput {
	return o
}

func (o ClusterConfigurationPtrOutput) ToClusterConfigurationPtrOutputWithContext(ctx context.Context) ClusterConfigurationPtrOutput {
	return o
}

func (o ClusterConfigurationPtrOutput) Elem() ClusterConfigurationOutput {
	return o.ApplyT(func(v *ClusterConfiguration) ClusterConfiguration {
		if v != nil {
			return *v
		}
		var ret ClusterConfiguration
		return ret
	}).(ClusterConfigurationOutput)
}

// The details of the execute command configuration. Detailed below.
func (o ClusterConfigurationPtrOutput) ExecuteCommandConfiguration() ClusterConfigurationExecuteCommandConfigurationPtrOutput {
	return o.ApplyT(func(v *ClusterConfiguration) *ClusterConfigurationExecuteCommandConfiguration {
		if v == nil {
			return nil
		}
		return v.ExecuteCommandConfiguration
	}).(ClusterConfigurationExecuteCommandConfigurationPtrOutput)
}

type ClusterConfigurationExecuteCommandConfiguration struct {
	// The AWS Key Management Service key ID to encrypt the data between the local client and the container.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// The log configuration for the results of the execute command actions Required when `logging` is `OVERRIDE`. Detailed below.
	LogConfiguration *ClusterConfigurationExecuteCommandConfigurationLogConfiguration `pulumi:"logConfiguration"`
	// The log setting to use for redirecting logs for your execute command results. Valid values are `NONE`, `DEFAULT`, and `OVERRIDE`.
	Logging *string `pulumi:"logging"`
}

// ClusterConfigurationExecuteCommandConfigurationInput is an input type that accepts ClusterConfigurationExecuteCommandConfigurationArgs and ClusterConfigurationExecuteCommandConfigurationOutput values.
// You can construct a concrete instance of `ClusterConfigurationExecuteCommandConfigurationInput` via:
//
//	ClusterConfigurationExecuteCommandConfigurationArgs{...}
type ClusterConfigurationExecuteCommandConfigurationInput interface {
	pulumi.Input

	ToClusterConfigurationExecuteCommandConfigurationOutput() ClusterConfigurationExecuteCommandConfigurationOutput
	ToClusterConfigurationExecuteCommandConfigurationOutputWithContext(context.Context) ClusterConfigurationExecuteCommandConfigurationOutput
}

type ClusterConfigurationExecuteCommandConfigurationArgs struct {
	// The AWS Key Management Service key ID to encrypt the data between the local client and the container.
	KmsKeyId pulumi.StringPtrInput `pulumi:"kmsKeyId"`
	// The log configuration for the results of the execute command actions Required when `logging` is `OVERRIDE`. Detailed below.
	LogConfiguration ClusterConfigurationExecuteCommandConfigurationLogConfigurationPtrInput `pulumi:"logConfiguration"`
	// The log setting to use for redirecting logs for your execute command results. Valid values are `NONE`, `DEFAULT`, and `OVERRIDE`.
	Logging pulumi.StringPtrInput `pulumi:"logging"`
}

func (ClusterConfigurationExecuteCommandConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterConfigurationExecuteCommandConfiguration)(nil)).Elem()
}

func (i ClusterConfigurationExecuteCommandConfigurationArgs) ToClusterConfigurationExecuteCommandConfigurationOutput() ClusterConfigurationExecuteCommandConfigurationOutput {
	return i.ToClusterConfigurationExecuteCommandConfigurationOutputWithContext(context.Background())
}

func (i ClusterConfigurationExecuteCommandConfigurationArgs) ToClusterConfigurationExecuteCommandConfigurationOutputWithContext(ctx context.Context) ClusterConfigurationExecuteCommandConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterConfigurationExecuteCommandConfigurationOutput)
}

func (i ClusterConfigurationExecuteCommandConfigurationArgs) ToClusterConfigurationExecuteCommandConfigurationPtrOutput() ClusterConfigurationExecuteCommandConfigurationPtrOutput {
	return i.ToClusterConfigurationExecuteCommandConfigurationPtrOutputWithContext(context.Background())
}

func (i ClusterConfigurationExecuteCommandConfigurationArgs) ToClusterConfigurationExecuteCommandConfigurationPtrOutputWithContext(ctx context.Context) ClusterConfigurationExecuteCommandConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterConfigurationExecuteCommandConfigurationOutput).ToClusterConfigurationExecuteCommandConfigurationPtrOutputWithContext(ctx)
}

// ClusterConfigurationExecuteCommandConfigurationPtrInput is an input type that accepts ClusterConfigurationExecuteCommandConfigurationArgs, ClusterConfigurationExecuteCommandConfigurationPtr and ClusterConfigurationExecuteCommandConfigurationPtrOutput values.
// You can construct a concrete instance of `ClusterConfigurationExecuteCommandConfigurationPtrInput` via:
//
//	        ClusterConfigurationExecuteCommandConfigurationArgs{...}
//
//	or:
//
//	        nil
type ClusterConfigurationExecuteCommandConfigurationPtrInput interface {
	pulumi.Input

	ToClusterConfigurationExecuteCommandConfigurationPtrOutput() ClusterConfigurationExecuteCommandConfigurationPtrOutput
	ToClusterConfigurationExecuteCommandConfigurationPtrOutputWithContext(context.Context) ClusterConfigurationExecuteCommandConfigurationPtrOutput
}

type clusterConfigurationExecuteCommandConfigurationPtrType ClusterConfigurationExecuteCommandConfigurationArgs

func ClusterConfigurationExecuteCommandConfigurationPtr(v *ClusterConfigurationExecuteCommandConfigurationArgs) ClusterConfigurationExecuteCommandConfigurationPtrInput {
	return (*clusterConfigurationExecuteCommandConfigurationPtrType)(v)
}

func (*clusterConfigurationExecuteCommandConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterConfigurationExecuteCommandConfiguration)(nil)).Elem()
}

func (i *clusterConfigurationExecuteCommandConfigurationPtrType) ToClusterConfigurationExecuteCommandConfigurationPtrOutput() ClusterConfigurationExecuteCommandConfigurationPtrOutput {
	return i.ToClusterConfigurationExecuteCommandConfigurationPtrOutputWithContext(context.Background())
}

func (i *clusterConfigurationExecuteCommandConfigurationPtrType) ToClusterConfigurationExecuteCommandConfigurationPtrOutputWithContext(ctx context.Context) ClusterConfigurationExecuteCommandConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterConfigurationExecuteCommandConfigurationPtrOutput)
}

type ClusterConfigurationExecuteCommandConfigurationOutput struct{ *pulumi.OutputState }

func (ClusterConfigurationExecuteCommandConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterConfigurationExecuteCommandConfiguration)(nil)).Elem()
}

func (o ClusterConfigurationExecuteCommandConfigurationOutput) ToClusterConfigurationExecuteCommandConfigurationOutput() ClusterConfigurationExecuteCommandConfigurationOutput {
	return o
}

func (o ClusterConfigurationExecuteCommandConfigurationOutput) ToClusterConfigurationExecuteCommandConfigurationOutputWithContext(ctx context.Context) ClusterConfigurationExecuteCommandConfigurationOutput {
	return o
}

func (o ClusterConfigurationExecuteCommandConfigurationOutput) ToClusterConfigurationExecuteCommandConfigurationPtrOutput() ClusterConfigurationExecuteCommandConfigurationPtrOutput {
	return o.ToClusterConfigurationExecuteCommandConfigurationPtrOutputWithContext(context.Background())
}

func (o ClusterConfigurationExecuteCommandConfigurationOutput) ToClusterConfigurationExecuteCommandConfigurationPtrOutputWithContext(ctx context.Context) ClusterConfigurationExecuteCommandConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterConfigurationExecuteCommandConfiguration) *ClusterConfigurationExecuteCommandConfiguration {
		return &v
	}).(ClusterConfigurationExecuteCommandConfigurationPtrOutput)
}

// The AWS Key Management Service key ID to encrypt the data between the local client and the container.
func (o ClusterConfigurationExecuteCommandConfigurationOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterConfigurationExecuteCommandConfiguration) *string { return v.KmsKeyId }).(pulumi.StringPtrOutput)
}

// The log configuration for the results of the execute command actions Required when `logging` is `OVERRIDE`. Detailed below.
func (o ClusterConfigurationExecuteCommandConfigurationOutput) LogConfiguration() ClusterConfigurationExecuteCommandConfigurationLogConfigurationPtrOutput {
	return o.ApplyT(func(v ClusterConfigurationExecuteCommandConfiguration) *ClusterConfigurationExecuteCommandConfigurationLogConfiguration {
		return v.LogConfiguration
	}).(ClusterConfigurationExecuteCommandConfigurationLogConfigurationPtrOutput)
}

// The log setting to use for redirecting logs for your execute command results. Valid values are `NONE`, `DEFAULT`, and `OVERRIDE`.
func (o ClusterConfigurationExecuteCommandConfigurationOutput) Logging() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterConfigurationExecuteCommandConfiguration) *string { return v.Logging }).(pulumi.StringPtrOutput)
}

type ClusterConfigurationExecuteCommandConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ClusterConfigurationExecuteCommandConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterConfigurationExecuteCommandConfiguration)(nil)).Elem()
}

func (o ClusterConfigurationExecuteCommandConfigurationPtrOutput) ToClusterConfigurationExecuteCommandConfigurationPtrOutput() ClusterConfigurationExecuteCommandConfigurationPtrOutput {
	return o
}

func (o ClusterConfigurationExecuteCommandConfigurationPtrOutput) ToClusterConfigurationExecuteCommandConfigurationPtrOutputWithContext(ctx context.Context) ClusterConfigurationExecuteCommandConfigurationPtrOutput {
	return o
}

func (o ClusterConfigurationExecuteCommandConfigurationPtrOutput) Elem() ClusterConfigurationExecuteCommandConfigurationOutput {
	return o.ApplyT(func(v *ClusterConfigurationExecuteCommandConfiguration) ClusterConfigurationExecuteCommandConfiguration {
		if v != nil {
			return *v
		}
		var ret ClusterConfigurationExecuteCommandConfiguration
		return ret
	}).(ClusterConfigurationExecuteCommandConfigurationOutput)
}

// The AWS Key Management Service key ID to encrypt the data between the local client and the container.
func (o ClusterConfigurationExecuteCommandConfigurationPtrOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterConfigurationExecuteCommandConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.KmsKeyId
	}).(pulumi.StringPtrOutput)
}

// The log configuration for the results of the execute command actions Required when `logging` is `OVERRIDE`. Detailed below.
func (o ClusterConfigurationExecuteCommandConfigurationPtrOutput) LogConfiguration() ClusterConfigurationExecuteCommandConfigurationLogConfigurationPtrOutput {
	return o.ApplyT(func(v *ClusterConfigurationExecuteCommandConfiguration) *ClusterConfigurationExecuteCommandConfigurationLogConfiguration {
		if v == nil {
			return nil
		}
		return v.LogConfiguration
	}).(ClusterConfigurationExecuteCommandConfigurationLogConfigurationPtrOutput)
}

// The log setting to use for redirecting logs for your execute command results. Valid values are `NONE`, `DEFAULT`, and `OVERRIDE`.
func (o ClusterConfigurationExecuteCommandConfigurationPtrOutput) Logging() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterConfigurationExecuteCommandConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Logging
	}).(pulumi.StringPtrOutput)
}

type ClusterConfigurationExecuteCommandConfigurationLogConfiguration struct {
	// Whether or not to enable encryption on the CloudWatch logs. If not specified, encryption will be disabled.
	CloudWatchEncryptionEnabled *bool `pulumi:"cloudWatchEncryptionEnabled"`
	// The name of the CloudWatch log group to send logs to.
	CloudWatchLogGroupName *string `pulumi:"cloudWatchLogGroupName"`
	// Whether or not to enable encryption on the logs sent to S3. If not specified, encryption will be disabled.
	S3BucketEncryptionEnabled *bool `pulumi:"s3BucketEncryptionEnabled"`
	// The name of the S3 bucket to send logs to.
	S3BucketName *string `pulumi:"s3BucketName"`
	// An optional folder in the S3 bucket to place logs in.
	S3KeyPrefix *string `pulumi:"s3KeyPrefix"`
}

// ClusterConfigurationExecuteCommandConfigurationLogConfigurationInput is an input type that accepts ClusterConfigurationExecuteCommandConfigurationLogConfigurationArgs and ClusterConfigurationExecuteCommandConfigurationLogConfigurationOutput values.
// You can construct a concrete instance of `ClusterConfigurationExecuteCommandConfigurationLogConfigurationInput` via:
//
//	ClusterConfigurationExecuteCommandConfigurationLogConfigurationArgs{...}
type ClusterConfigurationExecuteCommandConfigurationLogConfigurationInput interface {
	pulumi.Input

	ToClusterConfigurationExecuteCommandConfigurationLogConfigurationOutput() ClusterConfigurationExecuteCommandConfigurationLogConfigurationOutput
	ToClusterConfigurationExecuteCommandConfigurationLogConfigurationOutputWithContext(context.Context) ClusterConfigurationExecuteCommandConfigurationLogConfigurationOutput
}

type ClusterConfigurationExecuteCommandConfigurationLogConfigurationArgs struct {
	// Whether or not to enable encryption on the CloudWatch logs. If not specified, encryption will be disabled.
	CloudWatchEncryptionEnabled pulumi.BoolPtrInput `pulumi:"cloudWatchEncryptionEnabled"`
	// The name of the CloudWatch log group to send logs to.
	CloudWatchLogGroupName pulumi.StringPtrInput `pulumi:"cloudWatchLogGroupName"`
	// Whether or not to enable encryption on the logs sent to S3. If not specified, encryption will be disabled.
	S3BucketEncryptionEnabled pulumi.BoolPtrInput `pulumi:"s3BucketEncryptionEnabled"`
	// The name of the S3 bucket to send logs to.
	S3BucketName pulumi.StringPtrInput `pulumi:"s3BucketName"`
	// An optional folder in the S3 bucket to place logs in.
	S3KeyPrefix pulumi.StringPtrInput `pulumi:"s3KeyPrefix"`
}

func (ClusterConfigurationExecuteCommandConfigurationLogConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterConfigurationExecuteCommandConfigurationLogConfiguration)(nil)).Elem()
}

func (i ClusterConfigurationExecuteCommandConfigurationLogConfigurationArgs) ToClusterConfigurationExecuteCommandConfigurationLogConfigurationOutput() ClusterConfigurationExecuteCommandConfigurationLogConfigurationOutput {
	return i.ToClusterConfigurationExecuteCommandConfigurationLogConfigurationOutputWithContext(context.Background())
}

func (i ClusterConfigurationExecuteCommandConfigurationLogConfigurationArgs) ToClusterConfigurationExecuteCommandConfigurationLogConfigurationOutputWithContext(ctx context.Context) ClusterConfigurationExecuteCommandConfigurationLogConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterConfigurationExecuteCommandConfigurationLogConfigurationOutput)
}

func (i ClusterConfigurationExecuteCommandConfigurationLogConfigurationArgs) ToClusterConfigurationExecuteCommandConfigurationLogConfigurationPtrOutput() ClusterConfigurationExecuteCommandConfigurationLogConfigurationPtrOutput {
	return i.ToClusterConfigurationExecuteCommandConfigurationLogConfigurationPtrOutputWithContext(context.Background())
}

func (i ClusterConfigurationExecuteCommandConfigurationLogConfigurationArgs) ToClusterConfigurationExecuteCommandConfigurationLogConfigurationPtrOutputWithContext(ctx context.Context) ClusterConfigurationExecuteCommandConfigurationLogConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterConfigurationExecuteCommandConfigurationLogConfigurationOutput).ToClusterConfigurationExecuteCommandConfigurationLogConfigurationPtrOutputWithContext(ctx)
}

// ClusterConfigurationExecuteCommandConfigurationLogConfigurationPtrInput is an input type that accepts ClusterConfigurationExecuteCommandConfigurationLogConfigurationArgs, ClusterConfigurationExecuteCommandConfigurationLogConfigurationPtr and ClusterConfigurationExecuteCommandConfigurationLogConfigurationPtrOutput values.
// You can construct a concrete instance of `ClusterConfigurationExecuteCommandConfigurationLogConfigurationPtrInput` via:
//
//	        ClusterConfigurationExecuteCommandConfigurationLogConfigurationArgs{...}
//
//	or:
//
//	        nil
type ClusterConfigurationExecuteCommandConfigurationLogConfigurationPtrInput interface {
	pulumi.Input

	ToClusterConfigurationExecuteCommandConfigurationLogConfigurationPtrOutput() ClusterConfigurationExecuteCommandConfigurationLogConfigurationPtrOutput
	ToClusterConfigurationExecuteCommandConfigurationLogConfigurationPtrOutputWithContext(context.Context) ClusterConfigurationExecuteCommandConfigurationLogConfigurationPtrOutput
}

type clusterConfigurationExecuteCommandConfigurationLogConfigurationPtrType ClusterConfigurationExecuteCommandConfigurationLogConfigurationArgs

func ClusterConfigurationExecuteCommandConfigurationLogConfigurationPtr(v *ClusterConfigurationExecuteCommandConfigurationLogConfigurationArgs) ClusterConfigurationExecuteCommandConfigurationLogConfigurationPtrInput {
	return (*clusterConfigurationExecuteCommandConfigurationLogConfigurationPtrType)(v)
}

func (*clusterConfigurationExecuteCommandConfigurationLogConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterConfigurationExecuteCommandConfigurationLogConfiguration)(nil)).Elem()
}

func (i *clusterConfigurationExecuteCommandConfigurationLogConfigurationPtrType) ToClusterConfigurationExecuteCommandConfigurationLogConfigurationPtrOutput() ClusterConfigurationExecuteCommandConfigurationLogConfigurationPtrOutput {
	return i.ToClusterConfigurationExecuteCommandConfigurationLogConfigurationPtrOutputWithContext(context.Background())
}

func (i *clusterConfigurationExecuteCommandConfigurationLogConfigurationPtrType) ToClusterConfigurationExecuteCommandConfigurationLogConfigurationPtrOutputWithContext(ctx context.Context) ClusterConfigurationExecuteCommandConfigurationLogConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterConfigurationExecuteCommandConfigurationLogConfigurationPtrOutput)
}

type ClusterConfigurationExecuteCommandConfigurationLogConfigurationOutput struct{ *pulumi.OutputState }

func (ClusterConfigurationExecuteCommandConfigurationLogConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterConfigurationExecuteCommandConfigurationLogConfiguration)(nil)).Elem()
}

func (o ClusterConfigurationExecuteCommandConfigurationLogConfigurationOutput) ToClusterConfigurationExecuteCommandConfigurationLogConfigurationOutput() ClusterConfigurationExecuteCommandConfigurationLogConfigurationOutput {
	return o
}

func (o ClusterConfigurationExecuteCommandConfigurationLogConfigurationOutput) ToClusterConfigurationExecuteCommandConfigurationLogConfigurationOutputWithContext(ctx context.Context) ClusterConfigurationExecuteCommandConfigurationLogConfigurationOutput {
	return o
}

func (o ClusterConfigurationExecuteCommandConfigurationLogConfigurationOutput) ToClusterConfigurationExecuteCommandConfigurationLogConfigurationPtrOutput() ClusterConfigurationExecuteCommandConfigurationLogConfigurationPtrOutput {
	return o.ToClusterConfigurationExecuteCommandConfigurationLogConfigurationPtrOutputWithContext(context.Background())
}

func (o ClusterConfigurationExecuteCommandConfigurationLogConfigurationOutput) ToClusterConfigurationExecuteCommandConfigurationLogConfigurationPtrOutputWithContext(ctx context.Context) ClusterConfigurationExecuteCommandConfigurationLogConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterConfigurationExecuteCommandConfigurationLogConfiguration) *ClusterConfigurationExecuteCommandConfigurationLogConfiguration {
		return &v
	}).(ClusterConfigurationExecuteCommandConfigurationLogConfigurationPtrOutput)
}

// Whether or not to enable encryption on the CloudWatch logs. If not specified, encryption will be disabled.
func (o ClusterConfigurationExecuteCommandConfigurationLogConfigurationOutput) CloudWatchEncryptionEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClusterConfigurationExecuteCommandConfigurationLogConfiguration) *bool {
		return v.CloudWatchEncryptionEnabled
	}).(pulumi.BoolPtrOutput)
}

// The name of the CloudWatch log group to send logs to.
func (o ClusterConfigurationExecuteCommandConfigurationLogConfigurationOutput) CloudWatchLogGroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterConfigurationExecuteCommandConfigurationLogConfiguration) *string {
		return v.CloudWatchLogGroupName
	}).(pulumi.StringPtrOutput)
}

// Whether or not to enable encryption on the logs sent to S3. If not specified, encryption will be disabled.
func (o ClusterConfigurationExecuteCommandConfigurationLogConfigurationOutput) S3BucketEncryptionEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClusterConfigurationExecuteCommandConfigurationLogConfiguration) *bool {
		return v.S3BucketEncryptionEnabled
	}).(pulumi.BoolPtrOutput)
}

// The name of the S3 bucket to send logs to.
func (o ClusterConfigurationExecuteCommandConfigurationLogConfigurationOutput) S3BucketName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterConfigurationExecuteCommandConfigurationLogConfiguration) *string { return v.S3BucketName }).(pulumi.StringPtrOutput)
}

// An optional folder in the S3 bucket to place logs in.
func (o ClusterConfigurationExecuteCommandConfigurationLogConfigurationOutput) S3KeyPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterConfigurationExecuteCommandConfigurationLogConfiguration) *string { return v.S3KeyPrefix }).(pulumi.StringPtrOutput)
}

type ClusterConfigurationExecuteCommandConfigurationLogConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ClusterConfigurationExecuteCommandConfigurationLogConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterConfigurationExecuteCommandConfigurationLogConfiguration)(nil)).Elem()
}

func (o ClusterConfigurationExecuteCommandConfigurationLogConfigurationPtrOutput) ToClusterConfigurationExecuteCommandConfigurationLogConfigurationPtrOutput() ClusterConfigurationExecuteCommandConfigurationLogConfigurationPtrOutput {
	return o
}

func (o ClusterConfigurationExecuteCommandConfigurationLogConfigurationPtrOutput) ToClusterConfigurationExecuteCommandConfigurationLogConfigurationPtrOutputWithContext(ctx context.Context) ClusterConfigurationExecuteCommandConfigurationLogConfigurationPtrOutput {
	return o
}

func (o ClusterConfigurationExecuteCommandConfigurationLogConfigurationPtrOutput) Elem() ClusterConfigurationExecuteCommandConfigurationLogConfigurationOutput {
	return o.ApplyT(func(v *ClusterConfigurationExecuteCommandConfigurationLogConfiguration) ClusterConfigurationExecuteCommandConfigurationLogConfiguration {
		if v != nil {
			return *v
		}
		var ret ClusterConfigurationExecuteCommandConfigurationLogConfiguration
		return ret
	}).(ClusterConfigurationExecuteCommandConfigurationLogConfigurationOutput)
}

// Whether or not to enable encryption on the CloudWatch logs. If not specified, encryption will be disabled.
func (o ClusterConfigurationExecuteCommandConfigurationLogConfigurationPtrOutput) CloudWatchEncryptionEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterConfigurationExecuteCommandConfigurationLogConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.CloudWatchEncryptionEnabled
	}).(pulumi.BoolPtrOutput)
}

// The name of the CloudWatch log group to send logs to.
func (o ClusterConfigurationExecuteCommandConfigurationLogConfigurationPtrOutput) CloudWatchLogGroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterConfigurationExecuteCommandConfigurationLogConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.CloudWatchLogGroupName
	}).(pulumi.StringPtrOutput)
}

// Whether or not to enable encryption on the logs sent to S3. If not specified, encryption will be disabled.
func (o ClusterConfigurationExecuteCommandConfigurationLogConfigurationPtrOutput) S3BucketEncryptionEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterConfigurationExecuteCommandConfigurationLogConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.S3BucketEncryptionEnabled
	}).(pulumi.BoolPtrOutput)
}

// The name of the S3 bucket to send logs to.
func (o ClusterConfigurationExecuteCommandConfigurationLogConfigurationPtrOutput) S3BucketName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterConfigurationExecuteCommandConfigurationLogConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.S3BucketName
	}).(pulumi.StringPtrOutput)
}

// An optional folder in the S3 bucket to place logs in.
func (o ClusterConfigurationExecuteCommandConfigurationLogConfigurationPtrOutput) S3KeyPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterConfigurationExecuteCommandConfigurationLogConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.S3KeyPrefix
	}).(pulumi.StringPtrOutput)
}

type ClusterDefaultCapacityProviderStrategy struct {
	// The number of tasks, at a minimum, to run on the specified capacity provider. Only one capacity provider in a capacity provider strategy can have a base defined.
	Base *int `pulumi:"base"`
	// The short name of the capacity provider.
	CapacityProvider string `pulumi:"capacityProvider"`
	// The relative percentage of the total number of launched tasks that should use the specified capacity provider.
	Weight *int `pulumi:"weight"`
}

// ClusterDefaultCapacityProviderStrategyInput is an input type that accepts ClusterDefaultCapacityProviderStrategyArgs and ClusterDefaultCapacityProviderStrategyOutput values.
// You can construct a concrete instance of `ClusterDefaultCapacityProviderStrategyInput` via:
//
//	ClusterDefaultCapacityProviderStrategyArgs{...}
type ClusterDefaultCapacityProviderStrategyInput interface {
	pulumi.Input

	ToClusterDefaultCapacityProviderStrategyOutput() ClusterDefaultCapacityProviderStrategyOutput
	ToClusterDefaultCapacityProviderStrategyOutputWithContext(context.Context) ClusterDefaultCapacityProviderStrategyOutput
}

type ClusterDefaultCapacityProviderStrategyArgs struct {
	// The number of tasks, at a minimum, to run on the specified capacity provider. Only one capacity provider in a capacity provider strategy can have a base defined.
	Base pulumi.IntPtrInput `pulumi:"base"`
	// The short name of the capacity provider.
	CapacityProvider pulumi.StringInput `pulumi:"capacityProvider"`
	// The relative percentage of the total number of launched tasks that should use the specified capacity provider.
	Weight pulumi.IntPtrInput `pulumi:"weight"`
}

func (ClusterDefaultCapacityProviderStrategyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterDefaultCapacityProviderStrategy)(nil)).Elem()
}

func (i ClusterDefaultCapacityProviderStrategyArgs) ToClusterDefaultCapacityProviderStrategyOutput() ClusterDefaultCapacityProviderStrategyOutput {
	return i.ToClusterDefaultCapacityProviderStrategyOutputWithContext(context.Background())
}

func (i ClusterDefaultCapacityProviderStrategyArgs) ToClusterDefaultCapacityProviderStrategyOutputWithContext(ctx context.Context) ClusterDefaultCapacityProviderStrategyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterDefaultCapacityProviderStrategyOutput)
}

// ClusterDefaultCapacityProviderStrategyArrayInput is an input type that accepts ClusterDefaultCapacityProviderStrategyArray and ClusterDefaultCapacityProviderStrategyArrayOutput values.
// You can construct a concrete instance of `ClusterDefaultCapacityProviderStrategyArrayInput` via:
//
//	ClusterDefaultCapacityProviderStrategyArray{ ClusterDefaultCapacityProviderStrategyArgs{...} }
type ClusterDefaultCapacityProviderStrategyArrayInput interface {
	pulumi.Input

	ToClusterDefaultCapacityProviderStrategyArrayOutput() ClusterDefaultCapacityProviderStrategyArrayOutput
	ToClusterDefaultCapacityProviderStrategyArrayOutputWithContext(context.Context) ClusterDefaultCapacityProviderStrategyArrayOutput
}

type ClusterDefaultCapacityProviderStrategyArray []ClusterDefaultCapacityProviderStrategyInput

func (ClusterDefaultCapacityProviderStrategyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterDefaultCapacityProviderStrategy)(nil)).Elem()
}

func (i ClusterDefaultCapacityProviderStrategyArray) ToClusterDefaultCapacityProviderStrategyArrayOutput() ClusterDefaultCapacityProviderStrategyArrayOutput {
	return i.ToClusterDefaultCapacityProviderStrategyArrayOutputWithContext(context.Background())
}

func (i ClusterDefaultCapacityProviderStrategyArray) ToClusterDefaultCapacityProviderStrategyArrayOutputWithContext(ctx context.Context) ClusterDefaultCapacityProviderStrategyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterDefaultCapacityProviderStrategyArrayOutput)
}

type ClusterDefaultCapacityProviderStrategyOutput struct{ *pulumi.OutputState }

func (ClusterDefaultCapacityProviderStrategyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterDefaultCapacityProviderStrategy)(nil)).Elem()
}

func (o ClusterDefaultCapacityProviderStrategyOutput) ToClusterDefaultCapacityProviderStrategyOutput() ClusterDefaultCapacityProviderStrategyOutput {
	return o
}

func (o ClusterDefaultCapacityProviderStrategyOutput) ToClusterDefaultCapacityProviderStrategyOutputWithContext(ctx context.Context) ClusterDefaultCapacityProviderStrategyOutput {
	return o
}

// The number of tasks, at a minimum, to run on the specified capacity provider. Only one capacity provider in a capacity provider strategy can have a base defined.
func (o ClusterDefaultCapacityProviderStrategyOutput) Base() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClusterDefaultCapacityProviderStrategy) *int { return v.Base }).(pulumi.IntPtrOutput)
}

// The short name of the capacity provider.
func (o ClusterDefaultCapacityProviderStrategyOutput) CapacityProvider() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterDefaultCapacityProviderStrategy) string { return v.CapacityProvider }).(pulumi.StringOutput)
}

// The relative percentage of the total number of launched tasks that should use the specified capacity provider.
func (o ClusterDefaultCapacityProviderStrategyOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClusterDefaultCapacityProviderStrategy) *int { return v.Weight }).(pulumi.IntPtrOutput)
}

type ClusterDefaultCapacityProviderStrategyArrayOutput struct{ *pulumi.OutputState }

func (ClusterDefaultCapacityProviderStrategyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterDefaultCapacityProviderStrategy)(nil)).Elem()
}

func (o ClusterDefaultCapacityProviderStrategyArrayOutput) ToClusterDefaultCapacityProviderStrategyArrayOutput() ClusterDefaultCapacityProviderStrategyArrayOutput {
	return o
}

func (o ClusterDefaultCapacityProviderStrategyArrayOutput) ToClusterDefaultCapacityProviderStrategyArrayOutputWithContext(ctx context.Context) ClusterDefaultCapacityProviderStrategyArrayOutput {
	return o
}

func (o ClusterDefaultCapacityProviderStrategyArrayOutput) Index(i pulumi.IntInput) ClusterDefaultCapacityProviderStrategyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterDefaultCapacityProviderStrategy {
		return vs[0].([]ClusterDefaultCapacityProviderStrategy)[vs[1].(int)]
	}).(ClusterDefaultCapacityProviderStrategyOutput)
}

type ClusterServiceConnectDefaults struct {
	// The ARN of the `servicediscovery.HttpNamespace` that's used when you create a service and don't specify a Service Connect configuration.
	Namespace string `pulumi:"namespace"`
}

// ClusterServiceConnectDefaultsInput is an input type that accepts ClusterServiceConnectDefaultsArgs and ClusterServiceConnectDefaultsOutput values.
// You can construct a concrete instance of `ClusterServiceConnectDefaultsInput` via:
//
//	ClusterServiceConnectDefaultsArgs{...}
type ClusterServiceConnectDefaultsInput interface {
	pulumi.Input

	ToClusterServiceConnectDefaultsOutput() ClusterServiceConnectDefaultsOutput
	ToClusterServiceConnectDefaultsOutputWithContext(context.Context) ClusterServiceConnectDefaultsOutput
}

type ClusterServiceConnectDefaultsArgs struct {
	// The ARN of the `servicediscovery.HttpNamespace` that's used when you create a service and don't specify a Service Connect configuration.
	Namespace pulumi.StringInput `pulumi:"namespace"`
}

func (ClusterServiceConnectDefaultsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterServiceConnectDefaults)(nil)).Elem()
}

func (i ClusterServiceConnectDefaultsArgs) ToClusterServiceConnectDefaultsOutput() ClusterServiceConnectDefaultsOutput {
	return i.ToClusterServiceConnectDefaultsOutputWithContext(context.Background())
}

func (i ClusterServiceConnectDefaultsArgs) ToClusterServiceConnectDefaultsOutputWithContext(ctx context.Context) ClusterServiceConnectDefaultsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterServiceConnectDefaultsOutput)
}

func (i ClusterServiceConnectDefaultsArgs) ToClusterServiceConnectDefaultsPtrOutput() ClusterServiceConnectDefaultsPtrOutput {
	return i.ToClusterServiceConnectDefaultsPtrOutputWithContext(context.Background())
}

func (i ClusterServiceConnectDefaultsArgs) ToClusterServiceConnectDefaultsPtrOutputWithContext(ctx context.Context) ClusterServiceConnectDefaultsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterServiceConnectDefaultsOutput).ToClusterServiceConnectDefaultsPtrOutputWithContext(ctx)
}

// ClusterServiceConnectDefaultsPtrInput is an input type that accepts ClusterServiceConnectDefaultsArgs, ClusterServiceConnectDefaultsPtr and ClusterServiceConnectDefaultsPtrOutput values.
// You can construct a concrete instance of `ClusterServiceConnectDefaultsPtrInput` via:
//
//	        ClusterServiceConnectDefaultsArgs{...}
//
//	or:
//
//	        nil
type ClusterServiceConnectDefaultsPtrInput interface {
	pulumi.Input

	ToClusterServiceConnectDefaultsPtrOutput() ClusterServiceConnectDefaultsPtrOutput
	ToClusterServiceConnectDefaultsPtrOutputWithContext(context.Context) ClusterServiceConnectDefaultsPtrOutput
}

type clusterServiceConnectDefaultsPtrType ClusterServiceConnectDefaultsArgs

func ClusterServiceConnectDefaultsPtr(v *ClusterServiceConnectDefaultsArgs) ClusterServiceConnectDefaultsPtrInput {
	return (*clusterServiceConnectDefaultsPtrType)(v)
}

func (*clusterServiceConnectDefaultsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterServiceConnectDefaults)(nil)).Elem()
}

func (i *clusterServiceConnectDefaultsPtrType) ToClusterServiceConnectDefaultsPtrOutput() ClusterServiceConnectDefaultsPtrOutput {
	return i.ToClusterServiceConnectDefaultsPtrOutputWithContext(context.Background())
}

func (i *clusterServiceConnectDefaultsPtrType) ToClusterServiceConnectDefaultsPtrOutputWithContext(ctx context.Context) ClusterServiceConnectDefaultsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterServiceConnectDefaultsPtrOutput)
}

type ClusterServiceConnectDefaultsOutput struct{ *pulumi.OutputState }

func (ClusterServiceConnectDefaultsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterServiceConnectDefaults)(nil)).Elem()
}

func (o ClusterServiceConnectDefaultsOutput) ToClusterServiceConnectDefaultsOutput() ClusterServiceConnectDefaultsOutput {
	return o
}

func (o ClusterServiceConnectDefaultsOutput) ToClusterServiceConnectDefaultsOutputWithContext(ctx context.Context) ClusterServiceConnectDefaultsOutput {
	return o
}

func (o ClusterServiceConnectDefaultsOutput) ToClusterServiceConnectDefaultsPtrOutput() ClusterServiceConnectDefaultsPtrOutput {
	return o.ToClusterServiceConnectDefaultsPtrOutputWithContext(context.Background())
}

func (o ClusterServiceConnectDefaultsOutput) ToClusterServiceConnectDefaultsPtrOutputWithContext(ctx context.Context) ClusterServiceConnectDefaultsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterServiceConnectDefaults) *ClusterServiceConnectDefaults {
		return &v
	}).(ClusterServiceConnectDefaultsPtrOutput)
}

// The ARN of the `servicediscovery.HttpNamespace` that's used when you create a service and don't specify a Service Connect configuration.
func (o ClusterServiceConnectDefaultsOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterServiceConnectDefaults) string { return v.Namespace }).(pulumi.StringOutput)
}

type ClusterServiceConnectDefaultsPtrOutput struct{ *pulumi.OutputState }

func (ClusterServiceConnectDefaultsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterServiceConnectDefaults)(nil)).Elem()
}

func (o ClusterServiceConnectDefaultsPtrOutput) ToClusterServiceConnectDefaultsPtrOutput() ClusterServiceConnectDefaultsPtrOutput {
	return o
}

func (o ClusterServiceConnectDefaultsPtrOutput) ToClusterServiceConnectDefaultsPtrOutputWithContext(ctx context.Context) ClusterServiceConnectDefaultsPtrOutput {
	return o
}

func (o ClusterServiceConnectDefaultsPtrOutput) Elem() ClusterServiceConnectDefaultsOutput {
	return o.ApplyT(func(v *ClusterServiceConnectDefaults) ClusterServiceConnectDefaults {
		if v != nil {
			return *v
		}
		var ret ClusterServiceConnectDefaults
		return ret
	}).(ClusterServiceConnectDefaultsOutput)
}

// The ARN of the `servicediscovery.HttpNamespace` that's used when you create a service and don't specify a Service Connect configuration.
func (o ClusterServiceConnectDefaultsPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterServiceConnectDefaults) *string {
		if v == nil {
			return nil
		}
		return &v.Namespace
	}).(pulumi.StringPtrOutput)
}

type ClusterSetting struct {
	// Name of the setting to manage. Valid values: `containerInsights`.
	Name string `pulumi:"name"`
	// The value to assign to the setting. Valid values are `enabled` and `disabled`.
	Value string `pulumi:"value"`
}

// ClusterSettingInput is an input type that accepts ClusterSettingArgs and ClusterSettingOutput values.
// You can construct a concrete instance of `ClusterSettingInput` via:
//
//	ClusterSettingArgs{...}
type ClusterSettingInput interface {
	pulumi.Input

	ToClusterSettingOutput() ClusterSettingOutput
	ToClusterSettingOutputWithContext(context.Context) ClusterSettingOutput
}

type ClusterSettingArgs struct {
	// Name of the setting to manage. Valid values: `containerInsights`.
	Name pulumi.StringInput `pulumi:"name"`
	// The value to assign to the setting. Valid values are `enabled` and `disabled`.
	Value pulumi.StringInput `pulumi:"value"`
}

func (ClusterSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterSetting)(nil)).Elem()
}

func (i ClusterSettingArgs) ToClusterSettingOutput() ClusterSettingOutput {
	return i.ToClusterSettingOutputWithContext(context.Background())
}

func (i ClusterSettingArgs) ToClusterSettingOutputWithContext(ctx context.Context) ClusterSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterSettingOutput)
}

// ClusterSettingArrayInput is an input type that accepts ClusterSettingArray and ClusterSettingArrayOutput values.
// You can construct a concrete instance of `ClusterSettingArrayInput` via:
//
//	ClusterSettingArray{ ClusterSettingArgs{...} }
type ClusterSettingArrayInput interface {
	pulumi.Input

	ToClusterSettingArrayOutput() ClusterSettingArrayOutput
	ToClusterSettingArrayOutputWithContext(context.Context) ClusterSettingArrayOutput
}

type ClusterSettingArray []ClusterSettingInput

func (ClusterSettingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterSetting)(nil)).Elem()
}

func (i ClusterSettingArray) ToClusterSettingArrayOutput() ClusterSettingArrayOutput {
	return i.ToClusterSettingArrayOutputWithContext(context.Background())
}

func (i ClusterSettingArray) ToClusterSettingArrayOutputWithContext(ctx context.Context) ClusterSettingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterSettingArrayOutput)
}

type ClusterSettingOutput struct{ *pulumi.OutputState }

func (ClusterSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterSetting)(nil)).Elem()
}

func (o ClusterSettingOutput) ToClusterSettingOutput() ClusterSettingOutput {
	return o
}

func (o ClusterSettingOutput) ToClusterSettingOutputWithContext(ctx context.Context) ClusterSettingOutput {
	return o
}

// Name of the setting to manage. Valid values: `containerInsights`.
func (o ClusterSettingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterSetting) string { return v.Name }).(pulumi.StringOutput)
}

// The value to assign to the setting. Valid values are `enabled` and `disabled`.
func (o ClusterSettingOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterSetting) string { return v.Value }).(pulumi.StringOutput)
}

type ClusterSettingArrayOutput struct{ *pulumi.OutputState }

func (ClusterSettingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterSetting)(nil)).Elem()
}

func (o ClusterSettingArrayOutput) ToClusterSettingArrayOutput() ClusterSettingArrayOutput {
	return o
}

func (o ClusterSettingArrayOutput) ToClusterSettingArrayOutputWithContext(ctx context.Context) ClusterSettingArrayOutput {
	return o
}

func (o ClusterSettingArrayOutput) Index(i pulumi.IntInput) ClusterSettingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterSetting {
		return vs[0].([]ClusterSetting)[vs[1].(int)]
	}).(ClusterSettingOutput)
}

type ServiceAlarms struct {
	AlarmNames []string `pulumi:"alarmNames"`
	// Determines whether to use the CloudWatch alarm option in the service deployment process.
	Enable bool `pulumi:"enable"`
	// Determines whether to configure Amazon ECS to roll back the service if a service deployment fails. If rollback is used, when a service deployment fails, the service is rolled back to the last deployment that completed successfully.
	Rollback bool `pulumi:"rollback"`
}

// ServiceAlarmsInput is an input type that accepts ServiceAlarmsArgs and ServiceAlarmsOutput values.
// You can construct a concrete instance of `ServiceAlarmsInput` via:
//
//	ServiceAlarmsArgs{...}
type ServiceAlarmsInput interface {
	pulumi.Input

	ToServiceAlarmsOutput() ServiceAlarmsOutput
	ToServiceAlarmsOutputWithContext(context.Context) ServiceAlarmsOutput
}

type ServiceAlarmsArgs struct {
	AlarmNames pulumi.StringArrayInput `pulumi:"alarmNames"`
	// Determines whether to use the CloudWatch alarm option in the service deployment process.
	Enable pulumi.BoolInput `pulumi:"enable"`
	// Determines whether to configure Amazon ECS to roll back the service if a service deployment fails. If rollback is used, when a service deployment fails, the service is rolled back to the last deployment that completed successfully.
	Rollback pulumi.BoolInput `pulumi:"rollback"`
}

func (ServiceAlarmsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAlarms)(nil)).Elem()
}

func (i ServiceAlarmsArgs) ToServiceAlarmsOutput() ServiceAlarmsOutput {
	return i.ToServiceAlarmsOutputWithContext(context.Background())
}

func (i ServiceAlarmsArgs) ToServiceAlarmsOutputWithContext(ctx context.Context) ServiceAlarmsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAlarmsOutput)
}

func (i ServiceAlarmsArgs) ToServiceAlarmsPtrOutput() ServiceAlarmsPtrOutput {
	return i.ToServiceAlarmsPtrOutputWithContext(context.Background())
}

func (i ServiceAlarmsArgs) ToServiceAlarmsPtrOutputWithContext(ctx context.Context) ServiceAlarmsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAlarmsOutput).ToServiceAlarmsPtrOutputWithContext(ctx)
}

// ServiceAlarmsPtrInput is an input type that accepts ServiceAlarmsArgs, ServiceAlarmsPtr and ServiceAlarmsPtrOutput values.
// You can construct a concrete instance of `ServiceAlarmsPtrInput` via:
//
//	        ServiceAlarmsArgs{...}
//
//	or:
//
//	        nil
type ServiceAlarmsPtrInput interface {
	pulumi.Input

	ToServiceAlarmsPtrOutput() ServiceAlarmsPtrOutput
	ToServiceAlarmsPtrOutputWithContext(context.Context) ServiceAlarmsPtrOutput
}

type serviceAlarmsPtrType ServiceAlarmsArgs

func ServiceAlarmsPtr(v *ServiceAlarmsArgs) ServiceAlarmsPtrInput {
	return (*serviceAlarmsPtrType)(v)
}

func (*serviceAlarmsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceAlarms)(nil)).Elem()
}

func (i *serviceAlarmsPtrType) ToServiceAlarmsPtrOutput() ServiceAlarmsPtrOutput {
	return i.ToServiceAlarmsPtrOutputWithContext(context.Background())
}

func (i *serviceAlarmsPtrType) ToServiceAlarmsPtrOutputWithContext(ctx context.Context) ServiceAlarmsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAlarmsPtrOutput)
}

type ServiceAlarmsOutput struct{ *pulumi.OutputState }

func (ServiceAlarmsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAlarms)(nil)).Elem()
}

func (o ServiceAlarmsOutput) ToServiceAlarmsOutput() ServiceAlarmsOutput {
	return o
}

func (o ServiceAlarmsOutput) ToServiceAlarmsOutputWithContext(ctx context.Context) ServiceAlarmsOutput {
	return o
}

func (o ServiceAlarmsOutput) ToServiceAlarmsPtrOutput() ServiceAlarmsPtrOutput {
	return o.ToServiceAlarmsPtrOutputWithContext(context.Background())
}

func (o ServiceAlarmsOutput) ToServiceAlarmsPtrOutputWithContext(ctx context.Context) ServiceAlarmsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceAlarms) *ServiceAlarms {
		return &v
	}).(ServiceAlarmsPtrOutput)
}

func (o ServiceAlarmsOutput) AlarmNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServiceAlarms) []string { return v.AlarmNames }).(pulumi.StringArrayOutput)
}

// Determines whether to use the CloudWatch alarm option in the service deployment process.
func (o ServiceAlarmsOutput) Enable() pulumi.BoolOutput {
	return o.ApplyT(func(v ServiceAlarms) bool { return v.Enable }).(pulumi.BoolOutput)
}

// Determines whether to configure Amazon ECS to roll back the service if a service deployment fails. If rollback is used, when a service deployment fails, the service is rolled back to the last deployment that completed successfully.
func (o ServiceAlarmsOutput) Rollback() pulumi.BoolOutput {
	return o.ApplyT(func(v ServiceAlarms) bool { return v.Rollback }).(pulumi.BoolOutput)
}

type ServiceAlarmsPtrOutput struct{ *pulumi.OutputState }

func (ServiceAlarmsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceAlarms)(nil)).Elem()
}

func (o ServiceAlarmsPtrOutput) ToServiceAlarmsPtrOutput() ServiceAlarmsPtrOutput {
	return o
}

func (o ServiceAlarmsPtrOutput) ToServiceAlarmsPtrOutputWithContext(ctx context.Context) ServiceAlarmsPtrOutput {
	return o
}

func (o ServiceAlarmsPtrOutput) Elem() ServiceAlarmsOutput {
	return o.ApplyT(func(v *ServiceAlarms) ServiceAlarms {
		if v != nil {
			return *v
		}
		var ret ServiceAlarms
		return ret
	}).(ServiceAlarmsOutput)
}

func (o ServiceAlarmsPtrOutput) AlarmNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServiceAlarms) []string {
		if v == nil {
			return nil
		}
		return v.AlarmNames
	}).(pulumi.StringArrayOutput)
}

// Determines whether to use the CloudWatch alarm option in the service deployment process.
func (o ServiceAlarmsPtrOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServiceAlarms) *bool {
		if v == nil {
			return nil
		}
		return &v.Enable
	}).(pulumi.BoolPtrOutput)
}

// Determines whether to configure Amazon ECS to roll back the service if a service deployment fails. If rollback is used, when a service deployment fails, the service is rolled back to the last deployment that completed successfully.
func (o ServiceAlarmsPtrOutput) Rollback() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServiceAlarms) *bool {
		if v == nil {
			return nil
		}
		return &v.Rollback
	}).(pulumi.BoolPtrOutput)
}

type ServiceCapacityProviderStrategy struct {
	// Number of tasks, at a minimum, to run on the specified capacity provider. Only one capacity provider in a capacity provider strategy can have a base defined.
	Base *int `pulumi:"base"`
	// Short name of the capacity provider.
	CapacityProvider string `pulumi:"capacityProvider"`
	// Relative percentage of the total number of launched tasks that should use the specified capacity provider.
	Weight *int `pulumi:"weight"`
}

// ServiceCapacityProviderStrategyInput is an input type that accepts ServiceCapacityProviderStrategyArgs and ServiceCapacityProviderStrategyOutput values.
// You can construct a concrete instance of `ServiceCapacityProviderStrategyInput` via:
//
//	ServiceCapacityProviderStrategyArgs{...}
type ServiceCapacityProviderStrategyInput interface {
	pulumi.Input

	ToServiceCapacityProviderStrategyOutput() ServiceCapacityProviderStrategyOutput
	ToServiceCapacityProviderStrategyOutputWithContext(context.Context) ServiceCapacityProviderStrategyOutput
}

type ServiceCapacityProviderStrategyArgs struct {
	// Number of tasks, at a minimum, to run on the specified capacity provider. Only one capacity provider in a capacity provider strategy can have a base defined.
	Base pulumi.IntPtrInput `pulumi:"base"`
	// Short name of the capacity provider.
	CapacityProvider pulumi.StringInput `pulumi:"capacityProvider"`
	// Relative percentage of the total number of launched tasks that should use the specified capacity provider.
	Weight pulumi.IntPtrInput `pulumi:"weight"`
}

func (ServiceCapacityProviderStrategyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceCapacityProviderStrategy)(nil)).Elem()
}

func (i ServiceCapacityProviderStrategyArgs) ToServiceCapacityProviderStrategyOutput() ServiceCapacityProviderStrategyOutput {
	return i.ToServiceCapacityProviderStrategyOutputWithContext(context.Background())
}

func (i ServiceCapacityProviderStrategyArgs) ToServiceCapacityProviderStrategyOutputWithContext(ctx context.Context) ServiceCapacityProviderStrategyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceCapacityProviderStrategyOutput)
}

// ServiceCapacityProviderStrategyArrayInput is an input type that accepts ServiceCapacityProviderStrategyArray and ServiceCapacityProviderStrategyArrayOutput values.
// You can construct a concrete instance of `ServiceCapacityProviderStrategyArrayInput` via:
//
//	ServiceCapacityProviderStrategyArray{ ServiceCapacityProviderStrategyArgs{...} }
type ServiceCapacityProviderStrategyArrayInput interface {
	pulumi.Input

	ToServiceCapacityProviderStrategyArrayOutput() ServiceCapacityProviderStrategyArrayOutput
	ToServiceCapacityProviderStrategyArrayOutputWithContext(context.Context) ServiceCapacityProviderStrategyArrayOutput
}

type ServiceCapacityProviderStrategyArray []ServiceCapacityProviderStrategyInput

func (ServiceCapacityProviderStrategyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceCapacityProviderStrategy)(nil)).Elem()
}

func (i ServiceCapacityProviderStrategyArray) ToServiceCapacityProviderStrategyArrayOutput() ServiceCapacityProviderStrategyArrayOutput {
	return i.ToServiceCapacityProviderStrategyArrayOutputWithContext(context.Background())
}

func (i ServiceCapacityProviderStrategyArray) ToServiceCapacityProviderStrategyArrayOutputWithContext(ctx context.Context) ServiceCapacityProviderStrategyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceCapacityProviderStrategyArrayOutput)
}

type ServiceCapacityProviderStrategyOutput struct{ *pulumi.OutputState }

func (ServiceCapacityProviderStrategyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceCapacityProviderStrategy)(nil)).Elem()
}

func (o ServiceCapacityProviderStrategyOutput) ToServiceCapacityProviderStrategyOutput() ServiceCapacityProviderStrategyOutput {
	return o
}

func (o ServiceCapacityProviderStrategyOutput) ToServiceCapacityProviderStrategyOutputWithContext(ctx context.Context) ServiceCapacityProviderStrategyOutput {
	return o
}

// Number of tasks, at a minimum, to run on the specified capacity provider. Only one capacity provider in a capacity provider strategy can have a base defined.
func (o ServiceCapacityProviderStrategyOutput) Base() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceCapacityProviderStrategy) *int { return v.Base }).(pulumi.IntPtrOutput)
}

// Short name of the capacity provider.
func (o ServiceCapacityProviderStrategyOutput) CapacityProvider() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceCapacityProviderStrategy) string { return v.CapacityProvider }).(pulumi.StringOutput)
}

// Relative percentage of the total number of launched tasks that should use the specified capacity provider.
func (o ServiceCapacityProviderStrategyOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceCapacityProviderStrategy) *int { return v.Weight }).(pulumi.IntPtrOutput)
}

type ServiceCapacityProviderStrategyArrayOutput struct{ *pulumi.OutputState }

func (ServiceCapacityProviderStrategyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceCapacityProviderStrategy)(nil)).Elem()
}

func (o ServiceCapacityProviderStrategyArrayOutput) ToServiceCapacityProviderStrategyArrayOutput() ServiceCapacityProviderStrategyArrayOutput {
	return o
}

func (o ServiceCapacityProviderStrategyArrayOutput) ToServiceCapacityProviderStrategyArrayOutputWithContext(ctx context.Context) ServiceCapacityProviderStrategyArrayOutput {
	return o
}

func (o ServiceCapacityProviderStrategyArrayOutput) Index(i pulumi.IntInput) ServiceCapacityProviderStrategyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceCapacityProviderStrategy {
		return vs[0].([]ServiceCapacityProviderStrategy)[vs[1].(int)]
	}).(ServiceCapacityProviderStrategyOutput)
}

type ServiceDeploymentCircuitBreaker struct {
	// Whether to enable the deployment circuit breaker logic for the service.
	Enable bool `pulumi:"enable"`
	// Whether to enable Amazon ECS to roll back the service if a service deployment fails. If rollback is enabled, when a service deployment fails, the service is rolled back to the last deployment that completed successfully.
	Rollback bool `pulumi:"rollback"`
}

// ServiceDeploymentCircuitBreakerInput is an input type that accepts ServiceDeploymentCircuitBreakerArgs and ServiceDeploymentCircuitBreakerOutput values.
// You can construct a concrete instance of `ServiceDeploymentCircuitBreakerInput` via:
//
//	ServiceDeploymentCircuitBreakerArgs{...}
type ServiceDeploymentCircuitBreakerInput interface {
	pulumi.Input

	ToServiceDeploymentCircuitBreakerOutput() ServiceDeploymentCircuitBreakerOutput
	ToServiceDeploymentCircuitBreakerOutputWithContext(context.Context) ServiceDeploymentCircuitBreakerOutput
}

type ServiceDeploymentCircuitBreakerArgs struct {
	// Whether to enable the deployment circuit breaker logic for the service.
	Enable pulumi.BoolInput `pulumi:"enable"`
	// Whether to enable Amazon ECS to roll back the service if a service deployment fails. If rollback is enabled, when a service deployment fails, the service is rolled back to the last deployment that completed successfully.
	Rollback pulumi.BoolInput `pulumi:"rollback"`
}

func (ServiceDeploymentCircuitBreakerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceDeploymentCircuitBreaker)(nil)).Elem()
}

func (i ServiceDeploymentCircuitBreakerArgs) ToServiceDeploymentCircuitBreakerOutput() ServiceDeploymentCircuitBreakerOutput {
	return i.ToServiceDeploymentCircuitBreakerOutputWithContext(context.Background())
}

func (i ServiceDeploymentCircuitBreakerArgs) ToServiceDeploymentCircuitBreakerOutputWithContext(ctx context.Context) ServiceDeploymentCircuitBreakerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceDeploymentCircuitBreakerOutput)
}

func (i ServiceDeploymentCircuitBreakerArgs) ToServiceDeploymentCircuitBreakerPtrOutput() ServiceDeploymentCircuitBreakerPtrOutput {
	return i.ToServiceDeploymentCircuitBreakerPtrOutputWithContext(context.Background())
}

func (i ServiceDeploymentCircuitBreakerArgs) ToServiceDeploymentCircuitBreakerPtrOutputWithContext(ctx context.Context) ServiceDeploymentCircuitBreakerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceDeploymentCircuitBreakerOutput).ToServiceDeploymentCircuitBreakerPtrOutputWithContext(ctx)
}

// ServiceDeploymentCircuitBreakerPtrInput is an input type that accepts ServiceDeploymentCircuitBreakerArgs, ServiceDeploymentCircuitBreakerPtr and ServiceDeploymentCircuitBreakerPtrOutput values.
// You can construct a concrete instance of `ServiceDeploymentCircuitBreakerPtrInput` via:
//
//	        ServiceDeploymentCircuitBreakerArgs{...}
//
//	or:
//
//	        nil
type ServiceDeploymentCircuitBreakerPtrInput interface {
	pulumi.Input

	ToServiceDeploymentCircuitBreakerPtrOutput() ServiceDeploymentCircuitBreakerPtrOutput
	ToServiceDeploymentCircuitBreakerPtrOutputWithContext(context.Context) ServiceDeploymentCircuitBreakerPtrOutput
}

type serviceDeploymentCircuitBreakerPtrType ServiceDeploymentCircuitBreakerArgs

func ServiceDeploymentCircuitBreakerPtr(v *ServiceDeploymentCircuitBreakerArgs) ServiceDeploymentCircuitBreakerPtrInput {
	return (*serviceDeploymentCircuitBreakerPtrType)(v)
}

func (*serviceDeploymentCircuitBreakerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceDeploymentCircuitBreaker)(nil)).Elem()
}

func (i *serviceDeploymentCircuitBreakerPtrType) ToServiceDeploymentCircuitBreakerPtrOutput() ServiceDeploymentCircuitBreakerPtrOutput {
	return i.ToServiceDeploymentCircuitBreakerPtrOutputWithContext(context.Background())
}

func (i *serviceDeploymentCircuitBreakerPtrType) ToServiceDeploymentCircuitBreakerPtrOutputWithContext(ctx context.Context) ServiceDeploymentCircuitBreakerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceDeploymentCircuitBreakerPtrOutput)
}

type ServiceDeploymentCircuitBreakerOutput struct{ *pulumi.OutputState }

func (ServiceDeploymentCircuitBreakerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceDeploymentCircuitBreaker)(nil)).Elem()
}

func (o ServiceDeploymentCircuitBreakerOutput) ToServiceDeploymentCircuitBreakerOutput() ServiceDeploymentCircuitBreakerOutput {
	return o
}

func (o ServiceDeploymentCircuitBreakerOutput) ToServiceDeploymentCircuitBreakerOutputWithContext(ctx context.Context) ServiceDeploymentCircuitBreakerOutput {
	return o
}

func (o ServiceDeploymentCircuitBreakerOutput) ToServiceDeploymentCircuitBreakerPtrOutput() ServiceDeploymentCircuitBreakerPtrOutput {
	return o.ToServiceDeploymentCircuitBreakerPtrOutputWithContext(context.Background())
}

func (o ServiceDeploymentCircuitBreakerOutput) ToServiceDeploymentCircuitBreakerPtrOutputWithContext(ctx context.Context) ServiceDeploymentCircuitBreakerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceDeploymentCircuitBreaker) *ServiceDeploymentCircuitBreaker {
		return &v
	}).(ServiceDeploymentCircuitBreakerPtrOutput)
}

// Whether to enable the deployment circuit breaker logic for the service.
func (o ServiceDeploymentCircuitBreakerOutput) Enable() pulumi.BoolOutput {
	return o.ApplyT(func(v ServiceDeploymentCircuitBreaker) bool { return v.Enable }).(pulumi.BoolOutput)
}

// Whether to enable Amazon ECS to roll back the service if a service deployment fails. If rollback is enabled, when a service deployment fails, the service is rolled back to the last deployment that completed successfully.
func (o ServiceDeploymentCircuitBreakerOutput) Rollback() pulumi.BoolOutput {
	return o.ApplyT(func(v ServiceDeploymentCircuitBreaker) bool { return v.Rollback }).(pulumi.BoolOutput)
}

type ServiceDeploymentCircuitBreakerPtrOutput struct{ *pulumi.OutputState }

func (ServiceDeploymentCircuitBreakerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceDeploymentCircuitBreaker)(nil)).Elem()
}

func (o ServiceDeploymentCircuitBreakerPtrOutput) ToServiceDeploymentCircuitBreakerPtrOutput() ServiceDeploymentCircuitBreakerPtrOutput {
	return o
}

func (o ServiceDeploymentCircuitBreakerPtrOutput) ToServiceDeploymentCircuitBreakerPtrOutputWithContext(ctx context.Context) ServiceDeploymentCircuitBreakerPtrOutput {
	return o
}

func (o ServiceDeploymentCircuitBreakerPtrOutput) Elem() ServiceDeploymentCircuitBreakerOutput {
	return o.ApplyT(func(v *ServiceDeploymentCircuitBreaker) ServiceDeploymentCircuitBreaker {
		if v != nil {
			return *v
		}
		var ret ServiceDeploymentCircuitBreaker
		return ret
	}).(ServiceDeploymentCircuitBreakerOutput)
}

// Whether to enable the deployment circuit breaker logic for the service.
func (o ServiceDeploymentCircuitBreakerPtrOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServiceDeploymentCircuitBreaker) *bool {
		if v == nil {
			return nil
		}
		return &v.Enable
	}).(pulumi.BoolPtrOutput)
}

// Whether to enable Amazon ECS to roll back the service if a service deployment fails. If rollback is enabled, when a service deployment fails, the service is rolled back to the last deployment that completed successfully.
func (o ServiceDeploymentCircuitBreakerPtrOutput) Rollback() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServiceDeploymentCircuitBreaker) *bool {
		if v == nil {
			return nil
		}
		return &v.Rollback
	}).(pulumi.BoolPtrOutput)
}

type ServiceDeploymentController struct {
	// Type of deployment controller. Valid values: `CODE_DEPLOY`, `ECS`, `EXTERNAL`. Default: `ECS`.
	Type *string `pulumi:"type"`
}

// ServiceDeploymentControllerInput is an input type that accepts ServiceDeploymentControllerArgs and ServiceDeploymentControllerOutput values.
// You can construct a concrete instance of `ServiceDeploymentControllerInput` via:
//
//	ServiceDeploymentControllerArgs{...}
type ServiceDeploymentControllerInput interface {
	pulumi.Input

	ToServiceDeploymentControllerOutput() ServiceDeploymentControllerOutput
	ToServiceDeploymentControllerOutputWithContext(context.Context) ServiceDeploymentControllerOutput
}

type ServiceDeploymentControllerArgs struct {
	// Type of deployment controller. Valid values: `CODE_DEPLOY`, `ECS`, `EXTERNAL`. Default: `ECS`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ServiceDeploymentControllerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceDeploymentController)(nil)).Elem()
}

func (i ServiceDeploymentControllerArgs) ToServiceDeploymentControllerOutput() ServiceDeploymentControllerOutput {
	return i.ToServiceDeploymentControllerOutputWithContext(context.Background())
}

func (i ServiceDeploymentControllerArgs) ToServiceDeploymentControllerOutputWithContext(ctx context.Context) ServiceDeploymentControllerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceDeploymentControllerOutput)
}

func (i ServiceDeploymentControllerArgs) ToServiceDeploymentControllerPtrOutput() ServiceDeploymentControllerPtrOutput {
	return i.ToServiceDeploymentControllerPtrOutputWithContext(context.Background())
}

func (i ServiceDeploymentControllerArgs) ToServiceDeploymentControllerPtrOutputWithContext(ctx context.Context) ServiceDeploymentControllerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceDeploymentControllerOutput).ToServiceDeploymentControllerPtrOutputWithContext(ctx)
}

// ServiceDeploymentControllerPtrInput is an input type that accepts ServiceDeploymentControllerArgs, ServiceDeploymentControllerPtr and ServiceDeploymentControllerPtrOutput values.
// You can construct a concrete instance of `ServiceDeploymentControllerPtrInput` via:
//
//	        ServiceDeploymentControllerArgs{...}
//
//	or:
//
//	        nil
type ServiceDeploymentControllerPtrInput interface {
	pulumi.Input

	ToServiceDeploymentControllerPtrOutput() ServiceDeploymentControllerPtrOutput
	ToServiceDeploymentControllerPtrOutputWithContext(context.Context) ServiceDeploymentControllerPtrOutput
}

type serviceDeploymentControllerPtrType ServiceDeploymentControllerArgs

func ServiceDeploymentControllerPtr(v *ServiceDeploymentControllerArgs) ServiceDeploymentControllerPtrInput {
	return (*serviceDeploymentControllerPtrType)(v)
}

func (*serviceDeploymentControllerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceDeploymentController)(nil)).Elem()
}

func (i *serviceDeploymentControllerPtrType) ToServiceDeploymentControllerPtrOutput() ServiceDeploymentControllerPtrOutput {
	return i.ToServiceDeploymentControllerPtrOutputWithContext(context.Background())
}

func (i *serviceDeploymentControllerPtrType) ToServiceDeploymentControllerPtrOutputWithContext(ctx context.Context) ServiceDeploymentControllerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceDeploymentControllerPtrOutput)
}

type ServiceDeploymentControllerOutput struct{ *pulumi.OutputState }

func (ServiceDeploymentControllerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceDeploymentController)(nil)).Elem()
}

func (o ServiceDeploymentControllerOutput) ToServiceDeploymentControllerOutput() ServiceDeploymentControllerOutput {
	return o
}

func (o ServiceDeploymentControllerOutput) ToServiceDeploymentControllerOutputWithContext(ctx context.Context) ServiceDeploymentControllerOutput {
	return o
}

func (o ServiceDeploymentControllerOutput) ToServiceDeploymentControllerPtrOutput() ServiceDeploymentControllerPtrOutput {
	return o.ToServiceDeploymentControllerPtrOutputWithContext(context.Background())
}

func (o ServiceDeploymentControllerOutput) ToServiceDeploymentControllerPtrOutputWithContext(ctx context.Context) ServiceDeploymentControllerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceDeploymentController) *ServiceDeploymentController {
		return &v
	}).(ServiceDeploymentControllerPtrOutput)
}

// Type of deployment controller. Valid values: `CODE_DEPLOY`, `ECS`, `EXTERNAL`. Default: `ECS`.
func (o ServiceDeploymentControllerOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceDeploymentController) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ServiceDeploymentControllerPtrOutput struct{ *pulumi.OutputState }

func (ServiceDeploymentControllerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceDeploymentController)(nil)).Elem()
}

func (o ServiceDeploymentControllerPtrOutput) ToServiceDeploymentControllerPtrOutput() ServiceDeploymentControllerPtrOutput {
	return o
}

func (o ServiceDeploymentControllerPtrOutput) ToServiceDeploymentControllerPtrOutputWithContext(ctx context.Context) ServiceDeploymentControllerPtrOutput {
	return o
}

func (o ServiceDeploymentControllerPtrOutput) Elem() ServiceDeploymentControllerOutput {
	return o.ApplyT(func(v *ServiceDeploymentController) ServiceDeploymentController {
		if v != nil {
			return *v
		}
		var ret ServiceDeploymentController
		return ret
	}).(ServiceDeploymentControllerOutput)
}

// Type of deployment controller. Valid values: `CODE_DEPLOY`, `ECS`, `EXTERNAL`. Default: `ECS`.
func (o ServiceDeploymentControllerPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceDeploymentController) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

type ServiceLoadBalancer struct {
	// Name of the container to associate with the load balancer (as it appears in a container definition).
	ContainerName string `pulumi:"containerName"`
	// Port on the container to associate with the load balancer.
	ContainerPort int `pulumi:"containerPort"`
	// Name of the ELB (Classic) to associate with the service.
	ElbName *string `pulumi:"elbName"`
	// ARN of the Load Balancer target group to associate with the service.
	TargetGroupArn *string `pulumi:"targetGroupArn"`
}

// ServiceLoadBalancerInput is an input type that accepts ServiceLoadBalancerArgs and ServiceLoadBalancerOutput values.
// You can construct a concrete instance of `ServiceLoadBalancerInput` via:
//
//	ServiceLoadBalancerArgs{...}
type ServiceLoadBalancerInput interface {
	pulumi.Input

	ToServiceLoadBalancerOutput() ServiceLoadBalancerOutput
	ToServiceLoadBalancerOutputWithContext(context.Context) ServiceLoadBalancerOutput
}

type ServiceLoadBalancerArgs struct {
	// Name of the container to associate with the load balancer (as it appears in a container definition).
	ContainerName pulumi.StringInput `pulumi:"containerName"`
	// Port on the container to associate with the load balancer.
	ContainerPort pulumi.IntInput `pulumi:"containerPort"`
	// Name of the ELB (Classic) to associate with the service.
	ElbName pulumi.StringPtrInput `pulumi:"elbName"`
	// ARN of the Load Balancer target group to associate with the service.
	TargetGroupArn pulumi.StringPtrInput `pulumi:"targetGroupArn"`
}

func (ServiceLoadBalancerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceLoadBalancer)(nil)).Elem()
}

func (i ServiceLoadBalancerArgs) ToServiceLoadBalancerOutput() ServiceLoadBalancerOutput {
	return i.ToServiceLoadBalancerOutputWithContext(context.Background())
}

func (i ServiceLoadBalancerArgs) ToServiceLoadBalancerOutputWithContext(ctx context.Context) ServiceLoadBalancerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLoadBalancerOutput)
}

// ServiceLoadBalancerArrayInput is an input type that accepts ServiceLoadBalancerArray and ServiceLoadBalancerArrayOutput values.
// You can construct a concrete instance of `ServiceLoadBalancerArrayInput` via:
//
//	ServiceLoadBalancerArray{ ServiceLoadBalancerArgs{...} }
type ServiceLoadBalancerArrayInput interface {
	pulumi.Input

	ToServiceLoadBalancerArrayOutput() ServiceLoadBalancerArrayOutput
	ToServiceLoadBalancerArrayOutputWithContext(context.Context) ServiceLoadBalancerArrayOutput
}

type ServiceLoadBalancerArray []ServiceLoadBalancerInput

func (ServiceLoadBalancerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceLoadBalancer)(nil)).Elem()
}

func (i ServiceLoadBalancerArray) ToServiceLoadBalancerArrayOutput() ServiceLoadBalancerArrayOutput {
	return i.ToServiceLoadBalancerArrayOutputWithContext(context.Background())
}

func (i ServiceLoadBalancerArray) ToServiceLoadBalancerArrayOutputWithContext(ctx context.Context) ServiceLoadBalancerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLoadBalancerArrayOutput)
}

type ServiceLoadBalancerOutput struct{ *pulumi.OutputState }

func (ServiceLoadBalancerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceLoadBalancer)(nil)).Elem()
}

func (o ServiceLoadBalancerOutput) ToServiceLoadBalancerOutput() ServiceLoadBalancerOutput {
	return o
}

func (o ServiceLoadBalancerOutput) ToServiceLoadBalancerOutputWithContext(ctx context.Context) ServiceLoadBalancerOutput {
	return o
}

// Name of the container to associate with the load balancer (as it appears in a container definition).
func (o ServiceLoadBalancerOutput) ContainerName() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceLoadBalancer) string { return v.ContainerName }).(pulumi.StringOutput)
}

// Port on the container to associate with the load balancer.
func (o ServiceLoadBalancerOutput) ContainerPort() pulumi.IntOutput {
	return o.ApplyT(func(v ServiceLoadBalancer) int { return v.ContainerPort }).(pulumi.IntOutput)
}

// Name of the ELB (Classic) to associate with the service.
func (o ServiceLoadBalancerOutput) ElbName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceLoadBalancer) *string { return v.ElbName }).(pulumi.StringPtrOutput)
}

// ARN of the Load Balancer target group to associate with the service.
func (o ServiceLoadBalancerOutput) TargetGroupArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceLoadBalancer) *string { return v.TargetGroupArn }).(pulumi.StringPtrOutput)
}

type ServiceLoadBalancerArrayOutput struct{ *pulumi.OutputState }

func (ServiceLoadBalancerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceLoadBalancer)(nil)).Elem()
}

func (o ServiceLoadBalancerArrayOutput) ToServiceLoadBalancerArrayOutput() ServiceLoadBalancerArrayOutput {
	return o
}

func (o ServiceLoadBalancerArrayOutput) ToServiceLoadBalancerArrayOutputWithContext(ctx context.Context) ServiceLoadBalancerArrayOutput {
	return o
}

func (o ServiceLoadBalancerArrayOutput) Index(i pulumi.IntInput) ServiceLoadBalancerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceLoadBalancer {
		return vs[0].([]ServiceLoadBalancer)[vs[1].(int)]
	}).(ServiceLoadBalancerOutput)
}

type ServiceNetworkConfiguration struct {
	// Assign a public IP address to the ENI (Fargate launch type only). Valid values are `true` or `false`. Default `false`.
	AssignPublicIp *bool `pulumi:"assignPublicIp"`
	// Security groups associated with the task or service. If you do not specify a security group, the default security group for the VPC is used.
	SecurityGroups []string `pulumi:"securityGroups"`
	// Subnets associated with the task or service.
	Subnets []string `pulumi:"subnets"`
}

// ServiceNetworkConfigurationInput is an input type that accepts ServiceNetworkConfigurationArgs and ServiceNetworkConfigurationOutput values.
// You can construct a concrete instance of `ServiceNetworkConfigurationInput` via:
//
//	ServiceNetworkConfigurationArgs{...}
type ServiceNetworkConfigurationInput interface {
	pulumi.Input

	ToServiceNetworkConfigurationOutput() ServiceNetworkConfigurationOutput
	ToServiceNetworkConfigurationOutputWithContext(context.Context) ServiceNetworkConfigurationOutput
}

type ServiceNetworkConfigurationArgs struct {
	// Assign a public IP address to the ENI (Fargate launch type only). Valid values are `true` or `false`. Default `false`.
	AssignPublicIp pulumi.BoolPtrInput `pulumi:"assignPublicIp"`
	// Security groups associated with the task or service. If you do not specify a security group, the default security group for the VPC is used.
	SecurityGroups pulumi.StringArrayInput `pulumi:"securityGroups"`
	// Subnets associated with the task or service.
	Subnets pulumi.StringArrayInput `pulumi:"subnets"`
}

func (ServiceNetworkConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceNetworkConfiguration)(nil)).Elem()
}

func (i ServiceNetworkConfigurationArgs) ToServiceNetworkConfigurationOutput() ServiceNetworkConfigurationOutput {
	return i.ToServiceNetworkConfigurationOutputWithContext(context.Background())
}

func (i ServiceNetworkConfigurationArgs) ToServiceNetworkConfigurationOutputWithContext(ctx context.Context) ServiceNetworkConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceNetworkConfigurationOutput)
}

func (i ServiceNetworkConfigurationArgs) ToServiceNetworkConfigurationPtrOutput() ServiceNetworkConfigurationPtrOutput {
	return i.ToServiceNetworkConfigurationPtrOutputWithContext(context.Background())
}

func (i ServiceNetworkConfigurationArgs) ToServiceNetworkConfigurationPtrOutputWithContext(ctx context.Context) ServiceNetworkConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceNetworkConfigurationOutput).ToServiceNetworkConfigurationPtrOutputWithContext(ctx)
}

// ServiceNetworkConfigurationPtrInput is an input type that accepts ServiceNetworkConfigurationArgs, ServiceNetworkConfigurationPtr and ServiceNetworkConfigurationPtrOutput values.
// You can construct a concrete instance of `ServiceNetworkConfigurationPtrInput` via:
//
//	        ServiceNetworkConfigurationArgs{...}
//
//	or:
//
//	        nil
type ServiceNetworkConfigurationPtrInput interface {
	pulumi.Input

	ToServiceNetworkConfigurationPtrOutput() ServiceNetworkConfigurationPtrOutput
	ToServiceNetworkConfigurationPtrOutputWithContext(context.Context) ServiceNetworkConfigurationPtrOutput
}

type serviceNetworkConfigurationPtrType ServiceNetworkConfigurationArgs

func ServiceNetworkConfigurationPtr(v *ServiceNetworkConfigurationArgs) ServiceNetworkConfigurationPtrInput {
	return (*serviceNetworkConfigurationPtrType)(v)
}

func (*serviceNetworkConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceNetworkConfiguration)(nil)).Elem()
}

func (i *serviceNetworkConfigurationPtrType) ToServiceNetworkConfigurationPtrOutput() ServiceNetworkConfigurationPtrOutput {
	return i.ToServiceNetworkConfigurationPtrOutputWithContext(context.Background())
}

func (i *serviceNetworkConfigurationPtrType) ToServiceNetworkConfigurationPtrOutputWithContext(ctx context.Context) ServiceNetworkConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceNetworkConfigurationPtrOutput)
}

type ServiceNetworkConfigurationOutput struct{ *pulumi.OutputState }

func (ServiceNetworkConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceNetworkConfiguration)(nil)).Elem()
}

func (o ServiceNetworkConfigurationOutput) ToServiceNetworkConfigurationOutput() ServiceNetworkConfigurationOutput {
	return o
}

func (o ServiceNetworkConfigurationOutput) ToServiceNetworkConfigurationOutputWithContext(ctx context.Context) ServiceNetworkConfigurationOutput {
	return o
}

func (o ServiceNetworkConfigurationOutput) ToServiceNetworkConfigurationPtrOutput() ServiceNetworkConfigurationPtrOutput {
	return o.ToServiceNetworkConfigurationPtrOutputWithContext(context.Background())
}

func (o ServiceNetworkConfigurationOutput) ToServiceNetworkConfigurationPtrOutputWithContext(ctx context.Context) ServiceNetworkConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceNetworkConfiguration) *ServiceNetworkConfiguration {
		return &v
	}).(ServiceNetworkConfigurationPtrOutput)
}

// Assign a public IP address to the ENI (Fargate launch type only). Valid values are `true` or `false`. Default `false`.
func (o ServiceNetworkConfigurationOutput) AssignPublicIp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServiceNetworkConfiguration) *bool { return v.AssignPublicIp }).(pulumi.BoolPtrOutput)
}

// Security groups associated with the task or service. If you do not specify a security group, the default security group for the VPC is used.
func (o ServiceNetworkConfigurationOutput) SecurityGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServiceNetworkConfiguration) []string { return v.SecurityGroups }).(pulumi.StringArrayOutput)
}

// Subnets associated with the task or service.
func (o ServiceNetworkConfigurationOutput) Subnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServiceNetworkConfiguration) []string { return v.Subnets }).(pulumi.StringArrayOutput)
}

type ServiceNetworkConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ServiceNetworkConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceNetworkConfiguration)(nil)).Elem()
}

func (o ServiceNetworkConfigurationPtrOutput) ToServiceNetworkConfigurationPtrOutput() ServiceNetworkConfigurationPtrOutput {
	return o
}

func (o ServiceNetworkConfigurationPtrOutput) ToServiceNetworkConfigurationPtrOutputWithContext(ctx context.Context) ServiceNetworkConfigurationPtrOutput {
	return o
}

func (o ServiceNetworkConfigurationPtrOutput) Elem() ServiceNetworkConfigurationOutput {
	return o.ApplyT(func(v *ServiceNetworkConfiguration) ServiceNetworkConfiguration {
		if v != nil {
			return *v
		}
		var ret ServiceNetworkConfiguration
		return ret
	}).(ServiceNetworkConfigurationOutput)
}

// Assign a public IP address to the ENI (Fargate launch type only). Valid values are `true` or `false`. Default `false`.
func (o ServiceNetworkConfigurationPtrOutput) AssignPublicIp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServiceNetworkConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.AssignPublicIp
	}).(pulumi.BoolPtrOutput)
}

// Security groups associated with the task or service. If you do not specify a security group, the default security group for the VPC is used.
func (o ServiceNetworkConfigurationPtrOutput) SecurityGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServiceNetworkConfiguration) []string {
		if v == nil {
			return nil
		}
		return v.SecurityGroups
	}).(pulumi.StringArrayOutput)
}

// Subnets associated with the task or service.
func (o ServiceNetworkConfigurationPtrOutput) Subnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServiceNetworkConfiguration) []string {
		if v == nil {
			return nil
		}
		return v.Subnets
	}).(pulumi.StringArrayOutput)
}

type ServiceOrderedPlacementStrategy struct {
	// For the `spread` placement strategy, valid values are `instanceId` (or `host`,
	// which has the same effect), or any platform or custom attribute that is applied to a container instance.
	// For the `binpack` type, valid values are `memory` and `cpu`. For the `random` type, this attribute is not
	// needed. For more information, see [Placement Strategy](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_PlacementStrategy.html).
	Field *string `pulumi:"field"`
	// Type of placement strategy. Must be one of: `binpack`, `random`, or `spread`
	Type string `pulumi:"type"`
}

// ServiceOrderedPlacementStrategyInput is an input type that accepts ServiceOrderedPlacementStrategyArgs and ServiceOrderedPlacementStrategyOutput values.
// You can construct a concrete instance of `ServiceOrderedPlacementStrategyInput` via:
//
//	ServiceOrderedPlacementStrategyArgs{...}
type ServiceOrderedPlacementStrategyInput interface {
	pulumi.Input

	ToServiceOrderedPlacementStrategyOutput() ServiceOrderedPlacementStrategyOutput
	ToServiceOrderedPlacementStrategyOutputWithContext(context.Context) ServiceOrderedPlacementStrategyOutput
}

type ServiceOrderedPlacementStrategyArgs struct {
	// For the `spread` placement strategy, valid values are `instanceId` (or `host`,
	// which has the same effect), or any platform or custom attribute that is applied to a container instance.
	// For the `binpack` type, valid values are `memory` and `cpu`. For the `random` type, this attribute is not
	// needed. For more information, see [Placement Strategy](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_PlacementStrategy.html).
	Field pulumi.StringPtrInput `pulumi:"field"`
	// Type of placement strategy. Must be one of: `binpack`, `random`, or `spread`
	Type pulumi.StringInput `pulumi:"type"`
}

func (ServiceOrderedPlacementStrategyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceOrderedPlacementStrategy)(nil)).Elem()
}

func (i ServiceOrderedPlacementStrategyArgs) ToServiceOrderedPlacementStrategyOutput() ServiceOrderedPlacementStrategyOutput {
	return i.ToServiceOrderedPlacementStrategyOutputWithContext(context.Background())
}

func (i ServiceOrderedPlacementStrategyArgs) ToServiceOrderedPlacementStrategyOutputWithContext(ctx context.Context) ServiceOrderedPlacementStrategyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceOrderedPlacementStrategyOutput)
}

// ServiceOrderedPlacementStrategyArrayInput is an input type that accepts ServiceOrderedPlacementStrategyArray and ServiceOrderedPlacementStrategyArrayOutput values.
// You can construct a concrete instance of `ServiceOrderedPlacementStrategyArrayInput` via:
//
//	ServiceOrderedPlacementStrategyArray{ ServiceOrderedPlacementStrategyArgs{...} }
type ServiceOrderedPlacementStrategyArrayInput interface {
	pulumi.Input

	ToServiceOrderedPlacementStrategyArrayOutput() ServiceOrderedPlacementStrategyArrayOutput
	ToServiceOrderedPlacementStrategyArrayOutputWithContext(context.Context) ServiceOrderedPlacementStrategyArrayOutput
}

type ServiceOrderedPlacementStrategyArray []ServiceOrderedPlacementStrategyInput

func (ServiceOrderedPlacementStrategyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceOrderedPlacementStrategy)(nil)).Elem()
}

func (i ServiceOrderedPlacementStrategyArray) ToServiceOrderedPlacementStrategyArrayOutput() ServiceOrderedPlacementStrategyArrayOutput {
	return i.ToServiceOrderedPlacementStrategyArrayOutputWithContext(context.Background())
}

func (i ServiceOrderedPlacementStrategyArray) ToServiceOrderedPlacementStrategyArrayOutputWithContext(ctx context.Context) ServiceOrderedPlacementStrategyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceOrderedPlacementStrategyArrayOutput)
}

type ServiceOrderedPlacementStrategyOutput struct{ *pulumi.OutputState }

func (ServiceOrderedPlacementStrategyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceOrderedPlacementStrategy)(nil)).Elem()
}

func (o ServiceOrderedPlacementStrategyOutput) ToServiceOrderedPlacementStrategyOutput() ServiceOrderedPlacementStrategyOutput {
	return o
}

func (o ServiceOrderedPlacementStrategyOutput) ToServiceOrderedPlacementStrategyOutputWithContext(ctx context.Context) ServiceOrderedPlacementStrategyOutput {
	return o
}

// For the `spread` placement strategy, valid values are `instanceId` (or `host`,
// which has the same effect), or any platform or custom attribute that is applied to a container instance.
// For the `binpack` type, valid values are `memory` and `cpu`. For the `random` type, this attribute is not
// needed. For more information, see [Placement Strategy](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_PlacementStrategy.html).
func (o ServiceOrderedPlacementStrategyOutput) Field() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceOrderedPlacementStrategy) *string { return v.Field }).(pulumi.StringPtrOutput)
}

// Type of placement strategy. Must be one of: `binpack`, `random`, or `spread`
func (o ServiceOrderedPlacementStrategyOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceOrderedPlacementStrategy) string { return v.Type }).(pulumi.StringOutput)
}

type ServiceOrderedPlacementStrategyArrayOutput struct{ *pulumi.OutputState }

func (ServiceOrderedPlacementStrategyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceOrderedPlacementStrategy)(nil)).Elem()
}

func (o ServiceOrderedPlacementStrategyArrayOutput) ToServiceOrderedPlacementStrategyArrayOutput() ServiceOrderedPlacementStrategyArrayOutput {
	return o
}

func (o ServiceOrderedPlacementStrategyArrayOutput) ToServiceOrderedPlacementStrategyArrayOutputWithContext(ctx context.Context) ServiceOrderedPlacementStrategyArrayOutput {
	return o
}

func (o ServiceOrderedPlacementStrategyArrayOutput) Index(i pulumi.IntInput) ServiceOrderedPlacementStrategyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceOrderedPlacementStrategy {
		return vs[0].([]ServiceOrderedPlacementStrategy)[vs[1].(int)]
	}).(ServiceOrderedPlacementStrategyOutput)
}

type ServicePlacementConstraint struct {
	// Cluster Query Language expression to apply to the constraint. Does not need to be specified for the `distinctInstance` type. For more information, see [Cluster Query Language in the Amazon EC2 Container Service Developer Guide](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html).
	Expression *string `pulumi:"expression"`
	// Type of constraint. The only valid values at this time are `memberOf` and `distinctInstance`.
	Type string `pulumi:"type"`
}

// ServicePlacementConstraintInput is an input type that accepts ServicePlacementConstraintArgs and ServicePlacementConstraintOutput values.
// You can construct a concrete instance of `ServicePlacementConstraintInput` via:
//
//	ServicePlacementConstraintArgs{...}
type ServicePlacementConstraintInput interface {
	pulumi.Input

	ToServicePlacementConstraintOutput() ServicePlacementConstraintOutput
	ToServicePlacementConstraintOutputWithContext(context.Context) ServicePlacementConstraintOutput
}

type ServicePlacementConstraintArgs struct {
	// Cluster Query Language expression to apply to the constraint. Does not need to be specified for the `distinctInstance` type. For more information, see [Cluster Query Language in the Amazon EC2 Container Service Developer Guide](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html).
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// Type of constraint. The only valid values at this time are `memberOf` and `distinctInstance`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ServicePlacementConstraintArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServicePlacementConstraint)(nil)).Elem()
}

func (i ServicePlacementConstraintArgs) ToServicePlacementConstraintOutput() ServicePlacementConstraintOutput {
	return i.ToServicePlacementConstraintOutputWithContext(context.Background())
}

func (i ServicePlacementConstraintArgs) ToServicePlacementConstraintOutputWithContext(ctx context.Context) ServicePlacementConstraintOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicePlacementConstraintOutput)
}

// ServicePlacementConstraintArrayInput is an input type that accepts ServicePlacementConstraintArray and ServicePlacementConstraintArrayOutput values.
// You can construct a concrete instance of `ServicePlacementConstraintArrayInput` via:
//
//	ServicePlacementConstraintArray{ ServicePlacementConstraintArgs{...} }
type ServicePlacementConstraintArrayInput interface {
	pulumi.Input

	ToServicePlacementConstraintArrayOutput() ServicePlacementConstraintArrayOutput
	ToServicePlacementConstraintArrayOutputWithContext(context.Context) ServicePlacementConstraintArrayOutput
}

type ServicePlacementConstraintArray []ServicePlacementConstraintInput

func (ServicePlacementConstraintArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServicePlacementConstraint)(nil)).Elem()
}

func (i ServicePlacementConstraintArray) ToServicePlacementConstraintArrayOutput() ServicePlacementConstraintArrayOutput {
	return i.ToServicePlacementConstraintArrayOutputWithContext(context.Background())
}

func (i ServicePlacementConstraintArray) ToServicePlacementConstraintArrayOutputWithContext(ctx context.Context) ServicePlacementConstraintArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicePlacementConstraintArrayOutput)
}

type ServicePlacementConstraintOutput struct{ *pulumi.OutputState }

func (ServicePlacementConstraintOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServicePlacementConstraint)(nil)).Elem()
}

func (o ServicePlacementConstraintOutput) ToServicePlacementConstraintOutput() ServicePlacementConstraintOutput {
	return o
}

func (o ServicePlacementConstraintOutput) ToServicePlacementConstraintOutputWithContext(ctx context.Context) ServicePlacementConstraintOutput {
	return o
}

// Cluster Query Language expression to apply to the constraint. Does not need to be specified for the `distinctInstance` type. For more information, see [Cluster Query Language in the Amazon EC2 Container Service Developer Guide](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html).
func (o ServicePlacementConstraintOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePlacementConstraint) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// Type of constraint. The only valid values at this time are `memberOf` and `distinctInstance`.
func (o ServicePlacementConstraintOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ServicePlacementConstraint) string { return v.Type }).(pulumi.StringOutput)
}

type ServicePlacementConstraintArrayOutput struct{ *pulumi.OutputState }

func (ServicePlacementConstraintArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServicePlacementConstraint)(nil)).Elem()
}

func (o ServicePlacementConstraintArrayOutput) ToServicePlacementConstraintArrayOutput() ServicePlacementConstraintArrayOutput {
	return o
}

func (o ServicePlacementConstraintArrayOutput) ToServicePlacementConstraintArrayOutputWithContext(ctx context.Context) ServicePlacementConstraintArrayOutput {
	return o
}

func (o ServicePlacementConstraintArrayOutput) Index(i pulumi.IntInput) ServicePlacementConstraintOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServicePlacementConstraint {
		return vs[0].([]ServicePlacementConstraint)[vs[1].(int)]
	}).(ServicePlacementConstraintOutput)
}

type ServiceServiceConnectConfiguration struct {
	// Specifies whether to use Service Connect with this service.
	Enabled bool `pulumi:"enabled"`
	// The log configuration for the container. See below.
	LogConfiguration *ServiceServiceConnectConfigurationLogConfiguration `pulumi:"logConfiguration"`
	// The namespace name or ARN of the `servicediscovery.HttpNamespace` for use with Service Connect.
	Namespace *string `pulumi:"namespace"`
	// The list of Service Connect service objects. See below.
	Service *ServiceServiceConnectConfigurationService `pulumi:"service"`
}

// ServiceServiceConnectConfigurationInput is an input type that accepts ServiceServiceConnectConfigurationArgs and ServiceServiceConnectConfigurationOutput values.
// You can construct a concrete instance of `ServiceServiceConnectConfigurationInput` via:
//
//	ServiceServiceConnectConfigurationArgs{...}
type ServiceServiceConnectConfigurationInput interface {
	pulumi.Input

	ToServiceServiceConnectConfigurationOutput() ServiceServiceConnectConfigurationOutput
	ToServiceServiceConnectConfigurationOutputWithContext(context.Context) ServiceServiceConnectConfigurationOutput
}

type ServiceServiceConnectConfigurationArgs struct {
	// Specifies whether to use Service Connect with this service.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// The log configuration for the container. See below.
	LogConfiguration ServiceServiceConnectConfigurationLogConfigurationPtrInput `pulumi:"logConfiguration"`
	// The namespace name or ARN of the `servicediscovery.HttpNamespace` for use with Service Connect.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// The list of Service Connect service objects. See below.
	Service ServiceServiceConnectConfigurationServicePtrInput `pulumi:"service"`
}

func (ServiceServiceConnectConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceServiceConnectConfiguration)(nil)).Elem()
}

func (i ServiceServiceConnectConfigurationArgs) ToServiceServiceConnectConfigurationOutput() ServiceServiceConnectConfigurationOutput {
	return i.ToServiceServiceConnectConfigurationOutputWithContext(context.Background())
}

func (i ServiceServiceConnectConfigurationArgs) ToServiceServiceConnectConfigurationOutputWithContext(ctx context.Context) ServiceServiceConnectConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceServiceConnectConfigurationOutput)
}

func (i ServiceServiceConnectConfigurationArgs) ToServiceServiceConnectConfigurationPtrOutput() ServiceServiceConnectConfigurationPtrOutput {
	return i.ToServiceServiceConnectConfigurationPtrOutputWithContext(context.Background())
}

func (i ServiceServiceConnectConfigurationArgs) ToServiceServiceConnectConfigurationPtrOutputWithContext(ctx context.Context) ServiceServiceConnectConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceServiceConnectConfigurationOutput).ToServiceServiceConnectConfigurationPtrOutputWithContext(ctx)
}

// ServiceServiceConnectConfigurationPtrInput is an input type that accepts ServiceServiceConnectConfigurationArgs, ServiceServiceConnectConfigurationPtr and ServiceServiceConnectConfigurationPtrOutput values.
// You can construct a concrete instance of `ServiceServiceConnectConfigurationPtrInput` via:
//
//	        ServiceServiceConnectConfigurationArgs{...}
//
//	or:
//
//	        nil
type ServiceServiceConnectConfigurationPtrInput interface {
	pulumi.Input

	ToServiceServiceConnectConfigurationPtrOutput() ServiceServiceConnectConfigurationPtrOutput
	ToServiceServiceConnectConfigurationPtrOutputWithContext(context.Context) ServiceServiceConnectConfigurationPtrOutput
}

type serviceServiceConnectConfigurationPtrType ServiceServiceConnectConfigurationArgs

func ServiceServiceConnectConfigurationPtr(v *ServiceServiceConnectConfigurationArgs) ServiceServiceConnectConfigurationPtrInput {
	return (*serviceServiceConnectConfigurationPtrType)(v)
}

func (*serviceServiceConnectConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceServiceConnectConfiguration)(nil)).Elem()
}

func (i *serviceServiceConnectConfigurationPtrType) ToServiceServiceConnectConfigurationPtrOutput() ServiceServiceConnectConfigurationPtrOutput {
	return i.ToServiceServiceConnectConfigurationPtrOutputWithContext(context.Background())
}

func (i *serviceServiceConnectConfigurationPtrType) ToServiceServiceConnectConfigurationPtrOutputWithContext(ctx context.Context) ServiceServiceConnectConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceServiceConnectConfigurationPtrOutput)
}

type ServiceServiceConnectConfigurationOutput struct{ *pulumi.OutputState }

func (ServiceServiceConnectConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceServiceConnectConfiguration)(nil)).Elem()
}

func (o ServiceServiceConnectConfigurationOutput) ToServiceServiceConnectConfigurationOutput() ServiceServiceConnectConfigurationOutput {
	return o
}

func (o ServiceServiceConnectConfigurationOutput) ToServiceServiceConnectConfigurationOutputWithContext(ctx context.Context) ServiceServiceConnectConfigurationOutput {
	return o
}

func (o ServiceServiceConnectConfigurationOutput) ToServiceServiceConnectConfigurationPtrOutput() ServiceServiceConnectConfigurationPtrOutput {
	return o.ToServiceServiceConnectConfigurationPtrOutputWithContext(context.Background())
}

func (o ServiceServiceConnectConfigurationOutput) ToServiceServiceConnectConfigurationPtrOutputWithContext(ctx context.Context) ServiceServiceConnectConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceServiceConnectConfiguration) *ServiceServiceConnectConfiguration {
		return &v
	}).(ServiceServiceConnectConfigurationPtrOutput)
}

// Specifies whether to use Service Connect with this service.
func (o ServiceServiceConnectConfigurationOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ServiceServiceConnectConfiguration) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The log configuration for the container. See below.
func (o ServiceServiceConnectConfigurationOutput) LogConfiguration() ServiceServiceConnectConfigurationLogConfigurationPtrOutput {
	return o.ApplyT(func(v ServiceServiceConnectConfiguration) *ServiceServiceConnectConfigurationLogConfiguration {
		return v.LogConfiguration
	}).(ServiceServiceConnectConfigurationLogConfigurationPtrOutput)
}

// The namespace name or ARN of the `servicediscovery.HttpNamespace` for use with Service Connect.
func (o ServiceServiceConnectConfigurationOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceServiceConnectConfiguration) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// The list of Service Connect service objects. See below.
func (o ServiceServiceConnectConfigurationOutput) Service() ServiceServiceConnectConfigurationServicePtrOutput {
	return o.ApplyT(func(v ServiceServiceConnectConfiguration) *ServiceServiceConnectConfigurationService {
		return v.Service
	}).(ServiceServiceConnectConfigurationServicePtrOutput)
}

type ServiceServiceConnectConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ServiceServiceConnectConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceServiceConnectConfiguration)(nil)).Elem()
}

func (o ServiceServiceConnectConfigurationPtrOutput) ToServiceServiceConnectConfigurationPtrOutput() ServiceServiceConnectConfigurationPtrOutput {
	return o
}

func (o ServiceServiceConnectConfigurationPtrOutput) ToServiceServiceConnectConfigurationPtrOutputWithContext(ctx context.Context) ServiceServiceConnectConfigurationPtrOutput {
	return o
}

func (o ServiceServiceConnectConfigurationPtrOutput) Elem() ServiceServiceConnectConfigurationOutput {
	return o.ApplyT(func(v *ServiceServiceConnectConfiguration) ServiceServiceConnectConfiguration {
		if v != nil {
			return *v
		}
		var ret ServiceServiceConnectConfiguration
		return ret
	}).(ServiceServiceConnectConfigurationOutput)
}

// Specifies whether to use Service Connect with this service.
func (o ServiceServiceConnectConfigurationPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServiceServiceConnectConfiguration) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// The log configuration for the container. See below.
func (o ServiceServiceConnectConfigurationPtrOutput) LogConfiguration() ServiceServiceConnectConfigurationLogConfigurationPtrOutput {
	return o.ApplyT(func(v *ServiceServiceConnectConfiguration) *ServiceServiceConnectConfigurationLogConfiguration {
		if v == nil {
			return nil
		}
		return v.LogConfiguration
	}).(ServiceServiceConnectConfigurationLogConfigurationPtrOutput)
}

// The namespace name or ARN of the `servicediscovery.HttpNamespace` for use with Service Connect.
func (o ServiceServiceConnectConfigurationPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceServiceConnectConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// The list of Service Connect service objects. See below.
func (o ServiceServiceConnectConfigurationPtrOutput) Service() ServiceServiceConnectConfigurationServicePtrOutput {
	return o.ApplyT(func(v *ServiceServiceConnectConfiguration) *ServiceServiceConnectConfigurationService {
		if v == nil {
			return nil
		}
		return v.Service
	}).(ServiceServiceConnectConfigurationServicePtrOutput)
}

type ServiceServiceConnectConfigurationLogConfiguration struct {
	// The log driver to use for the container.
	LogDriver *string `pulumi:"logDriver"`
	// The configuration options to send to the log driver.
	Options map[string]string `pulumi:"options"`
	// The secrets to pass to the log configuration. See below.
	SecretOptions []ServiceServiceConnectConfigurationLogConfigurationSecretOption `pulumi:"secretOptions"`
}

// ServiceServiceConnectConfigurationLogConfigurationInput is an input type that accepts ServiceServiceConnectConfigurationLogConfigurationArgs and ServiceServiceConnectConfigurationLogConfigurationOutput values.
// You can construct a concrete instance of `ServiceServiceConnectConfigurationLogConfigurationInput` via:
//
//	ServiceServiceConnectConfigurationLogConfigurationArgs{...}
type ServiceServiceConnectConfigurationLogConfigurationInput interface {
	pulumi.Input

	ToServiceServiceConnectConfigurationLogConfigurationOutput() ServiceServiceConnectConfigurationLogConfigurationOutput
	ToServiceServiceConnectConfigurationLogConfigurationOutputWithContext(context.Context) ServiceServiceConnectConfigurationLogConfigurationOutput
}

type ServiceServiceConnectConfigurationLogConfigurationArgs struct {
	// The log driver to use for the container.
	LogDriver pulumi.StringPtrInput `pulumi:"logDriver"`
	// The configuration options to send to the log driver.
	Options pulumi.StringMapInput `pulumi:"options"`
	// The secrets to pass to the log configuration. See below.
	SecretOptions ServiceServiceConnectConfigurationLogConfigurationSecretOptionArrayInput `pulumi:"secretOptions"`
}

func (ServiceServiceConnectConfigurationLogConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceServiceConnectConfigurationLogConfiguration)(nil)).Elem()
}

func (i ServiceServiceConnectConfigurationLogConfigurationArgs) ToServiceServiceConnectConfigurationLogConfigurationOutput() ServiceServiceConnectConfigurationLogConfigurationOutput {
	return i.ToServiceServiceConnectConfigurationLogConfigurationOutputWithContext(context.Background())
}

func (i ServiceServiceConnectConfigurationLogConfigurationArgs) ToServiceServiceConnectConfigurationLogConfigurationOutputWithContext(ctx context.Context) ServiceServiceConnectConfigurationLogConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceServiceConnectConfigurationLogConfigurationOutput)
}

func (i ServiceServiceConnectConfigurationLogConfigurationArgs) ToServiceServiceConnectConfigurationLogConfigurationPtrOutput() ServiceServiceConnectConfigurationLogConfigurationPtrOutput {
	return i.ToServiceServiceConnectConfigurationLogConfigurationPtrOutputWithContext(context.Background())
}

func (i ServiceServiceConnectConfigurationLogConfigurationArgs) ToServiceServiceConnectConfigurationLogConfigurationPtrOutputWithContext(ctx context.Context) ServiceServiceConnectConfigurationLogConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceServiceConnectConfigurationLogConfigurationOutput).ToServiceServiceConnectConfigurationLogConfigurationPtrOutputWithContext(ctx)
}

// ServiceServiceConnectConfigurationLogConfigurationPtrInput is an input type that accepts ServiceServiceConnectConfigurationLogConfigurationArgs, ServiceServiceConnectConfigurationLogConfigurationPtr and ServiceServiceConnectConfigurationLogConfigurationPtrOutput values.
// You can construct a concrete instance of `ServiceServiceConnectConfigurationLogConfigurationPtrInput` via:
//
//	        ServiceServiceConnectConfigurationLogConfigurationArgs{...}
//
//	or:
//
//	        nil
type ServiceServiceConnectConfigurationLogConfigurationPtrInput interface {
	pulumi.Input

	ToServiceServiceConnectConfigurationLogConfigurationPtrOutput() ServiceServiceConnectConfigurationLogConfigurationPtrOutput
	ToServiceServiceConnectConfigurationLogConfigurationPtrOutputWithContext(context.Context) ServiceServiceConnectConfigurationLogConfigurationPtrOutput
}

type serviceServiceConnectConfigurationLogConfigurationPtrType ServiceServiceConnectConfigurationLogConfigurationArgs

func ServiceServiceConnectConfigurationLogConfigurationPtr(v *ServiceServiceConnectConfigurationLogConfigurationArgs) ServiceServiceConnectConfigurationLogConfigurationPtrInput {
	return (*serviceServiceConnectConfigurationLogConfigurationPtrType)(v)
}

func (*serviceServiceConnectConfigurationLogConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceServiceConnectConfigurationLogConfiguration)(nil)).Elem()
}

func (i *serviceServiceConnectConfigurationLogConfigurationPtrType) ToServiceServiceConnectConfigurationLogConfigurationPtrOutput() ServiceServiceConnectConfigurationLogConfigurationPtrOutput {
	return i.ToServiceServiceConnectConfigurationLogConfigurationPtrOutputWithContext(context.Background())
}

func (i *serviceServiceConnectConfigurationLogConfigurationPtrType) ToServiceServiceConnectConfigurationLogConfigurationPtrOutputWithContext(ctx context.Context) ServiceServiceConnectConfigurationLogConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceServiceConnectConfigurationLogConfigurationPtrOutput)
}

type ServiceServiceConnectConfigurationLogConfigurationOutput struct{ *pulumi.OutputState }

func (ServiceServiceConnectConfigurationLogConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceServiceConnectConfigurationLogConfiguration)(nil)).Elem()
}

func (o ServiceServiceConnectConfigurationLogConfigurationOutput) ToServiceServiceConnectConfigurationLogConfigurationOutput() ServiceServiceConnectConfigurationLogConfigurationOutput {
	return o
}

func (o ServiceServiceConnectConfigurationLogConfigurationOutput) ToServiceServiceConnectConfigurationLogConfigurationOutputWithContext(ctx context.Context) ServiceServiceConnectConfigurationLogConfigurationOutput {
	return o
}

func (o ServiceServiceConnectConfigurationLogConfigurationOutput) ToServiceServiceConnectConfigurationLogConfigurationPtrOutput() ServiceServiceConnectConfigurationLogConfigurationPtrOutput {
	return o.ToServiceServiceConnectConfigurationLogConfigurationPtrOutputWithContext(context.Background())
}

func (o ServiceServiceConnectConfigurationLogConfigurationOutput) ToServiceServiceConnectConfigurationLogConfigurationPtrOutputWithContext(ctx context.Context) ServiceServiceConnectConfigurationLogConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceServiceConnectConfigurationLogConfiguration) *ServiceServiceConnectConfigurationLogConfiguration {
		return &v
	}).(ServiceServiceConnectConfigurationLogConfigurationPtrOutput)
}

// The log driver to use for the container.
func (o ServiceServiceConnectConfigurationLogConfigurationOutput) LogDriver() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceServiceConnectConfigurationLogConfiguration) *string { return v.LogDriver }).(pulumi.StringPtrOutput)
}

// The configuration options to send to the log driver.
func (o ServiceServiceConnectConfigurationLogConfigurationOutput) Options() pulumi.StringMapOutput {
	return o.ApplyT(func(v ServiceServiceConnectConfigurationLogConfiguration) map[string]string { return v.Options }).(pulumi.StringMapOutput)
}

// The secrets to pass to the log configuration. See below.
func (o ServiceServiceConnectConfigurationLogConfigurationOutput) SecretOptions() ServiceServiceConnectConfigurationLogConfigurationSecretOptionArrayOutput {
	return o.ApplyT(func(v ServiceServiceConnectConfigurationLogConfiguration) []ServiceServiceConnectConfigurationLogConfigurationSecretOption {
		return v.SecretOptions
	}).(ServiceServiceConnectConfigurationLogConfigurationSecretOptionArrayOutput)
}

type ServiceServiceConnectConfigurationLogConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ServiceServiceConnectConfigurationLogConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceServiceConnectConfigurationLogConfiguration)(nil)).Elem()
}

func (o ServiceServiceConnectConfigurationLogConfigurationPtrOutput) ToServiceServiceConnectConfigurationLogConfigurationPtrOutput() ServiceServiceConnectConfigurationLogConfigurationPtrOutput {
	return o
}

func (o ServiceServiceConnectConfigurationLogConfigurationPtrOutput) ToServiceServiceConnectConfigurationLogConfigurationPtrOutputWithContext(ctx context.Context) ServiceServiceConnectConfigurationLogConfigurationPtrOutput {
	return o
}

func (o ServiceServiceConnectConfigurationLogConfigurationPtrOutput) Elem() ServiceServiceConnectConfigurationLogConfigurationOutput {
	return o.ApplyT(func(v *ServiceServiceConnectConfigurationLogConfiguration) ServiceServiceConnectConfigurationLogConfiguration {
		if v != nil {
			return *v
		}
		var ret ServiceServiceConnectConfigurationLogConfiguration
		return ret
	}).(ServiceServiceConnectConfigurationLogConfigurationOutput)
}

// The log driver to use for the container.
func (o ServiceServiceConnectConfigurationLogConfigurationPtrOutput) LogDriver() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceServiceConnectConfigurationLogConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.LogDriver
	}).(pulumi.StringPtrOutput)
}

// The configuration options to send to the log driver.
func (o ServiceServiceConnectConfigurationLogConfigurationPtrOutput) Options() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ServiceServiceConnectConfigurationLogConfiguration) map[string]string {
		if v == nil {
			return nil
		}
		return v.Options
	}).(pulumi.StringMapOutput)
}

// The secrets to pass to the log configuration. See below.
func (o ServiceServiceConnectConfigurationLogConfigurationPtrOutput) SecretOptions() ServiceServiceConnectConfigurationLogConfigurationSecretOptionArrayOutput {
	return o.ApplyT(func(v *ServiceServiceConnectConfigurationLogConfiguration) []ServiceServiceConnectConfigurationLogConfigurationSecretOption {
		if v == nil {
			return nil
		}
		return v.SecretOptions
	}).(ServiceServiceConnectConfigurationLogConfigurationSecretOptionArrayOutput)
}

type ServiceServiceConnectConfigurationLogConfigurationSecretOption struct {
	// The name of the secret.
	Name string `pulumi:"name"`
	// The secret to expose to the container. The supported values are either the full ARN of the AWS Secrets Manager secret or the full ARN of the parameter in the SSM Parameter Store.
	ValueFrom string `pulumi:"valueFrom"`
}

// ServiceServiceConnectConfigurationLogConfigurationSecretOptionInput is an input type that accepts ServiceServiceConnectConfigurationLogConfigurationSecretOptionArgs and ServiceServiceConnectConfigurationLogConfigurationSecretOptionOutput values.
// You can construct a concrete instance of `ServiceServiceConnectConfigurationLogConfigurationSecretOptionInput` via:
//
//	ServiceServiceConnectConfigurationLogConfigurationSecretOptionArgs{...}
type ServiceServiceConnectConfigurationLogConfigurationSecretOptionInput interface {
	pulumi.Input

	ToServiceServiceConnectConfigurationLogConfigurationSecretOptionOutput() ServiceServiceConnectConfigurationLogConfigurationSecretOptionOutput
	ToServiceServiceConnectConfigurationLogConfigurationSecretOptionOutputWithContext(context.Context) ServiceServiceConnectConfigurationLogConfigurationSecretOptionOutput
}

type ServiceServiceConnectConfigurationLogConfigurationSecretOptionArgs struct {
	// The name of the secret.
	Name pulumi.StringInput `pulumi:"name"`
	// The secret to expose to the container. The supported values are either the full ARN of the AWS Secrets Manager secret or the full ARN of the parameter in the SSM Parameter Store.
	ValueFrom pulumi.StringInput `pulumi:"valueFrom"`
}

func (ServiceServiceConnectConfigurationLogConfigurationSecretOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceServiceConnectConfigurationLogConfigurationSecretOption)(nil)).Elem()
}

func (i ServiceServiceConnectConfigurationLogConfigurationSecretOptionArgs) ToServiceServiceConnectConfigurationLogConfigurationSecretOptionOutput() ServiceServiceConnectConfigurationLogConfigurationSecretOptionOutput {
	return i.ToServiceServiceConnectConfigurationLogConfigurationSecretOptionOutputWithContext(context.Background())
}

func (i ServiceServiceConnectConfigurationLogConfigurationSecretOptionArgs) ToServiceServiceConnectConfigurationLogConfigurationSecretOptionOutputWithContext(ctx context.Context) ServiceServiceConnectConfigurationLogConfigurationSecretOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceServiceConnectConfigurationLogConfigurationSecretOptionOutput)
}

// ServiceServiceConnectConfigurationLogConfigurationSecretOptionArrayInput is an input type that accepts ServiceServiceConnectConfigurationLogConfigurationSecretOptionArray and ServiceServiceConnectConfigurationLogConfigurationSecretOptionArrayOutput values.
// You can construct a concrete instance of `ServiceServiceConnectConfigurationLogConfigurationSecretOptionArrayInput` via:
//
//	ServiceServiceConnectConfigurationLogConfigurationSecretOptionArray{ ServiceServiceConnectConfigurationLogConfigurationSecretOptionArgs{...} }
type ServiceServiceConnectConfigurationLogConfigurationSecretOptionArrayInput interface {
	pulumi.Input

	ToServiceServiceConnectConfigurationLogConfigurationSecretOptionArrayOutput() ServiceServiceConnectConfigurationLogConfigurationSecretOptionArrayOutput
	ToServiceServiceConnectConfigurationLogConfigurationSecretOptionArrayOutputWithContext(context.Context) ServiceServiceConnectConfigurationLogConfigurationSecretOptionArrayOutput
}

type ServiceServiceConnectConfigurationLogConfigurationSecretOptionArray []ServiceServiceConnectConfigurationLogConfigurationSecretOptionInput

func (ServiceServiceConnectConfigurationLogConfigurationSecretOptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceServiceConnectConfigurationLogConfigurationSecretOption)(nil)).Elem()
}

func (i ServiceServiceConnectConfigurationLogConfigurationSecretOptionArray) ToServiceServiceConnectConfigurationLogConfigurationSecretOptionArrayOutput() ServiceServiceConnectConfigurationLogConfigurationSecretOptionArrayOutput {
	return i.ToServiceServiceConnectConfigurationLogConfigurationSecretOptionArrayOutputWithContext(context.Background())
}

func (i ServiceServiceConnectConfigurationLogConfigurationSecretOptionArray) ToServiceServiceConnectConfigurationLogConfigurationSecretOptionArrayOutputWithContext(ctx context.Context) ServiceServiceConnectConfigurationLogConfigurationSecretOptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceServiceConnectConfigurationLogConfigurationSecretOptionArrayOutput)
}

type ServiceServiceConnectConfigurationLogConfigurationSecretOptionOutput struct{ *pulumi.OutputState }

func (ServiceServiceConnectConfigurationLogConfigurationSecretOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceServiceConnectConfigurationLogConfigurationSecretOption)(nil)).Elem()
}

func (o ServiceServiceConnectConfigurationLogConfigurationSecretOptionOutput) ToServiceServiceConnectConfigurationLogConfigurationSecretOptionOutput() ServiceServiceConnectConfigurationLogConfigurationSecretOptionOutput {
	return o
}

func (o ServiceServiceConnectConfigurationLogConfigurationSecretOptionOutput) ToServiceServiceConnectConfigurationLogConfigurationSecretOptionOutputWithContext(ctx context.Context) ServiceServiceConnectConfigurationLogConfigurationSecretOptionOutput {
	return o
}

// The name of the secret.
func (o ServiceServiceConnectConfigurationLogConfigurationSecretOptionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceServiceConnectConfigurationLogConfigurationSecretOption) string { return v.Name }).(pulumi.StringOutput)
}

// The secret to expose to the container. The supported values are either the full ARN of the AWS Secrets Manager secret or the full ARN of the parameter in the SSM Parameter Store.
func (o ServiceServiceConnectConfigurationLogConfigurationSecretOptionOutput) ValueFrom() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceServiceConnectConfigurationLogConfigurationSecretOption) string { return v.ValueFrom }).(pulumi.StringOutput)
}

type ServiceServiceConnectConfigurationLogConfigurationSecretOptionArrayOutput struct{ *pulumi.OutputState }

func (ServiceServiceConnectConfigurationLogConfigurationSecretOptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceServiceConnectConfigurationLogConfigurationSecretOption)(nil)).Elem()
}

func (o ServiceServiceConnectConfigurationLogConfigurationSecretOptionArrayOutput) ToServiceServiceConnectConfigurationLogConfigurationSecretOptionArrayOutput() ServiceServiceConnectConfigurationLogConfigurationSecretOptionArrayOutput {
	return o
}

func (o ServiceServiceConnectConfigurationLogConfigurationSecretOptionArrayOutput) ToServiceServiceConnectConfigurationLogConfigurationSecretOptionArrayOutputWithContext(ctx context.Context) ServiceServiceConnectConfigurationLogConfigurationSecretOptionArrayOutput {
	return o
}

func (o ServiceServiceConnectConfigurationLogConfigurationSecretOptionArrayOutput) Index(i pulumi.IntInput) ServiceServiceConnectConfigurationLogConfigurationSecretOptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceServiceConnectConfigurationLogConfigurationSecretOption {
		return vs[0].([]ServiceServiceConnectConfigurationLogConfigurationSecretOption)[vs[1].(int)]
	}).(ServiceServiceConnectConfigurationLogConfigurationSecretOptionOutput)
}

type ServiceServiceConnectConfigurationService struct {
	// The list of client aliases for this Service Connect service. You use these to assign names that can be used by client applications. The maximum number of client aliases that you can have in this list is 1. See below.
	ClientAliases []ServiceServiceConnectConfigurationServiceClientAlias `pulumi:"clientAliases"`
	// The name of the new AWS Cloud Map service that Amazon ECS creates for this Amazon ECS service.
	DiscoveryName *string `pulumi:"discoveryName"`
	// The port number for the Service Connect proxy to listen on.
	IngressPortOverride *int `pulumi:"ingressPortOverride"`
	// The name of one of the `portMappings` from all the containers in the task definition of this Amazon ECS service.
	PortName string `pulumi:"portName"`
}

// ServiceServiceConnectConfigurationServiceInput is an input type that accepts ServiceServiceConnectConfigurationServiceArgs and ServiceServiceConnectConfigurationServiceOutput values.
// You can construct a concrete instance of `ServiceServiceConnectConfigurationServiceInput` via:
//
//	ServiceServiceConnectConfigurationServiceArgs{...}
type ServiceServiceConnectConfigurationServiceInput interface {
	pulumi.Input

	ToServiceServiceConnectConfigurationServiceOutput() ServiceServiceConnectConfigurationServiceOutput
	ToServiceServiceConnectConfigurationServiceOutputWithContext(context.Context) ServiceServiceConnectConfigurationServiceOutput
}

type ServiceServiceConnectConfigurationServiceArgs struct {
	// The list of client aliases for this Service Connect service. You use these to assign names that can be used by client applications. The maximum number of client aliases that you can have in this list is 1. See below.
	ClientAliases ServiceServiceConnectConfigurationServiceClientAliasArrayInput `pulumi:"clientAliases"`
	// The name of the new AWS Cloud Map service that Amazon ECS creates for this Amazon ECS service.
	DiscoveryName pulumi.StringPtrInput `pulumi:"discoveryName"`
	// The port number for the Service Connect proxy to listen on.
	IngressPortOverride pulumi.IntPtrInput `pulumi:"ingressPortOverride"`
	// The name of one of the `portMappings` from all the containers in the task definition of this Amazon ECS service.
	PortName pulumi.StringInput `pulumi:"portName"`
}

func (ServiceServiceConnectConfigurationServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceServiceConnectConfigurationService)(nil)).Elem()
}

func (i ServiceServiceConnectConfigurationServiceArgs) ToServiceServiceConnectConfigurationServiceOutput() ServiceServiceConnectConfigurationServiceOutput {
	return i.ToServiceServiceConnectConfigurationServiceOutputWithContext(context.Background())
}

func (i ServiceServiceConnectConfigurationServiceArgs) ToServiceServiceConnectConfigurationServiceOutputWithContext(ctx context.Context) ServiceServiceConnectConfigurationServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceServiceConnectConfigurationServiceOutput)
}

func (i ServiceServiceConnectConfigurationServiceArgs) ToServiceServiceConnectConfigurationServicePtrOutput() ServiceServiceConnectConfigurationServicePtrOutput {
	return i.ToServiceServiceConnectConfigurationServicePtrOutputWithContext(context.Background())
}

func (i ServiceServiceConnectConfigurationServiceArgs) ToServiceServiceConnectConfigurationServicePtrOutputWithContext(ctx context.Context) ServiceServiceConnectConfigurationServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceServiceConnectConfigurationServiceOutput).ToServiceServiceConnectConfigurationServicePtrOutputWithContext(ctx)
}

// ServiceServiceConnectConfigurationServicePtrInput is an input type that accepts ServiceServiceConnectConfigurationServiceArgs, ServiceServiceConnectConfigurationServicePtr and ServiceServiceConnectConfigurationServicePtrOutput values.
// You can construct a concrete instance of `ServiceServiceConnectConfigurationServicePtrInput` via:
//
//	        ServiceServiceConnectConfigurationServiceArgs{...}
//
//	or:
//
//	        nil
type ServiceServiceConnectConfigurationServicePtrInput interface {
	pulumi.Input

	ToServiceServiceConnectConfigurationServicePtrOutput() ServiceServiceConnectConfigurationServicePtrOutput
	ToServiceServiceConnectConfigurationServicePtrOutputWithContext(context.Context) ServiceServiceConnectConfigurationServicePtrOutput
}

type serviceServiceConnectConfigurationServicePtrType ServiceServiceConnectConfigurationServiceArgs

func ServiceServiceConnectConfigurationServicePtr(v *ServiceServiceConnectConfigurationServiceArgs) ServiceServiceConnectConfigurationServicePtrInput {
	return (*serviceServiceConnectConfigurationServicePtrType)(v)
}

func (*serviceServiceConnectConfigurationServicePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceServiceConnectConfigurationService)(nil)).Elem()
}

func (i *serviceServiceConnectConfigurationServicePtrType) ToServiceServiceConnectConfigurationServicePtrOutput() ServiceServiceConnectConfigurationServicePtrOutput {
	return i.ToServiceServiceConnectConfigurationServicePtrOutputWithContext(context.Background())
}

func (i *serviceServiceConnectConfigurationServicePtrType) ToServiceServiceConnectConfigurationServicePtrOutputWithContext(ctx context.Context) ServiceServiceConnectConfigurationServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceServiceConnectConfigurationServicePtrOutput)
}

type ServiceServiceConnectConfigurationServiceOutput struct{ *pulumi.OutputState }

func (ServiceServiceConnectConfigurationServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceServiceConnectConfigurationService)(nil)).Elem()
}

func (o ServiceServiceConnectConfigurationServiceOutput) ToServiceServiceConnectConfigurationServiceOutput() ServiceServiceConnectConfigurationServiceOutput {
	return o
}

func (o ServiceServiceConnectConfigurationServiceOutput) ToServiceServiceConnectConfigurationServiceOutputWithContext(ctx context.Context) ServiceServiceConnectConfigurationServiceOutput {
	return o
}

func (o ServiceServiceConnectConfigurationServiceOutput) ToServiceServiceConnectConfigurationServicePtrOutput() ServiceServiceConnectConfigurationServicePtrOutput {
	return o.ToServiceServiceConnectConfigurationServicePtrOutputWithContext(context.Background())
}

func (o ServiceServiceConnectConfigurationServiceOutput) ToServiceServiceConnectConfigurationServicePtrOutputWithContext(ctx context.Context) ServiceServiceConnectConfigurationServicePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceServiceConnectConfigurationService) *ServiceServiceConnectConfigurationService {
		return &v
	}).(ServiceServiceConnectConfigurationServicePtrOutput)
}

// The list of client aliases for this Service Connect service. You use these to assign names that can be used by client applications. The maximum number of client aliases that you can have in this list is 1. See below.
func (o ServiceServiceConnectConfigurationServiceOutput) ClientAliases() ServiceServiceConnectConfigurationServiceClientAliasArrayOutput {
	return o.ApplyT(func(v ServiceServiceConnectConfigurationService) []ServiceServiceConnectConfigurationServiceClientAlias {
		return v.ClientAliases
	}).(ServiceServiceConnectConfigurationServiceClientAliasArrayOutput)
}

// The name of the new AWS Cloud Map service that Amazon ECS creates for this Amazon ECS service.
func (o ServiceServiceConnectConfigurationServiceOutput) DiscoveryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceServiceConnectConfigurationService) *string { return v.DiscoveryName }).(pulumi.StringPtrOutput)
}

// The port number for the Service Connect proxy to listen on.
func (o ServiceServiceConnectConfigurationServiceOutput) IngressPortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceServiceConnectConfigurationService) *int { return v.IngressPortOverride }).(pulumi.IntPtrOutput)
}

// The name of one of the `portMappings` from all the containers in the task definition of this Amazon ECS service.
func (o ServiceServiceConnectConfigurationServiceOutput) PortName() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceServiceConnectConfigurationService) string { return v.PortName }).(pulumi.StringOutput)
}

type ServiceServiceConnectConfigurationServicePtrOutput struct{ *pulumi.OutputState }

func (ServiceServiceConnectConfigurationServicePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceServiceConnectConfigurationService)(nil)).Elem()
}

func (o ServiceServiceConnectConfigurationServicePtrOutput) ToServiceServiceConnectConfigurationServicePtrOutput() ServiceServiceConnectConfigurationServicePtrOutput {
	return o
}

func (o ServiceServiceConnectConfigurationServicePtrOutput) ToServiceServiceConnectConfigurationServicePtrOutputWithContext(ctx context.Context) ServiceServiceConnectConfigurationServicePtrOutput {
	return o
}

func (o ServiceServiceConnectConfigurationServicePtrOutput) Elem() ServiceServiceConnectConfigurationServiceOutput {
	return o.ApplyT(func(v *ServiceServiceConnectConfigurationService) ServiceServiceConnectConfigurationService {
		if v != nil {
			return *v
		}
		var ret ServiceServiceConnectConfigurationService
		return ret
	}).(ServiceServiceConnectConfigurationServiceOutput)
}

// The list of client aliases for this Service Connect service. You use these to assign names that can be used by client applications. The maximum number of client aliases that you can have in this list is 1. See below.
func (o ServiceServiceConnectConfigurationServicePtrOutput) ClientAliases() ServiceServiceConnectConfigurationServiceClientAliasArrayOutput {
	return o.ApplyT(func(v *ServiceServiceConnectConfigurationService) []ServiceServiceConnectConfigurationServiceClientAlias {
		if v == nil {
			return nil
		}
		return v.ClientAliases
	}).(ServiceServiceConnectConfigurationServiceClientAliasArrayOutput)
}

// The name of the new AWS Cloud Map service that Amazon ECS creates for this Amazon ECS service.
func (o ServiceServiceConnectConfigurationServicePtrOutput) DiscoveryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceServiceConnectConfigurationService) *string {
		if v == nil {
			return nil
		}
		return v.DiscoveryName
	}).(pulumi.StringPtrOutput)
}

// The port number for the Service Connect proxy to listen on.
func (o ServiceServiceConnectConfigurationServicePtrOutput) IngressPortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServiceServiceConnectConfigurationService) *int {
		if v == nil {
			return nil
		}
		return v.IngressPortOverride
	}).(pulumi.IntPtrOutput)
}

// The name of one of the `portMappings` from all the containers in the task definition of this Amazon ECS service.
func (o ServiceServiceConnectConfigurationServicePtrOutput) PortName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceServiceConnectConfigurationService) *string {
		if v == nil {
			return nil
		}
		return &v.PortName
	}).(pulumi.StringPtrOutput)
}

type ServiceServiceConnectConfigurationServiceClientAlias struct {
	// The name that you use in the applications of client tasks to connect to this service.
	DnsName *string `pulumi:"dnsName"`
	// The listening port number for the Service Connect proxy. This port is available inside of all of the tasks within the same namespace.
	Port int `pulumi:"port"`
}

// ServiceServiceConnectConfigurationServiceClientAliasInput is an input type that accepts ServiceServiceConnectConfigurationServiceClientAliasArgs and ServiceServiceConnectConfigurationServiceClientAliasOutput values.
// You can construct a concrete instance of `ServiceServiceConnectConfigurationServiceClientAliasInput` via:
//
//	ServiceServiceConnectConfigurationServiceClientAliasArgs{...}
type ServiceServiceConnectConfigurationServiceClientAliasInput interface {
	pulumi.Input

	ToServiceServiceConnectConfigurationServiceClientAliasOutput() ServiceServiceConnectConfigurationServiceClientAliasOutput
	ToServiceServiceConnectConfigurationServiceClientAliasOutputWithContext(context.Context) ServiceServiceConnectConfigurationServiceClientAliasOutput
}

type ServiceServiceConnectConfigurationServiceClientAliasArgs struct {
	// The name that you use in the applications of client tasks to connect to this service.
	DnsName pulumi.StringPtrInput `pulumi:"dnsName"`
	// The listening port number for the Service Connect proxy. This port is available inside of all of the tasks within the same namespace.
	Port pulumi.IntInput `pulumi:"port"`
}

func (ServiceServiceConnectConfigurationServiceClientAliasArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceServiceConnectConfigurationServiceClientAlias)(nil)).Elem()
}

func (i ServiceServiceConnectConfigurationServiceClientAliasArgs) ToServiceServiceConnectConfigurationServiceClientAliasOutput() ServiceServiceConnectConfigurationServiceClientAliasOutput {
	return i.ToServiceServiceConnectConfigurationServiceClientAliasOutputWithContext(context.Background())
}

func (i ServiceServiceConnectConfigurationServiceClientAliasArgs) ToServiceServiceConnectConfigurationServiceClientAliasOutputWithContext(ctx context.Context) ServiceServiceConnectConfigurationServiceClientAliasOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceServiceConnectConfigurationServiceClientAliasOutput)
}

// ServiceServiceConnectConfigurationServiceClientAliasArrayInput is an input type that accepts ServiceServiceConnectConfigurationServiceClientAliasArray and ServiceServiceConnectConfigurationServiceClientAliasArrayOutput values.
// You can construct a concrete instance of `ServiceServiceConnectConfigurationServiceClientAliasArrayInput` via:
//
//	ServiceServiceConnectConfigurationServiceClientAliasArray{ ServiceServiceConnectConfigurationServiceClientAliasArgs{...} }
type ServiceServiceConnectConfigurationServiceClientAliasArrayInput interface {
	pulumi.Input

	ToServiceServiceConnectConfigurationServiceClientAliasArrayOutput() ServiceServiceConnectConfigurationServiceClientAliasArrayOutput
	ToServiceServiceConnectConfigurationServiceClientAliasArrayOutputWithContext(context.Context) ServiceServiceConnectConfigurationServiceClientAliasArrayOutput
}

type ServiceServiceConnectConfigurationServiceClientAliasArray []ServiceServiceConnectConfigurationServiceClientAliasInput

func (ServiceServiceConnectConfigurationServiceClientAliasArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceServiceConnectConfigurationServiceClientAlias)(nil)).Elem()
}

func (i ServiceServiceConnectConfigurationServiceClientAliasArray) ToServiceServiceConnectConfigurationServiceClientAliasArrayOutput() ServiceServiceConnectConfigurationServiceClientAliasArrayOutput {
	return i.ToServiceServiceConnectConfigurationServiceClientAliasArrayOutputWithContext(context.Background())
}

func (i ServiceServiceConnectConfigurationServiceClientAliasArray) ToServiceServiceConnectConfigurationServiceClientAliasArrayOutputWithContext(ctx context.Context) ServiceServiceConnectConfigurationServiceClientAliasArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceServiceConnectConfigurationServiceClientAliasArrayOutput)
}

type ServiceServiceConnectConfigurationServiceClientAliasOutput struct{ *pulumi.OutputState }

func (ServiceServiceConnectConfigurationServiceClientAliasOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceServiceConnectConfigurationServiceClientAlias)(nil)).Elem()
}

func (o ServiceServiceConnectConfigurationServiceClientAliasOutput) ToServiceServiceConnectConfigurationServiceClientAliasOutput() ServiceServiceConnectConfigurationServiceClientAliasOutput {
	return o
}

func (o ServiceServiceConnectConfigurationServiceClientAliasOutput) ToServiceServiceConnectConfigurationServiceClientAliasOutputWithContext(ctx context.Context) ServiceServiceConnectConfigurationServiceClientAliasOutput {
	return o
}

// The name that you use in the applications of client tasks to connect to this service.
func (o ServiceServiceConnectConfigurationServiceClientAliasOutput) DnsName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceServiceConnectConfigurationServiceClientAlias) *string { return v.DnsName }).(pulumi.StringPtrOutput)
}

// The listening port number for the Service Connect proxy. This port is available inside of all of the tasks within the same namespace.
func (o ServiceServiceConnectConfigurationServiceClientAliasOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v ServiceServiceConnectConfigurationServiceClientAlias) int { return v.Port }).(pulumi.IntOutput)
}

type ServiceServiceConnectConfigurationServiceClientAliasArrayOutput struct{ *pulumi.OutputState }

func (ServiceServiceConnectConfigurationServiceClientAliasArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceServiceConnectConfigurationServiceClientAlias)(nil)).Elem()
}

func (o ServiceServiceConnectConfigurationServiceClientAliasArrayOutput) ToServiceServiceConnectConfigurationServiceClientAliasArrayOutput() ServiceServiceConnectConfigurationServiceClientAliasArrayOutput {
	return o
}

func (o ServiceServiceConnectConfigurationServiceClientAliasArrayOutput) ToServiceServiceConnectConfigurationServiceClientAliasArrayOutputWithContext(ctx context.Context) ServiceServiceConnectConfigurationServiceClientAliasArrayOutput {
	return o
}

func (o ServiceServiceConnectConfigurationServiceClientAliasArrayOutput) Index(i pulumi.IntInput) ServiceServiceConnectConfigurationServiceClientAliasOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceServiceConnectConfigurationServiceClientAlias {
		return vs[0].([]ServiceServiceConnectConfigurationServiceClientAlias)[vs[1].(int)]
	}).(ServiceServiceConnectConfigurationServiceClientAliasOutput)
}

type ServiceServiceRegistries struct {
	// Container name value, already specified in the task definition, to be used for your service discovery service.
	ContainerName *string `pulumi:"containerName"`
	// Port value, already specified in the task definition, to be used for your service discovery service.
	ContainerPort *int `pulumi:"containerPort"`
	// Port value used if your Service Discovery service specified an SRV record.
	Port *int `pulumi:"port"`
	// ARN of the Service Registry. The currently supported service registry is Amazon Route 53 Auto Naming Service(`servicediscovery.Service`). For more information, see [Service](https://docs.aws.amazon.com/Route53/latest/APIReference/API_autonaming_Service.html)
	RegistryArn string `pulumi:"registryArn"`
}

// ServiceServiceRegistriesInput is an input type that accepts ServiceServiceRegistriesArgs and ServiceServiceRegistriesOutput values.
// You can construct a concrete instance of `ServiceServiceRegistriesInput` via:
//
//	ServiceServiceRegistriesArgs{...}
type ServiceServiceRegistriesInput interface {
	pulumi.Input

	ToServiceServiceRegistriesOutput() ServiceServiceRegistriesOutput
	ToServiceServiceRegistriesOutputWithContext(context.Context) ServiceServiceRegistriesOutput
}

type ServiceServiceRegistriesArgs struct {
	// Container name value, already specified in the task definition, to be used for your service discovery service.
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	// Port value, already specified in the task definition, to be used for your service discovery service.
	ContainerPort pulumi.IntPtrInput `pulumi:"containerPort"`
	// Port value used if your Service Discovery service specified an SRV record.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// ARN of the Service Registry. The currently supported service registry is Amazon Route 53 Auto Naming Service(`servicediscovery.Service`). For more information, see [Service](https://docs.aws.amazon.com/Route53/latest/APIReference/API_autonaming_Service.html)
	RegistryArn pulumi.StringInput `pulumi:"registryArn"`
}

func (ServiceServiceRegistriesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceServiceRegistries)(nil)).Elem()
}

func (i ServiceServiceRegistriesArgs) ToServiceServiceRegistriesOutput() ServiceServiceRegistriesOutput {
	return i.ToServiceServiceRegistriesOutputWithContext(context.Background())
}

func (i ServiceServiceRegistriesArgs) ToServiceServiceRegistriesOutputWithContext(ctx context.Context) ServiceServiceRegistriesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceServiceRegistriesOutput)
}

func (i ServiceServiceRegistriesArgs) ToServiceServiceRegistriesPtrOutput() ServiceServiceRegistriesPtrOutput {
	return i.ToServiceServiceRegistriesPtrOutputWithContext(context.Background())
}

func (i ServiceServiceRegistriesArgs) ToServiceServiceRegistriesPtrOutputWithContext(ctx context.Context) ServiceServiceRegistriesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceServiceRegistriesOutput).ToServiceServiceRegistriesPtrOutputWithContext(ctx)
}

// ServiceServiceRegistriesPtrInput is an input type that accepts ServiceServiceRegistriesArgs, ServiceServiceRegistriesPtr and ServiceServiceRegistriesPtrOutput values.
// You can construct a concrete instance of `ServiceServiceRegistriesPtrInput` via:
//
//	        ServiceServiceRegistriesArgs{...}
//
//	or:
//
//	        nil
type ServiceServiceRegistriesPtrInput interface {
	pulumi.Input

	ToServiceServiceRegistriesPtrOutput() ServiceServiceRegistriesPtrOutput
	ToServiceServiceRegistriesPtrOutputWithContext(context.Context) ServiceServiceRegistriesPtrOutput
}

type serviceServiceRegistriesPtrType ServiceServiceRegistriesArgs

func ServiceServiceRegistriesPtr(v *ServiceServiceRegistriesArgs) ServiceServiceRegistriesPtrInput {
	return (*serviceServiceRegistriesPtrType)(v)
}

func (*serviceServiceRegistriesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceServiceRegistries)(nil)).Elem()
}

func (i *serviceServiceRegistriesPtrType) ToServiceServiceRegistriesPtrOutput() ServiceServiceRegistriesPtrOutput {
	return i.ToServiceServiceRegistriesPtrOutputWithContext(context.Background())
}

func (i *serviceServiceRegistriesPtrType) ToServiceServiceRegistriesPtrOutputWithContext(ctx context.Context) ServiceServiceRegistriesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceServiceRegistriesPtrOutput)
}

type ServiceServiceRegistriesOutput struct{ *pulumi.OutputState }

func (ServiceServiceRegistriesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceServiceRegistries)(nil)).Elem()
}

func (o ServiceServiceRegistriesOutput) ToServiceServiceRegistriesOutput() ServiceServiceRegistriesOutput {
	return o
}

func (o ServiceServiceRegistriesOutput) ToServiceServiceRegistriesOutputWithContext(ctx context.Context) ServiceServiceRegistriesOutput {
	return o
}

func (o ServiceServiceRegistriesOutput) ToServiceServiceRegistriesPtrOutput() ServiceServiceRegistriesPtrOutput {
	return o.ToServiceServiceRegistriesPtrOutputWithContext(context.Background())
}

func (o ServiceServiceRegistriesOutput) ToServiceServiceRegistriesPtrOutputWithContext(ctx context.Context) ServiceServiceRegistriesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceServiceRegistries) *ServiceServiceRegistries {
		return &v
	}).(ServiceServiceRegistriesPtrOutput)
}

// Container name value, already specified in the task definition, to be used for your service discovery service.
func (o ServiceServiceRegistriesOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceServiceRegistries) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

// Port value, already specified in the task definition, to be used for your service discovery service.
func (o ServiceServiceRegistriesOutput) ContainerPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceServiceRegistries) *int { return v.ContainerPort }).(pulumi.IntPtrOutput)
}

// Port value used if your Service Discovery service specified an SRV record.
func (o ServiceServiceRegistriesOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceServiceRegistries) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// ARN of the Service Registry. The currently supported service registry is Amazon Route 53 Auto Naming Service(`servicediscovery.Service`). For more information, see [Service](https://docs.aws.amazon.com/Route53/latest/APIReference/API_autonaming_Service.html)
func (o ServiceServiceRegistriesOutput) RegistryArn() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceServiceRegistries) string { return v.RegistryArn }).(pulumi.StringOutput)
}

type ServiceServiceRegistriesPtrOutput struct{ *pulumi.OutputState }

func (ServiceServiceRegistriesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceServiceRegistries)(nil)).Elem()
}

func (o ServiceServiceRegistriesPtrOutput) ToServiceServiceRegistriesPtrOutput() ServiceServiceRegistriesPtrOutput {
	return o
}

func (o ServiceServiceRegistriesPtrOutput) ToServiceServiceRegistriesPtrOutputWithContext(ctx context.Context) ServiceServiceRegistriesPtrOutput {
	return o
}

func (o ServiceServiceRegistriesPtrOutput) Elem() ServiceServiceRegistriesOutput {
	return o.ApplyT(func(v *ServiceServiceRegistries) ServiceServiceRegistries {
		if v != nil {
			return *v
		}
		var ret ServiceServiceRegistries
		return ret
	}).(ServiceServiceRegistriesOutput)
}

// Container name value, already specified in the task definition, to be used for your service discovery service.
func (o ServiceServiceRegistriesPtrOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceServiceRegistries) *string {
		if v == nil {
			return nil
		}
		return v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// Port value, already specified in the task definition, to be used for your service discovery service.
func (o ServiceServiceRegistriesPtrOutput) ContainerPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServiceServiceRegistries) *int {
		if v == nil {
			return nil
		}
		return v.ContainerPort
	}).(pulumi.IntPtrOutput)
}

// Port value used if your Service Discovery service specified an SRV record.
func (o ServiceServiceRegistriesPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServiceServiceRegistries) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// ARN of the Service Registry. The currently supported service registry is Amazon Route 53 Auto Naming Service(`servicediscovery.Service`). For more information, see [Service](https://docs.aws.amazon.com/Route53/latest/APIReference/API_autonaming_Service.html)
func (o ServiceServiceRegistriesPtrOutput) RegistryArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceServiceRegistries) *string {
		if v == nil {
			return nil
		}
		return &v.RegistryArn
	}).(pulumi.StringPtrOutput)
}

type TaskDefinitionEphemeralStorage struct {
	// The total amount, in GiB, of ephemeral storage to set for the task. The minimum supported value is `21` GiB and the maximum supported value is `200` GiB.
	SizeInGib int `pulumi:"sizeInGib"`
}

// TaskDefinitionEphemeralStorageInput is an input type that accepts TaskDefinitionEphemeralStorageArgs and TaskDefinitionEphemeralStorageOutput values.
// You can construct a concrete instance of `TaskDefinitionEphemeralStorageInput` via:
//
//	TaskDefinitionEphemeralStorageArgs{...}
type TaskDefinitionEphemeralStorageInput interface {
	pulumi.Input

	ToTaskDefinitionEphemeralStorageOutput() TaskDefinitionEphemeralStorageOutput
	ToTaskDefinitionEphemeralStorageOutputWithContext(context.Context) TaskDefinitionEphemeralStorageOutput
}

type TaskDefinitionEphemeralStorageArgs struct {
	// The total amount, in GiB, of ephemeral storage to set for the task. The minimum supported value is `21` GiB and the maximum supported value is `200` GiB.
	SizeInGib pulumi.IntInput `pulumi:"sizeInGib"`
}

func (TaskDefinitionEphemeralStorageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionEphemeralStorage)(nil)).Elem()
}

func (i TaskDefinitionEphemeralStorageArgs) ToTaskDefinitionEphemeralStorageOutput() TaskDefinitionEphemeralStorageOutput {
	return i.ToTaskDefinitionEphemeralStorageOutputWithContext(context.Background())
}

func (i TaskDefinitionEphemeralStorageArgs) ToTaskDefinitionEphemeralStorageOutputWithContext(ctx context.Context) TaskDefinitionEphemeralStorageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionEphemeralStorageOutput)
}

func (i TaskDefinitionEphemeralStorageArgs) ToTaskDefinitionEphemeralStoragePtrOutput() TaskDefinitionEphemeralStoragePtrOutput {
	return i.ToTaskDefinitionEphemeralStoragePtrOutputWithContext(context.Background())
}

func (i TaskDefinitionEphemeralStorageArgs) ToTaskDefinitionEphemeralStoragePtrOutputWithContext(ctx context.Context) TaskDefinitionEphemeralStoragePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionEphemeralStorageOutput).ToTaskDefinitionEphemeralStoragePtrOutputWithContext(ctx)
}

// TaskDefinitionEphemeralStoragePtrInput is an input type that accepts TaskDefinitionEphemeralStorageArgs, TaskDefinitionEphemeralStoragePtr and TaskDefinitionEphemeralStoragePtrOutput values.
// You can construct a concrete instance of `TaskDefinitionEphemeralStoragePtrInput` via:
//
//	        TaskDefinitionEphemeralStorageArgs{...}
//
//	or:
//
//	        nil
type TaskDefinitionEphemeralStoragePtrInput interface {
	pulumi.Input

	ToTaskDefinitionEphemeralStoragePtrOutput() TaskDefinitionEphemeralStoragePtrOutput
	ToTaskDefinitionEphemeralStoragePtrOutputWithContext(context.Context) TaskDefinitionEphemeralStoragePtrOutput
}

type taskDefinitionEphemeralStoragePtrType TaskDefinitionEphemeralStorageArgs

func TaskDefinitionEphemeralStoragePtr(v *TaskDefinitionEphemeralStorageArgs) TaskDefinitionEphemeralStoragePtrInput {
	return (*taskDefinitionEphemeralStoragePtrType)(v)
}

func (*taskDefinitionEphemeralStoragePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskDefinitionEphemeralStorage)(nil)).Elem()
}

func (i *taskDefinitionEphemeralStoragePtrType) ToTaskDefinitionEphemeralStoragePtrOutput() TaskDefinitionEphemeralStoragePtrOutput {
	return i.ToTaskDefinitionEphemeralStoragePtrOutputWithContext(context.Background())
}

func (i *taskDefinitionEphemeralStoragePtrType) ToTaskDefinitionEphemeralStoragePtrOutputWithContext(ctx context.Context) TaskDefinitionEphemeralStoragePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionEphemeralStoragePtrOutput)
}

type TaskDefinitionEphemeralStorageOutput struct{ *pulumi.OutputState }

func (TaskDefinitionEphemeralStorageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionEphemeralStorage)(nil)).Elem()
}

func (o TaskDefinitionEphemeralStorageOutput) ToTaskDefinitionEphemeralStorageOutput() TaskDefinitionEphemeralStorageOutput {
	return o
}

func (o TaskDefinitionEphemeralStorageOutput) ToTaskDefinitionEphemeralStorageOutputWithContext(ctx context.Context) TaskDefinitionEphemeralStorageOutput {
	return o
}

func (o TaskDefinitionEphemeralStorageOutput) ToTaskDefinitionEphemeralStoragePtrOutput() TaskDefinitionEphemeralStoragePtrOutput {
	return o.ToTaskDefinitionEphemeralStoragePtrOutputWithContext(context.Background())
}

func (o TaskDefinitionEphemeralStorageOutput) ToTaskDefinitionEphemeralStoragePtrOutputWithContext(ctx context.Context) TaskDefinitionEphemeralStoragePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TaskDefinitionEphemeralStorage) *TaskDefinitionEphemeralStorage {
		return &v
	}).(TaskDefinitionEphemeralStoragePtrOutput)
}

// The total amount, in GiB, of ephemeral storage to set for the task. The minimum supported value is `21` GiB and the maximum supported value is `200` GiB.
func (o TaskDefinitionEphemeralStorageOutput) SizeInGib() pulumi.IntOutput {
	return o.ApplyT(func(v TaskDefinitionEphemeralStorage) int { return v.SizeInGib }).(pulumi.IntOutput)
}

type TaskDefinitionEphemeralStoragePtrOutput struct{ *pulumi.OutputState }

func (TaskDefinitionEphemeralStoragePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskDefinitionEphemeralStorage)(nil)).Elem()
}

func (o TaskDefinitionEphemeralStoragePtrOutput) ToTaskDefinitionEphemeralStoragePtrOutput() TaskDefinitionEphemeralStoragePtrOutput {
	return o
}

func (o TaskDefinitionEphemeralStoragePtrOutput) ToTaskDefinitionEphemeralStoragePtrOutputWithContext(ctx context.Context) TaskDefinitionEphemeralStoragePtrOutput {
	return o
}

func (o TaskDefinitionEphemeralStoragePtrOutput) Elem() TaskDefinitionEphemeralStorageOutput {
	return o.ApplyT(func(v *TaskDefinitionEphemeralStorage) TaskDefinitionEphemeralStorage {
		if v != nil {
			return *v
		}
		var ret TaskDefinitionEphemeralStorage
		return ret
	}).(TaskDefinitionEphemeralStorageOutput)
}

// The total amount, in GiB, of ephemeral storage to set for the task. The minimum supported value is `21` GiB and the maximum supported value is `200` GiB.
func (o TaskDefinitionEphemeralStoragePtrOutput) SizeInGib() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionEphemeralStorage) *int {
		if v == nil {
			return nil
		}
		return &v.SizeInGib
	}).(pulumi.IntPtrOutput)
}

type TaskDefinitionInferenceAccelerator struct {
	// Elastic Inference accelerator device name. The deviceName must also be referenced in a container definition as a ResourceRequirement.
	DeviceName string `pulumi:"deviceName"`
	// Elastic Inference accelerator type to use.
	DeviceType string `pulumi:"deviceType"`
}

// TaskDefinitionInferenceAcceleratorInput is an input type that accepts TaskDefinitionInferenceAcceleratorArgs and TaskDefinitionInferenceAcceleratorOutput values.
// You can construct a concrete instance of `TaskDefinitionInferenceAcceleratorInput` via:
//
//	TaskDefinitionInferenceAcceleratorArgs{...}
type TaskDefinitionInferenceAcceleratorInput interface {
	pulumi.Input

	ToTaskDefinitionInferenceAcceleratorOutput() TaskDefinitionInferenceAcceleratorOutput
	ToTaskDefinitionInferenceAcceleratorOutputWithContext(context.Context) TaskDefinitionInferenceAcceleratorOutput
}

type TaskDefinitionInferenceAcceleratorArgs struct {
	// Elastic Inference accelerator device name. The deviceName must also be referenced in a container definition as a ResourceRequirement.
	DeviceName pulumi.StringInput `pulumi:"deviceName"`
	// Elastic Inference accelerator type to use.
	DeviceType pulumi.StringInput `pulumi:"deviceType"`
}

func (TaskDefinitionInferenceAcceleratorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionInferenceAccelerator)(nil)).Elem()
}

func (i TaskDefinitionInferenceAcceleratorArgs) ToTaskDefinitionInferenceAcceleratorOutput() TaskDefinitionInferenceAcceleratorOutput {
	return i.ToTaskDefinitionInferenceAcceleratorOutputWithContext(context.Background())
}

func (i TaskDefinitionInferenceAcceleratorArgs) ToTaskDefinitionInferenceAcceleratorOutputWithContext(ctx context.Context) TaskDefinitionInferenceAcceleratorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionInferenceAcceleratorOutput)
}

// TaskDefinitionInferenceAcceleratorArrayInput is an input type that accepts TaskDefinitionInferenceAcceleratorArray and TaskDefinitionInferenceAcceleratorArrayOutput values.
// You can construct a concrete instance of `TaskDefinitionInferenceAcceleratorArrayInput` via:
//
//	TaskDefinitionInferenceAcceleratorArray{ TaskDefinitionInferenceAcceleratorArgs{...} }
type TaskDefinitionInferenceAcceleratorArrayInput interface {
	pulumi.Input

	ToTaskDefinitionInferenceAcceleratorArrayOutput() TaskDefinitionInferenceAcceleratorArrayOutput
	ToTaskDefinitionInferenceAcceleratorArrayOutputWithContext(context.Context) TaskDefinitionInferenceAcceleratorArrayOutput
}

type TaskDefinitionInferenceAcceleratorArray []TaskDefinitionInferenceAcceleratorInput

func (TaskDefinitionInferenceAcceleratorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionInferenceAccelerator)(nil)).Elem()
}

func (i TaskDefinitionInferenceAcceleratorArray) ToTaskDefinitionInferenceAcceleratorArrayOutput() TaskDefinitionInferenceAcceleratorArrayOutput {
	return i.ToTaskDefinitionInferenceAcceleratorArrayOutputWithContext(context.Background())
}

func (i TaskDefinitionInferenceAcceleratorArray) ToTaskDefinitionInferenceAcceleratorArrayOutputWithContext(ctx context.Context) TaskDefinitionInferenceAcceleratorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionInferenceAcceleratorArrayOutput)
}

type TaskDefinitionInferenceAcceleratorOutput struct{ *pulumi.OutputState }

func (TaskDefinitionInferenceAcceleratorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionInferenceAccelerator)(nil)).Elem()
}

func (o TaskDefinitionInferenceAcceleratorOutput) ToTaskDefinitionInferenceAcceleratorOutput() TaskDefinitionInferenceAcceleratorOutput {
	return o
}

func (o TaskDefinitionInferenceAcceleratorOutput) ToTaskDefinitionInferenceAcceleratorOutputWithContext(ctx context.Context) TaskDefinitionInferenceAcceleratorOutput {
	return o
}

// Elastic Inference accelerator device name. The deviceName must also be referenced in a container definition as a ResourceRequirement.
func (o TaskDefinitionInferenceAcceleratorOutput) DeviceName() pulumi.StringOutput {
	return o.ApplyT(func(v TaskDefinitionInferenceAccelerator) string { return v.DeviceName }).(pulumi.StringOutput)
}

// Elastic Inference accelerator type to use.
func (o TaskDefinitionInferenceAcceleratorOutput) DeviceType() pulumi.StringOutput {
	return o.ApplyT(func(v TaskDefinitionInferenceAccelerator) string { return v.DeviceType }).(pulumi.StringOutput)
}

type TaskDefinitionInferenceAcceleratorArrayOutput struct{ *pulumi.OutputState }

func (TaskDefinitionInferenceAcceleratorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionInferenceAccelerator)(nil)).Elem()
}

func (o TaskDefinitionInferenceAcceleratorArrayOutput) ToTaskDefinitionInferenceAcceleratorArrayOutput() TaskDefinitionInferenceAcceleratorArrayOutput {
	return o
}

func (o TaskDefinitionInferenceAcceleratorArrayOutput) ToTaskDefinitionInferenceAcceleratorArrayOutputWithContext(ctx context.Context) TaskDefinitionInferenceAcceleratorArrayOutput {
	return o
}

func (o TaskDefinitionInferenceAcceleratorArrayOutput) Index(i pulumi.IntInput) TaskDefinitionInferenceAcceleratorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TaskDefinitionInferenceAccelerator {
		return vs[0].([]TaskDefinitionInferenceAccelerator)[vs[1].(int)]
	}).(TaskDefinitionInferenceAcceleratorOutput)
}

type TaskDefinitionPlacementConstraint struct {
	// Cluster Query Language expression to apply to the constraint. For more information, see [Cluster Query Language in the Amazon EC2 Container Service Developer Guide](http://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html).
	Expression *string `pulumi:"expression"`
	// Proxy type. The default value is `APPMESH`. The only supported value is `APPMESH`.
	Type string `pulumi:"type"`
}

// TaskDefinitionPlacementConstraintInput is an input type that accepts TaskDefinitionPlacementConstraintArgs and TaskDefinitionPlacementConstraintOutput values.
// You can construct a concrete instance of `TaskDefinitionPlacementConstraintInput` via:
//
//	TaskDefinitionPlacementConstraintArgs{...}
type TaskDefinitionPlacementConstraintInput interface {
	pulumi.Input

	ToTaskDefinitionPlacementConstraintOutput() TaskDefinitionPlacementConstraintOutput
	ToTaskDefinitionPlacementConstraintOutputWithContext(context.Context) TaskDefinitionPlacementConstraintOutput
}

type TaskDefinitionPlacementConstraintArgs struct {
	// Cluster Query Language expression to apply to the constraint. For more information, see [Cluster Query Language in the Amazon EC2 Container Service Developer Guide](http://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html).
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// Proxy type. The default value is `APPMESH`. The only supported value is `APPMESH`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (TaskDefinitionPlacementConstraintArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionPlacementConstraint)(nil)).Elem()
}

func (i TaskDefinitionPlacementConstraintArgs) ToTaskDefinitionPlacementConstraintOutput() TaskDefinitionPlacementConstraintOutput {
	return i.ToTaskDefinitionPlacementConstraintOutputWithContext(context.Background())
}

func (i TaskDefinitionPlacementConstraintArgs) ToTaskDefinitionPlacementConstraintOutputWithContext(ctx context.Context) TaskDefinitionPlacementConstraintOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionPlacementConstraintOutput)
}

// TaskDefinitionPlacementConstraintArrayInput is an input type that accepts TaskDefinitionPlacementConstraintArray and TaskDefinitionPlacementConstraintArrayOutput values.
// You can construct a concrete instance of `TaskDefinitionPlacementConstraintArrayInput` via:
//
//	TaskDefinitionPlacementConstraintArray{ TaskDefinitionPlacementConstraintArgs{...} }
type TaskDefinitionPlacementConstraintArrayInput interface {
	pulumi.Input

	ToTaskDefinitionPlacementConstraintArrayOutput() TaskDefinitionPlacementConstraintArrayOutput
	ToTaskDefinitionPlacementConstraintArrayOutputWithContext(context.Context) TaskDefinitionPlacementConstraintArrayOutput
}

type TaskDefinitionPlacementConstraintArray []TaskDefinitionPlacementConstraintInput

func (TaskDefinitionPlacementConstraintArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionPlacementConstraint)(nil)).Elem()
}

func (i TaskDefinitionPlacementConstraintArray) ToTaskDefinitionPlacementConstraintArrayOutput() TaskDefinitionPlacementConstraintArrayOutput {
	return i.ToTaskDefinitionPlacementConstraintArrayOutputWithContext(context.Background())
}

func (i TaskDefinitionPlacementConstraintArray) ToTaskDefinitionPlacementConstraintArrayOutputWithContext(ctx context.Context) TaskDefinitionPlacementConstraintArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionPlacementConstraintArrayOutput)
}

type TaskDefinitionPlacementConstraintOutput struct{ *pulumi.OutputState }

func (TaskDefinitionPlacementConstraintOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionPlacementConstraint)(nil)).Elem()
}

func (o TaskDefinitionPlacementConstraintOutput) ToTaskDefinitionPlacementConstraintOutput() TaskDefinitionPlacementConstraintOutput {
	return o
}

func (o TaskDefinitionPlacementConstraintOutput) ToTaskDefinitionPlacementConstraintOutputWithContext(ctx context.Context) TaskDefinitionPlacementConstraintOutput {
	return o
}

// Cluster Query Language expression to apply to the constraint. For more information, see [Cluster Query Language in the Amazon EC2 Container Service Developer Guide](http://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html).
func (o TaskDefinitionPlacementConstraintOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionPlacementConstraint) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// Proxy type. The default value is `APPMESH`. The only supported value is `APPMESH`.
func (o TaskDefinitionPlacementConstraintOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TaskDefinitionPlacementConstraint) string { return v.Type }).(pulumi.StringOutput)
}

type TaskDefinitionPlacementConstraintArrayOutput struct{ *pulumi.OutputState }

func (TaskDefinitionPlacementConstraintArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionPlacementConstraint)(nil)).Elem()
}

func (o TaskDefinitionPlacementConstraintArrayOutput) ToTaskDefinitionPlacementConstraintArrayOutput() TaskDefinitionPlacementConstraintArrayOutput {
	return o
}

func (o TaskDefinitionPlacementConstraintArrayOutput) ToTaskDefinitionPlacementConstraintArrayOutputWithContext(ctx context.Context) TaskDefinitionPlacementConstraintArrayOutput {
	return o
}

func (o TaskDefinitionPlacementConstraintArrayOutput) Index(i pulumi.IntInput) TaskDefinitionPlacementConstraintOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TaskDefinitionPlacementConstraint {
		return vs[0].([]TaskDefinitionPlacementConstraint)[vs[1].(int)]
	}).(TaskDefinitionPlacementConstraintOutput)
}

type TaskDefinitionProxyConfiguration struct {
	// Name of the container that will serve as the App Mesh proxy.
	ContainerName string `pulumi:"containerName"`
	// Set of network configuration parameters to provide the Container Network Interface (CNI) plugin, specified a key-value mapping.
	Properties map[string]string `pulumi:"properties"`
	// Proxy type. The default value is `APPMESH`. The only supported value is `APPMESH`.
	Type *string `pulumi:"type"`
}

// TaskDefinitionProxyConfigurationInput is an input type that accepts TaskDefinitionProxyConfigurationArgs and TaskDefinitionProxyConfigurationOutput values.
// You can construct a concrete instance of `TaskDefinitionProxyConfigurationInput` via:
//
//	TaskDefinitionProxyConfigurationArgs{...}
type TaskDefinitionProxyConfigurationInput interface {
	pulumi.Input

	ToTaskDefinitionProxyConfigurationOutput() TaskDefinitionProxyConfigurationOutput
	ToTaskDefinitionProxyConfigurationOutputWithContext(context.Context) TaskDefinitionProxyConfigurationOutput
}

type TaskDefinitionProxyConfigurationArgs struct {
	// Name of the container that will serve as the App Mesh proxy.
	ContainerName pulumi.StringInput `pulumi:"containerName"`
	// Set of network configuration parameters to provide the Container Network Interface (CNI) plugin, specified a key-value mapping.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Proxy type. The default value is `APPMESH`. The only supported value is `APPMESH`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (TaskDefinitionProxyConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionProxyConfiguration)(nil)).Elem()
}

func (i TaskDefinitionProxyConfigurationArgs) ToTaskDefinitionProxyConfigurationOutput() TaskDefinitionProxyConfigurationOutput {
	return i.ToTaskDefinitionProxyConfigurationOutputWithContext(context.Background())
}

func (i TaskDefinitionProxyConfigurationArgs) ToTaskDefinitionProxyConfigurationOutputWithContext(ctx context.Context) TaskDefinitionProxyConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionProxyConfigurationOutput)
}

func (i TaskDefinitionProxyConfigurationArgs) ToTaskDefinitionProxyConfigurationPtrOutput() TaskDefinitionProxyConfigurationPtrOutput {
	return i.ToTaskDefinitionProxyConfigurationPtrOutputWithContext(context.Background())
}

func (i TaskDefinitionProxyConfigurationArgs) ToTaskDefinitionProxyConfigurationPtrOutputWithContext(ctx context.Context) TaskDefinitionProxyConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionProxyConfigurationOutput).ToTaskDefinitionProxyConfigurationPtrOutputWithContext(ctx)
}

// TaskDefinitionProxyConfigurationPtrInput is an input type that accepts TaskDefinitionProxyConfigurationArgs, TaskDefinitionProxyConfigurationPtr and TaskDefinitionProxyConfigurationPtrOutput values.
// You can construct a concrete instance of `TaskDefinitionProxyConfigurationPtrInput` via:
//
//	        TaskDefinitionProxyConfigurationArgs{...}
//
//	or:
//
//	        nil
type TaskDefinitionProxyConfigurationPtrInput interface {
	pulumi.Input

	ToTaskDefinitionProxyConfigurationPtrOutput() TaskDefinitionProxyConfigurationPtrOutput
	ToTaskDefinitionProxyConfigurationPtrOutputWithContext(context.Context) TaskDefinitionProxyConfigurationPtrOutput
}

type taskDefinitionProxyConfigurationPtrType TaskDefinitionProxyConfigurationArgs

func TaskDefinitionProxyConfigurationPtr(v *TaskDefinitionProxyConfigurationArgs) TaskDefinitionProxyConfigurationPtrInput {
	return (*taskDefinitionProxyConfigurationPtrType)(v)
}

func (*taskDefinitionProxyConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskDefinitionProxyConfiguration)(nil)).Elem()
}

func (i *taskDefinitionProxyConfigurationPtrType) ToTaskDefinitionProxyConfigurationPtrOutput() TaskDefinitionProxyConfigurationPtrOutput {
	return i.ToTaskDefinitionProxyConfigurationPtrOutputWithContext(context.Background())
}

func (i *taskDefinitionProxyConfigurationPtrType) ToTaskDefinitionProxyConfigurationPtrOutputWithContext(ctx context.Context) TaskDefinitionProxyConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionProxyConfigurationPtrOutput)
}

type TaskDefinitionProxyConfigurationOutput struct{ *pulumi.OutputState }

func (TaskDefinitionProxyConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionProxyConfiguration)(nil)).Elem()
}

func (o TaskDefinitionProxyConfigurationOutput) ToTaskDefinitionProxyConfigurationOutput() TaskDefinitionProxyConfigurationOutput {
	return o
}

func (o TaskDefinitionProxyConfigurationOutput) ToTaskDefinitionProxyConfigurationOutputWithContext(ctx context.Context) TaskDefinitionProxyConfigurationOutput {
	return o
}

func (o TaskDefinitionProxyConfigurationOutput) ToTaskDefinitionProxyConfigurationPtrOutput() TaskDefinitionProxyConfigurationPtrOutput {
	return o.ToTaskDefinitionProxyConfigurationPtrOutputWithContext(context.Background())
}

func (o TaskDefinitionProxyConfigurationOutput) ToTaskDefinitionProxyConfigurationPtrOutputWithContext(ctx context.Context) TaskDefinitionProxyConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TaskDefinitionProxyConfiguration) *TaskDefinitionProxyConfiguration {
		return &v
	}).(TaskDefinitionProxyConfigurationPtrOutput)
}

// Name of the container that will serve as the App Mesh proxy.
func (o TaskDefinitionProxyConfigurationOutput) ContainerName() pulumi.StringOutput {
	return o.ApplyT(func(v TaskDefinitionProxyConfiguration) string { return v.ContainerName }).(pulumi.StringOutput)
}

// Set of network configuration parameters to provide the Container Network Interface (CNI) plugin, specified a key-value mapping.
func (o TaskDefinitionProxyConfigurationOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v TaskDefinitionProxyConfiguration) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Proxy type. The default value is `APPMESH`. The only supported value is `APPMESH`.
func (o TaskDefinitionProxyConfigurationOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionProxyConfiguration) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type TaskDefinitionProxyConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TaskDefinitionProxyConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskDefinitionProxyConfiguration)(nil)).Elem()
}

func (o TaskDefinitionProxyConfigurationPtrOutput) ToTaskDefinitionProxyConfigurationPtrOutput() TaskDefinitionProxyConfigurationPtrOutput {
	return o
}

func (o TaskDefinitionProxyConfigurationPtrOutput) ToTaskDefinitionProxyConfigurationPtrOutputWithContext(ctx context.Context) TaskDefinitionProxyConfigurationPtrOutput {
	return o
}

func (o TaskDefinitionProxyConfigurationPtrOutput) Elem() TaskDefinitionProxyConfigurationOutput {
	return o.ApplyT(func(v *TaskDefinitionProxyConfiguration) TaskDefinitionProxyConfiguration {
		if v != nil {
			return *v
		}
		var ret TaskDefinitionProxyConfiguration
		return ret
	}).(TaskDefinitionProxyConfigurationOutput)
}

// Name of the container that will serve as the App Mesh proxy.
func (o TaskDefinitionProxyConfigurationPtrOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionProxyConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// Set of network configuration parameters to provide the Container Network Interface (CNI) plugin, specified a key-value mapping.
func (o TaskDefinitionProxyConfigurationPtrOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v *TaskDefinitionProxyConfiguration) map[string]string {
		if v == nil {
			return nil
		}
		return v.Properties
	}).(pulumi.StringMapOutput)
}

// Proxy type. The default value is `APPMESH`. The only supported value is `APPMESH`.
func (o TaskDefinitionProxyConfigurationPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionProxyConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

type TaskDefinitionRuntimePlatform struct {
	// Must be set to either `X86_64` or `ARM64`; see [cpu architecture](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html#runtime-platform)
	CpuArchitecture *string `pulumi:"cpuArchitecture"`
	// If the `requiresCompatibilities` is `FARGATE` this field is required; must be set to a valid option from the [operating system family in the runtime platform](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html#runtime-platform) setting
	OperatingSystemFamily *string `pulumi:"operatingSystemFamily"`
}

// TaskDefinitionRuntimePlatformInput is an input type that accepts TaskDefinitionRuntimePlatformArgs and TaskDefinitionRuntimePlatformOutput values.
// You can construct a concrete instance of `TaskDefinitionRuntimePlatformInput` via:
//
//	TaskDefinitionRuntimePlatformArgs{...}
type TaskDefinitionRuntimePlatformInput interface {
	pulumi.Input

	ToTaskDefinitionRuntimePlatformOutput() TaskDefinitionRuntimePlatformOutput
	ToTaskDefinitionRuntimePlatformOutputWithContext(context.Context) TaskDefinitionRuntimePlatformOutput
}

type TaskDefinitionRuntimePlatformArgs struct {
	// Must be set to either `X86_64` or `ARM64`; see [cpu architecture](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html#runtime-platform)
	CpuArchitecture pulumi.StringPtrInput `pulumi:"cpuArchitecture"`
	// If the `requiresCompatibilities` is `FARGATE` this field is required; must be set to a valid option from the [operating system family in the runtime platform](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html#runtime-platform) setting
	OperatingSystemFamily pulumi.StringPtrInput `pulumi:"operatingSystemFamily"`
}

func (TaskDefinitionRuntimePlatformArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionRuntimePlatform)(nil)).Elem()
}

func (i TaskDefinitionRuntimePlatformArgs) ToTaskDefinitionRuntimePlatformOutput() TaskDefinitionRuntimePlatformOutput {
	return i.ToTaskDefinitionRuntimePlatformOutputWithContext(context.Background())
}

func (i TaskDefinitionRuntimePlatformArgs) ToTaskDefinitionRuntimePlatformOutputWithContext(ctx context.Context) TaskDefinitionRuntimePlatformOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionRuntimePlatformOutput)
}

func (i TaskDefinitionRuntimePlatformArgs) ToTaskDefinitionRuntimePlatformPtrOutput() TaskDefinitionRuntimePlatformPtrOutput {
	return i.ToTaskDefinitionRuntimePlatformPtrOutputWithContext(context.Background())
}

func (i TaskDefinitionRuntimePlatformArgs) ToTaskDefinitionRuntimePlatformPtrOutputWithContext(ctx context.Context) TaskDefinitionRuntimePlatformPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionRuntimePlatformOutput).ToTaskDefinitionRuntimePlatformPtrOutputWithContext(ctx)
}

// TaskDefinitionRuntimePlatformPtrInput is an input type that accepts TaskDefinitionRuntimePlatformArgs, TaskDefinitionRuntimePlatformPtr and TaskDefinitionRuntimePlatformPtrOutput values.
// You can construct a concrete instance of `TaskDefinitionRuntimePlatformPtrInput` via:
//
//	        TaskDefinitionRuntimePlatformArgs{...}
//
//	or:
//
//	        nil
type TaskDefinitionRuntimePlatformPtrInput interface {
	pulumi.Input

	ToTaskDefinitionRuntimePlatformPtrOutput() TaskDefinitionRuntimePlatformPtrOutput
	ToTaskDefinitionRuntimePlatformPtrOutputWithContext(context.Context) TaskDefinitionRuntimePlatformPtrOutput
}

type taskDefinitionRuntimePlatformPtrType TaskDefinitionRuntimePlatformArgs

func TaskDefinitionRuntimePlatformPtr(v *TaskDefinitionRuntimePlatformArgs) TaskDefinitionRuntimePlatformPtrInput {
	return (*taskDefinitionRuntimePlatformPtrType)(v)
}

func (*taskDefinitionRuntimePlatformPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskDefinitionRuntimePlatform)(nil)).Elem()
}

func (i *taskDefinitionRuntimePlatformPtrType) ToTaskDefinitionRuntimePlatformPtrOutput() TaskDefinitionRuntimePlatformPtrOutput {
	return i.ToTaskDefinitionRuntimePlatformPtrOutputWithContext(context.Background())
}

func (i *taskDefinitionRuntimePlatformPtrType) ToTaskDefinitionRuntimePlatformPtrOutputWithContext(ctx context.Context) TaskDefinitionRuntimePlatformPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionRuntimePlatformPtrOutput)
}

type TaskDefinitionRuntimePlatformOutput struct{ *pulumi.OutputState }

func (TaskDefinitionRuntimePlatformOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionRuntimePlatform)(nil)).Elem()
}

func (o TaskDefinitionRuntimePlatformOutput) ToTaskDefinitionRuntimePlatformOutput() TaskDefinitionRuntimePlatformOutput {
	return o
}

func (o TaskDefinitionRuntimePlatformOutput) ToTaskDefinitionRuntimePlatformOutputWithContext(ctx context.Context) TaskDefinitionRuntimePlatformOutput {
	return o
}

func (o TaskDefinitionRuntimePlatformOutput) ToTaskDefinitionRuntimePlatformPtrOutput() TaskDefinitionRuntimePlatformPtrOutput {
	return o.ToTaskDefinitionRuntimePlatformPtrOutputWithContext(context.Background())
}

func (o TaskDefinitionRuntimePlatformOutput) ToTaskDefinitionRuntimePlatformPtrOutputWithContext(ctx context.Context) TaskDefinitionRuntimePlatformPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TaskDefinitionRuntimePlatform) *TaskDefinitionRuntimePlatform {
		return &v
	}).(TaskDefinitionRuntimePlatformPtrOutput)
}

// Must be set to either `X86_64` or `ARM64`; see [cpu architecture](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html#runtime-platform)
func (o TaskDefinitionRuntimePlatformOutput) CpuArchitecture() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionRuntimePlatform) *string { return v.CpuArchitecture }).(pulumi.StringPtrOutput)
}

// If the `requiresCompatibilities` is `FARGATE` this field is required; must be set to a valid option from the [operating system family in the runtime platform](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html#runtime-platform) setting
func (o TaskDefinitionRuntimePlatformOutput) OperatingSystemFamily() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionRuntimePlatform) *string { return v.OperatingSystemFamily }).(pulumi.StringPtrOutput)
}

type TaskDefinitionRuntimePlatformPtrOutput struct{ *pulumi.OutputState }

func (TaskDefinitionRuntimePlatformPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskDefinitionRuntimePlatform)(nil)).Elem()
}

func (o TaskDefinitionRuntimePlatformPtrOutput) ToTaskDefinitionRuntimePlatformPtrOutput() TaskDefinitionRuntimePlatformPtrOutput {
	return o
}

func (o TaskDefinitionRuntimePlatformPtrOutput) ToTaskDefinitionRuntimePlatformPtrOutputWithContext(ctx context.Context) TaskDefinitionRuntimePlatformPtrOutput {
	return o
}

func (o TaskDefinitionRuntimePlatformPtrOutput) Elem() TaskDefinitionRuntimePlatformOutput {
	return o.ApplyT(func(v *TaskDefinitionRuntimePlatform) TaskDefinitionRuntimePlatform {
		if v != nil {
			return *v
		}
		var ret TaskDefinitionRuntimePlatform
		return ret
	}).(TaskDefinitionRuntimePlatformOutput)
}

// Must be set to either `X86_64` or `ARM64`; see [cpu architecture](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html#runtime-platform)
func (o TaskDefinitionRuntimePlatformPtrOutput) CpuArchitecture() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionRuntimePlatform) *string {
		if v == nil {
			return nil
		}
		return v.CpuArchitecture
	}).(pulumi.StringPtrOutput)
}

// If the `requiresCompatibilities` is `FARGATE` this field is required; must be set to a valid option from the [operating system family in the runtime platform](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html#runtime-platform) setting
func (o TaskDefinitionRuntimePlatformPtrOutput) OperatingSystemFamily() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionRuntimePlatform) *string {
		if v == nil {
			return nil
		}
		return v.OperatingSystemFamily
	}).(pulumi.StringPtrOutput)
}

type TaskDefinitionVolume struct {
	// Configuration block to configure a docker volume. Detailed below.
	DockerVolumeConfiguration *TaskDefinitionVolumeDockerVolumeConfiguration `pulumi:"dockerVolumeConfiguration"`
	// Configuration block for an EFS volume. Detailed below.
	EfsVolumeConfiguration *TaskDefinitionVolumeEfsVolumeConfiguration `pulumi:"efsVolumeConfiguration"`
	// Configuration block for an FSX Windows File Server volume. Detailed below.
	FsxWindowsFileServerVolumeConfiguration *TaskDefinitionVolumeFsxWindowsFileServerVolumeConfiguration `pulumi:"fsxWindowsFileServerVolumeConfiguration"`
	// Path on the host container instance that is presented to the container. If not set, ECS will create a nonpersistent data volume that starts empty and is deleted after the task has finished.
	HostPath *string `pulumi:"hostPath"`
	// Name of the volume. This name is referenced in the `sourceVolume`
	// parameter of container definition in the `mountPoints` section.
	Name string `pulumi:"name"`
}

// TaskDefinitionVolumeInput is an input type that accepts TaskDefinitionVolumeArgs and TaskDefinitionVolumeOutput values.
// You can construct a concrete instance of `TaskDefinitionVolumeInput` via:
//
//	TaskDefinitionVolumeArgs{...}
type TaskDefinitionVolumeInput interface {
	pulumi.Input

	ToTaskDefinitionVolumeOutput() TaskDefinitionVolumeOutput
	ToTaskDefinitionVolumeOutputWithContext(context.Context) TaskDefinitionVolumeOutput
}

type TaskDefinitionVolumeArgs struct {
	// Configuration block to configure a docker volume. Detailed below.
	DockerVolumeConfiguration TaskDefinitionVolumeDockerVolumeConfigurationPtrInput `pulumi:"dockerVolumeConfiguration"`
	// Configuration block for an EFS volume. Detailed below.
	EfsVolumeConfiguration TaskDefinitionVolumeEfsVolumeConfigurationPtrInput `pulumi:"efsVolumeConfiguration"`
	// Configuration block for an FSX Windows File Server volume. Detailed below.
	FsxWindowsFileServerVolumeConfiguration TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationPtrInput `pulumi:"fsxWindowsFileServerVolumeConfiguration"`
	// Path on the host container instance that is presented to the container. If not set, ECS will create a nonpersistent data volume that starts empty and is deleted after the task has finished.
	HostPath pulumi.StringPtrInput `pulumi:"hostPath"`
	// Name of the volume. This name is referenced in the `sourceVolume`
	// parameter of container definition in the `mountPoints` section.
	Name pulumi.StringInput `pulumi:"name"`
}

func (TaskDefinitionVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionVolume)(nil)).Elem()
}

func (i TaskDefinitionVolumeArgs) ToTaskDefinitionVolumeOutput() TaskDefinitionVolumeOutput {
	return i.ToTaskDefinitionVolumeOutputWithContext(context.Background())
}

func (i TaskDefinitionVolumeArgs) ToTaskDefinitionVolumeOutputWithContext(ctx context.Context) TaskDefinitionVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionVolumeOutput)
}

// TaskDefinitionVolumeArrayInput is an input type that accepts TaskDefinitionVolumeArray and TaskDefinitionVolumeArrayOutput values.
// You can construct a concrete instance of `TaskDefinitionVolumeArrayInput` via:
//
//	TaskDefinitionVolumeArray{ TaskDefinitionVolumeArgs{...} }
type TaskDefinitionVolumeArrayInput interface {
	pulumi.Input

	ToTaskDefinitionVolumeArrayOutput() TaskDefinitionVolumeArrayOutput
	ToTaskDefinitionVolumeArrayOutputWithContext(context.Context) TaskDefinitionVolumeArrayOutput
}

type TaskDefinitionVolumeArray []TaskDefinitionVolumeInput

func (TaskDefinitionVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionVolume)(nil)).Elem()
}

func (i TaskDefinitionVolumeArray) ToTaskDefinitionVolumeArrayOutput() TaskDefinitionVolumeArrayOutput {
	return i.ToTaskDefinitionVolumeArrayOutputWithContext(context.Background())
}

func (i TaskDefinitionVolumeArray) ToTaskDefinitionVolumeArrayOutputWithContext(ctx context.Context) TaskDefinitionVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionVolumeArrayOutput)
}

type TaskDefinitionVolumeOutput struct{ *pulumi.OutputState }

func (TaskDefinitionVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionVolume)(nil)).Elem()
}

func (o TaskDefinitionVolumeOutput) ToTaskDefinitionVolumeOutput() TaskDefinitionVolumeOutput {
	return o
}

func (o TaskDefinitionVolumeOutput) ToTaskDefinitionVolumeOutputWithContext(ctx context.Context) TaskDefinitionVolumeOutput {
	return o
}

// Configuration block to configure a docker volume. Detailed below.
func (o TaskDefinitionVolumeOutput) DockerVolumeConfiguration() TaskDefinitionVolumeDockerVolumeConfigurationPtrOutput {
	return o.ApplyT(func(v TaskDefinitionVolume) *TaskDefinitionVolumeDockerVolumeConfiguration {
		return v.DockerVolumeConfiguration
	}).(TaskDefinitionVolumeDockerVolumeConfigurationPtrOutput)
}

// Configuration block for an EFS volume. Detailed below.
func (o TaskDefinitionVolumeOutput) EfsVolumeConfiguration() TaskDefinitionVolumeEfsVolumeConfigurationPtrOutput {
	return o.ApplyT(func(v TaskDefinitionVolume) *TaskDefinitionVolumeEfsVolumeConfiguration {
		return v.EfsVolumeConfiguration
	}).(TaskDefinitionVolumeEfsVolumeConfigurationPtrOutput)
}

// Configuration block for an FSX Windows File Server volume. Detailed below.
func (o TaskDefinitionVolumeOutput) FsxWindowsFileServerVolumeConfiguration() TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationPtrOutput {
	return o.ApplyT(func(v TaskDefinitionVolume) *TaskDefinitionVolumeFsxWindowsFileServerVolumeConfiguration {
		return v.FsxWindowsFileServerVolumeConfiguration
	}).(TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationPtrOutput)
}

// Path on the host container instance that is presented to the container. If not set, ECS will create a nonpersistent data volume that starts empty and is deleted after the task has finished.
func (o TaskDefinitionVolumeOutput) HostPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionVolume) *string { return v.HostPath }).(pulumi.StringPtrOutput)
}

// Name of the volume. This name is referenced in the `sourceVolume`
// parameter of container definition in the `mountPoints` section.
func (o TaskDefinitionVolumeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TaskDefinitionVolume) string { return v.Name }).(pulumi.StringOutput)
}

type TaskDefinitionVolumeArrayOutput struct{ *pulumi.OutputState }

func (TaskDefinitionVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionVolume)(nil)).Elem()
}

func (o TaskDefinitionVolumeArrayOutput) ToTaskDefinitionVolumeArrayOutput() TaskDefinitionVolumeArrayOutput {
	return o
}

func (o TaskDefinitionVolumeArrayOutput) ToTaskDefinitionVolumeArrayOutputWithContext(ctx context.Context) TaskDefinitionVolumeArrayOutput {
	return o
}

func (o TaskDefinitionVolumeArrayOutput) Index(i pulumi.IntInput) TaskDefinitionVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TaskDefinitionVolume {
		return vs[0].([]TaskDefinitionVolume)[vs[1].(int)]
	}).(TaskDefinitionVolumeOutput)
}

type TaskDefinitionVolumeDockerVolumeConfiguration struct {
	// If this value is `true`, the Docker volume is created if it does not already exist. *Note*: This field is only used if the scope is `shared`.
	Autoprovision *bool `pulumi:"autoprovision"`
	// Docker volume driver to use. The driver value must match the driver name provided by Docker because it is used for task placement.
	Driver *string `pulumi:"driver"`
	// Map of Docker driver specific options.
	DriverOpts map[string]string `pulumi:"driverOpts"`
	// Map of custom metadata to add to your Docker volume.
	Labels map[string]string `pulumi:"labels"`
	// Scope for the Docker volume, which determines its lifecycle, either `task` or `shared`.  Docker volumes that are scoped to a `task` are automatically provisioned when the task starts and destroyed when the task stops. Docker volumes that are scoped as `shared` persist after the task stops.
	Scope *string `pulumi:"scope"`
}

// TaskDefinitionVolumeDockerVolumeConfigurationInput is an input type that accepts TaskDefinitionVolumeDockerVolumeConfigurationArgs and TaskDefinitionVolumeDockerVolumeConfigurationOutput values.
// You can construct a concrete instance of `TaskDefinitionVolumeDockerVolumeConfigurationInput` via:
//
//	TaskDefinitionVolumeDockerVolumeConfigurationArgs{...}
type TaskDefinitionVolumeDockerVolumeConfigurationInput interface {
	pulumi.Input

	ToTaskDefinitionVolumeDockerVolumeConfigurationOutput() TaskDefinitionVolumeDockerVolumeConfigurationOutput
	ToTaskDefinitionVolumeDockerVolumeConfigurationOutputWithContext(context.Context) TaskDefinitionVolumeDockerVolumeConfigurationOutput
}

type TaskDefinitionVolumeDockerVolumeConfigurationArgs struct {
	// If this value is `true`, the Docker volume is created if it does not already exist. *Note*: This field is only used if the scope is `shared`.
	Autoprovision pulumi.BoolPtrInput `pulumi:"autoprovision"`
	// Docker volume driver to use. The driver value must match the driver name provided by Docker because it is used for task placement.
	Driver pulumi.StringPtrInput `pulumi:"driver"`
	// Map of Docker driver specific options.
	DriverOpts pulumi.StringMapInput `pulumi:"driverOpts"`
	// Map of custom metadata to add to your Docker volume.
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// Scope for the Docker volume, which determines its lifecycle, either `task` or `shared`.  Docker volumes that are scoped to a `task` are automatically provisioned when the task starts and destroyed when the task stops. Docker volumes that are scoped as `shared` persist after the task stops.
	Scope pulumi.StringPtrInput `pulumi:"scope"`
}

func (TaskDefinitionVolumeDockerVolumeConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionVolumeDockerVolumeConfiguration)(nil)).Elem()
}

func (i TaskDefinitionVolumeDockerVolumeConfigurationArgs) ToTaskDefinitionVolumeDockerVolumeConfigurationOutput() TaskDefinitionVolumeDockerVolumeConfigurationOutput {
	return i.ToTaskDefinitionVolumeDockerVolumeConfigurationOutputWithContext(context.Background())
}

func (i TaskDefinitionVolumeDockerVolumeConfigurationArgs) ToTaskDefinitionVolumeDockerVolumeConfigurationOutputWithContext(ctx context.Context) TaskDefinitionVolumeDockerVolumeConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionVolumeDockerVolumeConfigurationOutput)
}

func (i TaskDefinitionVolumeDockerVolumeConfigurationArgs) ToTaskDefinitionVolumeDockerVolumeConfigurationPtrOutput() TaskDefinitionVolumeDockerVolumeConfigurationPtrOutput {
	return i.ToTaskDefinitionVolumeDockerVolumeConfigurationPtrOutputWithContext(context.Background())
}

func (i TaskDefinitionVolumeDockerVolumeConfigurationArgs) ToTaskDefinitionVolumeDockerVolumeConfigurationPtrOutputWithContext(ctx context.Context) TaskDefinitionVolumeDockerVolumeConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionVolumeDockerVolumeConfigurationOutput).ToTaskDefinitionVolumeDockerVolumeConfigurationPtrOutputWithContext(ctx)
}

// TaskDefinitionVolumeDockerVolumeConfigurationPtrInput is an input type that accepts TaskDefinitionVolumeDockerVolumeConfigurationArgs, TaskDefinitionVolumeDockerVolumeConfigurationPtr and TaskDefinitionVolumeDockerVolumeConfigurationPtrOutput values.
// You can construct a concrete instance of `TaskDefinitionVolumeDockerVolumeConfigurationPtrInput` via:
//
//	        TaskDefinitionVolumeDockerVolumeConfigurationArgs{...}
//
//	or:
//
//	        nil
type TaskDefinitionVolumeDockerVolumeConfigurationPtrInput interface {
	pulumi.Input

	ToTaskDefinitionVolumeDockerVolumeConfigurationPtrOutput() TaskDefinitionVolumeDockerVolumeConfigurationPtrOutput
	ToTaskDefinitionVolumeDockerVolumeConfigurationPtrOutputWithContext(context.Context) TaskDefinitionVolumeDockerVolumeConfigurationPtrOutput
}

type taskDefinitionVolumeDockerVolumeConfigurationPtrType TaskDefinitionVolumeDockerVolumeConfigurationArgs

func TaskDefinitionVolumeDockerVolumeConfigurationPtr(v *TaskDefinitionVolumeDockerVolumeConfigurationArgs) TaskDefinitionVolumeDockerVolumeConfigurationPtrInput {
	return (*taskDefinitionVolumeDockerVolumeConfigurationPtrType)(v)
}

func (*taskDefinitionVolumeDockerVolumeConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskDefinitionVolumeDockerVolumeConfiguration)(nil)).Elem()
}

func (i *taskDefinitionVolumeDockerVolumeConfigurationPtrType) ToTaskDefinitionVolumeDockerVolumeConfigurationPtrOutput() TaskDefinitionVolumeDockerVolumeConfigurationPtrOutput {
	return i.ToTaskDefinitionVolumeDockerVolumeConfigurationPtrOutputWithContext(context.Background())
}

func (i *taskDefinitionVolumeDockerVolumeConfigurationPtrType) ToTaskDefinitionVolumeDockerVolumeConfigurationPtrOutputWithContext(ctx context.Context) TaskDefinitionVolumeDockerVolumeConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionVolumeDockerVolumeConfigurationPtrOutput)
}

type TaskDefinitionVolumeDockerVolumeConfigurationOutput struct{ *pulumi.OutputState }

func (TaskDefinitionVolumeDockerVolumeConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionVolumeDockerVolumeConfiguration)(nil)).Elem()
}

func (o TaskDefinitionVolumeDockerVolumeConfigurationOutput) ToTaskDefinitionVolumeDockerVolumeConfigurationOutput() TaskDefinitionVolumeDockerVolumeConfigurationOutput {
	return o
}

func (o TaskDefinitionVolumeDockerVolumeConfigurationOutput) ToTaskDefinitionVolumeDockerVolumeConfigurationOutputWithContext(ctx context.Context) TaskDefinitionVolumeDockerVolumeConfigurationOutput {
	return o
}

func (o TaskDefinitionVolumeDockerVolumeConfigurationOutput) ToTaskDefinitionVolumeDockerVolumeConfigurationPtrOutput() TaskDefinitionVolumeDockerVolumeConfigurationPtrOutput {
	return o.ToTaskDefinitionVolumeDockerVolumeConfigurationPtrOutputWithContext(context.Background())
}

func (o TaskDefinitionVolumeDockerVolumeConfigurationOutput) ToTaskDefinitionVolumeDockerVolumeConfigurationPtrOutputWithContext(ctx context.Context) TaskDefinitionVolumeDockerVolumeConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TaskDefinitionVolumeDockerVolumeConfiguration) *TaskDefinitionVolumeDockerVolumeConfiguration {
		return &v
	}).(TaskDefinitionVolumeDockerVolumeConfigurationPtrOutput)
}

// If this value is `true`, the Docker volume is created if it does not already exist. *Note*: This field is only used if the scope is `shared`.
func (o TaskDefinitionVolumeDockerVolumeConfigurationOutput) Autoprovision() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TaskDefinitionVolumeDockerVolumeConfiguration) *bool { return v.Autoprovision }).(pulumi.BoolPtrOutput)
}

// Docker volume driver to use. The driver value must match the driver name provided by Docker because it is used for task placement.
func (o TaskDefinitionVolumeDockerVolumeConfigurationOutput) Driver() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionVolumeDockerVolumeConfiguration) *string { return v.Driver }).(pulumi.StringPtrOutput)
}

// Map of Docker driver specific options.
func (o TaskDefinitionVolumeDockerVolumeConfigurationOutput) DriverOpts() pulumi.StringMapOutput {
	return o.ApplyT(func(v TaskDefinitionVolumeDockerVolumeConfiguration) map[string]string { return v.DriverOpts }).(pulumi.StringMapOutput)
}

// Map of custom metadata to add to your Docker volume.
func (o TaskDefinitionVolumeDockerVolumeConfigurationOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v TaskDefinitionVolumeDockerVolumeConfiguration) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// Scope for the Docker volume, which determines its lifecycle, either `task` or `shared`.  Docker volumes that are scoped to a `task` are automatically provisioned when the task starts and destroyed when the task stops. Docker volumes that are scoped as `shared` persist after the task stops.
func (o TaskDefinitionVolumeDockerVolumeConfigurationOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionVolumeDockerVolumeConfiguration) *string { return v.Scope }).(pulumi.StringPtrOutput)
}

type TaskDefinitionVolumeDockerVolumeConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TaskDefinitionVolumeDockerVolumeConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskDefinitionVolumeDockerVolumeConfiguration)(nil)).Elem()
}

func (o TaskDefinitionVolumeDockerVolumeConfigurationPtrOutput) ToTaskDefinitionVolumeDockerVolumeConfigurationPtrOutput() TaskDefinitionVolumeDockerVolumeConfigurationPtrOutput {
	return o
}

func (o TaskDefinitionVolumeDockerVolumeConfigurationPtrOutput) ToTaskDefinitionVolumeDockerVolumeConfigurationPtrOutputWithContext(ctx context.Context) TaskDefinitionVolumeDockerVolumeConfigurationPtrOutput {
	return o
}

func (o TaskDefinitionVolumeDockerVolumeConfigurationPtrOutput) Elem() TaskDefinitionVolumeDockerVolumeConfigurationOutput {
	return o.ApplyT(func(v *TaskDefinitionVolumeDockerVolumeConfiguration) TaskDefinitionVolumeDockerVolumeConfiguration {
		if v != nil {
			return *v
		}
		var ret TaskDefinitionVolumeDockerVolumeConfiguration
		return ret
	}).(TaskDefinitionVolumeDockerVolumeConfigurationOutput)
}

// If this value is `true`, the Docker volume is created if it does not already exist. *Note*: This field is only used if the scope is `shared`.
func (o TaskDefinitionVolumeDockerVolumeConfigurationPtrOutput) Autoprovision() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionVolumeDockerVolumeConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.Autoprovision
	}).(pulumi.BoolPtrOutput)
}

// Docker volume driver to use. The driver value must match the driver name provided by Docker because it is used for task placement.
func (o TaskDefinitionVolumeDockerVolumeConfigurationPtrOutput) Driver() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionVolumeDockerVolumeConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Driver
	}).(pulumi.StringPtrOutput)
}

// Map of Docker driver specific options.
func (o TaskDefinitionVolumeDockerVolumeConfigurationPtrOutput) DriverOpts() pulumi.StringMapOutput {
	return o.ApplyT(func(v *TaskDefinitionVolumeDockerVolumeConfiguration) map[string]string {
		if v == nil {
			return nil
		}
		return v.DriverOpts
	}).(pulumi.StringMapOutput)
}

// Map of custom metadata to add to your Docker volume.
func (o TaskDefinitionVolumeDockerVolumeConfigurationPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *TaskDefinitionVolumeDockerVolumeConfiguration) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

// Scope for the Docker volume, which determines its lifecycle, either `task` or `shared`.  Docker volumes that are scoped to a `task` are automatically provisioned when the task starts and destroyed when the task stops. Docker volumes that are scoped as `shared` persist after the task stops.
func (o TaskDefinitionVolumeDockerVolumeConfigurationPtrOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionVolumeDockerVolumeConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Scope
	}).(pulumi.StringPtrOutput)
}

type TaskDefinitionVolumeEfsVolumeConfiguration struct {
	// Configuration block for authorization for the Amazon FSx for Windows File Server file system detailed below.
	AuthorizationConfig *TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfig `pulumi:"authorizationConfig"`
	// The Amazon FSx for Windows File Server file system ID to use.
	FileSystemId string `pulumi:"fileSystemId"`
	// The directory within the Amazon FSx for Windows File Server file system to mount as the root directory inside the host.
	RootDirectory *string `pulumi:"rootDirectory"`
	// Whether or not to enable encryption for Amazon EFS data in transit between the Amazon ECS host and the Amazon EFS server. Transit encryption must be enabled if Amazon EFS IAM authorization is used. Valid values: `ENABLED`, `DISABLED`. If this parameter is omitted, the default value of `DISABLED` is used.
	TransitEncryption *string `pulumi:"transitEncryption"`
	// Port to use for transit encryption. If you do not specify a transit encryption port, it will use the port selection strategy that the Amazon EFS mount helper uses.
	TransitEncryptionPort *int `pulumi:"transitEncryptionPort"`
}

// TaskDefinitionVolumeEfsVolumeConfigurationInput is an input type that accepts TaskDefinitionVolumeEfsVolumeConfigurationArgs and TaskDefinitionVolumeEfsVolumeConfigurationOutput values.
// You can construct a concrete instance of `TaskDefinitionVolumeEfsVolumeConfigurationInput` via:
//
//	TaskDefinitionVolumeEfsVolumeConfigurationArgs{...}
type TaskDefinitionVolumeEfsVolumeConfigurationInput interface {
	pulumi.Input

	ToTaskDefinitionVolumeEfsVolumeConfigurationOutput() TaskDefinitionVolumeEfsVolumeConfigurationOutput
	ToTaskDefinitionVolumeEfsVolumeConfigurationOutputWithContext(context.Context) TaskDefinitionVolumeEfsVolumeConfigurationOutput
}

type TaskDefinitionVolumeEfsVolumeConfigurationArgs struct {
	// Configuration block for authorization for the Amazon FSx for Windows File Server file system detailed below.
	AuthorizationConfig TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigPtrInput `pulumi:"authorizationConfig"`
	// The Amazon FSx for Windows File Server file system ID to use.
	FileSystemId pulumi.StringInput `pulumi:"fileSystemId"`
	// The directory within the Amazon FSx for Windows File Server file system to mount as the root directory inside the host.
	RootDirectory pulumi.StringPtrInput `pulumi:"rootDirectory"`
	// Whether or not to enable encryption for Amazon EFS data in transit between the Amazon ECS host and the Amazon EFS server. Transit encryption must be enabled if Amazon EFS IAM authorization is used. Valid values: `ENABLED`, `DISABLED`. If this parameter is omitted, the default value of `DISABLED` is used.
	TransitEncryption pulumi.StringPtrInput `pulumi:"transitEncryption"`
	// Port to use for transit encryption. If you do not specify a transit encryption port, it will use the port selection strategy that the Amazon EFS mount helper uses.
	TransitEncryptionPort pulumi.IntPtrInput `pulumi:"transitEncryptionPort"`
}

func (TaskDefinitionVolumeEfsVolumeConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionVolumeEfsVolumeConfiguration)(nil)).Elem()
}

func (i TaskDefinitionVolumeEfsVolumeConfigurationArgs) ToTaskDefinitionVolumeEfsVolumeConfigurationOutput() TaskDefinitionVolumeEfsVolumeConfigurationOutput {
	return i.ToTaskDefinitionVolumeEfsVolumeConfigurationOutputWithContext(context.Background())
}

func (i TaskDefinitionVolumeEfsVolumeConfigurationArgs) ToTaskDefinitionVolumeEfsVolumeConfigurationOutputWithContext(ctx context.Context) TaskDefinitionVolumeEfsVolumeConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionVolumeEfsVolumeConfigurationOutput)
}

func (i TaskDefinitionVolumeEfsVolumeConfigurationArgs) ToTaskDefinitionVolumeEfsVolumeConfigurationPtrOutput() TaskDefinitionVolumeEfsVolumeConfigurationPtrOutput {
	return i.ToTaskDefinitionVolumeEfsVolumeConfigurationPtrOutputWithContext(context.Background())
}

func (i TaskDefinitionVolumeEfsVolumeConfigurationArgs) ToTaskDefinitionVolumeEfsVolumeConfigurationPtrOutputWithContext(ctx context.Context) TaskDefinitionVolumeEfsVolumeConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionVolumeEfsVolumeConfigurationOutput).ToTaskDefinitionVolumeEfsVolumeConfigurationPtrOutputWithContext(ctx)
}

// TaskDefinitionVolumeEfsVolumeConfigurationPtrInput is an input type that accepts TaskDefinitionVolumeEfsVolumeConfigurationArgs, TaskDefinitionVolumeEfsVolumeConfigurationPtr and TaskDefinitionVolumeEfsVolumeConfigurationPtrOutput values.
// You can construct a concrete instance of `TaskDefinitionVolumeEfsVolumeConfigurationPtrInput` via:
//
//	        TaskDefinitionVolumeEfsVolumeConfigurationArgs{...}
//
//	or:
//
//	        nil
type TaskDefinitionVolumeEfsVolumeConfigurationPtrInput interface {
	pulumi.Input

	ToTaskDefinitionVolumeEfsVolumeConfigurationPtrOutput() TaskDefinitionVolumeEfsVolumeConfigurationPtrOutput
	ToTaskDefinitionVolumeEfsVolumeConfigurationPtrOutputWithContext(context.Context) TaskDefinitionVolumeEfsVolumeConfigurationPtrOutput
}

type taskDefinitionVolumeEfsVolumeConfigurationPtrType TaskDefinitionVolumeEfsVolumeConfigurationArgs

func TaskDefinitionVolumeEfsVolumeConfigurationPtr(v *TaskDefinitionVolumeEfsVolumeConfigurationArgs) TaskDefinitionVolumeEfsVolumeConfigurationPtrInput {
	return (*taskDefinitionVolumeEfsVolumeConfigurationPtrType)(v)
}

func (*taskDefinitionVolumeEfsVolumeConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskDefinitionVolumeEfsVolumeConfiguration)(nil)).Elem()
}

func (i *taskDefinitionVolumeEfsVolumeConfigurationPtrType) ToTaskDefinitionVolumeEfsVolumeConfigurationPtrOutput() TaskDefinitionVolumeEfsVolumeConfigurationPtrOutput {
	return i.ToTaskDefinitionVolumeEfsVolumeConfigurationPtrOutputWithContext(context.Background())
}

func (i *taskDefinitionVolumeEfsVolumeConfigurationPtrType) ToTaskDefinitionVolumeEfsVolumeConfigurationPtrOutputWithContext(ctx context.Context) TaskDefinitionVolumeEfsVolumeConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionVolumeEfsVolumeConfigurationPtrOutput)
}

type TaskDefinitionVolumeEfsVolumeConfigurationOutput struct{ *pulumi.OutputState }

func (TaskDefinitionVolumeEfsVolumeConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionVolumeEfsVolumeConfiguration)(nil)).Elem()
}

func (o TaskDefinitionVolumeEfsVolumeConfigurationOutput) ToTaskDefinitionVolumeEfsVolumeConfigurationOutput() TaskDefinitionVolumeEfsVolumeConfigurationOutput {
	return o
}

func (o TaskDefinitionVolumeEfsVolumeConfigurationOutput) ToTaskDefinitionVolumeEfsVolumeConfigurationOutputWithContext(ctx context.Context) TaskDefinitionVolumeEfsVolumeConfigurationOutput {
	return o
}

func (o TaskDefinitionVolumeEfsVolumeConfigurationOutput) ToTaskDefinitionVolumeEfsVolumeConfigurationPtrOutput() TaskDefinitionVolumeEfsVolumeConfigurationPtrOutput {
	return o.ToTaskDefinitionVolumeEfsVolumeConfigurationPtrOutputWithContext(context.Background())
}

func (o TaskDefinitionVolumeEfsVolumeConfigurationOutput) ToTaskDefinitionVolumeEfsVolumeConfigurationPtrOutputWithContext(ctx context.Context) TaskDefinitionVolumeEfsVolumeConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TaskDefinitionVolumeEfsVolumeConfiguration) *TaskDefinitionVolumeEfsVolumeConfiguration {
		return &v
	}).(TaskDefinitionVolumeEfsVolumeConfigurationPtrOutput)
}

// Configuration block for authorization for the Amazon FSx for Windows File Server file system detailed below.
func (o TaskDefinitionVolumeEfsVolumeConfigurationOutput) AuthorizationConfig() TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigPtrOutput {
	return o.ApplyT(func(v TaskDefinitionVolumeEfsVolumeConfiguration) *TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfig {
		return v.AuthorizationConfig
	}).(TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigPtrOutput)
}

// The Amazon FSx for Windows File Server file system ID to use.
func (o TaskDefinitionVolumeEfsVolumeConfigurationOutput) FileSystemId() pulumi.StringOutput {
	return o.ApplyT(func(v TaskDefinitionVolumeEfsVolumeConfiguration) string { return v.FileSystemId }).(pulumi.StringOutput)
}

// The directory within the Amazon FSx for Windows File Server file system to mount as the root directory inside the host.
func (o TaskDefinitionVolumeEfsVolumeConfigurationOutput) RootDirectory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionVolumeEfsVolumeConfiguration) *string { return v.RootDirectory }).(pulumi.StringPtrOutput)
}

// Whether or not to enable encryption for Amazon EFS data in transit between the Amazon ECS host and the Amazon EFS server. Transit encryption must be enabled if Amazon EFS IAM authorization is used. Valid values: `ENABLED`, `DISABLED`. If this parameter is omitted, the default value of `DISABLED` is used.
func (o TaskDefinitionVolumeEfsVolumeConfigurationOutput) TransitEncryption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionVolumeEfsVolumeConfiguration) *string { return v.TransitEncryption }).(pulumi.StringPtrOutput)
}

// Port to use for transit encryption. If you do not specify a transit encryption port, it will use the port selection strategy that the Amazon EFS mount helper uses.
func (o TaskDefinitionVolumeEfsVolumeConfigurationOutput) TransitEncryptionPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TaskDefinitionVolumeEfsVolumeConfiguration) *int { return v.TransitEncryptionPort }).(pulumi.IntPtrOutput)
}

type TaskDefinitionVolumeEfsVolumeConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TaskDefinitionVolumeEfsVolumeConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskDefinitionVolumeEfsVolumeConfiguration)(nil)).Elem()
}

func (o TaskDefinitionVolumeEfsVolumeConfigurationPtrOutput) ToTaskDefinitionVolumeEfsVolumeConfigurationPtrOutput() TaskDefinitionVolumeEfsVolumeConfigurationPtrOutput {
	return o
}

func (o TaskDefinitionVolumeEfsVolumeConfigurationPtrOutput) ToTaskDefinitionVolumeEfsVolumeConfigurationPtrOutputWithContext(ctx context.Context) TaskDefinitionVolumeEfsVolumeConfigurationPtrOutput {
	return o
}

func (o TaskDefinitionVolumeEfsVolumeConfigurationPtrOutput) Elem() TaskDefinitionVolumeEfsVolumeConfigurationOutput {
	return o.ApplyT(func(v *TaskDefinitionVolumeEfsVolumeConfiguration) TaskDefinitionVolumeEfsVolumeConfiguration {
		if v != nil {
			return *v
		}
		var ret TaskDefinitionVolumeEfsVolumeConfiguration
		return ret
	}).(TaskDefinitionVolumeEfsVolumeConfigurationOutput)
}

// Configuration block for authorization for the Amazon FSx for Windows File Server file system detailed below.
func (o TaskDefinitionVolumeEfsVolumeConfigurationPtrOutput) AuthorizationConfig() TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionVolumeEfsVolumeConfiguration) *TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfig {
		if v == nil {
			return nil
		}
		return v.AuthorizationConfig
	}).(TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigPtrOutput)
}

// The Amazon FSx for Windows File Server file system ID to use.
func (o TaskDefinitionVolumeEfsVolumeConfigurationPtrOutput) FileSystemId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionVolumeEfsVolumeConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.FileSystemId
	}).(pulumi.StringPtrOutput)
}

// The directory within the Amazon FSx for Windows File Server file system to mount as the root directory inside the host.
func (o TaskDefinitionVolumeEfsVolumeConfigurationPtrOutput) RootDirectory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionVolumeEfsVolumeConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.RootDirectory
	}).(pulumi.StringPtrOutput)
}

// Whether or not to enable encryption for Amazon EFS data in transit between the Amazon ECS host and the Amazon EFS server. Transit encryption must be enabled if Amazon EFS IAM authorization is used. Valid values: `ENABLED`, `DISABLED`. If this parameter is omitted, the default value of `DISABLED` is used.
func (o TaskDefinitionVolumeEfsVolumeConfigurationPtrOutput) TransitEncryption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionVolumeEfsVolumeConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.TransitEncryption
	}).(pulumi.StringPtrOutput)
}

// Port to use for transit encryption. If you do not specify a transit encryption port, it will use the port selection strategy that the Amazon EFS mount helper uses.
func (o TaskDefinitionVolumeEfsVolumeConfigurationPtrOutput) TransitEncryptionPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionVolumeEfsVolumeConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.TransitEncryptionPort
	}).(pulumi.IntPtrOutput)
}

type TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfig struct {
	// Access point ID to use. If an access point is specified, the root directory value will be relative to the directory set for the access point. If specified, transit encryption must be enabled in the EFSVolumeConfiguration.
	AccessPointId *string `pulumi:"accessPointId"`
	// Whether or not to use the Amazon ECS task IAM role defined in a task definition when mounting the Amazon EFS file system. If enabled, transit encryption must be enabled in the EFSVolumeConfiguration. Valid values: `ENABLED`, `DISABLED`. If this parameter is omitted, the default value of `DISABLED` is used.
	Iam *string `pulumi:"iam"`
}

// TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigInput is an input type that accepts TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigArgs and TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigOutput values.
// You can construct a concrete instance of `TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigInput` via:
//
//	TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigArgs{...}
type TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigInput interface {
	pulumi.Input

	ToTaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigOutput() TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigOutput
	ToTaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigOutputWithContext(context.Context) TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigOutput
}

type TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigArgs struct {
	// Access point ID to use. If an access point is specified, the root directory value will be relative to the directory set for the access point. If specified, transit encryption must be enabled in the EFSVolumeConfiguration.
	AccessPointId pulumi.StringPtrInput `pulumi:"accessPointId"`
	// Whether or not to use the Amazon ECS task IAM role defined in a task definition when mounting the Amazon EFS file system. If enabled, transit encryption must be enabled in the EFSVolumeConfiguration. Valid values: `ENABLED`, `DISABLED`. If this parameter is omitted, the default value of `DISABLED` is used.
	Iam pulumi.StringPtrInput `pulumi:"iam"`
}

func (TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfig)(nil)).Elem()
}

func (i TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigArgs) ToTaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigOutput() TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigOutput {
	return i.ToTaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigOutputWithContext(context.Background())
}

func (i TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigArgs) ToTaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigOutputWithContext(ctx context.Context) TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigOutput)
}

func (i TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigArgs) ToTaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigPtrOutput() TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigPtrOutput {
	return i.ToTaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigPtrOutputWithContext(context.Background())
}

func (i TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigArgs) ToTaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigPtrOutputWithContext(ctx context.Context) TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigOutput).ToTaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigPtrOutputWithContext(ctx)
}

// TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigPtrInput is an input type that accepts TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigArgs, TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigPtr and TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigPtrOutput values.
// You can construct a concrete instance of `TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigPtrInput` via:
//
//	        TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigArgs{...}
//
//	or:
//
//	        nil
type TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigPtrInput interface {
	pulumi.Input

	ToTaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigPtrOutput() TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigPtrOutput
	ToTaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigPtrOutputWithContext(context.Context) TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigPtrOutput
}

type taskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigPtrType TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigArgs

func TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigPtr(v *TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigArgs) TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigPtrInput {
	return (*taskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigPtrType)(v)
}

func (*taskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfig)(nil)).Elem()
}

func (i *taskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigPtrType) ToTaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigPtrOutput() TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigPtrOutput {
	return i.ToTaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigPtrOutputWithContext(context.Background())
}

func (i *taskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigPtrType) ToTaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigPtrOutputWithContext(ctx context.Context) TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigPtrOutput)
}

type TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigOutput struct{ *pulumi.OutputState }

func (TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfig)(nil)).Elem()
}

func (o TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigOutput) ToTaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigOutput() TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigOutput {
	return o
}

func (o TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigOutput) ToTaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigOutputWithContext(ctx context.Context) TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigOutput {
	return o
}

func (o TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigOutput) ToTaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigPtrOutput() TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigPtrOutput {
	return o.ToTaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigPtrOutputWithContext(context.Background())
}

func (o TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigOutput) ToTaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigPtrOutputWithContext(ctx context.Context) TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfig) *TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfig {
		return &v
	}).(TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigPtrOutput)
}

// Access point ID to use. If an access point is specified, the root directory value will be relative to the directory set for the access point. If specified, transit encryption must be enabled in the EFSVolumeConfiguration.
func (o TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigOutput) AccessPointId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfig) *string { return v.AccessPointId }).(pulumi.StringPtrOutput)
}

// Whether or not to use the Amazon ECS task IAM role defined in a task definition when mounting the Amazon EFS file system. If enabled, transit encryption must be enabled in the EFSVolumeConfiguration. Valid values: `ENABLED`, `DISABLED`. If this parameter is omitted, the default value of `DISABLED` is used.
func (o TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigOutput) Iam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfig) *string { return v.Iam }).(pulumi.StringPtrOutput)
}

type TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigPtrOutput struct{ *pulumi.OutputState }

func (TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfig)(nil)).Elem()
}

func (o TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigPtrOutput) ToTaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigPtrOutput() TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigPtrOutput {
	return o
}

func (o TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigPtrOutput) ToTaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigPtrOutputWithContext(ctx context.Context) TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigPtrOutput {
	return o
}

func (o TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigPtrOutput) Elem() TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigOutput {
	return o.ApplyT(func(v *TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfig) TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfig {
		if v != nil {
			return *v
		}
		var ret TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfig
		return ret
	}).(TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigOutput)
}

// Access point ID to use. If an access point is specified, the root directory value will be relative to the directory set for the access point. If specified, transit encryption must be enabled in the EFSVolumeConfiguration.
func (o TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigPtrOutput) AccessPointId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfig) *string {
		if v == nil {
			return nil
		}
		return v.AccessPointId
	}).(pulumi.StringPtrOutput)
}

// Whether or not to use the Amazon ECS task IAM role defined in a task definition when mounting the Amazon EFS file system. If enabled, transit encryption must be enabled in the EFSVolumeConfiguration. Valid values: `ENABLED`, `DISABLED`. If this parameter is omitted, the default value of `DISABLED` is used.
func (o TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigPtrOutput) Iam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfig) *string {
		if v == nil {
			return nil
		}
		return v.Iam
	}).(pulumi.StringPtrOutput)
}

type TaskDefinitionVolumeFsxWindowsFileServerVolumeConfiguration struct {
	// Configuration block for authorization for the Amazon FSx for Windows File Server file system detailed below.
	AuthorizationConfig TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfig `pulumi:"authorizationConfig"`
	// The Amazon FSx for Windows File Server file system ID to use.
	FileSystemId string `pulumi:"fileSystemId"`
	// The directory within the Amazon FSx for Windows File Server file system to mount as the root directory inside the host.
	RootDirectory string `pulumi:"rootDirectory"`
}

// TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationInput is an input type that accepts TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationArgs and TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationOutput values.
// You can construct a concrete instance of `TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationInput` via:
//
//	TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationArgs{...}
type TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationInput interface {
	pulumi.Input

	ToTaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationOutput() TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationOutput
	ToTaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationOutputWithContext(context.Context) TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationOutput
}

type TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationArgs struct {
	// Configuration block for authorization for the Amazon FSx for Windows File Server file system detailed below.
	AuthorizationConfig TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigInput `pulumi:"authorizationConfig"`
	// The Amazon FSx for Windows File Server file system ID to use.
	FileSystemId pulumi.StringInput `pulumi:"fileSystemId"`
	// The directory within the Amazon FSx for Windows File Server file system to mount as the root directory inside the host.
	RootDirectory pulumi.StringInput `pulumi:"rootDirectory"`
}

func (TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionVolumeFsxWindowsFileServerVolumeConfiguration)(nil)).Elem()
}

func (i TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationArgs) ToTaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationOutput() TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationOutput {
	return i.ToTaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationOutputWithContext(context.Background())
}

func (i TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationArgs) ToTaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationOutputWithContext(ctx context.Context) TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationOutput)
}

func (i TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationArgs) ToTaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationPtrOutput() TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationPtrOutput {
	return i.ToTaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationPtrOutputWithContext(context.Background())
}

func (i TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationArgs) ToTaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationPtrOutputWithContext(ctx context.Context) TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationOutput).ToTaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationPtrOutputWithContext(ctx)
}

// TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationPtrInput is an input type that accepts TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationArgs, TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationPtr and TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationPtrOutput values.
// You can construct a concrete instance of `TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationPtrInput` via:
//
//	        TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationArgs{...}
//
//	or:
//
//	        nil
type TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationPtrInput interface {
	pulumi.Input

	ToTaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationPtrOutput() TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationPtrOutput
	ToTaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationPtrOutputWithContext(context.Context) TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationPtrOutput
}

type taskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationPtrType TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationArgs

func TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationPtr(v *TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationArgs) TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationPtrInput {
	return (*taskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationPtrType)(v)
}

func (*taskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskDefinitionVolumeFsxWindowsFileServerVolumeConfiguration)(nil)).Elem()
}

func (i *taskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationPtrType) ToTaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationPtrOutput() TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationPtrOutput {
	return i.ToTaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationPtrOutputWithContext(context.Background())
}

func (i *taskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationPtrType) ToTaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationPtrOutputWithContext(ctx context.Context) TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationPtrOutput)
}

type TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationOutput struct{ *pulumi.OutputState }

func (TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionVolumeFsxWindowsFileServerVolumeConfiguration)(nil)).Elem()
}

func (o TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationOutput) ToTaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationOutput() TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationOutput {
	return o
}

func (o TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationOutput) ToTaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationOutputWithContext(ctx context.Context) TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationOutput {
	return o
}

func (o TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationOutput) ToTaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationPtrOutput() TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationPtrOutput {
	return o.ToTaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationPtrOutputWithContext(context.Background())
}

func (o TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationOutput) ToTaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationPtrOutputWithContext(ctx context.Context) TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TaskDefinitionVolumeFsxWindowsFileServerVolumeConfiguration) *TaskDefinitionVolumeFsxWindowsFileServerVolumeConfiguration {
		return &v
	}).(TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationPtrOutput)
}

// Configuration block for authorization for the Amazon FSx for Windows File Server file system detailed below.
func (o TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationOutput) AuthorizationConfig() TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigOutput {
	return o.ApplyT(func(v TaskDefinitionVolumeFsxWindowsFileServerVolumeConfiguration) TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfig {
		return v.AuthorizationConfig
	}).(TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigOutput)
}

// The Amazon FSx for Windows File Server file system ID to use.
func (o TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationOutput) FileSystemId() pulumi.StringOutput {
	return o.ApplyT(func(v TaskDefinitionVolumeFsxWindowsFileServerVolumeConfiguration) string { return v.FileSystemId }).(pulumi.StringOutput)
}

// The directory within the Amazon FSx for Windows File Server file system to mount as the root directory inside the host.
func (o TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationOutput) RootDirectory() pulumi.StringOutput {
	return o.ApplyT(func(v TaskDefinitionVolumeFsxWindowsFileServerVolumeConfiguration) string { return v.RootDirectory }).(pulumi.StringOutput)
}

type TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskDefinitionVolumeFsxWindowsFileServerVolumeConfiguration)(nil)).Elem()
}

func (o TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationPtrOutput) ToTaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationPtrOutput() TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationPtrOutput {
	return o
}

func (o TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationPtrOutput) ToTaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationPtrOutputWithContext(ctx context.Context) TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationPtrOutput {
	return o
}

func (o TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationPtrOutput) Elem() TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationOutput {
	return o.ApplyT(func(v *TaskDefinitionVolumeFsxWindowsFileServerVolumeConfiguration) TaskDefinitionVolumeFsxWindowsFileServerVolumeConfiguration {
		if v != nil {
			return *v
		}
		var ret TaskDefinitionVolumeFsxWindowsFileServerVolumeConfiguration
		return ret
	}).(TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationOutput)
}

// Configuration block for authorization for the Amazon FSx for Windows File Server file system detailed below.
func (o TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationPtrOutput) AuthorizationConfig() TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionVolumeFsxWindowsFileServerVolumeConfiguration) *TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfig {
		if v == nil {
			return nil
		}
		return &v.AuthorizationConfig
	}).(TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigPtrOutput)
}

// The Amazon FSx for Windows File Server file system ID to use.
func (o TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationPtrOutput) FileSystemId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionVolumeFsxWindowsFileServerVolumeConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.FileSystemId
	}).(pulumi.StringPtrOutput)
}

// The directory within the Amazon FSx for Windows File Server file system to mount as the root directory inside the host.
func (o TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationPtrOutput) RootDirectory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionVolumeFsxWindowsFileServerVolumeConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.RootDirectory
	}).(pulumi.StringPtrOutput)
}

type TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfig struct {
	// The authorization credential option to use. The authorization credential options can be provided using either the Amazon Resource Name (ARN) of an AWS Secrets Manager secret or AWS Systems Manager Parameter Store parameter. The ARNs refer to the stored credentials.
	CredentialsParameter string `pulumi:"credentialsParameter"`
	// A fully qualified domain name hosted by an AWS Directory Service Managed Microsoft AD (Active Directory) or self-hosted AD on Amazon EC2.
	Domain string `pulumi:"domain"`
}

// TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigInput is an input type that accepts TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigArgs and TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigOutput values.
// You can construct a concrete instance of `TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigInput` via:
//
//	TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigArgs{...}
type TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigInput interface {
	pulumi.Input

	ToTaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigOutput() TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigOutput
	ToTaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigOutputWithContext(context.Context) TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigOutput
}

type TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigArgs struct {
	// The authorization credential option to use. The authorization credential options can be provided using either the Amazon Resource Name (ARN) of an AWS Secrets Manager secret or AWS Systems Manager Parameter Store parameter. The ARNs refer to the stored credentials.
	CredentialsParameter pulumi.StringInput `pulumi:"credentialsParameter"`
	// A fully qualified domain name hosted by an AWS Directory Service Managed Microsoft AD (Active Directory) or self-hosted AD on Amazon EC2.
	Domain pulumi.StringInput `pulumi:"domain"`
}

func (TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfig)(nil)).Elem()
}

func (i TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigArgs) ToTaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigOutput() TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigOutput {
	return i.ToTaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigOutputWithContext(context.Background())
}

func (i TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigArgs) ToTaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigOutputWithContext(ctx context.Context) TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigOutput)
}

func (i TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigArgs) ToTaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigPtrOutput() TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigPtrOutput {
	return i.ToTaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigPtrOutputWithContext(context.Background())
}

func (i TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigArgs) ToTaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigPtrOutputWithContext(ctx context.Context) TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigOutput).ToTaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigPtrOutputWithContext(ctx)
}

// TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigPtrInput is an input type that accepts TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigArgs, TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigPtr and TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigPtrOutput values.
// You can construct a concrete instance of `TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigPtrInput` via:
//
//	        TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigArgs{...}
//
//	or:
//
//	        nil
type TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigPtrInput interface {
	pulumi.Input

	ToTaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigPtrOutput() TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigPtrOutput
	ToTaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigPtrOutputWithContext(context.Context) TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigPtrOutput
}

type taskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigPtrType TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigArgs

func TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigPtr(v *TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigArgs) TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigPtrInput {
	return (*taskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigPtrType)(v)
}

func (*taskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfig)(nil)).Elem()
}

func (i *taskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigPtrType) ToTaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigPtrOutput() TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigPtrOutput {
	return i.ToTaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigPtrOutputWithContext(context.Background())
}

func (i *taskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigPtrType) ToTaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigPtrOutputWithContext(ctx context.Context) TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigPtrOutput)
}

type TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigOutput struct{ *pulumi.OutputState }

func (TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfig)(nil)).Elem()
}

func (o TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigOutput) ToTaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigOutput() TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigOutput {
	return o
}

func (o TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigOutput) ToTaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigOutputWithContext(ctx context.Context) TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigOutput {
	return o
}

func (o TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigOutput) ToTaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigPtrOutput() TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigPtrOutput {
	return o.ToTaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigPtrOutputWithContext(context.Background())
}

func (o TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigOutput) ToTaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigPtrOutputWithContext(ctx context.Context) TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfig) *TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfig {
		return &v
	}).(TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigPtrOutput)
}

// The authorization credential option to use. The authorization credential options can be provided using either the Amazon Resource Name (ARN) of an AWS Secrets Manager secret or AWS Systems Manager Parameter Store parameter. The ARNs refer to the stored credentials.
func (o TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigOutput) CredentialsParameter() pulumi.StringOutput {
	return o.ApplyT(func(v TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfig) string {
		return v.CredentialsParameter
	}).(pulumi.StringOutput)
}

// A fully qualified domain name hosted by an AWS Directory Service Managed Microsoft AD (Active Directory) or self-hosted AD on Amazon EC2.
func (o TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfig) string {
		return v.Domain
	}).(pulumi.StringOutput)
}

type TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigPtrOutput struct{ *pulumi.OutputState }

func (TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfig)(nil)).Elem()
}

func (o TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigPtrOutput) ToTaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigPtrOutput() TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigPtrOutput {
	return o
}

func (o TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigPtrOutput) ToTaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigPtrOutputWithContext(ctx context.Context) TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigPtrOutput {
	return o
}

func (o TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigPtrOutput) Elem() TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigOutput {
	return o.ApplyT(func(v *TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfig) TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfig {
		if v != nil {
			return *v
		}
		var ret TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfig
		return ret
	}).(TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigOutput)
}

// The authorization credential option to use. The authorization credential options can be provided using either the Amazon Resource Name (ARN) of an AWS Secrets Manager secret or AWS Systems Manager Parameter Store parameter. The ARNs refer to the stored credentials.
func (o TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigPtrOutput) CredentialsParameter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfig) *string {
		if v == nil {
			return nil
		}
		return &v.CredentialsParameter
	}).(pulumi.StringPtrOutput)
}

// A fully qualified domain name hosted by an AWS Directory Service Managed Microsoft AD (Active Directory) or self-hosted AD on Amazon EC2.
func (o TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigPtrOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfig) *string {
		if v == nil {
			return nil
		}
		return &v.Domain
	}).(pulumi.StringPtrOutput)
}

type TaskSetCapacityProviderStrategy struct {
	// The number of tasks, at a minimum, to run on the specified capacity provider. Only one capacity provider in a capacity provider strategy can have a base defined.
	Base *int `pulumi:"base"`
	// The short name or full Amazon Resource Name (ARN) of the capacity provider.
	CapacityProvider string `pulumi:"capacityProvider"`
	// The relative percentage of the total number of launched tasks that should use the specified capacity provider.
	Weight int `pulumi:"weight"`
}

// TaskSetCapacityProviderStrategyInput is an input type that accepts TaskSetCapacityProviderStrategyArgs and TaskSetCapacityProviderStrategyOutput values.
// You can construct a concrete instance of `TaskSetCapacityProviderStrategyInput` via:
//
//	TaskSetCapacityProviderStrategyArgs{...}
type TaskSetCapacityProviderStrategyInput interface {
	pulumi.Input

	ToTaskSetCapacityProviderStrategyOutput() TaskSetCapacityProviderStrategyOutput
	ToTaskSetCapacityProviderStrategyOutputWithContext(context.Context) TaskSetCapacityProviderStrategyOutput
}

type TaskSetCapacityProviderStrategyArgs struct {
	// The number of tasks, at a minimum, to run on the specified capacity provider. Only one capacity provider in a capacity provider strategy can have a base defined.
	Base pulumi.IntPtrInput `pulumi:"base"`
	// The short name or full Amazon Resource Name (ARN) of the capacity provider.
	CapacityProvider pulumi.StringInput `pulumi:"capacityProvider"`
	// The relative percentage of the total number of launched tasks that should use the specified capacity provider.
	Weight pulumi.IntInput `pulumi:"weight"`
}

func (TaskSetCapacityProviderStrategyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskSetCapacityProviderStrategy)(nil)).Elem()
}

func (i TaskSetCapacityProviderStrategyArgs) ToTaskSetCapacityProviderStrategyOutput() TaskSetCapacityProviderStrategyOutput {
	return i.ToTaskSetCapacityProviderStrategyOutputWithContext(context.Background())
}

func (i TaskSetCapacityProviderStrategyArgs) ToTaskSetCapacityProviderStrategyOutputWithContext(ctx context.Context) TaskSetCapacityProviderStrategyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskSetCapacityProviderStrategyOutput)
}

// TaskSetCapacityProviderStrategyArrayInput is an input type that accepts TaskSetCapacityProviderStrategyArray and TaskSetCapacityProviderStrategyArrayOutput values.
// You can construct a concrete instance of `TaskSetCapacityProviderStrategyArrayInput` via:
//
//	TaskSetCapacityProviderStrategyArray{ TaskSetCapacityProviderStrategyArgs{...} }
type TaskSetCapacityProviderStrategyArrayInput interface {
	pulumi.Input

	ToTaskSetCapacityProviderStrategyArrayOutput() TaskSetCapacityProviderStrategyArrayOutput
	ToTaskSetCapacityProviderStrategyArrayOutputWithContext(context.Context) TaskSetCapacityProviderStrategyArrayOutput
}

type TaskSetCapacityProviderStrategyArray []TaskSetCapacityProviderStrategyInput

func (TaskSetCapacityProviderStrategyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskSetCapacityProviderStrategy)(nil)).Elem()
}

func (i TaskSetCapacityProviderStrategyArray) ToTaskSetCapacityProviderStrategyArrayOutput() TaskSetCapacityProviderStrategyArrayOutput {
	return i.ToTaskSetCapacityProviderStrategyArrayOutputWithContext(context.Background())
}

func (i TaskSetCapacityProviderStrategyArray) ToTaskSetCapacityProviderStrategyArrayOutputWithContext(ctx context.Context) TaskSetCapacityProviderStrategyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskSetCapacityProviderStrategyArrayOutput)
}

type TaskSetCapacityProviderStrategyOutput struct{ *pulumi.OutputState }

func (TaskSetCapacityProviderStrategyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskSetCapacityProviderStrategy)(nil)).Elem()
}

func (o TaskSetCapacityProviderStrategyOutput) ToTaskSetCapacityProviderStrategyOutput() TaskSetCapacityProviderStrategyOutput {
	return o
}

func (o TaskSetCapacityProviderStrategyOutput) ToTaskSetCapacityProviderStrategyOutputWithContext(ctx context.Context) TaskSetCapacityProviderStrategyOutput {
	return o
}

// The number of tasks, at a minimum, to run on the specified capacity provider. Only one capacity provider in a capacity provider strategy can have a base defined.
func (o TaskSetCapacityProviderStrategyOutput) Base() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TaskSetCapacityProviderStrategy) *int { return v.Base }).(pulumi.IntPtrOutput)
}

// The short name or full Amazon Resource Name (ARN) of the capacity provider.
func (o TaskSetCapacityProviderStrategyOutput) CapacityProvider() pulumi.StringOutput {
	return o.ApplyT(func(v TaskSetCapacityProviderStrategy) string { return v.CapacityProvider }).(pulumi.StringOutput)
}

// The relative percentage of the total number of launched tasks that should use the specified capacity provider.
func (o TaskSetCapacityProviderStrategyOutput) Weight() pulumi.IntOutput {
	return o.ApplyT(func(v TaskSetCapacityProviderStrategy) int { return v.Weight }).(pulumi.IntOutput)
}

type TaskSetCapacityProviderStrategyArrayOutput struct{ *pulumi.OutputState }

func (TaskSetCapacityProviderStrategyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskSetCapacityProviderStrategy)(nil)).Elem()
}

func (o TaskSetCapacityProviderStrategyArrayOutput) ToTaskSetCapacityProviderStrategyArrayOutput() TaskSetCapacityProviderStrategyArrayOutput {
	return o
}

func (o TaskSetCapacityProviderStrategyArrayOutput) ToTaskSetCapacityProviderStrategyArrayOutputWithContext(ctx context.Context) TaskSetCapacityProviderStrategyArrayOutput {
	return o
}

func (o TaskSetCapacityProviderStrategyArrayOutput) Index(i pulumi.IntInput) TaskSetCapacityProviderStrategyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TaskSetCapacityProviderStrategy {
		return vs[0].([]TaskSetCapacityProviderStrategy)[vs[1].(int)]
	}).(TaskSetCapacityProviderStrategyOutput)
}

type TaskSetLoadBalancer struct {
	// The name of the container to associate with the load balancer (as it appears in a container definition).
	ContainerName string `pulumi:"containerName"`
	// The port on the container to associate with the load balancer. Defaults to `0` if not specified.
	ContainerPort *int `pulumi:"containerPort"`
	// The name of the ELB (Classic) to associate with the service.
	LoadBalancerName *string `pulumi:"loadBalancerName"`
	// The ARN of the Load Balancer target group to associate with the service.
	TargetGroupArn *string `pulumi:"targetGroupArn"`
}

// TaskSetLoadBalancerInput is an input type that accepts TaskSetLoadBalancerArgs and TaskSetLoadBalancerOutput values.
// You can construct a concrete instance of `TaskSetLoadBalancerInput` via:
//
//	TaskSetLoadBalancerArgs{...}
type TaskSetLoadBalancerInput interface {
	pulumi.Input

	ToTaskSetLoadBalancerOutput() TaskSetLoadBalancerOutput
	ToTaskSetLoadBalancerOutputWithContext(context.Context) TaskSetLoadBalancerOutput
}

type TaskSetLoadBalancerArgs struct {
	// The name of the container to associate with the load balancer (as it appears in a container definition).
	ContainerName pulumi.StringInput `pulumi:"containerName"`
	// The port on the container to associate with the load balancer. Defaults to `0` if not specified.
	ContainerPort pulumi.IntPtrInput `pulumi:"containerPort"`
	// The name of the ELB (Classic) to associate with the service.
	LoadBalancerName pulumi.StringPtrInput `pulumi:"loadBalancerName"`
	// The ARN of the Load Balancer target group to associate with the service.
	TargetGroupArn pulumi.StringPtrInput `pulumi:"targetGroupArn"`
}

func (TaskSetLoadBalancerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskSetLoadBalancer)(nil)).Elem()
}

func (i TaskSetLoadBalancerArgs) ToTaskSetLoadBalancerOutput() TaskSetLoadBalancerOutput {
	return i.ToTaskSetLoadBalancerOutputWithContext(context.Background())
}

func (i TaskSetLoadBalancerArgs) ToTaskSetLoadBalancerOutputWithContext(ctx context.Context) TaskSetLoadBalancerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskSetLoadBalancerOutput)
}

// TaskSetLoadBalancerArrayInput is an input type that accepts TaskSetLoadBalancerArray and TaskSetLoadBalancerArrayOutput values.
// You can construct a concrete instance of `TaskSetLoadBalancerArrayInput` via:
//
//	TaskSetLoadBalancerArray{ TaskSetLoadBalancerArgs{...} }
type TaskSetLoadBalancerArrayInput interface {
	pulumi.Input

	ToTaskSetLoadBalancerArrayOutput() TaskSetLoadBalancerArrayOutput
	ToTaskSetLoadBalancerArrayOutputWithContext(context.Context) TaskSetLoadBalancerArrayOutput
}

type TaskSetLoadBalancerArray []TaskSetLoadBalancerInput

func (TaskSetLoadBalancerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskSetLoadBalancer)(nil)).Elem()
}

func (i TaskSetLoadBalancerArray) ToTaskSetLoadBalancerArrayOutput() TaskSetLoadBalancerArrayOutput {
	return i.ToTaskSetLoadBalancerArrayOutputWithContext(context.Background())
}

func (i TaskSetLoadBalancerArray) ToTaskSetLoadBalancerArrayOutputWithContext(ctx context.Context) TaskSetLoadBalancerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskSetLoadBalancerArrayOutput)
}

type TaskSetLoadBalancerOutput struct{ *pulumi.OutputState }

func (TaskSetLoadBalancerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskSetLoadBalancer)(nil)).Elem()
}

func (o TaskSetLoadBalancerOutput) ToTaskSetLoadBalancerOutput() TaskSetLoadBalancerOutput {
	return o
}

func (o TaskSetLoadBalancerOutput) ToTaskSetLoadBalancerOutputWithContext(ctx context.Context) TaskSetLoadBalancerOutput {
	return o
}

// The name of the container to associate with the load balancer (as it appears in a container definition).
func (o TaskSetLoadBalancerOutput) ContainerName() pulumi.StringOutput {
	return o.ApplyT(func(v TaskSetLoadBalancer) string { return v.ContainerName }).(pulumi.StringOutput)
}

// The port on the container to associate with the load balancer. Defaults to `0` if not specified.
func (o TaskSetLoadBalancerOutput) ContainerPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TaskSetLoadBalancer) *int { return v.ContainerPort }).(pulumi.IntPtrOutput)
}

// The name of the ELB (Classic) to associate with the service.
func (o TaskSetLoadBalancerOutput) LoadBalancerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskSetLoadBalancer) *string { return v.LoadBalancerName }).(pulumi.StringPtrOutput)
}

// The ARN of the Load Balancer target group to associate with the service.
func (o TaskSetLoadBalancerOutput) TargetGroupArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskSetLoadBalancer) *string { return v.TargetGroupArn }).(pulumi.StringPtrOutput)
}

type TaskSetLoadBalancerArrayOutput struct{ *pulumi.OutputState }

func (TaskSetLoadBalancerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskSetLoadBalancer)(nil)).Elem()
}

func (o TaskSetLoadBalancerArrayOutput) ToTaskSetLoadBalancerArrayOutput() TaskSetLoadBalancerArrayOutput {
	return o
}

func (o TaskSetLoadBalancerArrayOutput) ToTaskSetLoadBalancerArrayOutputWithContext(ctx context.Context) TaskSetLoadBalancerArrayOutput {
	return o
}

func (o TaskSetLoadBalancerArrayOutput) Index(i pulumi.IntInput) TaskSetLoadBalancerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TaskSetLoadBalancer {
		return vs[0].([]TaskSetLoadBalancer)[vs[1].(int)]
	}).(TaskSetLoadBalancerOutput)
}

type TaskSetNetworkConfiguration struct {
	// Whether to assign a public IP address to the ENI (`FARGATE` launch type only). Valid values are `true` or `false`. Default `false`.
	AssignPublicIp *bool `pulumi:"assignPublicIp"`
	// The security groups associated with the task or service. If you do not specify a security group, the default security group for the VPC is used. Maximum of 5.
	SecurityGroups []string `pulumi:"securityGroups"`
	// The subnets associated with the task or service. Maximum of 16.
	Subnets []string `pulumi:"subnets"`
}

// TaskSetNetworkConfigurationInput is an input type that accepts TaskSetNetworkConfigurationArgs and TaskSetNetworkConfigurationOutput values.
// You can construct a concrete instance of `TaskSetNetworkConfigurationInput` via:
//
//	TaskSetNetworkConfigurationArgs{...}
type TaskSetNetworkConfigurationInput interface {
	pulumi.Input

	ToTaskSetNetworkConfigurationOutput() TaskSetNetworkConfigurationOutput
	ToTaskSetNetworkConfigurationOutputWithContext(context.Context) TaskSetNetworkConfigurationOutput
}

type TaskSetNetworkConfigurationArgs struct {
	// Whether to assign a public IP address to the ENI (`FARGATE` launch type only). Valid values are `true` or `false`. Default `false`.
	AssignPublicIp pulumi.BoolPtrInput `pulumi:"assignPublicIp"`
	// The security groups associated with the task or service. If you do not specify a security group, the default security group for the VPC is used. Maximum of 5.
	SecurityGroups pulumi.StringArrayInput `pulumi:"securityGroups"`
	// The subnets associated with the task or service. Maximum of 16.
	Subnets pulumi.StringArrayInput `pulumi:"subnets"`
}

func (TaskSetNetworkConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskSetNetworkConfiguration)(nil)).Elem()
}

func (i TaskSetNetworkConfigurationArgs) ToTaskSetNetworkConfigurationOutput() TaskSetNetworkConfigurationOutput {
	return i.ToTaskSetNetworkConfigurationOutputWithContext(context.Background())
}

func (i TaskSetNetworkConfigurationArgs) ToTaskSetNetworkConfigurationOutputWithContext(ctx context.Context) TaskSetNetworkConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskSetNetworkConfigurationOutput)
}

func (i TaskSetNetworkConfigurationArgs) ToTaskSetNetworkConfigurationPtrOutput() TaskSetNetworkConfigurationPtrOutput {
	return i.ToTaskSetNetworkConfigurationPtrOutputWithContext(context.Background())
}

func (i TaskSetNetworkConfigurationArgs) ToTaskSetNetworkConfigurationPtrOutputWithContext(ctx context.Context) TaskSetNetworkConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskSetNetworkConfigurationOutput).ToTaskSetNetworkConfigurationPtrOutputWithContext(ctx)
}

// TaskSetNetworkConfigurationPtrInput is an input type that accepts TaskSetNetworkConfigurationArgs, TaskSetNetworkConfigurationPtr and TaskSetNetworkConfigurationPtrOutput values.
// You can construct a concrete instance of `TaskSetNetworkConfigurationPtrInput` via:
//
//	        TaskSetNetworkConfigurationArgs{...}
//
//	or:
//
//	        nil
type TaskSetNetworkConfigurationPtrInput interface {
	pulumi.Input

	ToTaskSetNetworkConfigurationPtrOutput() TaskSetNetworkConfigurationPtrOutput
	ToTaskSetNetworkConfigurationPtrOutputWithContext(context.Context) TaskSetNetworkConfigurationPtrOutput
}

type taskSetNetworkConfigurationPtrType TaskSetNetworkConfigurationArgs

func TaskSetNetworkConfigurationPtr(v *TaskSetNetworkConfigurationArgs) TaskSetNetworkConfigurationPtrInput {
	return (*taskSetNetworkConfigurationPtrType)(v)
}

func (*taskSetNetworkConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskSetNetworkConfiguration)(nil)).Elem()
}

func (i *taskSetNetworkConfigurationPtrType) ToTaskSetNetworkConfigurationPtrOutput() TaskSetNetworkConfigurationPtrOutput {
	return i.ToTaskSetNetworkConfigurationPtrOutputWithContext(context.Background())
}

func (i *taskSetNetworkConfigurationPtrType) ToTaskSetNetworkConfigurationPtrOutputWithContext(ctx context.Context) TaskSetNetworkConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskSetNetworkConfigurationPtrOutput)
}

type TaskSetNetworkConfigurationOutput struct{ *pulumi.OutputState }

func (TaskSetNetworkConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskSetNetworkConfiguration)(nil)).Elem()
}

func (o TaskSetNetworkConfigurationOutput) ToTaskSetNetworkConfigurationOutput() TaskSetNetworkConfigurationOutput {
	return o
}

func (o TaskSetNetworkConfigurationOutput) ToTaskSetNetworkConfigurationOutputWithContext(ctx context.Context) TaskSetNetworkConfigurationOutput {
	return o
}

func (o TaskSetNetworkConfigurationOutput) ToTaskSetNetworkConfigurationPtrOutput() TaskSetNetworkConfigurationPtrOutput {
	return o.ToTaskSetNetworkConfigurationPtrOutputWithContext(context.Background())
}

func (o TaskSetNetworkConfigurationOutput) ToTaskSetNetworkConfigurationPtrOutputWithContext(ctx context.Context) TaskSetNetworkConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TaskSetNetworkConfiguration) *TaskSetNetworkConfiguration {
		return &v
	}).(TaskSetNetworkConfigurationPtrOutput)
}

// Whether to assign a public IP address to the ENI (`FARGATE` launch type only). Valid values are `true` or `false`. Default `false`.
func (o TaskSetNetworkConfigurationOutput) AssignPublicIp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TaskSetNetworkConfiguration) *bool { return v.AssignPublicIp }).(pulumi.BoolPtrOutput)
}

// The security groups associated with the task or service. If you do not specify a security group, the default security group for the VPC is used. Maximum of 5.
func (o TaskSetNetworkConfigurationOutput) SecurityGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TaskSetNetworkConfiguration) []string { return v.SecurityGroups }).(pulumi.StringArrayOutput)
}

// The subnets associated with the task or service. Maximum of 16.
func (o TaskSetNetworkConfigurationOutput) Subnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TaskSetNetworkConfiguration) []string { return v.Subnets }).(pulumi.StringArrayOutput)
}

type TaskSetNetworkConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TaskSetNetworkConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskSetNetworkConfiguration)(nil)).Elem()
}

func (o TaskSetNetworkConfigurationPtrOutput) ToTaskSetNetworkConfigurationPtrOutput() TaskSetNetworkConfigurationPtrOutput {
	return o
}

func (o TaskSetNetworkConfigurationPtrOutput) ToTaskSetNetworkConfigurationPtrOutputWithContext(ctx context.Context) TaskSetNetworkConfigurationPtrOutput {
	return o
}

func (o TaskSetNetworkConfigurationPtrOutput) Elem() TaskSetNetworkConfigurationOutput {
	return o.ApplyT(func(v *TaskSetNetworkConfiguration) TaskSetNetworkConfiguration {
		if v != nil {
			return *v
		}
		var ret TaskSetNetworkConfiguration
		return ret
	}).(TaskSetNetworkConfigurationOutput)
}

// Whether to assign a public IP address to the ENI (`FARGATE` launch type only). Valid values are `true` or `false`. Default `false`.
func (o TaskSetNetworkConfigurationPtrOutput) AssignPublicIp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TaskSetNetworkConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.AssignPublicIp
	}).(pulumi.BoolPtrOutput)
}

// The security groups associated with the task or service. If you do not specify a security group, the default security group for the VPC is used. Maximum of 5.
func (o TaskSetNetworkConfigurationPtrOutput) SecurityGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TaskSetNetworkConfiguration) []string {
		if v == nil {
			return nil
		}
		return v.SecurityGroups
	}).(pulumi.StringArrayOutput)
}

// The subnets associated with the task or service. Maximum of 16.
func (o TaskSetNetworkConfigurationPtrOutput) Subnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TaskSetNetworkConfiguration) []string {
		if v == nil {
			return nil
		}
		return v.Subnets
	}).(pulumi.StringArrayOutput)
}

type TaskSetScale struct {
	// The unit of measure for the scale value. Default: `PERCENT`.
	Unit *string `pulumi:"unit"`
	// The value, specified as a percent total of a service's `desiredCount`, to scale the task set. Defaults to `0` if not specified. Accepted values are numbers between 0.0 and 100.0.
	Value *float64 `pulumi:"value"`
}

// TaskSetScaleInput is an input type that accepts TaskSetScaleArgs and TaskSetScaleOutput values.
// You can construct a concrete instance of `TaskSetScaleInput` via:
//
//	TaskSetScaleArgs{...}
type TaskSetScaleInput interface {
	pulumi.Input

	ToTaskSetScaleOutput() TaskSetScaleOutput
	ToTaskSetScaleOutputWithContext(context.Context) TaskSetScaleOutput
}

type TaskSetScaleArgs struct {
	// The unit of measure for the scale value. Default: `PERCENT`.
	Unit pulumi.StringPtrInput `pulumi:"unit"`
	// The value, specified as a percent total of a service's `desiredCount`, to scale the task set. Defaults to `0` if not specified. Accepted values are numbers between 0.0 and 100.0.
	Value pulumi.Float64PtrInput `pulumi:"value"`
}

func (TaskSetScaleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskSetScale)(nil)).Elem()
}

func (i TaskSetScaleArgs) ToTaskSetScaleOutput() TaskSetScaleOutput {
	return i.ToTaskSetScaleOutputWithContext(context.Background())
}

func (i TaskSetScaleArgs) ToTaskSetScaleOutputWithContext(ctx context.Context) TaskSetScaleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskSetScaleOutput)
}

func (i TaskSetScaleArgs) ToTaskSetScalePtrOutput() TaskSetScalePtrOutput {
	return i.ToTaskSetScalePtrOutputWithContext(context.Background())
}

func (i TaskSetScaleArgs) ToTaskSetScalePtrOutputWithContext(ctx context.Context) TaskSetScalePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskSetScaleOutput).ToTaskSetScalePtrOutputWithContext(ctx)
}

// TaskSetScalePtrInput is an input type that accepts TaskSetScaleArgs, TaskSetScalePtr and TaskSetScalePtrOutput values.
// You can construct a concrete instance of `TaskSetScalePtrInput` via:
//
//	        TaskSetScaleArgs{...}
//
//	or:
//
//	        nil
type TaskSetScalePtrInput interface {
	pulumi.Input

	ToTaskSetScalePtrOutput() TaskSetScalePtrOutput
	ToTaskSetScalePtrOutputWithContext(context.Context) TaskSetScalePtrOutput
}

type taskSetScalePtrType TaskSetScaleArgs

func TaskSetScalePtr(v *TaskSetScaleArgs) TaskSetScalePtrInput {
	return (*taskSetScalePtrType)(v)
}

func (*taskSetScalePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskSetScale)(nil)).Elem()
}

func (i *taskSetScalePtrType) ToTaskSetScalePtrOutput() TaskSetScalePtrOutput {
	return i.ToTaskSetScalePtrOutputWithContext(context.Background())
}

func (i *taskSetScalePtrType) ToTaskSetScalePtrOutputWithContext(ctx context.Context) TaskSetScalePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskSetScalePtrOutput)
}

type TaskSetScaleOutput struct{ *pulumi.OutputState }

func (TaskSetScaleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskSetScale)(nil)).Elem()
}

func (o TaskSetScaleOutput) ToTaskSetScaleOutput() TaskSetScaleOutput {
	return o
}

func (o TaskSetScaleOutput) ToTaskSetScaleOutputWithContext(ctx context.Context) TaskSetScaleOutput {
	return o
}

func (o TaskSetScaleOutput) ToTaskSetScalePtrOutput() TaskSetScalePtrOutput {
	return o.ToTaskSetScalePtrOutputWithContext(context.Background())
}

func (o TaskSetScaleOutput) ToTaskSetScalePtrOutputWithContext(ctx context.Context) TaskSetScalePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TaskSetScale) *TaskSetScale {
		return &v
	}).(TaskSetScalePtrOutput)
}

// The unit of measure for the scale value. Default: `PERCENT`.
func (o TaskSetScaleOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskSetScale) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

// The value, specified as a percent total of a service's `desiredCount`, to scale the task set. Defaults to `0` if not specified. Accepted values are numbers between 0.0 and 100.0.
func (o TaskSetScaleOutput) Value() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TaskSetScale) *float64 { return v.Value }).(pulumi.Float64PtrOutput)
}

type TaskSetScalePtrOutput struct{ *pulumi.OutputState }

func (TaskSetScalePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskSetScale)(nil)).Elem()
}

func (o TaskSetScalePtrOutput) ToTaskSetScalePtrOutput() TaskSetScalePtrOutput {
	return o
}

func (o TaskSetScalePtrOutput) ToTaskSetScalePtrOutputWithContext(ctx context.Context) TaskSetScalePtrOutput {
	return o
}

func (o TaskSetScalePtrOutput) Elem() TaskSetScaleOutput {
	return o.ApplyT(func(v *TaskSetScale) TaskSetScale {
		if v != nil {
			return *v
		}
		var ret TaskSetScale
		return ret
	}).(TaskSetScaleOutput)
}

// The unit of measure for the scale value. Default: `PERCENT`.
func (o TaskSetScalePtrOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskSetScale) *string {
		if v == nil {
			return nil
		}
		return v.Unit
	}).(pulumi.StringPtrOutput)
}

// The value, specified as a percent total of a service's `desiredCount`, to scale the task set. Defaults to `0` if not specified. Accepted values are numbers between 0.0 and 100.0.
func (o TaskSetScalePtrOutput) Value() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TaskSetScale) *float64 {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.Float64PtrOutput)
}

type TaskSetServiceRegistries struct {
	// The container name value, already specified in the task definition, to be used for your service discovery service.
	ContainerName *string `pulumi:"containerName"`
	// The port value, already specified in the task definition, to be used for your service discovery service.
	ContainerPort *int `pulumi:"containerPort"`
	// The port value used if your Service Discovery service specified an SRV record.
	Port *int `pulumi:"port"`
	// The ARN of the Service Registry. The currently supported service registry is Amazon Route 53 Auto Naming Service(`servicediscovery.Service` resource). For more information, see [Service](https://docs.aws.amazon.com/Route53/latest/APIReference/API_autonaming_Service.html).
	RegistryArn string `pulumi:"registryArn"`
}

// TaskSetServiceRegistriesInput is an input type that accepts TaskSetServiceRegistriesArgs and TaskSetServiceRegistriesOutput values.
// You can construct a concrete instance of `TaskSetServiceRegistriesInput` via:
//
//	TaskSetServiceRegistriesArgs{...}
type TaskSetServiceRegistriesInput interface {
	pulumi.Input

	ToTaskSetServiceRegistriesOutput() TaskSetServiceRegistriesOutput
	ToTaskSetServiceRegistriesOutputWithContext(context.Context) TaskSetServiceRegistriesOutput
}

type TaskSetServiceRegistriesArgs struct {
	// The container name value, already specified in the task definition, to be used for your service discovery service.
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	// The port value, already specified in the task definition, to be used for your service discovery service.
	ContainerPort pulumi.IntPtrInput `pulumi:"containerPort"`
	// The port value used if your Service Discovery service specified an SRV record.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The ARN of the Service Registry. The currently supported service registry is Amazon Route 53 Auto Naming Service(`servicediscovery.Service` resource). For more information, see [Service](https://docs.aws.amazon.com/Route53/latest/APIReference/API_autonaming_Service.html).
	RegistryArn pulumi.StringInput `pulumi:"registryArn"`
}

func (TaskSetServiceRegistriesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskSetServiceRegistries)(nil)).Elem()
}

func (i TaskSetServiceRegistriesArgs) ToTaskSetServiceRegistriesOutput() TaskSetServiceRegistriesOutput {
	return i.ToTaskSetServiceRegistriesOutputWithContext(context.Background())
}

func (i TaskSetServiceRegistriesArgs) ToTaskSetServiceRegistriesOutputWithContext(ctx context.Context) TaskSetServiceRegistriesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskSetServiceRegistriesOutput)
}

func (i TaskSetServiceRegistriesArgs) ToTaskSetServiceRegistriesPtrOutput() TaskSetServiceRegistriesPtrOutput {
	return i.ToTaskSetServiceRegistriesPtrOutputWithContext(context.Background())
}

func (i TaskSetServiceRegistriesArgs) ToTaskSetServiceRegistriesPtrOutputWithContext(ctx context.Context) TaskSetServiceRegistriesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskSetServiceRegistriesOutput).ToTaskSetServiceRegistriesPtrOutputWithContext(ctx)
}

// TaskSetServiceRegistriesPtrInput is an input type that accepts TaskSetServiceRegistriesArgs, TaskSetServiceRegistriesPtr and TaskSetServiceRegistriesPtrOutput values.
// You can construct a concrete instance of `TaskSetServiceRegistriesPtrInput` via:
//
//	        TaskSetServiceRegistriesArgs{...}
//
//	or:
//
//	        nil
type TaskSetServiceRegistriesPtrInput interface {
	pulumi.Input

	ToTaskSetServiceRegistriesPtrOutput() TaskSetServiceRegistriesPtrOutput
	ToTaskSetServiceRegistriesPtrOutputWithContext(context.Context) TaskSetServiceRegistriesPtrOutput
}

type taskSetServiceRegistriesPtrType TaskSetServiceRegistriesArgs

func TaskSetServiceRegistriesPtr(v *TaskSetServiceRegistriesArgs) TaskSetServiceRegistriesPtrInput {
	return (*taskSetServiceRegistriesPtrType)(v)
}

func (*taskSetServiceRegistriesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskSetServiceRegistries)(nil)).Elem()
}

func (i *taskSetServiceRegistriesPtrType) ToTaskSetServiceRegistriesPtrOutput() TaskSetServiceRegistriesPtrOutput {
	return i.ToTaskSetServiceRegistriesPtrOutputWithContext(context.Background())
}

func (i *taskSetServiceRegistriesPtrType) ToTaskSetServiceRegistriesPtrOutputWithContext(ctx context.Context) TaskSetServiceRegistriesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskSetServiceRegistriesPtrOutput)
}

type TaskSetServiceRegistriesOutput struct{ *pulumi.OutputState }

func (TaskSetServiceRegistriesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskSetServiceRegistries)(nil)).Elem()
}

func (o TaskSetServiceRegistriesOutput) ToTaskSetServiceRegistriesOutput() TaskSetServiceRegistriesOutput {
	return o
}

func (o TaskSetServiceRegistriesOutput) ToTaskSetServiceRegistriesOutputWithContext(ctx context.Context) TaskSetServiceRegistriesOutput {
	return o
}

func (o TaskSetServiceRegistriesOutput) ToTaskSetServiceRegistriesPtrOutput() TaskSetServiceRegistriesPtrOutput {
	return o.ToTaskSetServiceRegistriesPtrOutputWithContext(context.Background())
}

func (o TaskSetServiceRegistriesOutput) ToTaskSetServiceRegistriesPtrOutputWithContext(ctx context.Context) TaskSetServiceRegistriesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TaskSetServiceRegistries) *TaskSetServiceRegistries {
		return &v
	}).(TaskSetServiceRegistriesPtrOutput)
}

// The container name value, already specified in the task definition, to be used for your service discovery service.
func (o TaskSetServiceRegistriesOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskSetServiceRegistries) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

// The port value, already specified in the task definition, to be used for your service discovery service.
func (o TaskSetServiceRegistriesOutput) ContainerPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TaskSetServiceRegistries) *int { return v.ContainerPort }).(pulumi.IntPtrOutput)
}

// The port value used if your Service Discovery service specified an SRV record.
func (o TaskSetServiceRegistriesOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TaskSetServiceRegistries) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The ARN of the Service Registry. The currently supported service registry is Amazon Route 53 Auto Naming Service(`servicediscovery.Service` resource). For more information, see [Service](https://docs.aws.amazon.com/Route53/latest/APIReference/API_autonaming_Service.html).
func (o TaskSetServiceRegistriesOutput) RegistryArn() pulumi.StringOutput {
	return o.ApplyT(func(v TaskSetServiceRegistries) string { return v.RegistryArn }).(pulumi.StringOutput)
}

type TaskSetServiceRegistriesPtrOutput struct{ *pulumi.OutputState }

func (TaskSetServiceRegistriesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskSetServiceRegistries)(nil)).Elem()
}

func (o TaskSetServiceRegistriesPtrOutput) ToTaskSetServiceRegistriesPtrOutput() TaskSetServiceRegistriesPtrOutput {
	return o
}

func (o TaskSetServiceRegistriesPtrOutput) ToTaskSetServiceRegistriesPtrOutputWithContext(ctx context.Context) TaskSetServiceRegistriesPtrOutput {
	return o
}

func (o TaskSetServiceRegistriesPtrOutput) Elem() TaskSetServiceRegistriesOutput {
	return o.ApplyT(func(v *TaskSetServiceRegistries) TaskSetServiceRegistries {
		if v != nil {
			return *v
		}
		var ret TaskSetServiceRegistries
		return ret
	}).(TaskSetServiceRegistriesOutput)
}

// The container name value, already specified in the task definition, to be used for your service discovery service.
func (o TaskSetServiceRegistriesPtrOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskSetServiceRegistries) *string {
		if v == nil {
			return nil
		}
		return v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// The port value, already specified in the task definition, to be used for your service discovery service.
func (o TaskSetServiceRegistriesPtrOutput) ContainerPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TaskSetServiceRegistries) *int {
		if v == nil {
			return nil
		}
		return v.ContainerPort
	}).(pulumi.IntPtrOutput)
}

// The port value used if your Service Discovery service specified an SRV record.
func (o TaskSetServiceRegistriesPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TaskSetServiceRegistries) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// The ARN of the Service Registry. The currently supported service registry is Amazon Route 53 Auto Naming Service(`servicediscovery.Service` resource). For more information, see [Service](https://docs.aws.amazon.com/Route53/latest/APIReference/API_autonaming_Service.html).
func (o TaskSetServiceRegistriesPtrOutput) RegistryArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskSetServiceRegistries) *string {
		if v == nil {
			return nil
		}
		return &v.RegistryArn
	}).(pulumi.StringPtrOutput)
}

type GetClusterServiceConnectDefault struct {
	Namespace string `pulumi:"namespace"`
}

// GetClusterServiceConnectDefaultInput is an input type that accepts GetClusterServiceConnectDefaultArgs and GetClusterServiceConnectDefaultOutput values.
// You can construct a concrete instance of `GetClusterServiceConnectDefaultInput` via:
//
//	GetClusterServiceConnectDefaultArgs{...}
type GetClusterServiceConnectDefaultInput interface {
	pulumi.Input

	ToGetClusterServiceConnectDefaultOutput() GetClusterServiceConnectDefaultOutput
	ToGetClusterServiceConnectDefaultOutputWithContext(context.Context) GetClusterServiceConnectDefaultOutput
}

type GetClusterServiceConnectDefaultArgs struct {
	Namespace pulumi.StringInput `pulumi:"namespace"`
}

func (GetClusterServiceConnectDefaultArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterServiceConnectDefault)(nil)).Elem()
}

func (i GetClusterServiceConnectDefaultArgs) ToGetClusterServiceConnectDefaultOutput() GetClusterServiceConnectDefaultOutput {
	return i.ToGetClusterServiceConnectDefaultOutputWithContext(context.Background())
}

func (i GetClusterServiceConnectDefaultArgs) ToGetClusterServiceConnectDefaultOutputWithContext(ctx context.Context) GetClusterServiceConnectDefaultOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterServiceConnectDefaultOutput)
}

// GetClusterServiceConnectDefaultArrayInput is an input type that accepts GetClusterServiceConnectDefaultArray and GetClusterServiceConnectDefaultArrayOutput values.
// You can construct a concrete instance of `GetClusterServiceConnectDefaultArrayInput` via:
//
//	GetClusterServiceConnectDefaultArray{ GetClusterServiceConnectDefaultArgs{...} }
type GetClusterServiceConnectDefaultArrayInput interface {
	pulumi.Input

	ToGetClusterServiceConnectDefaultArrayOutput() GetClusterServiceConnectDefaultArrayOutput
	ToGetClusterServiceConnectDefaultArrayOutputWithContext(context.Context) GetClusterServiceConnectDefaultArrayOutput
}

type GetClusterServiceConnectDefaultArray []GetClusterServiceConnectDefaultInput

func (GetClusterServiceConnectDefaultArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClusterServiceConnectDefault)(nil)).Elem()
}

func (i GetClusterServiceConnectDefaultArray) ToGetClusterServiceConnectDefaultArrayOutput() GetClusterServiceConnectDefaultArrayOutput {
	return i.ToGetClusterServiceConnectDefaultArrayOutputWithContext(context.Background())
}

func (i GetClusterServiceConnectDefaultArray) ToGetClusterServiceConnectDefaultArrayOutputWithContext(ctx context.Context) GetClusterServiceConnectDefaultArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterServiceConnectDefaultArrayOutput)
}

type GetClusterServiceConnectDefaultOutput struct{ *pulumi.OutputState }

func (GetClusterServiceConnectDefaultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterServiceConnectDefault)(nil)).Elem()
}

func (o GetClusterServiceConnectDefaultOutput) ToGetClusterServiceConnectDefaultOutput() GetClusterServiceConnectDefaultOutput {
	return o
}

func (o GetClusterServiceConnectDefaultOutput) ToGetClusterServiceConnectDefaultOutputWithContext(ctx context.Context) GetClusterServiceConnectDefaultOutput {
	return o
}

func (o GetClusterServiceConnectDefaultOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterServiceConnectDefault) string { return v.Namespace }).(pulumi.StringOutput)
}

type GetClusterServiceConnectDefaultArrayOutput struct{ *pulumi.OutputState }

func (GetClusterServiceConnectDefaultArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClusterServiceConnectDefault)(nil)).Elem()
}

func (o GetClusterServiceConnectDefaultArrayOutput) ToGetClusterServiceConnectDefaultArrayOutput() GetClusterServiceConnectDefaultArrayOutput {
	return o
}

func (o GetClusterServiceConnectDefaultArrayOutput) ToGetClusterServiceConnectDefaultArrayOutputWithContext(ctx context.Context) GetClusterServiceConnectDefaultArrayOutput {
	return o
}

func (o GetClusterServiceConnectDefaultArrayOutput) Index(i pulumi.IntInput) GetClusterServiceConnectDefaultOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetClusterServiceConnectDefault {
		return vs[0].([]GetClusterServiceConnectDefault)[vs[1].(int)]
	}).(GetClusterServiceConnectDefaultOutput)
}

type GetClusterSetting struct {
	Name  string `pulumi:"name"`
	Value string `pulumi:"value"`
}

// GetClusterSettingInput is an input type that accepts GetClusterSettingArgs and GetClusterSettingOutput values.
// You can construct a concrete instance of `GetClusterSettingInput` via:
//
//	GetClusterSettingArgs{...}
type GetClusterSettingInput interface {
	pulumi.Input

	ToGetClusterSettingOutput() GetClusterSettingOutput
	ToGetClusterSettingOutputWithContext(context.Context) GetClusterSettingOutput
}

type GetClusterSettingArgs struct {
	Name  pulumi.StringInput `pulumi:"name"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetClusterSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterSetting)(nil)).Elem()
}

func (i GetClusterSettingArgs) ToGetClusterSettingOutput() GetClusterSettingOutput {
	return i.ToGetClusterSettingOutputWithContext(context.Background())
}

func (i GetClusterSettingArgs) ToGetClusterSettingOutputWithContext(ctx context.Context) GetClusterSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterSettingOutput)
}

// GetClusterSettingArrayInput is an input type that accepts GetClusterSettingArray and GetClusterSettingArrayOutput values.
// You can construct a concrete instance of `GetClusterSettingArrayInput` via:
//
//	GetClusterSettingArray{ GetClusterSettingArgs{...} }
type GetClusterSettingArrayInput interface {
	pulumi.Input

	ToGetClusterSettingArrayOutput() GetClusterSettingArrayOutput
	ToGetClusterSettingArrayOutputWithContext(context.Context) GetClusterSettingArrayOutput
}

type GetClusterSettingArray []GetClusterSettingInput

func (GetClusterSettingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClusterSetting)(nil)).Elem()
}

func (i GetClusterSettingArray) ToGetClusterSettingArrayOutput() GetClusterSettingArrayOutput {
	return i.ToGetClusterSettingArrayOutputWithContext(context.Background())
}

func (i GetClusterSettingArray) ToGetClusterSettingArrayOutputWithContext(ctx context.Context) GetClusterSettingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterSettingArrayOutput)
}

type GetClusterSettingOutput struct{ *pulumi.OutputState }

func (GetClusterSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterSetting)(nil)).Elem()
}

func (o GetClusterSettingOutput) ToGetClusterSettingOutput() GetClusterSettingOutput {
	return o
}

func (o GetClusterSettingOutput) ToGetClusterSettingOutputWithContext(ctx context.Context) GetClusterSettingOutput {
	return o
}

func (o GetClusterSettingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterSetting) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetClusterSettingOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterSetting) string { return v.Value }).(pulumi.StringOutput)
}

type GetClusterSettingArrayOutput struct{ *pulumi.OutputState }

func (GetClusterSettingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClusterSetting)(nil)).Elem()
}

func (o GetClusterSettingArrayOutput) ToGetClusterSettingArrayOutput() GetClusterSettingArrayOutput {
	return o
}

func (o GetClusterSettingArrayOutput) ToGetClusterSettingArrayOutputWithContext(ctx context.Context) GetClusterSettingArrayOutput {
	return o
}

func (o GetClusterSettingArrayOutput) Index(i pulumi.IntInput) GetClusterSettingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetClusterSetting {
		return vs[0].([]GetClusterSetting)[vs[1].(int)]
	}).(GetClusterSettingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CapacityProviderAutoScalingGroupProviderInput)(nil)).Elem(), CapacityProviderAutoScalingGroupProviderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CapacityProviderAutoScalingGroupProviderPtrInput)(nil)).Elem(), CapacityProviderAutoScalingGroupProviderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CapacityProviderAutoScalingGroupProviderManagedScalingInput)(nil)).Elem(), CapacityProviderAutoScalingGroupProviderManagedScalingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CapacityProviderAutoScalingGroupProviderManagedScalingPtrInput)(nil)).Elem(), CapacityProviderAutoScalingGroupProviderManagedScalingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterCapacityProvidersDefaultCapacityProviderStrategyInput)(nil)).Elem(), ClusterCapacityProvidersDefaultCapacityProviderStrategyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterCapacityProvidersDefaultCapacityProviderStrategyArrayInput)(nil)).Elem(), ClusterCapacityProvidersDefaultCapacityProviderStrategyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterConfigurationInput)(nil)).Elem(), ClusterConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterConfigurationPtrInput)(nil)).Elem(), ClusterConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterConfigurationExecuteCommandConfigurationInput)(nil)).Elem(), ClusterConfigurationExecuteCommandConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterConfigurationExecuteCommandConfigurationPtrInput)(nil)).Elem(), ClusterConfigurationExecuteCommandConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterConfigurationExecuteCommandConfigurationLogConfigurationInput)(nil)).Elem(), ClusterConfigurationExecuteCommandConfigurationLogConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterConfigurationExecuteCommandConfigurationLogConfigurationPtrInput)(nil)).Elem(), ClusterConfigurationExecuteCommandConfigurationLogConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterDefaultCapacityProviderStrategyInput)(nil)).Elem(), ClusterDefaultCapacityProviderStrategyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterDefaultCapacityProviderStrategyArrayInput)(nil)).Elem(), ClusterDefaultCapacityProviderStrategyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterServiceConnectDefaultsInput)(nil)).Elem(), ClusterServiceConnectDefaultsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterServiceConnectDefaultsPtrInput)(nil)).Elem(), ClusterServiceConnectDefaultsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterSettingInput)(nil)).Elem(), ClusterSettingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterSettingArrayInput)(nil)).Elem(), ClusterSettingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceAlarmsInput)(nil)).Elem(), ServiceAlarmsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceAlarmsPtrInput)(nil)).Elem(), ServiceAlarmsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceCapacityProviderStrategyInput)(nil)).Elem(), ServiceCapacityProviderStrategyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceCapacityProviderStrategyArrayInput)(nil)).Elem(), ServiceCapacityProviderStrategyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceDeploymentCircuitBreakerInput)(nil)).Elem(), ServiceDeploymentCircuitBreakerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceDeploymentCircuitBreakerPtrInput)(nil)).Elem(), ServiceDeploymentCircuitBreakerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceDeploymentControllerInput)(nil)).Elem(), ServiceDeploymentControllerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceDeploymentControllerPtrInput)(nil)).Elem(), ServiceDeploymentControllerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceLoadBalancerInput)(nil)).Elem(), ServiceLoadBalancerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceLoadBalancerArrayInput)(nil)).Elem(), ServiceLoadBalancerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceNetworkConfigurationInput)(nil)).Elem(), ServiceNetworkConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceNetworkConfigurationPtrInput)(nil)).Elem(), ServiceNetworkConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceOrderedPlacementStrategyInput)(nil)).Elem(), ServiceOrderedPlacementStrategyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceOrderedPlacementStrategyArrayInput)(nil)).Elem(), ServiceOrderedPlacementStrategyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServicePlacementConstraintInput)(nil)).Elem(), ServicePlacementConstraintArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServicePlacementConstraintArrayInput)(nil)).Elem(), ServicePlacementConstraintArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceServiceConnectConfigurationInput)(nil)).Elem(), ServiceServiceConnectConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceServiceConnectConfigurationPtrInput)(nil)).Elem(), ServiceServiceConnectConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceServiceConnectConfigurationLogConfigurationInput)(nil)).Elem(), ServiceServiceConnectConfigurationLogConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceServiceConnectConfigurationLogConfigurationPtrInput)(nil)).Elem(), ServiceServiceConnectConfigurationLogConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceServiceConnectConfigurationLogConfigurationSecretOptionInput)(nil)).Elem(), ServiceServiceConnectConfigurationLogConfigurationSecretOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceServiceConnectConfigurationLogConfigurationSecretOptionArrayInput)(nil)).Elem(), ServiceServiceConnectConfigurationLogConfigurationSecretOptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceServiceConnectConfigurationServiceInput)(nil)).Elem(), ServiceServiceConnectConfigurationServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceServiceConnectConfigurationServicePtrInput)(nil)).Elem(), ServiceServiceConnectConfigurationServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceServiceConnectConfigurationServiceClientAliasInput)(nil)).Elem(), ServiceServiceConnectConfigurationServiceClientAliasArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceServiceConnectConfigurationServiceClientAliasArrayInput)(nil)).Elem(), ServiceServiceConnectConfigurationServiceClientAliasArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceServiceRegistriesInput)(nil)).Elem(), ServiceServiceRegistriesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceServiceRegistriesPtrInput)(nil)).Elem(), ServiceServiceRegistriesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionEphemeralStorageInput)(nil)).Elem(), TaskDefinitionEphemeralStorageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionEphemeralStoragePtrInput)(nil)).Elem(), TaskDefinitionEphemeralStorageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionInferenceAcceleratorInput)(nil)).Elem(), TaskDefinitionInferenceAcceleratorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionInferenceAcceleratorArrayInput)(nil)).Elem(), TaskDefinitionInferenceAcceleratorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionPlacementConstraintInput)(nil)).Elem(), TaskDefinitionPlacementConstraintArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionPlacementConstraintArrayInput)(nil)).Elem(), TaskDefinitionPlacementConstraintArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionProxyConfigurationInput)(nil)).Elem(), TaskDefinitionProxyConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionProxyConfigurationPtrInput)(nil)).Elem(), TaskDefinitionProxyConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionRuntimePlatformInput)(nil)).Elem(), TaskDefinitionRuntimePlatformArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionRuntimePlatformPtrInput)(nil)).Elem(), TaskDefinitionRuntimePlatformArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionVolumeInput)(nil)).Elem(), TaskDefinitionVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionVolumeArrayInput)(nil)).Elem(), TaskDefinitionVolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionVolumeDockerVolumeConfigurationInput)(nil)).Elem(), TaskDefinitionVolumeDockerVolumeConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionVolumeDockerVolumeConfigurationPtrInput)(nil)).Elem(), TaskDefinitionVolumeDockerVolumeConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionVolumeEfsVolumeConfigurationInput)(nil)).Elem(), TaskDefinitionVolumeEfsVolumeConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionVolumeEfsVolumeConfigurationPtrInput)(nil)).Elem(), TaskDefinitionVolumeEfsVolumeConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigInput)(nil)).Elem(), TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigPtrInput)(nil)).Elem(), TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationInput)(nil)).Elem(), TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationPtrInput)(nil)).Elem(), TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigInput)(nil)).Elem(), TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigPtrInput)(nil)).Elem(), TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskSetCapacityProviderStrategyInput)(nil)).Elem(), TaskSetCapacityProviderStrategyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskSetCapacityProviderStrategyArrayInput)(nil)).Elem(), TaskSetCapacityProviderStrategyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskSetLoadBalancerInput)(nil)).Elem(), TaskSetLoadBalancerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskSetLoadBalancerArrayInput)(nil)).Elem(), TaskSetLoadBalancerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskSetNetworkConfigurationInput)(nil)).Elem(), TaskSetNetworkConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskSetNetworkConfigurationPtrInput)(nil)).Elem(), TaskSetNetworkConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskSetScaleInput)(nil)).Elem(), TaskSetScaleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskSetScalePtrInput)(nil)).Elem(), TaskSetScaleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskSetServiceRegistriesInput)(nil)).Elem(), TaskSetServiceRegistriesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskSetServiceRegistriesPtrInput)(nil)).Elem(), TaskSetServiceRegistriesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClusterServiceConnectDefaultInput)(nil)).Elem(), GetClusterServiceConnectDefaultArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClusterServiceConnectDefaultArrayInput)(nil)).Elem(), GetClusterServiceConnectDefaultArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClusterSettingInput)(nil)).Elem(), GetClusterSettingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClusterSettingArrayInput)(nil)).Elem(), GetClusterSettingArray{})
	pulumi.RegisterOutputType(CapacityProviderAutoScalingGroupProviderOutput{})
	pulumi.RegisterOutputType(CapacityProviderAutoScalingGroupProviderPtrOutput{})
	pulumi.RegisterOutputType(CapacityProviderAutoScalingGroupProviderManagedScalingOutput{})
	pulumi.RegisterOutputType(CapacityProviderAutoScalingGroupProviderManagedScalingPtrOutput{})
	pulumi.RegisterOutputType(ClusterCapacityProvidersDefaultCapacityProviderStrategyOutput{})
	pulumi.RegisterOutputType(ClusterCapacityProvidersDefaultCapacityProviderStrategyArrayOutput{})
	pulumi.RegisterOutputType(ClusterConfigurationOutput{})
	pulumi.RegisterOutputType(ClusterConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ClusterConfigurationExecuteCommandConfigurationOutput{})
	pulumi.RegisterOutputType(ClusterConfigurationExecuteCommandConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ClusterConfigurationExecuteCommandConfigurationLogConfigurationOutput{})
	pulumi.RegisterOutputType(ClusterConfigurationExecuteCommandConfigurationLogConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ClusterDefaultCapacityProviderStrategyOutput{})
	pulumi.RegisterOutputType(ClusterDefaultCapacityProviderStrategyArrayOutput{})
	pulumi.RegisterOutputType(ClusterServiceConnectDefaultsOutput{})
	pulumi.RegisterOutputType(ClusterServiceConnectDefaultsPtrOutput{})
	pulumi.RegisterOutputType(ClusterSettingOutput{})
	pulumi.RegisterOutputType(ClusterSettingArrayOutput{})
	pulumi.RegisterOutputType(ServiceAlarmsOutput{})
	pulumi.RegisterOutputType(ServiceAlarmsPtrOutput{})
	pulumi.RegisterOutputType(ServiceCapacityProviderStrategyOutput{})
	pulumi.RegisterOutputType(ServiceCapacityProviderStrategyArrayOutput{})
	pulumi.RegisterOutputType(ServiceDeploymentCircuitBreakerOutput{})
	pulumi.RegisterOutputType(ServiceDeploymentCircuitBreakerPtrOutput{})
	pulumi.RegisterOutputType(ServiceDeploymentControllerOutput{})
	pulumi.RegisterOutputType(ServiceDeploymentControllerPtrOutput{})
	pulumi.RegisterOutputType(ServiceLoadBalancerOutput{})
	pulumi.RegisterOutputType(ServiceLoadBalancerArrayOutput{})
	pulumi.RegisterOutputType(ServiceNetworkConfigurationOutput{})
	pulumi.RegisterOutputType(ServiceNetworkConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ServiceOrderedPlacementStrategyOutput{})
	pulumi.RegisterOutputType(ServiceOrderedPlacementStrategyArrayOutput{})
	pulumi.RegisterOutputType(ServicePlacementConstraintOutput{})
	pulumi.RegisterOutputType(ServicePlacementConstraintArrayOutput{})
	pulumi.RegisterOutputType(ServiceServiceConnectConfigurationOutput{})
	pulumi.RegisterOutputType(ServiceServiceConnectConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ServiceServiceConnectConfigurationLogConfigurationOutput{})
	pulumi.RegisterOutputType(ServiceServiceConnectConfigurationLogConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ServiceServiceConnectConfigurationLogConfigurationSecretOptionOutput{})
	pulumi.RegisterOutputType(ServiceServiceConnectConfigurationLogConfigurationSecretOptionArrayOutput{})
	pulumi.RegisterOutputType(ServiceServiceConnectConfigurationServiceOutput{})
	pulumi.RegisterOutputType(ServiceServiceConnectConfigurationServicePtrOutput{})
	pulumi.RegisterOutputType(ServiceServiceConnectConfigurationServiceClientAliasOutput{})
	pulumi.RegisterOutputType(ServiceServiceConnectConfigurationServiceClientAliasArrayOutput{})
	pulumi.RegisterOutputType(ServiceServiceRegistriesOutput{})
	pulumi.RegisterOutputType(ServiceServiceRegistriesPtrOutput{})
	pulumi.RegisterOutputType(TaskDefinitionEphemeralStorageOutput{})
	pulumi.RegisterOutputType(TaskDefinitionEphemeralStoragePtrOutput{})
	pulumi.RegisterOutputType(TaskDefinitionInferenceAcceleratorOutput{})
	pulumi.RegisterOutputType(TaskDefinitionInferenceAcceleratorArrayOutput{})
	pulumi.RegisterOutputType(TaskDefinitionPlacementConstraintOutput{})
	pulumi.RegisterOutputType(TaskDefinitionPlacementConstraintArrayOutput{})
	pulumi.RegisterOutputType(TaskDefinitionProxyConfigurationOutput{})
	pulumi.RegisterOutputType(TaskDefinitionProxyConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TaskDefinitionRuntimePlatformOutput{})
	pulumi.RegisterOutputType(TaskDefinitionRuntimePlatformPtrOutput{})
	pulumi.RegisterOutputType(TaskDefinitionVolumeOutput{})
	pulumi.RegisterOutputType(TaskDefinitionVolumeArrayOutput{})
	pulumi.RegisterOutputType(TaskDefinitionVolumeDockerVolumeConfigurationOutput{})
	pulumi.RegisterOutputType(TaskDefinitionVolumeDockerVolumeConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TaskDefinitionVolumeEfsVolumeConfigurationOutput{})
	pulumi.RegisterOutputType(TaskDefinitionVolumeEfsVolumeConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigOutput{})
	pulumi.RegisterOutputType(TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigPtrOutput{})
	pulumi.RegisterOutputType(TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationOutput{})
	pulumi.RegisterOutputType(TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigOutput{})
	pulumi.RegisterOutputType(TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigPtrOutput{})
	pulumi.RegisterOutputType(TaskSetCapacityProviderStrategyOutput{})
	pulumi.RegisterOutputType(TaskSetCapacityProviderStrategyArrayOutput{})
	pulumi.RegisterOutputType(TaskSetLoadBalancerOutput{})
	pulumi.RegisterOutputType(TaskSetLoadBalancerArrayOutput{})
	pulumi.RegisterOutputType(TaskSetNetworkConfigurationOutput{})
	pulumi.RegisterOutputType(TaskSetNetworkConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TaskSetScaleOutput{})
	pulumi.RegisterOutputType(TaskSetScalePtrOutput{})
	pulumi.RegisterOutputType(TaskSetServiceRegistriesOutput{})
	pulumi.RegisterOutputType(TaskSetServiceRegistriesPtrOutput{})
	pulumi.RegisterOutputType(GetClusterServiceConnectDefaultOutput{})
	pulumi.RegisterOutputType(GetClusterServiceConnectDefaultArrayOutput{})
	pulumi.RegisterOutputType(GetClusterSettingOutput{})
	pulumi.RegisterOutputType(GetClusterSettingArrayOutput{})
}
