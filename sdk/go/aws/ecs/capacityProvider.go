// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ecs

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type CapacityProvider struct {
	pulumi.CustomResourceState

	Arn                      pulumi.StringOutput                            `pulumi:"arn"`
	AutoScalingGroupProvider CapacityProviderAutoScalingGroupProviderOutput `pulumi:"autoScalingGroupProvider"`
	Name                     pulumi.StringOutput                            `pulumi:"name"`
	Tags                     pulumi.StringMapOutput                         `pulumi:"tags"`
	TagsAll                  pulumi.StringMapOutput                         `pulumi:"tagsAll"`
}

// NewCapacityProvider registers a new resource with the given unique name, arguments, and options.
func NewCapacityProvider(ctx *pulumi.Context,
	name string, args *CapacityProviderArgs, opts ...pulumi.ResourceOption) (*CapacityProvider, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AutoScalingGroupProvider == nil {
		return nil, errors.New("invalid value for required argument 'AutoScalingGroupProvider'")
	}
	var resource CapacityProvider
	err := ctx.RegisterResource("aws:ecs/capacityProvider:CapacityProvider", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCapacityProvider gets an existing CapacityProvider resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCapacityProvider(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CapacityProviderState, opts ...pulumi.ResourceOption) (*CapacityProvider, error) {
	var resource CapacityProvider
	err := ctx.ReadResource("aws:ecs/capacityProvider:CapacityProvider", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CapacityProvider resources.
type capacityProviderState struct {
	Arn                      *string                                   `pulumi:"arn"`
	AutoScalingGroupProvider *CapacityProviderAutoScalingGroupProvider `pulumi:"autoScalingGroupProvider"`
	Name                     *string                                   `pulumi:"name"`
	Tags                     map[string]string                         `pulumi:"tags"`
	TagsAll                  map[string]string                         `pulumi:"tagsAll"`
}

type CapacityProviderState struct {
	Arn                      pulumi.StringPtrInput
	AutoScalingGroupProvider CapacityProviderAutoScalingGroupProviderPtrInput
	Name                     pulumi.StringPtrInput
	Tags                     pulumi.StringMapInput
	TagsAll                  pulumi.StringMapInput
}

func (CapacityProviderState) ElementType() reflect.Type {
	return reflect.TypeOf((*capacityProviderState)(nil)).Elem()
}

type capacityProviderArgs struct {
	AutoScalingGroupProvider CapacityProviderAutoScalingGroupProvider `pulumi:"autoScalingGroupProvider"`
	Name                     *string                                  `pulumi:"name"`
	Tags                     map[string]string                        `pulumi:"tags"`
}

// The set of arguments for constructing a CapacityProvider resource.
type CapacityProviderArgs struct {
	AutoScalingGroupProvider CapacityProviderAutoScalingGroupProviderInput
	Name                     pulumi.StringPtrInput
	Tags                     pulumi.StringMapInput
}

func (CapacityProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*capacityProviderArgs)(nil)).Elem()
}

type CapacityProviderInput interface {
	pulumi.Input

	ToCapacityProviderOutput() CapacityProviderOutput
	ToCapacityProviderOutputWithContext(ctx context.Context) CapacityProviderOutput
}

func (*CapacityProvider) ElementType() reflect.Type {
	return reflect.TypeOf((**CapacityProvider)(nil)).Elem()
}

func (i *CapacityProvider) ToCapacityProviderOutput() CapacityProviderOutput {
	return i.ToCapacityProviderOutputWithContext(context.Background())
}

func (i *CapacityProvider) ToCapacityProviderOutputWithContext(ctx context.Context) CapacityProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapacityProviderOutput)
}

// CapacityProviderArrayInput is an input type that accepts CapacityProviderArray and CapacityProviderArrayOutput values.
// You can construct a concrete instance of `CapacityProviderArrayInput` via:
//
//	CapacityProviderArray{ CapacityProviderArgs{...} }
type CapacityProviderArrayInput interface {
	pulumi.Input

	ToCapacityProviderArrayOutput() CapacityProviderArrayOutput
	ToCapacityProviderArrayOutputWithContext(context.Context) CapacityProviderArrayOutput
}

type CapacityProviderArray []CapacityProviderInput

func (CapacityProviderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CapacityProvider)(nil)).Elem()
}

func (i CapacityProviderArray) ToCapacityProviderArrayOutput() CapacityProviderArrayOutput {
	return i.ToCapacityProviderArrayOutputWithContext(context.Background())
}

func (i CapacityProviderArray) ToCapacityProviderArrayOutputWithContext(ctx context.Context) CapacityProviderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapacityProviderArrayOutput)
}

// CapacityProviderMapInput is an input type that accepts CapacityProviderMap and CapacityProviderMapOutput values.
// You can construct a concrete instance of `CapacityProviderMapInput` via:
//
//	CapacityProviderMap{ "key": CapacityProviderArgs{...} }
type CapacityProviderMapInput interface {
	pulumi.Input

	ToCapacityProviderMapOutput() CapacityProviderMapOutput
	ToCapacityProviderMapOutputWithContext(context.Context) CapacityProviderMapOutput
}

type CapacityProviderMap map[string]CapacityProviderInput

func (CapacityProviderMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CapacityProvider)(nil)).Elem()
}

func (i CapacityProviderMap) ToCapacityProviderMapOutput() CapacityProviderMapOutput {
	return i.ToCapacityProviderMapOutputWithContext(context.Background())
}

func (i CapacityProviderMap) ToCapacityProviderMapOutputWithContext(ctx context.Context) CapacityProviderMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapacityProviderMapOutput)
}

type CapacityProviderOutput struct{ *pulumi.OutputState }

func (CapacityProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CapacityProvider)(nil)).Elem()
}

func (o CapacityProviderOutput) ToCapacityProviderOutput() CapacityProviderOutput {
	return o
}

func (o CapacityProviderOutput) ToCapacityProviderOutputWithContext(ctx context.Context) CapacityProviderOutput {
	return o
}

func (o CapacityProviderOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *CapacityProvider) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o CapacityProviderOutput) AutoScalingGroupProvider() CapacityProviderAutoScalingGroupProviderOutput {
	return o.ApplyT(func(v *CapacityProvider) CapacityProviderAutoScalingGroupProviderOutput {
		return v.AutoScalingGroupProvider
	}).(CapacityProviderAutoScalingGroupProviderOutput)
}

func (o CapacityProviderOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CapacityProvider) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o CapacityProviderOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CapacityProvider) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o CapacityProviderOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CapacityProvider) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type CapacityProviderArrayOutput struct{ *pulumi.OutputState }

func (CapacityProviderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CapacityProvider)(nil)).Elem()
}

func (o CapacityProviderArrayOutput) ToCapacityProviderArrayOutput() CapacityProviderArrayOutput {
	return o
}

func (o CapacityProviderArrayOutput) ToCapacityProviderArrayOutputWithContext(ctx context.Context) CapacityProviderArrayOutput {
	return o
}

func (o CapacityProviderArrayOutput) Index(i pulumi.IntInput) CapacityProviderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CapacityProvider {
		return vs[0].([]*CapacityProvider)[vs[1].(int)]
	}).(CapacityProviderOutput)
}

type CapacityProviderMapOutput struct{ *pulumi.OutputState }

func (CapacityProviderMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CapacityProvider)(nil)).Elem()
}

func (o CapacityProviderMapOutput) ToCapacityProviderMapOutput() CapacityProviderMapOutput {
	return o
}

func (o CapacityProviderMapOutput) ToCapacityProviderMapOutputWithContext(ctx context.Context) CapacityProviderMapOutput {
	return o
}

func (o CapacityProviderMapOutput) MapIndex(k pulumi.StringInput) CapacityProviderOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CapacityProvider {
		return vs[0].(map[string]*CapacityProvider)[vs[1].(string)]
	}).(CapacityProviderOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CapacityProviderInput)(nil)).Elem(), &CapacityProvider{})
	pulumi.RegisterInputType(reflect.TypeOf((*CapacityProviderArrayInput)(nil)).Elem(), CapacityProviderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CapacityProviderMapInput)(nil)).Elem(), CapacityProviderMap{})
	pulumi.RegisterOutputType(CapacityProviderOutput{})
	pulumi.RegisterOutputType(CapacityProviderArrayOutput{})
	pulumi.RegisterOutputType(CapacityProviderMapOutput{})
}
