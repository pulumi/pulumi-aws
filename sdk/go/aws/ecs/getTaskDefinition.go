// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ecs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The ECS task definition data source allows access to details of
// a specific AWS ECS task definition.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/ecs"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			mongoTaskDefinition, err := ecs.NewTaskDefinition(ctx, "mongo", &ecs.TaskDefinitionArgs{
//				Family: pulumi.String("mongodb"),
//				ContainerDefinitions: pulumi.String(`[
//	  {
//	    "cpu": 128,
//	    "environment": [{
//	      "name": "SECRET",
//	      "value": "KEY"
//	    }],
//	    "essential": true,
//	    "image": "mongo:latest",
//	    "memory": 128,
//	    "memoryReservation": 64,
//	    "name": "mongodb"
//	  }
//
// ]
// `),
//
//			})
//			if err != nil {
//				return err
//			}
//			// Simply specify the family to find the latest ACTIVE revision in that family.
//			mongo := ecs.LookupTaskDefinitionOutput(ctx, ecs.GetTaskDefinitionOutputArgs{
//				TaskDefinition: mongoTaskDefinition.Family,
//			}, nil)
//			foo, err := ecs.NewCluster(ctx, "foo", &ecs.ClusterArgs{
//				Name: pulumi.String("foo"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = ecs.NewService(ctx, "mongo", &ecs.ServiceArgs{
//				Name:         pulumi.String("mongo"),
//				Cluster:      foo.ID(),
//				DesiredCount: pulumi.Int(2),
//				TaskDefinition: pulumi.String(mongo.ApplyT(func(mongo ecs.GetTaskDefinitionResult) (*string, error) {
//					return &mongo.Arn, nil
//				}).(pulumi.StringPtrOutput)),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupTaskDefinition(ctx *pulumi.Context, args *LookupTaskDefinitionArgs, opts ...pulumi.InvokeOption) (*LookupTaskDefinitionResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupTaskDefinitionResult
	err := ctx.Invoke("aws:ecs/getTaskDefinition:getTaskDefinition", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getTaskDefinition.
type LookupTaskDefinitionArgs struct {
	// Family for the latest ACTIVE revision, family and revision (family:revision) for a specific revision in the family, the ARN of the task definition to access to.
	TaskDefinition string `pulumi:"taskDefinition"`
}

// A collection of values returned by getTaskDefinition.
type LookupTaskDefinitionResult struct {
	// ARN of the task definition.
	Arn string `pulumi:"arn"`
	// ARN of the Task Definition with the trailing `revision` removed. This may be useful for situations where the latest task definition is always desired. If a revision isn't specified, the latest ACTIVE revision is used. See the [AWS documentation](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_StartTask.html#ECS-StartTask-request-taskDefinition) for details.
	ArnWithoutRevision string `pulumi:"arnWithoutRevision"`
	// A list of valid [container definitions](http://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_ContainerDefinition.html) provided as a single valid JSON document. Please note that you should only provide values that are part of the container definition document. For a detailed description of what parameters are available, see the [Task Definition Parameters](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html) section from the official [Developer Guide](https://docs.aws.amazon.com/AmazonECS/latest/developerguide).
	ContainerDefinitions string `pulumi:"containerDefinitions"`
	// Number of cpu units used by the task. If the `requiresCompatibilities` is `FARGATE` this field is required.
	Cpu string `pulumi:"cpu"`
	// Enables fault injection and allows for fault injection requests to be accepted from the task's containers. Default is `false`.
	EnableFaultInjection bool `pulumi:"enableFaultInjection"`
	// The amount of ephemeral storage to allocate for the task. This parameter is used to expand the total amount of ephemeral storage available, beyond the default amount, for tasks hosted on AWS Fargate. See Ephemeral Storage.
	EphemeralStorages []GetTaskDefinitionEphemeralStorage `pulumi:"ephemeralStorages"`
	// ARN of the task execution role that the Amazon ECS container agent and the Docker daemon can assume.
	ExecutionRoleArn string `pulumi:"executionRoleArn"`
	// A unique name for your task definition.
	// The following arguments are optional:
	Family string `pulumi:"family"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Configuration block(s) with Inference Accelerators settings. Detailed below.
	InferenceAccelerators []GetTaskDefinitionInferenceAccelerator `pulumi:"inferenceAccelerators"`
	// IPC resource namespace to be used for the containers in the task The valid values are `host`, `task`, and `none`.
	IpcMode string `pulumi:"ipcMode"`
	// Amount (in MiB) of memory used by the task. If the `requiresCompatibilities` is `FARGATE` this field is required.
	Memory string `pulumi:"memory"`
	// Docker networking mode to use for the containers in the task. Valid values are `none`, `bridge`, `awsvpc`, and `host`.
	NetworkMode string `pulumi:"networkMode"`
	// Process namespace to use for the containers in the task. The valid values are `host` and `task`.
	PidMode string `pulumi:"pidMode"`
	// Configuration block for rules that are taken into consideration during task placement. Maximum number of `placementConstraints` is `10`. Detailed below.
	PlacementConstraints []GetTaskDefinitionPlacementConstraint `pulumi:"placementConstraints"`
	// Configuration block for the App Mesh proxy. Detailed below.
	ProxyConfigurations []GetTaskDefinitionProxyConfiguration `pulumi:"proxyConfigurations"`
	// Set of launch types required by the task. The valid values are `EC2` and `FARGATE`.
	RequiresCompatibilities []string `pulumi:"requiresCompatibilities"`
	// Revision of the task in a particular family.
	Revision int `pulumi:"revision"`
	// Configuration block for runtimePlatform that containers in your task may use.
	RuntimePlatforms []GetTaskDefinitionRuntimePlatform `pulumi:"runtimePlatforms"`
	// Status of the task definition.
	Status         string `pulumi:"status"`
	TaskDefinition string `pulumi:"taskDefinition"`
	// ARN of IAM role that allows your Amazon ECS container task to make calls to other AWS services.
	TaskRoleArn string `pulumi:"taskRoleArn"`
	// Configuration block for volumes that containers in your task may use. Detailed below.
	Volumes []GetTaskDefinitionVolume `pulumi:"volumes"`
}

func LookupTaskDefinitionOutput(ctx *pulumi.Context, args LookupTaskDefinitionOutputArgs, opts ...pulumi.InvokeOption) LookupTaskDefinitionResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupTaskDefinitionResultOutput, error) {
			args := v.(LookupTaskDefinitionArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("aws:ecs/getTaskDefinition:getTaskDefinition", args, LookupTaskDefinitionResultOutput{}, options).(LookupTaskDefinitionResultOutput), nil
		}).(LookupTaskDefinitionResultOutput)
}

// A collection of arguments for invoking getTaskDefinition.
type LookupTaskDefinitionOutputArgs struct {
	// Family for the latest ACTIVE revision, family and revision (family:revision) for a specific revision in the family, the ARN of the task definition to access to.
	TaskDefinition pulumi.StringInput `pulumi:"taskDefinition"`
}

func (LookupTaskDefinitionOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTaskDefinitionArgs)(nil)).Elem()
}

// A collection of values returned by getTaskDefinition.
type LookupTaskDefinitionResultOutput struct{ *pulumi.OutputState }

func (LookupTaskDefinitionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTaskDefinitionResult)(nil)).Elem()
}

func (o LookupTaskDefinitionResultOutput) ToLookupTaskDefinitionResultOutput() LookupTaskDefinitionResultOutput {
	return o
}

func (o LookupTaskDefinitionResultOutput) ToLookupTaskDefinitionResultOutputWithContext(ctx context.Context) LookupTaskDefinitionResultOutput {
	return o
}

// ARN of the task definition.
func (o LookupTaskDefinitionResultOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTaskDefinitionResult) string { return v.Arn }).(pulumi.StringOutput)
}

// ARN of the Task Definition with the trailing `revision` removed. This may be useful for situations where the latest task definition is always desired. If a revision isn't specified, the latest ACTIVE revision is used. See the [AWS documentation](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_StartTask.html#ECS-StartTask-request-taskDefinition) for details.
func (o LookupTaskDefinitionResultOutput) ArnWithoutRevision() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTaskDefinitionResult) string { return v.ArnWithoutRevision }).(pulumi.StringOutput)
}

// A list of valid [container definitions](http://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_ContainerDefinition.html) provided as a single valid JSON document. Please note that you should only provide values that are part of the container definition document. For a detailed description of what parameters are available, see the [Task Definition Parameters](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html) section from the official [Developer Guide](https://docs.aws.amazon.com/AmazonECS/latest/developerguide).
func (o LookupTaskDefinitionResultOutput) ContainerDefinitions() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTaskDefinitionResult) string { return v.ContainerDefinitions }).(pulumi.StringOutput)
}

// Number of cpu units used by the task. If the `requiresCompatibilities` is `FARGATE` this field is required.
func (o LookupTaskDefinitionResultOutput) Cpu() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTaskDefinitionResult) string { return v.Cpu }).(pulumi.StringOutput)
}

// Enables fault injection and allows for fault injection requests to be accepted from the task's containers. Default is `false`.
func (o LookupTaskDefinitionResultOutput) EnableFaultInjection() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTaskDefinitionResult) bool { return v.EnableFaultInjection }).(pulumi.BoolOutput)
}

// The amount of ephemeral storage to allocate for the task. This parameter is used to expand the total amount of ephemeral storage available, beyond the default amount, for tasks hosted on AWS Fargate. See Ephemeral Storage.
func (o LookupTaskDefinitionResultOutput) EphemeralStorages() GetTaskDefinitionEphemeralStorageArrayOutput {
	return o.ApplyT(func(v LookupTaskDefinitionResult) []GetTaskDefinitionEphemeralStorage { return v.EphemeralStorages }).(GetTaskDefinitionEphemeralStorageArrayOutput)
}

// ARN of the task execution role that the Amazon ECS container agent and the Docker daemon can assume.
func (o LookupTaskDefinitionResultOutput) ExecutionRoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTaskDefinitionResult) string { return v.ExecutionRoleArn }).(pulumi.StringOutput)
}

// A unique name for your task definition.
// The following arguments are optional:
func (o LookupTaskDefinitionResultOutput) Family() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTaskDefinitionResult) string { return v.Family }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupTaskDefinitionResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTaskDefinitionResult) string { return v.Id }).(pulumi.StringOutput)
}

// Configuration block(s) with Inference Accelerators settings. Detailed below.
func (o LookupTaskDefinitionResultOutput) InferenceAccelerators() GetTaskDefinitionInferenceAcceleratorArrayOutput {
	return o.ApplyT(func(v LookupTaskDefinitionResult) []GetTaskDefinitionInferenceAccelerator {
		return v.InferenceAccelerators
	}).(GetTaskDefinitionInferenceAcceleratorArrayOutput)
}

// IPC resource namespace to be used for the containers in the task The valid values are `host`, `task`, and `none`.
func (o LookupTaskDefinitionResultOutput) IpcMode() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTaskDefinitionResult) string { return v.IpcMode }).(pulumi.StringOutput)
}

// Amount (in MiB) of memory used by the task. If the `requiresCompatibilities` is `FARGATE` this field is required.
func (o LookupTaskDefinitionResultOutput) Memory() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTaskDefinitionResult) string { return v.Memory }).(pulumi.StringOutput)
}

// Docker networking mode to use for the containers in the task. Valid values are `none`, `bridge`, `awsvpc`, and `host`.
func (o LookupTaskDefinitionResultOutput) NetworkMode() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTaskDefinitionResult) string { return v.NetworkMode }).(pulumi.StringOutput)
}

// Process namespace to use for the containers in the task. The valid values are `host` and `task`.
func (o LookupTaskDefinitionResultOutput) PidMode() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTaskDefinitionResult) string { return v.PidMode }).(pulumi.StringOutput)
}

// Configuration block for rules that are taken into consideration during task placement. Maximum number of `placementConstraints` is `10`. Detailed below.
func (o LookupTaskDefinitionResultOutput) PlacementConstraints() GetTaskDefinitionPlacementConstraintArrayOutput {
	return o.ApplyT(func(v LookupTaskDefinitionResult) []GetTaskDefinitionPlacementConstraint {
		return v.PlacementConstraints
	}).(GetTaskDefinitionPlacementConstraintArrayOutput)
}

// Configuration block for the App Mesh proxy. Detailed below.
func (o LookupTaskDefinitionResultOutput) ProxyConfigurations() GetTaskDefinitionProxyConfigurationArrayOutput {
	return o.ApplyT(func(v LookupTaskDefinitionResult) []GetTaskDefinitionProxyConfiguration { return v.ProxyConfigurations }).(GetTaskDefinitionProxyConfigurationArrayOutput)
}

// Set of launch types required by the task. The valid values are `EC2` and `FARGATE`.
func (o LookupTaskDefinitionResultOutput) RequiresCompatibilities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupTaskDefinitionResult) []string { return v.RequiresCompatibilities }).(pulumi.StringArrayOutput)
}

// Revision of the task in a particular family.
func (o LookupTaskDefinitionResultOutput) Revision() pulumi.IntOutput {
	return o.ApplyT(func(v LookupTaskDefinitionResult) int { return v.Revision }).(pulumi.IntOutput)
}

// Configuration block for runtimePlatform that containers in your task may use.
func (o LookupTaskDefinitionResultOutput) RuntimePlatforms() GetTaskDefinitionRuntimePlatformArrayOutput {
	return o.ApplyT(func(v LookupTaskDefinitionResult) []GetTaskDefinitionRuntimePlatform { return v.RuntimePlatforms }).(GetTaskDefinitionRuntimePlatformArrayOutput)
}

// Status of the task definition.
func (o LookupTaskDefinitionResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTaskDefinitionResult) string { return v.Status }).(pulumi.StringOutput)
}

func (o LookupTaskDefinitionResultOutput) TaskDefinition() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTaskDefinitionResult) string { return v.TaskDefinition }).(pulumi.StringOutput)
}

// ARN of IAM role that allows your Amazon ECS container task to make calls to other AWS services.
func (o LookupTaskDefinitionResultOutput) TaskRoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTaskDefinitionResult) string { return v.TaskRoleArn }).(pulumi.StringOutput)
}

// Configuration block for volumes that containers in your task may use. Detailed below.
func (o LookupTaskDefinitionResultOutput) Volumes() GetTaskDefinitionVolumeArrayOutput {
	return o.ApplyT(func(v LookupTaskDefinitionResult) []GetTaskDefinitionVolume { return v.Volumes }).(GetTaskDefinitionVolumeArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupTaskDefinitionResultOutput{})
}
