// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ecs

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages the capacity providers of an ECS Cluster.
//
// More information about capacity providers can be found in the [ECS User Guide](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-capacity-providers.html).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/ecs"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleCluster, err := ecs.NewCluster(ctx, "exampleCluster", nil)
//			if err != nil {
//				return err
//			}
//			_, err = ecs.NewClusterCapacityProviders(ctx, "exampleClusterCapacityProviders", &ecs.ClusterCapacityProvidersArgs{
//				ClusterName: exampleCluster.Name,
//				CapacityProviders: pulumi.StringArray{
//					pulumi.String("FARGATE"),
//				},
//				DefaultCapacityProviderStrategies: ecs.ClusterCapacityProvidersDefaultCapacityProviderStrategyArray{
//					&ecs.ClusterCapacityProvidersDefaultCapacityProviderStrategyArgs{
//						Base:             pulumi.Int(1),
//						Weight:           pulumi.Int(100),
//						CapacityProvider: pulumi.String("FARGATE"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import ECS cluster capacity providers using the `cluster_name` attribute. For example:
//
// ```sh
//
//	$ pulumi import aws:ecs/clusterCapacityProviders:ClusterCapacityProviders example my-cluster
//
// ```
type ClusterCapacityProviders struct {
	pulumi.CustomResourceState

	// Set of names of one or more capacity providers to associate with the cluster. Valid values also include `FARGATE` and `FARGATE_SPOT`.
	CapacityProviders pulumi.StringArrayOutput `pulumi:"capacityProviders"`
	// Name of the ECS cluster to manage capacity providers for.
	ClusterName pulumi.StringOutput `pulumi:"clusterName"`
	// Set of capacity provider strategies to use by default for the cluster. Detailed below.
	DefaultCapacityProviderStrategies ClusterCapacityProvidersDefaultCapacityProviderStrategyArrayOutput `pulumi:"defaultCapacityProviderStrategies"`
}

// NewClusterCapacityProviders registers a new resource with the given unique name, arguments, and options.
func NewClusterCapacityProviders(ctx *pulumi.Context,
	name string, args *ClusterCapacityProvidersArgs, opts ...pulumi.ResourceOption) (*ClusterCapacityProviders, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterName == nil {
		return nil, errors.New("invalid value for required argument 'ClusterName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ClusterCapacityProviders
	err := ctx.RegisterResource("aws:ecs/clusterCapacityProviders:ClusterCapacityProviders", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClusterCapacityProviders gets an existing ClusterCapacityProviders resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClusterCapacityProviders(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterCapacityProvidersState, opts ...pulumi.ResourceOption) (*ClusterCapacityProviders, error) {
	var resource ClusterCapacityProviders
	err := ctx.ReadResource("aws:ecs/clusterCapacityProviders:ClusterCapacityProviders", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClusterCapacityProviders resources.
type clusterCapacityProvidersState struct {
	// Set of names of one or more capacity providers to associate with the cluster. Valid values also include `FARGATE` and `FARGATE_SPOT`.
	CapacityProviders []string `pulumi:"capacityProviders"`
	// Name of the ECS cluster to manage capacity providers for.
	ClusterName *string `pulumi:"clusterName"`
	// Set of capacity provider strategies to use by default for the cluster. Detailed below.
	DefaultCapacityProviderStrategies []ClusterCapacityProvidersDefaultCapacityProviderStrategy `pulumi:"defaultCapacityProviderStrategies"`
}

type ClusterCapacityProvidersState struct {
	// Set of names of one or more capacity providers to associate with the cluster. Valid values also include `FARGATE` and `FARGATE_SPOT`.
	CapacityProviders pulumi.StringArrayInput
	// Name of the ECS cluster to manage capacity providers for.
	ClusterName pulumi.StringPtrInput
	// Set of capacity provider strategies to use by default for the cluster. Detailed below.
	DefaultCapacityProviderStrategies ClusterCapacityProvidersDefaultCapacityProviderStrategyArrayInput
}

func (ClusterCapacityProvidersState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterCapacityProvidersState)(nil)).Elem()
}

type clusterCapacityProvidersArgs struct {
	// Set of names of one or more capacity providers to associate with the cluster. Valid values also include `FARGATE` and `FARGATE_SPOT`.
	CapacityProviders []string `pulumi:"capacityProviders"`
	// Name of the ECS cluster to manage capacity providers for.
	ClusterName string `pulumi:"clusterName"`
	// Set of capacity provider strategies to use by default for the cluster. Detailed below.
	DefaultCapacityProviderStrategies []ClusterCapacityProvidersDefaultCapacityProviderStrategy `pulumi:"defaultCapacityProviderStrategies"`
}

// The set of arguments for constructing a ClusterCapacityProviders resource.
type ClusterCapacityProvidersArgs struct {
	// Set of names of one or more capacity providers to associate with the cluster. Valid values also include `FARGATE` and `FARGATE_SPOT`.
	CapacityProviders pulumi.StringArrayInput
	// Name of the ECS cluster to manage capacity providers for.
	ClusterName pulumi.StringInput
	// Set of capacity provider strategies to use by default for the cluster. Detailed below.
	DefaultCapacityProviderStrategies ClusterCapacityProvidersDefaultCapacityProviderStrategyArrayInput
}

func (ClusterCapacityProvidersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterCapacityProvidersArgs)(nil)).Elem()
}

type ClusterCapacityProvidersInput interface {
	pulumi.Input

	ToClusterCapacityProvidersOutput() ClusterCapacityProvidersOutput
	ToClusterCapacityProvidersOutputWithContext(ctx context.Context) ClusterCapacityProvidersOutput
}

func (*ClusterCapacityProviders) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterCapacityProviders)(nil)).Elem()
}

func (i *ClusterCapacityProviders) ToClusterCapacityProvidersOutput() ClusterCapacityProvidersOutput {
	return i.ToClusterCapacityProvidersOutputWithContext(context.Background())
}

func (i *ClusterCapacityProviders) ToClusterCapacityProvidersOutputWithContext(ctx context.Context) ClusterCapacityProvidersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCapacityProvidersOutput)
}

// ClusterCapacityProvidersArrayInput is an input type that accepts ClusterCapacityProvidersArray and ClusterCapacityProvidersArrayOutput values.
// You can construct a concrete instance of `ClusterCapacityProvidersArrayInput` via:
//
//	ClusterCapacityProvidersArray{ ClusterCapacityProvidersArgs{...} }
type ClusterCapacityProvidersArrayInput interface {
	pulumi.Input

	ToClusterCapacityProvidersArrayOutput() ClusterCapacityProvidersArrayOutput
	ToClusterCapacityProvidersArrayOutputWithContext(context.Context) ClusterCapacityProvidersArrayOutput
}

type ClusterCapacityProvidersArray []ClusterCapacityProvidersInput

func (ClusterCapacityProvidersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClusterCapacityProviders)(nil)).Elem()
}

func (i ClusterCapacityProvidersArray) ToClusterCapacityProvidersArrayOutput() ClusterCapacityProvidersArrayOutput {
	return i.ToClusterCapacityProvidersArrayOutputWithContext(context.Background())
}

func (i ClusterCapacityProvidersArray) ToClusterCapacityProvidersArrayOutputWithContext(ctx context.Context) ClusterCapacityProvidersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCapacityProvidersArrayOutput)
}

// ClusterCapacityProvidersMapInput is an input type that accepts ClusterCapacityProvidersMap and ClusterCapacityProvidersMapOutput values.
// You can construct a concrete instance of `ClusterCapacityProvidersMapInput` via:
//
//	ClusterCapacityProvidersMap{ "key": ClusterCapacityProvidersArgs{...} }
type ClusterCapacityProvidersMapInput interface {
	pulumi.Input

	ToClusterCapacityProvidersMapOutput() ClusterCapacityProvidersMapOutput
	ToClusterCapacityProvidersMapOutputWithContext(context.Context) ClusterCapacityProvidersMapOutput
}

type ClusterCapacityProvidersMap map[string]ClusterCapacityProvidersInput

func (ClusterCapacityProvidersMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClusterCapacityProviders)(nil)).Elem()
}

func (i ClusterCapacityProvidersMap) ToClusterCapacityProvidersMapOutput() ClusterCapacityProvidersMapOutput {
	return i.ToClusterCapacityProvidersMapOutputWithContext(context.Background())
}

func (i ClusterCapacityProvidersMap) ToClusterCapacityProvidersMapOutputWithContext(ctx context.Context) ClusterCapacityProvidersMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCapacityProvidersMapOutput)
}

type ClusterCapacityProvidersOutput struct{ *pulumi.OutputState }

func (ClusterCapacityProvidersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterCapacityProviders)(nil)).Elem()
}

func (o ClusterCapacityProvidersOutput) ToClusterCapacityProvidersOutput() ClusterCapacityProvidersOutput {
	return o
}

func (o ClusterCapacityProvidersOutput) ToClusterCapacityProvidersOutputWithContext(ctx context.Context) ClusterCapacityProvidersOutput {
	return o
}

// Set of names of one or more capacity providers to associate with the cluster. Valid values also include `FARGATE` and `FARGATE_SPOT`.
func (o ClusterCapacityProvidersOutput) CapacityProviders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClusterCapacityProviders) pulumi.StringArrayOutput { return v.CapacityProviders }).(pulumi.StringArrayOutput)
}

// Name of the ECS cluster to manage capacity providers for.
func (o ClusterCapacityProvidersOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterCapacityProviders) pulumi.StringOutput { return v.ClusterName }).(pulumi.StringOutput)
}

// Set of capacity provider strategies to use by default for the cluster. Detailed below.
func (o ClusterCapacityProvidersOutput) DefaultCapacityProviderStrategies() ClusterCapacityProvidersDefaultCapacityProviderStrategyArrayOutput {
	return o.ApplyT(func(v *ClusterCapacityProviders) ClusterCapacityProvidersDefaultCapacityProviderStrategyArrayOutput {
		return v.DefaultCapacityProviderStrategies
	}).(ClusterCapacityProvidersDefaultCapacityProviderStrategyArrayOutput)
}

type ClusterCapacityProvidersArrayOutput struct{ *pulumi.OutputState }

func (ClusterCapacityProvidersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClusterCapacityProviders)(nil)).Elem()
}

func (o ClusterCapacityProvidersArrayOutput) ToClusterCapacityProvidersArrayOutput() ClusterCapacityProvidersArrayOutput {
	return o
}

func (o ClusterCapacityProvidersArrayOutput) ToClusterCapacityProvidersArrayOutputWithContext(ctx context.Context) ClusterCapacityProvidersArrayOutput {
	return o
}

func (o ClusterCapacityProvidersArrayOutput) Index(i pulumi.IntInput) ClusterCapacityProvidersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ClusterCapacityProviders {
		return vs[0].([]*ClusterCapacityProviders)[vs[1].(int)]
	}).(ClusterCapacityProvidersOutput)
}

type ClusterCapacityProvidersMapOutput struct{ *pulumi.OutputState }

func (ClusterCapacityProvidersMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClusterCapacityProviders)(nil)).Elem()
}

func (o ClusterCapacityProvidersMapOutput) ToClusterCapacityProvidersMapOutput() ClusterCapacityProvidersMapOutput {
	return o
}

func (o ClusterCapacityProvidersMapOutput) ToClusterCapacityProvidersMapOutputWithContext(ctx context.Context) ClusterCapacityProvidersMapOutput {
	return o
}

func (o ClusterCapacityProvidersMapOutput) MapIndex(k pulumi.StringInput) ClusterCapacityProvidersOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ClusterCapacityProviders {
		return vs[0].(map[string]*ClusterCapacityProviders)[vs[1].(string)]
	}).(ClusterCapacityProvidersOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterCapacityProvidersInput)(nil)).Elem(), &ClusterCapacityProviders{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterCapacityProvidersArrayInput)(nil)).Elem(), ClusterCapacityProvidersArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterCapacityProvidersMapInput)(nil)).Elem(), ClusterCapacityProvidersMap{})
	pulumi.RegisterOutputType(ClusterCapacityProvidersOutput{})
	pulumi.RegisterOutputType(ClusterCapacityProvidersArrayOutput{})
	pulumi.RegisterOutputType(ClusterCapacityProvidersMapOutput{})
}
