// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ses

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type EventDestination struct {
	pulumi.CustomResourceState

	Arn                    pulumi.StringOutput                              `pulumi:"arn"`
	CloudwatchDestinations EventDestinationCloudwatchDestinationArrayOutput `pulumi:"cloudwatchDestinations"`
	ConfigurationSetName   pulumi.StringOutput                              `pulumi:"configurationSetName"`
	Enabled                pulumi.BoolPtrOutput                             `pulumi:"enabled"`
	KinesisDestination     EventDestinationKinesisDestinationPtrOutput      `pulumi:"kinesisDestination"`
	MatchingTypes          pulumi.StringArrayOutput                         `pulumi:"matchingTypes"`
	Name                   pulumi.StringOutput                              `pulumi:"name"`
	SnsDestination         EventDestinationSnsDestinationPtrOutput          `pulumi:"snsDestination"`
}

// NewEventDestination registers a new resource with the given unique name, arguments, and options.
func NewEventDestination(ctx *pulumi.Context,
	name string, args *EventDestinationArgs, opts ...pulumi.ResourceOption) (*EventDestination, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConfigurationSetName == nil {
		return nil, errors.New("invalid value for required argument 'ConfigurationSetName'")
	}
	if args.MatchingTypes == nil {
		return nil, errors.New("invalid value for required argument 'MatchingTypes'")
	}
	var resource EventDestination
	err := ctx.RegisterResource("aws:ses/eventDestination:EventDestination", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEventDestination gets an existing EventDestination resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEventDestination(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EventDestinationState, opts ...pulumi.ResourceOption) (*EventDestination, error) {
	var resource EventDestination
	err := ctx.ReadResource("aws:ses/eventDestination:EventDestination", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EventDestination resources.
type eventDestinationState struct {
	Arn                    *string                                 `pulumi:"arn"`
	CloudwatchDestinations []EventDestinationCloudwatchDestination `pulumi:"cloudwatchDestinations"`
	ConfigurationSetName   *string                                 `pulumi:"configurationSetName"`
	Enabled                *bool                                   `pulumi:"enabled"`
	KinesisDestination     *EventDestinationKinesisDestination     `pulumi:"kinesisDestination"`
	MatchingTypes          []string                                `pulumi:"matchingTypes"`
	Name                   *string                                 `pulumi:"name"`
	SnsDestination         *EventDestinationSnsDestination         `pulumi:"snsDestination"`
}

type EventDestinationState struct {
	Arn                    pulumi.StringPtrInput
	CloudwatchDestinations EventDestinationCloudwatchDestinationArrayInput
	ConfigurationSetName   pulumi.StringPtrInput
	Enabled                pulumi.BoolPtrInput
	KinesisDestination     EventDestinationKinesisDestinationPtrInput
	MatchingTypes          pulumi.StringArrayInput
	Name                   pulumi.StringPtrInput
	SnsDestination         EventDestinationSnsDestinationPtrInput
}

func (EventDestinationState) ElementType() reflect.Type {
	return reflect.TypeOf((*eventDestinationState)(nil)).Elem()
}

type eventDestinationArgs struct {
	CloudwatchDestinations []EventDestinationCloudwatchDestination `pulumi:"cloudwatchDestinations"`
	ConfigurationSetName   string                                  `pulumi:"configurationSetName"`
	Enabled                *bool                                   `pulumi:"enabled"`
	KinesisDestination     *EventDestinationKinesisDestination     `pulumi:"kinesisDestination"`
	MatchingTypes          []string                                `pulumi:"matchingTypes"`
	Name                   *string                                 `pulumi:"name"`
	SnsDestination         *EventDestinationSnsDestination         `pulumi:"snsDestination"`
}

// The set of arguments for constructing a EventDestination resource.
type EventDestinationArgs struct {
	CloudwatchDestinations EventDestinationCloudwatchDestinationArrayInput
	ConfigurationSetName   pulumi.StringInput
	Enabled                pulumi.BoolPtrInput
	KinesisDestination     EventDestinationKinesisDestinationPtrInput
	MatchingTypes          pulumi.StringArrayInput
	Name                   pulumi.StringPtrInput
	SnsDestination         EventDestinationSnsDestinationPtrInput
}

func (EventDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*eventDestinationArgs)(nil)).Elem()
}

type EventDestinationInput interface {
	pulumi.Input

	ToEventDestinationOutput() EventDestinationOutput
	ToEventDestinationOutputWithContext(ctx context.Context) EventDestinationOutput
}

func (*EventDestination) ElementType() reflect.Type {
	return reflect.TypeOf((**EventDestination)(nil)).Elem()
}

func (i *EventDestination) ToEventDestinationOutput() EventDestinationOutput {
	return i.ToEventDestinationOutputWithContext(context.Background())
}

func (i *EventDestination) ToEventDestinationOutputWithContext(ctx context.Context) EventDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventDestinationOutput)
}

// EventDestinationArrayInput is an input type that accepts EventDestinationArray and EventDestinationArrayOutput values.
// You can construct a concrete instance of `EventDestinationArrayInput` via:
//
//	EventDestinationArray{ EventDestinationArgs{...} }
type EventDestinationArrayInput interface {
	pulumi.Input

	ToEventDestinationArrayOutput() EventDestinationArrayOutput
	ToEventDestinationArrayOutputWithContext(context.Context) EventDestinationArrayOutput
}

type EventDestinationArray []EventDestinationInput

func (EventDestinationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EventDestination)(nil)).Elem()
}

func (i EventDestinationArray) ToEventDestinationArrayOutput() EventDestinationArrayOutput {
	return i.ToEventDestinationArrayOutputWithContext(context.Background())
}

func (i EventDestinationArray) ToEventDestinationArrayOutputWithContext(ctx context.Context) EventDestinationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventDestinationArrayOutput)
}

// EventDestinationMapInput is an input type that accepts EventDestinationMap and EventDestinationMapOutput values.
// You can construct a concrete instance of `EventDestinationMapInput` via:
//
//	EventDestinationMap{ "key": EventDestinationArgs{...} }
type EventDestinationMapInput interface {
	pulumi.Input

	ToEventDestinationMapOutput() EventDestinationMapOutput
	ToEventDestinationMapOutputWithContext(context.Context) EventDestinationMapOutput
}

type EventDestinationMap map[string]EventDestinationInput

func (EventDestinationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EventDestination)(nil)).Elem()
}

func (i EventDestinationMap) ToEventDestinationMapOutput() EventDestinationMapOutput {
	return i.ToEventDestinationMapOutputWithContext(context.Background())
}

func (i EventDestinationMap) ToEventDestinationMapOutputWithContext(ctx context.Context) EventDestinationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventDestinationMapOutput)
}

type EventDestinationOutput struct{ *pulumi.OutputState }

func (EventDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventDestination)(nil)).Elem()
}

func (o EventDestinationOutput) ToEventDestinationOutput() EventDestinationOutput {
	return o
}

func (o EventDestinationOutput) ToEventDestinationOutputWithContext(ctx context.Context) EventDestinationOutput {
	return o
}

func (o EventDestinationOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *EventDestination) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o EventDestinationOutput) CloudwatchDestinations() EventDestinationCloudwatchDestinationArrayOutput {
	return o.ApplyT(func(v *EventDestination) EventDestinationCloudwatchDestinationArrayOutput {
		return v.CloudwatchDestinations
	}).(EventDestinationCloudwatchDestinationArrayOutput)
}

func (o EventDestinationOutput) ConfigurationSetName() pulumi.StringOutput {
	return o.ApplyT(func(v *EventDestination) pulumi.StringOutput { return v.ConfigurationSetName }).(pulumi.StringOutput)
}

func (o EventDestinationOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EventDestination) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o EventDestinationOutput) KinesisDestination() EventDestinationKinesisDestinationPtrOutput {
	return o.ApplyT(func(v *EventDestination) EventDestinationKinesisDestinationPtrOutput { return v.KinesisDestination }).(EventDestinationKinesisDestinationPtrOutput)
}

func (o EventDestinationOutput) MatchingTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EventDestination) pulumi.StringArrayOutput { return v.MatchingTypes }).(pulumi.StringArrayOutput)
}

func (o EventDestinationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *EventDestination) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o EventDestinationOutput) SnsDestination() EventDestinationSnsDestinationPtrOutput {
	return o.ApplyT(func(v *EventDestination) EventDestinationSnsDestinationPtrOutput { return v.SnsDestination }).(EventDestinationSnsDestinationPtrOutput)
}

type EventDestinationArrayOutput struct{ *pulumi.OutputState }

func (EventDestinationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EventDestination)(nil)).Elem()
}

func (o EventDestinationArrayOutput) ToEventDestinationArrayOutput() EventDestinationArrayOutput {
	return o
}

func (o EventDestinationArrayOutput) ToEventDestinationArrayOutputWithContext(ctx context.Context) EventDestinationArrayOutput {
	return o
}

func (o EventDestinationArrayOutput) Index(i pulumi.IntInput) EventDestinationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EventDestination {
		return vs[0].([]*EventDestination)[vs[1].(int)]
	}).(EventDestinationOutput)
}

type EventDestinationMapOutput struct{ *pulumi.OutputState }

func (EventDestinationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EventDestination)(nil)).Elem()
}

func (o EventDestinationMapOutput) ToEventDestinationMapOutput() EventDestinationMapOutput {
	return o
}

func (o EventDestinationMapOutput) ToEventDestinationMapOutputWithContext(ctx context.Context) EventDestinationMapOutput {
	return o
}

func (o EventDestinationMapOutput) MapIndex(k pulumi.StringInput) EventDestinationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EventDestination {
		return vs[0].(map[string]*EventDestination)[vs[1].(string)]
	}).(EventDestinationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EventDestinationInput)(nil)).Elem(), &EventDestination{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventDestinationArrayInput)(nil)).Elem(), EventDestinationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventDestinationMapInput)(nil)).Elem(), EventDestinationMap{})
	pulumi.RegisterOutputType(EventDestinationOutput{})
	pulumi.RegisterOutputType(EventDestinationArrayOutput{})
	pulumi.RegisterOutputType(EventDestinationMapOutput{})
}
