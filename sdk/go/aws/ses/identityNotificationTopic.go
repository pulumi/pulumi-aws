// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ses

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type IdentityNotificationTopic struct {
	pulumi.CustomResourceState

	Identity               pulumi.StringOutput    `pulumi:"identity"`
	IncludeOriginalHeaders pulumi.BoolPtrOutput   `pulumi:"includeOriginalHeaders"`
	NotificationType       pulumi.StringOutput    `pulumi:"notificationType"`
	TopicArn               pulumi.StringPtrOutput `pulumi:"topicArn"`
}

// NewIdentityNotificationTopic registers a new resource with the given unique name, arguments, and options.
func NewIdentityNotificationTopic(ctx *pulumi.Context,
	name string, args *IdentityNotificationTopicArgs, opts ...pulumi.ResourceOption) (*IdentityNotificationTopic, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Identity == nil {
		return nil, errors.New("invalid value for required argument 'Identity'")
	}
	if args.NotificationType == nil {
		return nil, errors.New("invalid value for required argument 'NotificationType'")
	}
	var resource IdentityNotificationTopic
	err := ctx.RegisterResource("aws:ses/identityNotificationTopic:IdentityNotificationTopic", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIdentityNotificationTopic gets an existing IdentityNotificationTopic resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIdentityNotificationTopic(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IdentityNotificationTopicState, opts ...pulumi.ResourceOption) (*IdentityNotificationTopic, error) {
	var resource IdentityNotificationTopic
	err := ctx.ReadResource("aws:ses/identityNotificationTopic:IdentityNotificationTopic", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IdentityNotificationTopic resources.
type identityNotificationTopicState struct {
	Identity               *string `pulumi:"identity"`
	IncludeOriginalHeaders *bool   `pulumi:"includeOriginalHeaders"`
	NotificationType       *string `pulumi:"notificationType"`
	TopicArn               *string `pulumi:"topicArn"`
}

type IdentityNotificationTopicState struct {
	Identity               pulumi.StringPtrInput
	IncludeOriginalHeaders pulumi.BoolPtrInput
	NotificationType       pulumi.StringPtrInput
	TopicArn               pulumi.StringPtrInput
}

func (IdentityNotificationTopicState) ElementType() reflect.Type {
	return reflect.TypeOf((*identityNotificationTopicState)(nil)).Elem()
}

type identityNotificationTopicArgs struct {
	Identity               string  `pulumi:"identity"`
	IncludeOriginalHeaders *bool   `pulumi:"includeOriginalHeaders"`
	NotificationType       string  `pulumi:"notificationType"`
	TopicArn               *string `pulumi:"topicArn"`
}

// The set of arguments for constructing a IdentityNotificationTopic resource.
type IdentityNotificationTopicArgs struct {
	Identity               pulumi.StringInput
	IncludeOriginalHeaders pulumi.BoolPtrInput
	NotificationType       pulumi.StringInput
	TopicArn               pulumi.StringPtrInput
}

func (IdentityNotificationTopicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*identityNotificationTopicArgs)(nil)).Elem()
}

type IdentityNotificationTopicInput interface {
	pulumi.Input

	ToIdentityNotificationTopicOutput() IdentityNotificationTopicOutput
	ToIdentityNotificationTopicOutputWithContext(ctx context.Context) IdentityNotificationTopicOutput
}

func (*IdentityNotificationTopic) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityNotificationTopic)(nil)).Elem()
}

func (i *IdentityNotificationTopic) ToIdentityNotificationTopicOutput() IdentityNotificationTopicOutput {
	return i.ToIdentityNotificationTopicOutputWithContext(context.Background())
}

func (i *IdentityNotificationTopic) ToIdentityNotificationTopicOutputWithContext(ctx context.Context) IdentityNotificationTopicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityNotificationTopicOutput)
}

// IdentityNotificationTopicArrayInput is an input type that accepts IdentityNotificationTopicArray and IdentityNotificationTopicArrayOutput values.
// You can construct a concrete instance of `IdentityNotificationTopicArrayInput` via:
//
//	IdentityNotificationTopicArray{ IdentityNotificationTopicArgs{...} }
type IdentityNotificationTopicArrayInput interface {
	pulumi.Input

	ToIdentityNotificationTopicArrayOutput() IdentityNotificationTopicArrayOutput
	ToIdentityNotificationTopicArrayOutputWithContext(context.Context) IdentityNotificationTopicArrayOutput
}

type IdentityNotificationTopicArray []IdentityNotificationTopicInput

func (IdentityNotificationTopicArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IdentityNotificationTopic)(nil)).Elem()
}

func (i IdentityNotificationTopicArray) ToIdentityNotificationTopicArrayOutput() IdentityNotificationTopicArrayOutput {
	return i.ToIdentityNotificationTopicArrayOutputWithContext(context.Background())
}

func (i IdentityNotificationTopicArray) ToIdentityNotificationTopicArrayOutputWithContext(ctx context.Context) IdentityNotificationTopicArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityNotificationTopicArrayOutput)
}

// IdentityNotificationTopicMapInput is an input type that accepts IdentityNotificationTopicMap and IdentityNotificationTopicMapOutput values.
// You can construct a concrete instance of `IdentityNotificationTopicMapInput` via:
//
//	IdentityNotificationTopicMap{ "key": IdentityNotificationTopicArgs{...} }
type IdentityNotificationTopicMapInput interface {
	pulumi.Input

	ToIdentityNotificationTopicMapOutput() IdentityNotificationTopicMapOutput
	ToIdentityNotificationTopicMapOutputWithContext(context.Context) IdentityNotificationTopicMapOutput
}

type IdentityNotificationTopicMap map[string]IdentityNotificationTopicInput

func (IdentityNotificationTopicMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IdentityNotificationTopic)(nil)).Elem()
}

func (i IdentityNotificationTopicMap) ToIdentityNotificationTopicMapOutput() IdentityNotificationTopicMapOutput {
	return i.ToIdentityNotificationTopicMapOutputWithContext(context.Background())
}

func (i IdentityNotificationTopicMap) ToIdentityNotificationTopicMapOutputWithContext(ctx context.Context) IdentityNotificationTopicMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityNotificationTopicMapOutput)
}

type IdentityNotificationTopicOutput struct{ *pulumi.OutputState }

func (IdentityNotificationTopicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityNotificationTopic)(nil)).Elem()
}

func (o IdentityNotificationTopicOutput) ToIdentityNotificationTopicOutput() IdentityNotificationTopicOutput {
	return o
}

func (o IdentityNotificationTopicOutput) ToIdentityNotificationTopicOutputWithContext(ctx context.Context) IdentityNotificationTopicOutput {
	return o
}

func (o IdentityNotificationTopicOutput) Identity() pulumi.StringOutput {
	return o.ApplyT(func(v *IdentityNotificationTopic) pulumi.StringOutput { return v.Identity }).(pulumi.StringOutput)
}

func (o IdentityNotificationTopicOutput) IncludeOriginalHeaders() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *IdentityNotificationTopic) pulumi.BoolPtrOutput { return v.IncludeOriginalHeaders }).(pulumi.BoolPtrOutput)
}

func (o IdentityNotificationTopicOutput) NotificationType() pulumi.StringOutput {
	return o.ApplyT(func(v *IdentityNotificationTopic) pulumi.StringOutput { return v.NotificationType }).(pulumi.StringOutput)
}

func (o IdentityNotificationTopicOutput) TopicArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityNotificationTopic) pulumi.StringPtrOutput { return v.TopicArn }).(pulumi.StringPtrOutput)
}

type IdentityNotificationTopicArrayOutput struct{ *pulumi.OutputState }

func (IdentityNotificationTopicArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IdentityNotificationTopic)(nil)).Elem()
}

func (o IdentityNotificationTopicArrayOutput) ToIdentityNotificationTopicArrayOutput() IdentityNotificationTopicArrayOutput {
	return o
}

func (o IdentityNotificationTopicArrayOutput) ToIdentityNotificationTopicArrayOutputWithContext(ctx context.Context) IdentityNotificationTopicArrayOutput {
	return o
}

func (o IdentityNotificationTopicArrayOutput) Index(i pulumi.IntInput) IdentityNotificationTopicOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IdentityNotificationTopic {
		return vs[0].([]*IdentityNotificationTopic)[vs[1].(int)]
	}).(IdentityNotificationTopicOutput)
}

type IdentityNotificationTopicMapOutput struct{ *pulumi.OutputState }

func (IdentityNotificationTopicMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IdentityNotificationTopic)(nil)).Elem()
}

func (o IdentityNotificationTopicMapOutput) ToIdentityNotificationTopicMapOutput() IdentityNotificationTopicMapOutput {
	return o
}

func (o IdentityNotificationTopicMapOutput) ToIdentityNotificationTopicMapOutputWithContext(ctx context.Context) IdentityNotificationTopicMapOutput {
	return o
}

func (o IdentityNotificationTopicMapOutput) MapIndex(k pulumi.StringInput) IdentityNotificationTopicOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IdentityNotificationTopic {
		return vs[0].(map[string]*IdentityNotificationTopic)[vs[1].(string)]
	}).(IdentityNotificationTopicOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IdentityNotificationTopicInput)(nil)).Elem(), &IdentityNotificationTopic{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdentityNotificationTopicArrayInput)(nil)).Elem(), IdentityNotificationTopicArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdentityNotificationTopicMapInput)(nil)).Elem(), IdentityNotificationTopicMap{})
	pulumi.RegisterOutputType(IdentityNotificationTopicOutput{})
	pulumi.RegisterOutputType(IdentityNotificationTopicArrayOutput{})
	pulumi.RegisterOutputType(IdentityNotificationTopicMapOutput{})
}
