// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ses

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type MailFrom struct {
	pulumi.CustomResourceState

	BehaviorOnMxFailure pulumi.StringPtrOutput `pulumi:"behaviorOnMxFailure"`
	Domain              pulumi.StringOutput    `pulumi:"domain"`
	MailFromDomain      pulumi.StringOutput    `pulumi:"mailFromDomain"`
}

// NewMailFrom registers a new resource with the given unique name, arguments, and options.
func NewMailFrom(ctx *pulumi.Context,
	name string, args *MailFromArgs, opts ...pulumi.ResourceOption) (*MailFrom, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Domain == nil {
		return nil, errors.New("invalid value for required argument 'Domain'")
	}
	if args.MailFromDomain == nil {
		return nil, errors.New("invalid value for required argument 'MailFromDomain'")
	}
	var resource MailFrom
	err := ctx.RegisterResource("aws:ses/mailFrom:MailFrom", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMailFrom gets an existing MailFrom resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMailFrom(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MailFromState, opts ...pulumi.ResourceOption) (*MailFrom, error) {
	var resource MailFrom
	err := ctx.ReadResource("aws:ses/mailFrom:MailFrom", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MailFrom resources.
type mailFromState struct {
	BehaviorOnMxFailure *string `pulumi:"behaviorOnMxFailure"`
	Domain              *string `pulumi:"domain"`
	MailFromDomain      *string `pulumi:"mailFromDomain"`
}

type MailFromState struct {
	BehaviorOnMxFailure pulumi.StringPtrInput
	Domain              pulumi.StringPtrInput
	MailFromDomain      pulumi.StringPtrInput
}

func (MailFromState) ElementType() reflect.Type {
	return reflect.TypeOf((*mailFromState)(nil)).Elem()
}

type mailFromArgs struct {
	BehaviorOnMxFailure *string `pulumi:"behaviorOnMxFailure"`
	Domain              string  `pulumi:"domain"`
	MailFromDomain      string  `pulumi:"mailFromDomain"`
}

// The set of arguments for constructing a MailFrom resource.
type MailFromArgs struct {
	BehaviorOnMxFailure pulumi.StringPtrInput
	Domain              pulumi.StringInput
	MailFromDomain      pulumi.StringInput
}

func (MailFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mailFromArgs)(nil)).Elem()
}

type MailFromInput interface {
	pulumi.Input

	ToMailFromOutput() MailFromOutput
	ToMailFromOutputWithContext(ctx context.Context) MailFromOutput
}

func (*MailFrom) ElementType() reflect.Type {
	return reflect.TypeOf((**MailFrom)(nil)).Elem()
}

func (i *MailFrom) ToMailFromOutput() MailFromOutput {
	return i.ToMailFromOutputWithContext(context.Background())
}

func (i *MailFrom) ToMailFromOutputWithContext(ctx context.Context) MailFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MailFromOutput)
}

// MailFromArrayInput is an input type that accepts MailFromArray and MailFromArrayOutput values.
// You can construct a concrete instance of `MailFromArrayInput` via:
//
//	MailFromArray{ MailFromArgs{...} }
type MailFromArrayInput interface {
	pulumi.Input

	ToMailFromArrayOutput() MailFromArrayOutput
	ToMailFromArrayOutputWithContext(context.Context) MailFromArrayOutput
}

type MailFromArray []MailFromInput

func (MailFromArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MailFrom)(nil)).Elem()
}

func (i MailFromArray) ToMailFromArrayOutput() MailFromArrayOutput {
	return i.ToMailFromArrayOutputWithContext(context.Background())
}

func (i MailFromArray) ToMailFromArrayOutputWithContext(ctx context.Context) MailFromArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MailFromArrayOutput)
}

// MailFromMapInput is an input type that accepts MailFromMap and MailFromMapOutput values.
// You can construct a concrete instance of `MailFromMapInput` via:
//
//	MailFromMap{ "key": MailFromArgs{...} }
type MailFromMapInput interface {
	pulumi.Input

	ToMailFromMapOutput() MailFromMapOutput
	ToMailFromMapOutputWithContext(context.Context) MailFromMapOutput
}

type MailFromMap map[string]MailFromInput

func (MailFromMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MailFrom)(nil)).Elem()
}

func (i MailFromMap) ToMailFromMapOutput() MailFromMapOutput {
	return i.ToMailFromMapOutputWithContext(context.Background())
}

func (i MailFromMap) ToMailFromMapOutputWithContext(ctx context.Context) MailFromMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MailFromMapOutput)
}

type MailFromOutput struct{ *pulumi.OutputState }

func (MailFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MailFrom)(nil)).Elem()
}

func (o MailFromOutput) ToMailFromOutput() MailFromOutput {
	return o
}

func (o MailFromOutput) ToMailFromOutputWithContext(ctx context.Context) MailFromOutput {
	return o
}

func (o MailFromOutput) BehaviorOnMxFailure() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MailFrom) pulumi.StringPtrOutput { return v.BehaviorOnMxFailure }).(pulumi.StringPtrOutput)
}

func (o MailFromOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v *MailFrom) pulumi.StringOutput { return v.Domain }).(pulumi.StringOutput)
}

func (o MailFromOutput) MailFromDomain() pulumi.StringOutput {
	return o.ApplyT(func(v *MailFrom) pulumi.StringOutput { return v.MailFromDomain }).(pulumi.StringOutput)
}

type MailFromArrayOutput struct{ *pulumi.OutputState }

func (MailFromArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MailFrom)(nil)).Elem()
}

func (o MailFromArrayOutput) ToMailFromArrayOutput() MailFromArrayOutput {
	return o
}

func (o MailFromArrayOutput) ToMailFromArrayOutputWithContext(ctx context.Context) MailFromArrayOutput {
	return o
}

func (o MailFromArrayOutput) Index(i pulumi.IntInput) MailFromOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MailFrom {
		return vs[0].([]*MailFrom)[vs[1].(int)]
	}).(MailFromOutput)
}

type MailFromMapOutput struct{ *pulumi.OutputState }

func (MailFromMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MailFrom)(nil)).Elem()
}

func (o MailFromMapOutput) ToMailFromMapOutput() MailFromMapOutput {
	return o
}

func (o MailFromMapOutput) ToMailFromMapOutputWithContext(ctx context.Context) MailFromMapOutput {
	return o
}

func (o MailFromMapOutput) MapIndex(k pulumi.StringInput) MailFromOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MailFrom {
		return vs[0].(map[string]*MailFrom)[vs[1].(string)]
	}).(MailFromOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MailFromInput)(nil)).Elem(), &MailFrom{})
	pulumi.RegisterInputType(reflect.TypeOf((*MailFromArrayInput)(nil)).Elem(), MailFromArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MailFromMapInput)(nil)).Elem(), MailFromMap{})
	pulumi.RegisterOutputType(MailFromOutput{})
	pulumi.RegisterOutputType(MailFromArrayOutput{})
	pulumi.RegisterOutputType(MailFromMapOutput{})
}
