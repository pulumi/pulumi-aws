// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ses

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ReceiptFilter struct {
	pulumi.CustomResourceState

	Arn    pulumi.StringOutput `pulumi:"arn"`
	Cidr   pulumi.StringOutput `pulumi:"cidr"`
	Name   pulumi.StringOutput `pulumi:"name"`
	Policy pulumi.StringOutput `pulumi:"policy"`
}

// NewReceiptFilter registers a new resource with the given unique name, arguments, and options.
func NewReceiptFilter(ctx *pulumi.Context,
	name string, args *ReceiptFilterArgs, opts ...pulumi.ResourceOption) (*ReceiptFilter, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Cidr == nil {
		return nil, errors.New("invalid value for required argument 'Cidr'")
	}
	if args.Policy == nil {
		return nil, errors.New("invalid value for required argument 'Policy'")
	}
	var resource ReceiptFilter
	err := ctx.RegisterResource("aws:ses/receiptFilter:ReceiptFilter", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetReceiptFilter gets an existing ReceiptFilter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetReceiptFilter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ReceiptFilterState, opts ...pulumi.ResourceOption) (*ReceiptFilter, error) {
	var resource ReceiptFilter
	err := ctx.ReadResource("aws:ses/receiptFilter:ReceiptFilter", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ReceiptFilter resources.
type receiptFilterState struct {
	Arn    *string `pulumi:"arn"`
	Cidr   *string `pulumi:"cidr"`
	Name   *string `pulumi:"name"`
	Policy *string `pulumi:"policy"`
}

type ReceiptFilterState struct {
	Arn    pulumi.StringPtrInput
	Cidr   pulumi.StringPtrInput
	Name   pulumi.StringPtrInput
	Policy pulumi.StringPtrInput
}

func (ReceiptFilterState) ElementType() reflect.Type {
	return reflect.TypeOf((*receiptFilterState)(nil)).Elem()
}

type receiptFilterArgs struct {
	Cidr   string  `pulumi:"cidr"`
	Name   *string `pulumi:"name"`
	Policy string  `pulumi:"policy"`
}

// The set of arguments for constructing a ReceiptFilter resource.
type ReceiptFilterArgs struct {
	Cidr   pulumi.StringInput
	Name   pulumi.StringPtrInput
	Policy pulumi.StringInput
}

func (ReceiptFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*receiptFilterArgs)(nil)).Elem()
}

type ReceiptFilterInput interface {
	pulumi.Input

	ToReceiptFilterOutput() ReceiptFilterOutput
	ToReceiptFilterOutputWithContext(ctx context.Context) ReceiptFilterOutput
}

func (*ReceiptFilter) ElementType() reflect.Type {
	return reflect.TypeOf((**ReceiptFilter)(nil)).Elem()
}

func (i *ReceiptFilter) ToReceiptFilterOutput() ReceiptFilterOutput {
	return i.ToReceiptFilterOutputWithContext(context.Background())
}

func (i *ReceiptFilter) ToReceiptFilterOutputWithContext(ctx context.Context) ReceiptFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReceiptFilterOutput)
}

// ReceiptFilterArrayInput is an input type that accepts ReceiptFilterArray and ReceiptFilterArrayOutput values.
// You can construct a concrete instance of `ReceiptFilterArrayInput` via:
//
//	ReceiptFilterArray{ ReceiptFilterArgs{...} }
type ReceiptFilterArrayInput interface {
	pulumi.Input

	ToReceiptFilterArrayOutput() ReceiptFilterArrayOutput
	ToReceiptFilterArrayOutputWithContext(context.Context) ReceiptFilterArrayOutput
}

type ReceiptFilterArray []ReceiptFilterInput

func (ReceiptFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ReceiptFilter)(nil)).Elem()
}

func (i ReceiptFilterArray) ToReceiptFilterArrayOutput() ReceiptFilterArrayOutput {
	return i.ToReceiptFilterArrayOutputWithContext(context.Background())
}

func (i ReceiptFilterArray) ToReceiptFilterArrayOutputWithContext(ctx context.Context) ReceiptFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReceiptFilterArrayOutput)
}

// ReceiptFilterMapInput is an input type that accepts ReceiptFilterMap and ReceiptFilterMapOutput values.
// You can construct a concrete instance of `ReceiptFilterMapInput` via:
//
//	ReceiptFilterMap{ "key": ReceiptFilterArgs{...} }
type ReceiptFilterMapInput interface {
	pulumi.Input

	ToReceiptFilterMapOutput() ReceiptFilterMapOutput
	ToReceiptFilterMapOutputWithContext(context.Context) ReceiptFilterMapOutput
}

type ReceiptFilterMap map[string]ReceiptFilterInput

func (ReceiptFilterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ReceiptFilter)(nil)).Elem()
}

func (i ReceiptFilterMap) ToReceiptFilterMapOutput() ReceiptFilterMapOutput {
	return i.ToReceiptFilterMapOutputWithContext(context.Background())
}

func (i ReceiptFilterMap) ToReceiptFilterMapOutputWithContext(ctx context.Context) ReceiptFilterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReceiptFilterMapOutput)
}

type ReceiptFilterOutput struct{ *pulumi.OutputState }

func (ReceiptFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReceiptFilter)(nil)).Elem()
}

func (o ReceiptFilterOutput) ToReceiptFilterOutput() ReceiptFilterOutput {
	return o
}

func (o ReceiptFilterOutput) ToReceiptFilterOutputWithContext(ctx context.Context) ReceiptFilterOutput {
	return o
}

func (o ReceiptFilterOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *ReceiptFilter) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o ReceiptFilterOutput) Cidr() pulumi.StringOutput {
	return o.ApplyT(func(v *ReceiptFilter) pulumi.StringOutput { return v.Cidr }).(pulumi.StringOutput)
}

func (o ReceiptFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ReceiptFilter) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ReceiptFilterOutput) Policy() pulumi.StringOutput {
	return o.ApplyT(func(v *ReceiptFilter) pulumi.StringOutput { return v.Policy }).(pulumi.StringOutput)
}

type ReceiptFilterArrayOutput struct{ *pulumi.OutputState }

func (ReceiptFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ReceiptFilter)(nil)).Elem()
}

func (o ReceiptFilterArrayOutput) ToReceiptFilterArrayOutput() ReceiptFilterArrayOutput {
	return o
}

func (o ReceiptFilterArrayOutput) ToReceiptFilterArrayOutputWithContext(ctx context.Context) ReceiptFilterArrayOutput {
	return o
}

func (o ReceiptFilterArrayOutput) Index(i pulumi.IntInput) ReceiptFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ReceiptFilter {
		return vs[0].([]*ReceiptFilter)[vs[1].(int)]
	}).(ReceiptFilterOutput)
}

type ReceiptFilterMapOutput struct{ *pulumi.OutputState }

func (ReceiptFilterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ReceiptFilter)(nil)).Elem()
}

func (o ReceiptFilterMapOutput) ToReceiptFilterMapOutput() ReceiptFilterMapOutput {
	return o
}

func (o ReceiptFilterMapOutput) ToReceiptFilterMapOutputWithContext(ctx context.Context) ReceiptFilterMapOutput {
	return o
}

func (o ReceiptFilterMapOutput) MapIndex(k pulumi.StringInput) ReceiptFilterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ReceiptFilter {
		return vs[0].(map[string]*ReceiptFilter)[vs[1].(string)]
	}).(ReceiptFilterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ReceiptFilterInput)(nil)).Elem(), &ReceiptFilter{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReceiptFilterArrayInput)(nil)).Elem(), ReceiptFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReceiptFilterMapInput)(nil)).Elem(), ReceiptFilterMap{})
	pulumi.RegisterOutputType(ReceiptFilterOutput{})
	pulumi.RegisterOutputType(ReceiptFilterArrayOutput{})
	pulumi.RegisterOutputType(ReceiptFilterMapOutput{})
}
