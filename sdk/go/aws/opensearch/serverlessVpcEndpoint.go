// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package opensearch

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing an AWS OpenSearchServerless VPC Endpoint.
//
// ## Example Usage
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/opensearch"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := opensearch.NewServerlessVpcEndpoint(ctx, "example", &opensearch.ServerlessVpcEndpointArgs{
//				Name: pulumi.String("myendpoint"),
//				SubnetIds: pulumi.StringArray{
//					aws_subnet.Example.Id,
//				},
//				VpcId: pulumi.Any(aws_vpc.Example.Id),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// terraform import {
//
//	to = aws_opensearchserverless_vpc_endpoint.example
//
//	id = "vpce-8012925589" } Using `pulumi import`, import OpenSearchServerless Vpc Endpointa using the `id`. For exampleconsole % pulumi import aws_opensearchserverless_vpc_endpoint.example vpce-8012925589
type ServerlessVpcEndpoint struct {
	pulumi.CustomResourceState

	// Name of the interface endpoint.
	Name pulumi.StringOutput `pulumi:"name"`
	// One or more security groups that define the ports, protocols, and sources for inbound traffic that you are authorizing into your endpoint. Up to 5 security groups can be provided.
	SecurityGroupIds pulumi.StringArrayOutput `pulumi:"securityGroupIds"`
	// One or more subnet IDs from which you'll access OpenSearch Serverless. Up to 6 subnets can be provided.
	SubnetIds pulumi.StringArrayOutput               `pulumi:"subnetIds"`
	Timeouts  ServerlessVpcEndpointTimeoutsPtrOutput `pulumi:"timeouts"`
	// ID of the VPC from which you'll access OpenSearch Serverless.
	//
	// The following arguments are optional:
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewServerlessVpcEndpoint registers a new resource with the given unique name, arguments, and options.
func NewServerlessVpcEndpoint(ctx *pulumi.Context,
	name string, args *ServerlessVpcEndpointArgs, opts ...pulumi.ResourceOption) (*ServerlessVpcEndpoint, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.SubnetIds == nil {
		return nil, errors.New("invalid value for required argument 'SubnetIds'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServerlessVpcEndpoint
	err := ctx.RegisterResource("aws:opensearch/serverlessVpcEndpoint:ServerlessVpcEndpoint", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServerlessVpcEndpoint gets an existing ServerlessVpcEndpoint resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServerlessVpcEndpoint(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServerlessVpcEndpointState, opts ...pulumi.ResourceOption) (*ServerlessVpcEndpoint, error) {
	var resource ServerlessVpcEndpoint
	err := ctx.ReadResource("aws:opensearch/serverlessVpcEndpoint:ServerlessVpcEndpoint", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServerlessVpcEndpoint resources.
type serverlessVpcEndpointState struct {
	// Name of the interface endpoint.
	Name *string `pulumi:"name"`
	// One or more security groups that define the ports, protocols, and sources for inbound traffic that you are authorizing into your endpoint. Up to 5 security groups can be provided.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// One or more subnet IDs from which you'll access OpenSearch Serverless. Up to 6 subnets can be provided.
	SubnetIds []string                       `pulumi:"subnetIds"`
	Timeouts  *ServerlessVpcEndpointTimeouts `pulumi:"timeouts"`
	// ID of the VPC from which you'll access OpenSearch Serverless.
	//
	// The following arguments are optional:
	VpcId *string `pulumi:"vpcId"`
}

type ServerlessVpcEndpointState struct {
	// Name of the interface endpoint.
	Name pulumi.StringPtrInput
	// One or more security groups that define the ports, protocols, and sources for inbound traffic that you are authorizing into your endpoint. Up to 5 security groups can be provided.
	SecurityGroupIds pulumi.StringArrayInput
	// One or more subnet IDs from which you'll access OpenSearch Serverless. Up to 6 subnets can be provided.
	SubnetIds pulumi.StringArrayInput
	Timeouts  ServerlessVpcEndpointTimeoutsPtrInput
	// ID of the VPC from which you'll access OpenSearch Serverless.
	//
	// The following arguments are optional:
	VpcId pulumi.StringPtrInput
}

func (ServerlessVpcEndpointState) ElementType() reflect.Type {
	return reflect.TypeOf((*serverlessVpcEndpointState)(nil)).Elem()
}

type serverlessVpcEndpointArgs struct {
	// Name of the interface endpoint.
	Name string `pulumi:"name"`
	// One or more security groups that define the ports, protocols, and sources for inbound traffic that you are authorizing into your endpoint. Up to 5 security groups can be provided.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// One or more subnet IDs from which you'll access OpenSearch Serverless. Up to 6 subnets can be provided.
	SubnetIds []string                       `pulumi:"subnetIds"`
	Timeouts  *ServerlessVpcEndpointTimeouts `pulumi:"timeouts"`
	// ID of the VPC from which you'll access OpenSearch Serverless.
	//
	// The following arguments are optional:
	VpcId string `pulumi:"vpcId"`
}

// The set of arguments for constructing a ServerlessVpcEndpoint resource.
type ServerlessVpcEndpointArgs struct {
	// Name of the interface endpoint.
	Name pulumi.StringInput
	// One or more security groups that define the ports, protocols, and sources for inbound traffic that you are authorizing into your endpoint. Up to 5 security groups can be provided.
	SecurityGroupIds pulumi.StringArrayInput
	// One or more subnet IDs from which you'll access OpenSearch Serverless. Up to 6 subnets can be provided.
	SubnetIds pulumi.StringArrayInput
	Timeouts  ServerlessVpcEndpointTimeoutsPtrInput
	// ID of the VPC from which you'll access OpenSearch Serverless.
	//
	// The following arguments are optional:
	VpcId pulumi.StringInput
}

func (ServerlessVpcEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serverlessVpcEndpointArgs)(nil)).Elem()
}

type ServerlessVpcEndpointInput interface {
	pulumi.Input

	ToServerlessVpcEndpointOutput() ServerlessVpcEndpointOutput
	ToServerlessVpcEndpointOutputWithContext(ctx context.Context) ServerlessVpcEndpointOutput
}

func (*ServerlessVpcEndpoint) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerlessVpcEndpoint)(nil)).Elem()
}

func (i *ServerlessVpcEndpoint) ToServerlessVpcEndpointOutput() ServerlessVpcEndpointOutput {
	return i.ToServerlessVpcEndpointOutputWithContext(context.Background())
}

func (i *ServerlessVpcEndpoint) ToServerlessVpcEndpointOutputWithContext(ctx context.Context) ServerlessVpcEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerlessVpcEndpointOutput)
}

// ServerlessVpcEndpointArrayInput is an input type that accepts ServerlessVpcEndpointArray and ServerlessVpcEndpointArrayOutput values.
// You can construct a concrete instance of `ServerlessVpcEndpointArrayInput` via:
//
//	ServerlessVpcEndpointArray{ ServerlessVpcEndpointArgs{...} }
type ServerlessVpcEndpointArrayInput interface {
	pulumi.Input

	ToServerlessVpcEndpointArrayOutput() ServerlessVpcEndpointArrayOutput
	ToServerlessVpcEndpointArrayOutputWithContext(context.Context) ServerlessVpcEndpointArrayOutput
}

type ServerlessVpcEndpointArray []ServerlessVpcEndpointInput

func (ServerlessVpcEndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServerlessVpcEndpoint)(nil)).Elem()
}

func (i ServerlessVpcEndpointArray) ToServerlessVpcEndpointArrayOutput() ServerlessVpcEndpointArrayOutput {
	return i.ToServerlessVpcEndpointArrayOutputWithContext(context.Background())
}

func (i ServerlessVpcEndpointArray) ToServerlessVpcEndpointArrayOutputWithContext(ctx context.Context) ServerlessVpcEndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerlessVpcEndpointArrayOutput)
}

// ServerlessVpcEndpointMapInput is an input type that accepts ServerlessVpcEndpointMap and ServerlessVpcEndpointMapOutput values.
// You can construct a concrete instance of `ServerlessVpcEndpointMapInput` via:
//
//	ServerlessVpcEndpointMap{ "key": ServerlessVpcEndpointArgs{...} }
type ServerlessVpcEndpointMapInput interface {
	pulumi.Input

	ToServerlessVpcEndpointMapOutput() ServerlessVpcEndpointMapOutput
	ToServerlessVpcEndpointMapOutputWithContext(context.Context) ServerlessVpcEndpointMapOutput
}

type ServerlessVpcEndpointMap map[string]ServerlessVpcEndpointInput

func (ServerlessVpcEndpointMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServerlessVpcEndpoint)(nil)).Elem()
}

func (i ServerlessVpcEndpointMap) ToServerlessVpcEndpointMapOutput() ServerlessVpcEndpointMapOutput {
	return i.ToServerlessVpcEndpointMapOutputWithContext(context.Background())
}

func (i ServerlessVpcEndpointMap) ToServerlessVpcEndpointMapOutputWithContext(ctx context.Context) ServerlessVpcEndpointMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerlessVpcEndpointMapOutput)
}

type ServerlessVpcEndpointOutput struct{ *pulumi.OutputState }

func (ServerlessVpcEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerlessVpcEndpoint)(nil)).Elem()
}

func (o ServerlessVpcEndpointOutput) ToServerlessVpcEndpointOutput() ServerlessVpcEndpointOutput {
	return o
}

func (o ServerlessVpcEndpointOutput) ToServerlessVpcEndpointOutputWithContext(ctx context.Context) ServerlessVpcEndpointOutput {
	return o
}

// Name of the interface endpoint.
func (o ServerlessVpcEndpointOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerlessVpcEndpoint) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// One or more security groups that define the ports, protocols, and sources for inbound traffic that you are authorizing into your endpoint. Up to 5 security groups can be provided.
func (o ServerlessVpcEndpointOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServerlessVpcEndpoint) pulumi.StringArrayOutput { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

// One or more subnet IDs from which you'll access OpenSearch Serverless. Up to 6 subnets can be provided.
func (o ServerlessVpcEndpointOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServerlessVpcEndpoint) pulumi.StringArrayOutput { return v.SubnetIds }).(pulumi.StringArrayOutput)
}

func (o ServerlessVpcEndpointOutput) Timeouts() ServerlessVpcEndpointTimeoutsPtrOutput {
	return o.ApplyT(func(v *ServerlessVpcEndpoint) ServerlessVpcEndpointTimeoutsPtrOutput { return v.Timeouts }).(ServerlessVpcEndpointTimeoutsPtrOutput)
}

// ID of the VPC from which you'll access OpenSearch Serverless.
//
// The following arguments are optional:
func (o ServerlessVpcEndpointOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerlessVpcEndpoint) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

type ServerlessVpcEndpointArrayOutput struct{ *pulumi.OutputState }

func (ServerlessVpcEndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServerlessVpcEndpoint)(nil)).Elem()
}

func (o ServerlessVpcEndpointArrayOutput) ToServerlessVpcEndpointArrayOutput() ServerlessVpcEndpointArrayOutput {
	return o
}

func (o ServerlessVpcEndpointArrayOutput) ToServerlessVpcEndpointArrayOutputWithContext(ctx context.Context) ServerlessVpcEndpointArrayOutput {
	return o
}

func (o ServerlessVpcEndpointArrayOutput) Index(i pulumi.IntInput) ServerlessVpcEndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ServerlessVpcEndpoint {
		return vs[0].([]*ServerlessVpcEndpoint)[vs[1].(int)]
	}).(ServerlessVpcEndpointOutput)
}

type ServerlessVpcEndpointMapOutput struct{ *pulumi.OutputState }

func (ServerlessVpcEndpointMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServerlessVpcEndpoint)(nil)).Elem()
}

func (o ServerlessVpcEndpointMapOutput) ToServerlessVpcEndpointMapOutput() ServerlessVpcEndpointMapOutput {
	return o
}

func (o ServerlessVpcEndpointMapOutput) ToServerlessVpcEndpointMapOutputWithContext(ctx context.Context) ServerlessVpcEndpointMapOutput {
	return o
}

func (o ServerlessVpcEndpointMapOutput) MapIndex(k pulumi.StringInput) ServerlessVpcEndpointOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ServerlessVpcEndpoint {
		return vs[0].(map[string]*ServerlessVpcEndpoint)[vs[1].(string)]
	}).(ServerlessVpcEndpointOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServerlessVpcEndpointInput)(nil)).Elem(), &ServerlessVpcEndpoint{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerlessVpcEndpointArrayInput)(nil)).Elem(), ServerlessVpcEndpointArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerlessVpcEndpointMapInput)(nil)).Elem(), ServerlessVpcEndpointMap{})
	pulumi.RegisterOutputType(ServerlessVpcEndpointOutput{})
	pulumi.RegisterOutputType(ServerlessVpcEndpointArrayOutput{})
	pulumi.RegisterOutputType(ServerlessVpcEndpointMapOutput{})
}
