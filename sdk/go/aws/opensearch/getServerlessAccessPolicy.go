// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package opensearch

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Data source for managing an AWS OpenSearch Serverless Access Policy.
//
// ## Example Usage
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/opensearch"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := opensearch.LookupServerlessAccessPolicy(ctx, &opensearch.LookupServerlessAccessPolicyArgs{
//				Name: aws_opensearchserverless_access_policy.Example.Name,
//				Type: aws_opensearchserverless_access_policy.Example.Type,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupServerlessAccessPolicy(ctx *pulumi.Context, args *LookupServerlessAccessPolicyArgs, opts ...pulumi.InvokeOption) (*LookupServerlessAccessPolicyResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupServerlessAccessPolicyResult
	err := ctx.Invoke("aws:opensearch/getServerlessAccessPolicy:getServerlessAccessPolicy", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getServerlessAccessPolicy.
type LookupServerlessAccessPolicyArgs struct {
	// Name of the policy.
	Name string `pulumi:"name"`
	// Type of access policy. Must be `data`.
	Type string `pulumi:"type"`
}

// A collection of values returned by getServerlessAccessPolicy.
type LookupServerlessAccessPolicyResult struct {
	// Description of the policy. Typically used to store information about the permissions defined in the policy.
	Description string `pulumi:"description"`
	Id          string `pulumi:"id"`
	Name        string `pulumi:"name"`
	// JSON policy document to use as the content for the new policy.
	Policy string `pulumi:"policy"`
	// Version of the policy.
	PolicyVersion string `pulumi:"policyVersion"`
	Type          string `pulumi:"type"`
}

func LookupServerlessAccessPolicyOutput(ctx *pulumi.Context, args LookupServerlessAccessPolicyOutputArgs, opts ...pulumi.InvokeOption) LookupServerlessAccessPolicyResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupServerlessAccessPolicyResult, error) {
			args := v.(LookupServerlessAccessPolicyArgs)
			r, err := LookupServerlessAccessPolicy(ctx, &args, opts...)
			var s LookupServerlessAccessPolicyResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupServerlessAccessPolicyResultOutput)
}

// A collection of arguments for invoking getServerlessAccessPolicy.
type LookupServerlessAccessPolicyOutputArgs struct {
	// Name of the policy.
	Name pulumi.StringInput `pulumi:"name"`
	// Type of access policy. Must be `data`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (LookupServerlessAccessPolicyOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupServerlessAccessPolicyArgs)(nil)).Elem()
}

// A collection of values returned by getServerlessAccessPolicy.
type LookupServerlessAccessPolicyResultOutput struct{ *pulumi.OutputState }

func (LookupServerlessAccessPolicyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupServerlessAccessPolicyResult)(nil)).Elem()
}

func (o LookupServerlessAccessPolicyResultOutput) ToLookupServerlessAccessPolicyResultOutput() LookupServerlessAccessPolicyResultOutput {
	return o
}

func (o LookupServerlessAccessPolicyResultOutput) ToLookupServerlessAccessPolicyResultOutputWithContext(ctx context.Context) LookupServerlessAccessPolicyResultOutput {
	return o
}

func (o LookupServerlessAccessPolicyResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupServerlessAccessPolicyResult] {
	return pulumix.Output[LookupServerlessAccessPolicyResult]{
		OutputState: o.OutputState,
	}
}

// Description of the policy. Typically used to store information about the permissions defined in the policy.
func (o LookupServerlessAccessPolicyResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerlessAccessPolicyResult) string { return v.Description }).(pulumi.StringOutput)
}

func (o LookupServerlessAccessPolicyResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerlessAccessPolicyResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupServerlessAccessPolicyResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerlessAccessPolicyResult) string { return v.Name }).(pulumi.StringOutput)
}

// JSON policy document to use as the content for the new policy.
func (o LookupServerlessAccessPolicyResultOutput) Policy() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerlessAccessPolicyResult) string { return v.Policy }).(pulumi.StringOutput)
}

// Version of the policy.
func (o LookupServerlessAccessPolicyResultOutput) PolicyVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerlessAccessPolicyResult) string { return v.PolicyVersion }).(pulumi.StringOutput)
}

func (o LookupServerlessAccessPolicyResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerlessAccessPolicyResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupServerlessAccessPolicyResultOutput{})
}
