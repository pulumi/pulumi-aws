// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package opensearch

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing an AWS OpenSearch Serverless Security Config.
//
// ## Example Usage
//
// ## Import
//
// Using `pulumi import`, import OpenSearchServerless Access Policy using the `name` argument prefixed with the string `saml/account_id/`. For example:
//
// ```sh
//
//	$ pulumi import aws:opensearch/serverlessSecurityConfig:ServerlessSecurityConfig example saml/123456789012/example
//
// ```
type ServerlessSecurityConfig struct {
	pulumi.CustomResourceState

	// Version of the configuration.
	ConfigVersion pulumi.StringOutput `pulumi:"configVersion"`
	// Description of the security configuration.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Name of the policy.
	Name pulumi.StringOutput `pulumi:"name"`
	// Configuration block for SAML options.
	SamlOptions ServerlessSecurityConfigSamlOptionsPtrOutput `pulumi:"samlOptions"`
	// Type of configuration. Must be `saml`.
	//
	// The following arguments are optional:
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewServerlessSecurityConfig registers a new resource with the given unique name, arguments, and options.
func NewServerlessSecurityConfig(ctx *pulumi.Context,
	name string, args *ServerlessSecurityConfigArgs, opts ...pulumi.ResourceOption) (*ServerlessSecurityConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServerlessSecurityConfig
	err := ctx.RegisterResource("aws:opensearch/serverlessSecurityConfig:ServerlessSecurityConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServerlessSecurityConfig gets an existing ServerlessSecurityConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServerlessSecurityConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServerlessSecurityConfigState, opts ...pulumi.ResourceOption) (*ServerlessSecurityConfig, error) {
	var resource ServerlessSecurityConfig
	err := ctx.ReadResource("aws:opensearch/serverlessSecurityConfig:ServerlessSecurityConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServerlessSecurityConfig resources.
type serverlessSecurityConfigState struct {
	// Version of the configuration.
	ConfigVersion *string `pulumi:"configVersion"`
	// Description of the security configuration.
	Description *string `pulumi:"description"`
	// Name of the policy.
	Name *string `pulumi:"name"`
	// Configuration block for SAML options.
	SamlOptions *ServerlessSecurityConfigSamlOptions `pulumi:"samlOptions"`
	// Type of configuration. Must be `saml`.
	//
	// The following arguments are optional:
	Type *string `pulumi:"type"`
}

type ServerlessSecurityConfigState struct {
	// Version of the configuration.
	ConfigVersion pulumi.StringPtrInput
	// Description of the security configuration.
	Description pulumi.StringPtrInput
	// Name of the policy.
	Name pulumi.StringPtrInput
	// Configuration block for SAML options.
	SamlOptions ServerlessSecurityConfigSamlOptionsPtrInput
	// Type of configuration. Must be `saml`.
	//
	// The following arguments are optional:
	Type pulumi.StringPtrInput
}

func (ServerlessSecurityConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*serverlessSecurityConfigState)(nil)).Elem()
}

type serverlessSecurityConfigArgs struct {
	// Description of the security configuration.
	Description *string `pulumi:"description"`
	// Name of the policy.
	Name *string `pulumi:"name"`
	// Configuration block for SAML options.
	SamlOptions *ServerlessSecurityConfigSamlOptions `pulumi:"samlOptions"`
	// Type of configuration. Must be `saml`.
	//
	// The following arguments are optional:
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a ServerlessSecurityConfig resource.
type ServerlessSecurityConfigArgs struct {
	// Description of the security configuration.
	Description pulumi.StringPtrInput
	// Name of the policy.
	Name pulumi.StringPtrInput
	// Configuration block for SAML options.
	SamlOptions ServerlessSecurityConfigSamlOptionsPtrInput
	// Type of configuration. Must be `saml`.
	//
	// The following arguments are optional:
	Type pulumi.StringInput
}

func (ServerlessSecurityConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serverlessSecurityConfigArgs)(nil)).Elem()
}

type ServerlessSecurityConfigInput interface {
	pulumi.Input

	ToServerlessSecurityConfigOutput() ServerlessSecurityConfigOutput
	ToServerlessSecurityConfigOutputWithContext(ctx context.Context) ServerlessSecurityConfigOutput
}

func (*ServerlessSecurityConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerlessSecurityConfig)(nil)).Elem()
}

func (i *ServerlessSecurityConfig) ToServerlessSecurityConfigOutput() ServerlessSecurityConfigOutput {
	return i.ToServerlessSecurityConfigOutputWithContext(context.Background())
}

func (i *ServerlessSecurityConfig) ToServerlessSecurityConfigOutputWithContext(ctx context.Context) ServerlessSecurityConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerlessSecurityConfigOutput)
}

// ServerlessSecurityConfigArrayInput is an input type that accepts ServerlessSecurityConfigArray and ServerlessSecurityConfigArrayOutput values.
// You can construct a concrete instance of `ServerlessSecurityConfigArrayInput` via:
//
//	ServerlessSecurityConfigArray{ ServerlessSecurityConfigArgs{...} }
type ServerlessSecurityConfigArrayInput interface {
	pulumi.Input

	ToServerlessSecurityConfigArrayOutput() ServerlessSecurityConfigArrayOutput
	ToServerlessSecurityConfigArrayOutputWithContext(context.Context) ServerlessSecurityConfigArrayOutput
}

type ServerlessSecurityConfigArray []ServerlessSecurityConfigInput

func (ServerlessSecurityConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServerlessSecurityConfig)(nil)).Elem()
}

func (i ServerlessSecurityConfigArray) ToServerlessSecurityConfigArrayOutput() ServerlessSecurityConfigArrayOutput {
	return i.ToServerlessSecurityConfigArrayOutputWithContext(context.Background())
}

func (i ServerlessSecurityConfigArray) ToServerlessSecurityConfigArrayOutputWithContext(ctx context.Context) ServerlessSecurityConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerlessSecurityConfigArrayOutput)
}

// ServerlessSecurityConfigMapInput is an input type that accepts ServerlessSecurityConfigMap and ServerlessSecurityConfigMapOutput values.
// You can construct a concrete instance of `ServerlessSecurityConfigMapInput` via:
//
//	ServerlessSecurityConfigMap{ "key": ServerlessSecurityConfigArgs{...} }
type ServerlessSecurityConfigMapInput interface {
	pulumi.Input

	ToServerlessSecurityConfigMapOutput() ServerlessSecurityConfigMapOutput
	ToServerlessSecurityConfigMapOutputWithContext(context.Context) ServerlessSecurityConfigMapOutput
}

type ServerlessSecurityConfigMap map[string]ServerlessSecurityConfigInput

func (ServerlessSecurityConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServerlessSecurityConfig)(nil)).Elem()
}

func (i ServerlessSecurityConfigMap) ToServerlessSecurityConfigMapOutput() ServerlessSecurityConfigMapOutput {
	return i.ToServerlessSecurityConfigMapOutputWithContext(context.Background())
}

func (i ServerlessSecurityConfigMap) ToServerlessSecurityConfigMapOutputWithContext(ctx context.Context) ServerlessSecurityConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerlessSecurityConfigMapOutput)
}

type ServerlessSecurityConfigOutput struct{ *pulumi.OutputState }

func (ServerlessSecurityConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerlessSecurityConfig)(nil)).Elem()
}

func (o ServerlessSecurityConfigOutput) ToServerlessSecurityConfigOutput() ServerlessSecurityConfigOutput {
	return o
}

func (o ServerlessSecurityConfigOutput) ToServerlessSecurityConfigOutputWithContext(ctx context.Context) ServerlessSecurityConfigOutput {
	return o
}

// Version of the configuration.
func (o ServerlessSecurityConfigOutput) ConfigVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerlessSecurityConfig) pulumi.StringOutput { return v.ConfigVersion }).(pulumi.StringOutput)
}

// Description of the security configuration.
func (o ServerlessSecurityConfigOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerlessSecurityConfig) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Name of the policy.
func (o ServerlessSecurityConfigOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerlessSecurityConfig) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Configuration block for SAML options.
func (o ServerlessSecurityConfigOutput) SamlOptions() ServerlessSecurityConfigSamlOptionsPtrOutput {
	return o.ApplyT(func(v *ServerlessSecurityConfig) ServerlessSecurityConfigSamlOptionsPtrOutput { return v.SamlOptions }).(ServerlessSecurityConfigSamlOptionsPtrOutput)
}

// Type of configuration. Must be `saml`.
//
// The following arguments are optional:
func (o ServerlessSecurityConfigOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerlessSecurityConfig) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type ServerlessSecurityConfigArrayOutput struct{ *pulumi.OutputState }

func (ServerlessSecurityConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServerlessSecurityConfig)(nil)).Elem()
}

func (o ServerlessSecurityConfigArrayOutput) ToServerlessSecurityConfigArrayOutput() ServerlessSecurityConfigArrayOutput {
	return o
}

func (o ServerlessSecurityConfigArrayOutput) ToServerlessSecurityConfigArrayOutputWithContext(ctx context.Context) ServerlessSecurityConfigArrayOutput {
	return o
}

func (o ServerlessSecurityConfigArrayOutput) Index(i pulumi.IntInput) ServerlessSecurityConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ServerlessSecurityConfig {
		return vs[0].([]*ServerlessSecurityConfig)[vs[1].(int)]
	}).(ServerlessSecurityConfigOutput)
}

type ServerlessSecurityConfigMapOutput struct{ *pulumi.OutputState }

func (ServerlessSecurityConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServerlessSecurityConfig)(nil)).Elem()
}

func (o ServerlessSecurityConfigMapOutput) ToServerlessSecurityConfigMapOutput() ServerlessSecurityConfigMapOutput {
	return o
}

func (o ServerlessSecurityConfigMapOutput) ToServerlessSecurityConfigMapOutputWithContext(ctx context.Context) ServerlessSecurityConfigMapOutput {
	return o
}

func (o ServerlessSecurityConfigMapOutput) MapIndex(k pulumi.StringInput) ServerlessSecurityConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ServerlessSecurityConfig {
		return vs[0].(map[string]*ServerlessSecurityConfig)[vs[1].(string)]
	}).(ServerlessSecurityConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServerlessSecurityConfigInput)(nil)).Elem(), &ServerlessSecurityConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerlessSecurityConfigArrayInput)(nil)).Elem(), ServerlessSecurityConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerlessSecurityConfigMapInput)(nil)).Elem(), ServerlessSecurityConfigMap{})
	pulumi.RegisterOutputType(ServerlessSecurityConfigOutput{})
	pulumi.RegisterOutputType(ServerlessSecurityConfigArrayOutput{})
	pulumi.RegisterOutputType(ServerlessSecurityConfigMapOutput{})
}
