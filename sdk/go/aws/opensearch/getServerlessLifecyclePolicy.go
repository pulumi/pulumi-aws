// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package opensearch

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Data source for managing an AWS OpenSearch Serverless Lifecycle Policy.
//
// ## Example Usage
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/opensearch"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := opensearch.LookupServerlessLifecyclePolicy(ctx, &opensearch.LookupServerlessLifecyclePolicyArgs{
//				Name: "example-lifecycle-policy",
//				Type: "retention",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupServerlessLifecyclePolicy(ctx *pulumi.Context, args *LookupServerlessLifecyclePolicyArgs, opts ...pulumi.InvokeOption) (*LookupServerlessLifecyclePolicyResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupServerlessLifecyclePolicyResult
	err := ctx.Invoke("aws:opensearch/getServerlessLifecyclePolicy:getServerlessLifecyclePolicy", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getServerlessLifecyclePolicy.
type LookupServerlessLifecyclePolicyArgs struct {
	// Name of the policy
	Name string `pulumi:"name"`
	// Type of lifecycle policy. Must be `retention`.
	Type string `pulumi:"type"`
}

// A collection of values returned by getServerlessLifecyclePolicy.
type LookupServerlessLifecyclePolicyResult struct {
	// The date the lifecycle policy was created.
	CreatedDate string `pulumi:"createdDate"`
	// Description of the policy. Typically used to store information about the permissions defined in the policy.
	Description string `pulumi:"description"`
	Id          string `pulumi:"id"`
	// The date the lifecycle policy was last modified.
	LastModifiedDate string `pulumi:"lastModifiedDate"`
	Name             string `pulumi:"name"`
	// JSON policy document to use as the content for the new policy.
	Policy string `pulumi:"policy"`
	// Version of the policy.
	PolicyVersion string `pulumi:"policyVersion"`
	Type          string `pulumi:"type"`
}

func LookupServerlessLifecyclePolicyOutput(ctx *pulumi.Context, args LookupServerlessLifecyclePolicyOutputArgs, opts ...pulumi.InvokeOption) LookupServerlessLifecyclePolicyResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupServerlessLifecyclePolicyResult, error) {
			args := v.(LookupServerlessLifecyclePolicyArgs)
			r, err := LookupServerlessLifecyclePolicy(ctx, &args, opts...)
			var s LookupServerlessLifecyclePolicyResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupServerlessLifecyclePolicyResultOutput)
}

// A collection of arguments for invoking getServerlessLifecyclePolicy.
type LookupServerlessLifecyclePolicyOutputArgs struct {
	// Name of the policy
	Name pulumi.StringInput `pulumi:"name"`
	// Type of lifecycle policy. Must be `retention`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (LookupServerlessLifecyclePolicyOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupServerlessLifecyclePolicyArgs)(nil)).Elem()
}

// A collection of values returned by getServerlessLifecyclePolicy.
type LookupServerlessLifecyclePolicyResultOutput struct{ *pulumi.OutputState }

func (LookupServerlessLifecyclePolicyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupServerlessLifecyclePolicyResult)(nil)).Elem()
}

func (o LookupServerlessLifecyclePolicyResultOutput) ToLookupServerlessLifecyclePolicyResultOutput() LookupServerlessLifecyclePolicyResultOutput {
	return o
}

func (o LookupServerlessLifecyclePolicyResultOutput) ToLookupServerlessLifecyclePolicyResultOutputWithContext(ctx context.Context) LookupServerlessLifecyclePolicyResultOutput {
	return o
}

// The date the lifecycle policy was created.
func (o LookupServerlessLifecyclePolicyResultOutput) CreatedDate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerlessLifecyclePolicyResult) string { return v.CreatedDate }).(pulumi.StringOutput)
}

// Description of the policy. Typically used to store information about the permissions defined in the policy.
func (o LookupServerlessLifecyclePolicyResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerlessLifecyclePolicyResult) string { return v.Description }).(pulumi.StringOutput)
}

func (o LookupServerlessLifecyclePolicyResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerlessLifecyclePolicyResult) string { return v.Id }).(pulumi.StringOutput)
}

// The date the lifecycle policy was last modified.
func (o LookupServerlessLifecyclePolicyResultOutput) LastModifiedDate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerlessLifecyclePolicyResult) string { return v.LastModifiedDate }).(pulumi.StringOutput)
}

func (o LookupServerlessLifecyclePolicyResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerlessLifecyclePolicyResult) string { return v.Name }).(pulumi.StringOutput)
}

// JSON policy document to use as the content for the new policy.
func (o LookupServerlessLifecyclePolicyResultOutput) Policy() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerlessLifecyclePolicyResult) string { return v.Policy }).(pulumi.StringOutput)
}

// Version of the policy.
func (o LookupServerlessLifecyclePolicyResultOutput) PolicyVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerlessLifecyclePolicyResult) string { return v.PolicyVersion }).(pulumi.StringOutput)
}

func (o LookupServerlessLifecyclePolicyResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerlessLifecyclePolicyResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupServerlessLifecyclePolicyResultOutput{})
}
