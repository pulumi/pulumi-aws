// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package opensearch

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages an [AWS Opensearch Inbound Connection Accepter](https://docs.aws.amazon.com/opensearch-service/latest/APIReference/API_AcceptInboundConnection.html). If connecting domains from different AWS accounts, ensure that the accepter is configured to use the AWS account where the _remote_ opensearch domain exists.
//
// ## Example Usage
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws"
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/opensearch"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			currentCallerIdentity, err := aws.GetCallerIdentity(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			currentRegion, err := aws.GetRegion(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			fooOutboundConnection, err := opensearch.NewOutboundConnection(ctx, "fooOutboundConnection", &opensearch.OutboundConnectionArgs{
//				ConnectionAlias: pulumi.String("outbound_connection"),
//				LocalDomainInfo: &opensearch.OutboundConnectionLocalDomainInfoArgs{
//					OwnerId:    *pulumi.String(currentCallerIdentity.AccountId),
//					Region:     *pulumi.String(currentRegion.Name),
//					DomainName: pulumi.Any(aws_opensearch_domain.Local_domain.Domain_name),
//				},
//				RemoteDomainInfo: &opensearch.OutboundConnectionRemoteDomainInfoArgs{
//					OwnerId:    *pulumi.String(currentCallerIdentity.AccountId),
//					Region:     *pulumi.String(currentRegion.Name),
//					DomainName: pulumi.Any(aws_opensearch_domain.Remote_domain.Domain_name),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = opensearch.NewInboundConnectionAccepter(ctx, "fooInboundConnectionAccepter", &opensearch.InboundConnectionAccepterArgs{
//				ConnectionId: fooOutboundConnection.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import AWS Opensearch Inbound Connection Accepters using the Inbound Connection ID. For example:
//
// ```sh
//
//	$ pulumi import aws:opensearch/inboundConnectionAccepter:InboundConnectionAccepter foo connection-id
//
// ```
type InboundConnectionAccepter struct {
	pulumi.CustomResourceState

	// Specifies the ID of the connection to accept.
	ConnectionId pulumi.StringOutput `pulumi:"connectionId"`
	// Status of the connection request.
	ConnectionStatus pulumi.StringOutput `pulumi:"connectionStatus"`
}

// NewInboundConnectionAccepter registers a new resource with the given unique name, arguments, and options.
func NewInboundConnectionAccepter(ctx *pulumi.Context,
	name string, args *InboundConnectionAccepterArgs, opts ...pulumi.ResourceOption) (*InboundConnectionAccepter, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConnectionId == nil {
		return nil, errors.New("invalid value for required argument 'ConnectionId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource InboundConnectionAccepter
	err := ctx.RegisterResource("aws:opensearch/inboundConnectionAccepter:InboundConnectionAccepter", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInboundConnectionAccepter gets an existing InboundConnectionAccepter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInboundConnectionAccepter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InboundConnectionAccepterState, opts ...pulumi.ResourceOption) (*InboundConnectionAccepter, error) {
	var resource InboundConnectionAccepter
	err := ctx.ReadResource("aws:opensearch/inboundConnectionAccepter:InboundConnectionAccepter", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InboundConnectionAccepter resources.
type inboundConnectionAccepterState struct {
	// Specifies the ID of the connection to accept.
	ConnectionId *string `pulumi:"connectionId"`
	// Status of the connection request.
	ConnectionStatus *string `pulumi:"connectionStatus"`
}

type InboundConnectionAccepterState struct {
	// Specifies the ID of the connection to accept.
	ConnectionId pulumi.StringPtrInput
	// Status of the connection request.
	ConnectionStatus pulumi.StringPtrInput
}

func (InboundConnectionAccepterState) ElementType() reflect.Type {
	return reflect.TypeOf((*inboundConnectionAccepterState)(nil)).Elem()
}

type inboundConnectionAccepterArgs struct {
	// Specifies the ID of the connection to accept.
	ConnectionId string `pulumi:"connectionId"`
}

// The set of arguments for constructing a InboundConnectionAccepter resource.
type InboundConnectionAccepterArgs struct {
	// Specifies the ID of the connection to accept.
	ConnectionId pulumi.StringInput
}

func (InboundConnectionAccepterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*inboundConnectionAccepterArgs)(nil)).Elem()
}

type InboundConnectionAccepterInput interface {
	pulumi.Input

	ToInboundConnectionAccepterOutput() InboundConnectionAccepterOutput
	ToInboundConnectionAccepterOutputWithContext(ctx context.Context) InboundConnectionAccepterOutput
}

func (*InboundConnectionAccepter) ElementType() reflect.Type {
	return reflect.TypeOf((**InboundConnectionAccepter)(nil)).Elem()
}

func (i *InboundConnectionAccepter) ToInboundConnectionAccepterOutput() InboundConnectionAccepterOutput {
	return i.ToInboundConnectionAccepterOutputWithContext(context.Background())
}

func (i *InboundConnectionAccepter) ToInboundConnectionAccepterOutputWithContext(ctx context.Context) InboundConnectionAccepterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InboundConnectionAccepterOutput)
}

func (i *InboundConnectionAccepter) ToOutput(ctx context.Context) pulumix.Output[*InboundConnectionAccepter] {
	return pulumix.Output[*InboundConnectionAccepter]{
		OutputState: i.ToInboundConnectionAccepterOutputWithContext(ctx).OutputState,
	}
}

// InboundConnectionAccepterArrayInput is an input type that accepts InboundConnectionAccepterArray and InboundConnectionAccepterArrayOutput values.
// You can construct a concrete instance of `InboundConnectionAccepterArrayInput` via:
//
//	InboundConnectionAccepterArray{ InboundConnectionAccepterArgs{...} }
type InboundConnectionAccepterArrayInput interface {
	pulumi.Input

	ToInboundConnectionAccepterArrayOutput() InboundConnectionAccepterArrayOutput
	ToInboundConnectionAccepterArrayOutputWithContext(context.Context) InboundConnectionAccepterArrayOutput
}

type InboundConnectionAccepterArray []InboundConnectionAccepterInput

func (InboundConnectionAccepterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InboundConnectionAccepter)(nil)).Elem()
}

func (i InboundConnectionAccepterArray) ToInboundConnectionAccepterArrayOutput() InboundConnectionAccepterArrayOutput {
	return i.ToInboundConnectionAccepterArrayOutputWithContext(context.Background())
}

func (i InboundConnectionAccepterArray) ToInboundConnectionAccepterArrayOutputWithContext(ctx context.Context) InboundConnectionAccepterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InboundConnectionAccepterArrayOutput)
}

func (i InboundConnectionAccepterArray) ToOutput(ctx context.Context) pulumix.Output[[]*InboundConnectionAccepter] {
	return pulumix.Output[[]*InboundConnectionAccepter]{
		OutputState: i.ToInboundConnectionAccepterArrayOutputWithContext(ctx).OutputState,
	}
}

// InboundConnectionAccepterMapInput is an input type that accepts InboundConnectionAccepterMap and InboundConnectionAccepterMapOutput values.
// You can construct a concrete instance of `InboundConnectionAccepterMapInput` via:
//
//	InboundConnectionAccepterMap{ "key": InboundConnectionAccepterArgs{...} }
type InboundConnectionAccepterMapInput interface {
	pulumi.Input

	ToInboundConnectionAccepterMapOutput() InboundConnectionAccepterMapOutput
	ToInboundConnectionAccepterMapOutputWithContext(context.Context) InboundConnectionAccepterMapOutput
}

type InboundConnectionAccepterMap map[string]InboundConnectionAccepterInput

func (InboundConnectionAccepterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InboundConnectionAccepter)(nil)).Elem()
}

func (i InboundConnectionAccepterMap) ToInboundConnectionAccepterMapOutput() InboundConnectionAccepterMapOutput {
	return i.ToInboundConnectionAccepterMapOutputWithContext(context.Background())
}

func (i InboundConnectionAccepterMap) ToInboundConnectionAccepterMapOutputWithContext(ctx context.Context) InboundConnectionAccepterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InboundConnectionAccepterMapOutput)
}

func (i InboundConnectionAccepterMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*InboundConnectionAccepter] {
	return pulumix.Output[map[string]*InboundConnectionAccepter]{
		OutputState: i.ToInboundConnectionAccepterMapOutputWithContext(ctx).OutputState,
	}
}

type InboundConnectionAccepterOutput struct{ *pulumi.OutputState }

func (InboundConnectionAccepterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InboundConnectionAccepter)(nil)).Elem()
}

func (o InboundConnectionAccepterOutput) ToInboundConnectionAccepterOutput() InboundConnectionAccepterOutput {
	return o
}

func (o InboundConnectionAccepterOutput) ToInboundConnectionAccepterOutputWithContext(ctx context.Context) InboundConnectionAccepterOutput {
	return o
}

func (o InboundConnectionAccepterOutput) ToOutput(ctx context.Context) pulumix.Output[*InboundConnectionAccepter] {
	return pulumix.Output[*InboundConnectionAccepter]{
		OutputState: o.OutputState,
	}
}

// Specifies the ID of the connection to accept.
func (o InboundConnectionAccepterOutput) ConnectionId() pulumi.StringOutput {
	return o.ApplyT(func(v *InboundConnectionAccepter) pulumi.StringOutput { return v.ConnectionId }).(pulumi.StringOutput)
}

// Status of the connection request.
func (o InboundConnectionAccepterOutput) ConnectionStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *InboundConnectionAccepter) pulumi.StringOutput { return v.ConnectionStatus }).(pulumi.StringOutput)
}

type InboundConnectionAccepterArrayOutput struct{ *pulumi.OutputState }

func (InboundConnectionAccepterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InboundConnectionAccepter)(nil)).Elem()
}

func (o InboundConnectionAccepterArrayOutput) ToInboundConnectionAccepterArrayOutput() InboundConnectionAccepterArrayOutput {
	return o
}

func (o InboundConnectionAccepterArrayOutput) ToInboundConnectionAccepterArrayOutputWithContext(ctx context.Context) InboundConnectionAccepterArrayOutput {
	return o
}

func (o InboundConnectionAccepterArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*InboundConnectionAccepter] {
	return pulumix.Output[[]*InboundConnectionAccepter]{
		OutputState: o.OutputState,
	}
}

func (o InboundConnectionAccepterArrayOutput) Index(i pulumi.IntInput) InboundConnectionAccepterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *InboundConnectionAccepter {
		return vs[0].([]*InboundConnectionAccepter)[vs[1].(int)]
	}).(InboundConnectionAccepterOutput)
}

type InboundConnectionAccepterMapOutput struct{ *pulumi.OutputState }

func (InboundConnectionAccepterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InboundConnectionAccepter)(nil)).Elem()
}

func (o InboundConnectionAccepterMapOutput) ToInboundConnectionAccepterMapOutput() InboundConnectionAccepterMapOutput {
	return o
}

func (o InboundConnectionAccepterMapOutput) ToInboundConnectionAccepterMapOutputWithContext(ctx context.Context) InboundConnectionAccepterMapOutput {
	return o
}

func (o InboundConnectionAccepterMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*InboundConnectionAccepter] {
	return pulumix.Output[map[string]*InboundConnectionAccepter]{
		OutputState: o.OutputState,
	}
}

func (o InboundConnectionAccepterMapOutput) MapIndex(k pulumi.StringInput) InboundConnectionAccepterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *InboundConnectionAccepter {
		return vs[0].(map[string]*InboundConnectionAccepter)[vs[1].(string)]
	}).(InboundConnectionAccepterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InboundConnectionAccepterInput)(nil)).Elem(), &InboundConnectionAccepter{})
	pulumi.RegisterInputType(reflect.TypeOf((*InboundConnectionAccepterArrayInput)(nil)).Elem(), InboundConnectionAccepterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InboundConnectionAccepterMapInput)(nil)).Elem(), InboundConnectionAccepterMap{})
	pulumi.RegisterOutputType(InboundConnectionAccepterOutput{})
	pulumi.RegisterOutputType(InboundConnectionAccepterArrayOutput{})
	pulumi.RegisterOutputType(InboundConnectionAccepterMapOutput{})
}
