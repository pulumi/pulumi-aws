// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package opensearch

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing an AWS OpenSearch Serverless Security Policy.
//
// ## Example Usage
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/opensearch"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"Rules": []map[string]interface{}{
//					map[string]interface{}{
//						"Resource": []string{
//							"collection/example",
//						},
//						"ResourceType": "collection",
//					},
//				},
//				"AWSOwnedKey": true,
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			_, err = opensearch.NewServerlessSecurityPolicy(ctx, "example", &opensearch.ServerlessSecurityPolicyArgs{
//				Name:   pulumi.String("example"),
//				Type:   pulumi.String("encryption"),
//				Policy: pulumi.String(json0),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Network
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/opensearch"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			tmpJSON0, err := json.Marshal([]map[string]interface{}{
//				map[string]interface{}{
//					"Description": "Public access fo example collection",
//					"Rules": []map[string]interface{}{
//						map[string]interface{}{
//							"ResourceType": "collection",
//							"Resource": []string{
//								"collection/example*",
//							},
//						},
//					},
//					"AllowFromPublic": true,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			_, err = opensearch.NewServerlessSecurityPolicy(ctx, "example", &opensearch.ServerlessSecurityPolicyArgs{
//				Name:   pulumi.String("example"),
//				Type:   pulumi.String("network"),
//				Policy: pulumi.String(json0),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// OpenSearchServerless Security Policy can be imported using the `name` and `type` arguments separated by a slash (`/`), e.g.,
//
// ```sh
//
//	$ pulumi import aws:opensearch/serverlessSecurityPolicy:ServerlessSecurityPolicy example example/encryption
//
// ```
type ServerlessSecurityPolicy struct {
	pulumi.CustomResourceState

	// Description of the policy. Typically used to store information about the permissions defined in the policy.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Name of the policy.
	Name pulumi.StringOutput `pulumi:"name"`
	// JSON policy document to use as the content for the new policy
	Policy pulumi.StringOutput `pulumi:"policy"`
	// Version of the policy.
	PolicyVersion pulumi.StringOutput `pulumi:"policyVersion"`
	// Type of security policy. One of `encryption` or `network`.
	//
	// The following arguments are optional:
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewServerlessSecurityPolicy registers a new resource with the given unique name, arguments, and options.
func NewServerlessSecurityPolicy(ctx *pulumi.Context,
	name string, args *ServerlessSecurityPolicyArgs, opts ...pulumi.ResourceOption) (*ServerlessSecurityPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.Policy == nil {
		return nil, errors.New("invalid value for required argument 'Policy'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	var resource ServerlessSecurityPolicy
	err := ctx.RegisterResource("aws:opensearch/serverlessSecurityPolicy:ServerlessSecurityPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServerlessSecurityPolicy gets an existing ServerlessSecurityPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServerlessSecurityPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServerlessSecurityPolicyState, opts ...pulumi.ResourceOption) (*ServerlessSecurityPolicy, error) {
	var resource ServerlessSecurityPolicy
	err := ctx.ReadResource("aws:opensearch/serverlessSecurityPolicy:ServerlessSecurityPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServerlessSecurityPolicy resources.
type serverlessSecurityPolicyState struct {
	// Description of the policy. Typically used to store information about the permissions defined in the policy.
	Description *string `pulumi:"description"`
	// Name of the policy.
	Name *string `pulumi:"name"`
	// JSON policy document to use as the content for the new policy
	Policy *string `pulumi:"policy"`
	// Version of the policy.
	PolicyVersion *string `pulumi:"policyVersion"`
	// Type of security policy. One of `encryption` or `network`.
	//
	// The following arguments are optional:
	Type *string `pulumi:"type"`
}

type ServerlessSecurityPolicyState struct {
	// Description of the policy. Typically used to store information about the permissions defined in the policy.
	Description pulumi.StringPtrInput
	// Name of the policy.
	Name pulumi.StringPtrInput
	// JSON policy document to use as the content for the new policy
	Policy pulumi.StringPtrInput
	// Version of the policy.
	PolicyVersion pulumi.StringPtrInput
	// Type of security policy. One of `encryption` or `network`.
	//
	// The following arguments are optional:
	Type pulumi.StringPtrInput
}

func (ServerlessSecurityPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*serverlessSecurityPolicyState)(nil)).Elem()
}

type serverlessSecurityPolicyArgs struct {
	// Description of the policy. Typically used to store information about the permissions defined in the policy.
	Description *string `pulumi:"description"`
	// Name of the policy.
	Name string `pulumi:"name"`
	// JSON policy document to use as the content for the new policy
	Policy string `pulumi:"policy"`
	// Type of security policy. One of `encryption` or `network`.
	//
	// The following arguments are optional:
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a ServerlessSecurityPolicy resource.
type ServerlessSecurityPolicyArgs struct {
	// Description of the policy. Typically used to store information about the permissions defined in the policy.
	Description pulumi.StringPtrInput
	// Name of the policy.
	Name pulumi.StringInput
	// JSON policy document to use as the content for the new policy
	Policy pulumi.StringInput
	// Type of security policy. One of `encryption` or `network`.
	//
	// The following arguments are optional:
	Type pulumi.StringInput
}

func (ServerlessSecurityPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serverlessSecurityPolicyArgs)(nil)).Elem()
}

type ServerlessSecurityPolicyInput interface {
	pulumi.Input

	ToServerlessSecurityPolicyOutput() ServerlessSecurityPolicyOutput
	ToServerlessSecurityPolicyOutputWithContext(ctx context.Context) ServerlessSecurityPolicyOutput
}

func (*ServerlessSecurityPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerlessSecurityPolicy)(nil)).Elem()
}

func (i *ServerlessSecurityPolicy) ToServerlessSecurityPolicyOutput() ServerlessSecurityPolicyOutput {
	return i.ToServerlessSecurityPolicyOutputWithContext(context.Background())
}

func (i *ServerlessSecurityPolicy) ToServerlessSecurityPolicyOutputWithContext(ctx context.Context) ServerlessSecurityPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerlessSecurityPolicyOutput)
}

// ServerlessSecurityPolicyArrayInput is an input type that accepts ServerlessSecurityPolicyArray and ServerlessSecurityPolicyArrayOutput values.
// You can construct a concrete instance of `ServerlessSecurityPolicyArrayInput` via:
//
//	ServerlessSecurityPolicyArray{ ServerlessSecurityPolicyArgs{...} }
type ServerlessSecurityPolicyArrayInput interface {
	pulumi.Input

	ToServerlessSecurityPolicyArrayOutput() ServerlessSecurityPolicyArrayOutput
	ToServerlessSecurityPolicyArrayOutputWithContext(context.Context) ServerlessSecurityPolicyArrayOutput
}

type ServerlessSecurityPolicyArray []ServerlessSecurityPolicyInput

func (ServerlessSecurityPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServerlessSecurityPolicy)(nil)).Elem()
}

func (i ServerlessSecurityPolicyArray) ToServerlessSecurityPolicyArrayOutput() ServerlessSecurityPolicyArrayOutput {
	return i.ToServerlessSecurityPolicyArrayOutputWithContext(context.Background())
}

func (i ServerlessSecurityPolicyArray) ToServerlessSecurityPolicyArrayOutputWithContext(ctx context.Context) ServerlessSecurityPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerlessSecurityPolicyArrayOutput)
}

// ServerlessSecurityPolicyMapInput is an input type that accepts ServerlessSecurityPolicyMap and ServerlessSecurityPolicyMapOutput values.
// You can construct a concrete instance of `ServerlessSecurityPolicyMapInput` via:
//
//	ServerlessSecurityPolicyMap{ "key": ServerlessSecurityPolicyArgs{...} }
type ServerlessSecurityPolicyMapInput interface {
	pulumi.Input

	ToServerlessSecurityPolicyMapOutput() ServerlessSecurityPolicyMapOutput
	ToServerlessSecurityPolicyMapOutputWithContext(context.Context) ServerlessSecurityPolicyMapOutput
}

type ServerlessSecurityPolicyMap map[string]ServerlessSecurityPolicyInput

func (ServerlessSecurityPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServerlessSecurityPolicy)(nil)).Elem()
}

func (i ServerlessSecurityPolicyMap) ToServerlessSecurityPolicyMapOutput() ServerlessSecurityPolicyMapOutput {
	return i.ToServerlessSecurityPolicyMapOutputWithContext(context.Background())
}

func (i ServerlessSecurityPolicyMap) ToServerlessSecurityPolicyMapOutputWithContext(ctx context.Context) ServerlessSecurityPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerlessSecurityPolicyMapOutput)
}

type ServerlessSecurityPolicyOutput struct{ *pulumi.OutputState }

func (ServerlessSecurityPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerlessSecurityPolicy)(nil)).Elem()
}

func (o ServerlessSecurityPolicyOutput) ToServerlessSecurityPolicyOutput() ServerlessSecurityPolicyOutput {
	return o
}

func (o ServerlessSecurityPolicyOutput) ToServerlessSecurityPolicyOutputWithContext(ctx context.Context) ServerlessSecurityPolicyOutput {
	return o
}

// Description of the policy. Typically used to store information about the permissions defined in the policy.
func (o ServerlessSecurityPolicyOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerlessSecurityPolicy) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Name of the policy.
func (o ServerlessSecurityPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerlessSecurityPolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// JSON policy document to use as the content for the new policy
func (o ServerlessSecurityPolicyOutput) Policy() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerlessSecurityPolicy) pulumi.StringOutput { return v.Policy }).(pulumi.StringOutput)
}

// Version of the policy.
func (o ServerlessSecurityPolicyOutput) PolicyVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerlessSecurityPolicy) pulumi.StringOutput { return v.PolicyVersion }).(pulumi.StringOutput)
}

// Type of security policy. One of `encryption` or `network`.
//
// The following arguments are optional:
func (o ServerlessSecurityPolicyOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerlessSecurityPolicy) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type ServerlessSecurityPolicyArrayOutput struct{ *pulumi.OutputState }

func (ServerlessSecurityPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServerlessSecurityPolicy)(nil)).Elem()
}

func (o ServerlessSecurityPolicyArrayOutput) ToServerlessSecurityPolicyArrayOutput() ServerlessSecurityPolicyArrayOutput {
	return o
}

func (o ServerlessSecurityPolicyArrayOutput) ToServerlessSecurityPolicyArrayOutputWithContext(ctx context.Context) ServerlessSecurityPolicyArrayOutput {
	return o
}

func (o ServerlessSecurityPolicyArrayOutput) Index(i pulumi.IntInput) ServerlessSecurityPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ServerlessSecurityPolicy {
		return vs[0].([]*ServerlessSecurityPolicy)[vs[1].(int)]
	}).(ServerlessSecurityPolicyOutput)
}

type ServerlessSecurityPolicyMapOutput struct{ *pulumi.OutputState }

func (ServerlessSecurityPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServerlessSecurityPolicy)(nil)).Elem()
}

func (o ServerlessSecurityPolicyMapOutput) ToServerlessSecurityPolicyMapOutput() ServerlessSecurityPolicyMapOutput {
	return o
}

func (o ServerlessSecurityPolicyMapOutput) ToServerlessSecurityPolicyMapOutputWithContext(ctx context.Context) ServerlessSecurityPolicyMapOutput {
	return o
}

func (o ServerlessSecurityPolicyMapOutput) MapIndex(k pulumi.StringInput) ServerlessSecurityPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ServerlessSecurityPolicy {
		return vs[0].(map[string]*ServerlessSecurityPolicy)[vs[1].(string)]
	}).(ServerlessSecurityPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServerlessSecurityPolicyInput)(nil)).Elem(), &ServerlessSecurityPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerlessSecurityPolicyArrayInput)(nil)).Elem(), ServerlessSecurityPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerlessSecurityPolicyMapInput)(nil)).Elem(), ServerlessSecurityPolicyMap{})
	pulumi.RegisterOutputType(ServerlessSecurityPolicyOutput{})
	pulumi.RegisterOutputType(ServerlessSecurityPolicyArrayOutput{})
	pulumi.RegisterOutputType(ServerlessSecurityPolicyMapOutput{})
}
